PACKAGE BODY unapipap AS

TYPE BOOLEAN_TABLE_TYPE IS TABLE OF BOOLEAN INDEX BY BINARY_INTEGER;
L_SQLERRM         VARCHAR2(255);
L_SQL_STRING      VARCHAR2(4000);
L_WHERE_CLAUSE    VARCHAR2(1000);
L_EVENT_TP        UTEV.EV_TP%TYPE;
L_TIMED_EVENT_TP  UTEVTIMED.EV_TP%TYPE;
L_RET_CODE        NUMBER;
L_RESULT          NUMBER;
L_FETCHED_ROWS    NUMBER;
L_EV_SEQ_NR       NUMBER;
L_EV_DETAILS      VARCHAR2(255);
STPERROR          EXCEPTION;


P_GETSCPACOMMENT_CURSOR       INTEGER;
P_HS_DETAILS_CURSOR           INTEGER;
P_HS_CURSOR                   INTEGER;

FUNCTION GETVERSION
   RETURN VARCHAR2
IS
BEGIN
   RETURN('06.07.00.00_00.13');
EXCEPTION
   WHEN OTHERS THEN
      RETURN (NULL);
END GETVERSION;

FUNCTION INITSCPAATTRIBUTE
(A_SC               IN     VARCHAR2,                  
 A_PP               IN     VARCHAR2,                  
 A_PP_VERSION       IN     VARCHAR2,                  
 A_PP_KEY1          IN     VARCHAR2,                  
 A_PP_KEY2          IN     VARCHAR2,                  
 A_PP_KEY3          IN     VARCHAR2,                  
 A_PP_KEY4          IN     VARCHAR2,                  
 A_PP_KEY5          IN     VARCHAR2,                  
 A_PR               IN     VARCHAR2,                  
 A_PR_VERSION       IN     VARCHAR2,                  
 A_AU               OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_AU_VERSION       OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_VALUE            OUT    UNAPIGEN.VC40_TABLE_TYPE,  
 A_DESCRIPTION      OUT    UNAPIGEN.VC40_TABLE_TYPE,  
 A_IS_PROTECTED     OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_SINGLE_VALUED    OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NEW_VAL_ALLOWED  OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_STORE_DB         OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_VALUE_LIST_TP    OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_RUN_MODE         OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_SERVICE          OUT    UNAPIGEN.VC255_TABLE_TYPE, 
 A_CF_VALUE         OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_NR_OF_ROWS       IN OUT NUMBER)                    
RETURN NUMBER IS

L_PP           VARCHAR2(20);
L_PP_VERSION   VARCHAR2(20);

CURSOR L_PPPR_CURSOR(C_PP VARCHAR2, C_PP_VERSION VARCHAR2, C_PP_KEY1 VARCHAR2, C_PP_KEY2 VARCHAR2, C_PP_KEY3 VARCHAR2, C_PP_KEY4 VARCHAR2, C_PP_KEY5 VARCHAR2, C_PR VARCHAR2, C_PR_VERSION VARCHAR2) IS
   SELECT PP
   FROM UTPPPR
   WHERE PP = C_PP
   AND VERSION = C_PP_VERSION
   AND PP_KEY1 = C_PP_KEY1
   AND PP_KEY2 = C_PP_KEY2
   AND PP_KEY3 = C_PP_KEY3
   AND PP_KEY4 = C_PP_KEY4
   AND PP_KEY5 = C_PP_KEY5
   AND PR = C_PR
   AND UNAPIGEN.VALIDATEVERSION('pr', PR, PR_VERSION) = C_PR_VERSION;
L_PPPR_REC L_PPPR_CURSOR%ROWTYPE;

CURSOR L_PPPRAU_CURSOR (C_PP VARCHAR2, C_PP_VERSION VARCHAR2, C_PP_KEY1 VARCHAR2, C_PP_KEY2 VARCHAR2, C_PP_KEY3 VARCHAR2, C_PP_KEY4 VARCHAR2, C_PP_KEY5 VARCHAR2, C_PR VARCHAR2, C_PR_VERSION VARCHAR2) IS
   
   
   
   
   
   SELECT A.AU, A.AUSEQ, D.VERSION, A.VALUE, D.DESCRIPTION, D.IS_PROTECTED, D.SINGLE_VALUED,
       D.NEW_VAL_ALLOWED, D.STORE_DB, D.VALUE_LIST_TP,
       D.RUN_MODE, D.SERVICE, D.CF_VALUE
   FROM UTPR B, UTPPPR C, UTAU D, UTPRAU A
   WHERE A.PR = C_PR
     AND A.VERSION = C_PR_VERSION
     AND A.PR = B.PR
     AND A.VERSION = B.VERSION
     AND A.AU = D.AU
     AND UNAPIGEN.VALIDATEVERSION('au', A.AU, A.AU_VERSION) = D.VERSION
     AND C.PP = C_PP
     AND C.VERSION = C_PP_VERSION     
     AND C.PP_KEY1 = C_PP_KEY1     
     AND C.PP_KEY2 = C_PP_KEY2     
     AND C.PP_KEY3 = C_PP_KEY3     
     AND C.PP_KEY4 = C_PP_KEY4     
     AND C.PP_KEY5 = C_PP_KEY5     
     AND C.PR = B.PR
     AND UNAPIGEN.VALIDATEVERSION('pr', C.PR, C.PR_VERSION) = B.VERSION     
     AND C.IS_PP = '0'
     AND DECODE(D.INHERIT_AU,'0',DECODE(C.INHERIT_AU,'2',B.INHERIT_AU,C.INHERIT_AU),D.INHERIT_AU) = '1'
     AND A.AU NOT IN (SELECT DISTINCT J.AU
                      FROM UTPPPRAU J, UTPPPR K, UTPR L, UTAU M
                      WHERE J.PR = L.PR
                        AND UNAPIGEN.VALIDATEVERSION('pr', J.PR, J.PR_VERSION) = L.VERSION                      
                        AND J.PP = C_PP
                        AND J.VERSION = C_PP_VERSION
                        AND J.PP_KEY1 = C_PP_KEY1     
                        AND J.PP_KEY2 = C_PP_KEY2     
                        AND J.PP_KEY3 = C_PP_KEY3     
                        AND J.PP_KEY4 = C_PP_KEY4     
                        AND J.PP_KEY5 = C_PP_KEY5     
                        AND J.PR = C_PR
                        AND UNAPIGEN.VALIDATEVERSION('pr', J.PR, J.PR_VERSION) = C_PR_VERSION
                        AND J.PR = K.PR
                        AND UNAPIGEN.VALIDATEVERSION('pr', J.PR, J.PR_VERSION) = UNAPIGEN.VALIDATEVERSION('pr', K.PR, K.PR_VERSION)                                                
                        AND J.PP = K.PP
                        AND J.VERSION = K.VERSION
                        AND J.PP_KEY1 = K.PP_KEY1     
                        AND J.PP_KEY2 = K.PP_KEY2     
                        AND J.PP_KEY3 = K.PP_KEY3     
                        AND J.PP_KEY4 = K.PP_KEY4     
                        AND J.PP_KEY5 = K.PP_KEY5                             
      AND K.IS_PP = '0'
                        AND DECODE(M.INHERIT_AU,'0',DECODE(K.INHERIT_AU,'2',L.INHERIT_AU,K.INHERIT_AU),M.INHERIT_AU) = '1'
                        AND M.AU = J.AU
                        AND M.VERSION = UNAPIGEN.VALIDATEVERSION('au', J.AU, J.AU_VERSION))
   
   
   
   
   UNION
   SELECT V.AU, V.AUSEQ+500, Y.VERSION, V.VALUE, Y.DESCRIPTION, Y.IS_PROTECTED, Y.SINGLE_VALUED,
       Y.NEW_VAL_ALLOWED, Y.STORE_DB, Y.VALUE_LIST_TP,
       Y.RUN_MODE, Y.SERVICE, Y.CF_VALUE
   FROM UTPPPRAU V, UTPPPR W, UTPR X, UTAU Y
   WHERE V.PR = X.PR
     AND UNAPIGEN.VALIDATEVERSION('pr', V.PR, V.PR_VERSION) = X.VERSION   
     AND V.PP = C_PP
     AND V.VERSION = C_PP_VERSION     
     AND V.PP_KEY1 = C_PP_KEY1     
     AND V.PP_KEY2 = C_PP_KEY2     
     AND V.PP_KEY3 = C_PP_KEY3     
     AND V.PP_KEY4 = C_PP_KEY4     
     AND V.PP_KEY5 = C_PP_KEY5     
     AND V.PR = C_PR
     AND UNAPIGEN.VALIDATEVERSION('pr', V.PR, V.PR_VERSION) = C_PR_VERSION
     AND V.PP = W.PP
     AND V.VERSION = W.VERSION
     AND V.PP_KEY1 = W.PP_KEY1     
     AND V.PP_KEY2 = W.PP_KEY2     
     AND V.PP_KEY3 = W.PP_KEY3     
     AND V.PP_KEY4 = W.PP_KEY4     
     AND V.PP_KEY5 = W.PP_KEY5                             
     AND V.PR = W.PR
     AND UNAPIGEN.VALIDATEVERSION('pr', V.PR, V.PR_VERSION) = UNAPIGEN.VALIDATEVERSION('pr', W.PR, W.PR_VERSION)
     AND W.IS_PP = '0'
     AND DECODE(Y.INHERIT_AU,'0',DECODE(W.INHERIT_AU,'2',X.INHERIT_AU,W.INHERIT_AU),Y.INHERIT_AU) = '1' 
     AND V.AU = Y.AU
     AND UNAPIGEN.VALIDATEVERSION('au', V.AU, V.AU_VERSION) = Y.VERSION
   ORDER BY 2;

CURSOR L_PRAU_CURSOR (C_PR VARCHAR2, C_PR_VERSION VARCHAR2) IS
   
   
   
   
   SELECT A.AU, A.AUSEQ, D.VERSION, A.VALUE, D.DESCRIPTION, D.IS_PROTECTED, D.SINGLE_VALUED,
       D.NEW_VAL_ALLOWED, D.STORE_DB, D.VALUE_LIST_TP,
       D.RUN_MODE, D.SERVICE, D.CF_VALUE
   FROM UTPRAU A, UTPR B, UTAU D
   WHERE A.PR = C_PR
     AND A.VERSION = C_PR_VERSION     
     AND A.PR = B.PR
     AND A.VERSION = B.VERSION
     AND A.AU = D.AU
     AND UNAPIGEN.VALIDATEVERSION('au', A.AU, A.AU_VERSION) = D.VERSION     
     AND DECODE(D.INHERIT_AU, '0', B.INHERIT_AU, D.INHERIT_AU) = '1'
     ORDER BY 2;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_PR, ' ') = ' ' THEN
      RETURN(UNAPIGEN.DBERR_NOOBJID);
   END IF;
   IF NVL(A_PR_VERSION, ' ') = ' ' THEN
      RETURN(UNAPIGEN.DBERR_PRVERSION);
   END IF;
   
   L_PP := A_PP;
   IF A_PP IS NOT NULL THEN
      IF NVL(A_PP_VERSION, ' ') = ' ' THEN
         RETURN(UNAPIGEN.DBERR_PPVERSION);
      END IF;      
      L_PP_VERSION := A_PP_VERSION;
   END IF;   

   IF L_PP IS NOT NULL THEN
      
      
      
      
      OPEN L_PPPR_CURSOR(L_PP, L_PP_VERSION, A_PP_KEY1, A_PP_KEY2, A_PP_KEY3, A_PP_KEY4, A_PP_KEY5, A_PR, A_PR_VERSION);
      FETCH L_PPPR_CURSOR
      INTO L_PPPR_REC;
      IF L_PPPR_CURSOR%NOTFOUND THEN
         L_PP := NULL;
      END IF;
      CLOSE L_PPPR_CURSOR;
   END IF;
   
   L_FETCHED_ROWS := 0;

   IF L_PP IS NOT NULL THEN   
   
      FOR L_PPPRAU_REC IN L_PPPRAU_CURSOR(L_PP, L_PP_VERSION, A_PP_KEY1, A_PP_KEY2, A_PP_KEY3, A_PP_KEY4, A_PP_KEY5, A_PR, A_PR_VERSION) LOOP
         L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
         A_AU(L_FETCHED_ROWS) := L_PPPRAU_REC.AU;
         A_AU_VERSION(L_FETCHED_ROWS) := L_PPPRAU_REC.VERSION;
         A_VALUE(L_FETCHED_ROWS) := L_PPPRAU_REC.VALUE;
         A_DESCRIPTION(L_FETCHED_ROWS) := L_PPPRAU_REC.DESCRIPTION;
         A_IS_PROTECTED(L_FETCHED_ROWS) := L_PPPRAU_REC.IS_PROTECTED;
         A_SINGLE_VALUED(L_FETCHED_ROWS) := L_PPPRAU_REC.SINGLE_VALUED;
         A_NEW_VAL_ALLOWED(L_FETCHED_ROWS) := L_PPPRAU_REC.NEW_VAL_ALLOWED;
         A_STORE_DB(L_FETCHED_ROWS) := L_PPPRAU_REC.STORE_DB;
         A_VALUE_LIST_TP(L_FETCHED_ROWS) := L_PPPRAU_REC.VALUE_LIST_TP;
         A_RUN_MODE(L_FETCHED_ROWS) := L_PPPRAU_REC.RUN_MODE;
         A_SERVICE(L_FETCHED_ROWS) := L_PPPRAU_REC.SERVICE;
         A_CF_VALUE(L_FETCHED_ROWS) := L_PPPRAU_REC.CF_VALUE;
         EXIT WHEN L_FETCHED_ROWS >= A_NR_OF_ROWS;
      END LOOP;
      
   ELSE

      FOR L_PRAU_REC IN L_PRAU_CURSOR(A_PR, A_PR_VERSION) LOOP
         L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
         A_AU(L_FETCHED_ROWS) := L_PRAU_REC.AU;
         A_AU_VERSION(L_FETCHED_ROWS) := L_PRAU_REC.VERSION;
         A_VALUE(L_FETCHED_ROWS) := L_PRAU_REC.VALUE;
         A_DESCRIPTION(L_FETCHED_ROWS) := L_PRAU_REC.DESCRIPTION;
         A_IS_PROTECTED(L_FETCHED_ROWS) := L_PRAU_REC.IS_PROTECTED;
         A_SINGLE_VALUED(L_FETCHED_ROWS) := L_PRAU_REC.SINGLE_VALUED;
         A_NEW_VAL_ALLOWED(L_FETCHED_ROWS) := L_PRAU_REC.NEW_VAL_ALLOWED;
         A_STORE_DB(L_FETCHED_ROWS) := L_PRAU_REC.STORE_DB;
         A_VALUE_LIST_TP(L_FETCHED_ROWS) := L_PRAU_REC.VALUE_LIST_TP;
         A_RUN_MODE(L_FETCHED_ROWS) := L_PRAU_REC.RUN_MODE;
         A_SERVICE(L_FETCHED_ROWS) := L_PRAU_REC.SERVICE;
         A_CF_VALUE(L_FETCHED_ROWS) := L_PRAU_REC.CF_VALUE;
         EXIT WHEN L_FETCHED_ROWS >= A_NR_OF_ROWS;
      END LOOP;
   
   END IF;

   IF L_FETCHED_ROWS = 0 THEN
      A_NR_OF_ROWS := 0;
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   L_SQLERRM := SQLERRM;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
          'InitScPaAttribute', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END INITSCPAATTRIBUTE;

FUNCTION GETSCPAATTRIBUTE
(A_SC               OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_PG               OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_PGNODE           OUT    UNAPIGEN.LONG_TABLE_TYPE,  
 A_PA               OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_PANODE           OUT    UNAPIGEN.LONG_TABLE_TYPE,  
 A_AU               OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_AU_VERSION       OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_VALUE            OUT    UNAPIGEN.VC40_TABLE_TYPE,  
 A_DESCRIPTION      OUT    UNAPIGEN.VC40_TABLE_TYPE,  
 A_IS_PROTECTED     OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_SINGLE_VALUED    OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NEW_VAL_ALLOWED  OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_STORE_DB         OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_VALUE_LIST_TP    OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_RUN_MODE         OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_SERVICE          OUT    UNAPIGEN.VC255_TABLE_TYPE, 
 A_CF_VALUE         OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_NR_OF_ROWS       IN OUT NUMBER,                    
 A_WHERE_CLAUSE     IN     VARCHAR2)                  
RETURN NUMBER IS

L_SC              VARCHAR2(20);
L_PG              VARCHAR2(20);
L_PGNODE          NUMBER(9);
L_PA              VARCHAR2(20);
L_PANODE          NUMBER(9);
L_AU              VARCHAR2(20);
L_AU_VERSION      VARCHAR2(20);
L_VALUE           VARCHAR2(40);
L_DESCRIPTION     VARCHAR2(40);
L_IS_PROTECTED    CHAR(1);
L_SINGLE_VALUED   CHAR(1);
L_NEW_VAL_ALLOWED CHAR(1);
L_STORE_DB        CHAR(1);
L_VALUE_LIST_TP   CHAR(1);
L_RUN_MODE        CHAR(1);
L_SERVICE         VARCHAR2(255);
L_CF_VALUE        VARCHAR2(20);
L_AU_CURSOR       INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      RETURN(UNAPIGEN.DBERR_WHERECLAUSE);
   ELSIF
      UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := 'WHERE sc = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') ||  
                        ''' ORDER BY pgnode, panode, auseq';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_SQL_STRING := 'SELECT sc, pg, pgnode, pa, panode, au, au_version, value '||
                   'FROM dd'|| UNAPIGEN.P_DD || '.uvscpaau ' ||
                   L_WHERE_CLAUSE;

   L_AU_CURSOR := DBMS_SQL.OPEN_CURSOR;
   DBMS_SQL.PARSE(L_AU_CURSOR, L_SQL_STRING, DBMS_SQL.V7);  

   DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 1, L_SC, 20);
   DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 2, L_PG, 20);
   DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 3, L_PGNODE);
   DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 4, L_PA, 20);
   DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 5, L_PANODE);
   DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 6, L_AU, 20);
   DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 7, L_AU_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 8, L_VALUE, 40);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_AU_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 1, L_SC);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 2, L_PG);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 3, L_PGNODE);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 4, L_PA);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 5, L_PANODE);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 6, L_AU);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 7, L_AU_VERSION);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 8, L_VALUE);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_SC(L_FETCHED_ROWS) := L_SC;
      A_PG(L_FETCHED_ROWS) := L_PG;
      A_PGNODE(L_FETCHED_ROWS) := L_PGNODE;
      A_PA(L_FETCHED_ROWS) := L_PA;
      A_PANODE(L_FETCHED_ROWS) := L_PANODE;
      A_AU(L_FETCHED_ROWS) := L_AU;
      A_AU_VERSION(L_FETCHED_ROWS) := L_AU_VERSION;
      A_VALUE(L_FETCHED_ROWS) := L_VALUE;

      OPEN UNAPIGEN.L_AUDET_CURSOR(L_AU, L_AU_VERSION);
      FETCH UNAPIGEN.L_AUDET_CURSOR
      INTO L_DESCRIPTION, L_IS_PROTECTED, L_SINGLE_VALUED,
           L_NEW_VAL_ALLOWED, L_STORE_DB, L_VALUE_LIST_TP, L_RUN_MODE,
           L_SERVICE, L_CF_VALUE;
      IF UNAPIGEN.L_AUDET_CURSOR%NOTFOUND THEN
         
         
         
         A_DESCRIPTION(L_FETCHED_ROWS)     := L_AU;
         A_IS_PROTECTED(L_FETCHED_ROWS)    := '1';
         A_SINGLE_VALUED(L_FETCHED_ROWS)   := '1';
         A_NEW_VAL_ALLOWED(L_FETCHED_ROWS) := '0';
         A_STORE_DB(L_FETCHED_ROWS)        := '0';
         A_VALUE_LIST_TP(L_FETCHED_ROWS)   := 'E';
         A_RUN_MODE(L_FETCHED_ROWS)        := 'H';
         A_SERVICE(L_FETCHED_ROWS)         := NULL;
         A_CF_VALUE(L_FETCHED_ROWS)        := NULL;
      ELSE
         A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;
         A_IS_PROTECTED(L_FETCHED_ROWS) := L_IS_PROTECTED;
         A_SINGLE_VALUED(L_FETCHED_ROWS) := L_SINGLE_VALUED;
         A_NEW_VAL_ALLOWED(L_FETCHED_ROWS) := L_NEW_VAL_ALLOWED;
         A_STORE_DB(L_FETCHED_ROWS) := L_STORE_DB;
         A_VALUE_LIST_TP(L_FETCHED_ROWS) := L_VALUE_LIST_TP;
         A_RUN_MODE(L_FETCHED_ROWS) := L_RUN_MODE;
         A_SERVICE(L_FETCHED_ROWS) := L_SERVICE;
         A_CF_VALUE(L_FETCHED_ROWS) := L_CF_VALUE;
      END IF;
      CLOSE UNAPIGEN.L_AUDET_CURSOR;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_AU_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_AU_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
             'GetScPaAttribute', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF UNAPIGEN.L_AUDET_CURSOR%ISOPEN THEN
         CLOSE UNAPIGEN.L_AUDET_CURSOR;
      END IF;
      IF DBMS_SQL.IS_OPEN(L_AU_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(L_AU_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETSCPAATTRIBUTE;

FUNCTION SAVESCPAATTRIBUTE
(A_SC             IN        VARCHAR2,                 
 A_PG             IN        VARCHAR2,                 
 A_PGNODE         IN        NUMBER,                   
 A_PA             IN        VARCHAR2,                 
 A_PANODE         IN        NUMBER,                   
 A_AU             IN        UNAPIGEN.VC20_TABLE_TYPE, 
 A_VALUE          IN        UNAPIGEN.VC40_TABLE_TYPE, 
 A_AU_VERSION     IN OUT    UNAPIGEN.VC20_TABLE_TYPE, 
 A_NR_OF_ROWS     IN        NUMBER,                   
 A_MODIFY_REASON  IN        VARCHAR2)                 
RETURN NUMBER IS

L_ALLOW_MODIFY      CHAR(1);
L_LOG_HS            CHAR(1);
L_LOG_HS_DETAILS    CHAR(1);
L_ACTIVE            CHAR(1);
L_LC                VARCHAR2(2);
L_LC_VERSION        VARCHAR2(20);
L_SS                VARCHAR2(2);
L_WHAT_DESCRIPTION  VARCHAR2(255);
L_HS_SEQ            INTEGER;
L_PR_VERSION        VARCHAR2(20);

CURSOR L_MODIFIEDAU_CURSOR IS
   
   (SELECT A.AU AU, A.AU_VERSION VERSION, A.VALUE VALUE, 'DELETE' ACTION
    FROM UTSCPAAU A
    WHERE A.SC = A_SC
    AND A.PG = A_PG
    AND A.PGNODE = A_PGNODE
    AND A.PA = A_PA
    AND A.PANODE = A_PANODE
    AND AUSEQ < 0
   MINUS
    SELECT A.AU AU, A.AU_VERSION VERSION, A.VALUE VALUE, 'DELETE' ACTION
    FROM UTSCPAAU A
    WHERE A.SC = A_SC
    AND A.PG = A_PG
    AND A.PGNODE = A_PGNODE
    AND A.PA = A_PA
    AND A.PANODE = A_PANODE
    AND AUSEQ > 0)
   UNION ALL
   
   (SELECT A.AU AU, A.AU_VERSION VERSION, A.VALUE VALUE, 'NEW' ACTION
    FROM UTSCPAAU A
    WHERE A.SC = A_SC
    AND A.PG = A_PG
    AND A.PGNODE = A_PGNODE
    AND A.PA = A_PA
    AND A.PANODE = A_PANODE
    AND AUSEQ > 0
   MINUS
    SELECT A.AU AU, A.AU_VERSION VERSION, A.VALUE VALUE, 'NEW' ACTION
    FROM UTSCPAAU A
    WHERE A.SC = A_SC
    AND A.PG = A_PG
    AND A.PGNODE = A_PGNODE
    AND A.PA = A_PA
    AND A.PANODE = A_PANODE
    AND AUSEQ < 0);

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;


   IF NVL(A_NR_OF_ROWS, -1) < 0 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NROFROWS;
      RAISE STPERROR;
   END IF;

   IF NVL(A_SC, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_PG, ' ') = ' ' OR
      NVL(A_PGNODE, 0) = 0 OR
      NVL(A_PA, ' ') = ' ' OR
      NVL(A_PANODE, 0) = 0 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIAUT.GETSCPAAUTHORISATION(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, L_PR_VERSION, 
                                               L_LC, L_LC_VERSION, L_SS, L_ALLOW_MODIFY, L_ACTIVE,
                                               L_LOG_HS, L_LOG_HS_DETAILS);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTSCPA
   SET ALLOW_MODIFY = '#'
   WHERE SC = A_SC
      AND PG = A_PG
      AND PGNODE = A_PGNODE
      AND PA = A_PA
      AND PANODE = A_PANODE;
   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR ;
   END IF;








   
   
   
   UPDATE UTSCPAAU
   SET AUSEQ = -AUSEQ
   WHERE SC = A_SC
   AND PG = A_PG
   AND PGNODE = A_PGNODE
   AND PA = A_PA
   AND PANODE = A_PANODE;

   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      INSERT INTO UTSCPAAU(SC, PG, PGNODE, PA, PANODE, AU, AUSEQ, VALUE)
      VALUES(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, A_AU(L_SEQ_NO),
             L_SEQ_NO, A_VALUE(L_SEQ_NO));
   END LOOP;

   L_EVENT_TP := 'PaAttributesUpdated';
   L_EV_SEQ_NR := -1;
   L_EV_DETAILS := 'sc=' ||A_SC || 
                   '#pg=' || A_PG || 
                   '#pgnode=' || TO_CHAR(A_PGNODE) ||
                   '#panode=' || TO_CHAR(A_PANODE) ||
                   '#pr_version=' || L_PR_VERSION;
   
   L_RESULT := UNAPIEV.INSERTEVENT('SaveScPaAttribute', UNAPIGEN.P_EVMGR_NAME, 'pa', A_PA,
                                   L_LC, L_LC_VERSION, L_SS, L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF (L_LOG_HS = '1') THEN
      INSERT INTO UTSCPAHS(SC, PG, PGNODE, PA, PANODE, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, 
                           LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 
             L_EVENT_TP,
             'parameter "'||A_PA||'" attributes are updated.', 
             CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   L_HS_SEQ := 0;
   IF (L_LOG_HS_DETAILS = '1') THEN
      L_HS_SEQ := L_HS_SEQ + 1;
      INSERT INTO UTSCPAHSDETAILS(SC, PG, PGNODE, PA, PANODE, TR_SEQ, EV_SEQ, SEQ, DETAILS)
      VALUES(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_SEQ,
             'parameter "'||A_PA||'" attributes are updated.');
   END IF;

   
   
      
   
   
   
   IF (L_LOG_HS_DETAILS = '1') THEN
      FOR L_AU_REC IN L_MODIFIEDAU_CURSOR LOOP
         IF L_AU_REC.ACTION = 'DELETE' THEN
            L_WHAT_DESCRIPTION := 'Attribute "'||L_AU_REC.AU||'" with value "'||L_AU_REC.VALUE||'" is removed from parameter "'||A_PA||'".';
         ELSE
            L_WHAT_DESCRIPTION := 'Attribute "'||L_AU_REC.AU||'" is added to parameter "'||A_PA||'", value is "'||L_AU_REC.VALUE||'".';
         END IF;
         L_HS_SEQ := L_HS_SEQ + 1;
         INSERT INTO UTSCPAHSDETAILS(SC, PG, PGNODE, PA, PANODE, TR_SEQ, EV_SEQ, SEQ, DETAILS)
         VALUES(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, 
                L_HS_SEQ, L_WHAT_DESCRIPTION);
      END LOOP;
   END IF;
  
   
   
   
   DELETE FROM UTSCPAAU
   WHERE SC = A_SC
   AND PG = A_PG
   AND PGNODE = A_PGNODE
   AND PA = A_PA
   AND PANODE = A_PANODE
   AND AUSEQ < 0;
   
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveScPaAttribute', SQLERRM);
   END IF;
   IF L_MODIFIEDAU_CURSOR%ISOPEN THEN
      CLOSE L_MODIFIEDAU_CURSOR;
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveScPaAttribute'));
END SAVESCPAATTRIBUTE;

FUNCTION SAVESCPAATTRIBUTE
(A_SC             IN        VARCHAR2,                 
 A_PG             IN        VARCHAR2,                 
 A_PGNODE         IN        NUMBER,                   
 A_PA             IN        VARCHAR2,                 
 A_PANODE         IN        NUMBER,                   
 A_AU             IN        UNAPIGEN.VC20_TABLE_TYPE, 
 A_AU_VERSION     IN OUT    UNAPIGEN.VC20_TABLE_TYPE, 
 A_VALUE          IN        UNAPIGEN.VC40_TABLE_TYPE, 
 A_NR_OF_ROWS     IN        NUMBER,                   
 A_MODIFY_REASON  IN        VARCHAR2)                 
RETURN NUMBER IS

BEGIN
   RETURN(UNAPIPAP.SAVESCPAATTRIBUTE(A_SC,
                                    A_PG,
                                    A_PGNODE,
                                    A_PA,
                                    A_PANODE,
                                    A_AU,
                                    A_VALUE,
                                    A_AU_VERSION,
                                    A_NR_OF_ROWS,
                                    A_MODIFY_REASON));
END SAVESCPAATTRIBUTE;

FUNCTION SAVE1SCPAATTRIBUTE
(A_SC             IN        VARCHAR2,                 
 A_PG             IN        VARCHAR2,                 
 A_PGNODE         IN        NUMBER,                   
 A_PA             IN        VARCHAR2,                 
 A_PANODE         IN        NUMBER,                   
 A_AU             IN        VARCHAR2,                 
 A_VALUE          IN        UNAPIGEN.VC40_TABLE_TYPE, 
 A_AU_VERSION     IN OUT    VARCHAR2,                 
 A_NR_OF_ROWS     IN        NUMBER,                   
 A_MODIFY_REASON  IN        VARCHAR2)                 
RETURN NUMBER IS

L_LC                VARCHAR2(2);
L_LC_VERSION        VARCHAR2(20);
L_SS                VARCHAR2(2);
L_LOG_HS            CHAR(1);
L_LOG_HS_DETAILS    CHAR(1);
L_ALLOW_MODIFY      CHAR(1);
L_ACTIVE            CHAR(1);
L_NEW_SEQ           NUMBER;
L_AU_HANDLE         BOOLEAN_TABLE_TYPE;
L_AU_FOUND          BOOLEAN;
L_INSERT_EVENT      BOOLEAN;
L_LAST_SEQ          INTEGER;
L_WHAT_DESCRIPTION  VARCHAR2(255);
L_HS_SEQ            INTEGER;
L_PR_VERSION        VARCHAR2(20);

CURSOR L_AU_CURSOR IS
   SELECT VALUE, AUSEQ
   FROM UTSCPAAU
   WHERE SC = A_SC
      AND PG = A_PG
      AND PGNODE = A_PGNODE
      AND PA = A_PA
      AND PANODE = A_PANODE
      AND AU = A_AU
   ORDER BY AUSEQ;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> 
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_SC, ' ') = ' ' OR
      NVL(A_AU, ' ') = ' ' OR
      NVL(A_PG, ' ') = ' ' OR
      NVL(A_PGNODE, 0) = 0 OR
      NVL(A_PA, ' ') = ' ' OR
      NVL(A_PANODE, 0) = 0 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      L_AU_HANDLE(L_SEQ_NO) := TRUE;
   END LOOP;

   L_RET_CODE := UNAPIAUT.GETSCPAAUTHORISATION(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, 
                                               L_PR_VERSION, L_LC, L_LC_VERSION, 
                                               L_SS, L_ALLOW_MODIFY, L_ACTIVE,
                                               L_LOG_HS, L_LOG_HS_DETAILS);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTSCPA
   SET ALLOW_MODIFY = '#'
   WHERE SC = A_SC
      AND PG = A_PG
      AND PGNODE = A_PGNODE
      AND PA = A_PA
      AND PANODE = A_PANODE;

   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR ;
   END IF;

   L_EVENT_TP := 'PaAttributesUpdated';
   L_EV_SEQ_NR := -1;
   L_EV_DETAILS := 'sc=' || A_SC ||
                   '#pg=' || A_PG || '#pgnode=' || TO_CHAR(A_PGNODE) ||
                   '#panode=' || TO_CHAR(A_PANODE) ||
                   '#au=' || A_AU || '#au_version=' || A_AU_VERSION ||
                   '#pr_version=' || L_PR_VERSION;
                   
   L_RESULT := UNAPIEV.INSERTEVENT('Save1ScPaAttribute', UNAPIGEN.P_EVMGR_NAME,
                                   'pa', A_PA, L_LC, L_LC_VERSION, L_SS,
                                   L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF L_LOG_HS = '1' THEN
      INSERT INTO UTSCPAHS(SC, PG, PGNODE, PA, PANODE, WHO, WHO_DESCRIPTION, WHAT,
                           WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, UNAPIGEN.P_USER,
             UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
             'parameter "'||A_PA||'" attribute "'||A_AU||'" is created/updated.', 
             CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   L_HS_SEQ := 0;
   IF L_LOG_HS_DETAILS = '1' THEN
      L_HS_SEQ := L_HS_SEQ + 1;
      INSERT INTO UTSCPAHSDETAILS(SC, PG, PGNODE, PA, PANODE, TR_SEQ, EV_SEQ, SEQ, DETAILS)
      VALUES(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, 
             UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_SEQ, 
             'parameter "'||A_PA||'" attribute "'||A_AU||'" is created/updated.');
   END IF;   

   L_LAST_SEQ := 499;
   FOR L_PAAU IN L_AU_CURSOR LOOP
      L_AU_FOUND := FALSE;
      FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
         IF (L_PAAU.VALUE = A_VALUE(L_SEQ_NO) OR
             (L_PAAU.VALUE IS NULL AND A_VALUE(L_SEQ_NO) IS NULL)) THEN
            L_AU_HANDLE(L_SEQ_NO) := FALSE;
            L_AU_FOUND := TRUE;
            EXIT;
         END IF;
      END LOOP;

      IF NOT L_AU_FOUND THEN
         DELETE FROM UTSCPAAU
         WHERE SC = A_SC
            AND PG = A_PG
            AND PGNODE = A_PGNODE
            AND PA = A_PA
            AND PANODE = A_PANODE
            AND AU = A_AU
            AND VALUE = L_PAAU.VALUE;

         IF L_PAAU.VALUE IS NULL THEN
            DELETE FROM UTSCPAAU
            WHERE SC = A_SC
              AND PG = A_PG
              AND PGNODE = A_PGNODE
              AND PA = A_PA
              AND PANODE = A_PANODE
              AND AU = A_AU
              AND VALUE IS NULL;
         END IF;

         IF (L_LOG_HS_DETAILS = '1') THEN
            L_WHAT_DESCRIPTION := 'Attribute "'||A_AU||'" with value "'||L_PAAU.VALUE||'" is removed from parameter "'||A_PA||'".';
            L_HS_SEQ := L_HS_SEQ + 1;
            INSERT INTO UTSCPAHSDETAILS(SC, PG, PGNODE, PA, PANODE, TR_SEQ, EV_SEQ, SEQ, DETAILS)
            VALUES(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, UNAPIGEN.P_TR_SEQ, 
                   L_EV_SEQ_NR, L_HS_SEQ, L_WHAT_DESCRIPTION);
         END IF;   
      ELSE      
         L_LAST_SEQ := L_PAAU.AUSEQ;         
      END IF;
   END LOOP;

   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      IF L_AU_HANDLE(L_SEQ_NO) THEN
         L_LAST_SEQ := L_LAST_SEQ+1;

         
         INSERT INTO UTSCPAAU
         (SC, PG, PGNODE, PA, PANODE,  
          AU, AUSEQ, VALUE)
         VALUES
         (A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, 
          A_AU, L_LAST_SEQ, A_VALUE(L_SEQ_NO));

         IF (L_LOG_HS_DETAILS = '1') THEN
            L_WHAT_DESCRIPTION := 'Attribute "'||A_AU||'" is added to parameter "'||A_PA||'", value is "'||A_VALUE(L_SEQ_NO)||'".';
            L_HS_SEQ := L_HS_SEQ + 1;
            INSERT INTO UTSCPAHSDETAILS(SC, PG, PGNODE, PA, PANODE, TR_SEQ, EV_SEQ, SEQ, DETAILS)
            VALUES(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, UNAPIGEN.P_TR_SEQ, 
                   L_EV_SEQ_NR, L_HS_SEQ, L_WHAT_DESCRIPTION);
         END IF;   

      END IF;
   END LOOP;
     
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('Save1ScPaAttribute', SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('Save1ScPaAttribute', L_SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'Save1ScPaAttribute'));
END SAVE1SCPAATTRIBUTE;

FUNCTION SAVE1SCPAATTRIBUTE
(A_SC             IN        VARCHAR2,                 
 A_PG             IN        VARCHAR2,                 
 A_PGNODE         IN        NUMBER,                   
 A_PA             IN        VARCHAR2,                 
 A_PANODE         IN        NUMBER,                   
 A_AU             IN        VARCHAR2,                 
 A_AU_VERSION     IN OUT    VARCHAR2,                 
 A_VALUE          IN        UNAPIGEN.VC40_TABLE_TYPE, 
 A_NR_OF_ROWS     IN        NUMBER,                   
 A_MODIFY_REASON  IN        VARCHAR2)                 
RETURN NUMBER IS

BEGIN
   RETURN(UNAPIPAP.SAVE1SCPAATTRIBUTE(A_SC,
                                      A_PG,
                                      A_PGNODE,
                                      A_PA,
                                      A_PANODE,
                                      A_AU,
                                      A_VALUE,
                                      A_AU_VERSION,
                                      A_NR_OF_ROWS,
                                      A_MODIFY_REASON));
END SAVE1SCPAATTRIBUTE;

FUNCTION INITANDSAVESCPAATTRIBUTES                     
(A_SC               IN      VARCHAR2,                  
 A_PG               IN      VARCHAR2,                  
 A_PGNODE           IN      NUMBER,                    
 A_PA               IN      VARCHAR2,                  
 A_PANODE           IN      NUMBER)                    
RETURN NUMBER IS

CURSOR L_PPVERSION_CURSOR(A_SC VARCHAR2, A_PG VARCHAR2, A_PGNODE NUMBER) IS
   SELECT PP_VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5
   FROM UTSCPG
   WHERE SC = A_SC
   AND PG = A_PG
   AND PGNODE = A_PGNODE;
L_PP_VERSION       VARCHAR2(20);
L_PP_KEY1          VARCHAR2(20);
L_PP_KEY2          VARCHAR2(20);
L_PP_KEY3          VARCHAR2(20);
L_PP_KEY4          VARCHAR2(20);
L_PP_KEY5          VARCHAR2(20);

CURSOR L_PRVERSION_CURSOR(A_SC VARCHAR2, A_PG VARCHAR2, A_PGNODE NUMBER, A_PA VARCHAR2, A_PANODE NUMBER) IS
   SELECT PR_VERSION
   FROM UTSCPA
   WHERE SC = A_SC
   AND PG = A_PG
   AND PGNODE = A_PGNODE
   AND PA = A_PA
   AND PANODE = A_PANODE;
L_PR_VERSION       VARCHAR2(20);

CURSOR L_PPPR_CURSOR(C_PP VARCHAR2, C_PP_VERSION VARCHAR2, C_PP_KEY1 VARCHAR2, C_PP_KEY2 VARCHAR2, C_PP_KEY3 VARCHAR2, C_PP_KEY4 VARCHAR2, C_PP_KEY5 VARCHAR2, C_PR VARCHAR2, C_PR_VERSION VARCHAR2) IS
   SELECT PP
   FROM UTPPPR
   WHERE PP = C_PP
   AND VERSION = C_PP_VERSION
   AND PP_KEY1 = C_PP_KEY1
   AND PP_KEY2 = C_PP_KEY2
   AND PP_KEY3 = C_PP_KEY3
   AND PP_KEY4 = C_PP_KEY4
   AND PP_KEY5 = C_PP_KEY5
   AND PR = C_PR
   AND UNAPIGEN.VALIDATEVERSION('pr', PR, PR_VERSION) = C_PR_VERSION;
L_PPPR_REC               L_PPPR_CURSOR%ROWTYPE;
L_PPPR_FOUND             BOOLEAN;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   OPEN L_PPVERSION_CURSOR(A_SC, A_PG, A_PGNODE);
   FETCH L_PPVERSION_CURSOR
   INTO L_PP_VERSION, L_PP_KEY1, L_PP_KEY2, L_PP_KEY3, L_PP_KEY4, L_PP_KEY5;
   CLOSE L_PPVERSION_CURSOR;
   
   OPEN L_PRVERSION_CURSOR(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE);
   FETCH L_PRVERSION_CURSOR
   INTO L_PR_VERSION;
   CLOSE L_PRVERSION_CURSOR;
   
   
   
   
   
   OPEN L_PPPR_CURSOR(A_PG, L_PP_VERSION, L_PP_KEY1, L_PP_KEY2, L_PP_KEY3, L_PP_KEY4, L_PP_KEY5, A_PA, L_PR_VERSION);
   FETCH L_PPPR_CURSOR
   INTO L_PPPR_REC;
   L_PPPR_FOUND := L_PPPR_CURSOR%FOUND;
   CLOSE L_PPPR_CURSOR;
   
   
   
   
   
   
   IF L_PPPR_FOUND THEN
      INSERT INTO UTSCPAAU(SC, PG, PGNODE, PA, PANODE, AU, AU_VERSION, AUSEQ, VALUE)
      SELECT DISTINCT A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, A.AU, '' D_VERSION, A.AUSEQ, A.VALUE
      FROM UTPR B, UTPPPR C, UTAU D, UTPRAU A
      WHERE A.PR = A_PA
        AND A.VERSION = L_PR_VERSION
        AND A.PR = B.PR
        AND A.VERSION = B.VERSION
        AND A.AU = D.AU
        AND UNAPIGEN.VALIDATEVERSION('au', A.AU, A.AU_VERSION) = D.VERSION
        AND C.PP = A_PG
        AND C.VERSION = L_PP_VERSION
        AND C.PP_KEY1 = L_PP_KEY1
        AND C.PP_KEY2 = L_PP_KEY2
        AND C.PP_KEY3 = L_PP_KEY3
        AND C.PP_KEY4 = L_PP_KEY4
        AND C.PP_KEY5 = L_PP_KEY5
        AND C.PR = B.PR
        AND UNAPIGEN.VALIDATEVERSION('pr', C.PR, C.PR_VERSION) = B.VERSION     
        AND C.IS_PP = '0'
        AND DECODE(D.INHERIT_AU,'0',DECODE(C.INHERIT_AU,'2',B.INHERIT_AU,C.INHERIT_AU),D.INHERIT_AU) = '1'
        AND A.AU NOT IN (SELECT DISTINCT J.AU
                         FROM UTPPPRAU J, UTPPPR K, UTPR L, UTAU M
                         WHERE J.PR = L.PR
                           AND UNAPIGEN.VALIDATEVERSION('pr', J.PR, J.PR_VERSION) = L.VERSION
                           AND J.PP      = A_PG
                           AND J.VERSION = L_PP_VERSION                        
                           AND J.PP_KEY1 = L_PP_KEY1
                           AND J.PP_KEY2 = L_PP_KEY2
                           AND J.PP_KEY3 = L_PP_KEY3
                           AND J.PP_KEY4 = L_PP_KEY4
                           AND J.PP_KEY5 = L_PP_KEY5
                           AND J.PR = A_PA
                           AND UNAPIGEN.VALIDATEVERSION('pr', J.PR, J.PR_VERSION) = L_PR_VERSION
                           AND J.PR = K.PR
                           AND UNAPIGEN.VALIDATEVERSION('pr', J.PR, J.PR_VERSION) = UNAPIGEN.VALIDATEVERSION('pr', K.PR, K.PR_VERSION)                                                
                           AND J.PP      = K.PP
                           AND J.VERSION = K.VERSION                        
                           AND J.PP_KEY1 = K.PP_KEY1
                           AND J.PP_KEY2 = K.PP_KEY2
                           AND J.PP_KEY3 = K.PP_KEY3
                           AND J.PP_KEY4 = K.PP_KEY4
                           AND J.PP_KEY5 = K.PP_KEY5
                           AND K.IS_PP = '0'
                           AND DECODE(M.INHERIT_AU,'0',DECODE(K.INHERIT_AU,'2',L.INHERIT_AU,K.INHERIT_AU),M.INHERIT_AU) = '1'
                           AND M.AU = J.AU
                           AND M.VERSION = UNAPIGEN.VALIDATEVERSION('au', J.AU, J.AU_VERSION))
      
      
      
      
      UNION
      SELECT DISTINCT A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, V.AU, '' Y_VERSION, V.AUSEQ+500, V.VALUE
      FROM UTPPPRAU V, UTPPPR W, UTPR X, UTAU Y
      WHERE V.PR = X.PR
        AND UNAPIGEN.VALIDATEVERSION('pr', V.PR, V.PR_VERSION) = X.VERSION
        AND V.PP      = A_PG
        AND V.VERSION = L_PP_VERSION
        AND V.PP_KEY1 = L_PP_KEY1
        AND V.PP_KEY2 = L_PP_KEY2
        AND V.PP_KEY3 = L_PP_KEY3
        AND V.PP_KEY4 = L_PP_KEY4
        AND V.PP_KEY5 = L_PP_KEY5
        AND V.PR = A_PA
        AND UNAPIGEN.VALIDATEVERSION('pr', V.PR, V.PR_VERSION) = L_PR_VERSION
        AND V.PP      = W.PP
        AND V.VERSION = W.VERSION
        AND V.PP_KEY1 = W.PP_KEY1
        AND V.PP_KEY2 = W.PP_KEY2
        AND V.PP_KEY3 = W.PP_KEY3
        AND V.PP_KEY4 = W.PP_KEY4
        AND V.PP_KEY5 = W.PP_KEY5
        AND V.PR = W.PR
        AND UNAPIGEN.VALIDATEVERSION('pr', V.PR, V.PR_VERSION) = UNAPIGEN.VALIDATEVERSION('pr', W.PR, W.PR_VERSION)     
        AND W.IS_PP = '0'
        AND DECODE(Y.INHERIT_AU,'0',DECODE(W.INHERIT_AU,'2',X.INHERIT_AU,W.INHERIT_AU),Y.INHERIT_AU) = '1' 
        AND V.AU = Y.AU
        AND UNAPIGEN.VALIDATEVERSION('au', V.AU, V.AU_VERSION) = Y.VERSION;
   ELSE
      INSERT INTO UTSCPAAU(SC, PG, PGNODE, PA, PANODE, AU, AU_VERSION, AUSEQ, VALUE)
      SELECT DISTINCT A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, A.AU, '' D_VERSION, A.AUSEQ, A.VALUE
      FROM UTPRAU A, UTPR B, UTAU D
         WHERE A.PR = A_PA
           AND A.VERSION = L_PR_VERSION     
           AND A.PR = B.PR
           AND A.VERSION = B.VERSION
           AND A.AU = D.AU
           AND UNAPIGEN.VALIDATEVERSION('au', A.AU, A.AU_VERSION) = D.VERSION     
           AND DECODE(D.INHERIT_AU, '0', B.INHERIT_AU, D.INHERIT_AU) = '1';
   END IF;
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('InitAndSaveScPaAttributes', SQLERRM);
   END IF;
   IF L_PPVERSION_CURSOR%ISOPEN THEN
      CLOSE L_PPVERSION_CURSOR;
   END IF;
   IF L_PRVERSION_CURSOR%ISOPEN THEN
      CLOSE L_PRVERSION_CURSOR;
   END IF;
   IF L_PPPR_CURSOR%ISOPEN THEN
         CLOSE L_PPPR_CURSOR;
   END IF;   
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'InitAndSaveScPaAttributes'));
END INITANDSAVESCPAATTRIBUTES;

FUNCTION GETSCPAHISTORY 
(A_SC                OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PG                OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PGNODE            OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_PA                OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PANODE            OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_WHO               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_WHO_DESCRIPTION   OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_WHAT              OUT     UNAPIGEN.VC60_TABLE_TYPE,  
 A_WHAT_DESCRIPTION  OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_LOGDATE           OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_WHY               OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_TR_SEQ            OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_EV_SEQ            OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_NR_OF_ROWS        IN OUT  NUMBER,                    
 A_WHERE_CLAUSE      IN      VARCHAR2)                  
RETURN NUMBER IS

L_NR_OF_ROWS_IN               INTEGER;
L_NR_OF_ROWS_OUT              INTEGER;


L_SC_TAB                      UNAPIGEN.VC20_TABLE_TYPE;
L_PG_TAB                      UNAPIGEN.VC20_TABLE_TYPE;
L_PGNODE_TAB                  UNAPIGEN.LONG_TABLE_TYPE;
L_PA_TAB                      UNAPIGEN.VC20_TABLE_TYPE;
L_PANODE_TAB                  UNAPIGEN.LONG_TABLE_TYPE;
L_WHO_TAB                     UNAPIGEN.VC20_TABLE_TYPE;
L_WHO_DESCRIPTION_TAB         UNAPIGEN.VC40_TABLE_TYPE;
L_WHAT_TAB                    UNAPIGEN.VC60_TABLE_TYPE;
L_WHAT_DESCRIPTION_TAB        UNAPIGEN.VC255_TABLE_TYPE;
L_LOGDATE_TAB                 UNAPIGEN.DATE_TABLE_TYPE;
L_WHY_TAB                     UNAPIGEN.VC255_TABLE_TYPE;
L_TR_SEQ_TAB                  UNAPIGEN.NUM_TABLE_TYPE;
L_EV_SEQ_TAB                  UNAPIGEN.NUM_TABLE_TYPE;

BEGIN
   L_NR_OF_ROWS_IN := A_NR_OF_ROWS;
   L_NR_OF_ROWS_OUT := L_NR_OF_ROWS_IN;
   L_RET_CODE := GETSCPAHISTORY(A_SC,
                                A_PG,
                                A_PGNODE,
                                A_PA,
                                A_PANODE,
                                A_WHO,             
                                A_WHO_DESCRIPTION,
                                A_WHAT,            
                                A_WHAT_DESCRIPTION,
                                A_LOGDATE,         
                                A_WHY,             
                                A_TR_SEQ,          
                                A_EV_SEQ,          
                                L_NR_OF_ROWS_OUT,      
                                A_WHERE_CLAUSE,
                                0);
    IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
       RETURN(L_RET_CODE);
    ELSE
       A_NR_OF_ROWS := L_NR_OF_ROWS_OUT;
       IF L_NR_OF_ROWS_OUT = L_NR_OF_ROWS_IN THEN
          
          L_RET_CODE := GETSCPAHISTORY(L_SC_TAB,             
                                       L_PG_TAB,
                                       L_PGNODE_TAB,
                                       L_PA_TAB,
                                       L_PANODE_TAB,
                                       L_WHO_TAB,
                                       L_WHO_DESCRIPTION_TAB,
                                       L_WHAT_TAB,
                                       L_WHAT_DESCRIPTION_TAB,
                                       L_LOGDATE_TAB,
                                       L_WHY_TAB,
                                       L_TR_SEQ_TAB,
                                       L_EV_SEQ_TAB,
                                       L_NR_OF_ROWS_OUT,      
                                       A_WHERE_CLAUSE,
                                       -1);
          IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
             RETURN(L_RET_CODE);
          END IF;
       END IF;
    END IF;
    RETURN(L_RET_CODE);
                              
EXCEPTION
WHEN OTHERS THEN
   L_SQLERRM := SQLERRM;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
          'GetScPaHistory', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETSCPAHISTORY;

FUNCTION GETSCPAHISTORY
(A_SC                OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PG                OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PGNODE            OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_PA                OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PANODE            OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_WHO               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_WHO_DESCRIPTION   OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_WHAT              OUT     UNAPIGEN.VC60_TABLE_TYPE,  
 A_WHAT_DESCRIPTION  OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_LOGDATE           OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_WHY               OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_TR_SEQ            OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_EV_SEQ            OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_NR_OF_ROWS        IN OUT  NUMBER,                    
 A_WHERE_CLAUSE      IN      VARCHAR2,                  
 A_NEXT_ROWS         IN      NUMBER)                    
RETURN NUMBER IS

L_SC                VARCHAR2(20);
L_PG                VARCHAR2(20);
L_PGNODE            NUMBER(9);
L_PA                VARCHAR2(20);
L_PANODE            NUMBER(9);
L_WHO               VARCHAR2(20);
L_WHO_DESCRIPTION   VARCHAR2(40);
L_WHAT              VARCHAR2(60);
L_WHAT_DESCRIPTION  VARCHAR2(255);
L_LOGDATE           TIMESTAMP WITH TIME ZONE;
L_WHY               VARCHAR2(255);
L_TR_SEQ            NUMBER;
L_EV_SEQ            NUMBER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF DBMS_SQL.IS_OPEN(P_HS_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(P_HS_CURSOR);
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_HS_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      
      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
         RETURN(UNAPIGEN.DBERR_WHERECLAUSE);
      ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
         L_WHERE_CLAUSE := 'WHERE sc = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                           ''' ORDER BY pgnode, panode, logdate DESC';
      ELSE
         L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
      END IF;
      
      L_WHERE_CLAUSE := REPLACE(REPLACE(L_WHERE_CLAUSE, 
                                        'logdate DESC', 
                                        'logdate DESC, ROWID DESC'),
                                'LOGDATE DESC', 
                                'LOGDATE DESC, ROWID DESC');

      IF DBMS_SQL.IS_OPEN(P_HS_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(P_HS_CURSOR);
      END IF;
      P_HS_CURSOR := DBMS_SQL.OPEN_CURSOR;
      L_SQL_STRING := 'SELECT sc, pg, pgnode, pa, panode, who, who_description, what, what_description, '||
                      'logdate, why, tr_seq, ev_seq FROM dd' || UNAPIGEN.P_DD ||
                      '.uvscpahs ' ||L_WHERE_CLAUSE;
      DBMS_SQL.PARSE(P_HS_CURSOR, L_SQL_STRING, DBMS_SQL.V7);  

      DBMS_SQL.DEFINE_COLUMN(P_HS_CURSOR, 1, L_SC, 20);
      DBMS_SQL.DEFINE_COLUMN(P_HS_CURSOR, 2, L_PG, 20);
      DBMS_SQL.DEFINE_COLUMN(P_HS_CURSOR, 3, L_PGNODE);
      DBMS_SQL.DEFINE_COLUMN(P_HS_CURSOR, 4, L_PA, 20);
      DBMS_SQL.DEFINE_COLUMN(P_HS_CURSOR, 5, L_PANODE);
      DBMS_SQL.DEFINE_COLUMN(P_HS_CURSOR, 6, L_WHO, 20);
      DBMS_SQL.DEFINE_COLUMN(P_HS_CURSOR, 7, L_WHO_DESCRIPTION, 40);
      DBMS_SQL.DEFINE_COLUMN(P_HS_CURSOR, 8, L_WHAT, 60);
      DBMS_SQL.DEFINE_COLUMN(P_HS_CURSOR, 9, L_WHAT_DESCRIPTION, 255);
      DBMS_SQL.DEFINE_COLUMN(P_HS_CURSOR, 10, L_LOGDATE);
      DBMS_SQL.DEFINE_COLUMN(P_HS_CURSOR, 11, L_WHY, 255);
      DBMS_SQL.DEFINE_COLUMN(P_HS_CURSOR, 12, L_TR_SEQ);
      DBMS_SQL.DEFINE_COLUMN(P_HS_CURSOR, 13, L_EV_SEQ);
      L_RESULT := DBMS_SQL.EXECUTE(P_HS_CURSOR);
   END IF;

   L_RESULT := DBMS_SQL.FETCH_ROWS(P_HS_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;
      DBMS_SQL.COLUMN_VALUE(P_HS_CURSOR, 1, L_SC);
      DBMS_SQL.COLUMN_VALUE(P_HS_CURSOR, 2, L_PG);
      DBMS_SQL.COLUMN_VALUE(P_HS_CURSOR, 3, L_PGNODE);
      DBMS_SQL.COLUMN_VALUE(P_HS_CURSOR, 4, L_PA);
      DBMS_SQL.COLUMN_VALUE(P_HS_CURSOR, 5, L_PANODE);
      DBMS_SQL.COLUMN_VALUE(P_HS_CURSOR, 6, L_WHO);
      DBMS_SQL.COLUMN_VALUE(P_HS_CURSOR, 7, L_WHO_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE(P_HS_CURSOR, 8, L_WHAT);
      DBMS_SQL.COLUMN_VALUE(P_HS_CURSOR, 9, L_WHAT_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE(P_HS_CURSOR, 10, L_LOGDATE);
      DBMS_SQL.COLUMN_VALUE(P_HS_CURSOR, 11, L_WHY);
      DBMS_SQL.COLUMN_VALUE(P_HS_CURSOR, 12,L_TR_SEQ);
      DBMS_SQL.COLUMN_VALUE(P_HS_CURSOR, 13,L_EV_SEQ);
      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_SC(L_FETCHED_ROWS)               := L_SC;
      A_PG(L_FETCHED_ROWS)               := L_PG;
      A_PGNODE(L_FETCHED_ROWS)           := L_PGNODE;
      A_PA(L_FETCHED_ROWS)               := L_PA;
      A_PANODE(L_FETCHED_ROWS)           := L_PANODE;
      A_WHO(L_FETCHED_ROWS)              := L_WHO;
      A_WHO_DESCRIPTION(L_FETCHED_ROWS)  := L_WHO_DESCRIPTION;
      A_WHAT(L_FETCHED_ROWS)             := L_WHAT;
      A_WHAT_DESCRIPTION(L_FETCHED_ROWS) := L_WHAT_DESCRIPTION;
      A_LOGDATE(L_FETCHED_ROWS)          := TO_CHAR(L_LOGDATE);
      A_WHY(L_FETCHED_ROWS)              := L_WHY;
      A_TR_SEQ(L_FETCHED_ROWS)           := L_TR_SEQ;
      A_EV_SEQ(L_FETCHED_ROWS)           := L_EV_SEQ;
      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_HS_CURSOR);
      END IF;
   END LOOP;

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
      DBMS_SQL.CLOSE_CURSOR(P_HS_CURSOR);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
      DBMS_SQL.CLOSE_CURSOR(P_HS_CURSOR);
   ELSE
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;
   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
             'GetScPaHistory', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN(P_HS_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(P_HS_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETSCPAHISTORY;

FUNCTION GETSCPAHISTORYDETAILS 
(A_SC                OUT     UNAPIGEN.VC20_TABLE_TYPE,    
 A_PG                OUT     UNAPIGEN.VC20_TABLE_TYPE,    
 A_PGNODE            OUT     UNAPIGEN.LONG_TABLE_TYPE,    
 A_PA                OUT     UNAPIGEN.VC20_TABLE_TYPE,    
 A_PANODE            OUT     UNAPIGEN.LONG_TABLE_TYPE,    
 A_TR_SEQ            OUT     UNAPIGEN.NUM_TABLE_TYPE,     
 A_EV_SEQ            OUT     UNAPIGEN.NUM_TABLE_TYPE,     
 A_SEQ               OUT     UNAPIGEN.NUM_TABLE_TYPE,     
 A_DETAILS           OUT     UNAPIGEN.VC4000_TABLE_TYPE,  
 A_NR_OF_ROWS        IN OUT  NUMBER,                      
 A_WHERE_CLAUSE      IN      VARCHAR2,                    
 A_NEXT_ROWS         IN      NUMBER)                      
RETURN NUMBER IS

L_SC                      VARCHAR2(20);
L_PG                      VARCHAR2(20);
L_PGNODE                  NUMBER(9);
L_PA                      VARCHAR2(20);
L_PANODE                  NUMBER(9);
L_TR_SEQ                  NUMBER;
L_EV_SEQ                  NUMBER;
L_SEQ                     NUMBER;
L_DETAILS                 VARCHAR2(4000);

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF DBMS_SQL.IS_OPEN(P_HS_DETAILS_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(P_HS_DETAILS_CURSOR);
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_HS_DETAILS_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN

      
      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
         RETURN(UNAPIGEN.DBERR_WHERECLAUSE);
      ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
         L_WHERE_CLAUSE := 'WHERE sc = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                           ''' ORDER BY pgnode, panode, tr_seq DESC, ev_seq DESC, seq DESC';
      ELSE
         L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
      END IF;

      IF DBMS_SQL.IS_OPEN(P_HS_DETAILS_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(P_HS_DETAILS_CURSOR);
      END IF;
      P_HS_DETAILS_CURSOR := DBMS_SQL.OPEN_CURSOR;
      L_SQL_STRING := 'SELECT sc, pg, pgnode, pa, panode, tr_seq, ev_seq, seq, details '||
                      'FROM dd' || UNAPIGEN.P_DD || '.uvscpahsdetails ' ||
                      L_WHERE_CLAUSE;
      DBMS_SQL.PARSE(P_HS_DETAILS_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      DBMS_SQL.DEFINE_COLUMN(P_HS_DETAILS_CURSOR, 1, L_SC, 20);
      DBMS_SQL.DEFINE_COLUMN(P_HS_DETAILS_CURSOR, 2, L_PG, 20);
      DBMS_SQL.DEFINE_COLUMN(P_HS_DETAILS_CURSOR, 3, L_PGNODE);
      DBMS_SQL.DEFINE_COLUMN(P_HS_DETAILS_CURSOR, 4, L_PA, 20);
      DBMS_SQL.DEFINE_COLUMN(P_HS_DETAILS_CURSOR, 5, L_PANODE);
      DBMS_SQL.DEFINE_COLUMN(P_HS_DETAILS_CURSOR, 6, L_TR_SEQ);
      DBMS_SQL.DEFINE_COLUMN(P_HS_DETAILS_CURSOR, 7, L_EV_SEQ);
      DBMS_SQL.DEFINE_COLUMN(P_HS_DETAILS_CURSOR, 8, L_SEQ);
      DBMS_SQL.DEFINE_COLUMN(P_HS_DETAILS_CURSOR, 9, L_DETAILS, 4000);   
      L_RESULT := DBMS_SQL.EXECUTE(P_HS_DETAILS_CURSOR);
   END IF;
   
   L_RESULT := DBMS_SQL.FETCH_ROWS(P_HS_DETAILS_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;
      DBMS_SQL.COLUMN_VALUE(P_HS_DETAILS_CURSOR, 1, L_SC);
      DBMS_SQL.COLUMN_VALUE(P_HS_DETAILS_CURSOR, 2, L_PG);
      DBMS_SQL.COLUMN_VALUE(P_HS_DETAILS_CURSOR, 3, L_PGNODE);
      DBMS_SQL.COLUMN_VALUE(P_HS_DETAILS_CURSOR, 4, L_PA);
      DBMS_SQL.COLUMN_VALUE(P_HS_DETAILS_CURSOR, 5, L_PANODE);
      DBMS_SQL.COLUMN_VALUE(P_HS_DETAILS_CURSOR, 6, L_TR_SEQ);
      DBMS_SQL.COLUMN_VALUE(P_HS_DETAILS_CURSOR, 7, L_EV_SEQ);
      DBMS_SQL.COLUMN_VALUE(P_HS_DETAILS_CURSOR, 8, L_SEQ);
      DBMS_SQL.COLUMN_VALUE(P_HS_DETAILS_CURSOR, 9, L_DETAILS);
      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_SC(L_FETCHED_ROWS)      := L_SC;
      A_PG(L_FETCHED_ROWS)      := L_PG;
      A_PGNODE(L_FETCHED_ROWS)  := L_PGNODE;
      A_PA(L_FETCHED_ROWS)      := L_PA;
      A_PANODE(L_FETCHED_ROWS)  := L_PANODE;
      A_TR_SEQ(L_FETCHED_ROWS)  := L_TR_SEQ;
      A_EV_SEQ(L_FETCHED_ROWS)  := L_EV_SEQ;
      A_SEQ(L_FETCHED_ROWS)     := L_SEQ;
      A_DETAILS(L_FETCHED_ROWS) := L_DETAILS;
      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_HS_DETAILS_CURSOR);
      END IF;
   END LOOP;

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
      DBMS_SQL.CLOSE_CURSOR(P_HS_DETAILS_CURSOR);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
      DBMS_SQL.CLOSE_CURSOR(P_HS_DETAILS_CURSOR);
   ELSE
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;
   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
             'GetScPaHistoryDetails', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN(P_HS_DETAILS_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(P_HS_DETAILS_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETSCPAHISTORYDETAILS;

FUNCTION SAVESCPAHISTORY
(A_SC                IN     VARCHAR2,                  
 A_PG                IN     VARCHAR2,                  
 A_PGNODE            IN     NUMBER,                    
 A_PA                IN     VARCHAR2,                  
 A_PANODE            IN     NUMBER,                    
 A_WHO               IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_WHO_DESCRIPTION   IN     UNAPIGEN.VC40_TABLE_TYPE,  
 A_WHAT              IN     UNAPIGEN.VC60_TABLE_TYPE,  
 A_WHAT_DESCRIPTION  IN     UNAPIGEN.VC255_TABLE_TYPE, 
 A_LOGDATE           IN     UNAPIGEN.DATE_TABLE_TYPE,  
 A_WHY               IN     UNAPIGEN.VC255_TABLE_TYPE, 
 A_TR_SEQ            IN     UNAPIGEN.NUM_TABLE_TYPE,   
 A_EV_SEQ            IN     UNAPIGEN.NUM_TABLE_TYPE,   
 A_NR_OF_ROWS        IN     NUMBER)                    
RETURN NUMBER IS

L_ALLOW_MODIFY      CHAR(1);
L_LOG_HS            CHAR(1);
L_LOG_HS_DETAILS    CHAR(1);
L_ACTIVE            CHAR(1);
L_LC                VARCHAR2(2);
L_LC_VERSION        VARCHAR2(20);
L_SS                VARCHAR2(2);
L_PR_VERSION        VARCHAR2(20);

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_NR_OF_ROWS, -1) < 0 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NROFROWS;
      RAISE STPERROR;
   END IF;

   IF NVL(A_SC, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_PG, ' ') = ' ' OR
      NVL(A_PGNODE, 0) = 0 OR
      NVL(A_PA, ' ') = ' ' OR
      NVL(A_PANODE, 0) = 0 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIAUT.GETSCPAAUTHORISATION(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, L_PR_VERSION, 
                                               L_LC, L_LC_VERSION, L_SS, L_ALLOW_MODIFY, L_ACTIVE,
                                               L_LOG_HS, L_LOG_HS_DETAILS);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      UPDATE UTSCPAHS
      SET WHY = A_WHY(L_SEQ_NO)
      WHERE SC = A_SC
         AND PG = A_PG
         AND PGNODE = A_PGNODE
         AND PA = A_PA
         AND PANODE = A_PANODE
         AND WHO = A_WHO(L_SEQ_NO)
         AND WHO_DESCRIPTION = A_WHO_DESCRIPTION(L_SEQ_NO)
         AND TO_CHAR(LOGDATE) = A_LOGDATE(L_SEQ_NO)
         AND WHAT = A_WHAT(L_SEQ_NO)
         AND WHAT_DESCRIPTION = A_WHAT_DESCRIPTION(L_SEQ_NO)
         AND TR_SEQ = A_TR_SEQ(L_SEQ_NO)
         AND EV_SEQ = A_EV_SEQ(L_SEQ_NO);

      IF SQL%ROWCOUNT = 0 THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
         RAISE STPERROR;
      END IF;
   END LOOP;


   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveScPaHistory', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveScPaHistory'));
END SAVESCPAHISTORY;

FUNCTION ADDSCPACOMMENT
(A_SC           IN  VARCHAR2, 
 A_PG           IN  VARCHAR2, 
 A_PGNODE       IN  NUMBER,   
 A_PA           IN  VARCHAR2, 
 A_PANODE       IN  NUMBER,   
 A_COMMENT      IN  VARCHAR2) 
RETURN NUMBER IS

L_ALLOW_MODIFY      CHAR(1);
L_LOG_HS            CHAR(1);
L_LOG_HS_DETAILS    CHAR(1);
L_ACTIVE            CHAR(1);
L_LC                VARCHAR2(2);
L_LC_VERSION        VARCHAR2(20);
L_SS                VARCHAR2(2);
L_HS_DETAILS_SEQ_NR INTEGER;
L_OLD_COMMENT       VARCHAR2(255);
L_PR_VERSION        VARCHAR2(20);

CURSOR L_SCPACOMMENTOLD_CURSOR (A_SC IN VARCHAR2, 
                                A_PG IN VARCHAR2, A_PGNODE IN NUMBER,
                                A_PA IN VARCHAR2, A_PANODE IN NUMBER) IS
   SELECT LAST_COMMENT
   FROM UTSCPA A
   WHERE A.SC = A_SC
     AND A.PG = A_PG
     AND A.PGNODE = A_PGNODE
     AND A.PA = A_PA
     AND A.PANODE = A_PANODE;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_SC, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_PG, ' ') = ' ' OR
      NVL(A_PGNODE, 0) = 0 OR
      NVL(A_PA, ' ') = ' ' OR
      NVL(A_PANODE, 0) = 0 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIAUT.GETSCPAAUTHORISATION(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, L_PR_VERSION, 
                                               L_LC, L_LC_VERSION, L_SS, L_ALLOW_MODIFY, L_ACTIVE,
                                               L_LOG_HS, L_LOG_HS_DETAILS);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   
   
   
   OPEN L_SCPACOMMENTOLD_CURSOR(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE);
   FETCH L_SCPACOMMENTOLD_CURSOR
   INTO L_OLD_COMMENT;
   CLOSE L_SCPACOMMENTOLD_CURSOR;

   UPDATE UTSCPA
   SET LAST_COMMENT = A_COMMENT
   WHERE SC = A_SC
   AND PG = A_PG
   AND PGNODE = A_PGNODE
   AND PA = A_PA
   AND PANODE = A_PANODE;
             
   L_RET_CODE := UNAPIGEN.GETNEXTEVENTSEQNR(L_EV_SEQ_NR);
   IF L_RET_CODE <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   IF L_LOG_HS = '1' THEN   
      INSERT INTO UTSCPAHS(SC, PG, PGNODE, PA, PANODE, WHO, WHO_DESCRIPTION, WHAT, 
                           WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 'Comment', 
             'comment is added on parameter "'||A_PA||'"', 
             CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_COMMENT, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   L_HS_DETAILS_SEQ_NR := 0;
   IF L_LOG_HS_DETAILS = '1' THEN
      IF NVL((L_OLD_COMMENT <> A_COMMENT), TRUE) AND NOT(L_OLD_COMMENT IS NULL AND A_COMMENT IS NULL)  THEN 
         L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
         INSERT INTO UTSCPAHSDETAILS(SC, PG, PGNODE, PA, PANODE, TR_SEQ, EV_SEQ, SEQ, DETAILS)
         VALUES(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR, 
                'parameter "'||A_PA||'" is updated: property <last_comment> changed value from "' || SUBSTR(L_OLD_COMMENT,1,40) || '" to "' || SUBSTR(A_COMMENT,1,40) || '".');
      END IF;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('AddScPaComment', SQLERRM);
   END IF;
   IF L_SCPACOMMENTOLD_CURSOR%ISOPEN THEN
      CLOSE L_SCPACOMMENTOLD_CURSOR;
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'AddScPaComment'));
END ADDSCPACOMMENT;

FUNCTION GETSCPACOMMENT
(A_SC               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PG               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PGNODE           OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_PA               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PANODE           OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_LAST_COMMENT     OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_NR_OF_ROWS       IN OUT  NUMBER,                    
 A_WHERE_CLAUSE     IN      VARCHAR2,                  
 A_NEXT_ROWS        IN      NUMBER)                    
RETURN NUMBER IS

L_SC                VARCHAR2(20);
L_PG                VARCHAR2(20);
L_PGNODE            NUMBER(9);
L_PA                VARCHAR2(20);
L_PANODE            NUMBER(9);
L_LAST_COMMENT      VARCHAR2(255);

L_FROM_CLAUSE       VARCHAR2(255);

BEGIN

   IF NVL(A_NR_OF_ROWS, 0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_GETSCPACOMMENT_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_GETSCPACOMMENT_CURSOR);
         P_GETSCPACOMMENT_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;
   
   
   IF A_NEXT_ROWS = 1 THEN
      IF P_GETSCPACOMMENT_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      L_SQL_STRING := 'SELECT a.sc, a.pg, a.pgnode, a.pa, a.panode, ' ||
                      'a.last_comment FROM ';

      L_FROM_CLAUSE := 'dd' || UNAPIGEN.P_DD || '.uvscpa a ';

      
      L_WHERE_CLAUSE := ' ';
      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
         RETURN(UNAPIGEN.DBERR_WHERECLAUSE);
      ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
         L_WHERE_CLAUSE := ' WHERE a.sc = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                           ''' ORDER BY a.pgnode, a.panode';
      ELSE
         L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
      END IF;

      L_SQL_STRING := L_SQL_STRING || L_FROM_CLAUSE || L_WHERE_CLAUSE;

      IF P_GETSCPACOMMENT_CURSOR IS NULL THEN
         P_GETSCPACOMMENT_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;
      
      DBMS_SQL.PARSE(P_GETSCPACOMMENT_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

      DBMS_SQL.DEFINE_COLUMN(P_GETSCPACOMMENT_CURSOR, 1, L_SC, 20);
      DBMS_SQL.DEFINE_COLUMN(P_GETSCPACOMMENT_CURSOR, 2, L_PG, 20);
      DBMS_SQL.DEFINE_COLUMN(P_GETSCPACOMMENT_CURSOR, 3, L_PGNODE);
      DBMS_SQL.DEFINE_COLUMN(P_GETSCPACOMMENT_CURSOR, 4, L_PA, 20);
      DBMS_SQL.DEFINE_COLUMN(P_GETSCPACOMMENT_CURSOR, 5, L_PANODE);
      DBMS_SQL.DEFINE_COLUMN(P_GETSCPACOMMENT_CURSOR, 6, L_LAST_COMMENT, 255);

      L_RESULT := DBMS_SQL.EXECUTE(P_GETSCPACOMMENT_CURSOR);

   END IF;
   
   L_RESULT := DBMS_SQL.FETCH_ROWS(P_GETSCPACOMMENT_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_GETSCPACOMMENT_CURSOR, 1, L_SC);
      DBMS_SQL.COLUMN_VALUE(P_GETSCPACOMMENT_CURSOR, 2, L_PG);
      DBMS_SQL.COLUMN_VALUE(P_GETSCPACOMMENT_CURSOR, 3, L_PGNODE);
      DBMS_SQL.COLUMN_VALUE(P_GETSCPACOMMENT_CURSOR, 4, L_PA);
      DBMS_SQL.COLUMN_VALUE(P_GETSCPACOMMENT_CURSOR, 5, L_PANODE);
      DBMS_SQL.COLUMN_VALUE(P_GETSCPACOMMENT_CURSOR, 6, L_LAST_COMMENT);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_SC(L_FETCHED_ROWS) := L_SC;
      A_PG(L_FETCHED_ROWS) := L_PG;
      A_PGNODE(L_FETCHED_ROWS) := L_PGNODE;
      A_PA(L_FETCHED_ROWS) := L_PA;
      A_PANODE(L_FETCHED_ROWS) := L_PANODE;
      A_LAST_COMMENT(L_FETCHED_ROWS) := L_LAST_COMMENT;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_GETSCPACOMMENT_CURSOR);
      END IF;

   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_GETSCPACOMMENT_CURSOR);
       P_GETSCPACOMMENT_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_GETSCPACOMMENT_CURSOR);
      P_GETSCPACOMMENT_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;
   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
             'GetScPaComment', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN(P_GETSCPACOMMENT_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(P_GETSCPACOMMENT_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETSCPACOMMENT;

FUNCTION GETSCPAACCESS
(A_SC             OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PG             OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PGNODE         OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_PA             OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PANODE         OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_DD             OUT     UNAPIGEN.VC3_TABLE_TYPE,   
 A_DATA_DOMAIN    OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_ACCESS_RIGHTS  OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NR_OF_ROWS     IN OUT  NUMBER,                    
 A_WHERE_CLAUSE   IN      VARCHAR2)                  
RETURN NUMBER IS

L_SC             VARCHAR2(20);
L_PG             VARCHAR2(20);
L_PGNODE         NUMBER(9);
L_PA             VARCHAR2(20);
L_PANODE         NUMBER(9);
L_DD_DESCRIPTION VARCHAR2(40);
L_AR             UNAPIGEN.CHAR1_TABLE_TYPE; 
L_DD             VARCHAR2(3);
L_DESCRIPTION    UNAPIGEN.VC40_TABLE_TYPE;
L_ROW            INTEGER;
L_DD_CURSOR   UNAPIGEN.CURSOR_REF_TYPE;
L_AR_CURSOR   UNAPIGEN.CURSOR_REF_TYPE;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      RETURN(UNAPIGEN.DBERR_WHERECLAUSE);
   ELSIF
      UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := 'WHERE sc = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') ||''' ORDER BY pgnode,panode'; 
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   
   
   
   L_SQL_STRING:= 'SELECT dd, description FROM dd'||UNAPIGEN.P_DD||'.uvdd ORDER BY dd';
   OPEN L_DD_CURSOR FOR L_SQL_STRING;
   FOR I IN 1..UNAPIGEN.P_DATADOMAINS LOOP
      FETCH L_DD_CURSOR INTO L_DD, L_DD_DESCRIPTION;
      L_DESCRIPTION(L_DD) := L_DD_DESCRIPTION;
   END LOOP;
   CLOSE L_DD_CURSOR;

   L_SQL_STRING:= 
      'SELECT ar1, ar2, ar3, ar4, ar5, ar6, ar7, ar8, ar9, ar10, ar11, ar12, ar13, ar14, ar15, ar16, ' ||
      'ar17, ar18, ar19, ar20, ar21, ar22, ar23, ar24, ar25, ar26, ar27, ar28, ar29, ar30, ar31, ' ||
      'ar32, ar33, ar34, ar35, ar36, ar37, ar38, ar39, ar40, ar41, ar42, ar43, ar44, ar45, ar46, ' ||
      'ar47, ar48, ar49, ar50, ar51, ar52, ar53, ar54, ar55, ar56, ar57, ar58, ar59, ar60, ar61, ' ||
      'ar62, ar63, ar64, ar65, ar66, ar67, ar68, ar69, ar70, ar71, ar72, ar73, ar74, ar75, ar76, ' ||
      'ar77, ar78, ar79, ar80, ar81, ar82, ar83, ar84, ar85, ar86, ar87, ar88, ar89, ar90, ar91, ' ||
      'ar92, ar93, ar94, ar95, ar96, ar97, ar98, ar99, ar100, ar101, ar102, ar103, ar104, ar105, ' ||
      'ar106, ar107, ar108, ar109, ar110, ar111, ar112, ar113, ar114, ar115, ar116, ar117, ar118, ' ||
      'ar119, ar120, ar121, ar122, ar123, ar124, ar125, ar126, ar127, ar128, sc, pg, pgnode, ' ||
      'pa, panode FROM udscpa ' || 
       L_WHERE_CLAUSE;
   L_FETCHED_ROWS := 0;
   OPEN L_AR_CURSOR FOR L_SQL_STRING;
   LOOP
      FETCH L_AR_CURSOR INTO L_AR(1),L_AR(2),L_AR(3),L_AR(4),L_AR(5),L_AR(6),L_AR(7),L_AR(8),L_AR(9),
      L_AR(10),L_AR(11),L_AR(12),L_AR(13),L_AR(14),L_AR(15),L_AR(16),L_AR(17),L_AR(18),L_AR(19),
      L_AR(20),L_AR(21),L_AR(22),L_AR(23),L_AR(24),L_AR(25),L_AR(26),L_AR(27),L_AR(28),L_AR(29),
      L_AR(30),L_AR(31),L_AR(32),L_AR(33),L_AR(34),L_AR(35),L_AR(36),L_AR(37),L_AR(38),L_AR(39),
      L_AR(40),L_AR(41),L_AR(42),L_AR(43),L_AR(44),L_AR(45),L_AR(46),L_AR(47),L_AR(48),L_AR(49),
      L_AR(50),L_AR(51),L_AR(52),L_AR(53),L_AR(54),L_AR(55),L_AR(56),L_AR(57),L_AR(58),L_AR(59),
      L_AR(60),L_AR(61),L_AR(62),L_AR(63),L_AR(64),L_AR(65),L_AR(66),L_AR(67),L_AR(68),L_AR(69),
      L_AR(70),L_AR(71),L_AR(72),L_AR(73),L_AR(74),L_AR(75),L_AR(76),L_AR(77),L_AR(78),L_AR(79),
      L_AR(80),L_AR(81),L_AR(82),L_AR(83),L_AR(84),L_AR(85),L_AR(86),L_AR(87),L_AR(88),L_AR(89),
      L_AR(90),L_AR(91),L_AR(92),L_AR(93),L_AR(94),L_AR(95),L_AR(96),L_AR(97),L_AR(98),L_AR(99),
      L_AR(100),L_AR(101),L_AR(102),L_AR(103),L_AR(104),L_AR(105),L_AR(106),L_AR(107),L_AR(108),
      L_AR(109),L_AR(110),L_AR(111),L_AR(112),L_AR(113),L_AR(114),L_AR(115),L_AR(116),L_AR(117),
      L_AR(118),L_AR(119),L_AR(120),L_AR(121),L_AR(122),L_AR(123),L_AR(124),L_AR(125),L_AR(126),
      L_AR(127),L_AR(128), L_SC, L_PG, L_PGNODE, L_PA, L_PANODE;
      EXIT WHEN L_AR_CURSOR%NOTFOUND;
      
      FOR L_ROW IN 1..UNAPIGEN.P_DATADOMAINS LOOP
          L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
          A_SC(L_FETCHED_ROWS) := L_SC;
          A_PG(L_FETCHED_ROWS) := L_PG;
          A_PGNODE(L_FETCHED_ROWS) := L_PGNODE;
          A_PA(L_FETCHED_ROWS) := L_PA;
          A_PANODE(L_FETCHED_ROWS) := L_PANODE;
          A_DD(L_FETCHED_ROWS) := TO_CHAR(L_ROW);
          A_DATA_DOMAIN(L_FETCHED_ROWS) := L_DESCRIPTION(L_ROW);
          A_ACCESS_RIGHTS(L_FETCHED_ROWS) := L_AR(L_ROW);
          IF L_FETCHED_ROWS >= A_NR_OF_ROWS THEN
             EXIT;
          END IF;
      END LOOP;
      IF L_FETCHED_ROWS >= A_NR_OF_ROWS THEN
         EXIT;
      END IF;
   END LOOP;
   CLOSE L_AR_CURSOR;

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
WHEN NO_DATA_FOUND THEN
   IF L_DD_CURSOR%ISOPEN THEN
      CLOSE L_DD_CURSOR;
   END IF;
   IF L_AR_CURSOR%ISOPEN THEN
      CLOSE L_AR_CURSOR;
   END IF;
   RETURN(UNAPIGEN.DBERR_SYSDEFAULTS);
WHEN OTHERS THEN
   L_SQLERRM := SQLERRM;
   IF L_DD_CURSOR%ISOPEN THEN
      CLOSE L_DD_CURSOR;
   END IF;
   IF L_AR_CURSOR%ISOPEN THEN
      CLOSE L_AR_CURSOR;
   END IF;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
           'GetScPaAccess', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETSCPAACCESS;

FUNCTION SAVESCPAACCESS
(A_SC             IN      VARCHAR2,                  
 A_PG             IN      VARCHAR2,                  
 A_PGNODE         IN      NUMBER,                    
 A_PA             IN      VARCHAR2,                  
 A_PANODE         IN      NUMBER,                    
 A_DD             IN      UNAPIGEN.VC3_TABLE_TYPE,   
 A_ACCESS_RIGHTS  IN      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NR_OF_ROWS     IN      NUMBER,                    
 A_MODIFY_REASON  IN      VARCHAR2)                  
RETURN NUMBER IS

L_ALLOW_MODIFY        CHAR(1);
L_LOG_HS              CHAR(1);
L_LOG_HS_DETAILS      CHAR(1);
L_ACTIVE              CHAR(1);
L_LC                  VARCHAR2(2);
L_LC_VERSION          VARCHAR2(20);
L_SS                  VARCHAR2(2);
L_AR_CURSOR           INTEGER;
L_WRITE_FOUND         BOOLEAN;
L_HS_DETAILS_SEQ_NR   INTEGER;
L_PR_VERSION          VARCHAR2(20);

CURSOR L_SCPAOLD_CURSOR (A_SC IN VARCHAR2, 
                         A_PG IN VARCHAR2, A_PGNODE IN NUMBER,
                         A_PA IN VARCHAR2, A_PANODE IN NUMBER)IS
   SELECT A.*
   FROM UDSCPA A
   WHERE A.SC = A_SC
     AND A.PG = A_PG
     AND A.PGNODE = A_PGNODE
     AND A.PA = A_PA
     AND A.PANODE = A_PANODE;
L_SCPAOLD_REC UDSCPA%ROWTYPE;
L_SCPANEW_REC UDSCPA%ROWTYPE;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_NR_OF_ROWS, -1) < 0 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NROFROWS;
      RAISE STPERROR;
   END IF;

   
   
   
   IF NVL(A_SC, ' ') = ' ' OR
      NVL(A_PG, ' ') = ' ' OR
      NVL(A_PGNODE, 0) = 0 OR
      NVL(A_PA, ' ') = ' ' OR
      NVL(A_PANODE, 0) = 0 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIAUT.GETSCPAAUTHORISATION(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, L_PR_VERSION, 
                                               L_LC, L_LC_VERSION, L_SS, L_ALLOW_MODIFY, L_ACTIVE,
                                               L_LOG_HS, L_LOG_HS_DETAILS);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTSCPA
   SET ALLOW_MODIFY = '#'
   WHERE SC = A_SC
      AND PG = A_PG
      AND PGNODE = A_PGNODE
      AND PA = A_PA
      AND PANODE = A_PANODE;
   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR ;
   END IF;

   
   
   
   
   L_SQL_STRING := '';
   L_WRITE_FOUND := FALSE;
   FOR L_CTR IN 1..A_NR_OF_ROWS LOOP

      IF NVL(A_ACCESS_RIGHTS(L_CTR), 'N') NOT IN ('R','W','N') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_AR;
         RAISE STPERROR;
      END IF;

      IF NVL(A_ACCESS_RIGHTS(L_CTR), 'N') = 'W' THEN
         L_WRITE_FOUND := TRUE;
      END IF;

      IF (NVL(TO_NUMBER(A_DD(L_CTR)), -1) < 0) OR (NVL(TO_NUMBER(A_DD(L_CTR)), -1) > UNAPIGEN.P_DATADOMAINS) THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_DD;
         RAISE STPERROR;
      END IF;

      L_SQL_STRING := L_SQL_STRING || ' ar' || A_DD(L_CTR) ||
                      '= ''' || NVL(A_ACCESS_RIGHTS(L_CTR), 'N') || '''';
      IF L_CTR <> A_NR_OF_ROWS THEN
        L_SQL_STRING :=  L_SQL_STRING || ',';
      END IF;
   END LOOP;

   
   IF NOT L_WRITE_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOWRITEACCESS;
      RAISE STPERROR;
   END IF;

   IF NVL(L_SQL_STRING, ' ')  = ' ' THEN
      
      
      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NROFROWS;
      RAISE STPERROR;
   ELSE
      
      
      
      OPEN L_SCPAOLD_CURSOR(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE);
      FETCH L_SCPAOLD_CURSOR
      INTO L_SCPAOLD_REC;
      CLOSE L_SCPAOLD_CURSOR;
      L_SCPANEW_REC := L_SCPAOLD_REC;
            
      
      
      
      L_SQL_STRING := 
         'UPDATE utscpa SET '|| L_SQL_STRING || 
         ' WHERE sc = ''' || REPLACE(A_SC, '''', '''''') || ''' AND'|| 
         ' pg=''' || REPLACE(A_PG, '''', '''''') || ''' AND'|| 
         ' pgnode=' || A_PGNODE || ' AND'||
         ' pa=''' || REPLACE(A_PA, '''', '''''') || ''' AND'|| 
         ' panode=' || A_PANODE || ' ' ||
         'RETURNING';
      FOR I IN 1..UNAPIGEN.P_DATADOMAINS LOOP
         L_SQL_STRING := L_SQL_STRING||' ar'||I||',';
      END LOOP;
      FOR I IN (UNAPIGEN.P_DATADOMAINS+1)..128 LOOP
         L_SQL_STRING := L_SQL_STRING||' ''N'',';
      END LOOP;
      L_SQL_STRING := SUBSTR(L_SQL_STRING, 1, LENGTH(L_SQL_STRING)-1);   
      L_SQL_STRING := L_SQL_STRING||
         ' INTO :ar1, :ar2, :ar3, :ar4, :ar5, :ar6, :ar7, :ar8, :ar9, :ar10, ' ||
              ':ar11, :ar12, :ar13, :ar14, :ar15, :ar16, :ar17, :ar18, :ar19, :ar20, :ar21, :ar22, ' ||
              ':ar23, :ar24, :ar25, :ar26, :ar27, :ar28, :ar29, :ar30, :ar31, :ar32, :ar33, :ar34, ' ||
              ':ar35, :ar36, :ar37, :ar38, :ar39, :ar40, :ar41, :ar42, :ar43, :ar44, :ar45, :ar46, ' ||
              ':ar47, :ar48, :ar49, :ar50, :ar51, :ar52, :ar53, :ar54, :ar55, :ar56, :ar57, :ar58, ' ||
              ':ar59, :ar60, :ar61, :ar62, :ar63, :ar64, :ar65, :ar66, :ar67, :ar68, :ar69, :ar70, ' ||
              ':ar71, :ar72, :ar73, :ar74, :ar75, :ar76, :ar77, :ar78, :ar79, :ar80, :ar81, :ar82, ' ||
              ':ar83, :ar84, :ar85, :ar86, :ar87, :ar88, :ar89, :ar90, :ar91, :ar92, :ar93, :ar94, ' ||
              ':ar95, :ar96, :ar97, :ar98, :ar99, :ar100, :ar101, :ar102, :ar103, :ar104, :ar105, ' ||
              ':ar106, :ar107, :ar108, :ar109, :ar110, :ar111, :ar112, :ar113, :ar114, :ar115, :ar116, ' ||
              ':ar117, :ar118, :ar119, :ar120, :ar121, :ar122, :ar123, :ar124, :ar125, :ar126, :ar127, ' ||
              ':ar128';

      
      
      
      L_AR_CURSOR := DBMS_SQL.OPEN_CURSOR;
      DBMS_SQL.PARSE(L_AR_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar1',   L_SCPANEW_REC.AR1,   1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar2',   L_SCPANEW_REC.AR2,   1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar3',   L_SCPANEW_REC.AR3,   1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar4',   L_SCPANEW_REC.AR4,   1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar5',   L_SCPANEW_REC.AR5,   1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar6',   L_SCPANEW_REC.AR6,   1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar7',   L_SCPANEW_REC.AR7,   1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar8',   L_SCPANEW_REC.AR8,   1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar9',   L_SCPANEW_REC.AR9,   1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar10',  L_SCPANEW_REC.AR10,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar11',  L_SCPANEW_REC.AR11,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar12',  L_SCPANEW_REC.AR12,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar13',  L_SCPANEW_REC.AR13,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar14',  L_SCPANEW_REC.AR14,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar15',  L_SCPANEW_REC.AR15,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar16',  L_SCPANEW_REC.AR16,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar17',  L_SCPANEW_REC.AR17,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar18',  L_SCPANEW_REC.AR18,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar19',  L_SCPANEW_REC.AR19,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar20',  L_SCPANEW_REC.AR20,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar21',  L_SCPANEW_REC.AR21,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar22',  L_SCPANEW_REC.AR22,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar23',  L_SCPANEW_REC.AR23,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar24',  L_SCPANEW_REC.AR24,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar25',  L_SCPANEW_REC.AR25,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar26',  L_SCPANEW_REC.AR26,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar27',  L_SCPANEW_REC.AR27,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar28',  L_SCPANEW_REC.AR28,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar29',  L_SCPANEW_REC.AR29,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar30',  L_SCPANEW_REC.AR30,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar31',  L_SCPANEW_REC.AR31,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar32',  L_SCPANEW_REC.AR32,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar33',  L_SCPANEW_REC.AR33,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar34',  L_SCPANEW_REC.AR34,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar35',  L_SCPANEW_REC.AR35,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar36',  L_SCPANEW_REC.AR36,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar37',  L_SCPANEW_REC.AR37,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar38',  L_SCPANEW_REC.AR38,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar39',  L_SCPANEW_REC.AR39,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar40',  L_SCPANEW_REC.AR40,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar41',  L_SCPANEW_REC.AR41,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar42',  L_SCPANEW_REC.AR42,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar43',  L_SCPANEW_REC.AR43,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar44',  L_SCPANEW_REC.AR44,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar45',  L_SCPANEW_REC.AR45,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar46',  L_SCPANEW_REC.AR46,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar47',  L_SCPANEW_REC.AR47,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar48',  L_SCPANEW_REC.AR48,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar49',  L_SCPANEW_REC.AR49,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar50',  L_SCPANEW_REC.AR50,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar51',  L_SCPANEW_REC.AR51,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar52',  L_SCPANEW_REC.AR52,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar53',  L_SCPANEW_REC.AR53,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar54',  L_SCPANEW_REC.AR54,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar55',  L_SCPANEW_REC.AR55,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar56',  L_SCPANEW_REC.AR56,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar57',  L_SCPANEW_REC.AR57,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar58',  L_SCPANEW_REC.AR58,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar59',  L_SCPANEW_REC.AR59,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar60',  L_SCPANEW_REC.AR60,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar61',  L_SCPANEW_REC.AR61,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar62',  L_SCPANEW_REC.AR62,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar63',  L_SCPANEW_REC.AR63,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar64',  L_SCPANEW_REC.AR64,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar65',  L_SCPANEW_REC.AR65,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar66',  L_SCPANEW_REC.AR66,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar67',  L_SCPANEW_REC.AR67,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar68',  L_SCPANEW_REC.AR68,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar69',  L_SCPANEW_REC.AR69,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar70',  L_SCPANEW_REC.AR70,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar71',  L_SCPANEW_REC.AR71,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar72',  L_SCPANEW_REC.AR72,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar73',  L_SCPANEW_REC.AR73,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar74',  L_SCPANEW_REC.AR74,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar75',  L_SCPANEW_REC.AR75,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar76',  L_SCPANEW_REC.AR76,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar77',  L_SCPANEW_REC.AR77,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar78',  L_SCPANEW_REC.AR78,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar79',  L_SCPANEW_REC.AR79,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar80',  L_SCPANEW_REC.AR80,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar81',  L_SCPANEW_REC.AR81,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar82',  L_SCPANEW_REC.AR82,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar83',  L_SCPANEW_REC.AR83,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar84',  L_SCPANEW_REC.AR84,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar85',  L_SCPANEW_REC.AR85,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar86',  L_SCPANEW_REC.AR86,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar87',  L_SCPANEW_REC.AR87,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar88',  L_SCPANEW_REC.AR88,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar89',  L_SCPANEW_REC.AR89,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar90',  L_SCPANEW_REC.AR90,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar91',  L_SCPANEW_REC.AR91,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar92',  L_SCPANEW_REC.AR92,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar93',  L_SCPANEW_REC.AR93,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar94',  L_SCPANEW_REC.AR94,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar95',  L_SCPANEW_REC.AR95,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar96',  L_SCPANEW_REC.AR96,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar97',  L_SCPANEW_REC.AR97,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar98',  L_SCPANEW_REC.AR98,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar99',  L_SCPANEW_REC.AR99,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar100', L_SCPANEW_REC.AR100, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar101', L_SCPANEW_REC.AR101, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar102', L_SCPANEW_REC.AR102, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar103', L_SCPANEW_REC.AR103, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar104', L_SCPANEW_REC.AR104, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar105', L_SCPANEW_REC.AR105, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar106', L_SCPANEW_REC.AR106, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar107', L_SCPANEW_REC.AR107, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar108', L_SCPANEW_REC.AR108, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar109', L_SCPANEW_REC.AR109, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar110', L_SCPANEW_REC.AR110, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar111', L_SCPANEW_REC.AR111, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar112', L_SCPANEW_REC.AR112, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar113', L_SCPANEW_REC.AR113, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar114', L_SCPANEW_REC.AR114, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar115', L_SCPANEW_REC.AR115, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar116', L_SCPANEW_REC.AR116, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar117', L_SCPANEW_REC.AR117, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar118', L_SCPANEW_REC.AR118, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar119', L_SCPANEW_REC.AR119, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar120', L_SCPANEW_REC.AR120, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar121', L_SCPANEW_REC.AR121, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar122', L_SCPANEW_REC.AR122, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar123', L_SCPANEW_REC.AR123, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar124', L_SCPANEW_REC.AR124, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar125', L_SCPANEW_REC.AR125, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar126', L_SCPANEW_REC.AR126, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar127', L_SCPANEW_REC.AR127, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar128', L_SCPANEW_REC.AR128, 1);

      L_RESULT := DBMS_SQL.EXECUTE(L_AR_CURSOR);

      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar1',   L_SCPANEW_REC.AR1  );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar2',   L_SCPANEW_REC.AR2  );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar3',   L_SCPANEW_REC.AR3  );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar4',   L_SCPANEW_REC.AR4  );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar5',   L_SCPANEW_REC.AR5  );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar6',   L_SCPANEW_REC.AR6  );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar7',   L_SCPANEW_REC.AR7  );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar8',   L_SCPANEW_REC.AR8  );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar9',   L_SCPANEW_REC.AR9  );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar10',  L_SCPANEW_REC.AR10 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar11',  L_SCPANEW_REC.AR11 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar12',  L_SCPANEW_REC.AR12 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar13',  L_SCPANEW_REC.AR13 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar14',  L_SCPANEW_REC.AR14 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar15',  L_SCPANEW_REC.AR15 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar16',  L_SCPANEW_REC.AR16 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar17',  L_SCPANEW_REC.AR17 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar18',  L_SCPANEW_REC.AR18 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar19',  L_SCPANEW_REC.AR19 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar20',  L_SCPANEW_REC.AR20 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar21',  L_SCPANEW_REC.AR21 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar22',  L_SCPANEW_REC.AR22 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar23',  L_SCPANEW_REC.AR23 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar24',  L_SCPANEW_REC.AR24 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar25',  L_SCPANEW_REC.AR25 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar26',  L_SCPANEW_REC.AR26 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar27',  L_SCPANEW_REC.AR27 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar28',  L_SCPANEW_REC.AR28 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar29',  L_SCPANEW_REC.AR29 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar30',  L_SCPANEW_REC.AR30 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar31',  L_SCPANEW_REC.AR31 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar32',  L_SCPANEW_REC.AR32 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar33',  L_SCPANEW_REC.AR33 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar34',  L_SCPANEW_REC.AR34 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar35',  L_SCPANEW_REC.AR35 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar36',  L_SCPANEW_REC.AR36 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar37',  L_SCPANEW_REC.AR37 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar38',  L_SCPANEW_REC.AR38 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar39',  L_SCPANEW_REC.AR39 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar40',  L_SCPANEW_REC.AR40 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar41',  L_SCPANEW_REC.AR41 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar42',  L_SCPANEW_REC.AR42 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar43',  L_SCPANEW_REC.AR43 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar44',  L_SCPANEW_REC.AR44 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar45',  L_SCPANEW_REC.AR45 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar46',  L_SCPANEW_REC.AR46 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar47',  L_SCPANEW_REC.AR47 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar48',  L_SCPANEW_REC.AR48 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar49',  L_SCPANEW_REC.AR49 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar50',  L_SCPANEW_REC.AR50 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar51',  L_SCPANEW_REC.AR51 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar52',  L_SCPANEW_REC.AR52 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar53',  L_SCPANEW_REC.AR53 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar54',  L_SCPANEW_REC.AR54 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar55',  L_SCPANEW_REC.AR55 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar56',  L_SCPANEW_REC.AR56 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar57',  L_SCPANEW_REC.AR57 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar58',  L_SCPANEW_REC.AR58 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar59',  L_SCPANEW_REC.AR59 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar60',  L_SCPANEW_REC.AR60 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar61',  L_SCPANEW_REC.AR61 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar62',  L_SCPANEW_REC.AR62 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar63',  L_SCPANEW_REC.AR63 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar64',  L_SCPANEW_REC.AR64 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar65',  L_SCPANEW_REC.AR65 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar66',  L_SCPANEW_REC.AR66 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar67',  L_SCPANEW_REC.AR67 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar68',  L_SCPANEW_REC.AR68 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar69',  L_SCPANEW_REC.AR69 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar70',  L_SCPANEW_REC.AR70 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar71',  L_SCPANEW_REC.AR71 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar72',  L_SCPANEW_REC.AR72 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar73',  L_SCPANEW_REC.AR73 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar74',  L_SCPANEW_REC.AR74 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar75',  L_SCPANEW_REC.AR75 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar76',  L_SCPANEW_REC.AR76 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar77',  L_SCPANEW_REC.AR77 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar78',  L_SCPANEW_REC.AR78 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar79',  L_SCPANEW_REC.AR79 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar80',  L_SCPANEW_REC.AR80 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar81',  L_SCPANEW_REC.AR81 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar82',  L_SCPANEW_REC.AR82 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar83',  L_SCPANEW_REC.AR83 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar84',  L_SCPANEW_REC.AR84 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar85',  L_SCPANEW_REC.AR85 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar86',  L_SCPANEW_REC.AR86 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar87',  L_SCPANEW_REC.AR87 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar88',  L_SCPANEW_REC.AR88 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar89',  L_SCPANEW_REC.AR89 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar90',  L_SCPANEW_REC.AR90 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar91',  L_SCPANEW_REC.AR91 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar92',  L_SCPANEW_REC.AR92 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar93',  L_SCPANEW_REC.AR93 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar94',  L_SCPANEW_REC.AR94 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar95',  L_SCPANEW_REC.AR95 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar96',  L_SCPANEW_REC.AR96 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar97',  L_SCPANEW_REC.AR97 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar98',  L_SCPANEW_REC.AR98 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar99',  L_SCPANEW_REC.AR99 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar100', L_SCPANEW_REC.AR100);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar101', L_SCPANEW_REC.AR101);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar102', L_SCPANEW_REC.AR102);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar103', L_SCPANEW_REC.AR103);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar104', L_SCPANEW_REC.AR104);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar105', L_SCPANEW_REC.AR105);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar106', L_SCPANEW_REC.AR106);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar107', L_SCPANEW_REC.AR107);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar108', L_SCPANEW_REC.AR108);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar109', L_SCPANEW_REC.AR109);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar110', L_SCPANEW_REC.AR110);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar111', L_SCPANEW_REC.AR111);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar112', L_SCPANEW_REC.AR112);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar113', L_SCPANEW_REC.AR113);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar114', L_SCPANEW_REC.AR114);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar115', L_SCPANEW_REC.AR115);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar116', L_SCPANEW_REC.AR116);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar117', L_SCPANEW_REC.AR117);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar118', L_SCPANEW_REC.AR118);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar119', L_SCPANEW_REC.AR119);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar120', L_SCPANEW_REC.AR120);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar121', L_SCPANEW_REC.AR121);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar122', L_SCPANEW_REC.AR122);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar123', L_SCPANEW_REC.AR123);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar124', L_SCPANEW_REC.AR124);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar125', L_SCPANEW_REC.AR125);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar126', L_SCPANEW_REC.AR126);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar127', L_SCPANEW_REC.AR127);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar128', L_SCPANEW_REC.AR128);

      IF L_RESULT = 0 THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
         RAISE STPERROR;
      END IF;

      DBMS_SQL.CLOSE_CURSOR(L_AR_CURSOR);

      
      
      
      L_EVENT_TP := 'PaAccessRightsUpdated';
      L_EV_SEQ_NR := -1;
      L_EV_DETAILS := 'sc=' ||A_SC || 
                      '#pg=' || A_PG ||
                      '#pgnode=' || TO_CHAR(A_PGNODE) ||
                      '#panode=' || TO_CHAR(A_PANODE) ||
                      '#pr_version=' || L_PR_VERSION;

      L_RESULT := UNAPIEV.INSERTEVENT('SaveScPaAccess', UNAPIGEN.P_EVMGR_NAME, 'pa', A_PA,
                                      L_LC, L_LC_VERSION, L_SS, L_EVENT_TP, L_EV_DETAILS,
                                      L_EV_SEQ_NR);
      IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
         UNAPIGEN.P_TXN_ERROR := L_RESULT;
         RAISE STPERROR;
      END IF;

      IF L_LOG_HS = '1' THEN
         INSERT INTO UTSCPAHS(SC, PG, PGNODE, PA, PANODE, WHO, WHO_DESCRIPTION, WHAT, 
                              WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, UNAPIGEN.P_USER, 
                UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP,
                'access rights for parameter "'||A_PA||'" are updated',
                CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;

      L_HS_DETAILS_SEQ_NR := 0;
      IF L_LOG_HS_DETAILS = '1' THEN
         L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
         INSERT INTO UTSCPAHSDETAILS(SC, PG, PGNODE, PA, PANODE, TR_SEQ, EV_SEQ, SEQ, DETAILS)
         VALUES(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, 
                UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR, 
                'access rights for parameter "'||A_PA||'" are updated');

         UNAPIHSDETAILS.ADDSCPAHSDETAILS(L_SCPAOLD_REC, L_SCPANEW_REC, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, 
                                         L_HS_DETAILS_SEQ_NR);
      END IF;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveScPaAccess', SQLERRM);
   END IF;
   IF DBMS_SQL.IS_OPEN(L_AR_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_AR_CURSOR);
   END IF;
   IF L_SCPAOLD_CURSOR%ISOPEN THEN
      CLOSE L_SCPAOLD_CURSOR;
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveScPaAccess'));
END SAVESCPAACCESS;

FUNCTION SCPATRANSITIONAUTHORISED          
(A_SC                IN      VARCHAR2,     
 A_PG                IN      VARCHAR2,     
 A_PGNODE            IN      NUMBER,       
 A_PA                IN      VARCHAR2,     
 A_PANODE            IN      NUMBER,       
 A_LC                IN OUT  VARCHAR2,     
 A_LC_VERSION        IN OUT  VARCHAR2,     
 A_OLD_SS            IN OUT  VARCHAR2,     
 A_NEW_SS            IN      VARCHAR2,     
 A_AUTHORISED_BY     IN      VARCHAR2,     
 A_LC_SS_FROM        OUT     VARCHAR2,     
 A_TR_NO             OUT     NUMBER,       
 A_ALLOW_MODIFY      OUT     CHAR,         
 A_ACTIVE            OUT     CHAR,         
 A_LOG_HS            OUT     CHAR,         
 A_LOG_HS_DETAILS    OUT     CHAR)         
RETURN NUMBER IS

L_LC                  VARCHAR2(2);
L_LC_VERSION          VARCHAR2(20);
L_SS                  VARCHAR2(2);
L_OLD_ACTIVE          CHAR(1);
L_OLD_ALLOW_MODIFY    CHAR(1);
L_PG_LC               VARCHAR2(2);
L_PG_LC_VERSION       VARCHAR2(20);
L_PG_SS               VARCHAR2(2);
L_PG_ALLOW_MODIFY     CHAR(1);
L_PG_ACTIVE           CHAR(1);
L_PG_LOG_HS           CHAR(1);
L_PG_LOG_HS_DETAILS   CHAR(1);
L_TR_OK               BOOLEAN;
L_PR_VERSION          VARCHAR2(20);
L_PP_VERSION          VARCHAR2(20);
L_LOCK_PA             VARCHAR2(20);

CURSOR L_COS_CURSOR(A_LC VARCHAR2, A_LC_VERSION VARCHAR2, A_SS_FROM VARCHAR2, A_SS_TO VARCHAR2, A_UP NUMBER, A_USER VARCHAR2) IS
   SELECT SS_FROM, TR_NO
   FROM  UTLCUS
   WHERE LC  = A_LC
     AND VERSION = A_LC_VERSION
     AND SS_FROM IN (A_SS_FROM, '@@')
     AND SS_TO   = A_SS_TO
     AND US IN (A_USER, '~ANY~',  'UP'||TO_CHAR(A_UP))
   ORDER BY SS_FROM DESC, TR_NO;

CURSOR L_TR_CURSOR(A_LC VARCHAR2, A_LC_VERSION VARCHAR2, A_SS_FROM VARCHAR2, A_SS_TO VARCHAR2) IS
   SELECT SS_FROM, TR_NO
   FROM  UTLCTR
   WHERE LC  = A_LC
     AND VERSION = A_LC_VERSION
     AND SS_FROM IN (A_SS_FROM, '@@')
     AND SS_TO   = A_SS_TO
   ORDER BY SS_FROM DESC, TR_NO;

CURSOR L_TRDYN_CURSOR(A_LC VARCHAR2, A_LC_VERSION VARCHAR2, A_SS_FROM VARCHAR2, A_SS_TO VARCHAR2) IS
   SELECT *
   FROM  UTLCUS
   WHERE LC  = A_LC
     AND VERSION = A_LC_VERSION
     AND SS_FROM IN (A_SS_FROM, '@@')
     AND SS_TO   = A_SS_TO
     AND US = '~DYNAMIC~'
   ORDER BY SS_FROM DESC, TR_NO;

BEGIN
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_SC, ' ') = ' ' OR
      NVL(A_PG, ' ') = ' ' OR
      NVL(A_PGNODE, 0) = 0 OR
      NVL(A_PA, ' ') = ' ' OR
      NVL(A_PANODE, 0) = 0 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   
   SELECT PA
   INTO L_LOCK_PA
   FROM UTSCPA
   WHERE SC = A_SC
   AND PG = A_PG
   AND PGNODE = A_PGNODE
   AND PA = A_PA
   AND PANODE = A_PANODE
   FOR UPDATE;

   L_RET_CODE := UNAPIAUT.GETSCPAAUTHORISATION(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, L_PR_VERSION, 
                                               L_LC, L_LC_VERSION, L_SS, L_OLD_ALLOW_MODIFY, 
                                               L_OLD_ACTIVE, A_LOG_HS, A_LOG_HS_DETAILS);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      IF L_RET_CODE <> UNAPIGEN.DBERR_NOTMODIFIABLE THEN
         UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
         RAISE STPERROR;
      ELSE
         L_RET_CODE := UNAPIAUT.GETSCPGAUTHORISATION(A_SC, A_PG, A_PGNODE, L_PP_VERSION, L_PG_LC, 
                                                     L_PG_LC_VERSION, L_PG_SS, L_PG_ALLOW_MODIFY, 
                                                     L_PG_ACTIVE, L_PG_LOG_HS, L_PG_LOG_HS_DETAILS);
         IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
            UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
            RAISE STPERROR;
         END IF;
      END IF;
   END IF;
   
   L_SS := NVL(L_SS, '@~');

   IF A_LC IS NULL THEN
      
      IF L_LC IS NULL THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OBJECTLCMATCH;
         RAISE STPERROR;
      END IF;
      IF L_LC_VERSION IS NULL THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OBJECTLCVERSIONMATCH;
         RAISE STPERROR;
      END IF;
      A_LC := L_LC;
      A_LC_VERSION := L_LC_VERSION;
   ELSE
      
      IF A_LC <> NVL(L_LC, '####') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OBJECTLCMATCH;
         RAISE STPERROR;
      END IF;

      
      
      IF L_LC_VERSION IS NULL THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OBJECTLCVERSIONMATCH;
         RAISE STPERROR;
      END IF;
      A_LC_VERSION := L_LC_VERSION;
   END IF;

   IF NVL(A_OLD_SS, ' ') = ' ' THEN
      
      A_OLD_SS := L_SS;
   ELSE
      
      IF A_OLD_SS <> L_SS THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OBJECTSSMATCH;
         RAISE STPERROR;
      END IF;
   END IF;

   BEGIN
      SELECT ALLOW_MODIFY, ACTIVE
      INTO A_ALLOW_MODIFY, A_ACTIVE
      FROM UTSS
      WHERE SS = A_NEW_SS;
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOSS;
      RAISE STPERROR;
   END;

   
   
   
   L_TR_OK := FALSE;
   OPEN L_COS_CURSOR (L_LC, L_LC_VERSION, L_SS, A_NEW_SS, UNAPIGEN.P_CURRENT_UP, NVL(A_AUTHORISED_BY, UNAPIGEN.P_USER))  ;
   FETCH L_COS_CURSOR INTO  A_LC_SS_FROM, A_TR_NO;

   IF L_COS_CURSOR%FOUND THEN
      L_TR_OK := TRUE;
   ELSE
      
      
      OPEN L_TR_CURSOR (L_LC, L_LC_VERSION, L_SS, A_NEW_SS);
      FETCH L_TR_CURSOR INTO  A_LC_SS_FROM, A_TR_NO;
      IF L_TR_CURSOR%NOTFOUND THEN
         UNAPIAUT.P_NOT_AUTHORISED := 'Transition lc(ss_from => ss_to)='||L_LC||'('||NVL(L_SS,'NULL')||' OR @@ => '||A_NEW_SS||') does not exist';      
         L_TR_OK := FALSE;
      ELSE
      
         
         
         IF NVL(A_AUTHORISED_BY, UNAPIGEN.P_USER) = UNAPIGEN.P_DBA_NAME THEN
            L_TR_OK := TRUE;
         ELSE
            
            
            
            
            
            
            
            OPEN L_TRDYN_CURSOR (L_LC, L_LC_VERSION, L_SS, A_NEW_SS);
            LOOP
               FETCH L_TRDYN_CURSOR INTO  UNAPIAUT.P_LCTRUS_REC;
               IF L_TRDYN_CURSOR%NOTFOUND THEN
                  UNAPIAUT.P_NOT_AUTHORISED := 'Transition lc(ss_from => ss_to)='||L_LC||'('||NVL(L_SS,'NULL')||' OR @@ => '||A_NEW_SS||' not authorised for user:';
                  L_TR_OK := FALSE;
                  EXIT;
               ELSE
                  UNAPIAUT.P_OBJECT_TP      := 'pa';
                  UNAPIAUT.P_OBJECT_ID      := A_PA;
                  UNAPIAUT.P_OBJECT_VERSION := NULL;
                  UNAPIAUT.P_LC             := L_LC;
                  UNAPIAUT.P_SS_FROM        := L_SS;
                  UNAPIAUT.P_LC_SS_FROM     := UNAPIAUT.P_LCTRUS_REC.SS_FROM;
                  UNAPIAUT.P_SS_TO          := A_NEW_SS;
                  UNAPIAUT.P_TR_NO          := UNAPIAUT.P_LCTRUS_REC.TR_NO;
                  UNAPIAUT.P_RQ             := NULL;
                  UNAPIAUT.P_CH             := NULL;
                  UNAPIAUT.P_SD             := NULL;
                  UNAPIAUT.P_SC             := A_SC;
                  UNAPIAUT.P_WS             := NULL;
                  UNAPIAUT.P_PG             := A_PG;    UNAPIAUT.P_PGNODE := A_PGNODE;
                  UNAPIAUT.P_PA             := A_PA;    UNAPIAUT.P_PANODE := A_PANODE;
                  UNAPIAUT.P_ME             := NULL;    UNAPIAUT.P_MENODE := NULL;
                  UNAPIAUT.P_IC             := NULL;    UNAPIAUT.P_ICNODE := NULL;
                  UNAPIAUT.P_II             := NULL;    UNAPIAUT.P_IINODE := NULL;
                  UNAPIAUT.P_PP_KEY1        := NULL;                  
                  UNAPIAUT.P_PP_KEY2        := NULL;                  
                  UNAPIAUT.P_PP_KEY3        := NULL;                  
                  UNAPIAUT.P_PP_KEY4        := NULL;                  
                  UNAPIAUT.P_PP_KEY5        := NULL;                  
                  UNAPIAUT.P_LAB            := NULL;
                  A_LC_SS_FROM := UNAPIAUT.P_LCTRUS_REC.SS_FROM;
                  A_TR_NO := UNAPIAUT.P_LCTRUS_REC.TR_NO;
                  L_TR_OK := UNACCESS.TRANSITIONAUTHORISED;
                  IF L_TR_OK THEN
                     UNAPIAUT.P_NOT_AUTHORISED := NULL;
                     EXIT;
                  ELSE
                     
                     
                     
                     UNAPIAUT.P_NOT_AUTHORISED := 'Dynamic user authorisation evaluation returned False Transition lc(ss_from => ss_to)='||L_LC||'('||NVL(L_SS,'NULL')||' OR @@ => '||A_NEW_SS||' not authorised for user:';
                  END IF;
               END IF;
            END LOOP;
            CLOSE L_TRDYN_CURSOR;
         END IF;
      END IF;
      CLOSE L_TR_CURSOR;
   END IF;
   CLOSE L_COS_CURSOR;
   
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NOT L_TR_OK THEN
      RETURN(UNAPIGEN.DBERR_NOTAUTHORISED);
   ELSE
      RETURN(UNAPIGEN.DBERR_SUCCESS);
   END IF;

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('ScPaTransitionAuthorised', SQLERRM);
   END IF;
   IF L_COS_CURSOR%ISOPEN THEN
      CLOSE L_COS_CURSOR;
   END IF;
   IF L_TR_CURSOR%ISOPEN THEN
      CLOSE L_TR_CURSOR;
   END IF;
   IF L_TRDYN_CURSOR%ISOPEN THEN
      CLOSE L_TRDYN_CURSOR;
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'ScPaTransitionAuthorised'));
END SCPATRANSITIONAUTHORISED;
   
FUNCTION CHANGESCPASTATUS
(A_SC                IN      VARCHAR2,     
 A_PG                IN      VARCHAR2,     
 A_PGNODE            IN      NUMBER,       
 A_PA                IN      VARCHAR2,     
 A_PANODE            IN      NUMBER,       
 A_OLD_SS            IN      VARCHAR2,     
 A_NEW_SS            IN      VARCHAR2,     
 A_LC                IN      VARCHAR2,     
 A_LC_VERSION        IN      VARCHAR2,     
 A_MODIFY_REASON     IN      VARCHAR2)     
RETURN NUMBER IS

L_LC                    VARCHAR2(2);
L_LC_VERSION            VARCHAR2(20);
L_OLD_SS                VARCHAR2(2);
L_ALLOW_MODIFY          CHAR(1);
L_ACTIVE                CHAR(1);
L_LOG_HS                CHAR(1);
L_LOG_HS_DETAILS        CHAR(1);
L_LC_SS_FROM            VARCHAR2(2);
L_TR_NO                 NUMBER(3);
L_HS_DETAILS_SEQ_NR     INTEGER;
L_OBJECT_ID             VARCHAR2(255);
L_PR_VERSION            VARCHAR2(20);

CURSOR L_VERSION_CURSOR IS
   SELECT PR_VERSION 
   FROM UTSCPA
   WHERE SC     = A_SC
     AND PG     = A_PG
     AND PGNODE = A_PGNODE
     AND PA     = A_PA
     AND PANODE = A_PANODE;
  
BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   L_LC := A_LC;
   L_LC_VERSION := A_LC_VERSION;
   L_OLD_SS := A_OLD_SS; 
   L_RET_CODE := UNAPIPAP.SCPATRANSITIONAUTHORISED
                    (A_SC, A_PG, A_PGNODE,
                     A_PA, A_PANODE, 
                     L_LC, L_LC_VERSION, L_OLD_SS, A_NEW_SS,
                     UNAPIGEN.P_USER,
                     L_LC_SS_FROM, L_TR_NO, 
                     L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS, L_LOG_HS_DETAILS);
                     
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS AND
      L_RET_CODE <> UNAPIGEN.DBERR_NOTAUTHORISED THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   IF L_RET_CODE = UNAPIGEN.DBERR_SUCCESS THEN
      UPDATE UTSCPA
      SET SS = A_NEW_SS,
          ALLOW_MODIFY = '#',
          ACTIVE = L_ACTIVE
      WHERE SC = A_SC
         AND PG = A_PG
         AND PGNODE = A_PGNODE
         AND PA = A_PA
         AND PANODE = A_PANODE;
   
      IF SQL%ROWCOUNT = 0 THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
         RAISE STPERROR;
      END IF;
   
      OPEN L_VERSION_CURSOR;
      FETCH L_VERSION_CURSOR
      INTO L_PR_VERSION;
      IF L_VERSION_CURSOR%NOTFOUND THEN
         CLOSE L_VERSION_CURSOR;
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_PRVERSION;
         RAISE STPERROR;
      END IF;
      CLOSE L_VERSION_CURSOR;
      
      L_EVENT_TP := 'PaStatusChanged';
      L_EV_SEQ_NR := -1;
      L_EV_DETAILS := 'sc=' || A_SC ||
                      '#pg=' || A_PG || '#pgnode=' || TO_CHAR(A_PGNODE) ||
                      '#panode=' || TO_CHAR(A_PANODE) ||
                      '#tr_no=' || L_TR_NO ||
                      '#ss_from=' || L_OLD_SS ||
                      '#lc_ss_from='|| L_LC_SS_FROM ||
                      '#pr_version=' || L_PR_VERSION;
      L_RESULT := UNAPIEV.INSERTEVENT('ChangeScPaStatus', UNAPIGEN.P_EVMGR_NAME,
                                      'pa', A_PA, L_LC, L_LC_VERSION, A_NEW_SS,
                                      L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);
      IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
         UNAPIGEN.P_TXN_ERROR := L_RESULT;
         RAISE STPERROR;
      END IF;
   
      IF L_LOG_HS = '1' THEN
         INSERT INTO UTSCPAHS(SC, PG, PGNODE, PA, PANODE, WHO, WHO_DESCRIPTION, WHAT, 
                              WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 
                L_EVENT_TP,
                'status of parameter "'||A_PA||'" is changed from "'||UNAPIGEN.SQLSSNAME(L_OLD_SS)||'" ['||L_OLD_SS||'] to "'||UNAPIGEN.SQLSSNAME(A_NEW_SS)||'" ['||A_NEW_SS||'].', 
                CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;   

      L_HS_DETAILS_SEQ_NR := 0;
      IF L_LOG_HS_DETAILS = '1' THEN
         L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
         INSERT INTO UTSCPAHSDETAILS(SC, PG, PGNODE, PA, PANODE, TR_SEQ, EV_SEQ, SEQ, DETAILS)
         VALUES(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR, 
                'status of parameter "'||A_PA||'" is changed from "'||UNAPIGEN.SQLSSNAME(L_OLD_SS)||'" ['||L_OLD_SS||'] to "'||UNAPIGEN.SQLSSNAME(A_NEW_SS)||'" ['||A_NEW_SS||'].');
      END IF;   
   END IF;
   
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   L_OBJECT_ID := A_SC || A_PG || TO_CHAR(A_PGNODE) || A_PA || TO_CHAR(A_PANODE);
   UNAPIAUT.UPDATEAUTHORISATIONBUFFER('pa', L_OBJECT_ID, NULL, A_NEW_SS);

   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('ChangeScPaStatus', SQLERRM);
   END IF;
   IF L_VERSION_CURSOR%ISOPEN THEN
      CLOSE L_VERSION_CURSOR;
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'ChangeScPaStatus'));
END CHANGESCPASTATUS;

FUNCTION INTERNALCHANGESCPASTATUS
(A_SC                IN      VARCHAR2,     
 A_PG                IN      VARCHAR2,     
 A_PGNODE            IN      NUMBER,       
 A_PA                IN      VARCHAR2,     
 A_PANODE            IN      NUMBER,       
 A_NEW_SS            IN      VARCHAR2,     
 A_MODIFY_REASON     IN      VARCHAR2)     
RETURN NUMBER IS

L_RET_CODE                    INTEGER;

L_OLD_SS                      VARCHAR2(2);
L_LC                          VARCHAR2(2);
L_LC_VERSION                  VARCHAR2(20);


L_SEQ_NR                      NUMBER;
L_OBJECT_ID                   VARCHAR2(255);
L_PR_VERSION                  VARCHAR2(20);


L_TMP_RETRIESWHENINTRANSITION  INTEGER;
L_TMP_INTERVALWHENINTRANSITION NUMBER;
L_TMP_REMOTE_MODE              INTEGER;

BEGIN 

   L_TMP_REMOTE_MODE := UNAPIGEN.P_REMOTE;
   UNAPIGEN.P_REMOTE := '1'; 
   
   L_OLD_SS := NULL;
   L_LC := NULL;
   L_LC_VERSION := NULL;
   L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_SC, ' ') = ' ' OR
      NVL(A_PG, ' ') = ' ' OR
      A_PGNODE IS NULL OR
      NVL(A_PA, ' ') = ' ' OR
      A_PANODE IS NULL OR
      NVL(A_NEW_SS, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIPRP.CHECKELECSIGNATURE(A_NEW_SS);
   IF L_RET_CODE = UNAPIGEN.DBERR_SUCCESS THEN
      
      L_TMP_RETRIESWHENINTRANSITION := UNAPIEV.P_RETRIESWHENINTRANSITION;
      L_TMP_INTERVALWHENINTRANSITION := UNAPIEV.P_INTERVALWHENINTRANSITION;
      UNAPIEV.P_RETRIESWHENINTRANSITION  := 1;
      UNAPIEV.P_INTERVALWHENINTRANSITION := 0.2;   

      
      
      IF A_NEW_SS <> '@C' THEN
         L_RET_CODE := UNAPIPAP.CHANGESCPASTATUS (A_SC, A_PG, A_PGNODE, A_PA, A_PANODE,
                                                  L_OLD_SS, A_NEW_SS, L_LC, L_LC_VERSION, A_MODIFY_REASON);

      ELSIF A_NEW_SS = '@C' THEN
         L_RET_CODE := UNAPIPAP.CANCELSCPA (A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, A_MODIFY_REASON);      
      END IF;
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SUCCESS; 
         
         L_SEQ_NR := NULL;
         BEGIN 
            SELECT PR_VERSION
            INTO L_PR_VERSION
            FROM UTSCPA
            WHERE SC = A_SC
            AND PG = A_PG
            AND PGNODE = A_PGNODE
            AND PA = A_PA
            AND PANODE = A_PANODE;
         EXCEPTION
         WHEN NO_DATA_FOUND THEN
            L_PR_VERSION := NULL;
         END;

         L_RET_CODE := UNAPIEV.INSERTEVENT
                         (A_API_NAME          => 'InternalChangeScPaStatus',
                          A_EVMGR_NAME        => UNAPIGEN.P_EVMGR_NAME,
                          A_OBJECT_TP         => 'pa',
                          A_OBJECT_ID         => A_PA,
                          A_OBJECT_LC         => NULL,
                          A_OBJECT_LC_VERSION => NULL,
                          A_OBJECT_SS         => NULL,
                          A_EV_TP             => 'ParameterUpdated',
                          A_EV_DETAILS        => 'sc=' || A_SC || 
                                                 '#pg=' || A_PG ||
                                                 '#pgnode=' || TO_CHAR(A_PGNODE) ||
                                                 '#panode=' || TO_CHAR(A_PANODE) ||
                                                 '#pr_version='||L_PR_VERSION||
                                                 '#ss_to='||A_NEW_SS,
                          A_SEQ_NR            => L_SEQ_NR);
      END IF;

      
      UNAPIEV.P_RETRIESWHENINTRANSITION  := L_TMP_RETRIESWHENINTRANSITION;
      UNAPIEV.P_INTERVALWHENINTRANSITION := L_TMP_INTERVALWHENINTRANSITION;      
   ELSE
         L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;   

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
   L_OBJECT_ID := A_SC || A_PG || TO_CHAR(A_PGNODE) || A_PA || TO_CHAR(A_PANODE);
   UNAPIAUT.UPDATEAUTHORISATIONBUFFER('pa', L_OBJECT_ID, NULL, A_NEW_SS);

   UNAPIGEN.P_REMOTE := L_TMP_REMOTE_MODE;
   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   
   UNAPIGEN.P_REMOTE := L_TMP_REMOTE_MODE;
   IF L_TMP_RETRIESWHENINTRANSITION IS NOT NULL THEN
      UNAPIEV.P_RETRIESWHENINTRANSITION  := L_TMP_RETRIESWHENINTRANSITION;
      UNAPIEV.P_INTERVALWHENINTRANSITION := L_TMP_INTERVALWHENINTRANSITION;   
   END IF;
   IF SQLCODE <> 1 THEN 
      UNAPIGEN.LOGERROR('InternalChangeScPaStatus', SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('InternalChangeScPaStatus', L_SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'InternalChangeScPaStatus'));
END INTERNALCHANGESCPASTATUS;

FUNCTION CANCELSCPA
(A_SC                IN      VARCHAR2,     
 A_PG                IN      VARCHAR2,     
 A_PGNODE            IN      NUMBER,       
 A_PA                IN      VARCHAR2,     
 A_PANODE            IN      NUMBER,       
 A_MODIFY_REASON     IN      VARCHAR2)     
RETURN NUMBER IS

L_LC                          VARCHAR2(2);
L_LC_VERSION                  VARCHAR2(20);
L_OLD_SS                      VARCHAR2(2);
L_NEW_SS                      VARCHAR2(2);
L_ALLOW_MODIFY                CHAR(1);
L_ACTIVE                      CHAR(1);
L_LOG_HS                      CHAR(1);
L_LOG_HS_DETAILS              CHAR(1);
L_LC_SS_FROM                  VARCHAR2(2);
L_TR_NO                       NUMBER(3);
L_HS_DETAILS_SEQ_NR           INTEGER;
L_PR_VERSION                  VARCHAR2(20);
L_PA_REANALYSIS               NUMBER(3);
L_CH_EXISTS                   BOOLEAN;
L_CHDP_NOT_UPDATE             BOOLEAN;
L_NEW_EXEC_START_DATE         TIMESTAMP WITH TIME ZONE;
L_NEW_EXEC_END_DATE           TIMESTAMP WITH TIME ZONE;
L_NEW_EXEC_START_DATE_TZ      TIMESTAMP WITH TIME ZONE;
L_NEW_EXEC_END_DATE_TZ        TIMESTAMP WITH TIME ZONE;
L_ME_SS                       VARCHAR2(2);
L_ME_REANALYSIS               NUMBER(3);

L_OBJECT_ID                   VARCHAR2(255);
L_CURRENT_TIMESTAMP           VARCHAR2(40);
L_PREVIOUS_ALLOW_MODIFY_CHECK CHAR(1);

L_PP_KEY1                     VARCHAR2(20);
L_PP_KEY2                     VARCHAR2(20);
L_PP_KEY3                     VARCHAR2(20);
L_PP_KEY4                     VARCHAR2(20);
L_PP_KEY5                     VARCHAR2(20);
L_ST                          VARCHAR2(20);
L_ST_VERSION                  VARCHAR2(20);
L_CH_CONTEXT_KEY              VARCHAR2(255);
L_DATAPOINT_LINK              VARCHAR2(255);
L_DEASSIGN                    NUMBER;
L_CH                          VARCHAR2(20);
L_DATAPOINT_SEQ               NUMBER;
L_MEASURE_SEQ                 NUMBER;

CURSOR L_SCME_CURSOR (A_SC VARCHAR2, A_PG VARCHAR2, A_PGNODE NUMBER,
                                     A_PA VARCHAR2, A_PANODE NUMBER) IS
   SELECT ME, MENODE, REANALYSIS
   FROM UTSCME
   WHERE SC = A_SC
     AND PG = A_PG
     AND PGNODE = A_PGNODE
     AND PA = A_PA
     AND PANODE = A_PANODE;

CURSOR L_VERSION_CURSOR IS
   SELECT PR_VERSION 
   FROM UTSCPA
   WHERE SC     = A_SC
     AND PG     = A_PG
     AND PGNODE = A_PGNODE
     AND PA     = A_PA
     AND PANODE = A_PANODE;
  
CURSOR L_CHDP_CURSOR(C_CH VARCHAR2, C_DATAPOINT_SEQ NUMBER, C_MEASURE_SEQ NUMBER) IS
   SELECT ACTIVE
   FROM UTCHDP
   WHERE DATAPOINT_SEQ = C_DATAPOINT_SEQ
     AND MEASURE_SEQ   = C_MEASURE_SEQ
     AND CH IN (SELECT CH 
                  FROM UTCH 
                 WHERE NVL(UNAPIAUT.SQLGETCHALLOWMODIFY(CH), '0') = '1' 
                   AND LOG_HS_DETAILS = '1'
                   AND CH = C_CH)
   ORDER BY CH; 

CURSOR L_SCPAOUTPUT_CURSOR IS
   SELECT *
   FROM UTSCPAOUTPUT A
   WHERE A.SC = A_SC
     AND A.PG = A_PG
     AND A.PGNODE = A_PGNODE
     AND A.PA = A_PA
     AND A.PANODE = A_PANODE;
L_SCPAOUTPUT_REC L_SCPAOUTPUT_CURSOR%ROWTYPE;

CURSOR L_ST_CURSOR(C_SC VARCHAR2) IS
   SELECT ST, ST_VERSION 
   FROM UTSC
   WHERE SC = C_SC;

CURSOR L_SCPG_CURSOR(C_SC VARCHAR2, C_PG VARCHAR2, C_PGNODE NUMBER) IS
   SELECT PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5
   FROM UTSCPG
   WHERE SC     = C_SC
     AND PG     = C_PG
     AND PGNODE = C_PGNODE;
L_SCPG_REC UTSCPG%ROWTYPE;

CURSOR L_CY_CURSOR(C_PR VARCHAR2, C_PR_VERSION VARCHAR2, C_ST VARCHAR2, C_ST_VERSION VARCHAR2) IS
   SELECT CY, CY_VERSION
   FROM UTPRCYST
   WHERE PR      = C_PR 
     AND VERSION = C_PR_VERSION
     AND NVL(ST,C_ST) = C_ST 
     AND NVL(DECODE(ST_VERSION,'~Current~',NULL,ST_VERSION), C_ST_VERSION) = C_ST_VERSION
   ORDER BY CY;
BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
   
   L_CURRENT_TIMESTAMP := CURRENT_TIMESTAMP;
   L_LC := NULL;
   L_LC_VERSION := NULL;
   L_OLD_SS := NULL; 
   L_NEW_SS := '@C';
   L_RET_CODE := UNAPIPAP.SCPATRANSITIONAUTHORISED
                    (A_SC, A_PG, A_PGNODE,
                     A_PA, A_PANODE, 
                     L_LC, L_LC_VERSION, L_OLD_SS, L_NEW_SS,
                     UNAPIGEN.P_USER,
                     L_LC_SS_FROM, L_TR_NO, 
                     L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS, L_LOG_HS_DETAILS);

                     
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS AND
      L_RET_CODE <> UNAPIGEN.DBERR_NOTAUTHORISED THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   IF L_RET_CODE = UNAPIGEN.DBERR_SUCCESS THEN
      OPEN L_VERSION_CURSOR;
      FETCH L_VERSION_CURSOR
      INTO L_PR_VERSION;
      IF L_VERSION_CURSOR%NOTFOUND THEN
         CLOSE L_VERSION_CURSOR;
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_PRVERSION;
         RAISE STPERROR;
      END IF;
      CLOSE L_VERSION_CURSOR;

      
      
      
      
      L_EVENT_TP := 'PaCanceled';
      L_EV_SEQ_NR := -1;
      L_EV_DETAILS := 'sc=' || A_SC ||
                      '#pg=' || A_PG || '#pgnode=' || TO_CHAR(A_PGNODE) ||
                      '#panode=' || TO_CHAR(A_PANODE) ||
                      '#tr_no=' || L_TR_NO ||
                      '#ss_from=' || L_OLD_SS ||
                      '#lc_ss_from='|| L_LC_SS_FROM ||
                      '#pr_version=' || L_PR_VERSION;
      L_RESULT := UNAPIEV.INSERTEVENT('CancelScPa', UNAPIGEN.P_EVMGR_NAME,
                                      'pa', A_PA, L_LC, L_LC_VERSION, L_NEW_SS,
                                      L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);
      IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
         UNAPIGEN.P_TXN_ERROR := L_RESULT;
         RAISE STPERROR;
      END IF;

      IF L_LOG_HS = '1' THEN
         INSERT INTO UTSCPAHS(SC, PG, PGNODE, PA, PANODE, WHO, WHO_DESCRIPTION, WHAT, 
                              WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 
                L_EVENT_TP,
                'parameter "'||A_PA||'" canceled, status is changed from "'||UNAPIGEN.SQLSSNAME(L_OLD_SS)||'" ['||L_OLD_SS||'] to "'||UNAPIGEN.SQLSSNAME(L_NEW_SS)||'" ['||L_NEW_SS||'].',
                CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   
      L_HS_DETAILS_SEQ_NR := 0;
      IF L_LOG_HS_DETAILS = '1' THEN
         L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
         INSERT INTO UTSCPAHSDETAILS(SC, PG, PGNODE, PA, PANODE, TR_SEQ, EV_SEQ, SEQ, DETAILS)
         VALUES(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR,
                'parameter "'||A_PA||'" canceled, status is changed from "'||UNAPIGEN.SQLSSNAME(L_OLD_SS)||'" ['||L_OLD_SS||'] to "'||UNAPIGEN.SQLSSNAME(L_NEW_SS)||'" ['||L_NEW_SS||'].');
      END IF;
   
      
      
      
      L_RESULT := UNAPIAUT.GETALLOWMODIFYCHECKMODE(L_PREVIOUS_ALLOW_MODIFY_CHECK);
      IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
         UNAPIGEN.P_TXN_ERROR := L_RESULT;
         RAISE STPERROR;
      END IF;

      IF L_PREVIOUS_ALLOW_MODIFY_CHECK = '0' THEN
         L_RESULT := UNAPIAUT.DISABLEALLOWMODIFYCHECK('1');
         IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
            UNAPIGEN.P_TXN_ERROR := L_RESULT;
            RAISE STPERROR;
         END IF;
      END IF;

      
      
      
      FOR L_SCPAOUTPUT_REC IN L_SCPAOUTPUT_CURSOR LOOP
         IF L_SCPAOUTPUT_REC.SC = A_SC AND
                  L_SCPAOUTPUT_REC.SAVE_PG = A_PG AND
                  L_SCPAOUTPUT_REC.SAVE_PGNODE= A_PGNODE AND
                  L_SCPAOUTPUT_REC.SAVE_PA = A_PA AND
                  L_SCPAOUTPUT_REC.SAVE_PANODE= A_PANODE THEN
                  
                  NULL;
         ELSE            
            L_RET_CODE := UNAPIAUT.DISABLEARCHECK('1');
            L_RESULT := UNAPIPAP.CANCELSCPA(L_SCPAOUTPUT_REC.SC, 
                                            L_SCPAOUTPUT_REC.SAVE_PG,
                                            L_SCPAOUTPUT_REC.SAVE_PGNODE,
                                            L_SCPAOUTPUT_REC.SAVE_PA,
                                            L_SCPAOUTPUT_REC.SAVE_PANODE,
                                            A_MODIFY_REASON);
            
            
            
            IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS AND 
               L_RESULT <> UNAPIGEN.DBERR_NOTAUTHORISED THEN
               UNAPIGEN.P_TXN_ERROR := L_RESULT;
               RAISE STPERROR;
            END IF;                                         
            L_RET_CODE := UNAPIAUT.DISABLEARCHECK('0');
         END IF;
      END LOOP;

      
      
      
      FOR L_SCME_REC IN L_SCME_CURSOR(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE) LOOP
          L_RET_CODE := UNAPIAUT.DISABLEARCHECK('1');

          
          SELECT SS, REANALYSIS
          INTO L_ME_SS, L_ME_REANALYSIS
          FROM UTSCME
          WHERE SC = A_SC
          AND PG = A_PG
          AND PGNODE = A_PGNODE
          AND PA = A_PA
          AND PANODE = A_PANODE
          AND ME = L_SCME_REC.ME
          AND MENODE = L_SCME_REC.MENODE;

          
          IF L_ME_SS <> '@C' THEN 
             L_RESULT := UNAPIMEP.CANCELSCME(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, L_SCME_REC.ME, 
                                             L_SCME_REC.MENODE, L_ME_REANALYSIS, A_MODIFY_REASON);
          ELSE
             L_RESULT := UNAPIGEN.DBERR_SUCCESS;
          END IF;
                                          
          
          
          
          IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS AND 
             L_RESULT <> UNAPIGEN.DBERR_NOTAUTHORISED THEN
             UNAPIGEN.P_TXN_ERROR := L_RESULT;
             RAISE STPERROR;
          END IF;                                         
          L_RET_CODE := UNAPIAUT.DISABLEARCHECK('0');
      END LOOP;

      
      
      
      L_RESULT := UNAPIAUT.DISABLEALLOWMODIFYCHECK(L_PREVIOUS_ALLOW_MODIFY_CHECK);
      IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
         UNAPIGEN.P_TXN_ERROR := L_RESULT;
         RAISE STPERROR;
      END IF;

      
      
      
      
      UPDATE UTSCPA
      SET SS = L_NEW_SS,
          ALLOW_MODIFY = '#',
          ACTIVE = L_ACTIVE,
          EXEC_START_DATE = NVL(EXEC_START_DATE, L_CURRENT_TIMESTAMP),
          EXEC_START_DATE_TZ = NVL(EXEC_START_DATE, L_CURRENT_TIMESTAMP),
          EXEC_END_DATE = NVL(EXEC_END_DATE, L_CURRENT_TIMESTAMP),
          EXEC_END_DATE_TZ = NVL(EXEC_END_DATE, L_CURRENT_TIMESTAMP),
     DELAY = 0
      WHERE SC = A_SC
        AND PG = A_PG
        AND PGNODE = A_PGNODE
        AND PA = A_PA
        AND PANODE = A_PANODE
      RETURNING REANALYSIS, EXEC_START_DATE, EXEC_START_DATE_TZ, EXEC_END_DATE, EXEC_END_DATE_TZ
      INTO L_PA_REANALYSIS, L_NEW_EXEC_START_DATE, L_NEW_EXEC_START_DATE_TZ, L_NEW_EXEC_END_DATE, L_NEW_EXEC_END_DATE_TZ;
   
      IF SQL%ROWCOUNT = 0 THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
         RAISE STPERROR;
      END IF;

      IF L_LOG_HS_DETAILS = '1' THEN
         
         IF L_NEW_EXEC_START_DATE = L_CURRENT_TIMESTAMP THEN
            L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
            INSERT INTO UTSCPAHSDETAILS(SC, PG, PGNODE, PA, PANODE, TR_SEQ, EV_SEQ, SEQ, DETAILS)
            VALUES(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR,
                   'parameter "'||A_PA||'" is updated: property <exec_start_date_tz> changed value from "" to "' || TO_CHAR(L_NEW_EXEC_START_DATE_TZ) || '".');
         END IF;

         
         IF L_NEW_EXEC_END_DATE = L_CURRENT_TIMESTAMP THEN
            L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
            INSERT INTO UTSCPAHSDETAILS(SC, PG, PGNODE, PA, PANODE, TR_SEQ, EV_SEQ, SEQ, DETAILS)
            VALUES(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR,
                   'parameter "'||A_PA||'" is updated: property <exec_end_date_tz> changed value from "" to "' || TO_CHAR(L_NEW_EXEC_END_DATE_TZ) || '".');
         END IF;
      END IF;

      
      
      









      DELETE FROM UTSCPASQC
      WHERE SC = A_SC
        AND PG = A_PG
        AND PGNODE = A_PGNODE
        AND PA = A_PA
        AND PANODE = A_PANODE;
        
      DELETE FROM UTRESULTEXCEPTION
      WHERE SC = A_SC
        AND PG = A_PG
        AND PGNODE = A_PGNODE
        AND PA = A_PA
        AND PANODE = A_PANODE;

      
      
      
      L_CH_EXISTS := FALSE;
      L_CHDP_NOT_UPDATE := TRUE;
      
      OPEN L_SCPG_CURSOR(A_SC, A_PG, A_PGNODE);
      FETCH L_SCPG_CURSOR INTO L_PP_KEY1, L_PP_KEY2, L_PP_KEY3, L_PP_KEY4, L_PP_KEY5;
      CLOSE L_SCPG_CURSOR;
      
      OPEN L_ST_CURSOR(A_SC);
      FETCH L_ST_CURSOR INTO L_ST, L_ST_VERSION;
      CLOSE L_ST_CURSOR;
      L_DATAPOINT_LINK := A_SC||'#'||A_PG||'#'||A_PGNODE||'#'||A_PA||'#'||A_PANODE||'#'||
                             L_PA_REANALYSIS;
      FOR L_CY_REC IN L_CY_CURSOR(A_PA, L_PR_VERSION, L_ST, L_ST_VERSION) LOOP
         
         L_CH_CONTEXT_KEY := L_ST||'#'||A_PG||'#'||L_PP_KEY1||'#'||L_PP_KEY2||'#'||
                             L_PP_KEY3||'#'||L_PP_KEY4||'#'||L_PP_KEY5||'#'||A_PA;
         
         L_DEASSIGN := UNSQCASSIGN.SQCDEASSIGN(L_CY_REC.CY, L_CH_CONTEXT_KEY, L_DATAPOINT_LINK,
                                               L_CH, L_DATAPOINT_SEQ, L_MEASURE_SEQ);
         IF L_DEASSIGN = UNAPIGEN.DBERR_SUCCESS THEN
            L_CH_EXISTS := TRUE;
            
            DELETE
            FROM UTCHDP
            WHERE DATAPOINT_LINK = L_DATAPOINT_LINK;
            L_CHDP_NOT_UPDATE := FALSE;

            FOR L_CHDP_REC IN L_CHDP_CURSOR(L_CH, L_DATAPOINT_SEQ, L_MEASURE_SEQ) LOOP
               
               L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
               INSERT INTO UTCHHSDETAILS(CH, TR_SEQ, EV_SEQ, SEQ, DETAILS)
               VALUES(L_CH, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR,
                      'chart "'||L_CH||'" is updated: datapoint with datapoint_seq '||
                          L_DATAPOINT_SEQ||' and measure_seq '||L_MEASURE_SEQ||' has been removed.');
            END LOOP;
         ELSE
            
            
            FOR L_CHDP_REC IN L_CHDP_CURSOR(L_CH, L_DATAPOINT_SEQ, L_MEASURE_SEQ) LOOP
               L_CH_EXISTS := TRUE;

               
               
               IF L_CHDP_REC.ACTIVE <> '0' THEN
                  L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
                  INSERT INTO UTCHHSDETAILS(CH, TR_SEQ, EV_SEQ, SEQ, DETAILS)
                  VALUES(L_CH, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR,
                         'chart "'||L_CH||'" is updated: property <active> changed value from "'||L_CHDP_REC.ACTIVE||'" to "0".');
               END IF;
               L_CHDP_NOT_UPDATE := FALSE;
            END LOOP;

            UPDATE UTCHDP
            SET ACTIVE = '0' 
            WHERE DATAPOINT_SEQ = L_DATAPOINT_SEQ
              AND MEASURE_SEQ   = L_MEASURE_SEQ
              AND CH IN (SELECT CH 
                           FROM UTCH 
                          WHERE NVL(UNAPIAUT.SQLGETCHALLOWMODIFY(CH), '0') = '1' 
                            AND CH = L_CH); 
         END IF;
      END LOOP;

      
      
      
      
      L_RESULT := UNAPIMEP2.CLEARWHEREUSEDINMEDETAILS('pa', A_SC, A_PG, A_PGNODE, A_PA, A_PANODE,
                                                      NULL, NULL, L_PA_REANALYSIS, L_PA_REANALYSIS, A_MODIFY_REASON);
      IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
         UNAPIGEN.P_TXN_ERROR := L_RESULT;
         RAISE STPERROR;
      END IF;          
       
       
       
       
       DELETE FROM UTDELAY
       WHERE SC = A_SC
       AND PG = A_PG
       AND PGNODE = A_PGNODE
       AND PA = A_PA
       AND PANODE = A_PANODE
       AND OBJECT_TP = 'pa';

       DELETE FROM UTEVTIMED
       WHERE OBJECT_TP = 'pa'
       AND OBJECT_ID = A_PA
       AND INSTR(EV_DETAILS, 'sc='||A_SC) <> 0
       AND INSTR(EV_DETAILS, 'pg='||A_PG) <> 0
       AND INSTR(EV_DETAILS, 'pgnode=' ||
                 TO_CHAR(A_PGNODE)) <> 0
       AND INSTR(EV_DETAILS, 'panode=' ||
                 TO_CHAR(A_PANODE)) <> 0
       AND EV_TP = 'PaActivate';       
                 

    IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
       RAISE STPERROR;
    END IF;
   
    L_OBJECT_ID := A_SC || A_PG || TO_CHAR(A_PGNODE) || A_PA || TO_CHAR(A_PANODE);
    UNAPIAUT.UPDATEAUTHORISATIONBUFFER('pa', L_OBJECT_ID, NULL, '@C');

   END IF;


   IF L_RET_CODE = UNAPIGEN.DBERR_SUCCESS THEN
      IF (L_CHDP_NOT_UPDATE = TRUE) AND (L_CH_EXISTS = TRUE) THEN
         RETURN UNAPIGEN.DBERR_CHARTNOTMODIFIABLE;
      ELSE
         RETURN UNAPIGEN.DBERR_SUCCESS;
      END IF;
   ELSE
      RETURN(L_RET_CODE);
   END IF;

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('CancelScPa', SQLERRM);
   END IF;
   L_RET_CODE := UNAPIAUT.DISABLEARCHECK('0');
   IF L_VERSION_CURSOR%ISOPEN THEN
      CLOSE L_VERSION_CURSOR;
   END IF;
   IF L_VERSION_CURSOR%ISOPEN THEN
      CLOSE L_VERSION_CURSOR;
   END IF;
   IF L_CHDP_CURSOR%ISOPEN THEN
      CLOSE L_CHDP_CURSOR;
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'CancelScPa'));
END CANCELSCPA;

FUNCTION CHANGESCPALIFECYCLE
(A_SC                IN      VARCHAR2,     
 A_PG                IN      VARCHAR2,     
 A_PGNODE            IN      NUMBER,       
 A_PA                IN      VARCHAR2,     
 A_PANODE            IN      NUMBER,       
 A_OLD_LC            IN      VARCHAR2,     
 A_OLD_LC_VERSION    IN      VARCHAR2,     
 A_NEW_LC            IN      VARCHAR2,     
 A_NEW_LC_VERSION    IN      VARCHAR2,     
 A_MODIFY_REASON     IN      VARCHAR2)     
RETURN NUMBER IS

L_ALLOW_MODIFY      CHAR(1);
L_LOG_HS            CHAR(1);
L_LOG_HS_DETAILS    CHAR(1);
L_ACTIVE            CHAR(1);
L_LC                VARCHAR2(2);
L_LC_VERSION        VARCHAR2(20);
L_SS                VARCHAR2(2);
L_COUNT_US          NUMBER;
L_COUNT_LC          NUMBER;
L_OBJECT_ID         VARCHAR2(255);
L_PG_ALLOW_MODIFY   CHAR(1);
L_PG_LOG_HS         CHAR(1);
L_PG_LOG_HS_DETAILS CHAR(1);
L_PG_ACTIVE         CHAR(1);
L_PG_LC             VARCHAR2(2);
L_PG_LC_VERSION     VARCHAR2(20);
L_PG_SS             VARCHAR2(2);
L_HS_DETAILS_SEQ_NR INTEGER;
L_PR_VERSION        VARCHAR2(20);
L_PP_VERSION        VARCHAR2(20);
L_LOCK_PA           VARCHAR2(20);

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_SC, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_PG, ' ') = ' ' OR
      NVL(A_PGNODE, 0) = 0 OR
      NVL(A_PA, ' ') = ' ' OR
      NVL(A_PANODE, 0) = 0 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   
   SELECT PA
   INTO L_LOCK_PA
   FROM UTSCPA
   WHERE SC = A_SC
   AND PG = A_PG
   AND PGNODE = A_PGNODE
   AND PA = A_PA
   AND PANODE = A_PANODE
   FOR UPDATE;

   L_RET_CODE := UNAPIAUT.GETSCPAAUTHORISATION(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, L_PR_VERSION, 
                                               L_LC, L_LC_VERSION, L_SS, L_ALLOW_MODIFY, L_ACTIVE,
                                               L_LOG_HS, L_LOG_HS_DETAILS);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      IF L_RET_CODE <> UNAPIGEN.DBERR_NOTMODIFIABLE THEN
         UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
         RAISE STPERROR;
      ELSE
         L_RET_CODE := UNAPIAUT.GETSCPGAUTHORISATION(A_SC, A_PG, A_PGNODE, L_PP_VERSION, L_PG_LC, 
                                                     L_PG_LC_VERSION, L_PG_SS, L_PG_ALLOW_MODIFY, 
                                                     L_PG_ACTIVE, L_PG_LOG_HS, L_PG_LOG_HS_DETAILS);
         IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
            UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
            RAISE STPERROR;
         END IF;
      END IF;
   END IF;
   
   L_SS := NVL(L_SS, '@~');
   
   IF NVL(A_OLD_LC, ' ') = ' ' THEN
      
      NULL;
   ELSE
      IF A_OLD_LC <> L_LC THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OBJECTLCMATCH;
         RAISE STPERROR;
      END IF;

      
      
   END IF;

   SELECT COUNT(*)
   INTO L_COUNT_LC
   FROM UTLC
   WHERE VERSION = UNVERSION.P_NO_VERSION    
     AND LC = A_NEW_LC;

   IF L_COUNT_LC = 0  THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOLC;
      RAISE STPERROR;
   END IF;

   IF (NVL(L_LC, ' ') <> ' ') AND (NVL(L_LC_VERSION, ' ') <> ' ') THEN
      SELECT COUNT(*)
      INTO L_COUNT_US
      FROM UTLCUS
      WHERE LC = L_LC
        AND VERSION = L_LC_VERSION
        AND SS_FROM = L_SS
        AND US IN (UNAPIGEN.P_USER, '~ANY~', 'UP'||TO_CHAR(UNAPIGEN.P_CURRENT_UP));

      IF L_COUNT_US = 0 THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTAUTHORISED;
         RAISE STPERROR;
      END IF;
   END IF;

   UPDATE UTSCPA
   SET LC = A_NEW_LC,
       LC_VERSION = UNVERSION.P_NO_VERSION,    
       ALLOW_MODIFY = '#',
       SS = ''
   WHERE SC = A_SC
      AND PG = A_PG
      AND PGNODE = A_PGNODE
      AND PA = A_PA
      AND PANODE = A_PANODE;

   IF SQL%ROWCOUNT = 0 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
      RAISE STPERROR;
   END IF;

   L_EVENT_TP := 'PaLifeCycleChanged';
   L_EV_SEQ_NR := -1;
   L_EV_DETAILS := 'sc=' || A_SC ||
                   '#pg=' || A_PG || '#pgnode=' || TO_CHAR(A_PGNODE) ||
                   '#panode=' || TO_CHAR(A_PANODE) ||
                   '#from_lc=' || L_LC || 
                   '#from_lc_version=' || L_LC_VERSION || 
                   '#ss_from=' || L_SS ||
                   '#pr_version=' || L_PR_VERSION;
   L_RESULT := UNAPIEV.INSERTEVENT('ChangeScPaLifeCycle', UNAPIGEN.P_EVMGR_NAME, 'pa', A_PA, A_NEW_LC, 
                                   UNVERSION.P_NO_VERSION, '', L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);    
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF L_LOG_HS = '1' OR A_MODIFY_REASON IS NOT NULL THEN
      INSERT INTO UTSCPAHS(SC, PG, PGNODE, PA, PANODE, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, 
                           LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 
             L_EVENT_TP,
             'life cycle of parameter "'||A_PA||'" is changed from "'||UNAPIGEN.SQLLCNAME(L_LC)||'" ['||L_LC||'] to "'||UNAPIGEN.SQLLCNAME(A_NEW_LC)||'" ['||A_NEW_LC||'].', 
             CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   L_HS_DETAILS_SEQ_NR := 0;
   IF L_LOG_HS_DETAILS = '1' OR A_MODIFY_REASON IS NOT NULL THEN
      L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
      INSERT INTO UTSCPAHSDETAILS(SC, PG, PGNODE, PA, PANODE, TR_SEQ, EV_SEQ, SEQ, DETAILS)
      VALUES(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR,
             'life cycle of parameter "'||A_PA||'" is changed from "'||UNAPIGEN.SQLLCNAME(L_LC)||'" ['||L_LC||'] to "'||UNAPIGEN.SQLLCNAME(A_NEW_LC)||'" ['||A_NEW_LC||'].');
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   L_OBJECT_ID := A_SC || A_PG || TO_CHAR(A_PGNODE) || A_PA || TO_CHAR(A_PANODE);
   FOR L_SEQ_NO IN 1..UNAPIGEN.PA_OBJECT_NR LOOP
      IF UNAPIGEN.PA_OBJECT_ID(L_SEQ_NO) = L_OBJECT_ID THEN
         UNAPIGEN.PA_OBJECT_LC(L_SEQ_NO) := A_NEW_LC;
         
         
         
         UNAPIGEN.PA_OBJECT_ACTIVE(L_SEQ_NO) := NULL;
         UNAPIGEN.PA_OBJECT_ALLOW_MODIFY(L_SEQ_NO) := NULL;
      END IF;
   END LOOP;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('ChangeScPaLifeCycle', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'ChangeScPaLifeCycle'));
END CHANGESCPALIFECYCLE;

FUNCTION EVALPACALCULATION                     
(A_SC               IN   VARCHAR2,             
 A_PG               IN   VARCHAR2,             
 A_PGNODE           IN   NUMBER,               
 A_PA               IN   VARCHAR2,             
 A_PANODE           IN   NUMBER,               
 A_RESULT           OUT  CHAR)                 
RETURN NUMBER IS

L_LC                            VARCHAR2(2);
L_LC_VERSION                    VARCHAR2(20);
L_SS                            VARCHAR2(2);
L_LOG_HS                        CHAR(1);
L_LOG_HS_DETAILS                CHAR(1);
L_ALLOW_MODIFY                  CHAR(1);
L_ACTIVE                        CHAR(1);
L_NR_EXECUTED                   NUMBER(3);
L_MIN_NR_RESULTS                NUMBER(3);
L_CALC_METHOD                   CHAR(1);
L_CALC_CF                       VARCHAR2(20);
L_ME_EXEC_END_DATE              TIMESTAMP WITH TIME ZONE;
L_PA_VALUE_F                    FLOAT;
L_PA_VALUE_S                    VARCHAR2(40);
L_NR_OPEN                       NUMBER(3);
L_FOUND                         BOOLEAN;
L_CF_CURSOR                     INTEGER;
L_ME_REANALYSIS                 NUMBER(3);
L_PA_OLD_REANALYSIS             NUMBER(3);
L_PA_NEW_REANALYSIS             NUMBER(3);
L_PR_VERSION                    VARCHAR2(20);
L_ME_VALUE_F                    FLOAT;
L_ME_VALUE_S                    VARCHAR2(40);
L_ME_FORMAT                     VARCHAR2(40);
L_ME_UNIT                       VARCHAR2(20);

L_SVALARMS_HANDLED              CHAR(1);
L_SVSC                          UNAPIGEN.VC20_TABLE_TYPE;
L_SVPG                          UNAPIGEN.VC20_TABLE_TYPE;
L_SVPGNODE                      UNAPIGEN.LONG_TABLE_TYPE;
L_SVPA                          UNAPIGEN.VC20_TABLE_TYPE;
L_SVPANODE                      UNAPIGEN.LONG_TABLE_TYPE;
L_SVVALUE_F                     UNAPIGEN.FLOAT_TABLE_TYPE;
L_SVVALUE_S                     UNAPIGEN.VC40_TABLE_TYPE;
L_SVUNIT                        UNAPIGEN.VC20_TABLE_TYPE;
L_SVFORMAT                      UNAPIGEN.VC40_TABLE_TYPE;
L_SVEXEC_END_DATE               UNAPIGEN.DATE_TABLE_TYPE;
L_SVEXECUTOR                    UNAPIGEN.VC20_TABLE_TYPE;
L_SVMANUALLY_ENTERED            UNAPIGEN.CHAR1_TABLE_TYPE;
L_SVREANALYSIS                  UNAPIGEN.NUM_TABLE_TYPE;
L_SVMODIFY_FLAG                 UNAPIGEN.NUM_TABLE_TYPE;
L_SVNR_OF_ROWS                  NUMBER;

L_PAOUTPUT_REANALYSIS           NUMBER(3);
L_PREVIOUS_ALLOW_MODIFY_CHECK   CHAR(1);
L_HS_DETAILS_SEQ_NR             INTEGER;
L_OLD_VALID_SQC                 CHAR(1);
L_OLD_VALUE_S                   VARCHAR2(20);
L_NEW_VALUE_S                   VARCHAR2(20);


CURSOR L_SCME_DONE_CURSOR(C_SC VARCHAR2, C_PG VARCHAR2, C_PGNODE NUMBER,
                          C_PA VARCHAR2, C_PANODE NUMBER) IS
   SELECT COUNT(SC)
   FROM UTSCME
   WHERE SC = C_SC
      AND PG = C_PG
      AND PGNODE = C_PGNODE
      AND PA = C_PA
      AND PANODE = C_PANODE
      AND DECODE(SS, NULL, '1', NVL(ACTIVE, '1')) = '1'  
      AND NVL(SS, '@~') <> '@C'
      AND EXEC_END_DATE IS NOT NULL;

CURSOR L_SCPA_CURSOR(C_SC VARCHAR2, C_PG VARCHAR2, C_PGNODE NUMBER,
                     C_PA VARCHAR2, C_PANODE NUMBER) IS
   SELECT *
   FROM UDSCPA
   WHERE SC = C_SC
     AND PG = C_PG
     AND PGNODE = C_PGNODE
     AND PA = C_PA
     AND PANODE = C_PANODE;
L_SCPA_REC  L_SCPA_CURSOR%ROWTYPE;    
L_SCPA_NEW_REC  L_SCPA_CURSOR%ROWTYPE;    


CURSOR L_UTSCPAOLD_CURSOR (A_SC IN VARCHAR2, 
                         A_PG IN VARCHAR2, A_PGNODE IN NUMBER,
                         A_PA IN VARCHAR2, A_PANODE IN NUMBER) IS
   SELECT A.*
   FROM UTSCPA A
   WHERE A.SC = A_SC
     AND A.PG = A_PG
     AND A.PGNODE = A_PGNODE
     AND A.PA = A_PA
     AND A.PANODE = A_PANODE;
L_UTSCPAOLD_REC           UTSCPA%ROWTYPE;

CURSOR L_SCME_FIRST_CURSOR(C_SC VARCHAR2, C_PG VARCHAR2, C_PGNODE NUMBER,
                           C_PA VARCHAR2, C_PANODE NUMBER) IS
   SELECT VALUE_S, VALUE_F, UNIT, FORMAT, EXEC_END_DATE
   FROM UTSCME
   WHERE SC = C_SC
      AND PG = C_PG
      AND PGNODE = C_PGNODE
      AND PA = C_PA
      AND PANODE = C_PANODE
      AND DECODE(SS, NULL, '1', NVL(ACTIVE, '1')) = '1'  
      AND NVL(SS, '@~') <> '@C'
      AND EXEC_END_DATE IS NOT NULL
   ORDER BY EXEC_END_DATE ASC;

CURSOR L_SCME_OPEN_CURSOR(C_SC VARCHAR2, C_PG VARCHAR2, C_PGNODE NUMBER,
                          C_PA VARCHAR2, C_PANODE NUMBER) IS
   SELECT COUNT(SC)
   FROM UTSCME
   WHERE SC = C_SC
      AND PG = C_PG
      AND PGNODE = C_PGNODE
      AND PA = C_PA
      AND PANODE = C_PANODE
      AND DECODE(SS, NULL, '1', NVL(ACTIVE, '1')) = '1'  
      AND NVL(SS, '@~') <> '@C'
      AND EXEC_END_DATE IS NULL;

L_COUNT_INACTIVE NUMBER;
L_COUNT_CANCELED NUMBER;
L_COUNT_NOT_ENDED NUMBER;
CURSOR L_SCME_TRACE_CURSOR(C_SC VARCHAR2, C_PG VARCHAR2, C_PGNODE NUMBER,
                           C_PA VARCHAR2, C_PANODE NUMBER) IS
   SELECT COUNT(DECODE(DECODE(SS, NULL, '1', NVL(ACTIVE, '1')),'1',NULL,'1')) L_COUNT_INACTIVE,
          COUNT(DECODE(NVL(SS, '@~'), '@C','1', NULL)) L_COUNT_CANCELED,
          COUNT(DECODE(EXEC_END_DATE,NULL,'1',NULL)) L_COUNT_NOT_ENDED         
   FROM UTSCME
   WHERE SC = C_SC
      AND PG = C_PG
      AND PGNODE = C_PGNODE
      AND PA = C_PA
      AND PANODE = C_PANODE
      AND DECODE(SS, NULL, '1', NVL(ACTIVE, '1')) = '1'  
      AND NVL(SS, '@~') <> '@C'
      AND EXEC_END_DATE IS NULL;

CURSOR L_SCME_LAST_CURSOR(C_SC VARCHAR2, C_PG VARCHAR2, C_PGNODE NUMBER,
                          C_PA VARCHAR2, C_PANODE NUMBER) IS
   SELECT VALUE_S, VALUE_F, UNIT, FORMAT, EXEC_END_DATE
   FROM UTSCME
   WHERE SC = C_SC
      AND PG = C_PG
      AND PGNODE = C_PGNODE
      AND PA = C_PA
      AND PANODE = C_PANODE
      AND DECODE(SS, NULL, '1', NVL(ACTIVE, '1')) = '1'  
      AND NVL(SS, '@~') <> '@C'
      AND EXEC_END_DATE IS NOT NULL
   ORDER BY EXEC_END_DATE DESC;

CURSOR L_SCME_HIGH_CURSOR(C_SC VARCHAR2, C_PG VARCHAR2, C_PGNODE NUMBER,
                          C_PA VARCHAR2, C_PANODE NUMBER) IS
   SELECT EXEC_END_DATE, VALUE_S, VALUE_F, UNIT, FORMAT
   FROM UTSCME
   WHERE SC = C_SC
      AND PG = C_PG
      AND PGNODE = C_PGNODE
      AND PA = C_PA
      AND PANODE = C_PANODE
      AND DECODE(SS, NULL, '1', NVL(ACTIVE, '1')) = '1'  
      AND NVL(SS, '@~') <> '@C'
   ORDER BY ACCURACY DESC;

CURSOR L_SCME_AVG_FIRST_ME_CURSOR(C_SC VARCHAR2, C_PG VARCHAR2, C_PGNODE NUMBER,
                                  C_PA VARCHAR2, C_PANODE NUMBER) IS
   SELECT UNIT, FORMAT
   FROM UTSCME
   WHERE SC = C_SC
      AND PG = C_PG
      AND PGNODE = C_PGNODE
      AND PA = C_PA
      AND PANODE = C_PANODE
      AND DECODE(SS, NULL, '1', NVL(ACTIVE, '1')) = '1'  
      AND NVL(SS, '@~') <> '@C'
      AND VALUE_F IS NOT NULL
      AND EXEC_END_DATE IS NOT NULL
   ORDER BY MENODE;



CURSOR L_SCME_AVG_CURSOR(C_SC VARCHAR2, C_PG VARCHAR2, C_PGNODE NUMBER,
                         C_PA VARCHAR2, C_PANODE NUMBER, C_ME_UNIT VARCHAR2) IS
   SELECT AVG(VALUE_F * UNAPIGEN.SQLUNITCONVERSIONFACTOR(UNIT, C_ME_UNIT)), 
          COUNT(SC), MAX(EXEC_END_DATE)
   FROM UTSCME
   WHERE SC = C_SC
      AND PG = C_PG
      AND PGNODE = C_PGNODE
      AND PA = C_PA
      AND PANODE = C_PANODE
      AND DECODE(SS, NULL, '1', NVL(ACTIVE, '1')) = '1'  
      AND NVL(SS, '@~') <> '@C'
      AND VALUE_F IS NOT NULL
      AND EXEC_END_DATE IS NOT NULL;

CURSOR L_SCME_NOCALC_CURSOR(C_SC VARCHAR2, C_PG VARCHAR2, C_PGNODE NUMBER,
                            C_PA VARCHAR2, C_PANODE NUMBER) IS
   SELECT VALUE_S, VALUE_F, UNIT, FORMAT,
          EXEC_END_DATE, EXECUTOR, MANUALLY_ENTERED
   FROM UTSCME
   WHERE SC = C_SC
     AND PG = C_PG
     AND PGNODE = C_PGNODE
     AND PA = C_PA
     AND PANODE = C_PANODE
     AND DECODE(SS, NULL, '1', NVL(ACTIVE, '1')) = '1'  
     AND NVL(SS, '@~') <> '@C'
     AND EXEC_END_DATE IS NOT NULL;

CURSOR L_SCME_MAX_CURSOR IS
   SELECT NVL(MAX(REANALYSIS),0)
   FROM UTSCME
   WHERE SC = A_SC
     AND PG = A_PG
     AND PGNODE = A_PGNODE
     AND PA = A_PA
     AND PANODE = A_PANODE;
     
CURSOR L_SCPASQCOLD_CURSOR (A_SC IN VARCHAR2, 
                            A_PG IN VARCHAR2, A_PGNODE IN NUMBER,
                            A_PA IN VARCHAR2, A_PANODE IN NUMBER) IS
   SELECT VALID_SQC
   FROM UTSCPASQC A
   WHERE A.SC = A_SC
     AND A.PG = A_PG
     AND A.PGNODE = A_PGNODE
     AND A.PA = A_PA
     AND A.PANODE = A_PANODE;

CURSOR L_SCPAOUTPUT_CURSOR IS
   SELECT *
   FROM UTSCPAOUTPUT A
   WHERE A.SC = A_SC
     AND A.PG = A_PG
     AND A.PGNODE = A_PGNODE
     AND A.PA = A_PA
     AND A.PANODE = A_PANODE;
L_SCPAOUTPUT_REC L_SCPAOUTPUT_CURSOR%ROWTYPE;
          
BEGIN
   
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_SC, ' ') = ' ' OR
      NVL(A_PG, ' ') = ' ' OR
      NVL(A_PGNODE, 0) = 0 OR
      NVL(A_PA, ' ') = ' ' OR
      NVL(A_PANODE, 0) = 0 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   A_RESULT := '0';
   L_PA_VALUE_S := NULL;

   
   
   
   L_NR_EXECUTED := UNAPIEV.P_NR_RESULTS;
   IF L_NR_EXECUTED IS NULL THEN
      
      
      
      
      OPEN L_SCME_DONE_CURSOR(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE);
      FETCH L_SCME_DONE_CURSOR
      INTO L_NR_EXECUTED;
      CLOSE L_SCME_DONE_CURSOR;
   END IF;

   OPEN L_SCPA_CURSOR(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE);
   FETCH L_SCPA_CURSOR
   INTO L_SCPA_REC;
   IF L_SCPA_CURSOR%NOTFOUND THEN
      CLOSE L_SCPA_CURSOR;
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR;
   END IF;
   CLOSE L_SCPA_CURSOR;
   
   IF NVL(L_NR_EXECUTED, 0) < L_SCPA_REC.MIN_NR_RESULTS THEN
      IF UNAPIEV.P_EV_OUTPUT_ON THEN
         UNTRACE.LOG( 'EvalPaCalculation' ||
                '#l_nr_executed=' || NVL(L_NR_EXECUTED, 0) ||
                '#pa.min_nr_results=' || L_SCPA_REC.MIN_NR_RESULTS);
      END IF;
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NORESULT;
      RAISE STPERROR;
   END IF;

   
   
   
   L_FOUND := FALSE;
   IF L_SCPA_REC.CALC_METHOD = 'F' THEN
      
      
      
      OPEN L_SCME_FIRST_CURSOR(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE);
      FETCH L_SCME_FIRST_CURSOR
      INTO L_ME_VALUE_S, L_ME_VALUE_F, L_ME_UNIT, L_ME_FORMAT, L_ME_EXEC_END_DATE;
      IF L_SCME_FIRST_CURSOR%NOTFOUND THEN
          CLOSE L_SCME_FIRST_CURSOR;
          UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
          RAISE STPERROR;
      END IF;
      CLOSE L_SCME_FIRST_CURSOR;
      L_FOUND := TRUE;

   ELSIF L_SCPA_REC.CALC_METHOD = 'L' THEN
      
      
      
      OPEN L_SCME_OPEN_CURSOR(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE);
      FETCH L_SCME_OPEN_CURSOR
      INTO L_NR_OPEN;
      CLOSE L_SCME_OPEN_CURSOR;

      IF NVL(L_NR_OPEN, 0) > 0 THEN
         IF UNAPIEV.P_EV_OUTPUT_ON THEN
            OPEN L_SCME_TRACE_CURSOR(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE);
            FETCH L_SCME_TRACE_CURSOR
            INTO L_COUNT_INACTIVE, L_COUNT_CANCELED, L_COUNT_NOT_ENDED;
            CLOSE L_SCME_TRACE_CURSOR;
            UNTRACE.LOG( 'EvalPaCalculation' ||
                   '#l_nr_open=' || NVL(L_NR_OPEN, 0)||
                   '#nr_inactive=' || L_COUNT_INACTIVE||
                   '#nr_canceled=' || L_COUNT_CANCELED||
                   '#nr_not_ended=' || L_COUNT_NOT_ENDED);
         END IF;
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NORESULT;
         RAISE STPERROR;
      END IF;

      
      
      
      OPEN L_SCME_LAST_CURSOR(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE);
      FETCH L_SCME_LAST_CURSOR
      INTO L_ME_VALUE_S, L_ME_VALUE_F, L_ME_UNIT, L_ME_FORMAT, L_ME_EXEC_END_DATE;
      IF L_SCME_LAST_CURSOR%NOTFOUND THEN
         CLOSE L_SCME_LAST_CURSOR;
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
         RAISE STPERROR;
      END IF;
      CLOSE L_SCME_LAST_CURSOR;
      L_FOUND := TRUE;

   ELSIF L_SCPA_REC.CALC_METHOD = 'H' THEN
      
      
      
      OPEN L_SCME_HIGH_CURSOR(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE);
      FETCH L_SCME_HIGH_CURSOR
      INTO L_ME_EXEC_END_DATE, L_ME_VALUE_S, L_ME_VALUE_F, L_ME_UNIT, L_ME_FORMAT;
      IF L_SCME_HIGH_CURSOR%NOTFOUND THEN
         CLOSE L_SCME_HIGH_CURSOR;
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
         RAISE STPERROR;
      END IF;
      CLOSE L_SCME_HIGH_CURSOR;

      
      
      
      IF L_ME_EXEC_END_DATE IS NULL THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NORESULT;
         RAISE STPERROR;
      END IF;
      L_FOUND := TRUE;

   ELSIF L_SCPA_REC.CALC_METHOD = 'A' THEN
      
      
      
      OPEN L_SCME_OPEN_CURSOR(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE);
      FETCH L_SCME_OPEN_CURSOR
      INTO L_NR_OPEN;
      CLOSE L_SCME_OPEN_CURSOR;
      IF NVL(L_NR_OPEN, 0) > 0 THEN
         IF UNAPIEV.P_EV_OUTPUT_ON THEN
            OPEN L_SCME_TRACE_CURSOR(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE);
            FETCH L_SCME_TRACE_CURSOR
            INTO L_COUNT_INACTIVE, L_COUNT_CANCELED, L_COUNT_NOT_ENDED;
            CLOSE L_SCME_TRACE_CURSOR;
            UNTRACE.LOG( 'EvalPaCalculation' ||
                   '#l_nr_open=' || NVL(L_NR_OPEN, 0)||
                   '#nr_inactive=' || L_COUNT_INACTIVE||
                   '#nr_canceled=' || L_COUNT_CANCELED||
                   '#nr_not_ended=' || L_COUNT_NOT_ENDED);
         END IF;
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NORESULT;
         RAISE STPERROR;
      END IF;

      
      
      
      OPEN L_SCME_AVG_FIRST_ME_CURSOR(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE);
      FETCH L_SCME_AVG_FIRST_ME_CURSOR
      INTO L_ME_UNIT, L_ME_FORMAT;
      IF L_SCME_AVG_FIRST_ME_CURSOR%NOTFOUND THEN
         CLOSE L_SCME_AVG_FIRST_ME_CURSOR;
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
         RAISE STPERROR;
      END IF;
      CLOSE L_SCME_AVG_FIRST_ME_CURSOR;

      
      
      
      OPEN L_SCME_AVG_CURSOR(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, L_ME_UNIT);
      FETCH L_SCME_AVG_CURSOR
      INTO L_ME_VALUE_F, L_NR_OPEN, L_ME_EXEC_END_DATE;
      IF NVL(L_NR_OPEN, 0) = 0 THEN
         CLOSE L_SCME_AVG_CURSOR;
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
         RAISE STPERROR;
      END IF;
      CLOSE L_SCME_AVG_CURSOR;
      L_FOUND := TRUE;
      
      
      IF NVL(L_ME_FORMAT, ' ') = ' ' THEN
        L_ME_FORMAT := UNAPIGEN.P_DEFAULT_FORMAT;
      END IF;

      L_RET_CODE := UNAPIGEN.FORMATRESULT(L_ME_VALUE_F, L_ME_FORMAT, L_ME_VALUE_S);
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
         RAISE STPERROR;
      END IF;

   ELSIF L_SCPA_REC.CALC_METHOD = 'C' THEN
      
      
      
      
      
      L_CF_CURSOR := DBMS_SQL.OPEN_CURSOR;
      L_SQL_STRING := 'BEGIN :l_retcode := UNCALC.' || L_SCPA_REC.CALC_CF ||
                      '(:l_sc, :l_pg, :l_pgnode, :l_pa,' ||
                      ' :l_panode, :l_value_f, :l_value_s); END;';

      BEGIN
         DBMS_SQL.PARSE(L_CF_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

         DBMS_SQL.BIND_VARIABLE(L_CF_CURSOR, ':l_retcode', L_RET_CODE);
         DBMS_SQL.BIND_VARIABLE(L_CF_CURSOR, ':l_sc', A_SC);
         DBMS_SQL.BIND_VARIABLE(L_CF_CURSOR, ':l_pg', A_PG);
         DBMS_SQL.BIND_VARIABLE(L_CF_CURSOR, ':l_pgnode', A_PGNODE);
         DBMS_SQL.BIND_VARIABLE(L_CF_CURSOR, ':l_pa', A_PA);
         DBMS_SQL.BIND_VARIABLE(L_CF_CURSOR, ':l_panode', A_PANODE);
         DBMS_SQL.BIND_VARIABLE(L_CF_CURSOR, ':l_value_f', L_PA_VALUE_F);
         DBMS_SQL.BIND_VARIABLE(L_CF_CURSOR, ':l_value_s', L_PA_VALUE_S, 40);

         L_RESULT := DBMS_SQL.EXECUTE(L_CF_CURSOR);
         DBMS_SQL.VARIABLE_VALUE(L_CF_CURSOR, ':l_retcode', L_RET_CODE);
         DBMS_SQL.VARIABLE_VALUE(L_CF_CURSOR, ':l_value_f', L_PA_VALUE_F);
         DBMS_SQL.VARIABLE_VALUE(L_CF_CURSOR, ':l_value_s', L_PA_VALUE_S);
         DBMS_SQL.CLOSE_CURSOR(L_CF_CURSOR);
         IF L_RET_CODE = UNAPIGEN.DBERR_SUCCESS THEN
            L_FOUND := TRUE;
         END IF;
      EXCEPTION
      WHEN OTHERS THEN
         IF DBMS_SQL.IS_OPEN(L_CF_CURSOR) THEN
            DBMS_SQL.CLOSE_CURSOR(L_CF_CURSOR);
         END IF;
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_CALCMETHOD;
         RAISE STPERROR;
      END ;
   ELSIF L_SCPA_REC.CALC_METHOD = 'N' THEN
      
      
      
      IF L_NR_EXECUTED > 1 THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
         L_SQLERRM := 'sc=' || A_SC || 
                      '#pg=' || A_PG || '#pgnode=' || TO_CHAR(A_PGNODE) ||
                      '#pa=' || A_PA || '#panode=' || TO_CHAR(A_PANODE) ||
                      '#EvalPaCalculation: more than 1 method assigned to pa (pa calc_method=''No calculation'')';
         RAISE STPERROR;
      ELSE
         OPEN L_SCME_NOCALC_CURSOR(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE);
         FETCH L_SCME_NOCALC_CURSOR
         INTO L_PA_VALUE_S, L_PA_VALUE_F, L_SCPA_REC.UNIT, L_SCPA_REC.FORMAT,
              L_ME_EXEC_END_DATE, L_SCPA_REC.EXECUTOR, L_SCPA_REC.MANUALLY_ENTERED;
         IF L_SCME_NOCALC_CURSOR%NOTFOUND THEN
             CLOSE L_SCME_NOCALC_CURSOR;
             UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
             RAISE STPERROR;
         END IF;
         CLOSE L_SCME_NOCALC_CURSOR;
         L_FOUND := TRUE;
      END IF;
   ELSE
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_CALCMETHOD;
      RAISE STPERROR;
   END IF;

   IF L_FOUND THEN
      
      
      
      IF L_SCPA_REC.EXEC_END_DATE IS NOT NULL THEN

         L_RET_CODE := UNAPIAUT.GETSCPAAUTHORISATION(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, L_PR_VERSION, 
                                                     L_LC, L_LC_VERSION, L_SS, L_ALLOW_MODIFY, L_ACTIVE,
                                                     L_LOG_HS, L_LOG_HS_DETAILS);
         IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
            UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
            RAISE STPERROR;
         END IF;
         
         
         
         
         FOR L_SCPAOUTPUT_REC IN L_SCPAOUTPUT_CURSOR LOOP
            
            
            
            L_RESULT := UNAPIAUT.GETALLOWMODIFYCHECKMODE(L_PREVIOUS_ALLOW_MODIFY_CHECK);
            IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
               UNAPIGEN.P_TXN_ERROR := L_RESULT;
               RAISE STPERROR;
            END IF;

            IF L_PREVIOUS_ALLOW_MODIFY_CHECK = '0' THEN
               L_RESULT := UNAPIAUT.DISABLEALLOWMODIFYCHECK('1');
               IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
                  UNAPIGEN.P_TXN_ERROR := L_RESULT;
                  RAISE STPERROR;
               END IF;
            END IF;

            
            
            
            L_RET_CODE := UNAPIAUT.DISABLEARCHECK('1');
            IF L_SCPAOUTPUT_REC.SC = A_SC AND
               L_SCPAOUTPUT_REC.SAVE_PG = A_PG AND
               L_SCPAOUTPUT_REC.SAVE_PGNODE= A_PGNODE AND
               L_SCPAOUTPUT_REC.SAVE_PA = A_PA AND
               L_SCPAOUTPUT_REC.SAVE_PANODE= A_PANODE THEN
               
               NULL;
            ELSE            
               L_RESULT := UNAPIPA2.REANALSCPARAMETER(
                                              L_SCPAOUTPUT_REC.SC, 
                                              L_SCPAOUTPUT_REC.SAVE_PG, 
                                              L_SCPAOUTPUT_REC.SAVE_PGNODE, 
                                              L_SCPAOUTPUT_REC.SAVE_PA, 
                                              L_SCPAOUTPUT_REC.SAVE_PANODE, 
                                              L_PAOUTPUT_REANALYSIS,
                                              '');
               IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS AND
                  L_RESULT <> UNAPIGEN.DBERR_NOTAUTHORISED THEN
                  UNAPIGEN.P_TXN_ERROR := L_RESULT;
                  RAISE STPERROR;
               END IF;
            END IF;
            L_RET_CODE := UNAPIAUT.DISABLEARCHECK('0');

            
            
            
            L_RESULT := UNAPIAUT.DISABLEALLOWMODIFYCHECK(L_PREVIOUS_ALLOW_MODIFY_CHECK);
            IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
               UNAPIGEN.P_TXN_ERROR := L_RESULT;
               RAISE STPERROR;
            END IF;

         END LOOP;

         
         
         
         L_PA_OLD_REANALYSIS := L_SCPA_REC.REANALYSIS;
         OPEN L_SCME_MAX_CURSOR;
         FETCH L_SCME_MAX_CURSOR
         INTO L_ME_REANALYSIS;
         IF L_SCME_MAX_CURSOR%NOTFOUND THEN
            CLOSE L_SCME_MAX_CURSOR;
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
            RAISE STPERROR;
         END IF;
         CLOSE L_SCME_MAX_CURSOR;      
         
         L_PA_NEW_REANALYSIS := GREATEST(NVL(L_PA_OLD_REANALYSIS,0)+1, NVL(L_ME_REANALYSIS,0));

         
         
         
         L_RESULT := UNAPIMEP2.CLEARWHEREUSEDINMEDETAILS('pa', A_SC, A_PG, A_PGNODE, A_PA, A_PANODE,
                                                         NULL, NULL, L_PA_OLD_REANALYSIS, L_PA_NEW_REANALYSIS, '');
         IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
            UNAPIGEN.P_TXN_ERROR := L_RESULT;
            RAISE STPERROR;
         END IF;

         
         
         
         OPEN L_UTSCPAOLD_CURSOR(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE);
         FETCH L_UTSCPAOLD_CURSOR
         INTO L_UTSCPAOLD_REC;
         CLOSE L_UTSCPAOLD_CURSOR;
      
         
         
         
         IF ( SUBSTR(L_UTSCPAOLD_REC.VALUE_S, -4)  IN ('#BLB', '@TXT', '#IMG', '#LNK', '#TXT', '#DOC' ) ) THEN

            L_OLD_VALUE_S := L_UTSCPAOLD_REC.VALUE_S ;
            L_NEW_VALUE_S := SUBSTR(L_OLD_VALUE_S, 0, LENGTH(L_OLD_VALUE_S) - 4 ) || '#R' || SUBSTR(L_OLD_VALUE_S, -4) ;

            IF ( SUBSTR(L_OLD_VALUE_S, -4)  = '#BLB') THEN
               UPDATE UTBLOB
               SET ID = L_NEW_VALUE_S
               WHERE ID = L_OLD_VALUE_S ;

               UPDATE UTBLOBHS
               SET ID = L_NEW_VALUE_S
               WHERE ID = L_OLD_VALUE_S ;
            ELSE 
               UPDATE UTLONGTEXT
               SET DOC_NAME = L_NEW_VALUE_S
               WHERE DOC_NAME = L_OLD_VALUE_S ;
            END IF ;

            L_UTSCPAOLD_REC.VALUE_S := L_NEW_VALUE_S ;

         END IF ; 

         INSERT INTO UTRSCPA
         VALUES L_UTSCPAOLD_REC ;
         
         
         
         
         INSERT INTO UTRSCPASPA(SC, PG, PGNODE, PA, PANODE, REANALYSIS, 
            LOW_LIMIT, HIGH_LIMIT, LOW_SPEC, HIGH_SPEC, LOW_DEV, REL_LOW_DEV,
            TARGET, HIGH_DEV, REL_HIGH_DEV)
         SELECT SC, PG, PGNODE, PA, PANODE, L_PA_OLD_REANALYSIS, LOW_LIMIT,
                HIGH_LIMIT, LOW_SPEC, HIGH_SPEC, LOW_DEV, REL_LOW_DEV,
                TARGET, HIGH_DEV, REL_HIGH_DEV
         FROM UTSCPASPA
         WHERE SC = A_SC
           AND PG = A_PG
           AND PGNODE = A_PGNODE
           AND PA = A_PA
           AND PANODE = A_PANODE;

         
         
         
         INSERT INTO UTRSCPASPB(SC, PG, PGNODE, PA, PANODE, REANALYSIS, 
            LOW_LIMIT, HIGH_LIMIT, LOW_SPEC, HIGH_SPEC, LOW_DEV, REL_LOW_DEV,
            TARGET, HIGH_DEV, REL_HIGH_DEV)
         SELECT SC, PG, PGNODE, PA, PANODE, L_PA_OLD_REANALYSIS, LOW_LIMIT,
                HIGH_LIMIT, LOW_SPEC, HIGH_SPEC, LOW_DEV, REL_LOW_DEV,
                TARGET, HIGH_DEV, REL_HIGH_DEV
         FROM UTSCPASPB
         WHERE SC = A_SC
           AND PG = A_PG
           AND PGNODE = A_PGNODE
           AND PA = A_PA
           AND PANODE = A_PANODE;

         
         
         
         INSERT INTO UTRSCPASPC(SC, PG, PGNODE, PA, PANODE, REANALYSIS, 
            LOW_LIMIT, HIGH_LIMIT, LOW_SPEC, HIGH_SPEC, LOW_DEV, REL_LOW_DEV,
            TARGET, HIGH_DEV, REL_HIGH_DEV)
         SELECT SC, PG, PGNODE, PA, PANODE, L_PA_OLD_REANALYSIS, LOW_LIMIT,
                HIGH_LIMIT, LOW_SPEC, HIGH_SPEC, LOW_DEV, REL_LOW_DEV,
                TARGET, HIGH_DEV, REL_HIGH_DEV
         FROM UTSCPASPC
         WHERE SC = A_SC
           AND PG = A_PG
           AND PGNODE = A_PGNODE
           AND PA = A_PA
           AND PANODE = A_PANODE;

         
         
         
         INSERT INTO UTRSCPASQC
         (SC, PG, PGNODE, PA, PANODE, REANALYSIS, SQC_AVG, SQC_SIGMA,
          SQC_AVGR, SQC_UCLR, VALID_SQC)
         SELECT SC, PG, PGNODE, PA, PANODE, L_PA_OLD_REANALYSIS, SQC_AVG, SQC_SIGMA,
                SQC_AVGR, SQC_UCLR, VALID_SQC
         FROM UTSCPASQC
         WHERE SC = A_SC
           AND PG = A_PG
           AND PGNODE = A_PGNODE
           AND PA = A_PA
           AND PANODE = A_PANODE;

         
         
         
         OPEN L_SCPASQCOLD_CURSOR(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE);
         FETCH L_SCPASQCOLD_CURSOR
         INTO L_OLD_VALID_SQC;
         CLOSE L_SCPASQCOLD_CURSOR;

         
         
         
         UPDATE UTSCPASQC
         SET VALID_SQC = NULL
         WHERE SC = A_SC
            AND PG = A_PG
            AND PGNODE = A_PGNODE
            AND PA = A_PA
            AND PANODE = A_PANODE;
      
         
         
         
         DELETE FROM UTSCPATD
         WHERE SC = A_SC
            AND PG = A_PG
            AND PGNODE = A_PGNODE
            AND PA = A_PA
            AND PANODE = A_PANODE;
      
        
        
        
        DELETE FROM UTRESULTEXCEPTION
        WHERE SC = A_SC
           AND PG = A_PG
           AND PGNODE = A_PGNODE
           AND PA = A_PA
           AND PANODE = A_PANODE;

         
         
         
   
         
         
         
         
      
         
         
         
         UPDATE UTSCPA
            SET VALUE_F = NULL,
                VALUE_S = NULL,
                EXEC_START_DATE = NULL,
                EXEC_START_DATE_TZ = NULL,
                EXEC_END_DATE = NULL,
      EXEC_END_DATE_TZ = NULL,
                EXECUTOR = NULL,
                MANUALLY_ENTERED = '0',
                VALID_SPECSA = NULL,
                VALID_SPECSB = NULL,
                VALID_SPECSC = NULL,
                VALID_LIMITSA = NULL,
                VALID_LIMITSB = NULL,
                VALID_LIMITSC = NULL,
                VALID_TARGETA = NULL,
                VALID_TARGETB = NULL,
                VALID_TARGETC = NULL,
                REANALYSIS = L_PA_NEW_REANALYSIS,
                PA_CLASS = '0'
         WHERE SC = A_SC
            AND PG = A_PG
            AND PGNODE = A_PGNODE
            AND PA = A_PA
            AND PANODE = A_PANODE;

         OPEN L_SCPA_CURSOR(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE);
         FETCH L_SCPA_CURSOR
         INTO L_SCPA_NEW_REC;
         IF L_SCPA_CURSOR%NOTFOUND THEN
            CLOSE L_SCPA_CURSOR;
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
            RAISE STPERROR;
         END IF;
         CLOSE L_SCPA_CURSOR;

         L_EVENT_TP := 'PaReanalysis';
         IF L_SCPA_NEW_REC.LOG_HS = '1' OR L_SCPA_NEW_REC.LOG_HS_DETAILS = '1' THEN
            L_RET_CODE := UNAPIGEN.GETNEXTEVENTSEQNR(L_EV_SEQ_NR);
            IF L_RET_CODE <> 0 THEN
               UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
               RAISE STPERROR;
            END IF;
         END IF;

         IF L_SCPA_NEW_REC.LOG_HS = '1' THEN
            INSERT INTO UTSCPAHS(SC, PG, PGNODE, PA, PANODE, WHO, WHO_DESCRIPTION, WHAT,
                                 WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
            VALUES(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, UNAPIGEN.P_USER,
                   UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                   'parameter "'||A_PA||'" is implicitely reanalysed',
                   CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, '', UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
         END IF;

         L_HS_DETAILS_SEQ_NR := 0;
         IF L_SCPA_NEW_REC.LOG_HS_DETAILS = '1' THEN
            L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
            INSERT INTO UTSCPAHSDETAILS(SC, PG, PGNODE, PA, PANODE, TR_SEQ, EV_SEQ, SEQ, DETAILS)
            VALUES(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR, 
                   'parameter "'||A_PA||'" is implicitely reanalysed');

            UNAPIHSDETAILS.ADDSCPAHSDETAILS(L_SCPA_REC, L_SCPA_NEW_REC, UNAPIGEN.P_TR_SEQ, 
                                            L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR); 

            IF L_OLD_VALID_SQC IS NOT NULL THEN
               L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
               INSERT INTO UTSCPAHSDETAILS(SC, PG, PGNODE, PA, PANODE, TR_SEQ, EV_SEQ, SEQ, DETAILS)
               VALUES(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR, 
                      'parameter "'||A_PA||'" is updated: property <valid_sqc> changed value from "' || L_OLD_VALID_SQC|| '" to "".');
            END IF;
         END IF;
      END IF;
            
      
      
      IF NVL(L_ME_FORMAT, ' ') = ' ' THEN
        L_ME_FORMAT := UNAPIGEN.P_DEFAULT_FORMAT;
      END IF;

      
      
      
      IF L_SCPA_REC.CALC_METHOD NOT IN ('C','N') THEN
         L_RET_CODE := UNAPIGEN.TRANSFORMRESULT(L_ME_VALUE_S,
                                                L_ME_VALUE_F,      
                                                L_ME_UNIT,    
                                                L_ME_FORMAT,    
                                                L_PA_VALUE_S,    
                                                L_PA_VALUE_F,      
                                                L_SCPA_REC.UNIT,    
                                                L_SCPA_REC.FORMAT);
         IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
            UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
            RAISE STPERROR;
         END IF;
      END IF;

      
      
      
      
      
      IF L_SCPA_REC.CALC_METHOD IN ('N', 'F', 'L', 'A', 'H') THEN
         L_SCPA_REC.EXEC_END_DATE := L_ME_EXEC_END_DATE;
      END IF;
      
      L_SVNR_OF_ROWS := 1;
      L_SVALARMS_HANDLED := UNAPIGEN.ALARMS_NOT_HANDLED;
      L_SVSC(L_SVNR_OF_ROWS) := A_SC;
      L_SVPG(L_SVNR_OF_ROWS) := A_PG;
      L_SVPGNODE(L_SVNR_OF_ROWS) := A_PGNODE;
      L_SVPA(L_SVNR_OF_ROWS) := A_PA;
      L_SVPANODE(L_SVNR_OF_ROWS) := A_PANODE;
      L_SVVALUE_F(L_SVNR_OF_ROWS) := L_PA_VALUE_F;
      L_SVVALUE_S(L_SVNR_OF_ROWS) := L_PA_VALUE_S;
      L_SVUNIT(L_SVNR_OF_ROWS) := L_SCPA_REC.UNIT;
      L_SVFORMAT(L_SVNR_OF_ROWS) := L_SCPA_REC.FORMAT;
      L_SVEXEC_END_DATE(L_SVNR_OF_ROWS) := L_SCPA_REC.EXEC_END_DATE;
      L_SVEXECUTOR(L_SVNR_OF_ROWS) := L_SCPA_REC.EXECUTOR;
      L_SVMANUALLY_ENTERED(L_SVNR_OF_ROWS) := L_SCPA_REC.MANUALLY_ENTERED;
      L_SVREANALYSIS(L_SVNR_OF_ROWS) := NULL;
      L_SVMODIFY_FLAG(L_SVNR_OF_ROWS) := UNAPIGEN.MOD_FLAG_UPDATE;
      
      
      
      
      L_RET_CODE := UNAPIPA.SAVESCPARESULT(L_SVALARMS_HANDLED, L_SVSC, L_SVPG,
                                           L_SVPGNODE, L_SVPA,
                                           L_SVPANODE, L_SVVALUE_F, L_SVVALUE_S,
                                           L_SVUNIT, L_SVFORMAT, L_SVEXEC_END_DATE,
                                           L_SVEXECUTOR, L_SVMANUALLY_ENTERED,
                                           L_SVREANALYSIS, L_SVMODIFY_FLAG,
                                           L_SVNR_OF_ROWS, '');
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
         RAISE STPERROR;
      END IF;
      
      
      
      
      A_RESULT := '1';
   END IF;
   
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('EvalPaCalculation',SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('EvalPaCalculation',L_SQLERRM);
   END IF;
   IF DBMS_SQL.IS_OPEN(L_CF_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_CF_CURSOR);
   END IF;
   IF L_SCME_DONE_CURSOR%ISOPEN THEN
      CLOSE L_SCME_DONE_CURSOR;
   END IF;
   IF L_SCPA_CURSOR%ISOPEN THEN
      CLOSE L_SCPA_CURSOR;
   END IF;
   IF L_SCME_FIRST_CURSOR%ISOPEN THEN
      CLOSE L_SCME_FIRST_CURSOR;
   END IF;
   IF L_SCME_OPEN_CURSOR%ISOPEN THEN
      CLOSE L_SCME_OPEN_CURSOR;
   END IF;
   IF L_SCME_TRACE_CURSOR%ISOPEN THEN
      CLOSE L_SCME_TRACE_CURSOR;
   END IF;
   IF L_SCME_LAST_CURSOR%ISOPEN THEN
      CLOSE L_SCME_LAST_CURSOR;
   END IF;
   IF L_SCME_HIGH_CURSOR%ISOPEN THEN
      CLOSE L_SCME_HIGH_CURSOR;
   END IF;
   IF L_SCME_AVG_FIRST_ME_CURSOR%ISOPEN THEN
      CLOSE L_SCME_AVG_FIRST_ME_CURSOR;
   END IF;
   IF L_SCME_AVG_CURSOR%ISOPEN THEN
      CLOSE L_SCME_AVG_CURSOR;
   END IF;
   IF L_SCME_NOCALC_CURSOR%ISOPEN THEN
      CLOSE L_SCME_NOCALC_CURSOR;
   END IF;
   IF L_SCME_MAX_CURSOR%ISOPEN THEN
      CLOSE L_SCME_MAX_CURSOR;
   END IF;
   L_RET_CODE := UNAPIAUT.DISABLEARCHECK('0');
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'EvalPaCalculation'));
END EVALPACALCULATION;

FUNCTION SCPAELECTRONICSIGNATURE
(A_SC                IN      VARCHAR2,     
 A_PG                IN      VARCHAR2,     
 A_PGNODE            IN      NUMBER,       
 A_PA                IN      VARCHAR2,     
 A_PANODE            IN      NUMBER,       
 A_AUTHORISED_BY     IN      VARCHAR2,     
 A_MODIFY_REASON     IN      VARCHAR2)     
RETURN NUMBER IS

L_PR_VERSION                  VARCHAR2(20);
L_LC                          VARCHAR2(2);
L_LC_VERSION                  VARCHAR2(20);
L_SS                          VARCHAR2(2);
L_ALLOW_MODIFY                CHAR(1);
L_ACTIVE                      CHAR(1);
L_LOG_HS                      CHAR(1);
L_LOG_HS_DETAILS              CHAR(1);
L_HS_DETAILS_SEQ_NR           INTEGER;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
   
   L_RET_CODE := UNAPIAUT.GETSCPAAUTHORISATION(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, L_PR_VERSION, 
                                               L_LC, L_LC_VERSION, L_SS, L_ALLOW_MODIFY, L_ACTIVE,
                                               L_LOG_HS, L_LOG_HS_DETAILS);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   IF A_AUTHORISED_BY IS NOT NULL THEN
      L_RET_CODE := UNAPIGEN.GETNEXTEVENTSEQNR(L_EV_SEQ_NR);
 
      INSERT INTO UTSCPAHS(SC, PG, PGNODE, PA, PANODE, WHO, WHO_DESCRIPTION, WHAT, 
                           WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, A_AUTHORISED_BY, 
             UNAPIGEN.SQLUSERDESCRIPTION(A_AUTHORISED_BY), 'ElectronicSignature', 
             'Last action of parameter "'||A_PA||'" is signed electronically.', 
             CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);  

      L_HS_DETAILS_SEQ_NR := 0;
      L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
      INSERT INTO UTSCPAHSDETAILS(SC, PG, PGNODE, PA, PANODE, TR_SEQ, EV_SEQ, SEQ, DETAILS)
      VALUES(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR,
             'Last action of parameter "'||A_PA||'" is signed electronically.');  
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
   
   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('ScPaElectronicSignature', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'ScPaElectronicSignature'));
END SCPAELECTRONICSIGNATURE;

END UNAPIPAP;
PACKAGE BODY unapime AS

TYPE BOOLEAN_TABLE_TYPE IS TABLE OF BOOLEAN INDEX BY BINARY_INTEGER;
L_SQLERRM         VARCHAR2(255);


L_SQL_STRING      VARCHAR2(32767); 
L_WHERE_CLAUSE    VARCHAR2(10000);
L_EVENT_TP        UTEV.EV_TP%TYPE;
L_TIMED_EVENT_TP  UTEV.EV_TP%TYPE;
L_RET_CODE        NUMBER;
L_RESULT          NUMBER;
L_FETCHED_ROWS    NUMBER;
L_EV_SEQ_NR       NUMBER;
L_EV_DETAILS      VARCHAR2(255);
STPERROR          EXCEPTION;

P_SELECTME_CURSOR              INTEGER;
P_SELECTME_REANAL_FETCHED      BOOLEAN;
P_GETSCMECELL_CURSOR           INTEGER;
P_GETSCMECELL_REANAL_FETCHED   BOOLEAN;
P_GETSCMECELLINPUT_CURSOR      INTEGER;
P_GETCELLINPUT_REANAL_FETCHED  BOOLEAN;
P_GETSCMECELLOUTPUT_CURSOR     INTEGER;
P_GETCELLOUTPUT_REANAL_FETCHED BOOLEAN;
P_GETSCMECELLVAL_CURSOR        INTEGER;
P_GETCELLVAL_REANAL_FETCHED    BOOLEAN;
P_GETSCMECELLLISTOUTPUT_CURSOR INTEGER;
P_GETLISTOUTPUT_REANAL_FETCHED BOOLEAN;

P_SAVESCMECL_INSERT_EVENT      BOOLEAN;
P_SAVESCMECL_CALLS             INTEGER;
P_SAVESCMECL_TR_SEQ            INTEGER;
P_SAVESCMECLVALUES_CALLS       INTEGER;
P_SAVESCMECLVALUES_TR_SEQ      INTEGER;

P_SAVEMELIST_CALLS             INTEGER;
P_SAVEMELIST_NR_OF_ROWS        INTEGER;
P_SAVEMELIST_BUF               VARCHAR2(32767);

P_SAVEMELIST_XSDANDXSL_LOADED  BOOLEAN DEFAULT FALSE;
P_SAVEMELIST_XML_IN            CLOB;
P_SAVEMELIST_XML_IN_CREATED    BOOLEAN;
P_SAVEMELIST_XSD               CLOB;
P_SAVEMELIST_XSD_CREATED       BOOLEAN;
P_SAVEMELIST_XSL               CLOB;
P_SAVEMELIST_XSL_CREATED       BOOLEAN;
P_PLSQLSCRIPT                  CLOB;
P_PLSQLSCRIPT_CREATED          BOOLEAN;

FUNCTION GETVERSION
   RETURN VARCHAR2
IS
BEGIN
   RETURN('06.07.00.00_00.13');
EXCEPTION
   WHEN OTHERS THEN
      RETURN (NULL);
END GETVERSION;

FUNCTION GETSCMETHOD
(A_SC                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PG                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PGNODE               OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_PA                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PANODE               OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_ME                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_MENODE               OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_REANALYSIS           OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_MT_VERSION           OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_DESCRIPTION          OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_VALUE_F              OUT     UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_VALUE_S              OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_UNIT                 OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_EXEC_START_DATE      OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_EXEC_END_DATE        OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_EXECUTOR             OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_LAB                  OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_EQ                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_EQ_VERSION           OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PLANNED_EXECUTOR     OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PLANNED_EQ           OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PLANNED_EQ_VERSION   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_MANUALLY_ENTERED     OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ALLOW_ADD            OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ASSIGN_DATE          OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_ASSIGNED_BY          OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_MANUALLY_ADDED       OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_DELAY                OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_DELAY_UNIT           OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_FORMAT               OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_ACCURACY             OUT     UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_REAL_COST            OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_REAL_TIME            OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_CALIBRATION          OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_CONFIRM_COMPLETE     OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_AUTORECALC           OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ME_RESULT_EDITABLE   OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NEXT_CELL            OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SOP                  OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_SOP_VERSION          OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PLAUS_LOW            OUT     UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_PLAUS_HIGH           OUT     UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_WINSIZE_X            OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_WINSIZE_Y            OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_ME_CLASS             OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_LOG_HS               OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LOG_HS_DETAILS       OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ALLOW_MODIFY         OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_AR                   OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ACTIVE               OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LC                   OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_LC_VERSION           OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SS                   OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_REANALYSEDRESULT     OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NR_OF_ROWS           IN OUT  NUMBER,                    
 A_WHERE_CLAUSE         IN      VARCHAR2)                  
RETURN NUMBER IS

L_SC                       VARCHAR2(20);
L_PG                       VARCHAR2(20);
L_PGNODE                   NUMBER(9);
L_PA                       VARCHAR2(20);
L_PANODE                   NUMBER(9);
L_ME                       VARCHAR2(20);
L_MENODE                   NUMBER(9);
L_MT_VERSION               VARCHAR2(20);
L_DESCRIPTION              VARCHAR2(40);
L_VALUE_F                  FLOAT;
L_VALUE_S                  VARCHAR2(40);
L_UNIT                     VARCHAR2(20);
L_EXEC_START_DATE          TIMESTAMP WITH TIME ZONE;
L_EXEC_END_DATE            TIMESTAMP WITH TIME ZONE;
L_EXECUTOR                 VARCHAR2(20);
L_LAB                      VARCHAR2(20);
L_EQ                       VARCHAR2(20);
L_EQ_VERSION               VARCHAR2(20);
L_PLANNED_EXECUTOR         VARCHAR2(20);
L_PLANNED_EQ               VARCHAR2(20);
L_PLANNED_EQ_VERSION       VARCHAR2(20);
L_MANUALLY_ENTERED         CHAR(1);
L_ALLOW_ADD                CHAR(1);
L_ASSIGN_DATE              TIMESTAMP WITH TIME ZONE;
L_ASSIGNED_BY              VARCHAR2(20);
L_MANUALLY_ADDED           CHAR(1);
L_DELAY                    NUMBER(3);
L_DELAY_UNIT               VARCHAR2(20);
L_FORMAT                   VARCHAR2(40);
L_ACCURACY                 FLOAT;
L_REAL_COST                VARCHAR2(40);
L_REAL_TIME                VARCHAR2(40);
L_CALIBRATION              CHAR(1);
L_CONFIRM_COMPLETE         CHAR(1);
L_AUTORECALC               CHAR(1);
L_ME_RESULT_EDITABLE       CHAR(1);
L_NEXT_CELL                VARCHAR2(20);
L_SOP                      VARCHAR2(40);
L_SOP_VERSION              VARCHAR2(20);
L_PLAUS_LOW                FLOAT;
L_PLAUS_HIGH               FLOAT;
L_WINSIZE_X                NUMBER;
L_WINSIZE_Y                NUMBER;
L_REANALYSIS               NUMBER;
L_ME_CLASS                 VARCHAR2(2);
L_LOG_HS                   CHAR(1);
L_LOG_HS_DETAILS           CHAR(1);
L_ALLOW_MODIFY             CHAR(1);
L_AR                       CHAR(1);
L_ACTIVE                   CHAR(1);
L_LC                       VARCHAR2(2);
L_LC_VERSION               VARCHAR2(20);
L_SS                       VARCHAR2(2);
L_ME_CURSOR                INTEGER;
L_SCME_REANALYSIS_FETCHED  BOOLEAN; 
L_FETCH_SCME_REANALYSIS    BOOLEAN; 

L_X                          INTEGER;
L_LENGTH                     INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS, 0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   L_SCME_REANALYSIS_FETCHED := FALSE;
   L_FETCH_SCME_REANALYSIS := FALSE;
   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      RETURN(UNAPIGEN.DBERR_WHERECLAUSE);
   ELSIF
      UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := 'WHERE sc = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                        ''' ORDER BY sc, pgnode, panode, menode';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
      IF INSTR(UPPER(REPLACE(L_WHERE_CLAUSE, ' ', '')), 'REANALYSIS=')<>0 THEN
         L_FETCH_SCME_REANALYSIS := TRUE;
      END IF;
   END IF;

   L_ME_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT sc, pg, pgnode, pa, panode, me, menode, ' ||
                   'mt_version, description, value_f, value_s, unit, exec_start_date, ' ||
                   'exec_end_date, executor, lab, eq, eq_version, planned_executor, planned_eq, planned_eq_version,' ||
                   'manually_entered, allow_add, assign_date, assigned_by, ' ||
                   'manually_added, delay, delay_unit, format, ' ||
                   'accuracy, real_cost, real_time, calibration, ' ||
                   'confirm_complete, autorecalc, me_result_editable, next_cell, sop, sop_version, plaus_low, ' ||
                   'plaus_high, winsize_x, winsize_y, ' ||
                   'reanalysis, me_class, log_hs, log_hs_details, allow_modify, active, lc, lc_version, ss, ar ' ||
                   'FROM dd' || UNAPIGEN.P_DD || '.uvscme ' || L_WHERE_CLAUSE;
   L_FETCHED_ROWS := 0;

   LOOP
      DBMS_SQL.PARSE(L_ME_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      DBMS_SQL.DEFINE_COLUMN(L_ME_CURSOR,      1, L_SC, 20);
      DBMS_SQL.DEFINE_COLUMN(L_ME_CURSOR,      2, L_PG, 20);
      DBMS_SQL.DEFINE_COLUMN(L_ME_CURSOR,      3, L_PGNODE);
      DBMS_SQL.DEFINE_COLUMN(L_ME_CURSOR,      4, L_PA, 20);
      DBMS_SQL.DEFINE_COLUMN(L_ME_CURSOR,      5, L_PANODE);
      DBMS_SQL.DEFINE_COLUMN(L_ME_CURSOR,      6, L_ME, 20);
      DBMS_SQL.DEFINE_COLUMN(L_ME_CURSOR,      7, L_MENODE);
      DBMS_SQL.DEFINE_COLUMN(L_ME_CURSOR,      8, L_MT_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(L_ME_CURSOR,      9, L_DESCRIPTION, 40);
      DBMS_SQL.DEFINE_COLUMN(L_ME_CURSOR,      10, L_VALUE_F);
      DBMS_SQL.DEFINE_COLUMN(L_ME_CURSOR,      11, L_VALUE_S, 40);
      DBMS_SQL.DEFINE_COLUMN(L_ME_CURSOR,      12, L_UNIT, 20);
      DBMS_SQL.DEFINE_COLUMN(L_ME_CURSOR,      13, L_EXEC_START_DATE);
      DBMS_SQL.DEFINE_COLUMN(L_ME_CURSOR,      14, L_EXEC_END_DATE);
      DBMS_SQL.DEFINE_COLUMN(L_ME_CURSOR,      15, L_EXECUTOR, 20);
      DBMS_SQL.DEFINE_COLUMN(L_ME_CURSOR,      16, L_LAB, 20);
      DBMS_SQL.DEFINE_COLUMN(L_ME_CURSOR,      17, L_EQ, 20);
      DBMS_SQL.DEFINE_COLUMN(L_ME_CURSOR,      18, L_EQ_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(L_ME_CURSOR,      19, L_PLANNED_EXECUTOR, 20);
      DBMS_SQL.DEFINE_COLUMN(L_ME_CURSOR,      20, L_PLANNED_EQ, 20);
      DBMS_SQL.DEFINE_COLUMN(L_ME_CURSOR,      21, L_PLANNED_EQ_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN_CHAR(L_ME_CURSOR, 22, L_MANUALLY_ENTERED, 1);
      DBMS_SQL.DEFINE_COLUMN_CHAR(L_ME_CURSOR, 23, L_ALLOW_ADD, 1);
      DBMS_SQL.DEFINE_COLUMN(L_ME_CURSOR,      24, L_ASSIGN_DATE);
      DBMS_SQL.DEFINE_COLUMN(L_ME_CURSOR,      25, L_ASSIGNED_BY, 20);
      DBMS_SQL.DEFINE_COLUMN_CHAR(L_ME_CURSOR, 26, L_MANUALLY_ADDED, 1);
      DBMS_SQL.DEFINE_COLUMN(L_ME_CURSOR,      27, L_DELAY);
      DBMS_SQL.DEFINE_COLUMN(L_ME_CURSOR,      28, L_DELAY_UNIT, 20);
      DBMS_SQL.DEFINE_COLUMN(L_ME_CURSOR,      29, L_FORMAT, 40);
      DBMS_SQL.DEFINE_COLUMN(L_ME_CURSOR,      30, L_ACCURACY);
      DBMS_SQL.DEFINE_COLUMN(L_ME_CURSOR,      31, L_REAL_COST, 40);
      DBMS_SQL.DEFINE_COLUMN(L_ME_CURSOR,      32, L_REAL_TIME, 40);
      DBMS_SQL.DEFINE_COLUMN_CHAR(L_ME_CURSOR, 33, L_CALIBRATION, 1);
      DBMS_SQL.DEFINE_COLUMN_CHAR(L_ME_CURSOR, 34, L_CONFIRM_COMPLETE, 1);
      DBMS_SQL.DEFINE_COLUMN_CHAR(L_ME_CURSOR, 35, L_AUTORECALC, 1);
      DBMS_SQL.DEFINE_COLUMN_CHAR(L_ME_CURSOR, 36, L_ME_RESULT_EDITABLE, 1);
      DBMS_SQL.DEFINE_COLUMN(L_ME_CURSOR,      37, L_NEXT_CELL, 20);
      DBMS_SQL.DEFINE_COLUMN(L_ME_CURSOR,      38, L_SOP, 40);
      DBMS_SQL.DEFINE_COLUMN(L_ME_CURSOR,      39, L_SOP_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(L_ME_CURSOR,      40, L_PLAUS_LOW);
      DBMS_SQL.DEFINE_COLUMN(L_ME_CURSOR,      41, L_PLAUS_HIGH);
      DBMS_SQL.DEFINE_COLUMN(L_ME_CURSOR,      42, L_WINSIZE_X);
      DBMS_SQL.DEFINE_COLUMN(L_ME_CURSOR,      43, L_WINSIZE_Y);
      DBMS_SQL.DEFINE_COLUMN(L_ME_CURSOR,      44, L_REANALYSIS);
      DBMS_SQL.DEFINE_COLUMN(L_ME_CURSOR,      45, L_ME_CLASS, 2);
      DBMS_SQL.DEFINE_COLUMN_CHAR(L_ME_CURSOR, 46, L_LOG_HS, 1);
      DBMS_SQL.DEFINE_COLUMN_CHAR(L_ME_CURSOR, 47, L_LOG_HS_DETAILS, 1);
      DBMS_SQL.DEFINE_COLUMN_CHAR(L_ME_CURSOR, 48, L_ALLOW_MODIFY, 1);
      DBMS_SQL.DEFINE_COLUMN_CHAR(L_ME_CURSOR, 49, L_ACTIVE, 1);
      DBMS_SQL.DEFINE_COLUMN(L_ME_CURSOR,      50, L_LC, 2);
      DBMS_SQL.DEFINE_COLUMN(L_ME_CURSOR,      51, L_LC_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(L_ME_CURSOR,      52, L_SS, 2);
      DBMS_SQL.DEFINE_COLUMN_CHAR(L_ME_CURSOR, 53, L_AR, 1);

      L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_ME_CURSOR);

      LOOP
         EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

         DBMS_SQL.COLUMN_VALUE(L_ME_CURSOR,      1, L_SC);
         DBMS_SQL.COLUMN_VALUE(L_ME_CURSOR,      2, L_PG);
         DBMS_SQL.COLUMN_VALUE(L_ME_CURSOR,      3, L_PGNODE);
         DBMS_SQL.COLUMN_VALUE(L_ME_CURSOR,      4, L_PA);
         DBMS_SQL.COLUMN_VALUE(L_ME_CURSOR,      5, L_PANODE);
         DBMS_SQL.COLUMN_VALUE(L_ME_CURSOR,      6, L_ME);
         DBMS_SQL.COLUMN_VALUE(L_ME_CURSOR,      7, L_MENODE);
         DBMS_SQL.COLUMN_VALUE(L_ME_CURSOR,      8, L_MT_VERSION);
         DBMS_SQL.COLUMN_VALUE(L_ME_CURSOR,      9, L_DESCRIPTION);
         DBMS_SQL.COLUMN_VALUE(L_ME_CURSOR,      10, L_VALUE_F);
         DBMS_SQL.COLUMN_VALUE(L_ME_CURSOR,      11, L_VALUE_S);
         DBMS_SQL.COLUMN_VALUE(L_ME_CURSOR,      12, L_UNIT);
         DBMS_SQL.COLUMN_VALUE(L_ME_CURSOR,      13, L_EXEC_START_DATE);
         DBMS_SQL.COLUMN_VALUE(L_ME_CURSOR,      14, L_EXEC_END_DATE);
         DBMS_SQL.COLUMN_VALUE(L_ME_CURSOR,      15, L_EXECUTOR);
         DBMS_SQL.COLUMN_VALUE(L_ME_CURSOR,      16, L_LAB);
         DBMS_SQL.COLUMN_VALUE(L_ME_CURSOR,      17, L_EQ);
         DBMS_SQL.COLUMN_VALUE(L_ME_CURSOR,      18, L_EQ_VERSION);
         DBMS_SQL.COLUMN_VALUE(L_ME_CURSOR,      19, L_PLANNED_EXECUTOR);
         DBMS_SQL.COLUMN_VALUE(L_ME_CURSOR,      20, L_PLANNED_EQ);
         DBMS_SQL.COLUMN_VALUE(L_ME_CURSOR,      21, L_PLANNED_EQ_VERSION);
         DBMS_SQL.COLUMN_VALUE_CHAR(L_ME_CURSOR, 22, L_MANUALLY_ENTERED);
         DBMS_SQL.COLUMN_VALUE_CHAR(L_ME_CURSOR, 23, L_ALLOW_ADD);
         DBMS_SQL.COLUMN_VALUE(L_ME_CURSOR,      24, L_ASSIGN_DATE);
         DBMS_SQL.COLUMN_VALUE(L_ME_CURSOR,      25, L_ASSIGNED_BY);
         DBMS_SQL.COLUMN_VALUE_CHAR(L_ME_CURSOR, 26, L_MANUALLY_ADDED);
         DBMS_SQL.COLUMN_VALUE(L_ME_CURSOR,      27, L_DELAY);
         DBMS_SQL.COLUMN_VALUE(L_ME_CURSOR,      28, L_DELAY_UNIT);
         DBMS_SQL.COLUMN_VALUE(L_ME_CURSOR,      29, L_FORMAT);
         DBMS_SQL.COLUMN_VALUE(L_ME_CURSOR,      30, L_ACCURACY);
         DBMS_SQL.COLUMN_VALUE(L_ME_CURSOR,      31, L_REAL_COST);
         DBMS_SQL.COLUMN_VALUE(L_ME_CURSOR,      32, L_REAL_TIME);
         DBMS_SQL.COLUMN_VALUE_CHAR(L_ME_CURSOR, 33, L_CALIBRATION);
         DBMS_SQL.COLUMN_VALUE_CHAR(L_ME_CURSOR, 34, L_CONFIRM_COMPLETE);
         DBMS_SQL.COLUMN_VALUE_CHAR(L_ME_CURSOR, 35, L_AUTORECALC);
         DBMS_SQL.COLUMN_VALUE_CHAR(L_ME_CURSOR, 36, L_ME_RESULT_EDITABLE);
         DBMS_SQL.COLUMN_VALUE(L_ME_CURSOR,      37, L_NEXT_CELL);
         DBMS_SQL.COLUMN_VALUE(L_ME_CURSOR,      38, L_SOP);
         DBMS_SQL.COLUMN_VALUE(L_ME_CURSOR,      39, L_SOP_VERSION);
         DBMS_SQL.COLUMN_VALUE(L_ME_CURSOR,      40, L_PLAUS_LOW);
         DBMS_SQL.COLUMN_VALUE(L_ME_CURSOR,      41, L_PLAUS_HIGH);
         DBMS_SQL.COLUMN_VALUE(L_ME_CURSOR,      42, L_WINSIZE_X);
         DBMS_SQL.COLUMN_VALUE(L_ME_CURSOR,      43, L_WINSIZE_Y);
         DBMS_SQL.COLUMN_VALUE(L_ME_CURSOR,      44, L_REANALYSIS);
         DBMS_SQL.COLUMN_VALUE(L_ME_CURSOR,      45, L_ME_CLASS);
         DBMS_SQL.COLUMN_VALUE_CHAR(L_ME_CURSOR, 46, L_LOG_HS);
         DBMS_SQL.COLUMN_VALUE_CHAR(L_ME_CURSOR, 47, L_LOG_HS_DETAILS);
         DBMS_SQL.COLUMN_VALUE_CHAR(L_ME_CURSOR, 48, L_ALLOW_MODIFY);
         DBMS_SQL.COLUMN_VALUE_CHAR(L_ME_CURSOR, 49, L_ACTIVE);
         DBMS_SQL.COLUMN_VALUE(L_ME_CURSOR,      50, L_LC);
         DBMS_SQL.COLUMN_VALUE(L_ME_CURSOR,      51, L_LC_VERSION);
         DBMS_SQL.COLUMN_VALUE(L_ME_CURSOR,      52, L_SS);
         DBMS_SQL.COLUMN_VALUE_CHAR(L_ME_CURSOR, 53, L_AR);

         L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

         A_SC(L_FETCHED_ROWS) := L_SC;
         A_PG(L_FETCHED_ROWS) := L_PG;
         A_PGNODE(L_FETCHED_ROWS) := L_PGNODE;
         A_PA(L_FETCHED_ROWS) := L_PA;
         A_PANODE(L_FETCHED_ROWS) := L_PANODE;
         A_ME(L_FETCHED_ROWS) := L_ME;
         A_MENODE(L_FETCHED_ROWS) := L_MENODE;
         A_MT_VERSION(L_FETCHED_ROWS) := L_MT_VERSION;
         A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;
         A_VALUE_F(L_FETCHED_ROWS) := L_VALUE_F;
         A_VALUE_S(L_FETCHED_ROWS) := L_VALUE_S;
         A_UNIT(L_FETCHED_ROWS) := L_UNIT;
         A_EXEC_START_DATE(L_FETCHED_ROWS) := L_EXEC_START_DATE;
         A_EXEC_END_DATE(L_FETCHED_ROWS) := L_EXEC_END_DATE;
         A_EXECUTOR(L_FETCHED_ROWS) := L_EXECUTOR;
         A_LAB(L_FETCHED_ROWS) := L_LAB;
         A_EQ(L_FETCHED_ROWS) := L_EQ;
         A_EQ_VERSION(L_FETCHED_ROWS) := L_EQ_VERSION;
         A_PLANNED_EXECUTOR(L_FETCHED_ROWS) := L_PLANNED_EXECUTOR;
         A_PLANNED_EQ(L_FETCHED_ROWS) := L_PLANNED_EQ;
         A_PLANNED_EQ_VERSION(L_FETCHED_ROWS) := L_PLANNED_EQ_VERSION;
         A_MANUALLY_ENTERED(L_FETCHED_ROWS) := L_MANUALLY_ENTERED;
         A_ALLOW_ADD(L_FETCHED_ROWS) := L_ALLOW_ADD;
         A_ASSIGN_DATE(L_FETCHED_ROWS) := L_ASSIGN_DATE;
         A_ASSIGNED_BY(L_FETCHED_ROWS) := L_ASSIGNED_BY;
         A_DELAY(L_FETCHED_ROWS) := L_DELAY;
         A_DELAY_UNIT(L_FETCHED_ROWS) := L_DELAY_UNIT;
         A_MANUALLY_ADDED(L_FETCHED_ROWS) := L_MANUALLY_ADDED;
         A_FORMAT(L_FETCHED_ROWS) := L_FORMAT;
         A_ACCURACY(L_FETCHED_ROWS) := L_ACCURACY;
         A_REAL_COST(L_FETCHED_ROWS) := L_REAL_COST;
         A_REAL_TIME(L_FETCHED_ROWS) := L_REAL_TIME;
         A_CALIBRATION(L_FETCHED_ROWS) := L_CALIBRATION;
         A_CONFIRM_COMPLETE(L_FETCHED_ROWS) := L_CONFIRM_COMPLETE;
         A_AUTORECALC(L_FETCHED_ROWS) := L_AUTORECALC;
         A_ME_RESULT_EDITABLE(L_FETCHED_ROWS) := L_ME_RESULT_EDITABLE;
         A_NEXT_CELL(L_FETCHED_ROWS) := L_NEXT_CELL;
         A_SOP(L_FETCHED_ROWS) := L_SOP;
         A_SOP_VERSION(L_FETCHED_ROWS) := L_SOP_VERSION;
         A_PLAUS_LOW(L_FETCHED_ROWS) := L_PLAUS_LOW;
         A_PLAUS_HIGH(L_FETCHED_ROWS) := L_PLAUS_HIGH;
         A_WINSIZE_X(L_FETCHED_ROWS) := L_WINSIZE_X;
         A_WINSIZE_Y(L_FETCHED_ROWS) := L_WINSIZE_Y;
         A_REANALYSIS(L_FETCHED_ROWS) := L_REANALYSIS;
         A_ME_CLASS(L_FETCHED_ROWS) := L_ME_CLASS;
         A_LOG_HS(L_FETCHED_ROWS) := L_LOG_HS;
         A_LOG_HS_DETAILS(L_FETCHED_ROWS) := L_LOG_HS_DETAILS;
         A_ALLOW_MODIFY(L_FETCHED_ROWS) := L_ALLOW_MODIFY;
         A_ACTIVE(L_FETCHED_ROWS) := L_ACTIVE;
         A_LC(L_FETCHED_ROWS) := L_LC;
         A_LC_VERSION(L_FETCHED_ROWS) := L_LC_VERSION;
         A_SS(L_FETCHED_ROWS) := L_SS;
         A_AR(L_FETCHED_ROWS) := L_AR;
         IF L_SCME_REANALYSIS_FETCHED THEN
           A_REANALYSEDRESULT(L_FETCHED_ROWS) := '1';
         ELSE
           A_REANALYSEDRESULT(L_FETCHED_ROWS) := '0';
         END IF;

         IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
            L_RESULT := DBMS_SQL.FETCH_ROWS(L_ME_CURSOR);
         END IF;

      END LOOP;
      
      IF L_RESULT = 0 AND
         L_FETCH_SCME_REANALYSIS = TRUE AND
         L_SCME_REANALYSIS_FETCHED = FALSE THEN
            L_SQL_STRING := REPLACE(L_SQL_STRING, 'ar FROM dd' || UNAPIGEN.P_DD || '.uvscme', 'ar'||UNAPIGEN.P_DD||' FROM dd' || UNAPIGEN.P_DD || '.uvrscme');
            L_SCME_REANALYSIS_FETCHED := TRUE;         
      ELSE
         EXIT;         
      END IF;
   END LOOP;
   
   DBMS_SQL.CLOSE_CURSOR(L_ME_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetScMethod', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      L_LENGTH := 200;
      FOR L_X IN 1..10 LOOP
         IF ( LENGTH(L_SQL_STRING) > ((L_LENGTH*(L_X-1))+1) ) THEN
            INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
            VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                   'GetScMethod', '(SQL)'||SUBSTR(L_SQL_STRING, (L_LENGTH*(L_X-1))+1, L_LENGTH));             
         ELSE
            EXIT;
         END IF;
      END LOOP;            

      IF DBMS_SQL.IS_OPEN(L_ME_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(L_ME_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETSCMETHOD;

FUNCTION GETSCMERESULT
(A_SC                   IN      VARCHAR2,               
 A_PG                   IN OUT  VARCHAR2,               
 A_PGNODE               IN OUT  NUMBER,                 
 A_PA                   IN OUT  VARCHAR2,               
 A_PANODE               IN OUT  NUMBER,                 
 A_ME                   IN OUT  VARCHAR2,               
 A_MENODE               IN OUT  NUMBER,                 
 A_REANALYSIS           IN OUT  NUMBER,                 
 A_VALUE_F              OUT     FLOAT,                  
 A_VALUE_S              OUT     VARCHAR2,               
 A_REANALYSEDRESULT     OUT     CHAR)                   
RETURN NUMBER IS

L_PG               VARCHAR2(20);
L_PGNODE           NUMBER(9);
L_PA               VARCHAR2(20);
L_PANODE           NUMBER(9);
L_ME               VARCHAR2(20);
L_MENODE           NUMBER(9);
L_REANALYSIS       NUMBER(3);
L_VALUE_F          FLOAT;
L_VALUE_S          VARCHAR2(40);
L_ME_CURSOR        INTEGER;
L_SCME_REANALYSIS_FETCHED  BOOLEAN; 
L_FETCH_SCME_REANALYSIS    BOOLEAN; 

BEGIN

   IF NVL(A_SC, ' ') = ' ' THEN
      RETURN(UNAPIGEN.DBERR_NOOBJID);
   END IF;

   L_WHERE_CLAUSE := 'WHERE sc = '''|| REPLACE(A_SC, '''', '''''') || ''''; 

   IF NVL(A_PG, ' ') <> ' ' THEN
      L_WHERE_CLAUSE := L_WHERE_CLAUSE ||' AND pg = ''' || REPLACE(A_PG, '''', '''''') || ''''; 
   END IF;

   IF NVL(A_PGNODE, 0) <> 0 THEN
      L_WHERE_CLAUSE := L_WHERE_CLAUSE ||' AND pgnode = ''' || A_PGNODE || '''';
   END IF;

   IF NVL(A_PA, ' ') <> ' ' THEN
      L_WHERE_CLAUSE := L_WHERE_CLAUSE ||' AND pa = ''' || REPLACE(A_PA, '''', '''''') || ''''; 
   END IF;

   IF NVL(A_PANODE, 0) <> 0 THEN
      L_WHERE_CLAUSE := L_WHERE_CLAUSE ||' AND panode = ''' || A_PANODE || '''';
   END IF;

   IF NVL(A_ME, ' ') <> ' ' THEN
      L_WHERE_CLAUSE := L_WHERE_CLAUSE ||' AND me = ''' || REPLACE(A_ME, '''', '''''') || ''''; 
   END IF;

   IF NVL(A_MENODE, 0) <> 0 THEN
      L_WHERE_CLAUSE := L_WHERE_CLAUSE ||' AND menode = ''' || A_MENODE || '''';
   END IF;

   IF NVL(A_REANALYSIS, -1) <> -1 THEN
      L_WHERE_CLAUSE := L_WHERE_CLAUSE ||' AND reanalysis = ''' || A_REANALYSIS || '''';
   END IF;

   L_WHERE_CLAUSE := L_WHERE_CLAUSE ||' AND exec_end_date IS NOT NULL '||
                    'ORDER BY pgnode, panode, menode';

   L_SCME_REANALYSIS_FETCHED := FALSE;
   L_FETCH_SCME_REANALYSIS := FALSE;
   IF INSTR(UPPER(REPLACE(L_WHERE_CLAUSE, ' ', '')), 'REANALYSIS=')<>0 THEN
      L_FETCH_SCME_REANALYSIS := TRUE;
   END IF;

   L_ME_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT pg, pgnode, pa, panode, me, menode, reanalysis, value_f, '||
                   'value_s FROM dd' || UNAPIGEN.P_DD || '.uvscme '||
                   L_WHERE_CLAUSE;

   LOOP
      DBMS_SQL.PARSE(L_ME_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      DBMS_SQL.DEFINE_COLUMN(L_ME_CURSOR,      1, L_PG, 20);
      DBMS_SQL.DEFINE_COLUMN(L_ME_CURSOR,      2, L_PGNODE);
      DBMS_SQL.DEFINE_COLUMN(L_ME_CURSOR,      3, L_PA, 20);
      DBMS_SQL.DEFINE_COLUMN(L_ME_CURSOR,      4, L_PANODE);
      DBMS_SQL.DEFINE_COLUMN(L_ME_CURSOR,      5, L_ME, 20);
      DBMS_SQL.DEFINE_COLUMN(L_ME_CURSOR,      6, L_MENODE);
      DBMS_SQL.DEFINE_COLUMN(L_ME_CURSOR,      7, L_REANALYSIS);
      DBMS_SQL.DEFINE_COLUMN(L_ME_CURSOR,      8, L_VALUE_F);
      DBMS_SQL.DEFINE_COLUMN(L_ME_CURSOR,      9, L_VALUE_S, 40);
      L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_ME_CURSOR);

      IF L_RESULT > 0 THEN
         DBMS_SQL.COLUMN_VALUE(L_ME_CURSOR,      1, L_PG);
         DBMS_SQL.COLUMN_VALUE(L_ME_CURSOR,      2, L_PGNODE);

         DBMS_SQL.COLUMN_VALUE(L_ME_CURSOR,      3, L_PA);
         DBMS_SQL.COLUMN_VALUE(L_ME_CURSOR,      4, L_PANODE);
         DBMS_SQL.COLUMN_VALUE(L_ME_CURSOR,      5, L_ME);
         DBMS_SQL.COLUMN_VALUE(L_ME_CURSOR,      6, L_MENODE);
         DBMS_SQL.COLUMN_VALUE(L_ME_CURSOR,      7, L_REANALYSIS);
         DBMS_SQL.COLUMN_VALUE(L_ME_CURSOR,      8, L_VALUE_F);
         DBMS_SQL.COLUMN_VALUE(L_ME_CURSOR,      9, L_VALUE_S);
         A_PG := L_PG;
         A_PGNODE := L_PGNODE;
         A_PA := L_PA;
         A_PANODE := L_PANODE;
         A_ME := L_ME;
         A_MENODE := L_MENODE;
         A_REANALYSIS := L_REANALYSIS;
         A_VALUE_F := L_VALUE_F;
         A_VALUE_S := L_VALUE_S;
         IF L_SCME_REANALYSIS_FETCHED THEN
           A_REANALYSEDRESULT := '1';
         ELSE
           A_REANALYSEDRESULT := '0';
         END IF;
         EXIT;
      ELSIF L_RESULT = 0 AND
         L_FETCH_SCME_REANALYSIS = TRUE AND
         L_SCME_REANALYSIS_FETCHED = FALSE THEN
         L_SQL_STRING := REPLACE(L_SQL_STRING, 'FROM dd' || UNAPIGEN.P_DD || '.uvscme', 'FROM dd' || UNAPIGEN.P_DD || '.uvrscme');
         L_SCME_REANALYSIS_FETCHED := TRUE;         
      ELSE
         A_VALUE_F := NULL;
         A_VALUE_S := NULL;
         EXIT;
      END IF;

   END LOOP;
   
   DBMS_SQL.CLOSE_CURSOR(L_ME_CURSOR);

   IF L_RESULT = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
              'GetScMeResult', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN(L_ME_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(L_ME_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETSCMERESULT;

FUNCTION SELECTSCMETHOD
(A_COL_ID               IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_TP               IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_VALUE            IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_NR_OF_ROWS       IN      NUMBER,                    
 A_SC                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PG                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PGNODE               OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_PA                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PANODE               OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_ME                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_MENODE               OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_REANALYSIS           OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_MT_VERSION           OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_DESCRIPTION          OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_VALUE_F              OUT     UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_VALUE_S              OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_UNIT                 OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_EXEC_START_DATE      OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_EXEC_END_DATE        OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_EXECUTOR             OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_LAB                  OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_EQ                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_EQ_VERSION           OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PLANNED_EXECUTOR     OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PLANNED_EQ           OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PLANNED_EQ_VERSION   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_MANUALLY_ENTERED     OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ALLOW_ADD            OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ASSIGN_DATE          OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_ASSIGNED_BY          OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_MANUALLY_ADDED       OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_DELAY                OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_DELAY_UNIT           OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_FORMAT               OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_ACCURACY             OUT     UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_REAL_COST            OUT     UNAPIGEN.VC40_TABLE_TYPE, 
 A_REAL_TIME            OUT     UNAPIGEN.VC40_TABLE_TYPE, 
 A_CALIBRATION          OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_CONFIRM_COMPLETE     OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_AUTORECALC           OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ME_RESULT_EDITABLE   OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NEXT_CELL            OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SOP                  OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_SOP_VERSION          OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PLAUS_LOW            OUT     UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_PLAUS_HIGH           OUT     UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_WINSIZE_X            OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_WINSIZE_Y            OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_ME_CLASS             OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_LOG_HS               OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LOG_HS_DETAILS       OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ALLOW_MODIFY         OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_AR                   OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ACTIVE               OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LC                   OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_LC_VERSION           OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SS                   OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_REANALYSEDRESULT     OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NR_OF_ROWS           IN OUT  NUMBER,                    
 A_ORDER_BY_CLAUSE      IN      VARCHAR2,                  
 A_NEXT_ROWS            IN      NUMBER)                    
RETURN NUMBER IS

L_COL_OPERATOR           UNAPIGEN.VC20_TABLE_TYPE;
L_COL_ANDOR              UNAPIGEN.VC3_TABLE_TYPE;

BEGIN

FOR L_X IN 1..A_COL_NR_OF_ROWS LOOP
    L_COL_OPERATOR(L_X) := '=';
    L_COL_ANDOR(L_X) := 'AND';
END LOOP;

 RETURN(UNAPIME.SELECTSCMETHOD(A_COL_ID,
                               A_COL_TP,
                               A_COL_VALUE,
                               L_COL_OPERATOR,
                               L_COL_ANDOR,
                               A_COL_NR_OF_ROWS,
                               A_SC,
                               A_PG,
                               A_PGNODE,
                               A_PA,
                               A_PANODE,
                               A_ME,
                               A_MENODE,
                               A_REANALYSIS,
                               A_MT_VERSION,
                               A_DESCRIPTION,
                               A_VALUE_F,
                               A_VALUE_S,
                               A_UNIT,
                               A_EXEC_START_DATE,
                               A_EXEC_END_DATE,
                               A_EXECUTOR,
                               A_LAB,
                               A_EQ,
                               A_EQ_VERSION,
                               A_PLANNED_EXECUTOR,
                               A_PLANNED_EQ,
                               A_PLANNED_EQ_VERSION,
                               A_MANUALLY_ENTERED,
                               A_ALLOW_ADD,
                               A_ASSIGN_DATE,
                               A_ASSIGNED_BY,
                               A_MANUALLY_ADDED,
                               A_DELAY,
                               A_DELAY_UNIT,
                               A_FORMAT,
                               A_ACCURACY,
                               A_REAL_COST,
                               A_REAL_TIME,
                               A_CALIBRATION,
                               A_CONFIRM_COMPLETE,
                               A_AUTORECALC,
                               A_ME_RESULT_EDITABLE,
                               A_NEXT_CELL,
                               A_SOP,
                               A_SOP_VERSION,
                               A_PLAUS_LOW,
                               A_PLAUS_HIGH,
                               A_WINSIZE_X,
                               A_WINSIZE_Y,
                               A_ME_CLASS,
                               A_LOG_HS,
                               A_LOG_HS_DETAILS,
                               A_ALLOW_MODIFY,
                               A_AR,
                               A_ACTIVE,
                               A_LC,
                               A_LC_VERSION,
                               A_SS,
                               A_REANALYSEDRESULT,
                               A_NR_OF_ROWS,
                               A_ORDER_BY_CLAUSE,
                               A_NEXT_ROWS));

END SELECTSCMETHOD;

FUNCTION SELECTSCMETHOD
(A_COL_ID               IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_TP               IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_VALUE            IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_OPERATOR         IN      UNAPIGEN.VC20_TABLE_TYPE,  
 A_COL_ANDOR            IN      UNAPIGEN.VC3_TABLE_TYPE,   
 A_COL_NR_OF_ROWS       IN      NUMBER,                    
 A_SC                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PG                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PGNODE               OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_PA                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PANODE               OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_ME                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_MENODE               OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_REANALYSIS           OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_MT_VERSION           OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_DESCRIPTION          OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_VALUE_F              OUT     UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_VALUE_S              OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_UNIT                 OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_EXEC_START_DATE      OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_EXEC_END_DATE        OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_EXECUTOR             OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_LAB                  OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_EQ                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_EQ_VERSION           OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PLANNED_EXECUTOR     OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PLANNED_EQ           OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PLANNED_EQ_VERSION   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_MANUALLY_ENTERED     OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ALLOW_ADD            OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ASSIGN_DATE          OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_ASSIGNED_BY          OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_MANUALLY_ADDED       OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_DELAY                OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_DELAY_UNIT           OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_FORMAT               OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_ACCURACY             OUT     UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_REAL_COST            OUT     UNAPIGEN.VC40_TABLE_TYPE, 
 A_REAL_TIME            OUT     UNAPIGEN.VC40_TABLE_TYPE, 
 A_CALIBRATION          OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_CONFIRM_COMPLETE     OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_AUTORECALC           OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ME_RESULT_EDITABLE   OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NEXT_CELL            OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SOP                  OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_SOP_VERSION          OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PLAUS_LOW            OUT     UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_PLAUS_HIGH           OUT     UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_WINSIZE_X            OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_WINSIZE_Y            OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_ME_CLASS             OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_LOG_HS               OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LOG_HS_DETAILS       OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ALLOW_MODIFY         OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_AR                   OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ACTIVE               OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LC                   OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_LC_VERSION           OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SS                   OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_REANALYSEDRESULT     OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NR_OF_ROWS           IN OUT  NUMBER,                    
 A_ORDER_BY_CLAUSE      IN      VARCHAR2,                  
 A_NEXT_ROWS            IN      NUMBER)                    
RETURN NUMBER IS

L_SC                             VARCHAR2(20);
L_PG                             VARCHAR2(20);
L_PGNODE                         NUMBER(9);
L_PA                             VARCHAR2(20);
L_PANODE                         NUMBER(9);
L_ME                             VARCHAR2(20);
L_MENODE                         NUMBER(9);
L_MT_VERSION                     VARCHAR2(20);
L_DESCRIPTION                    VARCHAR2(40);
L_VALUE_F                        FLOAT;
L_VALUE_S                        VARCHAR2(40);
L_UNIT                           VARCHAR2(20);
L_EXEC_START_DATE                TIMESTAMP WITH TIME ZONE;
L_EXEC_END_DATE                  TIMESTAMP WITH TIME ZONE;
L_EXECUTOR                       VARCHAR2(20);
L_LAB                            VARCHAR2(20);
L_EQ                             VARCHAR2(20);
L_EQ_VERSION                     VARCHAR2(20);
L_PLANNED_EXECUTOR               VARCHAR2(20);
L_PLANNED_EQ                     VARCHAR2(20);
L_PLANNED_EQ_VERSION             VARCHAR2(20);
L_MANUALLY_ENTERED               CHAR(1);
L_ALLOW_ADD                      CHAR(1);
L_ASSIGN_DATE                    TIMESTAMP WITH TIME ZONE;
L_ASSIGNED_BY                    VARCHAR2(20);
L_MANUALLY_ADDED                 CHAR(1);
L_DELAY                          NUMBER(3);
L_DELAY_UNIT                     VARCHAR2(20);
L_FORMAT                         VARCHAR2(40);
L_ACCURACY                       FLOAT;
L_REAL_COST                      VARCHAR2(40);
L_REAL_TIME                      VARCHAR2(40);
L_CALIBRATION                    CHAR(1);
L_CONFIRM_COMPLETE               CHAR(1);
L_AUTORECALC                     CHAR(1);
L_ME_RESULT_EDITABLE             CHAR(1);
L_NEXT_CELL                      VARCHAR2(20);
L_SOP                            VARCHAR2(40);
L_SOP_VERSION                    VARCHAR2(20);
L_PLAUS_LOW                      FLOAT;
L_PLAUS_HIGH                     FLOAT;
L_WINSIZE_X                      NUMBER;
L_WINSIZE_Y                      NUMBER;
L_REANALYSIS                     NUMBER;
L_ME_CLASS                       VARCHAR2(2);
L_LOG_HS                         CHAR(1);
L_LOG_HS_DETAILS                 CHAR(1);
L_ALLOW_MODIFY                   CHAR(1);
L_AR                             CHAR(1);
L_ACTIVE                         CHAR(1);
L_LC                             VARCHAR2(2);
L_LC_VERSION                     VARCHAR2(20);
L_SS                             VARCHAR2(2);
L_ORDER_BY_CLAUSE                VARCHAR2(255);
L_FROM_CLAUSE                    VARCHAR2(255);
L_NEXT_ME_JOIN                   VARCHAR2(4);
L_NEXT_MEGK_JOIN                 VARCHAR2(4);
L_NEXT_SCGK_JOIN                 VARCHAR2(4);
L_MODIFY_QUERY                   BOOLEAN;
L_X                              INTEGER;
L_LENGTH                         INTEGER;
L_COLUMN_HANDLED                 BOOLEAN_TABLE_TYPE;
L_ANYOR_PRESENT                  BOOLEAN;
L_COL_ANDOR                      VARCHAR2(3);
L_PREV_COL_TP                    VARCHAR2(40);
L_PREV_COL_ID                    VARCHAR2(40);
L_PREV_COL_INDEX                 INTEGER;
L_WHERE_CLAUSE4JOIN              VARCHAR2(1000);

BEGIN

   IF NVL(A_NR_OF_ROWS, 0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_SELECTME_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_SELECTME_CURSOR);
         P_SELECTME_CURSOR := NULL;
         P_SELECTME_REANAL_FETCHED := FALSE;         
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;
   
   
   IF A_NEXT_ROWS = 1 THEN
      IF P_SELECTME_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
               
   IF NVL(A_NEXT_ROWS, 0) = 0 THEN
      P_SELECTME_REANAL_FETCHED := FALSE;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      P_SELECTION_VAL_TAB.DELETE;
      L_SQL_STRING := 'SELECT a.sc, a.pg, a.pgnode, a.pa, a.panode, a.me, ' ||
                      'a.menode, a.mt_version, a.description, a.value_f, a.value_s, a.unit, ' ||
                      'a.exec_start_date, ' ||
                      'a.exec_end_date, a.executor, a.lab, a.eq, a.eq_version, a.planned_executor, ' ||
                      'a.planned_eq, a.planned_eq_version, a.manually_entered, a.allow_add, ' ||
                      'a.assign_date, a.assigned_by, ' ||
                      'a.manually_added, a.delay, a.delay_unit, a.format, ' ||
                      'a.accuracy, a.real_cost, a.real_time, a.calibration, ' ||
                      'a.confirm_complete, a.autorecalc, a.me_result_editable, ' ||
                      'a.next_cell, a.sop, a.sop_version, ' ||
                      'a.plaus_low, a.plaus_high, a.winsize_x, a.winsize_y, ' ||
                      'a.reanalysis, a.me_class, a.log_hs, a.log_hs_details, a.allow_modify, ' ||
                      'a.active, a.lc, a.lc_version, a.ss, a.ar FROM ';

      
      
      L_FROM_CLAUSE := 'dd' || UNAPIGEN.P_DD || '.uvscme a';

      
      L_WHERE_CLAUSE4JOIN := '';
      L_WHERE_CLAUSE := '';
      L_ANYOR_PRESENT := FALSE;
      FOR I IN 1..A_COL_NR_OF_ROWS LOOP
         L_COLUMN_HANDLED(I) := FALSE;
         IF LTRIM(RTRIM(UPPER(A_COL_ANDOR(I)))) = 'OR' AND
            NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
            L_ANYOR_PRESENT := TRUE;
         END IF;
         
         
         IF I<>1 THEN
            IF NVL(A_COL_TP(I), ' ') = NVL(A_COL_TP(I-1), ' ') AND
               NVL(A_COL_ID(I), ' ') = NVL(A_COL_ID(I-1), ' ') AND
               NVL(A_COL_OPERATOR(I), '=') = '=' AND
               NVL(A_COL_OPERATOR(I-1), '=') = '=' AND
               NVL(A_COL_ANDOR(I-1), 'AND') =  'AND' AND
               (NVL(A_COL_VALUE(I), ' ') <> ' ' OR NVL(A_COL_VALUE(I-1), ' ') <> ' ') THEN
               IF I> 2 AND A_COL_ANDOR(I-2) = 'OR' THEN
                  L_ANYOR_PRESENT := TRUE;
               END IF;
            END IF;
         END IF;         
      END LOOP;

      
      
      
      L_NEXT_SCGK_JOIN := 'a';
      L_NEXT_MEGK_JOIN := 'a';
      L_NEXT_ME_JOIN := 'a';

      FOR I IN REVERSE 1..A_COL_NR_OF_ROWS LOOP
         IF NVL(LTRIM(A_COL_ID(I)), ' ') = ' ' THEN
            RETURN(UNAPIGEN.DBERR_SELCOLSINVALID);
         END IF;
   
         
         L_COL_ANDOR := 'AND';
         IF I<>1 THEN
            L_COL_ANDOR := A_COL_ANDOR(I-1);
         END IF;
         IF L_COL_ANDOR IS NULL THEN
            
            L_COL_ANDOR := 'AND';
         END IF;
         IF L_COLUMN_HANDLED(I) = FALSE THEN
            
            IF NVL(A_COL_TP(I), ' ') = 'megk' THEN
               IF NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
                  UNAPIGEN.WHERECLAUSESTRINGBUILDER (A_BASE_TABLE => 'utscme', A_INDEX =>I, A_COL_TP => A_COL_TP(I), A_COL_ID => A_COL_ID(I),
                                   A_COL_VALUE => A_COL_VALUE(I), A_COL_OPERATOR => A_COL_OPERATOR(I),
                                   A_COL_ANDOR => L_COL_ANDOR, A_ANYOR_PRESENT => L_ANYOR_PRESENT,
                                   A_JOINTABLE_PREFIX => 'utscmegk', A_JOINCOLUMN1 => 'me', A_JOINCOLUMN2 => '', 
                                   A_PREV_COL_TP => L_PREV_COL_TP, A_PREV_COL_ID => L_PREV_COL_ID, A_PREV_COL_INDEX => L_PREV_COL_INDEX,
                                   A_NEXTTABLE_TOJOIN => L_NEXT_MEGK_JOIN, A_FROM_CLAUSE => L_FROM_CLAUSE,
                                   A_WHERE_CLAUSE4JOIN => L_WHERE_CLAUSE4JOIN, A_WHERE_CLAUSE => L_WHERE_CLAUSE,
                                   A_SQL_VAL_TAB => P_SELECTION_VAL_TAB);                                    
               ELSIF INSTR(A_ORDER_BY_CLAUSE, 't'|| TO_CHAR(I)) <> 0 THEN
                  L_FROM_CLAUSE := L_FROM_CLAUSE || ', utscmegk' || A_COL_ID(I) || ' t' || I;
                  L_COL_ANDOR := 'AND'; 
                  
                  L_WHERE_CLAUSE4JOIN := L_WHERE_CLAUSE4JOIN ||
                                    't' || I || '.sc(+) = a.sc AND t' || I ||
                                    '.pg(+) = a.pg AND t' || I ||'.pgnode(+) = a.pgnode AND t' || I ||
                                    '.pa(+) = a.pa AND t' || I ||'.panode(+) = a.panode AND t' || I ||
                                    '.me(+) = a.me AND t' || I ||'.menode(+) = a.menode ' || L_COL_ANDOR || ' ';
               END IF;
               L_COLUMN_HANDLED(I) := TRUE; 
              
            ELSIF NVL(A_COL_TP(I), ' ') = 'scgk' THEN
               IF NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
                  UNAPIGEN.WHERECLAUSESTRINGBUILDER (A_BASE_TABLE => 'utscme', A_INDEX =>I, A_COL_TP => A_COL_TP(I), A_COL_ID => A_COL_ID(I),
                                   A_COL_VALUE => A_COL_VALUE(I), A_COL_OPERATOR => A_COL_OPERATOR(I),
                                   A_COL_ANDOR => L_COL_ANDOR, A_ANYOR_PRESENT => L_ANYOR_PRESENT,
                                   A_JOINTABLE_PREFIX => 'utscgk', A_JOINCOLUMN1 => 'sc', A_JOINCOLUMN2 => '', 
                                   A_PREV_COL_TP => L_PREV_COL_TP, A_PREV_COL_ID => L_PREV_COL_ID, A_PREV_COL_INDEX => L_PREV_COL_INDEX,
                                   A_NEXTTABLE_TOJOIN => L_NEXT_SCGK_JOIN, A_FROM_CLAUSE => L_FROM_CLAUSE,
                                   A_WHERE_CLAUSE4JOIN => L_WHERE_CLAUSE4JOIN, A_WHERE_CLAUSE => L_WHERE_CLAUSE,
                                   A_SQL_VAL_TAB => P_SELECTION_VAL_TAB);                                    
               ELSIF INSTR(A_ORDER_BY_CLAUSE, 't'|| TO_CHAR(I)) <> 0 THEN
                  L_FROM_CLAUSE := L_FROM_CLAUSE || ', utscgk' || A_COL_ID(I) || ' t' || I;
                  L_COL_ANDOR := 'AND'; 
                  
                  L_WHERE_CLAUSE4JOIN := L_WHERE_CLAUSE4JOIN ||
                                    't' || I || '.sc(+) = a.sc ' || L_COL_ANDOR || ' ';
               END IF;
               L_COLUMN_HANDLED(I) := TRUE; 

            ELSE
               
               
               IF NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
                  UNAPIGEN.WHERECLAUSESTRINGBUILDER (A_BASE_TABLE => 'utscme', A_INDEX =>I, A_COL_TP => A_COL_TP(I), A_COL_ID => A_COL_ID(I),
                                   A_COL_VALUE => A_COL_VALUE(I), A_COL_OPERATOR => A_COL_OPERATOR(I),
                                   A_COL_ANDOR => L_COL_ANDOR, A_ANYOR_PRESENT => L_ANYOR_PRESENT,
                                   A_JOINTABLE_PREFIX => '', A_JOINCOLUMN1 => '', A_JOINCOLUMN2 => '', 
                                   A_PREV_COL_TP => L_PREV_COL_TP, A_PREV_COL_ID => L_PREV_COL_ID, A_PREV_COL_INDEX => L_PREV_COL_INDEX,
                                   A_NEXTTABLE_TOJOIN => L_NEXT_ME_JOIN, A_FROM_CLAUSE => L_FROM_CLAUSE,
                                   A_WHERE_CLAUSE4JOIN => L_WHERE_CLAUSE4JOIN, A_WHERE_CLAUSE => L_WHERE_CLAUSE,
                                   A_SQL_VAL_TAB => P_SELECTION_VAL_TAB);                                  
               END IF;
               L_COLUMN_HANDLED(I) := TRUE; 
            END IF ;
         END IF;      
      END LOOP;

      
      IF SUBSTR(L_WHERE_CLAUSE4JOIN, -4) = 'AND ' THEN
         L_WHERE_CLAUSE4JOIN := SUBSTR(L_WHERE_CLAUSE4JOIN, 1,
                                  LENGTH(L_WHERE_CLAUSE4JOIN)-4);
      END IF;
      
      
      IF SUBSTR(L_WHERE_CLAUSE, -4) = 'AND ' THEN
         L_WHERE_CLAUSE := SUBSTR(L_WHERE_CLAUSE, 1,
                                  LENGTH(L_WHERE_CLAUSE)-4);
      END IF;
      IF UPPER(SUBSTR(L_WHERE_CLAUSE, -4)) = ' OR ' THEN
         L_WHERE_CLAUSE := SUBSTR(L_WHERE_CLAUSE, 1,
                                  LENGTH(L_WHERE_CLAUSE)-3);
      END IF;
      
      IF L_WHERE_CLAUSE4JOIN IS NOT NULL THEN
         IF L_WHERE_CLAUSE IS NULL THEN
            L_WHERE_CLAUSE := ' WHERE ' || L_WHERE_CLAUSE4JOIN;
         ELSE
            L_WHERE_CLAUSE := ' WHERE (' || L_WHERE_CLAUSE4JOIN || ') AND ('||L_WHERE_CLAUSE||') ';
         END IF;
      ELSE
         IF L_WHERE_CLAUSE IS NOT NULL THEN
            L_WHERE_CLAUSE := ' WHERE '||L_WHERE_CLAUSE;
         ELSE
            L_WHERE_CLAUSE := ' ';
         END IF;
      END IF;

      
      IF NVL(A_ORDER_BY_CLAUSE, ' ') = ' ' THEN
         L_ORDER_BY_CLAUSE := ' ORDER BY a.sc, a.pg, a.pgnode, a.pa, a.panode, a.me, a.menode';
      ELSE
         L_ORDER_BY_CLAUSE := A_ORDER_BY_CLAUSE;
      END IF;

      L_SQL_STRING := L_SQL_STRING || L_FROM_CLAUSE || L_WHERE_CLAUSE || L_ORDER_BY_CLAUSE;
      P_SELECTION_CLAUSE := L_FROM_CLAUSE || L_WHERE_CLAUSE;

      IF P_SELECTME_CURSOR IS NULL THEN
         P_SELECTME_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;
   END IF;
   
   L_MODIFY_QUERY := FALSE;
   L_FETCHED_ROWS := 0;
   LOOP
      
      IF L_MODIFY_QUERY THEN
         L_SQL_STRING := REPLACE(L_SQL_STRING, 'a.ar FROM dd' || UNAPIGEN.P_DD || '.uvscme a', 'a.ar' || UNAPIGEN.P_DD || ' FROM dd' || UNAPIGEN.P_DD || '.uvrscme a');
         P_SELECTME_REANAL_FETCHED := TRUE;
      END IF;
      
      
      IF NVL(A_NEXT_ROWS, 0) = 0  OR 
         L_MODIFY_QUERY THEN
   
         UNAPIAUT.ADDORACLECBOHINT (L_SQL_STRING) ;
         DBMS_SQL.PARSE(P_SELECTME_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         FOR L_X IN 1..P_SELECTION_VAL_TAB.COUNT() LOOP
            DBMS_SQL.BIND_VARIABLE(P_SELECTME_CURSOR, ':col_val'||L_X , P_SELECTION_VAL_TAB(L_X)); 
         END LOOP;      
         DBMS_SQL.DEFINE_COLUMN(P_SELECTME_CURSOR,      1, L_SC, 20);
         DBMS_SQL.DEFINE_COLUMN(P_SELECTME_CURSOR,      2, L_PG, 20);
         DBMS_SQL.DEFINE_COLUMN(P_SELECTME_CURSOR,      3, L_PGNODE);
         DBMS_SQL.DEFINE_COLUMN(P_SELECTME_CURSOR,      4, L_PA, 20);
         DBMS_SQL.DEFINE_COLUMN(P_SELECTME_CURSOR,      5, L_PANODE);
         DBMS_SQL.DEFINE_COLUMN(P_SELECTME_CURSOR,      6, L_ME, 20);
         DBMS_SQL.DEFINE_COLUMN(P_SELECTME_CURSOR,      7, L_MENODE);
         DBMS_SQL.DEFINE_COLUMN(P_SELECTME_CURSOR,      8, L_MT_VERSION, 20);
         DBMS_SQL.DEFINE_COLUMN(P_SELECTME_CURSOR,      9, L_DESCRIPTION, 40);
         DBMS_SQL.DEFINE_COLUMN(P_SELECTME_CURSOR,      10, L_VALUE_F);
         DBMS_SQL.DEFINE_COLUMN(P_SELECTME_CURSOR,      11, L_VALUE_S, 40);
         DBMS_SQL.DEFINE_COLUMN(P_SELECTME_CURSOR,      12, L_UNIT, 20);
         DBMS_SQL.DEFINE_COLUMN(P_SELECTME_CURSOR,      13, L_EXEC_START_DATE);
         DBMS_SQL.DEFINE_COLUMN(P_SELECTME_CURSOR,      14, L_EXEC_END_DATE);
         DBMS_SQL.DEFINE_COLUMN(P_SELECTME_CURSOR,      15, L_EXECUTOR, 20);
         DBMS_SQL.DEFINE_COLUMN(P_SELECTME_CURSOR,      16, L_LAB, 20);
         DBMS_SQL.DEFINE_COLUMN(P_SELECTME_CURSOR,      17, L_EQ, 20);
         DBMS_SQL.DEFINE_COLUMN(P_SELECTME_CURSOR,      18, L_EQ_VERSION, 20);
         DBMS_SQL.DEFINE_COLUMN(P_SELECTME_CURSOR,      19, L_PLANNED_EXECUTOR, 20);
         DBMS_SQL.DEFINE_COLUMN(P_SELECTME_CURSOR,      20, L_PLANNED_EQ, 20);
         DBMS_SQL.DEFINE_COLUMN(P_SELECTME_CURSOR,      21, L_PLANNED_EQ_VERSION, 20);
         DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTME_CURSOR, 22, L_MANUALLY_ENTERED, 1);
         DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTME_CURSOR, 23, L_ALLOW_ADD, 1);
         DBMS_SQL.DEFINE_COLUMN(P_SELECTME_CURSOR,      24, L_ASSIGN_DATE);
         DBMS_SQL.DEFINE_COLUMN(P_SELECTME_CURSOR,      25, L_ASSIGNED_BY, 20);
         DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTME_CURSOR, 26, L_MANUALLY_ADDED, 1);
         DBMS_SQL.DEFINE_COLUMN(P_SELECTME_CURSOR,      27, L_DELAY);
         DBMS_SQL.DEFINE_COLUMN(P_SELECTME_CURSOR,      28, L_DELAY_UNIT, 20);
         DBMS_SQL.DEFINE_COLUMN(P_SELECTME_CURSOR,      29, L_FORMAT, 40);
         DBMS_SQL.DEFINE_COLUMN(P_SELECTME_CURSOR,      30, L_ACCURACY);
         DBMS_SQL.DEFINE_COLUMN(P_SELECTME_CURSOR,      31, L_REAL_COST, 40);
         DBMS_SQL.DEFINE_COLUMN(P_SELECTME_CURSOR,      32, L_REAL_TIME, 40);
         DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTME_CURSOR, 33, L_CALIBRATION, 1);
         DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTME_CURSOR, 34, L_CONFIRM_COMPLETE, 1);
         DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTME_CURSOR, 35, L_AUTORECALC, 1);
         DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTME_CURSOR, 36, L_ME_RESULT_EDITABLE, 1);
         DBMS_SQL.DEFINE_COLUMN(P_SELECTME_CURSOR,      37, L_NEXT_CELL, 20);
         DBMS_SQL.DEFINE_COLUMN(P_SELECTME_CURSOR,      38, L_SOP, 40);
         DBMS_SQL.DEFINE_COLUMN(P_SELECTME_CURSOR,      39, L_SOP_VERSION, 20);
         DBMS_SQL.DEFINE_COLUMN(P_SELECTME_CURSOR,      40, L_PLAUS_LOW);
         DBMS_SQL.DEFINE_COLUMN(P_SELECTME_CURSOR,      41, L_PLAUS_HIGH);
         DBMS_SQL.DEFINE_COLUMN(P_SELECTME_CURSOR,      42, L_WINSIZE_X);
         DBMS_SQL.DEFINE_COLUMN(P_SELECTME_CURSOR,      43, L_WINSIZE_Y);
         DBMS_SQL.DEFINE_COLUMN(P_SELECTME_CURSOR,      44, L_REANALYSIS);
         DBMS_SQL.DEFINE_COLUMN(P_SELECTME_CURSOR,      45, L_ME_CLASS, 2);
         DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTME_CURSOR, 46, L_LOG_HS, 1);
         DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTME_CURSOR, 47, L_LOG_HS_DETAILS, 1);
         DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTME_CURSOR, 48, L_ALLOW_MODIFY, 1);
         DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTME_CURSOR, 49, L_ACTIVE, 1);
         DBMS_SQL.DEFINE_COLUMN(P_SELECTME_CURSOR,      50, L_LC, 2);
         DBMS_SQL.DEFINE_COLUMN(P_SELECTME_CURSOR,      51, L_LC_VERSION, 20);
         DBMS_SQL.DEFINE_COLUMN(P_SELECTME_CURSOR,      52, L_SS, 2);
         DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTME_CURSOR, 53, L_AR, 1);

         L_RESULT := DBMS_SQL.EXECUTE(P_SELECTME_CURSOR);

      END IF;
   
      L_RESULT := DBMS_SQL.FETCH_ROWS(P_SELECTME_CURSOR);

      LOOP
         EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

         DBMS_SQL.COLUMN_VALUE(P_SELECTME_CURSOR,      1, L_SC);
         DBMS_SQL.COLUMN_VALUE(P_SELECTME_CURSOR,      2, L_PG);
         DBMS_SQL.COLUMN_VALUE(P_SELECTME_CURSOR,      3, L_PGNODE);
         DBMS_SQL.COLUMN_VALUE(P_SELECTME_CURSOR,      4, L_PA);
         DBMS_SQL.COLUMN_VALUE(P_SELECTME_CURSOR,      5, L_PANODE);
         DBMS_SQL.COLUMN_VALUE(P_SELECTME_CURSOR,      6, L_ME);
         DBMS_SQL.COLUMN_VALUE(P_SELECTME_CURSOR,      7, L_MENODE);
         DBMS_SQL.COLUMN_VALUE(P_SELECTME_CURSOR,      8, L_MT_VERSION);
         DBMS_SQL.COLUMN_VALUE(P_SELECTME_CURSOR,      9, L_DESCRIPTION);
         DBMS_SQL.COLUMN_VALUE(P_SELECTME_CURSOR,      10, L_VALUE_F);
         DBMS_SQL.COLUMN_VALUE(P_SELECTME_CURSOR,      11, L_VALUE_S);
         DBMS_SQL.COLUMN_VALUE(P_SELECTME_CURSOR,      12, L_UNIT);
         DBMS_SQL.COLUMN_VALUE(P_SELECTME_CURSOR,      13, L_EXEC_START_DATE);
         DBMS_SQL.COLUMN_VALUE(P_SELECTME_CURSOR,      14, L_EXEC_END_DATE);
         DBMS_SQL.COLUMN_VALUE(P_SELECTME_CURSOR,      15, L_EXECUTOR);
         DBMS_SQL.COLUMN_VALUE(P_SELECTME_CURSOR,      16, L_LAB);
         DBMS_SQL.COLUMN_VALUE(P_SELECTME_CURSOR,      17, L_EQ);
         DBMS_SQL.COLUMN_VALUE(P_SELECTME_CURSOR,      18, L_EQ_VERSION);
         DBMS_SQL.COLUMN_VALUE(P_SELECTME_CURSOR,      19, L_PLANNED_EXECUTOR);
         DBMS_SQL.COLUMN_VALUE(P_SELECTME_CURSOR,      20, L_PLANNED_EQ);
         DBMS_SQL.COLUMN_VALUE(P_SELECTME_CURSOR,      21, L_PLANNED_EQ_VERSION);
         DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTME_CURSOR, 22, L_MANUALLY_ENTERED);
         DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTME_CURSOR, 23, L_ALLOW_ADD);
         DBMS_SQL.COLUMN_VALUE(P_SELECTME_CURSOR,      24, L_ASSIGN_DATE);
         DBMS_SQL.COLUMN_VALUE(P_SELECTME_CURSOR,      25, L_ASSIGNED_BY);
         DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTME_CURSOR, 26, L_MANUALLY_ADDED);
         DBMS_SQL.COLUMN_VALUE(P_SELECTME_CURSOR,      27, L_DELAY);
         DBMS_SQL.COLUMN_VALUE(P_SELECTME_CURSOR,      28, L_DELAY_UNIT);
         DBMS_SQL.COLUMN_VALUE(P_SELECTME_CURSOR,      29, L_FORMAT);
         DBMS_SQL.COLUMN_VALUE(P_SELECTME_CURSOR,      30, L_ACCURACY);
         DBMS_SQL.COLUMN_VALUE(P_SELECTME_CURSOR,      31, L_REAL_COST);
         DBMS_SQL.COLUMN_VALUE(P_SELECTME_CURSOR,      32, L_REAL_TIME);
         DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTME_CURSOR, 33, L_CALIBRATION);
         DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTME_CURSOR, 34, L_CONFIRM_COMPLETE);
         DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTME_CURSOR, 35, L_AUTORECALC);
         DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTME_CURSOR, 36, L_ME_RESULT_EDITABLE);
         DBMS_SQL.COLUMN_VALUE(P_SELECTME_CURSOR,      37, L_NEXT_CELL);
         DBMS_SQL.COLUMN_VALUE(P_SELECTME_CURSOR,      38, L_SOP);
         DBMS_SQL.COLUMN_VALUE(P_SELECTME_CURSOR,      39, L_SOP_VERSION);
         DBMS_SQL.COLUMN_VALUE(P_SELECTME_CURSOR,      40, L_PLAUS_LOW);
         DBMS_SQL.COLUMN_VALUE(P_SELECTME_CURSOR,      41, L_PLAUS_HIGH);
         DBMS_SQL.COLUMN_VALUE(P_SELECTME_CURSOR,      42, L_WINSIZE_X);
         DBMS_SQL.COLUMN_VALUE(P_SELECTME_CURSOR,      43, L_WINSIZE_Y);
         DBMS_SQL.COLUMN_VALUE(P_SELECTME_CURSOR,      44, L_REANALYSIS);
         DBMS_SQL.COLUMN_VALUE(P_SELECTME_CURSOR,      45, L_ME_CLASS);
         DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTME_CURSOR, 46, L_LOG_HS);
         DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTME_CURSOR, 47, L_LOG_HS_DETAILS);
         DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTME_CURSOR, 48, L_ALLOW_MODIFY);
         DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTME_CURSOR, 49, L_ACTIVE);
         DBMS_SQL.COLUMN_VALUE(P_SELECTME_CURSOR,      50, L_LC);
         DBMS_SQL.COLUMN_VALUE(P_SELECTME_CURSOR,      51, L_LC_VERSION);
         DBMS_SQL.COLUMN_VALUE(P_SELECTME_CURSOR,      52, L_SS);
         DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTME_CURSOR, 53, L_AR);

         L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

         A_SC(L_FETCHED_ROWS) := L_SC;
         A_PG(L_FETCHED_ROWS) := L_PG;
         A_PGNODE(L_FETCHED_ROWS) := L_PGNODE;
         A_PA(L_FETCHED_ROWS) := L_PA;
         A_PANODE(L_FETCHED_ROWS) := L_PANODE;
         A_ME(L_FETCHED_ROWS) := L_ME;
         A_MENODE(L_FETCHED_ROWS) := L_MENODE;
         A_MT_VERSION(L_FETCHED_ROWS) := L_MT_VERSION;
         A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;
         A_VALUE_F(L_FETCHED_ROWS) := L_VALUE_F;
         A_VALUE_S(L_FETCHED_ROWS) := L_VALUE_S;
         A_UNIT(L_FETCHED_ROWS) := L_UNIT;
         A_EXEC_START_DATE(L_FETCHED_ROWS) := L_EXEC_START_DATE;
         A_EXEC_END_DATE(L_FETCHED_ROWS) := L_EXEC_END_DATE;
         A_EXECUTOR(L_FETCHED_ROWS) := L_EXECUTOR;
         A_LAB(L_FETCHED_ROWS) := L_LAB;
         A_EQ(L_FETCHED_ROWS) := L_EQ;
         A_EQ_VERSION(L_FETCHED_ROWS) := L_EQ_VERSION;
         A_PLANNED_EXECUTOR(L_FETCHED_ROWS) := L_PLANNED_EXECUTOR;
         A_PLANNED_EQ(L_FETCHED_ROWS) := L_PLANNED_EQ;
         A_PLANNED_EQ_VERSION(L_FETCHED_ROWS) := L_PLANNED_EQ_VERSION;
         A_MANUALLY_ENTERED(L_FETCHED_ROWS) := L_MANUALLY_ENTERED;
         A_ALLOW_ADD(L_FETCHED_ROWS) := L_ALLOW_ADD;
         A_ASSIGN_DATE(L_FETCHED_ROWS) := L_ASSIGN_DATE;
         A_ASSIGNED_BY(L_FETCHED_ROWS) := L_ASSIGNED_BY;
         A_DELAY(L_FETCHED_ROWS) := L_DELAY;
         A_DELAY_UNIT(L_FETCHED_ROWS) := L_DELAY_UNIT;
         A_MANUALLY_ADDED(L_FETCHED_ROWS) := L_MANUALLY_ADDED;
         A_FORMAT(L_FETCHED_ROWS) := L_FORMAT;
         A_ACCURACY(L_FETCHED_ROWS) := L_ACCURACY;
         A_REAL_COST(L_FETCHED_ROWS) := L_REAL_COST;
         A_REAL_TIME(L_FETCHED_ROWS) := L_REAL_TIME;
         A_CALIBRATION(L_FETCHED_ROWS) := L_CALIBRATION;
         A_CONFIRM_COMPLETE(L_FETCHED_ROWS) := L_CONFIRM_COMPLETE;
         A_AUTORECALC(L_FETCHED_ROWS) := L_AUTORECALC;
         A_ME_RESULT_EDITABLE(L_FETCHED_ROWS) := L_ME_RESULT_EDITABLE;
         A_NEXT_CELL(L_FETCHED_ROWS) := L_NEXT_CELL;
         A_SOP(L_FETCHED_ROWS) := L_SOP;
         A_SOP_VERSION(L_FETCHED_ROWS) := L_SOP_VERSION;
         A_PLAUS_LOW(L_FETCHED_ROWS) := L_PLAUS_LOW;
         A_PLAUS_HIGH(L_FETCHED_ROWS) := L_PLAUS_HIGH;
         A_WINSIZE_X(L_FETCHED_ROWS) := L_WINSIZE_X;
         A_WINSIZE_Y(L_FETCHED_ROWS) := L_WINSIZE_Y;
         A_REANALYSIS(L_FETCHED_ROWS) := L_REANALYSIS;
         A_ME_CLASS(L_FETCHED_ROWS) := L_ME_CLASS;
         A_LOG_HS(L_FETCHED_ROWS) := L_LOG_HS;
         A_LOG_HS_DETAILS(L_FETCHED_ROWS) := L_LOG_HS_DETAILS;
         A_ALLOW_MODIFY(L_FETCHED_ROWS) := L_ALLOW_MODIFY;
         A_ACTIVE(L_FETCHED_ROWS) := L_ACTIVE;
         A_LC(L_FETCHED_ROWS) := L_LC;
         A_LC_VERSION(L_FETCHED_ROWS) := L_LC_VERSION;
         A_SS(L_FETCHED_ROWS) := L_SS;
         A_AR(L_FETCHED_ROWS) := L_AR;
         IF P_SELECTME_REANAL_FETCHED THEN
            A_REANALYSEDRESULT(L_FETCHED_ROWS) := '1';
         ELSE
            A_REANALYSEDRESULT(L_FETCHED_ROWS) := '0';
         END IF;
         
         IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
            L_RESULT := DBMS_SQL.FETCH_ROWS(P_SELECTME_CURSOR);
         END IF;

      END LOOP;

      L_MODIFY_QUERY := FALSE;
      IF P_SELECTME_REANAL_FETCHED THEN
         IF L_FETCHED_ROWS = 0 THEN
            L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
            DBMS_SQL.CLOSE_CURSOR(P_SELECTME_CURSOR);
         ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
            L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
            A_NR_OF_ROWS := L_FETCHED_ROWS;
            DBMS_SQL.CLOSE_CURSOR(P_SELECTME_CURSOR);
         ELSE   
            L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
            A_NR_OF_ROWS := L_FETCHED_ROWS;
         END IF; 
         
         EXIT;
      ELSE
         IF L_FETCHED_ROWS = A_NR_OF_ROWS THEN
            L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
            A_NR_OF_ROWS := L_FETCHED_ROWS;
            
            
            EXIT; 
         ELSE
            
            
            
            IF INSTR(UPPER(REPLACE(L_WHERE_CLAUSE, ' ', '')), 'REANALYSIS=')<>0 THEN
               L_MODIFY_QUERY := TRUE;
               
            ELSE
               IF L_FETCHED_ROWS = 0 THEN
                  L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
                  DBMS_SQL.CLOSE_CURSOR(P_SELECTME_CURSOR);
               ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
                  L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
                  A_NR_OF_ROWS := L_FETCHED_ROWS;
                  DBMS_SQL.CLOSE_CURSOR(P_SELECTME_CURSOR);
               
               
               END IF;
               EXIT;
            END IF;
         END IF;       
      END IF;
   END LOOP;
   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
             'SelectScMethod', L_SQLERRM);             
      UNAPIGEN.U4COMMIT;
      L_LENGTH := 200;
      FOR L_X IN 1..10 LOOP
         IF ( LENGTH(L_SQL_STRING) > ((L_LENGTH*(L_X-1))+1) ) THEN
            INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
            VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                   'SelectScMethod', '(SQL)'||SUBSTR(L_SQL_STRING, (L_LENGTH*(L_X-1))+1, L_LENGTH));             
         ELSE
            EXIT;
         END IF;
      END LOOP;            
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN(P_SELECTME_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(P_SELECTME_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END SELECTSCMETHOD;

FUNCTION GETSCMECELL
(A_SC                   OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PG                   OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PGNODE               OUT     UNAPIGEN.LONG_TABLE_TYPE,   
 A_PA                   OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PANODE               OUT     UNAPIGEN.LONG_TABLE_TYPE,   
 A_ME                   OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_MENODE               OUT     UNAPIGEN.LONG_TABLE_TYPE,   
 A_REANALYSIS           OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_CELL                 OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_CELLNODE             OUT     UNAPIGEN.LONG_TABLE_TYPE,   
 A_DSP_TITLE            OUT     UNAPIGEN.VC40_TABLE_TYPE,   
 A_VALUE_F              OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_VALUE_S              OUT     UNAPIGEN.VC40_TABLE_TYPE,   
 A_CELL_TP              OUT     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_POS_X                OUT     UNAPIGEN.NUM_TABLE_TYPE,    
 A_POS_Y                OUT     UNAPIGEN.NUM_TABLE_TYPE,    
 A_ALIGN                OUT     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_WINSIZE_X            OUT     UNAPIGEN.NUM_TABLE_TYPE,    
 A_WINSIZE_Y            OUT     UNAPIGEN.NUM_TABLE_TYPE,    
 A_IS_PROTECTED         OUT     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_MANDATORY            OUT     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_HIDDEN               OUT     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_UNIT                 OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_FORMAT               OUT     UNAPIGEN.VC40_TABLE_TYPE,   
 A_EQ                   OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_EQ_VERSION           OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_COMPONENT            OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_CALC_TP              OUT     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_CALC_FORMULA         OUT     UNAPIGEN.VC2000_TABLE_TYPE, 
 A_VALID_CF             OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_MAX_X                OUT     UNAPIGEN.NUM_TABLE_TYPE,    
 A_MAX_Y                OUT     UNAPIGEN.NUM_TABLE_TYPE,    
 A_MULTI_SELECT         OUT     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_REANALYSEDRESULT     OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NR_OF_ROWS           IN OUT  NUMBER,                     
 A_WHERE_CLAUSE         IN      VARCHAR2,                   
 A_NEXT_ROWS            IN      NUMBER)                     
RETURN NUMBER IS

L_SC                             VARCHAR2(20);
L_PG                             VARCHAR2(20);
L_PGNODE                         NUMBER(9);
L_PA                             VARCHAR2(20);
L_PANODE                         NUMBER(9);
L_ME                             VARCHAR2(20);
L_MENODE                         NUMBER(9);
L_MT_VERSION                     VARCHAR2(20);
L_REANALYSIS                     NUMBER(3);
L_EXEC_START_DATE                TIMESTAMP WITH TIME ZONE;
L_CELL                           VARCHAR2(20);
L_CELLNODE                       NUMBER(9);
L_DSP_TITLE                      VARCHAR2(40);
L_VALUE_F                        FLOAT;
L_VALUE_S                        VARCHAR2(40);
L_CELL_TP                        CHAR(1);
L_POS_X                          NUMBER(4);
L_POS_Y                          NUMBER(4);
L_ALIGN                          CHAR(1);
L_WINSIZE_X                      NUMBER(4);
L_WINSIZE_Y                      NUMBER(4);
L_IS_PROTECTED                   CHAR(1);
L_MANDATORY                      CHAR(1);
L_HIDDEN                         CHAR(1);
L_UNIT                           VARCHAR2(20);
L_FORMAT                         VARCHAR2(40);
L_EQ                             VARCHAR2(20);
L_EQ_VERSION                     VARCHAR2(20);
L_COMPONENT                      VARCHAR2(20);
L_CALC_TP                        CHAR(1);
L_CALC_FORMULA                   VARCHAR2(2000);
L_VALID_CF                       VARCHAR2(20);
L_MAX_X                          NUMBER(3);
L_MAX_Y                          NUMBER(3);
L_MULTI_SELECT                   CHAR(1);
L_LEAVE_LOOP                     BOOLEAN;
L_SUB_WHERE_CLAUSE               VARCHAR2(4000);
L_CELLS_CREATION_CALLED          BOOLEAN;
L_CREATE_DETAILS                 BOOLEAN;
L_AR                             CHAR(1);
L_FETCH_WSME                     BOOLEAN;
L_MODIFY_QUERY                   BOOLEAN;
L_FETCHED_METHODS                INTEGER;
L_COUNT_MTEL                     INTEGER;
L_USELQUAL                       INTEGER;
L_BIND_SCME_SELECTION            BOOLEAN;
L_BIND_FIXED_SC_FLAG             BOOLEAN;

BEGIN

   L_BIND_SCME_SELECTION := FALSE;
   L_BIND_FIXED_SC_FLAG := FALSE;
   
   
   
   
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_NR_OF_ROWS, 0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NROFROWS;
      RAISE STPERROR;
   END IF;

   
   
   
   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NEXTROWS;
      RAISE STPERROR;
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_GETSCMECELL_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_GETSCMECELL_CURSOR);
         P_GETSCMECELL_CURSOR := NULL;
         P_GETSCMECELL_REANAL_FETCHED := FALSE;
      END IF;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_GETSCMECELL_CURSOR IS NULL THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOCURSOR;
         RAISE STPERROR;
      END IF;
   END IF;

   
               
   IF NVL(A_NEXT_ROWS, 0) = 0 THEN
      P_GETSCMECELL_REANAL_FETCHED := FALSE;
   END IF;
   
   
   L_FETCH_WSME := FALSE;
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      
      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_WHERECLAUSE;
         RAISE STPERROR;
      ELSIF A_WHERE_CLAUSE = 'SELECTION' THEN
         IF UNAPIME.P_SELECTION_CLAUSE IS NOT NULL THEN 
            IF INSTR(UPPER(UNAPIME.P_SELECTION_CLAUSE), ' WHERE ') <> 0 THEN       
               L_WHERE_CLAUSE := ','||UNAPIME.P_SELECTION_CLAUSE|| 
                                 ' AND a.sc=cl.sc AND a.pg=cl.pg AND a.pgnode=cl.pgnode ' ||
                                 'AND a.pa=cl.pa AND a.panode=cl.panode ' ||
                                 'AND a.me=cl.me AND a.menode=cl.menode ' ||
                                 'AND a.reanalysis=cl.reanalysis ' ||
                                 'ORDER BY cl.sc, cl.pgnode, cl.panode, cl.menode, cl.cellnode';
            ELSE
               L_WHERE_CLAUSE := ','||UNAPIME.P_SELECTION_CLAUSE||  
                                 ' WHERE a.sc=cl.sc AND a.pg=cl.pg AND a.pgnode=cl.pgnode ' ||
                                 'AND a.pa=cl.pa AND a.panode=cl.panode ' ||
                                 'AND a.me=cl.me AND a.menode=cl.menode ' ||
                                 'AND a.reanalysis=cl.reanalysis ' ||
                                 'ORDER BY cl.sc, cl.pgnode, cl.panode, cl.menode, cl.cellnode';
            END IF;
            L_BIND_SCME_SELECTION := TRUE;
         ELSE
            L_WHERE_CLAUSE := 'ORDER BY cl.sc,cl.pgnode,cl.panode,cl.menode,cl.cellnode'; 
         END IF;
      ELSIF REPLACE( SUBSTR(A_WHERE_CLAUSE, 1 , INSTR(A_WHERE_CLAUSE,'''')), ' ', '')='WS=''' THEN
         
         
         L_FETCH_WSME := TRUE;
   
         L_WHERE_CLAUSE := 'WHERE utwsme.ws = :ws_val ' || 
                           ' AND utwsme.sc=cl.sc AND utwsme.pg=cl.pg AND utwsme.pgnode=cl.pgnode ' ||
                           'AND utwsme.pa=cl.pa AND utwsme.panode=cl.panode ' ||
                           'AND utwsme.me=cl.me AND utwsme.menode=cl.menode ' ||
                           'AND utwsme.reanalysis=cl.reanalysis ';
                            
         IF INSTR(UPPER(A_WHERE_CLAUSE), 'ORDER BY')=0 THEN
            L_WHERE_CLAUSE := L_WHERE_CLAUSE||' ORDER BY cl.sc, cl.pgnode, cl.panode, cl.menode, cl.cellnode'; 
         END IF;    
      ELSIF                     
         UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
         L_BIND_FIXED_SC_FLAG := TRUE;
         L_WHERE_CLAUSE := 'WHERE cl.sc = :sc_val ORDER BY cl.pgnode, cl.panode, cl.menode, cl.cellnode';
      ELSE     
         L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
      END IF;
   ELSE
      
      
      IF REPLACE( SUBSTR(A_WHERE_CLAUSE, 1 , INSTR(A_WHERE_CLAUSE,'''')), ' ', '')='WS=''' THEN
         L_FETCH_WSME := TRUE;
      END IF;   
   END IF;
   
   
   
   
   L_CELLS_CREATION_CALLED := FALSE;
   IF NVL(A_NEXT_ROWS, 0) = -1 THEN
      L_LEAVE_LOOP := TRUE; 
   ELSE   
      L_LEAVE_LOOP := FALSE;
   END IF;
   
   L_FETCHED_ROWS := 0;
   L_MODIFY_QUERY := FALSE;
   WHILE NOT L_LEAVE_LOOP LOOP   
      IF NOT DBMS_SQL.IS_OPEN(P_GETSCMECELL_CURSOR) OR
         L_MODIFY_QUERY THEN
         IF L_FETCH_WSME THEN
            L_SQL_STRING := 'SELECT DISTINCT cl.sc, cl.pg, cl.pgnode, cl.pa, cl.panode, cl.me, cl.menode, cl.reanalysis, '||
                            'cl.cell, cl.cellnode, cl.dsp_title, cl.value_f, cl.value_s, cl.cell_tp, '||
                            'cl.pos_x, cl.pos_y, cl.align, cl.winsize_x, cl.winsize_y, '||
                            'cl.is_protected, cl.mandatory, cl.hidden, cl.unit, cl.format, cl.eq, cl.eq_version, cl.component, cl.calc_tp, '||
                            'cl.calc_formula, cl.valid_cf, cl.max_x, cl.max_y, cl.multi_select ' ||
                            'FROM dd' || UNAPIGEN.P_DD || '.uvscmecell cl, utwsme ' || L_WHERE_CLAUSE;
         ELSE
            L_SQL_STRING := 'SELECT DISTINCT cl.sc, cl.pg, cl.pgnode, cl.pa, cl.panode, cl.me, cl.menode, cl.reanalysis, '||
                            'cl.cell, cl.cellnode, cl.dsp_title, cl.value_f, cl.value_s, cl.cell_tp, '||
                            'cl.pos_x, cl.pos_y, cl.align, cl.winsize_x, cl.winsize_y, '||
                            'cl.is_protected, cl.mandatory, cl.hidden, cl.unit, cl.format, cl.eq, cl.eq_version, cl.component, cl.calc_tp, '||
                            'cl.calc_formula, cl.valid_cf, cl.max_x, cl.max_y, cl.multi_select ';
            IF L_BIND_SCME_SELECTION AND
               INSTR(L_WHERE_CLAUSE, ',dd' || UNAPIGEN.P_DD || '.uvscme a')=1 THEN
               
               L_SQL_STRING := L_SQL_STRING || 
                               'FROM dd' || UNAPIGEN.P_DD || '.uvscme a, dd' || UNAPIGEN.P_DD || '.uvscmecell cl ' ||
                               SUBSTR(L_WHERE_CLAUSE, 1+LENGTH(',dd' || UNAPIGEN.P_DD || '.uvscme a'));               
            ELSE
               L_SQL_STRING := L_SQL_STRING ||
                               'FROM dd' || UNAPIGEN.P_DD || '.uvscmecell cl ' || L_WHERE_CLAUSE;
            END IF;
         END IF;
      END IF;

      IF NOT DBMS_SQL.IS_OPEN(P_GETSCMECELL_CURSOR) THEN
         P_GETSCMECELL_CURSOR := DBMS_SQL.OPEN_CURSOR;  
      END IF;
            
      
      IF L_MODIFY_QUERY THEN
         L_SQL_STRING := REPLACE(L_SQL_STRING, 'dd' || UNAPIGEN.P_DD || '.uvscmecell cl', 'dd' || UNAPIGEN.P_DD || '.uvrscmecell cl');
         P_GETSCMECELL_REANAL_FETCHED := TRUE;
      END IF;
            
      
      IF NVL(A_NEXT_ROWS, 0) = 0  OR 
         L_MODIFY_QUERY THEN

			UNAPIAUT.ADDORACLECBOHINT (L_SQL_STRING) ;
         DBMS_SQL.PARSE(P_GETSCMECELL_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         IF L_BIND_SCME_SELECTION THEN
            FOR L_X IN 1..UNAPIME.P_SELECTION_VAL_TAB.COUNT() LOOP
               DBMS_SQL.BIND_VARIABLE(P_GETSCMECELL_CURSOR, ':col_val'||L_X , UNAPIME.P_SELECTION_VAL_TAB(L_X)); 
            END LOOP;
         ELSIF L_BIND_FIXED_SC_FLAG THEN
            DBMS_SQL.BIND_VARIABLE(P_GETSCMECELL_CURSOR, ':sc_val' , A_WHERE_CLAUSE); 
         ELSIF L_FETCH_WSME THEN
            DBMS_SQL.BIND_VARIABLE(P_GETSCMECELL_CURSOR, ':ws_val' , SUBSTR(A_WHERE_CLAUSE,5, LENGTH(A_WHERE_CLAUSE)-5)); 
         END IF;
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELL_CURSOR, 1, L_SC, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELL_CURSOR, 2, L_PG, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELL_CURSOR, 3, L_PGNODE);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELL_CURSOR, 4, L_PA, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELL_CURSOR, 5, L_PANODE);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELL_CURSOR, 6, L_ME, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELL_CURSOR, 7, L_MENODE);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELL_CURSOR, 8, L_REANALYSIS);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELL_CURSOR, 9, L_CELL, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELL_CURSOR, 10, L_CELLNODE);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELL_CURSOR, 11, L_DSP_TITLE, 40);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELL_CURSOR, 12, L_VALUE_F);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELL_CURSOR, 13, L_VALUE_S, 40);
         DBMS_SQL.DEFINE_COLUMN_CHAR(P_GETSCMECELL_CURSOR, 14, L_CELL_TP, 1);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELL_CURSOR, 15, L_POS_X);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELL_CURSOR, 16, L_POS_Y);
         DBMS_SQL.DEFINE_COLUMN_CHAR(P_GETSCMECELL_CURSOR, 17, L_ALIGN, 1);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELL_CURSOR, 18, L_WINSIZE_X);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELL_CURSOR, 19, L_WINSIZE_Y);
         DBMS_SQL.DEFINE_COLUMN_CHAR(P_GETSCMECELL_CURSOR, 20, L_IS_PROTECTED, 1);
         DBMS_SQL.DEFINE_COLUMN_CHAR(P_GETSCMECELL_CURSOR, 21, L_MANDATORY, 1);
         DBMS_SQL.DEFINE_COLUMN_CHAR(P_GETSCMECELL_CURSOR, 22, L_HIDDEN, 1);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELL_CURSOR, 23, L_UNIT, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELL_CURSOR, 24, L_FORMAT, 40);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELL_CURSOR, 25, L_EQ, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELL_CURSOR, 26, L_EQ_VERSION, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELL_CURSOR, 27, L_COMPONENT, 20);
         DBMS_SQL.DEFINE_COLUMN_CHAR(P_GETSCMECELL_CURSOR, 28, L_CALC_TP, 1);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELL_CURSOR, 29, L_CALC_FORMULA, 2000);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELL_CURSOR, 30, L_VALID_CF, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELL_CURSOR, 31, L_MAX_X);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELL_CURSOR, 32, L_MAX_Y);
         DBMS_SQL.DEFINE_COLUMN_CHAR(P_GETSCMECELL_CURSOR, 33, L_MULTI_SELECT, 1);
         L_RESULT := DBMS_SQL.EXECUTE(P_GETSCMECELL_CURSOR);

      END IF;

      L_RESULT := DBMS_SQL.FETCH_ROWS(P_GETSCMECELL_CURSOR);
      
      LOOP   
         EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELL_CURSOR, 1, L_SC);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELL_CURSOR, 2, L_PG);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELL_CURSOR, 3, L_PGNODE);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELL_CURSOR, 4, L_PA);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELL_CURSOR, 5, L_PANODE);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELL_CURSOR, 6, L_ME);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELL_CURSOR, 7, L_MENODE);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELL_CURSOR, 8, L_REANALYSIS);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELL_CURSOR, 9, L_CELL);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELL_CURSOR, 10, L_CELLNODE);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELL_CURSOR, 11, L_DSP_TITLE);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELL_CURSOR, 12, L_VALUE_F);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELL_CURSOR, 13, L_VALUE_S);
         DBMS_SQL.COLUMN_VALUE_CHAR(P_GETSCMECELL_CURSOR, 14, L_CELL_TP);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELL_CURSOR, 15, L_POS_X);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELL_CURSOR, 16, L_POS_Y);
         DBMS_SQL.COLUMN_VALUE_CHAR(P_GETSCMECELL_CURSOR, 17, L_ALIGN);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELL_CURSOR, 18, L_WINSIZE_X);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELL_CURSOR, 19, L_WINSIZE_Y);
         DBMS_SQL.COLUMN_VALUE_CHAR(P_GETSCMECELL_CURSOR, 20, L_IS_PROTECTED);
         DBMS_SQL.COLUMN_VALUE_CHAR(P_GETSCMECELL_CURSOR, 21, L_MANDATORY);
         DBMS_SQL.COLUMN_VALUE_CHAR(P_GETSCMECELL_CURSOR, 22, L_HIDDEN);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELL_CURSOR, 23, L_UNIT);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELL_CURSOR, 24, L_FORMAT);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELL_CURSOR, 25, L_EQ);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELL_CURSOR, 26, L_EQ_VERSION);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELL_CURSOR, 27, L_COMPONENT);
         DBMS_SQL.COLUMN_VALUE_CHAR(P_GETSCMECELL_CURSOR, 28, L_CALC_TP);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELL_CURSOR, 29, L_CALC_FORMULA);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELL_CURSOR, 30, L_VALID_CF);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELL_CURSOR, 31, L_MAX_X);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELL_CURSOR, 32, L_MAX_Y);
         DBMS_SQL.COLUMN_VALUE_CHAR(P_GETSCMECELL_CURSOR, 33, L_MULTI_SELECT);
      
         L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
         A_SC(L_FETCHED_ROWS) := L_SC;
         A_PG(L_FETCHED_ROWS) := L_PG;
         A_PGNODE(L_FETCHED_ROWS) := L_PGNODE;
         A_PA(L_FETCHED_ROWS) := L_PA;
         A_PANODE(L_FETCHED_ROWS) := L_PANODE;
         A_ME(L_FETCHED_ROWS) := L_ME;
         A_MENODE(L_FETCHED_ROWS) := L_MENODE;
         A_REANALYSIS(L_FETCHED_ROWS) := L_REANALYSIS;
         A_CELL(L_FETCHED_ROWS) := L_CELL;
         A_CELLNODE(L_FETCHED_ROWS) := L_CELLNODE;
         A_DSP_TITLE(L_FETCHED_ROWS) := L_DSP_TITLE;
         A_VALUE_F(L_FETCHED_ROWS) := L_VALUE_F;
         A_VALUE_S(L_FETCHED_ROWS) := L_VALUE_S;
         A_CELL_TP(L_FETCHED_ROWS) := L_CELL_TP;
         A_POS_X(L_FETCHED_ROWS) := L_POS_X;
         A_POS_Y(L_FETCHED_ROWS) := L_POS_Y;
         A_ALIGN(L_FETCHED_ROWS) := L_ALIGN;
         A_WINSIZE_X(L_FETCHED_ROWS) := L_WINSIZE_X;
         A_WINSIZE_Y(L_FETCHED_ROWS) := L_WINSIZE_Y;
         A_IS_PROTECTED(L_FETCHED_ROWS) := L_IS_PROTECTED;
         A_MANDATORY(L_FETCHED_ROWS) := L_MANDATORY;
         A_HIDDEN(L_FETCHED_ROWS) := L_HIDDEN;
         A_UNIT(L_FETCHED_ROWS) := L_UNIT;
         A_FORMAT(L_FETCHED_ROWS) := L_FORMAT;
         A_COMPONENT(L_FETCHED_ROWS) := L_COMPONENT;
         A_EQ(L_FETCHED_ROWS) := L_EQ;
         A_EQ_VERSION(L_FETCHED_ROWS) := L_EQ_VERSION;
         A_CALC_TP(L_FETCHED_ROWS) := L_CALC_TP;
         A_CALC_FORMULA(L_FETCHED_ROWS) := L_CALC_FORMULA;
         A_VALID_CF(L_FETCHED_ROWS) := L_VALID_CF;
         A_MAX_X(L_FETCHED_ROWS) := L_MAX_X;
         A_MAX_Y(L_FETCHED_ROWS) := L_MAX_Y;
         A_MULTI_SELECT(L_FETCHED_ROWS) := L_MULTI_SELECT;
         IF P_GETSCMECELL_REANAL_FETCHED THEN
            A_REANALYSEDRESULT(L_FETCHED_ROWS) := '1';
         ELSE
            A_REANALYSEDRESULT(L_FETCHED_ROWS) := '0';
         END IF;                  
         IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
            L_RESULT := DBMS_SQL.FETCH_ROWS(P_GETSCMECELL_CURSOR);
         END IF;
      END LOOP;
      
      
      
      
      
      
      L_MODIFY_QUERY := FALSE;      
      L_CREATE_DETAILS := TRUE;
      IF L_FETCHED_ROWS > 0 OR               
         A_WHERE_CLAUSE = 'SELECTION' OR     
                                             
         (NVL(A_NEXT_ROWS,0) = 1 AND 
          A_WHERE_CLAUSE <> 'SELECTION') OR  
         L_CELLS_CREATION_CALLED THEN        
         
         L_CREATE_DETAILS := FALSE;
      END IF;
      
      IF NOT L_CREATE_DETAILS THEN
         
         IF P_GETSCMECELL_REANAL_FETCHED THEN
            
            L_LEAVE_LOOP := TRUE;
         ELSE
            
            
            IF A_WHERE_CLAUSE <> 'SELECTION' AND
               L_FETCHED_ROWS < A_NR_OF_ROWS AND
               (L_FETCH_WSME OR 
                (INSTR(UPPER(REPLACE(L_WHERE_CLAUSE, ' ', '')), 'REANALYSIS=')<>0)
               ) THEN
               L_LEAVE_LOOP := FALSE;
               L_MODIFY_QUERY := TRUE;
            ELSE
               L_LEAVE_LOOP := TRUE;
            END IF;
         END IF;
      ELSE
         
         
         
         L_CELLS_CREATION_CALLED := TRUE;
         
         
         IF INSTR(UPPER(L_WHERE_CLAUSE),'ORDER BY') <> 0 THEN
            L_SUB_WHERE_CLAUSE := SUBSTR(L_WHERE_CLAUSE,1,
                                         INSTR(UPPER(L_WHERE_CLAUSE),'ORDER BY')-1); 
         ELSE
            L_SUB_WHERE_CLAUSE := L_WHERE_CLAUSE; 
         END IF;
         IF L_FETCH_WSME THEN
            L_SQL_STRING := 'SELECT cl.sc, cl.pg, cl.pgnode, cl.pa, cl.panode, cl.me, cl.menode, cl.mt_version, cl.reanalysis, cl.exec_start_date, cl.ar '||
                            'FROM dd' || UNAPIGEN.P_DD || '.uvscme cl, utwsme ' || L_SUB_WHERE_CLAUSE;
         ELSE   
            L_SQL_STRING := 'SELECT cl.sc, cl.pg, cl.pgnode, cl.pa, cl.panode, cl.me, cl.menode, cl.mt_version, cl.reanalysis, cl.exec_start_date, cl.ar '||
                            'FROM dd' || UNAPIGEN.P_DD || '.uvscme cl ' || L_SUB_WHERE_CLAUSE;
         END IF;                
      
         L_RESULT := 0;
         BEGIN
            DBMS_SQL.PARSE(P_GETSCMECELL_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
            IF L_BIND_SCME_SELECTION THEN
               FOR L_X IN 1..UNAPIME.P_SELECTION_VAL_TAB.COUNT() LOOP
                  DBMS_SQL.BIND_VARIABLE(P_GETSCMECELL_CURSOR, ':col_val'||L_X , UNAPIME.P_SELECTION_VAL_TAB(L_X)); 
               END LOOP;
            ELSIF L_BIND_FIXED_SC_FLAG THEN
               DBMS_SQL.BIND_VARIABLE(P_GETSCMECELL_CURSOR, ':sc_val' , A_WHERE_CLAUSE); 
            ELSIF L_FETCH_WSME THEN
               DBMS_SQL.BIND_VARIABLE(P_GETSCMECELL_CURSOR, ':ws_val' , SUBSTR(A_WHERE_CLAUSE,5, LENGTH(A_WHERE_CLAUSE)-5)); 
            END IF;
            DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELL_CURSOR, 1, L_SC, 20);
            DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELL_CURSOR, 2, L_PG, 20);
            DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELL_CURSOR, 3, L_PGNODE);
            DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELL_CURSOR, 4, L_PA, 20);
            DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELL_CURSOR, 5, L_PANODE);
            DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELL_CURSOR, 6, L_ME, 20);
            DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELL_CURSOR, 7, L_MENODE);
            DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELL_CURSOR, 8, L_MT_VERSION, 20);
            DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELL_CURSOR, 9, L_REANALYSIS);
            DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELL_CURSOR, 10, L_EXEC_START_DATE);
            DBMS_SQL.DEFINE_COLUMN_CHAR(P_GETSCMECELL_CURSOR, 11, L_AR, 1);
            L_RESULT := DBMS_SQL.EXECUTE(P_GETSCMECELL_CURSOR);
            L_RESULT := DBMS_SQL.FETCH_ROWS(P_GETSCMECELL_CURSOR);            

         EXCEPTION
         WHEN OTHERS THEN
           NULL;
         END;

         L_FETCHED_METHODS := 0;
         LOOP
            
            
            
            IF L_RESULT = 0 THEN
               IF L_FETCHED_METHODS = 0 THEN
                  IF L_FETCH_WSME OR 
                     INSTR(UPPER(REPLACE(L_WHERE_CLAUSE, ' ', '')), 'REANALYSIS=')<>0 THEN
                     L_LEAVE_LOOP := FALSE;
                     L_MODIFY_QUERY := TRUE;
                     EXIT;
                  ELSE
                     UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NORECORDS;     
                     RAISE STPERROR;
                  END IF;                  
               ELSE
                  DBMS_SQL.CLOSE_CURSOR(P_GETSCMECELL_CURSOR);
                  EXIT;
               END IF;
            ELSE
               L_FETCHED_METHODS := L_FETCHED_METHODS + 1;
               DBMS_SQL.COLUMN_VALUE(P_GETSCMECELL_CURSOR, 1, L_SC);
               DBMS_SQL.COLUMN_VALUE(P_GETSCMECELL_CURSOR, 2, L_PG);
               DBMS_SQL.COLUMN_VALUE(P_GETSCMECELL_CURSOR, 3, L_PGNODE);
               DBMS_SQL.COLUMN_VALUE(P_GETSCMECELL_CURSOR, 4, L_PA);
               DBMS_SQL.COLUMN_VALUE(P_GETSCMECELL_CURSOR, 5, L_PANODE);
               DBMS_SQL.COLUMN_VALUE(P_GETSCMECELL_CURSOR, 6, L_ME);
               DBMS_SQL.COLUMN_VALUE(P_GETSCMECELL_CURSOR, 7, L_MENODE);
               DBMS_SQL.COLUMN_VALUE(P_GETSCMECELL_CURSOR, 8, L_MT_VERSION);
               DBMS_SQL.COLUMN_VALUE(P_GETSCMECELL_CURSOR, 9, L_REANALYSIS);
               DBMS_SQL.COLUMN_VALUE(P_GETSCMECELL_CURSOR, 10, L_EXEC_START_DATE);
               DBMS_SQL.COLUMN_VALUE_CHAR(P_GETSCMECELL_CURSOR, 11, L_AR);
               
               
               
               
               
               
               IF L_EXEC_START_DATE IS NULL AND L_AR='W' THEN
                  IF UNAPIGEN.P_USER <> UNAPIGEN.P_DBA_NAME THEN
                     
                     
                     
                     
                     
                     
                     L_SQL_STRING:=   'SELECT COUNT(el) '
                                    ||'FROM dd'||UNAPIGEN.P_DD||'.uvmtel '
                                    ||'WHERE mt = :l_me '
                                    ||'AND version = :l_mt_version';
                     BEGIN
                        EXECUTE IMMEDIATE L_SQL_STRING 
                        INTO L_COUNT_MTEL
                        USING L_ME, L_MT_VERSION;
                     EXCEPTION
                        WHEN NO_DATA_FOUND THEN
                           
                           NULL;
                     END;

                     IF L_COUNT_MTEL > 0 THEN
                        
                        L_SQL_STRING:=   'WITH EL_AUTHORIZED AS ( '
                                       || 'SELECT el '
                                       ||'FROM dd'||UNAPIGEN.P_DD||'.uvmtel '
                                       ||'WHERE mt = :l_me '
                                       ||'AND version = :l_mt_version '
                                       ||'INTERSECT '
                                       ||'(SELECT a.el '
                                       || 'FROM dd'||UNAPIGEN.P_DD||'.uvupusel a '
                                       || 'WHERE a.us = :p_user '
                                       || 'AND EXISTS (SELECT ''X'' '
                                       ||             'FROM utsystem b '
                                       ||             'WHERE b.setting_name = ''EL_QUALIFICATIONS'' '
                                       ||             'AND INSTR(b.setting_value,a.is_enabled) <> 0) '
                                       || 'UNION ALL '
                                       || 'SELECT :p_user '
                                       || 'FROM dual '
                                       ||')) '
                                       || 'SELECT COUNT(el) '
                                       || 'FROM EL_AUTHORIZED';
                        EXECUTE IMMEDIATE L_SQL_STRING 
                        INTO L_USELQUAL 
                        USING L_ME, L_MT_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER;

                        IF ( L_USELQUAL = 0 ) THEN
                           UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTAUTHORISED;
                           RAISE STPERROR;
                        END IF;
                     END IF;
                  END IF;
                  L_RET_CODE := UNAPIME2.CREATESCMEDETAILS(L_SC,L_PG,L_PGNODE,
                                                          L_PA,L_PANODE,L_ME,L_MENODE, L_REANALYSIS,'0');

                  IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
                     UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
                     RAISE STPERROR;
                  ELSE
                     L_LEAVE_LOOP := FALSE;
                  END IF;
                   
               ELSE
                  L_LEAVE_LOOP := FALSE;
               END IF;
            END IF;
            L_RESULT := DBMS_SQL.FETCH_ROWS(P_GETSCMECELL_CURSOR);
         END LOOP;
      END IF;
   END LOOP;

   IF NVL(A_NEXT_ROWS, 0) <> -1 THEN 
      IF L_FETCHED_ROWS = 0 THEN
         L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
         DBMS_SQL.CLOSE_CURSOR(P_GETSCMECELL_CURSOR);
         P_GETSCMECELL_CURSOR := NULL;
      ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
         DBMS_SQL.CLOSE_CURSOR(P_GETSCMECELL_CURSOR);
         P_GETSCMECELL_CURSOR := NULL;
         A_NR_OF_ROWS := L_FETCHED_ROWS;      
      ELSE   
         L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
         A_NR_OF_ROWS := L_FETCHED_ROWS;
      END IF;
   END IF;
   
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      IF DBMS_SQL.IS_OPEN(P_GETSCMECELL_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(P_GETSCMECELL_CURSOR);
      END IF;
      IF UNAPIGEN.P_TXN_ERROR = UNAPIGEN.DBERR_NORECORDS THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SUCCESS;
         L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
         L_RESULT := UNAPIGEN.ENDTXN;
         RETURN(L_RET_CODE);
      ELSE
         IF SQLCODE <> 1 THEN
            UNAPIGEN.LOGERROR('GetScMeCell', SQLERRM);
         END IF;
         RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'GetScMeCell'));
      END IF;
END GETSCMECELL;

FUNCTION GETSCMECELLVALUELIST
(A_SC                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PG                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PGNODE               OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_PA                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PANODE               OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_ME                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_MENODE               OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_REANALYSIS           OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_CELL                 OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_INDEX_X              OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_INDEX_Y              OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_VALUE_F              OUT     UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_VALUE_S              OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_SELECTED             OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_REANALYSEDRESULT     OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NR_OF_ROWS           IN OUT  NUMBER,                    
 A_WHERE_CLAUSE         IN      VARCHAR2,                  
 A_NEXT_ROWS            IN      NUMBER)                    
RETURN NUMBER IS

L_SC                             VARCHAR2(20);
L_PG                             VARCHAR2(20);
L_PGNODE                         NUMBER(9);
L_PA                             VARCHAR2(20);
L_PANODE                         NUMBER(9);
L_ME                             VARCHAR2(20);
L_MENODE                         NUMBER(9);
L_REANALYSIS                     NUMBER(3);
L_CELL                           VARCHAR2(20);
L_INDEX_X                        NUMBER(3);
L_INDEX_Y                        NUMBER(3);
L_VALUE_F                        FLOAT;
L_VALUE_S                        VARCHAR2(40);
L_SELECTED                       CHAR(1);
L_FETCH_WSME                     BOOLEAN;
L_LEAVE_LOOP                     BOOLEAN;
L_MODIFY_QUERY                   BOOLEAN;
L_BIND_SCME_SELECTION            BOOLEAN;
L_BIND_FIXED_SC_FLAG             BOOLEAN;

BEGIN

   L_BIND_SCME_SELECTION := FALSE;
   L_BIND_FIXED_SC_FLAG := FALSE;
   L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   IF NVL(A_NR_OF_ROWS, 0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   
   
   
   IF A_WHERE_CLAUSE <> 'SELECTION' THEN
      IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
         RETURN(UNAPIGEN.DBERR_NEXTROWS);
      END IF;

      
      IF A_NEXT_ROWS = -1 THEN
         IF P_GETSCMECELLVAL_CURSOR IS NOT NULL THEN
            DBMS_SQL.CLOSE_CURSOR(P_GETSCMECELLVAL_CURSOR);
            P_GETSCMECELLVAL_CURSOR := NULL;
            P_GETCELLVAL_REANAL_FETCHED := FALSE; 
         END IF;
         RETURN (UNAPIGEN.DBERR_SUCCESS);
      END IF;

      
      IF A_NEXT_ROWS = 1 THEN
         IF P_GETSCMECELLVAL_CURSOR IS NULL THEN
            RETURN(UNAPIGEN.DBERR_NOCURSOR);
         END IF;
      END IF;
   END IF;
   
   
               
   IF NVL(A_NEXT_ROWS, 0) = 0 THEN
      P_GETCELLVAL_REANAL_FETCHED := FALSE;
   END IF;

   
   L_FETCH_WSME := FALSE;
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
         RETURN(UNAPIGEN.DBERR_WHERECLAUSE);
      ELSIF A_WHERE_CLAUSE = 'SELECTION' THEN
         IF UNAPIME.P_SELECTION_CLAUSE IS NOT NULL THEN 
            IF INSTR(UPPER(UNAPIME.P_SELECTION_CLAUSE), ' WHERE ') <> 0 THEN       
               L_WHERE_CLAUSE := ','||UNAPIME.P_SELECTION_CLAUSE|| 
                                 ' AND a.sc=clls.sc AND a.pg=clls.pg AND a.pgnode=clls.pgnode ' ||
                                 'AND a.pa=clls.pa AND a.panode=clls.panode ' ||
                                 'AND a.me=clls.me AND a.menode=clls.menode ' ||
                                 'AND a.reanalysis=clls.reanalysis ' ||
                                 'ORDER BY clls.sc, clls.pgnode, clls.panode, clls.menode, clls.index_x, clls.index_y';
            ELSE
               L_WHERE_CLAUSE := ','||UNAPIME.P_SELECTION_CLAUSE||  
                                 ' WHERE a.sc=clls.sc AND a.pg=clls.pg AND a.pgnode=clls.pgnode ' ||
                                 'AND a.pa=clls.pa AND a.panode=clls.panode ' ||
                                 'AND a.me=clls.me AND a.menode=clls.menode ' ||
                                 'AND a.reanalysis=clls.reanalysis ' ||
                                 'ORDER BY clls.sc, clls.pgnode, clls.panode, clls.menode, clls.index_x, clls.index_y';
            END IF;
            L_BIND_SCME_SELECTION := TRUE;
         ELSE
            L_WHERE_CLAUSE := 'ORDER BY clls.sc,clls.pgnode,clls.panode,clls.menode,clls.index_x,clls.index_y'; 
         END IF;
      ELSIF REPLACE( SUBSTR(A_WHERE_CLAUSE, 1 , INSTR(A_WHERE_CLAUSE,'''')), ' ', '')='WS=''' THEN
         
         
         L_FETCH_WSME := TRUE;
   
         L_WHERE_CLAUSE := 'WHERE utwsme.ws = :ws_val ' || 
                           ' AND utwsme.sc=clls.sc AND utwsme.pg=clls.pg AND utwsme.pgnode=clls.pgnode ' ||
                           'AND utwsme.pa=clls.pa AND utwsme.panode=clls.panode ' ||
                           'AND utwsme.me=clls.me AND utwsme.menode=clls.menode ' ||
                           'AND utwsme.reanalysis=clls.reanalysis ' || 
                           'AND me.sc=clls.sc AND me.pg=clls.pg AND me.pgnode=clls.pgnode ' ||
                           'AND me.pa=clls.pa AND me.panode=clls.panode ' ||
                           'AND me.me=clls.me AND me.menode=clls.menode ' ;
                            
         IF INSTR(UPPER(A_WHERE_CLAUSE), 'ORDER BY')=0 THEN
            L_WHERE_CLAUSE := L_WHERE_CLAUSE||' ORDER BY clls.pgnode, clls.panode, clls.menode, clls.index_x, clls.index_y'; 
         END IF;    
      ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
         L_BIND_FIXED_SC_FLAG := TRUE;
         L_WHERE_CLAUSE := 'WHERE clls.sc = :sc_val ORDER BY clls.pgnode, clls.panode, clls.menode, clls.index_x, clls.index_y';
      ELSE
         L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
      END IF;
   ELSE
      
      
      IF REPLACE( SUBSTR(A_WHERE_CLAUSE, 1 , INSTR(A_WHERE_CLAUSE,'''')), ' ', '')='WS=''' THEN
         L_FETCH_WSME := TRUE;
      END IF;   
   END IF;

   L_MODIFY_QUERY:=FALSE;
   L_LEAVE_LOOP := FALSE;
   L_FETCHED_ROWS := 0;
   WHILE NOT L_LEAVE_LOOP LOOP

      IF NOT DBMS_SQL.IS_OPEN(P_GETSCMECELLVAL_CURSOR) OR
         L_MODIFY_QUERY THEN   
         IF L_FETCH_WSME THEN
            L_SQL_STRING := 'SELECT clls.sc, clls.pg, clls.pgnode, clls.pa, clls.panode, '||
                            'clls.me, clls.menode, clls.reanalysis, clls.cell , clls.index_x, '||
                            'clls.index_y, clls.value_f, clls.value_s, clls.selected ' ||
                            'FROM utscmecelllist clls, dd' || UNAPIGEN.P_DD || '.uvscme me, utwsme ' ||
                            L_WHERE_CLAUSE;
         ELSE
            L_SQL_STRING := 'SELECT clls.sc, clls.pg, clls.pgnode, clls.pa, clls.panode, '||
                            'clls.me, clls.menode, clls.reanalysis, clls.cell , clls.index_x, '||
                            'clls.index_y, clls.value_f, clls.value_s, clls.selected ';
            IF L_BIND_SCME_SELECTION AND
               INSTR(L_WHERE_CLAUSE, ',dd' || UNAPIGEN.P_DD || '.uvscme a')=1 THEN
               
               L_SQL_STRING := L_SQL_STRING || 
                               'FROM dd' || UNAPIGEN.P_DD || '.uvscme a, dd' || UNAPIGEN.P_DD || '.uvscmecelllist clls ' ||
                               SUBSTR(L_WHERE_CLAUSE, 1+LENGTH(',dd' || UNAPIGEN.P_DD || '.uvscme a'));               
            ELSE
               L_SQL_STRING := L_SQL_STRING ||
                               'FROM dd' || UNAPIGEN.P_DD || '.uvscmecelllist clls '|| L_WHERE_CLAUSE;
            END IF;
            
         END IF;                            
      END IF;

      IF NOT DBMS_SQL.IS_OPEN(P_GETSCMECELLVAL_CURSOR) THEN
         P_GETSCMECELLVAL_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;

      
      IF L_MODIFY_QUERY THEN
         IF INSTR(L_SQL_STRING, 'dd' || UNAPIGEN.P_DD || '.uvscmecelllist')>0 THEN
            L_SQL_STRING := REPLACE(L_SQL_STRING, 'dd' || UNAPIGEN.P_DD || '.uvscmecelllist', 'dd' || UNAPIGEN.P_DD || '.uvrscmecelllist');
         ELSE
            L_SQL_STRING := REPLACE(L_SQL_STRING, 'FROM utscmecelllist', 'FROM utrscmecelllist');
         END IF;      
         P_GETCELLVAL_REANAL_FETCHED := TRUE;
      END IF;
   
      
      IF NVL(A_NEXT_ROWS, 0) = 0  OR 
         L_MODIFY_QUERY THEN

			UNAPIAUT.ADDORACLECBOHINT (L_SQL_STRING) ;
         DBMS_SQL.PARSE(P_GETSCMECELLVAL_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         IF L_BIND_SCME_SELECTION THEN
            FOR L_X IN 1..UNAPIME.P_SELECTION_VAL_TAB.COUNT() LOOP
               DBMS_SQL.BIND_VARIABLE(P_GETSCMECELLVAL_CURSOR, ':col_val'||L_X , UNAPIME.P_SELECTION_VAL_TAB(L_X)); 
            END LOOP;
         ELSIF L_BIND_FIXED_SC_FLAG THEN
            DBMS_SQL.BIND_VARIABLE(P_GETSCMECELLVAL_CURSOR, ':sc_val' , A_WHERE_CLAUSE); 
         ELSIF L_FETCH_WSME THEN
            DBMS_SQL.BIND_VARIABLE(P_GETSCMECELLVAL_CURSOR, ':ws_val' , SUBSTR(A_WHERE_CLAUSE,5, LENGTH(A_WHERE_CLAUSE)-5)); 
         END IF;
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLVAL_CURSOR, 1, L_SC, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLVAL_CURSOR, 2, L_PG, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLVAL_CURSOR, 3, L_PGNODE);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLVAL_CURSOR, 4, L_PA, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLVAL_CURSOR, 5, L_PANODE);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLVAL_CURSOR, 6, L_ME, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLVAL_CURSOR, 7, L_MENODE);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLVAL_CURSOR, 8, L_REANALYSIS);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLVAL_CURSOR, 9, L_CELL, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLVAL_CURSOR, 10, L_INDEX_X);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLVAL_CURSOR, 11, L_INDEX_Y);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLVAL_CURSOR, 12, L_VALUE_F);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLVAL_CURSOR, 13, L_VALUE_S, 40);
         DBMS_SQL.DEFINE_COLUMN_CHAR(P_GETSCMECELLVAL_CURSOR, 14, L_SELECTED, 1);
         L_RESULT := DBMS_SQL.EXECUTE(P_GETSCMECELLVAL_CURSOR);
      END IF;

      L_RESULT := DBMS_SQL.FETCH_ROWS(P_GETSCMECELLVAL_CURSOR);

      LOOP

         EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLVAL_CURSOR, 1, L_SC);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLVAL_CURSOR, 2, L_PG);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLVAL_CURSOR, 3, L_PGNODE);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLVAL_CURSOR, 4, L_PA);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLVAL_CURSOR, 5, L_PANODE);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLVAL_CURSOR, 6, L_ME);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLVAL_CURSOR, 7, L_MENODE);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLVAL_CURSOR, 8, L_REANALYSIS);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLVAL_CURSOR, 9, L_CELL);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLVAL_CURSOR, 10, L_INDEX_X);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLVAL_CURSOR, 11, L_INDEX_Y);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLVAL_CURSOR, 12, L_VALUE_F);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLVAL_CURSOR, 13, L_VALUE_S);
         DBMS_SQL.COLUMN_VALUE_CHAR(P_GETSCMECELLVAL_CURSOR, 14, L_SELECTED);

         L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

         A_SC(L_FETCHED_ROWS) := L_SC;
         A_PG(L_FETCHED_ROWS) := L_PG;
         A_PGNODE(L_FETCHED_ROWS) := L_PGNODE;
         A_PA(L_FETCHED_ROWS) := L_PA;
         A_PANODE(L_FETCHED_ROWS) := L_PANODE;
         A_ME(L_FETCHED_ROWS) := L_ME;
         A_MENODE(L_FETCHED_ROWS) := L_MENODE;
         A_REANALYSIS(L_FETCHED_ROWS) := L_REANALYSIS;
         A_CELL(L_FETCHED_ROWS) := L_CELL;
         A_INDEX_X(L_FETCHED_ROWS) := L_INDEX_X;
         A_INDEX_Y(L_FETCHED_ROWS) := L_INDEX_Y;
         A_VALUE_F(L_FETCHED_ROWS) := L_VALUE_F;
         A_VALUE_S(L_FETCHED_ROWS) := L_VALUE_S;
         A_SELECTED(L_FETCHED_ROWS) := L_SELECTED;
         IF P_GETCELLVAL_REANAL_FETCHED THEN
            A_REANALYSEDRESULT(L_FETCHED_ROWS) := '1';
         ELSE
            A_REANALYSEDRESULT(L_FETCHED_ROWS) := '0';
         END IF;                  
         IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
            L_RESULT := DBMS_SQL.FETCH_ROWS(P_GETSCMECELLVAL_CURSOR);
         END IF;
         
      END LOOP;

      L_MODIFY_QUERY := FALSE;
      IF P_GETCELLVAL_REANAL_FETCHED THEN
         
         IF (L_FETCHED_ROWS = 0) THEN
            L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
            DBMS_SQL.CLOSE_CURSOR(P_GETSCMECELLVAL_CURSOR);
         ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
            L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
            A_NR_OF_ROWS := L_FETCHED_ROWS;
            DBMS_SQL.CLOSE_CURSOR(P_GETSCMECELLVAL_CURSOR);
         END IF;
         
         EXIT;         
      ELSE
         
         
         
         IF L_FETCHED_ROWS < A_NR_OF_ROWS AND 
            (L_FETCH_WSME OR 
             INSTR(UPPER(REPLACE(A_WHERE_CLAUSE, ' ', '')), 'REANALYSIS=')<>0) THEN
            L_MODIFY_QUERY := TRUE;
            
         ELSE
            IF L_FETCHED_ROWS = 0 THEN
               DBMS_SQL.CLOSE_CURSOR(P_GETSCMECELLVAL_CURSOR);
               L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
            ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
               A_NR_OF_ROWS := L_FETCHED_ROWS;
               DBMS_SQL.CLOSE_CURSOR(P_GETSCMECELLVAL_CURSOR);
               L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
            ELSIF L_FETCHED_ROWS = A_NR_OF_ROWS THEN
               A_NR_OF_ROWS := L_FETCHED_ROWS;
               L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
            END IF;
            EXIT;
         END IF;      
      END IF;
   END LOOP;
   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,
              'GetScMeCellValueList', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN(P_GETSCMECELLVAL_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(P_GETSCMECELLVAL_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETSCMECELLVALUELIST;

FUNCTION GETSCMECELLINPUT
(A_SC                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PG                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PGNODE               OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_PA                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PANODE               OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_ME                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_MENODE               OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_REANALYSIS           OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_CELL                 OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_INPUT_TP             OUT     UNAPIGEN.VC4_TABLE_TYPE,   
 A_INPUT_SOURCE         OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_INPUT_VERSION        OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_INPUT_PG             OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_INPUT_PGNODE         OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_INPUT_PP_VERSION     OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_INPUT_PA             OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_INPUT_PANODE         OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_INPUT_PR_VERSION     OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_INPUT_ME             OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_INPUT_MENODE         OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_INPUT_MT_VERSION     OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_INPUT_REANALYSIS     OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_REANALYSEDRESULT     OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NR_OF_ROWS           IN OUT  NUMBER,                    
 A_WHERE_CLAUSE         IN      VARCHAR2,                  
 A_NEXT_ROWS            IN      NUMBER)                    
RETURN NUMBER IS

L_SC                             VARCHAR2(20);
L_PG                             VARCHAR2(20);
L_PGNODE                         NUMBER(9);
L_PA                             VARCHAR2(20);
L_PANODE                         NUMBER(9);
L_ME                             VARCHAR2(20);
L_MENODE                         NUMBER(9);
L_REANALYSIS                     NUMBER(3);
L_CELL                           VARCHAR2(20);
L_INPUT_TP                       VARCHAR2(4);
L_INPUT_SOURCE                   VARCHAR2(20);
L_INPUT_VERSION                  VARCHAR2(20);
L_INPUT_PG                       VARCHAR2(20);
L_INPUT_PGNODE                   NUMBER(9);
L_INPUT_PP_VERSION               VARCHAR2(20);
L_INPUT_PA                       VARCHAR2(20);
L_INPUT_PANODE                   NUMBER(9);
L_INPUT_PR_VERSION               VARCHAR2(20);
L_INPUT_ME                       VARCHAR2(20);
L_INPUT_MENODE                   NUMBER(9);
L_INPUT_MT_VERSION               VARCHAR2(20);
L_INPUT_REANALYSIS               NUMBER(3);
L_FETCH_WSME                     BOOLEAN;
L_LEAVE_LOOP                     BOOLEAN;
L_MODIFY_QUERY                   BOOLEAN;
L_BIND_SCME_SELECTION            BOOLEAN;
L_BIND_FIXED_SC_FLAG             BOOLEAN;

BEGIN

   L_BIND_SCME_SELECTION := FALSE;
   L_BIND_FIXED_SC_FLAG := FALSE;
   IF NVL(A_NR_OF_ROWS, 0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;
   
   
   
   
   IF A_WHERE_CLAUSE <> 'SELECTION' THEN
      IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
         RETURN(UNAPIGEN.DBERR_NEXTROWS);
      END IF;
   
      
      IF A_NEXT_ROWS = -1 THEN
         IF P_GETSCMECELLINPUT_CURSOR IS NOT NULL THEN
            DBMS_SQL.CLOSE_CURSOR(P_GETSCMECELLINPUT_CURSOR);
            P_GETSCMECELLINPUT_CURSOR := NULL;
            P_GETCELLINPUT_REANAL_FETCHED := FALSE; 
         END IF;
         RETURN (UNAPIGEN.DBERR_SUCCESS);
      END IF;
   
      
      IF A_NEXT_ROWS = 1 THEN
         IF P_GETSCMECELLINPUT_CURSOR IS NULL THEN
            RETURN(UNAPIGEN.DBERR_NOCURSOR);
         END IF;
      END IF;   
   END IF;

   
               
   IF NVL(A_NEXT_ROWS, 0) = 0 THEN
      P_GETCELLINPUT_REANAL_FETCHED := FALSE;
   END IF;
   
   
   L_FETCH_WSME := FALSE;
   IF NVL(A_NEXT_ROWS,0) = 0 OR
      A_WHERE_CLAUSE = 'SELECTION' THEN
      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
         RETURN(UNAPIGEN.DBERR_WHERECLAUSE);
      ELSIF A_WHERE_CLAUSE = 'SELECTION' THEN
         IF UNAPIME.P_SELECTION_CLAUSE IS NOT NULL THEN 
            IF INSTR(UPPER(UNAPIME.P_SELECTION_CLAUSE), ' WHERE ') <> 0 THEN       
               L_WHERE_CLAUSE := ','||UNAPIME.P_SELECTION_CLAUSE|| 
                                 ' AND a.sc=ci.sc AND a.pg=ci.pg AND a.pgnode=ci.pgnode ' ||
                                 'AND a.pa=ci.pa AND a.panode=ci.panode ' ||
                                 'AND a.me=ci.me AND a.menode=ci.menode ' ||
                                 'AND a.reanalysis=ci.reanalysis ' ||
                                 'ORDER BY ci.sc, ci.pgnode, ci.panode, ci.menode';
            ELSE
               L_WHERE_CLAUSE := ','||UNAPIME.P_SELECTION_CLAUSE||  
                                 ' WHERE a.sc=ci.sc AND a.pg=ci.pg AND a.pgnode=ci.pgnode ' ||
                                 'AND a.pa=ci.pa AND a.panode=ci.panode ' ||
                                 'AND a.me=ci.me AND a.menode=ci.menode ' ||
                                 'AND a.reanalysis=ci.reanalysis ' ||
                                 'ORDER BY ci.sc, ci.pgnode, ci.panode, ci.menode';
            END IF;
            L_BIND_SCME_SELECTION := TRUE;
         ELSE
            L_WHERE_CLAUSE := 'ORDER BY ci.sc,ci.pgnode,ci.panode,ci.menode'; 
         END IF;
      ELSIF REPLACE( SUBSTR(A_WHERE_CLAUSE, 1 , INSTR(A_WHERE_CLAUSE,'''')), ' ', '')='WS=''' THEN
         
         
         L_FETCH_WSME := TRUE;

         L_WHERE_CLAUSE := 'WHERE utwsme.ws = :ws_val '|| 
                           ' AND utwsme.sc=me.sc AND utwsme.pg=me.pg AND utwsme.pgnode=me.pgnode ' ||
                           'AND utwsme.pa=me.pa AND utwsme.panode=me.panode ' ||
                           'AND utwsme.me=me.me AND utwsme.menode=me.menode ' ||
                           'AND utwsme.reanalysis=me.reanalysis ' || 
                           'AND me.sc=ci.sc AND me.pg=ci.pg AND me.pgnode=ci.pgnode ' ||
                           'AND me.pa=ci.pa AND me.panode=ci.panode ' ||
                           'AND me.me=ci.me AND me.menode=ci.menode ' ;

         IF INSTR(UPPER(A_WHERE_CLAUSE), 'ORDER BY')=0 THEN
            L_WHERE_CLAUSE := L_WHERE_CLAUSE||' ORDER BY ci.sc, ci.pgnode, ci.panode, ci.menode'; 
         END IF;    
      ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
         L_BIND_FIXED_SC_FLAG := TRUE;
         L_WHERE_CLAUSE := 'WHERE ci.sc = :sc_val ORDER BY ci.pgnode, ci.panode, ci.menode';
      ELSE
         L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
      END IF;
   ELSE
      
      
      IF REPLACE( SUBSTR(A_WHERE_CLAUSE, 1 , INSTR(A_WHERE_CLAUSE,'''')), ' ', '')='WS=''' THEN
         L_FETCH_WSME := TRUE;
      END IF;   
   END IF;

   L_MODIFY_QUERY:=FALSE;
   L_LEAVE_LOOP := FALSE;
   L_FETCHED_ROWS := 0;
   WHILE NOT L_LEAVE_LOOP LOOP

      IF NOT DBMS_SQL.IS_OPEN(P_GETSCMECELLINPUT_CURSOR) OR
         L_MODIFY_QUERY THEN
         IF L_FETCH_WSME THEN
         L_SQL_STRING := 'SELECT ci.sc, ci.pg, ci.pgnode, ci.pa, ci.panode, ci.me, ci.menode, ci.reanalysis, '||
                         'ci.cell, ci.input_tp, ci.input_source, ci.input_version, ' ||
                         'ci.input_pg, ci.input_pgnode, ci.input_pp_version, ci.input_pa, ci.input_panode, ci.input_pr_version,'||
                         'ci.input_me, ci.input_menode, ci.input_mt_version, ci.input_reanalysis '||                      
                         'FROM utscmecellinput ci, dd' || UNAPIGEN.P_DD || '.uvscme me, utwsme ' ||
                         L_WHERE_CLAUSE;

         ELSE
            L_SQL_STRING := 'SELECT ci.sc, ci.pg, ci.pgnode, ci.pa, ci.panode, ci.me, ci.menode, ci.reanalysis, '||
                            'ci.cell, ci.input_tp, ci.input_source, ci.input_version, ' ||
                            'ci.input_pg, ci.input_pgnode, ci.input_pp_version, ci.input_pa, ci.input_panode, ci.input_pr_version,'||
                            'ci.input_me, ci.input_menode, ci.input_mt_version, ci.input_reanalysis ';
                         
            IF L_BIND_SCME_SELECTION AND
               INSTR(L_WHERE_CLAUSE, ',dd' || UNAPIGEN.P_DD || '.uvscme a')=1 THEN
               
               L_SQL_STRING := L_SQL_STRING || 
                               'FROM dd' || UNAPIGEN.P_DD || '.uvscme a, dd' || UNAPIGEN.P_DD || '.uvscmecellinput ci ' ||
                               SUBSTR(L_WHERE_CLAUSE, 1+LENGTH(',dd' || UNAPIGEN.P_DD || '.uvscme a'));               
            ELSE
               L_SQL_STRING := L_SQL_STRING ||
                               'FROM dd' || UNAPIGEN.P_DD || '.uvscmecellinput ci ' || L_WHERE_CLAUSE;
            END IF;
         END IF;
      END IF;
      
      
      IF NOT DBMS_SQL.IS_OPEN(P_GETSCMECELLINPUT_CURSOR) THEN
         P_GETSCMECELLINPUT_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;
      
      
      IF L_MODIFY_QUERY THEN
         IF INSTR(L_SQL_STRING, 'dd' || UNAPIGEN.P_DD || '.uvscmecellinput')>0 THEN
            L_SQL_STRING := REPLACE(L_SQL_STRING, 'dd' || UNAPIGEN.P_DD || '.uvscmecellinput', 'dd' || UNAPIGEN.P_DD || '.uvrscmecellinput');
         ELSE
            L_SQL_STRING := REPLACE(L_SQL_STRING, 'FROM utscmecellinput', 'FROM utrscmecellinput');
         END IF;
         P_GETCELLINPUT_REANAL_FETCHED := TRUE;
      END IF;

      
      IF NVL(A_NEXT_ROWS, 0) = 0  OR 
         L_MODIFY_QUERY THEN

			UNAPIAUT.ADDORACLECBOHINT (L_SQL_STRING) ;
         DBMS_SQL.PARSE(P_GETSCMECELLINPUT_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         IF L_BIND_SCME_SELECTION THEN
            FOR L_X IN 1..UNAPIME.P_SELECTION_VAL_TAB.COUNT() LOOP
               DBMS_SQL.BIND_VARIABLE(P_GETSCMECELLINPUT_CURSOR, ':col_val'||L_X , UNAPIME.P_SELECTION_VAL_TAB(L_X)); 
            END LOOP;
         ELSIF L_BIND_FIXED_SC_FLAG THEN
            DBMS_SQL.BIND_VARIABLE(P_GETSCMECELLINPUT_CURSOR, ':sc_val' , A_WHERE_CLAUSE); 
         ELSIF L_FETCH_WSME THEN
            DBMS_SQL.BIND_VARIABLE(P_GETSCMECELLINPUT_CURSOR, ':ws_val' , SUBSTR(A_WHERE_CLAUSE,5, LENGTH(A_WHERE_CLAUSE)-5)); 
         END IF;

         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLINPUT_CURSOR, 1, L_SC, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLINPUT_CURSOR, 2, L_PG, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLINPUT_CURSOR, 3, L_PGNODE);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLINPUT_CURSOR, 4, L_PA, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLINPUT_CURSOR, 5, L_PANODE);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLINPUT_CURSOR, 6, L_ME, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLINPUT_CURSOR, 7, L_MENODE);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLINPUT_CURSOR, 8, L_REANALYSIS);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLINPUT_CURSOR, 9, L_CELL, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLINPUT_CURSOR, 10, L_INPUT_TP, 4);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLINPUT_CURSOR, 11, L_INPUT_SOURCE, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLINPUT_CURSOR, 12, L_INPUT_VERSION, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLINPUT_CURSOR, 13, L_INPUT_PG, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLINPUT_CURSOR, 14, L_INPUT_PGNODE);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLINPUT_CURSOR, 15, L_INPUT_PP_VERSION, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLINPUT_CURSOR, 16, L_INPUT_PA, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLINPUT_CURSOR, 17, L_INPUT_PANODE);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLINPUT_CURSOR, 18, L_INPUT_PR_VERSION, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLINPUT_CURSOR, 19, L_INPUT_ME, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLINPUT_CURSOR, 20, L_INPUT_MENODE);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLINPUT_CURSOR, 21, L_INPUT_MT_VERSION, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLINPUT_CURSOR, 22, L_INPUT_REANALYSIS);
         L_RESULT := DBMS_SQL.EXECUTE(P_GETSCMECELLINPUT_CURSOR);
      END IF;

      L_RESULT := DBMS_SQL.FETCH_ROWS(P_GETSCMECELLINPUT_CURSOR);

      LOOP

         EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLINPUT_CURSOR, 1, L_SC);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLINPUT_CURSOR, 2, L_PG);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLINPUT_CURSOR, 3, L_PGNODE);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLINPUT_CURSOR, 4, L_PA);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLINPUT_CURSOR, 5, L_PANODE);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLINPUT_CURSOR, 6, L_ME);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLINPUT_CURSOR, 7, L_MENODE);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLINPUT_CURSOR, 8, L_REANALYSIS);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLINPUT_CURSOR, 9, L_CELL);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLINPUT_CURSOR, 10, L_INPUT_TP);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLINPUT_CURSOR, 11, L_INPUT_SOURCE);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLINPUT_CURSOR, 12, L_INPUT_VERSION);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLINPUT_CURSOR, 13, L_INPUT_PG);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLINPUT_CURSOR, 14, L_INPUT_PGNODE);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLINPUT_CURSOR, 15, L_INPUT_PP_VERSION);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLINPUT_CURSOR, 16, L_INPUT_PA);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLINPUT_CURSOR, 17, L_INPUT_PANODE);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLINPUT_CURSOR, 18, L_INPUT_PR_VERSION);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLINPUT_CURSOR, 19, L_INPUT_ME);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLINPUT_CURSOR, 20, L_INPUT_MENODE);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLINPUT_CURSOR, 21, L_INPUT_MT_VERSION);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLINPUT_CURSOR, 22, L_INPUT_REANALYSIS);

         L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
         A_SC(L_FETCHED_ROWS) := L_SC;
         A_PG(L_FETCHED_ROWS) := L_PG;
         A_PGNODE(L_FETCHED_ROWS) := L_PGNODE;
         A_PA(L_FETCHED_ROWS) := L_PA;
         A_PANODE(L_FETCHED_ROWS) := L_PANODE;
         A_ME(L_FETCHED_ROWS) := L_ME;
         A_MENODE(L_FETCHED_ROWS) := L_MENODE;
         A_REANALYSIS(L_FETCHED_ROWS) := L_REANALYSIS;
         A_CELL(L_FETCHED_ROWS) := L_CELL;
         A_INPUT_TP(L_FETCHED_ROWS) := L_INPUT_TP;
         A_INPUT_SOURCE(L_FETCHED_ROWS) := L_INPUT_SOURCE;
         A_INPUT_VERSION(L_FETCHED_ROWS) := L_INPUT_VERSION;
         A_INPUT_PG(L_FETCHED_ROWS) := L_INPUT_PG;
         A_INPUT_PGNODE(L_FETCHED_ROWS) := L_INPUT_PGNODE;
         A_INPUT_PP_VERSION(L_FETCHED_ROWS) := L_INPUT_PP_VERSION;
         A_INPUT_PA(L_FETCHED_ROWS) := L_INPUT_PA;
         A_INPUT_PANODE(L_FETCHED_ROWS) := L_INPUT_PANODE;
         A_INPUT_PR_VERSION(L_FETCHED_ROWS) := L_INPUT_PR_VERSION;
         A_INPUT_ME(L_FETCHED_ROWS) := L_INPUT_ME;
         A_INPUT_MENODE(L_FETCHED_ROWS) := L_INPUT_MENODE;
         A_INPUT_MT_VERSION(L_FETCHED_ROWS) := L_INPUT_MT_VERSION;
         A_INPUT_REANALYSIS(L_FETCHED_ROWS) := L_INPUT_REANALYSIS;
         IF P_GETCELLINPUT_REANAL_FETCHED THEN
            A_REANALYSEDRESULT(L_FETCHED_ROWS) := '1';
         ELSE
            A_REANALYSEDRESULT(L_FETCHED_ROWS) := '0';
         END IF;
         IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
            L_RESULT := DBMS_SQL.FETCH_ROWS(P_GETSCMECELLINPUT_CURSOR);
         END IF;
      END LOOP;

      L_MODIFY_QUERY := FALSE;
      IF P_GETCELLINPUT_REANAL_FETCHED THEN
         IF A_WHERE_CLAUSE = 'SELECTION' OR 
            (A_WHERE_CLAUSE <> 'SELECTION' AND NVL(A_NEXT_ROWS, 0) <> -1) THEN 
            IF L_FETCHED_ROWS = 0 THEN
               L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
               DBMS_SQL.CLOSE_CURSOR(P_GETSCMECELLINPUT_CURSOR);
            ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
               L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
               A_NR_OF_ROWS := L_FETCHED_ROWS;
               DBMS_SQL.CLOSE_CURSOR(P_GETSCMECELLINPUT_CURSOR);
            ELSE   
               L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
               A_NR_OF_ROWS := L_FETCHED_ROWS;
            END IF;                   
         ELSE   
            L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
            A_NR_OF_ROWS := L_FETCHED_ROWS;
         END IF;
         
         EXIT;         
      ELSE
         
         
         
         IF L_FETCHED_ROWS < A_NR_OF_ROWS AND 
            (L_FETCH_WSME OR 
             INSTR(UPPER(REPLACE(A_WHERE_CLAUSE, ' ', '')), 'REANALYSIS=')<>0) THEN
            L_MODIFY_QUERY := TRUE;
            
         ELSE
            IF L_FETCHED_ROWS = 0 THEN
               DBMS_SQL.CLOSE_CURSOR(P_GETSCMECELLINPUT_CURSOR);
               L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
            ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
               A_NR_OF_ROWS := L_FETCHED_ROWS;
               DBMS_SQL.CLOSE_CURSOR(P_GETSCMECELLINPUT_CURSOR);
               L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
            ELSIF L_FETCHED_ROWS = A_NR_OF_ROWS THEN
               A_NR_OF_ROWS := L_FETCHED_ROWS;
               L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
            END IF;
            EXIT;
         END IF;
      END IF;      
   END LOOP;
   
   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
              'GetScMeCellInput', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN(P_GETSCMECELLINPUT_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(P_GETSCMECELLINPUT_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETSCMECELLINPUT;

FUNCTION GETSCMECELLOUTPUT
(A_SC                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PG                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PGNODE               OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_PA                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PANODE               OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_ME                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_MENODE               OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_REANALYSIS           OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_CELL                 OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SAVE_TP              OUT     UNAPIGEN.VC4_TABLE_TYPE,   
 A_SAVE_PG              OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SAVE_PGNODE          OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_SAVE_PP_VERSION      OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SAVE_PA              OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SAVE_PANODE          OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_SAVE_PR_VERSION      OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SAVE_ME              OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SAVE_MENODE          OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_SAVE_MT_VERSION      OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SAVE_EQ              OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SAVE_EQ_VERSION      OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SAVE_ID              OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SAVE_IDNODE          OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_SAVE_REANALYSIS      OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_CREATE_NEW           OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_REANALYSEDRESULT     OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NR_OF_ROWS           IN OUT  NUMBER,                    
 A_WHERE_CLAUSE         IN      VARCHAR2,                  
 A_NEXT_ROWS            IN      NUMBER)                    
RETURN NUMBER IS

L_SC                             VARCHAR2(20);
L_PG                             VARCHAR2(20);
L_PGNODE                         NUMBER(9);
L_PA                             VARCHAR2(20);
L_PANODE                         NUMBER(9);
L_ME                             VARCHAR2(20);
L_MENODE                         NUMBER(9);
L_REANALYSIS                     NUMBER(3);
L_CELL                           VARCHAR2(20);
L_SAVE_TP                        VARCHAR2(4);
L_SAVE_PG                        VARCHAR2(20);
L_SAVE_PGNODE                    NUMBER(9);
L_SAVE_PP_VERSION                VARCHAR2(20);
L_SAVE_PA                        VARCHAR2(20);
L_SAVE_PANODE                    NUMBER(9);
L_SAVE_PR_VERSION                VARCHAR2(20);
L_SAVE_ME                        VARCHAR2(20);
L_SAVE_MENODE                    NUMBER(9);
L_SAVE_MT_VERSION                VARCHAR2(20);
L_SAVE_EQ                        VARCHAR2(20);
L_SAVE_EQ_VERSION                VARCHAR2(20);
L_SAVE_ID                        VARCHAR2(20);
L_SAVE_IDNODE                    NUMBER(9);
L_SAVE_REANALYSIS                NUMBER(3);
L_CREATE_NEW                     CHAR(1);
L_FETCH_WSME                     BOOLEAN;
L_LEAVE_LOOP                     BOOLEAN;
L_MODIFY_QUERY                   BOOLEAN;
L_BIND_SCME_SELECTION            BOOLEAN;
L_BIND_FIXED_SC_FLAG             BOOLEAN;

BEGIN

   L_BIND_SCME_SELECTION := FALSE;
   L_BIND_FIXED_SC_FLAG := FALSE;
   IF NVL(A_NR_OF_ROWS, 0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   
   
   
   IF A_WHERE_CLAUSE <> 'SELECTION' THEN
      IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
         RETURN(UNAPIGEN.DBERR_NEXTROWS);
      END IF;
   
      
      IF A_NEXT_ROWS = -1 THEN
         IF P_GETSCMECELLOUTPUT_CURSOR IS NOT NULL THEN
            DBMS_SQL.CLOSE_CURSOR(P_GETSCMECELLOUTPUT_CURSOR);
            P_GETSCMECELLOUTPUT_CURSOR := NULL;
            P_GETCELLOUTPUT_REANAL_FETCHED := FALSE;             
         END IF;
         RETURN (UNAPIGEN.DBERR_SUCCESS);
      END IF;
   
      
      IF A_NEXT_ROWS = 1 THEN
         IF P_GETCELLOUTPUT_REANAL_FETCHED IS NULL THEN
            RETURN(UNAPIGEN.DBERR_NOCURSOR);
         END IF;
      END IF;   
   END IF;

   
               
   IF NVL(A_NEXT_ROWS, 0) = 0 THEN
      P_GETCELLOUTPUT_REANAL_FETCHED := FALSE;
   END IF;

   
   L_FETCH_WSME := FALSE;
   IF NVL(A_NEXT_ROWS,0) = 0 OR
      A_WHERE_CLAUSE = 'SELECTION' THEN

      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
         RETURN(UNAPIGEN.DBERR_WHERECLAUSE);
      ELSIF A_WHERE_CLAUSE = 'SELECTION' THEN
         IF UNAPIME.P_SELECTION_CLAUSE IS NOT NULL THEN 
            IF INSTR(UPPER(UNAPIME.P_SELECTION_CLAUSE), ' WHERE ') <> 0 THEN       
               L_WHERE_CLAUSE := ','||UNAPIME.P_SELECTION_CLAUSE|| 
                                 ' AND a.sc=co.sc AND a.pg=co.pg AND a.pgnode=co.pgnode ' ||
                                 'AND a.pa=co.pa AND a.panode=co.panode ' ||
                                 'AND a.me=co.me AND a.menode=co.menode ' ||
                                 'ORDER BY co.sc, co.pgnode, co.panode, co.menode';
            ELSE
               L_WHERE_CLAUSE := ','||UNAPIME.P_SELECTION_CLAUSE||  
                                 ' WHERE a.sc=co.sc AND a.pg=co.pg AND a.pgnode=co.pgnode ' ||
                                 'AND a.pa=co.pa AND a.panode=co.panode ' ||
                                 'AND a.me=co.me AND a.menode=co.menode ' ||
                                 'ORDER BY co.sc, co.pgnode, co.panode, co.menode';
            END IF;
            L_BIND_SCME_SELECTION := TRUE;
         ELSE
            L_WHERE_CLAUSE := 'ORDER BY co.sc,co.pgnode,co.panode,co.menode'; 
         END IF;
      ELSIF REPLACE( SUBSTR(A_WHERE_CLAUSE, 1 , INSTR(A_WHERE_CLAUSE,'''')), ' ', '')='WS=''' THEN
         
         
         L_FETCH_WSME := TRUE;

         L_WHERE_CLAUSE := 'WHERE utwsme.ws = :ws_val '|| 
                           ' AND utwsme.sc=me.sc AND utwsme.pg=me.pg AND utwsme.pgnode=me.pgnode ' ||
                           'AND utwsme.pa=me.pa AND utwsme.panode=me.panode ' ||
                           'AND utwsme.me=me.me AND utwsme.menode=me.menode ' ||
                           'AND utwsme.reanalysis=me.reanalysis ' || 
                           'AND me.sc=co.sc AND me.pg=co.pg AND me.pgnode=co.pgnode ' ||
                           'AND me.pa=co.pa AND me.panode=co.panode ' ||
                           'AND me.me=co.me AND me.menode=co.menode ' ;
                           
         IF INSTR(UPPER(A_WHERE_CLAUSE), 'ORDER BY')=0 THEN
            L_WHERE_CLAUSE := L_WHERE_CLAUSE||' ORDER BY co.sc, co.pgnode, co.panode, co.menode'; 
         END IF;   
      ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
         L_BIND_FIXED_SC_FLAG := TRUE;
         L_WHERE_CLAUSE := 'WHERE co.sc = :sc_val ORDER BY co.pgnode, co.panode, co.menode';
      ELSE
         L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
      END IF;
   ELSE
      
      
      IF REPLACE( SUBSTR(A_WHERE_CLAUSE, 1 , INSTR(A_WHERE_CLAUSE,'''')), ' ', '')='WS=''' THEN
         L_FETCH_WSME := TRUE;
      END IF;   
   END IF;
   
   L_MODIFY_QUERY:=FALSE;
   L_LEAVE_LOOP := FALSE;
   L_FETCHED_ROWS := 0;
   WHILE NOT L_LEAVE_LOOP LOOP

      
      IF NOT DBMS_SQL.IS_OPEN(P_GETSCMECELLOUTPUT_CURSOR) OR 
         L_MODIFY_QUERY THEN
         IF L_FETCH_WSME THEN
            L_SQL_STRING := 'SELECT co.sc, co.pg, co.pgnode, co.pa, co.panode, co.me, co.menode, co.reanalysis, co.cell, '||
                            'co.save_tp, co.save_pg, co.save_pgnode, co.save_pp_version, co.save_pa, co.save_panode, co.save_pr_version,'||
                            'co.save_me, co.save_menode, co.save_mt_version, co.save_eq, co.save_eq_version, co.save_id, co.save_idnode, co.save_reanalysis, co.create_new ' ||
                            'FROM utscmecelloutput co, dd' || UNAPIGEN.P_DD || '.uvscme me, utwsme ' ||
                            L_WHERE_CLAUSE;
         ELSE
            L_SQL_STRING := 'SELECT co.sc, co.pg, co.pgnode, co.pa, co.panode, co.me, co.menode, co.reanalysis, co.cell, '||
                            'co.save_tp, co.save_pg, co.save_pgnode, co.save_pp_version, co.save_pa, co.save_panode, co.save_pr_version,'||
                            'co.save_me, co.save_menode, co.save_mt_version, co.save_eq, co.save_eq_version, co.save_id, co.save_idnode, co.save_reanalysis, co.create_new ';
            IF L_BIND_SCME_SELECTION AND
               INSTR(L_WHERE_CLAUSE, ',dd' || UNAPIGEN.P_DD || '.uvscme a')=1 THEN
               
               L_SQL_STRING := L_SQL_STRING || 
                               'FROM dd' || UNAPIGEN.P_DD || '.uvscme a, dd' || UNAPIGEN.P_DD || '.uvscmecelloutput co ' ||
                               SUBSTR(L_WHERE_CLAUSE, 1+LENGTH(',dd' || UNAPIGEN.P_DD || '.uvscme a'));               
            ELSE                            
               L_SQL_STRING := L_SQL_STRING ||
                               'FROM dd' || UNAPIGEN.P_DD || '.uvscmecelloutput co ' ||
                               L_WHERE_CLAUSE;
            END IF;  
         END IF;  
      END IF;      
      
      IF NOT DBMS_SQL.IS_OPEN(P_GETSCMECELLOUTPUT_CURSOR) THEN
         P_GETSCMECELLOUTPUT_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;

      
      IF L_MODIFY_QUERY THEN
         IF INSTR(L_SQL_STRING, 'dd' || UNAPIGEN.P_DD || '.uvscmecelloutput')>0 THEN
            L_SQL_STRING := REPLACE(L_SQL_STRING, 'dd' || UNAPIGEN.P_DD || '.uvscmecelloutput', 'dd' || UNAPIGEN.P_DD || '.uvrscmecelloutput');
         ELSE
            L_SQL_STRING := REPLACE(L_SQL_STRING, 'FROM utscmecelloutput', 'FROM utrscmecelloutput');
         END IF;
         P_GETCELLOUTPUT_REANAL_FETCHED := TRUE;
      END IF;
      
      
      IF NVL(A_NEXT_ROWS, 0) = 0  OR 
         L_MODIFY_QUERY THEN
      
			UNAPIAUT.ADDORACLECBOHINT (L_SQL_STRING) ;
         DBMS_SQL.PARSE(P_GETSCMECELLOUTPUT_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         IF L_BIND_SCME_SELECTION THEN
            FOR L_X IN 1..UNAPIME.P_SELECTION_VAL_TAB.COUNT() LOOP
               DBMS_SQL.BIND_VARIABLE(P_GETSCMECELLOUTPUT_CURSOR, ':col_val'||L_X , UNAPIME.P_SELECTION_VAL_TAB(L_X)); 
            END LOOP;
         ELSIF L_BIND_FIXED_SC_FLAG THEN
            DBMS_SQL.BIND_VARIABLE(P_GETSCMECELLOUTPUT_CURSOR, ':sc_val' , A_WHERE_CLAUSE); 
         ELSIF L_FETCH_WSME THEN
            DBMS_SQL.BIND_VARIABLE(P_GETSCMECELLOUTPUT_CURSOR, ':ws_val' , SUBSTR(A_WHERE_CLAUSE,5, LENGTH(A_WHERE_CLAUSE)-5)); 
         END IF;
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLOUTPUT_CURSOR, 1, L_SC, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLOUTPUT_CURSOR, 2, L_PG, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLOUTPUT_CURSOR, 3, L_PGNODE);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLOUTPUT_CURSOR, 4, L_PA, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLOUTPUT_CURSOR, 5, L_PANODE);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLOUTPUT_CURSOR, 6, L_ME, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLOUTPUT_CURSOR, 7, L_MENODE);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLOUTPUT_CURSOR, 8, L_REANALYSIS);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLOUTPUT_CURSOR, 9, L_CELL, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLOUTPUT_CURSOR, 10, L_SAVE_TP, 4);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLOUTPUT_CURSOR, 11, L_SAVE_PG, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLOUTPUT_CURSOR, 12, L_SAVE_PGNODE);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLOUTPUT_CURSOR, 13, L_SAVE_PP_VERSION, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLOUTPUT_CURSOR, 14, L_SAVE_PA, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLOUTPUT_CURSOR, 15, L_SAVE_PANODE);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLOUTPUT_CURSOR, 16, L_SAVE_PR_VERSION, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLOUTPUT_CURSOR, 17, L_SAVE_ME, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLOUTPUT_CURSOR, 18, L_SAVE_MENODE);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLOUTPUT_CURSOR, 19, L_SAVE_MT_VERSION, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLOUTPUT_CURSOR, 20, L_SAVE_EQ, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLOUTPUT_CURSOR, 21, L_SAVE_EQ_VERSION, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLOUTPUT_CURSOR, 22, L_SAVE_ID, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLOUTPUT_CURSOR, 23, L_SAVE_IDNODE);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLOUTPUT_CURSOR, 24, L_SAVE_REANALYSIS);
         DBMS_SQL.DEFINE_COLUMN_CHAR(P_GETSCMECELLOUTPUT_CURSOR, 25, L_CREATE_NEW, 1);

         L_RESULT := DBMS_SQL.EXECUTE(P_GETSCMECELLOUTPUT_CURSOR);
      END IF;

      L_RESULT := DBMS_SQL.FETCH_ROWS(P_GETSCMECELLOUTPUT_CURSOR);

      LOOP
         EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLOUTPUT_CURSOR, 1, L_SC);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLOUTPUT_CURSOR, 2, L_PG);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLOUTPUT_CURSOR, 3, L_PGNODE);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLOUTPUT_CURSOR, 4, L_PA);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLOUTPUT_CURSOR, 5, L_PANODE);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLOUTPUT_CURSOR, 6, L_ME);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLOUTPUT_CURSOR, 7, L_MENODE);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLOUTPUT_CURSOR, 8, L_REANALYSIS);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLOUTPUT_CURSOR, 9, L_CELL);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLOUTPUT_CURSOR, 10, L_SAVE_TP);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLOUTPUT_CURSOR, 11, L_SAVE_PG);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLOUTPUT_CURSOR, 12, L_SAVE_PGNODE);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLOUTPUT_CURSOR, 13, L_SAVE_PP_VERSION);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLOUTPUT_CURSOR, 14, L_SAVE_PA);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLOUTPUT_CURSOR, 15, L_SAVE_PANODE);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLOUTPUT_CURSOR, 16, L_SAVE_PR_VERSION);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLOUTPUT_CURSOR, 17, L_SAVE_ME);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLOUTPUT_CURSOR, 18, L_SAVE_MENODE);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLOUTPUT_CURSOR, 19, L_SAVE_MT_VERSION);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLOUTPUT_CURSOR, 20, L_SAVE_EQ);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLOUTPUT_CURSOR, 21, L_SAVE_EQ_VERSION);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLOUTPUT_CURSOR, 22, L_SAVE_ID);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLOUTPUT_CURSOR, 23, L_SAVE_IDNODE);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLOUTPUT_CURSOR, 24, L_SAVE_REANALYSIS);
         DBMS_SQL.COLUMN_VALUE_CHAR(P_GETSCMECELLOUTPUT_CURSOR, 25, L_CREATE_NEW);

         L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
         A_SC(L_FETCHED_ROWS) := L_SC;
         A_PG(L_FETCHED_ROWS) := L_PG;
         A_PGNODE(L_FETCHED_ROWS) := L_PGNODE;
         A_PA(L_FETCHED_ROWS) := L_PA;
         A_PANODE(L_FETCHED_ROWS) := L_PANODE;
         A_ME(L_FETCHED_ROWS) := L_ME;
         A_MENODE(L_FETCHED_ROWS) := L_MENODE;
         A_REANALYSIS(L_FETCHED_ROWS) := L_REANALYSIS;
         A_CELL(L_FETCHED_ROWS) := L_CELL;
         A_SAVE_TP(L_FETCHED_ROWS) := L_SAVE_TP;
         A_SAVE_PG(L_FETCHED_ROWS) := L_SAVE_PG;
         A_SAVE_PGNODE(L_FETCHED_ROWS) := L_SAVE_PGNODE;
         A_SAVE_PP_VERSION(L_FETCHED_ROWS) := L_SAVE_PP_VERSION;
         A_SAVE_PA(L_FETCHED_ROWS) := L_SAVE_PA;
         A_SAVE_PANODE(L_FETCHED_ROWS) := L_SAVE_PANODE;
         A_SAVE_PR_VERSION(L_FETCHED_ROWS) := L_SAVE_PR_VERSION;
         A_SAVE_ME(L_FETCHED_ROWS) := L_SAVE_ME;
         A_SAVE_MENODE(L_FETCHED_ROWS) := L_SAVE_MENODE;
         A_SAVE_MT_VERSION(L_FETCHED_ROWS) := L_SAVE_MT_VERSION;
         A_SAVE_EQ(L_FETCHED_ROWS) := L_SAVE_EQ;
         A_SAVE_EQ_VERSION(L_FETCHED_ROWS) := L_SAVE_EQ_VERSION;
         A_SAVE_ID(L_FETCHED_ROWS) := L_SAVE_ID;
         A_SAVE_IDNODE(L_FETCHED_ROWS) := L_SAVE_IDNODE;
         A_SAVE_REANALYSIS(L_FETCHED_ROWS) := L_SAVE_REANALYSIS;
         A_CREATE_NEW(L_FETCHED_ROWS) := L_CREATE_NEW;
         IF P_GETCELLOUTPUT_REANAL_FETCHED THEN
            A_REANALYSEDRESULT(L_FETCHED_ROWS) := '1';
         ELSE
            A_REANALYSEDRESULT(L_FETCHED_ROWS) := '0';
         END IF;
         IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
            L_RESULT := DBMS_SQL.FETCH_ROWS(P_GETSCMECELLOUTPUT_CURSOR);
         END IF;
      END LOOP;

      L_MODIFY_QUERY := FALSE;
      IF P_GETCELLOUTPUT_REANAL_FETCHED THEN
         IF A_WHERE_CLAUSE = 'SELECTION' OR 
            (A_WHERE_CLAUSE <> 'SELECTION' AND NVL(A_NEXT_ROWS, 0) <> -1) THEN 
            IF L_FETCHED_ROWS = 0 THEN
               L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
               DBMS_SQL.CLOSE_CURSOR(P_GETSCMECELLOUTPUT_CURSOR);
            ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
               L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
               A_NR_OF_ROWS := L_FETCHED_ROWS;
               DBMS_SQL.CLOSE_CURSOR(P_GETSCMECELLOUTPUT_CURSOR);
            ELSE   
               L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
               A_NR_OF_ROWS := L_FETCHED_ROWS;
            END IF;
         ELSE   
            L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
            A_NR_OF_ROWS := L_FETCHED_ROWS;
         END IF;
         
         EXIT;         
      ELSE
         
         
         
         IF L_FETCHED_ROWS < A_NR_OF_ROWS AND 
            (L_FETCH_WSME OR 
             INSTR(UPPER(REPLACE(A_WHERE_CLAUSE, ' ', '')), 'REANALYSIS=')<>0) THEN
            L_MODIFY_QUERY := TRUE;
            
         ELSE
            IF L_FETCHED_ROWS = 0 THEN
               DBMS_SQL.CLOSE_CURSOR(P_GETSCMECELLOUTPUT_CURSOR);
               L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
            ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
               A_NR_OF_ROWS := L_FETCHED_ROWS;
               DBMS_SQL.CLOSE_CURSOR(P_GETSCMECELLOUTPUT_CURSOR);
               L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
            ELSIF L_FETCHED_ROWS = A_NR_OF_ROWS THEN
               A_NR_OF_ROWS := L_FETCHED_ROWS;
               L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
            END IF;
            EXIT;
         END IF;
      END IF;
   END LOOP; 
   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetScMeCellOutput', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN(P_GETSCMECELLOUTPUT_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(P_GETSCMECELLOUTPUT_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETSCMECELLOUTPUT;

FUNCTION GETSCMECELLLISTOUTPUT
(A_SC                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PG                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PGNODE               OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_PA                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PANODE               OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_ME                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_MENODE               OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_REANALYSIS           OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_CELL                 OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_INDEX_Y              OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_SAVE_TP              OUT     UNAPIGEN.VC4_TABLE_TYPE,   
 A_SAVE_PG              OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SAVE_PGNODE          OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_SAVE_PP_VERSION      OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SAVE_PA              OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SAVE_PANODE          OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_SAVE_PR_VERSION      OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SAVE_ME              OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SAVE_MENODE          OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_SAVE_MT_VERSION      OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SAVE_EQ              OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SAVE_EQ_VERSION      OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SAVE_ID              OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SAVE_IDNODE          OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_SAVE_REANALYSIS      OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_CREATE_NEW           OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_REANALYSEDRESULT     OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NR_OF_ROWS           IN OUT  NUMBER,                    
 A_WHERE_CLAUSE         IN      VARCHAR2,                  
 A_NEXT_ROWS            IN      NUMBER)                    
RETURN NUMBER IS

L_SC                             VARCHAR2(20);
L_PG                             VARCHAR2(20);
L_PGNODE                         NUMBER(9);
L_PA                             VARCHAR2(20);
L_PANODE                         NUMBER(9);
L_ME                             VARCHAR2(20);
L_MENODE                         NUMBER(9);
L_REANALYSIS                     NUMBER(3);
L_CELL                           VARCHAR2(20);
L_INDEX_Y                        NUMBER(3);
L_SAVE_TP                        VARCHAR2(4);
L_SAVE_PG                        VARCHAR2(20);
L_SAVE_PGNODE                    NUMBER(9);
L_SAVE_PP_VERSION                VARCHAR2(20);
L_SAVE_PA                        VARCHAR2(20);
L_SAVE_PANODE                    NUMBER(9);
L_SAVE_PR_VERSION                VARCHAR2(20);
L_SAVE_ME                        VARCHAR2(20);
L_SAVE_MENODE                    NUMBER(9);
L_SAVE_MT_VERSION                VARCHAR2(20);
L_SAVE_EQ                        VARCHAR2(20);
L_SAVE_EQ_VERSION                VARCHAR2(20);
L_SAVE_ID                        VARCHAR2(20);
L_SAVE_IDNODE                    NUMBER(9);
L_SAVE_REANALYSIS                NUMBER(9);
L_CREATE_NEW                     CHAR(1);
L_LEAVE_LOOP                     BOOLEAN;
L_MODIFY_QUERY                   BOOLEAN;
L_BIND_SCME_SELECTION            BOOLEAN;
L_BIND_FIXED_SC_FLAG             BOOLEAN;

BEGIN

   L_BIND_SCME_SELECTION := FALSE;
   L_BIND_FIXED_SC_FLAG := FALSE;
   IF NVL(A_NR_OF_ROWS, 0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   
   
   
   IF A_WHERE_CLAUSE <> 'SELECTION' THEN

      IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
         RETURN(UNAPIGEN.DBERR_NEXTROWS);
      END IF;
   
      
      IF A_NEXT_ROWS = -1 THEN
         IF P_GETSCMECELLLISTOUTPUT_CURSOR IS NOT NULL THEN
            DBMS_SQL.CLOSE_CURSOR(P_GETSCMECELLLISTOUTPUT_CURSOR);
            P_GETSCMECELLLISTOUTPUT_CURSOR := NULL;
            P_GETLISTOUTPUT_REANAL_FETCHED := FALSE;             
         END IF;
         RETURN (UNAPIGEN.DBERR_SUCCESS);
      END IF;
   
      
      IF A_NEXT_ROWS = 1 THEN
         IF P_GETSCMECELLLISTOUTPUT_CURSOR IS NULL THEN
            RETURN(UNAPIGEN.DBERR_NOCURSOR);
         END IF;
      END IF;
   
   END IF;

   
               
   IF NVL(A_NEXT_ROWS, 0) = 0 THEN
      P_GETLISTOUTPUT_REANAL_FETCHED := FALSE;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 OR
      A_WHERE_CLAUSE = 'SELECTION' THEN

      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
         RETURN(UNAPIGEN.DBERR_WHERECLAUSE);
      ELSIF A_WHERE_CLAUSE = 'SELECTION' THEN
         IF UNAPIME.P_SELECTION_CLAUSE IS NOT NULL THEN 
            IF INSTR(UPPER(UNAPIME.P_SELECTION_CLAUSE), ' WHERE ') <> 0 THEN       
               L_WHERE_CLAUSE := ','||UNAPIME.P_SELECTION_CLAUSE|| 
                                 ' AND a.sc=cllo.sc AND a.pg=cllo.pg AND a.pgnode=cllo.pgnode ' ||
                                 'AND a.pa=cllo.pa AND a.panode=cllo.panode ' ||
                                 'AND a.me=cllo.me AND a.menode=cllo.menode ' ||
                                 'ORDER BY cllo.sc, cllo.pgnode, cllo.panode, cllo.menode, cllo.index_y';
            ELSE
               L_WHERE_CLAUSE := ','||UNAPIME.P_SELECTION_CLAUSE||  
                                 ' WHERE a.sc=cllo.sc AND a.pg=cllo.pg AND a.pgnode=cllo.pgnode ' ||
                                 'AND a.pa=cllo.pa AND a.panode=cllo.panode ' ||
                                 'AND a.me=cllo.me AND a.menode=cllo.menode ' ||
                                 'ORDER BY cllo.sc, cllo.pgnode, cllo.panode, cllo.menode, cllo.index_y';
            END IF;
            L_BIND_SCME_SELECTION := TRUE;
         ELSE
            L_WHERE_CLAUSE := 'ORDER BY cllo.sc,cllo.pgnode,cllo.panode,cllo.menode, cllo.index_y'; 
         END IF;
      ELSIF
         UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
         L_BIND_FIXED_SC_FLAG := TRUE;
         L_WHERE_CLAUSE := 'WHERE cllo.sc = :sc_val ORDER BY cllo.pgnode, cllo.panode, cllo.menode, cllo.index_y';
      ELSE
         L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
      END IF;
   END IF;

   L_MODIFY_QUERY:=FALSE;
   L_LEAVE_LOOP := FALSE;
   L_FETCHED_ROWS := 0;
   WHILE NOT L_LEAVE_LOOP LOOP

      IF NOT DBMS_SQL.IS_OPEN(P_GETSCMECELLLISTOUTPUT_CURSOR) OR
         L_MODIFY_QUERY THEN
   
         L_SQL_STRING := 'SELECT cllo.sc, cllo.pg, cllo.pgnode, cllo.pa, cllo.panode, cllo.me, cllo.menode, cllo.reanalysis, cllo.cell, '||
                         'cllo.index_y, cllo.save_tp, cllo.save_pg, cllo.save_pgnode, cllo.save_pp_version, cllo.save_pa, cllo.save_panode, cllo.save_pr_version, '||
                         'cllo.save_me, cllo.save_menode, cllo.save_mt_version, cllo.save_eq, cllo.save_eq_version, cllo.save_id, cllo.save_idnode, cllo.save_reanalysis, cllo.create_new ';
                         
         IF L_BIND_SCME_SELECTION AND
            INSTR(L_WHERE_CLAUSE, ',dd' || UNAPIGEN.P_DD || '.uvscme a')=1 THEN
            
            L_SQL_STRING := L_SQL_STRING || 
                            'FROM dd' || UNAPIGEN.P_DD || '.uvscme a, dd' || UNAPIGEN.P_DD || '.uvscmecelllistoutput cllo ' ||
                            SUBSTR(L_WHERE_CLAUSE, 1+LENGTH(',dd' || UNAPIGEN.P_DD || '.uvscme a'));               
         ELSE                            
            L_SQL_STRING := L_SQL_STRING ||
                      'FROM dd' || UNAPIGEN.P_DD || '.uvscmecelllistoutput cllo ' ||
                      L_WHERE_CLAUSE;
         END IF;
      END IF;
      
      IF NOT DBMS_SQL.IS_OPEN(P_GETSCMECELLLISTOUTPUT_CURSOR) THEN
         P_GETSCMECELLLISTOUTPUT_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;
      
      
      IF L_MODIFY_QUERY THEN
         L_SQL_STRING := REPLACE(L_SQL_STRING, 'dd' || UNAPIGEN.P_DD || '.uvscmecelllistoutput', 'dd' || UNAPIGEN.P_DD || '.uvrscmecelllistoutput');
         P_GETLISTOUTPUT_REANAL_FETCHED := TRUE;
      END IF;

      
      IF NVL(A_NEXT_ROWS, 0) = 0  OR 
         L_MODIFY_QUERY THEN

         DBMS_SQL.PARSE(P_GETSCMECELLLISTOUTPUT_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         IF L_BIND_SCME_SELECTION THEN
            FOR L_X IN 1..UNAPIME.P_SELECTION_VAL_TAB.COUNT() LOOP
               DBMS_SQL.BIND_VARIABLE(P_GETSCMECELLLISTOUTPUT_CURSOR, ':col_val'||L_X , UNAPIME.P_SELECTION_VAL_TAB(L_X)); 
            END LOOP;
         ELSIF L_BIND_FIXED_SC_FLAG THEN
            DBMS_SQL.BIND_VARIABLE(P_GETSCMECELLLISTOUTPUT_CURSOR, ':sc_val' , A_WHERE_CLAUSE); 
         END IF;
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLLISTOUTPUT_CURSOR, 1, L_SC, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLLISTOUTPUT_CURSOR, 2, L_PG, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLLISTOUTPUT_CURSOR, 3, L_PGNODE);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLLISTOUTPUT_CURSOR, 4, L_PA, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLLISTOUTPUT_CURSOR, 5, L_PANODE);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLLISTOUTPUT_CURSOR, 6, L_ME, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLLISTOUTPUT_CURSOR, 7, L_MENODE);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLLISTOUTPUT_CURSOR, 8, L_REANALYSIS);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLLISTOUTPUT_CURSOR, 9, L_CELL, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLLISTOUTPUT_CURSOR, 10, L_INDEX_Y);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLLISTOUTPUT_CURSOR, 11, L_SAVE_TP, 4);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLLISTOUTPUT_CURSOR, 12, L_SAVE_PG, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLLISTOUTPUT_CURSOR, 13, L_SAVE_PGNODE);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLLISTOUTPUT_CURSOR, 14, L_SAVE_PP_VERSION, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLLISTOUTPUT_CURSOR, 15, L_SAVE_PA, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLLISTOUTPUT_CURSOR, 16, L_SAVE_PANODE);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLLISTOUTPUT_CURSOR, 17, L_SAVE_PR_VERSION, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLLISTOUTPUT_CURSOR, 18, L_SAVE_ME, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLLISTOUTPUT_CURSOR, 19, L_SAVE_MENODE);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLLISTOUTPUT_CURSOR, 20, L_SAVE_MT_VERSION, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLLISTOUTPUT_CURSOR, 21, L_SAVE_EQ, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLLISTOUTPUT_CURSOR, 22, L_SAVE_EQ_VERSION, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLLISTOUTPUT_CURSOR, 23, L_SAVE_ID, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLLISTOUTPUT_CURSOR, 24, L_SAVE_IDNODE);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECELLLISTOUTPUT_CURSOR, 25, L_SAVE_REANALYSIS);
         DBMS_SQL.DEFINE_COLUMN_CHAR(P_GETSCMECELLLISTOUTPUT_CURSOR, 26, L_CREATE_NEW, 1);

         L_RESULT := DBMS_SQL.EXECUTE(P_GETSCMECELLLISTOUTPUT_CURSOR);
      END IF;

      L_RESULT := DBMS_SQL.FETCH_ROWS(P_GETSCMECELLLISTOUTPUT_CURSOR);

      LOOP
         EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLLISTOUTPUT_CURSOR, 1, L_SC);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLLISTOUTPUT_CURSOR, 2, L_PG);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLLISTOUTPUT_CURSOR, 3, L_PGNODE);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLLISTOUTPUT_CURSOR, 4, L_PA);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLLISTOUTPUT_CURSOR, 5, L_PANODE);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLLISTOUTPUT_CURSOR, 6, L_ME);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLLISTOUTPUT_CURSOR, 7, L_MENODE);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLLISTOUTPUT_CURSOR, 8, L_REANALYSIS);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLLISTOUTPUT_CURSOR, 9, L_CELL);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLLISTOUTPUT_CURSOR, 10, L_INDEX_Y);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLLISTOUTPUT_CURSOR, 11, L_SAVE_TP);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLLISTOUTPUT_CURSOR, 12, L_SAVE_PG);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLLISTOUTPUT_CURSOR, 13, L_SAVE_PGNODE);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLLISTOUTPUT_CURSOR, 14, L_SAVE_PP_VERSION);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLLISTOUTPUT_CURSOR, 15, L_SAVE_PA);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLLISTOUTPUT_CURSOR, 16, L_SAVE_PANODE);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLLISTOUTPUT_CURSOR, 17, L_SAVE_PR_VERSION);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLLISTOUTPUT_CURSOR, 18, L_SAVE_ME);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLLISTOUTPUT_CURSOR, 19, L_SAVE_MENODE);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLLISTOUTPUT_CURSOR, 20, L_SAVE_MT_VERSION);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLLISTOUTPUT_CURSOR, 21, L_SAVE_EQ);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLLISTOUTPUT_CURSOR, 22, L_SAVE_EQ_VERSION);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLLISTOUTPUT_CURSOR, 23, L_SAVE_ID);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLLISTOUTPUT_CURSOR, 24, L_SAVE_IDNODE);
         DBMS_SQL.COLUMN_VALUE(P_GETSCMECELLLISTOUTPUT_CURSOR, 25, L_SAVE_REANALYSIS);
         DBMS_SQL.COLUMN_VALUE_CHAR(P_GETSCMECELLLISTOUTPUT_CURSOR, 26, L_CREATE_NEW);

         L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
         A_SC(L_FETCHED_ROWS) := L_SC;
         A_PG(L_FETCHED_ROWS) := L_PG;
         A_PGNODE(L_FETCHED_ROWS) := L_PGNODE;
         A_PA(L_FETCHED_ROWS) := L_PA;
         A_PANODE(L_FETCHED_ROWS) := L_PANODE;
         A_ME(L_FETCHED_ROWS) := L_ME;
         A_MENODE(L_FETCHED_ROWS) := L_MENODE;
         A_REANALYSIS(L_FETCHED_ROWS) := L_REANALYSIS;
         A_CELL(L_FETCHED_ROWS) := L_CELL;
         A_INDEX_Y(L_FETCHED_ROWS) := L_INDEX_Y;
         A_SAVE_TP(L_FETCHED_ROWS) := L_SAVE_TP;
         A_SAVE_PG(L_FETCHED_ROWS) := L_SAVE_PG;
         A_SAVE_PGNODE(L_FETCHED_ROWS) := L_SAVE_PGNODE;
         A_SAVE_PP_VERSION(L_FETCHED_ROWS) := L_SAVE_PP_VERSION;
         A_SAVE_PA(L_FETCHED_ROWS) := L_SAVE_PA;
         A_SAVE_PANODE(L_FETCHED_ROWS) := L_SAVE_PANODE;
         A_SAVE_PR_VERSION(L_FETCHED_ROWS) := L_SAVE_PR_VERSION;
         A_SAVE_ME(L_FETCHED_ROWS) := L_SAVE_ME;
         A_SAVE_MENODE(L_FETCHED_ROWS) := L_SAVE_MENODE;
         A_SAVE_MT_VERSION(L_FETCHED_ROWS) := L_SAVE_MT_VERSION;
         A_SAVE_EQ(L_FETCHED_ROWS) := L_SAVE_EQ;
         A_SAVE_EQ_VERSION(L_FETCHED_ROWS) := L_SAVE_EQ_VERSION;
         A_SAVE_ID(L_FETCHED_ROWS) := L_SAVE_ID;
         A_SAVE_IDNODE(L_FETCHED_ROWS) := L_SAVE_IDNODE;
         A_SAVE_REANALYSIS(L_FETCHED_ROWS) := L_SAVE_REANALYSIS;
         A_CREATE_NEW(L_FETCHED_ROWS) := L_CREATE_NEW;
         IF P_GETLISTOUTPUT_REANAL_FETCHED THEN
            A_REANALYSEDRESULT(L_FETCHED_ROWS) := '1';
         ELSE
            A_REANALYSEDRESULT(L_FETCHED_ROWS) := '0';
         END IF;

         IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
            L_RESULT := DBMS_SQL.FETCH_ROWS(P_GETSCMECELLLISTOUTPUT_CURSOR);
         END IF;

      END LOOP;

      L_MODIFY_QUERY := FALSE;
      IF P_GETLISTOUTPUT_REANAL_FETCHED THEN
         IF A_WHERE_CLAUSE = 'SELECTION' OR 
            (A_WHERE_CLAUSE <> 'SELECTION' AND NVL(A_NEXT_ROWS, 0) <> -1) THEN 
            IF L_FETCHED_ROWS = 0 THEN
               L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
               DBMS_SQL.CLOSE_CURSOR(P_GETSCMECELLLISTOUTPUT_CURSOR);
            ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
               L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
               A_NR_OF_ROWS := L_FETCHED_ROWS;
               DBMS_SQL.CLOSE_CURSOR(P_GETSCMECELLLISTOUTPUT_CURSOR);
            ELSE   
               L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
               A_NR_OF_ROWS := L_FETCHED_ROWS;
            END IF;
         ELSE   
            L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
            A_NR_OF_ROWS := L_FETCHED_ROWS;
         END IF;
         
         EXIT;         
      ELSE
         
         
         
         IF INSTR(UPPER(REPLACE(A_WHERE_CLAUSE, ' ', '')), 'REANALYSIS=')<>0 THEN
            L_MODIFY_QUERY := TRUE;
            
         ELSE
            IF L_FETCHED_ROWS = 0 THEN
               DBMS_SQL.CLOSE_CURSOR(P_GETSCMECELLLISTOUTPUT_CURSOR);
               L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
            ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
               A_NR_OF_ROWS := L_FETCHED_ROWS;
               DBMS_SQL.CLOSE_CURSOR(P_GETSCMECELLLISTOUTPUT_CURSOR);
               L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
            ELSIF L_FETCHED_ROWS = A_NR_OF_ROWS THEN
               A_NR_OF_ROWS := L_FETCHED_ROWS;
               L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
            END IF;
            EXIT;
         END IF;
      END IF;      
   END LOOP;
   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetScMeCellListOutput', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN(P_GETSCMECELLLISTOUTPUT_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(P_GETSCMECELLLISTOUTPUT_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETSCMECELLLISTOUTPUT;

FUNCTION GETSCREMETHOD
(A_SC                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PG                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PGNODE               OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_PA                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PANODE               OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_ME                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_MENODE               OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_REANALYSIS           OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_MT_VERSION           OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_DESCRIPTION          OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_VALUE_F              OUT     UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_VALUE_S              OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_UNIT                 OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_EXEC_START_DATE      OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_EXEC_END_DATE        OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_EXECUTOR             OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_LAB                  OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_EQ                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_EQ_VERSION           OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PLANNED_EXECUTOR     OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PLANNED_EQ           OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PLANNED_EQ_VERSION   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_MANUALLY_ENTERED     OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ALLOW_ADD            OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ASSIGN_DATE          OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_ASSIGNED_BY          OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_MANUALLY_ADDED       OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_DELAY                OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_DELAY_UNIT           OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_FORMAT               OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_ACCURACY             OUT     UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_REAL_COST            OUT     UNAPIGEN.VC40_TABLE_TYPE, 
 A_REAL_TIME            OUT     UNAPIGEN.VC40_TABLE_TYPE, 
 A_CALIBRATION          OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_CONFIRM_COMPLETE     OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_AUTORECALC           OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ME_RESULT_EDITABLE   OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NEXT_CELL            OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SOP                  OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_SOP_VERSION          OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PLAUS_LOW            OUT     UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_PLAUS_HIGH           OUT     UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_WINSIZE_X            OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_WINSIZE_Y            OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_ME_CLASS             OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_LOG_HS               OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LOG_HS_DETAILS       OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ALLOW_MODIFY         OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ACTIVE               OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LC                   OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_LC_VERSION           OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SS                   OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_REANALYSEDRESULT     OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NR_OF_ROWS           IN OUT  NUMBER,                    
 A_WHERE_CLAUSE         IN      VARCHAR2)                  
RETURN NUMBER IS
BEGIN

      RETURN(UNAPIME2.GETSCREMETHOD(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, A_ME, A_MENODE, A_REANALYSIS,
             A_MT_VERSION, A_DESCRIPTION, A_VALUE_F, A_VALUE_S, A_UNIT, A_EXEC_START_DATE,
             A_EXEC_END_DATE, A_EXECUTOR, A_LAB, A_EQ, A_EQ_VERSION, A_PLANNED_EXECUTOR, A_PLANNED_EQ, A_PLANNED_EQ_VERSION,
             A_MANUALLY_ENTERED, A_ALLOW_ADD, A_ASSIGN_DATE, A_ASSIGNED_BY,
             A_MANUALLY_ADDED, A_DELAY, A_DELAY_UNIT, A_FORMAT, 
             A_ACCURACY, A_REAL_COST, A_REAL_TIME, A_CALIBRATION, A_CONFIRM_COMPLETE,
             A_AUTORECALC, A_ME_RESULT_EDITABLE, A_NEXT_CELL, A_SOP, A_SOP_VERSION, A_PLAUS_LOW, A_PLAUS_HIGH,
             A_WINSIZE_X, A_WINSIZE_Y, A_ME_CLASS, A_LOG_HS, A_LOG_HS_DETAILS,
             A_ALLOW_MODIFY, A_ACTIVE, A_LC, A_LC_VERSION, A_SS, A_REANALYSEDRESULT, 
             A_NR_OF_ROWS, A_WHERE_CLAUSE));

END GETSCREMETHOD;

FUNCTION SAVESCMERESULT
(A_ALARMS_HANDLED   IN     CHAR,                      
 A_SC               IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PG               IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PGNODE           IN     UNAPIGEN.LONG_TABLE_TYPE,  
 A_PA               IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PANODE           IN     UNAPIGEN.LONG_TABLE_TYPE,  
 A_ME               IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_MENODE           IN     UNAPIGEN.LONG_TABLE_TYPE,  
 A_REANALYSIS       IN OUT UNAPIGEN.NUM_TABLE_TYPE,   
 A_VALUE_F          IN     UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_VALUE_S          IN     UNAPIGEN.VC40_TABLE_TYPE,  
 A_UNIT             IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_FORMAT           IN     UNAPIGEN.VC40_TABLE_TYPE,  
 A_EXEC_END_DATE    IN OUT UNAPIGEN.DATE_TABLE_TYPE,  
 A_EXECUTOR         IN OUT UNAPIGEN.VC20_TABLE_TYPE,  
 A_LAB              IN OUT UNAPIGEN.VC20_TABLE_TYPE,  
 A_EQ               IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_EQ_VERSION       IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_MANUALLY_ENTERED IN     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_REAL_COST        IN     UNAPIGEN.VC40_TABLE_TYPE,  
 A_REAL_TIME        IN     UNAPIGEN.VC40_TABLE_TYPE,  
 A_MODIFY_FLAG      IN OUT UNAPIGEN.NUM_TABLE_TYPE,   
 A_NR_OF_ROWS       IN     NUMBER,                    
 A_MODIFY_REASON    IN     VARCHAR2)                  
RETURN NUMBER IS
BEGIN

      RETURN(UNAPIME3.SAVESCMERESULT(
                         A_ALARMS_HANDLED, A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, A_ME, A_MENODE, A_REANALYSIS,
                         A_VALUE_F, A_VALUE_S, A_UNIT, A_FORMAT, A_EXEC_END_DATE, A_EXECUTOR, A_LAB, A_EQ, A_EQ_VERSION,
                         A_MANUALLY_ENTERED, A_REAL_COST, A_REAL_TIME, A_MODIFY_FLAG,
                         A_NR_OF_ROWS, A_MODIFY_REASON));

END SAVESCMERESULT;

FUNCTION SAVESCMECELL
(A_COMPLETED        IN     CHAR,                       
 A_SC               IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PG               IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PGNODE           IN     UNAPIGEN.LONG_TABLE_TYPE,   
 A_PA               IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PANODE           IN     UNAPIGEN.LONG_TABLE_TYPE,   
 A_ME               IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_MENODE           IN     UNAPIGEN.LONG_TABLE_TYPE,   
 A_REANALYSIS       IN OUT UNAPIGEN.NUM_TABLE_TYPE,    
 A_CELL             IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_CELLNODE         IN     UNAPIGEN.LONG_TABLE_TYPE,   
 A_DSP_TITLE        IN     UNAPIGEN.VC40_TABLE_TYPE,   
 A_VALUE_F          IN     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_VALUE_S          IN     UNAPIGEN.VC40_TABLE_TYPE,   
 A_CELL_TP          IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_POS_X            IN     UNAPIGEN.NUM_TABLE_TYPE,    
 A_POS_Y            IN     UNAPIGEN.NUM_TABLE_TYPE,    
 A_ALIGN            IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_WINSIZE_X        IN     UNAPIGEN.NUM_TABLE_TYPE,    
 A_WINSIZE_Y        IN     UNAPIGEN.NUM_TABLE_TYPE,    
 A_IS_PROTECTED     IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_MANDATORY        IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_HIDDEN           IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_UNIT             IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_FORMAT           IN     UNAPIGEN.VC40_TABLE_TYPE,   
 A_EQ               IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_EQ_VERSION       IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_COMPONENT        IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_CALC_TP          IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_CALC_FORMULA     IN     UNAPIGEN.VC2000_TABLE_TYPE, 
 A_VALID_CF         IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_MAX_X            IN     UNAPIGEN.NUM_TABLE_TYPE,    
 A_MAX_Y            IN     UNAPIGEN.NUM_TABLE_TYPE,    
 A_MULTI_SELECT     IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_MODIFY_FLAG      IN OUT UNAPIGEN.NUM_TABLE_TYPE,    
 A_NR_OF_ROWS       IN     NUMBER,                     
 A_NEXT_ROWS        IN     NUMBER)                     
RETURN NUMBER IS
BEGIN

      RETURN(UNAPIME3.SAVESCMECELL(
                         A_COMPLETED,A_SC,A_PG, A_PGNODE, A_PA, A_PANODE, A_ME, A_MENODE, A_REANALYSIS,
                         A_CELL, A_CELLNODE, A_DSP_TITLE, A_VALUE_F, A_VALUE_S, A_CELL_TP,
                         A_POS_X, A_POS_Y, A_ALIGN, A_WINSIZE_X, A_WINSIZE_Y, 
                         A_IS_PROTECTED, A_MANDATORY, A_HIDDEN, A_UNIT, A_FORMAT, A_EQ, A_EQ_VERSION,
                         A_COMPONENT, A_CALC_TP, A_CALC_FORMULA, A_VALID_CF,
                         A_MAX_X, A_MAX_Y, A_MULTI_SELECT, A_MODIFY_FLAG, A_NR_OF_ROWS,
                         A_NEXT_ROWS));

END SAVESCMECELL;

FUNCTION SAVESCMECELLVALUES
(A_SC             IN     VARCHAR2,                  
 A_PG             IN     VARCHAR2,                  
 A_PGNODE         IN     NUMBER,                    
 A_PA             IN     VARCHAR2,                  
 A_PANODE         IN     NUMBER,                    
 A_ME             IN     VARCHAR2,                  
 A_MENODE         IN     NUMBER,                    
 A_REANALYSIS     IN OUT NUMBER,                    
 A_CELL           IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_INDEX_X        IN     UNAPIGEN.NUM_TABLE_TYPE,   
 A_INDEX_Y        IN     UNAPIGEN.NUM_TABLE_TYPE,   
 A_VALUE_F        IN     UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_VALUE_S        IN     UNAPIGEN.VC40_TABLE_TYPE,  
 A_SELECTED       IN     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NR_OF_ROWS     IN     NUMBER,                    
 A_NEXT_ROWS      IN     NUMBER)                    
RETURN NUMBER IS
BEGIN

      RETURN(UNAPIME3.SAVESCMECELLVALUES(
                         A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, A_ME, A_MENODE, A_REANALYSIS,
                         A_CELL, A_INDEX_X, A_INDEX_Y, A_VALUE_F, A_VALUE_S,
                         A_SELECTED, A_NR_OF_ROWS, A_NEXT_ROWS));

END SAVESCMECELLVALUES;

FUNCTION CREATESCMEDETAILS
(A_SC             IN        VARCHAR2,                 
 A_PG             IN        VARCHAR2,                 
 A_PGNODE         IN        NUMBER,                   
 A_PA             IN        VARCHAR2,                 
 A_PANODE         IN        NUMBER,                   
 A_ME             IN        VARCHAR2,                 
 A_MENODE         IN        NUMBER,                   
 A_REANALYSIS     IN        NUMBER)                   
RETURN NUMBER IS
BEGIN

      RETURN(UNAPIME2.CREATESCMEDETAILS(
                         A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, A_ME, A_MENODE, A_REANALYSIS));

END CREATESCMEDETAILS;

FUNCTION DELETESCMEDETAILS
(A_SC             IN        VARCHAR2,                 
 A_PG             IN        VARCHAR2,                 
 A_PGNODE         IN        NUMBER,                   
 A_PA             IN        VARCHAR2,                 
 A_PANODE         IN        NUMBER,                   
 A_ME             IN        VARCHAR2,                 
 A_MENODE         IN        NUMBER,                   
 A_REANALYSIS     IN        NUMBER)                   
RETURN NUMBER IS
BEGIN

      RETURN(UNAPIMEP.DELETESCMEDETAILS(
                         A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, A_ME, A_MENODE, A_REANALYSIS));

END DELETESCMEDETAILS;

FUNCTION SAVESCMETHOD
(A_ALARMS_HANDLED        IN     CHAR,                      
 A_SC                    IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PG                    IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PGNODE                IN     UNAPIGEN.LONG_TABLE_TYPE,  
 A_PA                    IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PANODE                IN     UNAPIGEN.LONG_TABLE_TYPE,  
 A_ME                    IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_MENODE                IN OUT UNAPIGEN.LONG_TABLE_TYPE,  
 A_REANALYSIS            IN OUT UNAPIGEN.NUM_TABLE_TYPE,   
 A_MT_VERSION            IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_DESCRIPTION           IN     UNAPIGEN.VC40_TABLE_TYPE,  
 A_VALUE_F               IN     UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_VALUE_S               IN     UNAPIGEN.VC40_TABLE_TYPE,  
 A_UNIT                  IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_EXEC_START_DATE       IN     UNAPIGEN.DATE_TABLE_TYPE,  
 A_EXEC_END_DATE         IN OUT UNAPIGEN.DATE_TABLE_TYPE,  
 A_EXECUTOR              IN OUT UNAPIGEN.VC20_TABLE_TYPE,  
 A_LAB                   IN OUT UNAPIGEN.VC20_TABLE_TYPE,  
 A_EQ                    IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_EQ_VERSION            IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PLANNED_EXECUTOR      IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PLANNED_EQ            IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PLANNED_EQ_VERSION    IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_MANUALLY_ENTERED      IN     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ALLOW_ADD             IN     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ASSIGN_DATE           IN     UNAPIGEN.DATE_TABLE_TYPE,  
 A_ASSIGNED_BY           IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_MANUALLY_ADDED        IN     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_DELAY                 IN     UNAPIGEN.NUM_TABLE_TYPE,   
 A_DELAY_UNIT            IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_FORMAT                IN     UNAPIGEN.VC40_TABLE_TYPE,  
 A_ACCURACY              IN     UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_REAL_COST             IN     UNAPIGEN.VC40_TABLE_TYPE,  
 A_REAL_TIME             IN     UNAPIGEN.VC40_TABLE_TYPE,  
 A_CALIBRATION           IN     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_CONFIRM_COMPLETE      IN     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_AUTORECALC            IN     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ME_RESULT_EDITABLE    IN     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NEXT_CELL             IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SOP                   IN     UNAPIGEN.VC40_TABLE_TYPE,  
 A_SOP_VERSION           IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PLAUS_LOW             IN     UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_PLAUS_HIGH            IN     UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_WINSIZE_X             IN     UNAPIGEN.NUM_TABLE_TYPE,   
 A_WINSIZE_Y             IN     UNAPIGEN.NUM_TABLE_TYPE,   
 A_ME_CLASS              IN     UNAPIGEN.VC2_TABLE_TYPE,   
 A_LOG_HS                IN     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LOG_HS_DETAILS        IN     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LC                    IN     UNAPIGEN.VC2_TABLE_TYPE,   
 A_LC_VERSION            IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_MODIFY_FLAG           IN OUT UNAPIGEN.NUM_TABLE_TYPE,   
 A_NR_OF_ROWS            IN     NUMBER,                    
 A_MODIFY_REASON         IN     VARCHAR2)                  
RETURN NUMBER IS
BEGIN

      RETURN(UNAPIME3.SAVESCMETHOD(
                         A_ALARMS_HANDLED, A_SC, A_PG, A_PGNODE, A_PA, A_PANODE,
                         A_ME, A_MENODE, A_REANALYSIS, A_MT_VERSION, A_DESCRIPTION, A_VALUE_F, A_VALUE_S,
                         A_UNIT, A_EXEC_START_DATE, A_EXEC_END_DATE, A_EXECUTOR, A_LAB, 
                         A_EQ, A_EQ_VERSION, A_PLANNED_EXECUTOR, A_PLANNED_EQ, A_PLANNED_EQ_VERSION, A_MANUALLY_ENTERED,
                         A_ALLOW_ADD, A_ASSIGN_DATE, A_ASSIGNED_BY, A_MANUALLY_ADDED,
                         A_DELAY, A_DELAY_UNIT, A_FORMAT, A_ACCURACY,
                         A_REAL_COST, A_REAL_TIME, A_CALIBRATION, A_CONFIRM_COMPLETE,
                         A_AUTORECALC, A_ME_RESULT_EDITABLE, A_NEXT_CELL, A_SOP, A_SOP_VERSION, A_PLAUS_LOW, A_PLAUS_HIGH,
                         A_WINSIZE_X, A_WINSIZE_Y, A_ME_CLASS, A_LOG_HS, A_LOG_HS_DETAILS, A_LC, A_LC_VERSION,
                         A_MODIFY_FLAG, A_NR_OF_ROWS, A_MODIFY_REASON));
END SAVESCMETHOD;

FUNCTION INITSCMETHOD
(A_MT                   IN      VARCHAR2,                  
 A_MT_VERSION_IN        IN      VARCHAR2,                  
 A_SEQ                  IN      NUMBER,                    
 A_SC                   IN      VARCHAR2,                  
 A_PG                   IN      VARCHAR2,                  
 A_PGNODE               IN      NUMBER,                    
 A_PA                   IN      VARCHAR2,                  
 A_PANODE               IN      NUMBER,                    
 A_PR_VERSION           IN      VARCHAR2,                  
 A_MT_NR_MEASUR         IN      NUMBER,                    
 A_REANALYSIS           OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_MT_VERSION           OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_DESCRIPTION          OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_VALUE_F              OUT     UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_VALUE_S              OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_UNIT                 OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_EXEC_START_DATE      OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_EXEC_END_DATE        OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_EXECUTOR             OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_LAB                  OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_EQ                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_EQ_VERSION           OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PLANNED_EXECUTOR     OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PLANNED_EQ           OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PLANNED_EQ_VERSION   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_MANUALLY_ENTERED     OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ALLOW_ADD            OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ASSIGN_DATE          OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_ASSIGNED_BY          OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_MANUALLY_ADDED       OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_DELAY                OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_DELAY_UNIT           OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_FORMAT               OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_ACCURACY             OUT     UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_REAL_COST            OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_REAL_TIME            OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_CALIBRATION          OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_CONFIRM_COMPLETE     OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_AUTORECALC           OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ME_RESULT_EDITABLE   OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NEXT_CELL            OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SOP                  OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_SOP_VERSION          OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PLAUS_LOW            OUT     UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_PLAUS_HIGH           OUT     UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_WINSIZE_X            OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_WINSIZE_Y            OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_ME_CLASS             OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_LOG_HS               OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LOG_HS_DETAILS       OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LC                   OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_LC_VERSION           OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_NR_OF_ROWS           IN OUT  NUMBER)                    
RETURN NUMBER IS
BEGIN

      RETURN(UNAPIME3.INITSCMETHOD(
                         A_MT, A_MT_VERSION_IN, A_SEQ, A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, A_PR_VERSION,
                         A_MT_NR_MEASUR, A_REANALYSIS, A_MT_VERSION, A_DESCRIPTION, A_VALUE_F, A_VALUE_S,
                         A_UNIT, A_EXEC_START_DATE, A_EXEC_END_DATE, A_EXECUTOR, A_LAB, 
                         A_EQ, A_EQ_VERSION, A_PLANNED_EXECUTOR, A_PLANNED_EQ, A_PLANNED_EQ_VERSION, A_MANUALLY_ENTERED,
                         A_ALLOW_ADD, A_ASSIGN_DATE, A_ASSIGNED_BY, A_MANUALLY_ADDED,
                         A_DELAY, A_DELAY_UNIT, A_FORMAT, A_ACCURACY,
                         A_REAL_COST, A_REAL_TIME, A_CALIBRATION, A_CONFIRM_COMPLETE,
                         A_AUTORECALC, A_ME_RESULT_EDITABLE, A_NEXT_CELL, A_SOP, A_SOP_VERSION, A_PLAUS_LOW, A_PLAUS_HIGH,
                         A_WINSIZE_X, A_WINSIZE_Y,  A_ME_CLASS, A_LOG_HS, A_LOG_HS_DETAILS,
                         A_LC, A_LC_VERSION, A_NR_OF_ROWS));
END INITSCMETHOD;

FUNCTION GETSCMEDEFAULTRESULT
(A_SC               IN      UNAPIGEN.VC20_TABLE_TYPE,    
 A_PG               IN OUT  UNAPIGEN.VC20_TABLE_TYPE,    
 A_PGNODE           IN OUT  UNAPIGEN.LONG_TABLE_TYPE,    
 A_PA               IN OUT  UNAPIGEN.VC20_TABLE_TYPE,    
 A_PANODE           IN OUT  UNAPIGEN.LONG_TABLE_TYPE,    
 A_ME               IN OUT  UNAPIGEN.VC20_TABLE_TYPE,    
 A_MENODE           IN OUT  UNAPIGEN.LONG_TABLE_TYPE,    
 A_VALUE_F          OUT     UNAPIGEN.FLOAT_TABLE_TYPE,   
 A_VALUE_S          OUT     UNAPIGEN.VC40_TABLE_TYPE,    
 A_NR_OF_ROWS       IN      NUMBER)                      
RETURN NUMBER IS

BEGIN

RETURN (UNAPIME2.GETSCMEDEFAULTRESULT(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE,
                                      A_ME, A_MENODE, A_VALUE_F, A_VALUE_S, A_NR_OF_ROWS));

END GETSCMEDEFAULTRESULT; 

FUNCTION XMLVALIDATEANDTRANSFORM               
(A_XML               IN              CLOB,     
 A_XSD               IN              CLOB,     
 A_XSL               IN              CLOB,     
 A_PLSQLSCRIPT       IN              CLOB)     
RETURN VARCHAR2
IS LANGUAGE JAVA NAME
'U4XML.ValidateAndTransform(oracle.sql.CLOB, oracle.sql.CLOB, oracle.sql.CLOB, oracle.sql.CLOB) returns java.lang.String';

PROCEDURE INITSAVESCMETHODLIST                
IS

L_XML_TEXT      UNAPIGEN.VC2000_TABLE_TYPE;

BEGIN



L_XML_TEXT(1):= 'constructor';
L_RET_CODE := SAVESCMETHODLIST(L_XML_TEXT, 1, -1);

END INITSAVESCMETHODLIST;

FUNCTION SAVESCMETHODLIST
(A_XML_TEXT      IN     UNAPIGEN.VC2000_TABLE_TYPE,      
 A_NR_OF_ROWS    IN     NUMBER,                          
 A_NEXT_ROWS     IN     NUMBER)                          
RETURN NUMBER IS

L_RET_STRING                  VARCHAR2(32767);
L_FILE_HANDLE                 UTL_FILE.FILE_TYPE;
L_EOF_FOUND                   BOOLEAN := FALSE;
L_BUFF                        VARCHAR2(1022);
L_POS_SLASH                   NUMBER;
L_OLD_POS_SLASH               NUMBER;
L_LENGTH                      NUMBER;
L_TOT_LENGTH                  NUMBER;
L_JUMP_TO_NEXT_TRANSACTION    BOOLEAN;
L_NLS_DATE_FORMAT             VARCHAR2(40);
L_NLS_NUMERIC_CHARACTERS      VARCHAR2(40);
L_POS_GREATER                 NUMBER;
L_OLD_POS_GREATER             NUMBER;
L_TEMPPOS_GREATER             NUMBER;
L_STARTAT                     NUMBER;

CURSOR L_PARAMETER_CURSOR IS
   SELECT MAX(DECODE(PARAMETER, 'NLS_DATE_FORMAT', VALUE, NULL)) NLS_DATE_FORMAT,
   MAX(DECODE(PARAMETER, 'NLS_NUMERIC_CHARACTERS', VALUE, NULL)) NLS_NUMERIC_CHARACTERS
   FROM V$NLS_PARAMETERS
   WHERE PARAMETER IN ('NLS_DATE_FORMAT','NLS_NUMERIC_CHARACTERS');
   
BEGIN

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   
   
   
   
   

   L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   L_SQLERRM := NULL;
   IF NVL(A_NEXT_ROWS, 0) = 0 THEN
      IF NVL(P_SAVEMELIST_CALLS, 0) <> 0 THEN
         L_SQLERRM := 'SaveScMethodList termination call never called for previous call ! (a_next_rows=-1)';
         RAISE STPERROR;
      END IF;
      P_SAVEMELIST_CALLS := 1;
      P_SAVEMELIST_NR_OF_ROWS := 0;
   ELSIF NVL(A_NEXT_ROWS, 0) = -1 THEN
      P_SAVEMELIST_CALLS := NVL(P_SAVEMELIST_CALLS, 0) + 1;      
   ELSIF NVL(A_NEXT_ROWS, 0) = 1 THEN
      IF NVL(P_SAVEMELIST_CALLS, 0) = 0 THEN   
         L_SQLERRM := 'SaveScMethodList startup call never called ! (a_next_rows=0)';
         RAISE STPERROR;   
      END IF;
      
      
      
      
      
      P_SAVEMELIST_CALLS := NVL(P_SAVEMELIST_CALLS, 0) + 1;      
   ELSE
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NEXTROWS;
      RAISE STPERROR;
   END IF;         

   
   
   
   
   
   
   
   
   

   IF P_SAVEMELIST_CALLS = 1 THEN
      P_SAVEMELIST_BUF := NULL;
   END IF;
   IF A_NR_OF_ROWS > 0 THEN
   
      P_SAVEMELIST_XML_IN_CREATED := FALSE;
      
      
      IF NOT P_SAVEMELIST_XML_IN_CREATED THEN
         DBMS_LOB.CREATETEMPORARY(P_SAVEMELIST_XML_IN ,TRUE, DBMS_LOB.SESSION);
         P_SAVEMELIST_XML_IN_CREATED := TRUE;
      END IF;
      FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
         L_LENGTH := LENGTH(A_XML_TEXT(L_SEQ_NO));
         IF L_LENGTH > 0 THEN 
            DBMS_LOB.WRITEAPPEND (P_SAVEMELIST_XML_IN, L_LENGTH, A_XML_TEXT(L_SEQ_NO));
         END IF;
      END LOOP;

   
      
      
      
      
      
      
      
      
      
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      
      
      
      OPEN L_PARAMETER_CURSOR;
      FETCH L_PARAMETER_CURSOR
      INTO L_NLS_DATE_FORMAT, L_NLS_NUMERIC_CHARACTERS;
      CLOSE L_PARAMETER_CURSOR;
      
      
      

      
      
      
      IF NOT P_SAVEMELIST_XSDANDXSL_LOADED THEN
         DBMS_LOB.CREATETEMPORARY(P_SAVEMELIST_XSD ,TRUE, DBMS_LOB.SESSION);
         P_SAVEMELIST_XSD_CREATED := TRUE;
         L_FILE_HANDLE := UTL_FILE.FOPEN ('E:\database\u440\unilink\in', 'mels.xsd', 'r');

         L_EOF_FOUND := FALSE;
         
         LOOP
            EXIT WHEN L_EOF_FOUND; 
            BEGIN
               UTL_FILE.GET_LINE(L_FILE_HANDLE, L_BUFF);
               L_LENGTH := LENGTH(L_BUFF);
               IF L_LENGTH > 0 THEN 
                  DBMS_LOB.WRITEAPPEND (P_SAVEMELIST_XSD, L_LENGTH, L_BUFF);
               END IF;
            EXCEPTION
            WHEN NO_DATA_FOUND THEN
               L_EOF_FOUND := TRUE;
            WHEN OTHERS THEN
               
               IF P_SAVEMELIST_XSD_CREATED THEN
                  DBMS_LOB.FREETEMPORARY(P_SAVEMELIST_XSD);   
               END IF;
               RAISE;
            END;
         END LOOP;
         UTL_FILE.FCLOSE (L_FILE_HANDLE);

         DBMS_OUTPUT.PUT_LINE('xsd-----------------------');
         IF DBMS_LOB.GETLENGTH(P_SAVEMELIST_XSD) = 0 THEN
            L_SQLERRM := 'xsd empty !';
            RAISE STPERROR;
         END IF;

         
         
         
         DBMS_LOB.CREATETEMPORARY(P_SAVEMELIST_XSL ,TRUE, DBMS_LOB.SESSION);
         P_SAVEMELIST_XSL_CREATED := TRUE;
         L_FILE_HANDLE := UTL_FILE.FOPEN ('E:\database\u440\unilink\in', 'mels.xsl', 'r');

         L_EOF_FOUND := FALSE;
         
         LOOP
            EXIT WHEN L_EOF_FOUND; 
            BEGIN
               UTL_FILE.GET_LINE(L_FILE_HANDLE, L_BUFF);
               L_LENGTH := LENGTH(L_BUFF);
               IF L_LENGTH > 0 THEN 
                  DBMS_LOB.WRITEAPPEND (P_SAVEMELIST_XSL, L_LENGTH, L_BUFF);
               END IF;
            EXCEPTION
            WHEN NO_DATA_FOUND THEN
               L_EOF_FOUND := TRUE;
            WHEN OTHERS THEN
               
               IF P_SAVEMELIST_XSL_CREATED THEN
                  DBMS_LOB.FREETEMPORARY(P_SAVEMELIST_XSL);   
               END IF;
               RAISE;
            END;
         END LOOP;
         
         UTL_FILE.FCLOSE (L_FILE_HANDLE);
         
         DBMS_OUTPUT.PUT_LINE('xsl----------------------------------------------');
         IF DBMS_LOB.GETLENGTH(P_SAVEMELIST_XSL) = 0 THEN
            L_SQLERRM := 'xsl empty !';
            RAISE STPERROR;
         END IF;
      END IF;

      P_PLSQLSCRIPT_CREATED := FALSE;
      
      
      IF NOT P_PLSQLSCRIPT_CREATED THEN
         DBMS_LOB.CREATETEMPORARY(P_PLSQLSCRIPT ,TRUE, DBMS_LOB.CALL);
         P_PLSQLSCRIPT_CREATED := TRUE;
      END IF;

      
      
      L_RET_STRING := XMLVALIDATEANDTRANSFORM(P_SAVEMELIST_XML_IN, P_SAVEMELIST_XSD, P_SAVEMELIST_XSL, P_PLSQLSCRIPT);
      
      
      IF A_NR_OF_ROWS = 1 THEN
         IF A_XML_TEXT(1) = 'constructor' THEN
            RETURN(UNAPIGEN.DBERR_SUCCESS); 
         END IF;
      END IF;
      IF L_RET_STRING <> 'OK' THEN
         L_SQLERRM := 'use l_ret_string';
         RAISE STPERROR;
      END IF;                                                                                        
      
      
      
      



      
      
      L_JUMP_TO_NEXT_TRANSACTION :=  FALSE;
      L_OLD_POS_SLASH := 0;
      
      LOOP
         IF L_JUMP_TO_NEXT_TRANSACTION THEN
            L_POS_SLASH := DBMS_LOB.INSTR(P_PLSQLSCRIPT, '/DECLARE/* Finish transaction', L_OLD_POS_SLASH+1, 1);         
            L_OLD_POS_SLASH := L_POS_SLASH;
            L_JUMP_TO_NEXT_TRANSACTION := FALSE;
            DBMS_OUTPUT.PUT_LINE('jump to next transaction !'||L_POS_SLASH);
            IF L_OLD_POS_SLASH = 0 THEN
               DBMS_OUTPUT.PUT_LINE('No next transaction !');
               EXIT;
            END IF;
         END IF;
         L_POS_SLASH := DBMS_LOB.INSTR(P_PLSQLSCRIPT, '/DECLARE', L_OLD_POS_SLASH+1, 1);

                  
         IF (L_POS_SLASH-L_OLD_POS_SLASH-1)>32767 THEN
            L_SQLERRM := 'Generated script too long (too much data)';
            RAISE STPERROR;
         ELSIF L_POS_SLASH = 0 AND L_OLD_POS_SLASH > 0 THEN
            L_SQL_STRING := DBMS_LOB.SUBSTR(P_PLSQLSCRIPT,  32767, L_OLD_POS_SLASH+1);
            
            L_LENGTH := LENGTH(L_SQL_STRING);
            L_SQL_STRING := SUBSTR(L_SQL_STRING, 1, L_LENGTH-1); 
         ELSIF L_POS_SLASH = 0 AND L_OLD_POS_SLASH = 0 THEN
            EXIT;
         ELSE
            L_SQL_STRING := DBMS_LOB.SUBSTR(P_PLSQLSCRIPT,  L_POS_SLASH-L_OLD_POS_SLASH-1, L_OLD_POS_SLASH+1);
         END IF;
         
         BEGIN
            EXECUTE IMMEDIATE L_SQL_STRING;
         EXCEPTION
         WHEN OTHERS THEN
            L_SQLERRM := SQLERRM;
            L_RET_CODE := UNAPIGEN.DBERR_PARTIALSAVE;
            IF SQLCODE = -20000 THEN
               
               UNAPIGEN.LOGERROR('SaveScMethodList',SUBSTR(L_SQLERRM, 1, 250));            
            ELSIF SQLCODE = -20001 THEN
               
               RAISE;   
            ELSE
               
               L_LENGTH := 250;
               L_TOT_LENGTH := LENGTH(L_SQL_STRING);
               FOR L_X IN 1..FLOOR(L_TOT_LENGTH/L_LENGTH)+1 LOOP
                  UNAPIGEN.LOGERROR('SaveScMethodList',LTRIM(TO_CHAR(L_X, '000'))||')'||SUBSTR(L_SQL_STRING, (L_LENGTH*(L_X-1))+1, L_LENGTH));
               END LOOP;                     
               UNAPIGEN.LOGERROR('SaveScMethodList','999)'||SUBSTR(L_SQLERRM, 1, 250));
            END IF;
            
            L_JUMP_TO_NEXT_TRANSACTION := TRUE;
         END;
         L_OLD_POS_SLASH := L_POS_SLASH;
         EXIT WHEN L_POS_SLASH = 0;
         
      END LOOP;
      
      IF P_PLSQLSCRIPT_CREATED THEN
         DBMS_LOB.FREETEMPORARY(P_PLSQLSCRIPT);   
      END IF;
      P_PLSQLSCRIPT_CREATED := FALSE;

      
      IF NVL(A_NEXT_ROWS, 0) = -1 
         
      THEN
         IF P_SAVEWORKLIST_DUMP_DIR IS NOT NULL AND
            P_SAVEMELIST_XML_IN IS NOT NULL THEN
            L_FILE_HANDLE := UTL_FILE.FOPEN ('E:\database\u440\unilink\log', 'mels-'||TO_CHAR(CURRENT_TIMESTAMP, 'DDMMYYYY-HH24MISS')||'.xml', 'w');

            
            L_OLD_POS_GREATER := 1;
            L_STARTAT := 1;
            LOOP
               L_TEMPPOS_GREATER := DBMS_LOB.INSTR(P_SAVEMELIST_XML_IN, '</', L_OLD_POS_GREATER+81, 1);
               IF L_TEMPPOS_GREATER > 0 THEN
                  L_POS_GREATER := DBMS_LOB.INSTR(P_SAVEMELIST_XML_IN, '>', L_TEMPPOS_GREATER, 1);
               ELSE
                  L_POS_GREATER := 0;
               END IF;
               IF L_POS_GREATER = 0 THEN
                  L_LENGTH := 32767;
               ELSE
                  L_LENGTH := L_POS_GREATER-L_OLD_POS_GREATER;
               END IF;
               IF L_OLD_POS_GREATER > 1 THEN
                  L_STARTAT := L_OLD_POS_GREATER;
               END IF;
               L_BUFF := DBMS_LOB.SUBSTR(P_SAVEMELIST_XML_IN, L_LENGTH, L_STARTAT);
               UTL_FILE.PUT_LINE(L_FILE_HANDLE, L_BUFF);
               EXIT WHEN L_POS_GREATER=0; 
               L_OLD_POS_GREATER := L_POS_GREATER;
            END LOOP;
            UTL_FILE.FCLOSE (L_FILE_HANDLE);
         END IF;
      END IF;

      
      IF NOT P_SAVEMELIST_XSDANDXSL_LOADED THEN
         IF P_SAVEMELIST_XSD_CREATED THEN
            DBMS_LOB.FREETEMPORARY(P_SAVEMELIST_XSD);   
         END IF;
         P_SAVEMELIST_XSL_CREATED := FALSE;
         IF P_SAVEMELIST_XSL_CREATED THEN
            DBMS_LOB.FREETEMPORARY(P_SAVEMELIST_XSL);   
         END IF;
         P_SAVEMELIST_XSL_CREATED := FALSE;
         P_SAVEMELIST_XSDANDXSL_LOADED := TRUE;
      END IF;
      
      IF P_SAVEMELIST_XML_IN_CREATED THEN
         DBMS_LOB.FREETEMPORARY(P_SAVEMELIST_XML_IN);   
      END IF;
      P_SAVEMELIST_XML_IN_CREATED := FALSE;
      
      
      L_SQL_STRING := 'ALTER SESSION SET NLS_DATE_FORMAT='''||L_NLS_DATE_FORMAT||
                      ''' NLS_NUMERIC_CHARACTERS='''||L_NLS_NUMERIC_CHARACTERS||'''';
      BEGIN
         EXECUTE IMMEDIATE L_SQL_STRING;
      EXCEPTION
      WHEN OTHERS THEN
         L_SQLERRM := L_SQL_STRING||' failed! '||SUBSTR(SQLERRM, 1, 120) ;
         UNAPIGEN.P_TXN_ERROR :=  UNAPIGEN.DBERR_GENFAIL;                      
         RAISE STPERROR;
      END;
      

   END IF;
   
   
   IF NVL(A_NEXT_ROWS, 0) = -1 THEN
      
      P_SAVEMELIST_CALLS := 0;
      P_SAVEMELIST_BUF := NULL;
   END IF;

   
   
   
   RETURN(L_RET_CODE);
   
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      L_SQLERRM := SUBSTR(SQLERRM,1,255);
      UNAPIGEN.LOGERROR('SaveScMethodList', L_SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      IF L_SQLERRM = 'use l_ret_string' THEN
         
         L_LENGTH := 250;
         L_TOT_LENGTH := LENGTH(L_RET_STRING);
         FOR L_X IN 1..FLOOR(L_TOT_LENGTH/L_LENGTH)+1 LOOP
            UNAPIGEN.LOGERROR('SaveScMethodList',TO_CHAR(L_X)||')'||SUBSTR(L_RET_STRING, (L_LENGTH*(L_X-1))+1, L_LENGTH));
         END LOOP;                     
      ELSE      
         UNAPIGEN.LOGERROR('SaveScMethodList', L_SQLERRM); 
      END IF;
   END IF;   
   IF UNAPIGEN.P_TXN_ERROR = UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR :=  UNAPIGEN.DBERR_GENFAIL;
   END IF;
   
   IF P_SAVEWORKLIST_DUMP_DIR IS NOT NULL AND
      P_SAVEMELIST_XML_IN IS NOT NULL THEN
      L_FILE_HANDLE := UTL_FILE.FOPEN ('E:\database\u440\unilink\log', 'mels-'||TO_CHAR(CURRENT_TIMESTAMP, 'DDMMYYYY-HH24MISS')||'.xml', 'w');

      
      L_OLD_POS_GREATER := 1;
      L_STARTAT := 1;
      LOOP
         L_TEMPPOS_GREATER := DBMS_LOB.INSTR(P_SAVEMELIST_XML_IN, '</', L_OLD_POS_GREATER+81, 1);
         IF L_TEMPPOS_GREATER > 0 THEN
            L_POS_GREATER := DBMS_LOB.INSTR(P_SAVEMELIST_XML_IN, '>', L_TEMPPOS_GREATER, 1);
         ELSE
            L_POS_GREATER := 0;
         END IF;
         IF L_POS_GREATER = 0 THEN
            L_LENGTH := 32767;
         ELSE
            L_LENGTH := L_POS_GREATER-L_OLD_POS_GREATER;
         END IF;
         IF L_OLD_POS_GREATER > 1 THEN
            L_STARTAT := L_OLD_POS_GREATER;
         END IF;
         L_BUFF := DBMS_LOB.SUBSTR(P_SAVEMELIST_XML_IN, L_LENGTH, L_STARTAT);
         UTL_FILE.PUT_LINE(L_FILE_HANDLE, L_BUFF);
         EXIT WHEN L_POS_GREATER=0; 
         L_OLD_POS_GREATER := L_POS_GREATER;
      END LOOP;
      UTL_FILE.FCLOSE (L_FILE_HANDLE);
   END IF;
   
   P_SAVEMELIST_CALLS := 0;
   IF P_SAVEMELIST_XML_IN_CREATED THEN
      DBMS_LOB.FREETEMPORARY(P_SAVEMELIST_XML_IN);   
   END IF;
   P_SAVEMELIST_XML_IN_CREATED := FALSE;
   IF P_PLSQLSCRIPT_CREATED THEN
      DBMS_LOB.FREETEMPORARY(P_PLSQLSCRIPT);   
   END IF;
   P_PLSQLSCRIPT_CREATED := FALSE;
   
   IF L_NLS_DATE_FORMAT IS NOT NULL THEN
      L_SQL_STRING := 'ALTER SESSION SET NLS_DATE_FORMAT='''||L_NLS_DATE_FORMAT||
                      ''' NLS_NUMERIC_CHARACTERS='''||L_NLS_NUMERIC_CHARACTERS||'''';
      BEGIN
         EXECUTE IMMEDIATE L_SQL_STRING;
      EXCEPTION
      WHEN OTHERS THEN
         L_SQLERRM := L_SQL_STRING ||''' failed! '||SUBSTR(SQLERRM, 1, 120) ;
         UNAPIGEN.LOGERROR('SaveScMethodList', L_SQLERRM);
      END;
   END IF;
   
   RETURN(UNAPIGEN.P_TXN_ERROR);   
END SAVESCMETHODLIST;

FUNCTION EVALUATEEQUIPMENT
(A_EQ_TP        IN          VARCHAR2,        
 A_LAB          IN OUT      VARCHAR2,        
 A_EQ              OUT      VARCHAR2,        
 A_ERROR_MSG       OUT      VARCHAR2)        
RETURN NUMBER IS

BEGIN

RETURN(UNAPIME3.EVALUATEEQUIPMENT(A_EQ_TP, A_LAB, A_EQ, A_ERROR_MSG));

END EVALUATEEQUIPMENT;

BEGIN
P_SAVESCMECLVALUES_CALLS := 0;
P_SAVESCMECL_CALLS := 0;
P_SAVESCMECL_INSERT_EVENT := FALSE;
P_SAVEMELIST_CALLS := 0;
P_SAVEMELIST_XSD_CREATED := FALSE;
P_SAVEMELIST_XSL_CREATED := FALSE;


END UNAPIME;
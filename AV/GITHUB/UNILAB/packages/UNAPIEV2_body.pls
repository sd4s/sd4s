PACKAGE BODY unapiev2 AS

L_SQL_STRING      VARCHAR2(2000);
L_RET_CODE        NUMBER;
L_RESULT          NUMBER;
L_TRANSITION_OK   INTEGER;
STPERROR          EXCEPTION;

LI_RULES_LOADED   INTEGER;

FUNCTION GETVERSION
   RETURN VARCHAR2
IS
BEGIN
   RETURN('06.07.00.00_00.13');
EXCEPTION
   WHEN OTHERS THEN
      RETURN (NULL);
END GETVERSION;

PROCEDURE SAVEPOINT_STARTEVENTPROC IS
BEGIN
   IF UNAPIEV.P_EVMGRS_EV_IN_BULK = '1' THEN
      UNAPIGEN.U4SAVEPOINT('UNILAB4_STARTEVENTPROCESSING');
   ELSE
      SAVEPOINT UNILAB4_STARTEVENTPROCESSING;
   END IF;
END SAVEPOINT_STARTEVENTPROC;

PROCEDURE ROLLB2SAVEPOINT_STARTEVPROC IS
BEGIN
   IF UNAPIEV.P_EVMGRS_EV_IN_BULK = '1' THEN
      UNAPIGEN.U4ROLLBACK2SAVEPOINT('UNILAB4_STARTEVENTPROCESSING');
   ELSE
      ROLLBACK TO SAVEPOINT UNILAB4_STARTEVENTPROCESSING;
   END IF;
END ROLLB2SAVEPOINT_STARTEVPROC;

PROCEDURE SAVEPOINT_UNILAB4 IS
BEGIN
   IF UNAPIEV.P_EVMGRS_EV_IN_BULK = '1' THEN
      UNAPIGEN.U4SAVEPOINT('unilab4');
   ELSE
      SAVEPOINT UNILAB4;
   END IF;
END SAVEPOINT_UNILAB4;

FUNCTION EVENTMANAGER                                      
(A_TR_SEQ IN NUMBER)
RETURN NUMBER IS

L_APPLIC_NAME             VARCHAR2(40);
L_SQLCODE                 INTEGER;
L_ROW                     INTEGER;




CURSOR L_EVENTS_CURSOR (A_TR_SEQ IN NUMBER) IS
   SELECT A.*, ROWID
   FROM UTEV A
   WHERE A.TR_SEQ = A_TR_SEQ
   AND A.EVMGR_NAME = '1'
   ORDER BY A.EV_SEQ;
L_EVENTS_REC L_EVENTS_CURSOR%ROWTYPE;
TYPE EVRECREFTYPE IS REF CURSOR;
L_EVREF_CURSOR  EVRECREFTYPE;
   
TYPE EVRECTYPETAB IS TABLE OF L_EVENTS_CURSOR%ROWTYPE;
  L_EV_REC_TAB EVRECTYPETAB;   

BEGIN

   IF NVL(UNAPIEV.P_EV_RECURSIVELEVEL,0) = 0 THEN
      UNAPIEV.P_CURRENT_TXN_SEQ := A_TR_SEQ;
   END IF;

   IF UNAPIEV.P_EV_OUTPUT_ON THEN
      UNTRACE.LOG('recursive level '||TO_CHAR(UNAPIEV.P_EV_RECURSIVELEVEL)||
                  ' -> '|| TO_CHAR(UNAPIEV.L_SUBEVENTS));



   END IF;
   IF NVL(UNAPIEV.P_EV_RECURSIVELEVEL,0) >= NVL(UNAPIEV.P_EV_MAXRECURSIVELEVEL,2) THEN
      IF UNAPIEV.L_SUBEVENTS <> 0 THEN
         INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
          VALUES(UNAPIEV.P_EV_REC.CLIENT_ID, UNAPIEV.P_EV_REC.APPLIC, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                 'EventMgr', 'Warning ! Subevents left unhandled '||TO_CHAR(UNAPIEV.L_SUBEVENTS));
         UNAPIGEN.U4COMMIT;
      END IF;
      RETURN(UNAPIGEN.DBERR_SUCCESS);
   ELSE
      UNAPIEV.P_EV_RECURSIVELEVEL := NVL(UNAPIEV.P_EV_RECURSIVELEVEL, 0) + 1;
   END IF;

   DBMS_APPLICATION_INFO.SET_ACTION ('Processing events for tx:'||UNAPIEV.P_CURRENT_TXN_SEQ);
   
   
   
   UNAPIEV.L_SUBEVENTS := 0;
   UNAPIEV.P_STOPEVMGR := FALSE;

   L_CURRENT_TIMESTAMP := CURRENT_TIMESTAMP;

   
   L_APPLIC_NAME := UNAPIEV.P_EV_REC.APPLIC;
   UNAPIEV.P_EV_REC.APPLIC := 'EventMgr';

   UNAPIEV.P_EQSC_SC := '-';
   UNAPIEV.P_EQSC_EQ := '-';

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
   UNAPIEV.L_OBJ_CURSOR := DBMS_SQL.OPEN_CURSOR;

   
   
   
   
   IF UNAPIEV.P_EVMGRS_1QBYINSTANCE = '0' THEN
      UPDATE UTEV 
      SET EVMGR_NAME='1'
      WHERE TR_SEQ=UNAPIEV.P_CURRENT_TXN_SEQ;
   ELSE
      EXECUTE IMMEDIATE 'UPDATE utev'||UNAPIGEN.P_INSTANCENR||' SET evmgr_name=''1'' WHERE tr_seq=:txn_seq'
      USING UNAPIEV.P_CURRENT_TXN_SEQ;
   END IF;







   UNAPIGEN.U4COMMIT;

   IF UNAPIEV.P_EVMGRS_1QBYINSTANCE = '0' THEN
      OPEN L_EVENTS_CURSOR(UNAPIEV.P_CURRENT_TXN_SEQ);
      FETCH L_EVENTS_CURSOR BULK COLLECT INTO L_EV_REC_TAB;
   ELSE
      
      
      
      OPEN L_EVREF_CURSOR FOR 'SELECT a.*, rowid FROM utev'||UNAPIGEN.P_INSTANCENR||' a WHERE a.tr_seq = :a_tr_seq AND a.evmgr_name = ''1'' ORDER BY a.ev_seq' USING UNAPIEV.P_CURRENT_TXN_SEQ;
      FETCH L_EVREF_CURSOR BULK COLLECT INTO L_EV_REC_TAB;
   END IF;

   FOR L_X IN 1..L_EV_REC_TAB.COUNT() LOOP
      
      L_EVENTS_REC.TR_SEQ := L_EV_REC_TAB(L_X).TR_SEQ;
      L_EVENTS_REC.EV_SEQ := L_EV_REC_TAB(L_X).EV_SEQ;
      L_EVENTS_REC.CREATED_ON:= L_EV_REC_TAB(L_X).CREATED_ON;
      L_EVENTS_REC.CLIENT_ID:= L_EV_REC_TAB(L_X).CLIENT_ID;
      L_EVENTS_REC.APPLIC:= L_EV_REC_TAB(L_X).APPLIC;
      L_EVENTS_REC.DBAPI_NAME:= L_EV_REC_TAB(L_X).DBAPI_NAME; 
      L_EVENTS_REC.EVMGR_NAME:= L_EV_REC_TAB(L_X).EVMGR_NAME; 
      L_EVENTS_REC.OBJECT_TP:= L_EV_REC_TAB(L_X).OBJECT_TP; 
      L_EVENTS_REC.OBJECT_ID:= L_EV_REC_TAB(L_X).OBJECT_ID; 
      L_EVENTS_REC.OBJECT_LC:= L_EV_REC_TAB(L_X).OBJECT_LC; 
      L_EVENTS_REC.OBJECT_LC_VERSION:= L_EV_REC_TAB(L_X).OBJECT_LC_VERSION; 
      L_EVENTS_REC.OBJECT_SS:= L_EV_REC_TAB(L_X).OBJECT_SS; 
      L_EVENTS_REC.EV_TP:= L_EV_REC_TAB(L_X).EV_TP; 
      L_EVENTS_REC.USERNAME:= L_EV_REC_TAB(L_X).USERNAME; 
      L_EVENTS_REC.EV_DETAILS:= L_EV_REC_TAB(L_X).EV_DETAILS; 
         UNAPIGEN.P_DEADLOCK_COUNT := 0;
         LOOP
            
            
            
            
            
            
            
            
            
            SAVEPOINT_STARTEVENTPROC; 
            UNAPIGEN.P_DEADLOCK_RAISED := FALSE;
            
            BEGIN
            UNAPIEV.P_HS_SEQ := 0;
            L_SQLERRM := NULL;    
            
            
            
            UNAPIEV.P_EV_REC.TR_SEQ             := L_EVENTS_REC.TR_SEQ;
            UNAPIEV.P_EV_REC.EV_SEQ             := L_EVENTS_REC.EV_SEQ;
            UNAPIEV.P_EV_REC.CREATED_ON         := L_EVENTS_REC.CREATED_ON;
            UNAPIEV.P_EV_REC.CLIENT_ID          := L_EVENTS_REC.CLIENT_ID;
            UNAPIEV.P_EV_REC.APPLIC             := L_EVENTS_REC.APPLIC;
            UNAPIEV.P_EV_REC.DBAPI_NAME         := L_EVENTS_REC.DBAPI_NAME;
            UNAPIEV.P_EV_REC.EVMGR_NAME         := L_EVENTS_REC.EVMGR_NAME;
            UNAPIEV.P_EV_REC.OBJECT_TP          := L_EVENTS_REC.OBJECT_TP;
            UNAPIEV.P_EV_REC.OBJECT_ID          := L_EVENTS_REC.OBJECT_ID;
            UNAPIEV.P_EV_REC.OBJECT_LC          := L_EVENTS_REC.OBJECT_LC;
            UNAPIEV.P_EV_REC.OBJECT_LC_VERSION  := L_EVENTS_REC.OBJECT_LC_VERSION;
            UNAPIEV.P_EV_REC.OBJECT_SS          := L_EVENTS_REC.OBJECT_SS;
            UNAPIEV.P_EV_REC.EV_TP              := L_EVENTS_REC.EV_TP;
            UNAPIEV.P_EV_REC.USERNAME           := L_EVENTS_REC.USERNAME;
            UNAPIEV.P_EV_REC.EV_DETAILS         := L_EVENTS_REC.EV_DETAILS;

            UNAPIEV.P_SCMEGK_PREVIOUS_ME := '';
            UNAPIEV.P_SCMEGK_PREVIOUS_DETAILS := '';
            UNAPIEV.P_SCGK_PREVIOUS_SC := '';
            UNAPIEV.P_WSGK_PREVIOUS_WS := '';
            UNAPIEV.P_CHGK_PREVIOUS_CH := '';


            IF UNAPIEV.P_EV_REC.OBJECT_TP IN ('gk','lu','ly','lo','cs','tbl','blob','cfdll') THEN
               
               
               IF UNAPIEV.P_EV_REC.EV_TP <> 'LoadEvRules' THEN
                  UNAPIEV.P_EV_REC.EV_TP := 'IgnoreThisEvent';
               END IF;
            END IF;

            
            
            
            UNAPIEV.P_LOG_HS := FALSE;  
            UNAPIEV.P_LOG_HS_DETAILS := FALSE;  

            
            
            
            
            UNAPIEV.EVALUATEEVENTDETAILS(L_EVENTS_REC.EV_SEQ);

            IF UNAPIEV.P_POSTPONE_AF = UNAPIGEN.DBERR_TRANSITION THEN
            
               IF UNAPIEV.P_EV_OUTPUT_ON THEN
                  UNTRACE.LOG('Handle postponed action '||UNAPIEV.P_AF||' (no lifecycle evaluation)');
               END IF;

               
               L_RESULT := UNAPIEV.EXECUTEACTION(UNAPIEV.P_AF);
               IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
                  INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
                  VALUES(UNAPIEV.P_EV_REC.CLIENT_ID, UNAPIEV.P_EV_REC.APPLIC, UNAPIGEN.P_USER, 
                         CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, SUBSTR('Ev~'||TO_CHAR(L_EVENTS_REC.EV_SEQ)||'~'|| 
                         UNAPIEV.P_EV_REC.EV_TP,1,40), 
                         'ExecuteAction('||UNAPIEV.P_AF||')#return='||TO_CHAR(L_RESULT));
               END IF;

               
               IF UNAPIGEN.P_LOG_LC_ACTIONS OR L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
                  BEGIN
                     INSERT INTO UTEVLOG
                            (TR_SEQ, EV_SEQ, EV_SESSION, CREATED_ON, CREATED_ON_TZ, CLIENT_ID, APPLIC,
                             DBAPI_NAME, EVMGR_NAME, OBJECT_TP, OBJECT_ID,
                             OBJECT_LC, OBJECT_LC_VERSION, OBJECT_SS, EV_TP, EV_DETAILS, 
                             EXECUTED_ON, EXECUTED_ON_TZ, ERRORCODE, WHAT, INSTANCE_NUMBER)
                     VALUES(UNAPIGEN.P_TR_SEQ, L_EVENTS_REC.EV_SEQ, UNAPIEV.L_EV_SESSION, 
                            UNAPIEV.P_EV_REC.CREATED_ON, UNAPIEV.P_EV_REC.CREATED_ON, UNAPIEV.P_EV_REC.CLIENT_ID, 
                            UNAPIEV.P_EV_REC.APPLIC, UNAPIEV.P_EV_REC.DBAPI_NAME, 
                            UNAPIEV.P_EV_REC.EVMGR_NAME, UNAPIEV.P_EV_REC.OBJECT_TP, 
                            UNAPIEV.P_EV_REC.OBJECT_ID, UNAPIEV.P_EV_REC.OBJECT_LC, 
                            UNAPIEV.P_EV_REC.OBJECT_LC_VERSION, 
                            UNAPIEV.P_EV_REC.OBJECT_SS, UNAPIEV.P_EV_REC.EV_TP, 
                            UNAPIEV.P_EV_REC.EV_DETAILS, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, L_RESULT, 
                            UNAPIEV.P_AF, UNAPIGEN.P_INSTANCENR);
                  EXCEPTION
                  WHEN OTHERS THEN
                     L_SQLERRM := SQLERRM;
                     INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
                     VALUES(UNAPIEV.P_EV_REC.CLIENT_ID, UNAPIEV.P_EV_REC.APPLIC, UNAPIGEN.P_USER, 
                            CURRENT_TIMESTAMP,  CURRENT_TIMESTAMP,
                            SUBSTR('Ev~'||TO_CHAR(L_EVENTS_REC.EV_SEQ)||'~'||UNAPIEV.P_EV_REC.EV_TP,1,40), 
                            L_SQLERRM);
                  END;
               END IF;
            ELSE
               
               UNAPIEV.P_EV_TR.DELETE;
               UNAPIEV.P_EV_TR_COUNT := 0;

               
               L_EVENT_PROCESSED := FALSE;
               IF UNAPIGEN.ISSYSTEMSUPPORTINGRNDSUITE = UNAPIGEN.DBERR_SUCCESS THEN
                  IF UNAPIEV.P_EV_OUTPUT_ON THEN
                     UNTRACE.LOG('      '||'Calling RNDAPIEV.HandleRnDEvents');
                  END IF;
                  BEGIN
                     EXECUTE IMMEDIATE 'BEGIN RNDAPIEV.HandleRnDEvents; END;';
                  EXCEPTION
                  WHEN OTHERS THEN
                     L_SQLERRM := SQLERRM;
                     INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
                     VALUES (UNAPIEV.P_EV_REC.CLIENT_ID,
                             UNAPIEV.P_EV_REC.APPLIC,
                             UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                             'EventManager', 'Error calling RNDAPIEV.HandleRnDEvents');
                     INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
                     VALUES (UNAPIEV.P_EV_REC.CLIENT_ID,
                             UNAPIEV.P_EV_REC.APPLIC,
                             UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                             'EventManager', L_SQLERRM);
                     IF UNAPIEV.P_EV_OUTPUT_ON THEN
                        UNTRACE.LOG('      '||'Exception raised while calling RNDAPIEV.HandleRnDEvents. All details in uterror.');
                     END IF;
                  END;
               END IF;
               
               
               
               IF UNAPIEV.P_EV_OUTPUT_ON THEN
                  IF L_EVENT_PROCESSED THEN
                     UNTRACE.LOG('      '||'RNDAPIEV.HandleRnDEvents returned TRUE');
                  ELSE
                     UNTRACE.LOG('      '||'RNDAPIEV.HandleRnDEvents returned FALSE');
                  END IF;
               END IF;


               IF NOT L_EVENT_PROCESSED THEN UNAPIEV3.HANDLEOBJECTEVENTS;  END IF;
               IF NOT L_EVENT_PROCESSED THEN UNAPIEV3.HANDLERQEVENTS;      END IF;
               IF NOT L_EVENT_PROCESSED THEN UNAPIEV3.HANDLESCEVENTS;      END IF;
               IF NOT L_EVENT_PROCESSED THEN UNAPIEV3.HANDLESCICEVENTS;    END IF;
               IF NOT L_EVENT_PROCESSED THEN UNAPIEV3.HANDLESCIIEVENTS;    END IF;
               IF NOT L_EVENT_PROCESSED THEN UNAPIEV4.HANDLESCPGEVENTS;    END IF;
               IF NOT L_EVENT_PROCESSED THEN UNAPIEV4.HANDLESCPAEVENTS;    END IF;
               IF NOT L_EVENT_PROCESSED THEN UNAPIEV4.HANDLESCMEEVENTS;    END IF;
               IF NOT L_EVENT_PROCESSED THEN UNAPIEV3.HANDLERQICEVENTS;    END IF;
               IF NOT L_EVENT_PROCESSED THEN UNAPIEV3.HANDLERQIIEVENTS;    END IF;
               IF NOT L_EVENT_PROCESSED THEN UNAPIEV3.HANDLESPECIALEVENTS; END IF;
               IF NOT L_EVENT_PROCESSED THEN UNAPIEV3.HANDLEEQEVENTS;      END IF;
               IF NOT L_EVENT_PROCESSED THEN UNAPIEV3.HANDLEWSEVENTS;      END IF;
               IF NOT L_EVENT_PROCESSED THEN UNAPIEV3.HANDLECHEVENTS;      END IF;
               IF NOT L_EVENT_PROCESSED THEN UNAPIEV3.HANDLESDEVENTS;      END IF;
               IF NOT L_EVENT_PROCESSED THEN UNAPIEV3.HANDLESDICEVENTS;    END IF;
               IF NOT L_EVENT_PROCESSED THEN UNAPIEV3.HANDLESDIIEVENTS;    END IF;

               IF UNAPIEV.P_EV_REC.EV_TP = 'LoadEvRules' THEN
                  UNAPIEV2.L_EVENT_PROCESSED := TRUE;
                  LI_RULES_LOADED := '0';
                  IF UNAPIEV.P_EV_OUTPUT_ON THEN
                     UNTRACE.LOG('Event : ' || UNAPIEV.P_EV_REC.EV_TP);
                  END IF;

               ELSIF UNAPIEV.P_EV_REC.EV_TP = 'TraceOn' THEN
                  UNAPIEV2.L_EVENT_PROCESSED := TRUE;
                  L_RESULT := UNTRACE.TRACEON(UNAPIEV.P_EV_REC.EV_DETAILS);
                  IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
                     INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
                     VALUES(UNAPIEV.P_EV_REC.CLIENT_ID, UNAPIEV.P_EV_REC.APPLIC, UNAPIGEN.P_USER, L_CURRENT_TIMESTAMP, L_CURRENT_TIMESTAMP,
                            SUBSTR('Ev~'||TO_CHAR(L_EVENTS_REC.EV_SEQ)||'~'|| 
                            UNAPIEV.P_EV_REC.EV_TP,1,40), 'TraceOn#return=' || TO_CHAR(L_RESULT));
                  END IF;
                  UNAPIEV.P_EV_OUTPUT_ON := TRUE;
                  IF UNAPIEV.P_EV_OUTPUT_ON THEN
                     UNTRACE.LOG('Event : ' || UNAPIEV.P_EV_REC.EV_TP);
                  END IF;

               ELSIF UNAPIEV.P_EV_REC.EV_TP = 'TraceOff' THEN

                  UNAPIEV2.L_EVENT_PROCESSED := TRUE;
                  IF UNAPIEV.P_EV_OUTPUT_ON THEN
                     UNTRACE.LOG('Event : ' || UNAPIEV.P_EV_REC.EV_TP);
                  END IF;
                  L_RESULT := UNTRACE.TRACEOFF;
                  IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
                     INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
                     VALUES(UNAPIEV.P_EV_REC.CLIENT_ID, UNAPIEV.P_EV_REC.APPLIC, UNAPIGEN.P_USER, L_CURRENT_TIMESTAMP, L_CURRENT_TIMESTAMP,
                            SUBSTR('Ev~'||TO_CHAR(L_EVENTS_REC.EV_SEQ)||'~'|| 
                            UNAPIEV.P_EV_REC.EV_TP,1,40), 'TraceOff#return=' || TO_CHAR(L_RESULT));
                     RAISE STPERROR;
                  END IF;
                  UNAPIEV.P_EV_OUTPUT_ON := FALSE;

               ELSIF UNAPIEV.P_EV_REC.EV_TP = 'STOP' THEN

                  UNAPIEV2.L_EVENT_PROCESSED := TRUE;
                  IF UNAPIEV.P_EV_OUTPUT_ON THEN
                     UNTRACE.LOG('Event : ' || UNAPIEV.P_EV_REC.EV_TP);
                  END IF;
                  
                  UNAPIEV.P_STOPEVMGR := TRUE;

               ELSIF UNAPIEV.P_EV_REC.EV_TP = 'EventServicesUpdated' THEN
                  UNAPIEV2.L_EVENT_PROCESSED := TRUE;
                  UNAPIEVS.LI_SERVICES_LOADED := '0';
                  L_RESULT := UNAPIEVS.LOADEVENTSERVICELIST;
                  IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
                     INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
                     VALUES(UNAPIEV.P_EV_REC.CLIENT_ID, UNAPIEV.P_EV_REC.APPLIC, UNAPIGEN.P_USER, L_CURRENT_TIMESTAMP, L_CURRENT_TIMESTAMP,
                            SUBSTR('Ev~'||TO_CHAR(L_EVENTS_REC.EV_SEQ)||'~'||UNAPIEV.P_EV_REC.EV_TP,1,40), 
                            'LoadEventServiceList#return=' || TO_CHAR(L_RESULT));
                  END IF;
                  IF UNAPIEV.P_EV_OUTPUT_ON THEN
                     UNTRACE.LOG('Event : ' || UNAPIEV.P_EV_REC.EV_TP);
                  END IF;

               ELSIF UNAPIEV.P_EV_REC.EV_TP <> 'IgnoreThisEvent' AND
                  L_EVENT_PROCESSED = FALSE THEN 
                 IF UNAPIEV.P_EV_OUTPUT_ON THEN
                     UNTRACE.LOG('Unknown event type: ' || UNAPIEV.P_EV_REC.EV_TP);
                  END IF;
                  INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
                  VALUES (UNAPIEV.P_EV_REC.CLIENT_ID, UNAPIEV.P_EV_REC.APPLIC, UNAPIGEN.P_USER, L_CURRENT_TIMESTAMP, L_CURRENT_TIMESTAMP,
                          'EventManager', 'Unknown event type: ' || UNAPIEV.P_EV_REC.EV_TP);

               END IF;

               
               
               
               IF UNAPIEV.P_EQSC_EQ <> '-' AND
                  UNAPIEV.P_EQSC_EVALEQLC = TRUE THEN
                  UNAPIEV.P_EQ := UNAPIEV.P_EQSC_EQ;
                  UNAPIEV.P_LAB := UNAPIEV.P_EQSC_LAB;
                  
                  UNAPIEV.P_VERSION := UNVERSION.P_NO_VERSION;
                                 
                  UNAPIEV.P_EV_REC.OBJECT_TP := 'eq';
                  UNAPIEV.P_EV_REC.OBJECT_ID := UNAPIEV.P_EQ;
                  UNAPIEV.P_EV_REC.OBJECT_LC := '';
                  UNAPIEV.P_EV_REC.OBJECT_LC_VERSION := '';
                  UNAPIEV.P_EV_REC.OBJECT_SS := '';
                  UNAPIEV.P_SS_TO := '';

                  L_TRANSITION_OK := UNAPIEV.EVALLIFECYCLE(UNAPIEV.P_SS_TO, UNAPIEV.P_TR_NO);

                  
                  IF L_TRANSITION_OK = UNAPIGEN.DBERR_SUCCESS THEN
                     UNAPIEV.P_EV_TR_COUNT := UNAPIEV.P_EV_TR.COUNT + 1;
                     UNAPIEV.P_EV_TR(UNAPIEV.P_EV_TR_COUNT).TP         := 'eq';
                     UNAPIEV.P_EV_TR(UNAPIEV.P_EV_TR_COUNT).ID         := UNAPIEV.P_EV_REC.OBJECT_ID;
                     UNAPIEV.P_EV_TR(UNAPIEV.P_EV_TR_COUNT).LC         := UNAPIEV.P_EV_REC.OBJECT_LC;
                     UNAPIEV.P_EV_TR(UNAPIEV.P_EV_TR_COUNT).LC_VERSION := UNAPIEV.P_EV_REC.OBJECT_LC_VERSION;
                     UNAPIEV.P_EV_TR(UNAPIEV.P_EV_TR_COUNT).SS_FROM    := UNAPIEV.P_EV_REC.OBJECT_SS;
                     UNAPIEV.P_EV_TR(UNAPIEV.P_EV_TR_COUNT).SS_TO      := UNAPIEV.P_SS_TO;
                     UNAPIEV.P_EV_TR(UNAPIEV.P_EV_TR_COUNT).TR_NO      := UNAPIEV.P_TR_NO;
                     UNAPIEV.P_EV_TR(UNAPIEV.P_EV_TR_COUNT).LC_SS_FROM := UNAPIEV.P_LC_SS_FROM;
                     UNAPIEV.P_EV_TR(UNAPIEV.P_EV_TR_COUNT).EV_DETAILS := 
                        'version='||UNAPIEV.P_VERSION;
                  END IF;

                  UNAPIEV.UPDATEOBJECTRECORD(UNAPIEV.P_SS_TO);
                  L_RET_CODE := UNAPIEV.EXECUTETRACTIONS(UNAPIEV.P_EV_REC.OBJECT_SS,UNAPIEV.P_SS_TO,
                                                 UNAPIEV.P_TR_NO, L_TRANSITION_OK);

               END IF;

               SAVEPOINT_UNILAB4; 
                                  
               IF UNAPIEV.P_EV_REC.EV_TP <> 'IgnoreThisEvent' THEN
                  
                  
                  
                  
                  
                  
                  UNAPIEV.P_EV_REC.TR_SEQ            := L_EVENTS_REC.TR_SEQ;
                  UNAPIEV.P_EV_REC.EV_SEQ            := L_EVENTS_REC.EV_SEQ;
                  UNAPIEV.P_EV_REC.CREATED_ON        := L_EVENTS_REC.CREATED_ON;
                  UNAPIEV.P_EV_REC.CLIENT_ID         := L_EVENTS_REC.CLIENT_ID;
                  UNAPIEV.P_EV_REC.APPLIC            := L_EVENTS_REC.APPLIC;
                  UNAPIEV.P_EV_REC.DBAPI_NAME        := L_EVENTS_REC.DBAPI_NAME;
                  UNAPIEV.P_EV_REC.EVMGR_NAME        := L_EVENTS_REC.EVMGR_NAME;
                  UNAPIEV.P_EV_REC.OBJECT_TP         := L_EVENTS_REC.OBJECT_TP;
                  UNAPIEV.P_EV_REC.OBJECT_ID         := L_EVENTS_REC.OBJECT_ID;
                  UNAPIEV.P_EV_REC.OBJECT_LC         := L_EVENTS_REC.OBJECT_LC;
                  UNAPIEV.P_EV_REC.OBJECT_LC_VERSION := L_EVENTS_REC.OBJECT_LC_VERSION;
                  UNAPIEV.P_EV_REC.OBJECT_SS         := L_EVENTS_REC.OBJECT_SS;
                  UNAPIEV.P_EV_REC.EV_TP             := L_EVENTS_REC.EV_TP;
                  UNAPIEV.P_EV_REC.USERNAME          := L_EVENTS_REC.USERNAME;
                  UNAPIEV.P_EV_REC.EV_DETAILS        := L_EVENTS_REC.EV_DETAILS;   

                  
                  L_RESULT := UNAPIEV.EVALUATEEVENTRULES(LI_RULES_LOADED);
                  IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
                     INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
                     VALUES(UNAPIEV.P_EV_REC.CLIENT_ID, UNAPIEV.P_EV_REC.APPLIC, UNAPIGEN.P_USER, L_CURRENT_TIMESTAMP,  L_CURRENT_TIMESTAMP,
                            SUBSTR('Ev~'||TO_CHAR(L_EVENTS_REC.EV_SEQ)||'~'|| 
                            UNAPIEV.P_EV_REC.EV_TP,1,40), 'EvaluateEventRules#return=' || TO_CHAR(L_RESULT));
                  END IF;
               END IF;
            END IF;

            IF UNAPIGEN.P_LOG_EV THEN
               INSERT INTO UTEVLOG
               (TR_SEQ, EV_SEQ, EV_SESSION, 
                CREATED_ON,  CREATED_ON_TZ,  CLIENT_ID, APPLIC, DBAPI_NAME, 
                EVMGR_NAME, OBJECT_TP, OBJECT_ID, OBJECT_LC, OBJECT_LC_VERSION, 
                OBJECT_SS, EV_TP, USERNAME, EV_DETAILS, EXECUTED_ON, EXECUTED_ON_TZ, INSTANCE_NUMBER )
               VALUES
               (L_EVENTS_REC.TR_SEQ, L_EVENTS_REC.EV_SEQ, UNAPIEV.L_EV_SESSION,
                L_EVENTS_REC.CREATED_ON, L_EVENTS_REC.CREATED_ON, L_EVENTS_REC.CLIENT_ID, 
                L_EVENTS_REC.APPLIC, L_EVENTS_REC.DBAPI_NAME,
                UNAPIGEN.P_EVMGR_NAME,
                L_EVENTS_REC.OBJECT_TP, L_EVENTS_REC.OBJECT_ID,
                L_EVENTS_REC.OBJECT_LC, L_EVENTS_REC.OBJECT_LC_VERSION, L_EVENTS_REC.OBJECT_SS,
                L_EVENTS_REC.EV_TP, L_EVENTS_REC.USERNAME,
                L_EVENTS_REC.EV_DETAILS, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, UNAPIGEN.P_INSTANCENR);
            END IF;
            EXCEPTION
            WHEN OTHERS THEN
               IF SQLCODE <> 1 THEN
                  L_SQLERRM := SUBSTR(SQLERRM,1,255);
               ELSIF L_SQLERRM IS NULL THEN
                  L_SQLERRM := SUBSTR(SQLERRM,1,255);
               END IF;
               INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ,
                                   API_NAME, ERROR_MSG)
               VALUES(UNAPIEV.P_EV_REC.CLIENT_ID, UNAPIEV.P_EV_REC.APPLIC, UNAPIGEN.P_USER, L_CURRENT_TIMESTAMP, L_CURRENT_TIMESTAMP,
                      SUBSTR('Ev~'||TO_CHAR(L_EVENTS_REC.EV_SEQ)||'~'||UNAPIEV.P_EV_REC.EV_TP,1,40), L_SQLERRM);   

               
               L_RESULT := UNAPIAUT.DISABLEALLOWMODIFYCHECK('0');
               IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
                  INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
                  VALUES(UNAPIEV.P_EV_REC.CLIENT_ID, UNAPIEV.P_EV_REC.APPLIC, UNAPIGEN.P_USER, L_CURRENT_TIMESTAMP, L_CURRENT_TIMESTAMP,
                         SUBSTR('Ev~'||TO_CHAR(L_EVENTS_REC.EV_SEQ)||'~'|| 
                         UNAPIEV.P_EV_REC.EV_TP,1,40), 'DisableAllowModifyCheck(0)#return=' || TO_CHAR(L_RESULT));
               END IF;               
               IF SQLCODE = -60 THEN
                  
                  UNAPIGEN.P_DEADLOCK_RAISED := TRUE;
               END IF;               
            END;
            IF NOT UNAPIGEN.P_DEADLOCK_RAISED THEN 
               EXIT;
            ELSIF UNAPIGEN.P_DEADLOCK_COUNT >= (UNAPIGEN.P_MAX_DEADLOCK_COUNT-1) THEN 
               
               INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ,
                                   API_NAME, ERROR_MSG)
               VALUES(UNAPIEV.P_EV_REC.CLIENT_ID, UNAPIEV.P_EV_REC.APPLIC, UNAPIGEN.P_USER, L_CURRENT_TIMESTAMP, L_CURRENT_TIMESTAMP,
                      SUBSTR('Ev~'||TO_CHAR(L_EVENTS_REC.EV_SEQ)||'~'||UNAPIEV.P_EV_REC.EV_TP,1,40), 
                      'Deadlock raised '||UNAPIGEN.P_MAX_DEADLOCK_COUNT||' times for the same event, event skipped');   
               EXIT;
            ELSE
               UNAPIGEN.P_DEADLOCK_COUNT := UNAPIGEN.P_DEADLOCK_COUNT + 1;
               BEGIN
                  ROLLB2SAVEPOINT_STARTEVPROC;
               EXCEPTION
               WHEN OTHERS THEN
                  INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ,
                                      API_NAME, ERROR_MSG)
                  VALUES(UNAPIEV.P_EV_REC.CLIENT_ID, UNAPIEV.P_EV_REC.APPLIC, UNAPIGEN.P_USER, L_CURRENT_TIMESTAMP, L_CURRENT_TIMESTAMP,
                         SUBSTR('Ev~'||TO_CHAR(L_EVENTS_REC.EV_SEQ)||'~'||UNAPIEV.P_EV_REC.EV_TP,1,40), 
                         'Deadlock raised but COMMIT/ROLLBACK took place, can not use ROLLBACK TO SAVEPOINT UNILAB4_STARTEVENTPROCESSING (review COMMIT/ROLLBACK usage in custom packages)');   
               END;
               INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ,
                                   API_NAME, ERROR_MSG)
               VALUES(UNAPIEV.P_EV_REC.CLIENT_ID, UNAPIEV.P_EV_REC.APPLIC, UNAPIGEN.P_USER, L_CURRENT_TIMESTAMP, L_CURRENT_TIMESTAMP,
                      SUBSTR('Ev~'||TO_CHAR(L_EVENTS_REC.EV_SEQ)||'~'||UNAPIEV.P_EV_REC.EV_TP,1,40), 
                      'Deadlock raised '||UNAPIGEN.P_DEADLOCK_COUNT||' times for the same event, retrying');   
               UNAPIGEN.U4COMMIT;
               DBMS_LOCK.SLEEP(UNAPIGEN.P_SLEEP_AFTER_DEADLOCK);
            END IF;
         END LOOP;
      UNAPIGEN.U4COMMIT;
   END LOOP;
   IF UNAPIEV.P_EVMGRS_1QBYINSTANCE = '0' THEN
      CLOSE L_EVENTS_CURSOR;
      DELETE FROM UTEV 
      WHERE EVMGR_NAME='1'
        AND TR_SEQ=UNAPIEV.P_CURRENT_TXN_SEQ;
   ELSE
      CLOSE L_EVREF_CURSOR;
      EXECUTE IMMEDIATE 'DELETE FROM utev'||UNAPIGEN.P_INSTANCENR||' WHERE evmgr_name=''1'' AND tr_seq=:txn_seq'
      USING UNAPIEV.P_CURRENT_TXN_SEQ;
   END IF;   
   UNAPIGEN.U4COMMIT;   

   IF DBMS_SQL.IS_OPEN(UNAPIEV.L_OBJ_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(UNAPIEV.L_OBJ_CURSOR);
   END IF;







   
   
   
   
   UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SUCCESS;
   IF UNAPIGEN.P_TXN_LEVEL > 1 THEN
      UNAPIGEN.P_TXN_LEVEL := 1;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIEV.P_EV_REC.CLIENT_ID, UNAPIEV.P_EV_REC.APPLIC, UNAPIGEN.P_USER, L_CURRENT_TIMESTAMP, L_CURRENT_TIMESTAMP,
             SUBSTR('Ev~'||TO_CHAR(L_EVENTS_REC.EV_SEQ)||'~'|| UNAPIEV.P_EV_REC.EV_TP,1,40),
             'Warning ! The BeginTxn/EndTxn semaphore has an abnormal value, forced to 1 for a correct processing of secondary events');
   END IF;
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIEV.P_EV_REC.CLIENT_ID, UNAPIEV.P_EV_REC.APPLIC, UNAPIGEN.P_USER, L_CURRENT_TIMESTAMP, L_CURRENT_TIMESTAMP,
             SUBSTR('Ev~'||TO_CHAR(L_EVENTS_REC.EV_SEQ)||'~'|| UNAPIEV.P_EV_REC.EV_TP,1,40), 'EndTxn failed');
   END IF;
   
   
   UNAPIEV.P_EV_REC.APPLIC := L_APPLIC_NAME;
   UNAPIEV.P_EV_RECURSIVELEVEL := UNAPIEV.P_EV_RECURSIVELEVEL - 1;
   
   IF UNAPIEV.P_STOPEVMGR THEN
      RETURN(UNAPIGEN.DBERR_STOPEVMGR);   
   ELSE
      RETURN(UNAPIGEN.DBERR_SUCCESS);
   END IF;
   
EXCEPTION
WHEN OTHERS THEN
   L_SQLERRM := SUBSTR(SQLERRM,1,255);
   L_SQLCODE := SQLCODE;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES(UNAPIEV.P_EV_REC.CLIENT_ID, UNAPIEV.P_EV_REC.APPLIC, UNAPIGEN.P_USER, L_CURRENT_TIMESTAMP, L_CURRENT_TIMESTAMP,
          SUBSTR('Ev~'||TO_CHAR(L_EVENTS_REC.EV_SEQ)||'~'||UNAPIEV.P_EV_REC.EV_TP,1,40), L_SQLERRM);
   IF L_EVENTS_CURSOR%ISOPEN THEN
      CLOSE L_EVENTS_CURSOR;
   END IF;
   IF DBMS_SQL.IS_OPEN(UNAPIEV.L_OBJ_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(UNAPIEV.L_OBJ_CURSOR);
   END IF;
   IF L_EVREF_CURSOR%ISOPEN THEN
      CLOSE L_EVREF_CURSOR;
   END IF;
   UNAPIGEN.U4COMMIT;
   UNAPIEV.P_EV_RECURSIVELEVEL := UNAPIEV.P_EV_RECURSIVELEVEL - 1;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'EventManager'));
END EVENTMANAGER;

BEGIN
   LI_RULES_LOADED := '0';
END UNAPIEV2;
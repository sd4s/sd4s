PACKAGE BODY unapirapp AS






STPERROR      EXCEPTION;
L_RET_CODE    INTEGER;
L_SQLERRM     VARCHAR2(255);
L_SQL_STRING  VARCHAR2(2000);
L_SEP         CHAR(1);

FUNCTION GETVERSION
   RETURN VARCHAR2
IS
BEGIN
   RETURN('06.07.00.00_00.13');
EXCEPTION
   WHEN OTHERS THEN
   RETURN (NULL);
END GETVERSION;




PROCEDURE LOGERROR
(A_API IN VARCHAR2, A_ERROR_MSG IN VARCHAR2)
IS
BEGIN
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
           A_API, A_ERROR_MSG);
END LOGERROR;




FUNCTION REMOVEPPFROMARCHIVE
(A_PP IN VARCHAR2, A_VERSION IN VARCHAR2, A_PP_KEY1 IN VARCHAR2, A_PP_KEY2 IN VARCHAR2,
 A_PP_KEY3 IN VARCHAR2, A_PP_KEY4 IN VARCHAR2, A_PP_KEY5 IN VARCHAR2)
RETURN NUMBER IS
BEGIN
   

   DELETE FROM UAUTPP
   WHERE PP = A_PP
   AND VERSION = A_VERSION
   AND PP_KEY1 = A_PP_KEY1
   AND PP_KEY2 = A_PP_KEY2
   AND PP_KEY3 = A_PP_KEY3
   AND PP_KEY4 = A_PP_KEY4
   AND PP_KEY5 = A_PP_KEY5;

   DELETE FROM UAUTPPAU
   WHERE PP = A_PP
   AND VERSION = A_VERSION
   AND PP_KEY1 = A_PP_KEY1
   AND PP_KEY2 = A_PP_KEY2
   AND PP_KEY3 = A_PP_KEY3
   AND PP_KEY4 = A_PP_KEY4
   AND PP_KEY5 = A_PP_KEY5;

   DELETE FROM UAUTPPHS
   WHERE PP = A_PP
   AND VERSION = A_VERSION
   AND PP_KEY1 = A_PP_KEY1
   AND PP_KEY2 = A_PP_KEY2
   AND PP_KEY3 = A_PP_KEY3
   AND PP_KEY4 = A_PP_KEY4
   AND PP_KEY5 = A_PP_KEY5;

   DELETE FROM UAUTPPHSDETAILS
   WHERE PP = A_PP
   AND VERSION = A_VERSION
   AND PP_KEY1 = A_PP_KEY1
   AND PP_KEY2 = A_PP_KEY2
   AND PP_KEY3 = A_PP_KEY3
   AND PP_KEY4 = A_PP_KEY4
   AND PP_KEY5 = A_PP_KEY5;

   DELETE FROM UAUTPPPR
   WHERE PP = A_PP
   AND VERSION = A_VERSION
   AND PP_KEY1 = A_PP_KEY1
   AND PP_KEY2 = A_PP_KEY2
   AND PP_KEY3 = A_PP_KEY3
   AND PP_KEY4 = A_PP_KEY4
   AND PP_KEY5 = A_PP_KEY5;

   DELETE FROM UAUTPPPRAU
   WHERE PP = A_PP
   AND VERSION = A_VERSION
   AND PP_KEY1 = A_PP_KEY1
   AND PP_KEY2 = A_PP_KEY2
   AND PP_KEY3 = A_PP_KEY3
   AND PP_KEY4 = A_PP_KEY4
   AND PP_KEY5 = A_PP_KEY5;

   DELETE FROM UAUTPPSPA
   WHERE PP = A_PP
   AND VERSION = A_VERSION
   AND PP_KEY1 = A_PP_KEY1
   AND PP_KEY2 = A_PP_KEY2
   AND PP_KEY3 = A_PP_KEY3
   AND PP_KEY4 = A_PP_KEY4
   AND PP_KEY5 = A_PP_KEY5;

   DELETE FROM UAUTPPSPB
   WHERE PP = A_PP
   AND VERSION = A_VERSION
   AND PP_KEY1 = A_PP_KEY1
   AND PP_KEY2 = A_PP_KEY2
   AND PP_KEY3 = A_PP_KEY3
   AND PP_KEY4 = A_PP_KEY4
   AND PP_KEY5 = A_PP_KEY5;

   DELETE FROM UAUTPPSPC
   WHERE PP = A_PP
   AND VERSION = A_VERSION
   AND PP_KEY1 = A_PP_KEY1
   AND PP_KEY2 = A_PP_KEY2
   AND PP_KEY3 = A_PP_KEY3
   AND PP_KEY4 = A_PP_KEY4
   AND PP_KEY5 = A_PP_KEY5;

   RETURN(UNAPIGEN.DBERR_SUCCESS);
END REMOVEPPFROMARCHIVE;




FUNCTION COPYPPTOARCHDB
(A_PP IN VARCHAR2, A_VERSION IN VARCHAR2, A_PP_KEY1 IN VARCHAR2, A_PP_KEY2 IN VARCHAR2,
 A_PP_KEY3 IN VARCHAR2, A_PP_KEY4 IN VARCHAR2, A_PP_KEY5 IN VARCHAR2,
 A_IGNORE_DUP_VAL_ON_INDEX BOOLEAN)
RETURN NUMBER IS
BEGIN
   
   EXECUTE IMMEDIATE
   'INSERT INTO uautpp' ||
   UNAPIRA.LISTALLCOLUMNS('utpp', 'BRACKETS', '1') ||
   ' SELECT '||   UNAPIRA.LISTALLCOLUMNS('utpp', 'NO_BRACKETS', '1') ||
   ' FROM utpp' ||
   ' WHERE pp = '''||A_PP||''''||
   ' AND version = '''||A_VERSION||''''||
   ' AND pp_key1 = '''||A_PP_KEY1||''''||
   ' AND pp_key2 = '''||A_PP_KEY2||''''||
   ' AND pp_key3 = '''||A_PP_KEY3||''''||
   ' AND pp_key4 = '''||A_PP_KEY4||''''||
   ' AND pp_key5 = '''||A_PP_KEY5||'''';
   INSERT INTO UAUTPPAU
      (PP, VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, AU, AU_VERSION,
      AUSEQ, VALUE)
   SELECT  PP, VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, AU, AU_VERSION,
      AUSEQ, VALUE
   FROM UTPPAU
   WHERE PP = A_PP
   AND VERSION = A_VERSION
   AND PP_KEY1 = A_PP_KEY1
   AND PP_KEY2 = A_PP_KEY2
   AND PP_KEY3 = A_PP_KEY3
   AND PP_KEY4 = A_PP_KEY4
   AND PP_KEY5 = A_PP_KEY5;
   INSERT INTO UAUTPPHS
      (PP, VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, WHO,
      WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ,
      EV_SEQ)
   SELECT  PP, VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, WHO,
      WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ,
      EV_SEQ
   FROM UTPPHS
   WHERE PP = A_PP
   AND VERSION = A_VERSION
   AND PP_KEY1 = A_PP_KEY1
   AND PP_KEY2 = A_PP_KEY2
   AND PP_KEY3 = A_PP_KEY3
   AND PP_KEY4 = A_PP_KEY4
   AND PP_KEY5 = A_PP_KEY5;
   INSERT INTO UAUTPPHSDETAILS
      (PP, VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, TR_SEQ, EV_SEQ,
      SEQ, DETAILS)
   SELECT  PP, VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, TR_SEQ, EV_SEQ,
      SEQ, DETAILS
   FROM UTPPHSDETAILS
   WHERE PP = A_PP
   AND VERSION = A_VERSION
   AND PP_KEY1 = A_PP_KEY1
   AND PP_KEY2 = A_PP_KEY2
   AND PP_KEY3 = A_PP_KEY3
   AND PP_KEY4 = A_PP_KEY4
   AND PP_KEY5 = A_PP_KEY5;
   INSERT INTO UAUTPPPR
      (PP, VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, PR, PR_VERSION,
      SEQ, NR_MEASUR, UNIT, FORMAT, DELAY, DELAY_UNIT, ALLOW_ADD, IS_PP, FREQ_TP,
      FREQ_VAL, FREQ_UNIT, INVERT_FREQ, ST_BASED_FREQ, LAST_SCHED, LAST_SCHED_TZ,
      LAST_CNT, LAST_VAL, INHERIT_AU, MT, MT_VERSION, MT_NR_MEASUR)
   SELECT  PP, VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, PR, PR_VERSION,
      SEQ, NR_MEASUR, UNIT, FORMAT, DELAY, DELAY_UNIT, ALLOW_ADD, IS_PP, FREQ_TP,
      FREQ_VAL, FREQ_UNIT, INVERT_FREQ, ST_BASED_FREQ, LAST_SCHED, LAST_SCHED_TZ,
      LAST_CNT, LAST_VAL, INHERIT_AU, MT, MT_VERSION, MT_NR_MEASUR
   FROM UTPPPR
   WHERE PP = A_PP
   AND VERSION = A_VERSION
   AND PP_KEY1 = A_PP_KEY1
   AND PP_KEY2 = A_PP_KEY2
   AND PP_KEY3 = A_PP_KEY3
   AND PP_KEY4 = A_PP_KEY4
   AND PP_KEY5 = A_PP_KEY5;
   INSERT INTO UAUTPPPRAU
      (PP, VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, PR, PR_VERSION, AU,
      AU_VERSION, AUSEQ, VALUE)
   SELECT  PP, VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, PR, PR_VERSION, AU,
      AU_VERSION, AUSEQ, VALUE
   FROM UTPPPRAU
   WHERE PP = A_PP
   AND VERSION = A_VERSION
   AND PP_KEY1 = A_PP_KEY1
   AND PP_KEY2 = A_PP_KEY2
   AND PP_KEY3 = A_PP_KEY3
   AND PP_KEY4 = A_PP_KEY4
   AND PP_KEY5 = A_PP_KEY5;
   INSERT INTO UAUTPPSPA
      (PP, VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, PR, PR_VERSION,
      SEQ, LOW_LIMIT, HIGH_LIMIT, LOW_SPEC, HIGH_SPEC, LOW_DEV, REL_LOW_DEV, TARGET,
      HIGH_DEV, REL_HIGH_DEV)
   SELECT  PP, VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, PR, PR_VERSION,
      SEQ, LOW_LIMIT, HIGH_LIMIT, LOW_SPEC, HIGH_SPEC, LOW_DEV, REL_LOW_DEV, TARGET,
      HIGH_DEV, REL_HIGH_DEV
   FROM UTPPSPA
   WHERE PP = A_PP
   AND VERSION = A_VERSION
   AND PP_KEY1 = A_PP_KEY1
   AND PP_KEY2 = A_PP_KEY2
   AND PP_KEY3 = A_PP_KEY3
   AND PP_KEY4 = A_PP_KEY4
   AND PP_KEY5 = A_PP_KEY5;
   INSERT INTO UAUTPPSPB
      (PP, VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, PR, PR_VERSION,
      SEQ, LOW_LIMIT, HIGH_LIMIT, LOW_SPEC, HIGH_SPEC, LOW_DEV, REL_LOW_DEV, TARGET,
      HIGH_DEV, REL_HIGH_DEV)
   SELECT  PP, VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, PR, PR_VERSION,
      SEQ, LOW_LIMIT, HIGH_LIMIT, LOW_SPEC, HIGH_SPEC, LOW_DEV, REL_LOW_DEV, TARGET,
      HIGH_DEV, REL_HIGH_DEV
   FROM UTPPSPB
   WHERE PP = A_PP
   AND VERSION = A_VERSION
   AND PP_KEY1 = A_PP_KEY1
   AND PP_KEY2 = A_PP_KEY2
   AND PP_KEY3 = A_PP_KEY3
   AND PP_KEY4 = A_PP_KEY4
   AND PP_KEY5 = A_PP_KEY5;
   INSERT INTO UAUTPPSPC
      (PP, VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, PR, PR_VERSION,
      SEQ, LOW_LIMIT, HIGH_LIMIT, LOW_SPEC, HIGH_SPEC, LOW_DEV, REL_LOW_DEV, TARGET,
      HIGH_DEV, REL_HIGH_DEV)
   SELECT  PP, VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, PR, PR_VERSION,
      SEQ, LOW_LIMIT, HIGH_LIMIT, LOW_SPEC, HIGH_SPEC, LOW_DEV, REL_LOW_DEV, TARGET,
      HIGH_DEV, REL_HIGH_DEV
   FROM UTPPSPC
   WHERE PP = A_PP
   AND VERSION = A_VERSION
   AND PP_KEY1 = A_PP_KEY1
   AND PP_KEY2 = A_PP_KEY2
   AND PP_KEY3 = A_PP_KEY3
   AND PP_KEY4 = A_PP_KEY4
   AND PP_KEY5 = A_PP_KEY5;

   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
   IF A_IGNORE_DUP_VAL_ON_INDEX THEN
      L_RET_CODE := REMOVEPPFROMARCHIVE(A_PP, A_VERSION, A_PP_KEY1, A_PP_KEY2,
                                        A_PP_KEY3, A_PP_KEY4, A_PP_KEY5);
   END IF;
   RETURN(UNAPIGEN.DBERR_NORECORDS);
END COPYPPTOARCHDB;

FUNCTION ARCHIVEPPTODB
(A_PP IN VARCHAR2, A_VERSION IN VARCHAR2, A_PP_KEY1 IN VARCHAR2, A_PP_KEY2 IN VARCHAR2,
 A_PP_KEY3 IN VARCHAR2, A_PP_KEY4 IN VARCHAR2, A_PP_KEY5 IN VARCHAR2)
RETURN NUMBER IS
BEGIN
   L_RET_CODE := COPYPPTOARCHDB(A_PP, A_VERSION, A_PP_KEY1, A_PP_KEY2,
                                A_PP_KEY3, A_PP_KEY4, A_PP_KEY5, TRUE);
   IF L_RET_CODE = UNAPIGEN.DBERR_NORECORDS THEN
      L_RET_CODE := COPYPPTOARCHDB(A_PP, A_VERSION, A_PP_KEY1, A_PP_KEY2,
                                   A_PP_KEY3, A_PP_KEY4, A_PP_KEY5, FALSE);
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         L_SQLERRM := 'CopyPpToArchDB#return='||TO_CHAR(L_RET_CODE)||' for pp='||A_PP||
                      '#version='||A_VERSION||'#pp_key1='||A_PP_KEY1||'#pp_key2='||A_PP_KEY2||
                      '#pp_key3='||A_PP_KEY3||'#pp_key4='||A_PP_KEY4||'#pp_key5='||A_PP_KEY5;
         RAISE STPERROR;
      END IF;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      L_SQLERRM := SUBSTR(SQLERRM,1,200);
   END IF;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
          'ArchivePpToDB', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END ARCHIVEPPTODB;

FUNCTION COPYPPFROMARCHDB
(A_PP IN VARCHAR2, A_VERSION IN VARCHAR2, A_PP_KEY1 IN VARCHAR2, A_PP_KEY2 IN VARCHAR2,
 A_PP_KEY3 IN VARCHAR2, A_PP_KEY4 IN VARCHAR2, A_PP_KEY5 IN VARCHAR2,
 A_IGNORE_DUP_VAL_ON_INDEX BOOLEAN)
RETURN NUMBER IS
BEGIN
   

   EXECUTE IMMEDIATE
   'INSERT INTO utpp'||
   UNAPIRA.LISTALLCOLUMNS('utpp', 'BRACKETS', '1') ||
   ' SELECT '||   UNAPIRA.LISTALLCOLUMNS('utpp', 'NO_BRACKETS', '1') ||
   ' FROM uautpp' ||
   ' WHERE pp = '''||A_PP||'''' ||
   ' AND version = '''||A_VERSION||''''||
   ' AND pp_key1 = '''||A_PP_KEY1||''''||
   ' AND pp_key2 = '''||A_PP_KEY2||''''||
   ' AND pp_key3 = '''||A_PP_KEY3||''''||
   ' AND pp_key4 = '''||A_PP_KEY4||''''||
   ' AND pp_key5 = '''||A_PP_KEY5||'''';

   INSERT INTO UTPPAU
      (PP, VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, AU, AU_VERSION,
      AUSEQ, VALUE)
   SELECT  PP, VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, AU, AU_VERSION,
      AUSEQ, VALUE
   FROM UAUTPPAU
   WHERE PP = A_PP
   AND VERSION = A_VERSION
   AND PP_KEY1 = A_PP_KEY1
   AND PP_KEY2 = A_PP_KEY2
   AND PP_KEY3 = A_PP_KEY3
   AND PP_KEY4 = A_PP_KEY4
   AND PP_KEY5 = A_PP_KEY5;

   INSERT INTO UTPPHS
      (PP, VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, WHO,
      WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ,
      EV_SEQ)
   SELECT  PP, VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, WHO,
      WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ,
      EV_SEQ
   FROM UAUTPPHS
   WHERE PP = A_PP
   AND VERSION = A_VERSION
   AND PP_KEY1 = A_PP_KEY1
   AND PP_KEY2 = A_PP_KEY2
   AND PP_KEY3 = A_PP_KEY3
   AND PP_KEY4 = A_PP_KEY4
   AND PP_KEY5 = A_PP_KEY5;

   INSERT INTO UTPPHSDETAILS
      (PP, VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, TR_SEQ, EV_SEQ,
      SEQ, DETAILS)
   SELECT  PP, VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, TR_SEQ, EV_SEQ,
      SEQ, DETAILS
   FROM UAUTPPHSDETAILS
   WHERE PP = A_PP
   AND VERSION = A_VERSION
   AND PP_KEY1 = A_PP_KEY1
   AND PP_KEY2 = A_PP_KEY2
   AND PP_KEY3 = A_PP_KEY3
   AND PP_KEY4 = A_PP_KEY4
   AND PP_KEY5 = A_PP_KEY5;

   INSERT INTO UTPPPR
      (PP, VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, PR, PR_VERSION,
      SEQ, NR_MEASUR, UNIT, FORMAT, DELAY, DELAY_UNIT, ALLOW_ADD, IS_PP, FREQ_TP,
      FREQ_VAL, FREQ_UNIT, INVERT_FREQ, ST_BASED_FREQ, LAST_SCHED, LAST_SCHED_TZ,
      LAST_CNT, LAST_VAL, INHERIT_AU, MT, MT_VERSION, MT_NR_MEASUR)
   SELECT  PP, VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, PR, PR_VERSION,
      SEQ, NR_MEASUR, UNIT, FORMAT, DELAY, DELAY_UNIT, ALLOW_ADD, IS_PP, FREQ_TP,
      FREQ_VAL, FREQ_UNIT, INVERT_FREQ, ST_BASED_FREQ, LAST_SCHED, LAST_SCHED_TZ,
      LAST_CNT, LAST_VAL, INHERIT_AU, MT, MT_VERSION, MT_NR_MEASUR
   FROM UAUTPPPR
   WHERE PP = A_PP
   AND VERSION = A_VERSION
   AND PP_KEY1 = A_PP_KEY1
   AND PP_KEY2 = A_PP_KEY2
   AND PP_KEY3 = A_PP_KEY3
   AND PP_KEY4 = A_PP_KEY4
   AND PP_KEY5 = A_PP_KEY5;

   INSERT INTO UTPPPRAU
      (PP, VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, PR, PR_VERSION, AU,
      AU_VERSION, AUSEQ, VALUE)
   SELECT  PP, VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, PR, PR_VERSION, AU,
      AU_VERSION, AUSEQ, VALUE
   FROM UAUTPPPRAU
   WHERE PP = A_PP
   AND VERSION = A_VERSION
   AND PP_KEY1 = A_PP_KEY1
   AND PP_KEY2 = A_PP_KEY2
   AND PP_KEY3 = A_PP_KEY3
   AND PP_KEY4 = A_PP_KEY4
   AND PP_KEY5 = A_PP_KEY5;

   INSERT INTO UTPPSPA
      (PP, VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, PR, PR_VERSION,
      SEQ, LOW_LIMIT, HIGH_LIMIT, LOW_SPEC, HIGH_SPEC, LOW_DEV, REL_LOW_DEV, TARGET,
      HIGH_DEV, REL_HIGH_DEV)
   SELECT  PP, VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, PR, PR_VERSION,
      SEQ, LOW_LIMIT, HIGH_LIMIT, LOW_SPEC, HIGH_SPEC, LOW_DEV, REL_LOW_DEV, TARGET,
      HIGH_DEV, REL_HIGH_DEV
   FROM UAUTPPSPA
   WHERE PP = A_PP
   AND VERSION = A_VERSION
   AND PP_KEY1 = A_PP_KEY1
   AND PP_KEY2 = A_PP_KEY2
   AND PP_KEY3 = A_PP_KEY3
   AND PP_KEY4 = A_PP_KEY4
   AND PP_KEY5 = A_PP_KEY5;

   INSERT INTO UTPPSPB
      (PP, VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, PR, PR_VERSION,
      SEQ, LOW_LIMIT, HIGH_LIMIT, LOW_SPEC, HIGH_SPEC, LOW_DEV, REL_LOW_DEV, TARGET,
      HIGH_DEV, REL_HIGH_DEV)
   SELECT  PP, VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, PR, PR_VERSION,
      SEQ, LOW_LIMIT, HIGH_LIMIT, LOW_SPEC, HIGH_SPEC, LOW_DEV, REL_LOW_DEV, TARGET,
      HIGH_DEV, REL_HIGH_DEV
   FROM UAUTPPSPB
   WHERE PP = A_PP
   AND VERSION = A_VERSION
   AND PP_KEY1 = A_PP_KEY1
   AND PP_KEY2 = A_PP_KEY2
   AND PP_KEY3 = A_PP_KEY3
   AND PP_KEY4 = A_PP_KEY4
   AND PP_KEY5 = A_PP_KEY5;

   INSERT INTO UTPPSPC
      (PP, VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, PR, PR_VERSION,
      SEQ, LOW_LIMIT, HIGH_LIMIT, LOW_SPEC, HIGH_SPEC, LOW_DEV, REL_LOW_DEV, TARGET,
      HIGH_DEV, REL_HIGH_DEV)
   SELECT  PP, VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, PR, PR_VERSION,
      SEQ, LOW_LIMIT, HIGH_LIMIT, LOW_SPEC, HIGH_SPEC, LOW_DEV, REL_LOW_DEV, TARGET,
      HIGH_DEV, REL_HIGH_DEV
   FROM UAUTPPSPC
   WHERE PP = A_PP
   AND VERSION = A_VERSION
   AND PP_KEY1 = A_PP_KEY1
   AND PP_KEY2 = A_PP_KEY2
   AND PP_KEY3 = A_PP_KEY3
   AND PP_KEY4 = A_PP_KEY4
   AND PP_KEY5 = A_PP_KEY5;

   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
   IF A_IGNORE_DUP_VAL_ON_INDEX THEN
      L_RET_CODE := REMOVEPPFROMDB(A_PP, A_VERSION, A_PP_KEY1, A_PP_KEY2,
                                   A_PP_KEY3, A_PP_KEY4, A_PP_KEY5);
   END IF;
   RETURN(UNAPIGEN.DBERR_NORECORDS);
END COPYPPFROMARCHDB;

FUNCTION RESTOREPPFROMDB
(A_PP IN VARCHAR2, A_VERSION IN VARCHAR2, A_PP_KEY1 IN VARCHAR2, A_PP_KEY2 IN VARCHAR2,
 A_PP_KEY3 IN VARCHAR2, A_PP_KEY4 IN VARCHAR2, A_PP_KEY5 IN VARCHAR2)
RETURN NUMBER IS
BEGIN
   L_RET_CODE := COPYPPFROMARCHDB(A_PP, A_VERSION, A_PP_KEY1, A_PP_KEY2,
                                  A_PP_KEY3, A_PP_KEY4, A_PP_KEY5, TRUE);
   IF L_RET_CODE = UNAPIGEN.DBERR_NORECORDS THEN
      L_RET_CODE := COPYPPFROMARCHDB(A_PP, A_VERSION, A_PP_KEY1, A_PP_KEY2,
                                     A_PP_KEY3, A_PP_KEY4, A_PP_KEY5, FALSE);
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         L_SQLERRM := 'CopyPpFromArchDB#return='||TO_CHAR(L_RET_CODE)||' for pp='||A_PP||
                      '#version='||A_VERSION||'#pp_key1='||A_PP_KEY1||'#pp_key2='||A_PP_KEY2||
                      '#pp_key3='||A_PP_KEY3||'#pp_key4='||A_PP_KEY4||'#pp_key5='||A_PP_KEY5;
         RAISE STPERROR;
      END IF;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      L_SQLERRM := SUBSTR(SQLERRM,1,200);
   END IF;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
          'RestorePpFromDB', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END RESTOREPPFROMDB;

FUNCTION REMOVEPPFROMDB
(A_PP IN VARCHAR2, A_VERSION IN VARCHAR2, A_PP_KEY1 IN VARCHAR2, A_PP_KEY2 IN VARCHAR2,
 A_PP_KEY3 IN VARCHAR2, A_PP_KEY4 IN VARCHAR2, A_PP_KEY5 IN VARCHAR2)
RETURN NUMBER IS
BEGIN
   

   DELETE FROM UTPP
   WHERE PP = A_PP
   AND VERSION = A_VERSION
   AND PP_KEY1 = A_PP_KEY1
   AND PP_KEY2 = A_PP_KEY2
   AND PP_KEY3 = A_PP_KEY3
   AND PP_KEY4 = A_PP_KEY4
   AND PP_KEY5 = A_PP_KEY5;

   DELETE FROM UTPPAU
   WHERE PP = A_PP
   AND VERSION = A_VERSION
   AND PP_KEY1 = A_PP_KEY1
   AND PP_KEY2 = A_PP_KEY2
   AND PP_KEY3 = A_PP_KEY3
   AND PP_KEY4 = A_PP_KEY4
   AND PP_KEY5 = A_PP_KEY5;

   DELETE FROM UTPPHS
   WHERE PP = A_PP
   AND VERSION = A_VERSION
   AND PP_KEY1 = A_PP_KEY1
   AND PP_KEY2 = A_PP_KEY2
   AND PP_KEY3 = A_PP_KEY3
   AND PP_KEY4 = A_PP_KEY4
   AND PP_KEY5 = A_PP_KEY5;

   DELETE FROM UTPPHSDETAILS
   WHERE PP = A_PP
   AND VERSION = A_VERSION
   AND PP_KEY1 = A_PP_KEY1
   AND PP_KEY2 = A_PP_KEY2
   AND PP_KEY3 = A_PP_KEY3
   AND PP_KEY4 = A_PP_KEY4
   AND PP_KEY5 = A_PP_KEY5;

   DELETE FROM UTPPPR
   WHERE PP = A_PP
   AND VERSION = A_VERSION
   AND PP_KEY1 = A_PP_KEY1
   AND PP_KEY2 = A_PP_KEY2
   AND PP_KEY3 = A_PP_KEY3
   AND PP_KEY4 = A_PP_KEY4
   AND PP_KEY5 = A_PP_KEY5;

   DELETE FROM UTPPPRAU
   WHERE PP = A_PP
   AND VERSION = A_VERSION
   AND PP_KEY1 = A_PP_KEY1
   AND PP_KEY2 = A_PP_KEY2
   AND PP_KEY3 = A_PP_KEY3
   AND PP_KEY4 = A_PP_KEY4
   AND PP_KEY5 = A_PP_KEY5;

   DELETE FROM UTPPSPA
   WHERE PP = A_PP
   AND VERSION = A_VERSION
   AND PP_KEY1 = A_PP_KEY1
   AND PP_KEY2 = A_PP_KEY2
   AND PP_KEY3 = A_PP_KEY3
   AND PP_KEY4 = A_PP_KEY4
   AND PP_KEY5 = A_PP_KEY5;

   DELETE FROM UTPPSPB
   WHERE PP = A_PP
   AND VERSION = A_VERSION
   AND PP_KEY1 = A_PP_KEY1
   AND PP_KEY2 = A_PP_KEY2
   AND PP_KEY3 = A_PP_KEY3
   AND PP_KEY4 = A_PP_KEY4
   AND PP_KEY5 = A_PP_KEY5;

   DELETE FROM UTPPSPC
   WHERE PP = A_PP
   AND VERSION = A_VERSION
   AND PP_KEY1 = A_PP_KEY1
   AND PP_KEY2 = A_PP_KEY2
   AND PP_KEY3 = A_PP_KEY3
   AND PP_KEY4 = A_PP_KEY4
   AND PP_KEY5 = A_PP_KEY5;

   RETURN(UNAPIGEN.DBERR_SUCCESS);
END REMOVEPPFROMDB;

FUNCTION ARCHIVEPPTOFILE
(A_PP IN VARCHAR2, A_VERSION IN VARCHAR2, A_PP_KEY1 IN VARCHAR2, A_PP_KEY2 IN VARCHAR2,
 A_PP_KEY3 IN VARCHAR2, A_PP_KEY4 IN VARCHAR2, A_PP_KEY5 IN VARCHAR2)
RETURN NUMBER IS

CURSOR L_UTPP_CURSOR (A_PP IN VARCHAR2, A_VERSION IN VARCHAR2,
                                               A_PP_KEY1 IN VARCHAR2, A_PP_KEY2 IN VARCHAR2,
                                               A_PP_KEY3 IN VARCHAR2, A_PP_KEY4 IN VARCHAR2,
                                               A_PP_KEY5 IN VARCHAR2) IS
   SELECT * FROM UDPP
   WHERE PP = A_PP
   AND VERSION = A_VERSION
   AND PP_KEY1 = A_PP_KEY1
   AND PP_KEY2 = A_PP_KEY2
   AND PP_KEY3 = A_PP_KEY3
   AND PP_KEY4 = A_PP_KEY4
   AND PP_KEY5 = A_PP_KEY5;

CURSOR L_UTPPAU_CURSOR (A_PP IN VARCHAR2, A_VERSION IN VARCHAR2,
                                               A_PP_KEY1 IN VARCHAR2, A_PP_KEY2 IN VARCHAR2,
                                               A_PP_KEY3 IN VARCHAR2, A_PP_KEY4 IN VARCHAR2,
                                               A_PP_KEY5 IN VARCHAR2) IS
   SELECT * FROM UTPPAU
   WHERE PP = A_PP
   AND VERSION = A_VERSION
   AND PP_KEY1 = A_PP_KEY1
   AND PP_KEY2 = A_PP_KEY2
   AND PP_KEY3 = A_PP_KEY3
   AND PP_KEY4 = A_PP_KEY4
   AND PP_KEY5 = A_PP_KEY5;

CURSOR L_UTPPHS_CURSOR (A_PP IN VARCHAR2, A_VERSION IN VARCHAR2,
                                               A_PP_KEY1 IN VARCHAR2, A_PP_KEY2 IN VARCHAR2,
                                               A_PP_KEY3 IN VARCHAR2, A_PP_KEY4 IN VARCHAR2,
                                               A_PP_KEY5 IN VARCHAR2) IS
   SELECT * FROM UTPPHS
   WHERE PP = A_PP
   AND VERSION = A_VERSION
   AND PP_KEY1 = A_PP_KEY1
   AND PP_KEY2 = A_PP_KEY2
   AND PP_KEY3 = A_PP_KEY3
   AND PP_KEY4 = A_PP_KEY4
   AND PP_KEY5 = A_PP_KEY5;

CURSOR L_UTPPHSDETAILS_CURSOR (A_PP IN VARCHAR2, A_VERSION IN VARCHAR2,
                                               A_PP_KEY1 IN VARCHAR2, A_PP_KEY2 IN VARCHAR2,
                                               A_PP_KEY3 IN VARCHAR2, A_PP_KEY4 IN VARCHAR2,
                                               A_PP_KEY5 IN VARCHAR2) IS
   SELECT * FROM UTPPHSDETAILS
   WHERE PP = A_PP
   AND VERSION = A_VERSION
   AND PP_KEY1 = A_PP_KEY1
   AND PP_KEY2 = A_PP_KEY2
   AND PP_KEY3 = A_PP_KEY3
   AND PP_KEY4 = A_PP_KEY4
   AND PP_KEY5 = A_PP_KEY5;

CURSOR L_UTPPPR_CURSOR (A_PP IN VARCHAR2, A_VERSION IN VARCHAR2,
                                               A_PP_KEY1 IN VARCHAR2, A_PP_KEY2 IN VARCHAR2,
                                               A_PP_KEY3 IN VARCHAR2, A_PP_KEY4 IN VARCHAR2,
                                               A_PP_KEY5 IN VARCHAR2) IS
   SELECT * FROM UTPPPR
   WHERE PP = A_PP
   AND VERSION = A_VERSION
   AND PP_KEY1 = A_PP_KEY1
   AND PP_KEY2 = A_PP_KEY2
   AND PP_KEY3 = A_PP_KEY3
   AND PP_KEY4 = A_PP_KEY4
   AND PP_KEY5 = A_PP_KEY5;

CURSOR L_UTPPPRAU_CURSOR (A_PP IN VARCHAR2, A_VERSION IN VARCHAR2,
                                               A_PP_KEY1 IN VARCHAR2, A_PP_KEY2 IN VARCHAR2,
                                               A_PP_KEY3 IN VARCHAR2, A_PP_KEY4 IN VARCHAR2,
                                               A_PP_KEY5 IN VARCHAR2) IS
   SELECT * FROM UTPPPRAU
   WHERE PP = A_PP
   AND VERSION = A_VERSION
   AND PP_KEY1 = A_PP_KEY1
   AND PP_KEY2 = A_PP_KEY2
   AND PP_KEY3 = A_PP_KEY3
   AND PP_KEY4 = A_PP_KEY4
   AND PP_KEY5 = A_PP_KEY5;

CURSOR L_UTPPSPA_CURSOR (A_PP IN VARCHAR2, A_VERSION IN VARCHAR2,
                                               A_PP_KEY1 IN VARCHAR2, A_PP_KEY2 IN VARCHAR2,
                                               A_PP_KEY3 IN VARCHAR2, A_PP_KEY4 IN VARCHAR2,
                                               A_PP_KEY5 IN VARCHAR2) IS
   SELECT * FROM UTPPSPA
   WHERE PP = A_PP
   AND VERSION = A_VERSION
   AND PP_KEY1 = A_PP_KEY1
   AND PP_KEY2 = A_PP_KEY2
   AND PP_KEY3 = A_PP_KEY3
   AND PP_KEY4 = A_PP_KEY4
   AND PP_KEY5 = A_PP_KEY5;

CURSOR L_UTPPSPB_CURSOR (A_PP IN VARCHAR2, A_VERSION IN VARCHAR2,
                                               A_PP_KEY1 IN VARCHAR2, A_PP_KEY2 IN VARCHAR2,
                                               A_PP_KEY3 IN VARCHAR2, A_PP_KEY4 IN VARCHAR2,
                                               A_PP_KEY5 IN VARCHAR2) IS
   SELECT * FROM UTPPSPB
   WHERE PP = A_PP
   AND VERSION = A_VERSION
   AND PP_KEY1 = A_PP_KEY1
   AND PP_KEY2 = A_PP_KEY2
   AND PP_KEY3 = A_PP_KEY3
   AND PP_KEY4 = A_PP_KEY4
   AND PP_KEY5 = A_PP_KEY5;

CURSOR L_UTPPSPC_CURSOR (A_PP IN VARCHAR2, A_VERSION IN VARCHAR2,
                                               A_PP_KEY1 IN VARCHAR2, A_PP_KEY2 IN VARCHAR2,
                                               A_PP_KEY3 IN VARCHAR2, A_PP_KEY4 IN VARCHAR2,
                                               A_PP_KEY5 IN VARCHAR2) IS
   SELECT * FROM UTPPSPC
   WHERE PP = A_PP
   AND VERSION = A_VERSION
   AND PP_KEY1 = A_PP_KEY1
   AND PP_KEY2 = A_PP_KEY2
   AND PP_KEY3 = A_PP_KEY3
   AND PP_KEY4 = A_PP_KEY4
   AND PP_KEY5 = A_PP_KEY5;

BEGIN
   L_SQLERRM:=NULL;
   UNAPIRA.L_EXCEPTION_STEP :='utpp'||'pp='||A_PP||
                              '#version='||A_VERSION||'#pp_key1='||A_PP_KEY1||
                              '#pp_key2='||A_PP_KEY2||'#pp_key3='||A_PP_KEY3||
                              '#pp_key4='||A_PP_KEY4||'#pp_key5='||A_PP_KEY5;
   FOR L_REC IN L_UTPP_CURSOR(A_PP, A_VERSION, A_PP_KEY1, A_PP_KEY2,
                                                         A_PP_KEY3, A_PP_KEY4, A_PP_KEY5) LOOP
      UNAPIRA3.L_PUTTEXT := 'utpp' || L_SEP ||
      L_REC.PP || L_SEP || L_REC.VERSION || L_SEP || L_REC.PP_KEY1 || L_SEP ||
      L_REC.PP_KEY2 || L_SEP || L_REC.PP_KEY3 || L_SEP ||
      L_REC.PP_KEY4 || L_SEP || L_REC.PP_KEY5 || L_SEP ||
      TO_CHAR(L_REC.EFFECTIVE_FROM,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      TO_CHAR(L_REC.EFFECTIVE_FROM_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      TO_CHAR(L_REC.EFFECTIVE_TILL,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      TO_CHAR(L_REC.EFFECTIVE_TILL_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      L_REC.DESCRIPTION || L_SEP || L_REC.DESCRIPTION2 || L_SEP ||
      L_REC.UNIT || L_SEP || L_REC.FORMAT || L_SEP ||
      L_REC.CONFIRM_ASSIGN || L_SEP || L_REC.ALLOW_ANY_PR || L_SEP ||
      L_REC.NEVER_CREATE_METHODS || L_SEP || L_REC.DELAY || L_SEP ||
      L_REC.DELAY_UNIT || L_SEP || L_REC.IS_TEMPLATE || L_SEP ||
      L_REC.SC_LC || L_SEP || L_REC.SC_LC_VERSION || L_SEP ||
      L_REC.INHERIT_AU || L_SEP || L_REC.LAST_COMMENT || L_SEP ||
      L_REC.PP_CLASS || L_SEP || L_REC.LOG_HS || L_SEP ||
      L_REC.LOG_HS_DETAILS || L_SEP || L_REC.ALLOW_MODIFY || L_SEP ||
      L_REC.ACTIVE || L_SEP || L_REC.LC || L_SEP || L_REC.LC_VERSION || L_SEP ||
      L_REC.SS || L_SEP || L_REC.AR1 || L_SEP || L_REC.AR2 || L_SEP ||
      L_REC.AR3 || L_SEP || L_REC.AR4 || L_SEP || L_REC.AR5 || L_SEP ||
      L_REC.AR6 || L_SEP || L_REC.AR7 || L_SEP || L_REC.AR8 || L_SEP ||
      L_REC.AR9 || L_SEP || L_REC.AR10 || L_SEP || L_REC.AR11 || L_SEP ||
      L_REC.AR12 || L_SEP || L_REC.AR13 || L_SEP || L_REC.AR14 || L_SEP ||
      L_REC.AR15 || L_SEP || L_REC.AR16 || L_SEP || L_REC.AR17 || L_SEP ||
      L_REC.AR18 || L_SEP || L_REC.AR19 || L_SEP || L_REC.AR20 || L_SEP ||
      L_REC.AR21 || L_SEP || L_REC.AR22 || L_SEP || L_REC.AR23 || L_SEP ||
      L_REC.AR24 || L_SEP || L_REC.AR25 || L_SEP || L_REC.AR26 || L_SEP ||
      L_REC.AR27 || L_SEP || L_REC.AR28 || L_SEP || L_REC.AR29 || L_SEP ||
      L_REC.AR30 || L_SEP || L_REC.AR31 || L_SEP || L_REC.AR32 || L_SEP ||
      L_REC.AR33 || L_SEP || L_REC.AR34 || L_SEP || L_REC.AR35 || L_SEP ||
      L_REC.AR36 || L_SEP || L_REC.AR37 || L_SEP || L_REC.AR38 || L_SEP ||
      L_REC.AR39 || L_SEP || L_REC.AR40 || L_SEP || L_REC.AR41 || L_SEP ||
      L_REC.AR42 || L_SEP || L_REC.AR43 || L_SEP || L_REC.AR44 || L_SEP ||
      L_REC.AR45 || L_SEP || L_REC.AR46 || L_SEP || L_REC.AR47 || L_SEP ||
      L_REC.AR48 || L_SEP || L_REC.AR49 || L_SEP || L_REC.AR50 || L_SEP ||
      L_REC.AR51 || L_SEP || L_REC.AR52 || L_SEP || L_REC.AR53 || L_SEP ||
      L_REC.AR54 || L_SEP || L_REC.AR55 || L_SEP || L_REC.AR56 || L_SEP ||
      L_REC.AR57 || L_SEP || L_REC.AR58 || L_SEP || L_REC.AR59 || L_SEP ||
      L_REC.AR60 || L_SEP || L_REC.AR61 || L_SEP || L_REC.AR62 || L_SEP ||
      L_REC.AR63 || L_SEP || L_REC.AR64 || L_SEP || L_REC.AR65 || L_SEP ||
      L_REC.AR66 || L_SEP || L_REC.AR67 || L_SEP || L_REC.AR68 || L_SEP ||
      L_REC.AR69 || L_SEP || L_REC.AR70 || L_SEP || L_REC.AR71 || L_SEP ||
      L_REC.AR72 || L_SEP || L_REC.AR73 || L_SEP || L_REC.AR74 || L_SEP ||
      L_REC.AR75 || L_SEP || L_REC.AR76 || L_SEP || L_REC.AR77 || L_SEP ||
      L_REC.AR78 || L_SEP || L_REC.AR79 || L_SEP || L_REC.AR80 || L_SEP ||
      L_REC.AR81 || L_SEP || L_REC.AR82 || L_SEP || L_REC.AR83 || L_SEP ||
      L_REC.AR84 || L_SEP || L_REC.AR85 || L_SEP || L_REC.AR86 || L_SEP ||
      L_REC.AR87 || L_SEP || L_REC.AR88 || L_SEP || L_REC.AR89 || L_SEP ||
      L_REC.AR90 || L_SEP || L_REC.AR91 || L_SEP || L_REC.AR92 || L_SEP ||
      L_REC.AR93 || L_SEP || L_REC.AR94 || L_SEP || L_REC.AR95 || L_SEP ||
      L_REC.AR96 || L_SEP || L_REC.AR97 || L_SEP || L_REC.AR98 || L_SEP ||
      L_REC.AR99 || L_SEP || L_REC.AR100 || L_SEP || L_REC.AR101 || L_SEP ||
      L_REC.AR102 || L_SEP || L_REC.AR103 || L_SEP || L_REC.AR104 || L_SEP ||
      L_REC.AR105 || L_SEP || L_REC.AR106 || L_SEP || L_REC.AR107 || L_SEP ||
      L_REC.AR108 || L_SEP || L_REC.AR109 || L_SEP || L_REC.AR110 || L_SEP ||
      L_REC.AR111 || L_SEP || L_REC.AR112 || L_SEP || L_REC.AR113 || L_SEP ||
      L_REC.AR114 || L_SEP || L_REC.AR115 || L_SEP || L_REC.AR116 || L_SEP ||
      L_REC.AR117 || L_SEP || L_REC.AR118 || L_SEP || L_REC.AR119 || L_SEP ||
      L_REC.AR120 || L_SEP || L_REC.AR121 || L_SEP || L_REC.AR122 || L_SEP ||
      L_REC.AR123 || L_SEP || L_REC.AR124 || L_SEP || L_REC.AR125 || L_SEP ||
      L_REC.AR126 || L_SEP || L_REC.AR127 || L_SEP || L_REC.AR128;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   UNAPIRA.L_EXCEPTION_STEP :='utppau'||'pp='||A_PP||
                              '#version='||A_VERSION||'#pp_key1='||A_PP_KEY1||
                              '#pp_key2='||A_PP_KEY2||'#pp_key3='||A_PP_KEY3||
                              '#pp_key4='||A_PP_KEY4||'#pp_key5='||A_PP_KEY5;
   FOR L_REC IN L_UTPPAU_CURSOR(A_PP, A_VERSION, A_PP_KEY1, A_PP_KEY2,
                                                         A_PP_KEY3, A_PP_KEY4, A_PP_KEY5) LOOP
      UNAPIRA3.L_PUTTEXT := 'utppau' || L_SEP ||
      L_REC.PP || L_SEP || L_REC.VERSION || L_SEP || L_REC.PP_KEY1 || L_SEP ||
      L_REC.PP_KEY2 || L_SEP || L_REC.PP_KEY3 || L_SEP ||
      L_REC.PP_KEY4 || L_SEP || L_REC.PP_KEY5 || L_SEP || L_REC.AU || L_SEP ||
      L_REC.AU_VERSION || L_SEP || L_REC.AUSEQ || L_SEP || L_REC.VALUE;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   UNAPIRA.L_EXCEPTION_STEP :='utpphs'||'pp='||A_PP||
                              '#version='||A_VERSION||'#pp_key1='||A_PP_KEY1||
                              '#pp_key2='||A_PP_KEY2||'#pp_key3='||A_PP_KEY3||
                              '#pp_key4='||A_PP_KEY4||'#pp_key5='||A_PP_KEY5;
   FOR L_REC IN L_UTPPHS_CURSOR(A_PP, A_VERSION, A_PP_KEY1, A_PP_KEY2,
                                                         A_PP_KEY3, A_PP_KEY4, A_PP_KEY5) LOOP
      UNAPIRA3.L_PUTTEXT := 'utpphs' || L_SEP ||
      L_REC.PP || L_SEP || L_REC.VERSION || L_SEP || L_REC.PP_KEY1 || L_SEP ||
      L_REC.PP_KEY2 || L_SEP || L_REC.PP_KEY3 || L_SEP ||
      L_REC.PP_KEY4 || L_SEP || L_REC.PP_KEY5 || L_SEP || L_REC.WHO || L_SEP ||
      L_REC.WHO_DESCRIPTION || L_SEP || L_REC.WHAT || L_SEP ||
      L_REC.WHAT_DESCRIPTION || L_SEP ||
      TO_CHAR(L_REC.LOGDATE,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      TO_CHAR(L_REC.LOGDATE_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      L_REC.WHY || L_SEP || L_REC.TR_SEQ || L_SEP || L_REC.EV_SEQ;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   UNAPIRA.L_EXCEPTION_STEP :='utpphsdetails'||'pp='||A_PP||
                              '#version='||A_VERSION||'#pp_key1='||A_PP_KEY1||
                              '#pp_key2='||A_PP_KEY2||'#pp_key3='||A_PP_KEY3||
                              '#pp_key4='||A_PP_KEY4||'#pp_key5='||A_PP_KEY5;
   FOR L_REC IN L_UTPPHSDETAILS_CURSOR(A_PP, A_VERSION, A_PP_KEY1, A_PP_KEY2,
                                                         A_PP_KEY3, A_PP_KEY4, A_PP_KEY5) LOOP
      UNAPIRA3.L_PUTTEXT := 'utpphsdetails' || L_SEP ||
      L_REC.PP || L_SEP || L_REC.VERSION || L_SEP || L_REC.PP_KEY1 || L_SEP ||
      L_REC.PP_KEY2 || L_SEP || L_REC.PP_KEY3 || L_SEP ||
      L_REC.PP_KEY4 || L_SEP || L_REC.PP_KEY5 || L_SEP || L_REC.TR_SEQ || L_SEP ||
      L_REC.EV_SEQ || L_SEP || L_REC.SEQ || L_SEP || L_REC.DETAILS;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   UNAPIRA.L_EXCEPTION_STEP :='utpppr'||'pp='||A_PP||
                              '#version='||A_VERSION||'#pp_key1='||A_PP_KEY1||
                              '#pp_key2='||A_PP_KEY2||'#pp_key3='||A_PP_KEY3||
                              '#pp_key4='||A_PP_KEY4||'#pp_key5='||A_PP_KEY5;
   FOR L_REC IN L_UTPPPR_CURSOR(A_PP, A_VERSION, A_PP_KEY1, A_PP_KEY2,
                                                         A_PP_KEY3, A_PP_KEY4, A_PP_KEY5) LOOP
      UNAPIRA3.L_PUTTEXT := 'utpppr' || L_SEP ||
      L_REC.PP || L_SEP || L_REC.VERSION || L_SEP || L_REC.PP_KEY1 || L_SEP ||
      L_REC.PP_KEY2 || L_SEP || L_REC.PP_KEY3 || L_SEP ||
      L_REC.PP_KEY4 || L_SEP || L_REC.PP_KEY5 || L_SEP || L_REC.PR || L_SEP ||
      L_REC.PR_VERSION || L_SEP || L_REC.SEQ || L_SEP ||
      L_REC.NR_MEASUR || L_SEP || L_REC.UNIT || L_SEP || L_REC.FORMAT || L_SEP ||
      L_REC.DELAY || L_SEP || L_REC.DELAY_UNIT || L_SEP ||
      L_REC.ALLOW_ADD || L_SEP || L_REC.IS_PP || L_SEP ||
      L_REC.FREQ_TP || L_SEP || L_REC.FREQ_VAL || L_SEP ||
      L_REC.FREQ_UNIT || L_SEP || L_REC.INVERT_FREQ || L_SEP ||
      L_REC.ST_BASED_FREQ || L_SEP ||
      TO_CHAR(L_REC.LAST_SCHED,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      TO_CHAR(L_REC.LAST_SCHED_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      L_REC.LAST_CNT || L_SEP || L_REC.LAST_VAL || L_SEP ||
      L_REC.INHERIT_AU || L_SEP || L_REC.MT || L_SEP ||
      L_REC.MT_VERSION || L_SEP || L_REC.MT_NR_MEASUR;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   UNAPIRA.L_EXCEPTION_STEP :='utppprau'||'pp='||A_PP||
                              '#version='||A_VERSION||'#pp_key1='||A_PP_KEY1||
                              '#pp_key2='||A_PP_KEY2||'#pp_key3='||A_PP_KEY3||
                              '#pp_key4='||A_PP_KEY4||'#pp_key5='||A_PP_KEY5;
   FOR L_REC IN L_UTPPPRAU_CURSOR(A_PP, A_VERSION, A_PP_KEY1, A_PP_KEY2,
                                                         A_PP_KEY3, A_PP_KEY4, A_PP_KEY5) LOOP
      UNAPIRA3.L_PUTTEXT := 'utppprau' || L_SEP ||
      L_REC.PP || L_SEP || L_REC.VERSION || L_SEP || L_REC.PP_KEY1 || L_SEP ||
      L_REC.PP_KEY2 || L_SEP || L_REC.PP_KEY3 || L_SEP ||
      L_REC.PP_KEY4 || L_SEP || L_REC.PP_KEY5 || L_SEP || L_REC.PR || L_SEP ||
      L_REC.PR_VERSION || L_SEP || L_REC.AU || L_SEP ||
      L_REC.AU_VERSION || L_SEP || L_REC.AUSEQ || L_SEP || L_REC.VALUE;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   UNAPIRA.L_EXCEPTION_STEP :='utppspa'||'pp='||A_PP||
                              '#version='||A_VERSION||'#pp_key1='||A_PP_KEY1||
                              '#pp_key2='||A_PP_KEY2||'#pp_key3='||A_PP_KEY3||
                              '#pp_key4='||A_PP_KEY4||'#pp_key5='||A_PP_KEY5;
   FOR L_REC IN L_UTPPSPA_CURSOR(A_PP, A_VERSION, A_PP_KEY1, A_PP_KEY2,
                                                         A_PP_KEY3, A_PP_KEY4, A_PP_KEY5) LOOP
      UNAPIRA3.L_PUTTEXT := 'utppspa' || L_SEP ||
      L_REC.PP || L_SEP || L_REC.VERSION || L_SEP || L_REC.PP_KEY1 || L_SEP ||
      L_REC.PP_KEY2 || L_SEP || L_REC.PP_KEY3 || L_SEP ||
      L_REC.PP_KEY4 || L_SEP || L_REC.PP_KEY5 || L_SEP || L_REC.PR || L_SEP ||
      L_REC.PR_VERSION || L_SEP || L_REC.SEQ || L_SEP ||
      L_REC.LOW_LIMIT || L_SEP || L_REC.HIGH_LIMIT || L_SEP ||
      L_REC.LOW_SPEC || L_SEP || L_REC.HIGH_SPEC || L_SEP ||
      L_REC.LOW_DEV || L_SEP || L_REC.REL_LOW_DEV || L_SEP ||
      L_REC.TARGET || L_SEP || L_REC.HIGH_DEV || L_SEP ||
      L_REC.REL_HIGH_DEV;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   UNAPIRA.L_EXCEPTION_STEP :='utppspb'||'pp='||A_PP||
                              '#version='||A_VERSION||'#pp_key1='||A_PP_KEY1||
                              '#pp_key2='||A_PP_KEY2||'#pp_key3='||A_PP_KEY3||
                              '#pp_key4='||A_PP_KEY4||'#pp_key5='||A_PP_KEY5;
   FOR L_REC IN L_UTPPSPB_CURSOR(A_PP, A_VERSION, A_PP_KEY1, A_PP_KEY2,
                                                         A_PP_KEY3, A_PP_KEY4, A_PP_KEY5) LOOP
      UNAPIRA3.L_PUTTEXT := 'utppspb' || L_SEP ||
      L_REC.PP || L_SEP || L_REC.VERSION || L_SEP || L_REC.PP_KEY1 || L_SEP ||
      L_REC.PP_KEY2 || L_SEP || L_REC.PP_KEY3 || L_SEP ||
      L_REC.PP_KEY4 || L_SEP || L_REC.PP_KEY5 || L_SEP || L_REC.PR || L_SEP ||
      L_REC.PR_VERSION || L_SEP || L_REC.SEQ || L_SEP ||
      L_REC.LOW_LIMIT || L_SEP || L_REC.HIGH_LIMIT || L_SEP ||
      L_REC.LOW_SPEC || L_SEP || L_REC.HIGH_SPEC || L_SEP ||
      L_REC.LOW_DEV || L_SEP || L_REC.REL_LOW_DEV || L_SEP ||
      L_REC.TARGET || L_SEP || L_REC.HIGH_DEV || L_SEP ||
      L_REC.REL_HIGH_DEV;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   UNAPIRA.L_EXCEPTION_STEP :='utppspc'||'pp='||A_PP||
                              '#version='||A_VERSION||'#pp_key1='||A_PP_KEY1||
                              '#pp_key2='||A_PP_KEY2||'#pp_key3='||A_PP_KEY3||
                              '#pp_key4='||A_PP_KEY4||'#pp_key5='||A_PP_KEY5;
   FOR L_REC IN L_UTPPSPC_CURSOR(A_PP, A_VERSION, A_PP_KEY1, A_PP_KEY2,
                                                         A_PP_KEY3, A_PP_KEY4, A_PP_KEY5) LOOP
      UNAPIRA3.L_PUTTEXT := 'utppspc' || L_SEP ||
      L_REC.PP || L_SEP || L_REC.VERSION || L_SEP || L_REC.PP_KEY1 || L_SEP ||
      L_REC.PP_KEY2 || L_SEP || L_REC.PP_KEY3 || L_SEP ||
      L_REC.PP_KEY4 || L_SEP || L_REC.PP_KEY5 || L_SEP || L_REC.PR || L_SEP ||
      L_REC.PR_VERSION || L_SEP || L_REC.SEQ || L_SEP ||
      L_REC.LOW_LIMIT || L_SEP || L_REC.HIGH_LIMIT || L_SEP ||
      L_REC.LOW_SPEC || L_SEP || L_REC.HIGH_SPEC || L_SEP ||
      L_REC.LOW_DEV || L_SEP || L_REC.REL_LOW_DEV || L_SEP ||
      L_REC.TARGET || L_SEP || L_REC.HIGH_DEV || L_SEP ||
      L_REC.REL_HIGH_DEV;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   UNAPIRA3.U4DATAPUTLINE( ' ');

   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN UTL_FILE.INVALID_PATH THEN
   L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Invalid path';
   UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchivePpToFile', L_SQLERRM, 'UTL_FILE.INVALID_PATH',UNAPIRA.P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_NOOBJECT);

WHEN UTL_FILE.INVALID_MODE THEN
   L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Invalid mode';
   UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchivePpToFile', L_SQLERRM, 'UTL_FILE.INVALID_MODE',UNAPIRA.P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_GENFAIL);

WHEN UTL_FILE.INVALID_FILEHANDLE THEN
   L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Invalid filehandle';
   UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchivePpToFile', L_SQLERRM, 'UTL_FILE.INVALID_FILEHANDLE',UNAPIRA.P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_GENFAIL);

WHEN UTL_FILE.INVALID_OPERATION THEN
   
   L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Invalid operation';
   UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchivePpToFile', L_SQLERRM, 'UTL_FILE.INVALID_OPERATION',UNAPIRA.P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_NOOBJECT);

WHEN UTL_FILE.READ_ERROR THEN
   L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Read error';
   UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchivePpToFile', L_SQLERRM, 'UTL_FILE.READ_ERROR',UNAPIRA.P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_GENFAIL);

WHEN UTL_FILE.WRITE_ERROR THEN
   L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Write error';
   UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchivePpToFile', L_SQLERRM, 'UTL_FILE.WRITE_ERROR',UNAPIRA.P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_GENFAIL);

WHEN UTL_FILE.INTERNAL_ERROR THEN
   L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Internal error';
   UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchivePpToFile', L_SQLERRM, 'UTL_FILE.INTERNAL_ERROR',UNAPIRA.P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_GENFAIL);

WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      L_SQLERRM := SQLERRM;
      UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchivePpToFile', L_SQLERRM, 'UTL_FILE.INTERNAL_ERROR',UNAPIRA.P_CLOSE_CURSOR);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchivePpToFile', L_SQLERRM, 'UTL_FILE.INTERNAL_ERROR',UNAPIRA.P_CLOSE_CURSOR);
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END ARCHIVEPPTOFILE;

BEGIN
   L_SEP:=UNAPIRA.P_INTERNAL_SEP;
END UNAPIRAPP;
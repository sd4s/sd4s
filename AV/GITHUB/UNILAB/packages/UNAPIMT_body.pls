PACKAGE BODY unapimt AS

L_SQLERRM         VARCHAR2(255);
L_SQL_STRING      VARCHAR2(4000);
L_WHERE_CLAUSE    VARCHAR2(1000);
L_EVENT_TP        UTEV.EV_TP%TYPE;
L_RET_CODE        NUMBER;
L_RESULT          NUMBER;
L_FETCHED_ROWS    NUMBER;
L_EV_SEQ_NR       NUMBER;
STPERROR          EXCEPTION;


P_MT_CURSOR                  INTEGER;
P_MTCELL_CURSOR              INTEGER;
P_MTCELLSPIN_CURSOR          INTEGER;
P_MTCELLEQ_CURSOR            INTEGER;
P_MTCELLVAL_CURSOR           INTEGER;
P_MTCELLLIST_CURSOR          INTEGER;

P_SAVEMTCL_CALLS             INTEGER;
P_SAVEMTCLVALUES_CALLS       INTEGER;
P_SAVEMTCLSPIN_CALLS         INTEGER;
P_SAVEMTCLEQ_CALLS           INTEGER;
P_SAVEMTCL_TR_SEQ            INTEGER;
P_SAVEMTCLVALUES_TR_SEQ      INTEGER;
P_SAVEMTCLSPIN_TR_SEQ        INTEGER;
P_SAVEMTCLEQ_TR_SEQ          INTEGER;

FUNCTION GETVERSION
   RETURN VARCHAR2
IS
BEGIN
   RETURN('06.07.00.00_00.13');
EXCEPTION
   WHEN OTHERS THEN
      RETURN (NULL);
END GETVERSION;

FUNCTION GETMETHODLIST
(A_MT                      OUT      UNAPIGEN.VC20_TABLE_TYPE,  
 A_VERSION                 OUT      UNAPIGEN.VC20_TABLE_TYPE,  
 A_VERSION_IS_CURRENT      OUT      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_EFFECTIVE_FROM          OUT      UNAPIGEN.DATE_TABLE_TYPE,  
 A_EFFECTIVE_TILL          OUT      UNAPIGEN.DATE_TABLE_TYPE,  
 A_DESCRIPTION             OUT      UNAPIGEN.VC40_TABLE_TYPE,  
 A_SS                      OUT      UNAPIGEN.VC2_TABLE_TYPE,   
 A_NR_OF_ROWS              IN OUT   NUMBER,                    
 A_WHERE_CLAUSE            IN       VARCHAR2,                  
 A_NEXT_ROWS               IN       NUMBER)                    
RETURN NUMBER IS

L_MT                    VARCHAR2(20);
L_VERSION               VARCHAR2(20);
L_VERSION_IS_CURRENT    CHAR(1);
L_EFFECTIVE_FROM        TIMESTAMP WITH TIME ZONE;
L_EFFECTIVE_TILL        TIMESTAMP WITH TIME ZONE;
L_DESCRIPTION           VARCHAR2(40);
L_SS                    VARCHAR2(2);

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_MT_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_MT_CURSOR);
         P_MT_CURSOR := NULL;
      END IF;
      RETURN(UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_MT_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      IF P_MT_CURSOR IS NULL THEN
         P_MT_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;

      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
         L_WHERE_CLAUSE := 'WHERE active = ''1'' ORDER BY mt, version'; 
      ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
         L_WHERE_CLAUSE := 'WHERE version_is_current = ''1'' '||
                           'AND mt = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                           ''' ORDER BY mt, version'; 
      ELSE
         L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
      END IF;

      L_SQL_STRING := 'SELECT mt, version, nvl(version_is_current,''0''), effective_from, effective_till, description, ss '||
                      'FROM dd' || UNAPIGEN.P_DD || '.uvmt ' || L_WHERE_CLAUSE;
      DBMS_SQL.PARSE(P_MT_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

      DBMS_SQL.DEFINE_COLUMN(P_MT_CURSOR, 1, L_MT, 20);
      DBMS_SQL.DEFINE_COLUMN(P_MT_CURSOR, 2, L_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_MT_CURSOR, 3, L_VERSION_IS_CURRENT, 1);
      DBMS_SQL.DEFINE_COLUMN(P_MT_CURSOR, 4, L_EFFECTIVE_FROM);
      DBMS_SQL.DEFINE_COLUMN(P_MT_CURSOR, 5, L_EFFECTIVE_TILL);
      DBMS_SQL.DEFINE_COLUMN(P_MT_CURSOR, 6, L_DESCRIPTION, 40);
      DBMS_SQL.DEFINE_COLUMN(P_MT_CURSOR, 7, L_SS, 2);
      L_RESULT := DBMS_SQL.EXECUTE(P_MT_CURSOR);
   END IF;

   L_RESULT := DBMS_SQL.FETCH_ROWS(P_MT_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_MT_CURSOR, 1, L_MT);
      DBMS_SQL.COLUMN_VALUE(P_MT_CURSOR, 2, L_VERSION);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_MT_CURSOR, 3, L_VERSION_IS_CURRENT);
      DBMS_SQL.COLUMN_VALUE(P_MT_CURSOR, 4, L_EFFECTIVE_FROM);
      DBMS_SQL.COLUMN_VALUE(P_MT_CURSOR, 5, L_EFFECTIVE_TILL);
      DBMS_SQL.COLUMN_VALUE(P_MT_CURSOR, 6, L_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE(P_MT_CURSOR, 7, L_SS);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_MT(L_FETCHED_ROWS) := L_MT;
      A_VERSION(L_FETCHED_ROWS) := L_VERSION;
      A_VERSION_IS_CURRENT(L_FETCHED_ROWS) := L_VERSION_IS_CURRENT;
      A_EFFECTIVE_FROM(L_FETCHED_ROWS) := L_EFFECTIVE_FROM;
      A_EFFECTIVE_TILL(L_FETCHED_ROWS) := L_EFFECTIVE_TILL;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;
      A_SS(L_FETCHED_ROWS) := L_SS;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_MT_CURSOR);
      END IF;
   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_MT_CURSOR);
       P_MT_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   END IF;

   IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_MT_CURSOR);
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetMethodList', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (P_MT_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (P_MT_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETMETHODLIST;

FUNCTION GETMETHOD
(A_MT                      OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_VERSION                 OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_VERSION_IS_CURRENT      OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_EFFECTIVE_FROM          OUT    UNAPIGEN.DATE_TABLE_TYPE,  
 A_EFFECTIVE_TILL          OUT    UNAPIGEN.DATE_TABLE_TYPE,  
 A_DESCRIPTION             OUT    UNAPIGEN.VC40_TABLE_TYPE,  
 A_DESCRIPTION2            OUT    UNAPIGEN.VC40_TABLE_TYPE,  
 A_UNIT                    OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_EST_COST                OUT    UNAPIGEN.VC40_TABLE_TYPE,  
 A_EST_TIME                OUT    UNAPIGEN.VC40_TABLE_TYPE,  
 A_ACCURACY                OUT    UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_IS_TEMPLATE             OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_CALIBRATION             OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_AUTORECALC              OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_CONFIRM_COMPLETE        OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_AUTO_CREATE_CELLS       OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ME_RESULT_EDITABLE      OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_EXECUTOR                OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_EQ_TP                   OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_SOP                     OUT    UNAPIGEN.VC40_TABLE_TYPE,  
 A_SOP_VERSION             OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_PLAUS_LOW               OUT    UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_PLAUS_HIGH              OUT    UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_WINSIZE_X               OUT    UNAPIGEN.NUM_TABLE_TYPE,   
 A_WINSIZE_Y               OUT    UNAPIGEN.NUM_TABLE_TYPE,   
 A_SC_LC                   OUT    UNAPIGEN.VC2_TABLE_TYPE,   
 A_SC_LC_VERSION           OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_DEF_VAL_TP              OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_DEF_AU_LEVEL            OUT    UNAPIGEN.VC4_TABLE_TYPE,   
 A_DEF_VAL                 OUT    UNAPIGEN.VC40_TABLE_TYPE,  
 A_FORMAT                  OUT    UNAPIGEN.VC40_TABLE_TYPE,  
 A_INHERIT_AU              OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_MT_CLASS                OUT    UNAPIGEN.VC2_TABLE_TYPE,   
 A_LOG_HS                  OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ALLOW_MODIFY            OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ACTIVE                  OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LC                      OUT    UNAPIGEN.VC2_TABLE_TYPE,   
 A_LC_VERSION              OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_SS                      OUT    UNAPIGEN.VC2_TABLE_TYPE,   
 A_NR_OF_ROWS              IN OUT NUMBER,                    
 A_WHERE_CLAUSE            IN     VARCHAR2)                  
RETURN NUMBER IS

L_MT                        VARCHAR2(20);
L_VERSION                   VARCHAR2(20);
L_VERSION_IS_CURRENT        CHAR(1);
L_EFFECTIVE_FROM            TIMESTAMP WITH TIME ZONE;
L_EFFECTIVE_TILL            TIMESTAMP WITH TIME ZONE;
L_DESCRIPTION               VARCHAR2(40);
L_DESCRIPTION2              VARCHAR2(40);
L_UNIT                      VARCHAR2(20);
L_EST_COST                  VARCHAR2(40);
L_EST_TIME                  VARCHAR2(40);
L_ACCURACY                  NUMBER;
L_IS_TEMPLATE               CHAR(1);
L_CALIBRATION               CHAR(1);
L_AUTORECALC                CHAR(1);
L_CONFIRM_COMPLETE          CHAR(1);
L_AUTO_CREATE_CELLS         CHAR(1);
L_ME_RESULT_EDITABLE        CHAR(1);
L_EXECUTOR                  VARCHAR2(20);
L_EQ_TP                     VARCHAR2(20);
L_SOP                       VARCHAR2(40);
L_SOP_VERSION               VARCHAR2(20);
L_PLAUS_LOW                 NUMBER;
L_PLAUS_HIGH                NUMBER;
L_WINSIZE_X                 NUMBER(4);
L_WINSIZE_Y                 NUMBER(4);
L_SC_LC                     VARCHAR2(2);
L_SC_LC_VERSION             VARCHAR2(20);
L_DEF_VAL_TP                CHAR(1);
L_DEF_AU_LEVEL              VARCHAR2(4);
L_DEF_VAL                   VARCHAR2(40);
L_FORMAT                    VARCHAR2(40);
L_INHERIT_AU                CHAR(1);
L_MT_CLASS                  VARCHAR2(2);
L_LOG_HS                    CHAR(1);
L_ALLOW_MODIFY              CHAR(1);
L_ACTIVE                    CHAR(1);
L_LC                        VARCHAR2(2);
L_LC_VERSION                VARCHAR2(20);
L_SS                        VARCHAR2(2);
L_MT_CURSOR                 INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'WHERE active = ''1'' ORDER BY mt, version'; 
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := 'WHERE version_is_current = ''1'' '||
                        'AND mt = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                        ''' ORDER BY mt, version'; 
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_MT_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT mt, version, nvl(version_is_current,''0''), effective_from, effective_till, description, description2, '||
                   'unit, est_cost, est_time, accuracy, is_template, calibration, autorecalc, ' ||
                   'confirm_complete, auto_create_cells, me_result_editable, executor, eq_tp, '||
                   'sop, sop_version, plaus_low, plaus_high, winsize_x, winsize_y, sc_lc, sc_lc_version, ' ||
                   'def_val_tp, def_au_level, def_val, format, inherit_au, mt_class, log_hs, ' ||
                   'allow_modify, active, lc, lc_version, ss ' ||
                   'FROM dd' || UNAPIGEN.P_DD || '.uvmt ' ||
                    L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_MT_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_MT_CURSOR,      1,  L_MT, 20);
   DBMS_SQL.DEFINE_COLUMN(L_MT_CURSOR,      2,  L_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_MT_CURSOR, 3,  L_VERSION_IS_CURRENT, 1);
   DBMS_SQL.DEFINE_COLUMN(L_MT_CURSOR,      4,  L_EFFECTIVE_FROM);
   DBMS_SQL.DEFINE_COLUMN(L_MT_CURSOR,      5,  L_EFFECTIVE_TILL);
   DBMS_SQL.DEFINE_COLUMN(L_MT_CURSOR,      6,  L_DESCRIPTION, 40);
   DBMS_SQL.DEFINE_COLUMN(L_MT_CURSOR,      7,  L_DESCRIPTION2, 40);
   DBMS_SQL.DEFINE_COLUMN(L_MT_CURSOR,      8,  L_UNIT, 20);
   DBMS_SQL.DEFINE_COLUMN(L_MT_CURSOR,      9,  L_EST_COST, 40);
   DBMS_SQL.DEFINE_COLUMN(L_MT_CURSOR,      10, L_EST_TIME, 40);
   DBMS_SQL.DEFINE_COLUMN(L_MT_CURSOR,      11, L_ACCURACY);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_MT_CURSOR, 12, L_IS_TEMPLATE, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_MT_CURSOR, 13, L_CALIBRATION, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_MT_CURSOR, 14, L_AUTORECALC, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_MT_CURSOR, 15, L_CONFIRM_COMPLETE, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_MT_CURSOR, 16, L_AUTO_CREATE_CELLS, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_MT_CURSOR, 17, L_ME_RESULT_EDITABLE, 1);
   DBMS_SQL.DEFINE_COLUMN(L_MT_CURSOR,      18, L_EXECUTOR, 20);
   DBMS_SQL.DEFINE_COLUMN(L_MT_CURSOR,      19, L_EQ_TP, 20);
   DBMS_SQL.DEFINE_COLUMN(L_MT_CURSOR,      20, L_SOP, 40);
   DBMS_SQL.DEFINE_COLUMN(L_MT_CURSOR,      21, L_SOP_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN(L_MT_CURSOR,      22, L_PLAUS_LOW);
   DBMS_SQL.DEFINE_COLUMN(L_MT_CURSOR,      23, L_PLAUS_HIGH);
   DBMS_SQL.DEFINE_COLUMN(L_MT_CURSOR,      24, L_WINSIZE_X);
   DBMS_SQL.DEFINE_COLUMN(L_MT_CURSOR,      25, L_WINSIZE_Y);
   DBMS_SQL.DEFINE_COLUMN(L_MT_CURSOR,      26, L_SC_LC, 2);
   DBMS_SQL.DEFINE_COLUMN(L_MT_CURSOR,      27, L_SC_LC_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_MT_CURSOR, 28, L_DEF_VAL_TP, 1);
   DBMS_SQL.DEFINE_COLUMN(L_MT_CURSOR,      29, L_DEF_AU_LEVEL, 4);
   DBMS_SQL.DEFINE_COLUMN(L_MT_CURSOR,      30, L_DEF_VAL, 40);
   DBMS_SQL.DEFINE_COLUMN(L_MT_CURSOR,      31, L_FORMAT, 40);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_MT_CURSOR, 32, L_INHERIT_AU, 1);
   DBMS_SQL.DEFINE_COLUMN(L_MT_CURSOR,      33, L_MT_CLASS, 2);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_MT_CURSOR, 34, L_LOG_HS, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_MT_CURSOR, 35, L_ALLOW_MODIFY, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_MT_CURSOR, 36, L_ACTIVE, 1);
   DBMS_SQL.DEFINE_COLUMN(L_MT_CURSOR,      37, L_LC, 2);
   DBMS_SQL.DEFINE_COLUMN(L_MT_CURSOR,      38, L_LC_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN(L_MT_CURSOR,      39, L_SS, 2);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_MT_CURSOR);

   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_MT_CURSOR,      1, L_MT);
      DBMS_SQL.COLUMN_VALUE(L_MT_CURSOR,      2, L_VERSION);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_MT_CURSOR, 3, L_VERSION_IS_CURRENT);
      DBMS_SQL.COLUMN_VALUE(L_MT_CURSOR,      4, L_EFFECTIVE_FROM);
      DBMS_SQL.COLUMN_VALUE(L_MT_CURSOR,      5, L_EFFECTIVE_TILL);
      DBMS_SQL.COLUMN_VALUE(L_MT_CURSOR,      6, L_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE(L_MT_CURSOR,      7, L_DESCRIPTION2);
      DBMS_SQL.COLUMN_VALUE(L_MT_CURSOR,      8, L_UNIT);
      DBMS_SQL.COLUMN_VALUE(L_MT_CURSOR,      9, L_EST_COST);
      DBMS_SQL.COLUMN_VALUE(L_MT_CURSOR,      10, L_EST_TIME);
      DBMS_SQL.COLUMN_VALUE(L_MT_CURSOR,      11, L_ACCURACY);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_MT_CURSOR, 12, L_IS_TEMPLATE);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_MT_CURSOR, 13, L_CALIBRATION);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_MT_CURSOR, 14, L_AUTORECALC);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_MT_CURSOR, 15, L_CONFIRM_COMPLETE);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_MT_CURSOR, 16, L_AUTO_CREATE_CELLS);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_MT_CURSOR, 17, L_ME_RESULT_EDITABLE);
      DBMS_SQL.COLUMN_VALUE(L_MT_CURSOR,      18, L_EXECUTOR);
      DBMS_SQL.COLUMN_VALUE(L_MT_CURSOR,      19, L_EQ_TP);
      DBMS_SQL.COLUMN_VALUE(L_MT_CURSOR,      20, L_SOP);
      DBMS_SQL.COLUMN_VALUE(L_MT_CURSOR,      21, L_SOP_VERSION);
      DBMS_SQL.COLUMN_VALUE(L_MT_CURSOR,      22, L_PLAUS_LOW);
      DBMS_SQL.COLUMN_VALUE(L_MT_CURSOR,      23, L_PLAUS_HIGH);
      DBMS_SQL.COLUMN_VALUE(L_MT_CURSOR,      24, L_WINSIZE_X);
      DBMS_SQL.COLUMN_VALUE(L_MT_CURSOR,      25, L_WINSIZE_Y);
      DBMS_SQL.COLUMN_VALUE(L_MT_CURSOR,      26, L_SC_LC);
      DBMS_SQL.COLUMN_VALUE(L_MT_CURSOR,      27, L_SC_LC_VERSION);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_MT_CURSOR, 28, L_DEF_VAL_TP);
      DBMS_SQL.COLUMN_VALUE(L_MT_CURSOR,      29, L_DEF_AU_LEVEL);
      DBMS_SQL.COLUMN_VALUE(L_MT_CURSOR,      30, L_DEF_VAL);
      DBMS_SQL.COLUMN_VALUE(L_MT_CURSOR,      31, L_FORMAT);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_MT_CURSOR, 32, L_INHERIT_AU);
      DBMS_SQL.COLUMN_VALUE(L_MT_CURSOR,      33, L_MT_CLASS);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_MT_CURSOR, 34, L_LOG_HS);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_MT_CURSOR, 35, L_ALLOW_MODIFY);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_MT_CURSOR, 36, L_ACTIVE);
      DBMS_SQL.COLUMN_VALUE(L_MT_CURSOR,      37, L_LC);
      DBMS_SQL.COLUMN_VALUE(L_MT_CURSOR,      38, L_LC_VERSION);
      DBMS_SQL.COLUMN_VALUE(L_MT_CURSOR,      39, L_SS);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_MT(L_FETCHED_ROWS) := L_MT;
      A_VERSION(L_FETCHED_ROWS) := L_VERSION;
      A_VERSION_IS_CURRENT(L_FETCHED_ROWS) := L_VERSION_IS_CURRENT;
      A_EFFECTIVE_FROM(L_FETCHED_ROWS) := L_EFFECTIVE_FROM;
      A_EFFECTIVE_TILL(L_FETCHED_ROWS) := L_EFFECTIVE_TILL;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;
      A_DESCRIPTION2(L_FETCHED_ROWS) := L_DESCRIPTION2;
      A_UNIT(L_FETCHED_ROWS) := L_UNIT;
      A_EST_COST(L_FETCHED_ROWS) := L_EST_COST;
      A_EST_TIME(L_FETCHED_ROWS) := L_EST_TIME;
      A_ACCURACY(L_FETCHED_ROWS) := L_ACCURACY;
      A_IS_TEMPLATE(L_FETCHED_ROWS) := L_IS_TEMPLATE;
      A_CALIBRATION(L_FETCHED_ROWS) := L_CALIBRATION;
      A_AUTORECALC(L_FETCHED_ROWS) := L_AUTORECALC;
      A_CONFIRM_COMPLETE(L_FETCHED_ROWS) := L_CONFIRM_COMPLETE;
      A_AUTO_CREATE_CELLS(L_FETCHED_ROWS) := L_AUTO_CREATE_CELLS;
      A_ME_RESULT_EDITABLE(L_FETCHED_ROWS) := L_ME_RESULT_EDITABLE;
      A_EXECUTOR(L_FETCHED_ROWS) := L_EXECUTOR;
      A_EQ_TP(L_FETCHED_ROWS) := L_EQ_TP;
      A_SOP(L_FETCHED_ROWS) := L_SOP;
      A_SOP_VERSION(L_FETCHED_ROWS) := L_SOP_VERSION;
      A_PLAUS_LOW(L_FETCHED_ROWS) := L_PLAUS_LOW;
      A_PLAUS_HIGH(L_FETCHED_ROWS) := L_PLAUS_HIGH;
      A_WINSIZE_X(L_FETCHED_ROWS) := L_WINSIZE_X;
      A_WINSIZE_Y(L_FETCHED_ROWS) := L_WINSIZE_Y;
      A_SC_LC(L_FETCHED_ROWS) := L_SC_LC;
      A_SC_LC_VERSION(L_FETCHED_ROWS) := L_SC_LC_VERSION;
      A_DEF_VAL_TP(L_FETCHED_ROWS) := L_DEF_VAL_TP;
      A_DEF_AU_LEVEL(L_FETCHED_ROWS) := L_DEF_AU_LEVEL;
      A_DEF_VAL(L_FETCHED_ROWS) := L_DEF_VAL;
      A_FORMAT(L_FETCHED_ROWS) := L_FORMAT;
      A_INHERIT_AU(L_FETCHED_ROWS) := L_INHERIT_AU;
      A_MT_CLASS(L_FETCHED_ROWS) := L_MT_CLASS;
      A_LOG_HS(L_FETCHED_ROWS) := L_LOG_HS;
      A_ALLOW_MODIFY(L_FETCHED_ROWS) := L_ALLOW_MODIFY;
      A_ACTIVE(L_FETCHED_ROWS) := L_ACTIVE;
      A_LC(L_FETCHED_ROWS) := L_LC;
      A_LC_VERSION(L_FETCHED_ROWS) := L_LC_VERSION;
      A_SS(L_FETCHED_ROWS) := L_SS;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_MT_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_MT_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetMethod', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (L_MT_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_MT_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETMETHOD;

FUNCTION GETMTCELL
(A_MT                     OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_VERSION                OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_CELL                   OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_DSP_TITLE              OUT      UNAPIGEN.VC40_TABLE_TYPE,   
 A_DSP_TITLE2             OUT      UNAPIGEN.VC40_TABLE_TYPE,   
 A_VALUE_F                OUT      UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_VALUE_S                OUT      UNAPIGEN.VC40_TABLE_TYPE,   
 A_POS_X                  OUT      UNAPIGEN.NUM_TABLE_TYPE,    
 A_POS_Y                  OUT      UNAPIGEN.NUM_TABLE_TYPE,    
 A_ALIGN                  OUT      UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_CELL_TP                OUT      UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_WINSIZE_X              OUT      UNAPIGEN.NUM_TABLE_TYPE,    
 A_WINSIZE_Y              OUT      UNAPIGEN.NUM_TABLE_TYPE,    
 A_IS_PROTECTED           OUT      UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_MANDATORY              OUT      UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_HIDDEN                 OUT      UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_INPUT_TP               OUT      UNAPIGEN.VC4_TABLE_TYPE,    
 A_INPUT_SOURCE           OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_INPUT_SOURCE_VERSION   OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_INPUT_PP               OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_INPUT_PP_VERSION       OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_INPUT_PR               OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_INPUT_PR_VERSION       OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_INPUT_MT               OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_INPUT_MT_VERSION       OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_DEF_VAL_TP             OUT      UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_DEF_AU_LEVEL           OUT      UNAPIGEN.VC4_TABLE_TYPE,    
 A_SAVE_TP                OUT      UNAPIGEN.VC4_TABLE_TYPE,    
 A_SAVE_PP                OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_SAVE_PP_VERSION        OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_SAVE_PR                OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_SAVE_PR_VERSION        OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_SAVE_MT                OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_SAVE_MT_VERSION        OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_SAVE_EQ_TP             OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_SAVE_ID                OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_SAVE_ID_VERSION        OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_COMPONENT              OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_UNIT                   OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_FORMAT                 OUT      UNAPIGEN.VC40_TABLE_TYPE,   
 A_CALC_TP                OUT      UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_CALC_FORMULA           OUT      UNAPIGEN.VC2000_TABLE_TYPE, 
 A_VALID_CF               OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_MAX_X                  OUT      UNAPIGEN.NUM_TABLE_TYPE,    
 A_MAX_Y                  OUT      UNAPIGEN.NUM_TABLE_TYPE,    
 A_MULTI_SELECT           OUT      UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_CREATE_NEW             OUT      UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_NR_OF_ROWS             IN OUT   NUMBER,                     
 A_WHERE_CLAUSE           IN       VARCHAR2,                   
 A_NEXT_ROWS              IN       NUMBER)                     
RETURN NUMBER IS

L_MT                      VARCHAR2(20);
L_VERSION                 VARCHAR2(20);
L_CELL                    VARCHAR2(20);
L_DSP_TITLE               VARCHAR2(40);
L_DSP_TITLE2              VARCHAR2(40);
L_VALUE_F                 FLOAT;
L_VALUE_S                 VARCHAR2(40);
L_POS_X                   NUMBER(4);
L_POS_Y                   NUMBER(4);
L_ALIGN                   CHAR(1);
L_CELL_TP                 CHAR(1);
L_WINSIZE_X               NUMBER(4);
L_WINSIZE_Y               NUMBER(4);
L_IS_PROTECTED            CHAR(1);
L_MANDATORY               CHAR(1);
L_HIDDEN                  CHAR(1);
L_INPUT_TP                VARCHAR2(4);
L_INPUT_SOURCE            VARCHAR2(20);
L_INPUT_SOURCE_VERSION    VARCHAR2(20);
L_INPUT_PP                VARCHAR2(20);
L_INPUT_PP_VERSION        VARCHAR2(20);
L_INPUT_PR                VARCHAR2(20);
L_INPUT_PR_VERSION        VARCHAR2(20);
L_INPUT_MT                VARCHAR2(20);
L_INPUT_MT_VERSION        VARCHAR2(20);
L_DEF_VAL_TP              CHAR(1);
L_DEF_AU_LEVEL            VARCHAR2(4);
L_SAVE_TP                 VARCHAR2(4);
L_SAVE_PP                 VARCHAR2(20);
L_SAVE_PP_VERSION         VARCHAR2(20);
L_SAVE_PR                 VARCHAR2(20);
L_SAVE_PR_VERSION         VARCHAR2(20);
L_SAVE_MT                 VARCHAR2(20);
L_SAVE_MT_VERSION         VARCHAR2(20);
L_SAVE_EQ_TP              VARCHAR2(20);
L_SAVE_ID                 VARCHAR2(20);
L_SAVE_ID_VERSION         VARCHAR2(20);
L_COMPONENT               VARCHAR2(20);
L_UNIT                    VARCHAR2(20);
L_FORMAT                  VARCHAR2(40);
L_CALC_TP                 CHAR(1);
L_CALC_FORMULA            VARCHAR2(2000);
L_VALID_CF                VARCHAR2(20);
L_MAX_X                   NUMBER(3);
L_MAX_Y                   NUMBER(3);
L_MULTI_SELECT            CHAR(1);
L_CREATE_NEW              CHAR(1);

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;
   
   
   IF A_NEXT_ROWS = -1 THEN
      IF P_MTCELL_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_MTCELL_CURSOR);
         P_MTCELL_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_MTCELL_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN

      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
        L_WHERE_CLAUSE := 'ORDER BY mt, version, seq'; 
      ELSIF UPPER (SUBSTR(A_WHERE_CLAUSE, 1, 6)) <> 'WHERE ' THEN
         L_WHERE_CLAUSE := ', dd'||UNAPIGEN.P_DD||'.uvmt mt WHERE mt.version_is_current = ''1'' '||
                           'AND mtcell.version = mt.version '||   
                           'AND mtcell.mt = mt.mt '||
                           'AND mtcell.mt = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                           ''' ORDER BY mtcell.seq';
      ELSE
          L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
      END IF;

      L_SQL_STRING := 'SELECT mtcell.mt, mtcell.version, mtcell.cell, mtcell.dsp_title, '||
                      'mtcell.dsp_title2, mtcell.value_f, mtcell.value_s, mtcell.pos_x, mtcell.pos_y, ' ||
                      'mtcell.align, mtcell.cell_tp, mtcell.winsize_x, mtcell.winsize_y, '||
                      'mtcell.is_protected, mtcell.mandatory, mtcell.hidden, mtcell.input_tp, '||
                      'mtcell.input_source, mtcell.input_source_version, mtcell.input_pp, '||
                      'mtcell.input_pp_version, mtcell.input_pr, mtcell.input_pr_version, '||
                      'mtcell.input_mt, mtcell.input_mt_version, mtcell.def_val_tp, mtcell.def_au_level, ' ||
                      'mtcell.save_tp, mtcell.save_pp, mtcell.save_pp_version, mtcell.save_pr, '||
                      'mtcell.save_pr_version, mtcell.save_mt, mtcell.save_mt_version, ' ||
                      'mtcell.save_eq_tp, mtcell.save_id, mtcell.save_id_version, '||
                      'mtcell.component, mtcell.unit, mtcell.format, mtcell.calc_tp, mtcell.calc_formula, ' ||
                      'mtcell.valid_cf, mtcell.max_x, mtcell.max_y, mtcell.multi_select, mtcell.create_new ' ||
                      'FROM dd' || UNAPIGEN.P_DD || '.uvmtcell mtcell ' || L_WHERE_CLAUSE;
   
      IF P_MTCELL_CURSOR IS NULL THEN
         P_MTCELL_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;
      DBMS_SQL.PARSE(P_MTCELL_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   
      DBMS_SQL.DEFINE_COLUMN(P_MTCELL_CURSOR,      1, L_MT, 20);
      DBMS_SQL.DEFINE_COLUMN(P_MTCELL_CURSOR,      2, L_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(P_MTCELL_CURSOR,      3, L_CELL, 20);
      DBMS_SQL.DEFINE_COLUMN(P_MTCELL_CURSOR,      4, L_DSP_TITLE, 40);
      DBMS_SQL.DEFINE_COLUMN(P_MTCELL_CURSOR,      5, L_DSP_TITLE2, 40);
      DBMS_SQL.DEFINE_COLUMN(P_MTCELL_CURSOR,      6, L_VALUE_F);
      DBMS_SQL.DEFINE_COLUMN(P_MTCELL_CURSOR,      7, L_VALUE_S, 40);
      DBMS_SQL.DEFINE_COLUMN(P_MTCELL_CURSOR,      8, L_POS_X);
      DBMS_SQL.DEFINE_COLUMN(P_MTCELL_CURSOR,      9, L_POS_Y);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_MTCELL_CURSOR, 10, L_ALIGN, 1);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_MTCELL_CURSOR, 11, L_CELL_TP, 1);
      DBMS_SQL.DEFINE_COLUMN(P_MTCELL_CURSOR,      12, L_WINSIZE_X);
      DBMS_SQL.DEFINE_COLUMN(P_MTCELL_CURSOR,      13, L_WINSIZE_Y);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_MTCELL_CURSOR, 14, L_IS_PROTECTED, 1);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_MTCELL_CURSOR, 15, L_MANDATORY, 1);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_MTCELL_CURSOR, 16, L_HIDDEN, 1);
      DBMS_SQL.DEFINE_COLUMN(P_MTCELL_CURSOR,      17, L_INPUT_TP, 4);
      DBMS_SQL.DEFINE_COLUMN(P_MTCELL_CURSOR,      18, L_INPUT_SOURCE, 20);
      DBMS_SQL.DEFINE_COLUMN(P_MTCELL_CURSOR,      19, L_INPUT_SOURCE_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(P_MTCELL_CURSOR,      20, L_INPUT_PP, 20);
      DBMS_SQL.DEFINE_COLUMN(P_MTCELL_CURSOR,      21, L_INPUT_PP_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(P_MTCELL_CURSOR,      22, L_INPUT_PR, 20);
      DBMS_SQL.DEFINE_COLUMN(P_MTCELL_CURSOR,      23, L_INPUT_PR_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(P_MTCELL_CURSOR,      24, L_INPUT_MT, 20);
      DBMS_SQL.DEFINE_COLUMN(P_MTCELL_CURSOR,      25, L_INPUT_MT_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_MTCELL_CURSOR, 26, L_DEF_VAL_TP, 1);
      DBMS_SQL.DEFINE_COLUMN(P_MTCELL_CURSOR,      27, L_DEF_AU_LEVEL, 4);
      DBMS_SQL.DEFINE_COLUMN(P_MTCELL_CURSOR,      28, L_SAVE_TP, 4);
      DBMS_SQL.DEFINE_COLUMN(P_MTCELL_CURSOR,      29, L_SAVE_PP, 20);
      DBMS_SQL.DEFINE_COLUMN(P_MTCELL_CURSOR,      30, L_SAVE_PP_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(P_MTCELL_CURSOR,      31, L_SAVE_PR, 20);
      DBMS_SQL.DEFINE_COLUMN(P_MTCELL_CURSOR,      32, L_SAVE_PR_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(P_MTCELL_CURSOR,      33, L_SAVE_MT, 20);
      DBMS_SQL.DEFINE_COLUMN(P_MTCELL_CURSOR,      34, L_SAVE_MT_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(P_MTCELL_CURSOR,      35, L_SAVE_EQ_TP, 20);
      DBMS_SQL.DEFINE_COLUMN(P_MTCELL_CURSOR,      36, L_SAVE_ID, 20);
      DBMS_SQL.DEFINE_COLUMN(P_MTCELL_CURSOR,      37, L_SAVE_ID_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(P_MTCELL_CURSOR,      38, L_COMPONENT, 20);
      DBMS_SQL.DEFINE_COLUMN(P_MTCELL_CURSOR,      39, L_UNIT, 20);
      DBMS_SQL.DEFINE_COLUMN(P_MTCELL_CURSOR,      40, L_FORMAT, 40);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_MTCELL_CURSOR, 41, L_CALC_TP, 1);
      DBMS_SQL.DEFINE_COLUMN(P_MTCELL_CURSOR,      42, L_CALC_FORMULA, 2000);
      DBMS_SQL.DEFINE_COLUMN(P_MTCELL_CURSOR,      43, L_VALID_CF, 20);
      DBMS_SQL.DEFINE_COLUMN(P_MTCELL_CURSOR,      44, L_MAX_X);
      DBMS_SQL.DEFINE_COLUMN(P_MTCELL_CURSOR,      45, L_MAX_Y);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_MTCELL_CURSOR, 46, L_MULTI_SELECT, 1);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_MTCELL_CURSOR, 47, L_CREATE_NEW, 1);
      L_RESULT := DBMS_SQL.EXECUTE(P_MTCELL_CURSOR);
   END IF;
   
   L_RESULT := DBMS_SQL.FETCH_ROWS(P_MTCELL_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_MTCELL_CURSOR     ,  1, L_MT);
      DBMS_SQL.COLUMN_VALUE(P_MTCELL_CURSOR     ,  2, L_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_MTCELL_CURSOR     ,  3, L_CELL);
      DBMS_SQL.COLUMN_VALUE(P_MTCELL_CURSOR     ,  4, L_DSP_TITLE);
      DBMS_SQL.COLUMN_VALUE(P_MTCELL_CURSOR     ,  5, L_DSP_TITLE2);
      DBMS_SQL.COLUMN_VALUE(P_MTCELL_CURSOR     ,  6, L_VALUE_F);
      DBMS_SQL.COLUMN_VALUE(P_MTCELL_CURSOR     ,  7, L_VALUE_S);
      DBMS_SQL.COLUMN_VALUE(P_MTCELL_CURSOR     ,  8, L_POS_X);
      DBMS_SQL.COLUMN_VALUE(P_MTCELL_CURSOR     ,  9, L_POS_Y);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_MTCELL_CURSOR, 10, L_ALIGN);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_MTCELL_CURSOR, 11, L_CELL_TP);
      DBMS_SQL.COLUMN_VALUE(P_MTCELL_CURSOR     , 12, L_WINSIZE_X);
      DBMS_SQL.COLUMN_VALUE(P_MTCELL_CURSOR     , 13, L_WINSIZE_Y);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_MTCELL_CURSOR, 14, L_IS_PROTECTED);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_MTCELL_CURSOR, 15, L_MANDATORY);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_MTCELL_CURSOR, 16, L_HIDDEN);
      DBMS_SQL.COLUMN_VALUE(P_MTCELL_CURSOR     , 17, L_INPUT_TP);
      DBMS_SQL.COLUMN_VALUE(P_MTCELL_CURSOR     , 18, L_INPUT_SOURCE);
      DBMS_SQL.COLUMN_VALUE(P_MTCELL_CURSOR     , 19, L_INPUT_SOURCE_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_MTCELL_CURSOR     , 20, L_INPUT_PP);
      DBMS_SQL.COLUMN_VALUE(P_MTCELL_CURSOR     , 21, L_INPUT_PP_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_MTCELL_CURSOR     , 22, L_INPUT_PR);
      DBMS_SQL.COLUMN_VALUE(P_MTCELL_CURSOR     , 23, L_INPUT_PR_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_MTCELL_CURSOR     , 24, L_INPUT_MT);
      DBMS_SQL.COLUMN_VALUE(P_MTCELL_CURSOR     , 25, L_INPUT_MT_VERSION);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_MTCELL_CURSOR, 26, L_DEF_VAL_TP);
      DBMS_SQL.COLUMN_VALUE(P_MTCELL_CURSOR     , 27, L_DEF_AU_LEVEL);
      DBMS_SQL.COLUMN_VALUE(P_MTCELL_CURSOR     , 28, L_SAVE_TP);
      DBMS_SQL.COLUMN_VALUE(P_MTCELL_CURSOR     , 29, L_SAVE_PP);
      DBMS_SQL.COLUMN_VALUE(P_MTCELL_CURSOR     , 30, L_SAVE_PP_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_MTCELL_CURSOR     , 31, L_SAVE_PR);
      DBMS_SQL.COLUMN_VALUE(P_MTCELL_CURSOR     , 32, L_SAVE_PR_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_MTCELL_CURSOR     , 33, L_SAVE_MT);
      DBMS_SQL.COLUMN_VALUE(P_MTCELL_CURSOR     , 34, L_SAVE_MT_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_MTCELL_CURSOR     , 35, L_SAVE_EQ_TP);
      DBMS_SQL.COLUMN_VALUE(P_MTCELL_CURSOR     , 36, L_SAVE_ID);
      DBMS_SQL.COLUMN_VALUE(P_MTCELL_CURSOR     , 37, L_SAVE_ID_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_MTCELL_CURSOR     , 38, L_COMPONENT);
      DBMS_SQL.COLUMN_VALUE(P_MTCELL_CURSOR     , 39, L_UNIT);
      DBMS_SQL.COLUMN_VALUE(P_MTCELL_CURSOR     , 40, L_FORMAT);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_MTCELL_CURSOR, 41, L_CALC_TP);
      DBMS_SQL.COLUMN_VALUE(P_MTCELL_CURSOR     , 42, L_CALC_FORMULA);
      DBMS_SQL.COLUMN_VALUE(P_MTCELL_CURSOR     , 43, L_VALID_CF);
      DBMS_SQL.COLUMN_VALUE(P_MTCELL_CURSOR     , 44, L_MAX_X);
      DBMS_SQL.COLUMN_VALUE(P_MTCELL_CURSOR     , 45, L_MAX_Y);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_MTCELL_CURSOR, 46, L_MULTI_SELECT);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_MTCELL_CURSOR, 47, L_CREATE_NEW);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_MT(L_FETCHED_ROWS) := L_MT;
      A_VERSION(L_FETCHED_ROWS) := L_VERSION;
      A_CELL(L_FETCHED_ROWS) := L_CELL;
      A_DSP_TITLE(L_FETCHED_ROWS) := L_DSP_TITLE;
      A_DSP_TITLE2(L_FETCHED_ROWS) := L_DSP_TITLE2;
      A_VALUE_F(L_FETCHED_ROWS) := L_VALUE_F;
      A_VALUE_S(L_FETCHED_ROWS) := L_VALUE_S;
      A_POS_X(L_FETCHED_ROWS) := L_POS_X;
      A_POS_Y(L_FETCHED_ROWS) := L_POS_Y;
      A_ALIGN(L_FETCHED_ROWS) := L_ALIGN;
      A_CELL_TP(L_FETCHED_ROWS) := L_CELL_TP;
      A_WINSIZE_X(L_FETCHED_ROWS) := L_WINSIZE_X;
      A_WINSIZE_Y(L_FETCHED_ROWS) := L_WINSIZE_Y;
      A_IS_PROTECTED(L_FETCHED_ROWS) := L_IS_PROTECTED;
      A_MANDATORY(L_FETCHED_ROWS) := L_MANDATORY;
      A_HIDDEN(L_FETCHED_ROWS) := L_HIDDEN;
      A_INPUT_TP(L_FETCHED_ROWS) := L_INPUT_TP;
      A_INPUT_SOURCE(L_FETCHED_ROWS) := L_INPUT_SOURCE;
      A_INPUT_SOURCE_VERSION(L_FETCHED_ROWS) := L_INPUT_SOURCE_VERSION;
      A_INPUT_PP(L_FETCHED_ROWS) := L_INPUT_PP;
      A_INPUT_PP_VERSION(L_FETCHED_ROWS) := L_INPUT_PP_VERSION;
      A_INPUT_PR(L_FETCHED_ROWS) := L_INPUT_PR;
      A_INPUT_PR_VERSION(L_FETCHED_ROWS) := L_INPUT_PR_VERSION;
      A_INPUT_MT(L_FETCHED_ROWS) := L_INPUT_MT;
      A_INPUT_MT_VERSION(L_FETCHED_ROWS) := L_INPUT_MT_VERSION;
      A_DEF_VAL_TP(L_FETCHED_ROWS) := L_DEF_VAL_TP;
      A_DEF_AU_LEVEL(L_FETCHED_ROWS) := L_DEF_AU_LEVEL;
      A_SAVE_TP(L_FETCHED_ROWS) := L_SAVE_TP;
      A_SAVE_PP(L_FETCHED_ROWS) := L_SAVE_PP;
      A_SAVE_PP_VERSION(L_FETCHED_ROWS) := L_SAVE_PP_VERSION;
      A_SAVE_PR(L_FETCHED_ROWS) := L_SAVE_PR;
      A_SAVE_PR_VERSION(L_FETCHED_ROWS) := L_SAVE_PR_VERSION;
      A_SAVE_MT(L_FETCHED_ROWS) := L_SAVE_MT;
      A_SAVE_MT_VERSION(L_FETCHED_ROWS) := L_SAVE_MT_VERSION;
      A_SAVE_EQ_TP(L_FETCHED_ROWS) := L_SAVE_EQ_TP;
      A_SAVE_ID(L_FETCHED_ROWS) := L_SAVE_ID;
      A_SAVE_ID_VERSION(L_FETCHED_ROWS) := L_SAVE_ID_VERSION;
      A_COMPONENT(L_FETCHED_ROWS) := L_COMPONENT;
      A_UNIT(L_FETCHED_ROWS) := L_UNIT;
      A_FORMAT(L_FETCHED_ROWS) := L_FORMAT;
      A_CALC_TP(L_FETCHED_ROWS) := L_CALC_TP;
      A_CALC_FORMULA(L_FETCHED_ROWS) := L_CALC_FORMULA;
      A_VALID_CF(L_FETCHED_ROWS) :=  L_VALID_CF;
      A_MAX_X(L_FETCHED_ROWS) := L_MAX_X;
      A_MAX_Y(L_FETCHED_ROWS) := L_MAX_Y;
      A_MULTI_SELECT(L_FETCHED_ROWS) := L_MULTI_SELECT;
      A_CREATE_NEW(L_FETCHED_ROWS) := L_CREATE_NEW;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_MTCELL_CURSOR);
      END IF;
   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_MTCELL_CURSOR);
       P_MTCELL_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_MTCELL_CURSOR);
      P_MTCELL_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;
   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetMtCell', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (P_MTCELL_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (P_MTCELL_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETMTCELL;

FUNCTION GETMTCELLSPIN
(A_MT                  OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_VERSION             OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_CELL                OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_CIRCULAR            OUT      UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_INCR                OUT      UNAPIGEN.NUM_TABLE_TYPE,    
 A_LOW_VAL_TP          OUT      UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_LOW_AU_LEVEL        OUT      UNAPIGEN.VC4_TABLE_TYPE,    
 A_LOW_VAL             OUT      UNAPIGEN.VC40_TABLE_TYPE,   
 A_HIGH_VAL_TP         OUT      UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_HIGH_AU_LEVEL       OUT      UNAPIGEN.VC4_TABLE_TYPE,    
 A_HIGH_VAL            OUT      UNAPIGEN.VC40_TABLE_TYPE,   
 A_NR_OF_ROWS          IN OUT   NUMBER,                     
 A_WHERE_CLAUSE        IN       VARCHAR2,                   
 A_NEXT_ROWS           IN       NUMBER)                     
RETURN NUMBER IS

L_MT                VARCHAR2(20);
L_VERSION           VARCHAR2(20);
L_CELL              VARCHAR2(20);
L_CIRCULAR          CHAR(1);
L_INCR              NUMBER;
L_LOW_VAL_TP        CHAR(1);
L_LOW_AU_LEVEL      VARCHAR2(4);
L_LOW_VAL           VARCHAR2(40);
L_HIGH_VAL_TP       CHAR(1);
L_HIGH_AU_LEVEL     VARCHAR2(4);
L_HIGH_VAL          VARCHAR2(40);
L_MTC_CURSOR        INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;
   
   
   IF A_NEXT_ROWS = -1 THEN
      IF P_MTCELLSPIN_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_MTCELLSPIN_CURSOR);
         P_MTCELLSPIN_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_MTCELLSPIN_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN

      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
         L_WHERE_CLAUSE := 'ORDER BY mt, version, cell'; 
      ELSIF
         UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
         L_WHERE_CLAUSE := ', dd'||UNAPIGEN.P_DD||'.uvmt mt WHERE mt.version_is_current = ''1'' '||
                           'AND spin.version = mt.version '||
                           'AND spin.mt = mt.mt '||
                           'AND spin.mt = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                           ''' ORDER BY spin.cell';
      ELSE
         L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
      END IF;
   
      L_SQL_STRING := 'SELECT spin.mt, spin.version, spin.cell, spin.circular, spin.incr, ' ||
                      'spin.low_val_tp, spin.low_au_level, spin.low_val, spin.high_val_tp, ' ||
                      'spin.high_au_level, spin.high_val ' ||
                      'FROM dd' || UNAPIGEN.P_DD || '.uvmtcellspin spin ' ||
                       L_WHERE_CLAUSE;
      IF P_MTCELLSPIN_CURSOR IS NULL THEN
         P_MTCELLSPIN_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;
                       
      DBMS_SQL.PARSE(P_MTCELLSPIN_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   
      DBMS_SQL.DEFINE_COLUMN(P_MTCELLSPIN_CURSOR, 1, L_MT, 20);
      DBMS_SQL.DEFINE_COLUMN(P_MTCELLSPIN_CURSOR, 2, L_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(P_MTCELLSPIN_CURSOR, 3, L_CELL, 20);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_MTCELLSPIN_CURSOR, 4, L_CIRCULAR, 1);
      DBMS_SQL.DEFINE_COLUMN(P_MTCELLSPIN_CURSOR, 5, L_INCR);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_MTCELLSPIN_CURSOR, 6, L_LOW_VAL_TP, 1);
      DBMS_SQL.DEFINE_COLUMN(P_MTCELLSPIN_CURSOR, 7, L_LOW_AU_LEVEL, 4);
      DBMS_SQL.DEFINE_COLUMN(P_MTCELLSPIN_CURSOR, 8, L_LOW_VAL, 40);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_MTCELLSPIN_CURSOR, 9, L_HIGH_VAL_TP, 1);
      DBMS_SQL.DEFINE_COLUMN(P_MTCELLSPIN_CURSOR, 10, L_HIGH_AU_LEVEL, 4);
      DBMS_SQL.DEFINE_COLUMN(P_MTCELLSPIN_CURSOR, 11, L_HIGH_VAL, 40);
   
      L_RESULT := DBMS_SQL.EXECUTE(P_MTCELLSPIN_CURSOR);
   END IF;
   
   L_RESULT := DBMS_SQL.FETCH_ROWS(P_MTCELLSPIN_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_MTCELLSPIN_CURSOR, 1, L_MT);
      DBMS_SQL.COLUMN_VALUE(P_MTCELLSPIN_CURSOR, 2, L_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_MTCELLSPIN_CURSOR, 3, L_CELL);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_MTCELLSPIN_CURSOR, 4, L_CIRCULAR);
      DBMS_SQL.COLUMN_VALUE(P_MTCELLSPIN_CURSOR, 5, L_INCR);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_MTCELLSPIN_CURSOR, 6, L_LOW_VAL_TP);
      DBMS_SQL.COLUMN_VALUE(P_MTCELLSPIN_CURSOR, 7, L_LOW_AU_LEVEL);
      DBMS_SQL.COLUMN_VALUE(P_MTCELLSPIN_CURSOR, 8, L_LOW_VAL);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_MTCELLSPIN_CURSOR, 9, L_HIGH_VAL_TP);
      DBMS_SQL.COLUMN_VALUE(P_MTCELLSPIN_CURSOR, 10, L_HIGH_AU_LEVEL);
      DBMS_SQL.COLUMN_VALUE(P_MTCELLSPIN_CURSOR, 11, L_HIGH_VAL);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_MT(L_FETCHED_ROWS) := L_MT;
      A_VERSION(L_FETCHED_ROWS) := L_VERSION;
      A_CELL(L_FETCHED_ROWS) := L_CELL;
      A_CIRCULAR(L_FETCHED_ROWS) := L_CIRCULAR;
      A_INCR(L_FETCHED_ROWS) := L_INCR;
      A_LOW_VAL_TP(L_FETCHED_ROWS) := L_LOW_VAL_TP;
      A_LOW_AU_LEVEL(L_FETCHED_ROWS) := L_LOW_AU_LEVEL;
      A_LOW_VAL(L_FETCHED_ROWS) := L_LOW_VAL;
      A_HIGH_VAL_TP(L_FETCHED_ROWS) := L_HIGH_VAL_TP;
      A_HIGH_AU_LEVEL(L_FETCHED_ROWS) := L_HIGH_AU_LEVEL;
      A_HIGH_VAL(L_FETCHED_ROWS) := L_HIGH_VAL;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_MTCELLSPIN_CURSOR);
      END IF;
   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_MTCELLSPIN_CURSOR);
       P_MTCELLSPIN_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_MTCELLSPIN_CURSOR);
      P_MTCELLSPIN_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;
   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
              'GetMtCellSpin', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (P_MTCELLSPIN_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (P_MTCELLSPIN_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETMTCELLSPIN;

FUNCTION GETMTCELLEQTYPE
(A_MT                  OUT      UNAPIGEN.VC20_TABLE_TYPE,    
 A_VERSION             OUT      UNAPIGEN.VC20_TABLE_TYPE,    
 A_CELL                OUT      UNAPIGEN.VC20_TABLE_TYPE,    
 A_EQ_TP               OUT      UNAPIGEN.VC20_TABLE_TYPE,    
 A_NR_OF_ROWS          IN OUT   NUMBER,                      
 A_WHERE_CLAUSE        IN       VARCHAR2,                    
 A_NEXT_ROWS           IN       NUMBER)                      
RETURN NUMBER IS

L_MT           VARCHAR2(20);
L_VERSION      VARCHAR2(20);
L_CELL         VARCHAR2(20);
L_EQ_TP        VARCHAR2(20);
L_MTEQ_CURSOR  INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;
   
   
   IF A_NEXT_ROWS = -1 THEN
      IF P_MTCELLEQ_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_MTCELLEQ_CURSOR);
         P_MTCELLEQ_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_MTCELLEQ_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN

      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
         RETURN(UNAPIGEN.DBERR_WHERECLAUSE);
      ELSIF UPPER (SUBSTR(A_WHERE_CLAUSE, 1, 6)) <> 'WHERE ' THEN
         L_WHERE_CLAUSE := ', dd'||UNAPIGEN.P_DD||'.uvmt mt WHERE mt.version_is_current = ''1'' '||
                           'AND eq.version = mt.version '||
                           'AND eq.mt = mt.mt '||
                           'AND eq.mt = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') ||  
                           ''' ORDER BY eq.cell, eq.seq';
      ELSE
          L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
      END IF;
   
      L_SQL_STRING := 'SELECT eq.mt, eq.version, eq.cell, eq.eq_tp FROM dd' ||
                      UNAPIGEN.P_DD || '.uvmtcelleqtype eq ' || L_WHERE_CLAUSE;
   
      IF P_MTCELLEQ_CURSOR IS NULL THEN
         P_MTCELLEQ_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;
      DBMS_SQL.PARSE(P_MTCELLEQ_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   
      DBMS_SQL.DEFINE_COLUMN(P_MTCELLEQ_CURSOR, 1, L_MT, 20);
      DBMS_SQL.DEFINE_COLUMN(P_MTCELLEQ_CURSOR, 2, L_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(P_MTCELLEQ_CURSOR, 3, L_CELL, 20);
      DBMS_SQL.DEFINE_COLUMN(P_MTCELLEQ_CURSOR, 4, L_EQ_TP, 20);
      L_RESULT := DBMS_SQL.EXECUTE(P_MTCELLEQ_CURSOR);
   END IF;
   
   L_RESULT := DBMS_SQL.FETCH_ROWS(P_MTCELLEQ_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_MTCELLEQ_CURSOR, 1, L_MT);
      DBMS_SQL.COLUMN_VALUE(P_MTCELLEQ_CURSOR, 2, L_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_MTCELLEQ_CURSOR, 3, L_CELL);
      DBMS_SQL.COLUMN_VALUE(P_MTCELLEQ_CURSOR, 4, L_EQ_TP);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_MT(L_FETCHED_ROWS) := L_MT;
      A_VERSION(L_FETCHED_ROWS) := L_VERSION;
      A_CELL(L_FETCHED_ROWS) := L_CELL;
      A_EQ_TP(L_FETCHED_ROWS) := L_EQ_TP;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_MTCELLEQ_CURSOR);
      END IF;
   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_MTCELLEQ_CURSOR);
       P_MTCELLEQ_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_MTCELLEQ_CURSOR);
      P_MTCELLEQ_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;
   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetMtCellEqType', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (P_MTCELLEQ_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (P_MTCELLEQ_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETMTCELLEQTYPE;

FUNCTION GETMTCELLVALUE
(A_MT                  OUT      UNAPIGEN.VC20_TABLE_TYPE,    
 A_VERSION             OUT      UNAPIGEN.VC20_TABLE_TYPE,    
 A_CELL                OUT      UNAPIGEN.VC20_TABLE_TYPE,    
 A_INDEX_X             OUT      UNAPIGEN.NUM_TABLE_TYPE,     
 A_INDEX_Y             OUT      UNAPIGEN.NUM_TABLE_TYPE,     
 A_VALUE_F             OUT      UNAPIGEN.FLOAT_TABLE_TYPE,   
 A_VALUE_S             OUT      UNAPIGEN.VC40_TABLE_TYPE,    
 A_SELECTED            OUT      UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_NR_OF_ROWS          IN OUT   NUMBER,                      
 A_WHERE_CLAUSE        IN       VARCHAR2,                    
 A_NEXT_ROWS           IN       NUMBER)                      
RETURN NUMBER IS

L_MT                VARCHAR2(20);
L_VERSION           VARCHAR2(20);
L_CELL              VARCHAR2(20);
L_INDEX_X           NUMBER;
L_INDEX_Y           NUMBER;
L_VALUE_F           FLOAT;
L_VALUE_S           VARCHAR2(40);
L_SELECTED          CHAR(1);

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;
   
   
   IF A_NEXT_ROWS = -1 THEN
      IF P_MTCELLVAL_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_MTCELLVAL_CURSOR);
         P_MTCELLVAL_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_MTCELLVAL_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN

      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
         RETURN(UNAPIGEN.DBERR_WHERECLAUSE);
      ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE, 1, 6)) <> 'WHERE '  THEN
         L_WHERE_CLAUSE := ', dd'||UNAPIGEN.P_DD||'.uvmt mt WHERE mt.version_is_current = ''1'' '||
                           'AND list.version = mt.version '||
                           'AND list.mt = mt.mt '||
                           'AND list.mt = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') ||  
                           ''' ORDER BY list.cell, list.index_x, list.index_y';
      ELSE
         L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
      END IF;

      L_SQL_STRING := 'SELECT list.mt, list.version, list.cell, list.index_x, list.index_y, '||
                      'list.value_f, list.value_s, list.selected ' || 
                      'FROM dd' || UNAPIGEN.P_DD || '.uvmtcelllist list ' || L_WHERE_CLAUSE;

      IF P_MTCELLVAL_CURSOR IS NULL THEN
         P_MTCELLVAL_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;
      DBMS_SQL.PARSE(P_MTCELLVAL_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

      DBMS_SQL.DEFINE_COLUMN(P_MTCELLVAL_CURSOR, 1, L_MT, 20);
      DBMS_SQL.DEFINE_COLUMN(P_MTCELLVAL_CURSOR, 2, L_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(P_MTCELLVAL_CURSOR, 3, L_CELL, 20);
      DBMS_SQL.DEFINE_COLUMN(P_MTCELLVAL_CURSOR, 4, L_INDEX_X);
      DBMS_SQL.DEFINE_COLUMN(P_MTCELLVAL_CURSOR, 5, L_INDEX_Y);
      DBMS_SQL.DEFINE_COLUMN(P_MTCELLVAL_CURSOR, 6, L_VALUE_F);
      DBMS_SQL.DEFINE_COLUMN(P_MTCELLVAL_CURSOR, 7, L_VALUE_S, 40);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_MTCELLVAL_CURSOR, 8, L_SELECTED, 1);
      
      L_RESULT := DBMS_SQL.EXECUTE(P_MTCELLVAL_CURSOR);
   END IF;
   
   L_RESULT := DBMS_SQL.FETCH_ROWS(P_MTCELLVAL_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_MTCELLVAL_CURSOR, 1, L_MT);
      DBMS_SQL.COLUMN_VALUE(P_MTCELLVAL_CURSOR, 2, L_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_MTCELLVAL_CURSOR, 3, L_CELL);
      DBMS_SQL.COLUMN_VALUE(P_MTCELLVAL_CURSOR, 4, L_INDEX_X);
      DBMS_SQL.COLUMN_VALUE(P_MTCELLVAL_CURSOR, 5, L_INDEX_Y);
      DBMS_SQL.COLUMN_VALUE(P_MTCELLVAL_CURSOR, 6, L_VALUE_F);
      DBMS_SQL.COLUMN_VALUE(P_MTCELLVAL_CURSOR, 7, L_VALUE_S);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_MTCELLVAL_CURSOR, 8, L_SELECTED);
            
      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_MT(L_FETCHED_ROWS) := L_MT;
      A_VERSION(L_FETCHED_ROWS) := L_VERSION;
      A_CELL(L_FETCHED_ROWS) := L_CELL;
      A_INDEX_X(L_FETCHED_ROWS) := L_INDEX_X;
      A_INDEX_Y(L_FETCHED_ROWS) := L_INDEX_Y;
      A_VALUE_F(L_FETCHED_ROWS) := L_VALUE_F;
      A_VALUE_S(L_FETCHED_ROWS) := L_VALUE_S;
      A_SELECTED(L_FETCHED_ROWS) := L_SELECTED;
            
      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_MTCELLVAL_CURSOR);
      END IF;
   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_MTCELLVAL_CURSOR);
       P_MTCELLVAL_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_MTCELLVAL_CURSOR);
      P_MTCELLVAL_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;
   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetMtCellValue', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (P_MTCELLVAL_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (P_MTCELLVAL_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETMTCELLVALUE;

FUNCTION DELETEMETHOD
(A_MT                  IN       VARCHAR2,                    
 A_VERSION             IN       VARCHAR2,                    
 A_MODIFY_REASON       IN       VARCHAR2)                    
RETURN NUMBER IS

L_ALLOW_MODIFY CHAR(1);
L_ACTIVE       CHAR(1);
L_LOG_HS       CHAR(1);
L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);

CURSOR L_PRMT_CURSOR (C_MT VARCHAR2, C_VERSION VARCHAR2) IS
SELECT UTPRMT.PR, UTPRMT.VERSION, UTPR.LC, UTPR.LC_VERSION, UTPR.SS, UTPR.LOG_HS
FROM UTPR, UTPRMT
WHERE UTPRMT.MT         = C_MT
  AND UNAPIGEN.USEVERSION('mt',UTPRMT.MT,UTPRMT.MT_VERSION) = C_VERSION
  AND UTPR.PR           = UTPRMT.PR
  AND UTPR.VERSION      = UTPRMT.VERSION;

BEGIN
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL (A_MT, ' ') = ' '  THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL (A_VERSION, ' ') = ' '  THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('mt', A_MT, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   
   IF UNAPIGEN.ISSYSTEM21CFR11COMPLIANT = UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTALLOWEDIN21CFR11;
      RAISE STPERROR;
   END IF;

   DELETE FROM UTMTAU
   WHERE MT = A_MT
     AND VERSION = A_VERSION;

   DELETE FROM UTMTHS
   WHERE MT = A_MT
     AND VERSION = A_VERSION;

   DELETE FROM UTMTCELL
   WHERE MT = A_MT
     AND VERSION = A_VERSION;

   DELETE FROM UTMTCELLSPIN
   WHERE MT = A_MT
     AND VERSION = A_VERSION;

   DELETE FROM UTMTCELLLIST
   WHERE MT = A_MT
     AND VERSION = A_VERSION;

   DELETE FROM UTMTCELLEQTYPE
   WHERE MT = A_MT
     AND VERSION = A_VERSION;

   UPDATE UTPPPR
   SET MT = NULL,
       MT_VERSION = NULL,
       MT_NR_MEASUR = NULL
   WHERE MT = A_MT
     AND MT_VERSION = A_VERSION;

   BEGIN
      L_EVENT_TP := 'UsedObjectDeleted';
      L_EV_SEQ_NR := -1;

      FOR PR_REC IN L_PRMT_CURSOR(A_MT, A_VERSION) LOOP
         DELETE FROM UTPRMT
         WHERE MT = A_MT
           AND UNAPIGEN.USEVERSION('mt',MT,MT_VERSION) = A_VERSION
           AND PR = PR_REC.PR
           AND VERSION = PR_REC.VERSION;

         DELETE FROM UTPRMTAU
         WHERE MT = A_MT
           AND UNAPIGEN.USEVERSION('mt',MT,MT_VERSION) = A_VERSION
           AND PR = PR_REC.PR
           AND VERSION = PR_REC.VERSION;

         L_RET_CODE := UNAPIEV.INSERTEVENT('DeleteMethod', UNAPIGEN.P_EVMGR_NAME, 'pr',
                                 PR_REC.PR, PR_REC.LC, PR_REC.LC_VERSION, PR_REC.SS, L_EVENT_TP,
                                 'version='||PR_REC.VERSION, L_EV_SEQ_NR);
         IF L_RET_CODE <> 0 THEN
            UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
            RAISE STPERROR;
         END IF;

         IF PR_REC.LOG_HS = '1' THEN
            INSERT INTO UTPRHS(PR, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                               WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
            VALUES (PR_REC.PR, PR_REC.VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 
                    L_EVENT_TP||' '||A_MT||' '||A_VERSION,
                    'method "'||A_MT||'" is deleted and removed from parameter <<'||PR_REC.PR||'>>', 
                    CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
         END IF;
      END LOOP;
   END;

   DELETE FROM UTSTMTFREQ
   WHERE MT = A_MT
     AND UNAPIGEN.USEVERSION('mt',MT,MT_VERSION) = A_VERSION;

   DELETE FROM UTEVTIMED
   WHERE (OBJECT_TP='mt' AND OBJECT_ID=A_MT AND INSTR(EV_DETAILS,'version='||A_VERSION)<>0);

   DELETE FROM UTEVRULESDELAYED
   WHERE (OBJECT_TP='mt' AND OBJECT_ID=A_MT AND INSTR(EV_DETAILS,'version='||A_VERSION)<>0);

   DELETE FROM UTMT
   WHERE MT = A_MT
     AND VERSION = A_VERSION;

   L_EVENT_TP := 'ObjectDeleted';

   L_EV_SEQ_NR := -1;
   L_RET_CODE := UNAPIEV.INSERTEVENT('DeleteMethod', UNAPIGEN.P_EVMGR_NAME, 'mt',
                                      A_MT, L_LC, L_LC_VERSION, L_SS, L_EVENT_TP, 'version='||A_VERSION,
                                      L_EV_SEQ_NR);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('DeleteMethod',SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'DeleteMethod'));
END DELETEMETHOD;

FUNCTION SAVEMETHOD
(A_MT                      IN       VARCHAR2,                
 A_VERSION                 IN       VARCHAR2,                
 A_VERSION_IS_CURRENT      IN       CHAR,                    
 A_EFFECTIVE_FROM          IN       DATE,                    
 A_EFFECTIVE_TILL          IN       DATE,                    
 A_DESCRIPTION             IN       VARCHAR2,                
 A_DESCRIPTION2            IN       VARCHAR2,                
 A_UNIT                    IN       VARCHAR2,                
 A_EST_COST                IN       VARCHAR2,                
 A_EST_TIME                IN       VARCHAR2,                
 A_ACCURACY                IN       NUMBER,                  
 A_IS_TEMPLATE             IN       CHAR,                    
 A_CALIBRATION             IN       CHAR,                    
 A_AUTORECALC              IN       CHAR,                    
 A_CONFIRM_COMPLETE        IN       CHAR,                    
 A_AUTO_CREATE_CELLS       IN       CHAR,                    
 A_ME_RESULT_EDITABLE      IN       CHAR,                    
 A_EXECUTOR                IN       VARCHAR2,                
 A_EQ_TP                   IN       VARCHAR2,                
 A_SOP                     IN       VARCHAR2,                
 A_SOP_VERSION             IN       VARCHAR2,                
 A_PLAUS_LOW               IN       NUMBER,                  
 A_PLAUS_HIGH              IN       NUMBER,                  
 A_WINSIZE_X               IN       NUMBER,                  
 A_WINSIZE_Y               IN       NUMBER,                  
 A_SC_LC                   IN       VARCHAR2,                
 A_SC_LC_VERSION           IN       VARCHAR2,                
 A_DEF_VAL_TP              IN       CHAR,                    
 A_DEF_AU_LEVEL            IN       VARCHAR2,                
 A_DEF_VAL                 IN       VARCHAR2,                
 A_FORMAT                  IN       VARCHAR2,                
 A_INHERIT_AU              IN       CHAR,                    
 A_MT_CLASS                IN       VARCHAR2,                
 A_LOG_HS                  IN       CHAR,                    
 A_LC                      IN       VARCHAR2,                
 A_LC_VERSION              IN       VARCHAR2,                
 A_MODIFY_REASON           IN       VARCHAR2)                
RETURN NUMBER IS

L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_LOG_HS       CHAR(1);
L_SS           VARCHAR2(2);
L_ALLOW_MODIFY CHAR(1);
L_ACTIVE       CHAR(1);
L_INSERT       BOOLEAN  := FALSE;
L_DEF_AU_LEVEL VARCHAR2(4);

BEGIN
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_MT, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   IF NVL(A_DEF_VAL_TP, ' ') NOT IN ('F','A') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_DEFVALUETP;
      RAISE STPERROR;
   END IF;

   IF NVL(A_DEF_VAL_TP, ' ') = 'A' AND
      NVL(A_DEF_AU_LEVEL, ' ') NOT IN
      ('rt', 'rtst', 'st', 'stpp', 'pp', 'pppr', 'pr', 'prmt', 'mt', 'eq', 'sc', 'scpg', 'scpa', 'scme', 'rq') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_AULEVEL;
      RAISE STPERROR;
   END IF;

   IF NVL(A_IS_TEMPLATE, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_TEMPLATE;
      RAISE STPERROR;
   END IF;

   IF NVL(A_LOG_HS, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_LOGHS;
      RAISE STPERROR;
   END IF;

   IF NVL(A_INHERIT_AU, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INHERITAU;
      RAISE STPERROR;
   END IF;

   IF NVL(A_AUTORECALC, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_AUTORECALC;
      RAISE STPERROR;
   END IF;

   IF NVL(A_CONFIRM_COMPLETE, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_CONFIRMCOMPLETE;
      RAISE STPERROR;
   END IF;

   IF NVL(A_CALIBRATION, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_CALIBRATION;
      RAISE STPERROR;
   END IF;

   IF NVL(A_AUTO_CREATE_CELLS, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_AUTOCREATECELLS;
      RAISE STPERROR;
   END IF;

   IF NVL(A_ME_RESULT_EDITABLE, ' ') NOT IN ('2', '1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_MERESULTEDITABLE;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('mt', A_MT, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE = UNAPIGEN.DBERR_NOOBJECT THEN
      L_INSERT := TRUE;
   ELSIF L_RET_CODE = UNAPIGEN.DBERR_SUCCESS  THEN
      L_INSERT := FALSE;
   ELSE
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   IF A_DEF_VAL_TP = 'F' THEN
      L_DEF_AU_LEVEL := NULL;
   ELSE
      L_DEF_AU_LEVEL := A_DEF_AU_LEVEL;
   END IF;

   IF L_INSERT THEN               
      IF NVL(A_LC, ' ') <> ' ' THEN
         L_LC := A_LC;
      END IF;
      IF NVL(A_LC_VERSION, ' ') <> ' ' THEN
         L_LC_VERSION := A_LC_VERSION;
      END IF;
      INSERT INTO UTMT(MT, VERSION, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ, DESCRIPTION, DESCRIPTION2, UNIT, EST_COST, EST_TIME,
                       ACCURACY, IS_TEMPLATE, CALIBRATION, AUTORECALC, CONFIRM_COMPLETE,
                       AUTO_CREATE_CELLS, ME_RESULT_EDITABLE, EXECUTOR, EQ_TP, SOP, 
                       SOP_VERSION, PLAUS_LOW, PLAUS_HIGH, WINSIZE_X, WINSIZE_Y, SC_LC, SC_LC_VERSION, 
                       DEF_VAL_TP, DEF_AU_LEVEL, DEF_VAL, FORMAT, INHERIT_AU, MT_CLASS, LOG_HS, 
                       ALLOW_MODIFY, ACTIVE, LC, LC_VERSION, SS)
      VALUES(A_MT, A_VERSION, A_EFFECTIVE_FROM, A_EFFECTIVE_FROM, A_DESCRIPTION, A_DESCRIPTION2, A_UNIT, A_EST_COST, A_EST_TIME, 
             A_ACCURACY, A_IS_TEMPLATE, A_CALIBRATION, A_AUTORECALC, A_CONFIRM_COMPLETE, 
             A_AUTO_CREATE_CELLS, A_ME_RESULT_EDITABLE, A_EXECUTOR, A_EQ_TP, A_SOP, 
             A_SOP_VERSION, A_PLAUS_LOW, A_PLAUS_HIGH, A_WINSIZE_X, A_WINSIZE_Y, A_SC_LC, A_SC_LC_VERSION, 
             A_DEF_VAL_TP, L_DEF_AU_LEVEL, A_DEF_VAL, A_FORMAT, A_INHERIT_AU, A_MT_CLASS, A_LOG_HS,
              '#', '0', L_LC, L_LC_VERSION, L_SS);
      L_EVENT_TP := 'ObjectCreated';
   ELSE                              
      UPDATE UTMT
      SET EFFECTIVE_FROM     = DECODE(EFFECTIVE_TILL, NULL, A_EFFECTIVE_FROM, EFFECTIVE_FROM),
          EFFECTIVE_FROM_TZ  = DECODE(EFFECTIVE_TILL, NULL,  DECODE(A_EFFECTIVE_FROM, EFFECTIVE_FROM_TZ, EFFECTIVE_FROM_TZ, A_EFFECTIVE_FROM), EFFECTIVE_FROM_TZ),
          DESCRIPTION        = A_DESCRIPTION,
          DESCRIPTION2       = A_DESCRIPTION2,
          UNIT               = A_UNIT,
          EST_COST           = A_EST_COST,
          EST_TIME           = A_EST_TIME,
          ACCURACY           = A_ACCURACY,
          IS_TEMPLATE        = A_IS_TEMPLATE,
          CALIBRATION        = A_CALIBRATION,
          AUTORECALC         = A_AUTORECALC,
          CONFIRM_COMPLETE   = A_CONFIRM_COMPLETE,
          AUTO_CREATE_CELLS  = A_AUTO_CREATE_CELLS,
          ME_RESULT_EDITABLE = A_ME_RESULT_EDITABLE,
          EXECUTOR           = A_EXECUTOR,
          EQ_TP              = A_EQ_TP,
          SOP                = A_SOP,
          SOP_VERSION        = A_SOP_VERSION,
          PLAUS_LOW          = A_PLAUS_LOW,
          PLAUS_HIGH         = A_PLAUS_HIGH,
          WINSIZE_X          = A_WINSIZE_X,
          WINSIZE_Y          = A_WINSIZE_Y,
          SC_LC              = A_SC_LC,
          SC_LC_VERSION      = A_SC_LC_VERSION,
          DEF_VAL_TP         = A_DEF_VAL_TP,
          DEF_AU_LEVEL       = L_DEF_AU_LEVEL,
          DEF_VAL            = A_DEF_VAL,
          FORMAT             = A_FORMAT,
          INHERIT_AU         = A_INHERIT_AU,
          MT_CLASS           = A_MT_CLASS,
          LOG_HS             = A_LOG_HS,
          ALLOW_MODIFY       = '#'
      WHERE MT = A_MT
        AND VERSION = A_VERSION;
      L_EVENT_TP := 'ObjectUpdated';
   END IF;

   L_EV_SEQ_NR := -1;
   L_RET_CODE := UNAPIEV.INSERTEVENT('SaveMethod',UNAPIGEN.P_EVMGR_NAME, 'mt',
                                      A_MT, L_LC, L_LC_VERSION, L_SS, L_EVENT_TP, 'version='||A_VERSION,
                                      L_EV_SEQ_NR);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   IF NVL(L_LOG_HS, ' ') <> A_LOG_HS THEN
      IF A_LOG_HS = '1' THEN
         INSERT INTO UTMTHS (MT, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_MT, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 'History switched ON', 
                 'Audit trail is turned on.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      ELSE
         INSERT INTO UTMTHS (MT, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_MT, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 'History switched OFF', 
                 'Audit trail is turned off.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   END IF;

   IF NVL(L_LOG_HS, ' ') = '1' THEN
      IF L_EVENT_TP = 'ObjectCreated' THEN
         INSERT INTO UTMTHS (MT, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_MT, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'method "'||A_MT||'" is created.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      ELSE
         INSERT INTO UTMTHS (MT, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_MT, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'method "'||A_MT||'" is updated.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   ELSE
      
      
      IF L_EVENT_TP = 'ObjectCreated' THEN
         INSERT INTO UTMTHS (MT, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_MT, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'method "'||A_MT||'" is created.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveMethod',SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveMethod'));

END SAVEMETHOD;

FUNCTION SAVEMTCELL
(A_MT                      IN       VARCHAR2,                    
 A_VERSION                 IN       VARCHAR2,                    
 A_CELL                    IN       UNAPIGEN.VC20_TABLE_TYPE,    
 A_DSP_TITLE               IN       UNAPIGEN.VC40_TABLE_TYPE,    
 A_DSP_TITLE2              IN       UNAPIGEN.VC40_TABLE_TYPE,    
 A_VALUE_F                 IN       UNAPIGEN.FLOAT_TABLE_TYPE,   
 A_VALUE_S                 IN       UNAPIGEN.VC40_TABLE_TYPE,    
 A_POS_X                   IN       UNAPIGEN.NUM_TABLE_TYPE,     
 A_POS_Y                   IN       UNAPIGEN.NUM_TABLE_TYPE,     
 A_ALIGN                   IN       UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_CELL_TP                 IN       UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_WINSIZE_X               IN       UNAPIGEN.NUM_TABLE_TYPE,     
 A_WINSIZE_Y               IN       UNAPIGEN.NUM_TABLE_TYPE,     
 A_IS_PROTECTED            IN       UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_MANDATORY               IN       UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_HIDDEN                  IN       UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_INPUT_TP                IN       UNAPIGEN.VC4_TABLE_TYPE,     
 A_INPUT_SOURCE            IN       UNAPIGEN.VC20_TABLE_TYPE,    
 A_INPUT_SOURCE_VERSION    IN       UNAPIGEN.VC20_TABLE_TYPE,    
 A_INPUT_PP                IN       UNAPIGEN.VC20_TABLE_TYPE,    
 A_INPUT_PP_VERSION        IN       UNAPIGEN.VC20_TABLE_TYPE,    
 A_INPUT_PR                IN       UNAPIGEN.VC20_TABLE_TYPE,    
 A_INPUT_PR_VERSION        IN       UNAPIGEN.VC20_TABLE_TYPE,    
 A_INPUT_MT                IN       UNAPIGEN.VC20_TABLE_TYPE,    
 A_INPUT_MT_VERSION        IN       UNAPIGEN.VC20_TABLE_TYPE,    
 A_DEF_VAL_TP              IN       UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_DEF_AU_LEVEL            IN       UNAPIGEN.VC4_TABLE_TYPE,     
 A_SAVE_TP                 IN       UNAPIGEN.VC4_TABLE_TYPE,     
 A_SAVE_PP                 IN       UNAPIGEN.VC20_TABLE_TYPE,    
 A_SAVE_PP_VERSION         IN       UNAPIGEN.VC20_TABLE_TYPE,    
 A_SAVE_PR                 IN       UNAPIGEN.VC20_TABLE_TYPE,    
 A_SAVE_PR_VERSION         IN       UNAPIGEN.VC20_TABLE_TYPE,    
 A_SAVE_MT                 IN       UNAPIGEN.VC20_TABLE_TYPE,    
 A_SAVE_MT_VERSION         IN       UNAPIGEN.VC20_TABLE_TYPE,    
 A_SAVE_EQ_TP              IN       UNAPIGEN.VC20_TABLE_TYPE,    
 A_SAVE_ID                 IN       UNAPIGEN.VC20_TABLE_TYPE,    
 A_SAVE_ID_VERSION         IN       UNAPIGEN.VC20_TABLE_TYPE,    
 A_COMPONENT               IN       UNAPIGEN.VC20_TABLE_TYPE,    
 A_UNIT                    IN       UNAPIGEN.VC20_TABLE_TYPE,    
 A_FORMAT                  IN       UNAPIGEN.VC40_TABLE_TYPE,    
 A_CALC_TP                 IN       UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_CALC_FORMULA            IN       UNAPIGEN.VC2000_TABLE_TYPE,  
 A_VALID_CF                IN       UNAPIGEN.VC20_TABLE_TYPE,    
 A_MAX_X                   IN       UNAPIGEN.NUM_TABLE_TYPE,     
 A_MAX_Y                   IN       UNAPIGEN.NUM_TABLE_TYPE,     
 A_MULTI_SELECT            IN       UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_CREATE_NEW              IN       UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_NR_OF_ROWS              IN       NUMBER,                      
 A_NEXT_ROWS               IN       NUMBER,                      
 A_MODIFY_REASON           IN       VARCHAR2)                    
RETURN NUMBER IS

L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);
L_LOG_HS       CHAR(1);
L_ALLOW_MODIFY CHAR(1);
L_ACTIVE       CHAR(1);
L_INSERT       BOOLEAN;
L_SEQ_NO       NUMBER;

BEGIN

   L_SQLERRM := NULL;
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_MT, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   IF NVL(A_NEXT_ROWS, 0) = 0 THEN
      IF NVL(P_SAVEMTCL_CALLS, 0) <> 0 THEN
         L_SQLERRM := 'SaveMtCell termination call never called for previous method sheet ! (a_next_rows=-1) a_next_rows='||
                      TO_CHAR(A_NEXT_ROWS);
         RAISE STPERROR;
      END IF;
      P_SAVEMTCL_CALLS := 1;
   ELSIF NVL(A_NEXT_ROWS, 0) = -1 THEN
      P_SAVEMTCL_CALLS := NVL(P_SAVEMTCL_CALLS, 0) + 1;      
   ELSIF NVL(A_NEXT_ROWS, 0) = 1 THEN
      IF NVL(P_SAVEMTCL_CALLS, 0) = 0 THEN   
         L_SQLERRM := 'SaveMtCell startup call never called ! (a_next_rows=0)';
         RAISE STPERROR;   
      END IF;
      IF NVL(UNAPIGEN.P_TXN_LEVEL, 0) <= 1 THEN   
         L_SQLERRM := 'SaveMtCell called with a_next_rows=1 in a non MST transaction !';
         RAISE STPERROR;   
      END IF;
      P_SAVEMTCL_CALLS := NVL(P_SAVEMTCL_CALLS, 0) + 1;      
   ELSE
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NEXTROWS;
      RAISE STPERROR;
   END IF;         
   IF P_SAVEMTCL_CALLS = 1 THEN
      P_SAVEMTCL_TR_SEQ := UNAPIGEN.P_TR_SEQ;
   ELSE
      IF UNAPIGEN.P_TR_SEQ <> P_SAVEMTCL_TR_SEQ THEN
         L_SQLERRM := 'Successive calls of SaveMtCell not in the same transaction !';
         RAISE STPERROR;   
      END IF;
   END IF;
   
   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('mt', A_MT, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTMT
   SET ALLOW_MODIFY = '#'
   WHERE MT = A_MT
     AND VERSION = A_VERSION;

   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR;
   END IF;

   
   IF NVL(P_SAVEMTCL_CALLS, 0) = 1 THEN
      DELETE UTMTCELL
      WHERE MT = A_MT
        AND VERSION = A_VERSION;
   
      DELETE UTMTCELLSPIN
      WHERE MT = A_MT
        AND VERSION = A_VERSION;
      
      DELETE UTMTCELLLIST
      WHERE MT = A_MT
        AND VERSION = A_VERSION;
   END IF;

   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      IF NVL(A_CELL(L_SEQ_NO), ' ') = ' ' THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
      END IF;

      IF NVL(A_ALIGN(L_SEQ_NO), ' ') NOT IN ('L','R','C') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_ALIGN;
         RAISE STPERROR;
      END IF;

      
      
      IF NVL(A_CELL_TP(L_SEQ_NO), ' ') NOT IN ('I','L','D','C','F','G','M','P','R','H','A','S','B','T','K') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_CELLTP;
         RAISE STPERROR;
      END IF;

      IF NVL(A_INPUT_TP(L_SEQ_NO), ' ') NOT IN ('kb', 'pp', 'pr','mt','me','eq','dr') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INPUTTP;
         RAISE STPERROR;
      END IF;

      IF NVL(A_CELL_TP(L_SEQ_NO), ' ') IN ('F','L','D','C') THEN
         IF NVL(A_DEF_VAL_TP(L_SEQ_NO), ' ') NOT IN ('F','A') THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_DEFVALUETP;
            RAISE STPERROR;
         END IF;
      END IF;

      IF NVL(A_SAVE_TP(L_SEQ_NO), ' ') NOT IN
          ('pp','pr', 'mt','me','prau','ppau','mtau','rd','eqct','eqau','') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SAVETP;
         RAISE STPERROR;
      END IF;

      IF A_CELL_TP(L_SEQ_NO) = 'K' THEN
         IF NVL(A_CALC_TP(L_SEQ_NO), ' ') NOT IN ('I','C','B') THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_CALCMETHOD;
            RAISE STPERROR;
         END IF;
      END IF;

      IF NVL(A_CREATE_NEW(L_SEQ_NO), ' ') NOT IN ('0','1', '2', '3') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_CREATENEW;
         RAISE STPERROR;
      END IF;

      IF NVL(A_IS_PROTECTED(L_SEQ_NO), ' ') NOT IN ('0','1','2','3','4','5','6','7','8','9') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_PROTECTED;
         RAISE STPERROR;
      END IF;

      IF NVL(A_MANDATORY(L_SEQ_NO), ' ') NOT IN ('2', '1','0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_MANDATORY;
         RAISE STPERROR;
      END IF;

      IF NVL(A_HIDDEN(L_SEQ_NO), ' ') NOT IN ('1','0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_HIDDEN;
         RAISE STPERROR;
      END IF;

      IF NVL(A_MULTI_SELECT(L_SEQ_NO), ' ') NOT IN ('1','0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_MULTISELECT;
         RAISE STPERROR;
      END IF;

      IF NVL(A_DEF_VAL_TP(L_SEQ_NO), ' ') = 'A' AND
         NVL(A_DEF_AU_LEVEL(L_SEQ_NO), ' ') NOT IN
         ('rt', 'rtst', 'st', 'stpp', 'pp', 'pppr', 'pr', 'prmt', 'mt', 'eq', 'sc', 'scpg', 'scpa', 'scme', 'rq') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_AULEVEL;
         RAISE STPERROR;
      END IF;

      INSERT INTO UTMTCELL(MT, VERSION, CELL, SEQ, DSP_TITLE, 
                           DSP_TITLE2, VALUE_F, VALUE_S, 
                           POS_X, POS_Y, ALIGN, 
                           CELL_TP, WINSIZE_X, WINSIZE_Y,
                           IS_PROTECTED, MANDATORY, HIDDEN,
                           INPUT_TP, INPUT_SOURCE, INPUT_SOURCE_VERSION, 
                           INPUT_PP, INPUT_PP_VERSION, 
                           INPUT_PR, INPUT_PR_VERSION,
                           INPUT_MT, INPUT_MT_VERSION, 
                           DEF_VAL_TP, DEF_AU_LEVEL, 
                           SAVE_TP, SAVE_PP, SAVE_PP_VERSION, 
                           SAVE_PR, SAVE_PR_VERSION, 
                           SAVE_MT, SAVE_MT_VERSION, 
                           SAVE_EQ_TP,
                           SAVE_ID, SAVE_ID_VERSION, 
                           COMPONENT, UNIT, FORMAT, CALC_TP, CALC_FORMULA,
                           VALID_CF, MAX_X, MAX_Y,
                           MULTI_SELECT, CREATE_NEW)
      SELECT  A_MT, A_VERSION, A_CELL(L_SEQ_NO),  NVL(MAX(SEQ),0)+1, A_DSP_TITLE(L_SEQ_NO),
              A_DSP_TITLE2(L_SEQ_NO), A_VALUE_F(L_SEQ_NO), A_VALUE_S(L_SEQ_NO),
              A_POS_X(L_SEQ_NO), A_POS_Y(L_SEQ_NO), A_ALIGN(L_SEQ_NO), 
              A_CELL_TP(L_SEQ_NO), A_WINSIZE_X(L_SEQ_NO), A_WINSIZE_Y(L_SEQ_NO),
              A_IS_PROTECTED(L_SEQ_NO), A_MANDATORY(L_SEQ_NO), A_HIDDEN(L_SEQ_NO), 
              A_INPUT_TP(L_SEQ_NO), A_INPUT_SOURCE(L_SEQ_NO), A_INPUT_SOURCE_VERSION(L_SEQ_NO), 
              A_INPUT_PP(L_SEQ_NO), A_INPUT_PP_VERSION(L_SEQ_NO), 
              A_INPUT_PR(L_SEQ_NO), A_INPUT_PR_VERSION(L_SEQ_NO), 
              A_INPUT_MT(L_SEQ_NO), A_INPUT_MT_VERSION(L_SEQ_NO), 
              A_DEF_VAL_TP(L_SEQ_NO), A_DEF_AU_LEVEL(L_SEQ_NO),
              A_SAVE_TP(L_SEQ_NO), A_SAVE_PP(L_SEQ_NO), A_SAVE_PP_VERSION(L_SEQ_NO), 
              A_SAVE_PR(L_SEQ_NO), A_SAVE_PR_VERSION(L_SEQ_NO), 
              A_SAVE_MT(L_SEQ_NO), A_SAVE_MT_VERSION(L_SEQ_NO), 
              A_SAVE_EQ_TP(L_SEQ_NO),
              A_SAVE_ID(L_SEQ_NO), A_SAVE_ID_VERSION(L_SEQ_NO), 
              A_COMPONENT(L_SEQ_NO), A_UNIT(L_SEQ_NO), A_FORMAT(L_SEQ_NO), A_CALC_TP(L_SEQ_NO), A_CALC_FORMULA(L_SEQ_NO),
              A_VALID_CF(L_SEQ_NO), A_MAX_X(L_SEQ_NO), A_MAX_Y(L_SEQ_NO),
              A_MULTI_SELECT(L_SEQ_NO), A_CREATE_NEW(L_SEQ_NO) 
      FROM UTMTCELL 
      WHERE MT = A_MT
        AND VERSION = A_VERSION;
   END LOOP;

   
   IF NVL(A_NEXT_ROWS, 0) = -1 THEN 
      L_EVENT_TP := 'UsedObjectsUpdated';
      L_EV_SEQ_NR := -1;
      L_RET_CODE := UNAPIEV.INSERTEVENT('SaveMtCell', UNAPIGEN.P_EVMGR_NAME, 'mt',
                                        A_MT, L_LC, L_LC_VERSION, L_SS, L_EVENT_TP, 'version='||A_VERSION,
                                        L_EV_SEQ_NR);

      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
         RAISE STPERROR;
      END IF;

      IF L_LOG_HS = '1' THEN
         INSERT INTO UTMTHS (MT, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_MT, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'method "'||A_MT||'" cells are updated.', 
                 CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS, 0) = -1 THEN
      
      P_SAVEMTCL_CALLS := 0;
   END IF;
   
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveMtCell',SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('SaveMtCell',L_SQLERRM);   
   END IF;
   
   P_SAVEMTCL_CALLS := 0;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveMtCell'));
END SAVEMTCELL;

FUNCTION SAVEMTCELLSPIN
(A_MT             IN       VARCHAR2,                    
 A_VERSION        IN       VARCHAR2,                    
 A_CELL           IN       UNAPIGEN.VC20_TABLE_TYPE,    
 A_CIRCULAR       IN       UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_INCR           IN       UNAPIGEN.NUM_TABLE_TYPE,     
 A_LOW_VAL_TP     IN       UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_LOW_AU_LEVEL   IN       UNAPIGEN.VC4_TABLE_TYPE,     
 A_LOW_VAL        IN       UNAPIGEN.VC40_TABLE_TYPE,    
 A_HIGH_VAL_TP    IN       UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_HIGH_AU_LEVEL  IN       UNAPIGEN.VC4_TABLE_TYPE,     
 A_HIGH_VAL       IN       UNAPIGEN.VC40_TABLE_TYPE,    
 A_NR_OF_ROWS     IN       NUMBER,                      
 A_NEXT_ROWS      IN       NUMBER)                      
RETURN NUMBER IS

L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);
L_LOG_HS       CHAR(1);
L_ALLOW_MODIFY CHAR(1);
L_ACTIVE       CHAR(1);
L_SEQ_NO       NUMBER;

BEGIN

   L_SQLERRM := NULL;
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_MT, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   IF NVL(A_NEXT_ROWS, 0) = 0 THEN
      IF NVL(P_SAVEMTCLSPIN_CALLS, 0) <> 0 THEN
         L_SQLERRM := 'SaveMtCellSpin termination call never called for previous method sheet ! (a_next_rows=-1)';
         RAISE STPERROR;
      END IF;
      P_SAVEMTCLSPIN_CALLS := 1;
   ELSIF NVL(A_NEXT_ROWS, 0) = -1 THEN
      P_SAVEMTCLSPIN_CALLS := NVL(P_SAVEMTCLSPIN_CALLS, 0) + 1;      
   ELSIF NVL(A_NEXT_ROWS, 0) = 1 THEN
      IF NVL(P_SAVEMTCLSPIN_CALLS, 0) = 0 THEN   
         L_SQLERRM := 'SaveMtCellSpin startup call never called ! (a_next_rows=0)';
         RAISE STPERROR;   
      END IF;
      IF NVL(UNAPIGEN.P_TXN_LEVEL, 0) <= 1 THEN   
         L_SQLERRM := 'SaveMtCellSpin called with a_next_rows=1 in a non MST transaction !';
         RAISE STPERROR;   
      END IF;
      P_SAVEMTCLSPIN_CALLS := NVL(P_SAVEMTCLSPIN_CALLS, 0) + 1;      
   ELSE
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NEXTROWS;
      RAISE STPERROR;
   END IF;         
   IF P_SAVEMTCLSPIN_CALLS = 1 THEN
      P_SAVEMTCLSPIN_TR_SEQ := UNAPIGEN.P_TR_SEQ;
   ELSE
      IF UNAPIGEN.P_TR_SEQ <> P_SAVEMTCLSPIN_TR_SEQ THEN
         L_SQLERRM := 'Successive calls of SaveMtCellSpin not in the same transaction !';
         RAISE STPERROR;   
      END IF;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('mt', A_MT, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTMT
   SET ALLOW_MODIFY = '#'
   WHERE MT = A_MT
     AND VERSION = A_VERSION;

   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR;
   END IF;

   
   IF NVL(P_SAVEMTCLSPIN_CALLS, 0) = 1  THEN
      DELETE UTMTCELLSPIN
      WHERE MT = A_MT
        AND VERSION = A_VERSION;
   END IF;
   
   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      IF NVL(A_CELL(L_SEQ_NO), ' ') = ' ' THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
      END IF;

      IF NVL(A_CIRCULAR(L_SEQ_NO), ' ') NOT IN ('1','0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_CIRCULAR;
         RAISE STPERROR;
      END IF;

      IF NVL(A_HIGH_VAL_TP(L_SEQ_NO), ' ') NOT IN ('F','A') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_DEFVALUETP;
         RAISE STPERROR;
      END IF;

      IF NVL(A_LOW_VAL_TP(L_SEQ_NO), ' ') NOT IN ('F','A') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_DEFVALUETP;
         RAISE STPERROR;
      END IF;

      INSERT INTO UTMTCELLSPIN(MT, VERSION, CELL, CIRCULAR, INCR, LOW_VAL_TP,
                           LOW_AU_LEVEL, LOW_VAL, HIGH_VAL_TP,
                           HIGH_AU_LEVEL, HIGH_VAL)
      VALUES (A_MT, A_VERSION, A_CELL(L_SEQ_NO), A_CIRCULAR(L_SEQ_NO),
              A_INCR(L_SEQ_NO), A_LOW_VAL_TP(L_SEQ_NO), A_LOW_AU_LEVEL(L_SEQ_NO),
              A_LOW_VAL(L_SEQ_NO), A_HIGH_VAL_TP(L_SEQ_NO),
              A_HIGH_AU_LEVEL(L_SEQ_NO), A_HIGH_VAL(L_SEQ_NO));
   END LOOP;

   

   
   IF NVL(A_NEXT_ROWS, 0) = -1 THEN
      
      P_SAVEMTCLSPIN_CALLS := 0;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveMtCellSpin',SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('SaveMtCellSpin',L_SQLERRM);   
   END IF;
   P_SAVEMTCLSPIN_CALLS := 0;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveMtCellSpin'));
END SAVEMTCELLSPIN;

FUNCTION SAVEMTCELLEQTYPE
(A_MT             IN       VARCHAR2,                    
 A_VERSION        IN       VARCHAR2,                    
 A_CELL           IN       UNAPIGEN.VC20_TABLE_TYPE,    
 A_EQ_TP          IN       UNAPIGEN.VC20_TABLE_TYPE,    
 A_NR_OF_ROWS     IN       NUMBER,                      
 A_NEXT_ROWS      IN       NUMBER)                      
RETURN NUMBER IS

L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);
L_LOG_HS       CHAR(1);
L_ALLOW_MODIFY CHAR(1);
L_ACTIVE       CHAR(1);

BEGIN

   L_SQLERRM := NULL;
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_MT,' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VERSION,' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   IF NVL(A_NEXT_ROWS, 0) = 0 THEN
      IF NVL(P_SAVEMTCLEQ_CALLS, 0) <> 0 THEN
         L_SQLERRM := 'SaveMtCellEqType termination call never called for previous method sheet ! (a_next_rows=-1)';
         RAISE STPERROR;
      END IF;
      P_SAVEMTCLEQ_CALLS := 1;
   ELSIF NVL(A_NEXT_ROWS, 0) = -1 THEN
      P_SAVEMTCLEQ_CALLS := NVL(P_SAVEMTCLEQ_CALLS, 0) + 1;      
   ELSIF NVL(A_NEXT_ROWS, 0) = 1 THEN
      IF NVL(P_SAVEMTCLEQ_CALLS, 0) = 0 THEN   
         L_SQLERRM := 'SaveMtCellEqType startup call never called ! (a_next_rows=0)';
         RAISE STPERROR;   
      END IF;
      IF NVL(UNAPIGEN.P_TXN_LEVEL, 0) <= 1 THEN   
         L_SQLERRM := 'SaveMtCellEqType called with a_next_rows=1 in a non MST transaction !';
         RAISE STPERROR;   
      END IF;
      P_SAVEMTCLEQ_CALLS := NVL(P_SAVEMTCLEQ_CALLS, 0) + 1;      
   ELSE
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NEXTROWS;
      RAISE STPERROR;
   END IF;         
   IF P_SAVEMTCLEQ_CALLS = 1 THEN
      P_SAVEMTCLEQ_TR_SEQ := UNAPIGEN.P_TR_SEQ;
   ELSE
      IF UNAPIGEN.P_TR_SEQ <> P_SAVEMTCLEQ_TR_SEQ THEN
         L_SQLERRM := 'Successive calls of SaveMtCellEqType not in the same transaction !';
         RAISE STPERROR;   
      END IF;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('mt', A_MT, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTMT
   SET ALLOW_MODIFY = '#'
   WHERE MT = A_MT
     AND VERSION = A_VERSION;

   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR;
   END IF;

   
   IF NVL(P_SAVEMTCLEQ_CALLS, 0) = 1 THEN
      DELETE UTMTCELLEQTYPE
      WHERE MT = A_MT
        AND VERSION = A_VERSION;
   END IF;

   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      IF NVL(A_CELL(L_SEQ_NO),' ') = ' ' THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
      END IF;

      IF NVL(A_EQ_TP(L_SEQ_NO),' ') = ' ' THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
      END IF;

      INSERT INTO UTMTCELLEQTYPE (MT, VERSION, CELL, SEQ, EQ_TP)
      SELECT A_MT, A_VERSION, A_CELL(L_SEQ_NO), NVL(MAX(SEQ),0)+1, A_EQ_TP(L_SEQ_NO)
      FROM UTMTCELLEQTYPE
      WHERE MT = A_MT
        AND VERSION = A_VERSION
        AND CELL = A_CELL(L_SEQ_NO);
   END LOOP;

   
   IF NVL(A_NEXT_ROWS, 0) = -1 THEN 
      L_EVENT_TP := 'UsedObjectsUpdated';
      L_EV_SEQ_NR := -1;
      L_RET_CODE := UNAPIEV.INSERTEVENT('SaveMtCellEqType', UNAPIGEN.P_EVMGR_NAME, 'mt',
                                        A_MT, L_LC, L_LC_VERSION, L_SS, L_EVENT_TP, 'version='||A_VERSION,
                                        L_EV_SEQ_NR);

      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
         RAISE STPERROR;
      END IF;

      IF L_LOG_HS = '1' THEN
         INSERT INTO UTMTHS (MT, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_MT, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'method "'||A_MT||'" cell equipments are updated.', 
                 CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS, 0) = -1 THEN
      
      P_SAVEMTCLEQ_CALLS := 0;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveMtCellEqType',SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('SaveMtCellEqType',L_SQLERRM);   
   END IF;
   P_SAVEMTCLEQ_CALLS := 0;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveMtCellEqType'));
END SAVEMTCELLEQTYPE;

FUNCTION SAVEMTCELLVALUE
(A_MT             IN       VARCHAR2,                    
 A_VERSION        IN       VARCHAR2,                    
 A_CELL           IN       UNAPIGEN.VC20_TABLE_TYPE,    
 A_INDEX_X        IN       UNAPIGEN.NUM_TABLE_TYPE,     
 A_INDEX_Y        IN       UNAPIGEN.NUM_TABLE_TYPE,     
 A_VALUE_F        IN       UNAPIGEN.FLOAT_TABLE_TYPE,   
 A_VALUE_S        IN       UNAPIGEN.VC40_TABLE_TYPE,    
 A_SELECTED       IN       UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_NR_OF_ROWS     IN       NUMBER,                      
 A_NEXT_ROWS      IN       NUMBER)                      
RETURN NUMBER IS

L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);
L_LOG_HS       CHAR(1);
L_ALLOW_MODIFY CHAR(1);
L_ACTIVE       CHAR(1);
L_SEQ          NUMBER;
L_VALUE_F      FLOAT;
L_VALUE_S      VARCHAR2(40);

CURSOR L_MTFORMAT_CURSOR (C_MT VARCHAR2, C_VERSION VARCHAR2) IS
   SELECT FORMAT
   FROM UTMT
   WHERE MT = C_MT
     AND VERSION = C_VERSION;
L_MTFORMAT_REC L_MTFORMAT_CURSOR%ROWTYPE;

BEGIN
   L_SQLERRM := NULL;
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_MT, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   IF NVL(A_NEXT_ROWS, 0) = 0 THEN
      IF NVL(P_SAVEMTCLVALUES_CALLS, 0) <> 0 THEN
         L_SQLERRM := 'SaveMtCellValues termination call never called for previous method ! (a_next_rows=-1)';
         RAISE STPERROR;
      END IF;
      P_SAVEMTCLVALUES_CALLS := 1;
   ELSIF NVL(A_NEXT_ROWS, 0) = -1 THEN
      P_SAVEMTCLVALUES_CALLS := NVL(P_SAVEMTCLVALUES_CALLS, 0) + 1;      
   ELSIF NVL(A_NEXT_ROWS, 0) = 1 THEN
      IF NVL(P_SAVEMTCLVALUES_CALLS, 0) = 0 THEN   
         L_SQLERRM := 'SaveMtCellValues startup call never called ! (a_next_rows=0)';
         RAISE STPERROR;   
      END IF;
      IF NVL(UNAPIGEN.P_TXN_LEVEL, 0) <= 1 THEN   
         L_SQLERRM := 'SaveMtCellValue called with a_next_rows=1 in a non MST transaction !';
         RAISE STPERROR;   
      END IF;
      P_SAVEMTCLVALUES_CALLS := NVL(P_SAVEMTCLVALUES_CALLS, 0) + 1;      
   ELSE
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NEXTROWS;
      RAISE STPERROR;
   END IF;         
   IF P_SAVEMTCLVALUES_CALLS = 1 THEN
      P_SAVEMTCLVALUES_TR_SEQ := UNAPIGEN.P_TR_SEQ;
   ELSE
      IF UNAPIGEN.P_TR_SEQ <> P_SAVEMTCLVALUES_TR_SEQ THEN
         L_SQLERRM := 'Successive calls of SaveMtCellValues not in the same transaction !';
         RAISE STPERROR;   
      END IF;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('mt', A_MT, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTMT
   SET ALLOW_MODIFY = '#'
   WHERE MT = A_MT
     AND VERSION = A_VERSION;

   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR;
   END IF;

   
   IF NVL(P_SAVEMTCLVALUES_CALLS, 0) = 1 THEN
      DELETE UTMTCELLLIST
      WHERE MT = A_MT
        AND VERSION = A_VERSION;
   END IF;
   
   OPEN L_MTFORMAT_CURSOR(A_MT, A_VERSION);
   FETCH L_MTFORMAT_CURSOR
   INTO L_MTFORMAT_REC;

   IF L_MTFORMAT_CURSOR%NOTFOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      CLOSE L_MTFORMAT_CURSOR;
      RAISE STPERROR;
   END IF;
   CLOSE L_MTFORMAT_CURSOR;
   
   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP

      IF NVL(A_SELECTED(L_SEQ_NO), ' ') NOT IN ('1','0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SELECTED;
         RAISE STPERROR;
      END IF;

      IF NVL(A_CELL(L_SEQ_NO), ' ') <> ' '  THEN

         L_VALUE_F := A_VALUE_F(L_SEQ_NO);
         L_VALUE_S := A_VALUE_S(L_SEQ_NO);
         
         L_RET_CODE := UNAPIGEN.FORMATRESULT(L_VALUE_F, L_MTFORMAT_REC.FORMAT, L_VALUE_S);
         IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
            INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
            VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'SaveMtCellValue', 
                    'Warning! FormatResult returned '||TO_CHAR(L_RET_CODE)||
                    ' with value_f='||TO_CHAR(L_VALUE_F)||'#value_s='||L_VALUE_S ||
                    '#format='||L_MTFORMAT_REC.FORMAT);
         END IF;
         
         INSERT INTO UTMTCELLLIST(MT, VERSION, CELL, INDEX_X, INDEX_Y, 
                                   VALUE_F, VALUE_S, SELECTED)
         VALUES (A_MT, A_VERSION, A_CELL(L_SEQ_NO), A_INDEX_X(L_SEQ_NO), A_INDEX_Y(L_SEQ_NO),
                 A_VALUE_F(L_SEQ_NO), A_VALUE_S(L_SEQ_NO), A_SELECTED(L_SEQ_NO));
      END IF;
   END LOOP;

   

   
   IF NVL(A_NEXT_ROWS, 0) = -1 THEN
      
      P_SAVEMTCLVALUES_CALLS := 0;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveMtCellValue',SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('SaveMtCellValue',L_SQLERRM);   
   END IF;
   IF L_MTFORMAT_CURSOR%ISOPEN THEN
      CLOSE L_MTFORMAT_CURSOR;
   END IF;   
   P_SAVEMTCLVALUES_CALLS := 0;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveMtCellValue'));
END SAVEMTCELLVALUE;

FUNCTION GETMTCELLLIST
(A_CELL                OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_NR_OF_ROWS          IN OUT   NUMBER,                     
 A_WHERE_CLAUSE        IN       VARCHAR2,                   
 A_NEXT_ROWS           IN       NUMBER)                     
RETURN NUMBER IS

L_CELL                VARCHAR2(20);

BEGIN
   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_MTCELLLIST_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_MTCELLLIST_CURSOR);
         P_MTCELLLIST_CURSOR := NULL;
      END IF;
      RETURN(UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_MTCELLLIST_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      IF P_MTCELLLIST_CURSOR IS NULL THEN
         P_MTCELLLIST_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;

      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
         L_WHERE_CLAUSE := 'ORDER BY cell'; 
      ELSIF
         UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
         L_WHERE_CLAUSE := ', dd'||UNAPIGEN.P_DD||'.uvmt mt WHERE mt.version_is_current = ''1'' '||
                           'AND mtcell.version = mt.version '||
                           'AND mtcell.mt = mt.mt '||
                           'AND mtcell.mt = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || '''';  
      ELSE
         L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
      END IF;

      L_SQL_STRING := 'SELECT DISTINCT mtcell.cell FROM ' ||
                      'dd' || UNAPIGEN.P_DD || '.uvmtcell mtcell ' || L_WHERE_CLAUSE;
      DBMS_SQL.PARSE(P_MTCELLLIST_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

      DBMS_SQL.DEFINE_COLUMN(P_MTCELLLIST_CURSOR, 1, L_CELL, 20);
      L_RESULT := DBMS_SQL.EXECUTE(P_MTCELLLIST_CURSOR);
      
   END IF;
   
   L_RESULT := DBMS_SQL.FETCH_ROWS(P_MTCELLLIST_CURSOR);

   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;
      DBMS_SQL.COLUMN_VALUE(P_MTCELLLIST_CURSOR, 1, L_CELL);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_CELL(L_FETCHED_ROWS) := L_CELL;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_MTCELLLIST_CURSOR);
      END IF;
   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_MTCELLLIST_CURSOR);
       P_MTCELLLIST_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   END IF;

   IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_MTCELLLIST_CURSOR);
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   L_SQLERRM := SQLERRM;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ,
                       API_NAME, ERROR_MSG)
   VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
           'GetMtCellList', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   IF DBMS_SQL.IS_OPEN (P_MTCELLLIST_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (P_MTCELLLIST_CURSOR);
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);

END GETMTCELLLIST;

FUNCTION GETMTMEASUREMENTRANGES
(A_MT                      OUT      UNAPIGEN.VC20_TABLE_TYPE,    
 A_VERSION                 OUT      UNAPIGEN.VC20_TABLE_TYPE,    
 A_COMPONENT               OUT      UNAPIGEN.VC20_TABLE_TYPE,    
 A_L_DETECTION_LIMIT       OUT      UNAPIGEN.FLOAT_TABLE_TYPE,   
 A_L_DETERM_LIMIT          OUT      UNAPIGEN.FLOAT_TABLE_TYPE,   
 A_H_DETERM_LIMIT          OUT      UNAPIGEN.FLOAT_TABLE_TYPE,   
 A_H_DETECTION_LIMIT       OUT      UNAPIGEN.FLOAT_TABLE_TYPE,   
 A_UNIT                    OUT      UNAPIGEN.VC20_TABLE_TYPE,    
 A_NR_OF_ROWS              IN OUT   NUMBER,                      
 A_WHERE_CLAUSE            IN       VARCHAR2)                    
RETURN NUMBER IS

L_MT                      VARCHAR2(20);
L_VERSION                 VARCHAR2(20);
L_COMPONENT               VARCHAR2(20);
L_L_DETECTION_LIMIT       NUMBER;
L_L_DETERM_LIMIT          NUMBER;
L_H_DETERM_LIMIT          NUMBER;
L_H_DETECTION_LIMIT       NUMBER;
L_UNIT                    VARCHAR2(20);
L_MTMR_CURSOR             INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'ORDER BY seq'; 
   ELSIF
      UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := ', dd'||UNAPIGEN.P_DD||'.uvmt mt WHERE mt.version_is_current = ''1'' '||
                        'AND mtmr.version = mt.version '|| 
                        'AND mtmr.mt = mt.mt '||
                        'AND mtmr.mt = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                        ''' ORDER BY mtmr.seq';  
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_SQL_STRING := 'SELECT mtmr.mt, mtmr.version, mtmr.component, mtmr.l_detection_limit, '||
                   'mtmr.l_determ_limit, mtmr.h_determ_limit, mtmr.h_detection_limit, mtmr.unit '||
                   'FROM dd' || UNAPIGEN.P_DD || '.uvmtmr mtmr ' || L_WHERE_CLAUSE;

   L_MTMR_CURSOR := DBMS_SQL.OPEN_CURSOR;
   DBMS_SQL.PARSE(L_MTMR_CURSOR,L_SQL_STRING,DBMS_SQL.V7);  

   DBMS_SQL.DEFINE_COLUMN(L_MTMR_CURSOR, 1, L_MT, 20);
   DBMS_SQL.DEFINE_COLUMN(L_MTMR_CURSOR, 2, L_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN(L_MTMR_CURSOR, 3, L_COMPONENT, 20);
   DBMS_SQL.DEFINE_COLUMN(L_MTMR_CURSOR, 4, L_L_DETECTION_LIMIT);
   DBMS_SQL.DEFINE_COLUMN(L_MTMR_CURSOR, 5, L_L_DETERM_LIMIT);
   DBMS_SQL.DEFINE_COLUMN(L_MTMR_CURSOR, 6, L_H_DETERM_LIMIT);
   DBMS_SQL.DEFINE_COLUMN(L_MTMR_CURSOR, 7, L_H_DETECTION_LIMIT);
   DBMS_SQL.DEFINE_COLUMN(L_MTMR_CURSOR, 8, L_UNIT, 20);
   
   L_RESULT := DBMS_SQL.EXECUTE(L_MTMR_CURSOR);

   L_FETCHED_ROWS := 0;
   L_RESULT := DBMS_SQL.FETCH_ROWS(L_MTMR_CURSOR);

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_MTMR_CURSOR, 1, L_MT);
      DBMS_SQL.COLUMN_VALUE(L_MTMR_CURSOR, 2, L_VERSION);
      DBMS_SQL.COLUMN_VALUE(L_MTMR_CURSOR, 3, L_COMPONENT);
      DBMS_SQL.COLUMN_VALUE(L_MTMR_CURSOR, 4, L_L_DETECTION_LIMIT);
      DBMS_SQL.COLUMN_VALUE(L_MTMR_CURSOR, 5, L_L_DETERM_LIMIT);
      DBMS_SQL.COLUMN_VALUE(L_MTMR_CURSOR, 6, L_H_DETERM_LIMIT);
      DBMS_SQL.COLUMN_VALUE(L_MTMR_CURSOR, 7, L_H_DETECTION_LIMIT);
      DBMS_SQL.COLUMN_VALUE(L_MTMR_CURSOR, 8, L_UNIT);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_MT(L_FETCHED_ROWS)                    := L_MT;
      A_VERSION(L_FETCHED_ROWS)               := L_VERSION;
      A_COMPONENT(L_FETCHED_ROWS)             := L_COMPONENT;
      A_L_DETECTION_LIMIT(L_FETCHED_ROWS)     := L_L_DETECTION_LIMIT;
      A_L_DETERM_LIMIT(L_FETCHED_ROWS)        := L_L_DETERM_LIMIT;
      A_H_DETERM_LIMIT(L_FETCHED_ROWS)        := L_H_DETERM_LIMIT;
      A_H_DETECTION_LIMIT(L_FETCHED_ROWS)     := L_H_DETECTION_LIMIT;
      A_UNIT(L_FETCHED_ROWS)                  := L_UNIT;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_MTMR_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_MTMR_CURSOR);

   
   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF ;

   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   L_SQLERRM := SQLERRM;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
          'GetMtMeasurementRanges', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   IF DBMS_SQL.IS_OPEN(L_MTMR_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_MTMR_CURSOR);
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETMTMEASUREMENTRANGES;

FUNCTION SAVEMTMEASUREMENTRANGES
(A_MT                      IN       VARCHAR2,                    
 A_VERSION                 IN       VARCHAR2,                    
 A_COMPONENT               IN       UNAPIGEN.VC20_TABLE_TYPE,    
 A_L_DETECTION_LIMIT       IN       UNAPIGEN.FLOAT_TABLE_TYPE,   
 A_L_DETERM_LIMIT          IN       UNAPIGEN.FLOAT_TABLE_TYPE,   
 A_H_DETERM_LIMIT          IN       UNAPIGEN.FLOAT_TABLE_TYPE,   
 A_H_DETECTION_LIMIT       IN       UNAPIGEN.FLOAT_TABLE_TYPE,   
 A_UNIT                    IN       UNAPIGEN.VC20_TABLE_TYPE,    
 A_NR_OF_ROWS              IN       NUMBER,                      
 A_MODIFY_REASON           IN       VARCHAR2)                    
RETURN NUMBER IS

L_ALLOW_MODIFY CHAR(1);
L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);
L_LOG_HS       CHAR(1);
L_ACTIVE       CHAR(1);

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_MT, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;
   
   IF NVL(A_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;
   
   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('mt', A_MT, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE,
                                           L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTMT
   SET ALLOW_MODIFY='#'
   WHERE MT = A_MT
     AND VERSION = A_VERSION;
      
   DELETE FROM UTMTMR
   WHERE MT = A_MT
     AND VERSION = A_VERSION;

   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      IF A_COMPONENT(L_SEQ_NO) IS NULL THEN
         L_RET_CODE := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
      END IF;    
      
      INSERT INTO UTMTMR(MT, VERSION, SEQ, COMPONENT, L_DETECTION_LIMIT, L_DETERM_LIMIT, 
                         H_DETERM_LIMIT, H_DETECTION_LIMIT, UNIT)
      VALUES(A_MT, A_VERSION, L_SEQ_NO, A_COMPONENT(L_SEQ_NO), A_L_DETECTION_LIMIT(L_SEQ_NO),
             A_L_DETERM_LIMIT(L_SEQ_NO), A_H_DETERM_LIMIT(L_SEQ_NO), A_H_DETECTION_LIMIT(L_SEQ_NO), A_UNIT(L_SEQ_NO));
   END LOOP;

   L_EV_SEQ_NR := -1;
   L_EVENT_TP := 'MtMeasurementRangesUpdated';
   L_RESULT := UNAPIEV.INSERTEVENT('SaveMtMeasurementRanges', UNAPIGEN.P_EVMGR_NAME,
                                   'mt', A_MT, '', '', '', L_EVENT_TP, 'version='||A_VERSION,
                                   L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF NVL(L_LOG_HS, ' ') = '1' THEN
      INSERT INTO UTMTHS (MT, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                          WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES (A_MT, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
              'method "'||A_MT||'" measurement ranges are updated.', 
              CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,  A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;
   
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE <> 1 THEN
         UNAPIGEN.LOGERROR('SaveMtMeasurementRanges', SQLERRM);
      END IF;
      RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveMtMeasurementRanges'));
END SAVEMTMEASUREMENTRANGES;

FUNCTION GETMTEXPERIENCELEVEL
(A_MT                  OUT      UNAPIGEN.VC20_TABLE_TYPE,                       
 A_VERSION             OUT      UNAPIGEN.VC20_TABLE_TYPE,      
 A_EL                  OUT      UNAPIGEN.VC20_TABLE_TYPE,      
 A_NR_OF_ROWS          IN OUT   NUMBER,                        
 A_WHERE_CLAUSE        IN       VARCHAR2)                      
RETURN NUMBER IS

L_MT                  VARCHAR2(20);
L_VERSION             VARCHAR2(20);
L_EL                  VARCHAR2(20);
L_MT_CURSOR           INTEGER;

BEGIN
   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := ' ORDER BY seq'; 
   ELSIF
      UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := ', dd'||UNAPIGEN.P_DD||'.uvmt mt WHERE mt.version_is_current = ''1'' '||
                        'AND mtel.version = mt.version '||
                        'AND mtel.mt = mt.mt '||
                        'AND mtel.mt = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || '''';  
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_MT_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT mtel.mt, mtel.version, mtel.el FROM ' ||
                   'dd' || UNAPIGEN.P_DD || '.uvmtel mtel ' || L_WHERE_CLAUSE;
   DBMS_SQL.PARSE(L_MT_CURSOR, L_SQL_STRING, DBMS_SQL.V7);  

   DBMS_SQL.DEFINE_COLUMN(L_MT_CURSOR, 1, L_MT, 20);
   DBMS_SQL.DEFINE_COLUMN(L_MT_CURSOR, 2, L_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN(L_MT_CURSOR, 3, L_EL, 20);

   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_MT_CURSOR);

   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;
      DBMS_SQL.COLUMN_VALUE(L_MT_CURSOR, 1, L_MT);
      DBMS_SQL.COLUMN_VALUE(L_MT_CURSOR, 2, L_VERSION);
      DBMS_SQL.COLUMN_VALUE(L_MT_CURSOR, 3, L_EL);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_MT(L_FETCHED_ROWS) := L_MT;
      A_VERSION(L_FETCHED_ROWS) := L_VERSION;
      A_EL(L_FETCHED_ROWS) := L_EL;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_MT_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_MT_CURSOR);

   
   IF L_FETCHED_ROWS = 0 THEN
      RETURN(UNAPIGEN.DBERR_NORECORDS);
   END IF;

   A_NR_OF_ROWS := L_FETCHED_ROWS;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   L_SQLERRM := SQLERRM;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ,
                       API_NAME, ERROR_MSG)
   VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
           'GetMtExperienceLevel', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   IF DBMS_SQL.IS_OPEN (L_MT_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_MT_CURSOR);
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETMTEXPERIENCELEVEL;

FUNCTION SAVEMTEXPERIENCELEVEL
(A_MT                      IN       VARCHAR2,                    
 A_VERSION                 IN       VARCHAR2,                    
 A_EL                      IN       UNAPIGEN.VC20_TABLE_TYPE,    
 A_NR_OF_ROWS              IN       NUMBER,                      
 A_MODIFY_REASON           IN       VARCHAR2)                    
RETURN NUMBER IS

L_ALLOW_MODIFY CHAR(1);
L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);
L_LOG_HS       CHAR(1);
L_ACTIVE       CHAR(1);

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_MT, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;
   
   IF NVL(A_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;
   
   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('mt', A_MT, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE,
                                           L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTMT
   SET ALLOW_MODIFY='#'
   WHERE MT = A_MT
     AND VERSION = A_VERSION;
      
   DELETE FROM UTMTEL
   WHERE MT = A_MT
     AND VERSION = A_VERSION;

   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      IF A_EL(L_SEQ_NO) IS NULL THEN
         L_RET_CODE := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
      END IF;    
      
      INSERT INTO UTMTEL(MT, VERSION, SEQ, EL)
      VALUES(A_MT, A_VERSION, L_SEQ_NO, A_EL(L_SEQ_NO));
   END LOOP;

   L_EV_SEQ_NR := -1;
   L_EVENT_TP := 'MtExperienceLevelUpdated';
   L_RESULT := UNAPIEV.INSERTEVENT('SaveMtExperienceLevel', UNAPIGEN.P_EVMGR_NAME,
                                   'mt', A_MT, '', '', '', L_EVENT_TP, 'version='||A_VERSION,
                                   L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF NVL(L_LOG_HS, ' ') = '1' THEN
      INSERT INTO UTMTHS (MT, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                          WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES (A_MT, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
              'method "'||A_MT||'" required experience levels are updated.', 
              CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;
   
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE <> 1 THEN
         UNAPIGEN.LOGERROR('SaveMtExperienceLevel', SQLERRM);
      END IF;
      RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveMtExperienceLevel'));
END SAVEMTEXPERIENCELEVEL;

FUNCTION GETALLOWEDEQLIST
(A_MT                  IN       VARCHAR2,                                    
 A_VERSION             IN       VARCHAR2,                   
 A_CELL                IN       VARCHAR2,                   
 A_LAB                 IN       VARCHAR2,                   
 A_EQ                  OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_SS                  OUT      UNAPIGEN.VC2_TABLE_TYPE,    
 A_CA_WARN_LEVEL       OUT      UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_NR_OF_ROWS          IN OUT   NUMBER)                     
RETURN NUMBER IS

L_CELL                VARCHAR2(20);
L_EQ                  VARCHAR2(20);
L_SS                  VARCHAR2(2);
L_CA_WARN_LEVEL       CHAR(1);
L_ALLOWEDEQ_CURSOR    UNAPIGEN.CURSOR_REF_TYPE;

BEGIN
   
   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_CELL,' ') = ' ' THEN
      L_CELL := A_MT;
   ELSE
      L_CELL := A_CELL;
   END IF;

   L_SQL_STRING := 'SELECT DISTINCT e.eq, e.ss, e.ca_warn_level FROM ' ||
                   'uvmtcelleqtype c, ' || 
                   'dd' || UNAPIGEN.P_DD || '.uveqtype tp,' ||
                   'dd' || UNAPIGEN.P_DD || '.uveq e ' ||
          ' WHERE c.mt = :a_mt' ||  
          ' AND c.version = :a_version' ||  
          ' AND c.cell = :l_cell' ||  
          ' AND c.eq_tp = tp.eq_tp' ||  
          ' AND tp.lab = :a_lab' ||  
          ' AND tp.eq = e.eq' ||  
          ' AND tp.version = e.version' ||  
          ' AND tp.lab = e.lab' ;  

   OPEN L_ALLOWEDEQ_CURSOR
   FOR L_SQL_STRING
   USING A_MT, A_VERSION, L_CELL, A_LAB;   
   
   L_FETCHED_ROWS := 0;

   LOOP
      FETCH L_ALLOWEDEQ_CURSOR
      INTO L_EQ, L_SS, L_CA_WARN_LEVEL;
      EXIT WHEN L_ALLOWEDEQ_CURSOR%NOTFOUND;

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_EQ(L_FETCHED_ROWS) := L_EQ;
      A_SS(L_FETCHED_ROWS) := L_SS;
      A_CA_WARN_LEVEL(L_FETCHED_ROWS) := L_CA_WARN_LEVEL;
      EXIT WHEN L_FETCHED_ROWS >= A_NR_OF_ROWS;

   END LOOP;

   CLOSE L_ALLOWEDEQ_CURSOR;

   
   IF L_FETCHED_ROWS = 0 THEN
      IF ( L_CELL = A_MT ) THEN
         RETURN(UNAPIGEN.DBERR_NORECORDS);
      ELSE   
         
         OPEN L_ALLOWEDEQ_CURSOR
         FOR L_SQL_STRING
         USING A_MT, A_VERSION, A_MT, A_LAB;   
         L_FETCHED_ROWS := 0;

         LOOP
            FETCH L_ALLOWEDEQ_CURSOR
            INTO L_EQ, L_SS, L_CA_WARN_LEVEL;
            EXIT WHEN L_ALLOWEDEQ_CURSOR%NOTFOUND;

            L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
            A_EQ(L_FETCHED_ROWS) := L_EQ;
            A_SS(L_FETCHED_ROWS) := L_SS;
            A_CA_WARN_LEVEL(L_FETCHED_ROWS) := L_CA_WARN_LEVEL;
            EXIT WHEN L_FETCHED_ROWS >= A_NR_OF_ROWS;
         END LOOP;

         CLOSE L_ALLOWEDEQ_CURSOR;

         IF L_FETCHED_ROWS = 0 THEN
            RETURN(UNAPIGEN.DBERR_NORECORDS);
         END IF;
      END IF;
   END IF;

   A_NR_OF_ROWS := L_FETCHED_ROWS;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   L_SQLERRM := SQLERRM;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
           'GetAllowedEqList', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   IF L_ALLOWEDEQ_CURSOR%ISOPEN THEN
      CLOSE L_ALLOWEDEQ_CURSOR;
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETALLOWEDEQLIST;

FUNCTION COPYMETHOD
(A_MT             IN        VARCHAR2,                 
 A_VERSION        IN        VARCHAR2,                 
 A_CP_MT          IN OUT    VARCHAR2,                 
 A_CP_VERSION     IN OUT    VARCHAR2,                 
 A_MODIFY_REASON  IN        VARCHAR2)                 
RETURN NUMBER IS
   CURSOR L_MT_CURSOR(A_MT IN VARCHAR2, A_MT_VERSION IN VARCHAR2) IS
      SELECT LOG_HS
      FROM UTMT
      WHERE MT = A_MT
        AND VERSION = A_MT_VERSION;
   L_MT_REC          L_MT_CURSOR%ROWTYPE;

   L_DYN_CURSOR  INTEGER;

   L_TEMP_LC                 VARCHAR2(2);
   L_TEMP_LC_VERSION         VARCHAR2(20);
   L_TEMP_SS                 VARCHAR2(2);
   L_TEMP_LOG_HS             CHAR(1);
   L_TEMP_ALLOW_MODIFY       CHAR(1);
   L_TEMP_ACTIVE             CHAR(1);
   L_LOG_HS                  CHAR(1);
   L_SQLERRM2                VARCHAR2(255);
BEGIN
   L_SQLERRM := NULL;
   L_SQLERRM2 := NULL;

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   
   IF NVL(A_MT, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID ;
      RAISE STPERROR ;
   END IF;

   IF NVL(A_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   IF NVL(A_CP_MT, ' ') = ' ' THEN
      
      A_CP_MT := A_MT;
   END IF;

   
   OPEN L_MT_CURSOR(A_MT, A_VERSION);
   FETCH L_MT_CURSOR
   INTO L_MT_REC;
   IF L_MT_CURSOR%NOTFOUND THEN
      CLOSE L_MT_CURSOR;
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR;
   END IF;
   CLOSE L_MT_CURSOR;
   
   L_LOG_HS := L_MT_REC.LOG_HS;

   
   IF A_CP_VERSION IS NOT NULL THEN
      OPEN L_MT_CURSOR(A_CP_MT, A_CP_VERSION);
      FETCH L_MT_CURSOR
      INTO L_MT_REC;
      IF L_MT_CURSOR%FOUND THEN
         CLOSE L_MT_CURSOR;
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_ALREADYEXISTS;
         RAISE STPERROR;
      END IF;
      CLOSE L_MT_CURSOR;
   END IF;

   
   
   IF A_CP_VERSION IS NULL THEN
      
      IF A_MT = A_CP_MT THEN
         A_CP_VERSION := A_VERSION;
         L_RET_CODE := UNVERSION.GETHIGHESTMINORVERSION('mt', A_CP_MT, A_CP_VERSION);
         IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
            L_SQLERRM := 'UNVERSION.GetHighestMinorVersion#ret_code='||L_RET_CODE||'#mt='||A_CP_MT||'version='||A_CP_VERSION;
            RAISE STPERROR;
         END IF;

         L_RET_CODE := UNVERSION.GETNEXTMINORVERSION(A_CP_VERSION);
         IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
            L_SQLERRM := 'UNVERSION.GetNextMinorVersion#ret_code='||L_RET_CODE||'#version='||A_CP_VERSION;
            RAISE STPERROR;
         END IF;
      ELSE
         L_RET_CODE := UNVERSION.GETHIGHESTMAJORVERSION('mt', A_CP_MT, A_CP_VERSION);
         IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
            L_SQLERRM := 'UNVERSION.GetHighestMajorVersion#ret_code='||L_RET_CODE||'#mt='||A_CP_MT;
            RAISE STPERROR;
         END IF;

         L_RET_CODE := UNVERSION.GETNEXTMAJORVERSION(A_CP_VERSION);
         IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
            L_SQLERRM := 'UNVERSION.GetNextMajorVersion#ret_code='||L_RET_CODE||'#version='||A_CP_VERSION;
            RAISE STPERROR;
         END IF;
         
      END IF;
   END IF;

   
   
   
   
   
   
   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('mt', A_CP_MT, A_CP_VERSION, L_TEMP_LC,
                                           L_TEMP_LC_VERSION, L_TEMP_SS, L_TEMP_ALLOW_MODIFY,
                                           L_TEMP_ACTIVE, L_TEMP_LOG_HS);
   IF L_RET_CODE <> UNAPIGEN.DBERR_NOOBJECT  THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_ALREADYEXISTS;
      RAISE STPERROR;
   END IF;

   
   

   
   
   L_SQL_STRING := 'INSERT INTO utmt(mt, version, description, description2, '||
                   'unit, est_cost, est_time, accuracy, is_template, calibration, autorecalc, '||
                   'confirm_complete, auto_create_cells, me_result_editable, executor, eq_tp, '||
                   'sop, sop_version, plaus_low, plaus_high, winsize_x, winsize_y, sc_lc, sc_lc_version, '||
                   'def_val_tp, def_au_level, def_val, format, '||
                   'inherit_au, last_comment, mt_class, log_hs, allow_modify, '||
                   'active, lc, lc_version, ss';
   FOR I IN 1..UNAPIGEN.P_DATADOMAINS LOOP
      L_SQL_STRING := L_SQL_STRING||', ar'||I;
   END LOOP;
   L_SQL_STRING := L_SQL_STRING||') ';
   L_SQL_STRING := L_SQL_STRING||'SELECT :a_cp_mt, :a_cp_version, description, description2, '||
                   'unit, est_cost, est_time, accuracy, is_template, calibration, autorecalc, '||
                   'confirm_complete, auto_create_cells, me_result_editable, executor, eq_tp, '||
                   'sop, sop_version, plaus_low, plaus_high, winsize_x, winsize_y, sc_lc, sc_lc_version, '||
                   'def_val_tp, def_au_level, def_val, format, inherit_au, last_comment, mt_class, '||
                   'log_hs, ''#'', ''0'', lc, lc_version, NULL';
   FOR I IN 1..UNAPIGEN.P_DATADOMAINS LOOP
      L_SQL_STRING := L_SQL_STRING||', ar'||I;
   END LOOP;
   L_SQL_STRING := L_SQL_STRING||' FROM utmt WHERE mt = :a_mt'||
                                             ' AND version = :a_version';
   L_DYN_CURSOR := DBMS_SQL.OPEN_CURSOR;
   BEGIN
      DBMS_SQL.PARSE(L_DYN_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      DBMS_SQL.BIND_VARIABLE(L_DYN_CURSOR, ':a_mt', A_MT);
      DBMS_SQL.BIND_VARIABLE(L_DYN_CURSOR, ':a_version', A_VERSION);
      DBMS_SQL.BIND_VARIABLE(L_DYN_CURSOR, ':a_cp_mt', A_CP_MT);
      DBMS_SQL.BIND_VARIABLE(L_DYN_CURSOR, ':a_cp_version', A_CP_VERSION);
      L_RET_CODE := DBMS_SQL.EXECUTE(L_DYN_CURSOR);
   EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := 'Error while copying data for table utmt#sqlcode='||SQLCODE;
      L_SQLERRM2 := 'Used Sql statement: '||SUBSTR(L_SQL_STRING,1,230);
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END;
   L_SQLERRM2 := NULL;
   DBMS_SQL.CLOSE_CURSOR(L_DYN_CURSOR);
   
   INSERT INTO UTMTAU
   (MT, VERSION, AU, AU_VERSION, AUSEQ, VALUE)
   SELECT A_CP_MT, A_CP_VERSION, AU, AU_VERSION, AUSEQ, VALUE
   FROM UTMTAU
   WHERE MT = A_MT
     AND VERSION = A_VERSION;

   

   INSERT INTO UTMTCELL
   (MT, VERSION, CELL, SEQ, DSP_TITLE, DSP_TITLE2, VALUE_F, VALUE_S, POS_X, POS_Y, ALIGN, CELL_TP, 
    WINSIZE_X, WINSIZE_Y, IS_PROTECTED, MANDATORY, HIDDEN, INPUT_TP, INPUT_SOURCE, INPUT_SOURCE_VERSION, 
    INPUT_PP, INPUT_PP_VERSION, INPUT_PR, INPUT_PR_VERSION, INPUT_MT, INPUT_MT_VERSION, DEF_VAL_TP, 
    DEF_AU_LEVEL, SAVE_TP, SAVE_PP, SAVE_PP_VERSION, SAVE_PR, SAVE_PR_VERSION, SAVE_MT, SAVE_MT_VERSION, 
    SAVE_EQ_TP, SAVE_ID, SAVE_ID_VERSION, COMPONENT, UNIT, FORMAT, CALC_TP, CALC_FORMULA, 
    VALID_CF, MAX_X, MAX_Y, MULTI_SELECT, CREATE_NEW)
   SELECT A_CP_MT, A_CP_VERSION, CELL, SEQ, DSP_TITLE, DSP_TITLE2, VALUE_F, VALUE_S, POS_X, POS_Y, ALIGN, CELL_TP, 
    WINSIZE_X, WINSIZE_Y, IS_PROTECTED, MANDATORY, HIDDEN, INPUT_TP, INPUT_SOURCE, INPUT_SOURCE_VERSION, 
    INPUT_PP, INPUT_PP_VERSION, INPUT_PR, INPUT_PR_VERSION, INPUT_MT, INPUT_MT_VERSION, DEF_VAL_TP, 
    DEF_AU_LEVEL, SAVE_TP, SAVE_PP, SAVE_PP_VERSION, SAVE_PR, SAVE_PR_VERSION, SAVE_MT, SAVE_MT_VERSION, 
    SAVE_EQ_TP, SAVE_ID, SAVE_ID_VERSION, COMPONENT, UNIT, FORMAT, CALC_TP, CALC_FORMULA, 
    VALID_CF, MAX_X, MAX_Y, MULTI_SELECT, CREATE_NEW
   FROM UTMTCELL
   WHERE MT = A_MT
     AND VERSION = A_VERSION;
   
   INSERT INTO UTMTCELLEQTYPE
   (MT, VERSION, CELL, SEQ, EQ_TP)
   SELECT A_CP_MT, A_CP_VERSION, CELL, SEQ, EQ_TP
   FROM UTMTCELLEQTYPE
   WHERE MT = A_MT
     AND VERSION = A_VERSION;
   
   INSERT INTO UTMTCELLLIST
   (MT, VERSION, CELL, INDEX_X, INDEX_Y, VALUE_F, VALUE_S, SELECTED)
   SELECT A_CP_MT, A_CP_VERSION, CELL, INDEX_X, INDEX_Y, VALUE_F, VALUE_S, SELECTED
   FROM UTMTCELLLIST
   WHERE MT = A_MT
     AND VERSION = A_VERSION;
   
   INSERT INTO UTMTCELLSPIN
   (MT, VERSION, CELL, CIRCULAR, INCR, LOW_VAL_TP, LOW_AU_LEVEL, LOW_VAL, HIGH_VAL_TP, HIGH_AU_LEVEL, HIGH_VAL)
   SELECT A_CP_MT, A_CP_VERSION, CELL, CIRCULAR, INCR, LOW_VAL_TP, LOW_AU_LEVEL, LOW_VAL, HIGH_VAL_TP, HIGH_AU_LEVEL, HIGH_VAL
   FROM UTMTCELLSPIN
   WHERE MT = A_MT
     AND VERSION = A_VERSION;
   
   INSERT INTO UTMTEL
   (MT, VERSION, EL, SEQ)
   SELECT A_CP_MT, A_CP_VERSION, EL, SEQ
   FROM UTMTEL
   WHERE MT = A_MT
     AND VERSION = A_VERSION;
   
   INSERT INTO UTMTMR
   (MT, VERSION, SEQ, COMPONENT, L_DETECTION_LIMIT, L_DETERM_LIMIT, H_DETERM_LIMIT, H_DETECTION_LIMIT, UNIT)
   SELECT A_CP_MT, A_CP_VERSION, SEQ, COMPONENT, L_DETECTION_LIMIT, L_DETERM_LIMIT, H_DETERM_LIMIT, H_DETECTION_LIMIT, UNIT
   FROM UTMTMR
   WHERE MT = A_MT
     AND VERSION = A_VERSION;
   
   
   L_EVENT_TP := 'ObjectCreated';
   L_EV_SEQ_NR := -1;
   L_RET_CODE := UNAPIEV.INSERTEVENT('NewMtVersion',UNAPIGEN.P_EVMGR_NAME,
                                     'mt', A_CP_MT, '', '', '', L_EVENT_TP,
                                     'version='||A_CP_VERSION, L_EV_SEQ_NR);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   IF L_LOG_HS = '1' THEN
      IF A_MT = A_CP_MT THEN
         INSERT INTO UTMTHS (MT, VERSION, WHO, WHO_DESCRIPTION, WHAT,
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_CP_MT, A_CP_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION,
                 L_EVENT_TP,
                 'method definition "'||A_CP_MT||'" version "'||A_CP_VERSION||'" is created based on version "'||A_VERSION||'"',
                 CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      ELSE
         INSERT INTO UTMTHS (MT, VERSION, WHO, WHO_DESCRIPTION, WHAT,
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_CP_MT, A_CP_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION,
                 L_EVENT_TP,
                 'method definition "'||A_CP_MT||'" version "'||A_CP_VERSION||'" is created based on method definition "'||A_MT||'" version "'||A_VERSION||'"',
                 CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('CopyMethod',SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('CopyMethod',L_SQLERRM);
      IF L_SQLERRM2 IS NOT NULL THEN
         UNAPIGEN.LOGERROR('CopyMethod',L_SQLERRM2);
      END IF;
   END IF ;
   IF L_MT_CURSOR%ISOPEN THEN
      CLOSE L_MT_CURSOR;
   END IF;
   IF DBMS_SQL.IS_OPEN(L_DYN_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_DYN_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'CopyMethod'));
END COPYMETHOD;






BEGIN
   P_MT_CURSOR := NULL;
   P_SAVEMTCL_CALLS := 0 ;
   P_SAVEMTCLVALUES_CALLS := 0 ;
   P_SAVEMTCLSPIN_CALLS := 0 ;
   P_SAVEMTCLEQ_CALLS := 0 ;
END UNAPIMT;
PACKAGE BODY unapiraeq AS






STPERROR      EXCEPTION;
L_RET_CODE    INTEGER;
L_SQLERRM     VARCHAR2(255);
L_SQL_STRING  VARCHAR2(2000);
L_SEP         CHAR(1);

FUNCTION GETVERSION
   RETURN VARCHAR2
IS
BEGIN
   RETURN('06.07.00.00_00.13');
EXCEPTION
   WHEN OTHERS THEN
   RETURN (NULL);
END GETVERSION;




PROCEDURE LOGERROR
(A_API IN VARCHAR2, A_ERROR_MSG IN VARCHAR2)
IS
BEGIN
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
           A_API, A_ERROR_MSG);
END LOGERROR;




FUNCTION REMOVEEQFROMARCHIVE
(A_EQ IN VARCHAR2, A_LAB IN VARCHAR2)
RETURN NUMBER IS
BEGIN
   

   DELETE FROM UAUTEQ
   WHERE EQ = A_EQ
     AND LAB = A_LAB;

   DELETE FROM UAUTEQAU
   WHERE EQ = A_EQ
     AND LAB = A_LAB;

   DELETE FROM UAUTEQCA
   WHERE EQ = A_EQ
     AND LAB = A_LAB;

   DELETE FROM UAUTEQCALOG
   WHERE EQ = A_EQ
     AND LAB = A_LAB;

   DELETE FROM UAUTEQCD
   WHERE EQ = A_EQ
     AND LAB = A_LAB;

   DELETE FROM UAUTEQCT
   WHERE EQ = A_EQ
     AND LAB = A_LAB;

   DELETE FROM UAUTEQCTOLD
   WHERE EQ = A_EQ
     AND LAB = A_LAB;

   DELETE FROM UAUTEQHS
   WHERE EQ = A_EQ
     AND LAB = A_LAB;

   DELETE FROM UAUTEQHSDETAILS
   WHERE EQ = A_EQ
     AND LAB = A_LAB;

   DELETE FROM UAUTEQMR
   WHERE EQ = A_EQ
     AND LAB = A_LAB;

   DELETE FROM UAUTEQCYCT
   WHERE EQ = A_EQ
     AND LAB = A_LAB;

   DELETE FROM UAUTEQTYPE
   WHERE EQ = A_EQ
     AND LAB = A_LAB;
   RETURN(UNAPIGEN.DBERR_SUCCESS);
END REMOVEEQFROMARCHIVE;




FUNCTION COPYEQTOARCHDB
(A_EQ IN VARCHAR2, A_LAB IN VARCHAR2, A_IGNORE_DUP_VAL_ON_INDEX BOOLEAN)
RETURN NUMBER IS
BEGIN
   

   EXECUTE IMMEDIATE
   'INSERT INTO uauteq' ||
   UNAPIRA.LISTALLCOLUMNS('uteq', 'BRACKETS', '1') ||
   ' SELECT '||   UNAPIRA.LISTALLCOLUMNS('uteq', 'NO_BRACKETS', '1') ||
   ' FROM uteq' ||
   ' WHERE eq = '''||A_EQ||''''||
   '   AND lab = '''||A_LAB||'''';

   INSERT INTO UAUTEQAU
      (EQ, LAB, VERSION, AU, AU_VERSION, AUSEQ, VALUE)
   SELECT        EQ, LAB, VERSION, AU, AU_VERSION, AUSEQ, VALUE
   FROM UTEQAU
   WHERE EQ = A_EQ
     AND LAB = A_LAB;

   INSERT INTO UAUTEQCA
      (EQ, LAB, VERSION, CA, SEQ, DESCRIPTION, SOP, SOP_VERSION, ST, ST_VERSION, MT,
      MT_VERSION, CAL_VAL, CAL_COST, CAL_TIME_VAL, CAL_TIME_UNIT, FREQ_TP, FREQ_VAL,
      FREQ_UNIT, INVERT_FREQ, LAST_SCHED, LAST_SCHED_TZ, LAST_VAL, LAST_CNT,
      SUSPEND, GRACE_VAL, GRACE_UNIT, SC, PG, PGNODE, PA, PANODE, ME, MENODE,
      CA_WARN_LEVEL)
   SELECT  EQ, LAB, VERSION, CA, SEQ, DESCRIPTION, SOP, SOP_VERSION, ST, ST_VERSION, MT,
      MT_VERSION, CAL_VAL, CAL_COST, CAL_TIME_VAL, CAL_TIME_UNIT, FREQ_TP, FREQ_VAL,
      FREQ_UNIT, INVERT_FREQ, LAST_SCHED, LAST_SCHED_TZ, LAST_VAL, LAST_CNT,
      SUSPEND, GRACE_VAL, GRACE_UNIT, SC, PG, PGNODE, PA, PANODE, ME, MENODE,
      CA_WARN_LEVEL
   FROM UTEQCA
   WHERE EQ = A_EQ
     AND LAB = A_LAB;

   INSERT INTO UAUTEQCALOG
      (EQ, LAB, VERSION, CA, SEQ, WHO, LOGDATE, LOGDATE_TZ, SC, PG, PGNODE, PA,
      PANODE, ME, MENODE, CA_WARN_LEVEL, WHY)
   SELECT  EQ, LAB, VERSION, CA, SEQ, WHO, LOGDATE, LOGDATE_TZ, SC, PG, PGNODE, PA,
      PANODE, ME, MENODE, CA_WARN_LEVEL, WHY
   FROM UTEQCALOG
   WHERE EQ = A_EQ
     AND LAB = A_LAB;

   INSERT INTO UAUTEQCD
      (EQ, LAB, VERSION, CD, SETTING_NAME, SETTING_VALUE, SETTING_SEQ)
   SELECT        EQ, LAB, VERSION, CD, SETTING_NAME, SETTING_VALUE, SETTING_SEQ
   FROM UTEQCD
   WHERE EQ = A_EQ
     AND LAB = A_LAB;

   INSERT INTO UAUTEQCT
      (EQ, LAB, VERSION, SEQ, CT_NAME, CA, VALUE_S, VALUE_F, FORMAT, UNIT)
   SELECT        EQ, LAB, VERSION, SEQ, CT_NAME, CA, VALUE_S, VALUE_F, FORMAT, UNIT
   FROM UTEQCT
   WHERE EQ = A_EQ
     AND LAB = A_LAB;

   INSERT INTO UAUTEQCTOLD
      (EQ, LAB, VERSION, SEQ, EXEC_START_DATE, EXEC_START_DATE_TZ, CT_NAME, CA,
      VALUE_S, VALUE_F, FORMAT, UNIT)
   SELECT  EQ, LAB, VERSION, SEQ, EXEC_START_DATE, EXEC_START_DATE_TZ, CT_NAME, CA,
      VALUE_S, VALUE_F, FORMAT, UNIT
   FROM UTEQCTOLD
   WHERE EQ = A_EQ
     AND LAB = A_LAB;

   INSERT INTO UAUTEQHS
      (EQ, LAB, VERSION, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE,
      LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
   SELECT  EQ, LAB, VERSION, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE,
      LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ
   FROM UTEQHS
   WHERE EQ = A_EQ
     AND LAB = A_LAB;

   INSERT INTO UAUTEQHSDETAILS
      (EQ, LAB, VERSION, TR_SEQ, EV_SEQ, SEQ, DETAILS)
   SELECT        EQ, LAB, VERSION, TR_SEQ, EV_SEQ, SEQ, DETAILS
   FROM UTEQHSDETAILS
   WHERE EQ = A_EQ
     AND LAB = A_LAB;

   INSERT INTO UAUTEQMR
      (EQ, LAB, VERSION, SEQ, COMPONENT, L_DETECTION_LIMIT, L_DETERM_LIMIT,
      H_DETERM_LIMIT, H_DETECTION_LIMIT, UNIT)
   SELECT  EQ, LAB, VERSION, SEQ, COMPONENT, L_DETECTION_LIMIT, L_DETERM_LIMIT,
      H_DETERM_LIMIT, H_DETECTION_LIMIT, UNIT
   FROM UTEQMR
   WHERE EQ = A_EQ
     AND LAB = A_LAB;

   INSERT INTO UAUTEQCYCT
      (EQ, LAB, VERSION, CY, CY_VERSION, CT_NAME)
   SELECT        EQ, LAB, VERSION, CY, CY_VERSION, CT_NAME
   FROM UTEQCYCT
   WHERE EQ = A_EQ
     AND LAB = A_LAB;

   INSERT INTO UAUTEQTYPE
      (EQ, VERSION, LAB, EQ_TP, SEQ)
   SELECT        EQ, VERSION, LAB, EQ_TP, SEQ
   FROM UTEQTYPE
   WHERE EQ = A_EQ
     AND LAB = A_LAB;

   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
   IF A_IGNORE_DUP_VAL_ON_INDEX THEN
      L_RET_CODE := REMOVEEQFROMARCHIVE(A_EQ, A_LAB);
   END IF;
   RETURN(UNAPIGEN.DBERR_NORECORDS);
END COPYEQTOARCHDB;

FUNCTION ARCHIVEEQTODB
(A_EQ IN VARCHAR2, A_LAB IN VARCHAR2)
RETURN NUMBER IS
BEGIN
   L_RET_CODE := COPYEQTOARCHDB(A_EQ, A_LAB, TRUE);
   IF L_RET_CODE = UNAPIGEN.DBERR_NORECORDS THEN
      L_RET_CODE := COPYEQTOARCHDB(A_EQ, A_LAB, FALSE);
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         L_SQLERRM := 'CopyEqToArchDB#return='||TO_CHAR(L_RET_CODE)
                      ||' for eq='||A_EQ||' lab='||A_LAB;
         RAISE STPERROR;
      END IF;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      L_SQLERRM := SUBSTR(SQLERRM,1,200);
   END IF;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
          'ArchiveEqToDB', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END ARCHIVEEQTODB;

FUNCTION COPYEQFROMARCHDB
(A_EQ IN VARCHAR2, A_LAB IN VARCHAR2, A_IGNORE_DUP_VAL_ON_INDEX BOOLEAN)
RETURN NUMBER IS
BEGIN
   

   EXECUTE IMMEDIATE
   'INSERT INTO uteq' ||
   UNAPIRA.LISTALLCOLUMNS('uteq', 'BRACKETS', '1') ||
   ' SELECT '||   UNAPIRA.LISTALLCOLUMNS('uteq', 'NO_BRACKETS', '1') ||
   ' FROM uauteq' ||
   ' WHERE eq = '''||A_EQ||''''||
   ' AND lab = '''||A_LAB||'''';

   INSERT INTO UTEQAU
      (EQ, LAB, VERSION, AU, AU_VERSION, AUSEQ, VALUE)
   SELECT        EQ, LAB, VERSION, AU, AU_VERSION, AUSEQ, VALUE
   FROM UAUTEQAU
   WHERE EQ = A_EQ
     AND LAB = A_LAB;

   INSERT INTO UTEQCA
      (EQ, LAB, VERSION, CA, SEQ, DESCRIPTION, SOP, SOP_VERSION, ST, ST_VERSION, MT,
      MT_VERSION, CAL_VAL, CAL_COST, CAL_TIME_VAL, CAL_TIME_UNIT, FREQ_TP, FREQ_VAL,
      FREQ_UNIT, INVERT_FREQ, LAST_SCHED, LAST_SCHED_TZ, LAST_VAL, LAST_CNT,
      SUSPEND, GRACE_VAL, GRACE_UNIT, SC, PG, PGNODE, PA, PANODE, ME, MENODE,
      CA_WARN_LEVEL)
   SELECT  EQ, LAB, VERSION, CA, SEQ, DESCRIPTION, SOP, SOP_VERSION, ST, ST_VERSION, MT,
      MT_VERSION, CAL_VAL, CAL_COST, CAL_TIME_VAL, CAL_TIME_UNIT, FREQ_TP, FREQ_VAL,
      FREQ_UNIT, INVERT_FREQ, LAST_SCHED, LAST_SCHED_TZ, LAST_VAL, LAST_CNT,
      SUSPEND, GRACE_VAL, GRACE_UNIT, SC, PG, PGNODE, PA, PANODE, ME, MENODE,
      CA_WARN_LEVEL
   FROM UAUTEQCA
   WHERE EQ = A_EQ
     AND LAB = A_LAB;

   INSERT INTO UTEQCALOG
      (EQ, LAB, VERSION, CA, SEQ, WHO, LOGDATE, LOGDATE_TZ, SC, PG, PGNODE, PA,
      PANODE, ME, MENODE, CA_WARN_LEVEL, WHY)
   SELECT  EQ, LAB, VERSION, CA, SEQ, WHO, LOGDATE, LOGDATE_TZ, SC, PG, PGNODE, PA,
      PANODE, ME, MENODE, CA_WARN_LEVEL, WHY
   FROM UAUTEQCALOG
   WHERE EQ = A_EQ
     AND LAB = A_LAB;

   INSERT INTO UTEQCD
      (EQ, LAB, VERSION, CD, SETTING_NAME, SETTING_VALUE, SETTING_SEQ)
   SELECT        EQ, LAB, VERSION, CD, SETTING_NAME, SETTING_VALUE, SETTING_SEQ
   FROM UAUTEQCD
   WHERE EQ = A_EQ
     AND LAB = A_LAB;

   INSERT INTO UTEQCT
      (EQ, LAB, VERSION, SEQ, CT_NAME, CA, VALUE_S, VALUE_F, FORMAT, UNIT)
   SELECT        EQ, LAB, VERSION, SEQ, CT_NAME, CA, VALUE_S, VALUE_F, FORMAT, UNIT
   FROM UAUTEQCT
   WHERE EQ = A_EQ
     AND LAB = A_LAB;

   INSERT INTO UTEQCTOLD
      (EQ, LAB, VERSION, SEQ, EXEC_START_DATE, EXEC_START_DATE_TZ, CT_NAME, CA,
      VALUE_S, VALUE_F, FORMAT, UNIT)
   SELECT  EQ, LAB, VERSION, SEQ, EXEC_START_DATE, EXEC_START_DATE_TZ, CT_NAME, CA,
      VALUE_S, VALUE_F, FORMAT, UNIT
   FROM UAUTEQCTOLD
   WHERE EQ = A_EQ
     AND LAB = A_LAB;

   INSERT INTO UTEQHS
      (EQ, LAB, VERSION, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE,
      LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
   SELECT  EQ, LAB, VERSION, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE,
      LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ
   FROM UAUTEQHS
   WHERE EQ = A_EQ
     AND LAB = A_LAB;

   INSERT INTO UTEQHSDETAILS
      (EQ, LAB, VERSION, TR_SEQ, EV_SEQ, SEQ, DETAILS)
   SELECT        EQ, LAB, VERSION, TR_SEQ, EV_SEQ, SEQ, DETAILS
   FROM UAUTEQHSDETAILS
   WHERE EQ = A_EQ
     AND LAB = A_LAB;

   INSERT INTO UTEQMR
      (EQ, LAB, VERSION, SEQ, COMPONENT, L_DETECTION_LIMIT, L_DETERM_LIMIT,
      H_DETERM_LIMIT, H_DETECTION_LIMIT, UNIT)
   SELECT  EQ, LAB, VERSION, SEQ, COMPONENT, L_DETECTION_LIMIT, L_DETERM_LIMIT,
      H_DETERM_LIMIT, H_DETECTION_LIMIT, UNIT
   FROM UAUTEQMR
   WHERE EQ = A_EQ
     AND LAB = A_LAB;

   INSERT INTO UTEQCYCT
      (EQ, LAB, VERSION, CY, CY_VERSION, CT_NAME)
   SELECT        EQ, LAB, VERSION, CY, CY_VERSION, CT_NAME
   FROM UAUTEQCYCT
   WHERE EQ = A_EQ
     AND LAB = A_LAB;

   INSERT INTO UTEQTYPE
      (EQ, VERSION, LAB, EQ_TP, SEQ)
   SELECT        EQ, VERSION, LAB, EQ_TP, SEQ
   FROM UAUTEQTYPE
   WHERE EQ = A_EQ
     AND LAB = A_LAB;

   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
   IF A_IGNORE_DUP_VAL_ON_INDEX THEN
      L_RET_CODE := REMOVEEQFROMDB(A_EQ, A_LAB);
   END IF;
   RETURN(UNAPIGEN.DBERR_NORECORDS);
END COPYEQFROMARCHDB;

FUNCTION RESTOREEQFROMDB
(A_EQ IN VARCHAR2, A_LAB IN VARCHAR2)
RETURN NUMBER IS
BEGIN
   L_RET_CODE := COPYEQFROMARCHDB(A_EQ, A_LAB, TRUE);
   IF L_RET_CODE = UNAPIGEN.DBERR_NORECORDS THEN
      L_RET_CODE := COPYEQFROMARCHDB(A_EQ, A_LAB, FALSE);
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         L_SQLERRM := 'CopyEqFromArchDB#return='||TO_CHAR(L_RET_CODE)
                      ||' for eq='||A_EQ||' lab='||A_LAB;
         RAISE STPERROR;
      END IF;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      L_SQLERRM := SUBSTR(SQLERRM,1,200);
   END IF;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
          'RestoreEqFromDB', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END RESTOREEQFROMDB;

FUNCTION REMOVEEQFROMDB
(A_EQ IN VARCHAR2, A_LAB IN VARCHAR2)
RETURN NUMBER IS
BEGIN
   

   DELETE FROM UTEQ
   WHERE EQ = A_EQ
     AND LAB = A_LAB;

   DELETE FROM UTEQAU
   WHERE EQ = A_EQ
     AND LAB = A_LAB;

   DELETE FROM UTEQCA
   WHERE EQ = A_EQ
     AND LAB = A_LAB;

   DELETE FROM UTEQCALOG
   WHERE EQ = A_EQ
     AND LAB = A_LAB;

   DELETE FROM UTEQCD
   WHERE EQ = A_EQ
     AND LAB = A_LAB;

   DELETE FROM UTEQCT
   WHERE EQ = A_EQ
     AND LAB = A_LAB;

   DELETE FROM UTEQCTOLD
   WHERE EQ = A_EQ
     AND LAB = A_LAB;

   DELETE FROM UTEQHS
   WHERE EQ = A_EQ
     AND LAB = A_LAB;

   DELETE FROM UTEQHSDETAILS
   WHERE EQ = A_EQ
     AND LAB = A_LAB;

   DELETE FROM UTEQMR
   WHERE EQ = A_EQ
     AND LAB = A_LAB;

   DELETE FROM UTEQCYCT
   WHERE EQ = A_EQ
     AND LAB = A_LAB;

   DELETE FROM UTEQTYPE
   WHERE EQ = A_EQ
     AND LAB = A_LAB;

   RETURN(UNAPIGEN.DBERR_SUCCESS);
END REMOVEEQFROMDB;

FUNCTION ARCHIVEEQTOFILE
(A_EQ IN VARCHAR2, A_LAB IN VARCHAR2)
RETURN NUMBER IS
   
CURSOR L_UTEQ_CURSOR (A_EQ IN VARCHAR2, A_LAB IN VARCHAR2) IS
   SELECT * FROM UDEQ WHERE EQ=A_EQ AND LAB=A_LAB;

CURSOR L_UTEQAU_CURSOR (A_EQ IN VARCHAR2, A_LAB IN VARCHAR2) IS
   SELECT * FROM UTEQAU WHERE EQ=A_EQ AND LAB=A_LAB;

CURSOR L_UTEQCA_CURSOR (A_EQ IN VARCHAR2, A_LAB IN VARCHAR2) IS
   SELECT * FROM UTEQCA WHERE EQ=A_EQ AND LAB=A_LAB;

CURSOR L_UTEQCALOG_CURSOR (A_EQ IN VARCHAR2, A_LAB IN VARCHAR2) IS
   SELECT * FROM UTEQCALOG WHERE EQ=A_EQ AND LAB=A_LAB;

CURSOR L_UTEQCD_CURSOR (A_EQ IN VARCHAR2, A_LAB IN VARCHAR2) IS
   SELECT * FROM UTEQCD WHERE EQ=A_EQ AND LAB=A_LAB;

CURSOR L_UTEQCT_CURSOR (A_EQ IN VARCHAR2, A_LAB IN VARCHAR2) IS
   SELECT * FROM UTEQCT WHERE EQ=A_EQ AND LAB=A_LAB;

CURSOR L_UTEQCTOLD_CURSOR (A_EQ IN VARCHAR2, A_LAB IN VARCHAR2) IS
   SELECT * FROM UTEQCTOLD WHERE EQ=A_EQ AND LAB=A_LAB;

CURSOR L_UTEQHS_CURSOR (A_EQ IN VARCHAR2, A_LAB IN VARCHAR2) IS
   SELECT * FROM UTEQHS WHERE EQ=A_EQ AND LAB=A_LAB;

CURSOR L_UTEQHSDETAILS_CURSOR (A_EQ IN VARCHAR2, A_LAB IN VARCHAR2) IS
   SELECT * FROM UTEQHSDETAILS WHERE EQ=A_EQ AND LAB=A_LAB;

CURSOR L_UTEQMR_CURSOR (A_EQ IN VARCHAR2, A_LAB IN VARCHAR2) IS
   SELECT * FROM UTEQMR WHERE EQ=A_EQ AND LAB=A_LAB;

CURSOR L_UTEQCYCT_CURSOR (A_EQ IN VARCHAR2, A_LAB IN VARCHAR2) IS
   SELECT * FROM UTEQCYCT WHERE EQ=A_EQ AND LAB=A_LAB;

CURSOR L_UTEQTYPE_CURSOR (A_EQ IN VARCHAR2, A_LAB IN VARCHAR2) IS
   SELECT * FROM UTEQTYPE WHERE EQ=A_EQ AND LAB=A_LAB;

BEGIN

   L_SQLERRM:=NULL;
   UNAPIRA.L_EXCEPTION_STEP :='uteq'||' eq='||A_EQ||' lab='||A_LAB;
   FOR L_REC IN L_UTEQ_CURSOR(A_EQ, A_LAB) LOOP
      UNAPIRA3.L_PUTTEXT := 'uteq' || L_SEP ||
      L_REC.EQ || L_SEP || L_REC.LAB || L_SEP || L_REC.VERSION || L_SEP ||
      L_REC.VERSION_IS_CURRENT || L_SEP ||
      TO_CHAR(L_REC.EFFECTIVE_FROM,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      TO_CHAR(L_REC.EFFECTIVE_FROM_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      TO_CHAR(L_REC.EFFECTIVE_TILL,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      TO_CHAR(L_REC.EFFECTIVE_TILL_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      L_REC.DESCRIPTION || L_SEP || L_REC.SERIAL_NO || L_SEP ||
      L_REC.SUPPLIER || L_SEP || L_REC.LOCATION || L_SEP ||
      L_REC.INVEST_COST || L_SEP || L_REC.INVEST_UNIT || L_SEP ||
      L_REC.USAGE_COST || L_SEP || L_REC.USAGE_UNIT || L_SEP ||
      TO_CHAR(L_REC.INSTALL_DATE,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      TO_CHAR(L_REC.INSTALL_DATE_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      TO_CHAR(L_REC.IN_SERVICE_DATE,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      TO_CHAR(L_REC.IN_SERVICE_DATE_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      L_REC.ACCESSORIES || L_SEP || L_REC.OPERATION || L_SEP ||
      L_REC.OPERATION_DOC || L_SEP || L_REC.OPERATION_DOC_VERSION || L_SEP ||
      L_REC.USAGE || L_SEP || L_REC.USAGE_DOC || L_SEP ||
      L_REC.USAGE_DOC_VERSION || L_SEP || L_REC.EQ_CLASS || L_SEP ||
      L_REC.EQ_COMPONENT || L_SEP || L_REC.KEEP_CTOLD || L_SEP ||
      L_REC.KEEP_CTOLD_UNIT || L_SEP || L_REC.IS_TEMPLATE || L_SEP ||
      L_REC.LAST_COMMENT || L_SEP || L_REC.LOG_HS || L_SEP ||
      L_REC.LOG_HS_DETAILS || L_SEP || L_REC.ALLOW_MODIFY || L_SEP ||
      L_REC.ACTIVE || L_SEP || L_REC.CA_WARN_LEVEL || L_SEP ||
      L_REC.SS || L_SEP || L_REC.LC || L_SEP || L_REC.LC_VERSION || L_SEP ||
      L_REC.AR1 || L_SEP || L_REC.AR2 || L_SEP || L_REC.AR3 || L_SEP ||
      L_REC.AR4 || L_SEP || L_REC.AR5 || L_SEP || L_REC.AR6 || L_SEP ||
      L_REC.AR7 || L_SEP || L_REC.AR8 || L_SEP || L_REC.AR9 || L_SEP ||
      L_REC.AR10 || L_SEP || L_REC.AR11 || L_SEP || L_REC.AR12 || L_SEP ||
      L_REC.AR13 || L_SEP || L_REC.AR14 || L_SEP || L_REC.AR15 || L_SEP ||
      L_REC.AR16 || L_SEP || L_REC.AR17 || L_SEP || L_REC.AR18 || L_SEP ||
      L_REC.AR19 || L_SEP || L_REC.AR20 || L_SEP || L_REC.AR21 || L_SEP ||
      L_REC.AR22 || L_SEP || L_REC.AR23 || L_SEP || L_REC.AR24 || L_SEP ||
      L_REC.AR25 || L_SEP || L_REC.AR26 || L_SEP || L_REC.AR27 || L_SEP ||
      L_REC.AR28 || L_SEP || L_REC.AR29 || L_SEP || L_REC.AR30 || L_SEP ||
      L_REC.AR31 || L_SEP || L_REC.AR32 || L_SEP || L_REC.AR33 || L_SEP ||
      L_REC.AR34 || L_SEP || L_REC.AR35 || L_SEP || L_REC.AR36 || L_SEP ||
      L_REC.AR37 || L_SEP || L_REC.AR38 || L_SEP || L_REC.AR39 || L_SEP ||
      L_REC.AR40 || L_SEP || L_REC.AR41 || L_SEP || L_REC.AR42 || L_SEP ||
      L_REC.AR43 || L_SEP || L_REC.AR44 || L_SEP || L_REC.AR45 || L_SEP ||
      L_REC.AR46 || L_SEP || L_REC.AR47 || L_SEP || L_REC.AR48 || L_SEP ||
      L_REC.AR49 || L_SEP || L_REC.AR50 || L_SEP || L_REC.AR51 || L_SEP ||
      L_REC.AR52 || L_SEP || L_REC.AR53 || L_SEP || L_REC.AR54 || L_SEP ||
      L_REC.AR55 || L_SEP || L_REC.AR56 || L_SEP || L_REC.AR57 || L_SEP ||
      L_REC.AR58 || L_SEP || L_REC.AR59 || L_SEP || L_REC.AR60 || L_SEP ||
      L_REC.AR61 || L_SEP || L_REC.AR62 || L_SEP || L_REC.AR63 || L_SEP ||
      L_REC.AR64 || L_SEP || L_REC.AR65 || L_SEP || L_REC.AR66 || L_SEP ||
      L_REC.AR67 || L_SEP || L_REC.AR68 || L_SEP || L_REC.AR69 || L_SEP ||
      L_REC.AR70 || L_SEP || L_REC.AR71 || L_SEP || L_REC.AR72 || L_SEP ||
      L_REC.AR73 || L_SEP || L_REC.AR74 || L_SEP || L_REC.AR75 || L_SEP ||
      L_REC.AR76 || L_SEP || L_REC.AR77 || L_SEP || L_REC.AR78 || L_SEP ||
      L_REC.AR79 || L_SEP || L_REC.AR80 || L_SEP || L_REC.AR81 || L_SEP ||
      L_REC.AR82 || L_SEP || L_REC.AR83 || L_SEP || L_REC.AR84 || L_SEP ||
      L_REC.AR85 || L_SEP || L_REC.AR86 || L_SEP || L_REC.AR87 || L_SEP ||
      L_REC.AR88 || L_SEP || L_REC.AR89 || L_SEP || L_REC.AR90 || L_SEP ||
      L_REC.AR91 || L_SEP || L_REC.AR92 || L_SEP || L_REC.AR93 || L_SEP ||
      L_REC.AR94 || L_SEP || L_REC.AR95 || L_SEP || L_REC.AR96 || L_SEP ||
      L_REC.AR97 || L_SEP || L_REC.AR98 || L_SEP || L_REC.AR99 || L_SEP ||
      L_REC.AR100 || L_SEP || L_REC.AR101 || L_SEP || L_REC.AR102 || L_SEP ||
      L_REC.AR103 || L_SEP || L_REC.AR104 || L_SEP || L_REC.AR105 || L_SEP ||
      L_REC.AR106 || L_SEP || L_REC.AR107 || L_SEP || L_REC.AR108 || L_SEP ||
      L_REC.AR109 || L_SEP || L_REC.AR110 || L_SEP || L_REC.AR111 || L_SEP ||
      L_REC.AR112 || L_SEP || L_REC.AR113 || L_SEP || L_REC.AR114 || L_SEP ||
      L_REC.AR115 || L_SEP || L_REC.AR116 || L_SEP || L_REC.AR117 || L_SEP ||
      L_REC.AR118 || L_SEP || L_REC.AR119 || L_SEP || L_REC.AR120 || L_SEP ||
      L_REC.AR121 || L_SEP || L_REC.AR122 || L_SEP || L_REC.AR123 || L_SEP ||
      L_REC.AR124 || L_SEP || L_REC.AR125 || L_SEP || L_REC.AR126 || L_SEP ||
      L_REC.AR127 || L_SEP || L_REC.AR128;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   UNAPIRA.L_EXCEPTION_STEP :='uteqau'||' eq='||A_EQ||' lab='||A_LAB;
   FOR L_REC IN L_UTEQAU_CURSOR(A_EQ, A_LAB) LOOP
      UNAPIRA3.L_PUTTEXT := 'uteqau' || L_SEP ||
      L_REC.EQ || L_SEP || L_REC.LAB || L_SEP || L_REC.VERSION || L_SEP ||
      L_REC.AU || L_SEP || L_REC.AU_VERSION || L_SEP || L_REC.AUSEQ || L_SEP ||
      L_REC.VALUE;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   UNAPIRA.L_EXCEPTION_STEP :='uteqca'||' eq='||A_EQ||' lab='||A_LAB;
   FOR L_REC IN L_UTEQCA_CURSOR(A_EQ, A_LAB) LOOP
      UNAPIRA3.L_PUTTEXT := 'uteqca' || L_SEP ||
      L_REC.EQ || L_SEP || L_REC.LAB || L_SEP || L_REC.VERSION || L_SEP ||
      L_REC.CA || L_SEP || L_REC.SEQ || L_SEP || L_REC.DESCRIPTION || L_SEP ||
      L_REC.SOP || L_SEP || L_REC.SOP_VERSION || L_SEP || L_REC.ST || L_SEP ||
      L_REC.ST_VERSION || L_SEP || L_REC.MT || L_SEP ||
      L_REC.MT_VERSION || L_SEP || L_REC.CAL_VAL || L_SEP ||
      L_REC.CAL_COST || L_SEP || L_REC.CAL_TIME_VAL || L_SEP ||
      L_REC.CAL_TIME_UNIT || L_SEP || L_REC.FREQ_TP || L_SEP ||
      L_REC.FREQ_VAL || L_SEP || L_REC.FREQ_UNIT || L_SEP ||
      L_REC.INVERT_FREQ || L_SEP ||
      TO_CHAR(L_REC.LAST_SCHED,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      TO_CHAR(L_REC.LAST_SCHED_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      L_REC.LAST_VAL || L_SEP || L_REC.LAST_CNT || L_SEP ||
      L_REC.SUSPEND || L_SEP || L_REC.GRACE_VAL || L_SEP ||
      L_REC.GRACE_UNIT || L_SEP || L_REC.SC || L_SEP || L_REC.PG || L_SEP ||
      L_REC.PGNODE || L_SEP || L_REC.PA || L_SEP || L_REC.PANODE || L_SEP ||
      L_REC.ME || L_SEP || L_REC.MENODE || L_SEP ||
      L_REC.CA_WARN_LEVEL;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   UNAPIRA.L_EXCEPTION_STEP :='uteqcalog'||' eq='||A_EQ||' lab='||A_LAB;
   FOR L_REC IN L_UTEQCALOG_CURSOR(A_EQ, A_LAB) LOOP
      UNAPIRA3.L_PUTTEXT := 'uteqcalog' || L_SEP ||
      L_REC.EQ || L_SEP || L_REC.LAB || L_SEP || L_REC.VERSION || L_SEP ||
      L_REC.CA || L_SEP || L_REC.SEQ || L_SEP || L_REC.WHO || L_SEP ||
      TO_CHAR(L_REC.LOGDATE,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      TO_CHAR(L_REC.LOGDATE_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      L_REC.SC || L_SEP || L_REC.PG || L_SEP || L_REC.PGNODE || L_SEP ||
      L_REC.PA || L_SEP || L_REC.PANODE || L_SEP || L_REC.ME || L_SEP ||
      L_REC.MENODE || L_SEP || L_REC.CA_WARN_LEVEL || L_SEP ||
      L_REC.WHY;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   UNAPIRA.L_EXCEPTION_STEP :='uteqcd'||' eq='||A_EQ||' lab='||A_LAB;
   FOR L_REC IN L_UTEQCD_CURSOR(A_EQ, A_LAB) LOOP
      UNAPIRA3.L_PUTTEXT := 'uteqcd' || L_SEP ||
      L_REC.EQ || L_SEP || L_REC.LAB || L_SEP || L_REC.VERSION || L_SEP ||
      L_REC.CD || L_SEP || L_REC.SETTING_NAME || L_SEP ||
      L_REC.SETTING_VALUE || L_SEP || L_REC.SETTING_SEQ;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   UNAPIRA.L_EXCEPTION_STEP :='uteqct'||' eq='||A_EQ||' lab='||A_LAB;
   FOR L_REC IN L_UTEQCT_CURSOR(A_EQ, A_LAB) LOOP
      UNAPIRA3.L_PUTTEXT := 'uteqct' || L_SEP ||
      L_REC.EQ || L_SEP || L_REC.LAB || L_SEP || L_REC.VERSION || L_SEP ||
      L_REC.SEQ || L_SEP || L_REC.CT_NAME || L_SEP || L_REC.CA || L_SEP ||
      L_REC.VALUE_S || L_SEP || L_REC.VALUE_F || L_SEP || L_REC.FORMAT || L_SEP ||
      L_REC.UNIT;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   UNAPIRA.L_EXCEPTION_STEP :='uteqctold'||' eq='||A_EQ||' lab='||A_LAB;
   FOR L_REC IN L_UTEQCTOLD_CURSOR(A_EQ, A_LAB) LOOP
      UNAPIRA3.L_PUTTEXT := 'uteqctold' || L_SEP ||
      L_REC.EQ || L_SEP || L_REC.LAB || L_SEP || L_REC.VERSION || L_SEP ||
      L_REC.SEQ || L_SEP ||
      TO_CHAR(L_REC.EXEC_START_DATE,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      TO_CHAR(L_REC.EXEC_START_DATE_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      L_REC.CT_NAME || L_SEP || L_REC.CA || L_SEP || L_REC.VALUE_S || L_SEP ||
      L_REC.VALUE_F || L_SEP || L_REC.FORMAT || L_SEP || L_REC.UNIT;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   UNAPIRA.L_EXCEPTION_STEP :='uteqhs'||' eq='||A_EQ||' lab='||A_LAB;
   FOR L_REC IN L_UTEQHS_CURSOR(A_EQ, A_LAB) LOOP
      UNAPIRA3.L_PUTTEXT := 'uteqhs' || L_SEP ||
      L_REC.EQ || L_SEP || L_REC.LAB || L_SEP || L_REC.VERSION || L_SEP ||
      L_REC.WHO || L_SEP || L_REC.WHO_DESCRIPTION || L_SEP ||
      L_REC.WHAT || L_SEP || L_REC.WHAT_DESCRIPTION || L_SEP ||
      TO_CHAR(L_REC.LOGDATE,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      TO_CHAR(L_REC.LOGDATE_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      L_REC.WHY || L_SEP || L_REC.TR_SEQ || L_SEP || L_REC.EV_SEQ;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   UNAPIRA.L_EXCEPTION_STEP :='uteqhsdetails'||' eq='||A_EQ||' lab='||A_LAB;
   FOR L_REC IN L_UTEQHSDETAILS_CURSOR(A_EQ, A_LAB) LOOP
      UNAPIRA3.L_PUTTEXT := 'uteqhsdetails' || L_SEP ||
      L_REC.EQ || L_SEP || L_REC.LAB || L_SEP || L_REC.VERSION || L_SEP ||
      L_REC.TR_SEQ || L_SEP || L_REC.EV_SEQ || L_SEP || L_REC.SEQ || L_SEP ||
      L_REC.DETAILS;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   UNAPIRA.L_EXCEPTION_STEP :='uteqmr'||' eq='||A_EQ||' lab='||A_LAB;
   FOR L_REC IN L_UTEQMR_CURSOR(A_EQ, A_LAB) LOOP
      UNAPIRA3.L_PUTTEXT := 'uteqmr' || L_SEP ||
      L_REC.EQ || L_SEP || L_REC.LAB || L_SEP || L_REC.VERSION || L_SEP ||
      L_REC.SEQ || L_SEP || L_REC.COMPONENT || L_SEP ||
      L_REC.L_DETECTION_LIMIT || L_SEP || L_REC.L_DETERM_LIMIT || L_SEP ||
      L_REC.H_DETERM_LIMIT || L_SEP || L_REC.H_DETECTION_LIMIT || L_SEP ||
      L_REC.UNIT;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   UNAPIRA.L_EXCEPTION_STEP :='uteqcyct'||' eq='||A_EQ||' lab='||A_LAB;
   FOR L_REC IN L_UTEQCYCT_CURSOR(A_EQ, A_LAB) LOOP
      UNAPIRA3.L_PUTTEXT := 'uteqcyct' || L_SEP ||
      L_REC.EQ || L_SEP || L_REC.LAB || L_SEP || L_REC.VERSION || L_SEP ||
      L_REC.CY || L_SEP || L_REC.CY_VERSION || L_SEP || L_REC.CT_NAME;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   UNAPIRA.L_EXCEPTION_STEP :='uteqtype'||' eq='||A_EQ||' lab='||A_LAB;
   FOR L_REC IN L_UTEQTYPE_CURSOR(A_EQ, A_LAB) LOOP
      UNAPIRA3.L_PUTTEXT := 'uteqtype' || L_SEP ||
      L_REC.EQ || L_SEP || L_REC.VERSION || L_SEP || L_REC.LAB || L_SEP ||
      L_REC.EQ_TP || L_SEP || L_REC.SEQ;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

UNAPIRA3.U4DATAPUTLINE( ' ');

RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN UTL_FILE.INVALID_PATH THEN
   L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Invalid path';
   UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveEqToFile', L_SQLERRM, 'UTL_FILE.INVALID_PATH',UNAPIRA.P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_NOOBJECT);

WHEN UTL_FILE.INVALID_MODE THEN
   L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Invalid mode';
   UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveEqToFile', L_SQLERRM, 'UTL_FILE.INVALID_MODE',UNAPIRA.P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_GENFAIL);

WHEN UTL_FILE.INVALID_FILEHANDLE THEN
   L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Invalid filehandle';
   UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveEqToFile', L_SQLERRM, 'UTL_FILE.INVALID_FILEHANDLE',UNAPIRA.P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_GENFAIL);

WHEN UTL_FILE.INVALID_OPERATION THEN
   
   L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Invalid operation';
   UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveEqToFile', L_SQLERRM, 'UTL_FILE.INVALID_OPERATION',UNAPIRA.P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_NOOBJECT);

WHEN UTL_FILE.READ_ERROR THEN
   L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Read error';
   UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveEqToFile', L_SQLERRM, 'UTL_FILE.READ_ERROR',UNAPIRA.P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_GENFAIL);

WHEN UTL_FILE.WRITE_ERROR THEN
   L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Write error';
   UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveEqToFile', L_SQLERRM, 'UTL_FILE.WRITE_ERROR',UNAPIRA.P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_GENFAIL);

WHEN UTL_FILE.INTERNAL_ERROR THEN
   L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Internal error';
   UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveEqToFile', L_SQLERRM, 'UTL_FILE.INTERNAL_ERROR',UNAPIRA.P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_GENFAIL);

WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      L_SQLERRM := SQLERRM;
      UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveEqToFile', L_SQLERRM, 'UTL_FILE.INTERNAL_ERROR',UNAPIRA.P_CLOSE_CURSOR);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveEqToFile', L_SQLERRM, 'UTL_FILE.INTERNAL_ERROR',UNAPIRA.P_CLOSE_CURSOR);
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END ARCHIVEEQTOFILE;

BEGIN
   L_SEP:=UNAPIRA.P_INTERNAL_SEP;
END UNAPIRAEQ;
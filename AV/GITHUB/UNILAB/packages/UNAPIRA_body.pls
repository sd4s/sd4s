PACKAGE BODY unapira AS

P_ARCH_CURSOR              INTEGER;
L_SQLERRM                  VARCHAR2(2000);
L_SQL_STRING               VARCHAR2(2000);
L_WHERE_CLAUSE             VARCHAR2(1000);
L_RET_CODE                 NUMBER;
STPERROR                   EXCEPTION;
L_DYN_CURSOR               INTEGER;
L_RESULT                   INTEGER;
L_POS_ARCHIVE_ID           INTEGER;
L_POS_ARCHIVE_TO           INTEGER;
L_POS_OBJECT_TP            INTEGER;
L_POS_OBJECT_ID            INTEGER;
L_POS_OBJECT_VERSION       INTEGER;
L_POS_OBJECT_DETAILS       INTEGER;
L_POS_ARCHIVE_ON           INTEGER;
L_POS_COPY_FLAG            INTEGER;
L_POS_DELETE_FLAG          INTEGER;


L_TABSTRUCT_NR_OF_ROWS     INTEGER;
L_TABSTRUCT_TABLE_NAME     UNAPIGEN.VC40_TABLE_TYPE;
L_TABSTRUCT_COLUMNS        UNAPIGEN.VC2000_TABLE_TYPE;


FUNCTION GETVERSION
   RETURN VARCHAR2
IS
BEGIN
   RETURN('06.07.00.00_00.13');
EXCEPTION
   WHEN OTHERS THEN
      RETURN (NULL);
END GETVERSION;






 

FUNCTION ARCHIVETODB              
(A_ARCHIVE_ID    IN VARCHAR2)     
RETURN NUMBER IS
   L_ARCHIVEDB        VARCHAR2(255);
   L_ARCHIVE_ID       VARCHAR2(20);
   L_DBA_NAME         VARCHAR2(255);

   
   L_PP_KEY1          VARCHAR2(20);
   L_PP_KEY2          VARCHAR2(20);
   L_PP_KEY3          VARCHAR2(20);
   L_PP_KEY4          VARCHAR2(20);
   L_PP_KEY5          VARCHAR2(20);
   L_LAB              VARCHAR2(20);
BEGIN
   L_SQLERRM := NULL;
   
   OPEN C_SYSTEM('ARCHIVE_DATABASE');
   FETCH C_SYSTEM
   INTO L_ARCHIVEDB;
   IF C_SYSTEM%NOTFOUND THEN
      CLOSE C_SYSTEM;
      RETURN (UNAPIGEN.DBERR_SYSDEFAULTS);
   END IF;
   CLOSE C_SYSTEM;
   
   OPEN C_SYSTEM ('DBA_NAME');
   FETCH C_SYSTEM INTO L_DBA_NAME;
   IF C_SYSTEM%NOTFOUND THEN
      CLOSE C_SYSTEM;
      RETURN (UNAPIGEN.DBERR_SYSDEFAULTS);
   END IF;
   CLOSE C_SYSTEM;

   IF A_ARCHIVE_ID IS NULL THEN
      L_ARCHIVE_ID := 'u4ar' || TO_CHAR(P_CURR_DATE, 'RRMMDD');
   ELSE
      L_ARCHIVE_ID := A_ARCHIVE_ID;
   END IF;

   
   
   
   FOR L_TOARCHIVE_REC IN C_TOARCHIVE_CURSOR('DB', L_ARCHIVE_ID) LOOP
      BEGIN
         IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
            RAISE STPERROR;
         END IF;

         
         UNAPIRA.PARSEOBJECTDETAILS(L_TOARCHIVE_REC.OBJECT_DETAILS, 
                                     L_PP_KEY1, L_PP_KEY2, L_PP_KEY3, L_PP_KEY4, L_PP_KEY5, L_LAB);
         
         
         
         IF NVL(L_TOARCHIVE_REC.COPY_FLAG, '0') = '1' THEN
            
            IF NVL(L_TOARCHIVE_REC.OBJECT_TP, ' ') = 'rq' THEN
               
               INSERT INTO UAUTARCHINDEX(OBJECT_TP, OBJECT_ID, ARCHIVE_ID, ARCHIVE_DATE, ARCHIVE_DATE_TZ )
               VALUES(L_TOARCHIVE_REC.OBJECT_TP, L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.ARCHIVE_ID, P_CURR_DATE, P_CURR_DATE);
               
               
               L_RET_CODE := UNAPIRARQ.ARCHIVERQTODB(L_TOARCHIVE_REC.OBJECT_ID);
               
               IF L_RET_CODE = UNAPIGEN.DBERR_NORECORDS THEN
                  L_RET_CODE := UNAPIRARQ.REMOVERQFROMARCHIVE(L_TOARCHIVE_REC.OBJECT_ID);
                  L_RET_CODE := UNAPIRARQ.ARCHIVERQTODB(L_TOARCHIVE_REC.OBJECT_ID);
               END IF;
               
               IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
                  L_SQLERRM := 'Rq partially archived '||L_TOARCHIVE_REC.OBJECT_ID;
                  RAISE STPERROR; 
               END IF;
            ELSIF NVL(L_TOARCHIVE_REC.OBJECT_TP, ' ') = 'sc' THEN
               
               INSERT INTO UAUTARCHINDEX(OBJECT_TP, OBJECT_ID, ARCHIVE_ID, ARCHIVE_DATE, ARCHIVE_DATE_TZ )
               VALUES(L_TOARCHIVE_REC.OBJECT_TP, L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.ARCHIVE_ID, P_CURR_DATE, P_CURR_DATE);
               
               
               L_RET_CODE := UNAPIRASC.ARCHIVESCTODB(L_TOARCHIVE_REC.OBJECT_ID);
               
               IF L_RET_CODE = UNAPIGEN.DBERR_NORECORDS THEN
                  L_RET_CODE := UNAPIRASC.REMOVESCFROMARCHIVE(L_TOARCHIVE_REC.OBJECT_ID);
                  L_RET_CODE := UNAPIRASC.ARCHIVESCTODB(L_TOARCHIVE_REC.OBJECT_ID);
               END IF;
               
               IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
                  L_SQLERRM := 'Sc partially archived '||L_TOARCHIVE_REC.OBJECT_ID;
                  RAISE STPERROR; 
               END IF;   
            ELSIF NVL(L_TOARCHIVE_REC.OBJECT_TP, ' ') = 'ws' THEN
               
               INSERT INTO UAUTARCHINDEX(OBJECT_TP, OBJECT_ID, ARCHIVE_ID, ARCHIVE_DATE, ARCHIVE_DATE_TZ )
               VALUES(L_TOARCHIVE_REC.OBJECT_TP, L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.ARCHIVE_ID, P_CURR_DATE, P_CURR_DATE);

               
               L_RET_CODE := UNAPIRAWS.ARCHIVEWSTODB(L_TOARCHIVE_REC.OBJECT_ID);
               
               IF L_RET_CODE = UNAPIGEN.DBERR_NORECORDS THEN
                  L_RET_CODE := UNAPIRAWS.REMOVEWSFROMARCHIVE(L_TOARCHIVE_REC.OBJECT_ID);
                  L_RET_CODE := UNAPIRAWS.ARCHIVEWSTODB(L_TOARCHIVE_REC.OBJECT_ID);
               END IF;
               
               IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
                  L_SQLERRM := 'Ws partially archived '||L_TOARCHIVE_REC.OBJECT_ID;
                  RAISE STPERROR; 
               END IF;   
            ELSIF NVL(L_TOARCHIVE_REC.OBJECT_TP, ' ') = 'sd' THEN
               
               INSERT INTO UAUTARCHINDEX(OBJECT_TP, OBJECT_ID, ARCHIVE_ID, ARCHIVE_DATE, ARCHIVE_DATE_TZ )
               VALUES(L_TOARCHIVE_REC.OBJECT_TP, L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.ARCHIVE_ID, P_CURR_DATE, P_CURR_DATE);
               
               
               L_RET_CODE := UNAPIRASD.ARCHIVESDTODB(L_TOARCHIVE_REC.OBJECT_ID);
               
               IF L_RET_CODE = UNAPIGEN.DBERR_NORECORDS THEN
                  L_RET_CODE := UNAPIRASD.REMOVESDFROMARCHIVE(L_TOARCHIVE_REC.OBJECT_ID);
                  L_RET_CODE := UNAPIRASD.ARCHIVESDTODB(L_TOARCHIVE_REC.OBJECT_ID);
               END IF;
               
               IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
                  L_SQLERRM := 'Sd partially archived '||L_TOARCHIVE_REC.OBJECT_ID;
                  RAISE STPERROR; 
               END IF;
            ELSIF NVL(L_TOARCHIVE_REC.OBJECT_TP, ' ') = 'ch' THEN
               
               INSERT INTO UAUTARCHINDEX(OBJECT_TP, OBJECT_ID, ARCHIVE_ID, ARCHIVE_DATE, ARCHIVE_DATE_TZ )
               VALUES(L_TOARCHIVE_REC.OBJECT_TP, L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.ARCHIVE_ID, P_CURR_DATE, P_CURR_DATE);
               
               
               L_RET_CODE := UNAPIRACH.ARCHIVECHTODB(L_TOARCHIVE_REC.OBJECT_ID);
               
               IF L_RET_CODE = UNAPIGEN.DBERR_NORECORDS THEN
                  L_RET_CODE := UNAPIRACH.REMOVECHFROMARCHIVE(L_TOARCHIVE_REC.OBJECT_ID);
                  L_RET_CODE := UNAPIRACH.ARCHIVECHTODB(L_TOARCHIVE_REC.OBJECT_ID);
               END IF;
               
               IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
                  L_SQLERRM := 'Ch partially archived '||L_TOARCHIVE_REC.OBJECT_ID;
                  RAISE STPERROR; 
               END IF;
            ELSIF NVL(L_TOARCHIVE_REC.OBJECT_TP, ' ') = 'st' THEN
               
               INSERT INTO UAUTARCHINDEX(OBJECT_TP, OBJECT_ID, VERSION, ARCHIVE_ID, ARCHIVE_DATE, ARCHIVE_DATE_TZ )
               VALUES(L_TOARCHIVE_REC.OBJECT_TP, L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.VERSION, 
                      L_TOARCHIVE_REC.ARCHIVE_ID, P_CURR_DATE, P_CURR_DATE);
               
               
               L_RET_CODE := UNAPIRAST.ARCHIVESTTODB(L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.VERSION);
               
               IF L_RET_CODE = UNAPIGEN.DBERR_NORECORDS THEN
                  L_RET_CODE := UNAPIRAST.REMOVESTFROMARCHIVE(L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.VERSION);
                  L_RET_CODE := UNAPIRAST.ARCHIVESTTODB(L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.VERSION);
               END IF;
            ELSIF NVL(L_TOARCHIVE_REC.OBJECT_TP, ' ') = 'wt' THEN
               
               INSERT INTO UAUTARCHINDEX(OBJECT_TP, OBJECT_ID, VERSION, ARCHIVE_ID, ARCHIVE_DATE, ARCHIVE_DATE_TZ )
               VALUES(L_TOARCHIVE_REC.OBJECT_TP, L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.VERSION, 
                      L_TOARCHIVE_REC.ARCHIVE_ID, P_CURR_DATE, P_CURR_DATE);
               
               
               L_RET_CODE := UNAPIRAWT.ARCHIVEWTTODB(L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.VERSION);
               
               IF L_RET_CODE = UNAPIGEN.DBERR_NORECORDS THEN
                  L_RET_CODE := UNAPIRAWT.REMOVEWTFROMARCHIVE(L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.VERSION);
                  L_RET_CODE := UNAPIRAWT.ARCHIVEWTTODB(L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.VERSION);
               END IF;
            ELSIF NVL(L_TOARCHIVE_REC.OBJECT_TP, ' ') = 'pp' THEN
               
               INSERT INTO UAUTARCHINDEX(OBJECT_TP, OBJECT_ID, VERSION, OBJECT_DETAILS, ARCHIVE_ID, ARCHIVE_DATE, ARCHIVE_DATE_TZ )
               VALUES(L_TOARCHIVE_REC.OBJECT_TP, L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.VERSION, 
                      L_TOARCHIVE_REC.OBJECT_DETAILS, L_TOARCHIVE_REC.ARCHIVE_ID, P_CURR_DATE, P_CURR_DATE);
               
               
               L_RET_CODE := UNAPIRAPP.ARCHIVEPPTODB(L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.VERSION,
                                                    L_PP_KEY1, L_PP_KEY2, L_PP_KEY3, L_PP_KEY4, L_PP_KEY5);
               
               IF L_RET_CODE = UNAPIGEN.DBERR_NORECORDS THEN
                  L_RET_CODE := UNAPIRAPP.REMOVEPPFROMARCHIVE(L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.VERSION,
                                                             L_PP_KEY1, L_PP_KEY2, L_PP_KEY3, L_PP_KEY4, L_PP_KEY5);
                  L_RET_CODE := UNAPIRAPP.ARCHIVEPPTODB(L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.VERSION,
                                                       L_PP_KEY1, L_PP_KEY2, L_PP_KEY3, L_PP_KEY4, L_PP_KEY5);
               END IF;
               
               IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
                  L_SQLERRM := 'Pp partially archived '||L_TOARCHIVE_REC.OBJECT_ID||'#version='||L_TOARCHIVE_REC.VERSION||
                               '#pp_key1='||L_PP_KEY1||'#pp_key2='||L_PP_KEY2||'#pp_key3='||L_PP_KEY3||
                               '#pp_key4='||L_PP_KEY4||'#pp_key5='||L_PP_KEY5;
                  RAISE STPERROR; 
               END IF;
            ELSIF NVL(L_TOARCHIVE_REC.OBJECT_TP, ' ') = 'ip' THEN
               
               INSERT INTO UAUTARCHINDEX(OBJECT_TP, OBJECT_ID, VERSION, ARCHIVE_ID, ARCHIVE_DATE, ARCHIVE_DATE_TZ )
               VALUES(L_TOARCHIVE_REC.OBJECT_TP, L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.VERSION, 
                      L_TOARCHIVE_REC.ARCHIVE_ID, P_CURR_DATE, P_CURR_DATE);
               
               
               L_RET_CODE := UNAPIRAIP.ARCHIVEIPTODB(L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.VERSION);
               
               IF L_RET_CODE = UNAPIGEN.DBERR_NORECORDS THEN
                  L_RET_CODE := UNAPIRAIP.REMOVEIPFROMARCHIVE(L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.VERSION);
                  L_RET_CODE := UNAPIRAIP.ARCHIVEIPTODB(L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.VERSION);
               END IF;
               
               IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
                  L_SQLERRM := 'Ip partially archived '||L_TOARCHIVE_REC.OBJECT_ID||'#version='||L_TOARCHIVE_REC.VERSION;
                  RAISE STPERROR; 
               END IF;
            ELSIF NVL(L_TOARCHIVE_REC.OBJECT_TP, ' ') = 'ie' THEN
               
               INSERT INTO UAUTARCHINDEX(OBJECT_TP, OBJECT_ID, VERSION, ARCHIVE_ID, ARCHIVE_DATE, ARCHIVE_DATE_TZ )
               VALUES(L_TOARCHIVE_REC.OBJECT_TP, L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.VERSION, 
                      L_TOARCHIVE_REC.ARCHIVE_ID, P_CURR_DATE, P_CURR_DATE);
               
               
               L_RET_CODE := UNAPIRAIE.ARCHIVEIETODB(L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.VERSION);
               
               IF L_RET_CODE = UNAPIGEN.DBERR_NORECORDS THEN
                  L_RET_CODE := UNAPIRAIE.REMOVEIEFROMARCHIVE(L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.VERSION);
                  L_RET_CODE := UNAPIRAIE.ARCHIVEIETODB(L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.VERSION);
               END IF;
               
               IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
                  L_SQLERRM := 'Ie partially archived '||L_TOARCHIVE_REC.OBJECT_ID||'#version='||L_TOARCHIVE_REC.VERSION;
                  RAISE STPERROR; 
               END IF;
            ELSIF NVL(L_TOARCHIVE_REC.OBJECT_TP, ' ') = 'pr' THEN
               
               INSERT INTO UAUTARCHINDEX(OBJECT_TP, OBJECT_ID, VERSION, ARCHIVE_ID, ARCHIVE_DATE, ARCHIVE_DATE_TZ )
               VALUES(L_TOARCHIVE_REC.OBJECT_TP, L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.VERSION, 
                      L_TOARCHIVE_REC.ARCHIVE_ID, P_CURR_DATE, P_CURR_DATE);
               
               
               L_RET_CODE := UNAPIRAPR.ARCHIVEPRTODB(L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.VERSION);
               
               IF L_RET_CODE = UNAPIGEN.DBERR_NORECORDS THEN
                  L_RET_CODE := UNAPIRAPR.REMOVEPRFROMARCHIVE(L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.VERSION);
                  L_RET_CODE := UNAPIRAPR.ARCHIVEPRTODB(L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.VERSION);
               END IF;
               
               IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
                  L_SQLERRM := 'Pr partially archived '||L_TOARCHIVE_REC.OBJECT_ID||'#version='||L_TOARCHIVE_REC.VERSION;
                  RAISE STPERROR; 
               END IF;
            ELSIF NVL(L_TOARCHIVE_REC.OBJECT_TP, ' ') = 'mt' THEN
               
               INSERT INTO UAUTARCHINDEX(OBJECT_TP, OBJECT_ID, VERSION, ARCHIVE_ID, ARCHIVE_DATE, ARCHIVE_DATE_TZ )
               VALUES(L_TOARCHIVE_REC.OBJECT_TP, L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.VERSION, 
                      L_TOARCHIVE_REC.ARCHIVE_ID, P_CURR_DATE, P_CURR_DATE);
               
               
               L_RET_CODE := UNAPIRAMT.ARCHIVEMTTODB(L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.VERSION);
               
               IF L_RET_CODE = UNAPIGEN.DBERR_NORECORDS THEN
                  L_RET_CODE := UNAPIRAMT.REMOVEMTFROMARCHIVE(L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.VERSION);
                  L_RET_CODE := UNAPIRAMT.ARCHIVEMTTODB(L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.VERSION);
               END IF;
               
               IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
                  L_SQLERRM := 'Mt partially archived '||L_TOARCHIVE_REC.OBJECT_ID||'#version='||L_TOARCHIVE_REC.VERSION;
                  RAISE STPERROR; 
               END IF;
            ELSIF NVL(L_TOARCHIVE_REC.OBJECT_TP, ' ') = 'eq' THEN
               
               INSERT INTO UAUTARCHINDEX(OBJECT_TP, OBJECT_ID, OBJECT_DETAILS, ARCHIVE_ID, ARCHIVE_DATE, ARCHIVE_DATE_TZ )
               VALUES(L_TOARCHIVE_REC.OBJECT_TP, L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.OBJECT_DETAILS, 
                      L_TOARCHIVE_REC.ARCHIVE_ID, P_CURR_DATE, P_CURR_DATE);
               
               
               L_RET_CODE := UNAPIRAEQ.ARCHIVEEQTODB(L_TOARCHIVE_REC.OBJECT_ID, L_LAB);
               
               IF L_RET_CODE = UNAPIGEN.DBERR_NORECORDS THEN
                  L_RET_CODE := UNAPIRAEQ.REMOVEEQFROMARCHIVE(L_TOARCHIVE_REC.OBJECT_ID, L_LAB);
                  L_RET_CODE := UNAPIRAEQ.ARCHIVEEQTODB(L_TOARCHIVE_REC.OBJECT_ID, L_LAB);
               END IF;
            ELSIF NVL(L_TOARCHIVE_REC.OBJECT_TP, ' ') = 'rt' THEN
               
               INSERT INTO UAUTARCHINDEX(OBJECT_TP, OBJECT_ID, VERSION, ARCHIVE_ID, ARCHIVE_DATE, ARCHIVE_DATE_TZ )
               VALUES(L_TOARCHIVE_REC.OBJECT_TP, L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.VERSION, 
                      L_TOARCHIVE_REC.ARCHIVE_ID, P_CURR_DATE, P_CURR_DATE);
               
               
               L_RET_CODE := UNAPIRART.ARCHIVERTTODB(L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.VERSION);
               
               IF L_RET_CODE = UNAPIGEN.DBERR_NORECORDS THEN
                  L_RET_CODE := UNAPIRART.REMOVERTFROMARCHIVE(L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.VERSION);
                  L_RET_CODE := UNAPIRART.ARCHIVERTTODB(L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.VERSION);
               END IF;
               
               IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
                  L_SQLERRM := 'Rt partially archived '||L_TOARCHIVE_REC.OBJECT_ID||'#version='||L_TOARCHIVE_REC.VERSION;
                  RAISE STPERROR; 
               END IF;
            ELSIF NVL(L_TOARCHIVE_REC.OBJECT_TP, ' ') = 'pt' THEN
               
               INSERT INTO UAUTARCHINDEX(OBJECT_TP, OBJECT_ID, VERSION, ARCHIVE_ID, ARCHIVE_DATE, ARCHIVE_DATE_TZ )
               VALUES(L_TOARCHIVE_REC.OBJECT_TP, L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.VERSION, 
                      L_TOARCHIVE_REC.ARCHIVE_ID, P_CURR_DATE, P_CURR_DATE);
               
               
               L_RET_CODE := UNAPIRAPT.ARCHIVEPTTODB(L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.VERSION);
               
               IF L_RET_CODE = UNAPIGEN.DBERR_NORECORDS THEN
                  L_RET_CODE := UNAPIRAPT.REMOVEPTFROMARCHIVE(L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.VERSION);
                  L_RET_CODE := UNAPIRAPT.ARCHIVEPTTODB(L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.VERSION);
               END IF;
               
               IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
                  L_SQLERRM := 'Pt partially archived '||L_TOARCHIVE_REC.OBJECT_ID||'#version='||L_TOARCHIVE_REC.VERSION;
                  RAISE STPERROR; 
               END IF;
            ELSIF NVL(L_TOARCHIVE_REC.OBJECT_TP, ' ') = 'cy' THEN
               
               INSERT INTO UAUTARCHINDEX(OBJECT_TP, OBJECT_ID, VERSION, ARCHIVE_ID, ARCHIVE_DATE, ARCHIVE_DATE_TZ )
               VALUES(L_TOARCHIVE_REC.OBJECT_TP, L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.VERSION, 
                      L_TOARCHIVE_REC.ARCHIVE_ID, P_CURR_DATE, P_CURR_DATE);
               
               
               L_RET_CODE := UNAPIRACY.ARCHIVECYTODB(L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.VERSION);
               
               IF L_RET_CODE = UNAPIGEN.DBERR_NORECORDS THEN
                  L_RET_CODE := UNAPIRACY.REMOVECYFROMARCHIVE(L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.VERSION);
                  L_RET_CODE := UNAPIRACY.ARCHIVECYTODB(L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.VERSION);
               END IF;
               
               IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
                  L_SQLERRM := 'Cy partially archived '||L_TOARCHIVE_REC.OBJECT_ID||'#version='||L_TOARCHIVE_REC.VERSION;
                  RAISE STPERROR; 
               END IF;
            
            ELSIF NVL(SUBSTR(L_TOARCHIVE_REC.OBJECT_TP, 1, 2), ' ') = 'ly' THEN
               
               INSERT INTO UAUTARCHINDEX(OBJECT_TP, OBJECT_ID, ARCHIVE_ID, ARCHIVE_DATE, ARCHIVE_DATE_TZ )
               VALUES(L_TOARCHIVE_REC.OBJECT_TP, L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.ARCHIVE_ID, P_CURR_DATE, P_CURR_DATE);
               
               
               L_RET_CODE := UNAPIRALY.ARCHIVELYTODB(L_TOARCHIVE_REC.OBJECT_ID, SUBSTR(L_TOARCHIVE_REC.OBJECT_TP,3));
               
               IF L_RET_CODE = UNAPIGEN.DBERR_NORECORDS THEN
                  L_RET_CODE := UNAPIRALY.REMOVELYFROMARCHIVE(L_TOARCHIVE_REC.OBJECT_ID, SUBSTR(L_TOARCHIVE_REC.OBJECT_TP,3));
                  L_RET_CODE := UNAPIRALY.ARCHIVELYTODB(L_TOARCHIVE_REC.OBJECT_ID, SUBSTR(L_TOARCHIVE_REC.OBJECT_TP,3));
               END IF;
            ELSIF NVL(SUBSTR(L_TOARCHIVE_REC.OBJECT_TP, 1, 2), ' ') = 'gk' THEN
               
               INSERT INTO UAUTARCHINDEX(OBJECT_TP, OBJECT_ID, ARCHIVE_ID, ARCHIVE_DATE, ARCHIVE_DATE_TZ )
               VALUES(L_TOARCHIVE_REC.OBJECT_TP, L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.ARCHIVE_ID, P_CURR_DATE, P_CURR_DATE);
               
               
               L_RET_CODE := UNAPIRAGK.ARCHIVEGKTODB(L_TOARCHIVE_REC.OBJECT_ID, SUBSTR(L_TOARCHIVE_REC.OBJECT_TP,3));
               
               IF L_RET_CODE = UNAPIGEN.DBERR_NORECORDS THEN
                  L_RET_CODE := UNAPIRAGK.REMOVEGKFROMARCHIVE(L_TOARCHIVE_REC.OBJECT_ID, SUBSTR(L_TOARCHIVE_REC.OBJECT_TP,3));
                  L_RET_CODE := UNAPIRAGK.ARCHIVEGKTODB(L_TOARCHIVE_REC.OBJECT_ID, SUBSTR(L_TOARCHIVE_REC.OBJECT_TP,3));
               END IF;
               
               IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
                  L_SQLERRM := 'Gk partially archived '||L_TOARCHIVE_REC.OBJECT_ID;
                  RAISE STPERROR; 
               END IF;
            ELSIF NVL(L_TOARCHIVE_REC.OBJECT_TP, ' ') = 'au' THEN
               
               INSERT INTO UAUTARCHINDEX(OBJECT_TP, OBJECT_ID, VERSION, ARCHIVE_ID, ARCHIVE_DATE, ARCHIVE_DATE_TZ )
               VALUES(L_TOARCHIVE_REC.OBJECT_TP, L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.VERSION, 
                      L_TOARCHIVE_REC.ARCHIVE_ID, P_CURR_DATE, P_CURR_DATE);
               
               
               L_RET_CODE := UNAPIRAAU.ARCHIVEAUTODB(L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.VERSION);
               
               IF L_RET_CODE = UNAPIGEN.DBERR_NORECORDS THEN
                  L_RET_CODE := UNAPIRAAU.REMOVEAUFROMARCHIVE(L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.VERSION);
                  L_RET_CODE := UNAPIRAAU.ARCHIVEAUTODB(L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.VERSION);
               END IF;
            ELSIF NVL(L_TOARCHIVE_REC.OBJECT_TP, ' ') = 'lc' THEN
               
               INSERT INTO UAUTARCHINDEX(OBJECT_TP, OBJECT_ID, ARCHIVE_ID, ARCHIVE_DATE, ARCHIVE_DATE_TZ )
               VALUES(L_TOARCHIVE_REC.OBJECT_TP, L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.ARCHIVE_ID, P_CURR_DATE, P_CURR_DATE);
               
               
               L_RET_CODE := UNAPIRALC.ARCHIVELCTODB(L_TOARCHIVE_REC.OBJECT_ID);
               
               IF L_RET_CODE = UNAPIGEN.DBERR_NORECORDS THEN
                  L_RET_CODE := UNAPIRALC.REMOVELCFROMARCHIVE(L_TOARCHIVE_REC.OBJECT_ID);
                  L_RET_CODE := UNAPIRALC.ARCHIVELCTODB(L_TOARCHIVE_REC.OBJECT_ID);
               END IF;
            ELSIF NVL(L_TOARCHIVE_REC.OBJECT_TP, ' ') = 'jo' THEN
               
               INSERT INTO UAUTARCHINDEX(OBJECT_TP, OBJECT_ID, ARCHIVE_ID, ARCHIVE_DATE, ARCHIVE_DATE_TZ )
               VALUES(L_TOARCHIVE_REC.OBJECT_TP, L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.ARCHIVE_ID, P_CURR_DATE, P_CURR_DATE);
               
               
               L_RET_CODE := UNAPIRAJO.ARCHIVEJOTODB(L_TOARCHIVE_REC.OBJECT_ID);
               
               IF L_RET_CODE = UNAPIGEN.DBERR_NORECORDS THEN
                  L_RET_CODE := UNAPIRAJO.REMOVEJOFROMARCHIVE(L_TOARCHIVE_REC.OBJECT_ID);
                  L_RET_CODE := UNAPIRAJO.ARCHIVEJOTODB(L_TOARCHIVE_REC.OBJECT_ID);
               END IF;
            ELSIF NVL(L_TOARCHIVE_REC.OBJECT_TP, ' ') = 'co' THEN
               
               INSERT INTO UAUTARCHINDEX(OBJECT_TP, OBJECT_ID, ARCHIVE_ID, ARCHIVE_DATE, ARCHIVE_DATE_TZ )
               VALUES(L_TOARCHIVE_REC.OBJECT_TP, L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.ARCHIVE_ID, P_CURR_DATE, P_CURR_DATE);
               
               
               L_RET_CODE := UNAPIRAT3.REMOVETP3FROMARCHIVE;
               L_RET_CODE := UNAPIRAT3.ARCHIVETP3TODB;
               
               IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
                  L_SQLERRM := 'Type 3 tables partially archived '||L_TOARCHIVE_REC.OBJECT_ID;
                  RAISE STPERROR; 
               END IF;
            ELSIF NVL(L_TOARCHIVE_REC.OBJECT_TP, ' ') = 'at' THEN
               
               INSERT INTO UAUTARCHINDEX(OBJECT_TP, OBJECT_ID, ARCHIVE_ID, ARCHIVE_DATE, ARCHIVE_DATE_TZ )
               VALUES(L_TOARCHIVE_REC.OBJECT_TP, L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.ARCHIVE_ID, P_CURR_DATE, P_CURR_DATE);
               
               
               L_RET_CODE := UNAPIRAAT.REMOVEATFROMARCHIVE;
               L_RET_CODE := UNAPIRAAT.ARCHIVEATTODB;
               
               IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
                  L_SQLERRM := 'Custom tables partially archived '||L_TOARCHIVE_REC.OBJECT_ID;
                  RAISE STPERROR; 
               END IF;
            ELSE
               L_SQLERRM := 'ArchiveToDB: Invalid datatype '||L_TOARCHIVE_REC.OBJECT_TP||'#'||
                            L_TOARCHIVE_REC.OBJECT_ID||'#'||L_TOARCHIVE_REC.VERSION||'#'||L_TOARCHIVE_REC.OBJECT_DETAILS;
               RAISE STPERROR; 
            END IF;
         END IF;
         
         
         
         
         IF NVL(L_TOARCHIVE_REC.DELETE_FLAG, '0') = '1' THEN
            
            IF NVL(L_TOARCHIVE_REC.OBJECT_TP, ' ') = 'rq' THEN
               L_RET_CODE := UNAPIRARQ.REMOVERQFROMDB(L_TOARCHIVE_REC.OBJECT_ID);
            ELSIF NVL(L_TOARCHIVE_REC.OBJECT_TP, ' ') = 'sc' THEN
               L_RET_CODE := UNAPIRASC.REMOVESCFROMDB(L_TOARCHIVE_REC.OBJECT_ID);
            ELSIF NVL(L_TOARCHIVE_REC.OBJECT_TP, ' ') = 'ws' THEN
               L_RET_CODE := UNAPIRAWS.REMOVEWSFROMDB(L_TOARCHIVE_REC.OBJECT_ID);
            ELSIF NVL(L_TOARCHIVE_REC.OBJECT_TP, ' ') = 'sd' THEN
               L_RET_CODE := UNAPIRASD.REMOVESDFROMDB(L_TOARCHIVE_REC.OBJECT_ID);
            ELSIF NVL(L_TOARCHIVE_REC.OBJECT_TP, ' ') = 'ch' THEN
               L_RET_CODE := UNAPIRACH.REMOVECHFROMDB(L_TOARCHIVE_REC.OBJECT_ID);
            ELSIF NVL(L_TOARCHIVE_REC.OBJECT_TP, ' ') = 'st' THEN
               L_RET_CODE := UNAPIRAST.REMOVESTFROMDB(L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.VERSION);
            ELSIF NVL(L_TOARCHIVE_REC.OBJECT_TP, ' ') = 'wt' THEN
               L_RET_CODE := UNAPIRAWT.REMOVEWTFROMDB(L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.VERSION);
            ELSIF NVL(L_TOARCHIVE_REC.OBJECT_TP, ' ') = 'pp' THEN
               L_RET_CODE := UNAPIRAPP.REMOVEPPFROMDB(L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.VERSION,
                                                     L_PP_KEY1, L_PP_KEY2, L_PP_KEY3, L_PP_KEY4, L_PP_KEY5);
            ELSIF NVL(L_TOARCHIVE_REC.OBJECT_TP, ' ') = 'ip' THEN
               L_RET_CODE := UNAPIRAIP.REMOVEIPFROMDB(L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.VERSION);
            ELSIF NVL(L_TOARCHIVE_REC.OBJECT_TP, ' ') = 'ie' THEN
               L_RET_CODE := UNAPIRAIE.REMOVEIEFROMDB(L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.VERSION);
            ELSIF NVL(L_TOARCHIVE_REC.OBJECT_TP, ' ') = 'pr' THEN
               L_RET_CODE := UNAPIRAPR.REMOVEPRFROMDB(L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.VERSION);
            ELSIF NVL(L_TOARCHIVE_REC.OBJECT_TP, ' ') = 'mt' THEN
               L_RET_CODE := UNAPIRAMT.REMOVEMTFROMDB(L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.VERSION);
            ELSIF NVL(L_TOARCHIVE_REC.OBJECT_TP, ' ') = 'eq' THEN
               L_RET_CODE := UNAPIRAEQ.REMOVEEQFROMDB(L_TOARCHIVE_REC.OBJECT_ID, L_LAB);
            ELSIF NVL(L_TOARCHIVE_REC.OBJECT_TP, ' ') = 'rt' THEN
               L_RET_CODE := UNAPIRART.REMOVERTFROMDB(L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.VERSION);
            ELSIF NVL(L_TOARCHIVE_REC.OBJECT_TP, ' ') = 'pt' THEN
               L_RET_CODE := UNAPIRAPT.REMOVEPTFROMDB(L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.VERSION);
            ELSIF NVL(L_TOARCHIVE_REC.OBJECT_TP, ' ') = 'cy' THEN
               L_RET_CODE := UNAPIRACY.REMOVECYFROMDB(L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.VERSION);
            ELSIF NVL(L_TOARCHIVE_REC.OBJECT_TP, ' ') = 'au' THEN
               L_RET_CODE := UNAPIRAAU.REMOVEAUFROMDB(L_TOARCHIVE_REC.OBJECT_ID, L_TOARCHIVE_REC.VERSION);
            ELSIF NVL(L_TOARCHIVE_REC.OBJECT_TP, ' ') = 'lc' THEN
               L_RET_CODE := UNAPIRALC.REMOVELCFROMDB(L_TOARCHIVE_REC.OBJECT_ID);
            ELSIF NVL(SUBSTR(L_TOARCHIVE_REC.OBJECT_TP, 1, 2), ' ') = 'ly' THEN
               L_RET_CODE := UNAPIRALY.REMOVELYFROMDB(L_TOARCHIVE_REC.OBJECT_ID, SUBSTR(L_TOARCHIVE_REC.OBJECT_TP,3));
            ELSIF NVL(SUBSTR(L_TOARCHIVE_REC.OBJECT_TP, 1, 2), ' ') = 'gk' THEN
               L_RET_CODE := UNAPIRAGK.REMOVEGKFROMDB(L_TOARCHIVE_REC.OBJECT_ID, SUBSTR(L_TOARCHIVE_REC.OBJECT_TP,3));
            ELSIF NVL(L_TOARCHIVE_REC.OBJECT_TP, ' ') = 'jo' THEN
               L_RET_CODE := UNAPIRAJO.REMOVEJOFROMDB(L_TOARCHIVE_REC.OBJECT_ID);
            ELSIF NVL(L_TOARCHIVE_REC.OBJECT_TP, ' ') = 'co' THEN
               
               L_RET_CODE := UNAPIRAT3.REMOVETP3FROMDB ;
            ELSIF NVL(L_TOARCHIVE_REC.OBJECT_TP, ' ') = 'at' THEN
               
               L_RET_CODE := UNAPIRAAT.REMOVEATFROMDB ;
            ELSE
               L_SQLERRM := 'ArchiveToDB: Invalid datatype '||L_TOARCHIVE_REC.OBJECT_TP||'#'||
                            L_TOARCHIVE_REC.OBJECT_ID||'#'||L_TOARCHIVE_REC.VERSION||'#'||L_TOARCHIVE_REC.OBJECT_DETAILS;
               RAISE STPERROR; 
            END IF;
         END IF;
         
         
         UPDATE UTTOARCHIVE
         SET HANDLED_OK = '1'
         WHERE OBJECT_TP = L_TOARCHIVE_REC.OBJECT_TP
         AND OBJECT_ID = L_TOARCHIVE_REC.OBJECT_ID
         AND NVL(VERSION,' ') = NVL(L_TOARCHIVE_REC.VERSION,' ')
         AND NVL(OBJECT_DETAILS,' ') = NVL(L_TOARCHIVE_REC.OBJECT_DETAILS,' ')
         AND ARCHIVE_ID = L_ARCHIVE_ID
         AND ARCHIVE_TO = 'DB';
       
         
         
         
         IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
            RAISE STPERROR;
         END IF;
      
      EXCEPTION
      WHEN OTHERS THEN
         IF SQLCODE <> 1 THEN
            L_SQLERRM := SUBSTR(SQLERRM,1,200);
            UNAPIGEN.LOGERROR('ArchiveToDB',L_SQLERRM);
         ELSIF L_SQLERRM IS NOT NULL THEN
            UNAPIGEN.LOGERROR('ArchiveToDB',L_SQLERRM);         
         END IF;
         UNAPIGEN.LOGERROR('ArchiveToDB','Could not archive '||NVL(L_TOARCHIVE_REC.OBJECT_TP,'OBJECT_TP EMPTY')||'#'||
                           NVL(L_TOARCHIVE_REC.OBJECT_ID,'OBJECT_ID EMPTY')||'#'||
                           NVL(L_TOARCHIVE_REC.VERSION,'VERSION EMPTY')||'#'||
                           NVL(L_TOARCHIVE_REC.OBJECT_DETAILS,'OBJECT_DETAILS EMPTY'));
      END;
   END LOOP;

   
   L_RET_CODE := UNAPIRA.CLOSEDBLINK('UNIARCH');
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      RETURN(L_RET_CODE);
   END IF;
   
   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      L_SQLERRM := SUBSTR(SQLERRM,1,200);
      UNAPIGEN.LOGERROR('ArchiveToDB',L_SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('ArchiveToDB',L_SQLERRM);         
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END ARCHIVETODB;


FUNCTION GETARCHIVEINDEXFROMDB                        
(A_ARCHIVE_ID       OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_OBJECT_TP        OUT    UNAPIGEN.VC40_TABLE_TYPE,  
 A_OBJECT_ID        OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_OBJECT_VERSION   OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_OBJECT_DETAILS   OUT    UNAPIGEN.VC255_TABLE_TYPE, 
 A_ARCHIVED_ON      OUT    UNAPIGEN.DATE_TABLE_TYPE,  
 A_NR_OF_ROWS       IN OUT NUMBER,                    
 A_WHERE_CLAUSE     IN     VARCHAR2,                  
 A_NEXT_ROWS        IN     NUMBER)                    
RETURN NUMBER IS
   L_FETCHED_ROWS   INTEGER;
   L_OBJECT_TP      VARCHAR2(40);
   L_OBJECT_ID      VARCHAR2(20);
   L_VERSION        VARCHAR2(20);
   L_OBJECT_DETAILS VARCHAR2(255);
   L_ARCHIVE_ID     VARCHAR2(20);
   L_ARCHIVE_DATE   TIMESTAMP WITH TIME ZONE;

   CURSOR ARCHIVE_CRS IS
       SELECT OBJECT_TP, OBJECT_ID, VERSION, OBJECT_DETAILS, ARCHIVE_ID, ARCHIVE_DATE
       FROM UAUTARCHINDEX
       WHERE ARCHIVE_ID = A_WHERE_CLAUSE;

BEGIN
   
   IF A_NEXT_ROWS = -1 THEN
      A_NR_OF_ROWS := 0;
      IF P_ARCH_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_ARCH_CURSOR);
         P_ARCH_CURSOR := NULL;
      END IF;
      
      
      L_RET_CODE := UNAPIRA.CLOSEDBLINK('UNIARCH');
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         RETURN(L_RET_CODE);
      END IF;
      
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_ARCH_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      IF P_ARCH_CURSOR IS NULL THEN
         P_ARCH_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;
   
      IF (UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ') AND (NVL(A_WHERE_CLAUSE,' ') <> ' ') THEN
   
   
   
        
         L_FETCHED_ROWS := 0;
         FOR L_REC IN ARCHIVE_CRS
         LOOP
                 EXIT WHEN L_FETCHED_ROWS >= A_NR_OF_ROWS;
                 L_FETCHED_ROWS :=   L_FETCHED_ROWS +1;
                A_ARCHIVE_ID(L_FETCHED_ROWS)       := L_REC.ARCHIVE_ID;
                A_OBJECT_TP(L_FETCHED_ROWS)        := L_REC.OBJECT_TP;
                A_OBJECT_ID(L_FETCHED_ROWS)        := L_REC.OBJECT_ID;
                A_OBJECT_VERSION(L_FETCHED_ROWS)   := L_REC.VERSION;
                A_OBJECT_DETAILS(L_FETCHED_ROWS)   := L_REC.OBJECT_DETAILS;
                A_ARCHIVED_ON(L_FETCHED_ROWS)      := L_REC.ARCHIVE_DATE;
         END LOOP;
        
      ELSE
         L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   
   
      L_SQL_STRING := 'SELECT object_tp, object_id, version, object_details, archive_id, NULL ' ||
                      'FROM uautarchindex ' || L_WHERE_CLAUSE;

      DBMS_SQL.PARSE(P_ARCH_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

      DBMS_SQL.DEFINE_COLUMN(P_ARCH_CURSOR, 1, L_OBJECT_TP, 40);
      DBMS_SQL.DEFINE_COLUMN(P_ARCH_CURSOR, 2, L_OBJECT_ID, 20);
      DBMS_SQL.DEFINE_COLUMN(P_ARCH_CURSOR, 3, L_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(P_ARCH_CURSOR, 4, L_OBJECT_DETAILS, 255);
      DBMS_SQL.DEFINE_COLUMN(P_ARCH_CURSOR, 5, L_ARCHIVE_ID, 20);
      DBMS_SQL.DEFINE_COLUMN(P_ARCH_CURSOR, 6, L_ARCHIVE_DATE);
      L_RESULT := DBMS_SQL.EXECUTE(P_ARCH_CURSOR);
   
   L_RESULT := DBMS_SQL.FETCH_ROWS(P_ARCH_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_ARCH_CURSOR, 1, L_OBJECT_TP);
      DBMS_SQL.COLUMN_VALUE(P_ARCH_CURSOR, 2, L_OBJECT_ID);
      DBMS_SQL.COLUMN_VALUE(P_ARCH_CURSOR, 3, L_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_ARCH_CURSOR, 4, L_OBJECT_DETAILS);
      DBMS_SQL.COLUMN_VALUE(P_ARCH_CURSOR, 5, L_ARCHIVE_ID);
      DBMS_SQL.COLUMN_VALUE(P_ARCH_CURSOR, 6, L_ARCHIVE_DATE);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_ARCHIVE_ID(L_FETCHED_ROWS)       := L_ARCHIVE_ID;
      A_OBJECT_TP(L_FETCHED_ROWS)        := L_OBJECT_TP;
      A_OBJECT_ID(L_FETCHED_ROWS)        := L_OBJECT_ID;
      A_OBJECT_VERSION(L_FETCHED_ROWS)   := L_VERSION;
      A_OBJECT_DETAILS(L_FETCHED_ROWS)   := L_OBJECT_DETAILS;
      A_ARCHIVED_ON(L_FETCHED_ROWS)      := L_ARCHIVE_DATE;
      
      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_ARCH_CURSOR);
      END IF;
   END LOOP;
 END IF;
END IF;
   
   IF (L_FETCHED_ROWS = 0) THEN
      DBMS_SQL.CLOSE_CURSOR(P_ARCH_CURSOR);
      P_ARCH_CURSOR := NULL;
      RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_ARCH_CURSOR);
      P_ARCH_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN OTHERS THEN
   L_SQLERRM := SUBSTR(SQLERRM,1,200);
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
          'GetArchiveIndexFromDB', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   IF DBMS_SQL.IS_OPEN (P_ARCH_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (P_ARCH_CURSOR);
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETARCHIVEINDEXFROMDB;


FUNCTION GETARCHIVEINDEXFROMFILE                           
(A_ARCHIVE_FROM     IN     VARCHAR2,                       
 A_ARCHIVE_ID       OUT    UNAPIGEN.VC20_TABLE_TYPE,       
 A_OBJECT_TP        OUT    UNAPIGEN.VC40_TABLE_TYPE,       
 A_OBJECT_ID        OUT    UNAPIGEN.VC20_TABLE_TYPE,       
 A_OBJECT_VERSION   OUT    UNAPIGEN.VC20_TABLE_TYPE,       
 A_OBJECT_DETAILS   OUT    UNAPIGEN.VC255_TABLE_TYPE,      
 A_ARCHIVED_ON      OUT    UNAPIGEN.DATE_TABLE_TYPE,       
 A_NR_OF_ROWS       IN OUT NUMBER,                         
 A_NEXT_ROWS        IN     NUMBER)                         
RETURN NUMBER IS
   L_FETCHED_ROWS       INTEGER;
   L_IND                INTEGER;
   L_POS                INTEGER;
   L_POS1               INTEGER;
   L_POS2               INTEGER;
   L_POS6               INTEGER;
   L_TEXT               VARCHAR2(2000);
   L_ARCHIVE_LANGUAGE   VARCHAR2(80);
   L_ARCHIVE_CHAR_SET   VARCHAR2(40);
   L_SESSION_CHAR_SET   VARCHAR2(40);

   L_COL_DESCR   VARCHAR2(255);
   L_COL_VALUE   UNAPIGEN.VC2000_TABLE_TYPE;
BEGIN
   
   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_ARCHIVE_FROM, ' ') = ' ' THEN
      RETURN(UNAPIGEN.DBERR_NOOBJID);
   END IF;
   
   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   L_EXCEPTION_STEP := NULL;
   L_SQLERRM := NULL;
   
   
   IF A_NEXT_ROWS = -1 THEN
      IF UTL_FILE.IS_OPEN (P_ARCH_FILE_HANDLE) THEN
         L_EXCEPTION_STEP := 'Closing file, directory='||P_FILE_DIR||'#file='||A_ARCHIVE_FROM;
         UTL_FILE.FCLOSE(P_ARCH_FILE_HANDLE);
         L_EXCEPTION_STEP := NULL;
      END IF;
      A_NR_OF_ROWS := 0;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF NOT UTL_FILE.IS_OPEN (P_ARCH_FILE_HANDLE) THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      L_POS_ARCHIVE_ID     := 0;
      L_POS_ARCHIVE_TO     := 0;
      L_POS_OBJECT_TP      := 0;
      L_POS_OBJECT_ID      := 0;
      L_POS_OBJECT_VERSION := 0;
      L_POS_OBJECT_DETAILS := 0;
      L_POS_ARCHIVE_ON     := 0;
      L_POS_COPY_FLAG      := 0;
      L_POS_DELETE_FLAG    := 0;

      IF NOT UTL_FILE.IS_OPEN (P_ARCH_FILE_HANDLE) THEN
         
         P_FILE_NAME := A_ARCHIVE_FROM;

         
         OPEN C_SYSTEM('ARCHIVE_DIR');
         FETCH C_SYSTEM
         INTO P_FILE_DIR;
         IF C_SYSTEM%NOTFOUND THEN
            CLOSE C_SYSTEM;
            RETURN (UNAPIGEN.DBERR_SYSDEFAULTS);
         END IF;     
         CLOSE C_SYSTEM;

         L_EXCEPTION_STEP := 'Opening (in read-only mode) directory='||P_FILE_DIR||'#file='||A_ARCHIVE_FROM;
         P_ARCH_FILE_HANDLE := UTL_FILE.FOPEN(P_FILE_DIR, A_ARCHIVE_FROM, 'R');
         L_EXCEPTION_STEP := NULL;
         
         
         LOOP
            L_EXCEPTION_STEP := 'Reading one line from directory='||P_FILE_DIR||'#file='||A_ARCHIVE_FROM;
            UTL_FILE.GET_LINE(P_ARCH_FILE_HANDLE, L_TEXT);
            L_EXCEPTION_STEP := NULL;
            
            
            IF SUBSTR(L_TEXT, 1, 8) = 'LANGUAGE' THEN
               L_ARCHIVE_LANGUAGE := SUBSTR(L_TEXT, INSTR(L_TEXT,UNAPIRA.P_SEP,1,1)+1);
               L_ARCHIVE_CHAR_SET := SUBSTR(L_ARCHIVE_LANGUAGE, INSTR(L_ARCHIVE_LANGUAGE,'.',-1,1)+1);
               L_SESSION_CHAR_SET := SUBSTR(USERENV('LANGUAGE'), INSTR(USERENV('LANGUAGE'),'.',-1,1)+1);
               IF L_ARCHIVE_CHAR_SET <> L_SESSION_CHAR_SET THEN
                  L_SQLERRM := 'Archive character set '||L_ARCHIVE_CHAR_SET||
                               ' does not match session character set '||L_SESSION_CHAR_SET||
                               '. Manual conversion is necessary. If this will not be done, '||
                               'the database can be made corrupt.';
                  UTLFILEEXCEPTIONHANDLER('GetArchiveIndexFromFILE', L_SQLERRM, 'OTHERS', P_CLOSE_CURSOR);
                  RETURN(UNAPIGEN.DBERR_GENFAIL);
               END IF;
            END IF;
            EXIT WHEN LTRIM(RTRIM(L_TEXT)) IN ('[Index]', '[End of File]'); 
         END LOOP;
         
         IF L_TEXT = '[End of File]' THEN
            L_SQLERRM := '[End of File] found without [Index] section';
            RAISE STPERROR;
         END IF;
         
         
         L_EXCEPTION_STEP := 'Reading row after [Index] to skip the row  [object_tp ... in directory='||P_FILE_DIR||
                             '#file='|| A_ARCHIVE_FROM;
         UTL_FILE.GET_LINE(P_ARCH_FILE_HANDLE, L_TEXT);
         L_EXCEPTION_STEP := NULL;
          
         
         L_IND := 1;
         L_POS1 := 1;
         L_TEXT := REPLACE(L_TEXT ,']');
         L_POS2 := INSTR(L_TEXT, P_SEP, 1, 1);
         LOOP
            IF L_POS2 > 0 THEN
               L_COL_DESCR := SUBSTR(L_TEXT, L_POS1 +1, L_POS2 - L_POS1 -1);
            ELSE
               L_COL_DESCR := SUBSTR(L_TEXT, L_POS1 +1);
            END IF;
            
            IF L_COL_DESCR = 'object_tp' THEN
               L_POS_OBJECT_TP := L_IND;
            ELSIF L_COL_DESCR = 'object_id' THEN
               L_POS_OBJECT_ID := L_IND;
            ELSIF L_COL_DESCR = 'object_version' THEN
               L_POS_OBJECT_VERSION := L_IND;
            ELSIF L_COL_DESCR = 'object_details' THEN
               L_POS_OBJECT_DETAILS := L_IND;
            ELSIF L_COL_DESCR = 'copy_flag' THEN
               L_POS_COPY_FLAG := L_IND;
            ELSIF L_COL_DESCR = 'delete_flag' THEN
               L_POS_DELETE_FLAG := L_IND;
            ELSIF L_COL_DESCR = 'archive_to' THEN
               L_POS_ARCHIVE_TO:= L_IND;
            ELSIF L_COL_DESCR = 'archive_on' THEN
               L_POS_ARCHIVE_ON := L_IND;
            ELSIF L_COL_DESCR = 'archive_id' THEN
               L_POS_ARCHIVE_ID:= L_IND;
            END IF;
            
            EXIT WHEN L_POS2 < 1; 
            L_IND := L_IND +1;
            L_POS1 := INSTR(L_TEXT, P_SEP, 1, L_IND - 1);
            L_POS2 := INSTR(L_TEXT, P_SEP, 1, L_IND);
         END LOOP;
      END IF;
   END IF;

   L_FETCHED_ROWS := 0;
   LOOP
      EXIT WHEN L_FETCHED_ROWS >= A_NR_OF_ROWS;
      L_EXCEPTION_STEP := 'Reading one line from directory='||P_FILE_DIR||'#file='||A_ARCHIVE_FROM;
      UTL_FILE.GET_LINE(P_ARCH_FILE_HANDLE, L_TEXT);
      L_EXCEPTION_STEP := NULL;
         
      EXIT WHEN NVL(L_TEXT, ' ') = ' ';

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      L_EXCEPTION_STEP := 'Filling in output arrays';
      
      L_POS6 := INSTR(L_TEXT, P_SEP, 1, 6);
      
      
      IF (L_POS6) IS NULL THEN 
         
         INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
         VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                'GetArchiveIndexFromFILE', 'Corrupt row in [Index] section of archive file:'||SUBSTR(L_TEXT,1,200));
         UNAPIGEN.U4COMMIT;
         L_SQLERRM := 'There are less than 6 seperators in this row!';
         INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
         VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                'GetArchiveIndexFromFILE', L_SQLERRM);
         L_SQLERRM := NULL;
         UNAPIGEN.U4COMMIT;
      END IF;
      
      BEGIN
         IF L_POS_ARCHIVE_ID = 1 THEN
            L_POS1 := 0;
         ELSE
            L_POS1 := INSTR(L_TEXT, P_SEP, 1, L_POS_ARCHIVE_ID-1);
         END IF;
         L_POS2 := INSTR(L_TEXT, P_SEP, 1, L_POS_ARCHIVE_ID);
         IF L_POS2 > 0 THEN
            A_ARCHIVE_ID(L_FETCHED_ROWS) := SUBSTR(L_TEXT, L_POS1+1, L_POS2-L_POS1-1);
         ELSE
            A_ARCHIVE_ID(L_FETCHED_ROWS) := SUBSTR(L_TEXT, L_POS1+1);
         END IF;
      EXCEPTION
      WHEN VALUE_ERROR THEN
         A_ARCHIVE_ID(L_FETCHED_ROWS) := 'ERROR IN archive_id';
         INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
         VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                'GetArchiveIndexFromFILE', 'archive_id could not be extracted from string '||SUBSTR(L_TEXT,1,200));
         UNAPIGEN.U4COMMIT;
      END;

      BEGIN
         IF L_POS_OBJECT_TP = 1 THEN
            L_POS1 := 0;
         ELSE
            L_POS1 := INSTR(L_TEXT, P_SEP, 1, L_POS_OBJECT_TP-1);
         END IF;
         L_POS2 := INSTR(L_TEXT, P_SEP, 1, L_POS_OBJECT_TP);
         IF L_POS2 > 0 THEN
            A_OBJECT_TP(L_FETCHED_ROWS) := SUBSTR(L_TEXT, L_POS1+1, L_POS2-L_POS1-1);
         ELSE
            A_OBJECT_TP(L_FETCHED_ROWS) := SUBSTR(L_TEXT, L_POS1+1);
         END IF;
      EXCEPTION
      WHEN VALUE_ERROR THEN
         A_OBJECT_TP(L_FETCHED_ROWS) := 'ERR!';
         INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
         VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                'GetArchiveIndexFromFILE', 'object_tp could not be extracted from string '||SUBSTR(L_TEXT,1,200));
         UNAPIGEN.U4COMMIT;
      END;

      BEGIN
         IF L_POS_OBJECT_ID = 1 THEN
            L_POS1 := 0;
         ELSE
            L_POS1 := INSTR(L_TEXT, P_SEP, 1, L_POS_OBJECT_ID-1);
         END IF;
         L_POS2 := INSTR(L_TEXT, P_SEP, 1, L_POS_OBJECT_ID);
         IF L_POS2 > 0 THEN
            A_OBJECT_ID(L_FETCHED_ROWS) := SUBSTR(L_TEXT, L_POS1+1, L_POS2-L_POS1-1);
         ELSE
            A_OBJECT_ID(L_FETCHED_ROWS) := SUBSTR(L_TEXT, L_POS1+1);
         END IF;
      EXCEPTION
      WHEN VALUE_ERROR THEN
         A_OBJECT_ID(L_FETCHED_ROWS) := 'ERROR in object_id';
         INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
         VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                'GetArchiveIndexFromFILE', 'object_id could not be extracted from string '||SUBSTR(L_TEXT,1,200));
         UNAPIGEN.U4COMMIT;
      END;

      BEGIN
         IF L_POS_OBJECT_VERSION = 1 THEN
            L_POS1 := 0;
         ELSE 
            L_POS1 := INSTR(L_TEXT, P_SEP, 1, L_POS_OBJECT_VERSION-1);
         END IF;
         L_POS2 := INSTR(L_TEXT, P_SEP, 1, L_POS_OBJECT_VERSION);
         IF L_POS2 > 0 THEN
            A_OBJECT_VERSION(L_FETCHED_ROWS) := SUBSTR(L_TEXT, L_POS1+1, L_POS2-L_POS1-1);
         ELSE
            A_OBJECT_VERSION(L_FETCHED_ROWS) := SUBSTR(L_TEXT, L_POS1+1);
         END IF;
      EXCEPTION
      WHEN VALUE_ERROR THEN
         IF L_POS_OBJECT_VERSION = 0 THEN
            
            A_OBJECT_VERSION(L_FETCHED_ROWS) := UNVERSION.P_NO_VERSION;
         ELSE
            A_OBJECT_VERSION(L_FETCHED_ROWS) := 'ERROR obj_version';
            INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
            VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                   'GetArchiveIndexFromFILE', 'object_version could not be extracted from string '||SUBSTR(L_TEXT,1,200));
            UNAPIGEN.U4COMMIT;
         END IF;
      END;

      BEGIN
         IF L_POS_OBJECT_DETAILS = 1 THEN
            L_POS1 := 0;
         ELSE
            L_POS1 := INSTR(L_TEXT, P_SEP, 1, L_POS_OBJECT_DETAILS-1);
         END IF;
         L_POS2 := INSTR(L_TEXT, P_SEP, 1, L_POS_OBJECT_DETAILS);
         IF L_POS2 > 0 THEN
            A_OBJECT_DETAILS(L_FETCHED_ROWS) := SUBSTR(L_TEXT, L_POS1+1, L_POS2-L_POS1-1);
         ELSE
            A_OBJECT_DETAILS(L_FETCHED_ROWS) := SUBSTR(L_TEXT, L_POS1+1);
         END IF;
      EXCEPTION
      WHEN VALUE_ERROR THEN
         IF L_POS_OBJECT_DETAILS = 0 THEN
            
            A_OBJECT_DETAILS(L_FETCHED_ROWS) := NULL;
         ELSE
            A_OBJECT_DETAILS(L_FETCHED_ROWS) := 'ERROR in object_details';
            INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
            VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                   'GetArchiveIndexFromFILE', 'object_details could not be extracted from string '||SUBSTR(L_TEXT,1,200));
            UNAPIGEN.U4COMMIT;
         END IF;
      END;

      BEGIN
         IF L_POS_ARCHIVE_ON = 1 THEN
            L_POS1 := 0;
         ELSE
            L_POS1 := INSTR(L_TEXT, P_SEP, 1, L_POS_ARCHIVE_ON-1);
         END IF;
         L_POS2 := INSTR(L_TEXT, P_SEP, 1, L_POS_ARCHIVE_ON);
         IF L_POS2 > 0 THEN
            A_ARCHIVED_ON(L_FETCHED_ROWS) := SUBSTR(L_TEXT, L_POS1+1, L_POS2-L_POS1-1);
         ELSE
            A_ARCHIVED_ON(L_FETCHED_ROWS) := SUBSTR(L_TEXT, L_POS1+1);
         END IF;
      EXCEPTION
      WHEN VALUE_ERROR THEN
         A_ARCHIVED_ON(L_FETCHED_ROWS) := 'ERROR in archive_on';
         INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
         VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                'GetArchiveIndexFromFILE', 'archive_on could not be extracted from string '||SUBSTR(L_TEXT,1,200));
         UNAPIGEN.U4COMMIT;
      END;
      L_EXCEPTION_STEP := NULL;
   END LOOP;

   
   IF L_TEXT = ' ' THEN
      LOOP
         L_EXCEPTION_STEP := 'Reading one line from directory='||P_FILE_DIR||'#file='||A_ARCHIVE_FROM||
                             ' to check if [End Of File] section is present';
         UTL_FILE.GET_LINE(P_ARCH_FILE_HANDLE, L_TEXT);         
         EXIT WHEN L_TEXT = '[End of File]';
         L_EXCEPTION_STEP := NULL;
      END LOOP;
   END IF;
   
   
   IF (L_FETCHED_ROWS = 0) THEN
      L_EXCEPTION_STEP := 'Closing file, directory='||P_FILE_DIR||'#file='||A_ARCHIVE_FROM;
      UTL_FILE.FCLOSE(P_ARCH_FILE_HANDLE);
      L_EXCEPTION_STEP := NULL;
      RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      L_EXCEPTION_STEP := 'Closing file, directory='||P_FILE_DIR||'#file='||A_ARCHIVE_FROM;
      UTL_FILE.FCLOSE(P_ARCH_FILE_HANDLE);
      L_EXCEPTION_STEP := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN UTL_FILE.INVALID_PATH THEN
   L_SQLERRM := 'directory='||P_FILE_DIR||'#file='||P_FILE_NAME ||':Invalid path';
   UTLFILEEXCEPTIONHANDLER('GetArchiveIndexFromFILE', L_SQLERRM, 'UTL_FILE.INVALID_PATH',P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_NOOBJECT);
WHEN UTL_FILE.INVALID_MODE THEN
   L_SQLERRM := 'directory='||P_FILE_DIR||'#file='||P_FILE_NAME ||':Invalid mode';
   UTLFILEEXCEPTIONHANDLER('GetArchiveIndexFromFILE', L_SQLERRM, 'UTL_FILE.INVALID_MODE',P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_GENFAIL);
WHEN UTL_FILE.INVALID_FILEHANDLE THEN
   L_SQLERRM := 'directory='||P_FILE_DIR||'#file='||P_FILE_NAME ||':Invalid filehandle';
   UTLFILEEXCEPTIONHANDLER('GetArchiveIndexFromFILE', L_SQLERRM, 'UTL_FILE.INVALID_FILEHANDLE',P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_GENFAIL);
WHEN UTL_FILE.INVALID_OPERATION THEN
   
   L_SQLERRM := 'directory='||P_FILE_DIR||'#file='||P_FILE_NAME ||':Invalid operation';
   UTLFILEEXCEPTIONHANDLER('GetArchiveIndexFromFILE', L_SQLERRM, 'UTL_FILE.INVALID_OPERATION',P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_NOOBJECT);
WHEN UTL_FILE.READ_ERROR THEN
   L_SQLERRM := 'directory='||P_FILE_DIR||'#file='||P_FILE_NAME ||':Read error';
   UTLFILEEXCEPTIONHANDLER('GetArchiveIndexFromFILE', L_SQLERRM, 'UTL_FILE.READ_ERROR',P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_GENFAIL);
WHEN UTL_FILE.WRITE_ERROR THEN
   L_SQLERRM := 'directory='||P_FILE_DIR||'#file='||P_FILE_NAME ||':Write error';
   UTLFILEEXCEPTIONHANDLER('GetArchiveIndexFromFILE', L_SQLERRM, 'UTL_FILE.WRITE_ERROR',P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_GENFAIL);
WHEN UTL_FILE.INTERNAL_ERROR THEN
   L_SQLERRM := 'directory='||P_FILE_DIR||'#file='||P_FILE_NAME ||':Internal error';
   UTLFILEEXCEPTIONHANDLER('GetArchiveIndexFromFILE', L_SQLERRM, 'UTL_FILE.INTERNAL_ERROR',P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_GENFAIL);
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      L_SQLERRM := SUBSTR(SQLERRM,1,200);
      UTLFILEEXCEPTIONHANDLER('GetArchiveIndexFromFILE', L_SQLERRM, 'UTL_FILE.INTERNAL_ERROR',P_CLOSE_CURSOR);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UTLFILEEXCEPTIONHANDLER('GetArchiveIndexFromFILE', L_SQLERRM, 'UTL_FILE.INTERNAL_ERROR',P_CLOSE_CURSOR);
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETARCHIVEINDEXFROMFILE;











FUNCTION ARCHIVE                         
(A_ARCHIVE_ID       IN VARCHAR2,         
 A_ARCHIVE_TO       IN VARCHAR2,         
 A_ARCHFILE         IN VARCHAR2)         
RETURN NUMBER IS
   L_LOCKED             BOOLEAN;
   L_SELF_SYNONYMS      NUMBER; 
   L_SESSION_TIMEZONE   VARCHAR2(64);
BEGIN
   
   SELECT SESSIONTIMEZONE
     INTO L_SESSION_TIMEZONE
     FROM DUAL;
   EXECUTE IMMEDIATE 'ALTER SESSION SET time_zone = DBTIMEZONE';
   
   L_LOCKED := FALSE;
   L_RET_CODE := UNAPIGEN.REQUESTLOCK('U4RADEF', '0', 1);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.LOGERROR('Archive','RequestLock returned '||L_RET_CODE);         
      RETURN(L_RET_CODE);
   END IF;
   L_LOCKED := TRUE;

   
   
   IF NVL(A_ARCHIVE_TO, ' ') = 'DB' THEN
      
      SELECT COUNT(*) 
        INTO L_SELF_SYNONYMS
        FROM USER_SYNONYMS
       WHERE SYNONYM_NAME LIKE 'UA%'
         AND DB_LINK IS NULL ;

      IF L_SELF_SYNONYMS <> 0 THEN
         UNAPIGEN.LOGERROR('Archive','Synonyms point to own database: unable to archive to DB');         
         RAISE STPERROR;
      END IF;
   END IF;

   
   L_RET_CODE := UNARCHIVE.PREPARETOARCHIVE(A_ARCHIVE_ID, A_ARCHIVE_TO, A_ARCHFILE);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.LOGERROR('Archive','PrepareToArchive returned '||L_RET_CODE);         
      RAISE STPERROR;
   END IF;

   P_CURR_DATE := CURRENT_TIMESTAMP;
   P_CURR_DATE_STRING := TO_CHAR(P_CURR_DATE, P_TSTZ_FORMAT);

   
   IF NVL(A_ARCHIVE_TO, ' ') = 'DB' THEN
      L_RET_CODE := ARCHIVETODB(A_ARCHIVE_ID);
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         UNAPIGEN.LOGERROR('Archive','ArchiveToDB returned '||L_RET_CODE);         
         RAISE STPERROR;
      END IF;
   ELSIF NVL(A_ARCHIVE_TO, ' ') = 'FILE' THEN
      L_RET_CODE := UNAPIRA3.ARCHIVETOFILE(A_ARCHIVE_ID);
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         UNAPIGEN.LOGERROR('Archive','ArchiveToFILE returned '||L_RET_CODE);         
         RAISE STPERROR;
      END IF;
   END IF;

   
   L_RET_CODE := UNARCHIVE.AFTERARCHIVE(A_ARCHIVE_ID, A_ARCHIVE_TO, A_ARCHFILE);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.LOGERROR('Archive','AfterArchive returned '||L_RET_CODE);         
      RAISE STPERROR;
   END IF;

   
   DELETE FROM UTTOARCHIVE
    WHERE HANDLED_OK = '1';
   UNAPIGEN.U4COMMIT;

   IF L_LOCKED THEN
      L_RET_CODE := UNAPIGEN.RELEASELOCK('U4RADEF', 1);
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         UNAPIGEN.LOGERROR('Archive','ReleaseLock returned '||L_RET_CODE);         
         RETURN(L_RET_CODE);
      END IF;
      L_LOCKED := FALSE;
   END IF;
   
   EXECUTE IMMEDIATE 'ALTER SESSION SET time_zone = ''' || L_SESSION_TIMEZONE || '''';
   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN OTHERS THEN
    
   EXECUTE IMMEDIATE 'ALTER SESSION SET time_zone = ''' || L_SESSION_TIMEZONE || '''';
   IF SQLCODE <> 1 THEN
      L_SQLERRM := SUBSTR(SQLERRM,1,200);
      UNAPIGEN.LOGERROR('Archive',L_SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('Archive',L_SQLERRM);         
   END IF;
   IF L_LOCKED THEN
      L_RET_CODE := UNAPIGEN.RELEASELOCK('U4RADEF', 1);
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         UNAPIGEN.LOGERROR('Archive','ReleaseLock returned '||L_RET_CODE);         
      END IF;
      L_LOCKED := FALSE;
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END ARCHIVE;




FUNCTION RESTORE                                    
(A_ARCHIVE_TO       IN    VARCHAR2,                 
 A_ARCHIVE_FROM     IN    VARCHAR2,                 
 A_ARCHIVE_ID       IN    UNAPIGEN.VC20_TABLE_TYPE, 
 A_OBJECT_TP        IN    UNAPIGEN.VC40_TABLE_TYPE, 
 A_OBJECT_ID        IN    UNAPIGEN.VC20_TABLE_TYPE, 
 A_OBJECT_VERSION   IN    UNAPIGEN.VC20_TABLE_TYPE, 
 A_OBJECT_DETAILS   IN    UNAPIGEN.VC255_TABLE_TYPE,
 A_ARCHIVED_ON      IN    UNAPIGEN.DATE_TABLE_TYPE, 
 A_NR_OF_ROWS       IN OUT NUMBER)                  
RETURN NUMBER IS
   L_SELF_SYNONYMS NUMBER;
BEGIN
   
   
   IF NVL(A_ARCHIVE_TO, ' ') = 'DB' THEN
      
      SELECT COUNT(*) 
        INTO L_SELF_SYNONYMS
        FROM USER_SYNONYMS
       WHERE SYNONYM_NAME LIKE 'UA%'
         AND DB_LINK IS NULL ;

      IF L_SELF_SYNONYMS <> 0 THEN
         UNAPIGEN.LOGERROR('Archive','Synonyms point to own database: unable to archive to DB');         
         RETURN(UNAPIGEN.DBERR_GENFAIL);
      END IF;
   END IF;
   
   
   L_RET_CODE := UNARCHIVE.PREPARETORESTORE(A_ARCHIVE_TO,
                                            A_ARCHIVE_FROM,
                                            A_ARCHIVE_ID,
                                            A_OBJECT_TP,
                                            A_OBJECT_ID,
                                            A_OBJECT_VERSION,
                                            A_OBJECT_DETAILS,
                                            A_ARCHIVED_ON,
                                            A_NR_OF_ROWS);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.LOGERROR('Restore','PrepareToRestore returned ' || L_RET_CODE);         
      RETURN(UNAPIGEN.DBERR_GENFAIL);
   END IF;

   
   L_RET_CODE := UNAPIRA2.RESTORE(A_ARCHIVE_TO,
                                  A_ARCHIVE_FROM,
                                  A_ARCHIVE_ID,
                                  A_OBJECT_TP,
                                  A_OBJECT_ID,
                                  A_OBJECT_VERSION,
                                  A_OBJECT_DETAILS,
                                  A_ARCHIVED_ON,
                                  A_NR_OF_ROWS);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.LOGERROR('Restore','Restore returned ' || L_RET_CODE);         
      RETURN(UNAPIGEN.DBERR_GENFAIL);
   END IF;

   
   L_RET_CODE := UNARCHIVE.AFTERRESTORE(A_ARCHIVE_TO,
                                        A_ARCHIVE_FROM,
                                        A_ARCHIVE_ID,
                                        A_OBJECT_TP,
                                        A_OBJECT_ID,
                                        A_OBJECT_VERSION,
                                        A_OBJECT_DETAILS,
                                        A_ARCHIVED_ON,
                                        A_NR_OF_ROWS);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.LOGERROR('Restore','AfterRestore returned ' || L_RET_CODE);         
      RETURN(UNAPIGEN.DBERR_GENFAIL);
   END IF;                           

   RETURN (L_RET_CODE);
EXCEPTION 
   WHEN OTHERS THEN
      UNAPIGEN.LOGERROR('Restore','Problem in restore ' || L_RET_CODE);         
      RAISE STPERROR;
END RESTORE;





FUNCTION GETARCHIVEINDEX                               
(A_ARCHIVE_TO       IN     VARCHAR2,                   
 A_ARCHIVE_FROM     IN     VARCHAR2,                   
 A_ARCHIVE_ID       OUT    UNAPIGEN.VC20_TABLE_TYPE,   
 A_OBJECT_TP        OUT    UNAPIGEN.VC40_TABLE_TYPE,   
 A_OBJECT_ID        OUT    UNAPIGEN.VC20_TABLE_TYPE,   
 A_OBJECT_VERSION   OUT    UNAPIGEN.VC20_TABLE_TYPE,   
 A_OBJECT_DETAILS   OUT    UNAPIGEN.VC255_TABLE_TYPE,  
 A_ARCHIVED_ON      OUT    UNAPIGEN.DATE_TABLE_TYPE,   
 A_NR_OF_ROWS       IN OUT NUMBER,                     
 A_WHERE_CLAUSE     IN     VARCHAR2,                   
 A_NEXT_ROWS        IN     NUMBER)                     
RETURN NUMBER IS
   L_FETCHED_ROWS   INTEGER;
BEGIN
   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;
   
   IF NVL(A_ARCHIVE_TO, ' ') = 'DB' THEN
      L_RET_CODE := GETARCHIVEINDEXFROMDB(A_ARCHIVE_ID, A_OBJECT_TP, A_OBJECT_ID, A_OBJECT_VERSION, A_OBJECT_DETAILS, 
                                          A_ARCHIVED_ON, A_NR_OF_ROWS, A_WHERE_CLAUSE, A_NEXT_ROWS);
   ELSIF NVL(A_ARCHIVE_TO, ' ') = 'FILE' THEN
      L_RET_CODE := GETARCHIVEINDEXFROMFILE(A_ARCHIVE_FROM, A_ARCHIVE_ID, A_OBJECT_TP, A_OBJECT_ID, A_OBJECT_VERSION, 
                                            A_OBJECT_DETAILS, A_ARCHIVED_ON, A_NR_OF_ROWS, A_NEXT_ROWS);
   ELSE
      L_RET_CODE := UNAPIGEN.DBERR_NOOBJECT;
   END IF;   

   RETURN(L_RET_CODE);
EXCEPTION
WHEN OTHERS THEN
   L_SQLERRM := SUBSTR(SQLERRM,1,200);
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
          'GetArchiveIndex', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETARCHIVEINDEX;


FUNCTION ADDTOTOBEARCHIVEDLIST                        
(A_OBJECT_TP        IN     VARCHAR2,                  
 A_OBJECT_ID        IN     VARCHAR2,                  
 A_OBJECT_VERSION   IN     VARCHAR2,                  
 A_OBJECT_DETAILS   IN     VARCHAR2,                  
 A_COPY_FLAG        IN     CHAR,                      
 A_DELETE_FLAG      IN     CHAR,                      
 A_ARCHIVE_ID       IN     VARCHAR2,                  
 A_ARCHIVE_TO       IN     VARCHAR2)                  
RETURN NUMBER IS
BEGIN
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
   
   IF NVL(A_OBJECT_TP,' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJTP;
      RAISE STPERROR;
   END IF;

   IF NVL(A_OBJECT_ID,' ') = ' ' OR
      NVL(A_ARCHIVE_ID,' ') = ' ' OR
      NVL(A_ARCHIVE_TO,' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_COPY_FLAG,' ') NOT IN ('0','1') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_COPYFLAG;
      RAISE STPERROR;
   END IF;

   IF NVL(A_DELETE_FLAG,' ') NOT IN ('0','1') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_DELETEFLAG;
      RAISE STPERROR;
   END IF;

   IF NVL(A_OBJECT_TP,' ') NOT IN ('rq','sc','ws','sd','ch','st','wt','pp','ip',
                                   'ie','pr','mt','eq','rt','pt','cy','au','lc',
                                   'ly','gk','jo','co','at') THEN
      L_SQLERRM := 'AddToToBeArchivedList: Invalid datatype '||A_OBJECT_TP||'#'||
                   A_OBJECT_ID||'#'||A_OBJECT_VERSION||'#'||A_OBJECT_DETAILS;
      RAISE STPERROR; 
   END IF;

   INSERT INTO UTTOARCHIVE
   (OBJECT_TP, OBJECT_ID, VERSION, OBJECT_DETAILS, COPY_FLAG, DELETE_FLAG, ARCHIVE_ID, ARCHIVE_TO)
   VALUES
   (A_OBJECT_TP, A_OBJECT_ID, NVL(A_OBJECT_VERSION,UNVERSION.P_NO_VERSION), A_OBJECT_DETAILS, 
    A_COPY_FLAG, A_DELETE_FLAG, A_ARCHIVE_ID, A_ARCHIVE_TO);

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('AddToToBeArchivedList', SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('AddToToBeArchivedList',L_SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'AddToToBeArchivedList'));
END ADDTOTOBEARCHIVEDLIST;







PROCEDURE UTLFILEEXCEPTIONHANDLER                     
(A_API_NAME      IN   VARCHAR2,                       
 A_SQLERRM       IN   VARCHAR2,                       
 A_ERROR_TYPE    IN   VARCHAR2,                       
 A_CLOSE_CURSOR  IN   CHAR)                           
IS
BEGIN
   UNAPIGEN.U4ROLLBACK;
   IF A_SQLERRM IS NOT NULL THEN
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
             A_API_NAME, SUBSTR(A_SQLERRM,1,200));
      DBMS_OUTPUT.PUT_LINE(A_API_NAME||' - '||SUBSTR(A_SQLERRM,1,200));
      IF LENGTH(A_SQLERRM) > 200 THEN
         INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
         VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                A_API_NAME, SUBSTR(A_SQLERRM,201,200));
         DBMS_OUTPUT.PUT_LINE(A_API_NAME||' - '||SUBSTR(A_SQLERRM,201,200));
      END IF;
      UNAPIGEN.U4COMMIT;
   END IF;
   IF L_EXCEPTION_STEP IS NOT NULL THEN
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
             A_API_NAME, 'Exception step:'||SUBSTR(L_EXCEPTION_STEP,1,200)); 
      IF LENGTH(L_EXCEPTION_STEP) > 200 THEN
         INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
         VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                A_API_NAME, 'Exception step(2):'||SUBSTR(L_EXCEPTION_STEP,201,200));
      END IF;
      UNAPIGEN.U4COMMIT;
      DBMS_OUTPUT.PUT_LINE(A_API_NAME||' - '||'Exception step:'||SUBSTR(L_EXCEPTION_STEP,1,200));
      IF LENGTH(L_EXCEPTION_STEP) > 200 THEN
         DBMS_OUTPUT.PUT_LINE(A_API_NAME||' - '||'Exception step(2):'||SUBSTR(L_EXCEPTION_STEP,201,200));
      END IF;
   END IF;

   IF A_CLOSE_CURSOR = P_CLOSE_CURSOR THEN
      IF UTL_FILE.IS_OPEN (P_ARCH_FILE_HANDLE) THEN
         UTL_FILE.FCLOSE(P_ARCH_FILE_HANDLE);
      END IF;
   END IF;
   
   
   IF A_ERROR_TYPE = 'UTL_FILE.INVALID_OPERATION' THEN
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
             A_API_NAME, 'Directory or File does not exist OR File locked');
      DBMS_OUTPUT.PUT_LINE(A_API_NAME||' - '||'Directory or File does not exist OR File locked');
      UNAPIGEN.U4COMMIT;
   END IF;
   
   
   IF SQLCODE = 100 THEN
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
             A_API_NAME, 'NO_DATA_FOUND exception raised : this error can be raised by the end of the file');
      DBMS_OUTPUT.PUT_LINE(A_API_NAME||' - '||'NO_DATA_FOUND exception raised : this error can be raised by the end of the file');
      UNAPIGEN.U4COMMIT;     
   END IF;
END UTLFILEEXCEPTIONHANDLER;

FUNCTION CLOSEDBLINK                        
(A_LINK IN     VARCHAR2)
RETURN NUMBER IS
BEGIN
   L_DYN_CURSOR := DBMS_SQL.OPEN_CURSOR;

   
   
   
   L_SQL_STRING := 'SELECT ''X'' FROM dual@'||A_LINK;
   DBMS_SQL.PARSE(L_DYN_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   L_RESULT := DBMS_SQL.EXECUTE(L_DYN_CURSOR);

   UNAPIGEN.U4COMMIT;
   
   L_SQL_STRING := 'ALTER SESSION CLOSE DATABASE LINK '||A_LINK;
   DBMS_SQL.PARSE(L_DYN_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   L_RESULT := DBMS_SQL.EXECUTE(L_DYN_CURSOR);

   DBMS_SQL.CLOSE_CURSOR(L_DYN_CURSOR);

   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN OTHERS THEN
   L_SQLERRM := SUBSTR(SQLERRM,1,255);
   DBMS_SQL.CLOSE_CURSOR(L_DYN_CURSOR);
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
          'CLoseDBLink', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END CLOSEDBLINK;

FUNCTION LISTALLCOLUMNS                   
(A_TABLE_NAME     IN       VARCHAR2,      
 A_BRACKETS       IN       VARCHAR2,      
 A_AR_IMPLEMENTED IN       CHAR)          
RETURN VARCHAR2 IS
   L_STRING                   VARCHAR2(4000);
   L_LENGTH                   INTEGER;
   L_FIRST_TIME               BOOLEAN;
   L_REMOTE_NR_OF_DATADOMAINS INTEGER;
   L_NR_OF_DATADOMAINS        INTEGER;
   L_IGNORE                   BOOLEAN;
BEGIN
   L_FIRST_TIME := TRUE;
   IF A_BRACKETS = 'NO_BRACKETS' THEN
      L_STRING := ' ';
   ELSE
      L_STRING := '(';
   END IF;
 
   FOR L_USER_TAB_COLUMNS_REC IN L_USER_TAB_COLUMNS_CURSOR(A_TABLE_NAME) LOOP
      
      
      
      L_IGNORE := FALSE;
      IF L_USER_TAB_COLUMNS_REC.COLUMN_NAME = 'version_is_current' THEN
         FOR I IN 1..UNAPIGEN.L_NR_OF_TYPES LOOP
            IF UNAPIGEN.L_OBJECT_TYPES(I) = LOWER(SUBSTR(A_TABLE_NAME,3,2)) THEN
               L_IGNORE := TRUE;
            END IF;
         END LOOP;
      END IF;
      
      IF NOT L_IGNORE THEN
         IF L_USER_TAB_COLUMNS_REC.COLUMN_NAME NOT IN 
            ('ar1', 'ar2', 'ar3', 'ar4', 'ar5', 'ar6', 'ar7', 'ar8', 'ar9', 'ar10', 'ar11', 'ar12',
             'ar13', 'ar14', 'ar15', 'ar16', 'ar17', 'ar18', 'ar19', 'ar20', 'ar21', 'ar22', 'ar23',
             'ar24', 'ar25', 'ar26', 'ar27', 'ar28', 'ar29', 'ar30', 'ar31', 'ar32', 'ar33', 'ar34',
             'ar35', 'ar36', 'ar37', 'ar38', 'ar39', 'ar40', 'ar41', 'ar42', 'ar43', 'ar44', 'ar45',
             'ar46', 'ar47', 'ar48', 'ar49', 'ar50', 'ar51', 'ar52', 'ar53', 'ar54', 'ar55', 'ar56',
             'ar57', 'ar58', 'ar59', 'ar60', 'ar61', 'ar62', 'ar63', 'ar64', 'ar65', 'ar66', 'ar67',
             'ar68', 'ar69', 'ar70', 'ar71', 'ar72', 'ar73', 'ar74', 'ar75', 'ar76', 'ar77', 'ar78',
             'ar79', 'ar80', 'ar81', 'ar82', 'ar83', 'ar84', 'ar85', 'ar86', 'ar87', 'ar88', 'ar89',
             'ar90', 'ar91', 'ar92', 'ar93', 'ar94', 'ar95', 'ar96', 'ar97', 'ar98', 'ar99', 'ar100',
             'ar101', 'ar102', 'ar103', 'ar104', 'ar105', 'ar106', 'ar107', 'ar108', 'ar109', 'ar110',
             'ar111', 'ar112', 'ar113', 'ar114', 'ar115', 'ar116', 'ar117', 'ar118', 'ar119', 'ar120',
             'ar121', 'ar122', 'ar123', 'ar124', 'ar125', 'ar126', 'ar127', 'ar128') THEN
            L_STRING := L_STRING || L_USER_TAB_COLUMNS_REC.COLUMN_NAME || ', ' ;
         END IF;
      END IF;
   END LOOP;
   
   IF A_AR_IMPLEMENTED = '1' THEN
      
      
      SELECT SETTING_VALUE
        INTO L_REMOTE_NR_OF_DATADOMAINS
        FROM UAUTDBA
       WHERE SETTING_NAME = 'DATADOMAINS';
      L_NR_OF_DATADOMAINS := LEAST(NVL(UNAPIGEN.P_DATADOMAINS,16),NVL(L_REMOTE_NR_OF_DATADOMAINS,16));
      FOR L_ROW IN 1..L_NR_OF_DATADOMAINS LOOP
         L_STRING := L_STRING || 'ar' || L_ROW || ', ' ;
      END LOOP;
   END IF;
   
   
   L_LENGTH := LENGTH(L_STRING);
   IF A_BRACKETS = 'NO_BRACKETS' THEN
      L_STRING := SUBSTR(L_STRING,1,L_LENGTH-2)||' ';
   ELSE
      L_STRING := SUBSTR(L_STRING,1,L_LENGTH-2)||')';
   END IF;
   RETURN(L_STRING);
END LISTALLCOLUMNS;

PROCEDURE PARSEOBJECTDETAILS             
(A_OBJECT_DETAILS    IN    VARCHAR2,     
 A_PP_KEY1           OUT   VARCHAR2,     
 A_PP_KEY2           OUT   VARCHAR2,     
 A_PP_KEY3           OUT   VARCHAR2,     
 A_PP_KEY4           OUT   VARCHAR2,     
 A_PP_KEY5           OUT   VARCHAR2,     
 A_LAB               OUT   VARCHAR2)     
IS
   L_LEAVE_LOOP     BOOLEAN;
   L_PREV_POS       INTEGER;
   L_CROSS_POS      INTEGER;
   L_EQUAL_POS      INTEGER;
   L_DETAIL         VARCHAR2(30);
   L_QUALIFIER      VARCHAR2(255);
   L_QUALIFIER_VAL  VARCHAR2(255);
BEGIN
   
   L_PREV_POS := 0;
   L_LEAVE_LOOP := FALSE;
   WHILE (L_LEAVE_LOOP = FALSE) LOOP
      L_CROSS_POS := INSTR(A_OBJECT_DETAILS, '#', L_PREV_POS + 1);
      
      IF (L_CROSS_POS <> 0) THEN
         L_DETAIL := SUBSTR(A_OBJECT_DETAILS, L_PREV_POS+1, L_CROSS_POS-L_PREV_POS-1);
         L_PREV_POS := L_CROSS_POS;
      
      ELSE
         L_DETAIL := SUBSTR(A_OBJECT_DETAILS, L_PREV_POS+1);
         L_LEAVE_LOOP := TRUE;
      END IF;
      IF (L_DETAIL IS NOT NULL) THEN
         L_EQUAL_POS := NVL(INSTR(L_DETAIL, '='), 0);
         IF L_EQUAL_POS NOT IN (0,1) THEN
            L_QUALIFIER     := SUBSTR(L_DETAIL, 1, L_EQUAL_POS-1);
            L_QUALIFIER_VAL := SUBSTR(L_DETAIL, L_EQUAL_POS+1);
            IF L_QUALIFIER IS NOT NULL THEN
               
               IF L_QUALIFIER = 'pp_key1' THEN
                  A_PP_KEY1 := NVL(L_QUALIFIER_VAL,' ');
               ELSIF L_QUALIFIER = 'pp_key2' THEN
                  A_PP_KEY2 := NVL(L_QUALIFIER_VAL,' ');
               ELSIF L_QUALIFIER = 'pp_key3' THEN
                  A_PP_KEY3 := NVL(L_QUALIFIER_VAL,' ');
               ELSIF L_QUALIFIER = 'pp_key4' THEN
                  A_PP_KEY4 := NVL(L_QUALIFIER_VAL,' ');
               ELSIF L_QUALIFIER = 'pp_key5' THEN
                  A_PP_KEY5 := NVL(L_QUALIFIER_VAL,' ');
               
               ELSIF L_QUALIFIER = 'lab' THEN
                  A_LAB := NVL(L_QUALIFIER_VAL,'-');
               END IF;
            END IF;
         END IF;
      END IF;
   END LOOP;
END PARSEOBJECTDETAILS;




BEGIN
   P_TSTZ_FORMAT := 'DD/MM/YYYY HH24:MI:SS TZR TZD';
   P_ARCHIVER_VERSION := '2.0';
   P_ARCHIVE_ARCHIVER_VERSION := P_ARCHIVER_VERSION;


END UNAPIRA;
PACKAGE BODY unapiraat IS 
 
STPERROR      EXCEPTION;
L_RET_CODE    INTEGER;
L_SQLERRM     VARCHAR2(255);
L_SQL_STRING  VARCHAR2(2000);
L_DYN_CURSOR  INTEGER;
L_SEP         CHAR(1);
  
CURSOR L_ALLCUSTOM_TABLES_CURSOR IS
   SELECT DISTINCT TABLE_NAME, LENGTH(TABLE_NAME) TABLE_ORDER1
     FROM USER_TABLES
    WHERE TABLE_NAME NOT IN (SELECT TABLE_NAME 
                               FROM USER_TAB_COLUMNS 
                              WHERE COLUMN_NAME IN ('SC', 'RQ', 'WS', 'SD', 'CH') 
                                AND TABLE_NAME LIKE 'AT%')
      AND TABLE_NAME LIKE 'AT%' 
    ORDER BY 2 ASC, 1 ASC;

FUNCTION GETVERSION
   RETURN VARCHAR2
IS
BEGIN
   RETURN('06.07.00.00_00.13');
EXCEPTION
   WHEN OTHERS THEN
      RETURN (NULL);
END GETVERSION;
 



PROCEDURE LOGERROR
(A_API IN VARCHAR2, A_ERROR_MSG IN VARCHAR2)
IS
BEGIN
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
           A_API, A_ERROR_MSG);
END LOGERROR;
 



FUNCTION REMOVEATFROMARCHIVE
RETURN NUMBER IS
BEGIN
   L_DYN_CURSOR := DBMS_SQL.OPEN_CURSOR;
   FOR L_TABLE_REC IN L_ALLCUSTOM_TABLES_CURSOR LOOP
      L_SQL_STRING := 'DELETE FROM '||L_TABLE_REC.TABLE_NAME||'@uniarch ' ;
      BEGIN
         DBMS_SQL.PARSE(L_DYN_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         L_RET_CODE := DBMS_SQL.EXECUTE(L_DYN_CURSOR);
      EXCEPTION 
         WHEN OTHERS THEN
            IF SQLCODE <> -942 THEN
               L_SQLERRM := SUBSTR(SQLERRM,1,200);
               LOGERROR ('RemoveAtFromArchive',L_SQLERRM);
               L_SQLERRM := 'Error while archiving table '||L_TABLE_REC.TABLE_NAME;
               LOGERROR ('RemoveAtFromArchive',L_SQLERRM);
            ELSE
               L_SQLERRM := 'Table '||L_TABLE_REC.TABLE_NAME||' does not exist';
               LOGERROR ('RemoveAtFromArchive',L_SQLERRM);
            END IF;
      END;
   END LOOP;
   DBMS_SQL.CLOSE_CURSOR(L_DYN_CURSOR);
 
   RETURN(UNAPIGEN.DBERR_SUCCESS);
END REMOVEATFROMARCHIVE;
 



FUNCTION COPYATTOARCHDB 
RETURN NUMBER IS
BEGIN
   L_DYN_CURSOR := DBMS_SQL.OPEN_CURSOR;
   FOR L_TABLE_REC IN L_ALLCUSTOM_TABLES_CURSOR LOOP
      L_SQL_STRING := 'INSERT INTO '||L_TABLE_REC.TABLE_NAME||'@uniarch '||
                      UNAPIRA.LISTALLCOLUMNS(L_TABLE_REC.TABLE_NAME, 'BRACKETS', '0') ||
                      ' SELECT '||
                      UNAPIRA.LISTALLCOLUMNS(L_TABLE_REC.TABLE_NAME, 'NO_BRACKETS', '0') ||
                      ' FROM '||L_TABLE_REC.TABLE_NAME;
      BEGIN
         DBMS_SQL.PARSE(L_DYN_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         L_RET_CODE := DBMS_SQL.EXECUTE(L_DYN_CURSOR);
      EXCEPTION
         WHEN OTHERS THEN
            IF SQLCODE <> -942 THEN
               L_SQLERRM := SUBSTR(SQLERRM,1,200);
               LOGERROR ('CopyAtToArchDB',L_SQLERRM);
               L_SQLERRM := 'Error while archiving table '||L_TABLE_REC.TABLE_NAME;
               LOGERROR ('CopyAtToArchDB',L_SQLERRM);
            ELSE
               L_SQLERRM := 'Table '||L_TABLE_REC.TABLE_NAME||' does not exist';
               LOGERROR ('CopyAtToArchDB',L_SQLERRM);
            END IF;
      END;
   END LOOP;
   DBMS_SQL.CLOSE_CURSOR(L_DYN_CURSOR);
 
   RETURN(UNAPIGEN.DBERR_SUCCESS);
END COPYATTOARCHDB;

FUNCTION ARCHIVEATTODB
RETURN NUMBER IS
BEGIN
   L_RET_CODE := COPYATTOARCHDB;
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      L_SQLERRM := 'CopyAtToArchDB#return='||TO_CHAR(L_RET_CODE);
      RAISE STPERROR;
   END IF;
   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE <> 1 THEN
         L_SQLERRM := SUBSTR(SQLERRM,1,200);
      END IF;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
             'ArchiveAtToDB', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END ARCHIVEATTODB;




FUNCTION COPYATFROMARCHDB 
RETURN NUMBER IS
BEGIN
   L_DYN_CURSOR := DBMS_SQL.OPEN_CURSOR;
   FOR L_TABLE_REC IN L_ALLCUSTOM_TABLES_CURSOR LOOP
      L_SQL_STRING := 'INSERT INTO '||L_TABLE_REC.TABLE_NAME||' '||
                      UNAPIRA.LISTALLCOLUMNS(L_TABLE_REC.TABLE_NAME, 'BRACKETS', '0') ||
                      ' SELECT '||
                      UNAPIRA.LISTALLCOLUMNS(L_TABLE_REC.TABLE_NAME, 'NO_BRACKETS', '0') ||
                      ' FROM '||L_TABLE_REC.TABLE_NAME||'@uniarch ';
      BEGIN
         DBMS_SQL.PARSE(L_DYN_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         L_RET_CODE := DBMS_SQL.EXECUTE(L_DYN_CURSOR);
      EXCEPTION
         WHEN OTHERS THEN
            IF SQLCODE <> -942 THEN
               L_SQLERRM := SUBSTR(SQLERRM,1,200);
               LOGERROR ('CopyAtFromArchDB',L_SQLERRM);
               L_SQLERRM := 'Error while archiving table '||L_TABLE_REC.TABLE_NAME;
               LOGERROR ('CopyAtFromArchDB',L_SQLERRM);
            ELSE
               L_SQLERRM := 'Table '||L_TABLE_REC.TABLE_NAME||' does not exist';
               LOGERROR ('CopyAtFromArchDB',L_SQLERRM);
            END IF;
      END;
   END LOOP;
   DBMS_SQL.CLOSE_CURSOR(L_DYN_CURSOR);
 
   RETURN(UNAPIGEN.DBERR_SUCCESS);
END COPYATFROMARCHDB;

FUNCTION RESTOREATFROMDB
RETURN NUMBER IS
BEGIN
   L_RET_CODE := COPYATFROMARCHDB;
   IF L_RET_CODE = UNAPIGEN.DBERR_NORECORDS THEN
      L_RET_CODE := COPYATFROMARCHDB;
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         L_SQLERRM := 'CopyAtFromArchDB#return='||TO_CHAR(L_RET_CODE);
         RAISE STPERROR;
      END IF;
   END IF;
 
   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE <> 1 THEN
         L_SQLERRM := SUBSTR(SQLERRM, 1, 200);
      END IF;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
             'RestoreAtFromDB', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END RESTOREATFROMDB;




FUNCTION REMOVEATFROMDB
RETURN NUMBER IS
BEGIN
   L_DYN_CURSOR := DBMS_SQL.OPEN_CURSOR;
   FOR L_TABLE_REC IN L_ALLCUSTOM_TABLES_CURSOR LOOP
      L_SQL_STRING := 'DELETE FROM '||L_TABLE_REC.TABLE_NAME;
      BEGIN
         DBMS_SQL.PARSE(L_DYN_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         L_RET_CODE := DBMS_SQL.EXECUTE(L_DYN_CURSOR);
      EXCEPTION
         WHEN OTHERS THEN
            IF SQLCODE <> -942 THEN
               L_SQLERRM := SUBSTR(SQLERRM,1,200);
               LOGERROR ('RemoveAtFromDB',L_SQLERRM);
               L_SQLERRM := 'Error while archiving table '||L_TABLE_REC.TABLE_NAME;
               LOGERROR ('RemoveAtFromDB',L_SQLERRM);
            ELSE
               L_SQLERRM := 'Table '||L_TABLE_REC.TABLE_NAME||' does not exist';
               LOGERROR ('RemoveAtFromDB',L_SQLERRM);
            END IF;
      END;
   END LOOP;
   DBMS_SQL.CLOSE_CURSOR(L_DYN_CURSOR);
 
   RETURN(UNAPIGEN.DBERR_SUCCESS);
END REMOVEATFROMDB;




FUNCTION ARCHIVEATTOFILE
RETURN NUMBER IS
BEGIN
   UNAPIRA.L_EXCEPTION_STEP := 'ArchiveAtCustomToFile';
   L_RET_CODE := UNAPIRA3.ARCHIVEATCUSTOMTOFILE;
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      L_SQLERRM := 'ArchiveAtCustomToFile returned '||L_RET_CODE;
      RAISE STPERROR;
   END IF;
 
   UNAPIRA3.U4DATAPUTLINE( ' ');
 
   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
   WHEN UTL_FILE.INVALID_PATH THEN
      L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Invalid path';
      UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveAtToFile', L_SQLERRM, 'UTL_FILE.INVALID_PATH',UNAPIRA.P_CLOSE_CURSOR);
      RETURN(UNAPIGEN.DBERR_NOOBJECT);

   WHEN UTL_FILE.INVALID_MODE THEN
      L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Invalid mode';
      UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveAtToFile', L_SQLERRM, 'UTL_FILE.INVALID_MODE',UNAPIRA.P_CLOSE_CURSOR);
      RETURN(UNAPIGEN.DBERR_GENFAIL);

   WHEN UTL_FILE.INVALID_FILEHANDLE THEN
      L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Invalid filehandle';
      UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveAtToFile', L_SQLERRM, 'UTL_FILE.INVALID_FILEHANDLE',UNAPIRA.P_CLOSE_CURSOR);
      RETURN(UNAPIGEN.DBERR_GENFAIL);

   WHEN UTL_FILE.INVALID_OPERATION THEN
      
      L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Invalid operation';
      UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveAtToFile', L_SQLERRM, 'UTL_FILE.INVALID_OPERATION',UNAPIRA.P_CLOSE_CURSOR);
      RETURN(UNAPIGEN.DBERR_NOOBJECT);

   WHEN UTL_FILE.READ_ERROR THEN
      L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Read error';
      UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveAtToFile', L_SQLERRM, 'UTL_FILE.READ_ERROR',UNAPIRA.P_CLOSE_CURSOR);
      RETURN(UNAPIGEN.DBERR_GENFAIL);

   WHEN UTL_FILE.WRITE_ERROR THEN
      L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Write error';
      UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveAtToFile', L_SQLERRM, 'UTL_FILE.WRITE_ERROR',UNAPIRA.P_CLOSE_CURSOR);
      RETURN(UNAPIGEN.DBERR_GENFAIL);

   WHEN UTL_FILE.INTERNAL_ERROR THEN
      L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Internal error';
      UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveAtToFile', L_SQLERRM, 'UTL_FILE.INTERNAL_ERROR',UNAPIRA.P_CLOSE_CURSOR);
      RETURN(UNAPIGEN.DBERR_GENFAIL);

   WHEN OTHERS THEN
      IF SQLCODE <> 1 THEN
         L_SQLERRM := SQLERRM;
         UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveAtToFile', L_SQLERRM, 'UTL_FILE.INTERNAL_ERROR',UNAPIRA.P_CLOSE_CURSOR);
      ELSIF L_SQLERRM IS NOT NULL THEN
         UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveAtToFile', L_SQLERRM, 'UTL_FILE.INTERNAL_ERROR',UNAPIRA.P_CLOSE_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END ARCHIVEATTOFILE;

BEGIN
   L_SEP := UNAPIRA.P_INTERNAL_SEP;
END UNAPIRAAT;
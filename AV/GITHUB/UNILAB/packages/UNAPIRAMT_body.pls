PACKAGE BODY unapiramt AS






STPERROR      EXCEPTION;
L_RET_CODE    INTEGER;
L_SQLERRM     VARCHAR2(255);
L_SQL_STRING  VARCHAR2(2000);
L_SEP         CHAR(1);


CURSOR L_ALL_LTMTCELL(A_MT VARCHAR2, A_VERSION VARCHAR2) IS
 SELECT CELL, CALC_FORMULA
 FROM UTMTCELL
 WHERE MT = A_MT
   AND VERSION = A_VERSION
   AND SUBSTR(CALC_FORMULA,-4) IN ('#TXT', '#LNK', '#IMG');

CURSOR L_UTLONGTEXT (A_DOC_NAME VARCHAR2) IS
 SELECT
    OBJ_ID, OBJ_TP, OBJ_VERSION, DOC_ID, DOC_TP, DOC_NAME, LINE_NBR, TEXT_LINE
 FROM UTLONGTEXT
 WHERE DOC_NAME = A_DOC_NAME ;

FUNCTION GETVERSION
   RETURN VARCHAR2
IS
BEGIN
   RETURN('06.07.00.00_00.13');
EXCEPTION
   WHEN OTHERS THEN
   RETURN (NULL);
END GETVERSION;




PROCEDURE LOGERROR
(A_API IN VARCHAR2, A_ERROR_MSG IN VARCHAR2)
IS
BEGIN
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
           A_API, A_ERROR_MSG);
END LOGERROR;




FUNCTION REMOVEMTFROMARCHIVE
(A_MT IN VARCHAR2, A_VERSION IN VARCHAR2)
RETURN NUMBER IS
BEGIN
   
   FOR L_MTCELL IN L_ALL_LTMTCELL(A_MT, A_VERSION) LOOP
      DELETE FROM UAUTLONGTEXT
      WHERE DOC_NAME = L_MTCELL.CALC_FORMULA;
   END LOOP;

   

   DELETE FROM UAUTMT
   WHERE MT = A_MT
   AND VERSION = A_VERSION;

   DELETE FROM UAUTMTAU
   WHERE MT = A_MT
   AND VERSION = A_VERSION;

   DELETE FROM UAUTMTHS
   WHERE MT = A_MT
   AND VERSION = A_VERSION;

   DELETE FROM UAUTMTHSDETAILS
   WHERE MT = A_MT
   AND VERSION = A_VERSION;

   DELETE FROM UAUTMTCELL
   WHERE MT = A_MT
   AND VERSION = A_VERSION;

   DELETE FROM UAUTMTCELLEQTYPE
   WHERE MT = A_MT
   AND VERSION = A_VERSION;

   DELETE FROM UAUTMTCELLLIST
   WHERE MT = A_MT
   AND VERSION = A_VERSION;

   DELETE FROM UAUTMTCELLSPIN
   WHERE MT = A_MT
   AND VERSION = A_VERSION;

   DELETE FROM UAUTMTEL
   WHERE MT = A_MT
   AND VERSION = A_VERSION;

   DELETE FROM UAUTMTMR
   WHERE MT = A_MT
   AND VERSION = A_VERSION;

   RETURN(UNAPIGEN.DBERR_SUCCESS);
END REMOVEMTFROMARCHIVE;




FUNCTION COPYMTTOARCHDB(A_MT IN VARCHAR2, A_VERSION IN VARCHAR2, A_IGNORE_DUP_VAL_ON_INDEX BOOLEAN) RETURN NUMBER IS
BEGIN
   
   FOR L_MTCELL IN L_ALL_LTMTCELL(A_MT, A_VERSION) LOOP
      BEGIN
         INSERT INTO UAUTLONGTEXT
         (OBJ_ID, OBJ_TP, OBJ_VERSION, DOC_ID, DOC_TP, DOC_NAME, LINE_NBR, TEXT_LINE)
         SELECT
          OBJ_ID, OBJ_TP, OBJ_VERSION, DOC_ID, DOC_TP, DOC_NAME, LINE_NBR, TEXT_LINE
         FROM UTLONGTEXT
         WHERE DOC_NAME = L_MTCELL.CALC_FORMULA;
      EXCEPTION
      WHEN DUP_VAL_ON_INDEX THEN
         DELETE UAUTLONGTEXT
         WHERE DOC_NAME = L_MTCELL.CALC_FORMULA;
         INSERT INTO UAUTLONGTEXT
         (OBJ_ID, OBJ_TP, OBJ_VERSION, DOC_ID, DOC_TP, DOC_NAME, LINE_NBR, TEXT_LINE)
         SELECT
          OBJ_ID, OBJ_TP, OBJ_VERSION, DOC_ID, DOC_TP, DOC_NAME, LINE_NBR, TEXT_LINE
         FROM UTLONGTEXT
         WHERE DOC_NAME = L_MTCELL.CALC_FORMULA;
      END;
   END LOOP;
   

   EXECUTE IMMEDIATE
   'INSERT INTO uautmt' ||
   UNAPIRA.LISTALLCOLUMNS('utmt', 'BRACKETS', '1') ||
   ' SELECT '||   UNAPIRA.LISTALLCOLUMNS('utmt', 'NO_BRACKETS', '1') ||
   ' FROM utmt' ||
   ' WHERE mt = '''||A_MT||'''' ||
   ' AND version = '''||A_VERSION||'''';

   INSERT INTO UAUTMTAU
      (MT, VERSION, AU, AU_VERSION, AUSEQ, VALUE)
   SELECT        MT, VERSION, AU, AU_VERSION, AUSEQ, VALUE
   FROM UTMTAU
   WHERE MT = A_MT
   AND VERSION = A_VERSION;

   INSERT INTO UAUTMTHS
      (MT, VERSION, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE,
      LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
   SELECT  MT, VERSION, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE,
      LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ
   FROM UTMTHS
   WHERE MT = A_MT
   AND VERSION = A_VERSION;

   INSERT INTO UAUTMTHSDETAILS
      (MT, VERSION, TR_SEQ, EV_SEQ, SEQ, DETAILS)
   SELECT        MT, VERSION, TR_SEQ, EV_SEQ, SEQ, DETAILS
   FROM UTMTHSDETAILS
   WHERE MT = A_MT
   AND VERSION = A_VERSION;

   INSERT INTO UAUTMTCELL
      (MT, VERSION, CELL, SEQ, DSP_TITLE, DSP_TITLE2, VALUE_F, VALUE_S, POS_X,
      POS_Y, ALIGN, CELL_TP, WINSIZE_X, WINSIZE_Y, IS_PROTECTED, MANDATORY, HIDDEN,
      INPUT_TP, INPUT_SOURCE, INPUT_SOURCE_VERSION, INPUT_PP, INPUT_PP_VERSION,
      INPUT_PR, INPUT_PR_VERSION, INPUT_MT, INPUT_MT_VERSION, DEF_VAL_TP,
      DEF_AU_LEVEL, SAVE_TP, SAVE_PP, SAVE_PP_VERSION, SAVE_PR, SAVE_PR_VERSION,
      SAVE_MT, SAVE_MT_VERSION, SAVE_EQ_TP, SAVE_ID, SAVE_ID_VERSION, COMPONENT,
      UNIT, FORMAT, CALC_TP, CALC_FORMULA, VALID_CF, MAX_X, MAX_Y, MULTI_SELECT,
      CREATE_NEW)
   SELECT  MT, VERSION, CELL, SEQ, DSP_TITLE, DSP_TITLE2, VALUE_F, VALUE_S, POS_X,
      POS_Y, ALIGN, CELL_TP, WINSIZE_X, WINSIZE_Y, IS_PROTECTED, MANDATORY, HIDDEN,
      INPUT_TP, INPUT_SOURCE, INPUT_SOURCE_VERSION, INPUT_PP, INPUT_PP_VERSION,
      INPUT_PR, INPUT_PR_VERSION, INPUT_MT, INPUT_MT_VERSION, DEF_VAL_TP,
      DEF_AU_LEVEL, SAVE_TP, SAVE_PP, SAVE_PP_VERSION, SAVE_PR, SAVE_PR_VERSION,
      SAVE_MT, SAVE_MT_VERSION, SAVE_EQ_TP, SAVE_ID, SAVE_ID_VERSION, COMPONENT,
      UNIT, FORMAT, CALC_TP, CALC_FORMULA, VALID_CF, MAX_X, MAX_Y, MULTI_SELECT,
      CREATE_NEW
   FROM UTMTCELL
   WHERE MT = A_MT
   AND VERSION = A_VERSION;

   INSERT INTO UAUTMTCELLEQTYPE
      (MT, VERSION, CELL, SEQ, EQ_TP)
   SELECT        MT, VERSION, CELL, SEQ, EQ_TP
   FROM UTMTCELLEQTYPE
   WHERE MT = A_MT
   AND VERSION = A_VERSION;

   INSERT INTO UAUTMTCELLLIST
      (MT, VERSION, CELL, INDEX_X, INDEX_Y, VALUE_F, VALUE_S, SELECTED)
   SELECT        MT, VERSION, CELL, INDEX_X, INDEX_Y, VALUE_F, VALUE_S, SELECTED
   FROM UTMTCELLLIST
   WHERE MT = A_MT
   AND VERSION = A_VERSION;

   INSERT INTO UAUTMTCELLSPIN
      (MT, VERSION, CELL, CIRCULAR, INCR, LOW_VAL_TP, LOW_AU_LEVEL, LOW_VAL,
      HIGH_VAL_TP, HIGH_AU_LEVEL, HIGH_VAL)
   SELECT  MT, VERSION, CELL, CIRCULAR, INCR, LOW_VAL_TP, LOW_AU_LEVEL, LOW_VAL,
      HIGH_VAL_TP, HIGH_AU_LEVEL, HIGH_VAL
   FROM UTMTCELLSPIN
   WHERE MT = A_MT
   AND VERSION = A_VERSION;

   INSERT INTO UAUTMTEL
      (MT, VERSION, EL, SEQ)
   SELECT        MT, VERSION, EL, SEQ
   FROM UTMTEL
   WHERE MT = A_MT
   AND VERSION = A_VERSION;

   INSERT INTO UAUTMTMR
      (MT, VERSION, SEQ, COMPONENT, L_DETECTION_LIMIT, L_DETERM_LIMIT,
      H_DETERM_LIMIT, H_DETECTION_LIMIT, UNIT)
   SELECT  MT, VERSION, SEQ, COMPONENT, L_DETECTION_LIMIT, L_DETERM_LIMIT,
      H_DETERM_LIMIT, H_DETECTION_LIMIT, UNIT
   FROM UTMTMR
   WHERE MT = A_MT
   AND VERSION = A_VERSION;

   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
   IF A_IGNORE_DUP_VAL_ON_INDEX THEN
      L_RET_CODE := REMOVEMTFROMARCHIVE(A_MT, A_VERSION);
   END IF;
   RETURN(UNAPIGEN.DBERR_NORECORDS);
END COPYMTTOARCHDB;

FUNCTION ARCHIVEMTTODB
(A_MT IN VARCHAR2, A_VERSION IN VARCHAR2)
RETURN NUMBER IS
BEGIN
   L_RET_CODE := COPYMTTOARCHDB(A_MT, A_VERSION, TRUE);
   IF L_RET_CODE = UNAPIGEN.DBERR_NORECORDS THEN
      L_RET_CODE := COPYMTTOARCHDB(A_MT, A_VERSION, FALSE);
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         L_SQLERRM := 'CopyMtToArchDB#return='||TO_CHAR(L_RET_CODE)||' for mt='||A_MT||'#version='||A_VERSION;
         RAISE STPERROR;
      END IF;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      L_SQLERRM := SUBSTR(SQLERRM,1,200);
   END IF;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
          'ArchiveMtToDB', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END ARCHIVEMTTODB;

FUNCTION COPYMTFROMARCHDB(A_MT IN VARCHAR2, A_VERSION IN VARCHAR2, A_IGNORE_DUP_VAL_ON_INDEX BOOLEAN) RETURN NUMBER IS
BEGIN
   

   EXECUTE IMMEDIATE
   'INSERT INTO utmt' ||
   UNAPIRA.LISTALLCOLUMNS('utmt', 'BRACKETS', '1') ||
   ' SELECT '||   UNAPIRA.LISTALLCOLUMNS('utmt', 'NO_BRACKETS', '1') ||
   ' FROM uautmt' ||
   ' WHERE mt = '''||A_MT||'''' ||
   ' AND version = '''||A_VERSION||'''';

   INSERT INTO UTMTAU
      (MT, VERSION, AU, AU_VERSION, AUSEQ, VALUE)
   SELECT        MT, VERSION, AU, AU_VERSION, AUSEQ, VALUE
   FROM UAUTMTAU
   WHERE MT = A_MT
   AND VERSION = A_VERSION;

   INSERT INTO UTMTHS
      (MT, VERSION, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE,
      LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
   SELECT  MT, VERSION, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE,
      LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ
   FROM UAUTMTHS
   WHERE MT = A_MT
   AND VERSION = A_VERSION;

   INSERT INTO UTMTHSDETAILS
      (MT, VERSION, TR_SEQ, EV_SEQ, SEQ, DETAILS)
   SELECT        MT, VERSION, TR_SEQ, EV_SEQ, SEQ, DETAILS
   FROM UAUTMTHSDETAILS
   WHERE MT = A_MT
   AND VERSION = A_VERSION;

   INSERT INTO UTMTCELL
      (MT, VERSION, CELL, SEQ, DSP_TITLE, DSP_TITLE2, VALUE_F, VALUE_S, POS_X,
      POS_Y, ALIGN, CELL_TP, WINSIZE_X, WINSIZE_Y, IS_PROTECTED, MANDATORY, HIDDEN,
      INPUT_TP, INPUT_SOURCE, INPUT_SOURCE_VERSION, INPUT_PP, INPUT_PP_VERSION,
      INPUT_PR, INPUT_PR_VERSION, INPUT_MT, INPUT_MT_VERSION, DEF_VAL_TP,
      DEF_AU_LEVEL, SAVE_TP, SAVE_PP, SAVE_PP_VERSION, SAVE_PR, SAVE_PR_VERSION,
      SAVE_MT, SAVE_MT_VERSION, SAVE_EQ_TP, SAVE_ID, SAVE_ID_VERSION, COMPONENT,
      UNIT, FORMAT, CALC_TP, CALC_FORMULA, VALID_CF, MAX_X, MAX_Y, MULTI_SELECT,
      CREATE_NEW)
   SELECT  MT, VERSION, CELL, SEQ, DSP_TITLE, DSP_TITLE2, VALUE_F, VALUE_S, POS_X,
      POS_Y, ALIGN, CELL_TP, WINSIZE_X, WINSIZE_Y, IS_PROTECTED, MANDATORY, HIDDEN,
      INPUT_TP, INPUT_SOURCE, INPUT_SOURCE_VERSION, INPUT_PP, INPUT_PP_VERSION,
      INPUT_PR, INPUT_PR_VERSION, INPUT_MT, INPUT_MT_VERSION, DEF_VAL_TP,
      DEF_AU_LEVEL, SAVE_TP, SAVE_PP, SAVE_PP_VERSION, SAVE_PR, SAVE_PR_VERSION,
      SAVE_MT, SAVE_MT_VERSION, SAVE_EQ_TP, SAVE_ID, SAVE_ID_VERSION, COMPONENT,
      UNIT, FORMAT, CALC_TP, CALC_FORMULA, VALID_CF, MAX_X, MAX_Y, MULTI_SELECT,
      CREATE_NEW
   FROM UAUTMTCELL
   WHERE MT = A_MT
   AND VERSION = A_VERSION;

   INSERT INTO UTMTCELLEQTYPE
      (MT, VERSION, CELL, SEQ, EQ_TP)
   SELECT        MT, VERSION, CELL, SEQ, EQ_TP
   FROM UAUTMTCELLEQTYPE
   WHERE MT = A_MT
   AND VERSION = A_VERSION;

   INSERT INTO UTMTCELLLIST
      (MT, VERSION, CELL, INDEX_X, INDEX_Y, VALUE_F, VALUE_S, SELECTED)
   SELECT        MT, VERSION, CELL, INDEX_X, INDEX_Y, VALUE_F, VALUE_S, SELECTED
   FROM UAUTMTCELLLIST
   WHERE MT = A_MT
   AND VERSION = A_VERSION;

   INSERT INTO UTMTCELLSPIN
      (MT, VERSION, CELL, CIRCULAR, INCR, LOW_VAL_TP, LOW_AU_LEVEL, LOW_VAL,
      HIGH_VAL_TP, HIGH_AU_LEVEL, HIGH_VAL)
   SELECT  MT, VERSION, CELL, CIRCULAR, INCR, LOW_VAL_TP, LOW_AU_LEVEL, LOW_VAL,
      HIGH_VAL_TP, HIGH_AU_LEVEL, HIGH_VAL
   FROM UAUTMTCELLSPIN
   WHERE MT = A_MT
   AND VERSION = A_VERSION;

   INSERT INTO UTMTEL
      (MT, VERSION, EL, SEQ)
   SELECT        MT, VERSION, EL, SEQ
   FROM UAUTMTEL
   WHERE MT = A_MT
   AND VERSION = A_VERSION;

   INSERT INTO UTMTMR
      (MT, VERSION, SEQ, COMPONENT, L_DETECTION_LIMIT, L_DETERM_LIMIT,
      H_DETERM_LIMIT, H_DETECTION_LIMIT, UNIT)
   SELECT  MT, VERSION, SEQ, COMPONENT, L_DETECTION_LIMIT, L_DETERM_LIMIT,
      H_DETERM_LIMIT, H_DETECTION_LIMIT, UNIT
   FROM UAUTMTMR
   WHERE MT = A_MT
   AND VERSION = A_VERSION;

   
   FOR L_MTCELL IN L_ALL_LTMTCELL(A_MT, A_VERSION) LOOP
      BEGIN
         INSERT INTO UTLONGTEXT
         (OBJ_ID, OBJ_TP, OBJ_VERSION, DOC_ID, DOC_TP, DOC_NAME, LINE_NBR, TEXT_LINE)
         SELECT
          OBJ_ID, OBJ_TP, OBJ_VERSION, DOC_ID, DOC_TP, DOC_NAME, LINE_NBR, TEXT_LINE
         FROM UAUTLONGTEXT
         WHERE DOC_NAME = L_MTCELL.CALC_FORMULA;
      EXCEPTION
      WHEN DUP_VAL_ON_INDEX THEN
         DELETE FROM UTLONGTEXT
         WHERE DOC_NAME = L_MTCELL.CALC_FORMULA;

         INSERT INTO UTLONGTEXT
         (OBJ_ID, OBJ_TP, OBJ_VERSION, DOC_ID, DOC_TP, DOC_NAME, LINE_NBR, TEXT_LINE)
         SELECT
          OBJ_ID, OBJ_TP, OBJ_VERSION, DOC_ID, DOC_TP, DOC_NAME, LINE_NBR, TEXT_LINE
         FROM UAUTLONGTEXT
         WHERE DOC_NAME = L_MTCELL.CALC_FORMULA;
      END;
   END LOOP;

   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
   IF A_IGNORE_DUP_VAL_ON_INDEX THEN
      L_RET_CODE := REMOVEMTFROMDB(A_MT, A_VERSION);
   END IF;
   RETURN(UNAPIGEN.DBERR_NORECORDS);
END COPYMTFROMARCHDB;

FUNCTION RESTOREMTFROMDB
(A_MT IN VARCHAR2, A_VERSION IN VARCHAR2)
RETURN NUMBER IS
BEGIN
   L_RET_CODE := COPYMTFROMARCHDB(A_MT, A_VERSION, TRUE);
   IF L_RET_CODE = UNAPIGEN.DBERR_NORECORDS THEN
      L_RET_CODE := COPYMTFROMARCHDB(A_MT, A_VERSION, FALSE);
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         L_SQLERRM := 'CopyMtFromArchDB#return='||TO_CHAR(L_RET_CODE)||' for mt='||A_MT||'#version='||A_VERSION;
         RAISE STPERROR;
      END IF;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      L_SQLERRM := SUBSTR(SQLERRM,1,200);
   END IF;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
          'RestoreMtFromDB', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END RESTOREMTFROMDB;

FUNCTION REMOVEMTFROMDB
(A_MT IN VARCHAR2, A_VERSION IN VARCHAR2)
RETURN NUMBER IS
BEGIN
   
   FOR L_MTCELL IN L_ALL_LTMTCELL(A_MT, A_VERSION) LOOP
      DELETE FROM UTLONGTEXT
      WHERE DOC_NAME = L_MTCELL.CALC_FORMULA;
   END LOOP;

   

   DELETE FROM UTMT
   WHERE MT = A_MT
   AND VERSION = A_VERSION;

   DELETE FROM UTMTAU
   WHERE MT = A_MT
   AND VERSION = A_VERSION;

   DELETE FROM UTMTHS
   WHERE MT = A_MT
   AND VERSION = A_VERSION;

   DELETE FROM UTMTHSDETAILS
   WHERE MT = A_MT
   AND VERSION = A_VERSION;

   DELETE FROM UTMTCELL
   WHERE MT = A_MT
   AND VERSION = A_VERSION;

   DELETE FROM UTMTCELLEQTYPE
   WHERE MT = A_MT
   AND VERSION = A_VERSION;

   DELETE FROM UTMTCELLLIST
   WHERE MT = A_MT
   AND VERSION = A_VERSION;

   DELETE FROM UTMTCELLSPIN
   WHERE MT = A_MT
   AND VERSION = A_VERSION;

   DELETE FROM UTMTEL
   WHERE MT = A_MT
   AND VERSION = A_VERSION;

   DELETE FROM UTMTMR
   WHERE MT = A_MT
   AND VERSION = A_VERSION;

   RETURN(UNAPIGEN.DBERR_SUCCESS);
END REMOVEMTFROMDB;

FUNCTION ARCHIVEMTTOFILE
(A_MT            IN VARCHAR2, A_VERSION IN VARCHAR2)
RETURN NUMBER IS

CURSOR L_UTMT_CURSOR (A_MT IN VARCHAR2, A_VERSION IN VARCHAR2) IS
   SELECT * FROM UDMT WHERE MT=A_MT AND VERSION=A_VERSION;

CURSOR L_UTMTAU_CURSOR (A_MT IN VARCHAR2, A_VERSION IN VARCHAR2) IS
   SELECT * FROM UTMTAU WHERE MT=A_MT AND VERSION=A_VERSION;

CURSOR L_UTMTHS_CURSOR (A_MT IN VARCHAR2, A_VERSION IN VARCHAR2) IS
   SELECT * FROM UTMTHS WHERE MT=A_MT AND VERSION=A_VERSION;

CURSOR L_UTMTHSDETAILS_CURSOR (A_MT IN VARCHAR2, A_VERSION IN VARCHAR2) IS
   SELECT * FROM UTMTHSDETAILS WHERE MT=A_MT AND VERSION=A_VERSION;

CURSOR L_UTMTCELL_CURSOR (A_MT IN VARCHAR2, A_VERSION IN VARCHAR2) IS
   SELECT * FROM UTMTCELL WHERE MT=A_MT AND VERSION=A_VERSION;

CURSOR L_UTMTCELLEQTYPE_CURSOR (A_MT IN VARCHAR2, A_VERSION IN VARCHAR2) IS
   SELECT * FROM UTMTCELLEQTYPE WHERE MT=A_MT AND VERSION=A_VERSION;

CURSOR L_UTMTCELLLIST_CURSOR (A_MT IN VARCHAR2, A_VERSION IN VARCHAR2) IS
   SELECT * FROM UTMTCELLLIST WHERE MT=A_MT AND VERSION=A_VERSION;

CURSOR L_UTMTCELLSPIN_CURSOR (A_MT IN VARCHAR2, A_VERSION IN VARCHAR2) IS
   SELECT * FROM UTMTCELLSPIN WHERE MT=A_MT AND VERSION=A_VERSION;

CURSOR L_UTMTEL_CURSOR (A_MT IN VARCHAR2, A_VERSION IN VARCHAR2) IS
   SELECT * FROM UTMTEL WHERE MT=A_MT AND VERSION=A_VERSION;

CURSOR L_UTMTMR_CURSOR (A_MT IN VARCHAR2, A_VERSION IN VARCHAR2) IS
   SELECT * FROM UTMTMR WHERE MT=A_MT AND VERSION=A_VERSION;

BEGIN
   
   UNAPIRA.L_EXCEPTION_STEP :='utlongtext'||'mt='||A_MT||'#version='||A_VERSION;
   FOR L_MTCELLREC IN L_ALL_LTMTCELL(A_MT, A_VERSION) LOOP
      FOR L_REC IN L_UTLONGTEXT (L_MTCELLREC.CALC_FORMULA) LOOP
         UNAPIRA.L_EXCEPTION_STEP :='utlongtext'||'mtcell='||L_MTCELLREC.CELL;
         UNAPIRA3.L_PUTTEXT := 'utlongtext' || L_SEP ||
         L_REC.OBJ_ID || L_SEP || L_REC.OBJ_TP || L_SEP ||
         L_REC.OBJ_VERSION || L_SEP || L_REC.DOC_ID || L_SEP ||
         L_REC.DOC_TP || L_SEP || L_REC.DOC_NAME || L_SEP ||
         L_REC.LINE_NBR || L_SEP || L_REC.TEXT_LINE;
         UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
      END LOOP;
   END LOOP;

   L_SQLERRM:=NULL;
   UNAPIRA.L_EXCEPTION_STEP :='utmt' ||'mt='||A_MT||'#version='||A_VERSION;
   FOR L_REC IN L_UTMT_CURSOR(A_MT, A_VERSION) LOOP
      UNAPIRA3.L_PUTTEXT := 'utmt' || L_SEP ||
      L_REC.MT || L_SEP || L_REC.VERSION || L_SEP ||
      TO_CHAR(L_REC.EFFECTIVE_FROM,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      TO_CHAR(L_REC.EFFECTIVE_FROM_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      TO_CHAR(L_REC.EFFECTIVE_TILL,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      TO_CHAR(L_REC.EFFECTIVE_TILL_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      L_REC.DESCRIPTION || L_SEP || L_REC.DESCRIPTION2 || L_SEP ||
      L_REC.UNIT || L_SEP || L_REC.EST_COST || L_SEP || L_REC.EST_TIME || L_SEP ||
      L_REC.ACCURACY || L_SEP || L_REC.IS_TEMPLATE || L_SEP ||
      L_REC.CALIBRATION || L_SEP || L_REC.AUTORECALC || L_SEP ||
      L_REC.CONFIRM_COMPLETE || L_SEP || L_REC.AUTO_CREATE_CELLS || L_SEP ||
      L_REC.ME_RESULT_EDITABLE || L_SEP || L_REC.EXECUTOR || L_SEP ||
      L_REC.EQ_TP || L_SEP || L_REC.SOP || L_SEP || L_REC.SOP_VERSION || L_SEP ||
      L_REC.PLAUS_LOW || L_SEP || L_REC.PLAUS_HIGH || L_SEP ||
      L_REC.WINSIZE_X || L_SEP || L_REC.WINSIZE_Y || L_SEP ||
      L_REC.SC_LC || L_SEP || L_REC.SC_LC_VERSION || L_SEP ||
      L_REC.DEF_VAL_TP || L_SEP || L_REC.DEF_AU_LEVEL || L_SEP ||
      L_REC.DEF_VAL || L_SEP || L_REC.FORMAT || L_SEP ||
      L_REC.INHERIT_AU || L_SEP || L_REC.LAST_COMMENT || L_SEP ||
      L_REC.MT_CLASS || L_SEP || L_REC.LOG_HS || L_SEP ||
      L_REC.LOG_HS_DETAILS || L_SEP || L_REC.ALLOW_MODIFY || L_SEP ||
      L_REC.ACTIVE || L_SEP || L_REC.LC || L_SEP || L_REC.LC_VERSION || L_SEP ||
      L_REC.SS || L_SEP || L_REC.AR1 || L_SEP || L_REC.AR2 || L_SEP ||
      L_REC.AR3 || L_SEP || L_REC.AR4 || L_SEP || L_REC.AR5 || L_SEP ||
      L_REC.AR6 || L_SEP || L_REC.AR7 || L_SEP || L_REC.AR8 || L_SEP ||
      L_REC.AR9 || L_SEP || L_REC.AR10 || L_SEP || L_REC.AR11 || L_SEP ||
      L_REC.AR12 || L_SEP || L_REC.AR13 || L_SEP || L_REC.AR14 || L_SEP ||
      L_REC.AR15 || L_SEP || L_REC.AR16 || L_SEP || L_REC.AR17 || L_SEP ||
      L_REC.AR18 || L_SEP || L_REC.AR19 || L_SEP || L_REC.AR20 || L_SEP ||
      L_REC.AR21 || L_SEP || L_REC.AR22 || L_SEP || L_REC.AR23 || L_SEP ||
      L_REC.AR24 || L_SEP || L_REC.AR25 || L_SEP || L_REC.AR26 || L_SEP ||
      L_REC.AR27 || L_SEP || L_REC.AR28 || L_SEP || L_REC.AR29 || L_SEP ||
      L_REC.AR30 || L_SEP || L_REC.AR31 || L_SEP || L_REC.AR32 || L_SEP ||
      L_REC.AR33 || L_SEP || L_REC.AR34 || L_SEP || L_REC.AR35 || L_SEP ||
      L_REC.AR36 || L_SEP || L_REC.AR37 || L_SEP || L_REC.AR38 || L_SEP ||
      L_REC.AR39 || L_SEP || L_REC.AR40 || L_SEP || L_REC.AR41 || L_SEP ||
      L_REC.AR42 || L_SEP || L_REC.AR43 || L_SEP || L_REC.AR44 || L_SEP ||
      L_REC.AR45 || L_SEP || L_REC.AR46 || L_SEP || L_REC.AR47 || L_SEP ||
      L_REC.AR48 || L_SEP || L_REC.AR49 || L_SEP || L_REC.AR50 || L_SEP ||
      L_REC.AR51 || L_SEP || L_REC.AR52 || L_SEP || L_REC.AR53 || L_SEP ||
      L_REC.AR54 || L_SEP || L_REC.AR55 || L_SEP || L_REC.AR56 || L_SEP ||
      L_REC.AR57 || L_SEP || L_REC.AR58 || L_SEP || L_REC.AR59 || L_SEP ||
      L_REC.AR60 || L_SEP || L_REC.AR61 || L_SEP || L_REC.AR62 || L_SEP ||
      L_REC.AR63 || L_SEP || L_REC.AR64 || L_SEP || L_REC.AR65 || L_SEP ||
      L_REC.AR66 || L_SEP || L_REC.AR67 || L_SEP || L_REC.AR68 || L_SEP ||
      L_REC.AR69 || L_SEP || L_REC.AR70 || L_SEP || L_REC.AR71 || L_SEP ||
      L_REC.AR72 || L_SEP || L_REC.AR73 || L_SEP || L_REC.AR74 || L_SEP ||
      L_REC.AR75 || L_SEP || L_REC.AR76 || L_SEP || L_REC.AR77 || L_SEP ||
      L_REC.AR78 || L_SEP || L_REC.AR79 || L_SEP || L_REC.AR80 || L_SEP ||
      L_REC.AR81 || L_SEP || L_REC.AR82 || L_SEP || L_REC.AR83 || L_SEP ||
      L_REC.AR84 || L_SEP || L_REC.AR85 || L_SEP || L_REC.AR86 || L_SEP ||
      L_REC.AR87 || L_SEP || L_REC.AR88 || L_SEP || L_REC.AR89 || L_SEP ||
      L_REC.AR90 || L_SEP || L_REC.AR91 || L_SEP || L_REC.AR92 || L_SEP ||
      L_REC.AR93 || L_SEP || L_REC.AR94 || L_SEP || L_REC.AR95 || L_SEP ||
      L_REC.AR96 || L_SEP || L_REC.AR97 || L_SEP || L_REC.AR98 || L_SEP ||
      L_REC.AR99 || L_SEP || L_REC.AR100 || L_SEP || L_REC.AR101 || L_SEP ||
      L_REC.AR102 || L_SEP || L_REC.AR103 || L_SEP || L_REC.AR104 || L_SEP ||
      L_REC.AR105 || L_SEP || L_REC.AR106 || L_SEP || L_REC.AR107 || L_SEP ||
      L_REC.AR108 || L_SEP || L_REC.AR109 || L_SEP || L_REC.AR110 || L_SEP ||
      L_REC.AR111 || L_SEP || L_REC.AR112 || L_SEP || L_REC.AR113 || L_SEP ||
      L_REC.AR114 || L_SEP || L_REC.AR115 || L_SEP || L_REC.AR116 || L_SEP ||
      L_REC.AR117 || L_SEP || L_REC.AR118 || L_SEP || L_REC.AR119 || L_SEP ||
      L_REC.AR120 || L_SEP || L_REC.AR121 || L_SEP || L_REC.AR122 || L_SEP ||
      L_REC.AR123 || L_SEP || L_REC.AR124 || L_SEP || L_REC.AR125 || L_SEP ||
      L_REC.AR126 || L_SEP || L_REC.AR127 || L_SEP || L_REC.AR128;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   UNAPIRA.L_EXCEPTION_STEP :='utmtau' ||'mt='||A_MT||'#version='||A_VERSION;
   FOR L_REC IN L_UTMTAU_CURSOR(A_MT, A_VERSION) LOOP
      UNAPIRA3.L_PUTTEXT := 'utmtau' || L_SEP ||
      L_REC.MT || L_SEP || L_REC.VERSION || L_SEP || L_REC.AU || L_SEP ||
      L_REC.AU_VERSION || L_SEP || L_REC.AUSEQ || L_SEP || L_REC.VALUE;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   UNAPIRA.L_EXCEPTION_STEP :='utmths' ||'mt='||A_MT||'#version='||A_VERSION;
   FOR L_REC IN L_UTMTHS_CURSOR(A_MT, A_VERSION) LOOP
      UNAPIRA3.L_PUTTEXT := 'utmths' || L_SEP ||
      L_REC.MT || L_SEP || L_REC.VERSION || L_SEP || L_REC.WHO || L_SEP ||
      L_REC.WHO_DESCRIPTION || L_SEP || L_REC.WHAT || L_SEP ||
      L_REC.WHAT_DESCRIPTION || L_SEP ||
      TO_CHAR(L_REC.LOGDATE,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      TO_CHAR(L_REC.LOGDATE_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      L_REC.WHY || L_SEP || L_REC.TR_SEQ || L_SEP || L_REC.EV_SEQ;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   UNAPIRA.L_EXCEPTION_STEP :='utmthsdetails' ||'mt='||A_MT||'#version='||A_VERSION;
   FOR L_REC IN L_UTMTHSDETAILS_CURSOR(A_MT, A_VERSION) LOOP
      UNAPIRA3.L_PUTTEXT := 'utmthsdetails' || L_SEP ||
      L_REC.MT || L_SEP || L_REC.VERSION || L_SEP || L_REC.TR_SEQ || L_SEP ||
      L_REC.EV_SEQ || L_SEP || L_REC.SEQ || L_SEP || L_REC.DETAILS;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   UNAPIRA.L_EXCEPTION_STEP :='utmtcell' ||'mt='||A_MT||'#version='||A_VERSION;
   FOR L_REC IN L_UTMTCELL_CURSOR(A_MT, A_VERSION) LOOP
      UNAPIRA3.L_PUTTEXT := 'utmtcell' || L_SEP ||
      L_REC.MT || L_SEP || L_REC.VERSION || L_SEP || L_REC.CELL || L_SEP ||
      L_REC.SEQ || L_SEP || L_REC.DSP_TITLE || L_SEP ||
      L_REC.DSP_TITLE2 || L_SEP || L_REC.VALUE_F || L_SEP ||
      L_REC.VALUE_S || L_SEP || L_REC.POS_X || L_SEP || L_REC.POS_Y || L_SEP ||
      L_REC.ALIGN || L_SEP || L_REC.CELL_TP || L_SEP ||
      L_REC.WINSIZE_X || L_SEP || L_REC.WINSIZE_Y || L_SEP ||
      L_REC.IS_PROTECTED || L_SEP || L_REC.MANDATORY || L_SEP ||
      L_REC.HIDDEN || L_SEP || L_REC.INPUT_TP || L_SEP ||
      L_REC.INPUT_SOURCE || L_SEP || L_REC.INPUT_SOURCE_VERSION || L_SEP ||
      L_REC.INPUT_PP || L_SEP || L_REC.INPUT_PP_VERSION || L_SEP ||
      L_REC.INPUT_PR || L_SEP || L_REC.INPUT_PR_VERSION || L_SEP ||
      L_REC.INPUT_MT || L_SEP || L_REC.INPUT_MT_VERSION || L_SEP ||
      L_REC.DEF_VAL_TP || L_SEP || L_REC.DEF_AU_LEVEL || L_SEP ||
      L_REC.SAVE_TP || L_SEP || L_REC.SAVE_PP || L_SEP ||
      L_REC.SAVE_PP_VERSION || L_SEP || L_REC.SAVE_PR || L_SEP ||
      L_REC.SAVE_PR_VERSION || L_SEP || L_REC.SAVE_MT || L_SEP ||
      L_REC.SAVE_MT_VERSION || L_SEP || L_REC.SAVE_EQ_TP || L_SEP ||
      L_REC.SAVE_ID || L_SEP || L_REC.SAVE_ID_VERSION || L_SEP ||
      L_REC.COMPONENT || L_SEP || L_REC.UNIT || L_SEP || L_REC.FORMAT || L_SEP ||
      L_REC.CALC_TP || L_SEP || L_REC.CALC_FORMULA || L_SEP ||
      L_REC.VALID_CF || L_SEP || L_REC.MAX_X || L_SEP || L_REC.MAX_Y || L_SEP ||
      L_REC.MULTI_SELECT || L_SEP || L_REC.CREATE_NEW;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   UNAPIRA.L_EXCEPTION_STEP :='utmtcelleqtype' ||'mt='||A_MT||'#version='||A_VERSION;
   FOR L_REC IN L_UTMTCELLEQTYPE_CURSOR(A_MT, A_VERSION) LOOP
      UNAPIRA3.L_PUTTEXT := 'utmtcelleqtype' || L_SEP ||
      L_REC.MT || L_SEP || L_REC.VERSION || L_SEP || L_REC.CELL || L_SEP ||
      L_REC.SEQ || L_SEP || L_REC.EQ_TP;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   UNAPIRA.L_EXCEPTION_STEP :='utmtcelllist' ||'mt='||A_MT||'#version='||A_VERSION;
   FOR L_REC IN L_UTMTCELLLIST_CURSOR(A_MT, A_VERSION) LOOP
      UNAPIRA3.L_PUTTEXT := 'utmtcelllist' || L_SEP ||
      L_REC.MT || L_SEP || L_REC.VERSION || L_SEP || L_REC.CELL || L_SEP ||
      L_REC.INDEX_X || L_SEP || L_REC.INDEX_Y || L_SEP ||
      L_REC.VALUE_F || L_SEP || L_REC.VALUE_S || L_SEP ||
      L_REC.SELECTED;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   UNAPIRA.L_EXCEPTION_STEP :='utmtcellspin' ||'mt='||A_MT||'#version='||A_VERSION;
   FOR L_REC IN L_UTMTCELLSPIN_CURSOR(A_MT, A_VERSION) LOOP
      UNAPIRA3.L_PUTTEXT := 'utmtcellspin' || L_SEP ||
      L_REC.MT || L_SEP || L_REC.VERSION || L_SEP || L_REC.CELL || L_SEP ||
      L_REC.CIRCULAR || L_SEP || L_REC.INCR || L_SEP ||
      L_REC.LOW_VAL_TP || L_SEP || L_REC.LOW_AU_LEVEL || L_SEP ||
      L_REC.LOW_VAL || L_SEP || L_REC.HIGH_VAL_TP || L_SEP ||
      L_REC.HIGH_AU_LEVEL || L_SEP || L_REC.HIGH_VAL;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   UNAPIRA.L_EXCEPTION_STEP :='utmtel' ||'mt='||A_MT||'#version='||A_VERSION;
   FOR L_REC IN L_UTMTEL_CURSOR(A_MT, A_VERSION) LOOP
      UNAPIRA3.L_PUTTEXT := 'utmtel' || L_SEP ||
      L_REC.MT || L_SEP || L_REC.VERSION || L_SEP || L_REC.EL || L_SEP ||
      L_REC.SEQ;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   UNAPIRA.L_EXCEPTION_STEP :='utmtmr' ||'mt='||A_MT||'#version='||A_VERSION;
   FOR L_REC IN L_UTMTMR_CURSOR(A_MT, A_VERSION) LOOP
      UNAPIRA3.L_PUTTEXT := 'utmtmr' || L_SEP ||
      L_REC.MT || L_SEP || L_REC.VERSION || L_SEP || L_REC.SEQ || L_SEP ||
      L_REC.COMPONENT || L_SEP || L_REC.L_DETECTION_LIMIT || L_SEP ||
      L_REC.L_DETERM_LIMIT || L_SEP || L_REC.H_DETERM_LIMIT || L_SEP ||
      L_REC.H_DETECTION_LIMIT || L_SEP || L_REC.UNIT;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   UNAPIRA3.U4DATAPUTLINE( ' ');

   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN UTL_FILE.INVALID_PATH THEN
   L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Invalid path';
   UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveMtToFile', L_SQLERRM, 'UTL_FILE.INVALID_PATH',UNAPIRA.P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_NOOBJECT);

WHEN UTL_FILE.INVALID_MODE THEN
   L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Invalid mode';
   UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveMtToFile', L_SQLERRM, 'UTL_FILE.INVALID_MODE',UNAPIRA.P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_GENFAIL);

WHEN UTL_FILE.INVALID_FILEHANDLE THEN
   L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Invalid filehandle';
   UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveMtToFile', L_SQLERRM, 'UTL_FILE.INVALID_FILEHANDLE',UNAPIRA.P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_GENFAIL);

WHEN UTL_FILE.INVALID_OPERATION THEN
   
   L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Invalid operation';
   UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveMtToFile', L_SQLERRM, 'UTL_FILE.INVALID_OPERATION',UNAPIRA.P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_NOOBJECT);

WHEN UTL_FILE.READ_ERROR THEN
   L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Read error';
   UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveMtToFile', L_SQLERRM, 'UTL_FILE.READ_ERROR',UNAPIRA.P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_GENFAIL);

WHEN UTL_FILE.WRITE_ERROR THEN
   L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Write error';
   UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveMtToFile', L_SQLERRM, 'UTL_FILE.WRITE_ERROR',UNAPIRA.P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_GENFAIL);

WHEN UTL_FILE.INTERNAL_ERROR THEN
   L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Internal error';
   UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveMtToFile', L_SQLERRM, 'UTL_FILE.INTERNAL_ERROR',UNAPIRA.P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_GENFAIL);

WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      L_SQLERRM := SQLERRM;
      UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveMtToFile', L_SQLERRM, 'UTL_FILE.INTERNAL_ERROR',UNAPIRA.P_CLOSE_CURSOR);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveMtToFile', L_SQLERRM, 'UTL_FILE.INTERNAL_ERROR',UNAPIRA.P_CLOSE_CURSOR);
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END ARCHIVEMTTOFILE;

BEGIN
   L_SEP:=UNAPIRA.P_INTERNAL_SEP;
END UNAPIRAMT;
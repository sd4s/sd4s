PACKAGE BODY unapirasd AS






STPERROR      EXCEPTION;
L_RET_CODE    INTEGER;
L_SQLERRM     VARCHAR2(255);
L_SQL_STRING  VARCHAR2(2000);
L_DYN_CURSOR  INTEGER;
L_SEP         CHAR(1);

CURSOR L_ALLSDGK_TABLES_CURSOR IS
   SELECT DISTINCT TABLE_NAME,
   DECODE(SUBSTR(TABLE_NAME,1,6),'UTSDGK',1, 3) TABLE_ORDER1,
   LENGTH(TABLE_NAME) TABLE_ORDER2
   FROM USER_TAB_COLUMNS
   WHERE COLUMN_NAME = 'SD'
   AND TABLE_NAME LIKE 'UTSDGK%'
   ORDER BY 2 ASC, 3 ASC, 1 ASC;

CURSOR L_ALLSDCUSTOM_TABLES_CURSOR IS
   SELECT DISTINCT TABLE_NAME,
   LENGTH(TABLE_NAME) TABLE_ORDER1
   FROM USER_TAB_COLUMNS
   WHERE COLUMN_NAME = 'SD'
   AND TABLE_NAME LIKE 'AT%'
   ORDER BY 2 ASC, 1 ASC;


CURSOR L_ALL_LTSDII(A_SD VARCHAR2) IS
   SELECT II, IIVALUE
   FROM UTSDII
   WHERE SD = A_SD
   AND SUBSTR(IIVALUE,-4) IN ('#TXT', '#LNK', '#IMG');

CURSOR L_UTLONGTEXT (A_DOC_NAME VARCHAR2) IS
   SELECT
    OBJ_ID, OBJ_TP, OBJ_VERSION, DOC_ID, DOC_TP, DOC_NAME, LINE_NBR, TEXT_LINE
   FROM UTLONGTEXT
   WHERE DOC_NAME = A_DOC_NAME ;

FUNCTION GETVERSION
   RETURN VARCHAR2
IS
BEGIN
   RETURN('06.07.00.00_00.13');
EXCEPTION
   WHEN OTHERS THEN
   RETURN (NULL);
END GETVERSION;




PROCEDURE LOGERROR
(A_API IN VARCHAR2, A_ERROR_MSG IN VARCHAR2)
IS
BEGIN
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
           A_API, A_ERROR_MSG);
END LOGERROR;




FUNCTION REMOVESDFROMARCHIVE
(A_SD IN VARCHAR2)
RETURN NUMBER IS
BEGIN
   
   FOR L_SDII IN L_ALL_LTSDII(A_SD) LOOP
      DELETE FROM UAUTLONGTEXT
      WHERE DOC_NAME = L_SDII.IIVALUE;
   END LOOP;

   

   DELETE FROM UAUTSD
   WHERE SD = A_SD;

   DELETE FROM UAUTSDAU
   WHERE SD = A_SD;

   DELETE FROM UAUTSDHS
   WHERE SD = A_SD;

   DELETE FROM UAUTSDHSDETAILS
   WHERE SD = A_SD;

   DELETE FROM UAUTSDIC
   WHERE SD = A_SD;

   DELETE FROM UAUTSDICAU
   WHERE SD = A_SD;

   DELETE FROM UAUTSDICHS
   WHERE SD = A_SD;

   DELETE FROM UAUTSDICHSDETAILS
   WHERE SD = A_SD;

   DELETE FROM UAUTSDII
   WHERE SD = A_SD;

   DELETE FROM UAUTSDCS
   WHERE SD = A_SD;

   DELETE FROM UAUTSDCSCN
   WHERE SD = A_SD;

   DELETE FROM UAUTSDTP
   WHERE SD = A_SD;

   DELETE FROM UAUTSDCELLSC
   WHERE SD = A_SD;

   DELETE FROM UAUTSDSC
   WHERE SD = A_SD;

   L_DYN_CURSOR := DBMS_SQL.OPEN_CURSOR;
   
   FOR L_TABLE_REC IN L_ALLSDGK_TABLES_CURSOR LOOP
      L_SQL_STRING := 'DELETE FROM '||L_TABLE_REC.TABLE_NAME||'@uniarch '||
                      ' WHERE sd=:a_sd';
      BEGIN
         DBMS_SQL.PARSE(L_DYN_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         DBMS_SQL.BIND_VARIABLE(L_DYN_CURSOR, ':a_sd', A_SD);
         L_RET_CODE := DBMS_SQL.EXECUTE(L_DYN_CURSOR);
      EXCEPTION
      WHEN OTHERS THEN
         IF SQLCODE <> -942 THEN
            L_SQLERRM := SUBSTR(SQLERRM,1,200);
            LOGERROR ('RemoveSdFromArchive',L_SQLERRM);
            L_SQLERRM := 'Error while archiving table '||L_TABLE_REC.TABLE_NAME;
            LOGERROR ('RemoveSdFromArchive',L_SQLERRM);
         ELSE
            L_SQLERRM := 'Table '||L_TABLE_REC.TABLE_NAME||' does not exist';
            LOGERROR ('RemoveSdFromArchive',L_SQLERRM);
         END IF;
      END;
   END LOOP;
   
   FOR L_TABLE_REC IN L_ALLSDCUSTOM_TABLES_CURSOR LOOP
      L_SQL_STRING := 'DELETE FROM '||L_TABLE_REC.TABLE_NAME||'@uniarch '||
                      ' WHERE sd=:a_sd';
      BEGIN
         DBMS_SQL.PARSE(L_DYN_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         DBMS_SQL.BIND_VARIABLE(L_DYN_CURSOR, ':a_sd', A_SD);
         L_RET_CODE := DBMS_SQL.EXECUTE(L_DYN_CURSOR);
      EXCEPTION
      WHEN OTHERS THEN
         IF SQLCODE <> -942 THEN
            L_SQLERRM := SUBSTR(SQLERRM,1,200);
            LOGERROR ('RemoveSdFromArchive',L_SQLERRM);
            L_SQLERRM := 'Error while archiving table '||L_TABLE_REC.TABLE_NAME;
            LOGERROR ('RemoveSdFromArchive',L_SQLERRM);
         ELSE
            L_SQLERRM := 'Table '||L_TABLE_REC.TABLE_NAME||' does not exist';
            LOGERROR ('RemoveSdFromArchive',L_SQLERRM);
         END IF;
      END;
   END LOOP;
   DBMS_SQL.CLOSE_CURSOR(L_DYN_CURSOR);

   UNAPIGEN.U4COMMIT;
   RETURN(UNAPIGEN.DBERR_SUCCESS);
END REMOVESDFROMARCHIVE;

FUNCTION COPYSDTOARCHDB(A_SD IN VARCHAR2, A_IGNORE_DUP_VAL_ON_INDEX BOOLEAN) RETURN NUMBER IS
BEGIN
   
   FOR L_SDII IN L_ALL_LTSDII(A_SD) LOOP
      BEGIN
         INSERT INTO UAUTLONGTEXT
      (OBJ_ID, OBJ_TP, OBJ_VERSION, DOC_ID, DOC_TP, DOC_NAME, LINE_NBR, TEXT_LINE)
         SELECT
       OBJ_ID, OBJ_TP, OBJ_VERSION, DOC_ID, DOC_TP, DOC_NAME, LINE_NBR, TEXT_LINE
         FROM UTLONGTEXT
         WHERE DOC_NAME = L_SDII.IIVALUE;
      EXCEPTION
      WHEN DUP_VAL_ON_INDEX THEN
         DELETE FROM UAUTLONGTEXT
         WHERE DOC_NAME = L_SDII.IIVALUE;
         INSERT INTO UAUTLONGTEXT
      (OBJ_ID, OBJ_TP, OBJ_VERSION, DOC_ID, DOC_TP, DOC_NAME, LINE_NBR, TEXT_LINE)
         SELECT
       OBJ_ID, OBJ_TP, OBJ_VERSION, DOC_ID, DOC_TP, DOC_NAME, LINE_NBR, TEXT_LINE
         FROM UTLONGTEXT
         WHERE DOC_NAME = L_SDII.IIVALUE;
      END;
   END LOOP;
   
   EXECUTE IMMEDIATE
   'INSERT INTO uautsd' ||
   UNAPIRA.LISTALLCOLUMNS('utsd', 'BRACKETS', '1') ||
   ' SELECT '||   UNAPIRA.LISTALLCOLUMNS('utsd', 'NO_BRACKETS', '1') ||
   ' FROM utsd' ||
   ' WHERE sd = '''||A_SD||'''';
   INSERT INTO UAUTSDAU
      (SD, AU, AU_VERSION, AUSEQ, VALUE)
   SELECT        SD, AU, AU_VERSION, AUSEQ, VALUE
   FROM UTSDAU
   WHERE SD = A_SD;
   INSERT INTO UAUTSDHS
      (SD, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY,
      TR_SEQ, EV_SEQ)
   SELECT  SD, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY,
      TR_SEQ, EV_SEQ
   FROM UTSDHS
   WHERE SD = A_SD;
   INSERT INTO UAUTSDHSDETAILS
      (SD, TR_SEQ, EV_SEQ, SEQ, DETAILS)
   SELECT        SD, TR_SEQ, EV_SEQ, SEQ, DETAILS
   FROM UTSDHSDETAILS
   WHERE SD = A_SD;
   EXECUTE IMMEDIATE
   'INSERT INTO uautsdic' ||
   UNAPIRA.LISTALLCOLUMNS('utsdic', 'BRACKETS', '1') ||
   ' SELECT '||   UNAPIRA.LISTALLCOLUMNS('utsdic', 'NO_BRACKETS', '1') ||
   ' FROM utsdic' ||
   ' WHERE sd = '''||A_SD||'''';
   INSERT INTO UAUTSDICAU
      (SD, IC, ICNODE, AU, AU_VERSION, AUSEQ, VALUE)
   SELECT        SD, IC, ICNODE, AU, AU_VERSION, AUSEQ, VALUE
   FROM UTSDICAU
   WHERE SD = A_SD;
   INSERT INTO UAUTSDICHS
      (SD, IC, ICNODE, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE,
      LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
   SELECT  SD, IC, ICNODE, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE,
      LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ
   FROM UTSDICHS
   WHERE SD = A_SD;
   INSERT INTO UAUTSDICHSDETAILS
      (SD, IC, ICNODE, TR_SEQ, EV_SEQ, SEQ, DETAILS)
   SELECT        SD, IC, ICNODE, TR_SEQ, EV_SEQ, SEQ, DETAILS
   FROM UTSDICHSDETAILS
   WHERE SD = A_SD;
   EXECUTE IMMEDIATE
   'INSERT INTO uautsdii' ||
   UNAPIRA.LISTALLCOLUMNS('utsdii', 'BRACKETS', '1') ||
   ' SELECT '||   UNAPIRA.LISTALLCOLUMNS('utsdii', 'NO_BRACKETS', '1') ||
   ' FROM utsdii' ||
   ' WHERE sd = '''||A_SD||'''';
   INSERT INTO UAUTSDCS
      (SD, CSNODE, CS, DESCRIPTION, T0_DATE, T0_DATE_TZ)
   SELECT        SD, CSNODE, CS, DESCRIPTION, T0_DATE, T0_DATE_TZ
   FROM UTSDCS
   WHERE SD = A_SD;
   INSERT INTO UAUTSDCSCN
      (SD, CSNODE, CS, CN, CNSEQ, VALUE)
   SELECT        SD, CSNODE, CS, CN, CNSEQ, VALUE
   FROM UTSDCSCN
   WHERE SD = A_SD;
   INSERT INTO UAUTSDTP
      (SD, TPNODE, TP, TP_UNIT, ALLOW_UPFRONT, ALLOW_UPFRONT_UNIT, ALLOW_OVERDUE,
      ALLOW_OVERDUE_UNIT)
   SELECT  SD, TPNODE, TP, TP_UNIT, ALLOW_UPFRONT, ALLOW_UPFRONT_UNIT, ALLOW_OVERDUE,
      ALLOW_OVERDUE_UNIT
   FROM UTSDTP
   WHERE SD = A_SD;
   INSERT INTO UAUTSDCELLSC
      (SD, CSNODE, TPNODE, SEQ, SC, LO, LO_DESCRIPTION, LO_START_DATE,
      LO_START_DATE_TZ, LO_END_DATE, LO_END_DATE_TZ)
   SELECT  SD, CSNODE, TPNODE, SEQ, SC, LO, LO_DESCRIPTION, LO_START_DATE,
      LO_START_DATE_TZ, LO_END_DATE, LO_END_DATE_TZ
   FROM UTSDCELLSC
   WHERE SD = A_SD;
   INSERT INTO UAUTSDSC
      (SD, SC, SEQ, ASSIGN_DATE, ASSIGN_DATE_TZ, ASSIGNED_BY)
   SELECT        SD, SC, SEQ, ASSIGN_DATE, ASSIGN_DATE_TZ, ASSIGNED_BY
   FROM UTSDSC
   WHERE SD = A_SD;

   L_DYN_CURSOR := DBMS_SQL.OPEN_CURSOR;
   
   FOR L_TABLE_REC IN L_ALLSDGK_TABLES_CURSOR LOOP
      L_SQL_STRING := 'INSERT INTO '||L_TABLE_REC.TABLE_NAME||'@uniarch '||
                      UNAPIRA.LISTALLCOLUMNS(L_TABLE_REC.TABLE_NAME, 'BRACKETS', '0') ||
                      ' SELECT '||
                      UNAPIRA.LISTALLCOLUMNS(L_TABLE_REC.TABLE_NAME, 'NO_BRACKETS', '0') ||
                      ' FROM '||L_TABLE_REC.TABLE_NAME||
                      ' WHERE sd=:a_sd';
      BEGIN
         DBMS_SQL.PARSE(L_DYN_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         DBMS_SQL.BIND_VARIABLE(L_DYN_CURSOR, ':a_sd', A_SD);
         L_RET_CODE := DBMS_SQL.EXECUTE(L_DYN_CURSOR);
      EXCEPTION
      WHEN OTHERS THEN
         IF SQLCODE <> -942 THEN
            L_SQLERRM := SUBSTR(SQLERRM,1,200);
            LOGERROR ('CopySdToArchDB',L_SQLERRM);
            L_SQLERRM := 'Error while archiving table '||L_TABLE_REC.TABLE_NAME;
            LOGERROR ('CopySdToArchDB',L_SQLERRM);
         ELSE
            L_SQLERRM := 'Table '||L_TABLE_REC.TABLE_NAME||' does not exist';
            LOGERROR ('CopySdToArchDB',L_SQLERRM);
         END IF;
      END;
   END LOOP;
   
   FOR L_TABLE_REC IN L_ALLSDCUSTOM_TABLES_CURSOR LOOP
      L_SQL_STRING := 'INSERT INTO '||L_TABLE_REC.TABLE_NAME||'@uniarch '||
                      UNAPIRA.LISTALLCOLUMNS(L_TABLE_REC.TABLE_NAME, 'BRACKETS', '0') ||
                      ' SELECT '||
                      UNAPIRA.LISTALLCOLUMNS(L_TABLE_REC.TABLE_NAME, 'NO_BRACKETS', '0') ||
                      ' FROM '||L_TABLE_REC.TABLE_NAME||
                      ' WHERE sd=:a_sd';
      BEGIN
         DBMS_SQL.PARSE(L_DYN_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         DBMS_SQL.BIND_VARIABLE(L_DYN_CURSOR, ':a_sd', A_SD);
         L_RET_CODE := DBMS_SQL.EXECUTE(L_DYN_CURSOR);
      EXCEPTION
      WHEN OTHERS THEN
         IF SQLCODE <> -942 THEN
            L_SQLERRM := SUBSTR(SQLERRM,1,200);
            LOGERROR ('CopySdToArchDB',L_SQLERRM);
            L_SQLERRM := 'Error while archiving table '||L_TABLE_REC.TABLE_NAME;
            LOGERROR ('CopySdToArchDB',L_SQLERRM);
         ELSE
            L_SQLERRM := 'Table '||L_TABLE_REC.TABLE_NAME||' does not exist';
            LOGERROR ('CopySdToArchDB',L_SQLERRM);
         END IF;
      END;
   END LOOP;
   DBMS_SQL.CLOSE_CURSOR(L_DYN_CURSOR);

   UNAPIGEN.U4COMMIT;
   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
   IF A_IGNORE_DUP_VAL_ON_INDEX THEN
      L_RET_CODE := REMOVESDFROMARCHIVE(A_SD);
   END IF;
   RETURN(UNAPIGEN.DBERR_NORECORDS);
END COPYSDTOARCHDB;

FUNCTION ARCHIVESDTODB
(A_SD IN VARCHAR2)
RETURN NUMBER IS
BEGIN
   L_RET_CODE := COPYSDTOARCHDB(A_SD, TRUE);
   IF L_RET_CODE = UNAPIGEN.DBERR_NORECORDS THEN
      L_RET_CODE := COPYSDTOARCHDB(A_SD, FALSE);
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         L_SQLERRM := 'CopySdToArchDB#return='||TO_CHAR(L_RET_CODE)||' for sd='||A_SD;
         RAISE STPERROR;
      END IF;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      L_SQLERRM := SUBSTR(SQLERRM,1,200);
   END IF;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
          'ArchiveSdToDB', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END ARCHIVESDTODB;

FUNCTION COPYSDFROMARCHDB(A_SD IN VARCHAR2, A_IGNORE_DUP_VAL_ON_INDEX BOOLEAN) RETURN NUMBER IS
BEGIN
   

   EXECUTE IMMEDIATE
   'INSERT INTO utsd' ||
   UNAPIRA.LISTALLCOLUMNS('utsd', 'BRACKETS', '1') ||
   ' SELECT '||   UNAPIRA.LISTALLCOLUMNS('utsd', 'NO_BRACKETS', '1') ||
   ' FROM uautsd' ||
   ' WHERE sd = '''||A_SD||'''';

   INSERT INTO UTSDAU
      (SD, AU, AU_VERSION, AUSEQ, VALUE)
   SELECT        SD, AU, AU_VERSION, AUSEQ, VALUE
   FROM UAUTSDAU
   WHERE SD = A_SD;

   INSERT INTO UTSDHS
      (SD, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY,
      TR_SEQ, EV_SEQ)
   SELECT  SD, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY,
      TR_SEQ, EV_SEQ
   FROM UAUTSDHS
   WHERE SD = A_SD;

   INSERT INTO UTSDHSDETAILS
      (SD, TR_SEQ, EV_SEQ, SEQ, DETAILS)
   SELECT        SD, TR_SEQ, EV_SEQ, SEQ, DETAILS
   FROM UAUTSDHSDETAILS
   WHERE SD = A_SD;

   EXECUTE IMMEDIATE
   'INSERT INTO utsdic' ||
   UNAPIRA.LISTALLCOLUMNS('utsdic', 'BRACKETS', '1') ||
   ' SELECT '||   UNAPIRA.LISTALLCOLUMNS('utsdic', 'NO_BRACKETS', '1') ||
   ' FROM uautsdic' ||
   ' WHERE sd = '''||A_SD||'''';

   INSERT INTO UTSDICAU
      (SD, IC, ICNODE, AU, AU_VERSION, AUSEQ, VALUE)
   SELECT        SD, IC, ICNODE, AU, AU_VERSION, AUSEQ, VALUE
   FROM UAUTSDICAU
   WHERE SD = A_SD;

   INSERT INTO UTSDICHS
      (SD, IC, ICNODE, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE,
      LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
   SELECT  SD, IC, ICNODE, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE,
      LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ
   FROM UAUTSDICHS
   WHERE SD = A_SD;

   INSERT INTO UTSDICHSDETAILS
      (SD, IC, ICNODE, TR_SEQ, EV_SEQ, SEQ, DETAILS)
   SELECT        SD, IC, ICNODE, TR_SEQ, EV_SEQ, SEQ, DETAILS
   FROM UAUTSDICHSDETAILS
   WHERE SD = A_SD;

   EXECUTE IMMEDIATE
   'INSERT INTO utsdii' ||
   UNAPIRA.LISTALLCOLUMNS('utsdii', 'BRACKETS', '1') ||
   ' SELECT '||   UNAPIRA.LISTALLCOLUMNS('utsdii', 'NO_BRACKETS', '1') ||
   ' FROM uautsdii' ||
   ' WHERE sd = '''||A_SD||'''';

   INSERT INTO UTSDCS
      (SD, CSNODE, CS, DESCRIPTION, T0_DATE, T0_DATE_TZ)
   SELECT        SD, CSNODE, CS, DESCRIPTION, T0_DATE, T0_DATE_TZ
   FROM UAUTSDCS
   WHERE SD = A_SD;

   INSERT INTO UTSDCSCN
      (SD, CSNODE, CS, CN, CNSEQ, VALUE)
   SELECT        SD, CSNODE, CS, CN, CNSEQ, VALUE
   FROM UAUTSDCSCN
   WHERE SD = A_SD;

   INSERT INTO UTSDTP
      (SD, TPNODE, TP, TP_UNIT, ALLOW_UPFRONT, ALLOW_UPFRONT_UNIT, ALLOW_OVERDUE,
      ALLOW_OVERDUE_UNIT)
   SELECT  SD, TPNODE, TP, TP_UNIT, ALLOW_UPFRONT, ALLOW_UPFRONT_UNIT, ALLOW_OVERDUE,
      ALLOW_OVERDUE_UNIT
   FROM UAUTSDTP
   WHERE SD = A_SD;

   INSERT INTO UTSDCELLSC
      (SD, CSNODE, TPNODE, SEQ, SC, LO, LO_DESCRIPTION, LO_START_DATE,
      LO_START_DATE_TZ, LO_END_DATE, LO_END_DATE_TZ)
   SELECT  SD, CSNODE, TPNODE, SEQ, SC, LO, LO_DESCRIPTION, LO_START_DATE,
      LO_START_DATE_TZ, LO_END_DATE, LO_END_DATE_TZ
   FROM UAUTSDCELLSC
   WHERE SD = A_SD;

   INSERT INTO UTSDSC
      (SD, SC, SEQ, ASSIGN_DATE, ASSIGN_DATE_TZ, ASSIGNED_BY)
   SELECT        SD, SC, SEQ, ASSIGN_DATE, ASSIGN_DATE_TZ, ASSIGNED_BY
   FROM UAUTSDSC
   WHERE SD = A_SD;

   
   FOR L_SDII IN L_ALL_LTSDII(A_SD) LOOP
      INSERT INTO UTLONGTEXT
      (OBJ_ID, OBJ_TP, OBJ_VERSION, DOC_ID, DOC_TP, DOC_NAME, LINE_NBR, TEXT_LINE)
      SELECT
       OBJ_ID, OBJ_TP, OBJ_VERSION, DOC_ID, DOC_TP, DOC_NAME, LINE_NBR, TEXT_LINE
      FROM UAUTLONGTEXT
      WHERE DOC_NAME = L_SDII.IIVALUE ;
   END LOOP;

   L_DYN_CURSOR := DBMS_SQL.OPEN_CURSOR;
   
   FOR L_TABLE_REC IN L_ALLSDGK_TABLES_CURSOR LOOP
      L_SQL_STRING := 'INSERT INTO '||L_TABLE_REC.TABLE_NAME||' '||
                      UNAPIRA.LISTALLCOLUMNS(L_TABLE_REC.TABLE_NAME, 'BRACKETS', '0') ||
                      ' SELECT '||
                      UNAPIRA.LISTALLCOLUMNS(L_TABLE_REC.TABLE_NAME, 'NO_BRACKETS', '0') ||
                      ' FROM '||L_TABLE_REC.TABLE_NAME||'@uniarch '||
                      ' WHERE sd=:a_sd';
      BEGIN
         DBMS_SQL.PARSE(L_DYN_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         DBMS_SQL.BIND_VARIABLE(L_DYN_CURSOR, ':a_sd', A_SD);
         L_RET_CODE := DBMS_SQL.EXECUTE(L_DYN_CURSOR);
      EXCEPTION
      WHEN OTHERS THEN
         IF SQLCODE <> -942 THEN
            L_SQLERRM := SUBSTR(SQLERRM,1,200);
            LOGERROR ('CopySdFromArchDB',L_SQLERRM);
            L_SQLERRM := 'Error while archiving table '||L_TABLE_REC.TABLE_NAME;
            LOGERROR ('CopySdFromArchDB',L_SQLERRM);
         ELSE
            L_SQLERRM := 'Table '||L_TABLE_REC.TABLE_NAME||' does not exist';
            LOGERROR ('CopySdFromArchDB',L_SQLERRM);
         END IF;
      END;
   END LOOP;
   
   FOR L_TABLE_REC IN L_ALLSDCUSTOM_TABLES_CURSOR LOOP
      L_SQL_STRING := 'INSERT INTO '||L_TABLE_REC.TABLE_NAME||' '||
                      UNAPIRA.LISTALLCOLUMNS(L_TABLE_REC.TABLE_NAME, 'BRACKETS', '0') ||
                      ' SELECT '||
                      UNAPIRA.LISTALLCOLUMNS(L_TABLE_REC.TABLE_NAME, 'NO_BRACKETS', '0') ||
                      ' FROM '||L_TABLE_REC.TABLE_NAME||'@uniarch '||
                      ' WHERE sd=:a_sd';
      BEGIN
         DBMS_SQL.PARSE(L_DYN_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         DBMS_SQL.BIND_VARIABLE(L_DYN_CURSOR, ':a_sd', A_SD);
         L_RET_CODE := DBMS_SQL.EXECUTE(L_DYN_CURSOR);
      EXCEPTION
      WHEN OTHERS THEN
         IF SQLCODE <> -942 THEN
            L_SQLERRM := SUBSTR(SQLERRM,1,200);
            LOGERROR ('CopySdFromArchDB',L_SQLERRM);
            L_SQLERRM := 'Error while archiving table '||L_TABLE_REC.TABLE_NAME;
            LOGERROR ('CopySdFromArchDB',L_SQLERRM);
         ELSE
            L_SQLERRM := 'Table '||L_TABLE_REC.TABLE_NAME||' does not exist';
            LOGERROR ('CopySdFromArchDB',L_SQLERRM);
         END IF;
      END;
   END LOOP;
   DBMS_SQL.CLOSE_CURSOR(L_DYN_CURSOR);

   UNAPIGEN.U4COMMIT;
   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
   IF A_IGNORE_DUP_VAL_ON_INDEX THEN
      L_RET_CODE := REMOVESDFROMDB(A_SD);
   END IF;
   RETURN(UNAPIGEN.DBERR_NORECORDS);
END COPYSDFROMARCHDB;

FUNCTION RESTORESDFROMDB
(A_SD IN VARCHAR2)
RETURN NUMBER IS
BEGIN
   L_RET_CODE := COPYSDFROMARCHDB(A_SD, TRUE);
   IF L_RET_CODE = UNAPIGEN.DBERR_NORECORDS THEN
      L_RET_CODE := COPYSDFROMARCHDB(A_SD, FALSE);
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         L_SQLERRM := 'CopySdFromArchDB#return='||TO_CHAR(L_RET_CODE)||' for sd='||A_SD;
         RAISE STPERROR;
      END IF;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      L_SQLERRM := SUBSTR(SQLERRM,1,200);
   END IF;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
          'RestoreSdFromDB', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END RESTORESDFROMDB;

FUNCTION REMOVESDFROMDB
(A_SD IN VARCHAR2)
RETURN NUMBER IS
BEGIN
   
   FOR L_SDII IN L_ALL_LTSDII(A_SD) LOOP
      DELETE FROM UTLONGTEXT
      WHERE DOC_NAME = L_SDII.IIVALUE;
   END LOOP;

   

   DELETE FROM UTSD
   WHERE SD = A_SD;

   DELETE FROM UTSDAU
   WHERE SD = A_SD;

   DELETE FROM UTSDHS
   WHERE SD = A_SD;

   DELETE FROM UTSDHSDETAILS
   WHERE SD = A_SD;

   DELETE FROM UTSDIC
   WHERE SD = A_SD;

   DELETE FROM UTSDICAU
   WHERE SD = A_SD;

   DELETE FROM UTSDICHS
   WHERE SD = A_SD;

   DELETE FROM UTSDICHSDETAILS
   WHERE SD = A_SD;

   DELETE FROM UTSDII
   WHERE SD = A_SD;

   DELETE FROM UTSDCS
   WHERE SD = A_SD;

   DELETE FROM UTSDCSCN
   WHERE SD = A_SD;

   DELETE FROM UTSDTP
   WHERE SD = A_SD;

   DELETE FROM UTSDCELLSC
   WHERE SD = A_SD;

   DELETE FROM UTSDSC
   WHERE SD = A_SD;

   L_DYN_CURSOR := DBMS_SQL.OPEN_CURSOR;
   
   FOR L_TABLE_REC IN L_ALLSDGK_TABLES_CURSOR LOOP
      L_SQL_STRING := 'DELETE FROM '||L_TABLE_REC.TABLE_NAME ||
                      ' WHERE sd=:a_sd';
      BEGIN
         DBMS_SQL.PARSE(L_DYN_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         DBMS_SQL.BIND_VARIABLE(L_DYN_CURSOR, ':a_sd', A_SD);
         L_RET_CODE := DBMS_SQL.EXECUTE(L_DYN_CURSOR);
      EXCEPTION
      WHEN OTHERS THEN
         IF SQLCODE <> -942 THEN
            L_SQLERRM := SUBSTR(SQLERRM,1,200);
            LOGERROR ('RemoveSdFromDB',L_SQLERRM);
            L_SQLERRM := 'Error while archiving table '||L_TABLE_REC.TABLE_NAME;
            LOGERROR ('RemoveSdFromDB',L_SQLERRM);
         ELSE
            L_SQLERRM := 'Table '||L_TABLE_REC.TABLE_NAME||' does not exist';
            LOGERROR ('RemoveSdFromDB',L_SQLERRM);
         END IF;
      END;
   END LOOP;
   FOR L_TABLE_REC IN L_ALLSDCUSTOM_TABLES_CURSOR LOOP
      L_SQL_STRING := 'DELETE FROM '||L_TABLE_REC.TABLE_NAME ||
                      ' WHERE sd=:a_sd';
      BEGIN
         DBMS_SQL.PARSE(L_DYN_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         DBMS_SQL.BIND_VARIABLE(L_DYN_CURSOR, ':a_sd', A_SD);
         L_RET_CODE := DBMS_SQL.EXECUTE(L_DYN_CURSOR);
      EXCEPTION
      WHEN OTHERS THEN
         IF SQLCODE <> -942 THEN
            L_SQLERRM := SUBSTR(SQLERRM,1,200);
            LOGERROR ('RemoveSdFromDB',L_SQLERRM);
            L_SQLERRM := 'Error while archiving table '||L_TABLE_REC.TABLE_NAME;
            LOGERROR ('RemoveSdFromDB',L_SQLERRM);
         ELSE
            L_SQLERRM := 'Table '||L_TABLE_REC.TABLE_NAME||' does not exist';
            LOGERROR ('RemoveSdFromDB',L_SQLERRM);
         END IF;
      END;
   END LOOP;
   DBMS_SQL.CLOSE_CURSOR(L_DYN_CURSOR);

   UNAPIGEN.U4COMMIT;
   RETURN(UNAPIGEN.DBERR_SUCCESS);
END REMOVESDFROMDB;

FUNCTION ARCHIVESDTOFILE
(A_SD            IN VARCHAR2)
RETURN NUMBER IS

CURSOR L_UTSD_CURSOR (A_SD IN VARCHAR2) IS
   SELECT * FROM UDSD WHERE SD=A_SD;

CURSOR L_UTSDAU_CURSOR (A_SD IN VARCHAR2) IS
   SELECT * FROM UTSDAU WHERE SD=A_SD;

CURSOR L_UTSDHS_CURSOR (A_SD IN VARCHAR2) IS
   SELECT * FROM UTSDHS WHERE SD=A_SD;

CURSOR L_UTSDHSDETAILS_CURSOR (A_SD IN VARCHAR2) IS
   SELECT * FROM UTSDHSDETAILS WHERE SD=A_SD;

CURSOR L_UTSDIC_CURSOR (A_SD IN VARCHAR2) IS
   SELECT * FROM UDSDIC WHERE SD=A_SD;

CURSOR L_UTSDICAU_CURSOR (A_SD IN VARCHAR2) IS
   SELECT * FROM UTSDICAU WHERE SD=A_SD;

CURSOR L_UTSDICHS_CURSOR (A_SD IN VARCHAR2) IS
   SELECT * FROM UTSDICHS WHERE SD=A_SD;

CURSOR L_UTSDICHSDETAILS_CURSOR (A_SD IN VARCHAR2) IS
   SELECT * FROM UTSDICHSDETAILS WHERE SD=A_SD;

CURSOR L_UTSDII_CURSOR (A_SD IN VARCHAR2) IS
   SELECT * FROM UDSDII WHERE SD=A_SD;

CURSOR L_UTSDCS_CURSOR (A_SD IN VARCHAR2) IS
   SELECT * FROM UTSDCS WHERE SD=A_SD;

CURSOR L_UTSDCSCN_CURSOR (A_SD IN VARCHAR2) IS
   SELECT * FROM UTSDCSCN WHERE SD=A_SD;

CURSOR L_UTSDTP_CURSOR (A_SD IN VARCHAR2) IS
   SELECT * FROM UTSDTP WHERE SD=A_SD;

CURSOR L_UTSDCELLSC_CURSOR (A_SD IN VARCHAR2) IS
   SELECT * FROM UTSDCELLSC WHERE SD=A_SD;

CURSOR L_UTSDSC_CURSOR (A_SD IN VARCHAR2) IS
   SELECT * FROM UTSDSC WHERE SD=A_SD;

BEGIN
   
   UNAPIRA.L_EXCEPTION_STEP :='utlongtext' ||'sd='||A_SD;
   FOR L_SDIIREC IN L_ALL_LTSDII(A_SD) LOOP
      FOR L_REC IN L_UTLONGTEXT (L_SDIIREC.IIVALUE) LOOP
         UNAPIRA.L_EXCEPTION_STEP :='utlongtext' ||'sdii='||L_SDIIREC.II;
         UNAPIRA3.L_PUTTEXT := 'utlongtext' || L_SEP ||
         L_REC.OBJ_ID || L_SEP || L_REC.OBJ_TP || L_SEP ||
         L_REC.OBJ_VERSION || L_SEP || L_REC.DOC_ID || L_SEP ||
         L_REC.DOC_TP || L_SEP || L_REC.DOC_NAME || L_SEP ||
         L_REC.LINE_NBR || L_SEP || L_REC.TEXT_LINE;
         UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
      END LOOP;
   END LOOP;

   L_SQLERRM:=NULL;
   UNAPIRA.L_EXCEPTION_STEP :='utsd' ||'sd='||A_SD;
   FOR L_REC IN L_UTSD_CURSOR(A_SD) LOOP
      UNAPIRA3.L_PUTTEXT := 'utsd' || L_SEP ||
      L_REC.SD || L_SEP || L_REC.PT || L_SEP || L_REC.PT_VERSION || L_SEP ||
      L_REC.DESCRIPTION || L_SEP || L_REC.DESCR_DOC || L_SEP ||
      L_REC.DESCR_DOC_VERSION || L_SEP || L_REC.RESPONSIBLE || L_SEP ||
      L_REC.LABEL_FORMAT || L_SEP ||
      TO_CHAR(L_REC.CREATION_DATE,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      TO_CHAR(L_REC.CREATION_DATE_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      L_REC.CREATED_BY || L_SEP ||
      TO_CHAR(L_REC.EXEC_START_DATE,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      TO_CHAR(L_REC.EXEC_START_DATE_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      TO_CHAR(L_REC.EXEC_END_DATE,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      TO_CHAR(L_REC.EXEC_END_DATE_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      TO_CHAR(L_REC.T0_DATE,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      TO_CHAR(L_REC.T0_DATE_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      L_REC.NR_SC_CURRENT || L_SEP || L_REC.LAST_COMMENT || L_SEP ||
      L_REC.SD_CLASS || L_SEP || L_REC.LOG_HS || L_SEP ||
      L_REC.LOG_HS_DETAILS || L_SEP || L_REC.ALLOW_MODIFY || L_SEP ||
      L_REC.ACTIVE || L_SEP || L_REC.LC || L_SEP || L_REC.LC_VERSION || L_SEP ||
      L_REC.SS || L_SEP || L_REC.AR1 || L_SEP || L_REC.AR2 || L_SEP ||
      L_REC.AR3 || L_SEP || L_REC.AR4 || L_SEP || L_REC.AR5 || L_SEP ||
      L_REC.AR6 || L_SEP || L_REC.AR7 || L_SEP || L_REC.AR8 || L_SEP ||
      L_REC.AR9 || L_SEP || L_REC.AR10 || L_SEP || L_REC.AR11 || L_SEP ||
      L_REC.AR12 || L_SEP || L_REC.AR13 || L_SEP || L_REC.AR14 || L_SEP ||
      L_REC.AR15 || L_SEP || L_REC.AR16 || L_SEP || L_REC.AR17 || L_SEP ||
      L_REC.AR18 || L_SEP || L_REC.AR19 || L_SEP || L_REC.AR20 || L_SEP ||
      L_REC.AR21 || L_SEP || L_REC.AR22 || L_SEP || L_REC.AR23 || L_SEP ||
      L_REC.AR24 || L_SEP || L_REC.AR25 || L_SEP || L_REC.AR26 || L_SEP ||
      L_REC.AR27 || L_SEP || L_REC.AR28 || L_SEP || L_REC.AR29 || L_SEP ||
      L_REC.AR30 || L_SEP || L_REC.AR31 || L_SEP || L_REC.AR32 || L_SEP ||
      L_REC.AR33 || L_SEP || L_REC.AR34 || L_SEP || L_REC.AR35 || L_SEP ||
      L_REC.AR36 || L_SEP || L_REC.AR37 || L_SEP || L_REC.AR38 || L_SEP ||
      L_REC.AR39 || L_SEP || L_REC.AR40 || L_SEP || L_REC.AR41 || L_SEP ||
      L_REC.AR42 || L_SEP || L_REC.AR43 || L_SEP || L_REC.AR44 || L_SEP ||
      L_REC.AR45 || L_SEP || L_REC.AR46 || L_SEP || L_REC.AR47 || L_SEP ||
      L_REC.AR48 || L_SEP || L_REC.AR49 || L_SEP || L_REC.AR50 || L_SEP ||
      L_REC.AR51 || L_SEP || L_REC.AR52 || L_SEP || L_REC.AR53 || L_SEP ||
      L_REC.AR54 || L_SEP || L_REC.AR55 || L_SEP || L_REC.AR56 || L_SEP ||
      L_REC.AR57 || L_SEP || L_REC.AR58 || L_SEP || L_REC.AR59 || L_SEP ||
      L_REC.AR60 || L_SEP || L_REC.AR61 || L_SEP || L_REC.AR62 || L_SEP ||
      L_REC.AR63 || L_SEP || L_REC.AR64 || L_SEP || L_REC.AR65 || L_SEP ||
      L_REC.AR66 || L_SEP || L_REC.AR67 || L_SEP || L_REC.AR68 || L_SEP ||
      L_REC.AR69 || L_SEP || L_REC.AR70 || L_SEP || L_REC.AR71 || L_SEP ||
      L_REC.AR72 || L_SEP || L_REC.AR73 || L_SEP || L_REC.AR74 || L_SEP ||
      L_REC.AR75 || L_SEP || L_REC.AR76 || L_SEP || L_REC.AR77 || L_SEP ||
      L_REC.AR78 || L_SEP || L_REC.AR79 || L_SEP || L_REC.AR80 || L_SEP ||
      L_REC.AR81 || L_SEP || L_REC.AR82 || L_SEP || L_REC.AR83 || L_SEP ||
      L_REC.AR84 || L_SEP || L_REC.AR85 || L_SEP || L_REC.AR86 || L_SEP ||
      L_REC.AR87 || L_SEP || L_REC.AR88 || L_SEP || L_REC.AR89 || L_SEP ||
      L_REC.AR90 || L_SEP || L_REC.AR91 || L_SEP || L_REC.AR92 || L_SEP ||
      L_REC.AR93 || L_SEP || L_REC.AR94 || L_SEP || L_REC.AR95 || L_SEP ||
      L_REC.AR96 || L_SEP || L_REC.AR97 || L_SEP || L_REC.AR98 || L_SEP ||
      L_REC.AR99 || L_SEP || L_REC.AR100 || L_SEP || L_REC.AR101 || L_SEP ||
      L_REC.AR102 || L_SEP || L_REC.AR103 || L_SEP || L_REC.AR104 || L_SEP ||
      L_REC.AR105 || L_SEP || L_REC.AR106 || L_SEP || L_REC.AR107 || L_SEP ||
      L_REC.AR108 || L_SEP || L_REC.AR109 || L_SEP || L_REC.AR110 || L_SEP ||
      L_REC.AR111 || L_SEP || L_REC.AR112 || L_SEP || L_REC.AR113 || L_SEP ||
      L_REC.AR114 || L_SEP || L_REC.AR115 || L_SEP || L_REC.AR116 || L_SEP ||
      L_REC.AR117 || L_SEP || L_REC.AR118 || L_SEP || L_REC.AR119 || L_SEP ||
      L_REC.AR120 || L_SEP || L_REC.AR121 || L_SEP || L_REC.AR122 || L_SEP ||
      L_REC.AR123 || L_SEP || L_REC.AR124 || L_SEP || L_REC.AR125 || L_SEP ||
      L_REC.AR126 || L_SEP || L_REC.AR127 || L_SEP || L_REC.AR128;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   UNAPIRA.L_EXCEPTION_STEP :='utsdau' ||'sd='||A_SD;
   FOR L_REC IN L_UTSDAU_CURSOR(A_SD) LOOP
      UNAPIRA3.L_PUTTEXT := 'utsdau' || L_SEP ||
      L_REC.SD || L_SEP || L_REC.AU || L_SEP || L_REC.AU_VERSION || L_SEP ||
      L_REC.AUSEQ || L_SEP || L_REC.VALUE;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   UNAPIRA.L_EXCEPTION_STEP :='utsdhs' ||'sd='||A_SD;
   FOR L_REC IN L_UTSDHS_CURSOR(A_SD) LOOP
      UNAPIRA3.L_PUTTEXT := 'utsdhs' || L_SEP ||
      L_REC.SD || L_SEP || L_REC.WHO || L_SEP || L_REC.WHO_DESCRIPTION || L_SEP ||
      L_REC.WHAT || L_SEP || L_REC.WHAT_DESCRIPTION || L_SEP ||
      TO_CHAR(L_REC.LOGDATE,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      TO_CHAR(L_REC.LOGDATE_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      L_REC.WHY || L_SEP || L_REC.TR_SEQ || L_SEP || L_REC.EV_SEQ;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   UNAPIRA.L_EXCEPTION_STEP :='utsdhsdetails' ||'sd='||A_SD;
   FOR L_REC IN L_UTSDHSDETAILS_CURSOR(A_SD) LOOP
      UNAPIRA3.L_PUTTEXT := 'utsdhsdetails' || L_SEP ||
      L_REC.SD || L_SEP || L_REC.TR_SEQ || L_SEP || L_REC.EV_SEQ || L_SEP ||
      L_REC.SEQ || L_SEP || L_REC.DETAILS;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   UNAPIRA.L_EXCEPTION_STEP :='utsdic' ||'sd='||A_SD;
   FOR L_REC IN L_UTSDIC_CURSOR(A_SD) LOOP
      UNAPIRA3.L_PUTTEXT := 'utsdic' || L_SEP ||
      L_REC.SD || L_SEP || L_REC.IC || L_SEP || L_REC.ICNODE || L_SEP ||
      L_REC.IP_VERSION || L_SEP || L_REC.DESCRIPTION || L_SEP ||
      L_REC.WINSIZE_X || L_SEP || L_REC.WINSIZE_Y || L_SEP ||
      L_REC.IS_PROTECTED || L_SEP || L_REC.HIDDEN || L_SEP ||
      L_REC.MANUALLY_ADDED || L_SEP || L_REC.NEXT_II || L_SEP ||
      L_REC.LAST_COMMENT || L_SEP || L_REC.IC_CLASS || L_SEP ||
      L_REC.LOG_HS || L_SEP || L_REC.LOG_HS_DETAILS || L_SEP ||
      L_REC.ALLOW_MODIFY || L_SEP || L_REC.ACTIVE || L_SEP || L_REC.LC || L_SEP ||
      L_REC.LC_VERSION || L_SEP || L_REC.SS || L_SEP || L_REC.AR1 || L_SEP ||
      L_REC.AR2 || L_SEP || L_REC.AR3 || L_SEP || L_REC.AR4 || L_SEP ||
      L_REC.AR5 || L_SEP || L_REC.AR6 || L_SEP || L_REC.AR7 || L_SEP ||
      L_REC.AR8 || L_SEP || L_REC.AR9 || L_SEP || L_REC.AR10 || L_SEP ||
      L_REC.AR11 || L_SEP || L_REC.AR12 || L_SEP || L_REC.AR13 || L_SEP ||
      L_REC.AR14 || L_SEP || L_REC.AR15 || L_SEP || L_REC.AR16 || L_SEP ||
      L_REC.AR17 || L_SEP || L_REC.AR18 || L_SEP || L_REC.AR19 || L_SEP ||
      L_REC.AR20 || L_SEP || L_REC.AR21 || L_SEP || L_REC.AR22 || L_SEP ||
      L_REC.AR23 || L_SEP || L_REC.AR24 || L_SEP || L_REC.AR25 || L_SEP ||
      L_REC.AR26 || L_SEP || L_REC.AR27 || L_SEP || L_REC.AR28 || L_SEP ||
      L_REC.AR29 || L_SEP || L_REC.AR30 || L_SEP || L_REC.AR31 || L_SEP ||
      L_REC.AR32 || L_SEP || L_REC.AR33 || L_SEP || L_REC.AR34 || L_SEP ||
      L_REC.AR35 || L_SEP || L_REC.AR36 || L_SEP || L_REC.AR37 || L_SEP ||
      L_REC.AR38 || L_SEP || L_REC.AR39 || L_SEP || L_REC.AR40 || L_SEP ||
      L_REC.AR41 || L_SEP || L_REC.AR42 || L_SEP || L_REC.AR43 || L_SEP ||
      L_REC.AR44 || L_SEP || L_REC.AR45 || L_SEP || L_REC.AR46 || L_SEP ||
      L_REC.AR47 || L_SEP || L_REC.AR48 || L_SEP || L_REC.AR49 || L_SEP ||
      L_REC.AR50 || L_SEP || L_REC.AR51 || L_SEP || L_REC.AR52 || L_SEP ||
      L_REC.AR53 || L_SEP || L_REC.AR54 || L_SEP || L_REC.AR55 || L_SEP ||
      L_REC.AR56 || L_SEP || L_REC.AR57 || L_SEP || L_REC.AR58 || L_SEP ||
      L_REC.AR59 || L_SEP || L_REC.AR60 || L_SEP || L_REC.AR61 || L_SEP ||
      L_REC.AR62 || L_SEP || L_REC.AR63 || L_SEP || L_REC.AR64 || L_SEP ||
      L_REC.AR65 || L_SEP || L_REC.AR66 || L_SEP || L_REC.AR67 || L_SEP ||
      L_REC.AR68 || L_SEP || L_REC.AR69 || L_SEP || L_REC.AR70 || L_SEP ||
      L_REC.AR71 || L_SEP || L_REC.AR72 || L_SEP || L_REC.AR73 || L_SEP ||
      L_REC.AR74 || L_SEP || L_REC.AR75 || L_SEP || L_REC.AR76 || L_SEP ||
      L_REC.AR77 || L_SEP || L_REC.AR78 || L_SEP || L_REC.AR79 || L_SEP ||
      L_REC.AR80 || L_SEP || L_REC.AR81 || L_SEP || L_REC.AR82 || L_SEP ||
      L_REC.AR83 || L_SEP || L_REC.AR84 || L_SEP || L_REC.AR85 || L_SEP ||
      L_REC.AR86 || L_SEP || L_REC.AR87 || L_SEP || L_REC.AR88 || L_SEP ||
      L_REC.AR89 || L_SEP || L_REC.AR90 || L_SEP || L_REC.AR91 || L_SEP ||
      L_REC.AR92 || L_SEP || L_REC.AR93 || L_SEP || L_REC.AR94 || L_SEP ||
      L_REC.AR95 || L_SEP || L_REC.AR96 || L_SEP || L_REC.AR97 || L_SEP ||
      L_REC.AR98 || L_SEP || L_REC.AR99 || L_SEP || L_REC.AR100 || L_SEP ||
      L_REC.AR101 || L_SEP || L_REC.AR102 || L_SEP || L_REC.AR103 || L_SEP ||
      L_REC.AR104 || L_SEP || L_REC.AR105 || L_SEP || L_REC.AR106 || L_SEP ||
      L_REC.AR107 || L_SEP || L_REC.AR108 || L_SEP || L_REC.AR109 || L_SEP ||
      L_REC.AR110 || L_SEP || L_REC.AR111 || L_SEP || L_REC.AR112 || L_SEP ||
      L_REC.AR113 || L_SEP || L_REC.AR114 || L_SEP || L_REC.AR115 || L_SEP ||
      L_REC.AR116 || L_SEP || L_REC.AR117 || L_SEP || L_REC.AR118 || L_SEP ||
      L_REC.AR119 || L_SEP || L_REC.AR120 || L_SEP || L_REC.AR121 || L_SEP ||
      L_REC.AR122 || L_SEP || L_REC.AR123 || L_SEP || L_REC.AR124 || L_SEP ||
      L_REC.AR125 || L_SEP || L_REC.AR126 || L_SEP || L_REC.AR127 || L_SEP ||
      L_REC.AR128;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   UNAPIRA.L_EXCEPTION_STEP :='utsdicau' ||'sd='||A_SD;
   FOR L_REC IN L_UTSDICAU_CURSOR(A_SD) LOOP
      UNAPIRA3.L_PUTTEXT := 'utsdicau' || L_SEP ||
      L_REC.SD || L_SEP || L_REC.IC || L_SEP || L_REC.ICNODE || L_SEP ||
      L_REC.AU || L_SEP || L_REC.AU_VERSION || L_SEP || L_REC.AUSEQ || L_SEP ||
      L_REC.VALUE;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   UNAPIRA.L_EXCEPTION_STEP :='utsdichs' ||'sd='||A_SD;
   FOR L_REC IN L_UTSDICHS_CURSOR(A_SD) LOOP
      UNAPIRA3.L_PUTTEXT := 'utsdichs' || L_SEP ||
      L_REC.SD || L_SEP || L_REC.IC || L_SEP || L_REC.ICNODE || L_SEP ||
      L_REC.WHO || L_SEP || L_REC.WHO_DESCRIPTION || L_SEP ||
      L_REC.WHAT || L_SEP || L_REC.WHAT_DESCRIPTION || L_SEP ||
      TO_CHAR(L_REC.LOGDATE,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      TO_CHAR(L_REC.LOGDATE_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      L_REC.WHY || L_SEP || L_REC.TR_SEQ || L_SEP || L_REC.EV_SEQ;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   UNAPIRA.L_EXCEPTION_STEP :='utsdichsdetails' ||'sd='||A_SD;
   FOR L_REC IN L_UTSDICHSDETAILS_CURSOR(A_SD) LOOP
      UNAPIRA3.L_PUTTEXT := 'utsdichsdetails' || L_SEP ||
      L_REC.SD || L_SEP || L_REC.IC || L_SEP || L_REC.ICNODE || L_SEP ||
      L_REC.TR_SEQ || L_SEP || L_REC.EV_SEQ || L_SEP || L_REC.SEQ || L_SEP ||
      L_REC.DETAILS;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   UNAPIRA.L_EXCEPTION_STEP :='utsdii' ||'sd='||A_SD;
   FOR L_REC IN L_UTSDII_CURSOR(A_SD) LOOP
      UNAPIRA3.L_PUTTEXT := 'utsdii' || L_SEP ||
      L_REC.SD || L_SEP || L_REC.IC || L_SEP || L_REC.ICNODE || L_SEP ||
      L_REC.II || L_SEP || L_REC.IINODE || L_SEP || L_REC.IE_VERSION || L_SEP ||
      L_REC.IIVALUE || L_SEP || L_REC.POS_X || L_SEP || L_REC.POS_Y || L_SEP ||
      L_REC.IS_PROTECTED || L_SEP || L_REC.MANDATORY || L_SEP ||
      L_REC.HIDDEN || L_SEP || L_REC.DSP_TITLE || L_SEP ||
      L_REC.DSP_LEN || L_SEP || L_REC.DSP_TP || L_SEP ||
      L_REC.DSP_ROWS || L_SEP || L_REC.II_CLASS || L_SEP ||
      L_REC.LOG_HS || L_SEP || L_REC.LOG_HS_DETAILS || L_SEP ||
      L_REC.ALLOW_MODIFY || L_SEP || L_REC.ACTIVE || L_SEP || L_REC.LC || L_SEP ||
      L_REC.LC_VERSION || L_SEP || L_REC.SS || L_SEP || L_REC.AR1 || L_SEP ||
      L_REC.AR2 || L_SEP || L_REC.AR3 || L_SEP || L_REC.AR4 || L_SEP ||
      L_REC.AR5 || L_SEP || L_REC.AR6 || L_SEP || L_REC.AR7 || L_SEP ||
      L_REC.AR8 || L_SEP || L_REC.AR9 || L_SEP || L_REC.AR10 || L_SEP ||
      L_REC.AR11 || L_SEP || L_REC.AR12 || L_SEP || L_REC.AR13 || L_SEP ||
      L_REC.AR14 || L_SEP || L_REC.AR15 || L_SEP || L_REC.AR16 || L_SEP ||
      L_REC.AR17 || L_SEP || L_REC.AR18 || L_SEP || L_REC.AR19 || L_SEP ||
      L_REC.AR20 || L_SEP || L_REC.AR21 || L_SEP || L_REC.AR22 || L_SEP ||
      L_REC.AR23 || L_SEP || L_REC.AR24 || L_SEP || L_REC.AR25 || L_SEP ||
      L_REC.AR26 || L_SEP || L_REC.AR27 || L_SEP || L_REC.AR28 || L_SEP ||
      L_REC.AR29 || L_SEP || L_REC.AR30 || L_SEP || L_REC.AR31 || L_SEP ||
      L_REC.AR32 || L_SEP || L_REC.AR33 || L_SEP || L_REC.AR34 || L_SEP ||
      L_REC.AR35 || L_SEP || L_REC.AR36 || L_SEP || L_REC.AR37 || L_SEP ||
      L_REC.AR38 || L_SEP || L_REC.AR39 || L_SEP || L_REC.AR40 || L_SEP ||
      L_REC.AR41 || L_SEP || L_REC.AR42 || L_SEP || L_REC.AR43 || L_SEP ||
      L_REC.AR44 || L_SEP || L_REC.AR45 || L_SEP || L_REC.AR46 || L_SEP ||
      L_REC.AR47 || L_SEP || L_REC.AR48 || L_SEP || L_REC.AR49 || L_SEP ||
      L_REC.AR50 || L_SEP || L_REC.AR51 || L_SEP || L_REC.AR52 || L_SEP ||
      L_REC.AR53 || L_SEP || L_REC.AR54 || L_SEP || L_REC.AR55 || L_SEP ||
      L_REC.AR56 || L_SEP || L_REC.AR57 || L_SEP || L_REC.AR58 || L_SEP ||
      L_REC.AR59 || L_SEP || L_REC.AR60 || L_SEP || L_REC.AR61 || L_SEP ||
      L_REC.AR62 || L_SEP || L_REC.AR63 || L_SEP || L_REC.AR64 || L_SEP ||
      L_REC.AR65 || L_SEP || L_REC.AR66 || L_SEP || L_REC.AR67 || L_SEP ||
      L_REC.AR68 || L_SEP || L_REC.AR69 || L_SEP || L_REC.AR70 || L_SEP ||
      L_REC.AR71 || L_SEP || L_REC.AR72 || L_SEP || L_REC.AR73 || L_SEP ||
      L_REC.AR74 || L_SEP || L_REC.AR75 || L_SEP || L_REC.AR76 || L_SEP ||
      L_REC.AR77 || L_SEP || L_REC.AR78 || L_SEP || L_REC.AR79 || L_SEP ||
      L_REC.AR80 || L_SEP || L_REC.AR81 || L_SEP || L_REC.AR82 || L_SEP ||
      L_REC.AR83 || L_SEP || L_REC.AR84 || L_SEP || L_REC.AR85 || L_SEP ||
      L_REC.AR86 || L_SEP || L_REC.AR87 || L_SEP || L_REC.AR88 || L_SEP ||
      L_REC.AR89 || L_SEP || L_REC.AR90 || L_SEP || L_REC.AR91 || L_SEP ||
      L_REC.AR92 || L_SEP || L_REC.AR93 || L_SEP || L_REC.AR94 || L_SEP ||
      L_REC.AR95 || L_SEP || L_REC.AR96 || L_SEP || L_REC.AR97 || L_SEP ||
      L_REC.AR98 || L_SEP || L_REC.AR99 || L_SEP || L_REC.AR100 || L_SEP ||
      L_REC.AR101 || L_SEP || L_REC.AR102 || L_SEP || L_REC.AR103 || L_SEP ||
      L_REC.AR104 || L_SEP || L_REC.AR105 || L_SEP || L_REC.AR106 || L_SEP ||
      L_REC.AR107 || L_SEP || L_REC.AR108 || L_SEP || L_REC.AR109 || L_SEP ||
      L_REC.AR110 || L_SEP || L_REC.AR111 || L_SEP || L_REC.AR112 || L_SEP ||
      L_REC.AR113 || L_SEP || L_REC.AR114 || L_SEP || L_REC.AR115 || L_SEP ||
      L_REC.AR116 || L_SEP || L_REC.AR117 || L_SEP || L_REC.AR118 || L_SEP ||
      L_REC.AR119 || L_SEP || L_REC.AR120 || L_SEP || L_REC.AR121 || L_SEP ||
      L_REC.AR122 || L_SEP || L_REC.AR123 || L_SEP || L_REC.AR124 || L_SEP ||
      L_REC.AR125 || L_SEP || L_REC.AR126 || L_SEP || L_REC.AR127 || L_SEP ||
      L_REC.AR128;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   UNAPIRA.L_EXCEPTION_STEP :='utsdcs' ||'sd='||A_SD;
   FOR L_REC IN L_UTSDCS_CURSOR(A_SD) LOOP
      UNAPIRA3.L_PUTTEXT := 'utsdcs' || L_SEP ||
      L_REC.SD || L_SEP || L_REC.CSNODE || L_SEP || L_REC.CS || L_SEP ||
      L_REC.DESCRIPTION || L_SEP ||
      TO_CHAR(L_REC.T0_DATE,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      TO_CHAR(L_REC.T0_DATE_TZ,UNAPIRA.P_TSTZ_FORMAT);
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   UNAPIRA.L_EXCEPTION_STEP :='utsdcscn' ||'sd='||A_SD;
   FOR L_REC IN L_UTSDCSCN_CURSOR(A_SD) LOOP
      UNAPIRA3.L_PUTTEXT := 'utsdcscn' || L_SEP ||
      L_REC.SD || L_SEP || L_REC.CSNODE || L_SEP || L_REC.CS || L_SEP ||
      L_REC.CN || L_SEP || L_REC.CNSEQ || L_SEP || L_REC.VALUE;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   UNAPIRA.L_EXCEPTION_STEP :='utsdtp' ||'sd='||A_SD;
   FOR L_REC IN L_UTSDTP_CURSOR(A_SD) LOOP
      UNAPIRA3.L_PUTTEXT := 'utsdtp' || L_SEP ||
      L_REC.SD || L_SEP || L_REC.TPNODE || L_SEP || L_REC.TP || L_SEP ||
      L_REC.TP_UNIT || L_SEP || L_REC.ALLOW_UPFRONT || L_SEP ||
      L_REC.ALLOW_UPFRONT_UNIT || L_SEP || L_REC.ALLOW_OVERDUE || L_SEP ||
      L_REC.ALLOW_OVERDUE_UNIT;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   UNAPIRA.L_EXCEPTION_STEP :='utsdcellsc' ||'sd='||A_SD;
   FOR L_REC IN L_UTSDCELLSC_CURSOR(A_SD) LOOP
      UNAPIRA3.L_PUTTEXT := 'utsdcellsc' || L_SEP ||
      L_REC.SD || L_SEP || L_REC.CSNODE || L_SEP || L_REC.TPNODE || L_SEP ||
      L_REC.SEQ || L_SEP || L_REC.SC || L_SEP || L_REC.LO || L_SEP ||
      L_REC.LO_DESCRIPTION || L_SEP ||
      TO_CHAR(L_REC.LO_START_DATE,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      TO_CHAR(L_REC.LO_START_DATE_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      TO_CHAR(L_REC.LO_END_DATE,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      TO_CHAR(L_REC.LO_END_DATE_TZ,UNAPIRA.P_TSTZ_FORMAT);
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   UNAPIRA.L_EXCEPTION_STEP :='utsdsc' ||'sd='||A_SD;
   FOR L_REC IN L_UTSDSC_CURSOR(A_SD) LOOP
      UNAPIRA3.L_PUTTEXT := 'utsdsc' || L_SEP ||
      L_REC.SD || L_SEP || L_REC.SC || L_SEP || L_REC.SEQ || L_SEP ||
      TO_CHAR(L_REC.ASSIGN_DATE,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      TO_CHAR(L_REC.ASSIGN_DATE_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      L_REC.ASSIGNED_BY;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   
   
   UNAPIRA.L_EXCEPTION_STEP :='ArchiveSdGkToFile#sd='||A_SD;
   L_RET_CODE := UNAPIRA3.ARCHIVESDGKTOFILE(A_SD);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      L_SQLERRM := 'ArchiveSdGkToFile return='||L_RET_CODE||'for sd '||A_SD;
      RAISE STPERROR;
   END IF;

   
   
   UNAPIRA.L_EXCEPTION_STEP :='ArchiveSdCustomToFile#sd='||A_SD;
   L_RET_CODE := UNAPIRA3.ARCHIVESDCUSTOMTOFILE(A_SD);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      L_SQLERRM := 'ArchiveSdCustomToFile return='||L_RET_CODE||'for sd '||A_SD;
      RAISE STPERROR;
   END IF;

   UNAPIRA3.U4DATAPUTLINE( ' ');

   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN UTL_FILE.INVALID_PATH THEN
   L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Invalid path';
   UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveSdToFile', L_SQLERRM, 'UTL_FILE.INVALID_PATH',UNAPIRA.P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_NOOBJECT);

WHEN UTL_FILE.INVALID_MODE THEN
   L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Invalid mode';
   UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveSdToFile', L_SQLERRM, 'UTL_FILE.INVALID_MODE',UNAPIRA.P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_GENFAIL);

WHEN UTL_FILE.INVALID_FILEHANDLE THEN
   L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Invalid filehandle';
   UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveSdToFile', L_SQLERRM, 'UTL_FILE.INVALID_FILEHANDLE',UNAPIRA.P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_GENFAIL);

WHEN UTL_FILE.INVALID_OPERATION THEN
   
   L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Invalid operation';
   UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveSdToFile', L_SQLERRM, 'UTL_FILE.INVALID_OPERATION',UNAPIRA.P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_NOOBJECT);

WHEN UTL_FILE.READ_ERROR THEN
   L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Read error';
   UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveSdToFile', L_SQLERRM, 'UTL_FILE.READ_ERROR',UNAPIRA.P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_GENFAIL);

WHEN UTL_FILE.WRITE_ERROR THEN
   L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Write error';
   UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveSdToFile', L_SQLERRM, 'UTL_FILE.WRITE_ERROR',UNAPIRA.P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_GENFAIL);

WHEN UTL_FILE.INTERNAL_ERROR THEN
   L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Internal error';
   UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveSdToFile', L_SQLERRM, 'UTL_FILE.INTERNAL_ERROR',UNAPIRA.P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_GENFAIL);

WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      L_SQLERRM := SQLERRM;
      UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveSdToFile', L_SQLERRM, 'UTL_FILE.INTERNAL_ERROR',UNAPIRA.P_CLOSE_CURSOR);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveSdToFile', L_SQLERRM, 'UTL_FILE.INTERNAL_ERROR',UNAPIRA.P_CLOSE_CURSOR);
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END ARCHIVESDTOFILE;

BEGIN
   L_SEP:=UNAPIRA.P_INTERNAL_SEP;
END UNAPIRASD;
PACKAGE BODY unapicf AS

L_SQLERRM         VARCHAR2(255);
L_SQL_STRING      VARCHAR2(2000);
L_WHERE_CLAUSE    VARCHAR2(1000);
L_EVENT_TP        UTEV.EV_TP%TYPE;
L_RET_CODE        NUMBER;
L_RESULT          NUMBER;
L_FETCHED_ROWS    NUMBER;
L_EV_SEQ_NR       NUMBER;


P_CF_CURSOR      INTEGER;

STPERROR       EXCEPTION;

FUNCTION GETVERSION
   RETURN VARCHAR2
IS
BEGIN
   RETURN('06.07.00.00_00.13');
EXCEPTION
   WHEN OTHERS THEN
      RETURN (NULL);
END GETVERSION;

FUNCTION GETCUSTOMFUNCTIONLIST
(A_CF            OUT      UNAPIGEN.VC20_TABLE_TYPE, 
 A_DESCRIPTION   OUT      UNAPIGEN.VC40_TABLE_TYPE, 
 A_CF_TYPE       OUT      UNAPIGEN.VC20_TABLE_TYPE, 
 A_NR_OF_ROWS    IN OUT   NUMBER,                   
 A_WHERE_CLAUSE  IN       VARCHAR2,                 
 A_NEXT_ROWS     IN       NUMBER)                   
RETURN NUMBER IS

L_CF           VARCHAR2(20);
L_DESCRIPTION  VARCHAR2(40);
L_CF_TYPE      VARCHAR2(20);

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_CF_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_CF_CURSOR);
         P_CF_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_CF_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      IF P_CF_CURSOR IS NULL THEN
         P_CF_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;

      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
         L_WHERE_CLAUSE := 'ORDER BY cf';
      ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
         L_WHERE_CLAUSE := 'WHERE cf_type = ''' || A_WHERE_CLAUSE ||
                           ''' ORDER BY cf';
      ELSE
         L_WHERE_CLAUSE := A_WHERE_CLAUSE;
      END IF;

      L_SQL_STRING := 'SELECT cf, description, cf_type FROM dd' ||
                      UNAPIGEN.P_DD || '.uvcf ' || L_WHERE_CLAUSE;

      DBMS_SQL.PARSE(P_CF_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

      DBMS_SQL.DEFINE_COLUMN(P_CF_CURSOR, 1, L_CF, 20);
      DBMS_SQL.DEFINE_COLUMN(P_CF_CURSOR, 2, L_DESCRIPTION, 40);
      DBMS_SQL.DEFINE_COLUMN(P_CF_CURSOR, 3, L_CF_TYPE, 20);
      L_RESULT := DBMS_SQL.EXECUTE(P_CF_CURSOR);
   END IF;

   L_RESULT := DBMS_SQL.FETCH_ROWS(P_CF_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_CF_CURSOR, 1, L_CF);
      DBMS_SQL.COLUMN_VALUE(P_CF_CURSOR, 2, L_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE(P_CF_CURSOR, 3, L_CF_TYPE);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_CF(L_FETCHED_ROWS) := L_CF;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;
      A_CF_TYPE(L_FETCHED_ROWS) := L_CF_TYPE;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_CF_CURSOR);
      END IF;
   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_CF_CURSOR);
       P_CF_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_CF_CURSOR);
      P_CF_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetCustomFunctionList', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN(P_CF_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(P_CF_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETCUSTOMFUNCTIONLIST;




BEGIN
   P_CF_CURSOR := NULL;
END UNAPICF;
PACKAGE BODY unapimep2 AS

TYPE BOOLEAN_TABLE_TYPE IS TABLE OF BOOLEAN INDEX BY BINARY_INTEGER;
L_SQLERRM         VARCHAR2(255);


L_SQL_STRING      VARCHAR2(10000);
L_WHERE_CLAUSE    VARCHAR2(10000);
L_EVENT_TP        UTEV.EV_TP%TYPE;
L_RET_CODE        NUMBER;
L_RESULT          NUMBER;
L_FETCHED_ROWS    NUMBER;
L_EV_SEQ_NR       NUMBER;
L_EV_DETAILS      VARCHAR2(255);
STPERROR          EXCEPTION;


P_GETSCMECOMMENT_CURSOR       INTEGER;

FUNCTION GETVERSION
   RETURN VARCHAR2
IS
BEGIN
   RETURN('06.07.00.00_00.13');
EXCEPTION
   WHEN OTHERS THEN
      RETURN (NULL);
END GETVERSION;

FUNCTION GETSCMEACCESS                               
(A_SC             OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PG             OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PGNODE         OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_PA             OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PANODE         OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_ME             OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_MENODE         OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_DD             OUT     UNAPIGEN.VC3_TABLE_TYPE,   
 A_DATA_DOMAIN    OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_ACCESS_RIGHTS  OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NR_OF_ROWS     IN OUT  NUMBER,                    
 A_WHERE_CLAUSE   IN      VARCHAR2)                  
RETURN NUMBER  IS

L_SC             VARCHAR2(20);
L_PG             VARCHAR2(20);
L_PGNODE         NUMBER(9);
L_PA             VARCHAR2(20);
L_PANODE         NUMBER(9);
L_ME             VARCHAR2(20);
L_MENODE         NUMBER(9);
L_DD_DESCRIPTION VARCHAR2(40);
L_AR             UNAPIGEN.CHAR1_TABLE_TYPE; 
L_DD             VARCHAR2(3);
L_DESCRIPTION    UNAPIGEN.VC40_TABLE_TYPE;
L_ROW            INTEGER;
L_DD_CURSOR   UNAPIGEN.CURSOR_REF_TYPE;
L_AR_CURSOR   UNAPIGEN.CURSOR_REF_TYPE;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      RETURN(UNAPIGEN.DBERR_WHERECLAUSE);
   ELSIF
      UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := 'WHERE sc = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') ||''''; 
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   
   
   
   L_SQL_STRING:= 'SELECT dd, description FROM dd'||UNAPIGEN.P_DD||'.uvdd ORDER BY dd';
   OPEN L_DD_CURSOR FOR L_SQL_STRING;
   FOR I IN 1..UNAPIGEN.P_DATADOMAINS LOOP
      FETCH L_DD_CURSOR INTO L_DD, L_DD_DESCRIPTION;
      L_DESCRIPTION(L_DD) := L_DD_DESCRIPTION;
   END LOOP;
   CLOSE L_DD_CURSOR;

   L_SQL_STRING:= 
      'SELECT ar1, ar2, ar3, ar4, ar5, ar6, ar7, ar8, ar9, ar10, ar11, ar12, ar13, ar14, ar15, ar16, ' ||
      'ar17, ar18, ar19, ar20, ar21, ar22, ar23, ar24, ar25, ar26, ar27, ar28, ar29, ar30, ar31, ' ||
      'ar32, ar33, ar34, ar35, ar36, ar37, ar38, ar39, ar40, ar41, ar42, ar43, ar44, ar45, ar46, ' ||
      'ar47, ar48, ar49, ar50, ar51, ar52, ar53, ar54, ar55, ar56, ar57, ar58, ar59, ar60, ar61, ' ||
      'ar62, ar63, ar64, ar65, ar66, ar67, ar68, ar69, ar70, ar71, ar72, ar73, ar74, ar75, ar76, ' ||
      'ar77, ar78, ar79, ar80, ar81, ar82, ar83, ar84, ar85, ar86, ar87, ar88, ar89, ar90, ar91, ' ||
      'ar92, ar93, ar94, ar95, ar96, ar97, ar98, ar99, ar100, ar101, ar102, ar103, ar104, ar105, ' ||
      'ar106, ar107, ar108, ar109, ar110, ar111, ar112, ar113, ar114, ar115, ar116, ar117, ar118, ' ||
      'ar119, ar120, ar121, ar122, ar123, ar124, ar125, ar126, ar127, ar128, sc, pg, pgnode, ' ||
      'pa, panode, me, menode FROM udscme ' || 
       L_WHERE_CLAUSE;
   L_FETCHED_ROWS := 0;
   OPEN L_AR_CURSOR FOR L_SQL_STRING;
   LOOP
      FETCH L_AR_CURSOR INTO L_AR(1),L_AR(2),L_AR(3),L_AR(4),L_AR(5),L_AR(6),L_AR(7),L_AR(8),L_AR(9),
      L_AR(10),L_AR(11),L_AR(12),L_AR(13),L_AR(14),L_AR(15),L_AR(16),L_AR(17),L_AR(18),L_AR(19),
      L_AR(20),L_AR(21),L_AR(22),L_AR(23),L_AR(24),L_AR(25),L_AR(26),L_AR(27),L_AR(28),L_AR(29),
      L_AR(30),L_AR(31),L_AR(32),L_AR(33),L_AR(34),L_AR(35),L_AR(36),L_AR(37),L_AR(38),L_AR(39),
      L_AR(40),L_AR(41),L_AR(42),L_AR(43),L_AR(44),L_AR(45),L_AR(46),L_AR(47),L_AR(48),L_AR(49),
      L_AR(50),L_AR(51),L_AR(52),L_AR(53),L_AR(54),L_AR(55),L_AR(56),L_AR(57),L_AR(58),L_AR(59),
      L_AR(60),L_AR(61),L_AR(62),L_AR(63),L_AR(64),L_AR(65),L_AR(66),L_AR(67),L_AR(68),L_AR(69),
      L_AR(70),L_AR(71),L_AR(72),L_AR(73),L_AR(74),L_AR(75),L_AR(76),L_AR(77),L_AR(78),L_AR(79),
      L_AR(80),L_AR(81),L_AR(82),L_AR(83),L_AR(84),L_AR(85),L_AR(86),L_AR(87),L_AR(88),L_AR(89),
      L_AR(90),L_AR(91),L_AR(92),L_AR(93),L_AR(94),L_AR(95),L_AR(96),L_AR(97),L_AR(98),L_AR(99),
      L_AR(100),L_AR(101),L_AR(102),L_AR(103),L_AR(104),L_AR(105),L_AR(106),L_AR(107),L_AR(108),
      L_AR(109),L_AR(110),L_AR(111),L_AR(112),L_AR(113),L_AR(114),L_AR(115),L_AR(116),L_AR(117),
      L_AR(118),L_AR(119),L_AR(120),L_AR(121),L_AR(122),L_AR(123),L_AR(124),L_AR(125),L_AR(126),
      L_AR(127),L_AR(128), L_SC, L_PG, L_PGNODE, L_PA, L_PANODE, L_ME, L_MENODE;
      EXIT WHEN L_AR_CURSOR%NOTFOUND;
      
      FOR L_ROW IN 1..UNAPIGEN.P_DATADOMAINS LOOP
          L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
          A_SC(L_FETCHED_ROWS) := L_SC;
          A_PG(L_FETCHED_ROWS) := L_PG;
          A_PGNODE(L_FETCHED_ROWS) := L_PGNODE;
          A_PA(L_FETCHED_ROWS) := L_PA;
          A_PANODE(L_FETCHED_ROWS) := L_PANODE;
          A_ME(L_FETCHED_ROWS) := L_ME;
          A_MENODE(L_FETCHED_ROWS) := L_MENODE;
          A_DD(L_FETCHED_ROWS) := TO_CHAR(L_ROW);
          A_DATA_DOMAIN(L_FETCHED_ROWS) := L_DESCRIPTION(L_ROW);
          A_ACCESS_RIGHTS(L_FETCHED_ROWS) := L_AR(L_ROW);
          IF L_FETCHED_ROWS >= A_NR_OF_ROWS THEN
             EXIT;
          END IF;
      END LOOP;
      IF L_FETCHED_ROWS >= A_NR_OF_ROWS THEN
         EXIT;
      END IF;
   END LOOP;
   CLOSE L_AR_CURSOR;

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
WHEN NO_DATA_FOUND THEN
   IF L_DD_CURSOR%ISOPEN THEN
      CLOSE L_DD_CURSOR;
   END IF;
   IF L_AR_CURSOR%ISOPEN THEN
      CLOSE L_AR_CURSOR;
   END IF;
   RETURN(UNAPIGEN.DBERR_SYSDEFAULTS);
WHEN OTHERS THEN
   L_SQLERRM := SQLERRM;
   IF L_DD_CURSOR%ISOPEN THEN
      CLOSE L_DD_CURSOR;
   END IF;
   IF L_AR_CURSOR%ISOPEN THEN
      CLOSE L_AR_CURSOR;
   END IF;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
           'GetScMeAccess', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETSCMEACCESS;

FUNCTION SAVESCMEACCESS                              
(A_SC             IN      VARCHAR2,                  
 A_PG             IN      VARCHAR2,                  
 A_PGNODE         IN      NUMBER,                    
 A_PA             IN      VARCHAR2,                  
 A_PANODE         IN      NUMBER,                    
 A_ME             IN      VARCHAR2,                  
 A_MENODE         IN      NUMBER,                    
 A_DD             IN      UNAPIGEN.VC3_TABLE_TYPE,   
 A_ACCESS_RIGHTS  IN      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NR_OF_ROWS     IN      NUMBER,                    
 A_MODIFY_REASON  IN      VARCHAR2)                  
RETURN NUMBER IS

L_ALLOW_MODIFY           CHAR(1);
L_LOG_HS                 CHAR(1);
L_LOG_HS_DETAILS         CHAR(1);
L_ACTIVE                 CHAR(1);
L_LC                     VARCHAR2(2);
L_LC_VERSION             VARCHAR2(20);
L_SS                     VARCHAR2(2);
L_REANALYSIS             NUMBER(3);
L_AR_CURSOR              INTEGER;
L_WRITE_FOUND            BOOLEAN;
L_HS_DETAILS_SEQ_NR      INTEGER;
L_MT_VERSION             VARCHAR2(20);

CURSOR L_SCMEOLD_CURSOR (A_SC IN VARCHAR2, 
                         A_PG IN VARCHAR2, A_PGNODE IN NUMBER,
                         A_PA IN VARCHAR2, A_PANODE IN NUMBER,
                         A_ME IN VARCHAR2, A_MENODE IN NUMBER)IS
   SELECT A.*
   FROM UDSCME A
   WHERE A.SC = A_SC
     AND A.PG = A_PG
     AND A.PGNODE = A_PGNODE
     AND A.PA = A_PA
     AND A.PANODE = A_PANODE
     AND A.ME = A_ME
     AND A.MENODE = A_MENODE;
L_SCMEOLD_REC UDSCME%ROWTYPE;
L_SCMENEW_REC UDSCME%ROWTYPE;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_NR_OF_ROWS, -1) < 0 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NROFROWS;
      RAISE STPERROR;
   END IF;

   
   
   
   IF NVL(A_SC, ' ') = ' ' OR
      NVL(A_PG, ' ') = ' ' OR
      NVL(A_PGNODE, 0) = 0 OR
      NVL(A_PA, ' ') = ' ' OR
      NVL(A_PANODE, 0) = 0 OR
      NVL(A_ME, ' ') = ' ' OR
      NVL(A_MENODE, 0) = 0 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;
   L_RET_CODE := UNAPIAUT.GETSCMEAUTHORISATION(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, A_ME, A_MENODE, 
                                               NULL, L_MT_VERSION, L_LC, L_LC_VERSION, L_SS,
                                               L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS, L_LOG_HS_DETAILS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTSCME
   SET ALLOW_MODIFY = '#'
   WHERE SC = A_SC
      AND PG = A_PG
      AND PGNODE = A_PGNODE
      AND PA = A_PA
      AND PANODE = A_PANODE
      AND ME = A_ME
      AND MENODE = A_MENODE;
   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR ;
   END IF;

   
   
   
   
   L_SQL_STRING := '';
   L_WRITE_FOUND := FALSE;
   FOR L_CTR IN 1..A_NR_OF_ROWS LOOP
      IF NVL(A_ACCESS_RIGHTS(L_CTR), 'N') NOT IN ('R','W','N') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_AR;
         RAISE STPERROR;
      END IF;

      IF NVL(A_ACCESS_RIGHTS(L_CTR), 'N') = 'W' THEN
         L_WRITE_FOUND := TRUE;
      END IF;

      IF (NVL(TO_NUMBER(A_DD(L_CTR)), -1) < 0) OR (NVL(TO_NUMBER(A_DD(L_CTR)), -1) > UNAPIGEN.P_DATADOMAINS) THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_DD;
         RAISE STPERROR;
      END IF;

      L_SQL_STRING := L_SQL_STRING || ' ar' || A_DD(L_CTR) ||
                      '= ''' || NVL(A_ACCESS_RIGHTS(L_CTR), 'N') || '''';
      IF L_CTR <> A_NR_OF_ROWS THEN
        L_SQL_STRING :=  L_SQL_STRING || ',';
      END IF;
   END LOOP;

   
   IF NOT L_WRITE_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOWRITEACCESS;
      RAISE STPERROR;
   END IF;

   IF NVL(L_SQL_STRING, ' ')  = ' ' THEN
      
      
      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NROFROWS;
      RAISE STPERROR;
   ELSE
      
      
      
      OPEN L_SCMEOLD_CURSOR(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, A_ME, A_MENODE);
      FETCH L_SCMEOLD_CURSOR
      INTO L_SCMEOLD_REC;
      CLOSE L_SCMEOLD_CURSOR;
      L_SCMENEW_REC := L_SCMEOLD_REC;
            
      
      
      
      L_SQL_STRING := 
         'UPDATE utscme SET '|| L_SQL_STRING ||
         ' WHERE sc = ''' || REPLACE(A_SC, '''', '''''') || ''' AND ' || 
         'pg = ''' || REPLACE(A_PG, '''', '''''') || ''' AND pgnode = ' || TO_CHAR(A_PGNODE) ||' AND ' || 
         'pa = ''' || REPLACE(A_PA, '''', '''''') || ''' AND panode = ' || TO_CHAR(A_PANODE) ||' AND ' || 
         'me = ''' || REPLACE(A_ME, '''', '''''') || ''' AND menode = ' || TO_CHAR(A_MENODE) ||' ' || 
         'RETURNING';
      FOR I IN 1..UNAPIGEN.P_DATADOMAINS LOOP
         L_SQL_STRING := L_SQL_STRING||' ar'||I||',';
      END LOOP;
      FOR I IN (UNAPIGEN.P_DATADOMAINS+1)..128 LOOP
         L_SQL_STRING := L_SQL_STRING||' ''N'',';
      END LOOP;
      L_SQL_STRING := SUBSTR(L_SQL_STRING, 1, LENGTH(L_SQL_STRING)-1);   
      L_SQL_STRING := L_SQL_STRING||
         ' INTO :ar1, :ar2, :ar3, :ar4, :ar5, :ar6, :ar7, :ar8, :ar9, :ar10, ' ||
         ':ar11, :ar12, :ar13, :ar14, :ar15, :ar16, :ar17, :ar18, :ar19, :ar20, :ar21, :ar22, ' ||
         ':ar23, :ar24, :ar25, :ar26, :ar27, :ar28, :ar29, :ar30, :ar31, :ar32, :ar33, :ar34, ' ||
         ':ar35, :ar36, :ar37, :ar38, :ar39, :ar40, :ar41, :ar42, :ar43, :ar44, :ar45, :ar46, ' ||
         ':ar47, :ar48, :ar49, :ar50, :ar51, :ar52, :ar53, :ar54, :ar55, :ar56, :ar57, :ar58, ' ||
         ':ar59, :ar60, :ar61, :ar62, :ar63, :ar64, :ar65, :ar66, :ar67, :ar68, :ar69, :ar70, ' ||
         ':ar71, :ar72, :ar73, :ar74, :ar75, :ar76, :ar77, :ar78, :ar79, :ar80, :ar81, :ar82, ' ||
         ':ar83, :ar84, :ar85, :ar86, :ar87, :ar88, :ar89, :ar90, :ar91, :ar92, :ar93, :ar94, ' ||
         ':ar95, :ar96, :ar97, :ar98, :ar99, :ar100, :ar101, :ar102, :ar103, :ar104, :ar105, ' ||
         ':ar106, :ar107, :ar108, :ar109, :ar110, :ar111, :ar112, :ar113, :ar114, :ar115, :ar116, ' ||
         ':ar117, :ar118, :ar119, :ar120, :ar121, :ar122, :ar123, :ar124, :ar125, :ar126, :ar127, ' ||
         ':ar128';

      
      
      
      L_AR_CURSOR := DBMS_SQL.OPEN_CURSOR;
      DBMS_SQL.PARSE(L_AR_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar1',   L_SCMENEW_REC.AR1,   1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar2',   L_SCMENEW_REC.AR2,   1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar3',   L_SCMENEW_REC.AR3,   1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar4',   L_SCMENEW_REC.AR4,   1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar5',   L_SCMENEW_REC.AR5,   1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar6',   L_SCMENEW_REC.AR6,   1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar7',   L_SCMENEW_REC.AR7,   1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar8',   L_SCMENEW_REC.AR8,   1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar9',   L_SCMENEW_REC.AR9,   1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar10',  L_SCMENEW_REC.AR10,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar11',  L_SCMENEW_REC.AR11,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar12',  L_SCMENEW_REC.AR12,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar13',  L_SCMENEW_REC.AR13,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar14',  L_SCMENEW_REC.AR14,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar15',  L_SCMENEW_REC.AR15,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar16',  L_SCMENEW_REC.AR16,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar17',  L_SCMENEW_REC.AR17,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar18',  L_SCMENEW_REC.AR18,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar19',  L_SCMENEW_REC.AR19,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar20',  L_SCMENEW_REC.AR20,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar21',  L_SCMENEW_REC.AR21,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar22',  L_SCMENEW_REC.AR22,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar23',  L_SCMENEW_REC.AR23,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar24',  L_SCMENEW_REC.AR24,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar25',  L_SCMENEW_REC.AR25,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar26',  L_SCMENEW_REC.AR26,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar27',  L_SCMENEW_REC.AR27,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar28',  L_SCMENEW_REC.AR28,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar29',  L_SCMENEW_REC.AR29,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar30',  L_SCMENEW_REC.AR30,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar31',  L_SCMENEW_REC.AR31,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar32',  L_SCMENEW_REC.AR32,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar33',  L_SCMENEW_REC.AR33,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar34',  L_SCMENEW_REC.AR34,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar35',  L_SCMENEW_REC.AR35,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar36',  L_SCMENEW_REC.AR36,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar37',  L_SCMENEW_REC.AR37,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar38',  L_SCMENEW_REC.AR38,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar39',  L_SCMENEW_REC.AR39,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar40',  L_SCMENEW_REC.AR40,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar41',  L_SCMENEW_REC.AR41,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar42',  L_SCMENEW_REC.AR42,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar43',  L_SCMENEW_REC.AR43,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar44',  L_SCMENEW_REC.AR44,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar45',  L_SCMENEW_REC.AR45,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar46',  L_SCMENEW_REC.AR46,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar47',  L_SCMENEW_REC.AR47,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar48',  L_SCMENEW_REC.AR48,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar49',  L_SCMENEW_REC.AR49,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar50',  L_SCMENEW_REC.AR50,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar51',  L_SCMENEW_REC.AR51,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar52',  L_SCMENEW_REC.AR52,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar53',  L_SCMENEW_REC.AR53,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar54',  L_SCMENEW_REC.AR54,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar55',  L_SCMENEW_REC.AR55,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar56',  L_SCMENEW_REC.AR56,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar57',  L_SCMENEW_REC.AR57,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar58',  L_SCMENEW_REC.AR58,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar59',  L_SCMENEW_REC.AR59,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar60',  L_SCMENEW_REC.AR60,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar61',  L_SCMENEW_REC.AR61,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar62',  L_SCMENEW_REC.AR62,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar63',  L_SCMENEW_REC.AR63,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar64',  L_SCMENEW_REC.AR64,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar65',  L_SCMENEW_REC.AR65,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar66',  L_SCMENEW_REC.AR66,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar67',  L_SCMENEW_REC.AR67,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar68',  L_SCMENEW_REC.AR68,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar69',  L_SCMENEW_REC.AR69,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar70',  L_SCMENEW_REC.AR70,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar71',  L_SCMENEW_REC.AR71,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar72',  L_SCMENEW_REC.AR72,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar73',  L_SCMENEW_REC.AR73,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar74',  L_SCMENEW_REC.AR74,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar75',  L_SCMENEW_REC.AR75,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar76',  L_SCMENEW_REC.AR76,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar77',  L_SCMENEW_REC.AR77,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar78',  L_SCMENEW_REC.AR78,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar79',  L_SCMENEW_REC.AR79,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar80',  L_SCMENEW_REC.AR80,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar81',  L_SCMENEW_REC.AR81,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar82',  L_SCMENEW_REC.AR82,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar83',  L_SCMENEW_REC.AR83,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar84',  L_SCMENEW_REC.AR84,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar85',  L_SCMENEW_REC.AR85,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar86',  L_SCMENEW_REC.AR86,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar87',  L_SCMENEW_REC.AR87,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar88',  L_SCMENEW_REC.AR88,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar89',  L_SCMENEW_REC.AR89,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar90',  L_SCMENEW_REC.AR90,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar91',  L_SCMENEW_REC.AR91,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar92',  L_SCMENEW_REC.AR92,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar93',  L_SCMENEW_REC.AR93,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar94',  L_SCMENEW_REC.AR94,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar95',  L_SCMENEW_REC.AR95,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar96',  L_SCMENEW_REC.AR96,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar97',  L_SCMENEW_REC.AR97,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar98',  L_SCMENEW_REC.AR98,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar99',  L_SCMENEW_REC.AR99,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar100', L_SCMENEW_REC.AR100, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar101', L_SCMENEW_REC.AR101, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar102', L_SCMENEW_REC.AR102, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar103', L_SCMENEW_REC.AR103, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar104', L_SCMENEW_REC.AR104, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar105', L_SCMENEW_REC.AR105, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar106', L_SCMENEW_REC.AR106, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar107', L_SCMENEW_REC.AR107, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar108', L_SCMENEW_REC.AR108, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar109', L_SCMENEW_REC.AR109, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar110', L_SCMENEW_REC.AR110, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar111', L_SCMENEW_REC.AR111, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar112', L_SCMENEW_REC.AR112, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar113', L_SCMENEW_REC.AR113, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar114', L_SCMENEW_REC.AR114, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar115', L_SCMENEW_REC.AR115, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar116', L_SCMENEW_REC.AR116, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar117', L_SCMENEW_REC.AR117, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar118', L_SCMENEW_REC.AR118, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar119', L_SCMENEW_REC.AR119, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar120', L_SCMENEW_REC.AR120, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar121', L_SCMENEW_REC.AR121, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar122', L_SCMENEW_REC.AR122, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar123', L_SCMENEW_REC.AR123, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar124', L_SCMENEW_REC.AR124, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar125', L_SCMENEW_REC.AR125, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar126', L_SCMENEW_REC.AR126, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar127', L_SCMENEW_REC.AR127, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar128', L_SCMENEW_REC.AR128, 1);
      
      L_RESULT := DBMS_SQL.EXECUTE(L_AR_CURSOR);
      
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar1',   L_SCMENEW_REC.AR1  );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar2',   L_SCMENEW_REC.AR2  );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar3',   L_SCMENEW_REC.AR3  );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar4',   L_SCMENEW_REC.AR4  );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar5',   L_SCMENEW_REC.AR5  );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar6',   L_SCMENEW_REC.AR6  );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar7',   L_SCMENEW_REC.AR7  );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar8',   L_SCMENEW_REC.AR8  );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar9',   L_SCMENEW_REC.AR9  );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar10',  L_SCMENEW_REC.AR10 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar11',  L_SCMENEW_REC.AR11 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar12',  L_SCMENEW_REC.AR12 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar13',  L_SCMENEW_REC.AR13 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar14',  L_SCMENEW_REC.AR14 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar15',  L_SCMENEW_REC.AR15 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar16',  L_SCMENEW_REC.AR16 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar17',  L_SCMENEW_REC.AR17 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar18',  L_SCMENEW_REC.AR18 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar19',  L_SCMENEW_REC.AR19 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar20',  L_SCMENEW_REC.AR20 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar21',  L_SCMENEW_REC.AR21 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar22',  L_SCMENEW_REC.AR22 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar23',  L_SCMENEW_REC.AR23 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar24',  L_SCMENEW_REC.AR24 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar25',  L_SCMENEW_REC.AR25 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar26',  L_SCMENEW_REC.AR26 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar27',  L_SCMENEW_REC.AR27 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar28',  L_SCMENEW_REC.AR28 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar29',  L_SCMENEW_REC.AR29 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar30',  L_SCMENEW_REC.AR30 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar31',  L_SCMENEW_REC.AR31 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar32',  L_SCMENEW_REC.AR32 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar33',  L_SCMENEW_REC.AR33 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar34',  L_SCMENEW_REC.AR34 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar35',  L_SCMENEW_REC.AR35 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar36',  L_SCMENEW_REC.AR36 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar37',  L_SCMENEW_REC.AR37 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar38',  L_SCMENEW_REC.AR38 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar39',  L_SCMENEW_REC.AR39 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar40',  L_SCMENEW_REC.AR40 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar41',  L_SCMENEW_REC.AR41 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar42',  L_SCMENEW_REC.AR42 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar43',  L_SCMENEW_REC.AR43 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar44',  L_SCMENEW_REC.AR44 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar45',  L_SCMENEW_REC.AR45 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar46',  L_SCMENEW_REC.AR46 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar47',  L_SCMENEW_REC.AR47 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar48',  L_SCMENEW_REC.AR48 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar49',  L_SCMENEW_REC.AR49 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar50',  L_SCMENEW_REC.AR50 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar51',  L_SCMENEW_REC.AR51 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar52',  L_SCMENEW_REC.AR52 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar53',  L_SCMENEW_REC.AR53 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar54',  L_SCMENEW_REC.AR54 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar55',  L_SCMENEW_REC.AR55 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar56',  L_SCMENEW_REC.AR56 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar57',  L_SCMENEW_REC.AR57 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar58',  L_SCMENEW_REC.AR58 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar59',  L_SCMENEW_REC.AR59 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar60',  L_SCMENEW_REC.AR60 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar61',  L_SCMENEW_REC.AR61 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar62',  L_SCMENEW_REC.AR62 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar63',  L_SCMENEW_REC.AR63 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar64',  L_SCMENEW_REC.AR64 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar65',  L_SCMENEW_REC.AR65 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar66',  L_SCMENEW_REC.AR66 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar67',  L_SCMENEW_REC.AR67 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar68',  L_SCMENEW_REC.AR68 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar69',  L_SCMENEW_REC.AR69 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar70',  L_SCMENEW_REC.AR70 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar71',  L_SCMENEW_REC.AR71 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar72',  L_SCMENEW_REC.AR72 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar73',  L_SCMENEW_REC.AR73 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar74',  L_SCMENEW_REC.AR74 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar75',  L_SCMENEW_REC.AR75 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar76',  L_SCMENEW_REC.AR76 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar77',  L_SCMENEW_REC.AR77 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar78',  L_SCMENEW_REC.AR78 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar79',  L_SCMENEW_REC.AR79 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar80',  L_SCMENEW_REC.AR80 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar81',  L_SCMENEW_REC.AR81 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar82',  L_SCMENEW_REC.AR82 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar83',  L_SCMENEW_REC.AR83 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar84',  L_SCMENEW_REC.AR84 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar85',  L_SCMENEW_REC.AR85 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar86',  L_SCMENEW_REC.AR86 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar87',  L_SCMENEW_REC.AR87 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar88',  L_SCMENEW_REC.AR88 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar89',  L_SCMENEW_REC.AR89 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar90',  L_SCMENEW_REC.AR90 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar91',  L_SCMENEW_REC.AR91 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar92',  L_SCMENEW_REC.AR92 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar93',  L_SCMENEW_REC.AR93 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar94',  L_SCMENEW_REC.AR94 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar95',  L_SCMENEW_REC.AR95 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar96',  L_SCMENEW_REC.AR96 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar97',  L_SCMENEW_REC.AR97 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar98',  L_SCMENEW_REC.AR98 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar99',  L_SCMENEW_REC.AR99 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar100', L_SCMENEW_REC.AR100);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar101', L_SCMENEW_REC.AR101);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar102', L_SCMENEW_REC.AR102);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar103', L_SCMENEW_REC.AR103);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar104', L_SCMENEW_REC.AR104);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar105', L_SCMENEW_REC.AR105);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar106', L_SCMENEW_REC.AR106);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar107', L_SCMENEW_REC.AR107);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar108', L_SCMENEW_REC.AR108);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar109', L_SCMENEW_REC.AR109);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar110', L_SCMENEW_REC.AR110);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar111', L_SCMENEW_REC.AR111);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar112', L_SCMENEW_REC.AR112);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar113', L_SCMENEW_REC.AR113);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar114', L_SCMENEW_REC.AR114);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar115', L_SCMENEW_REC.AR115);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar116', L_SCMENEW_REC.AR116);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar117', L_SCMENEW_REC.AR117);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar118', L_SCMENEW_REC.AR118);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar119', L_SCMENEW_REC.AR119);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar120', L_SCMENEW_REC.AR120);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar121', L_SCMENEW_REC.AR121);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar122', L_SCMENEW_REC.AR122);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar123', L_SCMENEW_REC.AR123);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar124', L_SCMENEW_REC.AR124);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar125', L_SCMENEW_REC.AR125);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar126', L_SCMENEW_REC.AR126);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar127', L_SCMENEW_REC.AR127);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar128', L_SCMENEW_REC.AR128);

      IF L_RESULT = 0 THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
         RAISE STPERROR;
      END IF;

      DBMS_SQL.CLOSE_CURSOR(L_AR_CURSOR);

      
      
      
      L_EV_SEQ_NR := -1;
      L_EVENT_TP := 'MeAccessRightsUpdated';
      L_EV_DETAILS := 'sc=' ||A_SC || 
                      '#pg=' || A_PG ||
                      '#pgnode=' || TO_CHAR(A_PGNODE) ||
                      '#pa=' ||A_PA ||
                      '#panode=' || TO_CHAR(A_PANODE)||
                      '#menode=' || TO_CHAR(A_MENODE) ||
                      '#mt_version=' || L_MT_VERSION;
      L_RESULT := UNAPIEV.INSERTEVENT('SaveScMeAccess', UNAPIGEN.P_EVMGR_NAME, 'me', A_ME,
                                      L_LC, L_LC_VERSION, L_SS, L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);
      IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
         UNAPIGEN.P_TXN_ERROR := L_RESULT;
         RAISE STPERROR;
      END IF;
                      
      IF L_LOG_HS = '1' THEN
         INSERT INTO UTSCMEHS(SC, PG, PGNODE, PA, PANODE, ME, MENODE, WHO, WHO_DESCRIPTION, 
                              WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, A_ME, A_MENODE, UNAPIGEN.P_USER, 
                UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                'access rights for method_sheet "'||A_ME||'" are updated', 
                CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;

      L_HS_DETAILS_SEQ_NR := 0;
      IF L_LOG_HS_DETAILS = '1' THEN
         L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
         INSERT INTO UTSCMEHSDETAILS(SC, PG, PGNODE, PA, PANODE, ME, MENODE, TR_SEQ, EV_SEQ, SEQ, DETAILS)
         VALUES(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, A_ME, A_MENODE, 
                UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR,
                'access rights for method_sheet "'||A_ME||'" are updated');

         UNAPIHSDETAILS.ADDSCMEHSDETAILS(L_SCMEOLD_REC, L_SCMENEW_REC,UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, 
                                         L_HS_DETAILS_SEQ_NR);
      END IF;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveScMeAccess', SQLERRM);
   END IF;
   IF DBMS_SQL.IS_OPEN(L_AR_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_AR_CURSOR);
   END IF;
   IF L_SCMEOLD_CURSOR%ISOPEN THEN
      CLOSE L_SCMEOLD_CURSOR;
   END IF;   
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveScMeAccess'));
END SAVESCMEACCESS;

FUNCTION INITANDSAVESCMEATTRIBUTES                     
(A_SC               IN      VARCHAR2,                  
 A_PG               IN      VARCHAR2,                  
 A_PGNODE           IN      NUMBER,                    
 A_PA               IN      VARCHAR2,                  
 A_PANODE           IN      NUMBER,                    
 A_ME               IN      VARCHAR2,                  
 A_MENODE           IN      NUMBER)                    
RETURN NUMBER IS

CURSOR L_PRVERSION_CURSOR(A_SC VARCHAR2, 
                          A_PG VARCHAR2, A_PGNODE NUMBER, 
                          A_PA VARCHAR2, A_PANODE NUMBER) IS
   SELECT PR_VERSION
   FROM UTSCPA
   WHERE SC = A_SC
   AND PG = A_PG
   AND PGNODE = A_PGNODE
   AND PA = A_PA
   AND PANODE = A_PANODE;
L_PR_VERSION       VARCHAR2(20);

CURSOR L_MTVERSION_CURSOR(A_SC VARCHAR2, 
                          A_PG VARCHAR2, A_PGNODE NUMBER, 
                          A_PA VARCHAR2, A_PANODE NUMBER,
                          A_ME VARCHAR2, A_MENODE NUMBER) IS
   SELECT MT_VERSION
   FROM UTSCME
   WHERE SC = A_SC
   AND PG = A_PG
   AND PGNODE = A_PGNODE
   AND PA = A_PA
   AND PANODE = A_PANODE
   AND ME = A_ME
   AND MENODE = A_MENODE;
L_MT_VERSION       VARCHAR2(20);

CURSOR L_PRMT_CURSOR(C_PR VARCHAR2, C_PR_VERSION VARCHAR2, C_MT VARCHAR2, C_MT_VERSION VARCHAR2) IS
   SELECT PR
   FROM UTPRMT
   WHERE PR = C_PR
   AND VERSION = C_PR_VERSION
   AND MT = C_MT
   AND UNAPIGEN.VALIDATEVERSION('mt', MT, MT_VERSION) = C_MT_VERSION;
L_PRMT_REC L_PRMT_CURSOR%ROWTYPE;
L_PRMT_FOUND             BOOLEAN;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   OPEN L_PRVERSION_CURSOR(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE);
   FETCH L_PRVERSION_CURSOR
   INTO L_PR_VERSION;
   CLOSE L_PRVERSION_CURSOR;
   
   OPEN L_MTVERSION_CURSOR(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, A_ME, A_MENODE);
   FETCH L_MTVERSION_CURSOR INTO L_MT_VERSION;
   CLOSE L_MTVERSION_CURSOR;

   
   
   
   
   OPEN L_PRMT_CURSOR(A_PA, L_PR_VERSION, A_ME, L_MT_VERSION);
   FETCH L_PRMT_CURSOR
   INTO L_PRMT_REC;
   L_PRMT_FOUND := L_PRMT_CURSOR%FOUND;
   CLOSE L_PRMT_CURSOR;
   
   IF L_PRMT_FOUND THEN
      
      
      
      
      INSERT INTO UTSCMEAU(SC, PG, PGNODE, PA, PANODE, ME, MENODE, AU, AU_VERSION,
                           AUSEQ, VALUE)
      SELECT A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, A_ME, A_MENODE, A.AU, '' D_VERSION, A.AUSEQ, A.VALUE
      FROM UTMTAU A, UTMT B, UTPRMT C, UTAU D
      WHERE A.MT = A_ME
        AND A.VERSION = L_MT_VERSION
        AND A.MT = B.MT
        AND A.VERSION = B.VERSION
        AND A.AU = D.AU
        AND UNAPIGEN.VALIDATEVERSION('au', A.AU, A.AU_VERSION) = D.VERSION
        AND C.PR = A_PA
        AND C.VERSION = L_PR_VERSION     
        AND C.MT = B.MT
        AND UNAPIGEN.VALIDATEVERSION('mt', C.MT, C.MT_VERSION) = B.VERSION     
        AND DECODE(D.INHERIT_AU,'0',DECODE(C.INHERIT_AU,'2',B.INHERIT_AU,C.INHERIT_AU),D.INHERIT_AU) = '1'
        AND A.AU NOT IN (SELECT DISTINCT J.AU
                         FROM UTPRMTAU J, UTPRMT K, UTMT L, UTAU M
                         WHERE J.MT = L.MT
                           AND UNAPIGEN.VALIDATEVERSION('mt', J.MT, J.MT_VERSION) = L.VERSION                      
                           AND J.PR = A_PA
                           AND J.VERSION = L_PR_VERSION
                           AND J.MT = A_ME
                           AND UNAPIGEN.VALIDATEVERSION('mt', J.MT, J.MT_VERSION) = L_MT_VERSION
                           AND J.MT = K.MT
                           AND UNAPIGEN.VALIDATEVERSION('mt', J.MT, J.MT_VERSION) = UNAPIGEN.VALIDATEVERSION('mt', K.MT, K.MT_VERSION)                        
                           AND J.PR = K.PR
                           AND J.VERSION = K.VERSION                        
                           AND DECODE(M.INHERIT_AU,'0',DECODE(K.INHERIT_AU,'2',L.INHERIT_AU,K.INHERIT_AU),M.INHERIT_AU) = '1'
                           AND M.AU = J.AU
                           AND M.VERSION = UNAPIGEN.VALIDATEVERSION('au', J.AU, J.AU_VERSION))
      
      
      
      
      UNION
      SELECT A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, A_ME, A_MENODE, V.AU, '' Y_VERSION, V.AUSEQ+500, V.VALUE
      FROM UTPRMTAU V, UTPRMT W, UTMT X, UTAU Y
      WHERE V.MT = X.MT
        AND UNAPIGEN.VALIDATEVERSION('mt', V.MT, V.MT_VERSION) = X.VERSION
        AND V.PR = A_PA
        AND V.VERSION = L_PR_VERSION     
        AND V.MT = A_ME
        AND UNAPIGEN.VALIDATEVERSION('mt', V.MT, V.MT_VERSION) = L_MT_VERSION
        AND V.PR = W.PR
        AND V.VERSION = W.VERSION
        AND V.MT = W.MT
        AND UNAPIGEN.VALIDATEVERSION('mt', V.MT, V.MT_VERSION) = UNAPIGEN.VALIDATEVERSION('mt', W.MT, W.MT_VERSION)
        AND DECODE(Y.INHERIT_AU,'0',DECODE(W.INHERIT_AU,'2',X.INHERIT_AU,W.INHERIT_AU),Y.INHERIT_AU) = '1' 
        AND V.AU = Y.AU
        AND UNAPIGEN.VALIDATEVERSION('au', V.AU, V.AU_VERSION) = Y.VERSION;
   ELSE
      INSERT INTO UTSCMEAU(SC, PG, PGNODE, PA, PANODE, ME, MENODE, AU, AU_VERSION,
                           AUSEQ, VALUE)
      SELECT A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, A_ME, A_MENODE, A.AU, '' D_VERSION, A.AUSEQ, A.VALUE
      FROM UTMTAU A, UTMT B, UTAU D
      WHERE A.MT = A_ME
        AND A.VERSION = L_MT_VERSION
        AND A.MT = B.MT
        AND A.VERSION = B.VERSION
        AND A.AU = D.AU
        AND UNAPIGEN.VALIDATEVERSION('au', A.AU, A.AU_VERSION) = D.VERSION          
        AND DECODE(D.INHERIT_AU, '0', B.INHERIT_AU, D.INHERIT_AU) = '1';
   END IF;
   
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('InitAndSaveScMeAttributes', SQLERRM);
   END IF;
   IF L_PRVERSION_CURSOR%ISOPEN THEN
      CLOSE L_PRVERSION_CURSOR;
   END IF;   
   IF L_MTVERSION_CURSOR%ISOPEN THEN
      CLOSE L_MTVERSION_CURSOR;
   END IF;   
   IF L_PRMT_CURSOR%ISOPEN THEN
      CLOSE L_PRMT_CURSOR;
   END IF;   
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'InitAndSaveScMeAttributes'));
END INITANDSAVESCMEATTRIBUTES;

FUNCTION GETSCMECOMMENT                                
(A_SC               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PG               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PGNODE           OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_PA               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PANODE           OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_ME               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_MENODE           OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_LAST_COMMENT     OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_NR_OF_ROWS       IN OUT  NUMBER,                    
 A_WHERE_CLAUSE     IN      VARCHAR2,                  
 A_NEXT_ROWS        IN      NUMBER)                    
RETURN NUMBER IS

L_SC                             VARCHAR2(20);
L_PG                             VARCHAR2(20);
L_PGNODE                         NUMBER(9);
L_PA                             VARCHAR2(20);
L_PANODE                         NUMBER(9);
L_ME                             VARCHAR2(20);
L_MENODE                         NUMBER(9);
L_LAST_COMMENT                   VARCHAR2(255);
L_FROM_CLAUSE                    VARCHAR2(255);
L_BIND_SCME_SELECTION            BOOLEAN;
L_BIND_FIXED_SC_FLAG             BOOLEAN;

BEGIN

   L_BIND_SCME_SELECTION := FALSE;
   L_BIND_FIXED_SC_FLAG := FALSE;
   IF NVL(A_NR_OF_ROWS, 0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF A_WHERE_CLAUSE <> 'SELECTION' THEN
      IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
         RETURN(UNAPIGEN.DBERR_NEXTROWS);
      END IF;

      
      IF A_NEXT_ROWS = -1 THEN
         IF P_GETSCMECOMMENT_CURSOR IS NOT NULL THEN
            DBMS_SQL.CLOSE_CURSOR(P_GETSCMECOMMENT_CURSOR);
            P_GETSCMECOMMENT_CURSOR := NULL;
         END IF;
         RETURN (UNAPIGEN.DBERR_SUCCESS);
      END IF;

      
      IF A_NEXT_ROWS = 1 THEN
         IF P_GETSCMECOMMENT_CURSOR IS NULL THEN
            RETURN(UNAPIGEN.DBERR_NOCURSOR);
         END IF;
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 OR
      A_WHERE_CLAUSE = 'SELECTION' THEN
      
      IF P_GETSCMECOMMENT_CURSOR IS NULL THEN
         L_SQL_STRING := 'SELECT a.sc, a.pg, a.pgnode, a.pa, a.panode, a.me, ' ||
                         'a.menode, a.last_comment FROM ';

         L_FROM_CLAUSE := 'dd' || UNAPIGEN.P_DD || '.uvscme a ';

         
         L_WHERE_CLAUSE := ' ';
         IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
            RETURN(UNAPIGEN.DBERR_WHERECLAUSE);
         ELSIF A_WHERE_CLAUSE = 'SELECTION' THEN
            
            
            
            
            
            
            
            
            
            IF UNAPIME.P_SELECTION_CLAUSE IS NOT NULL THEN 
               L_FROM_CLAUSE := '';
               L_WHERE_CLAUSE := UNAPIME.P_SELECTION_CLAUSE || 
                                 ' ORDER BY a.sc, a.pgnode, a.panode, a.menode';
               L_BIND_SCME_SELECTION := TRUE;
               UNAPIAUT.ADDORACLECBOHINT (L_SQL_STRING) ;
            ELSE
               L_WHERE_CLAUSE := ' ORDER BY a.sc,a.pgnode,a.panode,a.menode'; 
            END IF;
         ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
             L_BIND_FIXED_SC_FLAG := TRUE;
            L_WHERE_CLAUSE := ' WHERE a.sc = :sc_val ORDER BY a.pgnode, a.panode, a.menode';
         ELSE
            L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
         END IF;

         L_SQL_STRING := L_SQL_STRING || L_FROM_CLAUSE || L_WHERE_CLAUSE;

         P_GETSCMECOMMENT_CURSOR := DBMS_SQL.OPEN_CURSOR;
      
         DBMS_SQL.PARSE(P_GETSCMECOMMENT_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         IF L_BIND_SCME_SELECTION THEN
            FOR L_X IN 1..UNAPIME.P_SELECTION_VAL_TAB.COUNT() LOOP
               DBMS_SQL.BIND_VARIABLE(P_GETSCMECOMMENT_CURSOR, ':col_val'||L_X , UNAPIME.P_SELECTION_VAL_TAB(L_X)); 
            END LOOP;
         ELSIF L_BIND_FIXED_SC_FLAG THEN
            DBMS_SQL.BIND_VARIABLE(P_GETSCMECOMMENT_CURSOR, ':sc_val' , A_WHERE_CLAUSE); 
         END IF;

         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECOMMENT_CURSOR, 1, L_SC, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECOMMENT_CURSOR, 2, L_PG, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECOMMENT_CURSOR, 3, L_PGNODE);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECOMMENT_CURSOR, 4, L_PA, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECOMMENT_CURSOR, 5, L_PANODE);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECOMMENT_CURSOR, 6, L_ME, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECOMMENT_CURSOR, 7, L_MENODE);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCMECOMMENT_CURSOR, 8, L_LAST_COMMENT, 255);

         L_RESULT := DBMS_SQL.EXECUTE(P_GETSCMECOMMENT_CURSOR);
      END IF;

   END IF;
   
   L_RESULT := DBMS_SQL.FETCH_ROWS(P_GETSCMECOMMENT_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_GETSCMECOMMENT_CURSOR, 1, L_SC);
      DBMS_SQL.COLUMN_VALUE(P_GETSCMECOMMENT_CURSOR, 2, L_PG);
      DBMS_SQL.COLUMN_VALUE(P_GETSCMECOMMENT_CURSOR, 3, L_PGNODE);
      DBMS_SQL.COLUMN_VALUE(P_GETSCMECOMMENT_CURSOR, 4, L_PA);
      DBMS_SQL.COLUMN_VALUE(P_GETSCMECOMMENT_CURSOR, 5, L_PANODE);
      DBMS_SQL.COLUMN_VALUE(P_GETSCMECOMMENT_CURSOR, 6, L_ME);
      DBMS_SQL.COLUMN_VALUE(P_GETSCMECOMMENT_CURSOR, 7, L_MENODE);
      DBMS_SQL.COLUMN_VALUE(P_GETSCMECOMMENT_CURSOR, 8, L_LAST_COMMENT);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_SC(L_FETCHED_ROWS) := L_SC;
      A_PG(L_FETCHED_ROWS) := L_PG;
      A_PGNODE(L_FETCHED_ROWS) := L_PGNODE;
      A_PA(L_FETCHED_ROWS) := L_PA;
      A_PANODE(L_FETCHED_ROWS) := L_PANODE;
      A_ME(L_FETCHED_ROWS) := L_ME;
      A_MENODE(L_FETCHED_ROWS) := L_MENODE;
      A_LAST_COMMENT(L_FETCHED_ROWS) := L_LAST_COMMENT;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_GETSCMECOMMENT_CURSOR);
      END IF;

   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_GETSCMECOMMENT_CURSOR);
       P_GETSCMECOMMENT_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_GETSCMECOMMENT_CURSOR);
      P_GETSCMECOMMENT_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;
   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
             'GetScMeComment', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN(P_GETSCMECOMMENT_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(P_GETSCMECOMMENT_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETSCMECOMMENT;

FUNCTION CLEARWHEREUSEDINMEDETAILS                  
(A_OBJECT_TP        IN    VARCHAR2,                 
 A_SC               IN    VARCHAR2,                 
 A_PG               IN    VARCHAR2,                 
 A_PGNODE           IN    NUMBER,                   
 A_PA               IN    VARCHAR2,                 
 A_PANODE           IN    NUMBER,                   
 A_ME               IN    VARCHAR2,                 
 A_MENODE           IN    NUMBER,                   
 A_OLD_REANALYSIS   IN    NUMBER,                   
 A_NEW_REANALYSIS   IN    NUMBER,                   
 A_MODIFY_REASON    IN    VARCHAR2)                 
RETURN NUMBER IS





L_CURRENT_TIMESTAMP                TIMESTAMP WITH TIME ZONE;
L_NEXT_CELL              VARCHAR2(20);
L_OLD_NEXT_CELL          VARCHAR2(20);
L_TEMP_REANALYSIS        NUMBER;
L_OLD_VALUE_F            NUMBER;
L_OLD_VALUE_S            VARCHAR2(40);
L_OLD_SS                 VARCHAR2(2);
L_HS_DETAILS_SEQ_NR      INTEGER;
L_LOG_HS_DETAILS         CHAR(1);
L_NEW_SS                 VARCHAR2(2);
L_TR_NO                  NUMBER(3);
L_LC_SS_FROM             VARCHAR2(2);
L_NEW_REANALYSIS         NUMBER(3);
L_ME_REANALYSIS          NUMBER(3);





                       







CURSOR L_SCMECELLINPUT_CURSOR IS
   SELECT B.PG, B.PGNODE, B.PA, B.PANODE, B.ME, B.MENODE, A.MT_VERSION, B.CELL, A.EXEC_END_DATE, A.REANALYSIS, A.LC, A.LC_VERSION, A.SS, C.INPUT_TP
   FROM UTSCME A , UTSCMECELL B, UTSCMECELLINPUT C
   WHERE C.SC = A_SC
     AND C.INPUT_PG = A_PG
     AND C.INPUT_PGNODE = A_PGNODE
     AND C.INPUT_PA = A_PA
     AND C.INPUT_PANODE = A_PANODE
     AND C.INPUT_REANALYSIS = A_OLD_REANALYSIS
     AND C.SC = A.SC
     AND C.PG = A.PG
     AND C.PGNODE = A.PGNODE
     AND C.PA = A.PA
     AND C.PANODE = A.PANODE
     AND C.ME = A.ME
     AND C.MENODE = A.MENODE
     AND C.INPUT_TP = 'pr'
     AND C.INPUT_PA = A_PA
     
     AND NVL(A.SS, '@~') <> '@C'
     
     AND UNAPIAUT.SQLGETSCMEALLOWMODIFY(A.SC, A.PG, A.PGNODE, A.PA, A.PANODE, A.ME, A.MENODE, A.REANALYSIS) = '1'
     AND C.SC = B.SC
     AND C.PG = B.PG
     AND C.PGNODE = B.PGNODE
     AND C.PA = B.PA
     AND C.PANODE = B.PANODE
     AND C.ME = B.ME
     AND C.MENODE = B.MENODE
     AND C.CELL = B.CELL
     AND A_OBJECT_TP = 'pa'
   UNION ALL
   SELECT B.PG, B.PGNODE, B.PA, B.PANODE, B.ME, B.MENODE, A.MT_VERSION, B.CELL, A.EXEC_END_DATE, A.REANALYSIS, A.LC, A.LC_VERSION, A.SS, C.INPUT_TP
   FROM UTSCME A , UTSCMECELL B, UTSCMECELLINPUT C
   WHERE C.SC = A_SC
     AND C.INPUT_PG = A_PG
     AND C.INPUT_PGNODE = A_PGNODE
     AND C.INPUT_PA = A_PA
     AND C.INPUT_PANODE = A_PANODE
     AND C.INPUT_ME = A_ME
     AND C.INPUT_MENODE = A_MENODE     
     AND C.INPUT_REANALYSIS = A_OLD_REANALYSIS     
     AND C.SC = A.SC
     AND C.PG = A.PG
     AND C.PGNODE = A.PGNODE
     AND C.PA = A.PA
     AND C.PANODE = A.PANODE
     AND C.ME = A.ME
     AND C.MENODE = A.MENODE
     AND C.INPUT_TP = 'mt'
     AND C.INPUT_ME = A_ME
     AND NVL(A.SS, '@~') <> '@C'
     
     
     AND UNAPIAUT.SQLGETSCMEALLOWMODIFY(A.SC, A.PG, A.PGNODE, A.PA, A.PANODE, A.ME, A.MENODE, A.REANALYSIS) = '1'
     AND C.SC = B.SC
     AND C.PG = B.PG
     AND C.PGNODE = B.PGNODE
     AND C.PA = B.PA
     AND C.PANODE = B.PANODE
     AND C.ME = B.ME
     AND C.MENODE = B.MENODE
     AND C.CELL = B.CELL
     AND A_OBJECT_TP = 'me';

CURSOR C_FIRST_EMPTY_CELL (C_SC VARCHAR2, C_PG VARCHAR2, C_PGNODE VARCHAR2,
                     C_PA VARCHAR2, C_PANODE VARCHAR2,
                     C_ME VARCHAR2, C_MENODE VARCHAR2) IS
   SELECT CELL
   FROM UTSCMECELL
   WHERE SC = C_SC
     AND PG = C_PG
     AND PGNODE = C_PGNODE
     AND PA = C_PA
     AND PANODE = C_PANODE
     AND ME = C_ME
     AND MENODE = C_MENODE
     AND VALUE_S IS NULL
   ORDER BY CELLNODE;

CURSOR L_UTLCTR_CURSOR (A_LC IN VARCHAR2, A_SS_FROM IN VARCHAR2, A_SS_TO IN VARCHAR2) IS
   SELECT SS_FROM, TR_NO
   FROM  UTLCTR
   WHERE LC  = A_LC
     AND SS_FROM IN (NVL(A_SS_FROM, '@~'), '@@')
     AND SS_TO   = A_SS_TO
   ORDER BY SS_FROM DESC, TR_NO;
   
BEGIN
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   
   L_CURRENT_TIMESTAMP := CURRENT_TIMESTAMP;
   L_SQLERRM := NULL;
   L_HS_DETAILS_SEQ_NR := 0;

   IF NVL(A_SC, ' ') = ' ' OR
      NVL(A_PG, ' ') = ' ' OR
      NVL(A_PGNODE, 0) = 0 OR
      NVL(A_PA, ' ') = ' ' OR
      NVL(A_PANODE, 0) = 0 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF A_OBJECT_TP = 'me' THEN
      IF NVL(A_ME, ' ') = ' ' OR
         NVL(A_MENODE, 0) = 0 OR
         A_OLD_REANALYSIS IS NULL OR
         A_NEW_REANALYSIS IS NULL THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
      END IF;
   END IF;

   IF A_OBJECT_TP = 'pa' THEN
      IF A_OLD_REANALYSIS IS NULL OR
         A_NEW_REANALYSIS IS NULL THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
      END IF;
   END IF;
      


   
   
   
   
   
   

   FOR L_SCMECELLINPUT_REC IN
       L_SCMECELLINPUT_CURSOR LOOP
       
      IF UNAPIME.P_CELLSAVED4ME = A_SC||'#'|| L_SCMECELLINPUT_REC.PG||'#'|| L_SCMECELLINPUT_REC.PGNODE||'#'||
                           L_SCMECELLINPUT_REC.PA||'#'|| L_SCMECELLINPUT_REC.PANODE||'#'||
                           L_SCMECELLINPUT_REC.ME||'#'|| L_SCMECELLINPUT_REC.MENODE THEN
         
         
         NULL;
      ELSE
         
         
         
         SELECT LOG_HS_DETAILS, SS
         INTO L_LOG_HS_DETAILS, L_OLD_SS
         FROM UTSCME
         WHERE SC = A_SC 
           AND PG = L_SCMECELLINPUT_REC.PG
           AND PGNODE = L_SCMECELLINPUT_REC.PGNODE
           AND PA = L_SCMECELLINPUT_REC.PA
           AND PANODE = L_SCMECELLINPUT_REC.PANODE
           AND ME = L_SCMECELLINPUT_REC.ME
           AND MENODE = L_SCMECELLINPUT_REC.MENODE;

         IF L_LOG_HS_DETAILS = '1' THEN   
            L_RET_CODE := UNAPIGEN.GETNEXTEVENTSEQNR(L_EV_SEQ_NR);
            IF L_RET_CODE <> 0 THEN
               UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
               RAISE STPERROR;
            END IF;
         END IF;

         
         
         
         SELECT VALUE_F, VALUE_S
         INTO L_OLD_VALUE_F, L_OLD_VALUE_S
         FROM UTSCMECELL
         WHERE SC = A_SC
            AND PG = L_SCMECELLINPUT_REC.PG
            AND PGNODE = L_SCMECELLINPUT_REC.PGNODE
            AND PA = L_SCMECELLINPUT_REC.PA
            AND PANODE = L_SCMECELLINPUT_REC.PANODE
            AND ME = L_SCMECELLINPUT_REC.ME
            AND MENODE = L_SCMECELLINPUT_REC.MENODE
            AND CELL = L_SCMECELLINPUT_REC.CELL;

         UPDATE UTSCMECELL
         SET VALUE_F = NULL,
             VALUE_S = NULL
         WHERE SC = A_SC
            AND PG = L_SCMECELLINPUT_REC.PG
            AND PGNODE = L_SCMECELLINPUT_REC.PGNODE
            AND PA = L_SCMECELLINPUT_REC.PA
            AND PANODE = L_SCMECELLINPUT_REC.PANODE
            AND ME = L_SCMECELLINPUT_REC.ME
            AND MENODE = L_SCMECELLINPUT_REC.MENODE
            AND CELL = L_SCMECELLINPUT_REC.CELL;
         IF SQL%ROWCOUNT = 0 THEN
            RAISE NO_DATA_FOUND;
         END IF;

         
         
         
         IF L_LOG_HS_DETAILS = '1' THEN
            IF NOT(L_OLD_VALUE_F IS NULL) THEN 
               L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
               INSERT INTO UTSCMEHSDETAILS(SC, PG, PGNODE, PA, PANODE, ME, MENODE, TR_SEQ, 
                                           EV_SEQ, SEQ, DETAILS)
               VALUES(A_SC, L_SCMECELLINPUT_REC.PG, L_SCMECELLINPUT_REC.PGNODE, 
                      L_SCMECELLINPUT_REC.PA, L_SCMECELLINPUT_REC.PANODE, L_SCMECELLINPUT_REC.ME, 
                      L_SCMECELLINPUT_REC.MENODE, 
                      UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR, 
                      'method cell "'||L_SCMECELLINPUT_REC.CELL||'" is updated: property <value_f> changed value from "' || L_OLD_VALUE_F || '" to "".');
            END IF;

            IF NOT(L_OLD_VALUE_S IS NULL) THEN 
               L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
               INSERT INTO UTSCMEHSDETAILS(SC, PG, PGNODE, PA, PANODE, ME, MENODE, TR_SEQ, 
                                           EV_SEQ, SEQ, DETAILS)
               VALUES(A_SC, L_SCMECELLINPUT_REC.PG, L_SCMECELLINPUT_REC.PGNODE, 
                      L_SCMECELLINPUT_REC.PA, L_SCMECELLINPUT_REC.PANODE, L_SCMECELLINPUT_REC.ME, 
                      L_SCMECELLINPUT_REC.MENODE, 
                      UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR, 
                      'method cell "'||L_SCMECELLINPUT_REC.CELL||'" is updated: property <value_s> changed value from "' || L_OLD_VALUE_S || '" to "".');
            END IF;
         END IF;

         
         
         
         
         IF L_SCMECELLINPUT_REC.EXEC_END_DATE IS NOT NULL THEN
             
             SELECT REANALYSIS
             INTO L_ME_REANALYSIS
             FROM UTSCME
             WHERE SC = A_SC
             AND PG = L_SCMECELLINPUT_REC.PG
             AND PGNODE = L_SCMECELLINPUT_REC.PGNODE
             AND PA = L_SCMECELLINPUT_REC.PA
             AND PANODE = L_SCMECELLINPUT_REC.PANODE
             AND ME = L_SCMECELLINPUT_REC.ME
             AND MENODE = L_SCMECELLINPUT_REC.MENODE;

            L_RESULT := UNAPIMEP.REANALSCMEFROMDETAILS(A_SC, L_SCMECELLINPUT_REC.PG, L_SCMECELLINPUT_REC.PGNODE,
                                                       L_SCMECELLINPUT_REC.PA, L_SCMECELLINPUT_REC.PANODE,
                                                       L_SCMECELLINPUT_REC.ME, L_SCMECELLINPUT_REC.MENODE,
                                                       L_ME_REANALYSIS, A_MODIFY_REASON);

            
            
            
            IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS AND 
               L_RESULT <> UNAPIGEN.DBERR_NOTAUTHORISED THEN
               UNAPIGEN.P_TXN_ERROR := L_RESULT;
               L_SQLERRM := 'sc=' || A_SC || '#pg=' || L_SCMECELLINPUT_REC.PG ||
                   '#pgnode=' || TO_CHAR(L_SCMECELLINPUT_REC.PGNODE) ||
                   '#pa=' || L_SCMECELLINPUT_REC.PA ||
                   '#panode=' || TO_CHAR(L_SCMECELLINPUT_REC.PANODE) ||
                   '#me=' || L_SCMECELLINPUT_REC.ME ||
                   '#menode=' || TO_CHAR(L_SCMECELLINPUT_REC.MENODE) ||
                   '#ReanalScMeFromDetails#ErrorCode=' || TO_CHAR(L_RESULT);
               RAISE STPERROR;
            END IF;

            
            
            
            L_NEW_SS := NULL;
            L_NEW_REANALYSIS := NULL;
            UPDATE UTSCME A
            SET SS = (SELECT NVL(SS_AFTER_REANALYSIS,'IE') FROM UTLC WHERE LC=A.LC)
            WHERE A.SC = A_SC
              AND A.PG = L_SCMECELLINPUT_REC.PG
              AND A.PGNODE = L_SCMECELLINPUT_REC.PGNODE
              AND A.PA = L_SCMECELLINPUT_REC.PA
              AND A.PANODE = L_SCMECELLINPUT_REC.PANODE
              AND A.ME = L_SCMECELLINPUT_REC.ME
              AND A.MENODE = L_SCMECELLINPUT_REC.MENODE
            RETURNING SS, REANALYSIS
            INTO L_NEW_SS, L_NEW_REANALYSIS;

            IF L_SCMECELLINPUT_REC.INPUT_TP = 'mt' THEN
               UPDATE UTSCMECELLINPUT A
               SET INPUT_REANALYSIS = A_NEW_REANALYSIS
               WHERE A.SC = A_SC
                 AND A.PG = L_SCMECELLINPUT_REC.PG
                 AND A.PGNODE = L_SCMECELLINPUT_REC.PGNODE
                 AND A.PA = L_SCMECELLINPUT_REC.PA
                 AND A.PANODE = L_SCMECELLINPUT_REC.PANODE
                 AND A.ME = L_SCMECELLINPUT_REC.ME
                 AND A.MENODE = L_SCMECELLINPUT_REC.MENODE
                 AND A.CELL = L_SCMECELLINPUT_REC.CELL
                 AND A.INPUT_TP='mt';

            ELSIF L_SCMECELLINPUT_REC.INPUT_TP = 'pr' THEN
               UPDATE UTSCMECELLINPUT A
               SET INPUT_REANALYSIS = A_NEW_REANALYSIS
               WHERE A.SC = A_SC
                 AND A.PG = L_SCMECELLINPUT_REC.PG
                 AND A.PGNODE = L_SCMECELLINPUT_REC.PGNODE
                 AND A.PA = L_SCMECELLINPUT_REC.PA
                 AND A.PANODE = L_SCMECELLINPUT_REC.PANODE
                 AND A.CELL = L_SCMECELLINPUT_REC.CELL
                 AND A.INPUT_TP='pr';
            END IF;

            
            
            
            
            L_LC_SS_FROM := NULL;
            L_TR_NO := NULL;
            OPEN L_UTLCTR_CURSOR(L_SCMECELLINPUT_REC.LC, L_SCMECELLINPUT_REC.SS, L_NEW_SS);
            FETCH L_UTLCTR_CURSOR
            INTO L_LC_SS_FROM, L_TR_NO;
            CLOSE L_UTLCTR_CURSOR;

            L_EVENT_TP := 'MeReanalysis';
            L_EV_SEQ_NR := -1;
            L_EV_DETAILS := 'sc=' || A_SC ||
                            '#pg=' || L_SCMECELLINPUT_REC.PG || '#pgnode=' || TO_CHAR(L_SCMECELLINPUT_REC.PGNODE) ||
                            '#pa=' || L_SCMECELLINPUT_REC.PA || '#panode=' || TO_CHAR(L_SCMECELLINPUT_REC.PANODE) ||
                            '#menode=' || TO_CHAR(L_SCMECELLINPUT_REC.MENODE) ||
                            '#old_reanalysis=' || TO_CHAR(L_SCMECELLINPUT_REC.REANALYSIS) ||
                            '#new_reanalysis=' || TO_CHAR(L_NEW_REANALYSIS)||
                            '#tr_no=' || L_TR_NO ||
                            '#ss_from=' || L_SCMECELLINPUT_REC.SS ||
                            '#lc_ss_from='|| L_LC_SS_FROM||
                            '#mt_version=' || L_SCMECELLINPUT_REC.MT_VERSION;


            L_RESULT := UNAPIEV.INSERTEVENT('ReanalScMethod',
                                            UNAPIGEN.P_EVMGR_NAME, 'me', L_SCMECELLINPUT_REC.ME, 
                                            L_SCMECELLINPUT_REC.LC, L_SCMECELLINPUT_REC.LC_VERSION,
                                            L_NEW_SS, L_EVENT_TP, L_EV_DETAILS,
                                            L_EV_SEQ_NR);
            IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
               UNAPIGEN.P_TXN_ERROR := L_RESULT;
               RAISE STPERROR;
            END IF;

            IF L_LOG_HS_DETAILS = '1' THEN
               IF NVL(L_OLD_SS, '@~') <>  L_NEW_SS THEN 
                  L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
                  INSERT INTO UTSCMEHSDETAILS(SC, PG, PGNODE, PA, PANODE, ME, MENODE, TR_SEQ, 
                                              EV_SEQ, SEQ, DETAILS)
                  VALUES(A_SC, L_SCMECELLINPUT_REC.PG, L_SCMECELLINPUT_REC.PGNODE, 
                         L_SCMECELLINPUT_REC.PA, L_SCMECELLINPUT_REC.PANODE, L_SCMECELLINPUT_REC.ME, 
                         L_SCMECELLINPUT_REC.MENODE, 
                         UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR, 
                         'method "'||L_SCMECELLINPUT_REC.ME||'" is updated: property <ss> changed value from "' || L_OLD_SS || '" to "'|| L_NEW_SS ||'".');
               END IF;
            END IF;
         END IF;

         
         
         
         
         OPEN C_FIRST_EMPTY_CELL(A_SC,
                                 L_SCMECELLINPUT_REC.PG, L_SCMECELLINPUT_REC.PGNODE,
                                 L_SCMECELLINPUT_REC.PA, L_SCMECELLINPUT_REC.PANODE,
                                 L_SCMECELLINPUT_REC.ME, L_SCMECELLINPUT_REC.MENODE);

         FETCH C_FIRST_EMPTY_CELL INTO L_NEXT_CELL;
         IF C_FIRST_EMPTY_CELL%NOTFOUND THEN
            L_NEXT_CELL := NULL;
         END IF;
         CLOSE C_FIRST_EMPTY_CELL;

         
         
         
         SELECT NEXT_CELL
         INTO L_OLD_NEXT_CELL
         FROM UTSCME
         WHERE SC = A_SC 
         AND PG = L_SCMECELLINPUT_REC.PG
         AND PGNODE = L_SCMECELLINPUT_REC.PGNODE
         AND PA = L_SCMECELLINPUT_REC.PA
         AND PANODE = L_SCMECELLINPUT_REC.PANODE
         AND ME = L_SCMECELLINPUT_REC.ME
         AND MENODE = L_SCMECELLINPUT_REC.MENODE;

         UPDATE UTSCME
         SET NEXT_CELL = L_NEXT_CELL
         WHERE SC = A_SC 
         AND PG = L_SCMECELLINPUT_REC.PG
         AND PGNODE = L_SCMECELLINPUT_REC.PGNODE
         AND PA = L_SCMECELLINPUT_REC.PA
         AND PANODE = L_SCMECELLINPUT_REC.PANODE
         AND ME = L_SCMECELLINPUT_REC.ME
         AND MENODE = L_SCMECELLINPUT_REC.MENODE;

         
         
         
         IF L_LOG_HS_DETAILS = '1' THEN
            IF NVL((L_OLD_NEXT_CELL <> L_NEXT_CELL), TRUE) AND 
               NOT(L_OLD_NEXT_CELL IS NULL AND L_NEXT_CELL IS NULL)  THEN 
               L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
               INSERT INTO UTSCMEHSDETAILS(SC, PG, PGNODE, PA, PANODE, ME, MENODE, TR_SEQ, 
                                           EV_SEQ, SEQ, DETAILS)
               VALUES(A_SC, L_SCMECELLINPUT_REC.PG, L_SCMECELLINPUT_REC.PGNODE, 
                      L_SCMECELLINPUT_REC.PA, L_SCMECELLINPUT_REC.PANODE, L_SCMECELLINPUT_REC.ME, 
                      L_SCMECELLINPUT_REC.MENODE, 
                      UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR, 
                      'method "'||L_SCMECELLINPUT_REC.ME||'" is updated: property <next_cell> changed value from "' || L_OLD_NEXT_CELL || '" to "' || L_NEXT_CELL || '".');
            END IF;
         END IF;
      END IF;
   END LOOP;



   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('ClearWhereUsedInMeDetails',SQLERRM);
   END IF;
   IF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('ClearWhereUsedInMeDetails',L_SQLERRM);
   END IF;
   IF C_FIRST_EMPTY_CELL%ISOPEN THEN
      CLOSE C_FIRST_EMPTY_CELL;
   END IF;
   IF L_UTLCTR_CURSOR%ISOPEN THEN
      CLOSE L_UTLCTR_CURSOR;
   END IF;   
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'ClearWhereUsedInMeDetails'));
END CLEARWHEREUSEDINMEDETAILS;

END UNAPIMEP2;
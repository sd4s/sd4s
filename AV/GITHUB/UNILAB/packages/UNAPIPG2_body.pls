PACKAGE BODY unapipg2 AS

L_SQLERRM         VARCHAR2(255);
L_SQL_STRING      VARCHAR2(2000);
L_WHERE_CLAUSE    VARCHAR2(1000);
L_EVENT_TP        UTEV.EV_TP%TYPE;
L_TIMED_EVENT_TP  UTEVTIMED.EV_TP%TYPE;
L_RET_CODE        NUMBER;
L_RESULT          NUMBER;
L_FETCHED_ROWS    NUMBER;
L_EV_SEQ_NR       NUMBER;
L_EV_DETAILS      VARCHAR2(255);
STPERROR          EXCEPTION;

TYPE BOOLEAN_TABLE_TYPE IS TABLE OF BOOLEAN INDEX BY BINARY_INTEGER;


P_DEBUG_AFTP            VARCHAR2(20);
P_CACHE_AFTP            VARCHAR2(255);
P_AFTP_ALREADY_ASSIGNED VARCHAR2(255);
P_SAVEFTP_PG            VARCHAR2(20);
P_SAVEFTP_PP_VERSION    VARCHAR2(20);
P_SAVEFTP_PP_KEY1        VARCHAR2(20);
P_SAVEFTP_PP_KEY2        VARCHAR2(20);
P_SAVEFTP_PP_KEY3        VARCHAR2(20);
P_SAVEFTP_PP_KEY4        VARCHAR2(20);
P_SAVEFTP_PP_KEY5        VARCHAR2(20);
P_SAVEFTP_PA            VARCHAR2(20);
P_SAVEFTP_NR_MEASUR     VARCHAR2(20);
P_SAVEFTP_PA_VERSION    VARCHAR2(20);
P_SAVEFTP_PGNODE        NUMBER(9);
P_SAVEFTP_PANODE        NUMBER(9);
P_SAVEFTP_CALLS         INTEGER;
P_SAVEFTP_TR_SEQ        INTEGER;
L_BUF_A_SC              UNAPIGEN.VC20_TABLE_TYPE; 
L_BUF_A_SC_NR_OF_ROWS   NUMBER;


P_EXT_SAVEFTP_CALLS         INTEGER;

P_EXT_BUF_A_SC              UNAPIGEN.VC20_TABLE_TYPE; 
P_EXT_BUF_A_SC_NR_OF_ROWS   NUMBER;
P_EXT_TST_NR_OF_ROWS        INTEGER;
P_EXT_TST_TP                UNAPIGEN.VC20_TABLE_TYPE; 
P_EXT_TST_ID                UNAPIGEN.VC20_TABLE_TYPE; 
P_EXT_TST_ID_VERSION        UNAPIGEN.VC20_TABLE_TYPE;
P_EXT_PP_SEQ                UNAPIGEN.NUM_TABLE_TYPE; 
P_EXT_PR_SEQ                UNAPIGEN.NUM_TABLE_TYPE; 
P_EXT_MT_SEQ                UNAPIGEN.NUM_TABLE_TYPE; 
P_EXT_PP_KEY1               UNAPIGEN.VC20_TABLE_TYPE;
P_EXT_PP_KEY2               UNAPIGEN.VC20_TABLE_TYPE;
P_EXT_PP_KEY3               UNAPIGEN.VC20_TABLE_TYPE;
P_EXT_PP_KEY4               UNAPIGEN.VC20_TABLE_TYPE;
P_EXT_PP_KEY5               UNAPIGEN.VC20_TABLE_TYPE;
P_EXT_TST_NR_MEASUR         UNAPIGEN.NUM_TABLE_TYPE; 
P_EXT_MODIFY_FLAG           UNAPIGEN.NUM_TABLE_TYPE;

CURSOR C_SYSTEM (A_SETTING_NAME VARCHAR2) IS
   SELECT SETTING_VALUE
   FROM UTSYSTEM
   WHERE SETTING_NAME = A_SETTING_NAME;

L_CONFIG_DETAILS_CURSOR     INTEGER;

FUNCTION GETVERSION
   RETURN VARCHAR2
IS
BEGIN
   RETURN('06.07.00.00_00.13');
EXCEPTION
   WHEN OTHERS THEN
      RETURN (NULL);
END GETVERSION;

FUNCTION FILLFULLTESTPLANTABLE
(A_OBJECT_TP             IN      VARCHAR2,                  
 A_OBJECT_ID             IN      VARCHAR2,                  
 A_OBJECT_VERSION        IN      VARCHAR2,                                   
 A_PP_KEY1_TAB           IN      VC20_NESTEDTABLE_TYPE,                      
 A_PP_KEY2_TAB           IN      VC20_NESTEDTABLE_TYPE,                      
 A_PP_KEY3_TAB           IN      VC20_NESTEDTABLE_TYPE,                      
 A_PP_KEY4_TAB           IN      VC20_NESTEDTABLE_TYPE,                      
 A_PP_KEY5_TAB           IN      VC20_NESTEDTABLE_TYPE,                      
 A_PP_KEY1_TAB_COUNT     IN      NUMBER,                                     
 A_PP_KEY2_TAB_COUNT     IN      NUMBER,                                     
 A_PP_KEY3_TAB_COUNT     IN      NUMBER,                                     
 A_PP_KEY4_TAB_COUNT     IN      NUMBER,                                     
 A_PP_KEY5_TAB_COUNT     IN      NUMBER)                                     
RETURN NUMBER IS
BEGIN

   
   DELETE FROM UTASSIGNFULLTESTPLAN ;

   IF A_OBJECT_TP = 'st' THEN

      INSERT INTO UTASSIGNFULLTESTPLAN
      (
      OBJECT_TP ,
      OBJECT_ID ,
      OBJECT_VERSION ,
      TST_TP ,
      TST_ID ,
      TST_ID_VERSION ,
      TST_DESCRIPTION ,
      TST_NR_MEASUR ,
      PP  ,
      PP_VERSION,
      PP_KEY1,
      PP_KEY2,
      PP_KEY3,
      PP_KEY4,
      PP_KEY5,
      PP_SEQ  ,
      PR ,
      PR_VERSION,
      PR_SEQ  ,
      MT,
      MT_VERSION,
      MT_SEQ,
      CONFIRM_ASSIGN,
      NEVER_CREATE_METHODS)
      SELECT OBJECT_TP , OBJECT_ID , OBJECT_VERSION , 
             TST_TP , TST_ID , TST_ID_VERSION , 
             TST_DESCRIPTION , TST_NR_MEASUR , PP, PP_VERSION,  
             PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5,
             PP_SEQ , PR , PR_VERSION, PR_SEQ , MT, MT_VERSION,
             MT_SEQ, CONFIRM_ASSIGN, NEVER_CREATE_METHODS
      FROM
        (SELECT A_OBJECT_TP OBJECT_TP, A_OBJECT_ID OBJECT_ID, A_OBJECT_VERSION OBJECT_VERSION, 
                'pp' TST_TP, STPP.PP TST_ID, PP.VERSION TST_ID_VERSION, 
                PP.DESCRIPTION TST_DESCRIPTION, 1 TST_NR_MEASUR, STPP.PP PP, PP.VERSION PP_VERSION,
                STPP.PP_KEY1, STPP.PP_KEY2, STPP.PP_KEY3, STPP.PP_KEY4, STPP.PP_KEY5,
                STPP.SEQ PP_SEQ, '' PR, '' PR_VERSION, -1 PR_SEQ, '' MT, '' MT_VERSION,
                -1 MT_SEQ, PP.CONFIRM_ASSIGN, PP.NEVER_CREATE_METHODS,
                UNAPIGEN.VALIDATEPPVERSION(STPP.PP, STPP.PP_VERSION, STPP.PP_KEY1, STPP.PP_KEY2, STPP.PP_KEY3, STPP.PP_KEY4, STPP.PP_KEY5) VERSION_VALIDATION
         FROM UDPP PP, UTSTPP STPP 
         WHERE STPP.ST = A_OBJECT_ID 
           AND STPP.VERSION = A_OBJECT_VERSION 
           AND STPP.PP = PP.PP
           AND STPP.PP_KEY1 = PP.PP_KEY1
           AND STPP.PP_KEY2 = PP.PP_KEY2
           AND STPP.PP_KEY3 = PP.PP_KEY3
           AND STPP.PP_KEY4 = PP.PP_KEY4
           AND STPP.PP_KEY5 = PP.PP_KEY5
           AND PP.VERSION = UNAPIGEN.VALIDATEPPVERSION(STPP.PP, STPP.PP_VERSION, STPP.PP_KEY1, STPP.PP_KEY2, STPP.PP_KEY3, STPP.PP_KEY4, STPP.PP_KEY5, PP.VERSION) 
           AND DECODE(UNAPIGEN.P_DD, '1', PP.AR1, '2', PP.AR2, '3', PP.AR3, '4', PP.AR4, '5', PP.AR5, '6', PP.AR6, '7', PP.AR7, '8', PP.AR8, '9', PP.AR9, '10', PP.AR10, '11', PP.AR11, '12', PP.AR12, '13', PP.AR13, '14', PP.AR14, '15', PP.AR15, '16', PP.AR16, '17', PP.AR17, '18', PP.AR18, '19', PP.AR19, '20', PP.AR20, '21', PP.AR21, '22', 
           PP.AR22, '23', PP.AR23, '24', PP.AR24, '25', PP.AR25, '26', PP.AR26, '27', PP.AR27, '28', PP.AR28, '29', PP.AR29, '30', PP.AR30, '31', PP.AR31, '32', PP.AR32, '33', PP.AR33, '34', PP.AR34, '35', PP.AR35, '36', PP.AR36, '37', PP.AR37, '38', PP.AR38, '39', PP.AR39, '40', PP.AR40, '41', PP.AR41, '42', PP.AR42, '43', PP.AR43, '44', 
           PP.AR44, '45', PP.AR45, '46', PP.AR46, '47', PP.AR47, '48', PP.AR48, '49', PP.AR49, '50', PP.AR50, '51', PP.AR51, '52', PP.AR52, '53', PP.AR53, '54', PP.AR54, '55', PP.AR55, '56', PP.AR56, '57', PP.AR57, '58', PP.AR58, '59', PP.AR59, '60', PP.AR60, '61', PP.AR61, '62', PP.AR62, '63', PP.AR63, '64', PP.AR64, '65', PP.AR65, '66', 
           PP.AR66, '67', PP.AR67, '68', PP.AR68, '69', PP.AR69, '70', PP.AR70, '71', PP.AR71, '72', PP.AR72, '73', PP.AR73, '74', PP.AR74, '75', PP.AR75, '76', PP.AR76, '77', PP.AR77, '78', PP.AR78, '79', PP.AR79, '80', PP.AR80, '81', PP.AR81, '82', PP.AR82, '83', PP.AR83, '84', PP.AR84, '85', PP.AR85, '86', PP.AR86, '87', PP.AR87, '88', 
           PP.AR88, '89', PP.AR89, '90', PP.AR90, '91', PP.AR91, '92', PP.AR92, '93', PP.AR93, '94', PP.AR94, '95', PP.AR95, '96', PP.AR96, '97', PP.AR97, '98', PP.AR98, '99', PP.AR99, '100', PP.AR100, '101', PP.AR101, '102', PP.AR102, '103', PP.AR103, '104', PP.AR104, '105', PP.AR105, '106', PP.AR106, '107', PP.AR107, '108', PP.AR108, '109', 
           PP.AR109, '110', PP.AR110, '111', PP.AR111, '112', PP.AR112, '113', PP.AR113, '114', PP.AR114, '115', PP.AR115, '116', PP.AR116, '117', PP.AR117, '118', PP.AR118, '119', PP.AR119, '120', PP.AR120, '121', PP.AR121, '122', PP.AR122, '123', PP.AR123, '124', PP.AR124, '125', PP.AR125, '126', PP.AR126,DECODE(UNAPIGEN.P_DD, '127', PP.AR127, '128', PP.AR128, 'W'))<>'N'
           
           AND (STPP.PP_KEY1 = ' ' OR A_PP_KEY1_TAB_COUNT = 0 OR STPP.PP_KEY1 IN (SELECT * FROM TABLE(CAST(A_PP_KEY1_TAB AS VC20_NESTEDTABLE_TYPE))))
           AND (STPP.PP_KEY2 = ' ' OR A_PP_KEY2_TAB_COUNT = 0 OR STPP.PP_KEY2 IN (SELECT * FROM TABLE(CAST(A_PP_KEY2_TAB AS VC20_NESTEDTABLE_TYPE))))
           AND (STPP.PP_KEY3 = ' ' OR A_PP_KEY3_TAB_COUNT = 0 OR STPP.PP_KEY3 IN (SELECT * FROM TABLE(CAST(A_PP_KEY3_TAB AS VC20_NESTEDTABLE_TYPE))))
           AND (STPP.PP_KEY4 = ' ' OR A_PP_KEY4_TAB_COUNT = 0 OR STPP.PP_KEY4 IN (SELECT * FROM TABLE(CAST(A_PP_KEY4_TAB AS VC20_NESTEDTABLE_TYPE))))
           AND (STPP.PP_KEY5 = ' ' OR A_PP_KEY5_TAB_COUNT = 0 OR STPP.PP_KEY5 IN (SELECT * FROM TABLE(CAST(A_PP_KEY5_TAB AS VC20_NESTEDTABLE_TYPE))))
        );
   ELSIF  A_OBJECT_TP = 'rt' THEN   

      
      INSERT INTO UTASSIGNFULLTESTPLAN
      (
      OBJECT_TP ,
      OBJECT_ID ,
      OBJECT_VERSION ,
      TST_TP ,
      TST_ID ,
      TST_ID_VERSION ,
      TST_DESCRIPTION ,
      TST_NR_MEASUR ,
      PP  ,
      PP_VERSION, 
      PP_KEY1,
      PP_KEY2,
      PP_KEY3,
      PP_KEY4,
      PP_KEY5,
      PP_SEQ  ,
      PR ,
      PR_VERSION,
      PR_SEQ  ,
      MT,
      MT_VERSION,
      MT_SEQ,
      CONFIRM_ASSIGN,
      NEVER_CREATE_METHODS)
      SELECT OBJECT_TP , OBJECT_ID , OBJECT_VERSION , TST_TP ,
             TST_ID , TST_ID_VERSION , TST_DESCRIPTION ,
             TST_NR_MEASUR , PP , PP_VERSION,  PP_KEY1, PP_KEY2, PP_KEY3,
             PP_KEY4, PP_KEY5, PP_SEQ , PR , PR_VERSION, PR_SEQ , MT, MT_VERSION,
             MT_SEQ, CONFIRM_ASSIGN, NEVER_CREATE_METHODS
      FROM
        (SELECT A_OBJECT_TP OBJECT_TP, A_OBJECT_ID OBJECT_ID, A_OBJECT_VERSION OBJECT_VERSION, 'pp' TST_TP,
                STPP.PP TST_ID, PP.VERSION TST_ID_VERSION, PP.DESCRIPTION TST_DESCRIPTION,
                1 TST_NR_MEASUR, STPP.PP, PP.VERSION PP_VERSION, STPP.PP_KEY1, STPP.PP_KEY2, STPP.PP_KEY3,
                STPP.PP_KEY4, STPP.PP_KEY5,
                MIN(STPP.SEQ) PP_SEQ, ' ' PR, '' PR_VERSION, -1 PR_SEQ, ' ' MT, '' MT_VERSION,
                -1 MT_SEQ, PP.CONFIRM_ASSIGN, PP.NEVER_CREATE_METHODS,
                UNAPIGEN.VALIDATEPPVERSION(STPP.PP, STPP.PP_VERSION, STPP.PP_KEY1, STPP.PP_KEY2, STPP.PP_KEY3, STPP.PP_KEY4, STPP.PP_KEY5) VERSION_VALIDATION_PP
         FROM UDPP PP, UTSTPP STPP, UDST ST, UTRTST RTST
         WHERE RTST.RT = A_OBJECT_ID
         AND RTST.VERSION = A_OBJECT_VERSION 
         AND RTST.ST = ST.ST
         AND ST.VERSION = UNAPIGEN.VALIDATEVERSION('st', RTST.ST, RTST.ST_VERSION) 
         AND DECODE(UNAPIGEN.P_DD, '1', ST.AR1, '2', ST.AR2, '3', ST.AR3, '4', ST.AR4, '5', ST.AR5, '6', ST.AR6, '7', ST.AR7, '8', ST.AR8, '9', ST.AR9, '10', ST.AR10, '11', ST.AR11, '12', ST.AR12, '13', ST.AR13, '14', ST.AR14, '15', ST.AR15, '16', ST.AR16, '17', ST.AR17, '18', ST.AR18, '19', ST.AR19, '20', ST.AR20, '21', ST.AR21, '22', 
         ST.AR22, '23', ST.AR23, '24', ST.AR24, '25', ST.AR25, '26', ST.AR26, '27', ST.AR27, '28', ST.AR28, '29', ST.AR29, '30', ST.AR30, '31', ST.AR31, '32', ST.AR32, '33', ST.AR33, '34', ST.AR34, '35', ST.AR35, '36', ST.AR36, '37', ST.AR37, '38', ST.AR38, '39', ST.AR39, '40', ST.AR40, '41', ST.AR41, '42', ST.AR42, '43', ST.AR43, '44',
         ST.AR44, '45', ST.AR45, '46', ST.AR46, '47', ST.AR47, '48', ST.AR48, '49', ST.AR49, '50', ST.AR50, '51', ST.AR51, '52', ST.AR52, '53', ST.AR53, '54', ST.AR54, '55', ST.AR55, '56', ST.AR56, '57', ST.AR57, '58', ST.AR58, '59', ST.AR59, '60', ST.AR60, '61', ST.AR61, '62', ST.AR62, '63', ST.AR63, '64', ST.AR64, '65', ST.AR65, '66',
         ST.AR66, '67', ST.AR67, '68', ST.AR68, '69', ST.AR69, '70', ST.AR70, '71', ST.AR71, '72', ST.AR72, '73', ST.AR73, '74', ST.AR74, '75', ST.AR75, '76', ST.AR76, '77', ST.AR77, '78', ST.AR78, '79', ST.AR79, '80', ST.AR80, '81', ST.AR81, '82', ST.AR82, '83', ST.AR83, '84', ST.AR84, '85', ST.AR85, '86', ST.AR86, '87', ST.AR87, '88',
         ST.AR88, '89', ST.AR89, '90', ST.AR90, '91', ST.AR91, '92', ST.AR92, '93', ST.AR93, '94', ST.AR94, '95', ST.AR95, '96', ST.AR96, '97', ST.AR97, '98', ST.AR98, '99', ST.AR99, '100', ST.AR100, '101', ST.AR101, '102', ST.AR102, '103', ST.AR103, '104', ST.AR104, '105', ST.AR105, '106', ST.AR106, '107', ST.AR107, '108', ST.AR108, '109', 
         ST.AR109, '110', ST.AR110, '111', ST.AR111, '112', ST.AR112, '113', ST.AR113, '114', ST.AR114, '115', ST.AR115, '116', ST.AR116, '117', ST.AR117, '118', ST.AR118, '119', ST.AR119, '120', ST.AR120, '121', ST.AR121, '122', ST.AR122, '123', ST.AR123, '124', ST.AR124, '125', ST.AR125, '126', ST.AR126,DECODE(UNAPIGEN.P_DD, '127', ST.AR127, '128', ST.AR128, 'W'))<>'N'
         AND RTST.ST = STPP.ST
         AND UNAPIGEN.VALIDATEVERSION('st', RTST.ST, RTST.ST_VERSION) = STPP.VERSION
         AND STPP.PP = PP.PP
         AND STPP.PP_KEY1 = PP.PP_KEY1
         AND STPP.PP_KEY2 = PP.PP_KEY2
         AND STPP.PP_KEY3 = PP.PP_KEY3
         AND STPP.PP_KEY4 = PP.PP_KEY4
         AND STPP.PP_KEY5 = PP.PP_KEY5
         AND PP.VERSION = UNAPIGEN.VALIDATEPPVERSION(STPP.PP, STPP.PP_VERSION, STPP.PP_KEY1, STPP.PP_KEY2, STPP.PP_KEY3, STPP.PP_KEY4, STPP.PP_KEY5,PP.VERSION) 
         AND DECODE(UNAPIGEN.P_DD, '1', PP.AR1, '2', PP.AR2, '3', PP.AR3, '4', PP.AR4, '5', PP.AR5, '6', PP.AR6, '7', PP.AR7, '8', PP.AR8, '9', PP.AR9, '10', PP.AR10, '11', PP.AR11, '12', PP.AR12, '13', PP.AR13, '14', PP.AR14, '15', PP.AR15, '16', PP.AR16, '17', PP.AR17, '18', PP.AR18, '19', PP.AR19, '20', PP.AR20, '21', PP.AR21, '22', PP.AR22, '23',
         PP.AR23, '24', PP.AR24, '25', PP.AR25, '26', PP.AR26, '27', PP.AR27, '28', PP.AR28, '29', PP.AR29, '30', PP.AR30, '31', PP.AR31, '32', PP.AR32, '33', PP.AR33, '34', PP.AR34, '35', PP.AR35, '36', PP.AR36, '37', PP.AR37, '38', PP.AR38, '39', PP.AR39, '40', PP.AR40, '41', PP.AR41, '42', PP.AR42, '43', PP.AR43, '44', PP.AR44, '45', PP.AR45, '46',
         PP.AR46, '47', PP.AR47, '48', PP.AR48, '49', PP.AR49, '50', PP.AR50, '51', PP.AR51, '52', PP.AR52, '53', PP.AR53, '54', PP.AR54, '55', PP.AR55, '56', PP.AR56, '57', PP.AR57, '58', PP.AR58, '59', PP.AR59, '60', PP.AR60, '61', PP.AR61, '62', PP.AR62, '63', PP.AR63, '64', PP.AR64, '65', PP.AR65, '66', PP.AR66, '67', PP.AR67, '68', PP.AR68, '69',
         PP.AR69, '70', PP.AR70, '71', PP.AR71, '72', PP.AR72, '73', PP.AR73, '74', PP.AR74, '75', PP.AR75, '76', PP.AR76, '77', PP.AR77, '78', PP.AR78, '79', PP.AR79, '80', PP.AR80, '81', PP.AR81, '82', PP.AR82, '83', PP.AR83, '84', PP.AR84, '85', PP.AR85, '86', PP.AR86, '87', PP.AR87, '88', PP.AR88, '89', PP.AR89, '90', PP.AR90, '91', PP.AR91, '92', 
         PP.AR92, '93', PP.AR93, '94', PP.AR94, '95', PP.AR95, '96', PP.AR96, '97', PP.AR97, '98', PP.AR98, '99', PP.AR99, '100', PP.AR100, '101', PP.AR101, '102', PP.AR102, '103', PP.AR103, '104', PP.AR104, '105', PP.AR105, '106', PP.AR106, '107', PP.AR107, '108', PP.AR108, '109', PP.AR109, '110', PP.AR110, '111', PP.AR111, '112', PP.AR112, '113', 
         PP.AR113, '114', PP.AR114, '115', PP.AR115, '116', PP.AR116, '117', PP.AR117, '118', PP.AR118, '119', PP.AR119, '120', PP.AR120, '121', PP.AR121, '122', PP.AR122, '123', PP.AR123, '124', PP.AR124, '125', PP.AR125, '126', PP.AR126,DECODE(UNAPIGEN.P_DD, '127', PP.AR127, '128', PP.AR128, 'W'))<>'N'
         AND EXISTS (SELECT 'X' 
                       FROM UTRT 
                      WHERE RT = A_OBJECT_ID 
                        AND VERSION = A_OBJECT_VERSION
                        AND ADD_STPP='1')
         AND NOT EXISTS (SELECT 'X' 
                           FROM UTRTPP RTPP 
                          WHERE RT = A_OBJECT_ID 
                            AND VERSION = A_OBJECT_VERSION
                            AND PP=PP.PP 
                            AND PP.VERSION = UNAPIGEN.VALIDATEPPVERSION(RTPP.PP, RTPP.PP_VERSION, RTPP.PP_KEY1, RTPP.PP_KEY2, RTPP.PP_KEY3, RTPP.PP_KEY4, RTPP.PP_KEY5)) 
         GROUP BY STPP.PP, STPP.PP_VERSION, PP.DESCRIPTION
        );

      
      INSERT INTO UTASSIGNFULLTESTPLAN
      (
      OBJECT_TP ,
      OBJECT_ID ,
      OBJECT_VERSION ,
      TST_TP ,
      TST_ID ,
      TST_ID_VERSION ,
      TST_DESCRIPTION ,
      TST_NR_MEASUR ,
      PP  ,
      PP_VERSION, 
      PP_KEY1,
      PP_KEY2,
      PP_KEY3,
      PP_KEY4,
      PP_KEY5,
      PP_SEQ  ,
      PR ,
      PR_VERSION,
      PR_SEQ  ,
      MT,
      MT_VERSION,
      MT_SEQ,
      CONFIRM_ASSIGN,
      NEVER_CREATE_METHODS)
      SELECT OBJECT_TP , OBJECT_ID , OBJECT_VERSION , 
             TST_TP , TST_ID , TST_ID_VERSION , TST_DESCRIPTION ,
             TST_NR_MEASUR , PP , PP_VERSION,  
             PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, 
             PP_SEQ , PR , PR_VERSION, PR_SEQ , MT, MT_VERSION,
             MT_SEQ, CONFIRM_ASSIGN, NEVER_CREATE_METHODS
      FROM
        (SELECT A_OBJECT_TP OBJECT_TP, A_OBJECT_ID OBJECT_ID, A_OBJECT_VERSION OBJECT_VERSION,
                'pp' TST_TP, RTPP.PP TST_ID, PP.VERSION TST_ID_VERSION, PP.DESCRIPTION TST_DESCRIPTION,
                1 TST_NR_MEASUR, RTPP.PP PP, PP.VERSION PP_VERSION, 
                RTPP.PP_KEY1, RTPP.PP_KEY2, RTPP.PP_KEY3, RTPP.PP_KEY4, RTPP.PP_KEY5,
                RTPP.SEQ PP_SEQ, '' PR, '' PR_VERSION, -1 PR_SEQ, '' MT, '' MT_VERSION, 
                -1 MT_SEQ, PP.CONFIRM_ASSIGN, PP.NEVER_CREATE_METHODS,
                UNAPIGEN.VALIDATEPPVERSION(RTPP.PP, RTPP.PP_VERSION, RTPP.PP_KEY1, RTPP.PP_KEY2, RTPP.PP_KEY3, RTPP.PP_KEY4, RTPP.PP_KEY5) VERSION_VALIDATION
         FROM UDPP PP, UTRTPP RTPP
         WHERE RTPP.RT = A_OBJECT_ID 
         AND RTPP.VERSION = A_OBJECT_VERSION 
         AND RTPP.PP=PP.PP
         AND RTPP.PP_KEY1 = PP.PP_KEY1
         AND RTPP.PP_KEY2 = PP.PP_KEY2
         AND RTPP.PP_KEY3 = PP.PP_KEY3
         AND RTPP.PP_KEY4 = PP.PP_KEY4
         AND RTPP.PP_KEY5 = PP.PP_KEY5
         AND PP.VERSION = UNAPIGEN.VALIDATEPPVERSION(RTPP.PP, RTPP.PP_VERSION, RTPP.PP_KEY1, RTPP.PP_KEY2, RTPP.PP_KEY3, RTPP.PP_KEY4, RTPP.PP_KEY5, PP.VERSION) 
         AND DECODE(UNAPIGEN.P_DD, '1', PP.AR1, '2', PP.AR2, '3', PP.AR3, '4', PP.AR4, '5', PP.AR5, '6', PP.AR6, '7', PP.AR7, '8', PP.AR8, '9', PP.AR9, '10', PP.AR10, '11', PP.AR11, '12', PP.AR12, '13', PP.AR13, '14', PP.AR14, '15', PP.AR15, '16', PP.AR16, '17', PP.AR17, '18', PP.AR18, '19', PP.AR19, '20', PP.AR20, '21', PP.AR21, '22', 
         PP.AR22, '23', PP.AR23, '24', PP.AR24, '25', PP.AR25, '26', PP.AR26, '27', PP.AR27, '28', PP.AR28, '29', PP.AR29, '30', PP.AR30, '31', PP.AR31, '32', PP.AR32, '33', PP.AR33, '34', PP.AR34, '35', PP.AR35, '36', PP.AR36, '37', PP.AR37, '38', PP.AR38, '39', PP.AR39, '40', PP.AR40, '41', PP.AR41, '42', PP.AR42, '43', PP.AR43, '44', 
         PP.AR44, '45', PP.AR45, '46', PP.AR46, '47', PP.AR47, '48', PP.AR48, '49', PP.AR49, '50', PP.AR50, '51', PP.AR51, '52', PP.AR52, '53', PP.AR53, '54', PP.AR54, '55', PP.AR55, '56', PP.AR56, '57', PP.AR57, '58', PP.AR58, '59', PP.AR59, '60', PP.AR60, '61', PP.AR61, '62', PP.AR62, '63', PP.AR63, '64', PP.AR64, '65', PP.AR65, '66', 
         PP.AR66, '67', PP.AR67, '68', PP.AR68, '69', PP.AR69, '70', PP.AR70, '71', PP.AR71, '72', PP.AR72, '73', PP.AR73, '74', PP.AR74, '75', PP.AR75, '76', PP.AR76, '77', PP.AR77, '78', PP.AR78, '79', PP.AR79, '80', PP.AR80, '81', PP.AR81, '82', PP.AR82, '83', PP.AR83, '84', PP.AR84, '85', PP.AR85, '86', PP.AR86, '87', PP.AR87, '88', 
         PP.AR88, '89', PP.AR89, '90', PP.AR90, '91', PP.AR91, '92', PP.AR92, '93', PP.AR93, '94', PP.AR94, '95', PP.AR95, '96', PP.AR96, '97', PP.AR97, '98', PP.AR98, '99', PP.AR99, '100', PP.AR100, '101', PP.AR101, '102', PP.AR102, '103', PP.AR103, '104', PP.AR104, '105', PP.AR105, '106', PP.AR106, '107', PP.AR107, '108', PP.AR108, 
         '109', PP.AR109, '110', PP.AR110, '111', PP.AR111, '112', PP.AR112, '113', PP.AR113, '114', PP.AR114, '115', PP.AR115, '116', PP.AR116, '117', PP.AR117, '118', PP.AR118, '119', PP.AR119, '120', PP.AR120, '121', PP.AR121, '122', PP.AR122, '123', PP.AR123, '124', PP.AR124, '125', PP.AR125, '126', PP.AR126,DECODE(UNAPIGEN.P_DD, '127', PP.AR127, '128', PP.AR128, 'W'))<>'N'
        );
   END IF;
   
   
   
   
   INSERT INTO UTASSIGNFULLTESTPLAN
   (
   OBJECT_TP ,
   OBJECT_ID ,
   OBJECT_VERSION ,
   TST_TP ,
   TST_ID ,
   TST_ID_VERSION ,
   TST_DESCRIPTION ,
   TST_NR_MEASUR ,
   PP  ,
   PP_VERSION, 
   PP_KEY1,
   PP_KEY2,
   PP_KEY3,
   PP_KEY4,
   PP_KEY5,
   PP_SEQ  ,
   PR ,
   PR_VERSION,
   PR_SEQ  ,
   MT,
   MT_VERSION,
   MT_SEQ,
   IS_PP_IN_PP,
   NEVER_CREATE_METHODS)
   SELECT A_OBJECT_TP OBJECT_TP, A_OBJECT_ID OBJECT_ID, A_OBJECT_VERSION OBJECT_VERSION,
          'pr' TST_TP, PPPR.PR TST_ID, PR.VERSION TST_ID_VERSION, PR.DESCRIPTION TST_DESCRIPTION, 
          PPPR.NR_MEASUR TST_NR_MEASUR, AFT.PP PP,AFT.PP_VERSION PP_VERSION, 
          AFT.PP_KEY1, AFT.PP_KEY2, AFT.PP_KEY3, AFT.PP_KEY4, AFT.PP_KEY5,
          AFT.PP_SEQ PP_SEQ, PPPR.PR PR, PR.VERSION PR_VERSION, PPPR.SEQ PR_SEQ, '' MT, '' MT_VERSION, 
          -1 MT_SEQ, 0 CONFIRM_ASSIGN, AFT.NEVER_CREATE_METHODS NEVER_CREATE_METHODS
   FROM UDPR PR,  UTPPPR PPPR, UTASSIGNFULLTESTPLAN AFT
   WHERE AFT.OBJECT_TP =  A_OBJECT_TP
     AND AFT.OBJECT_ID =  A_OBJECT_ID
     AND AFT.OBJECT_VERSION =  A_OBJECT_VERSION
     AND AFT.TST_TP = 'pp'
     AND AFT.TST_ID = PPPR.PP
     AND AFT.TST_ID_VERSION = PPPR.VERSION
     AND AFT.PP = PPPR.PP
     AND AFT.PP_KEY1 = PPPR.PP_KEY1
     AND AFT.PP_KEY2 = PPPR.PP_KEY2
     AND AFT.PP_KEY3 = PPPR.PP_KEY3
     AND AFT.PP_KEY4 = PPPR.PP_KEY4
     AND AFT.PP_KEY5 = PPPR.PP_KEY5
     AND NVL(AFT.CONFIRM_ASSIGN,'0') <> '0'
     AND PPPR.IS_PP='0'
     AND PPPR.PR = PR.PR
     AND PR.VERSION = UNAPIGEN.VALIDATEVERSION('pr', PPPR.PR, PPPR.PR_VERSION) 
     AND DECODE(UNAPIGEN.P_DD, '1', PR.AR1, '2', PR.AR2, '3', PR.AR3, '4', PR.AR4, '5', PR.AR5, '6', PR.AR6, '7', PR.AR7, '8', PR.AR8, '9', PR.AR9, '10', PR.AR10, '11', PR.AR11, '12', PR.AR12, '13', PR.AR13, '14', PR.AR14, '15', PR.AR15, '16', PR.AR16, '17', PR.AR17, '18', PR.AR18, '19', PR.AR19, '20', PR.AR20, '21', PR.AR21, '22', 
     PR.AR22, '23', PR.AR23, '24', PR.AR24, '25', PR.AR25, '26', PR.AR26, '27', PR.AR27, '28', PR.AR28, '29', PR.AR29, '30', PR.AR30, '31', PR.AR31, '32', PR.AR32, '33', PR.AR33, '34', PR.AR34, '35', PR.AR35, '36', PR.AR36, '37', PR.AR37, '38', PR.AR38, '39', PR.AR39, '40', PR.AR40, '41', PR.AR41, '42', PR.AR42, '43', PR.AR43, '44', 
     PR.AR44, '45', PR.AR45, '46', PR.AR46, '47', PR.AR47, '48', PR.AR48, '49', PR.AR49, '50', PR.AR50, '51', PR.AR51, '52', PR.AR52, '53', PR.AR53, '54', PR.AR54, '55', PR.AR55, '56', PR.AR56, '57', PR.AR57, '58', PR.AR58, '59', PR.AR59, '60', PR.AR60, '61', PR.AR61, '62', PR.AR62, '63', PR.AR63, '64', PR.AR64, '65', PR.AR65, '66', 
     PR.AR66, '67', PR.AR67, '68', PR.AR68, '69', PR.AR69, '70', PR.AR70, '71', PR.AR71, '72', PR.AR72, '73', PR.AR73, '74', PR.AR74, '75', PR.AR75, '76', PR.AR76, '77', PR.AR77, '78', PR.AR78, '79', PR.AR79, '80', PR.AR80, '81', PR.AR81, '82', PR.AR82, '83', PR.AR83, '84', PR.AR84, '85', PR.AR85, '86', PR.AR86, '87', PR.AR87, '88', 
     PR.AR88, '89', PR.AR89, '90', PR.AR90, '91', PR.AR91, '92', PR.AR92, '93', PR.AR93, '94', PR.AR94, '95', PR.AR95, '96', PR.AR96, '97', PR.AR97, '98', PR.AR98, '99', PR.AR99, '100', PR.AR100, '101', PR.AR101, '102', PR.AR102, '103', PR.AR103, '104', PR.AR104, '105', PR.AR105, '106', PR.AR106, '107', PR.AR107, '108', PR.AR108, '109', 
     PR.AR109, '110', PR.AR110, '111', PR.AR111, '112', PR.AR112, '113', PR.AR113, '114', PR.AR114, '115', PR.AR115, '116', PR.AR116, '117', PR.AR117, '118', PR.AR118, '119', PR.AR119, '120', PR.AR120, '121', PR.AR121, '122', PR.AR122, '123', PR.AR123, '124', PR.AR124, '125', PR.AR125, '126', PR.AR126,DECODE(UNAPIGEN.P_DD, '127', PR.AR127, '128', PR.AR128, 'W'))<>'N'
    ;
     
   
   
   INSERT INTO UTASSIGNFULLTESTPLAN
   (
   OBJECT_TP ,
   OBJECT_ID ,
   OBJECT_VERSION ,
   TST_TP ,
   TST_ID ,
   TST_ID_VERSION ,
   TST_DESCRIPTION ,
   TST_NR_MEASUR ,
   PP  ,
   PP_VERSION, 
   PP_KEY1,
   PP_KEY2,
   PP_KEY3,
   PP_KEY4,
   PP_KEY5,
   PP_SEQ  ,
   PR ,
   PR_VERSION,
   PR_SEQ  ,
   MT,
   MT_VERSION,
   MT_SEQ,
   IS_PP_IN_PP)
   SELECT OBJECT_TP , OBJECT_ID , OBJECT_VERSION , 
          TST_TP , TST_ID , TST_ID_VERSION , TST_DESCRIPTION ,
          TST_NR_MEASUR , PP , PP_VERSION,  
          PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, 
          PP_SEQ , PR , PR_VERSION, PR_SEQ , MT, MT_VERSION,
          MT_SEQ, IS_PP_IN_PP
   FROM
     (SELECT A_OBJECT_TP OBJECT_TP, A_OBJECT_ID OBJECT_ID, A_OBJECT_VERSION OBJECT_VERSION,
             'px' TST_TP, PPPR.PR TST_ID, CHILDPP.VERSION TST_ID_VERSION, CHILDPP.DESCRIPTION TST_DESCRIPTION,
             1 TST_NR_MEASUR, AFT.PP PP, AFT.PP_VERSION PP_VERSION,
             AFT.PP_KEY1, AFT.PP_KEY2, AFT.PP_KEY3, AFT.PP_KEY4, AFT.PP_KEY5,
             AFT.PP_SEQ PP_SEQ, PPPR.PR PR, CHILDPP.VERSION PR_VERSION, PPPR.SEQ PR_SEQ, '' MT,'' MT_VERSION,
             -1 MT_SEQ, 1 IS_PP_IN_PP,
             UNAPIGEN.VALIDATEPPVERSION(PPPR.PR, PPPR.PR_VERSION, PPPR.PP_KEY1, PPPR.PP_KEY2, PPPR.PP_KEY3, PPPR.PP_KEY4, PPPR.PP_KEY5) VERSION_VALIDATION
      FROM UDPP CHILDPP,  UTPPPR PPPR, UTASSIGNFULLTESTPLAN AFT
      WHERE AFT.OBJECT_TP =  A_OBJECT_TP
        AND AFT.OBJECT_ID =  A_OBJECT_ID
        AND AFT.OBJECT_VERSION =  A_OBJECT_VERSION
        AND AFT.TST_TP = 'pp'
        AND AFT.TST_ID = PPPR.PP
        AND AFT.TST_ID_VERSION = PPPR.VERSION
        AND AFT.PP = PPPR.PP
        AND AFT.PP_KEY1 = PPPR.PP_KEY1
        AND AFT.PP_KEY2 = PPPR.PP_KEY2
        AND AFT.PP_KEY3 = PPPR.PP_KEY3
        AND AFT.PP_KEY4 = PPPR.PP_KEY4
        AND AFT.PP_KEY5 = PPPR.PP_KEY5
        AND NVL(AFT.CONFIRM_ASSIGN,'0') <> '0'
        AND PPPR.IS_PP='1'
        AND PPPR.PR = CHILDPP.PP
        AND PPPR.PP_KEY1 = CHILDPP.PP_KEY1
        AND PPPR.PP_KEY2 = CHILDPP.PP_KEY2
        AND PPPR.PP_KEY3 = CHILDPP.PP_KEY3
        AND PPPR.PP_KEY4 = CHILDPP.PP_KEY4
        AND PPPR.PP_KEY5 = CHILDPP.PP_KEY5
        AND CHILDPP.VERSION = UNAPIGEN.VALIDATEPPVERSION(PPPR.PR, PPPR.PR_VERSION, PPPR.PP_KEY1, PPPR.PP_KEY2, PPPR.PP_KEY3, PPPR.PP_KEY4, PPPR.PP_KEY5, CHILDPP.VERSION) 
        AND DECODE(UNAPIGEN.P_DD, '1', CHILDPP.AR1, '2', CHILDPP.AR2, '3', CHILDPP.AR3, '4', CHILDPP.AR4, '5', CHILDPP.AR5, '6', CHILDPP.AR6, '7', CHILDPP.AR7, '8', CHILDPP.AR8, '9', CHILDPP.AR9, '10', CHILDPP.AR10, '11', CHILDPP.AR11, '12', CHILDPP.AR12, '13', CHILDPP.AR13, '14', CHILDPP.AR14, '15', CHILDPP.AR15, '16', CHILDPP.AR16, '17', CHILDPP.AR17, '18', CHILDPP.AR18, '19', CHILDPP.AR19, '20', CHILDPP.AR20, '21', CHILDPP.AR21, '22', 
        CHILDPP.AR22, '23', CHILDPP.AR23, '24', CHILDPP.AR24, '25', CHILDPP.AR25, '26', CHILDPP.AR26, '27', CHILDPP.AR27, '28', CHILDPP.AR28, '29', CHILDPP.AR29, '30', CHILDPP.AR30, '31', CHILDPP.AR31, '32', CHILDPP.AR32, '33', CHILDPP.AR33, '34', CHILDPP.AR34, '35', CHILDPP.AR35, '36', CHILDPP.AR36, '37', CHILDPP.AR37, '38', CHILDPP.AR38, '39', CHILDPP.AR39, '40', CHILDPP.AR40, '41', CHILDPP.AR41, '42', CHILDPP.AR42, '43', CHILDPP.AR43, 
        '44', CHILDPP.AR44, '45', CHILDPP.AR45, '46', CHILDPP.AR46, '47', CHILDPP.AR47, '48', CHILDPP.AR48, '49', CHILDPP.AR49, '50', CHILDPP.AR50, '51', CHILDPP.AR51, '52', CHILDPP.AR52, '53', CHILDPP.AR53, '54', CHILDPP.AR54, '55', CHILDPP.AR55, '56', CHILDPP.AR56, '57', CHILDPP.AR57, '58', CHILDPP.AR58, '59', CHILDPP.AR59, '60', CHILDPP.AR60, '61', CHILDPP.AR61, '62', CHILDPP.AR62, '63', CHILDPP.AR63, '64', CHILDPP.AR64, '65', 
        CHILDPP.AR65, '66', CHILDPP.AR66, '67', CHILDPP.AR67, '68', CHILDPP.AR68, '69', CHILDPP.AR69, '70', CHILDPP.AR70, '71', CHILDPP.AR71, '72', CHILDPP.AR72, '73', CHILDPP.AR73, '74', CHILDPP.AR74, '75', CHILDPP.AR75, '76', CHILDPP.AR76, '77', CHILDPP.AR77, '78', CHILDPP.AR78, '79', CHILDPP.AR79, '80', CHILDPP.AR80, '81', CHILDPP.AR81, '82', CHILDPP.AR82, '83', CHILDPP.AR83, '84', CHILDPP.AR84, '85', CHILDPP.AR85, '86', 
        CHILDPP.AR86, '87', CHILDPP.AR87, '88', CHILDPP.AR88, '89', CHILDPP.AR89, '90', CHILDPP.AR90, '91', CHILDPP.AR91, '92', CHILDPP.AR92, '93', CHILDPP.AR93, '94', CHILDPP.AR94, '95', CHILDPP.AR95, '96', CHILDPP.AR96, '97', CHILDPP.AR97, '98', CHILDPP.AR98, '99', CHILDPP.AR99, '100', CHILDPP.AR100, '101', CHILDPP.AR101, '102', CHILDPP.AR102, '103', CHILDPP.AR103, '104', CHILDPP.AR104, '105', CHILDPP.AR105, '106', CHILDPP.AR106, '107', 
        CHILDPP.AR107, '108', CHILDPP.AR108, '109', CHILDPP.AR109, '110', CHILDPP.AR110, '111', CHILDPP.AR111, '112', CHILDPP.AR112, '113', CHILDPP.AR113, '114', CHILDPP.AR114, '115', CHILDPP.AR115, '116', CHILDPP.AR116, '117', CHILDPP.AR117, '118', CHILDPP.AR118, '119', CHILDPP.AR119, '120', CHILDPP.AR120, '121', CHILDPP.AR121, '122', CHILDPP.AR122, '123', CHILDPP.AR123, '124', CHILDPP.AR124, '125', CHILDPP.AR125, '126', CHILDPP.AR126,DECODE(UNAPIGEN.P_DD, '127', CHILDPP.AR127, '128', CHILDPP.AR128, 'W'))<>'N'
       );

   
   
   
   INSERT INTO UTASSIGNFULLTESTPLAN
   (
   OBJECT_TP ,
   OBJECT_ID ,
   OBJECT_VERSION ,
   TST_TP ,
   TST_ID ,
   TST_ID_VERSION ,
   TST_DESCRIPTION ,
   TST_NR_MEASUR ,
   PP  ,
   PP_VERSION, 
   PP_KEY1,
   PP_KEY2,
   PP_KEY3,
   PP_KEY4,
   PP_KEY5,
   PP_SEQ  ,
   PR ,
   PR_VERSION,
   PR_SEQ  ,
   MT,
   MT_VERSION,
   MT_SEQ)
   SELECT A_OBJECT_TP OBJECT_TP, A_OBJECT_ID OBJECT_ID, A_OBJECT_VERSION OBJECT_VERSION,
         'mt' TST_TP, PPPR.MT TST_ID, MT.VERSION TST_ID_VERSION, MT.DESCRIPTION TST_DESCRIPTION,
         NVL(PPPR.MT_NR_MEASUR, 1) TST_NR_MEASUR, AFT.PP ,AFT.PP_VERSION,
         AFT.PP_KEY1, AFT.PP_KEY2, AFT.PP_KEY3, AFT.PP_KEY4, AFT.PP_KEY5,
         AFT.PP_SEQ PP_SEQ, PPPR.PR PR, UNAPIGEN.VALIDATEVERSION('pr', PPPR.PR, PPPR.PR_VERSION) PR_VERSION,
         PPPR.SEQ PR_SEQ, PPPR.MT MT, MT.VERSION MT_VERSION,  1 MT_SEQ
   FROM UDMT MT, UTASSIGNFULLTESTPLAN AFT4PRAR, UTPPPR PPPR, UTASSIGNFULLTESTPLAN AFT
   WHERE AFT.OBJECT_TP =  A_OBJECT_TP
     AND AFT.OBJECT_ID =  A_OBJECT_ID
     AND AFT.OBJECT_VERSION =  A_OBJECT_VERSION
     AND AFT.TST_TP = 'pp'
     AND AFT.TST_ID = PPPR.PP
     AND AFT.TST_ID_VERSION = PPPR.VERSION
     AND AFT.PP = PPPR.PP
     AND AFT.PP_KEY1 = PPPR.PP_KEY1
     AND AFT.PP_KEY2 = PPPR.PP_KEY2
     AND AFT.PP_KEY3 = PPPR.PP_KEY3
     AND AFT.PP_KEY4 = PPPR.PP_KEY4
     AND AFT.PP_KEY5 = PPPR.PP_KEY5
     AND NVL(AFT.CONFIRM_ASSIGN,'0') <> '0'
     AND NVL(AFT.NEVER_CREATE_METHODS,'0') <> '1'
     AND PPPR.IS_PP='0'
     AND PPPR.MT IS NOT NULL
     AND PPPR.MT = MT.MT
     AND MT.VERSION = UNAPIGEN.VALIDATEVERSION('mt', PPPR.MT, PPPR.MT_VERSION)
     AND DECODE(UNAPIGEN.P_DD, '1', MT.AR1, '2', MT.AR2, '3', MT.AR3, '4', MT.AR4, '5', MT.AR5, '6', MT.AR6, '7', MT.AR7, '8', MT.AR8, '9', MT.AR9, '10', MT.AR10, '11', MT.AR11, '12', MT.AR12, '13', MT.AR13, '14', MT.AR14, '15', MT.AR15, '16', MT.AR16, '17', MT.AR17, '18', MT.AR18, '19', MT.AR19, '20', MT.AR20, '21', MT.AR21, '22', 
     MT.AR22, '23', MT.AR23, '24', MT.AR24, '25', MT.AR25, '26', MT.AR26, '27', MT.AR27, '28', MT.AR28, '29', MT.AR29, '30', MT.AR30, '31', MT.AR31, '32', MT.AR32, '33', MT.AR33, '34', MT.AR34, '35', MT.AR35, '36', MT.AR36, '37', MT.AR37, '38', MT.AR38, '39', MT.AR39, '40', MT.AR40, '41', MT.AR41, '42', MT.AR42, '43', MT.AR43, '44', 
     MT.AR44, '45', MT.AR45, '46', MT.AR46, '47', MT.AR47, '48', MT.AR48, '49', MT.AR49, '50', MT.AR50, '51', MT.AR51, '52', MT.AR52, '53', MT.AR53, '54', MT.AR54, '55', MT.AR55, '56', MT.AR56, '57', MT.AR57, '58', MT.AR58, '59', MT.AR59, '60', MT.AR60, '61', MT.AR61, '62', MT.AR62, '63', MT.AR63, '64', MT.AR64, '65', MT.AR65, '66', 
     MT.AR66, '67', MT.AR67, '68', MT.AR68, '69', MT.AR69, '70', MT.AR70, '71', MT.AR71, '72', MT.AR72, '73', MT.AR73, '74', MT.AR74, '75', MT.AR75, '76', MT.AR76, '77', MT.AR77, '78', MT.AR78, '79', MT.AR79, '80', MT.AR80, '81', MT.AR81, '82', MT.AR82, '83', MT.AR83, '84', MT.AR84, '85', MT.AR85, '86', MT.AR86, '87', MT.AR87, '88', 
     MT.AR88, '89', MT.AR89, '90', MT.AR90, '91', MT.AR91, '92', MT.AR92, '93', MT.AR93, '94', MT.AR94, '95', MT.AR95, '96', MT.AR96, '97', MT.AR97, '98', MT.AR98, '99', MT.AR99, '100', MT.AR100, '101', MT.AR101, '102', MT.AR102, '103', MT.AR103, '104', MT.AR104, '105', MT.AR105, '106', MT.AR106, '107', MT.AR107, '108', MT.AR108, '109', 
     MT.AR109, '110', MT.AR110, '111', MT.AR111, '112', MT.AR112, '113', MT.AR113, '114', MT.AR114, '115', MT.AR115, '116', MT.AR116, '117', MT.AR117, '118', MT.AR118, '119', MT.AR119, '120', MT.AR120, '121', MT.AR121, '122', MT.AR122, '123', MT.AR123, '124', MT.AR124, '125', MT.AR125, '126', MT.AR126,DECODE(UNAPIGEN.P_DD, '127', MT.AR127, '128', MT.AR128, 'W'))<>'N'
     AND AFT4PRAR.OBJECT_TP =  A_OBJECT_TP
     AND AFT4PRAR.OBJECT_ID =  A_OBJECT_ID
     AND AFT4PRAR.OBJECT_VERSION =  A_OBJECT_VERSION
     AND AFT4PRAR.TST_TP = 'pr'
     AND AFT4PRAR.TST_ID = PPPR.PR
     AND AFT4PRAR.TST_ID_VERSION = UNAPIGEN.VALIDATEVERSION('pr', PPPR.PR, PPPR.PR_VERSION)
     AND AFT4PRAR.PP = PPPR.PP
     AND AFT4PRAR.PR = PPPR.PR
     AND AFT4PRAR.PR_SEQ = PPPR.SEQ
     AND AFT4PRAR.PP_KEY1 = PPPR.PP_KEY1
     AND AFT4PRAR.PP_KEY2 = PPPR.PP_KEY2
     AND AFT4PRAR.PP_KEY3 = PPPR.PP_KEY3
     AND AFT4PRAR.PP_KEY4 = PPPR.PP_KEY4
     AND AFT4PRAR.PP_KEY5 = PPPR.PP_KEY5
   ;

   
   
   INSERT INTO UTASSIGNFULLTESTPLAN
   (
   OBJECT_TP ,
   OBJECT_ID ,
   OBJECT_VERSION ,
   TST_TP ,
   TST_ID ,
   TST_ID_VERSION ,
   TST_DESCRIPTION ,
   TST_NR_MEASUR ,
   PP  ,
   PP_VERSION, 
   PP_KEY1,
   PP_KEY2,
   PP_KEY3,
   PP_KEY4,
   PP_KEY5,
   PP_SEQ  ,
   PR ,
   PR_VERSION,
   PR_SEQ  ,
   MT,
   MT_VERSION,
   MT_SEQ)   
   SELECT A_OBJECT_TP OBJECT_TP, A_OBJECT_ID OBJECT_ID, A_OBJECT_VERSION OBJECT_VERSION,
          'mt' TST_TP, PRMT.MT TST_ID, MT.VERSION TST_ID_VERSION, MT.DESCRIPTION TST_DESCRIPTION,
          PRMT.NR_MEASUR TST_NR_MEASUR, AFT.PP PP, AFT.PP_VERSION PP_VERSION,
          AFT.PP_KEY1, AFT.PP_KEY2, AFT.PP_KEY3, AFT.PP_KEY4, AFT.PP_KEY5,
          AFT.PP_SEQ PP_SEQ, AFT.PR PR, AFT.PR_VERSION PR_VERSION,
          AFT.PR_SEQ PR_SEQ, PRMT.MT MT, MT.VERSION MT_VERSION, PRMT.SEQ MT_SEQ
   FROM UDMT MT, UTPRMT PRMT, UTASSIGNFULLTESTPLAN AFT, UTPPPR PPPR
   WHERE AFT.OBJECT_TP =  A_OBJECT_TP
     AND AFT.OBJECT_ID =  A_OBJECT_ID
     AND AFT.OBJECT_VERSION =  A_OBJECT_VERSION
     AND AFT.TST_TP = 'pr'
     AND AFT.TST_ID = PRMT.PR
     AND AFT.TST_ID_VERSION = PRMT.VERSION
     AND AFT.PP = PPPR.PP
     AND AFT.PP_KEY1 = PPPR.PP_KEY1
     AND AFT.PP_KEY2 = PPPR.PP_KEY2
     AND AFT.PP_KEY3 = PPPR.PP_KEY3
     AND AFT.PP_KEY4 = PPPR.PP_KEY4
     AND AFT.PP_KEY5 = PPPR.PP_KEY5
     AND NVL(AFT.NEVER_CREATE_METHODS,'0') <> '1'
     AND PRMT.MT = MT.MT
     AND MT.VERSION = UNAPIGEN.VALIDATEVERSION('mt', PRMT.MT, PRMT.MT_VERSION) 
     AND DECODE(UNAPIGEN.P_DD, '1', MT.AR1, '2', MT.AR2, '3', MT.AR3, '4', MT.AR4, '5', MT.AR5, '6', MT.AR6, '7', MT.AR7, '8', MT.AR8, '9', MT.AR9, '10', MT.AR10, '11', MT.AR11, '12', MT.AR12, '13', MT.AR13, '14', MT.AR14, '15', MT.AR15, '16', MT.AR16, '17', MT.AR17, '18', MT.AR18, '19', MT.AR19, '20', MT.AR20, '21', MT.AR21, '22', 
     MT.AR22, '23', MT.AR23, '24', MT.AR24, '25', MT.AR25, '26', MT.AR26, '27', MT.AR27, '28', MT.AR28, '29', MT.AR29, '30', MT.AR30, '31', MT.AR31, '32', MT.AR32, '33', MT.AR33, '34', MT.AR34, '35', MT.AR35, '36', MT.AR36, '37', MT.AR37, '38', MT.AR38, '39', MT.AR39, '40', MT.AR40, '41', MT.AR41, '42', MT.AR42, '43', MT.AR43, '44', 
     MT.AR44, '45', MT.AR45, '46', MT.AR46, '47', MT.AR47, '48', MT.AR48, '49', MT.AR49, '50', MT.AR50, '51', MT.AR51, '52', MT.AR52, '53', MT.AR53, '54', MT.AR54, '55', MT.AR55, '56', MT.AR56, '57', MT.AR57, '58', MT.AR58, '59', MT.AR59, '60', MT.AR60, '61', MT.AR61, '62', MT.AR62, '63', MT.AR63, '64', MT.AR64, '65', MT.AR65, '66', 
     MT.AR66, '67', MT.AR67, '68', MT.AR68, '69', MT.AR69, '70', MT.AR70, '71', MT.AR71, '72', MT.AR72, '73', MT.AR73, '74', MT.AR74, '75', MT.AR75, '76', MT.AR76, '77', MT.AR77, '78', MT.AR78, '79', MT.AR79, '80', MT.AR80, '81', MT.AR81, '82', MT.AR82, '83', MT.AR83, '84', MT.AR84, '85', MT.AR85, '86', MT.AR86, '87', MT.AR87, '88', 
     MT.AR88, '89', MT.AR89, '90', MT.AR90, '91', MT.AR91, '92', MT.AR92, '93', MT.AR93, '94', MT.AR94, '95', MT.AR95, '96', MT.AR96, '97', MT.AR97, '98', MT.AR98, '99', MT.AR99, '100', MT.AR100, '101', MT.AR101, '102', MT.AR102, '103', MT.AR103, '104', MT.AR104, '105', MT.AR105, '106', MT.AR106, '107', MT.AR107, '108', MT.AR108, '109', 
     MT.AR109, '110', MT.AR110, '111', MT.AR111, '112', MT.AR112, '113', MT.AR113, '114', MT.AR114, '115', MT.AR115, '116', MT.AR116, '117', MT.AR117, '118', MT.AR118, '119', MT.AR119, '120', MT.AR120, '121', MT.AR121, '122', MT.AR122, '123', MT.AR123, '124', MT.AR124, '125', MT.AR125, '126', MT.AR126,DECODE(UNAPIGEN.P_DD, '127', MT.AR127, '128', MT.AR128, 'W'))<>'N'
     
     AND PPPR.VERSION = AFT.PP_VERSION
     AND PPPR.SEQ = AFT.PR_SEQ
     AND PPPR.MT IS NULL
     ;

   RETURN 0;
END FILLFULLTESTPLANTABLE;

FUNCTION GETFULLTESTPLAN                                    
(A_OBJECT_TP             IN      VARCHAR2,                  
 A_OBJECT_ID             IN      VARCHAR2,                  
 A_OBJECT_VERSION        IN      VARCHAR2,                  
 A_TST_TP                OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_TST_ID                OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_TST_ID_VERSION        OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PP_SEQ                OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_PR_SEQ                OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_MT_SEQ                OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_PP_KEY1               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PP_KEY2               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PP_KEY3               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PP_KEY4               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PP_KEY5               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_TST_DESCRIPTION       OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_TST_NR_MEASUR         OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_TST_ALREADY_ASSIGNED  OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NR_OF_ROWS            IN OUT  NUMBER,                    
 A_NEXT_ROWS             IN      NUMBER)                    
RETURN NUMBER IS

L_NOT_ASSIGNED          INTEGER;
L_ASSIGNED              INTEGER;
L_SOME_ASSIGNED         INTEGER;
L_COUNT_SC              NUMBER;
L_REF_OBJECT_TP         VARCHAR2(4);
L_REF_OBJECT_ID         VARCHAR2(20);
L_REF_OBJECT_VERSION    VARCHAR2(20);
L_TST_TP                UNAPIGEN.VC20_TABLE_TYPE;
L_TST_ID                UNAPIGEN.VC20_TABLE_TYPE;
L_TST_ID_VERSION        UNAPIGEN.VC20_TABLE_TYPE;
L_PP_SEQ                UNAPIGEN.NUM_TABLE_TYPE;
L_PR_SEQ                UNAPIGEN.NUM_TABLE_TYPE;
L_MT_SEQ                UNAPIGEN.NUM_TABLE_TYPE;
L_PP_KEY1               UNAPIGEN.VC20_TABLE_TYPE;
L_PP_KEY2               UNAPIGEN.VC20_TABLE_TYPE;
L_PP_KEY3               UNAPIGEN.VC20_TABLE_TYPE;
L_PP_KEY4               UNAPIGEN.VC20_TABLE_TYPE;
L_PP_KEY5               UNAPIGEN.VC20_TABLE_TYPE;
L_TST_DESCRIPTION       UNAPIGEN.VC40_TABLE_TYPE;
L_TST_NR_MEASUR         UNAPIGEN.NUM_TABLE_TYPE;
L_TST_ALREADY_ASSIGNED  UNAPIGEN.CHAR1_TABLE_TYPE;
L_TST_CURRENT_PP        UNAPIGEN.VC20_TABLE_TYPE;
L_TST_CURRENT_PR        UNAPIGEN.VC20_TABLE_TYPE;
L_RET                   NUMBER;
L_PP_KEY1_FILTER_VALUES VC20_NESTEDTABLE_TYPE := VC20_NESTEDTABLE_TYPE();
L_PP_KEY2_FILTER_VALUES VC20_NESTEDTABLE_TYPE := VC20_NESTEDTABLE_TYPE();
L_PP_KEY3_FILTER_VALUES VC20_NESTEDTABLE_TYPE := VC20_NESTEDTABLE_TYPE();
L_PP_KEY4_FILTER_VALUES VC20_NESTEDTABLE_TYPE := VC20_NESTEDTABLE_TYPE();
L_PP_KEY5_FILTER_VALUES VC20_NESTEDTABLE_TYPE := VC20_NESTEDTABLE_TYPE();

L_REC_MAINSEQ           NUMBER;
L_REC_TST_TP            VARCHAR2(20);
L_REC_TST_ID            VARCHAR2(20);
L_REC_TST_ID_VERSION    VARCHAR2(20);
L_REC_TST_DESCRIPTION   VARCHAR2(40);
L_REC_PP                VARCHAR2(20);
L_REC_PP_KEY1           VARCHAR2(20);
L_REC_PP_KEY2           VARCHAR2(20);
L_REC_PP_KEY3           VARCHAR2(20);
L_REC_PP_KEY4           VARCHAR2(20);
L_REC_PP_KEY5           VARCHAR2(20);
L_REC_PP_SEQ            NUMBER;
L_REC_PR                VARCHAR2(20);
L_REC_PR_SEQ            NUMBER;
L_REC_MT                VARCHAR2(20);
L_REC_MT_SEQ            NUMBER;
L_REC_TST_NR_MEASUR     NUMBER;
L_REC_ALREADY_ASSIGNED  CHAR(1);

CURSOR L_ST_CURSOR (A_SC VARCHAR2) IS
   SELECT ST, ST_VERSION
   FROM UTSC
   WHERE SC=A_SC;

CURSOR L_RT_CURSOR (A_RQ VARCHAR2) IS
   SELECT RT, RT_VERSION
   FROM UTRQ
   WHERE RQ=A_RQ;

CURSOR L_COUNTRQSC_CURSOR (A_RQ VARCHAR2) IS
   SELECT COUNT(SC)
   FROM UTRQSC
   WHERE RQ=A_RQ;
   
BEGIN

   L_NOT_ASSIGNED  := 0;
   L_ASSIGNED      := 1;
   L_SOME_ASSIGNED := 2;

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_OBJECT_TP, ' ') NOT IN ('rq', 'sc', 'rt', 'st') THEN
      RETURN(UNAPIGEN.DBERR_OBJTP);
   END IF;
   
   IF NVL(A_OBJECT_ID, ' ') = ' ' THEN
      RETURN(UNAPIGEN.DBERR_NOOBJID);
   END IF;
   
   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;
   P_CACHE_AFTP := 'NO';
   
   
   IF A_NEXT_ROWS = -1 THEN
      IF DBMS_SQL.IS_OPEN(L_CONFIG_DETAILS_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(L_CONFIG_DETAILS_CURSOR);
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;
   
   
   IF A_NEXT_ROWS = 1 THEN
      IF NOT DBMS_SQL.IS_OPEN(L_CONFIG_DETAILS_CURSOR) THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN

      IF NOT DBMS_SQL.IS_OPEN(L_CONFIG_DETAILS_CURSOR) THEN
         
         IF A_OBJECT_TP IN ('rt', 'st') THEN
            L_REF_OBJECT_TP := A_OBJECT_TP;
            L_REF_OBJECT_ID := A_OBJECT_ID;
            L_REF_OBJECT_VERSION := A_OBJECT_VERSION;
         ELSIF A_OBJECT_TP = 'sc' THEN

            
            
            IF UNAPIGEN.P_PP_KEY4PRODUCT IS NULL THEN
               RETURN(UNAPIGEN.DBERR_SETCONNECTION);
            END IF;

            L_REF_OBJECT_TP := 'st';
            OPEN L_ST_CURSOR(A_OBJECT_ID);
            FETCH L_ST_CURSOR
            INTO L_REF_OBJECT_ID, L_REF_OBJECT_VERSION;
            CLOSE L_ST_CURSOR;
                        
            
            IF UNAPIGEN.P_PP_KEY_NR_OF_ROWS > 0 THEN
               FOR L_SCGK_REC IN (SELECT GK, VALUE 
                                  FROM UTSCGK 
                                  WHERE SC=A_OBJECT_ID) LOOP
                  FOR L_X IN 1..UNAPIGEN.P_PP_KEY_NR_OF_ROWS LOOP
                     
                     IF UNAPIGEN.P_PP_KEY_TP_TAB(L_X) ='gk' THEN
                        IF L_SCGK_REC.GK = SUBSTR(UNAPIGEN.P_PP_KEY_NAME_TAB(L_X),4) THEN
                           IF L_X = 1 THEN
                              L_PP_KEY1_FILTER_VALUES.EXTEND;
                              L_PP_KEY1_FILTER_VALUES(L_PP_KEY1_FILTER_VALUES.COUNT) :=  L_SCGK_REC.VALUE;
                           ELSIF L_X = 2 THEN
                              L_PP_KEY2_FILTER_VALUES.EXTEND;
                              L_PP_KEY2_FILTER_VALUES(L_PP_KEY2_FILTER_VALUES.COUNT) :=  L_SCGK_REC.VALUE;
                           ELSIF L_X = 3 THEN
                              L_PP_KEY3_FILTER_VALUES.EXTEND;
                              L_PP_KEY3_FILTER_VALUES(L_PP_KEY3_FILTER_VALUES.COUNT) :=  L_SCGK_REC.VALUE;
                           ELSIF L_X = 4 THEN
                              L_PP_KEY4_FILTER_VALUES.EXTEND;
                              L_PP_KEY4_FILTER_VALUES(L_PP_KEY4_FILTER_VALUES.COUNT) :=  L_SCGK_REC.VALUE;
                           ELSIF L_X = 5 THEN
                              L_PP_KEY5_FILTER_VALUES.EXTEND;
                              L_PP_KEY5_FILTER_VALUES(L_PP_KEY5_FILTER_VALUES.COUNT) :=  L_SCGK_REC.VALUE;
                           END IF;
                        END IF;
                     END IF;
                  END LOOP;
               END LOOP;
            END IF;

         ELSIF A_OBJECT_TP = 'rq' THEN
            L_REF_OBJECT_TP := 'rt';
            OPEN L_RT_CURSOR(A_OBJECT_ID);
            FETCH L_RT_CURSOR
            INTO L_REF_OBJECT_ID, L_REF_OBJECT_VERSION;
            CLOSE L_RT_CURSOR;
         END IF;
         IF P_AFTP_ALREADY_ASSIGNED IS NULL THEN
            OPEN C_SYSTEM ('AFT_ALREADY_ASSIGNED');
            FETCH C_SYSTEM INTO P_AFTP_ALREADY_ASSIGNED;
            IF C_SYSTEM%NOTFOUND THEN
               P_AFTP_ALREADY_ASSIGNED := 'NO';
            END IF;
            CLOSE C_SYSTEM;
         END IF;

         
         IF L_PP_KEY1_FILTER_VALUES.COUNT > 0 THEN
            L_PP_KEY1_FILTER_VALUES.EXTEND;
            L_PP_KEY1_FILTER_VALUES(L_PP_KEY1_FILTER_VALUES.COUNT) :=  ' ';
         END IF;
         IF L_PP_KEY2_FILTER_VALUES.COUNT > 0 THEN
            L_PP_KEY2_FILTER_VALUES.EXTEND;
            L_PP_KEY2_FILTER_VALUES(L_PP_KEY2_FILTER_VALUES.COUNT) :=  ' ';
         END IF;
         IF L_PP_KEY3_FILTER_VALUES.COUNT > 0 THEN
            L_PP_KEY3_FILTER_VALUES.EXTEND;
            L_PP_KEY3_FILTER_VALUES(L_PP_KEY3_FILTER_VALUES.COUNT) :=  ' ';
         END IF;
         IF L_PP_KEY4_FILTER_VALUES.COUNT > 0 THEN
            L_PP_KEY4_FILTER_VALUES.EXTEND;
            L_PP_KEY4_FILTER_VALUES(L_PP_KEY4_FILTER_VALUES.COUNT) :=  ' ';
         END IF;
         IF L_PP_KEY5_FILTER_VALUES.COUNT > 0 THEN
            L_PP_KEY5_FILTER_VALUES.EXTEND;
            L_PP_KEY5_FILTER_VALUES(L_PP_KEY5_FILTER_VALUES.COUNT) :=  ' ';
         END IF;
         
         IF UPPER(P_CACHE_AFTP) = 'YES' THEN
            
            
            
            L_SQL_STRING    :=   'SELECT 1 mainseq, tst_tp, tst_id,  tst_id_version, tst_description, '
                               ||'pp, pp_key1, pp_key2, pp_key3, pp_key4, pp_key5, pp_seq, pr, pr_seq, '
                               ||'mt, mt_seq, tst_nr_measur, already_assigned '
                               ||'FROM dd'||UNAPIGEN.P_DD||'.uvassignfulltestplan '
                               ||'WHERE object_tp = '''||L_REF_OBJECT_TP
                               ||''' AND object_id = '''||REPLACE(L_REF_OBJECT_ID, '''', '''''')           
                               ||''' AND object_version = '''||REPLACE(L_REF_OBJECT_VERSION, '''', '''''') 
                               ||''' ORDER BY pp_seq, pp, pp_version, pp_key1, pp_key2, pp_key3, pp_key4, pp_key5, '
                               ||'pr_seq, pr, pr_version, mt_seq, mt, mt_version';
            L_CONFIG_DETAILS_CURSOR := DBMS_SQL.OPEN_CURSOR;
            DBMS_SQL.PARSE(L_CONFIG_DETAILS_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

            DBMS_SQL.DEFINE_COLUMN     (L_CONFIG_DETAILS_CURSOR, 1,  L_REC_MAINSEQ             );
            DBMS_SQL.DEFINE_COLUMN     (L_CONFIG_DETAILS_CURSOR, 2,  L_REC_TST_TP,           20);
            DBMS_SQL.DEFINE_COLUMN     (L_CONFIG_DETAILS_CURSOR, 3,  L_REC_TST_ID,           20);
            DBMS_SQL.DEFINE_COLUMN     (L_CONFIG_DETAILS_CURSOR, 4,  L_REC_TST_ID_VERSION,   20);
            DBMS_SQL.DEFINE_COLUMN     (L_CONFIG_DETAILS_CURSOR, 5,  L_REC_TST_DESCRIPTION,  40);
            DBMS_SQL.DEFINE_COLUMN     (L_CONFIG_DETAILS_CURSOR, 6,  L_REC_PP,               20);
            DBMS_SQL.DEFINE_COLUMN     (L_CONFIG_DETAILS_CURSOR, 7,  L_REC_PP_KEY1,          20);
            DBMS_SQL.DEFINE_COLUMN     (L_CONFIG_DETAILS_CURSOR, 8,  L_REC_PP_KEY2,          20);
            DBMS_SQL.DEFINE_COLUMN     (L_CONFIG_DETAILS_CURSOR, 9,  L_REC_PP_KEY3,          20);
            DBMS_SQL.DEFINE_COLUMN     (L_CONFIG_DETAILS_CURSOR, 10, L_REC_PP_KEY4,          20);
            DBMS_SQL.DEFINE_COLUMN     (L_CONFIG_DETAILS_CURSOR, 11, L_REC_PP_KEY5,          20);
            DBMS_SQL.DEFINE_COLUMN     (L_CONFIG_DETAILS_CURSOR, 12, L_REC_PP_SEQ              );
            DBMS_SQL.DEFINE_COLUMN     (L_CONFIG_DETAILS_CURSOR, 13, L_REC_PR,               20);
            DBMS_SQL.DEFINE_COLUMN     (L_CONFIG_DETAILS_CURSOR, 14, L_REC_PR_SEQ              );
            DBMS_SQL.DEFINE_COLUMN     (L_CONFIG_DETAILS_CURSOR, 15, L_REC_MT,               20);
            DBMS_SQL.DEFINE_COLUMN     (L_CONFIG_DETAILS_CURSOR, 16, L_REC_MT_SEQ              );
            DBMS_SQL.DEFINE_COLUMN     (L_CONFIG_DETAILS_CURSOR, 17, L_REC_TST_NR_MEASUR       );
            DBMS_SQL.DEFINE_COLUMN_CHAR(L_CONFIG_DETAILS_CURSOR, 18, L_REC_ALREADY_ASSIGNED,  1);
            
            L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_CONFIG_DETAILS_CURSOR);
            
            IF L_RESULT = 0 THEN
              
              L_RET := FILLFULLTESTPLANTABLE (L_REF_OBJECT_TP, L_REF_OBJECT_ID, L_REF_OBJECT_VERSION,
                                              L_PP_KEY1_FILTER_VALUES,
                                              L_PP_KEY2_FILTER_VALUES,
                                              L_PP_KEY3_FILTER_VALUES,
                                              L_PP_KEY4_FILTER_VALUES,
                                              L_PP_KEY5_FILTER_VALUES,
                                              L_PP_KEY1_FILTER_VALUES.COUNT,
                                              L_PP_KEY2_FILTER_VALUES.COUNT,
                                              L_PP_KEY3_FILTER_VALUES.COUNT,
                                              L_PP_KEY4_FILTER_VALUES.COUNT,
                                              L_PP_KEY5_FILTER_VALUES.COUNT
                                              ) ;
            END IF;
            
            DBMS_SQL.COLUMN_VALUE     (L_CONFIG_DETAILS_CURSOR, 1,  L_REC_MAINSEQ         );
            DBMS_SQL.COLUMN_VALUE     (L_CONFIG_DETAILS_CURSOR, 2,  L_REC_TST_TP          );
            DBMS_SQL.COLUMN_VALUE     (L_CONFIG_DETAILS_CURSOR, 3,  L_REC_TST_ID          );
            DBMS_SQL.COLUMN_VALUE     (L_CONFIG_DETAILS_CURSOR, 4,  L_REC_TST_ID_VERSION  );
            DBMS_SQL.COLUMN_VALUE     (L_CONFIG_DETAILS_CURSOR, 5,  L_REC_TST_DESCRIPTION );
            DBMS_SQL.COLUMN_VALUE     (L_CONFIG_DETAILS_CURSOR, 6,  L_REC_PP              );
            DBMS_SQL.COLUMN_VALUE     (L_CONFIG_DETAILS_CURSOR, 7,  L_REC_PP_KEY1         );
            DBMS_SQL.COLUMN_VALUE     (L_CONFIG_DETAILS_CURSOR, 8,  L_REC_PP_KEY2         );
            DBMS_SQL.COLUMN_VALUE     (L_CONFIG_DETAILS_CURSOR, 9,  L_REC_PP_KEY3         );
            DBMS_SQL.COLUMN_VALUE     (L_CONFIG_DETAILS_CURSOR, 10, L_REC_PP_KEY4         );
            DBMS_SQL.COLUMN_VALUE     (L_CONFIG_DETAILS_CURSOR, 11, L_REC_PP_KEY5         );
            DBMS_SQL.COLUMN_VALUE     (L_CONFIG_DETAILS_CURSOR, 12, L_REC_PP_SEQ          );
            DBMS_SQL.COLUMN_VALUE     (L_CONFIG_DETAILS_CURSOR, 13, L_REC_PR              );
            DBMS_SQL.COLUMN_VALUE     (L_CONFIG_DETAILS_CURSOR, 14, L_REC_PR_SEQ          );
            DBMS_SQL.COLUMN_VALUE     (L_CONFIG_DETAILS_CURSOR, 15, L_REC_MT              );
            DBMS_SQL.COLUMN_VALUE     (L_CONFIG_DETAILS_CURSOR, 16, L_REC_MT_SEQ          );
            DBMS_SQL.COLUMN_VALUE     (L_CONFIG_DETAILS_CURSOR, 17, L_REC_TST_NR_MEASUR   );
            DBMS_SQL.COLUMN_VALUE_CHAR(L_CONFIG_DETAILS_CURSOR, 18, L_REC_ALREADY_ASSIGNED);
            
            DBMS_SQL.CLOSE_CURSOR(L_CONFIG_DETAILS_CURSOR);
         ELSE  
            L_RET := FILLFULLTESTPLANTABLE (L_REF_OBJECT_TP, L_REF_OBJECT_ID, L_REF_OBJECT_VERSION,
                                            L_PP_KEY1_FILTER_VALUES,
                                            L_PP_KEY2_FILTER_VALUES,
                                            L_PP_KEY3_FILTER_VALUES,
                                            L_PP_KEY4_FILTER_VALUES,
                                            L_PP_KEY5_FILTER_VALUES,
                                            L_PP_KEY1_FILTER_VALUES.COUNT,
                                            L_PP_KEY2_FILTER_VALUES.COUNT,
                                            L_PP_KEY3_FILTER_VALUES.COUNT,
                                            L_PP_KEY4_FILTER_VALUES.COUNT,
                                            L_PP_KEY5_FILTER_VALUES.COUNT
                                            ) ;
         END IF;

         IF UPPER(P_AFTP_ALREADY_ASSIGNED) = 'YES' THEN 
            
            IF A_OBJECT_TP = 'sc' THEN

               UPDATE UTASSIGNFULLTESTPLAN 
               SET ALREADY_ASSIGNED = '1' 
               WHERE OBJECT_TP ='st' AND
                  OBJECT_ID= L_REF_OBJECT_ID AND
                  OBJECT_VERSION = L_REF_OBJECT_VERSION AND
                    (TST_TP, TST_ID, TST_ID_VERSION, 
                     PP, PP_VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5,
                     NVL(PR, ' '), NVL(PR_VERSION, ' '), NVL(MT, ' '), NVL(MT_VERSION, ' ')) 
                  IN
                  (SELECT 
                     'pp' TST_TP, A.PG  TST_ID, PP_VERSION TST_ID_VERSION, 
                     A.PG PP, A.PP_VERSION PP_VERSION, A.PP_KEY1 PP_KEY1, A.PP_KEY2 PP_KEY2, A.PP_KEY3 PP_KEY3, A.PP_KEY4 PP_KEY4, A.PP_KEY5 PP_KEY5,
                     ' '   PR, ' ' PR_VERSION,  ' '   MT, ' ' MT_VERSION 
                   FROM UTSCPG A 
                   WHERE A.SC= A_OBJECT_ID 
                   UNION ALL
                   SELECT 
                     'pr' TST_TP, B.PA TST_ID, PR_VERSION TST_ID_VERSION, 
                      A.PG PP, A.PP_VERSION PP_VERSION, A.PP_KEY1 PP_KEY1, A.PP_KEY2 PP_KEY2, A.PP_KEY3 PP_KEY3, A.PP_KEY4 PP_KEY4, A.PP_KEY5 PP_KEY5,
                      B.PA PR, B.PR_VERSION PR_VERSION, ' '   ME, ' ' MT_VERSION
                   FROM UTSCPG A, UTSCPA B 
                   WHERE A.SC= A_OBJECT_ID 
                   AND A.SC=B.SC
                   AND A.PG=B.PG
                   AND A.PGNODE=B.PGNODE
                   UNION ALL
                   SELECT 
                     'mt' TST_TP, C.ME TST_ID, C.MT_VERSION TST_ID_VERSION,
                     A.PG PP, A.PP_VERSION PP_VERSION, A.PP_KEY1 PP_KEY1, A.PP_KEY2 PP_KEY2, A.PP_KEY3 PP_KEY3, A.PP_KEY4 PP_KEY4, A.PP_KEY5 PP_KEY5, 
                     B.PA PR, B.PR_VERSION PR_VERSION, C.ME MT, C.MT_VERSION MT_VERSION
                   FROM UTSCPG A, UTSCPA B, UTSCME C
                   WHERE A.SC= A_OBJECT_ID
                   AND A.SC=B.SC
                   AND A.PG=B.PG
                   AND A.PGNODE=B.PGNODE
                   AND B.SC=C.SC
                   AND B.PG=C.PG
                   AND B.PGNODE=C.PGNODE
                   AND B.PA=C.PA
                   AND B.PANODE=C.PANODE   
                   );
            END IF;
            IF A_OBJECT_TP = 'rq' THEN

               OPEN L_COUNTRQSC_CURSOR(A_OBJECT_ID);
               FETCH L_COUNTRQSC_CURSOR
               INTO L_COUNT_SC;
               CLOSE L_COUNTRQSC_CURSOR;

               UPDATE UTASSIGNFULLTESTPLAN 
               SET ALREADY_ASSIGNED = '1' 
               WHERE OBJECT_TP ='rt' AND
                  OBJECT_ID= L_REF_OBJECT_ID AND
                  OBJECT_VERSION = L_REF_OBJECT_VERSION AND
                     (TST_TP, TST_ID, TST_ID_VERSION,
                      PP, PP_VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, 
                      NVL(PR, ' '), NVL(PR_VERSION, ' '), NVL(MT, ' '), NVL(MT_VERSION, ' ')) 
                  IN
                  (SELECT
                      'pp' TST_TP, A.PG  TST_ID, PP_VERSION TST_ID_VERSION,
                      A.PG PP, A.PP_VERSION PP_VERSION, A.PP_KEY1 PP_KEY1, A.PP_KEY2 PP_KEY2, A.PP_KEY3 PP_KEY3, A.PP_KEY4 PP_KEY4, A.PP_KEY5 PP_KEY5,
                      ' '   PR, ' ' PR_VERSION,  ' '   MT, ' ' MT_VERSION 
                   FROM UTSCPG A 
                   WHERE A.SC IN (SELECT SC FROM UTRQSC WHERE RQ = A_OBJECT_ID )
                   UNION ALL
                   SELECT 
                     'pr' TST_TP, B.PA TST_ID, PR_VERSION TST_ID_VERSION, 
                     A.PG PP, A.PP_VERSION PP_VERSION, A.PP_KEY1 PP_KEY1, A.PP_KEY2 PP_KEY2, A.PP_KEY3 PP_KEY3, A.PP_KEY4 PP_KEY4, A.PP_KEY5 PP_KEY5,
                     B.PA PR, B.PR_VERSION PR_VERSION, ' '   ME, ' ' MT_VERSION
                   FROM UTSCPG A, UTSCPA B 
                   WHERE A.SC IN (SELECT SC FROM UTRQSC WHERE RQ = A_OBJECT_ID )
                   AND A.SC=B.SC
                   AND A.PG=B.PG
                   AND A.PGNODE=B.PGNODE
                   UNION ALL
                   SELECT 
                     'mt' TST_TP, C.ME TST_ID, C.MT_VERSION TST_ID_VERSION, 
                     A.PG PP, A.PP_VERSION PP_VERSION, A.PP_KEY1 PP_KEY1, A.PP_KEY2 PP_KEY2, A.PP_KEY3 PP_KEY3, A.PP_KEY4 PP_KEY4, A.PP_KEY5 PP_KEY5, 
                     B.PA PR, B.PR_VERSION PR_VERSION, C.ME MT, C.MT_VERSION MT_VERSION
                   FROM UTSCPG A, UTSCPA B, UTSCME C
                   WHERE A.SC IN (SELECT SC FROM UTRQSC WHERE RQ = A_OBJECT_ID )
                   AND A.SC=B.SC
                   AND A.PG=B.PG
                   AND A.PGNODE=B.PGNODE
                   AND B.SC=C.SC
                   AND B.PG=C.PG
                   AND B.PGNODE=C.PGNODE
                   AND B.PA=C.PA
                   AND B.PANODE=C.PANODE   
                   );
            END IF;
         END IF;
        
         
         
         
         
         L_SQL_STRING    :=   'SELECT 1 mainseq, tst_tp, tst_id,  tst_id_version, tst_description, '
                            ||'pp, pp_key1, pp_key2, pp_key3, pp_key4, pp_key5, pp_seq, pr, pr_seq, '
                            ||'mt, mt_seq, tst_nr_measur, already_assigned '
                            ||'FROM dd'||UNAPIGEN.P_DD||'.uvassignfulltestplan '
                            ||'WHERE object_tp = '''||L_REF_OBJECT_TP
                            ||''' AND object_id = '''||REPLACE(L_REF_OBJECT_ID, '''', '''''')           
                            ||''' AND object_version = '''||REPLACE(L_REF_OBJECT_VERSION, '''', '''''') 
                            ||''' ORDER BY pp_seq, pp, pp_version, pp_key1, pp_key2, pp_key3, pp_key4, pp_key5, '
                            ||'pr_seq, pr, pr_version, mt_seq, mt, mt_version';
         L_CONFIG_DETAILS_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;

      DBMS_SQL.PARSE(L_CONFIG_DETAILS_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

      DBMS_SQL.DEFINE_COLUMN     (L_CONFIG_DETAILS_CURSOR, 1,  L_REC_MAINSEQ             );
      DBMS_SQL.DEFINE_COLUMN     (L_CONFIG_DETAILS_CURSOR, 2,  L_REC_TST_TP,           20);
      DBMS_SQL.DEFINE_COLUMN     (L_CONFIG_DETAILS_CURSOR, 3,  L_REC_TST_ID,           20);
      DBMS_SQL.DEFINE_COLUMN     (L_CONFIG_DETAILS_CURSOR, 4,  L_REC_TST_ID_VERSION,   20);
      DBMS_SQL.DEFINE_COLUMN     (L_CONFIG_DETAILS_CURSOR, 5,  L_REC_TST_DESCRIPTION,  40);
      DBMS_SQL.DEFINE_COLUMN     (L_CONFIG_DETAILS_CURSOR, 6,  L_REC_PP,               20);
      DBMS_SQL.DEFINE_COLUMN     (L_CONFIG_DETAILS_CURSOR, 7,  L_REC_PP_KEY1,          20);
      DBMS_SQL.DEFINE_COLUMN     (L_CONFIG_DETAILS_CURSOR, 8,  L_REC_PP_KEY2,          20);
      DBMS_SQL.DEFINE_COLUMN     (L_CONFIG_DETAILS_CURSOR, 9,  L_REC_PP_KEY3,          20);
      DBMS_SQL.DEFINE_COLUMN     (L_CONFIG_DETAILS_CURSOR, 10, L_REC_PP_KEY4,          20);
      DBMS_SQL.DEFINE_COLUMN     (L_CONFIG_DETAILS_CURSOR, 11, L_REC_PP_KEY5,          20);
      DBMS_SQL.DEFINE_COLUMN     (L_CONFIG_DETAILS_CURSOR, 12, L_REC_PP_SEQ              );
      DBMS_SQL.DEFINE_COLUMN     (L_CONFIG_DETAILS_CURSOR, 13, L_REC_PR,               20);
      DBMS_SQL.DEFINE_COLUMN     (L_CONFIG_DETAILS_CURSOR, 14, L_REC_PR_SEQ              );
      DBMS_SQL.DEFINE_COLUMN     (L_CONFIG_DETAILS_CURSOR, 15, L_REC_MT,               20);
      DBMS_SQL.DEFINE_COLUMN     (L_CONFIG_DETAILS_CURSOR, 16, L_REC_MT_SEQ              );
      DBMS_SQL.DEFINE_COLUMN     (L_CONFIG_DETAILS_CURSOR, 17, L_REC_TST_NR_MEASUR       );
      DBMS_SQL.DEFINE_COLUMN_CHAR(L_CONFIG_DETAILS_CURSOR, 18, L_REC_ALREADY_ASSIGNED,  1);

      L_RESULT := DBMS_SQL.EXECUTE(L_CONFIG_DETAILS_CURSOR);
   END IF;
   L_FETCHED_ROWS := 0;
   L_RESULT := DBMS_SQL.FETCH_ROWS(L_CONFIG_DETAILS_CURSOR);
            
   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE     (L_CONFIG_DETAILS_CURSOR, 1,  L_REC_MAINSEQ         );
      DBMS_SQL.COLUMN_VALUE     (L_CONFIG_DETAILS_CURSOR, 2,  L_REC_TST_TP          );
      DBMS_SQL.COLUMN_VALUE     (L_CONFIG_DETAILS_CURSOR, 3,  L_REC_TST_ID          );
      DBMS_SQL.COLUMN_VALUE     (L_CONFIG_DETAILS_CURSOR, 4,  L_REC_TST_ID_VERSION  );
      DBMS_SQL.COLUMN_VALUE     (L_CONFIG_DETAILS_CURSOR, 5,  L_REC_TST_DESCRIPTION );
      DBMS_SQL.COLUMN_VALUE     (L_CONFIG_DETAILS_CURSOR, 6,  L_REC_PP              );
      DBMS_SQL.COLUMN_VALUE     (L_CONFIG_DETAILS_CURSOR, 7,  L_REC_PP_KEY1         );
      DBMS_SQL.COLUMN_VALUE     (L_CONFIG_DETAILS_CURSOR, 8,  L_REC_PP_KEY2         );
      DBMS_SQL.COLUMN_VALUE     (L_CONFIG_DETAILS_CURSOR, 9,  L_REC_PP_KEY3         );
      DBMS_SQL.COLUMN_VALUE     (L_CONFIG_DETAILS_CURSOR, 10, L_REC_PP_KEY4         );
      DBMS_SQL.COLUMN_VALUE     (L_CONFIG_DETAILS_CURSOR, 11, L_REC_PP_KEY5         );
      DBMS_SQL.COLUMN_VALUE     (L_CONFIG_DETAILS_CURSOR, 12, L_REC_PP_SEQ          );
      DBMS_SQL.COLUMN_VALUE     (L_CONFIG_DETAILS_CURSOR, 13, L_REC_PR              );
      DBMS_SQL.COLUMN_VALUE     (L_CONFIG_DETAILS_CURSOR, 14, L_REC_PR_SEQ          );
      DBMS_SQL.COLUMN_VALUE     (L_CONFIG_DETAILS_CURSOR, 15, L_REC_MT              );
      DBMS_SQL.COLUMN_VALUE     (L_CONFIG_DETAILS_CURSOR, 16, L_REC_MT_SEQ          );
      DBMS_SQL.COLUMN_VALUE     (L_CONFIG_DETAILS_CURSOR, 17, L_REC_TST_NR_MEASUR   );
      DBMS_SQL.COLUMN_VALUE_CHAR(L_CONFIG_DETAILS_CURSOR, 18, L_REC_ALREADY_ASSIGNED);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      L_TST_TP(L_FETCHED_ROWS)               := L_REC_TST_TP;
      L_TST_ID(L_FETCHED_ROWS)               := L_REC_TST_ID;
      L_TST_ID_VERSION(L_FETCHED_ROWS)       := L_REC_TST_ID_VERSION;
      L_TST_DESCRIPTION(L_FETCHED_ROWS)      := L_REC_TST_DESCRIPTION;
      L_TST_NR_MEASUR(L_FETCHED_ROWS)        := L_REC_TST_NR_MEASUR;
      L_TST_ALREADY_ASSIGNED(L_FETCHED_ROWS) := L_REC_ALREADY_ASSIGNED;
      L_TST_CURRENT_PP(L_FETCHED_ROWS)       := L_REC_PP;
      L_TST_CURRENT_PR(L_FETCHED_ROWS)       := L_REC_PR;
      L_PP_SEQ(L_FETCHED_ROWS)               := L_REC_PP_SEQ;
      L_PR_SEQ(L_FETCHED_ROWS)               := L_REC_PR_SEQ;
      L_MT_SEQ(L_FETCHED_ROWS)               := L_REC_MT_SEQ;
      L_PP_KEY1(L_FETCHED_ROWS)              := L_REC_PP_KEY1;
      L_PP_KEY2(L_FETCHED_ROWS)              := L_REC_PP_KEY2;
      L_PP_KEY3(L_FETCHED_ROWS)              := L_REC_PP_KEY3;
      L_PP_KEY4(L_FETCHED_ROWS)              := L_REC_PP_KEY4;
      L_PP_KEY5(L_FETCHED_ROWS)              := L_REC_PP_KEY5;
      
      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_CONFIG_DETAILS_CURSOR);
      END IF;
   END LOOP;

   FOR L_ROW IN 1..L_FETCHED_ROWS LOOP
      IF L_TST_TP(L_ROW) = 'px' THEN
         
         A_TST_TP(L_ROW) := 'pr';
      ELSE
         A_TST_TP(L_ROW) := L_TST_TP(L_ROW);
      END IF;
      A_TST_ID(L_ROW) := L_TST_ID(L_ROW);
      A_TST_ID_VERSION(L_ROW) := L_TST_ID_VERSION(L_ROW);
      A_TST_DESCRIPTION(L_ROW) := L_TST_DESCRIPTION(L_ROW);
      A_TST_NR_MEASUR(L_ROW) := L_TST_NR_MEASUR(L_ROW);
      A_TST_ALREADY_ASSIGNED(L_ROW) := L_TST_ALREADY_ASSIGNED(L_ROW);
      A_PP_SEQ(L_ROW) := L_PP_SEQ(L_ROW);
      A_PR_SEQ(L_ROW) := L_PR_SEQ(L_ROW);
      A_MT_SEQ(L_ROW) := L_MT_SEQ(L_ROW);
      A_PP_KEY1(L_ROW) := L_PP_KEY1(L_ROW);
      A_PP_KEY2(L_ROW) := L_PP_KEY2(L_ROW);
      A_PP_KEY3(L_ROW) := L_PP_KEY3(L_ROW);
      A_PP_KEY4(L_ROW) := L_PP_KEY4(L_ROW);
      A_PP_KEY5(L_ROW) := L_PP_KEY5(L_ROW);
   END LOOP;
   
   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(L_CONFIG_DETAILS_CURSOR);
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
       DBMS_SQL.CLOSE_CURSOR(L_CONFIG_DETAILS_CURSOR);
       A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;
   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      IF SQLCODE <> 1 THEN
         INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
         VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                'GetFullTestPlan', L_SQLERRM);
         UNAPIGEN.U4COMMIT;
      END IF;
      IF DBMS_SQL.IS_OPEN(L_CONFIG_DETAILS_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(L_CONFIG_DETAILS_CURSOR);
      END IF;
      IF UNAPIGEN.P_TXN_ERROR > UNAPIGEN.DBERR_SUCCESS THEN
         
         INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
         VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                'GetFullTestPlan', 'Return code='||UNAPIGEN.P_TXN_ERROR||'#a_obect_tp='||A_OBJECT_TP||'#a_object_id='|| REPLACE(A_OBJECT_ID, '''', '''''') ||'#a_object_version='||A_OBJECT_VERSION|| '#a_nr_of_rows='||A_NR_OF_ROWS||'#a_next_rows='||A_NEXT_ROWS);
         UNAPIGEN.U4COMMIT;
         RETURN (UNAPIGEN.P_TXN_ERROR);
      ELSE
         RETURN(UNAPIGEN.DBERR_GENFAIL);
      END IF;
END GETFULLTESTPLAN;

FUNCTION INTSAVEFULLTESTPLAN
(A_SC                    IN            UNAPIGEN.VC20_TABLE_TYPE,  
 A_SC_NR_OF_ROWS         IN            NUMBER,                    
 A_TST_TP                IN OUT        UNAPIGEN.VC20_TABLE_TYPE,  
 A_TST_ID                IN OUT        UNAPIGEN.VC20_TABLE_TYPE,  
 A_TST_ID_VERSION        IN OUT        UNAPIGEN.VC20_TABLE_TYPE,  
 A_PP_SEQ                IN OUT        UNAPIGEN.NUM_TABLE_TYPE,   
 A_PR_SEQ                IN OUT        UNAPIGEN.NUM_TABLE_TYPE,   
 A_MT_SEQ                IN OUT        UNAPIGEN.NUM_TABLE_TYPE,   
 A_PP_KEY1               IN OUT        UNAPIGEN.VC20_TABLE_TYPE,  
 A_PP_KEY2               IN OUT        UNAPIGEN.VC20_TABLE_TYPE,  
 A_PP_KEY3               IN OUT        UNAPIGEN.VC20_TABLE_TYPE,  
 A_PP_KEY4               IN OUT        UNAPIGEN.VC20_TABLE_TYPE,  
 A_PP_KEY5               IN OUT        UNAPIGEN.VC20_TABLE_TYPE,  
 A_TST_NR_MEASUR         IN OUT        UNAPIGEN.NUM_TABLE_TYPE,  
 A_MODIFY_FLAG           IN OUT        UNAPIGEN.NUM_TABLE_TYPE,   
 A_NR_OF_ROWS            IN OUT        NUMBER,                    
 A_NEXT_ROWS             IN            NUMBER)                    
RETURN NUMBER IS
L_NR_PP                       INTEGER;
L_NR_PR                       INTEGER;
L_TST_PGNODE                  UNAPIGEN.LONG_TABLE_TYPE;
L_TST_PANODE                  UNAPIGEN.LONG_TABLE_TYPE;

L_CURRENT_PG                       VARCHAR2(20);
L_CURRENT_PG_VERSION               VARCHAR2(20);
L_CURRENT_PA                       VARCHAR2(20);
L_CURRENT_PA_VERSION               VARCHAR2(20);
L_TRACE                            BOOLEAN;
L_STEP                             VARCHAR2(20);
L_SEQ_NO                           NUMBER;
L_NR_OF_ROWS                       NUMBER;
I                                  INTEGER;
L_X                                INTEGER;

L_GENERIC_HANDLED                 BOOLEAN;
L_SUPPLIER                        VARCHAR2(20);
L_CUSTOMER                        VARCHAR2(20);
L_ADD_PP                          BOOLEAN;

L_PPLS_NR_OF_ROWS                  INTEGER;
L_PPLS_PP_TAB                      UNAPIGEN.VC20_TABLE_TYPE;
L_PPLS_VERSION_TAB                 UNAPIGEN.VC20_TABLE_TYPE;
L_PPLS_PP_KEY1_TAB                 UNAPIGEN.VC20_TABLE_TYPE;
L_PPLS_PP_KEY2_TAB                 UNAPIGEN.VC20_TABLE_TYPE;
L_PPLS_PP_KEY3_TAB                 UNAPIGEN.VC20_TABLE_TYPE;
L_PPLS_PP_KEY4_TAB                 UNAPIGEN.VC20_TABLE_TYPE;
L_PPLS_PP_KEY5_TAB                 UNAPIGEN.VC20_TABLE_TYPE;
L_PPLS_PGNODE_TAB                  UNAPIGEN.LONG_TABLE_TYPE;
L_PPLS_MODIFY_FLAG_TAB             UNAPIGEN.NUM_TABLE_TYPE;
L_PPLS_ORIG_IND_TAB                UNAPIGEN.NUM_TABLE_TYPE;
L_PPLS_INDEX                       INTEGER;
L_PREVIOUS_EXISTING_PP             VARCHAR2(20);
L_PREVIOUS_EXISTING_PP_VERSION     VARCHAR2(20);
L_PREVIOUS_EXISTING_PP_PGNODE      NUMBER(9);
L_NEXT_EXISTING_PP                 VARCHAR2(20);
L_NEXT_EXISTING_PP_VERSION         VARCHAR2(20);
L_NEXT_EXISTING_PP_KEY1            VARCHAR2(20);
L_NEXT_EXISTING_PP_KEY2            VARCHAR2(20);
L_NEXT_EXISTING_PP_KEY3            VARCHAR2(20);
L_NEXT_EXISTING_PP_KEY4            VARCHAR2(20);
L_NEXT_EXISTING_PP_KEY5            VARCHAR2(20);
L_NEXT_EXISTING_PP_PGNODE          NUMBER(9);
L_FIRST                            INTEGER;
L_LAST                             INTEGER;

L_ANYPG_CREATION                   BOOLEAN;

L_SC_SEQ_NO                        INTEGER;
L_SVPG_NR_OF_ROWS                  INTEGER;
L_SVPG_MODIFY_REASON               VARCHAR2(255);
L_SVPG_SC_TAB                      UNAPIGEN.VC20_TABLE_TYPE;
L_SVPG_PG_TAB                      UNAPIGEN.VC20_TABLE_TYPE;
L_SVPG_PP_VERSION_TAB              UNAPIGEN.VC20_TABLE_TYPE;
L_SVPG_PP_KEY1_TAB                 UNAPIGEN.VC20_TABLE_TYPE;
L_SVPG_PP_KEY2_TAB                 UNAPIGEN.VC20_TABLE_TYPE;
L_SVPG_PP_KEY3_TAB                 UNAPIGEN.VC20_TABLE_TYPE;
L_SVPG_PP_KEY4_TAB                 UNAPIGEN.VC20_TABLE_TYPE;
L_SVPG_PP_KEY5_TAB                 UNAPIGEN.VC20_TABLE_TYPE;
L_SVPG_PGNODE_TAB                  UNAPIGEN.LONG_TABLE_TYPE;
L_SVPG_DESCRIPTION_TAB             UNAPIGEN.VC40_TABLE_TYPE;
L_SVPG_VALUE_F_TAB                 UNAPIGEN.FLOAT_TABLE_TYPE;
L_SVPG_VALUE_S_TAB                 UNAPIGEN.VC40_TABLE_TYPE;
L_SVPG_UNIT_TAB                    UNAPIGEN.VC20_TABLE_TYPE;
L_SVPG_EXEC_START_DATE_TAB         UNAPIGEN.DATE_TABLE_TYPE;
L_SVPG_EXEC_END_DATE_TAB           UNAPIGEN.DATE_TABLE_TYPE;
L_SVPG_EXECUTOR_TAB                UNAPIGEN.VC20_TABLE_TYPE;
L_SVPG_PLANNED_EXECUTOR_TAB        UNAPIGEN.VC20_TABLE_TYPE;
L_SVPG_MANUALLY_ENTERED_TAB        UNAPIGEN.CHAR1_TABLE_TYPE;
L_SVPG_ASSIGN_DATE_TAB             UNAPIGEN.DATE_TABLE_TYPE;
L_SVPG_ASSIGNED_BY_TAB             UNAPIGEN.VC20_TABLE_TYPE;
L_SVPG_MANUALLY_ADDED_TAB          UNAPIGEN.CHAR1_TABLE_TYPE;
L_SVPG_FORMAT_TAB                  UNAPIGEN.VC40_TABLE_TYPE;
L_SVPG_CONFIRM_ASSIGN_TAB          UNAPIGEN.CHAR1_TABLE_TYPE;
L_SVPG_ALLOW_ANY_PR_TAB            UNAPIGEN.CHAR1_TABLE_TYPE;
L_SVPG_NEVER_CREATE_ME_TAB         UNAPIGEN.CHAR1_TABLE_TYPE; 
                                                              
                                                              
                                                              
L_SVPG_DELAY_TAB                   UNAPIGEN.NUM_TABLE_TYPE;
L_SVPG_DELAY_UNIT_TAB              UNAPIGEN.VC20_TABLE_TYPE;
L_SVPG_PG_CLASS_TAB                UNAPIGEN.VC2_TABLE_TYPE;
L_SVPG_LOG_HS_TAB                  UNAPIGEN.CHAR1_TABLE_TYPE;
L_SVPG_LOG_HS_DETAILS_TAB          UNAPIGEN.CHAR1_TABLE_TYPE;
L_SVPG_LC_TAB                      UNAPIGEN.VC2_TABLE_TYPE;
L_SVPG_LC_VERSION_TAB              UNAPIGEN.VC20_TABLE_TYPE;
L_SVPG_MODIFY_FLAG_TAB             UNAPIGEN.NUM_TABLE_TYPE;
L_SVPG_ORIG_IND_TAB                UNAPIGEN.NUM_TABLE_TYPE;

L_INPG_PP_VERSION_TAB              UNAPIGEN.VC20_TABLE_TYPE;
L_INPG_PP_KEY1_TAB                 UNAPIGEN.VC20_TABLE_TYPE;
L_INPG_PP_KEY2_TAB                 UNAPIGEN.VC20_TABLE_TYPE;
L_INPG_PP_KEY3_TAB                 UNAPIGEN.VC20_TABLE_TYPE;
L_INPG_PP_KEY4_TAB                 UNAPIGEN.VC20_TABLE_TYPE;
L_INPG_PP_KEY5_TAB                 UNAPIGEN.VC20_TABLE_TYPE;
L_INPG_DESCRIPTION_TAB             UNAPIGEN.VC40_TABLE_TYPE;
L_INPG_VALUE_F_TAB                 UNAPIGEN.FLOAT_TABLE_TYPE;
L_INPG_VALUE_S_TAB                 UNAPIGEN.VC40_TABLE_TYPE;
L_INPG_UNIT_TAB                    UNAPIGEN.VC20_TABLE_TYPE;
L_INPG_EXEC_START_DATE_TAB         UNAPIGEN.DATE_TABLE_TYPE;
L_INPG_EXEC_END_DATE_TAB           UNAPIGEN.DATE_TABLE_TYPE;
L_INPG_EXECUTOR_TAB                UNAPIGEN.VC20_TABLE_TYPE;
L_INPG_PLANNED_EXECUTOR_TAB        UNAPIGEN.VC20_TABLE_TYPE;
L_INPG_MANUALLY_ENTERED_TAB        UNAPIGEN.CHAR1_TABLE_TYPE;
L_INPG_ASSIGN_DATE_TAB             UNAPIGEN.DATE_TABLE_TYPE;
L_INPG_ASSIGNED_BY_TAB             UNAPIGEN.VC20_TABLE_TYPE;
L_INPG_MANUALLY_ADDED_TAB          UNAPIGEN.CHAR1_TABLE_TYPE;
L_INPG_FORMAT_TAB                  UNAPIGEN.VC40_TABLE_TYPE;
L_INPG_CONFIRM_ASSIGN_TAB          UNAPIGEN.CHAR1_TABLE_TYPE;
L_INPG_ALLOW_ANY_PR_TAB            UNAPIGEN.CHAR1_TABLE_TYPE;
L_INPG_NEVER_CREATE_ME_TAB         UNAPIGEN.CHAR1_TABLE_TYPE; 
                                                              
                                                              
                                                              
L_INPG_DELAY_TAB                   UNAPIGEN.NUM_TABLE_TYPE;
L_INPG_DELAY_UNIT_TAB              UNAPIGEN.VC20_TABLE_TYPE;
L_INPG_REANALYSIS_TAB              UNAPIGEN.NUM_TABLE_TYPE;
L_INPG_PG_CLASS_TAB                UNAPIGEN.VC2_TABLE_TYPE;
L_INPG_LOG_HS_TAB                  UNAPIGEN.CHAR1_TABLE_TYPE;
L_INPG_LOG_HS_DETAILS_TAB          UNAPIGEN.CHAR1_TABLE_TYPE;
L_INPG_LC_TAB                      UNAPIGEN.VC2_TABLE_TYPE;
L_INPG_LC_VERSION_TAB              UNAPIGEN.VC20_TABLE_TYPE;
L_INPG_NR_OF_ROWS                  INTEGER;

CURSOR L_SCPG_CURSOR (A_SC VARCHAR2) IS
   SELECT PG, PGNODE, PP_VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5 
   FROM UTSCPG
   WHERE SC = A_SC
   ORDER BY PGNODE;


L_FOUND                            BOOLEAN;
L_TEMP_PP                          VARCHAR2(20);
L_TEMP_PP_VERSION                  VARCHAR2(20);
L_TEMP_PP_KEY1                     VARCHAR2(20);
L_TEMP_PP_KEY2                     VARCHAR2(20);
L_TEMP_PP_KEY3                     VARCHAR2(20);
L_TEMP_PP_KEY4                     VARCHAR2(20);
L_TEMP_PP_KEY5                     VARCHAR2(20);
L_TEMP_PGNODE                      NUMBER(9);
L_PRLS_NR_OF_ROWS                  INTEGER;
L_PRLS_PP_TAB                      UNAPIGEN.VC20_TABLE_TYPE;
L_PRLS_PP_VERSION_TAB              UNAPIGEN.VC20_TABLE_TYPE;
L_PRLS_PGNODE_TAB                  UNAPIGEN.LONG_TABLE_TYPE;
L_PRLS_PR_TAB                      UNAPIGEN.VC20_TABLE_TYPE;
L_PRLS_VERSION_TAB                 UNAPIGEN.VC20_TABLE_TYPE;
L_PRLS_PANODE_TAB                  UNAPIGEN.LONG_TABLE_TYPE;
L_PRLS_MODIFY_FLAG_TAB             UNAPIGEN.NUM_TABLE_TYPE;
L_PRLS_INDEX                       INTEGER;
L_PRLS_ORIG_IND_TAB                 UNAPIGEN.NUM_TABLE_TYPE;
L_PREVIOUS_EXISTING_PR             VARCHAR2(20);
L_PREVIOUS_EXISTING_PR_VERSION     VARCHAR2(20);
L_PREVIOUS_EXISTING_PR_PANODE      NUMBER(9);
L_NEXT_EXISTING_PR                 VARCHAR2(20);
L_NEXT_EXISTING_PR_VERSION         VARCHAR2(20);
L_NEXT_EXISTING_PR_PANODE          NUMBER(9);

L_ANYPA_CREATION                   BOOLEAN;

L_INPA_PR_VERSION_TAB              UNAPIGEN.VC20_TABLE_TYPE;
L_INPA_NR_OF_ROWS                  NUMBER;
L_INPA_DESCRIPTION_TAB             UNAPIGEN.VC40_TABLE_TYPE;
L_INPA_VALUE_F_TAB                 UNAPIGEN.FLOAT_TABLE_TYPE;
L_INPA_VALUE_S_TAB                 UNAPIGEN.VC40_TABLE_TYPE;
L_INPA_UNIT_TAB                    UNAPIGEN.VC20_TABLE_TYPE;
L_INPA_EXEC_START_DATE_TAB         UNAPIGEN.DATE_TABLE_TYPE;
L_INPA_EXEC_END_DATE_TAB           UNAPIGEN.DATE_TABLE_TYPE;
L_INPA_EXECUTOR_TAB                UNAPIGEN.VC20_TABLE_TYPE;
L_INPA_PLANNED_EXECUTOR_TAB        UNAPIGEN.VC20_TABLE_TYPE;
L_INPA_MANUALLY_ENTERED_TAB        UNAPIGEN.CHAR1_TABLE_TYPE;
L_INPA_ASSIGN_DATE_TAB             UNAPIGEN.DATE_TABLE_TYPE;
L_INPA_ASSIGNED_BY_TAB             UNAPIGEN.VC20_TABLE_TYPE;
L_INPA_MANUALLY_ADDED_TAB          UNAPIGEN.CHAR1_TABLE_TYPE;
L_INPA_FORMAT_TAB                  UNAPIGEN.VC40_TABLE_TYPE;
L_INPA_TD_INFO_TAB                 UNAPIGEN.NUM_TABLE_TYPE;
L_INPA_TD_INFO_UNIT_TAB            UNAPIGEN.VC20_TABLE_TYPE;
L_INPA_CONFIRM_UID_TAB             UNAPIGEN.CHAR1_TABLE_TYPE;
L_INPA_ALLOW_ANY_ME_TAB            UNAPIGEN.CHAR1_TABLE_TYPE;
L_INPA_DELAY_TAB                   UNAPIGEN.NUM_TABLE_TYPE;
L_INPA_DELAY_UNIT_TAB              UNAPIGEN.VC20_TABLE_TYPE;
L_INPA_MIN_NR_RESULTS_TAB          UNAPIGEN.NUM_TABLE_TYPE;
L_INPA_CALC_METHOD_TAB             UNAPIGEN.CHAR1_TABLE_TYPE;
L_INPA_CALC_CF_TAB                 UNAPIGEN.VC20_TABLE_TYPE;
L_INPA_ALARM_ORDER_TAB             UNAPIGEN.VC3_TABLE_TYPE;
L_INPA_VALID_SPECSA_TAB            UNAPIGEN.CHAR1_TABLE_TYPE;
L_INPA_VALID_SPECSB_TAB            UNAPIGEN.CHAR1_TABLE_TYPE;
L_INPA_VALID_SPECSC_TAB            UNAPIGEN.CHAR1_TABLE_TYPE;
L_INPA_VALID_LIMITSA_TAB           UNAPIGEN.CHAR1_TABLE_TYPE;
L_INPA_VALID_LIMITSB_TAB           UNAPIGEN.CHAR1_TABLE_TYPE;
L_INPA_VALID_LIMITSC_TAB           UNAPIGEN.CHAR1_TABLE_TYPE;
L_INPA_VALID_TARGETA_TAB           UNAPIGEN.CHAR1_TABLE_TYPE;
L_INPA_VALID_TARGETB_TAB           UNAPIGEN.CHAR1_TABLE_TYPE;
L_INPA_VALID_TARGETC_TAB           UNAPIGEN.CHAR1_TABLE_TYPE;
L_INPA_MT_TAB                      UNAPIGEN.VC20_TABLE_TYPE;
L_INPA_MT_VERSION_TAB              UNAPIGEN.VC20_TABLE_TYPE;
L_INPA_MT_NR_MEASUR_TAB            UNAPIGEN.NUM_TABLE_TYPE;
L_INPA_LOG_EXCEPTIONS_TAB          UNAPIGEN.CHAR1_TABLE_TYPE;
L_INPA_REANALYSIS_TAB              UNAPIGEN.NUM_TABLE_TYPE;
L_INPA_PA_CLASS_TAB                UNAPIGEN.VC2_TABLE_TYPE;
L_INPA_LOG_HS_TAB                  UNAPIGEN.CHAR1_TABLE_TYPE;
L_INPA_LOG_HS_DETAILS_TAB          UNAPIGEN.CHAR1_TABLE_TYPE;
L_INPA_LC_TAB                      UNAPIGEN.VC2_TABLE_TYPE;
L_INPA_LC_VERSION_TAB              UNAPIGEN.VC20_TABLE_TYPE;

L_SVPA_NR_OF_ROWS                  NUMBER;
L_SVPA_SC_TAB                      UNAPIGEN.VC20_TABLE_TYPE;
L_SVPA_PG_TAB                      UNAPIGEN.VC20_TABLE_TYPE;
L_SVPA_PP_VERSION_TAB              UNAPIGEN.VC20_TABLE_TYPE;
L_SVPA_PGNODE_TAB                  UNAPIGEN.LONG_TABLE_TYPE;
L_SVPA_PA_TAB                      UNAPIGEN.VC20_TABLE_TYPE;
L_SVPA_PR_VERSION_TAB              UNAPIGEN.VC20_TABLE_TYPE;
L_SVPA_PANODE_TAB                  UNAPIGEN.LONG_TABLE_TYPE;
L_SVPA_DESCRIPTION_TAB             UNAPIGEN.VC40_TABLE_TYPE;
L_SVPA_VALUE_F_TAB                 UNAPIGEN.FLOAT_TABLE_TYPE;
L_SVPA_VALUE_S_TAB                 UNAPIGEN.VC40_TABLE_TYPE;
L_SVPA_UNIT_TAB                    UNAPIGEN.VC20_TABLE_TYPE;
L_SVPA_EXEC_START_DATE_TAB         UNAPIGEN.DATE_TABLE_TYPE;
L_SVPA_EXEC_END_DATE_TAB           UNAPIGEN.DATE_TABLE_TYPE;
L_SVPA_EXECUTOR_TAB                UNAPIGEN.VC20_TABLE_TYPE;
L_SVPA_PLANNED_EXECUTOR_TAB        UNAPIGEN.VC20_TABLE_TYPE;
L_SVPA_MANUALLY_ENTERED_TAB        UNAPIGEN.CHAR1_TABLE_TYPE;
L_SVPA_ASSIGN_DATE_TAB             UNAPIGEN.DATE_TABLE_TYPE;
L_SVPA_ASSIGNED_BY_TAB             UNAPIGEN.VC20_TABLE_TYPE;
L_SVPA_MANUALLY_ADDED_TAB          UNAPIGEN.CHAR1_TABLE_TYPE;
L_SVPA_FORMAT_TAB                  UNAPIGEN.VC40_TABLE_TYPE;
L_SVPA_TD_INFO_TAB                 UNAPIGEN.NUM_TABLE_TYPE;
L_SVPA_TD_INFO_UNIT_TAB            UNAPIGEN.VC20_TABLE_TYPE;
L_SVPA_CONFIRM_UID_TAB             UNAPIGEN.CHAR1_TABLE_TYPE;
L_SVPA_ALLOW_ANY_ME_TAB            UNAPIGEN.CHAR1_TABLE_TYPE;
L_SVPA_DELAY_TAB                   UNAPIGEN.NUM_TABLE_TYPE;
L_SVPA_DELAY_UNIT_TAB              UNAPIGEN.VC20_TABLE_TYPE;
L_SVPA_MIN_NR_RESULTS_TAB          UNAPIGEN.NUM_TABLE_TYPE;
L_SVPA_CALC_METHOD_TAB             UNAPIGEN.CHAR1_TABLE_TYPE;
L_SVPA_CALC_CF_TAB                 UNAPIGEN.VC20_TABLE_TYPE;
L_SVPA_ALARM_ORDER_TAB             UNAPIGEN.VC3_TABLE_TYPE;
L_SVPA_VALID_SPECSA_TAB            UNAPIGEN.CHAR1_TABLE_TYPE;
L_SVPA_VALID_SPECSB_TAB            UNAPIGEN.CHAR1_TABLE_TYPE;
L_SVPA_VALID_SPECSC_TAB            UNAPIGEN.CHAR1_TABLE_TYPE;
L_SVPA_VALID_LIMITSA_TAB           UNAPIGEN.CHAR1_TABLE_TYPE;
L_SVPA_VALID_LIMITSB_TAB           UNAPIGEN.CHAR1_TABLE_TYPE;
L_SVPA_VALID_LIMITSC_TAB           UNAPIGEN.CHAR1_TABLE_TYPE;
L_SVPA_VALID_TARGETA_TAB           UNAPIGEN.CHAR1_TABLE_TYPE;
L_SVPA_VALID_TARGETB_TAB           UNAPIGEN.CHAR1_TABLE_TYPE;
L_SVPA_VALID_TARGETC_TAB           UNAPIGEN.CHAR1_TABLE_TYPE;
L_SVPA_MT_TAB                      UNAPIGEN.VC20_TABLE_TYPE;
L_SVPA_MT_VERSION_TAB              UNAPIGEN.VC20_TABLE_TYPE;
L_SVPA_MT_NR_MEASUR_TAB            UNAPIGEN.NUM_TABLE_TYPE;
L_SVPA_LOG_EXCEPTIONS_TAB          UNAPIGEN.CHAR1_TABLE_TYPE;
L_SVPA_PA_CLASS_TAB                UNAPIGEN.VC2_TABLE_TYPE;
L_SVPA_LOG_HS_TAB                  UNAPIGEN.CHAR1_TABLE_TYPE;
L_SVPA_LOG_HS_DETAILS_TAB          UNAPIGEN.CHAR1_TABLE_TYPE;
L_SVPA_LC_TAB                      UNAPIGEN.VC2_TABLE_TYPE;
L_SVPA_LC_VERSION_TAB              UNAPIGEN.VC20_TABLE_TYPE;
L_SVPA_MODIFY_FLAG_TAB             UNAPIGEN.NUM_TABLE_TYPE;            
L_SVPA_ORIG_IND_TAB                UNAPIGEN.NUM_TABLE_TYPE;

L_SOME_PR_EXIST_4_PG_AFTER         BOOLEAN;
L_REF_EXISTING_PR_PP               VARCHAR2(20);
L_REF_EXISTING_PR_PP_PGNODE        NUMBER(9);
L_REF_EXISTING_PR_PR               VARCHAR2(20);
L_REF_EXISTING_PR_PR_VERSION       VARCHAR2(20);
L_REF_EXISTING_PR_PR_PANODE        NUMBER(9);

CURSOR L_SCPA_CURSOR (A_SC VARCHAR2) IS
   SELECT A.PG, A.PGNODE, A.PA, A.PANODE, A.PR_VERSION, B.PP_VERSION
   FROM UTSCPA A, UTSCPG B
   WHERE A.SC = A_SC AND
   A.SC = B.SC AND
   A.PGNODE = B.PGNODE AND
   A.PG = B.PG
   ORDER BY A.PGNODE, A.PANODE;


L_TEMP_PR                          VARCHAR2(20);
L_TEMP_PR_VERSION                  VARCHAR2(20);
L_TEMP_PANODE                      NUMBER(9);

L_MTLS_NR_OF_ROWS                  INTEGER;
L_MTLS_PP_TAB                      UNAPIGEN.VC20_TABLE_TYPE;
L_MTLS_PGNODE_TAB                  UNAPIGEN.LONG_TABLE_TYPE;
L_MTLS_PR_TAB                      UNAPIGEN.VC20_TABLE_TYPE;
L_MTLS_PR_VERSION_TAB              UNAPIGEN.VC20_TABLE_TYPE;
L_MTLS_PANODE_TAB                  UNAPIGEN.LONG_TABLE_TYPE;
L_MTLS_MT_TAB                      UNAPIGEN.VC20_TABLE_TYPE;
L_MTLS_VERSION_TAB                 UNAPIGEN.VC20_TABLE_TYPE;
L_MTLS_MENODE_TAB                  UNAPIGEN.LONG_TABLE_TYPE;
L_MTLS_MODIFY_FLAG_TAB             UNAPIGEN.NUM_TABLE_TYPE;
L_MTLS_INDEX                       INTEGER;
L_PREVIOUS_EXISTING_MT             VARCHAR2(20);
L_PREVIOUS_EXISTING_MT_VERSION     VARCHAR2(20);
L_PREVIOUS_EXISTING_MT_MENODE      NUMBER(9);
L_NEXT_EXISTING_MT                 VARCHAR2(20);
L_NEXT_EXISTING_MT_VERSION         VARCHAR2(20);
L_NEXT_EXISTING_MT_MENODE          NUMBER(9);

L_SVME_NR_OF_ROWS                  INTEGER;
L_ANYME_CREATION                   BOOLEAN;
L_TXN_ERROR                        INTEGER;

L_INME_MT_VERSION_TAB              UNAPIGEN.VC20_TABLE_TYPE;
L_INME_NR_OF_ROWS                  INTEGER;
L_INME_DESCRIPTION_TAB             UNAPIGEN.VC40_TABLE_TYPE;
L_INME_VALUE_F_TAB                 UNAPIGEN.FLOAT_TABLE_TYPE;
L_INME_VALUE_S_TAB                 UNAPIGEN.VC40_TABLE_TYPE;
L_INME_UNIT_TAB                    UNAPIGEN.VC20_TABLE_TYPE;
L_INME_EXEC_START_DATE_TAB         UNAPIGEN.DATE_TABLE_TYPE;
L_INME_EXEC_END_DATE_TAB           UNAPIGEN.DATE_TABLE_TYPE;
L_INME_EXECUTOR_TAB                UNAPIGEN.VC20_TABLE_TYPE;
L_INME_LAB_TAB                     UNAPIGEN.VC20_TABLE_TYPE;
L_INME_EQ_TAB                      UNAPIGEN.VC20_TABLE_TYPE;
L_INME_EQ_VERSION_TAB              UNAPIGEN.VC20_TABLE_TYPE;
L_INME_PLANNED_EXECUTOR_TAB        UNAPIGEN.VC20_TABLE_TYPE;
L_INME_PLANNED_EQ_TAB              UNAPIGEN.VC20_TABLE_TYPE;
L_INME_PLANNED_EQ_VERSION_TAB      UNAPIGEN.VC20_TABLE_TYPE;
L_INME_MANUALLY_ENTERED_TAB        UNAPIGEN.CHAR1_TABLE_TYPE;
L_INME_ALLOW_ADD_TAB               UNAPIGEN.CHAR1_TABLE_TYPE;
L_INME_ASSIGN_DATE_TAB             UNAPIGEN.DATE_TABLE_TYPE;
L_INME_ASSIGNED_BY_TAB             UNAPIGEN.VC20_TABLE_TYPE;
L_INME_MANUALLY_ADDED_TAB          UNAPIGEN.CHAR1_TABLE_TYPE;
L_INME_DELAY_TAB                   UNAPIGEN.NUM_TABLE_TYPE;
L_INME_DELAY_UNIT_TAB              UNAPIGEN.VC20_TABLE_TYPE;
L_INME_FORMAT_TAB                  UNAPIGEN.VC40_TABLE_TYPE;
L_INME_ACCURACY_TAB                UNAPIGEN.FLOAT_TABLE_TYPE;
L_INME_REAL_COST_TAB               UNAPIGEN.VC40_TABLE_TYPE;
L_INME_REAL_TIME_TAB               UNAPIGEN.VC40_TABLE_TYPE;
L_INME_CALIBRATION_TAB             UNAPIGEN.CHAR1_TABLE_TYPE;
L_INME_CONFIRM_COMPLETE_TAB        UNAPIGEN.CHAR1_TABLE_TYPE;
L_INME_AUTORECALC_TAB              UNAPIGEN.CHAR1_TABLE_TYPE;
L_INME_ME_RESULT_EDITABLE_TAB      UNAPIGEN.CHAR1_TABLE_TYPE;
L_INME_NEXT_CELL_TAB               UNAPIGEN.VC20_TABLE_TYPE;
L_INME_SOP_TAB                     UNAPIGEN.VC40_TABLE_TYPE;
L_INME_SOP_VERSION_TAB             UNAPIGEN.VC20_TABLE_TYPE;
L_INME_PLAUS_LOW_TAB               UNAPIGEN.FLOAT_TABLE_TYPE;
L_INME_PLAUS_HIGH_TAB              UNAPIGEN.FLOAT_TABLE_TYPE;
L_INME_WINSIZE_X_TAB               UNAPIGEN.NUM_TABLE_TYPE;
L_INME_WINSIZE_Y_TAB               UNAPIGEN.NUM_TABLE_TYPE;
L_INME_REANALYSIS_TAB              UNAPIGEN.NUM_TABLE_TYPE;
L_INME_ME_CLASS_TAB                UNAPIGEN.VC2_TABLE_TYPE;
L_INME_LOG_HS_TAB                  UNAPIGEN.CHAR1_TABLE_TYPE;
L_INME_LOG_HS_DETAILS_TAB          UNAPIGEN.CHAR1_TABLE_TYPE;
L_INME_LC_TAB                      UNAPIGEN.VC2_TABLE_TYPE;
L_INME_LC_VERSION_TAB              UNAPIGEN.VC20_TABLE_TYPE;

L_SVME_MODIFY_REASON               VARCHAR2(255);
L_SVME_SC_TAB                      UNAPIGEN.VC20_TABLE_TYPE;
L_SVME_PG_TAB                      UNAPIGEN.VC20_TABLE_TYPE;
L_SVME_PGNODE_TAB                  UNAPIGEN.LONG_TABLE_TYPE;
L_SVME_PA_TAB                      UNAPIGEN.VC20_TABLE_TYPE;
L_SVME_PR_VERSION_TAB              UNAPIGEN.VC20_TABLE_TYPE;
L_SVME_PANODE_TAB                  UNAPIGEN.LONG_TABLE_TYPE;
L_SVME_ME_TAB                      UNAPIGEN.VC20_TABLE_TYPE;
L_SVME_MT_VERSION_TAB              UNAPIGEN.VC20_TABLE_TYPE;
L_SVME_MENODE_TAB                  UNAPIGEN.LONG_TABLE_TYPE;
L_SVME_DESCRIPTION_TAB             UNAPIGEN.VC40_TABLE_TYPE;
L_SVME_VALUE_F_TAB                 UNAPIGEN.FLOAT_TABLE_TYPE;
L_SVME_VALUE_S_TAB                 UNAPIGEN.VC40_TABLE_TYPE;
L_SVME_UNIT_TAB                    UNAPIGEN.VC20_TABLE_TYPE;
L_SVME_EXEC_START_DATE_TAB         UNAPIGEN.DATE_TABLE_TYPE;
L_SVME_EXEC_END_DATE_TAB           UNAPIGEN.DATE_TABLE_TYPE;
L_SVME_EXECUTOR_TAB                UNAPIGEN.VC20_TABLE_TYPE;
L_SVME_LAB_TAB                     UNAPIGEN.VC20_TABLE_TYPE;
L_SVME_EQ_TAB                      UNAPIGEN.VC20_TABLE_TYPE;
L_SVME_EQ_VERSION_TAB              UNAPIGEN.VC20_TABLE_TYPE;
L_SVME_PLANNED_EXECUTOR_TAB        UNAPIGEN.VC20_TABLE_TYPE;
L_SVME_PLANNED_EQ_TAB              UNAPIGEN.VC20_TABLE_TYPE;
L_SVME_PLANNED_EQ_VERSION_TAB      UNAPIGEN.VC20_TABLE_TYPE;
L_SVME_MANUALLY_ENTERED_TAB        UNAPIGEN.CHAR1_TABLE_TYPE;
L_SVME_ALLOW_ADD_TAB               UNAPIGEN.CHAR1_TABLE_TYPE;
L_SVME_ASSIGN_DATE_TAB             UNAPIGEN.DATE_TABLE_TYPE;
L_SVME_ASSIGNED_BY_TAB             UNAPIGEN.VC20_TABLE_TYPE;
L_SVME_MANUALLY_ADDED_TAB          UNAPIGEN.CHAR1_TABLE_TYPE;
L_SVME_DELAY_TAB                   UNAPIGEN.NUM_TABLE_TYPE;
L_SVME_DELAY_UNIT_TAB              UNAPIGEN.VC20_TABLE_TYPE;
L_SVME_FORMAT_TAB                  UNAPIGEN.VC40_TABLE_TYPE;
L_SVME_ACCURACY_TAB                UNAPIGEN.FLOAT_TABLE_TYPE;
L_SVME_REAL_COST_TAB               UNAPIGEN.VC40_TABLE_TYPE;
L_SVME_REAL_TIME_TAB               UNAPIGEN.VC40_TABLE_TYPE;
L_SVME_CALIBRATION_TAB             UNAPIGEN.CHAR1_TABLE_TYPE;
L_SVME_CONFIRM_COMPLETE_TAB        UNAPIGEN.CHAR1_TABLE_TYPE;
L_SVME_AUTORECALC_TAB              UNAPIGEN.CHAR1_TABLE_TYPE;
L_SVME_ME_RESULT_EDITABLE_TAB      UNAPIGEN.CHAR1_TABLE_TYPE;
L_SVME_NEXT_CELL_TAB               UNAPIGEN.VC20_TABLE_TYPE;
L_SVME_SOP_TAB                     UNAPIGEN.VC40_TABLE_TYPE;
L_SVME_SOP_VERSION_TAB             UNAPIGEN.VC20_TABLE_TYPE;
L_SVME_PLAUS_LOW_TAB               UNAPIGEN.FLOAT_TABLE_TYPE;
L_SVME_PLAUS_HIGH_TAB              UNAPIGEN.FLOAT_TABLE_TYPE;
L_SVME_WINSIZE_X_TAB               UNAPIGEN.NUM_TABLE_TYPE;
L_SVME_WINSIZE_Y_TAB               UNAPIGEN.NUM_TABLE_TYPE;
L_SVME_REANALYSIS_TAB              UNAPIGEN.NUM_TABLE_TYPE;
L_SVME_ME_CLASS_TAB                UNAPIGEN.VC2_TABLE_TYPE;
L_SVME_LOG_HS_TAB                  UNAPIGEN.CHAR1_TABLE_TYPE;
L_SVME_LOG_HS_DETAILS_TAB          UNAPIGEN.CHAR1_TABLE_TYPE;
L_SVME_LC_TAB                      UNAPIGEN.VC2_TABLE_TYPE;
L_SVME_LC_VERSION_TAB              UNAPIGEN.VC20_TABLE_TYPE;
L_SVME_MODIFY_FLAG_TAB             UNAPIGEN.NUM_TABLE_TYPE;

L_SOME_MT_EXIST_4_PA_AFTER         BOOLEAN;
L_REF_EXISTING_MT_PP               VARCHAR2(20);
L_REF_EXISTING_MT_PP_PGNODE        NUMBER(9);
L_REF_EXISTING_MT_PR               VARCHAR2(20);
L_REF_EXISTING_MT_PR_VERSION       VARCHAR2(20);
L_REF_EXISTING_MT_PR_PANODE        NUMBER(9);
L_REF_EXISTING_MT_MT               VARCHAR2(20);
L_REF_EXISTING_MT_MT_VERSION       VARCHAR2(20);
L_REF_EXISTING_MT_MT_MENODE        NUMBER(9);

L_START_OF_BLOCK_TO_SUPPRESS       INTEGER;
L_END_OF_BLOCK_TO_SUPPRESS         INTEGER;
L_LAST_TO_KEEP                     INTEGER;
L_NEW_ROW                          INTEGER;
L_KEEP_TAB                         BOOLEAN_TABLE_TYPE;
L_NR_MEASUR                        INTEGER;
CURSOR L_SCME_CURSOR (A_SC VARCHAR2) IS
   SELECT A.PG, A.PGNODE, A.PA, A.PANODE, A.ME, A.MENODE, A.MT_VERSION,  B.PR_VERSION, C.PP_VERSION, A.EQ
   FROM UTSCME A, UTSCPA B, UTSCPG C
   WHERE A.SC = A_SC AND
   A.SC = B.SC AND
   A.PGNODE = B.PGNODE AND
   A.PG = B.PG  AND
   A.PANODE = B.PANODE AND
   A.PA = B.PA  AND
   A.SC = C.SC AND
   A.PGNODE = C.PGNODE AND
   A.PG = C.PG
   ORDER BY A.PGNODE, A.PANODE, A.MENODE;

L_CURR_ROW                            INTEGER;
L_PPRO_CURR_PP                        VARCHAR2(20);
L_PPRO_CURR_PP_VERSION                VARCHAR2(20);
L_PPRO_CURR_PP_KEY1                   VARCHAR2(20);
L_PPRO_CURR_PP_KEY2                   VARCHAR2(20);
L_PPRO_CURR_PP_KEY3                   VARCHAR2(20);
L_PPRO_CURR_PP_KEY4                   VARCHAR2(20);
L_PPRO_CURR_PP_KEY5                   VARCHAR2(20);
L_PPRO_CURR_PP_ROW                    INTEGER;
L_PPRO_CURR_PP_LAST_ROW               INTEGER;
L_PPRO_FIND_LAST_ROW4PP               INTEGER;
L_PPRO_CURR_PR                        VARCHAR2(20);
L_PPRO_CURR_PR_VERSION                VARCHAR2(20);
L_PPRO_CURR_PR_ROW                    INTEGER;
L_PPRO_CURR_PR_LAST_ROW               INTEGER;
L_PPRO_CURR_PR_MOD_FLAG               INTEGER;
L_PPRO_CURR_MT                        VARCHAR2(20);
L_PPRO_CURR_MT_ROW                    INTEGER;
L_PPRO_NR_MEASUR                      INTEGER;
L_PPRO_ROWSTOSHIFT                    INTEGER;
L_PPRO_PROCESS_NEXT_ROW               BOOLEAN;
L_PPRO_SOMEROWSSHIFTED                BOOLEAN;

CURSOR L_CHILDPP_CURSOR (C_PP         IN VARCHAR2,
                         C_PP_VERSION IN VARCHAR2,
                         C_PP_KEY1    IN VARCHAR2,
                         C_PP_KEY2    IN VARCHAR2,
                         C_PP_KEY3    IN VARCHAR2,
                         C_PP_KEY4    IN VARCHAR2,
                         C_PP_KEY5    IN VARCHAR2,
                         C_PR         IN VARCHAR2,
                         C_PR_VERSION IN VARCHAR2)
IS
   SELECT IS_PP
   FROM UTPPPR
   WHERE PP = C_PP
   AND VERSION = C_PP_VERSION
   AND PP_KEY1 = C_PP_KEY1
   AND PP_KEY2 = C_PP_KEY2
   AND PP_KEY3 = C_PP_KEY3
   AND PP_KEY4 = C_PP_KEY4
   AND PP_KEY5 = C_PP_KEY5
   AND PR=C_PR
   AND C_PR_VERSION = UNAPIGEN.VALIDATEPPVERSION(C_PR, UTPPPR.PR_VERSION, UTPPPR.PP_KEY1, UTPPPR.PP_KEY2, UTPPPR.PP_KEY3, UTPPPR.PP_KEY4,UTPPPR.PP_KEY5) 
   AND IS_PP='1'
   ORDER BY SEQ;
L_CHILDPP_REC L_CHILDPP_CURSOR%ROWTYPE;

CURSOR L_STPP_CURSOR (C_ST         IN VARCHAR2,
                      C_ST_VERSION IN VARCHAR2,
                      C_PP         IN VARCHAR2,
                      C_PP_KEY1    IN VARCHAR2,
                      C_PP_KEY2    IN VARCHAR2,
                      C_PP_KEY3    IN VARCHAR2,
                      C_PP_KEY4    IN VARCHAR2,
                      C_PP_KEY5    IN VARCHAR2)
IS
   SELECT 'X'
   FROM UTSTPP
   WHERE ST = C_ST
   AND VERSION = C_ST_VERSION
   AND PP = C_PP
   AND PP_KEY1 = C_PP_KEY1
   AND PP_KEY2 = C_PP_KEY2
   AND PP_KEY3 = C_PP_KEY3
   AND PP_KEY4 = C_PP_KEY4
   AND PP_KEY5 = C_PP_KEY5;
L_PRESENT         CHAR(1);

CURSOR L_SC_CURSOR (C_SC         IN VARCHAR2)
IS
   SELECT ST, ST_VERSION
   FROM UTSC
   WHERE SC = C_SC;
L_ST         VARCHAR2(20);
L_ST_VERSION VARCHAR2(20);

    
    PROCEDURE TRACE(A_TRACE_TXT IN VARCHAR2) IS
    BEGIN
       IF L_TRACE THEN
          DBMS_OUTPUT.PUT_LINE(A_TRACE_TXT);
          INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
          VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                 'SaveFullTestPlan', SUBSTR(A_TRACE_TXT,1,255));
          IF LENGTH(A_TRACE_TXT)>255 THEN
             INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
             VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
                    'SaveFullTestPlan', '(2)'||SUBSTR( A_TRACE_TXT,256,252));
             END IF;
          UNAPIGEN.U4COMMIT;
       END IF;
    END TRACE;
 
    PROCEDURE MANIPULATESVPG(A_FIND_EXISTING_PP VARCHAR2, A_FIND_EXISTING_PP_PGNODE NUMBER,
                              A_FIRST NUMBER, A_LAST NUMBER, A_ACTION VARCHAR2, A_SC VARCHAR2) IS
    L_X               INTEGER;
    L_FOUND           INTEGER;
    L_AFTER           INTEGER;
    L_BEFORE          INTEGER;
    L_START_SHIFT_POS INTEGER;
    L_SHIFT           INTEGER;
    
    BEGIN

       
       
       
       
L_STEP := '-1MSvPg';       
  
       
       IF A_ACTION <> 'APPEND' THEN
          FOR L_X IN 1..L_SVPG_NR_OF_ROWS LOOP
             IF L_SVPG_PG_TAB(L_X) = A_FIND_EXISTING_PP AND
                L_SVPG_PGNODE_TAB(L_X) = A_FIND_EXISTING_PP_PGNODE THEN
                IF A_ACTION = 'AFTER' THEN
                   L_START_SHIFT_POS := L_X+1;   
                ELSE
                   L_START_SHIFT_POS := L_X; 
                END IF;
                EXIT;
             END IF;
          END LOOP;
          
          IF L_START_SHIFT_POS IS NULL THEN
             IF L_TRACE THEN
                TRACE(A_FIND_EXISTING_PP||'#'||A_FIND_EXISTING_PP_PGNODE||' could not be found in list!');
                FOR L_X IN 1..L_SVPG_NR_OF_ROWS LOOP
                    TRACE('   '||L_SVPG_PG_TAB(L_X)||'#'||L_SVPG_PGNODE_TAB(L_X));
                END LOOP;
             END IF;
          END IF;
       END IF;

       TRACE(A_ACTION || NVL(L_START_SHIFT_POS, L_SVPG_NR_OF_ROWS));
       
L_STEP := '-2MSvPg';       
       
       L_START_SHIFT_POS := GREATEST(1, L_START_SHIFT_POS);
       IF A_ACTION <> 'APPEND' THEN
          L_SHIFT := A_LAST - A_FIRST + 1;        
          FOR L_X IN REVERSE GREATEST(L_START_SHIFT_POS,1)..L_SVPG_NR_OF_ROWS LOOP
             L_SVPG_SC_TAB(L_X+L_SHIFT) := L_SVPG_SC_TAB(L_X);
             L_SVPG_PG_TAB(L_X+L_SHIFT) := L_SVPG_PG_TAB(L_X);
             L_SVPG_PP_VERSION_TAB(L_X+L_SHIFT) := L_SVPG_PP_VERSION_TAB(L_X);
             L_SVPG_PP_KEY1_TAB(L_X+L_SHIFT) := L_SVPG_PP_KEY1_TAB(L_X);
             L_SVPG_PP_KEY2_TAB(L_X+L_SHIFT) := L_SVPG_PP_KEY2_TAB(L_X);
             L_SVPG_PP_KEY3_TAB(L_X+L_SHIFT) := L_SVPG_PP_KEY3_TAB(L_X);
             L_SVPG_PP_KEY4_TAB(L_X+L_SHIFT) := L_SVPG_PP_KEY4_TAB(L_X);
             L_SVPG_PP_KEY5_TAB(L_X+L_SHIFT) := L_SVPG_PP_KEY5_TAB(L_X);
             L_SVPG_PGNODE_TAB(L_X+L_SHIFT) := L_SVPG_PGNODE_TAB(L_X);
             L_SVPG_MODIFY_FLAG_TAB(L_X+L_SHIFT) := L_SVPG_MODIFY_FLAG_TAB(L_X);
             L_SVPG_ORIG_IND_TAB(L_X+L_SHIFT) := L_SVPG_ORIG_IND_TAB(L_X);
          END LOOP;          
       ELSE
          L_START_SHIFT_POS := L_SVPG_NR_OF_ROWS+1;
       END IF;

L_STEP := '-3MSvPg';       
          
       
       L_START_SHIFT_POS := GREATEST(1, L_START_SHIFT_POS);
       FOR L_X IN A_FIRST..A_LAST LOOP
          L_SVPG_SC_TAB(L_START_SHIFT_POS+(L_X-A_FIRST))          := A_SC;
          L_SVPG_PG_TAB(L_START_SHIFT_POS+(L_X-A_FIRST))          := L_PPLS_PP_TAB(L_X);
          L_SVPG_PP_VERSION_TAB(L_START_SHIFT_POS+(L_X-A_FIRST))  := L_PPLS_VERSION_TAB(L_X);
          L_SVPG_PP_KEY1_TAB(L_START_SHIFT_POS+(L_X-A_FIRST))     := L_PPLS_PP_KEY1_TAB(L_X);
          L_SVPG_PP_KEY2_TAB(L_START_SHIFT_POS+(L_X-A_FIRST))     := L_PPLS_PP_KEY2_TAB(L_X);
          L_SVPG_PP_KEY3_TAB(L_START_SHIFT_POS+(L_X-A_FIRST))     := L_PPLS_PP_KEY3_TAB(L_X);
          L_SVPG_PP_KEY4_TAB(L_START_SHIFT_POS+(L_X-A_FIRST))     := L_PPLS_PP_KEY4_TAB(L_X);
          L_SVPG_PP_KEY5_TAB(L_START_SHIFT_POS+(L_X-A_FIRST))     := L_PPLS_PP_KEY5_TAB(L_X);
          L_SVPG_PGNODE_TAB(L_START_SHIFT_POS+(L_X-A_FIRST))      := L_PPLS_PGNODE_TAB(L_X);
          L_SVPG_MODIFY_FLAG_TAB(L_START_SHIFT_POS+(L_X-A_FIRST)) := L_PPLS_MODIFY_FLAG_TAB(L_X);           
          L_SVPG_ORIG_IND_TAB(L_START_SHIFT_POS+(L_X-A_FIRST))    := L_PPLS_ORIG_IND_TAB(L_X);
       END LOOP;

L_STEP := '-4MSvPg';       

       L_PPLS_INDEX := L_LAST;       
       L_SVPG_NR_OF_ROWS := L_SVPG_NR_OF_ROWS + A_LAST - A_FIRST + 1;
       
    END MANIPULATESVPG;

    PROCEDURE MANIPULATESVPA(A_FIND_EXISTING_PP VARCHAR2, A_FIND_EXISTING_PP_PGNODE NUMBER,
                             A_FIND_EXISTING_PR VARCHAR2, A_FIND_EXISTING_PR_PANODE NUMBER,
                             A_FIRST NUMBER, A_LAST NUMBER, A_ACTION VARCHAR2, A_SC VARCHAR2) IS
      
    L_X               INTEGER;
    L_FOUND           INTEGER;
    L_AFTER           INTEGER;
    L_BEFORE          INTEGER;
    L_START_SHIFT_POS INTEGER;
    L_SHIFT           INTEGER;
    
    BEGIN

       
       
       
       
L_STEP := '-1MSvPa';       
  
       TRACE(A_ACTION||' #first '||A_FIRST||' #last '||A_LAST);
       
       L_START_SHIFT_POS := GREATEST(1, L_START_SHIFT_POS);
       IF A_ACTION <> 'APPEND' THEN
          FOR L_X IN 1..L_SVPA_NR_OF_ROWS LOOP
             IF L_SVPA_PG_TAB(L_X) = A_FIND_EXISTING_PP AND
                L_SVPA_PGNODE_TAB(L_X) = A_FIND_EXISTING_PP_PGNODE AND
                L_SVPA_PA_TAB(L_X) = A_FIND_EXISTING_PR AND
                L_SVPA_PANODE_TAB(L_X) = A_FIND_EXISTING_PR_PANODE THEN
                IF A_ACTION = 'AFTER' THEN
                   L_START_SHIFT_POS := L_X+1;   
                   
                   
                   
                   
                   
                   FOR L_Y IN L_X+1..L_SVPA_NR_OF_ROWS LOOP
                      IF L_SVPA_MODIFY_FLAG_TAB(L_Y) <> UNAPIGEN.DBERR_SUCCESS THEN
                         L_START_SHIFT_POS := L_Y+1;
                      ELSE
                         EXIT;
                      END IF;
                   END LOOP;                                      
                ELSE
                   L_START_SHIFT_POS := L_X; 
                END IF;
                EXIT;
             END IF;
          END LOOP;
          
          IF L_START_SHIFT_POS IS NULL THEN
             IF L_TRACE THEN
                TRACE(A_FIND_EXISTING_PP||'#'||A_FIND_EXISTING_PP_PGNODE||A_FIND_EXISTING_PR||'#'||A_FIND_EXISTING_PR_PANODE||' could not be found in list!');
                FOR L_X IN 1..L_SVPA_NR_OF_ROWS LOOP
                    TRACE('   '||L_SVPA_PG_TAB(L_X)||'#'||L_SVPA_PGNODE_TAB(L_X)||'#'||L_SVPA_PA_TAB(L_X)||'#'||L_SVPA_PANODE_TAB(L_X));
                END LOOP;
             END IF;
          END IF;
       END IF;

       TRACE('to find '||A_FIND_EXISTING_PP||'#'||A_FIND_EXISTING_PP_PGNODE||A_FIND_EXISTING_PR||'#'||A_FIND_EXISTING_PR_PANODE);
       TRACE(A_ACTION || NVL(L_START_SHIFT_POS, L_SVPA_NR_OF_ROWS));
       
L_STEP := '-2MSvPa';       
       
       IF A_ACTION <> 'APPEND' THEN
          L_SHIFT := A_LAST - A_FIRST + 1;        
          FOR L_X IN REVERSE GREATEST(L_START_SHIFT_POS,1)..L_SVPA_NR_OF_ROWS LOOP
             L_SVPA_SC_TAB(L_X+L_SHIFT) := L_SVPA_SC_TAB(L_X);
             L_SVPA_PG_TAB(L_X+L_SHIFT) := L_SVPA_PG_TAB(L_X);
             L_SVPA_PGNODE_TAB(L_X+L_SHIFT) := L_SVPA_PGNODE_TAB(L_X);
             L_SVPA_PP_VERSION_TAB(L_X+L_SHIFT) := L_SVPA_PP_VERSION_TAB(L_X);
             L_SVPA_PA_TAB(L_X+L_SHIFT) := L_SVPA_PA_TAB(L_X);
             L_SVPA_PR_VERSION_TAB(L_X+L_SHIFT) := L_SVPA_PR_VERSION_TAB(L_X);
             L_SVPA_PANODE_TAB(L_X+L_SHIFT) := L_SVPA_PANODE_TAB(L_X);
             L_SVPA_MODIFY_FLAG_TAB(L_X+L_SHIFT) := L_SVPA_MODIFY_FLAG_TAB(L_X);
             L_SVPA_ORIG_IND_TAB(L_X+L_SHIFT) := L_SVPA_ORIG_IND_TAB(L_X);
          END LOOP;          
       ELSE
          L_START_SHIFT_POS := L_SVPA_NR_OF_ROWS+1;
       END IF;

L_STEP := '-3MSvPa';       
          
       
       L_START_SHIFT_POS := GREATEST(1, L_START_SHIFT_POS);
       FOR L_X IN A_FIRST..A_LAST LOOP
          L_SVPA_SC_TAB(L_START_SHIFT_POS+(L_X-A_FIRST))          := A_SC;
          L_SVPA_PG_TAB(L_START_SHIFT_POS+(L_X-A_FIRST))          := L_PRLS_PP_TAB(L_X);
          L_SVPA_PP_VERSION_TAB(L_START_SHIFT_POS+(L_X-A_FIRST))  := L_PRLS_PP_VERSION_TAB(L_X);
          L_SVPA_PGNODE_TAB(L_START_SHIFT_POS+(L_X-A_FIRST))      := L_PRLS_PGNODE_TAB(L_X);
          L_SVPA_PA_TAB(L_START_SHIFT_POS+(L_X-A_FIRST))          := L_PRLS_PR_TAB(L_X);
          L_SVPA_PR_VERSION_TAB(L_START_SHIFT_POS+(L_X-A_FIRST))  := L_PRLS_VERSION_TAB(L_X);
          L_SVPA_PANODE_TAB(L_START_SHIFT_POS+(L_X-A_FIRST))      := L_PRLS_PANODE_TAB(L_X);
          L_SVPA_MODIFY_FLAG_TAB(L_START_SHIFT_POS+(L_X-A_FIRST)) := L_PRLS_MODIFY_FLAG_TAB(L_X);           
          L_SVPA_ORIG_IND_TAB(L_START_SHIFT_POS+(L_X-A_FIRST))    := L_PRLS_ORIG_IND_TAB(L_X);
       END LOOP;

L_STEP := '-4MSvPa';       

       L_PRLS_INDEX := L_LAST;       
       L_SVPA_NR_OF_ROWS := L_SVPA_NR_OF_ROWS + A_LAST - A_FIRST + 1;
       
    END MANIPULATESVPA;

    PROCEDURE MANIPULATESVME(A_FIND_EXISTING_PP VARCHAR2, A_FIND_EXISTING_PP_PGNODE NUMBER,
                             A_FIND_EXISTING_PR VARCHAR2, A_FIND_EXISTING_PR_PANODE NUMBER,
                             A_FIND_EXISTING_MT VARCHAR2, A_FIND_EXISTING_MT_MENODE NUMBER,
                             A_FIRST NUMBER, A_LAST NUMBER, A_ACTION VARCHAR2, A_SC VARCHAR2) IS
      
    L_X               INTEGER;
    L_FOUND           INTEGER;
    L_AFTER           INTEGER;
    L_BEFORE          INTEGER;
    L_START_SHIFT_POS INTEGER;
    L_SHIFT           INTEGER;
    
    BEGIN

       
       
       
       
L_STEP := '-1MSvMe';       

       IF L_TRACE THEN
          TRACE('before shifting');
          TRACE(A_FIND_EXISTING_PP||'#'||A_FIND_EXISTING_PP_PGNODE||
                               A_FIND_EXISTING_PR||'#'||A_FIND_EXISTING_PR_PANODE||
                               A_FIND_EXISTING_MT||'#'||A_FIND_EXISTING_MT_MENODE||
                               '#'||A_FIRST||'#'||A_LAST||'#'||A_ACTION);
          FOR L_X IN 1..L_SVME_NR_OF_ROWS LOOP
              TRACE('   '||L_SVME_PG_TAB(L_X)||'#'||L_SVME_PGNODE_TAB(L_X)||'#'||
                                          L_SVME_PA_TAB(L_X)||'#'||L_SVME_PANODE_TAB(L_X)||'#'||
                                          L_SVME_ME_TAB(L_X)||'#'||L_SVME_MENODE_TAB(L_X));
          END LOOP;
       END IF;
  
       
       IF A_ACTION <> 'APPEND' THEN
          FOR L_X IN 1..L_SVME_NR_OF_ROWS LOOP
             IF L_SVME_PG_TAB(L_X) = A_FIND_EXISTING_PP AND
                L_SVME_PGNODE_TAB(L_X) = A_FIND_EXISTING_PP_PGNODE AND
                L_SVME_PA_TAB(L_X) = A_FIND_EXISTING_PR AND
                L_SVME_PANODE_TAB(L_X) = A_FIND_EXISTING_PR_PANODE AND
                L_SVME_ME_TAB(L_X) = A_FIND_EXISTING_MT AND
                L_SVME_MENODE_TAB(L_X) = A_FIND_EXISTING_MT_MENODE THEN
                IF A_ACTION = 'AFTER' THEN
                   L_START_SHIFT_POS := L_X+1;   
                   
                   
                   
                   
                   
                   FOR L_Y IN L_X+1..L_SVME_NR_OF_ROWS LOOP
                      IF L_SVME_MODIFY_FLAG_TAB(L_Y) <> UNAPIGEN.DBERR_SUCCESS THEN
                         L_START_SHIFT_POS := L_Y+1;
                      ELSE
                         EXIT;
                      END IF;
                   END LOOP;                       
                ELSE
                   L_START_SHIFT_POS := L_X; 
                END IF;
                EXIT;
             END IF;
          END LOOP;
          
          IF L_START_SHIFT_POS IS NULL THEN
             IF L_TRACE THEN
                TRACE(A_FIND_EXISTING_PP||'#'||A_FIND_EXISTING_PP_PGNODE||
                                     A_FIND_EXISTING_PR||'#'||A_FIND_EXISTING_PR_PANODE||
                                     A_FIND_EXISTING_MT||'#'||A_FIND_EXISTING_MT_MENODE||' could not be found in list!');
                FOR L_X IN 1..L_SVME_NR_OF_ROWS LOOP
                    TRACE('   '||L_SVME_PG_TAB(L_X)||'#'||L_SVME_PGNODE_TAB(L_X)||'#'||
                                                L_SVME_PA_TAB(L_X)||'#'||L_SVME_PANODE_TAB(L_X)||'#'||
                                                L_SVME_ME_TAB(L_X)||'#'||L_SVME_MENODE_TAB(L_X));
                END LOOP;
             END IF;
          END IF;
       END IF;

       TRACE(A_ACTION || NVL(L_START_SHIFT_POS, L_SVME_NR_OF_ROWS));
       
L_STEP := '-2MSvMe';       
       
       L_START_SHIFT_POS := GREATEST(1, L_START_SHIFT_POS);
       IF A_ACTION <> 'APPEND' THEN
          L_SHIFT := A_LAST - A_FIRST + 1;        
          TRACE('shifting array with  '|| L_SHIFT || ' positions starting from '|| L_START_SHIFT_POS);
          FOR L_X IN REVERSE L_START_SHIFT_POS..L_SVME_NR_OF_ROWS LOOP
             L_SVME_SC_TAB(L_X+L_SHIFT) := L_SVME_SC_TAB(L_X);
             L_SVME_PG_TAB(L_X+L_SHIFT) := L_SVME_PG_TAB(L_X);
             L_SVME_PGNODE_TAB(L_X+L_SHIFT) := L_SVME_PGNODE_TAB(L_X);
             L_SVME_PA_TAB(L_X+L_SHIFT) := L_SVME_PA_TAB(L_X);
             L_SVME_PR_VERSION_TAB(L_X+L_SHIFT) := L_SVME_PR_VERSION_TAB(L_X);
             L_SVME_PANODE_TAB(L_X+L_SHIFT) := L_SVME_PANODE_TAB(L_X);
             L_SVME_ME_TAB(L_X+L_SHIFT) := L_SVME_ME_TAB(L_X);
             L_SVME_MT_VERSION_TAB(L_X+L_SHIFT) := L_SVME_MT_VERSION_TAB(L_X);
             L_SVME_MENODE_TAB(L_X+L_SHIFT) := L_SVME_MENODE_TAB(L_X);
             L_SVME_MODIFY_FLAG_TAB(L_X+L_SHIFT) := L_SVME_MODIFY_FLAG_TAB(L_X);
          END LOOP;          
       ELSE
          L_START_SHIFT_POS := L_SVME_NR_OF_ROWS+1;
       END IF;

L_STEP := '-3MSvMe';       
          
       
       L_START_SHIFT_POS := GREATEST(1, L_START_SHIFT_POS);
       FOR L_X IN A_FIRST..A_LAST LOOP
          L_SVME_SC_TAB(L_START_SHIFT_POS+(L_X-A_FIRST))          := A_SC;
          L_SVME_PG_TAB(L_START_SHIFT_POS+(L_X-A_FIRST))          := L_MTLS_PP_TAB(L_X);
          L_SVME_PGNODE_TAB(L_START_SHIFT_POS+(L_X-A_FIRST))      := L_MTLS_PGNODE_TAB(L_X);
          L_SVME_PA_TAB(L_START_SHIFT_POS+(L_X-A_FIRST))          := L_MTLS_PR_TAB(L_X);
          L_SVME_PANODE_TAB(L_START_SHIFT_POS+(L_X-A_FIRST))      := L_MTLS_PANODE_TAB(L_X);
          L_SVME_PR_VERSION_TAB(L_START_SHIFT_POS+(L_X-A_FIRST))  := L_MTLS_PR_VERSION_TAB(L_X);
          L_SVME_ME_TAB(L_START_SHIFT_POS+(L_X-A_FIRST))          := L_MTLS_MT_TAB(L_X);
          L_SVME_MT_VERSION_TAB(L_START_SHIFT_POS+(L_X-A_FIRST))  := L_MTLS_VERSION_TAB(L_X);
          L_SVME_MENODE_TAB(L_START_SHIFT_POS+(L_X-A_FIRST))      := L_MTLS_MENODE_TAB(L_X);
          L_SVME_MODIFY_FLAG_TAB(L_START_SHIFT_POS+(L_X-A_FIRST)) := L_MTLS_MODIFY_FLAG_TAB(L_X);           
       END LOOP;

L_STEP := '-4MSvMe';       

       L_MTLS_INDEX := L_LAST;       
       L_SVME_NR_OF_ROWS := L_SVME_NR_OF_ROWS + A_LAST - A_FIRST + 1;

       IF L_TRACE THEN
          TRACE('After shifting');
          FOR L_X IN 1..L_SVME_NR_OF_ROWS LOOP
              TRACE('   '||L_SVME_PG_TAB(L_X)||'#'||L_SVME_PGNODE_TAB(L_X)||'#'||
                    L_SVME_PA_TAB(L_X)||'#'||L_SVME_PANODE_TAB(L_X)||'#'||L_SVME_PR_VERSION_TAB(L_X)||'#'||
                                          L_SVME_ME_TAB(L_X)||'#'||L_SVME_MENODE_TAB(L_X));
          END LOOP;
       END IF;
       
    END MANIPULATESVME;
    
   
    
BEGIN

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF P_DEBUG_AFTP IS NULL THEN
      OPEN C_SYSTEM ('DEBUG_AFTP');
      FETCH C_SYSTEM INTO P_DEBUG_AFTP;
      IF C_SYSTEM%NOTFOUND THEN
         P_DEBUG_AFTP := 'NO';
      END IF;
      CLOSE C_SYSTEM;
   END IF;
   IF P_DEBUG_AFTP = 'YES' THEN
      L_TRACE := TRUE;
   ELSE
      L_TRACE := FALSE;
   END IF;
   TRACE('a_nr_of_rows: '||A_NR_OF_ROWS);
   
   
   
   
   L_SQLERRM := NULL;
   IF NVL(A_NEXT_ROWS, 0) = 0 THEN
      IF NVL(P_SAVEFTP_CALLS, 0) <> 0 THEN
         L_SQLERRM := 'SaveFullTestPlan termination call never called for previous call ! (a_next_rows=-1)';
         RAISE STPERROR;
      END IF;
      P_SAVEFTP_PG := NULL;
      P_SAVEFTP_PP_VERSION := NULL;
      P_SAVEFTP_PP_KEY1 := NULL;
      P_SAVEFTP_PP_KEY2 := NULL;
      P_SAVEFTP_PP_KEY3 := NULL;
      P_SAVEFTP_PP_KEY4 := NULL;
      P_SAVEFTP_PP_KEY5 := NULL;
      P_SAVEFTP_NR_MEASUR := NULL;
      P_SAVEFTP_PA := NULL;
      P_SAVEFTP_CALLS := 1;
   ELSIF NVL(A_NEXT_ROWS, 0) = -1 THEN
      P_SAVEFTP_CALLS := NVL(P_SAVEFTP_CALLS, 0) + 1;      
   ELSIF NVL(A_NEXT_ROWS, 0) = 1 THEN
      IF NVL(P_SAVEFTP_CALLS, 0) = 0 THEN   
         L_SQLERRM := 'SaveFullTestPlan startup call never called ! (a_next_rows=0)';
         RAISE STPERROR;   
      END IF;




      P_SAVEFTP_CALLS := NVL(P_SAVEFTP_CALLS, 0) + 1;      
   ELSE
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NEXTROWS;
      RAISE STPERROR;
   END IF;         
   
   
   
   
   
   
   
   

   
   IF A_NEXT_ROWS = 0 THEN
      L_BUF_A_SC_NR_OF_ROWS := 0;
   END IF;
   
   IF A_SC_NR_OF_ROWS > 0 THEN
      FOR L_SC_SEQ_NO IN 1..A_SC_NR_OF_ROWS LOOP           
         IF NVL(A_SC(L_SC_SEQ_NO), ' ') = ' ' THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
            RAISE STPERROR;
         END IF;
         
         
         
         
         L_BUF_A_SC(L_BUF_A_SC_NR_OF_ROWS+L_SC_SEQ_NO) := A_SC(L_SC_SEQ_NO); 
      END LOOP;
      L_BUF_A_SC_NR_OF_ROWS := L_BUF_A_SC_NR_OF_ROWS + A_SC_NR_OF_ROWS;
   END IF;
   
   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP           
      IF NVL(A_TST_TP(L_SEQ_NO), ' ') = ' ' OR
         NVL(A_TST_ID(L_SEQ_NO), ' ') = ' ' OR
         NVL(A_TST_ID_VERSION(L_SEQ_NO), ' ') = ' ' THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
      END IF;      
      
      IF NVL(A_MODIFY_FLAG(L_SEQ_NO), 1) NOT IN (UNAPIGEN.DBERR_SUCCESS,
                                                 UNAPIGEN.MOD_FLAG_INSERT,
                                                 UNAPIGEN.MOD_FLAG_CREATE) THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INVALMODFLAG;
         RAISE STPERROR;         
      END IF;
   END LOOP;
         TRACE('a_nr_of_rows: '||A_NR_OF_ROWS);

   IF L_TRACE THEN
      TRACE('before preprocessing');
      FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP           
         TRACE(L_SEQ_NO||'#'||NVL(A_TST_TP(L_SEQ_NO), ' ')|| '#'|| NVL(A_TST_ID(L_SEQ_NO), ' ')||'#'||A_MODIFY_FLAG(L_SEQ_NO)||'#'||A_TST_NR_MEASUR(L_SEQ_NO));
      END LOOP;
   END IF;
 
 L_NR_OF_ROWS := A_NR_OF_ROWS;
 
 



TRACE('prepre processing');
    L_PPRO_CURR_PP_VERSION := NULL;
    L_PPRO_CURR_PP_KEY1 := NULL;
    L_PPRO_CURR_PP_KEY2 := NULL;
    L_PPRO_CURR_PP_KEY3 := NULL;
    L_PPRO_CURR_PP_KEY4 := NULL;
    L_PPRO_CURR_PP_KEY5 := NULL;
    L_PPRO_CURR_PP_ROW := 0;
    L_PPRO_CURR_PP_LAST_ROW := 0;
    L_PPRO_CURR_PR := NULL;
    L_PPRO_CURR_PR_VERSION := NULL;
    L_PPRO_CURR_PR_ROW := 0;
    L_PPRO_CURR_PR_LAST_ROW := 0;
    L_PPRO_CURR_MT := NULL;
    L_PPRO_CURR_MT_ROW := 0;
    L_CURR_ROW := 1;
    
   LOOP
      L_PPRO_PROCESS_NEXT_ROW := TRUE;
      
      IF A_TST_TP(L_CURR_ROW) = 'mt' AND A_TST_NR_MEASUR(L_CURR_ROW) > 1  AND A_MODIFY_FLAG(L_CURR_ROW) <> UNAPIGEN.DBERR_SUCCESS THEN
         L_PPRO_NR_MEASUR := A_TST_NR_MEASUR(L_CURR_ROW);
         A_TST_NR_MEASUR(L_CURR_ROW) := 1;
         
         FOR I IN REVERSE (L_CURR_ROW + 1)..L_NR_OF_ROWS LOOP
            A_TST_ID(I + L_PPRO_NR_MEASUR -1) := A_TST_ID(I);
            A_TST_ID_VERSION(I + L_PPRO_NR_MEASUR -1) := A_TST_ID_VERSION(I);
            A_TST_TP(I + L_PPRO_NR_MEASUR -1) := A_TST_TP(I);
            A_PP_KEY1(I + L_PPRO_NR_MEASUR -1) := A_PP_KEY1(I);
            A_PP_KEY2(I + L_PPRO_NR_MEASUR -1) := A_PP_KEY2(I);
            A_PP_KEY3(I + L_PPRO_NR_MEASUR -1) := A_PP_KEY3(I);
            A_PP_KEY4(I + L_PPRO_NR_MEASUR -1) := A_PP_KEY4(I);
            A_PP_KEY5(I + L_PPRO_NR_MEASUR -1) := A_PP_KEY5(I);
            A_TST_NR_MEASUR(I + L_PPRO_NR_MEASUR -1) := A_TST_NR_MEASUR(I);
            A_MODIFY_FLAG(I + L_PPRO_NR_MEASUR -1) := A_MODIFY_FLAG(I);
         END LOOP;
         L_NR_OF_ROWS := L_NR_OF_ROWS + L_PPRO_NR_MEASUR -1;
         
         FOR I IN (L_CURR_ROW + 1)..(L_CURR_ROW + L_PPRO_NR_MEASUR -1) LOOP
            A_TST_ID(I)        := A_TST_ID(L_CURR_ROW);
            A_TST_ID_VERSION(I):= A_TST_ID_VERSION(L_CURR_ROW);
            A_TST_TP(I)        := A_TST_TP(L_CURR_ROW);
            A_PP_KEY1(I)       := A_PP_KEY1(L_CURR_ROW);
            A_PP_KEY2(I)       := A_PP_KEY2(L_CURR_ROW);
            A_PP_KEY3(I)       := A_PP_KEY3(L_CURR_ROW);
            A_PP_KEY4(I)       := A_PP_KEY4(L_CURR_ROW);
            A_PP_KEY5(I)       := A_PP_KEY5(L_CURR_ROW);
            A_TST_NR_MEASUR(I) := 1;
            A_MODIFY_FLAG(I)   := A_MODIFY_FLAG(L_CURR_ROW);
         END LOOP;
         L_CURR_ROW := L_CURR_ROW + L_PPRO_NR_MEASUR;
      ELSE
         L_CURR_ROW := L_CURR_ROW + 1; 
      END IF;
   EXIT WHEN L_CURR_ROW > L_NR_OF_ROWS;    
   END LOOP;
   TRACE('prepre processing: After duplicating methods');
   TRACE('nr_of_rows:' ||L_NR_OF_ROWS );
   
   L_CURR_ROW := 1;
   LOOP
      IF ((A_TST_TP(L_CURR_ROW) = 'pr' OR A_TST_TP(L_CURR_ROW) = 'px') AND A_TST_NR_MEASUR(L_CURR_ROW) > 1) AND A_MODIFY_FLAG(L_CURR_ROW) <> UNAPIGEN.DBERR_SUCCESS THEN
         L_PPRO_CURR_PR := A_TST_ID(L_CURR_ROW);
         L_PPRO_NR_MEASUR := A_TST_NR_MEASUR(L_CURR_ROW);
         A_TST_NR_MEASUR(L_CURR_ROW) := 1;
         
         L_X := L_CURR_ROW +1;
         LOOP
            IF (L_X > L_NR_OF_ROWS ) THEN
               L_X := L_NR_OF_ROWS;
            END IF;
            EXIT WHEN L_X = L_NR_OF_ROWS; 
            EXIT WHEN A_TST_TP(L_X + 1 ) = 'pr';
            EXIT WHEN A_TST_TP(L_X + 1 ) = 'pp';
            EXIT WHEN A_TST_TP(L_X + 1 ) = 'px';
            L_X := L_X +1;
         END LOOP;
         L_PPRO_CURR_PR_LAST_ROW := L_X;
         
         L_PPRO_ROWSTOSHIFT := (L_PPRO_NR_MEASUR -1) * (L_PPRO_CURR_PR_LAST_ROW - L_CURR_ROW + 1);
     TRACE('l_ppro_rowstoshift:' || L_PPRO_ROWSTOSHIFT );
        FOR I IN REVERSE (L_PPRO_CURR_PR_LAST_ROW + 1)..L_NR_OF_ROWS LOOP
            A_TST_ID(I + L_PPRO_ROWSTOSHIFT)       := A_TST_ID(I);
            A_TST_ID_VERSION(I + L_PPRO_ROWSTOSHIFT) := A_TST_ID_VERSION(I);
            A_TST_TP(I + L_PPRO_ROWSTOSHIFT)       := A_TST_TP(I);
            A_PP_KEY1(I + L_PPRO_ROWSTOSHIFT ) := A_PP_KEY1(I);
            A_PP_KEY2(I + L_PPRO_ROWSTOSHIFT ) := A_PP_KEY2(I);
            A_PP_KEY3(I + L_PPRO_ROWSTOSHIFT ) := A_PP_KEY3(I);
            A_PP_KEY4(I + L_PPRO_ROWSTOSHIFT ) := A_PP_KEY4(I);
            A_PP_KEY5(I + L_PPRO_ROWSTOSHIFT) := A_PP_KEY5(I);
            A_TST_NR_MEASUR(I + L_PPRO_ROWSTOSHIFT):= A_TST_NR_MEASUR(I);
            A_MODIFY_FLAG(I + L_PPRO_ROWSTOSHIFT)  := A_MODIFY_FLAG(I);
         END LOOP;
         L_NR_OF_ROWS := L_NR_OF_ROWS + L_PPRO_ROWSTOSHIFT;
         
         FOR I IN (L_PPRO_CURR_PR_LAST_ROW + 1)..(L_PPRO_CURR_PR_LAST_ROW + L_PPRO_ROWSTOSHIFT) LOOP
            A_TST_ID(I)         := A_TST_ID(        I - (L_PPRO_CURR_PR_LAST_ROW - L_CURR_ROW + 1));
            A_TST_ID_VERSION(I) := A_TST_ID_VERSION(I - (L_PPRO_CURR_PR_LAST_ROW - L_CURR_ROW + 1));
            A_TST_TP(I)         := A_TST_TP(        I - (L_PPRO_CURR_PR_LAST_ROW - L_CURR_ROW + 1));
            A_PP_KEY1(I )       := A_PP_KEY1(       I - (L_PPRO_CURR_PR_LAST_ROW - L_CURR_ROW + 1));
            A_PP_KEY2(I)        := A_PP_KEY2(       I - (L_PPRO_CURR_PR_LAST_ROW - L_CURR_ROW + 1));
            A_PP_KEY3(I)        := A_PP_KEY3(       I - (L_PPRO_CURR_PR_LAST_ROW - L_CURR_ROW + 1));
            A_PP_KEY4(I)        := A_PP_KEY4(       I - (L_PPRO_CURR_PR_LAST_ROW - L_CURR_ROW + 1));
            A_PP_KEY5(I )       := A_PP_KEY5(       I - (L_PPRO_CURR_PR_LAST_ROW - L_CURR_ROW + 1));
            A_TST_NR_MEASUR(I)  := A_TST_NR_MEASUR(I - (L_PPRO_CURR_PR_LAST_ROW - L_CURR_ROW + 1));
            A_MODIFY_FLAG(I)    := A_MODIFY_FLAG(I - (L_PPRO_CURR_PR_LAST_ROW - L_CURR_ROW + 1));
         END LOOP;
         L_CURR_ROW := L_PPRO_CURR_PR_LAST_ROW + L_PPRO_ROWSTOSHIFT + 1;
      ELSE
         L_CURR_ROW := L_CURR_ROW + 1; 
      END IF;
   EXIT WHEN L_CURR_ROW > L_NR_OF_ROWS;    
   END LOOP;
   TRACE('prepre processing: After duplicating parameters');
    
   L_CURR_ROW := 1;
   LOOP
      IF A_TST_TP(L_CURR_ROW) = 'pp' AND A_TST_NR_MEASUR(L_CURR_ROW) > 1 AND A_MODIFY_FLAG(L_CURR_ROW) <> UNAPIGEN.DBERR_SUCCESS THEN
         L_PPRO_CURR_PR := A_TST_ID(L_CURR_ROW);
         L_PPRO_NR_MEASUR := A_TST_NR_MEASUR(L_CURR_ROW);
         A_TST_NR_MEASUR(L_CURR_ROW) := 1;
         
         L_X := L_CURR_ROW +1;
         LOOP
            IF (L_X > L_NR_OF_ROWS ) THEN
               L_X := L_NR_OF_ROWS;
            END IF;
            EXIT WHEN L_X = L_NR_OF_ROWS; 
            EXIT WHEN A_TST_TP(L_X + 1 ) = 'pp'; 
            L_X := L_X +1;
         END LOOP;
         L_PPRO_CURR_PP_LAST_ROW := L_X;
         
         L_PPRO_ROWSTOSHIFT := (L_PPRO_NR_MEASUR -1) * (L_PPRO_CURR_PP_LAST_ROW - L_CURR_ROW + 1);
         FOR I IN REVERSE (L_PPRO_CURR_PP_LAST_ROW + 1)..L_NR_OF_ROWS LOOP
            A_TST_ID(I + L_PPRO_ROWSTOSHIFT)         := A_TST_ID(I);
            A_TST_ID_VERSION(I + L_PPRO_ROWSTOSHIFT) := A_TST_ID_VERSION(I);
            A_TST_TP(I + L_PPRO_ROWSTOSHIFT)         := A_TST_TP(I);
            A_PP_KEY1(I + L_PPRO_ROWSTOSHIFT ) := A_PP_KEY1(I);
            A_PP_KEY2(I + L_PPRO_ROWSTOSHIFT ) := A_PP_KEY2(I);
            A_PP_KEY3(I + L_PPRO_ROWSTOSHIFT ) := A_PP_KEY3(I);
            A_PP_KEY4(I + L_PPRO_ROWSTOSHIFT ) := A_PP_KEY4(I);
            A_PP_KEY5(I + L_PPRO_ROWSTOSHIFT)  := A_PP_KEY5(I);
            A_TST_NR_MEASUR(I + L_PPRO_ROWSTOSHIFT)  := A_TST_NR_MEASUR(I);
            A_MODIFY_FLAG(I + L_PPRO_ROWSTOSHIFT)    := A_MODIFY_FLAG(I);
         END LOOP;
         L_NR_OF_ROWS := L_NR_OF_ROWS + L_PPRO_ROWSTOSHIFT;
         
         FOR I IN (L_PPRO_CURR_PP_LAST_ROW + 1)..(L_PPRO_CURR_PP_LAST_ROW + L_PPRO_ROWSTOSHIFT) LOOP
            A_TST_ID(I)        := A_TST_ID        ( I - ( L_PPRO_CURR_PP_LAST_ROW - L_CURR_ROW + 1));
            A_TST_ID_VERSION(I):= A_TST_ID_VERSION( I - ( L_PPRO_CURR_PP_LAST_ROW - L_CURR_ROW + 1));
            A_TST_TP(I)        := A_TST_TP        ( I - ( L_PPRO_CURR_PP_LAST_ROW - L_CURR_ROW + 1));
            A_PP_KEY1(I )      := A_PP_KEY1       ( I - ( L_PPRO_CURR_PP_LAST_ROW - L_CURR_ROW + 1));
            A_PP_KEY2(I)       := A_PP_KEY2       ( I - ( L_PPRO_CURR_PP_LAST_ROW - L_CURR_ROW + 1));
            A_PP_KEY3(I)       := A_PP_KEY3       ( I - ( L_PPRO_CURR_PP_LAST_ROW - L_CURR_ROW + 1));
            A_PP_KEY4(I)       := A_PP_KEY4       ( I - ( L_PPRO_CURR_PP_LAST_ROW - L_CURR_ROW + 1));
            A_PP_KEY5(I )      := A_PP_KEY5       ( I - ( L_PPRO_CURR_PP_LAST_ROW - L_CURR_ROW + 1));
            A_TST_NR_MEASUR(I) := A_TST_NR_MEASUR ( I - ( L_PPRO_CURR_PP_LAST_ROW - L_CURR_ROW + 1));
            A_MODIFY_FLAG(I)   := A_MODIFY_FLAG   ( I - ( L_PPRO_CURR_PP_LAST_ROW - L_CURR_ROW + 1));
         END LOOP;
         L_CURR_ROW := L_PPRO_CURR_PR_LAST_ROW + L_PPRO_ROWSTOSHIFT + 1;
      ELSE
         L_CURR_ROW := L_CURR_ROW + 1; 
      END IF;
   EXIT WHEN L_CURR_ROW > L_NR_OF_ROWS;    
   END LOOP;
 FOR I IN 1..L_NR_OF_ROWS LOOP
 NULL;
TRACE('after preprepoc ;tp: ' || A_TST_TP(I)|| ' #id: ' || A_TST_ID(I) || ' #mod: ' || A_MODIFY_FLAG(I));
 END LOOP;
   A_NR_OF_ROWS := L_NR_OF_ROWS;
   
   
   
   L_PPRO_CURR_PP := NULL;
   L_PPRO_CURR_PP_ROW := 0;
   L_PPRO_CURR_PP_LAST_ROW := 0;
   L_PPRO_CURR_PR := NULL;
   L_PPRO_CURR_PR_ROW := 0;
   L_CURR_ROW := 1;
   
   LOOP
      
      L_PPRO_PROCESS_NEXT_ROW := TRUE;
      
      
      IF A_TST_TP(L_CURR_ROW) = 'pp' THEN
         TRACE('old current pp '||L_PPRO_CURR_PP||
               '#pp_version='||L_PPRO_CURR_PP_VERSION||
               '#ppk1='||L_PPRO_CURR_PP_KEY1||
               '#ppk2='||L_PPRO_CURR_PP_KEY2||
               '#ppk3='||L_PPRO_CURR_PP_KEY3||
               '#ppk4='||L_PPRO_CURR_PP_KEY4||
               '#ppk5='||L_PPRO_CURR_PP_KEY5
               );
         L_PPRO_CURR_PP := A_TST_ID(L_CURR_ROW);
         L_PPRO_CURR_PP_VERSION := A_TST_ID_VERSION(L_CURR_ROW);
         L_PPRO_CURR_PP_KEY1    := A_PP_KEY1(L_CURR_ROW);
         L_PPRO_CURR_PP_KEY2    := A_PP_KEY2(L_CURR_ROW);
         L_PPRO_CURR_PP_KEY3    := A_PP_KEY3(L_CURR_ROW);
         L_PPRO_CURR_PP_KEY4    := A_PP_KEY4(L_CURR_ROW);
         L_PPRO_CURR_PP_KEY5    := A_PP_KEY5(L_CURR_ROW);
         L_PPRO_CURR_PP_ROW := L_CURR_ROW;
         
         
         L_PPRO_CURR_PP_LAST_ROW := 0;
         IF L_CURR_ROW+1 <= A_NR_OF_ROWS THEN
            FOR L_PPRO_FIND_LAST_ROW4PP IN L_CURR_ROW + 1..A_NR_OF_ROWS LOOP
               IF A_TST_TP(L_PPRO_FIND_LAST_ROW4PP)='pp' THEN 
                  L_PPRO_CURR_PP_LAST_ROW := L_PPRO_FIND_LAST_ROW4PP - 1;
                  EXIT;
               END IF;                  
            END LOOP;
         ELSE
            
            EXIT;
         END IF;
         IF L_PPRO_CURR_PP_LAST_ROW = 0 THEN
            
            L_PPRO_CURR_PP_LAST_ROW := A_NR_OF_ROWS;
         END IF;

         TRACE('new current pp '||L_PPRO_CURR_PP||' between row '||L_CURR_ROW||' AND '||L_PPRO_CURR_PP_LAST_ROW);

      ELSIF A_TST_TP(L_CURR_ROW) = 'pr' THEN
         
         L_PPRO_CURR_PR := A_TST_ID(L_CURR_ROW);
         L_PPRO_CURR_PR_VERSION := A_TST_ID_VERSION(L_CURR_ROW);
         L_PPRO_CURR_PR_ROW := L_CURR_ROW;
         
         
         

         
         L_CHILDPP_REC.IS_PP := NULL;
         OPEN L_CHILDPP_CURSOR(L_PPRO_CURR_PP, L_PPRO_CURR_PP_VERSION, L_PPRO_CURR_PP_KEY1, L_PPRO_CURR_PP_KEY2, L_PPRO_CURR_PP_KEY3, L_PPRO_CURR_PP_KEY4, L_PPRO_CURR_PP_KEY5,L_PPRO_CURR_PR, L_PPRO_CURR_PR_VERSION);
         FETCH L_CHILDPP_CURSOR
         INTO L_CHILDPP_REC;
         CLOSE L_CHILDPP_CURSOR;

         IF L_CHILDPP_REC.IS_PP='1' THEN
            TRACE('pr '||L_PPRO_CURR_PR||' is a pp');
            
            
            
            L_PPRO_SOMEROWSSHIFTED := FALSE;
            L_PPRO_CURR_PR_MOD_FLAG := A_MODIFY_FLAG(L_CURR_ROW);
            TRACE(' before shifting curr_row='||L_CURR_ROW||'#last_row='||L_PPRO_CURR_PP_LAST_ROW);
            IF L_CURR_ROW < L_PPRO_CURR_PP_LAST_ROW THEN
               TRACE(' shifting effectively performed ');
               FOR L_PPRO_ROWSTOSHIFT IN L_CURR_ROW+1..L_PPRO_CURR_PP_LAST_ROW LOOP
                  A_TST_ID(L_PPRO_ROWSTOSHIFT-1) := A_TST_ID(L_PPRO_ROWSTOSHIFT);
                  A_TST_ID_VERSION(L_PPRO_ROWSTOSHIFT-1) := A_TST_ID_VERSION(L_PPRO_ROWSTOSHIFT);
                  A_TST_TP(L_PPRO_ROWSTOSHIFT-1) := A_TST_TP(L_PPRO_ROWSTOSHIFT);
                  A_PP_KEY1(L_PPRO_ROWSTOSHIFT-1) := A_PP_KEY1(L_PPRO_ROWSTOSHIFT);
                  A_PP_KEY2(L_PPRO_ROWSTOSHIFT-1) := A_PP_KEY2(L_PPRO_ROWSTOSHIFT);
                  A_PP_KEY3(L_PPRO_ROWSTOSHIFT-1) := A_PP_KEY3(L_PPRO_ROWSTOSHIFT);
                  A_PP_KEY4(L_PPRO_ROWSTOSHIFT-1) := A_PP_KEY4(L_PPRO_ROWSTOSHIFT);
                  A_PP_KEY5(L_PPRO_ROWSTOSHIFT-1) := A_PP_KEY5(L_PPRO_ROWSTOSHIFT);
                  A_TST_NR_MEASUR(L_PPRO_ROWSTOSHIFT-1) := A_TST_NR_MEASUR(L_PPRO_ROWSTOSHIFT);
                  A_MODIFY_FLAG(L_PPRO_ROWSTOSHIFT-1) := A_MODIFY_FLAG(L_PPRO_ROWSTOSHIFT);
                  L_PPRO_SOMEROWSSHIFTED := TRUE;
               END LOOP;
            END IF;
            TRACE(' after shifting');
            
            IF L_PPRO_SOMEROWSSHIFTED THEN
               TRACE(' shifting took place : transforming row='||L_PPRO_CURR_PP_LAST_ROW||' into a px row');
               A_TST_ID(L_PPRO_CURR_PP_LAST_ROW) := L_PPRO_CURR_PR;
               A_TST_TP(L_PPRO_CURR_PP_LAST_ROW) := 'px'; 
                                                          
               A_TST_ID_VERSION(L_PPRO_CURR_PP_LAST_ROW) := L_PPRO_CURR_PR_VERSION;
               
               A_PP_KEY1(L_PPRO_CURR_PP_LAST_ROW) :=   L_PPRO_CURR_PP_KEY1;
               A_PP_KEY2(L_PPRO_CURR_PP_LAST_ROW) :=   L_PPRO_CURR_PP_KEY2;
               A_PP_KEY3(L_PPRO_CURR_PP_LAST_ROW) :=   L_PPRO_CURR_PP_KEY3;
               A_PP_KEY4(L_PPRO_CURR_PP_LAST_ROW) :=   L_PPRO_CURR_PP_KEY4;
               A_PP_KEY5(L_PPRO_CURR_PP_LAST_ROW) :=   L_PPRO_CURR_PP_KEY5;
               
               A_MODIFY_FLAG(L_PPRO_CURR_PP_LAST_ROW) := L_PPRO_CURR_PR_MOD_FLAG;
               
               
               
               L_PPRO_PROCESS_NEXT_ROW := FALSE;
               
            ELSE
               
               
               TRACE(' no shifting took place : transforming row='||L_CURR_ROW||' into a px row');
               A_TST_TP(L_CURR_ROW) := 'px';
               
                                          
            END IF;
         ELSE
            
            
            NULL;         
         END IF;
         
      ELSE
         
         
         NULL;
         
      END IF;
      
      IF L_PPRO_PROCESS_NEXT_ROW THEN
         L_CURR_ROW := L_CURR_ROW + 1;         
      END IF;
      EXIT WHEN L_CURR_ROW > A_NR_OF_ROWS;
      
   END LOOP;

   IF L_TRACE THEN
      TRACE('after preprocessing');
      FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP   
         TRACE(L_SEQ_NO||'#'||NVL(A_TST_TP(L_SEQ_NO), ' ')|| '#'|| NVL(A_TST_ID(L_SEQ_NO), ' ')||'#'||A_MODIFY_FLAG(L_SEQ_NO)
         || '#' || A_PP_KEY1(L_SEQ_NO) || '#' || A_PP_KEY2(L_SEQ_NO) || '#' || A_PP_KEY3(L_SEQ_NO) ||
            '#' || A_PP_KEY4(L_SEQ_NO) || '#' || A_PP_KEY5(L_SEQ_NO));
      END LOOP;
   END IF;   

   
   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      L_TST_PGNODE(L_SEQ_NO)  :=0;
      L_TST_PANODE(L_SEQ_NO) := 0;
   END LOOP;
           
   FOR L_SC_SEQ_NO IN 1..L_BUF_A_SC_NR_OF_ROWS LOOP
   
      
      IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
         RAISE STPERROR;
      END IF;

      BEGIN
         
         L_ST := NULL;
         L_ST_VERSION := NULL;
      
         
         
         
   L_STEP := 'pp1';             
         
         
         
         
         
         

         L_GENERIC_HANDLED := FALSE;         
         LOOP 
         
            
            
            L_PPLS_NR_OF_ROWS := 0;
            FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
               IF A_TST_TP(L_SEQ_NO) = 'pp' THEN
                  L_RET_CODE := UNAPIPG.GETSUPPLIERANDCUSTOMER(A_PP_KEY1(L_SEQ_NO),
                                                               A_PP_KEY2(L_SEQ_NO),
                                                               A_PP_KEY3(L_SEQ_NO),
                                                               A_PP_KEY4(L_SEQ_NO), 
                                                               A_PP_KEY5(L_SEQ_NO), 
                                                               L_SUPPLIER,
                                                               L_CUSTOMER);
                  L_ADD_PP := FALSE;
                  IF L_GENERIC_HANDLED = FALSE AND L_SUPPLIER = ' ' AND L_CUSTOMER = ' ' THEN
                     L_ADD_PP := TRUE;
                  END IF;
                  IF L_GENERIC_HANDLED = TRUE AND L_ADD_PP = FALSE THEN
                     L_ADD_PP := TRUE;
                  END IF;
                  
                  IF L_ADD_PP THEN
                     L_PPLS_NR_OF_ROWS := L_PPLS_NR_OF_ROWS + 1;
                     L_PPLS_PP_TAB(L_PPLS_NR_OF_ROWS) := A_TST_ID(L_SEQ_NO);
                     L_PPLS_VERSION_TAB(L_PPLS_NR_OF_ROWS) := A_TST_ID_VERSION(L_SEQ_NO);
                     L_PPLS_PP_KEY1_TAB(L_PPLS_NR_OF_ROWS) := A_PP_KEY1(L_SEQ_NO);
                     L_PPLS_PP_KEY2_TAB(L_PPLS_NR_OF_ROWS) := A_PP_KEY2(L_SEQ_NO);
                     L_PPLS_PP_KEY3_TAB(L_PPLS_NR_OF_ROWS) := A_PP_KEY3(L_SEQ_NO);
                     L_PPLS_PP_KEY4_TAB(L_PPLS_NR_OF_ROWS) := A_PP_KEY4(L_SEQ_NO);
                     L_PPLS_PP_KEY5_TAB(L_PPLS_NR_OF_ROWS) := A_PP_KEY5(L_SEQ_NO);
                     L_PPLS_PGNODE_TAB(L_PPLS_NR_OF_ROWS) := NULL;
                     L_PPLS_MODIFY_FLAG_TAB(L_PPLS_NR_OF_ROWS) := A_MODIFY_FLAG(L_SEQ_NO);
                     L_PPLS_ORIG_IND_TAB(L_PPLS_NR_OF_ROWS) :=  L_SEQ_NO; 
                  END IF;
               END IF;
            END LOOP;

      L_STEP := 'pp2';             
            
            
            
            IF L_PPLS_NR_OF_ROWS > 0 THEN
               L_SVPG_NR_OF_ROWS := 0;
               FOR L_SCPG_REC IN L_SCPG_CURSOR(L_BUF_A_SC(L_SC_SEQ_NO)) LOOP

                  L_SVPG_NR_OF_ROWS := L_SVPG_NR_OF_ROWS + 1;
                  L_SVPG_SC_TAB(L_SVPG_NR_OF_ROWS) := L_BUF_A_SC(L_SC_SEQ_NO);
                  L_SVPG_PG_TAB(L_SVPG_NR_OF_ROWS) := L_SCPG_REC.PG;
                  L_SVPG_PP_VERSION_TAB(L_SVPG_NR_OF_ROWS) := L_SCPG_REC.PP_VERSION;
                  L_SVPG_PP_KEY1_TAB(L_SVPG_NR_OF_ROWS) := L_SCPG_REC.PP_KEY1;
                  L_SVPG_PP_KEY2_TAB(L_SVPG_NR_OF_ROWS) := L_SCPG_REC.PP_KEY2;
                  L_SVPG_PP_KEY3_TAB(L_SVPG_NR_OF_ROWS) := L_SCPG_REC.PP_KEY3;
                  L_SVPG_PP_KEY4_TAB(L_SVPG_NR_OF_ROWS) := L_SCPG_REC.PP_KEY4;
                  L_SVPG_PP_KEY5_TAB(L_SVPG_NR_OF_ROWS) := L_SCPG_REC.PP_KEY5;
                  L_SVPG_PGNODE_TAB(L_SVPG_NR_OF_ROWS) := L_SCPG_REC.PGNODE;
                  L_SVPG_MODIFY_FLAG_TAB(L_SVPG_NR_OF_ROWS) := UNAPIGEN.DBERR_SUCCESS;
                  L_SVPG_ORIG_IND_TAB(L_SVPG_NR_OF_ROWS) := -1;

         L_STEP := 'pp2.1.'||TO_CHAR(L_PPLS_NR_OF_ROWS);             
                  FOR L_SEQ_NO IN 1..L_PPLS_NR_OF_ROWS LOOP
                     IF L_PPLS_PP_TAB(L_SEQ_NO) = L_SCPG_REC.PG AND
                        L_PPLS_VERSION_TAB(L_SEQ_NO) = L_SCPG_REC.PP_VERSION AND
                        L_PPLS_PP_KEY1_TAB(L_SEQ_NO) = L_SCPG_REC.PP_KEY1 AND
                        L_PPLS_PP_KEY2_TAB(L_SEQ_NO) = L_SCPG_REC.PP_KEY2 AND
                        L_PPLS_PP_KEY3_TAB(L_SEQ_NO) = L_SCPG_REC.PP_KEY3 AND
                        L_PPLS_PP_KEY4_TAB(L_SEQ_NO) = L_SCPG_REC.PP_KEY4 AND
                        L_PPLS_PP_KEY5_TAB(L_SEQ_NO) = L_SCPG_REC.PP_KEY5 AND
                        L_PPLS_PGNODE_TAB(L_SEQ_NO) IS NULL THEN
         L_STEP := 'pp2.2';             
                        L_PPLS_PGNODE_TAB(L_SEQ_NO) := L_SCPG_REC.PGNODE;
                        L_TST_PGNODE(L_PPLS_ORIG_IND_TAB(L_SEQ_NO)) := L_PPLS_PGNODE_TAB(L_SEQ_NO);

                        IF L_PPLS_MODIFY_FLAG_TAB(L_SEQ_NO) <> UNAPIGEN.DBERR_SUCCESS THEN
                           TRACE('pp '||L_SCPG_REC.PG||' was marked for creation but already exists');
          L_STEP := 'pp2.3';             
                           L_PPLS_MODIFY_FLAG_TAB(L_SEQ_NO) := UNAPIGEN.DBERR_SUCCESS;
                        END IF;
                     END IF;
                  END LOOP;

               END LOOP;

               
               
               
               L_LAST_TO_KEEP := -1;
               L_KEEP_TAB.DELETE;

               
               L_SEQ_NO := 1;
               LOOP
                  IF L_PPLS_PGNODE_TAB(L_SEQ_NO) IS NULL AND 
                     L_PPLS_MODIFY_FLAG_TAB(L_SEQ_NO) = UNAPIGEN.DBERR_SUCCESS THEN
                     
                     
                     
                     
                     
                     
                     
                     
                     
                     
                     L_KEEP_TAB(L_SEQ_NO) := FALSE;
                  ELSE
                     IF L_ST IS NULL THEN
                        OPEN L_SC_CURSOR(L_BUF_A_SC(L_SC_SEQ_NO));
                        FETCH L_SC_CURSOR
                        INTO L_ST, L_ST_VERSION;
                        CLOSE L_SC_CURSOR;
                     END IF;
                     
                     IF ((L_PPLS_PP_KEY1_TAB(L_SEQ_NO) <> ' ') AND (UNAPIGEN.P_PP_KEY4PRODUCT = 1)) OR
                        ((L_PPLS_PP_KEY2_TAB(L_SEQ_NO) <> ' ') AND (UNAPIGEN.P_PP_KEY4PRODUCT = 2)) OR
                        ((L_PPLS_PP_KEY3_TAB(L_SEQ_NO) <> ' ') AND (UNAPIGEN.P_PP_KEY4PRODUCT = 3)) OR
                        ((L_PPLS_PP_KEY4_TAB(L_SEQ_NO) <> ' ') AND (UNAPIGEN.P_PP_KEY4PRODUCT = 4)) OR
                        ((L_PPLS_PP_KEY5_TAB(L_SEQ_NO) <> ' ') AND (UNAPIGEN.P_PP_KEY4PRODUCT = 5)) THEN
                        OPEN L_STPP_CURSOR(L_ST, L_ST_VERSION, L_PPLS_PP_TAB(L_SEQ_NO), 
                                           L_PPLS_PP_KEY1_TAB(L_SEQ_NO),
                                           L_PPLS_PP_KEY2_TAB(L_SEQ_NO),
                                           L_PPLS_PP_KEY3_TAB(L_SEQ_NO),
                                           L_PPLS_PP_KEY4_TAB(L_SEQ_NO),
                                           L_PPLS_PP_KEY5_TAB(L_SEQ_NO));
                        FETCH L_STPP_CURSOR
                        INTO L_PRESENT;
                        IF L_STPP_CURSOR%NOTFOUND THEN
                           L_KEEP_TAB(L_SEQ_NO) := FALSE;
                           TRACE('sc='||L_BUF_A_SC(L_SC_SEQ_NO)||
                                 '#pp='||L_PPLS_PP_TAB(L_SEQ_NO)||
                                 '#version='||L_PPLS_VERSION_TAB(L_SEQ_NO)||
                                 '#ppk1='||L_PPLS_PP_KEY1_TAB(L_SEQ_NO)||
                                 '#ppk2='||L_PPLS_PP_KEY2_TAB(L_SEQ_NO)||
                                 '#ppk3='||L_PPLS_PP_KEY3_TAB(L_SEQ_NO)||
                                 '#ppk4='||L_PPLS_PP_KEY4_TAB(L_SEQ_NO)||
                                 '#ppk5='||L_PPLS_PP_KEY5_TAB(L_SEQ_NO)||
                           ' skipped since it may not be assigned according to its test plan');
                        ELSE
                           L_KEEP_TAB(L_SEQ_NO) := TRUE;
                           L_LAST_TO_KEEP := L_SEQ_NO;
                        END IF;
                        CLOSE L_STPP_CURSOR;
                     ELSE
                        L_KEEP_TAB(L_SEQ_NO) := TRUE;
                        L_LAST_TO_KEEP := L_SEQ_NO;                     
                     END IF;
                  END IF;
                  L_SEQ_NO := L_SEQ_NO+1;
                  EXIT WHEN L_SEQ_NO>L_PPLS_NR_OF_ROWS; 
               END LOOP;

               
               IF L_LAST_TO_KEEP = -1 THEN
                  
                  L_PPLS_NR_OF_ROWS := 0;
               ELSE
                  
                  
                  L_PPLS_NR_OF_ROWS := L_LAST_TO_KEEP;
                  
                  L_SEQ_NO := L_PPLS_NR_OF_ROWS;
                  L_END_OF_BLOCK_TO_SUPPRESS := 0;
                  L_START_OF_BLOCK_TO_SUPPRESS := 0;
                  LOOP
                     IF NOT L_KEEP_TAB(L_SEQ_NO) THEN
                        IF L_START_OF_BLOCK_TO_SUPPRESS = 0 THEN
                           L_START_OF_BLOCK_TO_SUPPRESS := L_SEQ_NO;
                        END IF;
                        L_END_OF_BLOCK_TO_SUPPRESS := L_SEQ_NO;                     
                     END IF;
                     IF L_KEEP_TAB(L_SEQ_NO) OR L_SEQ_NO = 1 THEN
                        IF L_END_OF_BLOCK_TO_SUPPRESS > 0 THEN
                           L_NEW_ROW := L_END_OF_BLOCK_TO_SUPPRESS-1;
                           FOR L_ROW IN L_START_OF_BLOCK_TO_SUPPRESS+1..L_PPLS_NR_OF_ROWS LOOP
                              L_NEW_ROW := L_NEW_ROW+1;
                              L_PPLS_PP_TAB(L_NEW_ROW) := L_PPLS_PP_TAB(L_ROW);
                              L_PPLS_VERSION_TAB(L_NEW_ROW) := L_PPLS_VERSION_TAB(L_ROW);
                              L_PPLS_PP_KEY1_TAB(L_NEW_ROW) := L_PPLS_PP_KEY1_TAB(L_ROW);
                              L_PPLS_PP_KEY2_TAB(L_NEW_ROW) := L_PPLS_PP_KEY2_TAB(L_ROW);
                              L_PPLS_PP_KEY3_TAB(L_NEW_ROW) := L_PPLS_PP_KEY3_TAB(L_ROW);
                              L_PPLS_PP_KEY4_TAB(L_NEW_ROW) := L_PPLS_PP_KEY4_TAB(L_ROW);
                              L_PPLS_PP_KEY5_TAB(L_NEW_ROW) := L_PPLS_PP_KEY5_TAB(L_ROW);
                              L_PPLS_PGNODE_TAB(L_NEW_ROW) := L_PPLS_PGNODE_TAB(L_ROW);
                              L_PPLS_MODIFY_FLAG_TAB(L_NEW_ROW) := L_PPLS_MODIFY_FLAG_TAB(L_ROW);
                              L_PPLS_ORIG_IND_TAB(L_NEW_ROW) := L_PPLS_ORIG_IND_TAB(L_ROW);
                           END LOOP;
                           
                           L_START_OF_BLOCK_TO_SUPPRESS := 0;
                           L_END_OF_BLOCK_TO_SUPPRESS := 0;
                           L_PPLS_NR_OF_ROWS := L_NEW_ROW;
                        END IF;
                     END IF;
                     L_SEQ_NO := L_SEQ_NO-1;
                     EXIT WHEN L_SEQ_NO<=0;                
                  END LOOP;
               END IF;

               IF L_TRACE THEN
                  TRACE('ppls array');
                  FOR L_X IN 1..L_PPLS_NR_OF_ROWS LOOP
                     TRACE('Row '||L_X||'#pp='||L_PPLS_PP_TAB(L_X)||'#pgnode='||L_PPLS_PGNODE_TAB(L_X)||'mod_flag='||L_PPLS_MODIFY_FLAG_TAB(L_X)||
                           '#ppk1='||L_PPLS_PP_KEY1_TAB(L_X)||
                           '#ppk2='||L_PPLS_PP_KEY2_TAB(L_X)||
                           '#ppk3='||L_PPLS_PP_KEY3_TAB(L_X)||
                           '#ppk4='||L_PPLS_PP_KEY4_TAB(L_X)||
                           '#ppk5='||L_PPLS_PP_KEY5_TAB(L_X));
                  END LOOP;
               END IF;

         L_STEP := 'pp3';             
               
               
               
               
               
               

               L_PPLS_INDEX := 1;
               L_PREVIOUS_EXISTING_PP := '';
               L_PREVIOUS_EXISTING_PP_VERSION := '';
               L_PREVIOUS_EXISTING_PP_PGNODE := NULL;
         L_STEP := 'pp4';             

               LOOP
                  EXIT WHEN L_PPLS_INDEX > L_PPLS_NR_OF_ROWS;

         L_STEP := 'pp5';             

                  IF L_PPLS_MODIFY_FLAG_TAB(L_PPLS_INDEX) = UNAPIGEN.DBERR_SUCCESS THEN
                     L_PREVIOUS_EXISTING_PP := L_PPLS_PP_TAB(L_PPLS_INDEX);
                     L_PREVIOUS_EXISTING_PP_VERSION := L_PPLS_VERSION_TAB(L_PPLS_INDEX);
                     L_PREVIOUS_EXISTING_PP_PGNODE := L_PPLS_PGNODE_TAB(L_PPLS_INDEX);
                  ELSE
         L_STEP := 'pp6';             
                     
                     
                     
                     
                     
                     
                     IF L_PREVIOUS_EXISTING_PP IS NOT NULL THEN
                        
                        L_FIRST := L_PPLS_INDEX;
                        L_LAST := L_PPLS_INDEX;
                        FOR L_X IN L_PPLS_INDEX..L_PPLS_NR_OF_ROWS LOOP
                           IF L_PPLS_MODIFY_FLAG_TAB(L_X)=UNAPIGEN.DBERR_SUCCESS THEN
                              EXIT;
                           ELSE
                              L_LAST := L_X;
                           END IF;
                        END LOOP;
                        MANIPULATESVPG(L_PREVIOUS_EXISTING_PP, L_PREVIOUS_EXISTING_PP_PGNODE, L_FIRST, L_LAST, 'AFTER', L_BUF_A_SC(L_SC_SEQ_NO));
                        L_PPLS_INDEX := L_LAST;

                      
                      
                      
                      ELSE
         L_STEP := 'pp7';             
                         
                         
                         L_FIRST := L_PPLS_INDEX;
                         L_LAST := L_PPLS_INDEX;
                         L_NEXT_EXISTING_PP := '';
                         L_NEXT_EXISTING_PP_VERSION := '';
                         L_NEXT_EXISTING_PP_KEY1 := '';
                         L_NEXT_EXISTING_PP_KEY2 := '';
                         L_NEXT_EXISTING_PP_KEY3 := '';
                         L_NEXT_EXISTING_PP_KEY4 := '';
                         L_NEXT_EXISTING_PP_KEY5 := '';
                         L_NEXT_EXISTING_PP_PGNODE := NULL;

                         FOR L_X IN L_PPLS_INDEX..L_PPLS_NR_OF_ROWS LOOP
                            IF L_PPLS_MODIFY_FLAG_TAB(L_X)=UNAPIGEN.DBERR_SUCCESS THEN
                               L_NEXT_EXISTING_PP := L_PPLS_PP_TAB(L_X);
                               L_NEXT_EXISTING_PP_VERSION := L_PPLS_VERSION_TAB(L_X);
                               L_NEXT_EXISTING_PP_KEY1 := L_PPLS_PP_KEY1_TAB(L_X);
                               L_NEXT_EXISTING_PP_KEY2 := L_PPLS_PP_KEY2_TAB(L_X);
                               L_NEXT_EXISTING_PP_KEY3 := L_PPLS_PP_KEY3_TAB(L_X);
                               L_NEXT_EXISTING_PP_KEY4 := L_PPLS_PP_KEY4_TAB(L_X);
                               L_NEXT_EXISTING_PP_KEY5 := L_PPLS_PP_KEY5_TAB(L_X);
                               L_NEXT_EXISTING_PP_PGNODE := L_PPLS_PGNODE_TAB(L_X);
                               EXIT;
                            ELSE
                               L_LAST := L_X;
                            END IF;
                         END LOOP;
         L_STEP := 'pp8';             
                         IF L_NEXT_EXISTING_PP IS NOT NULL THEN
                            MANIPULATESVPG(L_NEXT_EXISTING_PP, L_NEXT_EXISTING_PP_PGNODE, L_FIRST, L_LAST, 'BEFORE', L_BUF_A_SC(L_SC_SEQ_NO));
                         ELSE
                            MANIPULATESVPG('', '', L_FIRST, L_LAST, 'APPEND', L_BUF_A_SC(L_SC_SEQ_NO));
                         END IF;
         L_STEP := 'pp9';             
                      END IF;             
                  END IF;
                  L_PPLS_INDEX := L_PPLS_INDEX + 1;

               END LOOP;

               IF L_TRACE THEN
                  TRACE('SaveScParameterGroup array before call#svpg_nr_of_rows='||L_SVPG_NR_OF_ROWS);
                  FOR L_X IN 1..L_SVPG_NR_OF_ROWS LOOP
                     TRACE('Row '||L_X||'#pg='||L_SVPG_PG_TAB(L_X)||'#pp_version='||L_SVPG_PP_VERSION_TAB(L_X)||'#pgnode='||L_SVPG_PGNODE_TAB(L_X)||'#mod_flag='||L_SVPG_MODIFY_FLAG_TAB(L_X));
                  END LOOP;
               END IF;
         L_STEP := 'pp10';             

               
               
               
               
               L_ANYPG_CREATION := FALSE;
               FOR L_SEQ_NO IN 1..L_SVPG_NR_OF_ROWS LOOP

                  IF L_SVPG_MODIFY_FLAG_TAB(L_SEQ_NO) = UNAPIGEN.DBERR_SUCCESS THEN
                     
                     NULL;
                  ELSE

                     L_ANYPG_CREATION := TRUE;
                     L_INPG_NR_OF_ROWS := NULL;
                     TRACE('InitScParameterGroup called for '||L_SVPG_PG_TAB(L_SEQ_NO) || ' version '|| L_SVPG_PP_VERSION_TAB(L_SEQ_NO));
                     L_RET_CODE := UNAPIPG.INITSCPARAMETERGROUP(L_SVPG_PG_TAB(L_SEQ_NO), 
                                            L_SVPG_PP_VERSION_TAB(L_SEQ_NO),
                                            L_SVPG_PP_KEY1_TAB (L_SEQ_NO),
                                            L_SVPG_PP_KEY2_TAB (L_SEQ_NO),
                                            L_SVPG_PP_KEY3_TAB (L_SEQ_NO),
                                            L_SVPG_PP_KEY4_TAB (L_SEQ_NO),
                                            L_SVPG_PP_KEY5_TAB (L_SEQ_NO),
                                            NULL, 
                                            L_SVPG_SC_TAB(L_SEQ_NO),
                                            L_INPG_PP_VERSION_TAB,
                                            L_INPG_DESCRIPTION_TAB,
                                            L_INPG_VALUE_F_TAB, L_INPG_VALUE_S_TAB, L_INPG_UNIT_TAB,
                                            L_INPG_EXEC_START_DATE_TAB, L_INPG_EXEC_END_DATE_TAB,
                                            L_INPG_EXECUTOR_TAB, L_INPG_PLANNED_EXECUTOR_TAB,
                                            L_INPG_MANUALLY_ENTERED_TAB,
                                            L_INPG_ASSIGN_DATE_TAB, L_INPG_ASSIGNED_BY_TAB,
                                            L_INPG_MANUALLY_ADDED_TAB, L_INPG_FORMAT_TAB,
                                            L_INPG_CONFIRM_ASSIGN_TAB, L_INPG_ALLOW_ANY_PR_TAB,
                                            L_INPG_NEVER_CREATE_ME_TAB,
                                            L_INPG_DELAY_TAB, L_INPG_DELAY_UNIT_TAB,
                                            L_INPG_REANALYSIS_TAB, L_INPG_PG_CLASS_TAB,
                                            L_INPG_LOG_HS_TAB, L_INPG_LOG_HS_DETAILS_TAB,
                                            L_INPG_LC_TAB, L_INPG_LC_VERSION_TAB, L_INPG_NR_OF_ROWS);

                     IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
                        UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
                        L_SQLERRM  := 'pp=' || L_SVPG_PG_TAB(L_SEQ_NO) ||
                                      'pp_version=' || L_SVPG_PP_VERSION_TAB(L_SEQ_NO) ||
                                      '#seq=' || TO_CHAR(-1) ||
                                      '#sc=' || L_SVPG_SC_TAB(L_SEQ_NO) || 
                                      '#nr_of_rows=' || L_INPG_NR_OF_ROWS ||
                                      '#InitScParameterGroup#ErrorCode=' || TO_CHAR(L_RET_CODE); 
                        TRACE(L_SQLERRM);
                        RAISE STPERROR;
                     END IF;

                     TRACE('InitScParameterGroup successfull for '||L_SVPG_PG_TAB(L_SEQ_NO));

         L_STEP := 'pp11';             

                    
                     L_SVPG_DESCRIPTION_TAB(L_SEQ_NO)         := L_INPG_DESCRIPTION_TAB(1);
                     L_SVPG_VALUE_F_TAB(L_SEQ_NO)             := L_INPG_VALUE_F_TAB(1);
                     L_SVPG_VALUE_S_TAB(L_SEQ_NO)             := L_INPG_VALUE_S_TAB(1);
                     L_SVPG_UNIT_TAB(L_SEQ_NO)                := L_INPG_UNIT_TAB(1);
                     L_SVPG_EXEC_START_DATE_TAB(L_SEQ_NO)     := L_INPG_EXEC_START_DATE_TAB(1);
                     L_SVPG_EXEC_END_DATE_TAB(L_SEQ_NO)       := L_INPG_EXEC_END_DATE_TAB(1);
                     L_SVPG_EXECUTOR_TAB(L_SEQ_NO)            := L_INPG_EXECUTOR_TAB(1);
                     L_SVPG_PLANNED_EXECUTOR_TAB(L_SEQ_NO)    := L_INPG_PLANNED_EXECUTOR_TAB(1);
                     L_SVPG_MANUALLY_ENTERED_TAB(L_SEQ_NO)    := L_INPG_MANUALLY_ENTERED_TAB(1);
                     L_SVPG_ASSIGN_DATE_TAB(L_SEQ_NO)         := L_INPG_ASSIGN_DATE_TAB(1);
                     L_SVPG_ASSIGNED_BY_TAB(L_SEQ_NO)         := L_INPG_ASSIGNED_BY_TAB(1);
                     L_SVPG_MANUALLY_ADDED_TAB(L_SEQ_NO)      := '1';
                     L_SVPG_FORMAT_TAB(L_SEQ_NO)              := L_INPG_FORMAT_TAB(1);
                     L_SVPG_CONFIRM_ASSIGN_TAB(L_SEQ_NO)      := L_INPG_CONFIRM_ASSIGN_TAB(1);
                     L_SVPG_ALLOW_ANY_PR_TAB(L_SEQ_NO)        := L_INPG_ALLOW_ANY_PR_TAB(1);
                     L_SVPG_NEVER_CREATE_ME_TAB(L_SEQ_NO)     := L_INPG_NEVER_CREATE_ME_TAB(1);
                     L_SVPG_DELAY_TAB(L_SEQ_NO)               := L_INPG_DELAY_TAB(1);
                     L_SVPG_DELAY_UNIT_TAB(L_SEQ_NO)          := L_INPG_DELAY_UNIT_TAB(1);
                     L_SVPG_PG_CLASS_TAB(L_SEQ_NO)            := L_INPG_PG_CLASS_TAB(1);
                     L_SVPG_LOG_HS_TAB(L_SEQ_NO)              := L_INPG_LOG_HS_TAB(1);
                     L_SVPG_LOG_HS_DETAILS_TAB(L_SEQ_NO)      := L_INPG_LOG_HS_DETAILS_TAB(1);
                     L_SVPG_LC_TAB(L_SEQ_NO)                  := L_INPG_LC_TAB(1);
                     L_SVPG_LC_VERSION_TAB(L_SEQ_NO)          := L_INPG_LC_VERSION_TAB(1);
                  END IF;
               END LOOP;
         L_STEP := 'pp12';             

               IF L_SVPG_NR_OF_ROWS > 0 AND L_ANYPG_CREATION THEN

                  
                  
                  
                  TRACE('attributes must be inherited when mod_flag=INSERT');
                  FOR L_SEQ_NO IN 1..L_SVPG_NR_OF_ROWS LOOP
                     IF L_SVPG_MODIFY_FLAG_TAB(L_SEQ_NO) = UNAPIGEN.MOD_FLAG_INSERT THEN
                        L_SVPG_MODIFY_FLAG_TAB(L_SEQ_NO) := UNAPIGEN.MOD_FLAG_INSERT_AND_CRAU;
                     END IF;               
                  END LOOP;
                  TRACE('calling SaveScParameterGroup');

                  L_RET_CODE := UNAPIPG.SAVESCPARAMETERGROUP(L_SVPG_SC_TAB, L_SVPG_PG_TAB, 
                                   L_SVPG_PGNODE_TAB,  L_SVPG_PP_VERSION_TAB, L_SVPG_PP_KEY1_TAB,
                                   L_SVPG_PP_KEY2_TAB, L_SVPG_PP_KEY3_TAB, L_SVPG_PP_KEY4_TAB,
                                   L_SVPG_PP_KEY5_TAB, L_SVPG_DESCRIPTION_TAB,
                                   L_SVPG_VALUE_F_TAB, L_SVPG_VALUE_S_TAB, L_SVPG_UNIT_TAB,
                                   L_SVPG_EXEC_START_DATE_TAB, L_SVPG_EXEC_END_DATE_TAB,
                                   L_SVPG_EXECUTOR_TAB, L_SVPG_PLANNED_EXECUTOR_TAB,
                                   L_SVPG_MANUALLY_ENTERED_TAB, L_SVPG_ASSIGN_DATE_TAB,
                                   L_SVPG_ASSIGNED_BY_TAB, L_SVPG_MANUALLY_ADDED_TAB,
                                   L_SVPG_FORMAT_TAB, L_SVPG_CONFIRM_ASSIGN_TAB, L_SVPG_ALLOW_ANY_PR_TAB,
                                   L_SVPG_NEVER_CREATE_ME_TAB, L_SVPG_DELAY_TAB, 
                                   L_SVPG_DELAY_UNIT_TAB, L_SVPG_PG_CLASS_TAB, L_SVPG_LOG_HS_TAB,
                                   L_SVPG_LOG_HS_DETAILS_TAB, L_SVPG_LC_TAB, L_SVPG_LC_VERSION_TAB, 
                                   L_SVPG_MODIFY_FLAG_TAB, L_SVPG_NR_OF_ROWS,
                                   'SaveFullTestPlan');

                  IF L_TRACE THEN
                      TRACE('SaveScParameterGroup array after call');
                      FOR L_X IN 1..L_SVPG_NR_OF_ROWS LOOP
                         TRACE('Row '||L_X||'#pg='||L_SVPG_PG_TAB(L_X)||'#pgnode='||L_SVPG_PGNODE_TAB(L_X)||'mod_flag='||L_SVPG_MODIFY_FLAG_TAB(L_X));
                      END LOOP;
                  END IF;
                  FOR L_X IN 1..L_SVPG_NR_OF_ROWS LOOP
                     IF L_SVPG_ORIG_IND_TAB(L_X) > 0 THEN
                         L_TST_PGNODE(L_SVPG_ORIG_IND_TAB(L_X))  := L_SVPG_PGNODE_TAB(L_X);
                     END IF;
                  END LOOP;
                  IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
                     IF L_RET_CODE <> UNAPIGEN.DBERR_PARTIALSAVE THEN
                        UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
                        L_SQLERRM  := 'sc(1)=' || L_SVPG_SC_TAB(1) ||'#pg(1)=' || L_SVPG_PG_TAB(1) ||
                                      '#pp_version(1)=' || L_SVPG_PP_VERSION_TAB(1) ||
                                      '#pgnode(1)=' || L_SVPG_PGNODE_TAB(1) ||
                                      '#nr_of_rows=' || L_SVPG_NR_OF_ROWS ||
                                      '#SaveScParameterGroup#ErrorCode=' || TO_CHAR(L_RET_CODE); 
                        TRACE(L_SQLERRM);
                        RAISE STPERROR;
                     ELSE
                        TRACE('Partial save is nomore a fatal error in SaveFullTestPlan !');
                        UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SUCCESS;
                        FOR L_SEQ_NO IN 1..L_SVPG_NR_OF_ROWS LOOP
                           
                           IF L_SVPG_MODIFY_FLAG_TAB(L_SEQ_NO)>UNAPIGEN.DBERR_SUCCESS THEN
                              L_SQLERRM  := 'sc('||TO_CHAR(L_SEQ_NO)||')=' || L_SVPG_SC_TAB(L_SEQ_NO) ||'#pg('||TO_CHAR(L_SEQ_NO)||')=' || L_SVPG_PG_TAB(L_SEQ_NO) ||
                                            '#pp_version(1)=' || L_SVPG_PP_VERSION_TAB(1) ||
                                            '#pgnode('||TO_CHAR(L_SEQ_NO)||')=' || L_SVPG_PGNODE_TAB(L_SEQ_NO) ||
                                            '#modify_flag('||TO_CHAR(L_SEQ_NO)||')=' || L_SVPG_MODIFY_FLAG_TAB(L_SEQ_NO) ||
                                            '#nr_of_rows=' || L_SVPG_NR_OF_ROWS ||
                                            '#SaveScParameterGroup#ErrorCode=' || TO_CHAR(L_RET_CODE)||
                                            '#auth='||UNAPIAUT.P_NOT_AUTHORISED; 
                              TRACE(L_SQLERRM);
                              
                           END IF;
                        END LOOP;
                     END IF;
                  END IF;
               END IF;
            END IF;
            
            EXIT WHEN L_GENERIC_HANDLED;
            L_GENERIC_HANDLED := TRUE;
         END LOOP;
         
         
         
         
         
         
         
   L_STEP := 'px1';             
         
         
         
         
         
         

         L_GENERIC_HANDLED := FALSE;         
         LOOP 
         
            
            

            L_PPLS_NR_OF_ROWS := 0;
            FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
               IF A_TST_TP(L_SEQ_NO) = 'px' THEN
                  L_RET_CODE := UNAPIPG.GETSUPPLIERANDCUSTOMER(A_PP_KEY1(L_SEQ_NO),
                                                               A_PP_KEY2(L_SEQ_NO),
                                                               A_PP_KEY3(L_SEQ_NO),
                                                               A_PP_KEY4(L_SEQ_NO), 
                                                               A_PP_KEY5(L_SEQ_NO), 
                                                               L_SUPPLIER,
                                                               L_CUSTOMER);
                  L_ADD_PP := FALSE;
                  IF L_GENERIC_HANDLED = FALSE AND L_SUPPLIER = ' ' AND L_CUSTOMER = ' ' THEN
                     L_ADD_PP := TRUE;
                  END IF;
                  IF L_GENERIC_HANDLED = TRUE AND L_ADD_PP = FALSE THEN
                     L_ADD_PP := TRUE;
                  END IF;
                  
                  IF L_ADD_PP THEN
                     L_PPLS_NR_OF_ROWS := L_PPLS_NR_OF_ROWS + 1;
                     L_PPLS_PP_TAB(L_PPLS_NR_OF_ROWS) := A_TST_ID(L_SEQ_NO);
                     L_PPLS_VERSION_TAB(L_PPLS_NR_OF_ROWS) := A_TST_ID_VERSION(L_SEQ_NO);
                     L_PPLS_PP_KEY1_TAB(L_PPLS_NR_OF_ROWS) := A_PP_KEY1(L_SEQ_NO);
                     L_PPLS_PP_KEY2_TAB(L_PPLS_NR_OF_ROWS) := A_PP_KEY2(L_SEQ_NO);
                     L_PPLS_PP_KEY3_TAB(L_PPLS_NR_OF_ROWS) := A_PP_KEY3(L_SEQ_NO);
                     L_PPLS_PP_KEY4_TAB(L_PPLS_NR_OF_ROWS) := A_PP_KEY4(L_SEQ_NO);
                     L_PPLS_PP_KEY5_TAB(L_PPLS_NR_OF_ROWS) := A_PP_KEY5(L_SEQ_NO);
                     L_PPLS_PGNODE_TAB(L_PPLS_NR_OF_ROWS) := NULL;
                     L_PPLS_MODIFY_FLAG_TAB(L_PPLS_NR_OF_ROWS) := A_MODIFY_FLAG(L_SEQ_NO);
                     L_PPLS_ORIG_IND_TAB(L_PPLS_NR_OF_ROWS) := L_SEQ_NO;
                  END IF;
               ELSIF A_TST_TP(L_SEQ_NO) = 'pp' THEN
                  L_PPLS_NR_OF_ROWS := L_PPLS_NR_OF_ROWS + 1;
                  L_PPLS_PP_TAB(L_PPLS_NR_OF_ROWS) := A_TST_ID(L_SEQ_NO);
                  L_PPLS_VERSION_TAB(L_PPLS_NR_OF_ROWS) := A_TST_ID_VERSION(L_SEQ_NO);
                  L_PPLS_PP_KEY1_TAB(L_PPLS_NR_OF_ROWS) := A_PP_KEY1(L_SEQ_NO);
                  L_PPLS_PP_KEY2_TAB(L_PPLS_NR_OF_ROWS) := A_PP_KEY2(L_SEQ_NO);
                  L_PPLS_PP_KEY3_TAB(L_PPLS_NR_OF_ROWS) := A_PP_KEY3(L_SEQ_NO);
                  L_PPLS_PP_KEY4_TAB(L_PPLS_NR_OF_ROWS) := A_PP_KEY4(L_SEQ_NO);
                  L_PPLS_PP_KEY5_TAB(L_PPLS_NR_OF_ROWS) := A_PP_KEY5(L_SEQ_NO);
                  L_PPLS_PGNODE_TAB(L_PPLS_NR_OF_ROWS) := NULL;
                  L_PPLS_MODIFY_FLAG_TAB(L_PPLS_NR_OF_ROWS) := UNAPIGEN.DBERR_SUCCESS; 
                  L_PPLS_ORIG_IND_TAB(L_PPLS_NR_OF_ROWS) := L_SEQ_NO;
               END IF;
            END LOOP;

      L_STEP := 'px2';             
            
            
            
            IF L_PPLS_NR_OF_ROWS > 0 THEN
               L_SVPG_NR_OF_ROWS := 0;
               FOR L_SCPG_REC IN L_SCPG_CURSOR(L_BUF_A_SC(L_SC_SEQ_NO)) LOOP

                  L_SVPG_NR_OF_ROWS := L_SVPG_NR_OF_ROWS + 1;
                  L_SVPG_SC_TAB(L_SVPG_NR_OF_ROWS) := L_BUF_A_SC(L_SC_SEQ_NO);
                  L_SVPG_PG_TAB(L_SVPG_NR_OF_ROWS) := L_SCPG_REC.PG;
                  L_SVPG_PP_VERSION_TAB(L_SVPG_NR_OF_ROWS) := L_SCPG_REC.PP_VERSION;
                  L_SVPG_PP_KEY1_TAB(L_SVPG_NR_OF_ROWS) := L_SCPG_REC.PP_KEY1;
                  L_SVPG_PP_KEY2_TAB(L_SVPG_NR_OF_ROWS) := L_SCPG_REC.PP_KEY2;
                  L_SVPG_PP_KEY3_TAB(L_SVPG_NR_OF_ROWS) := L_SCPG_REC.PP_KEY3;
                  L_SVPG_PP_KEY4_TAB(L_SVPG_NR_OF_ROWS) := L_SCPG_REC.PP_KEY4;
                  L_SVPG_PP_KEY5_TAB(L_SVPG_NR_OF_ROWS) := L_SCPG_REC.PP_KEY5;
                  L_SVPG_PGNODE_TAB(L_SVPG_NR_OF_ROWS) := L_SCPG_REC.PGNODE;
                  L_SVPG_MODIFY_FLAG_TAB(L_SVPG_NR_OF_ROWS) := UNAPIGEN.DBERR_SUCCESS;
                  L_SVPG_ORIG_IND_TAB(L_SVPG_NR_OF_ROWS) := -1;
         L_STEP := 'px2.1.'||TO_CHAR(L_PPLS_NR_OF_ROWS);             
                  FOR L_SEQ_NO IN 1..L_PPLS_NR_OF_ROWS LOOP
                     IF L_PPLS_PP_TAB(L_SEQ_NO) = L_SCPG_REC.PG AND
                        L_PPLS_VERSION_TAB(L_SEQ_NO) = L_SCPG_REC.PP_VERSION AND
                        L_PPLS_PP_KEY1_TAB(L_SEQ_NO) = L_SCPG_REC.PP_KEY1 AND
                        L_PPLS_PP_KEY2_TAB(L_SEQ_NO) = L_SCPG_REC.PP_KEY2 AND
                        L_PPLS_PP_KEY3_TAB(L_SEQ_NO) = L_SCPG_REC.PP_KEY3 AND
                        L_PPLS_PP_KEY4_TAB(L_SEQ_NO) = L_SCPG_REC.PP_KEY4 AND
                        L_PPLS_PP_KEY5_TAB(L_SEQ_NO) = L_SCPG_REC.PP_KEY5 AND
                        L_PPLS_PGNODE_TAB(L_SEQ_NO) IS NULL THEN
         L_STEP := 'px2.2';             
                        L_PPLS_PGNODE_TAB(L_SEQ_NO) := L_SCPG_REC.PGNODE;
                        IF L_PPLS_MODIFY_FLAG_TAB(L_SEQ_NO) <> UNAPIGEN.DBERR_SUCCESS THEN
                           TRACE('pp '||L_SCPG_REC.PG||' version ' || L_PPLS_VERSION_TAB(L_SEQ_NO) ||' was marked for creation but already exists');
                     L_TST_PGNODE(L_PPLS_ORIG_IND_TAB(L_SEQ_NO)) := L_PPLS_PGNODE_TAB(L_SEQ_NO);
         L_STEP := 'px2.3';             
                           L_PPLS_MODIFY_FLAG_TAB(L_SEQ_NO) := UNAPIGEN.DBERR_SUCCESS;
                        END IF;
                     END IF;
                  END LOOP;

               END LOOP;

               
               
               
               L_LAST_TO_KEEP := -1;
               L_KEEP_TAB.DELETE;

               
               L_SEQ_NO := 1;
               LOOP
                  IF L_PPLS_PGNODE_TAB(L_SEQ_NO) IS NULL AND 
                     L_PPLS_MODIFY_FLAG_TAB(L_SEQ_NO) = UNAPIGEN.DBERR_SUCCESS THEN
                     
                     
                     
                     
                     
                     
                     
                     
                     
                     
                     L_KEEP_TAB(L_SEQ_NO) := FALSE;
                  ELSE
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
                        L_KEEP_TAB(L_SEQ_NO) := TRUE;
                        L_LAST_TO_KEEP := L_SEQ_NO;
   
   
                  END IF;
                  L_SEQ_NO := L_SEQ_NO+1;
                  EXIT WHEN L_SEQ_NO>L_PPLS_NR_OF_ROWS; 
               END LOOP;

               
               IF L_LAST_TO_KEEP = -1 THEN
                  
                  L_PPLS_NR_OF_ROWS := 0;
               ELSE
                  
                  
                  L_PPLS_NR_OF_ROWS := L_LAST_TO_KEEP;
                  
                  L_SEQ_NO := L_PPLS_NR_OF_ROWS;
                  L_END_OF_BLOCK_TO_SUPPRESS := 0;
                  L_START_OF_BLOCK_TO_SUPPRESS := 0;
                  LOOP
                     IF NOT L_KEEP_TAB(L_SEQ_NO) THEN
                        IF L_START_OF_BLOCK_TO_SUPPRESS = 0 THEN
                           L_START_OF_BLOCK_TO_SUPPRESS := L_SEQ_NO;
                        END IF;
                        L_END_OF_BLOCK_TO_SUPPRESS := L_SEQ_NO;                     
                     END IF;
                     IF L_KEEP_TAB(L_SEQ_NO) OR L_SEQ_NO = 1 THEN
                        IF L_END_OF_BLOCK_TO_SUPPRESS > 0 THEN
                           L_NEW_ROW := L_END_OF_BLOCK_TO_SUPPRESS-1;
                           FOR L_ROW IN L_START_OF_BLOCK_TO_SUPPRESS+1..L_PPLS_NR_OF_ROWS LOOP
                              L_NEW_ROW := L_NEW_ROW+1;
                              L_PPLS_PP_TAB(L_NEW_ROW) := L_PPLS_PP_TAB(L_ROW);
                              L_PPLS_VERSION_TAB(L_NEW_ROW) := L_PPLS_VERSION_TAB(L_ROW);
                              L_PPLS_PP_KEY1_TAB(L_NEW_ROW) := L_PPLS_PP_KEY1_TAB(L_ROW);
                              L_PPLS_PP_KEY2_TAB(L_NEW_ROW) := L_PPLS_PP_KEY2_TAB(L_ROW);
                              L_PPLS_PP_KEY3_TAB(L_NEW_ROW) := L_PPLS_PP_KEY3_TAB(L_ROW);
                              L_PPLS_PP_KEY4_TAB(L_NEW_ROW) := L_PPLS_PP_KEY4_TAB(L_ROW);
                              L_PPLS_PP_KEY5_TAB(L_NEW_ROW) := L_PPLS_PP_KEY5_TAB(L_ROW);
                              L_PPLS_PGNODE_TAB(L_NEW_ROW) := L_PPLS_PGNODE_TAB(L_ROW);
                              L_PPLS_MODIFY_FLAG_TAB(L_NEW_ROW) := L_PPLS_MODIFY_FLAG_TAB(L_ROW);
                              L_PPLS_ORIG_IND_TAB(L_NEW_ROW) := L_PPLS_ORIG_IND_TAB(L_ROW);
                           END LOOP;
                           
                           L_START_OF_BLOCK_TO_SUPPRESS := 0;
                           L_END_OF_BLOCK_TO_SUPPRESS := 0;
                           L_PPLS_NR_OF_ROWS := L_NEW_ROW;
                        END IF;
                     END IF;
                     L_SEQ_NO := L_SEQ_NO-1;
                     EXIT WHEN L_SEQ_NO<=0;                
                  END LOOP;
               END IF;

               IF L_TRACE THEN
                  TRACE('ppls array');
                  FOR L_X IN 1..L_PPLS_NR_OF_ROWS LOOP
                     TRACE('pxls array; Row '||L_X||'#pp='||L_PPLS_PP_TAB(L_X)||'#pp_version='||L_PPLS_VERSION_TAB(L_X)||'#pgnode='||L_PPLS_PGNODE_TAB(L_X)||'mod_flag='||L_PPLS_MODIFY_FLAG_TAB(L_X));
                  END LOOP;
               END IF;

         L_STEP := 'px3';             
               
               
               
               
               
               

               L_PPLS_INDEX := 1;
               L_PREVIOUS_EXISTING_PP := '';
               L_PREVIOUS_EXISTING_PP_PGNODE := NULL;
         L_STEP := 'px4';             

               LOOP
                  EXIT WHEN L_PPLS_INDEX > L_PPLS_NR_OF_ROWS;

         L_STEP := 'px5';             

                  IF L_PPLS_MODIFY_FLAG_TAB(L_PPLS_INDEX) = UNAPIGEN.DBERR_SUCCESS THEN
                     L_PREVIOUS_EXISTING_PP := L_PPLS_PP_TAB(L_PPLS_INDEX);
                     L_PREVIOUS_EXISTING_PP_VERSION := L_PPLS_VERSION_TAB(L_PPLS_INDEX);
                     L_PREVIOUS_EXISTING_PP_PGNODE := L_PPLS_PGNODE_TAB(L_PPLS_INDEX);
                  ELSE
         L_STEP := 'px6';             
                     
                     
                     
                     
                     
                     
                     IF L_PREVIOUS_EXISTING_PP IS NOT NULL THEN
                        
                        L_FIRST := L_PPLS_INDEX;
                        L_LAST := L_PPLS_INDEX;
                        FOR L_X IN L_PPLS_INDEX..L_PPLS_NR_OF_ROWS LOOP
                           IF L_PPLS_MODIFY_FLAG_TAB(L_X)=UNAPIGEN.DBERR_SUCCESS THEN
                              EXIT;
                           ELSE
                              L_LAST := L_X;
                           END IF;
                        END LOOP;
                        MANIPULATESVPG(L_PREVIOUS_EXISTING_PP, L_PREVIOUS_EXISTING_PP_PGNODE, L_FIRST, L_LAST, 'AFTER', L_BUF_A_SC(L_SC_SEQ_NO));
                        L_PPLS_INDEX := L_LAST;

                      
                      
                      
                      ELSE
         L_STEP := 'px7';             
                         
                         
                         L_FIRST := L_PPLS_INDEX;
                         L_LAST := L_PPLS_INDEX;
                         L_NEXT_EXISTING_PP := '';
                         L_NEXT_EXISTING_PP_PGNODE := NULL;

                         FOR L_X IN L_PPLS_INDEX..L_PPLS_NR_OF_ROWS LOOP
                            IF L_PPLS_MODIFY_FLAG_TAB(L_X)=UNAPIGEN.DBERR_SUCCESS THEN
                               L_NEXT_EXISTING_PP := L_PPLS_PP_TAB(L_X);
                               L_NEXT_EXISTING_PP_VERSION := L_PPLS_VERSION_TAB(L_X);
                               L_NEXT_EXISTING_PP_KEY1 := L_PPLS_PP_KEY1_TAB(L_X);
                               L_NEXT_EXISTING_PP_KEY2 := L_PPLS_PP_KEY2_TAB(L_X);
                               L_NEXT_EXISTING_PP_KEY3 := L_PPLS_PP_KEY3_TAB(L_X);
                               L_NEXT_EXISTING_PP_KEY4 := L_PPLS_PP_KEY4_TAB(L_X);
                               L_NEXT_EXISTING_PP_KEY5 := L_PPLS_PP_KEY5_TAB(L_X);
                               L_NEXT_EXISTING_PP_PGNODE := L_PPLS_PGNODE_TAB(L_X);
                               EXIT;
                            ELSE
                               L_LAST := L_X;
                            END IF;
                         END LOOP;
         L_STEP := 'px8';             
                         IF L_NEXT_EXISTING_PP IS NOT NULL THEN
                            MANIPULATESVPG(L_NEXT_EXISTING_PP, L_NEXT_EXISTING_PP_PGNODE, L_FIRST, L_LAST, 'BEFORE', L_BUF_A_SC(L_SC_SEQ_NO));
                         ELSE
                            MANIPULATESVPG('', '', L_FIRST, L_LAST, 'APPEND', L_BUF_A_SC(L_SC_SEQ_NO));
                         END IF;
         L_STEP := 'px9';             
                      END IF;             
                  END IF;
                  L_PPLS_INDEX := L_PPLS_INDEX + 1;

               END LOOP;

               IF L_TRACE THEN
                  TRACE('SaveScParameterGroup array before call#svpg_nr_of_rows='||L_SVPG_NR_OF_ROWS);
                  FOR L_X IN 1..L_SVPG_NR_OF_ROWS LOOP
                     TRACE('px9;Row '||L_X||'#pg='||L_SVPG_PG_TAB(L_X)||'#pp_version='||L_SVPG_PP_VERSION_TAB(L_X)||'#pgnode='||L_SVPG_PGNODE_TAB(L_X)||'mod_flag='||L_SVPG_MODIFY_FLAG_TAB(L_X));
                  END LOOP;
               END IF;
         L_STEP := 'px10';             

               
               
               
               
               L_ANYPG_CREATION := FALSE;
               FOR L_SEQ_NO IN 1..L_SVPG_NR_OF_ROWS LOOP

                  IF L_SVPG_MODIFY_FLAG_TAB(L_SEQ_NO) = UNAPIGEN.DBERR_SUCCESS THEN
                     
                     NULL;
                  ELSE

                     L_ANYPG_CREATION := TRUE;
                     L_INPG_NR_OF_ROWS := NULL;
                     TRACE('InitScParameterGroup called for '||L_SVPG_PG_TAB(L_SEQ_NO) || ' version:' ||L_SVPG_PP_VERSION_TAB(L_SEQ_NO));

                     L_RET_CODE := UNAPIPG.INITSCPARAMETERGROUP(L_SVPG_PG_TAB(L_SEQ_NO), 
                                            L_SVPG_PP_VERSION_TAB(L_SEQ_NO),
                                            L_SVPG_PP_KEY1_TAB (L_SEQ_NO),
                                            L_SVPG_PP_KEY2_TAB (L_SEQ_NO),
                                            L_SVPG_PP_KEY3_TAB (L_SEQ_NO),
                                            L_SVPG_PP_KEY4_TAB (L_SEQ_NO),
                                            L_SVPG_PP_KEY5_TAB (L_SEQ_NO),                                         
                                            NULL, 
                                            L_SVPG_SC_TAB(L_SEQ_NO),
                                            L_INPG_PP_VERSION_TAB,
                                            L_INPG_DESCRIPTION_TAB,
                                            L_INPG_VALUE_F_TAB, L_INPG_VALUE_S_TAB, L_INPG_UNIT_TAB,
                                            L_INPG_EXEC_START_DATE_TAB, L_INPG_EXEC_END_DATE_TAB,
                                            L_INPG_EXECUTOR_TAB, L_INPG_PLANNED_EXECUTOR_TAB,
                                            L_INPG_MANUALLY_ENTERED_TAB,
                                            L_INPG_ASSIGN_DATE_TAB, L_INPG_ASSIGNED_BY_TAB,
                                            L_INPG_MANUALLY_ADDED_TAB, L_INPG_FORMAT_TAB,
                                            L_INPG_CONFIRM_ASSIGN_TAB, L_INPG_ALLOW_ANY_PR_TAB,
                                            L_INPG_NEVER_CREATE_ME_TAB,
                                            L_INPG_DELAY_TAB, L_INPG_DELAY_UNIT_TAB,
                                            L_INPG_REANALYSIS_TAB, L_INPG_PG_CLASS_TAB,
                                            L_INPG_LOG_HS_TAB, L_INPG_LOG_HS_DETAILS_TAB, L_INPG_LC_TAB, 
                                            L_INPG_LC_VERSION_TAB, L_INPG_NR_OF_ROWS);

                     IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
                        UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
                        L_SQLERRM  := 'pp=' || L_SVPG_PG_TAB(L_SEQ_NO) || '#seq=' || TO_CHAR(-1) ||
                                      '#pp_version=' || L_SVPG_PP_VERSION_TAB(L_SEQ_NO) || 
                                      '#sc=' || L_SVPG_SC_TAB(L_SEQ_NO) || 
                                      '#nr_of_rows=' || L_INPG_NR_OF_ROWS ||
                                      '#InitScParameterGroup#ErrorCode=' || TO_CHAR(L_RET_CODE); 
                        TRACE(L_SQLERRM);
                        RAISE STPERROR;
                     END IF;


                     TRACE('InitScParameterGroup successfull for '||L_SVPG_PG_TAB(L_SEQ_NO)|| ' version:' ||L_INPG_PP_VERSION_TAB(1));

         L_STEP := 'pp11';             
                     L_SVPG_DESCRIPTION_TAB(L_SEQ_NO)         := L_INPG_DESCRIPTION_TAB(1);
                     L_SVPG_VALUE_F_TAB(L_SEQ_NO)             := L_INPG_VALUE_F_TAB(1);
                     L_SVPG_VALUE_S_TAB(L_SEQ_NO)             := L_INPG_VALUE_S_TAB(1);
                     L_SVPG_UNIT_TAB(L_SEQ_NO)                := L_INPG_UNIT_TAB(1);
                     L_SVPG_EXEC_START_DATE_TAB(L_SEQ_NO)     := L_INPG_EXEC_START_DATE_TAB(1);
                     L_SVPG_EXEC_END_DATE_TAB(L_SEQ_NO)       := L_INPG_EXEC_END_DATE_TAB(1);
                     L_SVPG_EXECUTOR_TAB(L_SEQ_NO)            := L_INPG_EXECUTOR_TAB(1);
                     L_SVPG_PLANNED_EXECUTOR_TAB(L_SEQ_NO)    := L_INPG_PLANNED_EXECUTOR_TAB(1);
                     L_SVPG_MANUALLY_ENTERED_TAB(L_SEQ_NO)    := L_INPG_MANUALLY_ENTERED_TAB(1);
                     L_SVPG_ASSIGN_DATE_TAB(L_SEQ_NO)         := L_INPG_ASSIGN_DATE_TAB(1);
                     L_SVPG_ASSIGNED_BY_TAB(L_SEQ_NO)         := L_INPG_ASSIGNED_BY_TAB(1);
                     L_SVPG_MANUALLY_ADDED_TAB(L_SEQ_NO)      := '1';
                     L_SVPG_FORMAT_TAB(L_SEQ_NO)              := L_INPG_FORMAT_TAB(1);
                     L_SVPG_CONFIRM_ASSIGN_TAB(L_SEQ_NO)      := L_INPG_CONFIRM_ASSIGN_TAB(1);
                     L_SVPG_ALLOW_ANY_PR_TAB(L_SEQ_NO)        := L_INPG_ALLOW_ANY_PR_TAB(1);
                     L_SVPG_NEVER_CREATE_ME_TAB(L_SEQ_NO)     := L_INPG_NEVER_CREATE_ME_TAB(1);
                     L_SVPG_DELAY_TAB(L_SEQ_NO)               := L_INPG_DELAY_TAB(1);
                     L_SVPG_DELAY_UNIT_TAB(L_SEQ_NO)          := L_INPG_DELAY_UNIT_TAB(1);
                     L_SVPG_PG_CLASS_TAB(L_SEQ_NO)            := L_INPG_PG_CLASS_TAB(1);
                     L_SVPG_LOG_HS_TAB(L_SEQ_NO)              := L_INPG_LOG_HS_TAB(1);
                     L_SVPG_LOG_HS_DETAILS_TAB(L_SEQ_NO)      := L_INPG_LOG_HS_DETAILS_TAB(1);
                     L_SVPG_LC_TAB(L_SEQ_NO)                  := L_INPG_LC_TAB(1);
                     L_SVPG_LC_VERSION_TAB(L_SEQ_NO)          := L_INPG_LC_VERSION_TAB(1);
                  END IF;
               END LOOP;
         L_STEP := 'pp12';             

               IF L_SVPG_NR_OF_ROWS > 0 AND L_ANYPG_CREATION THEN

                  
                  
                  
                  TRACE('attributes must be inherited when mod_flag=INSERT');
                  FOR L_SEQ_NO IN 1..L_SVPG_NR_OF_ROWS LOOP
                     IF L_SVPG_MODIFY_FLAG_TAB(L_SEQ_NO) = UNAPIGEN.MOD_FLAG_INSERT THEN
                        L_SVPG_MODIFY_FLAG_TAB(L_SEQ_NO) := UNAPIGEN.MOD_FLAG_INSERT_AND_CRAU;
                     END IF;               
                  END LOOP;               
                  TRACE('calling SaveScParameterGroup');

                  L_RET_CODE := UNAPIPG.SAVESCPARAMETERGROUP(L_SVPG_SC_TAB, L_SVPG_PG_TAB, 
                                   L_SVPG_PGNODE_TAB, L_SVPG_PP_VERSION_TAB, L_SVPG_PP_KEY1_TAB,
                                   L_SVPG_PP_KEY2_TAB, L_SVPG_PP_KEY3_TAB, L_SVPG_PP_KEY4_TAB,
                                   L_SVPG_PP_KEY5_TAB, L_SVPG_DESCRIPTION_TAB,
                                   L_SVPG_VALUE_F_TAB, L_SVPG_VALUE_S_TAB, L_SVPG_UNIT_TAB,
                                   L_SVPG_EXEC_START_DATE_TAB, L_SVPG_EXEC_END_DATE_TAB,
                                   L_SVPG_EXECUTOR_TAB, L_SVPG_PLANNED_EXECUTOR_TAB,
                                   L_SVPG_MANUALLY_ENTERED_TAB, L_SVPG_ASSIGN_DATE_TAB,
                                   L_SVPG_ASSIGNED_BY_TAB, L_SVPG_MANUALLY_ADDED_TAB,
                                   L_SVPG_FORMAT_TAB, L_SVPG_CONFIRM_ASSIGN_TAB, L_SVPG_ALLOW_ANY_PR_TAB,
                                   L_SVPG_NEVER_CREATE_ME_TAB,
                                   L_SVPG_DELAY_TAB, L_SVPG_DELAY_UNIT_TAB, L_SVPG_PG_CLASS_TAB, 
                                   L_SVPG_LOG_HS_TAB, L_SVPG_LOG_HS_DETAILS_TAB, 
                                   L_SVPG_LC_TAB, L_SVPG_LC_VERSION_TAB, 
                                   L_SVPG_MODIFY_FLAG_TAB, L_SVPG_NR_OF_ROWS,
                                   'SaveFullTestPlan');
                  IF L_TRACE THEN
                      TRACE('SaveScParameterGroup array after call');
                      FOR L_X IN 1..L_SVPG_NR_OF_ROWS LOOP
                         TRACE('Row '||L_X||'#pg='||L_SVPG_PG_TAB(L_X)||'#pp_version='||L_SVPG_PP_VERSION_TAB(L_X)||'#pgnode='||L_SVPG_PGNODE_TAB(L_X)||'mod_flag='||L_SVPG_MODIFY_FLAG_TAB(L_X));
                      END LOOP;
                  END IF;
                  FOR L_X IN 1..L_SVPG_NR_OF_ROWS LOOP
                     IF L_SVPG_ORIG_IND_TAB(L_X) > 0 THEN
                         L_TST_PGNODE(L_SVPG_ORIG_IND_TAB(L_X))  := L_SVPG_PGNODE_TAB(L_X);
                     END IF;
                  END LOOP;


                  IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
                     IF L_RET_CODE <> UNAPIGEN.DBERR_PARTIALSAVE THEN
                        UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
                        L_SQLERRM  := 'sc(1)=' || L_SVPG_SC_TAB(1) ||'#pg(1)=' || L_SVPG_PG_TAB(1) ||
                                      '#pp_version(1)=' || L_SVPG_PP_VERSION_TAB(1) ||
                                      '#pgnode(1)=' || L_SVPG_PGNODE_TAB(1) ||
                                      '#nr_of_rows=' || L_SVPG_NR_OF_ROWS ||
                                      '#SaveScParameterGroup#ErrorCode=' || TO_CHAR(L_RET_CODE); 
                        TRACE(L_SQLERRM);
                        RAISE STPERROR;
                     ELSE
                        TRACE('Partial save is nomore a fatal error in SaveFullTestPlan !');
                        UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SUCCESS;
                        FOR L_SEQ_NO IN 1..L_SVPG_NR_OF_ROWS LOOP
                           
                           IF L_SVPG_MODIFY_FLAG_TAB(L_SEQ_NO)>UNAPIGEN.DBERR_SUCCESS THEN
                              L_SQLERRM  := 'sc('||TO_CHAR(L_SEQ_NO)||')=' || L_SVPG_SC_TAB(L_SEQ_NO) ||'#pg('||TO_CHAR(L_SEQ_NO)||')=' || L_SVPG_PG_TAB(L_SEQ_NO) ||
                                            '#pp_version('||TO_CHAR(L_SEQ_NO)||')=' || L_SVPG_PP_VERSION_TAB(L_SEQ_NO) ||
                                            '#pgnode('||TO_CHAR(L_SEQ_NO)||')=' || L_SVPG_PGNODE_TAB(L_SEQ_NO) ||
                                            '#modify_flag('||TO_CHAR(L_SEQ_NO)||')=' || L_SVPG_MODIFY_FLAG_TAB(L_SEQ_NO) ||
                                            '#nr_of_rows=' || L_SVPG_NR_OF_ROWS ||
                                            '#SaveScParameterGroup#ErrorCode=' || TO_CHAR(L_RET_CODE)||
                                            '#auth='||UNAPIAUT.P_NOT_AUTHORISED; 
                              TRACE(L_SQLERRM);
                              
                           END IF;
                        END LOOP;
                     END IF;
                  END IF;
               END IF;
            END IF;

            EXIT WHEN L_GENERIC_HANDLED;
            L_GENERIC_HANDLED := TRUE;

         END LOOP;
         
         
         
         
         
TRACE('pr level (line 2618) ' || A_NR_OF_ROWS );
         
         
         
   L_STEP := 'pr1';             
         
         
         
         L_PRLS_NR_OF_ROWS := 0;
         L_TEMP_PP := NULL;
         L_TEMP_PP_VERSION := NULL;
         L_TEMP_PP_KEY1 := NULL;
         L_TEMP_PP_KEY2 := NULL;
         L_TEMP_PP_KEY3 := NULL;
         L_TEMP_PP_KEY4 := NULL;
         L_TEMP_PP_KEY5 := NULL;
         L_TEMP_PGNODE := NULL;
         FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP 
            IF A_TST_TP(L_SEQ_NO) = 'pp' THEN
               L_TEMP_PP := A_TST_ID(L_SEQ_NO);
               L_TEMP_PP_VERSION := A_TST_ID_VERSION(L_SEQ_NO);
               L_TEMP_PP_KEY1 := A_PP_KEY1(L_SEQ_NO);
               L_TEMP_PP_KEY2 := A_PP_KEY2(L_SEQ_NO);
               L_TEMP_PP_KEY3 := A_PP_KEY3(L_SEQ_NO);
               L_TEMP_PP_KEY4 := A_PP_KEY4(L_SEQ_NO);
               L_TEMP_PP_KEY5 := A_PP_KEY5(L_SEQ_NO);
               L_TEMP_PGNODE := NULL;
               IF L_TST_PGNODE(L_SEQ_NO) > 0  THEN
                  L_TEMP_PGNODE := L_TST_PGNODE(L_SEQ_NO);
                  
                  
               ELSE
                 
                    FOR L_X IN 1..L_SVPG_NR_OF_ROWS LOOP
                        IF L_SVPG_PG_TAB(L_X) = L_TEMP_PP AND
                           L_SVPG_PP_VERSION_TAB(L_X) = L_TEMP_PP_VERSION AND
                           L_SVPG_PP_KEY1_TAB(L_X) = L_TEMP_PP_KEY1 AND
                           L_SVPG_PP_KEY2_TAB(L_X) = L_TEMP_PP_KEY2 AND
                           L_SVPG_PP_KEY3_TAB(L_X) = L_TEMP_PP_KEY3 AND
                           L_SVPG_PP_KEY4_TAB(L_X) = L_TEMP_PP_KEY4 AND
                           L_SVPG_PP_KEY5_TAB(L_X) = L_TEMP_PP_KEY5 THEN
                        
                        
                           L_TEMP_PGNODE := L_SVPG_PGNODE_TAB(L_X);
                           EXIT;
                        END IF;
                    END LOOP;
                END IF;
            ELSIF A_TST_TP(L_SEQ_NO) = 'pr' THEN
               IF A_NEXT_ROWS <> 0 AND L_TEMP_PP IS NULL THEN
                  L_TEMP_PP := P_SAVEFTP_PG;
                  L_TEMP_PP_VERSION := P_SAVEFTP_PP_VERSION;
                  L_TEMP_PP_KEY1 := P_SAVEFTP_PP_KEY1;
                  L_TEMP_PP_KEY2 := P_SAVEFTP_PP_KEY2;
                  L_TEMP_PP_KEY3 := P_SAVEFTP_PP_KEY3;
                  L_TEMP_PP_KEY4 := P_SAVEFTP_PP_KEY4;
                  L_TEMP_PP_KEY5 := P_SAVEFTP_PP_KEY5;
                  L_TEMP_PGNODE := P_SAVEFTP_PGNODE;
               END IF;
               L_PRLS_NR_OF_ROWS := L_PRLS_NR_OF_ROWS + 1;
               L_PRLS_PP_TAB(L_PRLS_NR_OF_ROWS) := L_TEMP_PP;
               L_PRLS_PP_VERSION_TAB(L_PRLS_NR_OF_ROWS) := L_TEMP_PP_VERSION;
               L_PRLS_PGNODE_TAB(L_PRLS_NR_OF_ROWS) := L_TEMP_PGNODE;
               L_PRLS_PR_TAB(L_PRLS_NR_OF_ROWS) := A_TST_ID(L_SEQ_NO);
               L_PRLS_VERSION_TAB(L_PRLS_NR_OF_ROWS) := A_TST_ID_VERSION(L_SEQ_NO);
               L_PRLS_PANODE_TAB(L_PRLS_NR_OF_ROWS) := NULL;
               L_PRLS_MODIFY_FLAG_TAB(L_PRLS_NR_OF_ROWS) := A_MODIFY_FLAG(L_SEQ_NO);
               L_PRLS_ORIG_IND_TAB(L_PRLS_NR_OF_ROWS) := L_SEQ_NO;
               IF L_TRACE AND
                  (L_TEMP_PP IS NULL OR L_TEMP_PGNODE IS NULL) AND
                  A_MODIFY_FLAG(L_SEQ_NO) <> UNAPIGEN.DBERR_SUCCESS THEN
                  IF L_TEMP_PP IS NULL THEN
                     TRACE('No current pp for '||A_TST_ID(L_SEQ_NO)||' ! no parameter group !');
                  ELSE
                     TRACE('No current pp for '||A_TST_ID(L_SEQ_NO)||' ! no pgnode for parameter group:'||L_TEMP_PP);
                  END IF;
               END IF;
            END IF;
         END LOOP;
            IF L_TRACE THEN
               TRACE('prls array begin');
               FOR L_X IN 1..L_PRLS_NR_OF_ROWS LOOP
                  TRACE('prls Row '||L_X||'#pp='||L_PRLS_PP_TAB(L_X)||'#pgnode='||NVL(L_PRLS_PGNODE_TAB(L_X),0)||'#pr='||L_PRLS_PR_TAB(L_X)||'#pr_version='||L_PRLS_VERSION_TAB(L_X)||'#panode='||NVL(L_PRLS_PANODE_TAB(L_X),0)||'#mod_flag='||L_PRLS_MODIFY_FLAG_TAB(L_X));
               END LOOP;
            END IF;

   L_STEP := 'pr2';  
   TRACE('pr2');           
         
         
         
         IF L_PRLS_NR_OF_ROWS > 0 THEN
            L_SVPA_NR_OF_ROWS := 0;
          TRACE('Checkpoint1');
            FOR L_SCPA_REC IN L_SCPA_CURSOR(L_BUF_A_SC(L_SC_SEQ_NO)) LOOP

               L_SVPA_NR_OF_ROWS := L_SVPA_NR_OF_ROWS + 1;
               L_SVPA_SC_TAB(L_SVPA_NR_OF_ROWS) := L_BUF_A_SC(L_SC_SEQ_NO);
               L_SVPA_PG_TAB(L_SVPA_NR_OF_ROWS) := L_SCPA_REC.PG;
               L_SVPA_PP_VERSION_TAB(L_SVPA_NR_OF_ROWS) := L_SCPA_REC.PP_VERSION;
               L_SVPA_PGNODE_TAB(L_SVPA_NR_OF_ROWS) := L_SCPA_REC.PGNODE;
               L_SVPA_PA_TAB(L_SVPA_NR_OF_ROWS) := L_SCPA_REC.PA;
               L_SVPA_PR_VERSION_TAB(L_SVPA_NR_OF_ROWS) := L_SCPA_REC.PR_VERSION;
               L_SVPA_PANODE_TAB(L_SVPA_NR_OF_ROWS) := L_SCPA_REC.PANODE;
               L_SVPA_MODIFY_FLAG_TAB(L_SVPA_NR_OF_ROWS) := UNAPIGEN.DBERR_SUCCESS;
               L_SVPA_ORIG_IND_TAB(L_SVPA_NR_OF_ROWS) := -1;
      L_STEP := 'pr2.1.'||TO_CHAR(L_PRLS_NR_OF_ROWS); 
                 
               FOR L_SEQ_NO IN 1..L_PRLS_NR_OF_ROWS LOOP
                  IF L_PRLS_PP_TAB(L_SEQ_NO) = L_SCPA_REC.PG AND
                     L_PRLS_PGNODE_TAB(L_SEQ_NO) = L_SCPA_REC.PGNODE AND
                     L_PRLS_PR_TAB(L_SEQ_NO) = L_SCPA_REC.PA AND
                     L_PRLS_VERSION_TAB(L_SEQ_NO) = L_SCPA_REC.PR_VERSION
                  THEN
      L_STEP := 'pr2.2';             
                     L_PRLS_PANODE_TAB(L_SEQ_NO) := L_SCPA_REC.PANODE;
                     IF L_PRLS_MODIFY_FLAG_TAB(L_SEQ_NO) <> UNAPIGEN.DBERR_SUCCESS THEN
                           TRACE('pr '||L_SCPA_REC.PA||' was marked for creation but already exists');
      L_STEP := 'pr2.3';             
                        L_PRLS_MODIFY_FLAG_TAB(L_SEQ_NO) := UNAPIGEN.DBERR_SUCCESS;
                     END IF;
                  END IF;
               END LOOP;

            END LOOP;
          TRACE('Checkpoint2');

            
            L_LAST_TO_KEEP := -1;
            L_KEEP_TAB.DELETE;
            
            
            L_SEQ_NO := 1;
            LOOP
               IF (L_PRLS_PGNODE_TAB(L_SEQ_NO) IS NULL OR L_PRLS_PANODE_TAB(L_SEQ_NO) IS NULL) AND
                  L_PRLS_MODIFY_FLAG_TAB(L_SEQ_NO) = UNAPIGEN.DBERR_SUCCESS THEN
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  L_KEEP_TAB(L_SEQ_NO) := FALSE;
               ELSE
                  L_KEEP_TAB(L_SEQ_NO) := TRUE;
                  L_LAST_TO_KEEP := L_SEQ_NO;
               END IF;
               L_SEQ_NO := L_SEQ_NO+1;
               EXIT WHEN L_SEQ_NO>L_PRLS_NR_OF_ROWS; 
            END LOOP;
 TRACE('Checkpoint3');
            
            IF L_LAST_TO_KEEP = -1 THEN
               
               L_PRLS_NR_OF_ROWS := 0;
            ELSE
               
               
               L_PRLS_NR_OF_ROWS := L_LAST_TO_KEEP;
               
               L_SEQ_NO := L_PRLS_NR_OF_ROWS;
               L_END_OF_BLOCK_TO_SUPPRESS := 0;
               L_START_OF_BLOCK_TO_SUPPRESS := 0;
               LOOP
                  IF NOT L_KEEP_TAB(L_SEQ_NO) THEN
                     IF L_START_OF_BLOCK_TO_SUPPRESS = 0 THEN
                        L_START_OF_BLOCK_TO_SUPPRESS := L_SEQ_NO;
                     END IF;
                     L_END_OF_BLOCK_TO_SUPPRESS := L_SEQ_NO;                     
                  END IF;
                  IF L_KEEP_TAB(L_SEQ_NO) OR L_SEQ_NO = 1 THEN
                     IF L_END_OF_BLOCK_TO_SUPPRESS > 0 THEN
                        L_NEW_ROW := L_END_OF_BLOCK_TO_SUPPRESS-1;
                        FOR L_ROW IN L_START_OF_BLOCK_TO_SUPPRESS+1..L_PRLS_NR_OF_ROWS LOOP
                           L_NEW_ROW := L_NEW_ROW+1;
                           L_PRLS_PP_TAB(L_NEW_ROW) := L_PRLS_PP_TAB(L_ROW);
                           L_PRLS_PP_VERSION_TAB(L_NEW_ROW) := L_PRLS_PP_VERSION_TAB(L_ROW);
                           L_PRLS_PGNODE_TAB(L_NEW_ROW) := L_PRLS_PGNODE_TAB(L_ROW);
                           L_PRLS_PR_TAB(L_NEW_ROW) := L_PRLS_PR_TAB(L_ROW);
                           L_PRLS_VERSION_TAB(L_NEW_ROW) := L_PRLS_VERSION_TAB(L_ROW);
                           L_PRLS_PANODE_TAB(L_NEW_ROW) := L_PRLS_PANODE_TAB(L_ROW);
                           L_PRLS_MODIFY_FLAG_TAB(L_NEW_ROW) := L_PRLS_MODIFY_FLAG_TAB(L_ROW);
                           L_PRLS_ORIG_IND_TAB(L_NEW_ROW) := L_PRLS_ORIG_IND_TAB(L_ROW);
                        END LOOP;
                        
                        L_START_OF_BLOCK_TO_SUPPRESS := 0;
                        L_END_OF_BLOCK_TO_SUPPRESS := 0;
                        L_PRLS_NR_OF_ROWS := L_NEW_ROW;
                     END IF;
                  END IF;
                  L_SEQ_NO := L_SEQ_NO-1;
                  EXIT WHEN L_SEQ_NO<=0;                
               END LOOP;
            END IF;

            IF L_TRACE THEN
               TRACE('prls array#'||L_PRLS_NR_OF_ROWS);
               FOR L_X IN 1..L_PRLS_NR_OF_ROWS LOOP
                  TRACE('prls #Row '||L_X||'#pp='||L_PRLS_PP_TAB(L_X)||'#pgnode='||L_PRLS_PGNODE_TAB(L_X)||'#pr='||L_PRLS_PR_TAB(L_X)||'#pr_version='||L_PRLS_VERSION_TAB(L_X)||'#panode='||L_PRLS_PANODE_TAB(L_X)||'#mod_flag='||L_PRLS_MODIFY_FLAG_TAB(L_X));
               END LOOP;
            END IF;

      L_STEP := 'pr3';             
            
            
            
            
            
            

            L_PRLS_INDEX := 1;
            L_PREVIOUS_EXISTING_PP := '';
            L_PREVIOUS_EXISTING_PP_PGNODE := NULL;
            L_PREVIOUS_EXISTING_PR := '';
            L_PREVIOUS_EXISTING_PR_VERSION := '';
            L_PREVIOUS_EXISTING_PR_PANODE := NULL;
      L_STEP := '4';             

            LOOP
               EXIT WHEN L_PRLS_INDEX > L_PRLS_NR_OF_ROWS;

      L_STEP := '5';             

               IF L_PRLS_MODIFY_FLAG_TAB(L_PRLS_INDEX) = UNAPIGEN.DBERR_SUCCESS THEN
                  L_PREVIOUS_EXISTING_PP := L_PRLS_PP_TAB(L_PRLS_INDEX);
                  L_PREVIOUS_EXISTING_PP_PGNODE := L_PRLS_PGNODE_TAB(L_PRLS_INDEX);
                  L_PREVIOUS_EXISTING_PR := L_PRLS_PR_TAB(L_PRLS_INDEX);
                  L_PREVIOUS_EXISTING_PR_VERSION := L_PRLS_VERSION_TAB(L_PRLS_INDEX);
                  L_PREVIOUS_EXISTING_PR_PANODE := L_PRLS_PANODE_TAB(L_PRLS_INDEX);
               ELSE
      L_STEP := '6';  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  L_SOME_PR_EXIST_4_PG_AFTER := FALSE;
                  FOR L_X IN L_PRLS_INDEX..L_PRLS_NR_OF_ROWS LOOP
                     IF L_PRLS_MODIFY_FLAG_TAB(L_X)=UNAPIGEN.DBERR_SUCCESS AND
                        L_PRLS_PP_TAB(L_X) = L_PRLS_PP_TAB(L_PRLS_INDEX) AND                  
                        L_PRLS_PGNODE_TAB(L_X) = L_PRLS_PGNODE_TAB(L_PRLS_INDEX) 
                     THEN
                        
                        L_SOME_PR_EXIST_4_PG_AFTER:=TRUE;
                        L_REF_EXISTING_PR_PP := L_PRLS_PP_TAB(L_X);
                        L_REF_EXISTING_PR_PP_PGNODE := L_PRLS_PGNODE_TAB(L_X);
                        L_REF_EXISTING_PR_PR := L_PRLS_PR_TAB(L_X);
                        L_REF_EXISTING_PR_PR_VERSION := L_PRLS_VERSION_TAB(L_X);
                        L_REF_EXISTING_PR_PR_PANODE := L_PRLS_PANODE_TAB(L_X);
                        TRACE('prls-scpals mix - insert before rule enforced instead of after - found ref pa:'||L_REF_EXISTING_PR_PR||'#panode:'||L_REF_EXISTING_PR_PR_PANODE||' for pr:'||L_PRLS_PR_TAB(L_PRLS_INDEX));
                        EXIT;
                     
                     END IF;
                  END LOOP;

                  
                  
                     
                  IF L_PREVIOUS_EXISTING_PR IS NOT NULL AND 
                     L_SOME_PR_EXIST_4_PG_AFTER = FALSE THEN
                     
                     
                     L_FIRST := L_PRLS_INDEX;
                     L_LAST := L_PRLS_INDEX;
                     FOR L_X IN L_PRLS_INDEX..L_PRLS_NR_OF_ROWS LOOP
                        IF L_PRLS_MODIFY_FLAG_TAB(L_X)=UNAPIGEN.DBERR_SUCCESS OR
                           L_PRLS_PP_TAB(L_X) <> L_PRLS_PP_TAB(L_FIRST) OR                  
                           L_PRLS_PGNODE_TAB(L_X) <> L_PRLS_PGNODE_TAB(L_FIRST) THEN
                           EXIT;
                        ELSE
                           L_LAST := L_X;
                        END IF;
                     END LOOP;
                     MANIPULATESVPA(L_PREVIOUS_EXISTING_PP, L_PREVIOUS_EXISTING_PP_PGNODE,
                                    L_PREVIOUS_EXISTING_PR, L_PREVIOUS_EXISTING_PR_PANODE,
                                    L_FIRST, L_LAST, 'AFTER', L_BUF_A_SC(L_SC_SEQ_NO));
                     L_PRLS_INDEX := L_LAST;

                   
                   
                   
                   ELSE
      L_STEP := '7';             
                      
                      
                      
                      L_FIRST := L_PRLS_INDEX;
                      L_LAST := L_PRLS_INDEX;
                      L_NEXT_EXISTING_PP := '';
                      L_NEXT_EXISTING_PP_PGNODE := NULL;
                      L_NEXT_EXISTING_PR := '';
                      L_NEXT_EXISTING_PR_PANODE := NULL;

                      FOR L_X IN L_PRLS_INDEX..L_PRLS_NR_OF_ROWS LOOP
                         IF L_PRLS_MODIFY_FLAG_TAB(L_X)=UNAPIGEN.DBERR_SUCCESS OR
                            L_PRLS_PP_TAB(L_X) <> L_PRLS_PP_TAB(L_FIRST) OR
                            L_PRLS_PGNODE_TAB(L_X) <> L_PRLS_PGNODE_TAB(L_FIRST) THEN
                            IF L_PRLS_MODIFY_FLAG_TAB(L_X)=UNAPIGEN.DBERR_SUCCESS THEN
                               L_NEXT_EXISTING_PP := L_PRLS_PP_TAB(L_X);
                               L_NEXT_EXISTING_PP_PGNODE := L_PRLS_PGNODE_TAB(L_X);
                               L_NEXT_EXISTING_PR := L_PRLS_PR_TAB(L_X);
                               L_NEXT_EXISTING_PR_VERSION := L_PRLS_VERSION_TAB(L_X);
                               L_NEXT_EXISTING_PR_PANODE := L_PRLS_PANODE_TAB(L_X);
                            END IF;
                            EXIT;
                         ELSE
                            L_LAST := L_X;
                         END IF;
                      END LOOP;
      L_STEP := '8';             
                     IF L_SOME_PR_EXIST_4_PG_AFTER THEN
                        L_NEXT_EXISTING_PP := L_REF_EXISTING_PR_PP;
                        L_NEXT_EXISTING_PP_PGNODE := L_REF_EXISTING_PR_PP_PGNODE;
                        L_NEXT_EXISTING_PR := L_REF_EXISTING_PR_PR;
                        L_NEXT_EXISTING_PR_VERSION := L_REF_EXISTING_PR_PR_VERSION;
                        L_NEXT_EXISTING_PR_PANODE := L_REF_EXISTING_PR_PR_PANODE;
                     END IF;
                     
                      IF L_NEXT_EXISTING_PR IS NOT NULL THEN
                         MANIPULATESVPA(L_NEXT_EXISTING_PP, L_NEXT_EXISTING_PP_PGNODE,
                                        L_NEXT_EXISTING_PR, L_NEXT_EXISTING_PR_PANODE,
                                        L_FIRST, L_LAST, 'BEFORE', L_BUF_A_SC(L_SC_SEQ_NO));
                      ELSE
                         
                         
                         
                         L_FOUND := FALSE;
                         FOR L_X IN 1..L_SVPA_NR_OF_ROWS LOOP
                            IF L_SVPA_PG_TAB(L_X)     = L_PRLS_PP_TAB(L_FIRST) AND
                               L_SVPA_PGNODE_TAB(L_X) = L_PRLS_PGNODE_TAB(L_FIRST) THEN
                               L_FOUND := TRUE;
                            END IF;
                            IF L_FOUND THEN
                               IF L_SVPA_PG_TAB(L_X) <> L_PRLS_PP_TAB(L_FIRST) OR
                                  L_SVPA_PGNODE_TAB(L_X) <> L_PRLS_PGNODE_TAB(L_FIRST) OR
                                  L_SVPA_MODIFY_FLAG_TAB(L_X) = UNAPIGEN.DBERR_SUCCESS THEN
                                  IF L_SVPA_MODIFY_FLAG_TAB(L_X) = UNAPIGEN.DBERR_SUCCESS THEN
                                     L_NEXT_EXISTING_PP := L_SVPA_PG_TAB(L_X);
                                     L_NEXT_EXISTING_PP_PGNODE := L_SVPA_PGNODE_TAB(L_X);
                                     L_NEXT_EXISTING_PR := L_SVPA_PA_TAB(L_X);
                                     L_NEXT_EXISTING_PR_VERSION := L_SVPA_PR_VERSION_TAB(L_X);
                                     L_NEXT_EXISTING_PR_PANODE := L_SVPA_PANODE_TAB(L_X);
                                  END IF;
                                  EXIT;
                               END IF;
                            END IF;
                         END LOOP;

                         IF L_NEXT_EXISTING_PR IS NOT NULL THEN
                            MANIPULATESVPA(L_NEXT_EXISTING_PP, L_NEXT_EXISTING_PP_PGNODE,
                                           L_NEXT_EXISTING_PR, L_NEXT_EXISTING_PR_PANODE,
                                           L_FIRST, L_LAST, 'BEFORE', L_BUF_A_SC(L_SC_SEQ_NO));                   
                         ELSE
                            MANIPULATESVPA('', '', '', '',  L_FIRST, L_LAST, 'APPEND', L_BUF_A_SC(L_SC_SEQ_NO));
                         END IF;
                      END IF;
      L_STEP := '9';             
                   END IF;             
               END IF;
               L_PRLS_INDEX := L_PRLS_INDEX + 1;

            END LOOP;

            IF L_TRACE THEN
               TRACE('SaveScParameter array');
               FOR L_X IN 1..L_SVPA_NR_OF_ROWS LOOP
TRACE('scpa Row '||L_X||'#pg='||L_SVPA_PG_TAB(L_X) ||'#pgnode='||L_SVPA_PGNODE_TAB(L_X)||'#pp_version='||L_SVPA_PP_VERSION_TAB(L_X)||'#pa='||L_SVPA_PA_TAB(L_X)||'#pr_version='||L_SVPA_PR_VERSION_TAB(L_X)||'#panode='||L_SVPA_PANODE_TAB(L_X)||'mod_flag='||L_SVPA_MODIFY_FLAG_TAB(L_X));
               END LOOP;
            END IF;
      L_STEP := '10';             

            
            
            
            
            L_ANYPA_CREATION := FALSE;
            FOR L_SEQ_NO IN 1..L_SVPA_NR_OF_ROWS LOOP

               IF L_SVPA_MODIFY_FLAG_TAB(L_SEQ_NO) = UNAPIGEN.DBERR_SUCCESS THEN
                  
                  NULL;
               ELSE


                  L_ANYPA_CREATION := TRUE;
                  L_INPA_NR_OF_ROWS := NULL;
          
          TRACE('INITSCPARAMETER for '|| L_SVPA_PA_TAB(L_SEQ_NO) || ' pg: ' || L_SVPA_PG_TAB(L_SEQ_NO));
                  
                  L_RET_CODE := UNAPIPA.INITSCPARAMETER(L_SVPA_PA_TAB(L_SEQ_NO), L_SVPA_PR_VERSION_TAB(L_SEQ_NO), 
                                   NULL, L_SVPA_SC_TAB(L_SEQ_NO), 
                                   L_SVPA_PG_TAB(L_SEQ_NO), L_SVPA_PGNODE_TAB(L_SEQ_NO), L_SVPA_PP_VERSION_TAB(L_SEQ_NO),
                                   ' ', ' ', ' ', ' ', ' ',
                                   L_INPA_PR_VERSION_TAB, L_INPA_DESCRIPTION_TAB,
                                   L_INPA_VALUE_F_TAB, L_INPA_VALUE_S_TAB, L_INPA_UNIT_TAB,
                                   L_INPA_EXEC_START_DATE_TAB,  L_INPA_EXEC_END_DATE_TAB, L_INPA_EXECUTOR_TAB,
                                   L_INPA_PLANNED_EXECUTOR_TAB, L_INPA_MANUALLY_ENTERED_TAB,
                                   L_INPA_ASSIGN_DATE_TAB, L_INPA_ASSIGNED_BY_TAB, L_INPA_MANUALLY_ADDED_TAB,
                                   L_INPA_FORMAT_TAB, L_INPA_TD_INFO_TAB, L_INPA_TD_INFO_UNIT_TAB,
                                   L_INPA_CONFIRM_UID_TAB, L_INPA_ALLOW_ANY_ME_TAB,  L_INPA_DELAY_TAB,
                                   L_INPA_DELAY_UNIT_TAB,  L_INPA_MIN_NR_RESULTS_TAB, L_INPA_CALC_METHOD_TAB,
                                   L_INPA_CALC_CF_TAB, L_INPA_ALARM_ORDER_TAB,  L_INPA_VALID_SPECSA_TAB,
                                   L_INPA_VALID_SPECSB_TAB, L_INPA_VALID_SPECSC_TAB, L_INPA_VALID_LIMITSA_TAB,
                                   L_INPA_VALID_LIMITSB_TAB, L_INPA_VALID_LIMITSC_TAB,  L_INPA_VALID_TARGETA_TAB,
                                   L_INPA_VALID_TARGETB_TAB, L_INPA_VALID_TARGETC_TAB,  L_INPA_MT_TAB, L_INPA_MT_VERSION_TAB,
                                   L_INPA_MT_NR_MEASUR_TAB, L_INPA_LOG_EXCEPTIONS_TAB,  L_INPA_REANALYSIS_TAB,
                                   L_INPA_PA_CLASS_TAB, L_INPA_LOG_HS_TAB, L_INPA_LOG_HS_DETAILS_TAB, 
                                   L_INPA_LC_TAB, L_INPA_LC_VERSION_TAB, L_INPA_NR_OF_ROWS);

                  IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
          TRACE('INITSCPARAMETER not success for '|| L_SVPA_PA_TAB(L_SEQ_NO));
                     UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
                     L_SQLERRM  := 'pr=' || L_SVPA_PA_TAB(L_SEQ_NO) || 
                                   '#pr_version=' || L_SVPA_PR_VERSION_TAB(L_SEQ_NO) ||
                                   '#seq=' || TO_CHAR(-1) ||
                                   '#sc=' || L_SVPA_SC_TAB(L_SEQ_NO) || 
                                   '#pg=' || L_SVPA_PG_TAB(L_SEQ_NO) || 
                                   '#pgnode=' || TO_CHAR(L_SVPA_PGNODE_TAB(L_SEQ_NO)) || 
                                   '#nr_of_rows=' || L_INPA_NR_OF_ROWS ||
                                   '#InitScParameter#ErrorCode=' || TO_CHAR(L_RET_CODE); 
                     TRACE(L_SQLERRM);
                     RAISE STPERROR;
          ELSE
          TRACE('INITSCPARAMETER success for '|| L_SVPA_PA_TAB(L_SEQ_NO));
                 
                  END IF;

                 L_SVPA_DESCRIPTION_TAB(L_SEQ_NO)           := L_INPA_DESCRIPTION_TAB(1);
                 L_SVPA_VALUE_F_TAB(L_SEQ_NO)               := L_INPA_VALUE_F_TAB(1);
                 L_SVPA_VALUE_S_TAB(L_SEQ_NO)               := L_INPA_VALUE_S_TAB(1);
                 L_SVPA_UNIT_TAB(L_SEQ_NO)                  := L_INPA_UNIT_TAB(1);
                 L_SVPA_EXEC_START_DATE_TAB(L_SEQ_NO)       := L_INPA_EXEC_START_DATE_TAB(1);
                 L_SVPA_EXEC_END_DATE_TAB(L_SEQ_NO)         := L_INPA_EXEC_END_DATE_TAB(1);
                 L_SVPA_EXECUTOR_TAB(L_SEQ_NO)              := L_INPA_EXECUTOR_TAB(1);
                 L_SVPA_PLANNED_EXECUTOR_TAB(L_SEQ_NO)      := L_INPA_PLANNED_EXECUTOR_TAB(1);
                 L_SVPA_MANUALLY_ENTERED_TAB(L_SEQ_NO)      := L_INPA_MANUALLY_ENTERED_TAB(1);
                 L_SVPA_ASSIGN_DATE_TAB(L_SEQ_NO)           := L_INPA_ASSIGN_DATE_TAB(1);
                 L_SVPA_ASSIGNED_BY_TAB(L_SEQ_NO)           := L_INPA_ASSIGNED_BY_TAB(1);
                 L_SVPA_MANUALLY_ADDED_TAB(L_SEQ_NO)        := '1';
                 L_SVPA_FORMAT_TAB(L_SEQ_NO)                := L_INPA_FORMAT_TAB(1);
                 L_SVPA_TD_INFO_TAB(L_SEQ_NO)               := L_INPA_TD_INFO_TAB(1);
                 L_SVPA_TD_INFO_UNIT_TAB(L_SEQ_NO)          := L_INPA_TD_INFO_UNIT_TAB(1);
                 L_SVPA_CONFIRM_UID_TAB(L_SEQ_NO)           := L_INPA_CONFIRM_UID_TAB(1);
                 L_SVPA_ALLOW_ANY_ME_TAB(L_SEQ_NO)          := L_INPA_ALLOW_ANY_ME_TAB(1);
                 L_SVPA_DELAY_TAB(L_SEQ_NO)                 := L_INPA_DELAY_TAB(1);
                 L_SVPA_DELAY_UNIT_TAB(L_SEQ_NO)            := L_INPA_DELAY_UNIT_TAB(1);
                 L_SVPA_MIN_NR_RESULTS_TAB(L_SEQ_NO)        := L_INPA_MIN_NR_RESULTS_TAB(1);
                 L_SVPA_CALC_METHOD_TAB(L_SEQ_NO)           := L_INPA_CALC_METHOD_TAB(1);
                 L_SVPA_CALC_CF_TAB(L_SEQ_NO)               := L_INPA_CALC_CF_TAB(1);
                 L_SVPA_ALARM_ORDER_TAB(L_SEQ_NO)           := L_INPA_ALARM_ORDER_TAB(1);
                 L_SVPA_VALID_SPECSA_TAB(L_SEQ_NO)          := L_INPA_VALID_SPECSA_TAB(1);
                 L_SVPA_VALID_SPECSB_TAB(L_SEQ_NO)          := L_INPA_VALID_SPECSB_TAB(1);
                 L_SVPA_VALID_SPECSC_TAB(L_SEQ_NO)          := L_INPA_VALID_SPECSC_TAB(1);
                 L_SVPA_VALID_LIMITSA_TAB(L_SEQ_NO)         := L_INPA_VALID_LIMITSA_TAB(1);
                 L_SVPA_VALID_LIMITSB_TAB(L_SEQ_NO)         := L_INPA_VALID_LIMITSB_TAB(1);
                 L_SVPA_VALID_LIMITSC_TAB(L_SEQ_NO)         := L_INPA_VALID_LIMITSC_TAB(1);
                 L_SVPA_VALID_TARGETA_TAB(L_SEQ_NO)         := L_INPA_VALID_TARGETA_TAB(1);
                 L_SVPA_VALID_TARGETB_TAB(L_SEQ_NO)         := L_INPA_VALID_TARGETB_TAB(1);
                 L_SVPA_VALID_TARGETC_TAB(L_SEQ_NO)         := L_INPA_VALID_TARGETC_TAB(1);
                 L_SVPA_MT_TAB(L_SEQ_NO)                    := L_INPA_MT_TAB(1);
                 L_SVPA_MT_VERSION_TAB(L_SEQ_NO)            := L_INPA_MT_VERSION_TAB(1);
                 L_SVPA_MT_NR_MEASUR_TAB(L_SEQ_NO)          := L_INPA_MT_NR_MEASUR_TAB(1);
                 L_SVPA_LOG_EXCEPTIONS_TAB(L_SEQ_NO)        := L_INPA_LOG_EXCEPTIONS_TAB(1);
                 L_SVPA_PA_CLASS_TAB(L_SEQ_NO)              := L_INPA_PA_CLASS_TAB(1);
                 L_SVPA_LOG_HS_TAB(L_SEQ_NO)                := L_INPA_LOG_HS_TAB(1);
                 L_SVPA_LOG_HS_DETAILS_TAB(L_SEQ_NO)        := L_INPA_LOG_HS_DETAILS_TAB(1);
                 L_SVPA_LC_TAB(L_SEQ_NO)                    := L_INPA_LC_TAB(1);
                 L_SVPA_LC_VERSION_TAB(L_SEQ_NO)            := L_INPA_LC_VERSION_TAB(1);

               END IF;
            END LOOP;

            IF L_SVPA_NR_OF_ROWS > 0 AND L_ANYPA_CREATION THEN

               
               
               
               TRACE('attributes must be inherited when mod_flag=INSERT');
               FOR L_SEQ_NO IN 1..L_SVPA_NR_OF_ROWS LOOP
                  IF L_SVPA_MODIFY_FLAG_TAB(L_SEQ_NO) = UNAPIGEN.MOD_FLAG_INSERT THEN
                     L_SVPA_MODIFY_FLAG_TAB(L_SEQ_NO) := UNAPIGEN.MOD_FLAG_INSERT_AND_CRAU;
                  END IF;               
               END LOOP;
               
               L_RET_CODE := UNAPIPA.SAVESCPARAMETER('0', L_SVPA_SC_TAB,
                                L_SVPA_PG_TAB, L_SVPA_PGNODE_TAB, L_SVPA_PA_TAB, L_SVPA_PANODE_TAB,
                                L_SVPA_PR_VERSION_TAB, L_SVPA_DESCRIPTION_TAB, L_SVPA_VALUE_F_TAB, L_SVPA_VALUE_S_TAB,
                                L_SVPA_UNIT_TAB, L_SVPA_EXEC_START_DATE_TAB, L_SVPA_EXEC_END_DATE_TAB,
                                L_SVPA_EXECUTOR_TAB, L_SVPA_PLANNED_EXECUTOR_TAB, L_SVPA_MANUALLY_ENTERED_TAB,
                                L_SVPA_ASSIGN_DATE_TAB, L_SVPA_ASSIGNED_BY_TAB, L_SVPA_MANUALLY_ADDED_TAB,
                                L_SVPA_FORMAT_TAB, L_SVPA_TD_INFO_TAB, L_SVPA_TD_INFO_UNIT_TAB,
                                L_SVPA_CONFIRM_UID_TAB, L_SVPA_ALLOW_ANY_ME_TAB, L_SVPA_DELAY_TAB,
                                L_SVPA_DELAY_UNIT_TAB, L_SVPA_MIN_NR_RESULTS_TAB, L_SVPA_CALC_METHOD_TAB,
                                L_SVPA_CALC_CF_TAB, L_SVPA_ALARM_ORDER_TAB, L_SVPA_VALID_SPECSA_TAB,
                                L_SVPA_VALID_SPECSB_TAB, L_SVPA_VALID_SPECSC_TAB, L_SVPA_VALID_LIMITSA_TAB,
                                L_SVPA_VALID_LIMITSB_TAB, L_SVPA_VALID_LIMITSC_TAB, L_SVPA_VALID_TARGETA_TAB,
                                L_SVPA_VALID_TARGETB_TAB, L_SVPA_VALID_TARGETC_TAB, L_SVPA_MT_TAB, L_SVPA_MT_VERSION_TAB,
                                L_SVPA_MT_NR_MEASUR_TAB, L_SVPA_LOG_EXCEPTIONS_TAB, L_SVPA_PA_CLASS_TAB,
                                L_SVPA_LOG_HS_TAB, L_SVPA_LOG_HS_DETAILS_TAB, L_SVPA_LC_TAB,
                                L_SVPA_LC_VERSION_TAB, L_SVPA_MODIFY_FLAG_TAB,
                                L_SVPA_NR_OF_ROWS, 'SaveFullTestPlan');

               FOR L_X IN 1..L_SVPA_NR_OF_ROWS LOOP
                IF  L_SVPA_ORIG_IND_TAB(L_X) > 0  THEN
                   L_TST_PGNODE(L_SVPA_ORIG_IND_TAB(L_X))  := L_SVPA_PGNODE_TAB(L_X);
                   L_TST_PANODE(L_SVPA_ORIG_IND_TAB(L_X))  := L_SVPA_PANODE_TAB(L_X);
                END IF;
               END LOOP;


               IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
                  IF L_RET_CODE NOT IN (UNAPIGEN.DBERR_PARTIALSAVE,UNAPIGEN.DBERR_PARTIALCHARTSAVE) THEN
                     UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
                     L_SQLERRM  := 'sc(1)=' || L_SVPA_SC_TAB(1) ||
                                   '#pg(1)=' || L_SVPA_PG_TAB(1) || '#pgnode(1)=' || L_SVPA_PGNODE_TAB(1) ||
                                   '#pa(1)=' || L_SVPA_PA_TAB(1) || '#panode(1)=' || L_SVPA_PANODE_TAB(1) ||
                                   '#pr_version(1)=' || L_SVPA_PR_VERSION_TAB(1) ||'#nr_of_rows=' || L_SVPA_NR_OF_ROWS ||
                                   '#SaveScParameter#ErrorCode=' || TO_CHAR(L_RET_CODE); 
                     TRACE(L_SQLERRM);
                     RAISE STPERROR;
                  ELSIF L_RET_CODE = UNAPIGEN.DBERR_PARTIALSAVE THEN
                     TRACE('Partial save is nomore a fatal error in SaveFullTestPlan !');
                     UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SUCCESS;               
                     FOR L_SEQ_NO IN 1..L_SVPA_NR_OF_ROWS LOOP
                        
                        IF L_SVPA_MODIFY_FLAG_TAB(L_SEQ_NO)>UNAPIGEN.DBERR_SUCCESS THEN
                           L_SQLERRM  := 'sc('||TO_CHAR(L_SEQ_NO)||')=' || L_SVPA_SC_TAB(L_SEQ_NO) ||'#pg('||TO_CHAR(L_SEQ_NO)||')=' || L_SVPA_PG_TAB(L_SEQ_NO) ||
                                         '#pgnode('||TO_CHAR(L_SEQ_NO)||')=' || L_SVPA_PGNODE_TAB(L_SEQ_NO) ||
                                         '#pa('||TO_CHAR(L_SEQ_NO)||')=' || L_SVPA_PA_TAB(L_SEQ_NO) ||
                                         '#panode('||TO_CHAR(L_SEQ_NO)||')=' || L_SVPA_PANODE_TAB(L_SEQ_NO) ||
                                         '#modify_flag('||TO_CHAR(L_SEQ_NO)||')=' || L_SVPA_MODIFY_FLAG_TAB(L_SEQ_NO) ||
                                         '#pr_version('||TO_CHAR(L_SEQ_NO)||')=' || L_SVPA_PR_VERSION_TAB(L_SEQ_NO) ||
                                         '#nr_of_rows=' || L_SVPA_NR_OF_ROWS ||
                                         '#SaveScParameter#ErrorCode=' || TO_CHAR(L_RET_CODE)||
                                         '#auth='||UNAPIAUT.P_NOT_AUTHORISED;
                           TRACE(L_SQLERRM);
                           
                        END IF;
                     END LOOP;
                  ELSIF L_RET_CODE = UNAPIGEN.DBERR_PARTIALCHARTSAVE THEN
                     TRACE('Partial chart save is nomore a fatal error in SaveFullTestPlan !');
                     UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SUCCESS;               
                     
                     L_SQLERRM  := 'SaveScParameter#ErrorCode=' || TO_CHAR(L_RET_CODE)||
                                   '#auth='||UNAPIAUT.P_NOT_AUTHORISED;
                     TRACE(L_SQLERRM);
                     
                  END IF;
               END IF;
            END IF;
         END IF;

         
         
         
         

         
         
         
   L_STEP := 'mt1';             
         
         
         
         L_MTLS_NR_OF_ROWS := 0;
         L_TEMP_PP := NULL;
         L_TEMP_PP_VERSION := NULL;
         L_TEMP_PP_KEY1 := NULL;
         L_TEMP_PP_KEY2 := NULL;
         L_TEMP_PP_KEY3 := NULL;
         L_TEMP_PP_KEY4 := NULL;
         L_TEMP_PP_KEY5 := NULL;
         L_TEMP_PGNODE := NULL;
         L_TEMP_PR := NULL;
         L_TEMP_PR_VERSION := NULL;
         L_TEMP_PANODE := NULL;
         FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
            IF A_TST_TP(L_SEQ_NO) = 'pp' THEN
               L_TEMP_PP := A_TST_ID(L_SEQ_NO);
               L_TEMP_PP_VERSION := A_TST_ID_VERSION(L_SEQ_NO);
               L_TEMP_PP_KEY1 := A_PP_KEY1(L_SEQ_NO);
               L_TEMP_PP_KEY2 := A_PP_KEY2(L_SEQ_NO);
               L_TEMP_PP_KEY3 := A_PP_KEY3(L_SEQ_NO);
               L_TEMP_PP_KEY4 := A_PP_KEY4(L_SEQ_NO);
               L_TEMP_PP_KEY5 := A_PP_KEY5(L_SEQ_NO);
               L_TEMP_PGNODE := NULL;
               IF L_TST_PGNODE(L_SEQ_NO) > 0 THEN
                  L_TEMP_PGNODE := L_TST_PGNODE(L_SEQ_NO);
               ELSE
                  
                  
                  FOR L_X IN 1..L_SVPG_NR_OF_ROWS LOOP
                     IF L_SVPG_PG_TAB(L_X) = L_TEMP_PP THEN
                        L_TEMP_PGNODE := L_SVPG_PGNODE_TAB(L_X);
                        EXIT;
                     END IF;
                  END LOOP;
               END IF;
            ELSIF A_TST_TP(L_SEQ_NO) = 'pr' THEN
               L_TEMP_PR := A_TST_ID(L_SEQ_NO);
               L_TEMP_PR_VERSION := A_TST_ID_VERSION(L_SEQ_NO);
               IF L_TST_PANODE(L_SEQ_NO) > 0  THEN
                  L_TEMP_PANODE := L_TST_PANODE(L_SEQ_NO);
               ELSE
                 
                  
                  FOR L_X IN 1..L_SVPA_NR_OF_ROWS LOOP
                     IF L_SVPA_PG_TAB(L_X) = L_TEMP_PP AND
                        L_SVPA_PGNODE_TAB(L_X) = L_TEMP_PGNODE AND
                        L_SVPA_PA_TAB(L_X) = L_TEMP_PR THEN
                        L_TEMP_PANODE := L_SVPA_PANODE_TAB(L_X);
                        EXIT;
                     END IF;
                  END LOOP;
               END IF;
            ELSIF A_TST_TP(L_SEQ_NO) = 'mt' THEN
               IF A_NEXT_ROWS <> 0 AND
                  L_TEMP_PP IS NULL THEN
                  L_TEMP_PP := P_SAVEFTP_PG;
                  L_TEMP_PP_VERSION := P_SAVEFTP_PP_VERSION;
                  L_TEMP_PP_KEY1 := P_SAVEFTP_PP_KEY1;
                  L_TEMP_PP_KEY2 := P_SAVEFTP_PP_KEY2;
                  L_TEMP_PP_KEY3 := P_SAVEFTP_PP_KEY3;
                  L_TEMP_PP_KEY4 := P_SAVEFTP_PP_KEY4;
                  L_TEMP_PP_KEY5 := P_SAVEFTP_PP_KEY5;
                  L_TEMP_PGNODE := P_SAVEFTP_PGNODE;
               END IF;
               IF A_NEXT_ROWS <> 0 AND
                  L_TEMP_PR IS NULL THEN
                  L_TEMP_PR := P_SAVEFTP_PA;
                  L_TEMP_PR_VERSION := P_SAVEFTP_PA_VERSION;
                  L_TEMP_PANODE := P_SAVEFTP_PANODE;
               END IF;
               L_MTLS_NR_OF_ROWS := L_MTLS_NR_OF_ROWS + 1;
               L_MTLS_PP_TAB(L_MTLS_NR_OF_ROWS) := L_TEMP_PP;
               L_MTLS_PGNODE_TAB(L_MTLS_NR_OF_ROWS) := L_TEMP_PGNODE;
               L_MTLS_PR_TAB(L_MTLS_NR_OF_ROWS) := L_TEMP_PR;
               L_MTLS_PR_VERSION_TAB(L_MTLS_NR_OF_ROWS) := L_TEMP_PR_VERSION;
               L_MTLS_PANODE_TAB(L_MTLS_NR_OF_ROWS) := L_TEMP_PANODE;
               L_MTLS_MT_TAB(L_MTLS_NR_OF_ROWS) := A_TST_ID(L_SEQ_NO);
               L_MTLS_VERSION_TAB(L_MTLS_NR_OF_ROWS) := A_TST_ID_VERSION(L_SEQ_NO);
               L_MTLS_MENODE_TAB(L_MTLS_NR_OF_ROWS) := NULL;
               L_MTLS_MODIFY_FLAG_TAB(L_MTLS_NR_OF_ROWS) := A_MODIFY_FLAG(L_SEQ_NO);
               IF L_TRACE THEN
                  IF (L_TEMP_PP IS NULL OR L_TEMP_PGNODE IS NULL) AND 
                     A_MODIFY_FLAG(L_SEQ_NO) <> UNAPIGEN.DBERR_SUCCESS THEN
                     TRACE('No current pp for mt '||A_TST_ID(L_SEQ_NO)||' !');
                  END IF;
                  IF (L_TEMP_PR IS NULL OR L_TEMP_PANODE IS NULL) AND 
                     A_MODIFY_FLAG(L_SEQ_NO) <> UNAPIGEN.DBERR_SUCCESS THEN
                     TRACE('No current pr for mt '||A_TST_ID(L_SEQ_NO)||' !');
                  END IF;
               END IF;
            END IF;
         END LOOP;

   L_STEP := 'mt2';             
         
         
         
         IF L_MTLS_NR_OF_ROWS > 0 THEN
            L_SVME_NR_OF_ROWS := 0;
            FOR L_SCME_REC IN L_SCME_CURSOR(L_BUF_A_SC(L_SC_SEQ_NO)) LOOP
               L_SVME_NR_OF_ROWS := L_SVME_NR_OF_ROWS + 1;
               L_SVME_SC_TAB(L_SVME_NR_OF_ROWS) := L_BUF_A_SC(L_SC_SEQ_NO);
               L_SVME_PG_TAB(L_SVME_NR_OF_ROWS) := L_SCME_REC.PG;
               L_SVME_PGNODE_TAB(L_SVME_NR_OF_ROWS) := L_SCME_REC.PGNODE;
               L_SVME_PA_TAB(L_SVME_NR_OF_ROWS) := L_SCME_REC.PA;
               L_SVME_PR_VERSION_TAB(L_SVME_NR_OF_ROWS) := L_SCME_REC.PR_VERSION;
               L_SVME_PANODE_TAB(L_SVME_NR_OF_ROWS) := L_SCME_REC.PANODE;
               L_SVME_ME_TAB(L_SVME_NR_OF_ROWS) := L_SCME_REC.ME;
               L_SVME_MT_VERSION_TAB(L_SVME_NR_OF_ROWS) := L_SCME_REC.MT_VERSION;
               L_SVME_MENODE_TAB(L_SVME_NR_OF_ROWS) := L_SCME_REC.MENODE;
               L_SVME_EQ_TAB(L_SVME_NR_OF_ROWS) := L_SCME_REC.EQ;
               L_SVME_MODIFY_FLAG_TAB(L_SVME_NR_OF_ROWS) := UNAPIGEN.DBERR_SUCCESS;

      L_STEP := 'mt2.1.'||TO_CHAR(L_MTLS_NR_OF_ROWS);             
               FOR L_SEQ_NO IN 1..L_MTLS_NR_OF_ROWS LOOP
                  IF L_MTLS_PP_TAB(L_SEQ_NO) = L_SCME_REC.PG AND
                     L_MTLS_PGNODE_TAB(L_SEQ_NO) = L_SCME_REC.PGNODE AND
                     L_MTLS_PR_TAB(L_SEQ_NO) = L_SCME_REC.PA AND
                     L_MTLS_PANODE_TAB(L_SEQ_NO) = L_SCME_REC.PANODE AND
                     L_MTLS_MT_TAB(L_SEQ_NO) = L_SCME_REC.ME AND
                     L_MTLS_VERSION_TAB(L_SEQ_NO) = L_SCME_REC.MT_VERSION
                  THEN
      L_STEP := 'mt2.2';             
                     L_MTLS_MENODE_TAB(L_SEQ_NO) := L_SCME_REC.MENODE;
                     IF L_MTLS_MODIFY_FLAG_TAB(L_SEQ_NO) <> UNAPIGEN.DBERR_SUCCESS THEN
                        TRACE('mt '||L_SCME_REC.ME||' was marked for creation but already exists');
      L_STEP := 'mt2.3';             
                        L_MTLS_MODIFY_FLAG_TAB(L_SEQ_NO) := UNAPIGEN.DBERR_SUCCESS;
                     END IF;
                  END IF;
               END LOOP;

            END LOOP;

            
            L_LAST_TO_KEEP := -1;
            L_KEEP_TAB.DELETE;
            
            
            L_SEQ_NO := 1;
            LOOP
               IF (L_MTLS_PGNODE_TAB(L_SEQ_NO) IS NULL OR
                   L_MTLS_PANODE_TAB(L_SEQ_NO) IS NULL OR
                   L_MTLS_MENODE_TAB(L_SEQ_NO) IS NULL) AND
                  L_MTLS_MODIFY_FLAG_TAB(L_SEQ_NO) = UNAPIGEN.DBERR_SUCCESS THEN
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  L_KEEP_TAB(L_SEQ_NO) := FALSE;
               ELSE
                  L_KEEP_TAB(L_SEQ_NO) := TRUE;
                  L_LAST_TO_KEEP := L_SEQ_NO;
               END IF;
               L_SEQ_NO := L_SEQ_NO+1;
               EXIT WHEN L_SEQ_NO>L_MTLS_NR_OF_ROWS; 
            END LOOP;

            
            IF L_LAST_TO_KEEP = -1 THEN
               
               L_MTLS_NR_OF_ROWS := 0;
            ELSE
               
               
               L_MTLS_NR_OF_ROWS := L_LAST_TO_KEEP;
               
               L_SEQ_NO := L_MTLS_NR_OF_ROWS;
               L_END_OF_BLOCK_TO_SUPPRESS := 0;
               L_START_OF_BLOCK_TO_SUPPRESS := 0;
               LOOP
                  IF NOT L_KEEP_TAB(L_SEQ_NO) THEN
                     IF L_START_OF_BLOCK_TO_SUPPRESS = 0 THEN
                        L_START_OF_BLOCK_TO_SUPPRESS := L_SEQ_NO;
                     END IF;
                     L_END_OF_BLOCK_TO_SUPPRESS := L_SEQ_NO;                     
                  END IF;
                  IF L_KEEP_TAB(L_SEQ_NO) OR L_SEQ_NO = 1 THEN
                     IF L_END_OF_BLOCK_TO_SUPPRESS > 0 THEN
                        L_NEW_ROW := L_END_OF_BLOCK_TO_SUPPRESS-1;
                        FOR L_ROW IN L_START_OF_BLOCK_TO_SUPPRESS+1..L_MTLS_NR_OF_ROWS LOOP
                           L_NEW_ROW := L_NEW_ROW+1;
                           L_MTLS_PP_TAB(L_NEW_ROW) := L_MTLS_PP_TAB(L_ROW);
                           L_MTLS_PGNODE_TAB(L_NEW_ROW) := L_MTLS_PGNODE_TAB(L_ROW);
                           L_MTLS_PR_TAB(L_NEW_ROW) := L_MTLS_PR_TAB(L_ROW);
                           L_MTLS_PR_VERSION_TAB(L_NEW_ROW) := L_MTLS_PR_VERSION_TAB(L_ROW);
                           L_MTLS_PANODE_TAB(L_NEW_ROW) := L_MTLS_PANODE_TAB(L_ROW);
                           L_MTLS_MT_TAB(L_NEW_ROW) := L_MTLS_MT_TAB(L_ROW);
                           L_MTLS_VERSION_TAB(L_NEW_ROW) := L_MTLS_VERSION_TAB(L_ROW);
                           L_MTLS_MENODE_TAB(L_NEW_ROW) := L_MTLS_MENODE_TAB(L_ROW);
                           L_MTLS_MODIFY_FLAG_TAB(L_NEW_ROW) := L_MTLS_MODIFY_FLAG_TAB(L_ROW);                  
                        END LOOP;
                        
                        L_START_OF_BLOCK_TO_SUPPRESS := 0;
                        L_END_OF_BLOCK_TO_SUPPRESS := 0;
                        L_MTLS_NR_OF_ROWS := L_NEW_ROW;
                     END IF;
                  END IF;
                  L_SEQ_NO := L_SEQ_NO-1;
                  EXIT WHEN L_SEQ_NO<=0;                
               END LOOP;
            END IF;

            IF L_TRACE THEN
               TRACE('mtls array');
               FOR L_X IN 1..L_MTLS_NR_OF_ROWS LOOP
                  TRACE('Row '||L_X||'#pp='||L_MTLS_PP_TAB(L_X)||'#pgnode='||L_MTLS_PGNODE_TAB(L_X)||'#pr='||L_MTLS_PR_TAB(L_X)||'#panode='||L_MTLS_PANODE_TAB(L_X)||
                  '#mt='||L_MTLS_MT_TAB(L_X)||'#menode='||L_MTLS_MENODE_TAB(L_X)||'#mod_flag='||L_MTLS_MODIFY_FLAG_TAB(L_X));
               END LOOP;
            END IF;

      L_STEP := 'mt3';             
            
            
            
            
            
            

            L_MTLS_INDEX := 1;
            L_PREVIOUS_EXISTING_PP := '';
            L_PREVIOUS_EXISTING_PP_PGNODE := NULL;
            L_PREVIOUS_EXISTING_PR := '';
            L_PREVIOUS_EXISTING_PR_VERSION := '';
            L_PREVIOUS_EXISTING_PR_PANODE := NULL;
            L_PREVIOUS_EXISTING_MT := '';
            L_PREVIOUS_EXISTING_MT_VERSION := '';
            L_PREVIOUS_EXISTING_MT_MENODE := NULL;
      L_STEP := 'mt4';             

            LOOP
               EXIT WHEN L_MTLS_INDEX > L_MTLS_NR_OF_ROWS;

      L_STEP := 'mt5';             

               IF L_MTLS_MODIFY_FLAG_TAB(L_MTLS_INDEX) = UNAPIGEN.DBERR_SUCCESS THEN
                  L_PREVIOUS_EXISTING_PP := L_MTLS_PP_TAB(L_MTLS_INDEX);
                  L_PREVIOUS_EXISTING_PP_PGNODE := L_MTLS_PGNODE_TAB(L_MTLS_INDEX);
                  L_PREVIOUS_EXISTING_PR := L_MTLS_PR_TAB(L_MTLS_INDEX);
                  L_PREVIOUS_EXISTING_PR_VERSION := L_MTLS_PR_VERSION_TAB(L_MTLS_INDEX);
                  L_PREVIOUS_EXISTING_PR_PANODE := L_MTLS_PANODE_TAB(L_MTLS_INDEX);
                  L_PREVIOUS_EXISTING_MT := L_MTLS_MT_TAB(L_MTLS_INDEX);
                  L_PREVIOUS_EXISTING_MT_VERSION := L_MTLS_VERSION_TAB(L_MTLS_INDEX);
                  L_PREVIOUS_EXISTING_MT_MENODE := L_MTLS_MENODE_TAB(L_MTLS_INDEX);
               ELSE
      L_STEP := 'mt6';       

                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  L_SOME_MT_EXIST_4_PA_AFTER := FALSE;
                  FOR L_X IN L_MTLS_INDEX..L_MTLS_NR_OF_ROWS LOOP
                     IF L_MTLS_MODIFY_FLAG_TAB(L_X)=UNAPIGEN.DBERR_SUCCESS AND
                        L_MTLS_PP_TAB(L_X) = L_MTLS_PP_TAB(L_MTLS_INDEX) AND                  
                        L_MTLS_PGNODE_TAB(L_X) = L_MTLS_PGNODE_TAB(L_MTLS_INDEX) AND
                        L_MTLS_PR_TAB(L_X) = L_MTLS_PR_TAB(L_MTLS_INDEX) AND                  
                        L_MTLS_PANODE_TAB(L_X) = L_MTLS_PANODE_TAB(L_MTLS_INDEX)                         
                     THEN
                        
                        L_SOME_MT_EXIST_4_PA_AFTER:=TRUE;
                        L_REF_EXISTING_MT_PP := L_MTLS_PP_TAB(L_X);
                        L_REF_EXISTING_MT_PP_PGNODE := L_MTLS_PGNODE_TAB(L_X);
                        L_REF_EXISTING_MT_PR := L_MTLS_PR_TAB(L_X);
                        L_REF_EXISTING_MT_PR_VERSION := L_MTLS_PR_VERSION_TAB(L_X);
                        L_REF_EXISTING_MT_PR_PANODE := L_MTLS_PANODE_TAB(L_X);
                        L_REF_EXISTING_MT_MT := L_MTLS_MT_TAB(L_X);
                        L_REF_EXISTING_MT_MT_VERSION := L_MTLS_VERSION_TAB(L_X);
                        L_REF_EXISTING_MT_MT_MENODE := L_MTLS_MENODE_TAB(L_X);
                        TRACE('mtls-scmels mix - insert before rule enforced instead of after - found ref me:'||L_REF_EXISTING_MT_MT||'#menode:'||L_REF_EXISTING_MT_MT_MENODE||' for me:'||L_MTLS_MT_TAB(L_MTLS_INDEX));
                        EXIT;
                     
                     END IF;
                  END LOOP;

                  
                  
                  IF L_PREVIOUS_EXISTING_MT IS NOT NULL AND 
                     L_SOME_MT_EXIST_4_PA_AFTER = FALSE THEN
                     
                     
                     L_FIRST := L_MTLS_INDEX;
                     L_LAST := L_MTLS_INDEX;
                     FOR L_X IN L_MTLS_INDEX..L_MTLS_NR_OF_ROWS LOOP
                        IF L_MTLS_MODIFY_FLAG_TAB(L_X) = UNAPIGEN.DBERR_SUCCESS OR
                           L_MTLS_PP_TAB(L_X) <> L_MTLS_PP_TAB(L_FIRST) OR
                           L_MTLS_PGNODE_TAB(L_X) <> L_MTLS_PGNODE_TAB(L_FIRST) OR
                           L_MTLS_PR_TAB(L_X) <> L_MTLS_PR_TAB(L_FIRST) OR
                           L_MTLS_PR_VERSION_TAB(L_X) <> L_MTLS_PR_VERSION_TAB(L_FIRST) OR
                           L_MTLS_PANODE_TAB(L_X) <> L_MTLS_PANODE_TAB(L_FIRST) THEN
                           EXIT;
                        ELSE
                           L_LAST := L_X;
                        END IF;
                     END LOOP;
                     MANIPULATESVME(L_PREVIOUS_EXISTING_PP, L_PREVIOUS_EXISTING_PP_PGNODE,
                                    L_PREVIOUS_EXISTING_PR, L_PREVIOUS_EXISTING_PR_PANODE,
                                    L_PREVIOUS_EXISTING_MT, L_PREVIOUS_EXISTING_MT_MENODE,
                                    L_FIRST, L_LAST, 'AFTER', L_BUF_A_SC(L_SC_SEQ_NO));
                     L_MTLS_INDEX := L_LAST;

                   
                   
                   
                   ELSE
      L_STEP := 'mt7';             
                      
                      
                      
                      L_FIRST := L_MTLS_INDEX;
                      L_LAST := L_MTLS_INDEX;
                      L_NEXT_EXISTING_PP := '';
                      L_NEXT_EXISTING_PP_PGNODE := NULL;
                      L_NEXT_EXISTING_PR := '';
                      L_NEXT_EXISTING_PR_PANODE := NULL;
                      L_NEXT_EXISTING_PR_VERSION := NULL;
                      L_NEXT_EXISTING_MT := '';
                      L_NEXT_EXISTING_MT_VERSION := '';
                      L_NEXT_EXISTING_MT_MENODE := NULL;

                      FOR L_X IN L_MTLS_INDEX..L_MTLS_NR_OF_ROWS LOOP
                         IF L_MTLS_MODIFY_FLAG_TAB(L_X) = UNAPIGEN.DBERR_SUCCESS OR
                            L_MTLS_PP_TAB(L_X) <> L_MTLS_PP_TAB(L_FIRST) OR 
                            L_MTLS_PGNODE_TAB(L_X) <> L_MTLS_PGNODE_TAB(L_FIRST) OR 
                            L_MTLS_PR_TAB(L_X) <> L_MTLS_PR_TAB(L_FIRST) OR 
                            L_MTLS_PANODE_TAB(L_X) <> L_MTLS_PANODE_TAB(L_FIRST) THEN
                            IF L_MTLS_MODIFY_FLAG_TAB(L_X) = UNAPIGEN.DBERR_SUCCESS THEN
                               L_NEXT_EXISTING_PP := L_MTLS_PP_TAB(L_X);
                               L_NEXT_EXISTING_PP_PGNODE := L_MTLS_PGNODE_TAB(L_X);
                               L_NEXT_EXISTING_PR := L_MTLS_PR_TAB(L_X);
                               L_NEXT_EXISTING_PR_PANODE := L_MTLS_PANODE_TAB(L_X);
                               L_NEXT_EXISTING_MT := L_MTLS_MT_TAB(L_X);
                               L_NEXT_EXISTING_MT_MENODE := L_MTLS_MENODE_TAB(L_X);
                            END IF;
                            EXIT;
                         ELSE
                            L_LAST := L_X;
                         END IF;
                      END LOOP;
      L_STEP := '8';             
                     IF L_SOME_MT_EXIST_4_PA_AFTER THEN
                        L_NEXT_EXISTING_PP := L_REF_EXISTING_MT_PP;
                        L_NEXT_EXISTING_PP_PGNODE := L_REF_EXISTING_MT_PP_PGNODE;
                        L_NEXT_EXISTING_PR := L_REF_EXISTING_MT_PR;
                        L_NEXT_EXISTING_PR_VERSION := L_REF_EXISTING_MT_PR_VERSION;
                        L_NEXT_EXISTING_PR_PANODE := L_REF_EXISTING_MT_PR_PANODE;
                        L_NEXT_EXISTING_MT := L_REF_EXISTING_MT_MT;
                        L_NEXT_EXISTING_PR_VERSION := L_REF_EXISTING_MT_MT_VERSION;
                        L_NEXT_EXISTING_MT_MENODE := L_REF_EXISTING_MT_MT_MENODE;
                     END IF;

                      IF L_NEXT_EXISTING_MT IS NOT NULL THEN
                         MANIPULATESVME(L_NEXT_EXISTING_PP, L_NEXT_EXISTING_PP_PGNODE,
                                        L_NEXT_EXISTING_PR, L_NEXT_EXISTING_PR_PANODE,
                                        L_NEXT_EXISTING_MT, L_NEXT_EXISTING_MT_MENODE,
                                        L_FIRST, L_LAST, 'BEFORE', L_BUF_A_SC(L_SC_SEQ_NO));
                      ELSE
                         
                         
                         
                         L_FOUND := FALSE;
                         FOR L_X IN 1..L_SVME_NR_OF_ROWS LOOP
                            IF L_SVME_PG_TAB(L_X)     = L_MTLS_PP_TAB(L_FIRST) AND
                               L_SVME_PGNODE_TAB(L_X) = L_MTLS_PGNODE_TAB(L_FIRST) AND
                               L_SVME_PA_TAB(L_X)     = L_MTLS_PR_TAB(L_FIRST) AND
                               L_SVME_PANODE_TAB(L_X) = L_MTLS_PANODE_TAB(L_FIRST) THEN
                               L_FOUND := TRUE;
                            END IF;
                            IF L_FOUND THEN
                               IF L_SVME_PG_TAB(L_X)     <> L_MTLS_PP_TAB(L_FIRST) OR
                                  L_SVME_PGNODE_TAB(L_X) <> L_MTLS_PGNODE_TAB(L_FIRST) OR
                                  L_SVME_PA_TAB(L_X)     <> L_MTLS_PR_TAB(L_FIRST) OR
                                  L_SVME_PANODE_TAB(L_X) <> L_MTLS_PANODE_TAB(L_FIRST) OR
                                  L_SVME_MODIFY_FLAG_TAB(L_X) = UNAPIGEN.DBERR_SUCCESS THEN
                                  IF L_SVME_MODIFY_FLAG_TAB(L_X) = UNAPIGEN.DBERR_SUCCESS THEN
                                     L_NEXT_EXISTING_PP := L_SVME_PG_TAB(L_X);
                                     L_NEXT_EXISTING_PP_PGNODE := L_SVME_PGNODE_TAB(L_X);
                                     L_NEXT_EXISTING_PR := L_SVME_PA_TAB(L_X);
                                     L_NEXT_EXISTING_PR_VERSION := L_SVME_PR_VERSION_TAB(L_X);
                                     L_NEXT_EXISTING_PR_PANODE := L_SVME_PANODE_TAB(L_X);
                                     L_NEXT_EXISTING_MT := L_SVME_ME_TAB(L_X);
                                     L_NEXT_EXISTING_MT_VERSION := L_SVME_MT_VERSION_TAB(L_X);
                                     L_NEXT_EXISTING_MT_MENODE := L_SVME_MENODE_TAB(L_X);
                                  END IF;
                                  EXIT;
                               END IF;
                            END IF;
                         END LOOP;

                         IF L_NEXT_EXISTING_MT IS NOT NULL THEN
                            MANIPULATESVME(L_NEXT_EXISTING_PP, L_NEXT_EXISTING_PP_PGNODE,
                                           L_NEXT_EXISTING_PR, L_NEXT_EXISTING_PR_PANODE,
                                           L_NEXT_EXISTING_MT, L_NEXT_EXISTING_MT_MENODE,
                                           L_FIRST, L_LAST, 'BEFORE', L_BUF_A_SC(L_SC_SEQ_NO));                   
                         ELSE
                            MANIPULATESVME('', '', '', '', '', '',  L_FIRST, L_LAST, 'APPEND', L_BUF_A_SC(L_SC_SEQ_NO));
                         END IF;
                      END IF;
      L_STEP := 'mt9';             
                   END IF;             
               END IF;
               L_MTLS_INDEX := L_MTLS_INDEX + 1;

            END LOOP;

            IF L_TRACE THEN
               TRACE('SaveScMethod array');
               FOR L_X IN 1..L_SVME_NR_OF_ROWS LOOP
                  TRACE('Row '||L_X||'#pg='||L_SVME_PG_TAB(L_X)||'#pgnode='||L_SVME_PGNODE_TAB(L_X)||
                                       '#pa='||L_SVME_PA_TAB(L_X)||'#panode='||L_SVME_PANODE_TAB(L_X)||
                                       '#me='||L_SVME_ME_TAB(L_X)||'#menode='||L_SVME_MENODE_TAB(L_X)||
                                       '#mt_version='||L_SVME_MT_VERSION_TAB(L_X)||
                                       '#mod_flag='||L_SVME_MODIFY_FLAG_TAB(L_X));
               END LOOP;
            END IF;
      L_STEP := 'mt10';             

            
            
            
            
            L_ANYME_CREATION := FALSE;
            FOR L_SEQ_NO IN 1..L_SVME_NR_OF_ROWS LOOP

               IF L_SVME_MODIFY_FLAG_TAB(L_SEQ_NO) = UNAPIGEN.DBERR_SUCCESS THEN
                  
                  NULL;
               ELSE


                  L_ANYME_CREATION := TRUE;
                  L_INME_NR_OF_ROWS := NULL;
                  L_RET_CODE := UNAPIME.INITSCMETHOD(L_SVME_ME_TAB(L_SEQ_NO), L_SVME_MT_VERSION_TAB(L_SEQ_NO), NULL,
                                   L_SVME_SC_TAB(L_SEQ_NO),L_SVME_PG_TAB(L_SEQ_NO),
                                   L_SVME_PGNODE_TAB(L_SEQ_NO), L_SVME_PA_TAB(L_SEQ_NO), L_SVME_PANODE_TAB(L_SEQ_NO), 
                                   L_SVME_PR_VERSION_TAB(L_SEQ_NO), 1,
                                   L_INME_REANALYSIS_TAB, L_INME_MT_VERSION_TAB, L_INME_DESCRIPTION_TAB, 
                                   L_INME_VALUE_F_TAB, L_INME_VALUE_S_TAB,
                                   L_INME_UNIT_TAB, L_INME_EXEC_START_DATE_TAB, L_INME_EXEC_END_DATE_TAB,
                                   L_INME_EXECUTOR_TAB, L_INME_LAB_TAB, L_INME_EQ_TAB, L_INME_EQ_VERSION_TAB, 
                                   L_INME_PLANNED_EXECUTOR_TAB, L_INME_PLANNED_EQ_TAB, 
                                   L_INME_PLANNED_EQ_VERSION_TAB, L_INME_MANUALLY_ENTERED_TAB, L_INME_ALLOW_ADD_TAB,
                                   L_INME_ASSIGN_DATE_TAB, L_INME_ASSIGNED_BY_TAB, L_INME_MANUALLY_ADDED_TAB,
                                   L_INME_DELAY_TAB, L_INME_DELAY_UNIT_TAB, L_INME_FORMAT_TAB, 
                                   L_INME_ACCURACY_TAB, L_INME_REAL_COST_TAB, L_INME_REAL_TIME_TAB,
                                   L_INME_CALIBRATION_TAB, L_INME_CONFIRM_COMPLETE_TAB, 
                                   L_INME_AUTORECALC_TAB, L_INME_ME_RESULT_EDITABLE_TAB, 
                                   L_INME_NEXT_CELL_TAB, L_INME_SOP_TAB, L_INME_SOP_VERSION_TAB, L_INME_PLAUS_LOW_TAB, L_INME_PLAUS_HIGH_TAB,
                                   L_INME_WINSIZE_X_TAB, L_INME_WINSIZE_Y_TAB, 
                                   L_INME_ME_CLASS_TAB, L_INME_LOG_HS_TAB, L_INME_LOG_HS_DETAILS_TAB,
                                   L_INME_LC_TAB, L_INME_LC_VERSION_TAB, L_INME_NR_OF_ROWS);

                  IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
                     UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
                     L_SQLERRM  := 'mt=' || L_SVME_ME_TAB(L_SEQ_NO) || '#seq=' || TO_CHAR(-1) ||
                                   '#mt_version=' || L_SVME_MT_VERSION_TAB(L_SEQ_NO) || 
                                   '#sc=' || L_SVME_SC_TAB(L_SEQ_NO) || 
                                   '#pg=' || L_SVME_PG_TAB(L_SEQ_NO) || 
                                   '#pgnode=' || TO_CHAR(L_SVME_PGNODE_TAB(L_SEQ_NO)) || 
                                   '#pa=' || L_SVME_PA_TAB(L_SEQ_NO) || 
                                   '#panode=' || TO_CHAR(L_SVME_PANODE_TAB(L_SEQ_NO)) || 
                                   '#nr_of_rows=' || L_INPA_NR_OF_ROWS ||
                                   '#InitScMethod#ErrorCode=' || TO_CHAR(L_RET_CODE); 
                     TRACE(L_SQLERRM);
                     RAISE STPERROR;
                  END IF;
                  
                  L_SVME_DESCRIPTION_TAB(L_SEQ_NO)              := L_INME_DESCRIPTION_TAB(1) ;
                  L_SVME_VALUE_F_TAB(L_SEQ_NO)                  := L_INME_VALUE_F_TAB(1);
                  L_SVME_VALUE_S_TAB(L_SEQ_NO)                  := L_INME_VALUE_S_TAB(1);
                  L_SVME_UNIT_TAB(L_SEQ_NO)                     := L_INME_UNIT_TAB(1);
                  L_SVME_EXEC_START_DATE_TAB(L_SEQ_NO)          := L_INME_EXEC_START_DATE_TAB(1);
                  L_SVME_EXEC_END_DATE_TAB(L_SEQ_NO)            := L_INME_EXEC_END_DATE_TAB(1);
                  L_SVME_EXECUTOR_TAB(L_SEQ_NO)                 := L_INME_EXECUTOR_TAB(1);
                  L_SVME_LAB_TAB(L_SEQ_NO)                      := L_INME_LAB_TAB(1);
                  L_SVME_EQ_TAB(L_SEQ_NO)                       := L_INME_EQ_TAB(1);
                  L_SVME_EQ_VERSION_TAB(L_SEQ_NO)               := L_INME_EQ_VERSION_TAB(1);
                  L_SVME_PLANNED_EXECUTOR_TAB(L_SEQ_NO)         := L_INME_PLANNED_EXECUTOR_TAB(1);
                  L_SVME_PLANNED_EQ_TAB(L_SEQ_NO)               := L_INME_PLANNED_EQ_TAB(1);
                  L_SVME_PLANNED_EQ_VERSION_TAB(L_SEQ_NO)               := L_INME_PLANNED_EQ_VERSION_TAB(1);
                  L_SVME_MANUALLY_ENTERED_TAB(L_SEQ_NO)         := L_INME_MANUALLY_ENTERED_TAB(1);
                  L_SVME_ALLOW_ADD_TAB(L_SEQ_NO)                := L_INME_ALLOW_ADD_TAB(1);
                  L_SVME_ASSIGN_DATE_TAB(L_SEQ_NO)              := L_INME_ASSIGN_DATE_TAB(1);
                  L_SVME_ASSIGNED_BY_TAB(L_SEQ_NO)              := L_INME_ASSIGNED_BY_TAB(1);
                  L_SVME_MANUALLY_ADDED_TAB(L_SEQ_NO)           := '1';
                  L_SVME_DELAY_TAB(L_SEQ_NO)                    := L_INME_DELAY_TAB(1);
                  L_SVME_DELAY_UNIT_TAB(L_SEQ_NO)               := L_INME_DELAY_UNIT_TAB(1);
                  L_SVME_FORMAT_TAB(L_SEQ_NO)                   := L_INME_FORMAT_TAB(1);
                  L_SVME_ACCURACY_TAB(L_SEQ_NO)                 := L_INME_ACCURACY_TAB(1);
                  L_SVME_REAL_COST_TAB(L_SEQ_NO)                := L_INME_REAL_COST_TAB(1);
                  L_SVME_REAL_TIME_TAB(L_SEQ_NO)                := L_INME_REAL_TIME_TAB(1);
                  L_SVME_CALIBRATION_TAB(L_SEQ_NO)              := L_INME_CALIBRATION_TAB(1);
                  L_SVME_CONFIRM_COMPLETE_TAB(L_SEQ_NO)         := L_INME_CONFIRM_COMPLETE_TAB(1);
                  L_SVME_AUTORECALC_TAB(L_SEQ_NO)               := L_INME_AUTORECALC_TAB(1);
                  L_SVME_ME_RESULT_EDITABLE_TAB(L_SEQ_NO)       := L_INME_ME_RESULT_EDITABLE_TAB(1);
                  L_SVME_NEXT_CELL_TAB(L_SEQ_NO)                := L_INME_NEXT_CELL_TAB(1);
                  L_SVME_SOP_TAB(L_SEQ_NO)                      := L_INME_SOP_TAB(1);
                  L_SVME_SOP_VERSION_TAB(L_SEQ_NO)              := L_INME_SOP_VERSION_TAB(1);
                  L_SVME_PLAUS_LOW_TAB(L_SEQ_NO)                := L_INME_PLAUS_LOW_TAB(1);
                  L_SVME_PLAUS_HIGH_TAB(L_SEQ_NO)               := L_INME_PLAUS_HIGH_TAB(1);
                  L_SVME_WINSIZE_X_TAB(L_SEQ_NO)                := L_INME_WINSIZE_X_TAB(1);
                  L_SVME_WINSIZE_Y_TAB(L_SEQ_NO)                := L_INME_WINSIZE_Y_TAB(1);
                  L_SVME_REANALYSIS_TAB(L_SEQ_NO)               := L_INME_REANALYSIS_TAB(1);
                  L_SVME_ME_CLASS_TAB(L_SEQ_NO)                 := L_INME_ME_CLASS_TAB(1);
                  L_SVME_LOG_HS_TAB(L_SEQ_NO)                   := L_INME_LOG_HS_TAB(1);
                  L_SVME_LOG_HS_DETAILS_TAB(L_SEQ_NO)           := L_INME_LOG_HS_DETAILS_TAB(1);
                  L_SVME_LC_TAB(L_SEQ_NO)                       := L_INME_LC_TAB(1);
                  L_SVME_LC_VERSION_TAB(L_SEQ_NO)               := L_INME_LC_VERSION_TAB(1);

               END IF;
            END LOOP;

            IF L_SVME_NR_OF_ROWS > 0 AND L_ANYME_CREATION THEN


               
               
               
               TRACE('attributes must be inherited when mod_flag=INSERT');
               FOR L_SEQ_NO IN 1..L_SVME_NR_OF_ROWS LOOP
                  IF L_SVME_MODIFY_FLAG_TAB(L_SEQ_NO) = UNAPIGEN.MOD_FLAG_INSERT THEN
                     L_SVME_MODIFY_FLAG_TAB(L_SEQ_NO) := UNAPIGEN.MOD_FLAG_INSERT_AND_CRAU;
                  END IF;               
               END LOOP;
               
               L_RET_CODE := UNAPIME.SAVESCMETHOD('0', L_SVME_SC_TAB, L_SVME_PG_TAB, L_SVME_PGNODE_TAB,
                                L_SVME_PA_TAB, L_SVME_PANODE_TAB, L_SVME_ME_TAB, L_SVME_MENODE_TAB, 
                                L_SVME_REANALYSIS_TAB, L_SVME_MT_VERSION_TAB,
                                L_SVME_DESCRIPTION_TAB, L_SVME_VALUE_F_TAB, L_SVME_VALUE_S_TAB,
                                L_SVME_UNIT_TAB, L_SVME_EXEC_START_DATE_TAB, L_SVME_EXEC_END_DATE_TAB,
                                L_SVME_EXECUTOR_TAB, L_SVME_LAB_TAB, L_SVME_EQ_TAB, L_SVME_EQ_VERSION_TAB, 
                                L_SVME_PLANNED_EXECUTOR_TAB, L_SVME_PLANNED_EQ_TAB, L_SVME_PLANNED_EQ_VERSION_TAB, 
                                L_SVME_MANUALLY_ENTERED_TAB, L_SVME_ALLOW_ADD_TAB,
                                L_SVME_ASSIGN_DATE_TAB, L_SVME_ASSIGNED_BY_TAB, L_SVME_MANUALLY_ADDED_TAB,
                                L_SVME_DELAY_TAB, L_SVME_DELAY_UNIT_TAB, L_SVME_FORMAT_TAB,
                                L_SVME_ACCURACY_TAB, L_SVME_REAL_COST_TAB,
                                L_SVME_REAL_TIME_TAB, L_SVME_CALIBRATION_TAB, L_SVME_CONFIRM_COMPLETE_TAB,
                                L_SVME_AUTORECALC_TAB, L_SVME_ME_RESULT_EDITABLE_TAB, 
                                L_SVME_NEXT_CELL_TAB, L_SVME_SOP_TAB, L_SVME_SOP_VERSION_TAB,
                                L_SVME_PLAUS_LOW_TAB, L_SVME_PLAUS_HIGH_TAB, L_SVME_WINSIZE_X_TAB,
                                L_SVME_WINSIZE_Y_TAB, L_SVME_ME_CLASS_TAB,
                                L_SVME_LOG_HS_TAB, L_SVME_LOG_HS_DETAILS_TAB, L_SVME_LC_TAB, 
                                L_SVME_LC_VERSION_TAB, L_SVME_MODIFY_FLAG_TAB,
                                L_SVME_NR_OF_ROWS, 'SaveFullTestPlan');

               IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
                  IF L_RET_CODE <> UNAPIGEN.DBERR_PARTIALSAVE THEN
                     IF L_RET_CODE = UNAPIGEN.DBERR_NOOBJID THEN
                        UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
                        FOR L_SEQ_NO IN 1..L_SVME_NR_OF_ROWS LOOP
                           IF  NVL(L_SVME_SC_TAB(L_SEQ_NO), ' ') = ' ' OR
                               NVL(L_SVME_PG_TAB(L_SEQ_NO), ' ') = ' ' OR
                               NVL(L_SVME_PGNODE_TAB(L_SEQ_NO), 0) = 0 OR
                               NVL(L_SVME_PA_TAB(L_SEQ_NO), ' ') = ' ' OR
                               NVL(L_SVME_PANODE_TAB(L_SEQ_NO), 0) = 0 OR
                               NVL(L_SVME_SC_TAB(L_SEQ_NO), ' ') = ' ' THEN
                               L_SQLERRM  := 'sc('||TO_CHAR(L_SEQ_NO)||')=' || L_SVME_SC_TAB(L_SEQ_NO) ||'#pg('||TO_CHAR(L_SEQ_NO)||')=' || L_SVME_PG_TAB(L_SEQ_NO) ||
                                             '#pgnode('||TO_CHAR(L_SEQ_NO)||')=' || L_SVME_PGNODE_TAB(L_SEQ_NO) ||
                                             '#pa('||TO_CHAR(L_SEQ_NO)||')=' || L_SVME_PA_TAB(L_SEQ_NO) ||
                                             '#panode('||TO_CHAR(L_SEQ_NO)||')=' || L_SVME_PANODE_TAB(L_SEQ_NO) ||
                                             '#me('||TO_CHAR(L_SEQ_NO)||')=' || L_SVME_ME_TAB(L_SEQ_NO) ||
                                             '#menode('||TO_CHAR(L_SEQ_NO)||')=' || L_SVME_MENODE_TAB(L_SEQ_NO) ||
                                             '#modify_flag('||TO_CHAR(L_SEQ_NO)||')=' || L_SVME_MODIFY_FLAG_TAB(L_SEQ_NO) ||
                                             '#nr_of_rows=' || L_SVME_NR_OF_ROWS ||
                                             '#SaveScMethod#ErrorCode=' || TO_CHAR(L_RET_CODE);
                              RAISE STPERROR;
                           END IF;
                        END LOOP;
                     ELSE
                        UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
                        L_SQLERRM  := 'sc(1)=' || L_SVME_SC_TAB(1) ||
                                      '#pg(1)=' || L_SVME_PG_TAB(1) || '#pgnode(1)=' || L_SVME_PGNODE_TAB(1) ||
                                      '#pa(1)=' || L_SVME_PA_TAB(1) || '#panode(1)=' || L_SVME_PANODE_TAB(1) ||
                                      '#me(1)=' || L_SVME_ME_TAB(1) || '#menode(1)=' || L_SVME_MENODE_TAB(1) ||
                                      '#mt_version(1)=' || L_SVME_MT_VERSION_TAB(1)  ||
                                      '#nr_of_rows=' || L_SVME_NR_OF_ROWS ||
                                      '#SaveScMethod#ErrorCode=' || TO_CHAR(L_RET_CODE); 
                     END IF;
                     TRACE(L_SQLERRM);
                     RAISE STPERROR;
                  ELSE
                     TRACE('Partial save is nomore a fatal error in SaveFullTestPlan !');
                     UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SUCCESS;
                     FOR L_SEQ_NO IN 1..L_SVME_NR_OF_ROWS LOOP
                        
                        IF L_SVME_MODIFY_FLAG_TAB(L_SEQ_NO)>UNAPIGEN.DBERR_SUCCESS THEN
                           L_SQLERRM  := 'sc('||TO_CHAR(L_SEQ_NO)||')=' || L_SVME_SC_TAB(L_SEQ_NO) ||'#pg('||TO_CHAR(L_SEQ_NO)||')=' || L_SVME_PG_TAB(L_SEQ_NO) ||
                                         '#pgnode('||TO_CHAR(L_SEQ_NO)||')=' || L_SVME_PGNODE_TAB(L_SEQ_NO) ||
                                         '#pa('||TO_CHAR(L_SEQ_NO)||')=' || L_SVME_PA_TAB(L_SEQ_NO) ||
                                         '#panode('||TO_CHAR(L_SEQ_NO)||')=' || L_SVME_PANODE_TAB(L_SEQ_NO) ||
                                         '#me('||TO_CHAR(L_SEQ_NO)||')=' || L_SVME_ME_TAB(L_SEQ_NO) ||
                                         '#menode('||TO_CHAR(L_SEQ_NO)||')=' || L_SVME_MENODE_TAB(L_SEQ_NO) ||
                                         '#modify_flag('||TO_CHAR(L_SEQ_NO)||')=' || L_SVME_MODIFY_FLAG_TAB(L_SEQ_NO) ||
                                         '#mt_version(1)=' || L_SVME_MT_VERSION_TAB(1)  ||
                                         '#nr_of_rows=' || L_SVME_NR_OF_ROWS ||
                                         '#SaveScMethod#ErrorCode=' || TO_CHAR(L_RET_CODE)||
                                         '#auth='||UNAPIAUT.P_NOT_AUTHORISED; 
                           TRACE(L_SQLERRM);
                           
                        END IF;
                     END LOOP;
                  END IF;
               END IF;
            END IF;
         END IF;

      EXCEPTION
      WHEN OTHERS THEN
         IF SQLCODE <> 1 THEN
            UNAPIGEN.LOGERROR('SaveFullTestPlan', SQLERRM);
         ELSIF L_SQLERRM IS NOT NULL THEN
            UNAPIGEN.LOGERROR('SaveFullTestPlan', L_SQLERRM);
         END IF;   
         
      END;

      IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
         RAISE STPERROR;
      END IF;
         
   END LOOP;   

   
   P_SAVEFTP_PG := L_TEMP_PP;
   P_SAVEFTP_PP_VERSION := L_TEMP_PP_VERSION;
   P_SAVEFTP_PP_KEY1 := L_TEMP_PP_KEY1;
   P_SAVEFTP_PP_KEY2 := L_TEMP_PP_KEY2;
   P_SAVEFTP_PP_KEY3 := L_TEMP_PP_KEY3;
   P_SAVEFTP_PP_KEY4 := L_TEMP_PP_KEY4;
   P_SAVEFTP_PP_KEY5 := L_TEMP_PP_KEY5;
   P_SAVEFTP_PGNODE := L_TEMP_PGNODE;
   P_SAVEFTP_PA := L_TEMP_PR;
   P_SAVEFTP_PA_VERSION := L_TEMP_PR_VERSION;
   P_SAVEFTP_PANODE := L_TEMP_PANODE;
   
   
   IF NVL(A_NEXT_ROWS, 0) = -1 THEN
      
      P_SAVEFTP_CALLS := 0;
   END IF;

   
   
   
   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveFullTestPlan', SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('SaveFullTestPlan', L_SQLERRM);
   END IF;
   IF L_CHILDPP_CURSOR%ISOPEN THEN
      CLOSE L_CHILDPP_CURSOR;
   END IF;   
   IF L_STPP_CURSOR%ISOPEN THEN
      CLOSE L_STPP_CURSOR;
   END IF;
   IF L_SC_CURSOR%ISOPEN THEN
      CLOSE L_SC_CURSOR;
   END IF;
   L_TXN_ERROR := UNAPIGEN.P_TXN_ERROR;
   P_SAVEFTP_CALLS := 0;
   P_SAVEFTP_TR_SEQ := 0;
   UNAPIGEN.P_TXN_ERROR := L_TXN_ERROR;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveFullTestPlan'));
END INTSAVEFULLTESTPLAN;








FUNCTION SAVEFULLTESTPLAN                                   
(A_SC                    IN      UNAPIGEN.VC20_TABLE_TYPE,  
 A_SC_NR_OF_ROWS         IN      NUMBER,                    
 A_TST_TP                IN OUT  UNAPIGEN.VC20_TABLE_TYPE,  
 A_TST_ID                IN OUT  UNAPIGEN.VC20_TABLE_TYPE,  
 A_TST_ID_VERSION        IN OUT  UNAPIGEN.VC20_TABLE_TYPE,  
 A_PP_SEQ                IN OUT  UNAPIGEN.NUM_TABLE_TYPE,   
 A_PR_SEQ                IN OUT  UNAPIGEN.NUM_TABLE_TYPE,   
 A_MT_SEQ                IN OUT  UNAPIGEN.NUM_TABLE_TYPE,   
 A_PP_KEY1               IN OUT  UNAPIGEN.VC20_TABLE_TYPE,  
 A_PP_KEY2               IN OUT  UNAPIGEN.VC20_TABLE_TYPE,  
 A_PP_KEY3               IN OUT  UNAPIGEN.VC20_TABLE_TYPE,  
 A_PP_KEY4               IN OUT  UNAPIGEN.VC20_TABLE_TYPE,  
 A_PP_KEY5               IN OUT  UNAPIGEN.VC20_TABLE_TYPE,  
 A_TST_NR_MEASUR         IN OUT  UNAPIGEN.NUM_TABLE_TYPE,   
 A_MODIFY_FLAG           IN OUT  UNAPIGEN.NUM_TABLE_TYPE,   
 A_NR_OF_ROWS            IN OUT  NUMBER,                    
 A_NEXT_ROWS             IN      NUMBER)                    
RETURN NUMBER IS
L_SC_SEQ_NO    INTEGER;
L_TRACE                            BOOLEAN;
L_CURRENT_TIMESTAMP              TIMESTAMP WITH TIME ZONE;
L_HS_DETAILS_SEQ_NR    INTEGER;


L_LC                   VARCHAR2(2);
L_LC_VERSION           VARCHAR2(20);
L_SS                   VARCHAR2(2);
L_LOG_HS               CHAR(1);
L_LOG_HS_DETAILS       CHAR(1);
L_ALLOW_MODIFY         CHAR(1);
L_ACTIVE               CHAR(1);
L_ST_VERSION           VARCHAR2(20);
 
  PROCEDURE TRACE(A_TRACE_TXT IN VARCHAR2) IS
    BEGIN
       IF L_TRACE THEN
          DBMS_OUTPUT.PUT_LINE(A_TRACE_TXT);
          INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
          VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
                 'SaveFullTestPlan', A_TRACE_TXT);
          UNAPIGEN.U4COMMIT;
       END IF;
    END TRACE;


BEGIN
  
   IF P_DEBUG_AFTP IS NULL THEN
      OPEN C_SYSTEM ('DEBUG_AFTP');
      FETCH C_SYSTEM INTO P_DEBUG_AFTP;
      IF C_SYSTEM%NOTFOUND THEN
         P_DEBUG_AFTP := 'NO';
      END IF;
      CLOSE C_SYSTEM;
   END IF;
   IF P_DEBUG_AFTP = 'YES' THEN
      L_TRACE := TRUE;
   ELSE
      L_TRACE := FALSE;
   END IF;
 
   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   
   

   L_SQLERRM := NULL;
   
   IF NVL(A_NEXT_ROWS, 0) = 0 THEN
      IF NVL(P_EXT_SAVEFTP_CALLS, 0) <> 0 THEN
         L_SQLERRM := 'SaveFullTestPlan termination call never called for previous call ! (a_next_rows=-1)';
         RAISE STPERROR;
      END IF;
      P_EXT_SAVEFTP_CALLS := 1;
      P_EXT_TST_NR_OF_ROWS := 0;
   ELSIF NVL(A_NEXT_ROWS, 0) = -1 THEN
      TRACE('P_EXT_SAVEFTP_CALLS ' || P_EXT_SAVEFTP_CALLS);
      P_EXT_SAVEFTP_CALLS := NVL(P_EXT_SAVEFTP_CALLS, 0) + 1;      
   ELSIF NVL(A_NEXT_ROWS, 0) = 1 THEN
      IF NVL(P_EXT_SAVEFTP_CALLS, 0) = 0 THEN   
         L_SQLERRM := 'SaveFullTestPlan startup call never called ! (a_next_rows=0)';
         RAISE STPERROR;   
      END IF;




      P_EXT_SAVEFTP_CALLS := NVL(P_EXT_SAVEFTP_CALLS, 0) + 1;      
   ELSE
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NEXTROWS;
      RAISE STPERROR;
   END IF;         

   
   
   
   
   
   
   
   
  TRACE('Start SaveFullTestPlan'); 
   IF P_EXT_SAVEFTP_CALLS = 1 THEN
      P_EXT_BUF_A_SC_NR_OF_ROWS := 0;
      P_EXT_TST_NR_OF_ROWS := 0;
   END IF;
   IF A_SC_NR_OF_ROWS > 0 THEN
      FOR L_SC_SEQ_NO IN 1..A_SC_NR_OF_ROWS LOOP           
         IF NVL(A_SC(L_SC_SEQ_NO), ' ') = ' ' THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
            RAISE STPERROR;
         END IF;
         
         
         
         
         P_EXT_BUF_A_SC(P_EXT_BUF_A_SC_NR_OF_ROWS + L_SC_SEQ_NO) := A_SC(L_SC_SEQ_NO); 
      END LOOP;
      P_EXT_BUF_A_SC_NR_OF_ROWS := P_EXT_BUF_A_SC_NR_OF_ROWS + A_SC_NR_OF_ROWS;
      
   END IF;
  
   
   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP           
      IF NVL(A_TST_TP(L_SEQ_NO), ' ') = ' ' OR
         NVL(A_TST_ID(L_SEQ_NO), ' ') = ' ' THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
      END IF;      
      
      IF NVL(A_MODIFY_FLAG(L_SEQ_NO), 1) NOT IN (UNAPIGEN.DBERR_SUCCESS,
                                                 UNAPIGEN.MOD_FLAG_INSERT,
                                                 UNAPIGEN.MOD_FLAG_CREATE) THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INVALMODFLAG;
         RAISE STPERROR;         
      END IF;
   END LOOP;
 TRACE('Filling up  buffers');  
   
   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP           
      P_EXT_TST_NR_OF_ROWS := P_EXT_TST_NR_OF_ROWS + 1;
      P_EXT_TST_TP(P_EXT_TST_NR_OF_ROWS) := A_TST_TP(L_SEQ_NO);
      P_EXT_TST_ID(P_EXT_TST_NR_OF_ROWS) := A_TST_ID(L_SEQ_NO);
      P_EXT_TST_ID_VERSION(P_EXT_TST_NR_OF_ROWS) := A_TST_ID_VERSION(L_SEQ_NO);
      P_EXT_PP_SEQ(P_EXT_TST_NR_OF_ROWS) := A_PP_SEQ(L_SEQ_NO);
      P_EXT_PR_SEQ(P_EXT_TST_NR_OF_ROWS) := A_PR_SEQ(L_SEQ_NO);
      P_EXT_MT_SEQ(P_EXT_TST_NR_OF_ROWS) := A_MT_SEQ(L_SEQ_NO);
      P_EXT_PP_KEY1(P_EXT_TST_NR_OF_ROWS) := A_PP_KEY1(L_SEQ_NO);
      P_EXT_PP_KEY2(P_EXT_TST_NR_OF_ROWS) := A_PP_KEY2(L_SEQ_NO);
      P_EXT_PP_KEY3(P_EXT_TST_NR_OF_ROWS) := A_PP_KEY3(L_SEQ_NO);
      P_EXT_PP_KEY4(P_EXT_TST_NR_OF_ROWS) := A_PP_KEY4(L_SEQ_NO);
      P_EXT_PP_KEY5(P_EXT_TST_NR_OF_ROWS) := A_PP_KEY5(L_SEQ_NO);
      P_EXT_TST_NR_MEASUR(P_EXT_TST_NR_OF_ROWS) := A_TST_NR_MEASUR(L_SEQ_NO);
      P_EXT_MODIFY_FLAG(P_EXT_TST_NR_OF_ROWS) := A_MODIFY_FLAG(L_SEQ_NO);
      
   END LOOP;
   
   
   IF A_NEXT_ROWS = -1 THEN
      TRACE('before first call of IntSaveFullTestPlan');
      
      L_RET_CODE := INTSAVEFULLTESTPLAN(P_EXT_BUF_A_SC, P_EXT_BUF_A_SC_NR_OF_ROWS, 
                                        P_EXT_TST_TP, P_EXT_TST_ID, P_EXT_TST_ID_VERSION,
                                        P_EXT_PP_SEQ, P_EXT_PR_SEQ, P_EXT_MT_SEQ,
                                        P_EXT_PP_KEY1, P_EXT_PP_KEY2,P_EXT_PP_KEY3,P_EXT_PP_KEY4,P_EXT_PP_KEY5,
                                        P_EXT_TST_NR_MEASUR, P_EXT_MODIFY_FLAG, P_EXT_TST_NR_OF_ROWS, 0);
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
         RAISE STPERROR;
      END IF;
      
      
      L_CURRENT_TIMESTAMP := CURRENT_TIMESTAMP;
      L_HS_DETAILS_SEQ_NR := 0;
      FOR L_REC IN 1..P_EXT_BUF_A_SC_NR_OF_ROWS LOOP
         FOR L_REC2 IN 1..P_EXT_TST_NR_OF_ROWS LOOP
            
            
            
            IF P_EXT_MODIFY_FLAG(L_REC2) IN (UNAPIGEN.MOD_FLAG_INSERT, UNAPIGEN.MOD_FLAG_CREATE) THEN
               L_ST_VERSION := NULL;
               L_RET_CODE := UNAPIAUT.GETSCAUTHORISATION(P_EXT_BUF_A_SC(L_REC), L_ST_VERSION, L_LC, L_LC_VERSION, L_SS,
                                                         L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS, L_LOG_HS_DETAILS);
               IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
                  UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
                  RAISE STPERROR;
               END IF;

               L_EV_SEQ_NR := -1;
               L_EV_DETAILS := 'st_version=' || L_ST_VERSION;
               L_EVENT_TP := 'ScTestPlanAdded';
               L_RESULT := UNAPIEV.INSERTEVENT('SaveFullTestPlan', UNAPIGEN.P_EVMGR_NAME, 'sc', P_EXT_BUF_A_SC(L_REC), L_LC, 
                                               L_LC_VERSION, L_SS, L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);
               IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
                  UNAPIGEN.P_TXN_ERROR := L_RESULT;
                  RAISE STPERROR;
               END IF;

               IF NVL(L_LOG_HS, ' ') = '1' THEN
                  INSERT INTO UTSCHS(SC, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
                  VALUES(P_EXT_BUF_A_SC(L_REC), UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                         'testplan is added to sample "'||P_EXT_BUF_A_SC(L_REC)||'".', 
                         L_CURRENT_TIMESTAMP, L_CURRENT_TIMESTAMP, NULL, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
               END IF;

               IF NVL(L_LOG_HS_DETAILS, ' ') = '1' THEN
                     L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
                     INSERT INTO UTSCHSDETAILS(SC, TR_SEQ, EV_SEQ, SEQ, DETAILS)
                     VALUES(P_EXT_BUF_A_SC(L_REC), UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR, 
                            'testplan is added to sample "'||P_EXT_BUF_A_SC(L_REC)||'".');
               END IF;
               
               EXIT;
            END IF;
         END LOOP;
      END LOOP;
      
      
      P_EXT_TST_NR_OF_ROWS := 0;
      P_EXT_BUF_A_SC_NR_OF_ROWS := 0;
      TRACE('before second call of IntSaveFullTestPlan');
      L_RET_CODE := INTSAVEFULLTESTPLAN(P_EXT_BUF_A_SC, P_EXT_BUF_A_SC_NR_OF_ROWS, 
                                        P_EXT_TST_TP, P_EXT_TST_ID, P_EXT_TST_ID_VERSION,
                                        P_EXT_PP_SEQ, P_EXT_PR_SEQ, P_EXT_MT_SEQ,
                                        P_EXT_PP_KEY1, P_EXT_PP_KEY2,P_EXT_PP_KEY3,P_EXT_PP_KEY4,P_EXT_PP_KEY5,
                                        P_EXT_TST_NR_MEASUR, P_EXT_MODIFY_FLAG, P_EXT_TST_NR_OF_ROWS, -1);
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
         RAISE STPERROR;
      END IF;
                                                                                  
   END IF;
      
   
   IF NVL(A_NEXT_ROWS, 0) = -1 THEN
      
      P_EXT_SAVEFTP_CALLS := 0;
   END IF;

   
   
   

   
   
   
   
   
   
   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      IF A_MODIFY_FLAG(L_SEQ_NO) < UNAPIGEN.DBERR_SUCCESS THEN
         A_MODIFY_FLAG(L_SEQ_NO) := UNAPIGEN.DBERR_SUCCESS;
      END IF;
   END LOOP;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.LOGERROR('SaveFullTestPlan', L_SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('SaveFullTestPlan', L_SQLERRM); 
   END IF;   
   P_EXT_SAVEFTP_CALLS := 0;
   P_EXT_BUF_A_SC_NR_OF_ROWS := 0;
   P_EXT_TST_NR_OF_ROWS := 0;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveFullTestPlan'));
END SAVEFULLTESTPLAN;

END UNAPIPG2;
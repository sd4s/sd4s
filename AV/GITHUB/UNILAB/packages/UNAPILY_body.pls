PACKAGE BODY unapily AS

L_SQLERRM         VARCHAR2(255);
L_SQL_STRING      VARCHAR2(2000);
L_WHERE_CLAUSE    VARCHAR2(1000);
L_EVENT_TP        UTEV.EV_TP%TYPE;
L_RET_CODE        NUMBER;
L_RESULT          NUMBER;
L_FETCHED_ROWS    NUMBER;
L_EV_SEQ_NR       NUMBER;
STPERROR          EXCEPTION;


P_LY_CURSOR          INTEGER;
P_LY_DET_CURSOR      INTEGER;

FUNCTION GETVERSION
   RETURN VARCHAR2
IS
BEGIN
   RETURN('06.07.00.00_00.13');
EXCEPTION
   WHEN OTHERS THEN
      RETURN (NULL);
END GETVERSION;

FUNCTION GETLAYOUTLIST
(A_LY_TP         IN       VARCHAR2,                 
 A_LY            OUT      UNAPIGEN.VC20_TABLE_TYPE, 
 A_NR_OF_ROWS    IN OUT   NUMBER,                   
 A_NEXT_ROWS     IN       NUMBER)                   
RETURN NUMBER IS

L_LY    VARCHAR2(20);

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   IF NVL(A_LY_TP, ' ') = ' '  THEN
      RETURN(UNAPIGEN.DBERR_NOOBJTP);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_LY_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_LY_CURSOR);
         P_LY_CURSOR := NULL;
      END IF;
      RETURN(UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_LY_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      IF P_LY_CURSOR IS NULL THEN
         P_LY_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;

      L_SQL_STRING := 'SELECT DISTINCT ly FROM dd' || UNAPIGEN.P_DD
                      || '.uvly ' || 'WHERE ly_tp = :a_ly_tp ORDER BY 1';

      DBMS_SQL.PARSE(P_LY_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      DBMS_SQL.BIND_VARIABLE(P_LY_CURSOR, ':a_ly_tp', A_LY_TP);
      DBMS_SQL.DEFINE_COLUMN(P_LY_CURSOR, 1, L_LY, 20);
      L_RESULT := DBMS_SQL.EXECUTE(P_LY_CURSOR);
   END IF;

   L_RESULT := DBMS_SQL.FETCH_ROWS(P_LY_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_LY_CURSOR, 1, L_LY);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_LY(L_FETCHED_ROWS) := L_LY;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_LY_CURSOR);
      END IF;
   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_LY_CURSOR);
       P_LY_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_LY_CURSOR);
      P_LY_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
            'GetLayoutList', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN(P_LY_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(P_LY_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETLAYOUTLIST;

FUNCTION GETLAYOUT
(A_LY_TP            OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_LY               OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_COL_ID           OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_COL_TP           OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_COL_LEN          OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_DISP_TITLE       OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_DISP_STYLE       OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_DISP_TP          OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_DISP_WIDTH       OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_DISP_FORMAT      OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_COL_ORDER        OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_COL_ASC          OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_NR_OF_ROWS       IN OUT NUMBER,                      
 A_WHERE_CLAUSE     IN     VARCHAR2,                    
 A_NEXT_ROWS        IN     NUMBER)                      
RETURN NUMBER IS

L_LY_TP             VARCHAR2(20);
L_LY                VARCHAR2(20);
L_COL_ID            VARCHAR2(40);
L_COL_TP            VARCHAR2(40);
L_COL_LEN           NUMBER(3);
L_DISP_TITLE        VARCHAR2(40);
L_DISP_STYLE        NUMBER(6);
L_DISP_TP           NUMBER(6);
L_DISP_WIDTH        NUMBER(3);
L_DISP_FORMAT       VARCHAR2(40);
L_COL_ORDER         NUMBER(3);
L_COL_ASC           CHAR(1);

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;
   
   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_LY_DET_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_LY_DET_CURSOR);
         P_LY_DET_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_LY_DET_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
         L_WHERE_CLAUSE := ' ORDER BY ly_tp, ly, seq'; 
      ELSE
         L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
      END IF;

      P_LY_DET_CURSOR := DBMS_SQL.OPEN_CURSOR;

      L_SQL_STRING := 'SELECT ly_tp, ly, col_id, col_tp, col_len, disp_title, '||
                      'disp_style, disp_tp, disp_width, disp_format, col_order, '||
                      'col_asc FROM dd' || UNAPIGEN.P_DD || '.uvly '||
                      L_WHERE_CLAUSE;
      DBMS_SQL.PARSE(P_LY_DET_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

      DBMS_SQL.DEFINE_COLUMN(P_LY_DET_CURSOR, 1, L_LY_TP, 20);
      DBMS_SQL.DEFINE_COLUMN(P_LY_DET_CURSOR, 2, L_LY, 20);
      DBMS_SQL.DEFINE_COLUMN(P_LY_DET_CURSOR, 3, L_COL_ID, 40);
      DBMS_SQL.DEFINE_COLUMN(P_LY_DET_CURSOR, 4, L_COL_TP, 40);
      DBMS_SQL.DEFINE_COLUMN(P_LY_DET_CURSOR, 5, L_COL_LEN);
      DBMS_SQL.DEFINE_COLUMN(P_LY_DET_CURSOR, 6, L_DISP_TITLE, 40);
      DBMS_SQL.DEFINE_COLUMN(P_LY_DET_CURSOR, 7, L_DISP_STYLE);
      DBMS_SQL.DEFINE_COLUMN(P_LY_DET_CURSOR, 8, L_DISP_TP);
      DBMS_SQL.DEFINE_COLUMN(P_LY_DET_CURSOR, 9, L_DISP_WIDTH);
      DBMS_SQL.DEFINE_COLUMN(P_LY_DET_CURSOR, 10, L_DISP_FORMAT, 40);
      DBMS_SQL.DEFINE_COLUMN(P_LY_DET_CURSOR, 11, L_COL_ORDER);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_LY_DET_CURSOR, 12, L_COL_ASC, 1);
      L_RESULT := DBMS_SQL.EXECUTE(P_LY_DET_CURSOR);
   END IF;
   L_RESULT := DBMS_SQL.FETCH_ROWS(P_LY_DET_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_LY_DET_CURSOR, 1, L_LY_TP);
      DBMS_SQL.COLUMN_VALUE(P_LY_DET_CURSOR, 2, L_LY);
      DBMS_SQL.COLUMN_VALUE(P_LY_DET_CURSOR, 3, L_COL_ID);
      DBMS_SQL.COLUMN_VALUE(P_LY_DET_CURSOR, 4, L_COL_TP);
      DBMS_SQL.COLUMN_VALUE(P_LY_DET_CURSOR, 5, L_COL_LEN);
      DBMS_SQL.COLUMN_VALUE(P_LY_DET_CURSOR, 6, L_DISP_TITLE);
      DBMS_SQL.COLUMN_VALUE(P_LY_DET_CURSOR, 7, L_DISP_STYLE);
      DBMS_SQL.COLUMN_VALUE(P_LY_DET_CURSOR, 8, L_DISP_TP);
      DBMS_SQL.COLUMN_VALUE(P_LY_DET_CURSOR, 9, L_DISP_WIDTH);
      DBMS_SQL.COLUMN_VALUE(P_LY_DET_CURSOR, 10, L_DISP_FORMAT);
      DBMS_SQL.COLUMN_VALUE(P_LY_DET_CURSOR, 11, L_COL_ORDER);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_LY_DET_CURSOR, 12, L_COL_ASC);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_LY_TP(L_FETCHED_ROWS) := L_LY_TP;
      A_LY(L_FETCHED_ROWS) := L_LY;
      A_COL_ID(L_FETCHED_ROWS) := L_COL_ID;
      A_COL_TP(L_FETCHED_ROWS) := L_COL_TP;
      A_COL_LEN(L_FETCHED_ROWS) := L_COL_LEN;
      A_DISP_TITLE(L_FETCHED_ROWS) := L_DISP_TITLE;
      A_DISP_STYLE(L_FETCHED_ROWS) := L_DISP_STYLE;
      A_DISP_TP(L_FETCHED_ROWS) := L_DISP_TP;
      A_DISP_WIDTH(L_FETCHED_ROWS) := L_DISP_WIDTH;
      A_DISP_FORMAT(L_FETCHED_ROWS) := L_DISP_FORMAT;
      A_COL_ORDER(L_FETCHED_ROWS) := L_COL_ORDER;
      A_COL_ASC(L_FETCHED_ROWS) := L_COL_ASC;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_LY_DET_CURSOR);
      END IF;
   END LOOP;

   IF L_FETCHED_ROWS = 0 THEN
      DBMS_SQL.CLOSE_CURSOR(P_LY_DET_CURSOR);
      P_LY_DET_CURSOR := NULL;
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_LY_DET_CURSOR);
      P_LY_DET_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   ELSE
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;
   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
            'GetLayout', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN(P_LY_DET_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(P_LY_DET_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETLAYOUT;

FUNCTION GETLAYOUT
(A_LY_TP            OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_LY               OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_COL_ID           OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_COL_TP           OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_COL_LEN          OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_DISP_TITLE       OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_DISP_STYLE       OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_DISP_TP          OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_DISP_WIDTH       OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_DISP_FORMAT      OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_COL_ORDER        OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_COL_ASC          OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_NR_OF_ROWS       IN OUT NUMBER,                      
 A_WHERE_CLAUSE     IN     VARCHAR2)                    
RETURN NUMBER IS

L_LY_TP                UNAPIGEN.VC20_TABLE_TYPE;
L_LY                   UNAPIGEN.VC20_TABLE_TYPE;
L_COL_ID               UNAPIGEN.VC40_TABLE_TYPE;
L_COL_TP               UNAPIGEN.VC40_TABLE_TYPE;
L_COL_LEN              UNAPIGEN.NUM_TABLE_TYPE;
L_DISP_TITLE           UNAPIGEN.VC40_TABLE_TYPE;
L_DISP_STYLE           UNAPIGEN.NUM_TABLE_TYPE;
L_DISP_TP              UNAPIGEN.NUM_TABLE_TYPE;
L_DISP_WIDTH           UNAPIGEN.NUM_TABLE_TYPE;
L_DISP_FORMAT          UNAPIGEN.VC40_TABLE_TYPE;
L_COL_ORDER            UNAPIGEN.NUM_TABLE_TYPE;
L_COL_ASC              UNAPIGEN.CHAR1_TABLE_TYPE;

BEGIN

   L_RET_CODE := GETLAYOUT(A_LY_TP,
                           A_LY,
                           A_COL_ID,
                           A_COL_TP,
                           A_COL_LEN,
                           A_DISP_TITLE,
                           A_DISP_STYLE,
                           A_DISP_TP,
                           A_DISP_WIDTH,
                           A_DISP_FORMAT,
                           A_COL_ORDER,
                           A_COL_ASC,
                           A_NR_OF_ROWS,
                           A_WHERE_CLAUSE,
                           0);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      RETURN(L_RET_CODE);
   END IF;
   
   L_RET_CODE := GETLAYOUT(L_LY_TP,
                           L_LY,
                           L_COL_ID,
                           L_COL_TP,
                           L_COL_LEN,
                           L_DISP_TITLE,
                           L_DISP_STYLE,
                           L_DISP_TP,
                           L_DISP_WIDTH,
                           L_DISP_FORMAT,
                           L_COL_ORDER,
                           L_COL_ASC,
                           A_NR_OF_ROWS,
                           A_WHERE_CLAUSE,
                           -1);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      RETURN(L_RET_CODE);
   END IF;
   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN OTHERS THEN
   L_SQLERRM := SQLERRM;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
         'GetLayout', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   IF DBMS_SQL.IS_OPEN(P_LY_DET_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(P_LY_DET_CURSOR);
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETLAYOUT;

FUNCTION SAVELAYOUT
(A_LY_TP            IN    VARCHAR2,                    
 A_LY               IN    VARCHAR2,                    
 A_COL_ID           IN    UNAPIGEN.VC40_TABLE_TYPE,    
 A_COL_TP           IN    UNAPIGEN.VC40_TABLE_TYPE,    
 A_COL_LEN          IN    UNAPIGEN.NUM_TABLE_TYPE,     
 A_DISP_TITLE       IN    UNAPIGEN.VC40_TABLE_TYPE,    
 A_DISP_STYLE       IN    UNAPIGEN.NUM_TABLE_TYPE,     
 A_DISP_TP          IN    UNAPIGEN.NUM_TABLE_TYPE,     
 A_DISP_WIDTH       IN    UNAPIGEN.NUM_TABLE_TYPE,     
 A_DISP_FORMAT      IN    UNAPIGEN.VC40_TABLE_TYPE,    
 A_COL_ORDER        IN    UNAPIGEN.NUM_TABLE_TYPE,     
 A_COL_ASC          IN    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_NR_OF_ROWS       IN    NUMBER,                      
 A_MODIFY_REASON    IN    VARCHAR2)                    
RETURN NUMBER IS

L_EV_DETAILS      VARCHAR2(255);

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_EMPTYSAVE;
      RAISE STPERROR;
   END IF;
   
   IF NVL(A_LY_TP, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJTP;
      RAISE STPERROR;
   END IF;

   IF NVL(A_LY, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;


   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      
      
      
      
      

      IF NVL(A_COL_ASC(L_SEQ_NO), ' ') NOT IN ('A','D',' ') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_COLASC;
         RAISE STPERROR;
      END IF;
   END LOOP;

   DELETE FROM UTLY
   WHERE LY_TP = A_LY_TP
      AND LY = A_LY;

   IF SQL%ROWCOUNT > 0 THEN
      L_EVENT_TP := 'LayoutUpdated';
   ELSE
      L_EVENT_TP := 'LayoutCreated';
   END IF;

   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      INSERT INTO UTLY(LY_TP, LY, SEQ, COL_ID, COL_TP, COL_LEN, DISP_TITLE,
                       DISP_STYLE, DISP_TP, DISP_WIDTH, DISP_FORMAT,
                       COL_ORDER, COL_ASC)
      VALUES(A_LY_TP, A_LY, L_SEQ_NO, A_COL_ID(L_SEQ_NO), A_COL_TP(L_SEQ_NO),
             A_COL_LEN(L_SEQ_NO), A_DISP_TITLE(L_SEQ_NO), A_DISP_STYLE(L_SEQ_NO),
             A_DISP_TP(L_SEQ_NO), A_DISP_WIDTH(L_SEQ_NO), A_DISP_FORMAT(L_SEQ_NO),
             A_COL_ORDER(L_SEQ_NO), A_COL_ASC(L_SEQ_NO));
   END LOOP;

   L_EV_SEQ_NR := -1;
   L_EV_DETAILS := 'ly_tp='||A_LY_TP;
   L_RESULT := UNAPIEV.INSERTEVENT('SaveLayout', UNAPIGEN.P_EVMGR_NAME,
                                   'ly', A_LY, '', '', '', L_EVENT_TP, L_EV_DETAILS,
                                   L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE <> 1 THEN
         UNAPIGEN.LOGERROR('SaveLayout', SQLERRM);
      END IF;
      RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveLayout'));
END SAVELAYOUT;

FUNCTION DELETELAYOUT
(A_LY_TP         IN  VARCHAR2,          
 A_LY            IN  VARCHAR2,          
 A_MODIFY_REASON IN  VARCHAR2)          
RETURN NUMBER IS
L_EV_DETAILS      VARCHAR2(255);
BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_LY_TP, ' ')= ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJTP;
      RAISE STPERROR;
   END IF;

   IF NVL(A_LY, ' ')= ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   
   IF UNAPIGEN.ISSYSTEM21CFR11COMPLIANT = UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTALLOWEDIN21CFR11;
      RAISE STPERROR;
   END IF;

   DELETE FROM UTLY
   WHERE LY_TP = A_LY_TP
      AND LY = A_LY;

   L_EVENT_TP := 'ObjectDeleted';

   L_EV_SEQ_NR := -1;
   L_EV_DETAILS := 'ly_tp='||A_LY_TP;
   L_RESULT :=
      UNAPIEV.INSERTEVENT('DeleteLayout',UNAPIGEN.P_EVMGR_NAME,
                          'ly', A_LY, '', '', '', L_EVENT_TP, L_EV_DETAILS,
                          L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE <> 1 THEN
         UNAPIGEN.LOGERROR('DeleteLayout', SQLERRM);
      END IF;
      RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'DeleteLayout'));
END DELETELAYOUT;




BEGIN
   P_LY_CURSOR := NULL;
END UNAPILY;
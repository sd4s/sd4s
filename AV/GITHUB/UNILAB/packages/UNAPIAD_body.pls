PACKAGE BODY unapiad AS

L_SQLERRM         VARCHAR2(255);
L_SQL_STRING      VARCHAR2(2000);
L_WHERE_CLAUSE    VARCHAR2(1000);
L_EVENT_TP        UTEV.EV_TP%TYPE;
L_RET_CODE        NUMBER;
L_RESULT          NUMBER;
L_FETCHED_ROWS    NUMBER;
L_EV_SEQ_NR       NUMBER;


P_AD_CURSOR       INTEGER;

STPERROR          EXCEPTION;

FUNCTION GETVERSION
   RETURN VARCHAR2
IS
BEGIN
   RETURN('06.07.00.00_00.13');
EXCEPTION
   WHEN OTHERS THEN
      RETURN (NULL);
END GETVERSION;
   
FUNCTION GETADDRESSLIST
(A_AD               OUT      UNAPIGEN.VC20_TABLE_TYPE,  
 A_PERSON           OUT      UNAPIGEN.VC40_TABLE_TYPE,  
 A_SS               OUT      UNAPIGEN.VC2_TABLE_TYPE,   
 A_NR_OF_ROWS       IN OUT   NUMBER,                    
 A_WHERE_CLAUSE     IN       VARCHAR2,                  
 A_NEXT_ROWS        IN       NUMBER)                    
RETURN NUMBER IS

L_AD           VARCHAR2(20);
L_PERSON       VARCHAR2(40);
L_SS           VARCHAR2(2);

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_AD_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_AD_CURSOR);
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_AD_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      IF P_AD_CURSOR IS NULL THEN
         
         P_AD_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;
      
      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
         L_WHERE_CLAUSE := 'WHERE active = ''1'' ORDER BY ad, version';
      ELSIF
         UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
         L_WHERE_CLAUSE := 'WHERE version_is_current = ''1'' '||
                           'AND ad = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') ||  
                           ''' ORDER BY ad, version';
      ELSE
         L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
      END IF;

      
      L_SQL_STRING := 'SELECT ad, person, ss FROM dd' || UNAPIGEN.P_DD ||
                      '.uvad ' || L_WHERE_CLAUSE;

      DBMS_SQL.PARSE(P_AD_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

      
      DBMS_SQL.DEFINE_COLUMN(P_AD_CURSOR, 1, L_AD, 20);
      DBMS_SQL.DEFINE_COLUMN(P_AD_CURSOR, 2, L_PERSON, 40);
      DBMS_SQL.DEFINE_COLUMN(P_AD_CURSOR, 3, L_SS, 2);

      L_RESULT := DBMS_SQL.EXECUTE(P_AD_CURSOR);

   END IF;

   L_RESULT := DBMS_SQL.FETCH_ROWS(P_AD_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;
      DBMS_SQL.COLUMN_VALUE(P_AD_CURSOR, 1, L_AD);
      DBMS_SQL.COLUMN_VALUE(P_AD_CURSOR, 2, L_PERSON);
      DBMS_SQL.COLUMN_VALUE(P_AD_CURSOR, 3, L_SS);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_AD(L_FETCHED_ROWS) := L_AD;
      A_PERSON(L_FETCHED_ROWS) := L_PERSON;
      A_SS(L_FETCHED_ROWS) := L_SS;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_AD_CURSOR);
      END IF;
   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
      DBMS_SQL.CLOSE_CURSOR(P_AD_CURSOR);
      RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_AD_CURSOR);
      A_NR_OF_ROWS  := L_FETCHED_ROWS;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetAddressList', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (P_AD_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (P_AD_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETADDRESSLIST;

FUNCTION GETADDRESS
(A_AD                  OUT     UNAPIGEN.VC20_TABLE_TYPE,    
 A_IS_TEMPLATE         OUT     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_IS_USER             OUT     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_STRUCT_CREATED      OUT     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_AD_TP               OUT     UNAPIGEN.VC20_TABLE_TYPE,    
 A_PERSON              OUT     UNAPIGEN.VC40_TABLE_TYPE,    
 A_TITLE               OUT     UNAPIGEN.VC20_TABLE_TYPE,    
 A_FUNCTION_NAME       OUT     UNAPIGEN.VC20_TABLE_TYPE,    
 A_DEF_UP              OUT     UNAPIGEN.LONG_TABLE_TYPE,    
 A_COMPANY             OUT     UNAPIGEN.VC40_TABLE_TYPE,    
 A_STREET              OUT     UNAPIGEN.VC40_TABLE_TYPE,    
 A_CITY                OUT     UNAPIGEN.VC40_TABLE_TYPE,    
 A_STATE               OUT     UNAPIGEN.VC40_TABLE_TYPE,    
 A_COUNTRY             OUT     UNAPIGEN.VC40_TABLE_TYPE,    
 A_AD_NR               OUT     UNAPIGEN.VC20_TABLE_TYPE,    
 A_PO_BOX              OUT     UNAPIGEN.VC20_TABLE_TYPE,    
 A_ZIP_CODE            OUT     UNAPIGEN.VC20_TABLE_TYPE,    
 A_PHONE_NR            OUT     UNAPIGEN.VC20_TABLE_TYPE,    
 A_EXT_NR              OUT     UNAPIGEN.VC20_TABLE_TYPE,    
 A_FAX_NR              OUT     UNAPIGEN.VC20_TABLE_TYPE,    
 A_EMAIL               OUT     UNAPIGEN.VC255_TABLE_TYPE,   
 A_AD_CLASS            OUT     UNAPIGEN.VC2_TABLE_TYPE,     
 A_LOG_HS              OUT     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_ALLOW_MODIFY        OUT     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_ACTIVE              OUT     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_LC                  OUT     UNAPIGEN.VC2_TABLE_TYPE,     
 A_SS                  OUT     UNAPIGEN.VC2_TABLE_TYPE,     
 A_NR_OF_ROWS          IN OUT  NUMBER,                      
 A_WHERE_CLAUSE        IN      VARCHAR2)                    
RETURN NUMBER IS
L_IDENTIFICATION_TYPE     UNAPIGEN.VC20_TABLE_TYPE;
L_IDENTIFIED_BY_STRING    UNAPIGEN.VC511_TABLE_TYPE;
BEGIN
   RETURN(UNAPIAD.GETADDRESS(A_AD, A_IS_TEMPLATE, A_IS_USER, 
                             L_IDENTIFICATION_TYPE, L_IDENTIFIED_BY_STRING,
                             A_STRUCT_CREATED, A_AD_TP, A_PERSON, A_TITLE, A_FUNCTION_NAME,
                             A_DEF_UP, A_COMPANY, A_STREET, A_CITY, A_STATE,
                             A_COUNTRY, A_AD_NR, A_PO_BOX, A_ZIP_CODE, A_PHONE_NR,
                             A_EXT_NR, A_FAX_NR, A_EMAIL, A_AD_CLASS, A_LOG_HS,
                             A_ALLOW_MODIFY, A_ACTIVE, A_LC, A_SS, A_NR_OF_ROWS, A_WHERE_CLAUSE));
END GETADDRESS;

FUNCTION GETADDRESS
(A_AD                      OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_IS_TEMPLATE             OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_IS_USER                 OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_IDENTIFICATION_TYPE     OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_IDENTIFIED_BY_STRING    OUT     UNAPIGEN.VC511_TABLE_TYPE, 
 A_STRUCT_CREATED          OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_AD_TP                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PERSON                  OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_TITLE                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_FUNCTION_NAME           OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_DEF_UP                  OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_COMPANY                 OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_STREET                  OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_CITY                    OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_STATE                   OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_COUNTRY                 OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_AD_NR                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PO_BOX                  OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_ZIP_CODE                OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PHONE_NR                OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_EXT_NR                  OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_FAX_NR                  OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_EMAIL                   OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_AD_CLASS                OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_LOG_HS                  OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ALLOW_MODIFY            OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ACTIVE                  OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LC                      OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_SS                      OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_NR_OF_ROWS              IN OUT  NUMBER,                    
 A_WHERE_CLAUSE            IN      VARCHAR2)                  
RETURN NUMBER IS

L_AD              VARCHAR2(20);
L_IS_TEMPLATE     CHAR(1);
L_IS_USER         CHAR(1);
L_STRUCT_CREATED  CHAR(1);
L_AD_TP           VARCHAR(20);
L_PERSON          VARCHAR2(40);
L_TITLE           VARCHAR2(20);
L_FUNCTION_NAME   VARCHAR2(20);
L_DEF_UP          NUMBER(5);
L_COMPANY         VARCHAR2(40);
L_STREET          VARCHAR2(40);
L_CITY            VARCHAR2(40);
L_STATE           VARCHAR2(40);
L_COUNTRY         VARCHAR2(40);
L_AD_NR           VARCHAR2(20);
L_PO_BOX          VARCHAR2(20);
L_ZIP_CODE        VARCHAR2(20);
L_PHONE_NR        VARCHAR2(20);
L_EXT_NR          VARCHAR2(20);
L_FAX_NR          VARCHAR2(20);
L_EMAIL           VARCHAR2(255);
L_AD_CLASS        VARCHAR2(2);
L_LOG_HS          CHAR(1);
L_ALLOW_MODIFY    CHAR(1);
L_ACTIVE          CHAR(1);
L_LC              VARCHAR2(2);
L_SS              VARCHAR2(2);
L_AD_CURSOR       INTEGER;
L_PWD_HASHED      VARCHAR2(30);

L_COUNT_OBJECTS   INTEGER;
L_COUNT_ROLES     INTEGER;

CURSOR L_STRUC_CURSOR(A_US VARCHAR2) IS
   SELECT COUNT(*) USER_OBJECTS
   FROM DBA_SYNONYMS
   WHERE OWNER =A_US
   AND SYNONYM_NAME LIKE 'UV%';

CURSOR L_ROLES_CURSOR(A_US VARCHAR2) IS
   SELECT COUNT(*) ROLES_GRANTED
   FROM DBA_ROLE_PRIVS
   WHERE GRANTEE = A_US
   AND GRANTED_ROLE IN ('URAPI','UR1','UR2','UR3','UR4','UR5','UR6','UR7','UR8','UR9',
   'UR10','UR11','UR12','UR13','UR14','UR15','UR16','UR17','UR18','UR19','UR20','UR21',
   'UR22','UR23','UR24','UR25','UR26','UR27','UR28','UR29','UR30','UR31','UR32','UR33',
   'UR34','UR35','UR36','UR37','UR38','UR39','UR40','UR41','UR42','UR43','UR44','UR45',
   'UR46','UR47','UR48','UR49','UR50','UR51','UR52','UR53','UR54','UR55','UR56','UR57',
   'UR58','UR59','UR60','UR61','UR62','UR63','UR64','UR65','UR66','UR67','UR68','UR69',
   'UR70','UR71','UR72','UR73','UR74','UR75','UR76','UR77','UR78','UR79','UR80','UR81',
   'UR82','UR83','UR84','UR85','UR86','UR87','UR88','UR89','UR90','UR91','UR92','UR93',
   'UR94','UR95','UR96','UR97','UR98','UR99','UR100','UR101','UR102','UR103','UR104','UR105',
   'UR106','UR107','UR108','UR109','UR110','UR111','UR112','UR113','UR114','UR115','UR116',
   'UR117','UR118','UR119','UR120','UR121','UR122','UR123','UR124','UR125','UR126','UR127','UR128');
   
BEGIN
   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'WHERE active = ''1'' ORDER BY ad, version'; 
   ELSIF
      UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := 'WHERE version_is_current = ''1'' '||
                        'AND ad = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                        ''' ORDER BY ad, version'; 
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_AD_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT ad, is_template, is_user, struct_created, ad_tp, ' ||
                   'person, title, function_name, def_up, company, street, ' ||
                   'city, state, country, ad_nr, po_box, zip_code, phone_nr, ' ||
                   'ext_nr, fax_nr, email, ad_class, log_hs, allow_modify, ' ||
                   'active, lc, ss FROM dd' ||
                    UNAPIGEN.P_DD || '.uvad ' || L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_AD_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_AD_CURSOR, 1, L_AD, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_AD_CURSOR, 2, L_IS_TEMPLATE, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_AD_CURSOR, 3, L_IS_USER, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_AD_CURSOR, 4, L_STRUCT_CREATED, 1);
   DBMS_SQL.DEFINE_COLUMN(L_AD_CURSOR, 5, L_AD_TP, 20);
   DBMS_SQL.DEFINE_COLUMN(L_AD_CURSOR, 6, L_PERSON, 40);
   DBMS_SQL.DEFINE_COLUMN(L_AD_CURSOR, 7, L_TITLE, 20);
   DBMS_SQL.DEFINE_COLUMN(L_AD_CURSOR, 8, L_FUNCTION_NAME, 20);
   DBMS_SQL.DEFINE_COLUMN(L_AD_CURSOR, 9, L_DEF_UP);
   DBMS_SQL.DEFINE_COLUMN(L_AD_CURSOR, 10, L_COMPANY, 40);
   DBMS_SQL.DEFINE_COLUMN(L_AD_CURSOR, 11, L_STREET, 40);
   DBMS_SQL.DEFINE_COLUMN(L_AD_CURSOR, 12, L_CITY, 40);
   DBMS_SQL.DEFINE_COLUMN(L_AD_CURSOR, 13, L_STATE, 40);
   DBMS_SQL.DEFINE_COLUMN(L_AD_CURSOR, 14, L_COUNTRY, 40);
   DBMS_SQL.DEFINE_COLUMN(L_AD_CURSOR, 15, L_AD_NR, 20);
   DBMS_SQL.DEFINE_COLUMN(L_AD_CURSOR, 16, L_PO_BOX, 20);
   DBMS_SQL.DEFINE_COLUMN(L_AD_CURSOR, 17, L_ZIP_CODE, 20);
   DBMS_SQL.DEFINE_COLUMN(L_AD_CURSOR, 18, L_PHONE_NR, 20);
   DBMS_SQL.DEFINE_COLUMN(L_AD_CURSOR, 19, L_EXT_NR, 20);
   DBMS_SQL.DEFINE_COLUMN(L_AD_CURSOR, 20, L_FAX_NR, 20);
   DBMS_SQL.DEFINE_COLUMN(L_AD_CURSOR, 21, L_EMAIL, 255);
   DBMS_SQL.DEFINE_COLUMN(L_AD_CURSOR, 22, L_AD_CLASS, 2);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_AD_CURSOR,23, L_LOG_HS, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_AD_CURSOR,24, L_ALLOW_MODIFY, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_AD_CURSOR,25, L_ACTIVE, 1);
   DBMS_SQL.DEFINE_COLUMN(L_AD_CURSOR, 26, L_LC, 2);
   DBMS_SQL.DEFINE_COLUMN(L_AD_CURSOR, 27, L_SS, 2);

   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_AD_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_AD_CURSOR, 1, L_AD);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_AD_CURSOR, 2, L_IS_TEMPLATE);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_AD_CURSOR, 3, L_IS_USER);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_AD_CURSOR, 4, L_STRUCT_CREATED);
      DBMS_SQL.COLUMN_VALUE(L_AD_CURSOR, 5, L_AD_TP);
      DBMS_SQL.COLUMN_VALUE(L_AD_CURSOR, 6, L_PERSON);
      DBMS_SQL.COLUMN_VALUE(L_AD_CURSOR, 7, L_TITLE);
      DBMS_SQL.COLUMN_VALUE(L_AD_CURSOR, 8, L_FUNCTION_NAME);
      DBMS_SQL.COLUMN_VALUE(L_AD_CURSOR, 9, L_DEF_UP);
      DBMS_SQL.COLUMN_VALUE(L_AD_CURSOR, 10, L_COMPANY);
      DBMS_SQL.COLUMN_VALUE(L_AD_CURSOR, 11, L_STREET);
      DBMS_SQL.COLUMN_VALUE(L_AD_CURSOR, 12, L_CITY);
      DBMS_SQL.COLUMN_VALUE(L_AD_CURSOR, 13, L_STATE);
      DBMS_SQL.COLUMN_VALUE(L_AD_CURSOR, 14, L_COUNTRY);
      DBMS_SQL.COLUMN_VALUE(L_AD_CURSOR, 15, L_AD_NR);
      DBMS_SQL.COLUMN_VALUE(L_AD_CURSOR, 16, L_PO_BOX);
      DBMS_SQL.COLUMN_VALUE(L_AD_CURSOR, 17, L_ZIP_CODE);
      DBMS_SQL.COLUMN_VALUE(L_AD_CURSOR, 18, L_PHONE_NR);
      DBMS_SQL.COLUMN_VALUE(L_AD_CURSOR, 19, L_EXT_NR);
      DBMS_SQL.COLUMN_VALUE(L_AD_CURSOR, 20, L_FAX_NR);
      DBMS_SQL.COLUMN_VALUE(L_AD_CURSOR, 21, L_EMAIL);
      DBMS_SQL.COLUMN_VALUE(L_AD_CURSOR, 22, L_AD_CLASS);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_AD_CURSOR, 23, L_LOG_HS);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_AD_CURSOR, 24, L_ALLOW_MODIFY);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_AD_CURSOR, 25, L_ACTIVE);
      DBMS_SQL.COLUMN_VALUE(L_AD_CURSOR, 26, L_LC);
      DBMS_SQL.COLUMN_VALUE(L_AD_CURSOR, 27, L_SS);

      
      
      
      
      IF L_AD <> UNAPIGEN.P_DBA_NAME THEN
         L_COUNT_OBJECTS := 0;
         OPEN L_STRUC_CURSOR(L_AD);
         FETCH L_STRUC_CURSOR
         INTO L_COUNT_OBJECTS;
         CLOSE L_STRUC_CURSOR;

         L_COUNT_ROLES := 0;
         OPEN L_ROLES_CURSOR(L_AD);
         FETCH L_ROLES_CURSOR
         INTO L_COUNT_ROLES;
         CLOSE L_ROLES_CURSOR;

         IF L_COUNT_OBJECTS > 0 AND
            L_COUNT_ROLES > 0 THEN
            L_STRUCT_CREATED := '1';
         ELSE
            L_STRUCT_CREATED := '0';
         END IF;
      ELSE
         L_STRUCT_CREATED := '1';
      END IF;

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_AD(L_FETCHED_ROWS)           := L_AD;
      A_IS_TEMPLATE(L_FETCHED_ROWS)  := L_IS_TEMPLATE;
      
      IF L_IS_USER = '2' THEN   
         A_IDENTIFICATION_TYPE(L_FETCHED_ROWS) := 'ENTERPRISE';
         A_IDENTIFIED_BY_STRING(L_FETCHED_ROWS) := '';
      ELSIF L_IS_USER = '1' THEN
         BEGIN
            SELECT PASSWORD, SUBSTR(EXTERNAL_NAME,1, 511)
            INTO L_PWD_HASHED, A_IDENTIFIED_BY_STRING(L_FETCHED_ROWS)
            FROM SYS.DBA_USERS
            WHERE USERNAME = L_AD;
         EXCEPTION
         WHEN OTHERS THEN
            A_IDENTIFICATION_TYPE(L_FETCHED_ROWS) := '';
            A_IDENTIFIED_BY_STRING(L_FETCHED_ROWS) := '';  
         END;
         IF L_PWD_HASHED IN ('EXTERNAL', 'GLOBAL') THEN
            A_IDENTIFICATION_TYPE(L_FETCHED_ROWS) := L_PWD_HASHED;
         ELSE
            A_IDENTIFICATION_TYPE(L_FETCHED_ROWS) := 'LOCALHASHED';
         END IF;         
      ELSE
         A_IDENTIFICATION_TYPE(L_FETCHED_ROWS) := '';
         A_IDENTIFIED_BY_STRING(L_FETCHED_ROWS) := '';
      END IF;
      
      
      IF L_IS_USER = '2' THEN
         L_IS_USER := '1';
      END IF;
      A_IS_USER(L_FETCHED_ROWS)      := L_IS_USER;
      A_STRUCT_CREATED(L_FETCHED_ROWS) := L_STRUCT_CREATED;
      A_AD_TP(L_FETCHED_ROWS)        := L_AD_TP;
      A_PERSON(L_FETCHED_ROWS)       := L_PERSON;
      A_TITLE (L_FETCHED_ROWS)       := L_TITLE;
      A_FUNCTION_NAME(L_FETCHED_ROWS):= L_FUNCTION_NAME;
      A_DEF_UP(L_FETCHED_ROWS)       := L_DEF_UP;
      A_COMPANY(L_FETCHED_ROWS)      := L_COMPANY;
      A_STREET(L_FETCHED_ROWS)       := L_STREET;
      A_CITY(L_FETCHED_ROWS)         := L_CITY;
      A_STATE(L_FETCHED_ROWS)        := L_STATE;
      A_COUNTRY(L_FETCHED_ROWS)      := L_COUNTRY;
      A_AD_NR(L_FETCHED_ROWS)        := L_AD_NR;
      A_PO_BOX(L_FETCHED_ROWS)       := L_PO_BOX;
      A_ZIP_CODE(L_FETCHED_ROWS)     := L_ZIP_CODE;
      A_PHONE_NR(L_FETCHED_ROWS)     := L_PHONE_NR;
      A_EXT_NR(L_FETCHED_ROWS)       := L_EXT_NR;
      A_FAX_NR(L_FETCHED_ROWS)       := L_FAX_NR;
      A_EMAIL(L_FETCHED_ROWS)        := L_EMAIL;
      A_AD_CLASS(L_FETCHED_ROWS)     := L_AD_CLASS;
      A_LOG_HS(L_FETCHED_ROWS)       := L_LOG_HS;
      A_ALLOW_MODIFY(L_FETCHED_ROWS) := L_ALLOW_MODIFY;
      A_ACTIVE(L_FETCHED_ROWS)       := L_ACTIVE;
      A_LC(L_FETCHED_ROWS)           := L_LC;
      A_SS(L_FETCHED_ROWS)           := L_SS;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_AD_CURSOR);
      END IF;

   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_AD_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   L_SQLERRM := SQLERRM;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
           'GetAddress', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   IF DBMS_SQL.IS_OPEN (L_AD_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_AD_CURSOR);
   END IF;
   IF L_STRUC_CURSOR%ISOPEN THEN
      CLOSE L_STRUC_CURSOR;
   END IF;
   IF L_ROLES_CURSOR%ISOPEN THEN
      CLOSE L_ROLES_CURSOR;
   END IF;      
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETADDRESS;

FUNCTION GETADDRESSTYPE
(A_AD_TP               OUT     UNAPIGEN.VC20_TABLE_TYPE,    
 A_NR_OF_ROWS          IN OUT  NUMBER,                      
 A_WHERE_CLAUSE        IN      VARCHAR2)                    
RETURN NUMBER IS

L_AD_TP           VARCHAR(20);
L_AD_CURSOR       INTEGER;

BEGIN
   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'WHERE ad_tp IS NOT NULL ORDER BY ad_tp'; 
   ELSIF
      UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := 'WHERE version_is_current = ''1'' ' ||
                        'AND ad = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                        ''' ORDER BY ad_tp'; 
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_AD_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT DISTINCT ad_tp FROM dd' ||
                    UNAPIGEN.P_DD || '.uvad ' || L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_AD_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_AD_CURSOR, 1, L_AD_TP, 20);

   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_AD_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_AD_CURSOR, 1, L_AD_TP);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_AD_TP(L_FETCHED_ROWS)        := L_AD_TP;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_AD_CURSOR);
      END IF;

   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_AD_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetAddressType', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (L_AD_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_AD_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETADDRESSTYPE;

FUNCTION DELETEADDRESS
(A_AD            IN  VARCHAR2,          
 A_MODIFY_REASON IN  VARCHAR2)          
RETURN NUMBER IS

A_VERSION      VARCHAR2(20);
L_ALLOW_MODIFY CHAR(1);
L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);
L_LOG_HS       CHAR(1);
L_ACTIVE       CHAR(1);
BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_AD, ' ')= ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('ad', A_AD, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   
   IF UNAPIGEN.ISSYSTEM21CFR11COMPLIANT = UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTALLOWEDIN21CFR11;
      RAISE STPERROR;
   END IF;

   DELETE FROM UTADAU
   WHERE VERSION = A_VERSION
     AND AD = A_AD;

   DELETE FROM UTADHS
   WHERE VERSION = A_VERSION
     AND AD = A_AD;

   DELETE FROM UTAD
   WHERE VERSION = A_VERSION
     AND AD = A_AD;

   L_EVENT_TP := 'ObjectDeleted';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT('DeleteAddress', UNAPIGEN.P_EVMGR_NAME, 'ad', A_AD, L_LC, 
                                   L_LC_VERSION, L_SS, L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);

   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE <> 1 THEN
        UNAPIGEN.LOGERROR('DeleteAddress', SQLERRM);
      END IF;
      RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'DeleteAddress'));
END DELETEADDRESS;

FUNCTION SAVEADDRESS
(A_AD                   IN     VARCHAR2,         
 A_IS_TEMPLATE          IN     CHAR,             
 A_IS_USER              IN     CHAR,             
 A_STRUCT_CREATED       IN     CHAR,             
 A_AD_TP                IN     VARCHAR2,         
 A_PERSON               IN     VARCHAR2,         
 A_TITLE                IN     VARCHAR2,         
 A_FUNCTION_NAME        IN     VARCHAR2,         
 A_DEF_UP               IN     NUMBER,           
 A_COMPANY              IN     VARCHAR2,         
 A_STREET               IN     VARCHAR2,         
 A_CITY                 IN     VARCHAR2,         
 A_STATE                IN     VARCHAR2,         
 A_COUNTRY              IN     VARCHAR2,         
 A_AD_NR                IN     VARCHAR2,         
 A_PO_BOX               IN     VARCHAR2,         
 A_ZIP_CODE             IN     VARCHAR2,         
 A_PHONE_NR             IN     VARCHAR2,         
 A_EXT_NR               IN     VARCHAR2,         
 A_FAX_NR               IN     VARCHAR2,         
 A_EMAIL                IN     VARCHAR2,         
 A_AD_CLASS             IN     VARCHAR2,         
 A_LOG_HS               IN     CHAR,             
 A_LC                   IN     VARCHAR2,         
 A_MODIFY_REASON        IN     VARCHAR2)         
RETURN NUMBER IS

A_VERSION                     VARCHAR2(20);
L_LC                          VARCHAR2(2);
L_LC_VERSION                  VARCHAR2(20);
L_SS                          VARCHAR2(2);
L_LOG_HS                      CHAR(1);
L_ALLOW_MODIFY                CHAR(1);
L_ACTIVE                      CHAR(1);
L_INSERT                      BOOLEAN;
L_NEW_DD_DETECTED             BOOLEAN;
L_ACTUAL_DEF_UP               NUMBER(5);
L_DEF_UP_VERSION              VARCHAR2(20);
L_USERNAME                    VARCHAR2(30);
L_USER_FOUND                  BOOLEAN;
L_NEW_DD                      VARCHAR2(3);
L_ACTUAL_DD                   VARCHAR2(3);
L_NR_CONNECTED                NUMBER;

CURSOR L_ACTUAL_DEF_UP_CURSOR(C_AD VARCHAR2, C_VERSION VARCHAR2) IS
   SELECT DEF_UP
   FROM UTAD
   WHERE VERSION = C_VERSION
     AND AD = C_AD;

CURSOR L_USER_CURSOR(C_US VARCHAR2) IS
   SELECT USERNAME
   FROM DBA_USERS
   WHERE USERNAME = C_US;
   
CURSOR L_DD_CURSOR(C_UP NUMBER) IS
   SELECT DD
   FROM UTUP
   WHERE VERSION_IS_CURRENT = '1'
     AND UP = C_UP;
   
CURSOR L_CONNECTED_CURSOR(C_AD VARCHAR2) IS
   SELECT COUNT(*)
   FROM V$SESSION
   WHERE TYPE='USER'
   AND USERNAME = C_AD;

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_AD, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_IS_TEMPLATE, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_TEMPLATE;
      RAISE STPERROR;
   END IF;

   IF NVL(A_LOG_HS, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_LOGHS;
      RAISE STPERROR;
   END IF;

   IF NVL(A_IS_USER, ' ') NOT IN ('2', '1','0') THEN  
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_ISUSER;
      RAISE STPERROR;
   END IF;

   IF NVL(A_STRUCT_CREATED, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_STRUCTCREATED;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('ad', A_AD, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE = UNAPIGEN.DBERR_NOOBJECT THEN
      L_INSERT := TRUE;
   ELSIF L_RET_CODE = UNAPIGEN.DBERR_SUCCESS THEN
      L_INSERT := FALSE;
   ELSE
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   L_NEW_DD_DETECTED := FALSE;
   IF L_INSERT THEN                   
      IF NVL(A_LC, ' ') <> ' ' THEN
         L_LC := A_LC;
      END IF;
      INSERT INTO UTAD (AD, VERSION, VERSION_IS_CURRENT, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ, EFFECTIVE_TILL, EFFECTIVE_TILL_TZ, 
         IS_TEMPLATE, IS_USER, 
                        STRUCT_CREATED, AD_TP, PERSON, TITLE, FUNCTION_NAME, DEF_UP, COMPANY, 
                        STREET, CITY, STATE, COUNTRY, AD_NR, PO_BOX, ZIP_CODE, PHONE_NR,
                        EXT_NR, FAX_NR, EMAIL, AD_CLASS, LOG_HS, LC, LC_VERSION, ALLOW_MODIFY, ACTIVE)
      VALUES (A_AD, A_VERSION, '1', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, NULL, A_IS_TEMPLATE, A_IS_USER, 
              A_STRUCT_CREATED, A_AD_TP, A_PERSON, A_TITLE, A_FUNCTION_NAME, A_DEF_UP, A_COMPANY, 
              A_STREET, A_CITY, A_STATE, A_COUNTRY, A_AD_NR, A_PO_BOX, A_ZIP_CODE, A_PHONE_NR,
              A_EXT_NR, A_FAX_NR, A_EMAIL, A_AD_CLASS, A_LOG_HS, L_LC, L_LC_VERSION, '#', '0');
      L_EVENT_TP := 'ObjectCreated';
   ELSE                                
      
      
      OPEN L_ACTUAL_DEF_UP_CURSOR(A_AD, A_VERSION);
      FETCH L_ACTUAL_DEF_UP_CURSOR
      INTO L_ACTUAL_DEF_UP;
      CLOSE L_ACTUAL_DEF_UP_CURSOR;
      
      OPEN L_DD_CURSOR(A_DEF_UP);
      FETCH L_DD_CURSOR
      INTO L_NEW_DD;
      CLOSE L_DD_CURSOR;
      
      OPEN L_DD_CURSOR(L_ACTUAL_DEF_UP);
      FETCH L_DD_CURSOR
      INTO L_ACTUAL_DD;
      CLOSE L_DD_CURSOR;
      
      IF L_ACTUAL_DEF_UP <> A_DEF_UP AND L_ACTUAL_DD <> L_NEW_DD THEN
         L_NEW_DD_DETECTED := TRUE;
      END IF;
      
      UPDATE UTAD
         SET IS_TEMPLATE    = A_IS_TEMPLATE,
             IS_USER        = A_IS_USER,
             STRUCT_CREATED = A_STRUCT_CREATED,
             AD_TP          = A_AD_TP,
             PERSON         = A_PERSON,
             TITLE          = A_TITLE,
             FUNCTION_NAME  = A_FUNCTION_NAME,
             DEF_UP         = A_DEF_UP,
             COMPANY        = A_COMPANY,
             STREET         = A_STREET,
             CITY           = A_CITY,
             STATE          = A_STATE,
             COUNTRY        = A_COUNTRY,
             AD_NR          = A_AD_NR,
             PO_BOX         = A_PO_BOX,
             ZIP_CODE       = A_ZIP_CODE,
             PHONE_NR       = A_PHONE_NR,
             EXT_NR         = A_EXT_NR,
             FAX_NR         = A_FAX_NR,
             EMAIL          = A_EMAIL,
             AD_CLASS       = A_AD_CLASS,
             LOG_HS         = A_LOG_HS,
             ALLOW_MODIFY   = '#'
         WHERE VERSION = A_VERSION
           AND AD = A_AD;
         L_EVENT_TP := 'ObjectUpdated';
   END IF;
   
   
   
   IF L_NEW_DD_DETECTED THEN
      
      OPEN L_CONNECTED_CURSOR(A_AD);
      FETCH L_CONNECTED_CURSOR INTO L_NR_CONNECTED;
      CLOSE L_CONNECTED_CURSOR;
      IF L_NR_CONNECTED > 0 THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_USCONNECTED;
         RAISE STPERROR;
      END IF;

      
      OPEN L_USER_CURSOR(A_AD);
      FETCH L_USER_CURSOR
      INTO L_USERNAME;
      L_USER_FOUND := L_USER_CURSOR%FOUND;
      CLOSE L_USER_CURSOR;
      IF L_USER_FOUND THEN
         L_RET_CODE := UNAPIUS.NEWDATADOMAIN(A_AD, A_DEF_UP);
         IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
            UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
            RAISE STPERROR;
         END IF;
      END IF;
   END IF;
   
   
   
   IF A_IS_USER IN ('1', '2') AND ( (TRUNC(NVL(A_DEF_UP, -1)) - NVL(A_DEF_UP, 0)) = 0 OR
                                  (NVL(A_DEF_UP, -1)) > 0 ) THEN
      BEGIN
         BEGIN
            SELECT VERSION
            INTO L_DEF_UP_VERSION
            FROM UTUP
            WHERE VERSION_IS_CURRENT = '1'
              AND UP = A_DEF_UP;
         EXCEPTION
         WHEN NO_DATA_FOUND THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOCURRENTUPVERSION;
            RAISE STPERROR;
         END;

         
         INSERT INTO UTUPUS(US, US_VERSION, UP, VERSION)
         VALUES(A_AD, A_VERSION, A_DEF_UP, L_DEF_UP_VERSION);
      EXCEPTION
      WHEN DUP_VAL_ON_INDEX THEN
         
         
         
         NULL;
      END;
   END IF;
   
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT('SaveAddress', UNAPIGEN.P_EVMGR_NAME, 'ad', A_AD, L_LC, 
                                   L_LC_VERSION, L_SS, L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF NVL(L_LOG_HS, ' ') <> A_LOG_HS THEN
      IF A_LOG_HS = '1' THEN
         INSERT INTO UTADHS(AD, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                            WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES(A_AD, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 'History switched ON', 
                'Audit trail is turned on.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      ELSE
         INSERT INTO UTADHS(AD, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                            WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES(A_AD, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 'History switched OFF', 
                'Audit trail is turned off.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   END IF;

   IF NVL(L_LOG_HS, ' ') = '1' THEN
      IF L_EVENT_TP = 'ObjectCreated' THEN
         INSERT INTO UTADHS(AD, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                            WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_AD, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'address "'||A_AD||'" is created.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      ELSE
         INSERT INTO UTADHS(AD, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                            WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_AD, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'address "'||A_AD||'" is updated.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   ELSE
      
      
      IF L_EVENT_TP = 'ObjectCreated' THEN
         INSERT INTO UTADHS(AD, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                            WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_AD, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'address "'||A_AD||'" is created.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;   
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
     UNAPIGEN.LOGERROR('SaveAddress', SQLERRM);
   END IF;
   IF L_ACTUAL_DEF_UP_CURSOR%ISOPEN THEN
      CLOSE L_ACTUAL_DEF_UP_CURSOR;
   END IF;
   IF L_DD_CURSOR%ISOPEN THEN
      CLOSE L_DD_CURSOR;
   END IF;
   IF L_CONNECTED_CURSOR%ISOPEN THEN
      CLOSE L_CONNECTED_CURSOR;
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveAddress'));
END SAVEADDRESS;




BEGIN
   P_AD_CURSOR := NULL;
END UNAPIAD;
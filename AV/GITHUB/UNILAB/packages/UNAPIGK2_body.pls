PACKAGE BODY unapigk2 AS

L_SQLERRM         VARCHAR2(255);
L_SQL_STRING      VARCHAR2(2000);
L_WHERE_CLAUSE    VARCHAR2(1000);
L_EVENT_TP        UTEV.EV_TP%TYPE;
L_RET_CODE        NUMBER;
L_RESULT          NUMBER;
L_FETCHED_ROWS    NUMBER;
L_EV_SEQ_NR       NUMBER;
STPERROR          EXCEPTION;

TABLE_DOES_NOT_EXIST EXCEPTION;
PRAGMA EXCEPTION_INIT (TABLE_DOES_NOT_EXIST, -942);


P_GK_CURSOR      INTEGER;

CURSOR L_TABLESPACE_CURSOR (L_TABLE_NAME VARCHAR2) IS
  SELECT TABLESPACE_NAME 
  FROM ALL_TABLES
  WHERE TABLE_NAME = L_TABLE_NAME
  AND OWNER = (SELECT SETTING_VALUE
               FROM UTSYSTEM 
               WHERE SETTING_NAME = 'DBA_NAME') ;

CURSOR L_INDEX_TABLESPACE_CURSOR (L_INDEX_NAME VARCHAR2) IS
  SELECT TABLESPACE_NAME 
  FROM ALL_INDEXES
  WHERE INDEX_NAME = L_INDEX_NAME
  AND OWNER = (SELECT SETTING_VALUE 
               FROM UTSYSTEM 
               WHERE SETTING_NAME = 'DBA_NAME') ;

FUNCTION GETVERSION
   RETURN VARCHAR2
IS
BEGIN
   RETURN('06.07.00.00_00.13');
EXCEPTION
   WHEN OTHERS THEN
      RETURN (NULL);
END GETVERSION;

FUNCTION GETGROUPKEYRTLIST                                 
(A_GK                  OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_DESCRIPTION         OUT     UNAPIGEN.VC40_TABLE_TYPE,   
 A_NR_OF_ROWS          IN OUT  NUMBER,                     
 A_WHERE_CLAUSE        IN      VARCHAR2,                   
 A_NEXT_ROWS           IN      NUMBER)                     
RETURN NUMBER IS

L_GK           VARCHAR2(20);
L_DESCRIPTION  VARCHAR2(40);

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_GK_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_GK_CURSOR);
         P_GK_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_GK_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
         L_WHERE_CLAUSE := 'ORDER BY gk, version'; 
      ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
         L_WHERE_CLAUSE := 'WHERE version_is_current = ''1'' '||
                           'AND gk = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                           ''' ORDER BY gk, version';
      ELSE
         L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
      END IF;

      IF P_GK_CURSOR IS NULL THEN
         P_GK_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;

      L_SQL_STRING:= 'SELECT gk, description FROM dd'||UNAPIGEN.P_DD||'.uvgkrt ' ||
                      L_WHERE_CLAUSE;
      DBMS_SQL.PARSE(P_GK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

      DBMS_SQL.DEFINE_COLUMN(P_GK_CURSOR, 1, L_GK, 20);
      DBMS_SQL.DEFINE_COLUMN(P_GK_CURSOR, 2, L_DESCRIPTION, 40);
      L_RESULT := DBMS_SQL.EXECUTE(P_GK_CURSOR);
   END IF;

   L_RESULT := DBMS_SQL.FETCH_ROWS(P_GK_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_GK_CURSOR, 1, L_GK);
      DBMS_SQL.COLUMN_VALUE(P_GK_CURSOR, 2, L_DESCRIPTION);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_GK(L_FETCHED_ROWS) := L_GK;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_GK_CURSOR);
      END IF;
   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_GK_CURSOR);
       P_GK_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   END IF;

   IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_GK_CURSOR);
      P_GK_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetGroupKeyRtList', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (P_GK_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (P_GK_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETGROUPKEYRTLIST;
 
FUNCTION GETGROUPKEYRT                                  
(A_GK               OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_DESCRIPTION      OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_IS_PROTECTED     OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_VALUE_UNIQUE     OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_SINGLE_VALUED    OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_NEW_VAL_ALLOWED  OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_MANDATORY        OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_STRUCT_CREATED   OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_INHERIT_GK       OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_VALUE_LIST_TP    OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_DEFAULT_VALUE    OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_DSP_ROWS         OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_VAL_LENGTH       OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_VAL_START        OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_ASSIGN_TP        OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_ASSIGN_ID        OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_Q_TP             OUT    UNAPIGEN.CHAR2_TABLE_TYPE,   
 A_Q_ID             OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_Q_CHECK_AU       OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_Q_AU             OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_NR_OF_ROWS       IN OUT NUMBER,                      
 A_WHERE_CLAUSE     IN     VARCHAR2)                    
RETURN NUMBER IS

L_GK                VARCHAR2(20);
L_DESCRIPTION       VARCHAR2(40);
L_IS_PROTECTED      CHAR(1);
L_VALUE_UNIQUE      CHAR(1);
L_SINGLE_VALUED     CHAR(1);
L_NEW_VAL_ALLOWED   CHAR(1);
L_MANDATORY         CHAR(1);
L_STRUCT_CREATED    CHAR(1);
L_INHERIT_GK        CHAR(1);
L_VALUE_LIST_TP     CHAR(1);
L_DEFAULT_VALUE     VARCHAR2(40);
L_DSP_ROWS          NUMBER(3);
L_VAL_LENGTH        NUMBER(3);
L_VAL_START         NUMBER(3);
L_ASSIGN_TP         CHAR(1);
L_ASSIGN_ID         VARCHAR2(20);
L_Q_TP              CHAR(2);
L_Q_ID              VARCHAR2(20);
L_Q_CHECK_AU        CHAR(1);
L_Q_AU              VARCHAR2(20);
L_GK_CURSOR         INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'ORDER BY gk, version'; 
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := 'WHERE version_is_current = ''1'' '||
                        'AND gk = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                        ''' ORDER BY gk, version';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_GK_CURSOR := DBMS_SQL.OPEN_CURSOR;

   L_SQL_STRING := 'SELECT gk, description, is_protected, value_unique, ' ||
                   'single_valued, new_val_allowed, mandatory, struct_created, inherit_gk,' ||
                   'value_list_tp, default_value, dsp_rows, val_length, val_start, ' ||
                   'assign_tp, assign_id, q_tp, q_id, q_check_au, q_au ' ||
                   'FROM dd' || UNAPIGEN.P_DD || '.uvgkrt ' || L_WHERE_CLAUSE;
   DBMS_SQL.PARSE(L_GK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 1, L_GK, 20);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 2, L_DESCRIPTION, 40);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 3, L_IS_PROTECTED, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 4, L_VALUE_UNIQUE, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 5, L_SINGLE_VALUED, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 6, L_NEW_VAL_ALLOWED, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 7, L_MANDATORY, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 8, L_STRUCT_CREATED, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 9, L_INHERIT_GK, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 10, L_VALUE_LIST_TP, 1);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 11, L_DEFAULT_VALUE, 40);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 12, L_DSP_ROWS);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 13, L_VAL_LENGTH);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 14, L_VAL_START);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 15, L_ASSIGN_TP, 1);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 16, L_ASSIGN_ID, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 17, L_Q_TP, 2);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 18, L_Q_ID, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 19, L_Q_CHECK_AU, 1);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 20, L_Q_AU, 20);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_GK_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 1, L_GK);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 2, L_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 3, L_IS_PROTECTED);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 4, L_VALUE_UNIQUE);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 5, L_SINGLE_VALUED);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 6, L_NEW_VAL_ALLOWED);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 7, L_MANDATORY);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 8, L_STRUCT_CREATED);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 9, L_INHERIT_GK);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 10, L_VALUE_LIST_TP);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 11, L_DEFAULT_VALUE);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 12, L_DSP_ROWS);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 13, L_VAL_LENGTH);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 14, L_VAL_START);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 15, L_ASSIGN_TP);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 16, L_ASSIGN_ID);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 17, L_Q_TP);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 18, L_Q_ID);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 19, L_Q_CHECK_AU);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 20, L_Q_AU);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_GK (L_FETCHED_ROWS) := L_GK;
      A_DESCRIPTION (L_FETCHED_ROWS) := L_DESCRIPTION;
      A_IS_PROTECTED (L_FETCHED_ROWS) := L_IS_PROTECTED;
      A_VALUE_UNIQUE (L_FETCHED_ROWS) := L_VALUE_UNIQUE;
      A_SINGLE_VALUED (L_FETCHED_ROWS) := L_SINGLE_VALUED;
      A_NEW_VAL_ALLOWED (L_FETCHED_ROWS) := L_NEW_VAL_ALLOWED;
      A_MANDATORY (L_FETCHED_ROWS) := L_MANDATORY;
      A_STRUCT_CREATED (L_FETCHED_ROWS) := L_STRUCT_CREATED;
      A_INHERIT_GK (L_FETCHED_ROWS) := L_INHERIT_GK;
      A_VALUE_LIST_TP (L_FETCHED_ROWS) := L_VALUE_LIST_TP;
      A_DEFAULT_VALUE (L_FETCHED_ROWS) := L_DEFAULT_VALUE;
      A_DSP_ROWS(L_FETCHED_ROWS) := L_DSP_ROWS;
      A_VAL_LENGTH(L_FETCHED_ROWS) := L_VAL_LENGTH;
      A_VAL_START(L_FETCHED_ROWS) := L_VAL_START;
      A_ASSIGN_TP(L_FETCHED_ROWS) := L_ASSIGN_TP;
      A_ASSIGN_ID(L_FETCHED_ROWS) := L_ASSIGN_ID;
      A_Q_TP(L_FETCHED_ROWS) := L_Q_TP;
      A_Q_ID(L_FETCHED_ROWS) := L_Q_ID;
      A_Q_CHECK_AU(L_FETCHED_ROWS) := L_Q_CHECK_AU;
      A_Q_AU(L_FETCHED_ROWS) := L_Q_AU;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_GK_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_GK_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetGroupKeyRt', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
     IF DBMS_SQL.IS_OPEN (L_GK_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_GK_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETGROUPKEYRT;

FUNCTION GETGROUPKEYRTVALUE                            
(A_GK               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_VALUE            OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_NR_OF_ROWS       IN OUT  NUMBER,                    
 A_WHERE_CLAUSE     IN      VARCHAR2)                  
RETURN NUMBER IS

L_GK              VARCHAR2(20);
L_VALUE           VARCHAR2(40);
L_GK_CURSOR       INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'ORDER BY list.gk, list.version, list.seq'; 
   ELSIF
      UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := ', dd'||UNAPIGEN.P_DD||'.uvgkrt rt WHERE rt.version_is_current = ''1'' '||
                        'AND list.version = rt.version '||
                        'AND list.gk = rt.gk '||
                        'AND list.gk = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                        ''' ORDER BY list.seq';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_GK_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT list.gk, list.value FROM dd'||UNAPIGEN.P_DD||'.uvgkrtlist list ' || L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_GK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 1, L_GK, 20);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 2, L_VALUE, 40);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_GK_CURSOR);

   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 1, L_GK);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 2, L_VALUE);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_GK(L_FETCHED_ROWS) := L_GK;
      A_VALUE(L_FETCHED_ROWS) := L_VALUE;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_GK_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_GK_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;
   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetGroupKeyRtValue', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (L_GK_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_GK_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETGROUPKEYRTVALUE;

FUNCTION GETGROUPKEYRTSQL                              
(A_GK              OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_SQLTEXT         OUT     UNAPIGEN.VC255_TABLE_TYPE,  
 A_NR_OF_ROWS      IN OUT  NUMBER,                     
 A_WHERE_CLAUSE    IN      VARCHAR2)                   
RETURN NUMBER IS

L_GK              VARCHAR2(20);
L_SQLTEXT         VARCHAR2(255);
L_GK_CURSOR       INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'ORDER BY sql.gk, sql.version, sql.seq'; 
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := ', dd'||UNAPIGEN.P_DD||'.uvgkrt rt WHERE rt.version_is_current = ''1'' '||
                        'AND sql.version = rt.version '||
                        'AND sql.gk = rt.gk '||
                        'AND sql.gk = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                        ''' ORDER BY sql.seq';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_GK_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT sql.gk, sql.sqltext FROM dd'||UNAPIGEN.P_DD||'.uvgkrtsql sql ' || L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_GK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 1, L_GK, 20);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 2, L_SQLTEXT, 255);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_GK_CURSOR);

   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 1, L_GK);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 2, L_SQLTEXT);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_GK(L_FETCHED_ROWS) := L_GK;
      A_SQLTEXT(L_FETCHED_ROWS) := L_SQLTEXT;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_GK_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_GK_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetGroupKeyRtSql', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (L_GK_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_GK_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETGROUPKEYRTSQL;

FUNCTION SAVEGROUPKEYRT                               
(A_GK               IN   VARCHAR2,                    
 A_DESCRIPTION      IN   VARCHAR2,                    
 A_IS_PROTECTED     IN   CHAR,                        
 A_VALUE_UNIQUE     IN   CHAR,                        
 A_SINGLE_VALUED    IN   CHAR,                        
 A_NEW_VAL_ALLOWED  IN   CHAR,                        
 A_MANDATORY        IN   CHAR,                        
 A_STRUCT_CREATED   IN   CHAR,                        
 A_INHERIT_GK       IN   CHAR,                        
 A_VALUE_LIST_TP    IN   CHAR,                        
 A_DEFAULT_VALUE    IN   VARCHAR2,                    
 A_DSP_ROWS         IN   NUMBER,                      
 A_VAL_LENGTH       IN   NUMBER,                      
 A_VAL_START        IN   NUMBER,                      
 A_ASSIGN_TP        IN   CHAR,                        
 A_ASSIGN_ID        IN   VARCHAR2,                    
 A_Q_TP             IN   CHAR,                        
 A_Q_ID             IN   VARCHAR2,                    
 A_Q_CHECK_AU       IN   CHAR,                        
 A_Q_AU             IN   VARCHAR2,                    
 A_VALUE            IN   UNAPIGEN.VC40_TABLE_TYPE,    
 A_SQLTEXT          IN   UNAPIGEN.VC255_TABLE_TYPE,   
 A_NR_OF_ROWS       IN   NUMBER,                      
 A_MODIFY_REASON    IN   VARCHAR2)                    
RETURN NUMBER IS

A_VERSION        VARCHAR2(20);
L_FOUND          BOOLEAN;
L_SEQ_NO         NUMBER;
L_GK             VARCHAR2(20);
L_STRUCT_CREATED CHAR(1);
L_LC             VARCHAR2(2);
L_LC_VERSION     VARCHAR2(20);
L_SS             VARCHAR2(2);
L_LOG_HS         CHAR(1);
L_ALLOW_MODIFY   CHAR(1);
L_ACTIVE         CHAR(1);
L_RULE_NR        NUMBER(5);

CURSOR L_GK_CURSOR IS
   SELECT GK 
   FROM UTGKRT
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_GK, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_IS_PROTECTED, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_PROTECTED;
      RAISE STPERROR;
   END IF;

   IF NVL(A_SINGLE_VALUED, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SINGLEVALUED;
      RAISE STPERROR;
   END IF;

   IF NVL(A_NEW_VAL_ALLOWED, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NEWVALALLOWED;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VALUE_UNIQUE, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UNIQUEGK;
      RAISE STPERROR;
   END IF;

   IF NVL(A_MANDATORY, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_MANDATORY;
      RAISE STPERROR;
   END IF;

   IF NVL(A_INHERIT_GK, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INHERITGK;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VALUE_LIST_TP, ' ') NOT IN ('F', 'Q') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_VALUELISTTP;
      RAISE STPERROR;
   END IF;

   IF NVL(A_ASSIGN_TP, ' ') = 'F' AND
      NVL(A_ASSIGN_ID, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   
   
   
   
   L_LC := '@L';
   L_SS := '@A';

   BEGIN
      SELECT VERSION
      INTO L_LC_VERSION
      FROM UTLC
      WHERE LC = '@L'
      AND VERSION_IS_CURRENT = '1';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOCURRENTLCVERSION;
      RAISE STPERROR;
   END;

   BEGIN
      SELECT ALLOW_MODIFY, ACTIVE
      INTO L_ALLOW_MODIFY, L_ACTIVE
      FROM UTSS
      WHERE SS = '@A';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR;
   END;
   
   BEGIN
      SELECT LOG_HS
      INTO L_LOG_HS
      FROM UTOBJECTS 
      WHERE OBJECT = 'gkrt';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      
      
      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OBJTP;
      RAISE STPERROR;
   END;
   

   OPEN L_GK_CURSOR;
   FETCH L_GK_CURSOR
   INTO L_GK;
   IF L_GK_CURSOR%FOUND THEN
      L_FOUND := TRUE;
   ELSE
      L_FOUND := FALSE;
   END IF;
   CLOSE L_GK_CURSOR;

   IF L_FOUND THEN
      DELETE FROM UTGKRT
      WHERE VERSION = A_VERSION
        AND GK = A_GK;

      DELETE FROM UTGKRTLIST
      WHERE VERSION = A_VERSION
        AND GK = A_GK;

      DELETE FROM UTGKRTSQL
      WHERE VERSION = A_VERSION
        AND GK = A_GK;
        
      L_EVENT_TP := 'GroupKeyUpdated';
   ELSE
      L_EVENT_TP := 'GroupKeyCreated';
   END IF;

   OPEN UNAPIGK.L_DBA_OBJECTS_CURSOR ('UTRTGK'||A_GK);
   FETCH UNAPIGK.L_DBA_OBJECTS_CURSOR INTO L_STRUCT_CREATED;
   CLOSE UNAPIGK.L_DBA_OBJECTS_CURSOR;
      
   INSERT INTO UTGKRT (GK, VERSION, VERSION_IS_CURRENT, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ, EFFECTIVE_TILL, EFFECTIVE_TILL_TZ, DESCRIPTION, 
                       IS_PROTECTED, VALUE_UNIQUE, SINGLE_VALUED, NEW_VAL_ALLOWED, MANDATORY,
                       STRUCT_CREATED, INHERIT_GK, VALUE_LIST_TP, DEFAULT_VALUE, DSP_ROWS, VAL_LENGTH, 
                       VAL_START, ASSIGN_TP, ASSIGN_ID, Q_TP, Q_ID, Q_CHECK_AU, Q_AU, 
                       LOG_HS, ALLOW_MODIFY, ACTIVE, LC, LC_VERSION, SS)
   VALUES (A_GK, A_VERSION, '1', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, NULL, A_DESCRIPTION, 
           A_IS_PROTECTED, A_VALUE_UNIQUE, A_SINGLE_VALUED, A_NEW_VAL_ALLOWED, A_MANDATORY, 
           L_STRUCT_CREATED, A_INHERIT_GK, A_VALUE_LIST_TP, A_DEFAULT_VALUE, A_DSP_ROWS, A_VAL_LENGTH, 
           A_VAL_START, A_ASSIGN_TP, A_ASSIGN_ID, A_Q_TP, A_Q_ID, A_Q_CHECK_AU, A_Q_AU, 
           L_LOG_HS, L_ALLOW_MODIFY, L_ACTIVE, L_LC, L_LC_VERSION, L_SS);

   IF A_VALUE_LIST_TP = 'Q' THEN
      FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
         IF NVL(A_SQLTEXT(L_SEQ_NO), ' ') <> ' ' THEN
            INSERT INTO UTGKRTSQL(GK, VERSION, SEQ, SQLTEXT)
            VALUES (A_GK, A_VERSION, L_SEQ_NO, A_SQLTEXT(L_SEQ_NO));
         END IF;
      END LOOP;
   ELSIF A_VALUE_LIST_TP = 'F' THEN
      FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
         IF NVL(A_VALUE(L_SEQ_NO), ' ') <> ' ' THEN
            INSERT INTO UTGKRTLIST(GK, VERSION, SEQ, VALUE)
            VALUES (A_GK, A_VERSION, L_SEQ_NO, A_VALUE(L_SEQ_NO));
         END IF;
      END LOOP;
   END IF;

   
   
   
   
   DELETE FROM UTEVRULES
   WHERE CUSTOM = '0'
     AND OBJECT_TP = 'rt'
     AND EV_TP IN ('ObjectCreated', 'ObjectUpdated')
     AND AF LIKE '%''rtgk''%'
     AND AF LIKE '%'''||A_GK||'''%';
   
   DELETE FROM UTEVRULES
   WHERE CUSTOM = '0'
     AND OBJECT_TP = 'rt'
     AND EV_TP IN ('ObjectCreated', 'ObjectUpdated')
     AND AF LIKE 'UNGKASSIGN%'
     AND AF LIKE '%'''||A_GK||'''%';

   
   SELECT NVL(MAX(RULE_NR),0)+1
   INTO L_RULE_NR
   FROM UTEVRULES;
   
   IF A_ASSIGN_TP = 'T' THEN
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR, 'rt', 'ObjectCreated', 
             'AssignGroupKey(''rtgk'', '''||A_GK||''', ''~rt@rt~'', '||A_VAL_START||', '||A_VAL_LENGTH||')', 
             '0');
   ELSIF A_ASSIGN_TP = 'F' THEN
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR, 'rt', 'ObjectCreated', 
             'UNGKASSIGN.'||A_ASSIGN_ID||'('''||A_GK||''')', '0');
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR+1, 'rt', 'ObjectUpdated', 
             'UNGKASSIGN.'||A_ASSIGN_ID||'('''||A_GK||''')', '0');
   END IF;

   
   L_RULE_NR := 0;
   FOR C_EVRULE_REC IN (SELECT *
                        FROM UTEVRULES
                        ORDER BY RULE_NR) LOOP
      L_RULE_NR := L_RULE_NR + 1;
      IF C_EVRULE_REC.RULE_NR <> L_RULE_NR THEN
         UPDATE UTEVRULES
         SET RULE_NR = L_RULE_NR
         WHERE RULE_NR = C_EVRULE_REC.RULE_NR;
      END IF;
   END LOOP;

   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT ('SaveGroupKeyRt', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                    '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

















   IF NVL(L_LOG_HS, ' ') = '1' THEN
      IF L_EVENT_TP = 'GroupKeyCreated' THEN
         INSERT INTO UTGKRTHS (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                               WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_GK, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'group key "'||A_GK||'" is created.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                 L_EV_SEQ_NR);
      ELSE
         INSERT INTO UTGKRTHS (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                               WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_GK, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'group key "'||A_GK||'" is updated.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                 L_EV_SEQ_NR);
      END IF;
   ELSE
      
      
      IF L_EVENT_TP = 'GroupKeyCreated' THEN
         INSERT INTO UTGKRTHS (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                               WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_GK, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'group key "'||A_GK||'" is created.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                 L_EV_SEQ_NR);
      END IF;
   END IF;

   
   
   
   L_EV_SEQ_NR := -1;
   L_EVENT_TP := 'LoadEvRules';
   L_RESULT := UNAPIEV.BROADCASTEVENT ('SaveGroupKeyRt', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                       '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;
   
   UNAPIGEN.NOTIFYTASKGKTODBA('RT',
                      A_GK,
                      A_VERSION,
                      A_VALUE_UNIQUE);

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveGroupKeyRt',SQLERRM);
   END IF;
   IF UNAPIGK.L_DBA_OBJECTS_CURSOR%ISOPEN THEN
      CLOSE UNAPIGK.L_DBA_OBJECTS_CURSOR;
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveGroupKeyRt'));
END SAVEGROUPKEYRT;

FUNCTION DELETEGROUPKEYRT                              
(A_GK               IN     VARCHAR2,                   
 A_MODIFY_REASON    IN     VARCHAR2)                   
RETURN NUMBER IS

A_VERSION        VARCHAR2(20);

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_GK, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   
   IF UNAPIGEN.ISSYSTEM21CFR11COMPLIANT = UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTALLOWEDIN21CFR11;
      RAISE STPERROR;
   END IF;

   
   L_RESULT := DELETEGROUPKEYRTSTRUCTURES(A_GK);
   IF L_RESULT <> 0 AND
      L_RESULT <> UNAPIGEN.DBERR_STRUCTCREATED THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   ELSE
      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   DELETE FROM UTGKRTLIST
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   DELETE FROM UTGKRTSQL
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   DELETE FROM UTGKRT
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   DELETE FROM UTGKRTHS
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   
   
   DELETE FROM UTEVRULES
   WHERE CUSTOM = '0'
     AND OBJECT_TP = 'rt'
     AND EV_TP IN ('ObjectCreated', 'ObjectUpdated')
     AND AF LIKE '%''rtgk''%'
     AND AF LIKE '%'''||A_GK||'''%';
   
   DELETE FROM UTEVRULES
   WHERE CUSTOM = '0'
     AND OBJECT_TP = 'rt'
     AND EV_TP IN ('ObjectCreated', 'ObjectUpdated')
     AND AF LIKE 'UNGKASSIGN%'
     AND AF LIKE '%'''||A_GK||'''%';

   L_EVENT_TP := 'ObjectDeleted';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT('DeleteGroupKeyRt', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                   '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);

   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   
   
   
   L_EV_SEQ_NR := -1;
   L_EVENT_TP := 'LoadEvRules';
   L_RESULT := UNAPIEV.BROADCASTEVENT ('DeleteGroupKeyRt', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                       '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('DeleteGroupKeyRt', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'DeleteGroupKeyRt'));
END DELETEGROUPKEYRT;

FUNCTION CREATEGROUPKEYRTSTRUCTURES                
(A_GK                IN    VARCHAR2,               
 A_STOR_INITIAL      IN    VARCHAR2,               
 A_STOR_NEXT         IN    VARCHAR2,               
 A_STOR_MIN_EXTENTS  IN    NUMBER,                 
 A_STOR_PCT_INCREASE IN    NUMBER,                 
 A_STOR_PCT_FREE     IN    NUMBER,                 
 A_STOR_PCT_USED     IN    NUMBER                  
)
RETURN NUMBER IS

A_VERSION            VARCHAR2(20);
L_GKRT_CURSOR        INTEGER;
L_GK_FOUND           BOOLEAN;
L_LOG_HS             CHAR(1);
L_STOR_INITIAL       VARCHAR2(20);
L_STOR_NEXT          VARCHAR2(20);
L_STOR_MIN_EXTENTS   NUMBER; 
L_STOR_PCT_INCREASE  NUMBER;
L_STOR_PCT_FREE      NUMBER;
L_STOR_PCT_USED      NUMBER;

L_TABLE_CREATED      BOOLEAN;
L_TABLESPACE         VARCHAR2(40);
L_INDEX_TABLESPACE   VARCHAR2(40);

CURSOR L_GK_CURSOR IS
   SELECT *
   FROM UTGKRT
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

L_GK_REC       L_GK_CURSOR%ROWTYPE;

BEGIN

   L_SQLERRM := NULL;
   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   L_TABLE_CREATED := FALSE;
   
   OPEN L_GK_CURSOR;
   FETCH L_GK_CURSOR
   INTO L_GK_REC;
   L_GK_FOUND := L_GK_CURSOR%FOUND;
   CLOSE L_GK_CURSOR;

   IF NOT L_GK_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
      RAISE STPERROR;
   END IF;

   IF NVL(L_GK_REC.STRUCT_CREATED, '0') = '1' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_STRUCTCREATED;
      RAISE STPERROR;
   END IF;

   OPEN L_TABLESPACE_CURSOR ('UTRT');
   FETCH L_TABLESPACE_CURSOR 
      INTO L_TABLESPACE;
   CLOSE L_TABLESPACE_CURSOR;

   OPEN L_INDEX_TABLESPACE_CURSOR ('UKRT');
   FETCH L_INDEX_TABLESPACE_CURSOR 
      INTO L_INDEX_TABLESPACE;
   CLOSE L_INDEX_TABLESPACE_CURSOR;
    
   IF ( A_STOR_INITIAL IS NULL ) THEN
      L_RET_CODE := UNAPIGK.INITGROUPKEYDEFSTORAGE('RT', 
                                                   L_STOR_INITIAL, 
                                                   L_STOR_NEXT, 
                                                   L_STOR_MIN_EXTENTS, 
                                                   L_STOR_PCT_INCREASE, 
                                                   L_STOR_PCT_FREE, 
                                                   L_STOR_PCT_USED);
   ELSE
      L_STOR_INITIAL      := A_STOR_INITIAL;
      L_STOR_NEXT         := A_STOR_NEXT;
      L_STOR_MIN_EXTENTS  := A_STOR_MIN_EXTENTS;
      L_STOR_PCT_INCREASE := A_STOR_PCT_INCREASE;
      L_STOR_PCT_FREE     := A_STOR_PCT_FREE;
      L_STOR_PCT_USED     := A_STOR_PCT_USED;
   END IF;

    
   
   
   

   
   
   
   
   
   
   
   
   L_GKRT_CURSOR := DBMS_SQL.OPEN_CURSOR;
   
   L_SQL_STRING := 'CREATE TABLE utrtgk' || A_GK ||
                   '(' || A_GK || ' VARCHAR2(40),'||
                   'rt VARCHAR2(20),' ||
                   'version VARCHAR2(20),' ||
                   'CONSTRAINT ukrtgk' || A_GK ||
                   ' PRIMARY KEY(' || A_GK ||', rt, version)' ||
                   ' USING INDEX TABLESPACE '|| L_INDEX_TABLESPACE ||
                   ' STORAGE (INITIAL '      || L_STOR_INITIAL || 
                            ' NEXT '         || L_STOR_NEXT ||
                            ' PCTINCREASE '  || TO_CHAR(L_STOR_PCT_INCREASE) || ') ' ||
                   ' PCTFREE ' || TO_CHAR(L_STOR_PCT_FREE) ;

   IF L_GK_REC.VALUE_UNIQUE = '1' THEN
      L_SQL_STRING :=  L_SQL_STRING || ',CONSTRAINT ucrtgk' || A_GK ||
                     ' UNIQUE(' || A_GK || ')'||
                     ' USING INDEX TABLESPACE '|| L_INDEX_TABLESPACE ||
                     ' STORAGE (INITIAL '      || L_STOR_INITIAL || 
                              ' NEXT '         || L_STOR_NEXT ||
                              ' PCTINCREASE '  || TO_CHAR(L_STOR_PCT_INCREASE) || ') ' ||
                     ' PCTFREE ' || TO_CHAR(L_STOR_PCT_FREE) ;
   END IF;
   
   L_SQL_STRING := L_SQL_STRING || ') TABLESPACE '           || L_TABLESPACE || 
                                    ' STORAGE (INITIAL '     || L_STOR_INITIAL || 
                                             ' NEXT '        || L_STOR_NEXT || 
                                             ' PCTINCREASE ' || TO_CHAR(L_STOR_PCT_INCREASE)|| 
                                             ' MINEXTENTS '  || TO_CHAR(L_STOR_MIN_EXTENTS)|| 
                                              ')'            ||
                                    ' PCTFREE ' || TO_CHAR(L_STOR_PCT_FREE) ||
                                    ' PCTUSED ' || TO_CHAR(L_STOR_PCT_USED) ;

   DBMS_SQL.PARSE(L_GKRT_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   L_RESULT := DBMS_SQL.EXECUTE(L_GKRT_CURSOR);
   L_TABLE_CREATED := TRUE;

   
   
   
   
   
   

   L_SQL_STRING := 'CREATE INDEX uirtgk'|| A_GK ||
                   ' ON utrtgk' || A_GK || '(rt, version) ' ||
                   ' STORAGE (INITIAL '    || L_STOR_INITIAL || 
                            ' NEXT '       || L_STOR_NEXT || 
                            ' PCTINCREASE '|| TO_CHAR(L_STOR_PCT_INCREASE)|| 
                            ' MINEXTENTS '  || TO_CHAR(L_STOR_MIN_EXTENTS)|| 
                   ' ) PCTFREE ' || TO_CHAR(L_STOR_PCT_FREE) ||
                   ' TABLESPACE '|| L_INDEX_TABLESPACE;
   DBMS_SQL.PARSE(L_GKRT_CURSOR, L_SQL_STRING, DBMS_SQL.V7);
   L_RESULT := DBMS_SQL.EXECUTE(L_GKRT_CURSOR);

   DBMS_SQL.CLOSE_CURSOR(L_GKRT_CURSOR);

   
   UPDATE UTGKRT
   SET STRUCT_CREATED = '1'
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   
   
   
   L_RESULT := CREATEGROUPKEYRTENTRIES(A_GK);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      L_SQLERRM := 'CreateGroupKeyRtEntries returned '||L_RESULT||' for gk='||A_GK;
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   
   
   L_RESULT := UNAPIGK.CREATEUSERSTRUCTSFORGROUPKEY('RT', A_GK);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      L_SQLERRM := 'CreateUserStructsForGroupKey returned '||L_RESULT||' for gk_tp=RT#gk='||A_GK;
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;   

   L_EVENT_TP := 'GroupKeyStructuresCreated';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT ('CreateGroupKeyRtStructures', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                    '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   BEGIN
      SELECT LOG_HS
      INTO L_LOG_HS
      FROM UTOBJECTS 
      WHERE OBJECT = 'gkrt';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      
      
      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OBJTP;
      RAISE STPERROR;
   END;
   
   IF NVL(L_LOG_HS, ' ') = '1' THEN
      INSERT INTO UTGKRTHS (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                            WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES (A_GK, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
              'Database objects for group key "'||A_GK||'" are created.', 
              CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('CreateGroupKeyRtStructures', SQLERRM);
      UNAPIGEN.LOGERROR('CreateGroupKeyRtStructures', 'HELP for DBA:'||SUBSTR(L_SQL_STRING,1,235));
      IF (LENGTH(L_SQL_STRING)>235) THEN
         UNAPIGEN.LOGERROR('CreateGroupKeyRtStructures', 'HELP for DBA:'||SUBSTR(L_SQL_STRING,236,235));
      END IF;
   END IF;
   IF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('CreateGroupKeyRtStructures', SUBSTR(L_SQLERRM,1,235));
   END IF;
   IF L_GK_CURSOR%ISOPEN THEN
      CLOSE L_GK_CURSOR;
   END IF;
   IF L_TABLE_CREATED THEN
      
      BEGIN
         L_SQL_STRING := 'DROP TABLE utrtgk' || A_GK;
         DBMS_SQL.PARSE(L_GKRT_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         L_RESULT := DBMS_SQL.EXECUTE(L_GKRT_CURSOR);
      EXCEPTION
      WHEN OTHERS THEN
         NULL;
      END;
   END IF;
   IF DBMS_SQL.IS_OPEN (L_GKRT_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_GKRT_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'CreateGroupKeyRtStructures'));
END CREATEGROUPKEYRTSTRUCTURES;

FUNCTION DELETEGROUPKEYRTSTRUCTURES              
(A_GK    IN    VARCHAR2)                         
RETURN NUMBER IS

A_VERSION         VARCHAR2(20);
L_GKRT_CURSOR     INTEGER;
L_STRUCT_CREATED  CHAR(1);
L_GK_FOUND        BOOLEAN;
L_LOG_HS          CHAR(1);

CURSOR L_GK_CURSOR IS
   SELECT NVL(STRUCT_CREATED, '0')
   FROM UTGKRT
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   OPEN L_GK_CURSOR;
   FETCH L_GK_CURSOR
   INTO L_STRUCT_CREATED;
   L_GK_FOUND := L_GK_CURSOR%FOUND;
   CLOSE L_GK_CURSOR;

   IF NOT L_GK_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
      RAISE STPERROR;
   END IF;

   IF NVL(L_STRUCT_CREATED, '0') = '0' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_STRUCTCREATED;
      RAISE STPERROR;
   END IF;

   
   IF UNAPIGEN.ISSYSTEM21CFR11COMPLIANT = UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTALLOWEDIN21CFR11;
      RAISE STPERROR;
   END IF;

      
   L_RESULT := UNAPIGK.DELETEUSERSTRUCTSFORGROUPKEY('RT', A_GK);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      L_SQLERRM := 'DeleteUserStructsForGroupKey returned '||L_RESULT||' for gk_tp=ST#gk='||A_GK;
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   
   DELETE FROM UTRTGK
   WHERE GK = A_GK;

   BEGIN
      L_GKRT_CURSOR := DBMS_SQL.OPEN_CURSOR;
      L_SQL_STRING := 'DROP TABLE utrtgk' || A_GK ;
      DBMS_SQL.PARSE(L_GKRT_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      L_RESULT := DBMS_SQL.EXECUTE(L_GKRT_CURSOR);
      DBMS_SQL.CLOSE_CURSOR(L_GKRT_CURSOR);
   EXCEPTION
   WHEN TABLE_DOES_NOT_EXIST THEN
      
      NULL;
   END;

   
   UNAPIGK.DELETEGROUPKEYFROMTASK('rtgk', A_GK);

   
   UPDATE UTGKRT
   SET STRUCT_CREATED = '0'
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   L_EVENT_TP := 'GroupKeyStructuresDeleted';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT ('DeleteGroupKeyRtStructures', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                    '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   BEGIN
      SELECT LOG_HS
      INTO L_LOG_HS
      FROM UTOBJECTS 
      WHERE OBJECT = 'gkrt';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      
      
      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OBJTP;
      RAISE STPERROR;
   END;
   
   IF NVL(L_LOG_HS, ' ') = '1' THEN
      INSERT INTO UTGKRTHS (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                            WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES (A_GK, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
              'Database objects for group key "'||A_GK||'" are deleted.', 
              CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('DeleteGroupKeyRtStructures', SQLERRM);
   END IF;
   IF L_GK_CURSOR%ISOPEN THEN
      CLOSE L_GK_CURSOR;
   END IF;
   IF DBMS_SQL.IS_OPEN (L_GKRT_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_GKRT_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'DeleteGroupKeyRtStructures'));
END DELETEGROUPKEYRTSTRUCTURES;

FUNCTION CREATEGROUPKEYRTENTRIES                 
(A_GK    IN    VARCHAR2)                         
RETURN NUMBER IS

A_VERSION      VARCHAR2(20);
L_GKRT_CURSOR  INTEGER;
L_GK_FOUND     BOOLEAN;

CURSOR L_GK_CURSOR IS
   SELECT *
   FROM UTGKRT
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

L_GK_REC       L_GK_CURSOR%ROWTYPE;

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   OPEN L_GK_CURSOR;
   FETCH L_GK_CURSOR
   INTO L_GK_REC;
   L_GK_FOUND := L_GK_CURSOR%FOUND;
   CLOSE L_GK_CURSOR;

   IF NOT L_GK_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
      RAISE STPERROR;
   END IF;

   IF NVL(L_GK_REC.STRUCT_CREATED, '0') = '0' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_STRUCTCREATED;
      RAISE STPERROR;
   END IF;

   
   
   
   
   L_GKRT_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'INSERT INTO utrtgk'||A_GK||'('||A_GK||', rt, version) '||
                   'SELECT value, rt, version '||
                   'FROM utrtgk '||
                   'WHERE gk = '''||A_GK||''' AND value IS NOT NULL';
   DBMS_SQL.PARSE(L_GKRT_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   
   BEGIN
      L_RESULT := DBMS_SQL.EXECUTE(L_GKRT_CURSOR);
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UNIQUEGK;
         RAISE STPERROR;
   END;
   
   DBMS_SQL.CLOSE_CURSOR(L_GKRT_CURSOR);

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('CreateGroupKeyRtEntries', SQLERRM);
   END IF;
   IF L_GK_CURSOR%ISOPEN THEN
      CLOSE L_GK_CURSOR;
   END IF;
   IF DBMS_SQL.IS_OPEN (L_GKRT_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_GKRT_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'CreateGroupKeyRtEntries'));
END CREATEGROUPKEYRTENTRIES;

FUNCTION DELETEGROUPKEYRTENTRIES                 
(A_GK    IN    VARCHAR2)                         
RETURN NUMBER IS

A_VERSION         VARCHAR2(20);
L_GKRT_CURSOR     INTEGER;
L_STRUCT_CREATED  CHAR(1);
L_GK_FOUND        BOOLEAN;

CURSOR L_GK_CURSOR IS
   SELECT NVL(STRUCT_CREATED, '0')
   FROM UTGKRT
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   OPEN L_GK_CURSOR;
   FETCH L_GK_CURSOR
   INTO L_STRUCT_CREATED;
   L_GK_FOUND := L_GK_CURSOR%FOUND;
   CLOSE L_GK_CURSOR;

   IF NOT L_GK_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
      RAISE STPERROR;
   END IF;

   IF NVL(L_STRUCT_CREATED, '0') = '0' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_STRUCTCREATED;
      RAISE STPERROR;
   END IF;

   
   IF UNAPIGEN.ISSYSTEM21CFR11COMPLIANT = UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTALLOWEDIN21CFR11;
      RAISE STPERROR;
   END IF;

   DELETE FROM UTRTGK
   WHERE GK = A_GK;

   L_GKRT_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'TRUNCATE TABLE utrtgk' || A_GK;
   DBMS_SQL.PARSE(L_GKRT_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   L_RESULT := DBMS_SQL.EXECUTE(L_GKRT_CURSOR);

   DBMS_SQL.CLOSE_CURSOR(L_GKRT_CURSOR);

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('DeleteGroupKeyRtEntries', SQLERRM);
   END IF;
   IF L_GK_CURSOR%ISOPEN THEN
      CLOSE L_GK_CURSOR;
   END IF;
   IF DBMS_SQL.IS_OPEN (L_GKRT_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_GKRT_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'DeleteGroupKeyRtEntries'));
END DELETEGROUPKEYRTENTRIES;

FUNCTION GETGROUPKEYRQLIST                                 
(A_GK                  OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_DESCRIPTION         OUT     UNAPIGEN.VC40_TABLE_TYPE,   
 A_NR_OF_ROWS          IN OUT  NUMBER,                     
 A_WHERE_CLAUSE        IN      VARCHAR2,                   
 A_NEXT_ROWS           IN      NUMBER)                     
RETURN NUMBER IS

L_GK           VARCHAR2(20);
L_DESCRIPTION  VARCHAR2(40);

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_GK_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_GK_CURSOR);
         P_GK_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_GK_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
         L_WHERE_CLAUSE := 'ORDER BY gk, version'; 
      ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
         L_WHERE_CLAUSE := 'WHERE version_is_current = ''1'' '||
                           'AND gk = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                           ''' ORDER BY gk, version';
      ELSE
         L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
      END IF;

      IF P_GK_CURSOR IS NULL THEN
         P_GK_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;

      L_SQL_STRING:= 'SELECT gk, description FROM dd'||UNAPIGEN.P_DD||'.uvgkrq ' ||
                      L_WHERE_CLAUSE;
      DBMS_SQL.PARSE(P_GK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

      DBMS_SQL.DEFINE_COLUMN(P_GK_CURSOR, 1, L_GK, 20);
      DBMS_SQL.DEFINE_COLUMN(P_GK_CURSOR, 2, L_DESCRIPTION, 40);
      L_RESULT := DBMS_SQL.EXECUTE(P_GK_CURSOR);
   END IF;

   L_RESULT := DBMS_SQL.FETCH_ROWS(P_GK_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_GK_CURSOR, 1, L_GK);
      DBMS_SQL.COLUMN_VALUE(P_GK_CURSOR, 2, L_DESCRIPTION);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_GK(L_FETCHED_ROWS) := L_GK;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_GK_CURSOR);
      END IF;
   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_GK_CURSOR);
       P_GK_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   END IF;

   IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_GK_CURSOR);
      P_GK_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetGroupKeyRqList', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (P_GK_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (P_GK_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETGROUPKEYRQLIST;

FUNCTION GETGROUPKEYRQ                                  
(A_GK               OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_DESCRIPTION      OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_IS_PROTECTED     OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_VALUE_UNIQUE     OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_SINGLE_VALUED    OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_NEW_VAL_ALLOWED  OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_MANDATORY        OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_STRUCT_CREATED   OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_INHERIT_GK       OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_VALUE_LIST_TP    OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_DEFAULT_VALUE    OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_DSP_ROWS         OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_VAL_LENGTH       OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_VAL_START        OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_ASSIGN_TP        OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_ASSIGN_ID        OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_Q_TP             OUT    UNAPIGEN.CHAR2_TABLE_TYPE,   
 A_Q_ID             OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_Q_CHECK_AU       OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_Q_AU             OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_NR_OF_ROWS       IN OUT NUMBER,                      
 A_WHERE_CLAUSE     IN     VARCHAR2)                    
RETURN NUMBER IS

L_GK                VARCHAR2(20);
L_DESCRIPTION       VARCHAR2(40);
L_IS_PROTECTED      CHAR(1);
L_VALUE_UNIQUE      CHAR(1);
L_SINGLE_VALUED     CHAR(1);
L_NEW_VAL_ALLOWED   CHAR(1);
L_MANDATORY         CHAR(1);
L_STRUCT_CREATED    CHAR(1);
L_INHERIT_GK        CHAR(1);
L_VALUE_LIST_TP     CHAR(1);
L_DEFAULT_VALUE     VARCHAR2(40);
L_DSP_ROWS          NUMBER(3);
L_VAL_LENGTH        NUMBER(3);
L_VAL_START         NUMBER(3);
L_ASSIGN_TP         CHAR(1);
L_ASSIGN_ID         VARCHAR2(20);
L_Q_TP              CHAR(2);
L_Q_ID              VARCHAR2(20);
L_Q_CHECK_AU        CHAR(1);
L_Q_AU              VARCHAR2(20);
L_GK_CURSOR         INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'ORDER BY gk, version'; 
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := 'WHERE version_is_current = ''1'' '||
                        'AND gk = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                        ''' ORDER BY gk, version';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_GK_CURSOR := DBMS_SQL.OPEN_CURSOR;

   L_SQL_STRING := 'SELECT gk, description, is_protected, value_unique, ' ||
                   'single_valued, new_val_allowed, mandatory, struct_created, inherit_gk,' ||
                   'value_list_tp, default_value, dsp_rows, val_length, val_start, ' ||
                   'assign_tp, assign_id, q_tp, q_id, q_check_au, q_au ' ||
                   'FROM dd' || UNAPIGEN.P_DD || '.uvgkrq ' || L_WHERE_CLAUSE;
   DBMS_SQL.PARSE(L_GK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 1, L_GK, 20);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 2, L_DESCRIPTION, 40);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 3, L_IS_PROTECTED, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 4, L_VALUE_UNIQUE, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 5, L_SINGLE_VALUED, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 6, L_NEW_VAL_ALLOWED, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 7, L_MANDATORY, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 8, L_STRUCT_CREATED, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 9, L_INHERIT_GK, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 10, L_VALUE_LIST_TP, 1);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 11, L_DEFAULT_VALUE, 40);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 12, L_DSP_ROWS);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 13, L_VAL_LENGTH);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 14, L_VAL_START);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 15, L_ASSIGN_TP, 1);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 16, L_ASSIGN_ID, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 17, L_Q_TP, 2);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 18, L_Q_ID, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 19, L_Q_CHECK_AU, 1);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 20, L_Q_AU, 20);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_GK_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 1, L_GK);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 2, L_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 3, L_IS_PROTECTED);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 4, L_VALUE_UNIQUE);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 5, L_SINGLE_VALUED);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 6, L_NEW_VAL_ALLOWED);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 7, L_MANDATORY);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 8, L_STRUCT_CREATED);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 9, L_INHERIT_GK);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 10, L_VALUE_LIST_TP);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 11, L_DEFAULT_VALUE);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 12, L_DSP_ROWS);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 13, L_VAL_LENGTH);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 14, L_VAL_START);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 15, L_ASSIGN_TP);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 16, L_ASSIGN_ID);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 17, L_Q_TP);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 18, L_Q_ID);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 19, L_Q_CHECK_AU);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 20, L_Q_AU);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_GK (L_FETCHED_ROWS) := L_GK;
      A_DESCRIPTION (L_FETCHED_ROWS) := L_DESCRIPTION;
      A_IS_PROTECTED (L_FETCHED_ROWS) := L_IS_PROTECTED;
      A_VALUE_UNIQUE (L_FETCHED_ROWS) := L_VALUE_UNIQUE;
      A_SINGLE_VALUED (L_FETCHED_ROWS) := L_SINGLE_VALUED;
      A_NEW_VAL_ALLOWED (L_FETCHED_ROWS) := L_NEW_VAL_ALLOWED;
      A_MANDATORY (L_FETCHED_ROWS) := L_MANDATORY;
      A_STRUCT_CREATED (L_FETCHED_ROWS) := L_STRUCT_CREATED;
      A_INHERIT_GK (L_FETCHED_ROWS) := L_INHERIT_GK;
      A_VALUE_LIST_TP (L_FETCHED_ROWS) := L_VALUE_LIST_TP;
      A_DEFAULT_VALUE (L_FETCHED_ROWS) := L_DEFAULT_VALUE;
      A_DSP_ROWS(L_FETCHED_ROWS) := L_DSP_ROWS;
      A_VAL_LENGTH(L_FETCHED_ROWS) := L_VAL_LENGTH;
      A_VAL_START(L_FETCHED_ROWS) := L_VAL_START;
      A_ASSIGN_TP(L_FETCHED_ROWS) := L_ASSIGN_TP;
      A_ASSIGN_ID(L_FETCHED_ROWS) := L_ASSIGN_ID;
      A_Q_TP(L_FETCHED_ROWS) := L_Q_TP;
      A_Q_ID(L_FETCHED_ROWS) := L_Q_ID;
      A_Q_CHECK_AU(L_FETCHED_ROWS) := L_Q_CHECK_AU;
      A_Q_AU(L_FETCHED_ROWS) := L_Q_AU;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_GK_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_GK_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetGroupKeyRq', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
     IF DBMS_SQL.IS_OPEN (L_GK_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_GK_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETGROUPKEYRQ;

FUNCTION GETGROUPKEYRQVALUE                            
(A_GK               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_VALUE            OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_NR_OF_ROWS       IN OUT  NUMBER,                    
 A_WHERE_CLAUSE     IN      VARCHAR2)                  
RETURN NUMBER IS

L_GK              VARCHAR2(20);
L_VALUE           VARCHAR2(40);
L_GK_CURSOR       INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'ORDER BY list.gk, list.version, list.seq'; 
   ELSIF
      UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := ', dd'||UNAPIGEN.P_DD||'.uvgkrq rq WHERE rq.version_is_current = ''1'' '||
                        'AND list.version = rq.version '||
                        'AND list.gk = rq.gk '||
                        'AND list.gk = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                        ''' ORDER BY list.seq';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_GK_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT list.gk, list.value FROM dd'||UNAPIGEN.P_DD||'.uvgkrqlist list ' || L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_GK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 1, L_GK, 20);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 2, L_VALUE, 40);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_GK_CURSOR);

   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 1, L_GK);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 2, L_VALUE);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_GK(L_FETCHED_ROWS) := L_GK;
      A_VALUE(L_FETCHED_ROWS) := L_VALUE;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_GK_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_GK_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;
   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetGroupKeyRqValue', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (L_GK_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_GK_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETGROUPKEYRQVALUE;

FUNCTION GETGROUPKEYRQSQL                              
(A_GK              OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_SQLTEXT         OUT     UNAPIGEN.VC255_TABLE_TYPE,  
 A_NR_OF_ROWS      IN OUT  NUMBER,                     
 A_WHERE_CLAUSE    IN      VARCHAR2)                   
RETURN NUMBER IS

L_GK              VARCHAR2(20);
L_SQLTEXT         VARCHAR2(255);
L_GK_CURSOR       INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'ORDER BY sql.gk, sql.version, sql.seq'; 
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := ', dd'||UNAPIGEN.P_DD||'.uvgkrq rq WHERE rq.version_is_current = ''1'' '||
                        'AND sql.version = rq.version '||
                        'AND sql.gk = rq.gk '||
                        'AND sql.gk = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                        ''' ORDER BY sql.seq';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_GK_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT sql.gk, sql.sqltext FROM dd'||UNAPIGEN.P_DD||'.uvgkrqsql sql ' || L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_GK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 1, L_GK, 20);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 2, L_SQLTEXT, 255);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_GK_CURSOR);

   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 1, L_GK);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 2, L_SQLTEXT);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_GK(L_FETCHED_ROWS) := L_GK;
      A_SQLTEXT(L_FETCHED_ROWS) := L_SQLTEXT;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_GK_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_GK_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetGroupKeyRqSql', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (L_GK_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_GK_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETGROUPKEYRQSQL;

FUNCTION SAVEGROUPKEYRQ                               
(A_GK               IN   VARCHAR2,                    
 A_DESCRIPTION      IN   VARCHAR2,                    
 A_IS_PROTECTED     IN   CHAR,                        
 A_VALUE_UNIQUE     IN   CHAR,                        
 A_SINGLE_VALUED    IN   CHAR,                        
 A_NEW_VAL_ALLOWED  IN   CHAR,                        
 A_MANDATORY        IN   CHAR,                        
 A_STRUCT_CREATED   IN   CHAR,                        
 A_INHERIT_GK       IN   CHAR,                        
 A_VALUE_LIST_TP    IN   CHAR,                        
 A_DEFAULT_VALUE    IN   VARCHAR2,                    
 A_DSP_ROWS         IN   NUMBER,                      
 A_VAL_LENGTH       IN   NUMBER,                      
 A_VAL_START        IN   NUMBER,                      
 A_ASSIGN_TP        IN   CHAR,                        
 A_ASSIGN_ID        IN   VARCHAR2,                    
 A_Q_TP             IN   CHAR,                        
 A_Q_ID             IN   VARCHAR2,                    
 A_Q_CHECK_AU       IN   CHAR,                        
 A_Q_AU             IN   VARCHAR2,                    
 A_VALUE            IN   UNAPIGEN.VC40_TABLE_TYPE,    
 A_SQLTEXT          IN   UNAPIGEN.VC255_TABLE_TYPE,   
 A_NR_OF_ROWS       IN   NUMBER,                      
 A_MODIFY_REASON    IN   VARCHAR2)                    
RETURN NUMBER IS

A_VERSION        VARCHAR2(20);
L_FOUND          BOOLEAN;
L_SEQ_NO         NUMBER;
L_GK             VARCHAR2(20);
L_STRUCT_CREATED CHAR(1);
L_LC             VARCHAR2(2);
L_LC_VERSION     VARCHAR2(20);
L_SS             VARCHAR2(2);
L_LOG_HS         CHAR(1);
L_ALLOW_MODIFY   CHAR(1);
L_ACTIVE         CHAR(1);
L_RULE_NR        NUMBER(5);

CURSOR L_GK_CURSOR IS
   SELECT GK 
   FROM UTGKRQ
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_GK, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_IS_PROTECTED, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_PROTECTED;
      RAISE STPERROR;
   END IF;

   IF NVL(A_SINGLE_VALUED, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SINGLEVALUED;
      RAISE STPERROR;
   END IF;

   IF NVL(A_NEW_VAL_ALLOWED, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NEWVALALLOWED;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VALUE_UNIQUE, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UNIQUEGK;
      RAISE STPERROR;
   END IF;

   IF NVL(A_MANDATORY, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_MANDATORY;
      RAISE STPERROR;
   END IF;

   IF NVL(A_INHERIT_GK, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INHERITGK;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VALUE_LIST_TP, ' ') NOT IN ('F', 'Q') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_VALUELISTTP;
      RAISE STPERROR;
   END IF;

   IF NVL(A_ASSIGN_TP, ' ') IN ('F', 'I') AND
      NVL(A_ASSIGN_ID, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   
   
   
   
   L_LC := '@L';
   L_SS := '@A';

   BEGIN
      SELECT VERSION
      INTO L_LC_VERSION
      FROM UTLC
      WHERE LC = '@L'
      AND VERSION_IS_CURRENT = '1';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOCURRENTLCVERSION;
      RAISE STPERROR;
   END;

   BEGIN
      SELECT ALLOW_MODIFY, ACTIVE
      INTO L_ALLOW_MODIFY, L_ACTIVE
      FROM UTSS
      WHERE SS = '@A';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR;
   END;
   
   BEGIN
      SELECT LOG_HS
      INTO L_LOG_HS
      FROM UTOBJECTS 
      WHERE OBJECT = 'gkrq';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      
      
      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OBJTP;
      RAISE STPERROR;
   END;
   

   OPEN L_GK_CURSOR;
   FETCH L_GK_CURSOR
   INTO L_GK;
   IF L_GK_CURSOR%FOUND THEN
      L_FOUND := TRUE;
   ELSE
      L_FOUND := FALSE;
   END IF;
   CLOSE L_GK_CURSOR;

   IF L_FOUND THEN
      DELETE FROM UTGKRQ
      WHERE VERSION = A_VERSION
        AND GK = A_GK;

      DELETE FROM UTGKRQLIST
      WHERE VERSION = A_VERSION
        AND GK = A_GK;

      DELETE FROM UTGKRQSQL
      WHERE VERSION = A_VERSION
        AND GK = A_GK;
        
      L_EVENT_TP := 'GroupKeyUpdated';
   ELSE
      L_EVENT_TP := 'GroupKeyCreated';
   END IF;
   
   OPEN UNAPIGK.L_DBA_OBJECTS_CURSOR ('UTRQGK'||A_GK);
   FETCH UNAPIGK.L_DBA_OBJECTS_CURSOR INTO L_STRUCT_CREATED;
   CLOSE UNAPIGK.L_DBA_OBJECTS_CURSOR;

   INSERT INTO UTGKRQ (GK, VERSION, VERSION_IS_CURRENT, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ, EFFECTIVE_TILL, EFFECTIVE_TILL_TZ, DESCRIPTION, 
                       IS_PROTECTED, VALUE_UNIQUE, SINGLE_VALUED, NEW_VAL_ALLOWED, MANDATORY,
                       STRUCT_CREATED, INHERIT_GK, VALUE_LIST_TP, DEFAULT_VALUE, DSP_ROWS, VAL_LENGTH, 
                       VAL_START, ASSIGN_TP, ASSIGN_ID, Q_TP, Q_ID, Q_CHECK_AU, Q_AU, 
                       LOG_HS, ALLOW_MODIFY, ACTIVE, LC, LC_VERSION, SS)
   VALUES (A_GK, A_VERSION, '1', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, NULL, A_DESCRIPTION, 
           A_IS_PROTECTED, A_VALUE_UNIQUE, A_SINGLE_VALUED, A_NEW_VAL_ALLOWED, A_MANDATORY, 
           L_STRUCT_CREATED, A_INHERIT_GK, A_VALUE_LIST_TP, A_DEFAULT_VALUE, A_DSP_ROWS, A_VAL_LENGTH, 
           A_VAL_START, A_ASSIGN_TP, A_ASSIGN_ID, A_Q_TP, A_Q_ID, A_Q_CHECK_AU, A_Q_AU, 
           L_LOG_HS, L_ALLOW_MODIFY, L_ACTIVE, L_LC, L_LC_VERSION, L_SS);

   IF A_VALUE_LIST_TP = 'Q' THEN
      FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
         IF NVL(A_SQLTEXT(L_SEQ_NO), ' ') <> ' ' THEN
            INSERT INTO UTGKRQSQL(GK, VERSION, SEQ, SQLTEXT)
            VALUES (A_GK, A_VERSION, L_SEQ_NO, A_SQLTEXT(L_SEQ_NO));
         END IF;
      END LOOP;
   ELSIF A_VALUE_LIST_TP = 'F' THEN
      FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
         IF NVL(A_VALUE(L_SEQ_NO), ' ') <> ' ' THEN
            INSERT INTO UTGKRQLIST(GK, VERSION, SEQ, VALUE)
            VALUES (A_GK, A_VERSION, L_SEQ_NO, A_VALUE(L_SEQ_NO));
         END IF;
      END LOOP;
   END IF;

   
   
   
   
   DELETE FROM UTEVRULES
   WHERE CUSTOM = '0'
     AND EV_TP IN ('RequestCreated', 'RqRequestTypeChanged', 'RqInfoFieldCreated',
                   'RqInfoFieldValueChanged', 'RqInfoFieldDeleted', 'RequestUpdated')
     AND AF LIKE '%''rqgk''%'                   
     AND AF LIKE '%'''||A_GK||'''%';
   
   DELETE FROM UTEVRULES
   WHERE CUSTOM = '0'
     AND EV_TP IN ('RequestCreated', 'RqRequestTypeChanged', 'RqInfoFieldCreated',
                   'RqInfoFieldValueChanged', 'RqInfoFieldDeleted', 'RequestUpdated')
     AND AF LIKE 'UNGKASSIGN%'                   
     AND AF LIKE '%'''||A_GK||'''%';

   
   SELECT NVL(MAX(RULE_NR),0)+1
   INTO L_RULE_NR
   FROM UTEVRULES;

   IF A_ASSIGN_TP = 'T' THEN
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR, 'rq', 'RequestCreated', 
             'AssignGroupKey(''rqgk'', '''||A_GK||''', ''~rq@rt~'', '||A_VAL_START||', '||A_VAL_LENGTH||')', 
             '0');
      
      
      
      
      
   ELSIF A_ASSIGN_TP = 'C' THEN
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR, 'rq', 'RequestCreated', 
             'AssignGroupKey(''rqgk'', '''||A_GK||''', ''~rq@rq~'', '||A_VAL_START||', '||A_VAL_LENGTH||')', 
             '0');
   ELSIF A_ASSIGN_TP = 'I' THEN
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, OBJECT_ID, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR, 'rqii', A_ASSIGN_ID, 'RqInfoFieldCreated', 
             'AssignGroupKey(''rqgk'', '''||A_GK||''', ''~rqii@'||A_ASSIGN_ID||'~'', '||A_VAL_START||', '||A_VAL_LENGTH||')', 
             '0');
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, OBJECT_ID, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR+1, 'rqii', A_ASSIGN_ID, 'RqInfoFieldValueChanged', 
             'AssignGroupKey(''rqgk'', '''||A_GK||''', ''~rqii@'||A_ASSIGN_ID||'~'', '||A_VAL_START||', '||A_VAL_LENGTH||')', 
             '0');
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, OBJECT_ID, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR+2, 'rqii', A_ASSIGN_ID, 'RqInfoFieldDeleted', 
             'DeAssignGroupKey(''rqgk'', '''||A_GK||''')', 
             '0');
   ELSIF A_ASSIGN_TP = 'F' THEN
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR, 'rq', 'RequestCreated', 
             'UNGKASSIGN.'||A_ASSIGN_ID||'('''||A_GK||''')', '0');
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR+1, 'rq', 'RequestUpdated', 
             'UNGKASSIGN.'||A_ASSIGN_ID||'('''||A_GK||''')', '0');
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR+2, 'rqii', 'RqInfoFieldCreated', 
             'UNGKASSIGN.'||A_ASSIGN_ID||'('''||A_GK||''')', '0');
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR+3, 'rqii', 'RqInfoFieldValueChanged', 
             'UNGKASSIGN.'||A_ASSIGN_ID||'('''||A_GK||''')', '0');
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR+4, 'rqii', 'RqInfoFieldDeleted', 
             'UNGKASSIGN.'||A_ASSIGN_ID||'('''||A_GK||''')', '0');
   END IF;

   
   L_RULE_NR := 0;
   FOR C_EVRULE_REC IN (SELECT *
                        FROM UTEVRULES
                        ORDER BY RULE_NR) LOOP
      L_RULE_NR := L_RULE_NR + 1;
      IF C_EVRULE_REC.RULE_NR <> L_RULE_NR THEN
         UPDATE UTEVRULES
         SET RULE_NR = L_RULE_NR
         WHERE RULE_NR = C_EVRULE_REC.RULE_NR;
      END IF;
   END LOOP;

   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT ('SaveGroupKeyRq', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                    '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

















   IF NVL(L_LOG_HS, ' ') = '1' THEN
      IF L_EVENT_TP = 'GroupKeyCreated' THEN
         INSERT INTO UTGKRQHS (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                               WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_GK, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'group key "'||A_GK||'" is created.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                 L_EV_SEQ_NR);
      ELSE
         INSERT INTO UTGKRQHS (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                               WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_GK, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'group key "'||A_GK||'" is updated.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                 L_EV_SEQ_NR);
      END IF;
   ELSE
      
      
      IF L_EVENT_TP = 'GroupKeyCreated' THEN
         INSERT INTO UTGKRQHS (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                               WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_GK, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'group key "'||A_GK||'" is created.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                 L_EV_SEQ_NR);
      END IF;
   END IF;

   
   
   
   L_EV_SEQ_NR := -1;
   L_EVENT_TP := 'LoadEvRules';
   L_RESULT := UNAPIEV.BROADCASTEVENT ('SaveGroupKeyRq', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                       '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   
   UNAPIGEN.NOTIFYTASKGKTODBA('RQ',
                               A_GK,
                               A_VERSION,
                               A_VALUE_UNIQUE);

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveGroupKeyRq',SQLERRM);
   END IF;
   IF UNAPIGK.L_DBA_OBJECTS_CURSOR%ISOPEN THEN
      CLOSE UNAPIGK.L_DBA_OBJECTS_CURSOR;
   END IF;   
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveGroupKeyRq'));
END SAVEGROUPKEYRQ;

FUNCTION DELETEGROUPKEYRQ                              
(A_GK               IN     VARCHAR2,                   
 A_MODIFY_REASON    IN     VARCHAR2)                   
RETURN NUMBER IS

A_VERSION        VARCHAR2(20);

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_GK, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   
   IF UNAPIGEN.ISSYSTEM21CFR11COMPLIANT = UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTALLOWEDIN21CFR11;
      RAISE STPERROR;
   END IF;

   
   L_RESULT := DELETEGROUPKEYRQSTRUCTURES(A_GK);
   IF L_RESULT <> 0 AND
      L_RESULT <> UNAPIGEN.DBERR_STRUCTCREATED THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   ELSE
      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   DELETE FROM UTGKRQLIST
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   DELETE FROM UTGKRQSQL
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   DELETE FROM UTGKRQ
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   DELETE FROM UTGKRQHS
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   
   
   DELETE FROM UTEVRULES
   WHERE CUSTOM = '0'
     AND EV_TP IN ('RequestCreated', 'RqRequestTypeChanged', 'RqInfoFieldCreated',
                   'RqInfoFieldValueChanged', 'RqInfoFieldDeleted', 'RequestUpdated')
     AND AF LIKE '%''rqgk''%'                   
     AND AF LIKE '%'''||A_GK||'''%';
   
   DELETE FROM UTEVRULES
   WHERE CUSTOM = '0'
     AND EV_TP IN ('RequestCreated', 'RqRequestTypeChanged', 'RqInfoFieldCreated',
                   'RqInfoFieldValueChanged', 'RqInfoFieldDeleted', 'RequestUpdated')
     AND AF LIKE 'UNGKASSIGN%'                   
     AND AF LIKE '%'''||A_GK||'''%';

   L_EVENT_TP := 'ObjectDeleted';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT('DeleteGroupKeyRq', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                   '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);

   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   
   
   
   L_EV_SEQ_NR := -1;
   L_EVENT_TP := 'LoadEvRules';
   L_RESULT := UNAPIEV.BROADCASTEVENT ('DeleteGroupKeyRq', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                       '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('DeleteGroupKeyRq', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'DeleteGroupKeyRq'));
END DELETEGROUPKEYRQ;

FUNCTION CREATEGROUPKEYRQSTRUCTURES                
(A_GK                IN    VARCHAR2,               
 A_STOR_INITIAL      IN    VARCHAR2,               
 A_STOR_NEXT         IN    VARCHAR2,               
 A_STOR_MIN_EXTENTS  IN    NUMBER,                 
 A_STOR_PCT_INCREASE IN    NUMBER,                 
 A_STOR_PCT_FREE     IN    NUMBER,                 
 A_STOR_PCT_USED     IN    NUMBER                  
)
RETURN NUMBER IS

A_VERSION            VARCHAR2(20);
L_GKRQ_CURSOR        INTEGER;
L_GK_FOUND           BOOLEAN;
L_LOG_HS             CHAR(1);
L_STOR_INITIAL       VARCHAR2(20);
L_STOR_NEXT          VARCHAR2(20);
L_STOR_MIN_EXTENTS   NUMBER; 
L_STOR_PCT_INCREASE  NUMBER;
L_STOR_PCT_FREE      NUMBER;
L_STOR_PCT_USED      NUMBER;

L_TABLE_CREATED      BOOLEAN;
L_TABLESPACE         VARCHAR2(40);
L_INDEX_TABLESPACE   VARCHAR2(40);

CURSOR L_GK_CURSOR IS
   SELECT *
   FROM UTGKRQ
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

L_GK_REC       L_GK_CURSOR%ROWTYPE;

BEGIN

   L_SQLERRM := NULL;
   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
   
   L_TABLE_CREATED := FALSE;

   OPEN L_GK_CURSOR;
   FETCH L_GK_CURSOR
   INTO L_GK_REC;
   L_GK_FOUND := L_GK_CURSOR%FOUND;
   CLOSE L_GK_CURSOR;

   IF NOT L_GK_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
      RAISE STPERROR;
   END IF;

   IF NVL(L_GK_REC.STRUCT_CREATED, '0') = '1' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_STRUCTCREATED;
      RAISE STPERROR;
   END IF;

   OPEN L_TABLESPACE_CURSOR ('UTRQ');
   FETCH L_TABLESPACE_CURSOR 
      INTO L_TABLESPACE;
   CLOSE L_TABLESPACE_CURSOR;

   OPEN L_INDEX_TABLESPACE_CURSOR ('UKRQ');
   FETCH L_INDEX_TABLESPACE_CURSOR 
      INTO L_INDEX_TABLESPACE;
   CLOSE L_INDEX_TABLESPACE_CURSOR;
    
   IF ( A_STOR_INITIAL IS NULL ) THEN
      L_RET_CODE := UNAPIGK.INITGROUPKEYDEFSTORAGE('RQ', 
                                                   L_STOR_INITIAL, 
                                                   L_STOR_NEXT, 
                                                   L_STOR_MIN_EXTENTS, 
                                                   L_STOR_PCT_INCREASE, 
                                                   L_STOR_PCT_FREE, 
                                                   L_STOR_PCT_USED);
   ELSE
      L_STOR_INITIAL      := A_STOR_INITIAL;
      L_STOR_NEXT         := A_STOR_NEXT;
      L_STOR_MIN_EXTENTS  := A_STOR_MIN_EXTENTS;
      L_STOR_PCT_INCREASE := A_STOR_PCT_INCREASE;
      L_STOR_PCT_FREE     := A_STOR_PCT_FREE;
      L_STOR_PCT_USED     := A_STOR_PCT_USED;
   END IF;
   
    
   
   
   

   
   
   
   
   
   
   
   
   L_GKRQ_CURSOR := DBMS_SQL.OPEN_CURSOR;
   
   L_SQL_STRING := 'CREATE TABLE utrqgk' || A_GK ||
                   '(' || A_GK || ' VARCHAR2(40),'||
                   'rq VARCHAR2(20),' ||
                   'CONSTRAINT ukrqgk' || A_GK ||
                   ' PRIMARY KEY(' || A_GK ||', rq)' ||
                   ' USING INDEX TABLESPACE '|| L_INDEX_TABLESPACE ||
                   ' STORAGE (INITIAL '      || L_STOR_INITIAL || 
                             ' NEXT '        || L_STOR_NEXT ||
                             ' PCTINCREASE ' || TO_CHAR(L_STOR_PCT_INCREASE) || ') ' ||
                   ' PCTFREE ' || TO_CHAR(L_STOR_PCT_FREE) ;

   IF L_GK_REC.VALUE_UNIQUE = '1' THEN
      L_SQL_STRING :=  L_SQL_STRING || ',CONSTRAINT ucscgk' || A_GK ||
                     ' UNIQUE(' || A_GK || ')'||
                     ' USING INDEX TABLESPACE '|| L_INDEX_TABLESPACE ||
                     ' STORAGE (INITIAL '      || L_STOR_INITIAL || 
                              ' NEXT '         || L_STOR_NEXT ||
                              ' PCTINCREASE '  || TO_CHAR(L_STOR_PCT_INCREASE) || ') ' ||
                     ' PCTFREE ' || TO_CHAR(L_STOR_PCT_FREE) ;
   END IF;
   
   L_SQL_STRING := L_SQL_STRING || ') TABLESPACE '          || L_TABLESPACE || 
                                    ' STORAGE (INITIAL '    || L_STOR_INITIAL || 
                                             ' NEXT '       || L_STOR_NEXT || 
                                             ' PCTINCREASE '|| TO_CHAR(L_STOR_PCT_INCREASE)|| 
                                             ' MINEXTENTS ' || TO_CHAR(L_STOR_MIN_EXTENTS)|| 
                                              ')'           ||
                                    ' PCTFREE ' || TO_CHAR(L_STOR_PCT_FREE) ||
                                    ' PCTUSED ' || TO_CHAR(L_STOR_PCT_USED) ;

   DBMS_SQL.PARSE(L_GKRQ_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   L_RESULT := DBMS_SQL.EXECUTE(L_GKRQ_CURSOR);
   L_TABLE_CREATED := TRUE;   

   
   
   
   
   
   
   
   L_SQL_STRING := 'CREATE INDEX uirqgk'|| A_GK ||
                   ' ON utrqgk' || A_GK || '(rq) ' ||
                   ' STORAGE (INITIAL '    || L_STOR_INITIAL || 
                            ' NEXT '       || L_STOR_NEXT || 
                            ' PCTINCREASE '|| TO_CHAR(L_STOR_PCT_INCREASE)|| 
                            ' MINEXTENTS ' || TO_CHAR(L_STOR_MIN_EXTENTS)|| 
                   ' ) PCTFREE ' || TO_CHAR(L_STOR_PCT_FREE) ||
                   ' TABLESPACE '|| L_INDEX_TABLESPACE;
   DBMS_SQL.PARSE(L_GKRQ_CURSOR, L_SQL_STRING, DBMS_SQL.V7);
   L_RESULT := DBMS_SQL.EXECUTE(L_GKRQ_CURSOR);
   
   DBMS_SQL.CLOSE_CURSOR(L_GKRQ_CURSOR);

   
   UPDATE UTGKRQ
   SET STRUCT_CREATED = '1'
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   
   
   
   L_RESULT := CREATEGROUPKEYRQENTRIES(A_GK);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      L_SQLERRM := 'CreateGroupKeyRqEntries returned '||L_RESULT||' for gk='||A_GK;
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;

   
   L_RESULT := UNAPIGK.CREATEUSERSTRUCTSFORGROUPKEY('RQ', A_GK);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      L_SQLERRM := 'CreateUserStructsForGroupKey returned '||L_RESULT||' for gk_tp=RQ#gk='||A_GK;
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;

   L_EVENT_TP := 'GroupKeyStructuresCreated';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT ('CreateGroupKeyRqStructures', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                    '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   BEGIN
      SELECT LOG_HS
      INTO L_LOG_HS
      FROM UTOBJECTS 
      WHERE OBJECT = 'gkrq';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      
      
      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OBJTP;
      RAISE STPERROR;
   END;
   
   IF NVL(L_LOG_HS, ' ') = '1' THEN
      INSERT INTO UTGKRQHS (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                            WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES (A_GK, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
              'Database objects for group key "'||A_GK||'" are created.', 
              CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
         UNAPIGEN.LOGERROR('CreateGroupKeyRqStructures', SQLERRM);
         UNAPIGEN.LOGERROR('CreateGroupKeyRqStructures', 'HELP for DBA:'||SUBSTR(L_SQL_STRING,1,235));
         IF (LENGTH(L_SQL_STRING)>235) THEN
            UNAPIGEN.LOGERROR('CreateGroupKeyRqStructures', 'HELP for DBA:'||SUBSTR(L_SQL_STRING,236,235));
         END IF;
   END IF;
   IF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('CreateGroupKeyRqStructures', SUBSTR(L_SQLERRM,1,235));
   END IF;
   IF L_GK_CURSOR%ISOPEN THEN
      CLOSE L_GK_CURSOR;
   END IF;
   IF L_TABLE_CREATED THEN
      
      BEGIN
         L_SQL_STRING := 'DROP TABLE utrqgk' || A_GK;
         DBMS_SQL.PARSE(L_GKRQ_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         L_RESULT := DBMS_SQL.EXECUTE(L_GKRQ_CURSOR);
      EXCEPTION
      WHEN OTHERS THEN
         NULL;
      END;
   END IF;
   IF DBMS_SQL.IS_OPEN(L_GKRQ_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_GKRQ_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'CreateGroupKeyRqStructures'));
END CREATEGROUPKEYRQSTRUCTURES;

FUNCTION DELETEGROUPKEYRQSTRUCTURES              
(A_GK    IN    VARCHAR2)                         
RETURN NUMBER IS

A_VERSION         VARCHAR2(20);
L_GKRQ_CURSOR     INTEGER;
L_STRUCT_CREATED  CHAR(1);
L_GK_FOUND        BOOLEAN;
L_LOG_HS          CHAR(1);

CURSOR L_GK_CURSOR IS
   SELECT NVL(STRUCT_CREATED, '0')
   FROM UTGKRQ
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   OPEN L_GK_CURSOR;
   FETCH L_GK_CURSOR
   INTO L_STRUCT_CREATED;
   L_GK_FOUND := L_GK_CURSOR%FOUND;
   CLOSE L_GK_CURSOR;

   IF NOT L_GK_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
      RAISE STPERROR;
   END IF;

   IF NVL(L_STRUCT_CREATED, '0') = '0' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_STRUCTCREATED;
      RAISE STPERROR;
   END IF;

   
   IF UNAPIGEN.ISSYSTEM21CFR11COMPLIANT = UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTALLOWEDIN21CFR11;
      RAISE STPERROR;
   END IF;

      
   L_RESULT := UNAPIGK.DELETEUSERSTRUCTSFORGROUPKEY('RQ', A_GK);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      L_SQLERRM := 'DeleteUserStructsForGroupKey returned '||L_RESULT||' for gk_tp=ST#gk='||A_GK;
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;


   DELETE FROM UTRQGK
   WHERE GK = A_GK;

   BEGIN
      L_GKRQ_CURSOR := DBMS_SQL.OPEN_CURSOR;
      L_SQL_STRING := 'DROP TABLE utrqgk' || A_GK ;
      DBMS_SQL.PARSE(L_GKRQ_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      L_RESULT := DBMS_SQL.EXECUTE(L_GKRQ_CURSOR);
      DBMS_SQL.CLOSE_CURSOR(L_GKRQ_CURSOR);
   EXCEPTION
   WHEN TABLE_DOES_NOT_EXIST THEN
      
      NULL;
   END;

   
   UPDATE UTGKRQ
   SET STRUCT_CREATED = '0'
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   L_EVENT_TP := 'GroupKeyStructuresDeleted';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT ('DeleteGroupKeyRqStructures', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                    '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   BEGIN
      SELECT LOG_HS
      INTO L_LOG_HS
      FROM UTOBJECTS 
      WHERE OBJECT = 'gkrq';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      
      
      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OBJTP;
      RAISE STPERROR;
   END;
   
   IF NVL(L_LOG_HS, ' ') = '1' THEN
      INSERT INTO UTGKRQHS (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                            WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES (A_GK, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
              'Database objects for group key "'||A_GK||'" are deleted.', 
              CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   
   UNAPIGK.DELETEGROUPKEYFROMTASK('rqgk', A_GK);

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('DeleteGroupKeyRqStructures', SQLERRM);
   END IF;
   IF L_GK_CURSOR%ISOPEN THEN
      CLOSE L_GK_CURSOR;
   END IF;
   IF DBMS_SQL.IS_OPEN(L_GKRQ_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_GKRQ_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'DeleteGroupKeyRqStructures'));
END DELETEGROUPKEYRQSTRUCTURES;

FUNCTION CREATEGROUPKEYRQENTRIES                 
(A_GK    IN    VARCHAR2)                         
RETURN NUMBER IS

A_VERSION        VARCHAR2(20);
L_GKRQ_CURSOR  INTEGER;
L_GK_FOUND     BOOLEAN;

CURSOR L_GK_CURSOR IS
   SELECT *
   FROM UTGKRQ
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

L_GK_REC       L_GK_CURSOR%ROWTYPE;

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   OPEN L_GK_CURSOR;
   FETCH L_GK_CURSOR
   INTO L_GK_REC;
   L_GK_FOUND := L_GK_CURSOR%FOUND;
   CLOSE L_GK_CURSOR;

   IF NOT L_GK_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
      RAISE STPERROR;
   END IF;

   IF NVL(L_GK_REC.STRUCT_CREATED, '0') = '0' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_STRUCTCREATED;
      RAISE STPERROR;
   END IF;

   
   
   
   
   L_GKRQ_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'INSERT INTO utrqgk'||A_GK||'('||A_GK||', rq) '||
                   'SELECT value, rq '||
                   'FROM utrqgk '||
                   'WHERE gk = '''||A_GK||''' AND value IS NOT NULL';
   DBMS_SQL.PARSE(L_GKRQ_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   
   BEGIN
      L_RESULT := DBMS_SQL.EXECUTE(L_GKRQ_CURSOR);
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UNIQUEGK;
         RAISE STPERROR;
   END;
   
   DBMS_SQL.CLOSE_CURSOR(L_GKRQ_CURSOR);

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('CreateGroupKeyRqEntries', SQLERRM);
   END IF;
   IF L_GK_CURSOR%ISOPEN THEN
      CLOSE L_GK_CURSOR;
   END IF;
   IF DBMS_SQL.IS_OPEN (L_GKRQ_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_GKRQ_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'CreateGroupKeyRqEntries'));
END CREATEGROUPKEYRQENTRIES;

FUNCTION DELETEGROUPKEYRQENTRIES                 
(A_GK    IN    VARCHAR2)                         
RETURN NUMBER IS

A_VERSION        VARCHAR2(20);
L_GKRQ_CURSOR     INTEGER;
L_STRUCT_CREATED  CHAR(1);
L_GK_FOUND        BOOLEAN;

CURSOR L_GK_CURSOR IS
   SELECT NVL(STRUCT_CREATED, '0')
   FROM UTGKRQ
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   OPEN L_GK_CURSOR;
   FETCH L_GK_CURSOR
   INTO L_STRUCT_CREATED;
   L_GK_FOUND := L_GK_CURSOR%FOUND;
   CLOSE L_GK_CURSOR;

   IF NOT L_GK_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
      RAISE STPERROR;
   END IF;

   IF NVL(L_STRUCT_CREATED,'0') = '0' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_STRUCTCREATED;
      RAISE STPERROR;
   END IF;

   
   IF UNAPIGEN.ISSYSTEM21CFR11COMPLIANT = UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTALLOWEDIN21CFR11;
      RAISE STPERROR;
   END IF;

   DELETE FROM UTRQGK
   WHERE GK = A_GK;

   L_GKRQ_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'TRUNCATE TABLE utrqgk' || A_GK;
   DBMS_SQL.PARSE(L_GKRQ_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   L_RESULT := DBMS_SQL.EXECUTE(L_GKRQ_CURSOR);

   DBMS_SQL.CLOSE_CURSOR(L_GKRQ_CURSOR);

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('DeleteGroupKeyRqEntries', SQLERRM);
   END IF;
   IF L_GK_CURSOR%ISOPEN THEN
      CLOSE L_GK_CURSOR;
   END IF;
   IF DBMS_SQL.IS_OPEN(L_GKRQ_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_GKRQ_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'DeleteGroupKeyRqEntries'));
END DELETEGROUPKEYRQENTRIES;

FUNCTION GETGROUPKEYWSLIST                                 
(A_GK                  OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_DESCRIPTION         OUT     UNAPIGEN.VC40_TABLE_TYPE,   
 A_NR_OF_ROWS          IN OUT  NUMBER,                     
 A_WHERE_CLAUSE        IN      VARCHAR2,                   
 A_NEXT_ROWS           IN      NUMBER)                     
RETURN NUMBER IS

L_GK           VARCHAR2(20);
L_DESCRIPTION  VARCHAR2(40);

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_GK_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_GK_CURSOR);
         P_GK_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_GK_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
         L_WHERE_CLAUSE := 'ORDER BY gk, version'; 
      ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
         L_WHERE_CLAUSE := 'WHERE version_is_current = ''1'' '||
                           'AND gk = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                           ''' ORDER BY gk, version';
      ELSE
         L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
      END IF;

      IF P_GK_CURSOR IS NULL THEN
         P_GK_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;

      L_SQL_STRING:= 'SELECT gk, description FROM dd'||UNAPIGEN.P_DD||'.uvgkws ' ||
                      L_WHERE_CLAUSE;
      DBMS_SQL.PARSE(P_GK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

      DBMS_SQL.DEFINE_COLUMN(P_GK_CURSOR, 1, L_GK, 20);
      DBMS_SQL.DEFINE_COLUMN(P_GK_CURSOR, 2, L_DESCRIPTION, 40);
      L_RESULT := DBMS_SQL.EXECUTE(P_GK_CURSOR);
   END IF;

   L_RESULT := DBMS_SQL.FETCH_ROWS(P_GK_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_GK_CURSOR, 1, L_GK);
      DBMS_SQL.COLUMN_VALUE(P_GK_CURSOR, 2, L_DESCRIPTION);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_GK(L_FETCHED_ROWS) := L_GK;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_GK_CURSOR);
      END IF;
   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_GK_CURSOR);
       P_GK_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   END IF;

   IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_GK_CURSOR);
      P_GK_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetGroupKeyWsList', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (P_GK_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (P_GK_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETGROUPKEYWSLIST;

FUNCTION GETGROUPKEYWS                                  
(A_GK               OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_DESCRIPTION      OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_IS_PROTECTED     OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_VALUE_UNIQUE     OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_SINGLE_VALUED    OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_NEW_VAL_ALLOWED  OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_MANDATORY        OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_STRUCT_CREATED   OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_INHERIT_GK       OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_VALUE_LIST_TP    OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_DEFAULT_VALUE    OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_DSP_ROWS         OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_VAL_LENGTH       OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_VAL_START        OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_ASSIGN_TP        OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_ASSIGN_ID        OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_Q_TP             OUT    UNAPIGEN.CHAR2_TABLE_TYPE,   
 A_Q_ID             OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_Q_CHECK_AU       OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_Q_AU             OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_NR_OF_ROWS       IN OUT NUMBER,                      
 A_WHERE_CLAUSE     IN     VARCHAR2)                    
RETURN NUMBER IS

L_GK                VARCHAR2(20);
L_DESCRIPTION       VARCHAR2(40);
L_IS_PROTECTED      CHAR(1);
L_VALUE_UNIQUE      CHAR(1);
L_SINGLE_VALUED     CHAR(1);
L_NEW_VAL_ALLOWED   CHAR(1);
L_MANDATORY         CHAR(1);
L_STRUCT_CREATED    CHAR(1);
L_INHERIT_GK        CHAR(1);
L_VALUE_LIST_TP     CHAR(1);
L_DEFAULT_VALUE     VARCHAR2(40);
L_DSP_ROWS          NUMBER(3);
L_VAL_LENGTH        NUMBER(3);
L_VAL_START         NUMBER(3);
L_ASSIGN_TP         CHAR(1);
L_ASSIGN_ID         VARCHAR2(20);
L_Q_TP              CHAR(2);
L_Q_ID              VARCHAR2(20);
L_Q_CHECK_AU        CHAR(1);
L_Q_AU              VARCHAR2(20);
L_GK_CURSOR         INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'ORDER BY gk, version'; 
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := 'WHERE version_is_current = ''1'' '||
                        'AND gk = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                        ''' ORDER BY gk, version';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_GK_CURSOR := DBMS_SQL.OPEN_CURSOR;

   L_SQL_STRING := 'SELECT gk, description, is_protected, value_unique, ' ||
                   'single_valued, new_val_allowed, mandatory, struct_created, inherit_gk,' ||
                   'value_list_tp, default_value, dsp_rows, val_length, val_start, ' ||
                   'assign_tp, assign_id, q_tp, q_id, q_check_au, q_au ' ||
                   'FROM dd' || UNAPIGEN.P_DD || '.uvgkws ' || L_WHERE_CLAUSE;
   DBMS_SQL.PARSE(L_GK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 1, L_GK, 20);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 2, L_DESCRIPTION, 40);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 3, L_IS_PROTECTED, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 4, L_VALUE_UNIQUE, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 5, L_SINGLE_VALUED, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 6, L_NEW_VAL_ALLOWED, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 7, L_MANDATORY, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 8, L_STRUCT_CREATED, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 9, L_INHERIT_GK, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 10, L_VALUE_LIST_TP, 1);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 11, L_DEFAULT_VALUE, 40);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 12, L_DSP_ROWS);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 13, L_VAL_LENGTH);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 14, L_VAL_START);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 15, L_ASSIGN_TP, 1);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 16, L_ASSIGN_ID, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 17, L_Q_TP, 2);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 18, L_Q_ID, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 19, L_Q_CHECK_AU, 1);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 20, L_Q_AU, 20);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_GK_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 1, L_GK);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 2, L_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 3, L_IS_PROTECTED);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 4, L_VALUE_UNIQUE);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 5, L_SINGLE_VALUED);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 6, L_NEW_VAL_ALLOWED);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 7, L_MANDATORY);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 8, L_STRUCT_CREATED);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 9, L_INHERIT_GK);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 10, L_VALUE_LIST_TP);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 11, L_DEFAULT_VALUE);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 12, L_DSP_ROWS);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 13, L_VAL_LENGTH);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 14, L_VAL_START);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 15, L_ASSIGN_TP);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 16, L_ASSIGN_ID);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 17, L_Q_TP);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 18, L_Q_ID);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 19, L_Q_CHECK_AU);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 20, L_Q_AU);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_GK (L_FETCHED_ROWS) := L_GK;
      A_DESCRIPTION (L_FETCHED_ROWS) := L_DESCRIPTION;
      A_IS_PROTECTED (L_FETCHED_ROWS) := L_IS_PROTECTED;
      A_VALUE_UNIQUE (L_FETCHED_ROWS) := L_VALUE_UNIQUE;
      A_SINGLE_VALUED (L_FETCHED_ROWS) := L_SINGLE_VALUED;
      A_NEW_VAL_ALLOWED (L_FETCHED_ROWS) := L_NEW_VAL_ALLOWED;
      A_MANDATORY (L_FETCHED_ROWS) := L_MANDATORY;
      A_STRUCT_CREATED (L_FETCHED_ROWS) := L_STRUCT_CREATED;
      A_INHERIT_GK (L_FETCHED_ROWS) := L_INHERIT_GK;
      A_VALUE_LIST_TP (L_FETCHED_ROWS) := L_VALUE_LIST_TP;
      A_DEFAULT_VALUE (L_FETCHED_ROWS) := L_DEFAULT_VALUE;
      A_DSP_ROWS(L_FETCHED_ROWS) := L_DSP_ROWS;
      A_VAL_LENGTH(L_FETCHED_ROWS) := L_VAL_LENGTH;
      A_VAL_START(L_FETCHED_ROWS) := L_VAL_START;
      A_ASSIGN_TP(L_FETCHED_ROWS) := L_ASSIGN_TP;
      A_ASSIGN_ID(L_FETCHED_ROWS) := L_ASSIGN_ID;
      A_Q_TP(L_FETCHED_ROWS) := L_Q_TP;
      A_Q_ID(L_FETCHED_ROWS) := L_Q_ID;
      A_Q_CHECK_AU(L_FETCHED_ROWS) := L_Q_CHECK_AU;
      A_Q_AU(L_FETCHED_ROWS) := L_Q_AU;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_GK_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_GK_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetGroupKeyWs', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
     IF DBMS_SQL.IS_OPEN (L_GK_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_GK_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETGROUPKEYWS;

FUNCTION GETGROUPKEYWSVALUE                            
(A_GK               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_VALUE            OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_NR_OF_ROWS       IN OUT  NUMBER,                    
 A_WHERE_CLAUSE     IN      VARCHAR2)                  
RETURN NUMBER IS

L_GK              VARCHAR2(20);
L_VALUE           VARCHAR2(40);
L_GK_CURSOR       INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'ORDER BY list.gk, list.version, list.seq'; 
   ELSIF
      UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := ', dd'||UNAPIGEN.P_DD||'.uvgkws ws WHERE ws.version_is_current = ''1'' '||
                        'AND list.version = ws.version '||
                        'AND list.gk = ws.gk '||
                        'AND list.gk = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                        ''' ORDER BY list.seq';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_GK_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT list.gk, list.value FROM dd'||UNAPIGEN.P_DD||'.uvgkwslist list ' || L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_GK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 1, L_GK, 20);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 2, L_VALUE, 40);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_GK_CURSOR);

   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 1, L_GK);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 2, L_VALUE);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_GK(L_FETCHED_ROWS) := L_GK;
      A_VALUE(L_FETCHED_ROWS) := L_VALUE;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_GK_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_GK_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;
   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetGroupKeyWsValue', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (L_GK_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_GK_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETGROUPKEYWSVALUE;

FUNCTION GETGROUPKEYWSSQL                              
(A_GK              OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_SQLTEXT         OUT     UNAPIGEN.VC255_TABLE_TYPE,  
 A_NR_OF_ROWS      IN OUT  NUMBER,                     
 A_WHERE_CLAUSE    IN      VARCHAR2)                   
RETURN NUMBER IS

L_GK              VARCHAR2(20);
L_SQLTEXT         VARCHAR2(255);
L_GK_CURSOR       INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'ORDER BY sql.gk, sql.version, sql.seq'; 
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := ', dd'||UNAPIGEN.P_DD||'.uvgkws ws WHERE ws.version_is_current = ''1'' '||
                        'AND sql.version = ws.version '||
                        'AND sql.gk = ws.gk '||
                        'AND sql.gk = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                        ''' ORDER BY sql.seq';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_GK_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT sql.gk, sql.sqltext FROM dd'||UNAPIGEN.P_DD||'.uvgkwssql sql ' || L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_GK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 1, L_GK, 20);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 2, L_SQLTEXT, 255);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_GK_CURSOR);

   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 1, L_GK);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 2, L_SQLTEXT);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_GK(L_FETCHED_ROWS) := L_GK;
      A_SQLTEXT(L_FETCHED_ROWS) := L_SQLTEXT;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_GK_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_GK_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetGroupKeyWsSql', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (L_GK_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_GK_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETGROUPKEYWSSQL;

FUNCTION SAVEGROUPKEYWS                               
(A_GK               IN   VARCHAR2,                    
 A_DESCRIPTION      IN   VARCHAR2,                    
 A_IS_PROTECTED     IN   CHAR,                        
 A_VALUE_UNIQUE     IN   CHAR,                        
 A_SINGLE_VALUED    IN   CHAR,                        
 A_NEW_VAL_ALLOWED  IN   CHAR,                        
 A_MANDATORY        IN   CHAR,                        
 A_STRUCT_CREATED   IN   CHAR,                        
 A_INHERIT_GK       IN   CHAR,                        
 A_VALUE_LIST_TP    IN   CHAR,                        
 A_DEFAULT_VALUE    IN   VARCHAR2,                    
 A_DSP_ROWS         IN   NUMBER,                      
 A_VAL_LENGTH       IN   NUMBER,                      
 A_VAL_START        IN   NUMBER,                      
 A_ASSIGN_TP        IN   CHAR,                        
 A_ASSIGN_ID        IN   VARCHAR2,                    
 A_Q_TP             IN   CHAR,                        
 A_Q_ID             IN   VARCHAR2,                    
 A_Q_CHECK_AU       IN   CHAR,                        
 A_Q_AU             IN   VARCHAR2,                    
 A_VALUE            IN   UNAPIGEN.VC40_TABLE_TYPE,    
 A_SQLTEXT          IN   UNAPIGEN.VC255_TABLE_TYPE,   
 A_NR_OF_ROWS       IN   NUMBER,                      
 A_MODIFY_REASON    IN   VARCHAR2)                    
RETURN NUMBER IS

A_VERSION        VARCHAR2(20);
L_FOUND          BOOLEAN;
L_SEQ_NO         NUMBER;
L_GK             VARCHAR2(20);
L_STRUCT_CREATED CHAR(1);
L_LC             VARCHAR2(2);
L_LC_VERSION     VARCHAR2(20);
L_SS             VARCHAR2(2);
L_LOG_HS         CHAR(1);
L_ALLOW_MODIFY   CHAR(1);
L_ACTIVE         CHAR(1);
L_RULE_NR        NUMBER(5);

CURSOR L_GK_CURSOR IS
   SELECT GK 
   FROM UTGKWS
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_GK, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_IS_PROTECTED, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_PROTECTED;
      RAISE STPERROR;
   END IF;

   IF NVL(A_SINGLE_VALUED, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SINGLEVALUED;
      RAISE STPERROR;
   END IF;

   IF NVL(A_NEW_VAL_ALLOWED, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NEWVALALLOWED;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VALUE_UNIQUE, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UNIQUEGK;
      RAISE STPERROR;
   END IF;

   IF NVL(A_MANDATORY, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_MANDATORY;
      RAISE STPERROR;
   END IF;

   IF NVL(A_INHERIT_GK, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INHERITGK;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VALUE_LIST_TP, ' ') NOT IN ('F', 'Q') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_VALUELISTTP;
      RAISE STPERROR;
   END IF;

   IF NVL(A_ASSIGN_TP, ' ') = 'F' AND
      NVL(A_ASSIGN_ID, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   
   
   
   
   L_LC := '@L';
   L_SS := '@A';

   BEGIN
      SELECT VERSION
      INTO L_LC_VERSION
      FROM UTLC
      WHERE LC = '@L'
      AND VERSION_IS_CURRENT = '1';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOCURRENTLCVERSION;
      RAISE STPERROR;
   END;

   BEGIN
      SELECT ALLOW_MODIFY, ACTIVE
      INTO L_ALLOW_MODIFY, L_ACTIVE
      FROM UTSS
      WHERE SS = '@A';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR;
   END;
   
   BEGIN
      SELECT LOG_HS
      INTO L_LOG_HS
      FROM UTOBJECTS 
      WHERE OBJECT = 'gkws';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      
      
      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OBJTP;
      RAISE STPERROR;
   END;
   

   OPEN L_GK_CURSOR;
   FETCH L_GK_CURSOR
   INTO L_GK;
   IF L_GK_CURSOR%FOUND THEN
      L_FOUND := TRUE;
   ELSE
      L_FOUND := FALSE;
   END IF;
   CLOSE L_GK_CURSOR;

   IF L_FOUND THEN
      DELETE FROM UTGKWS
      WHERE VERSION = A_VERSION
        AND GK = A_GK;

      DELETE FROM UTGKWSLIST
      WHERE VERSION = A_VERSION
        AND GK = A_GK;

      DELETE FROM UTGKWSSQL
      WHERE VERSION = A_VERSION
        AND GK = A_GK;
        
      L_EVENT_TP := 'GroupKeyUpdated';
   ELSE
      L_EVENT_TP := 'GroupKeyCreated';
   END IF;
   
   OPEN UNAPIGK.L_DBA_OBJECTS_CURSOR ('UTWSGK'||A_GK);
   FETCH UNAPIGK.L_DBA_OBJECTS_CURSOR INTO L_STRUCT_CREATED;
   CLOSE UNAPIGK.L_DBA_OBJECTS_CURSOR;

   INSERT INTO UTGKWS (GK, VERSION, VERSION_IS_CURRENT, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ, EFFECTIVE_TILL, EFFECTIVE_TILL_TZ, DESCRIPTION, 
                       IS_PROTECTED, VALUE_UNIQUE, SINGLE_VALUED, NEW_VAL_ALLOWED, MANDATORY,
                       STRUCT_CREATED, INHERIT_GK, VALUE_LIST_TP, DEFAULT_VALUE, DSP_ROWS, VAL_LENGTH, 
                       VAL_START, ASSIGN_TP, ASSIGN_ID, Q_TP, Q_ID, Q_CHECK_AU, Q_AU, 
                       LOG_HS, ALLOW_MODIFY, ACTIVE, LC, LC_VERSION, SS)
   VALUES (A_GK, A_VERSION, '1', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, NULL, A_DESCRIPTION, 
           A_IS_PROTECTED, A_VALUE_UNIQUE, A_SINGLE_VALUED, A_NEW_VAL_ALLOWED, A_MANDATORY, 
           L_STRUCT_CREATED, A_INHERIT_GK, A_VALUE_LIST_TP, A_DEFAULT_VALUE, A_DSP_ROWS, A_VAL_LENGTH, 
           A_VAL_START, A_ASSIGN_TP, A_ASSIGN_ID, A_Q_TP, A_Q_ID, A_Q_CHECK_AU, A_Q_AU, 
           L_LOG_HS, L_ALLOW_MODIFY, L_ACTIVE, L_LC, L_LC_VERSION, L_SS);

   IF A_VALUE_LIST_TP = 'Q' THEN
      FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
         IF NVL(A_SQLTEXT(L_SEQ_NO), ' ') <> ' ' THEN
            INSERT INTO UTGKWSSQL(GK, VERSION, SEQ, SQLTEXT)
            VALUES (A_GK, A_VERSION, L_SEQ_NO, A_SQLTEXT(L_SEQ_NO));
         END IF;
      END LOOP;
   ELSIF A_VALUE_LIST_TP = 'F' THEN
      FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
         IF NVL(A_VALUE(L_SEQ_NO), ' ') <> ' ' THEN
            INSERT INTO UTGKWSLIST(GK, VERSION, SEQ, VALUE)
            VALUES (A_GK, A_VERSION, L_SEQ_NO, A_VALUE(L_SEQ_NO));
         END IF;
      END LOOP;
   END IF;

   
   
   
   
   DELETE FROM UTEVRULES
   WHERE CUSTOM = '0'
     AND EV_TP IN ('WorksheetCreated', 'WorksheetUpdated')
     AND AF LIKE '%''wsgk''%'                        
     AND AF LIKE '%'''||A_GK||'''%';
   
   DELETE FROM UTEVRULES
   WHERE CUSTOM = '0'
     AND EV_TP IN ('WorksheetCreated', 'WorksheetUpdated')
     AND AF LIKE 'UNGKASSIGN%'                        
     AND AF LIKE '%'''||A_GK||'''%';

   
   SELECT NVL(MAX(RULE_NR),0)+1
   INTO L_RULE_NR
   FROM UTEVRULES;
   
   IF A_ASSIGN_TP = 'T' THEN
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR, 'ws', 'WorksheetCreated', 
             'AssignGroupKey(''wsgk'', '''||A_GK||''', ''~ws@ws~'', '||A_VAL_START||', '||A_VAL_LENGTH||')', 
             '0');
      
      
      
      
      
   ELSIF A_ASSIGN_TP = 'C' THEN
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR, 'ws', 'WorksheetCreated', 
             'AssignGroupKey(''wsgk'', '''||A_GK||''', ''~ws@ws~'', '||A_VAL_START||', '||A_VAL_LENGTH||')', 
             '0');
   ELSIF A_ASSIGN_TP = 'F' THEN
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR, 'ws', 'WorksheetCreated', 
             'UNGKASSIGN.'||A_ASSIGN_ID||'('''||A_GK||''')', '0');
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR+1, 'ws', 'WorksheetUpdated', 
             'UNGKASSIGN.'||A_ASSIGN_ID||'('''||A_GK||''')', '0');
   END IF;

   
   L_RULE_NR := 0;
   FOR C_EVRULE_REC IN (SELECT *
                        FROM UTEVRULES
                        ORDER BY RULE_NR) LOOP
      L_RULE_NR := L_RULE_NR + 1;
      IF C_EVRULE_REC.RULE_NR <> L_RULE_NR THEN
         UPDATE UTEVRULES
         SET RULE_NR = L_RULE_NR
         WHERE RULE_NR = C_EVRULE_REC.RULE_NR;
      END IF;
   END LOOP;

   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT ('SaveGroupKeyWs', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                    '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

















   IF NVL(L_LOG_HS, ' ') = '1' THEN
      IF L_EVENT_TP = 'GroupKeyCreated' THEN
         INSERT INTO UTGKWSHS (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                               WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_GK, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'group key "'||A_GK||'" is created.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      ELSE
         INSERT INTO UTGKWSHS (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                               WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_GK, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'group key "'||A_GK||'" is updated.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   ELSE
      
      
      IF L_EVENT_TP = 'GroupKeyCreated' THEN
         INSERT INTO UTGKWSHS (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                               WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_GK, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'group key "'||A_GK||'" is created.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   END IF;

   
   
   
   L_EV_SEQ_NR := -1;
   L_EVENT_TP := 'LoadEvRules';
   L_RESULT := UNAPIEV.BROADCASTEVENT ('SaveGroupKeyWs', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                       '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   
   UNAPIGEN.NOTIFYTASKGKTODBA('WS',
                               A_GK,
                               A_VERSION,
                               A_VALUE_UNIQUE);

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveGroupKeyWs',SQLERRM);
   END IF;
   IF UNAPIGK.L_DBA_OBJECTS_CURSOR%ISOPEN THEN
      CLOSE UNAPIGK.L_DBA_OBJECTS_CURSOR;
   END IF;   
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveGroupKeyWs'));
END SAVEGROUPKEYWS;

FUNCTION DELETEGROUPKEYWS                              
(A_GK               IN     VARCHAR2,                   
 A_MODIFY_REASON    IN     VARCHAR2)                   
RETURN NUMBER IS

A_VERSION        VARCHAR2(20);

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_GK, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   
   IF UNAPIGEN.ISSYSTEM21CFR11COMPLIANT = UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTALLOWEDIN21CFR11;
      RAISE STPERROR;
   END IF;

   
   L_RESULT := DELETEGROUPKEYWSSTRUCTURES(A_GK);
   IF L_RESULT <> 0 AND
      L_RESULT <> UNAPIGEN.DBERR_STRUCTCREATED THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   ELSE
      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   DELETE FROM UTGKWSLIST
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   DELETE FROM UTGKWSSQL
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   DELETE FROM UTGKWS
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   DELETE FROM UTGKWSHS
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   
   
   DELETE FROM UTEVRULES
   WHERE CUSTOM = '0'
     AND EV_TP IN ('WorksheetCreated', 'WorksheetUpdated')
     AND AF LIKE '%''wsgk''%'                        
     AND AF LIKE '%'''||A_GK||'''%';
   
   DELETE FROM UTEVRULES
   WHERE CUSTOM = '0'
     AND EV_TP IN ('WorksheetCreated', 'WorksheetUpdated')
     AND AF LIKE 'UNGKASSIGN%'                        
     AND AF LIKE '%'''||A_GK||'''%';

   L_EVENT_TP := 'ObjectDeleted';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT('DeleteGroupKeyWs', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                   '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);

   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   
   
   
   L_EV_SEQ_NR := -1;
   L_EVENT_TP := 'LoadEvRules';
   L_RESULT := UNAPIEV.BROADCASTEVENT ('DeleteGroupKeyWs', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                       '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('DeleteGroupKeyWs', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'DeleteGroupKeyWs'));
END DELETEGROUPKEYWS;

FUNCTION CREATEGROUPKEYWSSTRUCTURES                
(A_GK                IN    VARCHAR2,               
 A_STOR_INITIAL      IN    VARCHAR2,               
 A_STOR_NEXT         IN    VARCHAR2,               
 A_STOR_MIN_EXTENTS  IN    NUMBER,                 
 A_STOR_PCT_INCREASE IN    NUMBER,                 
 A_STOR_PCT_FREE     IN    NUMBER,                 
 A_STOR_PCT_USED     IN    NUMBER                  
)
RETURN NUMBER IS

A_VERSION            VARCHAR2(20);
L_GKWS_CURSOR        INTEGER;
L_GK_FOUND           BOOLEAN;
L_LOG_HS             CHAR(1);
L_STOR_INITIAL       VARCHAR2(20);
L_STOR_NEXT          VARCHAR2(20);
L_STOR_MIN_EXTENTS   NUMBER; 
L_STOR_PCT_INCREASE  NUMBER;
L_STOR_PCT_FREE      NUMBER;
L_STOR_PCT_USED      NUMBER;

L_TABLE_CREATED      BOOLEAN;
L_TABLESPACE         VARCHAR2(40);
L_INDEX_TABLESPACE   VARCHAR2(40);

CURSOR L_GK_CURSOR IS
   SELECT *
   FROM UTGKWS
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

L_GK_REC       L_GK_CURSOR%ROWTYPE;

BEGIN

   L_SQLERRM := NULL;
   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
   
   L_TABLE_CREATED := FALSE;
   
   IF ( A_STOR_INITIAL IS NULL ) THEN
      L_RET_CODE := UNAPIGK.INITGROUPKEYDEFSTORAGE('WS', 
                                                   L_STOR_INITIAL, 
                                                   L_STOR_NEXT, 
                                                   L_STOR_MIN_EXTENTS, 
                                                   L_STOR_PCT_INCREASE, 
                                                   L_STOR_PCT_FREE, 
                                                   L_STOR_PCT_USED);
   ELSE
      L_STOR_INITIAL      := A_STOR_INITIAL;
      L_STOR_NEXT         := A_STOR_NEXT;
      L_STOR_MIN_EXTENTS  := A_STOR_MIN_EXTENTS;
      L_STOR_PCT_INCREASE := A_STOR_PCT_INCREASE;
      L_STOR_PCT_FREE     := A_STOR_PCT_FREE;
      L_STOR_PCT_USED     := A_STOR_PCT_USED;
   END IF;
   
   OPEN L_GK_CURSOR;
   FETCH L_GK_CURSOR
   INTO L_GK_REC;
   L_GK_FOUND := L_GK_CURSOR%FOUND;
   CLOSE L_GK_CURSOR;

   IF NOT L_GK_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
      RAISE STPERROR;
   END IF;

   IF NVL(L_GK_REC.STRUCT_CREATED, '0') = '1' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_STRUCTCREATED;
      RAISE STPERROR;
   END IF;

   OPEN L_TABLESPACE_CURSOR ('UTWS');
   FETCH L_TABLESPACE_CURSOR 
      INTO L_TABLESPACE;
   CLOSE L_TABLESPACE_CURSOR;

   OPEN L_INDEX_TABLESPACE_CURSOR ('UKWS');
   FETCH L_INDEX_TABLESPACE_CURSOR 
      INTO L_INDEX_TABLESPACE;
   CLOSE L_INDEX_TABLESPACE_CURSOR;
    
    
   
   
   

   
   
   
   
   
   
   
   
   L_GKWS_CURSOR := DBMS_SQL.OPEN_CURSOR;
   
   L_SQL_STRING := 'CREATE TABLE utwsgk' || A_GK ||
                   '(' || A_GK || ' VARCHAR2(40),'||
                   'ws VARCHAR2(20),' ||
                   'CONSTRAINT ukwsgk' || A_GK ||
                   ' PRIMARY KEY(' || A_GK ||', ws)' ||
                   ' USING INDEX TABLESPACE '|| L_INDEX_TABLESPACE ||
                   ' STORAGE (INITIAL '      || L_STOR_INITIAL || 
                             ' NEXT '        || L_STOR_NEXT ||
                             ' PCTINCREASE ' || TO_CHAR(L_STOR_PCT_INCREASE) || ') ' ||
                   ' PCTFREE ' || TO_CHAR(L_STOR_PCT_FREE) ;

   IF L_GK_REC.VALUE_UNIQUE = '1' THEN
      L_SQL_STRING :=  L_SQL_STRING || ',CONSTRAINT ucwsgk' || A_GK ||
                     ' UNIQUE(' || A_GK || ')'||
                     ' USING INDEX TABLESPACE '|| L_INDEX_TABLESPACE ||
                     ' STORAGE (INITIAL '      || L_STOR_INITIAL || 
                             ' NEXT '          || L_STOR_NEXT ||
                             ' PCTINCREASE '   || TO_CHAR(L_STOR_PCT_INCREASE) || ') ' ||
                     ' PCTFREE ' || TO_CHAR(L_STOR_PCT_FREE) ;
   END IF;
   
   L_SQL_STRING := L_SQL_STRING || ') TABLESPACE '          || L_TABLESPACE || 
                                    ' STORAGE (INITIAL '    || L_STOR_INITIAL || 
                                             ' NEXT '       || L_STOR_NEXT || 
                                             ' PCTINCREASE '|| TO_CHAR(L_STOR_PCT_INCREASE)|| 
                                             ' MINEXTENTS ' || TO_CHAR(L_STOR_MIN_EXTENTS)|| 
                                              ')'           ||
                                    ' PCTFREE ' || TO_CHAR(L_STOR_PCT_FREE) ||
                                    ' PCTUSED ' || TO_CHAR(L_STOR_PCT_USED) ;

   DBMS_SQL.PARSE(L_GKWS_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   L_RESULT := DBMS_SQL.EXECUTE(L_GKWS_CURSOR);
   L_TABLE_CREATED := TRUE;

   
   
   
   
   
   
   L_SQL_STRING := 'CREATE INDEX uiwsgk'|| A_GK ||
                   ' ON utwsgk' || A_GK || '(ws) ' ||
                   ' STORAGE (INITIAL '    || L_STOR_INITIAL || 
                            ' NEXT '       || L_STOR_NEXT || 
                            ' PCTINCREASE '|| TO_CHAR(L_STOR_PCT_INCREASE)|| 
                            ' MINEXTENTS ' || TO_CHAR(L_STOR_MIN_EXTENTS)|| 
                   ' ) PCTFREE ' || TO_CHAR(L_STOR_PCT_FREE) ||
                   ' TABLESPACE '|| L_INDEX_TABLESPACE;
   DBMS_SQL.PARSE(L_GKWS_CURSOR, L_SQL_STRING, DBMS_SQL.V7);
   L_RESULT := DBMS_SQL.EXECUTE(L_GKWS_CURSOR);
   
   DBMS_SQL.CLOSE_CURSOR(L_GKWS_CURSOR);

   
   UPDATE UTGKWS
   SET STRUCT_CREATED = '1'
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   
   
   
   L_RESULT := CREATEGROUPKEYWSENTRIES(A_GK);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      L_SQLERRM := 'CreateGroupKeyWsEntries returned '||L_RESULT||' for gk='||A_GK;
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;

   
   L_RESULT := UNAPIGK.CREATEUSERSTRUCTSFORGROUPKEY('WS', A_GK);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      L_SQLERRM := 'CreateUserStructsForGroupKey returned '||L_RESULT||' for gk_tp=WS#gk='||A_GK;
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;

   L_EVENT_TP := 'GroupKeyStructuresCreated';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT ('CreateGroupKeyWsStructures', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                    '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   BEGIN
      SELECT LOG_HS
      INTO L_LOG_HS
      FROM UTOBJECTS 
      WHERE OBJECT = 'gkws';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      
      
      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OBJTP;
      RAISE STPERROR;
   END;
   
   IF NVL(L_LOG_HS, ' ') = '1' THEN
      INSERT INTO UTGKWSHS (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                            WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES (A_GK, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
              'Database objects for group key "'||A_GK||'" are created.', 
              CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('CreateGroupKeyWsStructures', SQLERRM);
      UNAPIGEN.LOGERROR('CreateGroupKeyWsStructures', 'HELP for DBA:'||SUBSTR(L_SQL_STRING,1,235));
      IF (LENGTH(L_SQL_STRING)>235) THEN
         UNAPIGEN.LOGERROR('CreateGroupKeyWsStructures', 'HELP for DBA:'||SUBSTR(L_SQL_STRING,236,235));
      END IF;
   END IF;
   IF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('CreateGroupKeyWsStructures', SUBSTR(L_SQLERRM,1,235));
   END IF;
   IF L_GK_CURSOR%ISOPEN THEN
      CLOSE L_GK_CURSOR;
   END IF;
   IF L_TABLE_CREATED THEN
      
      BEGIN
         L_SQL_STRING := 'DROP TABLE utwsgk' || A_GK;
         DBMS_SQL.PARSE(L_GKWS_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         L_RESULT := DBMS_SQL.EXECUTE(L_GKWS_CURSOR);
      EXCEPTION
      WHEN OTHERS THEN
         NULL;
      END;
   END IF;
   IF DBMS_SQL.IS_OPEN(L_GKWS_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_GKWS_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'CreateGroupKeyWsStructures'));
END CREATEGROUPKEYWSSTRUCTURES;

FUNCTION DELETEGROUPKEYWSSTRUCTURES              
(A_GK    IN    VARCHAR2)                         
RETURN NUMBER IS

A_VERSION         VARCHAR2(20);
L_GKWS_CURSOR     INTEGER;
L_STRUCT_CREATED  CHAR(1);
L_GK_FOUND        BOOLEAN;
L_LOG_HS          CHAR(1);

CURSOR L_GK_CURSOR IS
   SELECT NVL(STRUCT_CREATED, '0')
   FROM UTGKWS
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   OPEN L_GK_CURSOR;
   FETCH L_GK_CURSOR
   INTO L_STRUCT_CREATED;
   L_GK_FOUND := L_GK_CURSOR%FOUND;
   CLOSE L_GK_CURSOR;

   IF NOT L_GK_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
      RAISE STPERROR;
   END IF;

   IF NVL(L_STRUCT_CREATED, '0') = '0' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_STRUCTCREATED;
      RAISE STPERROR;
   END IF;

   
   IF UNAPIGEN.ISSYSTEM21CFR11COMPLIANT = UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTALLOWEDIN21CFR11;
      RAISE STPERROR;
   END IF;

      
   L_RESULT := UNAPIGK.DELETEUSERSTRUCTSFORGROUPKEY('WS', A_GK);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      L_SQLERRM := 'DeleteUserStructsForGroupKey returned '||L_RESULT||' for gk_tp=ST#gk='||A_GK;
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;


   DELETE FROM UTWSGK
   WHERE GK = A_GK;

   BEGIN
      L_GKWS_CURSOR := DBMS_SQL.OPEN_CURSOR;
      L_SQL_STRING := 'DROP TABLE utwsgk' || A_GK ;
      DBMS_SQL.PARSE(L_GKWS_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      L_RESULT := DBMS_SQL.EXECUTE(L_GKWS_CURSOR);
      DBMS_SQL.CLOSE_CURSOR(L_GKWS_CURSOR);
   EXCEPTION
   WHEN TABLE_DOES_NOT_EXIST THEN
      
      NULL;
   END;

   
   UNAPIGK.DELETEGROUPKEYFROMTASK('wsgk', A_GK);

   
   UPDATE UTGKWS
   SET STRUCT_CREATED = '0'
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   L_EVENT_TP := 'GroupKeyStructuresDeleted';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT ('DeleteGroupKeyWsStructures', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                    '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   BEGIN
      SELECT LOG_HS
      INTO L_LOG_HS
      FROM UTOBJECTS 
      WHERE OBJECT = 'gkws';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      
      
      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OBJTP;
      RAISE STPERROR;
   END;
   
   IF NVL(L_LOG_HS, ' ') = '1' THEN
      INSERT INTO UTGKWSHS (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                            WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES (A_GK, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
              'Database objects for group key "'||A_GK||'" are deleted.', 
              CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('DeleteGroupKeyWsStructures', SQLERRM);
   END IF;
   IF L_GK_CURSOR%ISOPEN THEN
      CLOSE L_GK_CURSOR;
   END IF;
   IF DBMS_SQL.IS_OPEN(L_GKWS_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_GKWS_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'DeleteGroupKeyWsStructures'));
END DELETEGROUPKEYWSSTRUCTURES;

FUNCTION CREATEGROUPKEYWSENTRIES                 
(A_GK    IN    VARCHAR2)                         
RETURN NUMBER IS

A_VERSION      VARCHAR2(20);
L_GKWS_CURSOR  INTEGER;
L_GK_FOUND     BOOLEAN;

CURSOR L_GK_CURSOR IS
   SELECT *
   FROM UTGKWS
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

L_GK_REC       L_GK_CURSOR%ROWTYPE;

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   OPEN L_GK_CURSOR;
   FETCH L_GK_CURSOR
   INTO L_GK_REC;
   L_GK_FOUND := L_GK_CURSOR%FOUND;
   CLOSE L_GK_CURSOR;

   IF NOT L_GK_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
      RAISE STPERROR;
   END IF;

   IF NVL(L_GK_REC.STRUCT_CREATED, '0') = '0' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_STRUCTCREATED;
      RAISE STPERROR;
   END IF;

   
   
   
   
   L_GKWS_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'INSERT INTO utwsgk'||A_GK||'('||A_GK||', ws) '||
                   'SELECT value, ws '||
                   'FROM utwsgk '||
                   'WHERE gk = '''||A_GK||''' AND value IS NOT NULL';
   DBMS_SQL.PARSE(L_GKWS_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   
   BEGIN
      L_RESULT := DBMS_SQL.EXECUTE(L_GKWS_CURSOR);
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UNIQUEGK;
         RAISE STPERROR;
   END;
   
   DBMS_SQL.CLOSE_CURSOR(L_GKWS_CURSOR);

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('CreateGroupKeyWsEntries', SQLERRM);
   END IF;
   IF L_GK_CURSOR%ISOPEN THEN
      CLOSE L_GK_CURSOR;
   END IF;
   IF DBMS_SQL.IS_OPEN (L_GKWS_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_GKWS_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'CreateGroupKeyWsEntries'));
END CREATEGROUPKEYWSENTRIES;

FUNCTION DELETEGROUPKEYWSENTRIES                 
(A_GK    IN    VARCHAR2)                         
RETURN NUMBER IS

A_VERSION         VARCHAR2(20);
L_GKWS_CURSOR     INTEGER;
L_STRUCT_CREATED  CHAR(1);
L_GK_FOUND        BOOLEAN;

CURSOR L_GK_CURSOR IS
   SELECT NVL(STRUCT_CREATED, '0')
   FROM UTGKWS
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   OPEN L_GK_CURSOR;
   FETCH L_GK_CURSOR
   INTO L_STRUCT_CREATED;
   L_GK_FOUND := L_GK_CURSOR%FOUND;
   CLOSE L_GK_CURSOR;

   IF NOT L_GK_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
      RAISE STPERROR;
   END IF;

   IF NVL(L_STRUCT_CREATED,'0') = '0' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_STRUCTCREATED;
      RAISE STPERROR;
   END IF;

   
   IF UNAPIGEN.ISSYSTEM21CFR11COMPLIANT = UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTALLOWEDIN21CFR11;
      RAISE STPERROR;
   END IF;

   DELETE FROM UTWSGK
   WHERE GK = A_GK;

   L_GKWS_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'TRUNCATE TABLE utwsgk' || A_GK;
   DBMS_SQL.PARSE(L_GKWS_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   L_RESULT := DBMS_SQL.EXECUTE(L_GKWS_CURSOR);

   DBMS_SQL.CLOSE_CURSOR(L_GKWS_CURSOR);

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('DeleteGroupKeyWsEntries', SQLERRM);
   END IF;
   IF L_GK_CURSOR%ISOPEN THEN
      CLOSE L_GK_CURSOR;
   END IF;
   IF DBMS_SQL.IS_OPEN(L_GKWS_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_GKWS_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'DeleteGroupKeyWsEntries'));
END DELETEGROUPKEYWSENTRIES;


FUNCTION GETGROUPKEYPTLIST                                 
(A_GK                  OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_DESCRIPTION         OUT     UNAPIGEN.VC40_TABLE_TYPE,   
 A_NR_OF_ROWS          IN OUT  NUMBER,                     
 A_WHERE_CLAUSE        IN      VARCHAR2,                   
 A_NEXT_ROWS           IN      NUMBER)                     
RETURN NUMBER IS

L_GK           VARCHAR2(20);
L_DESCRIPTION  VARCHAR2(40);

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_GK_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_GK_CURSOR);
         P_GK_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_GK_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
         L_WHERE_CLAUSE := 'ORDER BY gk, version'; 
      ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
         L_WHERE_CLAUSE := 'WHERE version_is_current = ''1'' '||
                           'AND gk = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                           ''' ORDER BY gk, version';
      ELSE
         L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
      END IF;

      IF P_GK_CURSOR IS NULL THEN
         P_GK_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;

      L_SQL_STRING:= 'SELECT gk, description FROM dd'||UNAPIGEN.P_DD||'.uvgkpt ' ||
                      L_WHERE_CLAUSE;
      DBMS_SQL.PARSE(P_GK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

      DBMS_SQL.DEFINE_COLUMN(P_GK_CURSOR, 1, L_GK, 20);
      DBMS_SQL.DEFINE_COLUMN(P_GK_CURSOR, 2, L_DESCRIPTION, 40);
      L_RESULT := DBMS_SQL.EXECUTE(P_GK_CURSOR);
   END IF;

   L_RESULT := DBMS_SQL.FETCH_ROWS(P_GK_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_GK_CURSOR, 1, L_GK);
      DBMS_SQL.COLUMN_VALUE(P_GK_CURSOR, 2, L_DESCRIPTION);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_GK(L_FETCHED_ROWS) := L_GK;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_GK_CURSOR);
      END IF;
   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_GK_CURSOR);
       P_GK_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   END IF;

   IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_GK_CURSOR);
      P_GK_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetGroupKeyPtList', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (P_GK_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (P_GK_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETGROUPKEYPTLIST;

FUNCTION GETGROUPKEYPT                                  
(A_GK               OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_DESCRIPTION      OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_IS_PROTECTED     OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_VALUE_UNIQUE     OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_SINGLE_VALUED    OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_NEW_VAL_ALLOWED  OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_MANDATORY        OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_STRUCT_CREATED   OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_INHERIT_GK       OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_VALUE_LIST_TP    OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_DEFAULT_VALUE    OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_DSP_ROWS         OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_VAL_LENGTH       OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_VAL_START        OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_ASSIGN_TP        OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_ASSIGN_ID        OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_Q_TP             OUT    UNAPIGEN.CHAR2_TABLE_TYPE,   
 A_Q_ID             OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_Q_CHECK_AU       OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_Q_AU             OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_NR_OF_ROWS       IN OUT NUMBER,                      
 A_WHERE_CLAUSE     IN     VARCHAR2)                    
RETURN NUMBER IS

L_GK                VARCHAR2(20);
L_DESCRIPTION       VARCHAR2(40);
L_IS_PROTECTED      CHAR(1);
L_VALUE_UNIQUE      CHAR(1);
L_SINGLE_VALUED     CHAR(1);
L_NEW_VAL_ALLOWED   CHAR(1);
L_MANDATORY         CHAR(1);
L_STRUCT_CREATED    CHAR(1);
L_INHERIT_GK        CHAR(1);
L_VALUE_LIST_TP     CHAR(1);
L_DEFAULT_VALUE     VARCHAR2(40);
L_DSP_ROWS          NUMBER(3);
L_VAL_LENGTH        NUMBER(3);
L_VAL_START         NUMBER(3);
L_ASSIGN_TP         CHAR(1);
L_ASSIGN_ID         VARCHAR2(20);
L_Q_TP              CHAR(2);
L_Q_ID              VARCHAR2(20);
L_Q_CHECK_AU        CHAR(1);
L_Q_AU              VARCHAR2(20);
L_GK_CURSOR         INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'ORDER BY gk, version'; 
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := 'WHERE version_is_current = ''1'' '||
                        'AND gk = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                        ''' ORDER BY gk, version';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_GK_CURSOR := DBMS_SQL.OPEN_CURSOR;

   L_SQL_STRING := 'SELECT gk, description, is_protected, value_unique, ' ||
                   'single_valued, new_val_allowed, mandatory, struct_created, inherit_gk,' ||
                   'value_list_tp, default_value, dsp_rows, val_length, val_start, ' ||
                   'assign_tp, assign_id, q_tp, q_id, q_check_au, q_au ' ||
                   'FROM dd' || UNAPIGEN.P_DD || '.uvgkpt ' || L_WHERE_CLAUSE;
   DBMS_SQL.PARSE(L_GK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 1, L_GK, 20);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 2, L_DESCRIPTION, 40);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 3, L_IS_PROTECTED, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 4, L_VALUE_UNIQUE, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 5, L_SINGLE_VALUED, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 6, L_NEW_VAL_ALLOWED, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 7, L_MANDATORY, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 8, L_STRUCT_CREATED, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 9, L_INHERIT_GK, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 10, L_VALUE_LIST_TP, 1);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 11, L_DEFAULT_VALUE, 40);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 12, L_DSP_ROWS);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 13, L_VAL_LENGTH);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 14, L_VAL_START);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 15, L_ASSIGN_TP, 1);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 16, L_ASSIGN_ID, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 17, L_Q_TP, 2);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 18, L_Q_ID, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 19, L_Q_CHECK_AU, 1);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 20, L_Q_AU, 20);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_GK_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 1, L_GK);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 2, L_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 3, L_IS_PROTECTED);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 4, L_VALUE_UNIQUE);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 5, L_SINGLE_VALUED);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 6, L_NEW_VAL_ALLOWED);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 7, L_MANDATORY);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 8, L_STRUCT_CREATED);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 9, L_INHERIT_GK);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 10, L_VALUE_LIST_TP);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 11, L_DEFAULT_VALUE);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 12, L_DSP_ROWS);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 13, L_VAL_LENGTH);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 14, L_VAL_START);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 15, L_ASSIGN_TP);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 16, L_ASSIGN_ID);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 17, L_Q_TP);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 18, L_Q_ID);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 19, L_Q_CHECK_AU);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 20, L_Q_AU);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_GK (L_FETCHED_ROWS) := L_GK;
      A_DESCRIPTION (L_FETCHED_ROWS) := L_DESCRIPTION;
      A_IS_PROTECTED (L_FETCHED_ROWS) := L_IS_PROTECTED;
      A_VALUE_UNIQUE (L_FETCHED_ROWS) := L_VALUE_UNIQUE;
      A_SINGLE_VALUED (L_FETCHED_ROWS) := L_SINGLE_VALUED;
      A_NEW_VAL_ALLOWED (L_FETCHED_ROWS) := L_NEW_VAL_ALLOWED;
      A_MANDATORY (L_FETCHED_ROWS) := L_MANDATORY;
      A_STRUCT_CREATED (L_FETCHED_ROWS) := L_STRUCT_CREATED;
      A_INHERIT_GK (L_FETCHED_ROWS) := L_INHERIT_GK;
      A_VALUE_LIST_TP (L_FETCHED_ROWS) := L_VALUE_LIST_TP;
      A_DEFAULT_VALUE (L_FETCHED_ROWS) := L_DEFAULT_VALUE;
      A_DSP_ROWS(L_FETCHED_ROWS) := L_DSP_ROWS;
      A_VAL_LENGTH(L_FETCHED_ROWS) := L_VAL_LENGTH;
      A_VAL_START(L_FETCHED_ROWS) := L_VAL_START;
      A_ASSIGN_TP(L_FETCHED_ROWS) := L_ASSIGN_TP;
      A_ASSIGN_ID(L_FETCHED_ROWS) := L_ASSIGN_ID;
      A_Q_TP(L_FETCHED_ROWS) := L_Q_TP;
      A_Q_ID(L_FETCHED_ROWS) := L_Q_ID;
      A_Q_CHECK_AU(L_FETCHED_ROWS) := L_Q_CHECK_AU;
      A_Q_AU(L_FETCHED_ROWS) := L_Q_AU;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_GK_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_GK_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetGroupKeyPt', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
     IF DBMS_SQL.IS_OPEN (L_GK_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_GK_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETGROUPKEYPT;

FUNCTION GETGROUPKEYPTVALUE                            
(A_GK               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_VALUE            OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_NR_OF_ROWS       IN OUT  NUMBER,                    
 A_WHERE_CLAUSE     IN      VARCHAR2)                  
RETURN NUMBER IS

L_GK              VARCHAR2(20);
L_VALUE           VARCHAR2(40);
L_GK_CURSOR       INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'ORDER BY list.gk, list.version, list.seq'; 
   ELSIF
      UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := ', dd'||UNAPIGEN.P_DD||'.uvgkpt pt WHERE pt.version_is_current = ''1'' '||
                        'AND list.version = pt.version '||
                        'AND list.gk = pt.gk '||
                        'AND list.gk = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                        ''' ORDER BY list.seq';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_GK_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT list.gk, list.value FROM dd'||UNAPIGEN.P_DD||'.uvgkptlist list ' || L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_GK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 1, L_GK, 20);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 2, L_VALUE, 40);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_GK_CURSOR);

   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 1, L_GK);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 2, L_VALUE);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_GK(L_FETCHED_ROWS) := L_GK;
      A_VALUE(L_FETCHED_ROWS) := L_VALUE;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_GK_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_GK_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;
   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetGroupKeyPtValue', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (L_GK_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_GK_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETGROUPKEYPTVALUE;

FUNCTION GETGROUPKEYPTSQL                              
(A_GK              OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_SQLTEXT         OUT     UNAPIGEN.VC255_TABLE_TYPE,  
 A_NR_OF_ROWS      IN OUT  NUMBER,                     
 A_WHERE_CLAUSE    IN      VARCHAR2)                   
RETURN NUMBER IS

L_GK              VARCHAR2(20);
L_SQLTEXT         VARCHAR2(255);
L_GK_CURSOR       INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'ORDER BY sql.gk, sql.version, sql.seq'; 
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := ', dd'||UNAPIGEN.P_DD||'.uvgkpt pt WHERE pt.version_is_current = ''1'' '||
                        'AND sql.version = pt.version '||
                        'AND sql.gk = pt.gk '||
                        'AND sql.gk = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                        ''' ORDER BY sql.seq';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_GK_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT sql.gk, sql.sqltext FROM dd'||UNAPIGEN.P_DD||'.uvgkptsql sql ' || L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_GK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 1, L_GK, 20);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 2, L_SQLTEXT, 255);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_GK_CURSOR);

   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 1, L_GK);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 2, L_SQLTEXT);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_GK(L_FETCHED_ROWS) := L_GK;
      A_SQLTEXT(L_FETCHED_ROWS) := L_SQLTEXT;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_GK_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_GK_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetGroupKeyPtSql', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (L_GK_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_GK_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETGROUPKEYPTSQL;

FUNCTION SAVEGROUPKEYPT                               
(A_GK               IN   VARCHAR2,                    
 A_DESCRIPTION      IN   VARCHAR2,                    
 A_IS_PROTECTED     IN   CHAR,                        
 A_VALUE_UNIQUE     IN   CHAR,                        
 A_SINGLE_VALUED    IN   CHAR,                        
 A_NEW_VAL_ALLOWED  IN   CHAR,                        
 A_MANDATORY        IN   CHAR,                        
 A_STRUCT_CREATED   IN   CHAR,                        
 A_INHERIT_GK       IN   CHAR,                        
 A_VALUE_LIST_TP    IN   CHAR,                        
 A_DEFAULT_VALUE    IN   VARCHAR2,                    
 A_DSP_ROWS         IN   NUMBER,                      
 A_VAL_LENGTH       IN   NUMBER,                      
 A_VAL_START        IN   NUMBER,                      
 A_ASSIGN_TP        IN   CHAR,                        
 A_ASSIGN_ID        IN   VARCHAR2,                    
 A_Q_TP             IN   CHAR,                        
 A_Q_ID             IN   VARCHAR2,                    
 A_Q_CHECK_AU       IN   CHAR,                        
 A_Q_AU             IN   VARCHAR2,                    
 A_VALUE            IN   UNAPIGEN.VC40_TABLE_TYPE,    
 A_SQLTEXT          IN   UNAPIGEN.VC255_TABLE_TYPE,   
 A_NR_OF_ROWS       IN   NUMBER,                      
 A_MODIFY_REASON    IN   VARCHAR2)                    
RETURN NUMBER IS

A_VERSION        VARCHAR2(20);
L_FOUND          BOOLEAN;
L_SEQ_NO         NUMBER;
L_GK             VARCHAR2(20);
L_STRUCT_CREATED CHAR(1);
L_LC             VARCHAR2(2);
L_LC_VERSION     VARCHAR2(20);
L_SS             VARCHAR2(2);
L_LOG_HS         CHAR(1);
L_ALLOW_MODIFY   CHAR(1);
L_ACTIVE         CHAR(1);
L_RULE_NR        NUMBER(5);

CURSOR L_GK_CURSOR IS
   SELECT GK 
   FROM UTGKPT
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_GK, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_IS_PROTECTED, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_PROTECTED;
      RAISE STPERROR;
   END IF;

   IF NVL(A_SINGLE_VALUED, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SINGLEVALUED;
      RAISE STPERROR;
   END IF;

   IF NVL(A_NEW_VAL_ALLOWED, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NEWVALALLOWED;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VALUE_UNIQUE, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UNIQUEGK;
      RAISE STPERROR;
   END IF;

   IF NVL(A_MANDATORY, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_MANDATORY;
      RAISE STPERROR;
   END IF;

   IF NVL(A_INHERIT_GK, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INHERITGK;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VALUE_LIST_TP, ' ') NOT IN ('F', 'Q') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_VALUELISTTP;
      RAISE STPERROR;
   END IF;

   IF NVL(A_ASSIGN_TP, ' ') IN ('F', 'I') AND
      NVL(A_ASSIGN_ID, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   
   
   
   
   L_LC := '@L';
   L_SS := '@A';

   BEGIN
      SELECT VERSION
      INTO L_LC_VERSION
      FROM UTLC
      WHERE LC = '@L'
      AND VERSION_IS_CURRENT = '1';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOCURRENTLCVERSION;
      RAISE STPERROR;
   END;

   BEGIN
      SELECT ALLOW_MODIFY, ACTIVE
      INTO L_ALLOW_MODIFY, L_ACTIVE
      FROM UTSS
      WHERE SS = '@A';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR;
   END;
   
   BEGIN
      SELECT LOG_HS
      INTO L_LOG_HS
      FROM UTOBJECTS 
      WHERE OBJECT = 'gkpt';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      
      
      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OBJTP;
      RAISE STPERROR;
   END;
   

   OPEN L_GK_CURSOR;
   FETCH L_GK_CURSOR
   INTO L_GK;
   IF L_GK_CURSOR%FOUND THEN
      L_FOUND := TRUE;
   ELSE
      L_FOUND := FALSE;
   END IF;
   CLOSE L_GK_CURSOR;

   IF L_FOUND THEN
      DELETE FROM UTGKPT
      WHERE VERSION = A_VERSION
        AND GK = A_GK;

      DELETE FROM UTGKPTLIST
      WHERE VERSION = A_VERSION
        AND GK = A_GK;

      DELETE FROM UTGKPTSQL
      WHERE VERSION = A_VERSION
        AND GK = A_GK;
        
      L_EVENT_TP := 'GroupKeyUpdated';
   ELSE
      L_EVENT_TP := 'GroupKeyCreated';
   END IF;
   
   OPEN UNAPIGK.L_DBA_OBJECTS_CURSOR ('UTPTGK'||A_GK);
   FETCH UNAPIGK.L_DBA_OBJECTS_CURSOR INTO L_STRUCT_CREATED;
   CLOSE UNAPIGK.L_DBA_OBJECTS_CURSOR;

   INSERT INTO UTGKPT (GK, VERSION, VERSION_IS_CURRENT, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ, EFFECTIVE_TILL, EFFECTIVE_TILL_TZ, DESCRIPTION, 
                       IS_PROTECTED, VALUE_UNIQUE, SINGLE_VALUED, NEW_VAL_ALLOWED, MANDATORY,
                       STRUCT_CREATED, INHERIT_GK, VALUE_LIST_TP, DEFAULT_VALUE, DSP_ROWS, VAL_LENGTH, 
                       VAL_START, ASSIGN_TP, ASSIGN_ID, Q_TP, Q_ID, Q_CHECK_AU, Q_AU, 
                       LOG_HS, ALLOW_MODIFY, ACTIVE, LC, LC_VERSION, SS)
   VALUES (A_GK, A_VERSION, '1', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, NULL, A_DESCRIPTION, 
           A_IS_PROTECTED, A_VALUE_UNIQUE, A_SINGLE_VALUED, A_NEW_VAL_ALLOWED, A_MANDATORY, 
           L_STRUCT_CREATED, A_INHERIT_GK, A_VALUE_LIST_TP, A_DEFAULT_VALUE, A_DSP_ROWS, A_VAL_LENGTH, 
           A_VAL_START, A_ASSIGN_TP, A_ASSIGN_ID, A_Q_TP, A_Q_ID, A_Q_CHECK_AU, A_Q_AU, 
           L_LOG_HS, L_ALLOW_MODIFY, L_ACTIVE, L_LC, L_LC_VERSION, L_SS);

   IF A_VALUE_LIST_TP = 'Q' THEN
      FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
         IF NVL(A_SQLTEXT(L_SEQ_NO), ' ') <> ' ' THEN
            INSERT INTO UTGKPTSQL(GK, VERSION, SEQ, SQLTEXT)
            VALUES (A_GK, A_VERSION, L_SEQ_NO, A_SQLTEXT(L_SEQ_NO));
         END IF;
      END LOOP;
   ELSIF A_VALUE_LIST_TP = 'F' THEN
      FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
         IF NVL(A_VALUE(L_SEQ_NO), ' ') <> ' ' THEN
            INSERT INTO UTGKPTLIST(GK, VERSION, SEQ, VALUE)
            VALUES (A_GK, A_VERSION, L_SEQ_NO, A_VALUE(L_SEQ_NO));
         END IF;
      END LOOP;
   END IF;

   
   
   
   
   DELETE FROM UTEVRULES
   WHERE CUSTOM = '0'
     AND OBJECT_TP = 'pt'
     AND EV_TP IN ('ObjectCreated', 'ObjectUpdated')
     AND AF LIKE '%''ptgk''%'                             
     AND AF LIKE '%'''||A_GK||'''%';
   
   DELETE FROM UTEVRULES
   WHERE CUSTOM = '0'
     AND OBJECT_TP = 'pt'
     AND EV_TP IN ('ObjectCreated', 'ObjectUpdated')
     AND AF LIKE 'UNGKASSIGN%'                             
     AND AF LIKE '%'''||A_GK||'''%';

   
   SELECT NVL(MAX(RULE_NR),0)+1
   INTO L_RULE_NR
   FROM UTEVRULES;

   IF A_ASSIGN_TP = 'T' THEN
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR, 'pt', 'ObjectCreated', 
             'AssignGroupKey(''ptgk'', '''||A_GK||''', ''~pt@pt~'', '||A_VAL_START||', '||A_VAL_LENGTH||')', 
             '0');
   ELSIF A_ASSIGN_TP = 'F' THEN
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR, 'pt', 'ObjectCreated', 
             'UNGKASSIGN.'||A_ASSIGN_ID||'('''||A_GK||''')', '0');
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR+1, 'pt', 'ObjectUpdated', 
             'UNGKASSIGN.'||A_ASSIGN_ID||'('''||A_GK||''')', '0');
   END IF;

   
   L_RULE_NR := 0;
   FOR C_EVRULE_REC IN (SELECT *
                        FROM UTEVRULES
                        ORDER BY RULE_NR) LOOP
      L_RULE_NR := L_RULE_NR + 1;
      IF C_EVRULE_REC.RULE_NR <> L_RULE_NR THEN
         UPDATE UTEVRULES
         SET RULE_NR = L_RULE_NR
         WHERE RULE_NR = C_EVRULE_REC.RULE_NR;
      END IF;
   END LOOP;

   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT ('SaveGroupKeyPt', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                    '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

















   IF NVL(L_LOG_HS, ' ') = '1' THEN
      IF L_EVENT_TP = 'GroupKeyCreated' THEN
         INSERT INTO UTGKPTHS (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                               WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_GK, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'group key "'||A_GK||'" is created.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                 L_EV_SEQ_NR);
      ELSE
         INSERT INTO UTGKPTHS (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                               WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_GK, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'group key "'||A_GK||'" is updated.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                 L_EV_SEQ_NR);
      END IF;
   ELSE
      
      
      IF L_EVENT_TP = 'GroupKeyCreated' THEN
         INSERT INTO UTGKPTHS (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                               WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_GK, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'group key "'||A_GK||'" is created.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                 L_EV_SEQ_NR);
      END IF;
   END IF;

   
   
   
   L_EV_SEQ_NR := -1;
   L_EVENT_TP := 'LoadEvRules';
   L_RESULT := UNAPIEV.BROADCASTEVENT ('SaveGroupKeyPt', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                       '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   
   UNAPIGEN.NOTIFYTASKGKTODBA('PT',
                               A_GK,
                               A_VERSION,
                               A_VALUE_UNIQUE);

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveGroupKeyPt',SQLERRM);
   END IF;
   IF UNAPIGK.L_DBA_OBJECTS_CURSOR%ISOPEN THEN
      CLOSE UNAPIGK.L_DBA_OBJECTS_CURSOR;
   END IF;   
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveGroupKeyPt'));
END SAVEGROUPKEYPT;

FUNCTION DELETEGROUPKEYPT                              
(A_GK               IN     VARCHAR2,                   
 A_MODIFY_REASON    IN     VARCHAR2)                   
RETURN NUMBER IS

A_VERSION        VARCHAR2(20);

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_GK, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   
   IF UNAPIGEN.ISSYSTEM21CFR11COMPLIANT = UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTALLOWEDIN21CFR11;
      RAISE STPERROR;
   END IF;

   
   L_RESULT := DELETEGROUPKEYPTSTRUCTURES(A_GK);
   IF L_RESULT <> 0 AND
      L_RESULT <> UNAPIGEN.DBERR_STRUCTCREATED THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   ELSE
      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   DELETE FROM UTGKPTLIST
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   DELETE FROM UTGKPTSQL
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   DELETE FROM UTGKPT
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   DELETE FROM UTGKPTHS
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   
   
   DELETE FROM UTEVRULES
   WHERE CUSTOM = '0'
     AND OBJECT_TP = 'pt'
     AND EV_TP IN ('ObjectCreated', 'ObjectUpdated')
     AND AF LIKE '%''ptgk''%'                             
     AND AF LIKE '%'''||A_GK||'''%';
   
   DELETE FROM UTEVRULES
   WHERE CUSTOM = '0'
     AND OBJECT_TP = 'pt'
     AND EV_TP IN ('ObjectCreated', 'ObjectUpdated')
     AND AF LIKE 'UNGKASSIGN%'                             
     AND AF LIKE '%'''||A_GK||'''%';

   L_EVENT_TP := 'ObjectDeleted';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT('DeleteGroupKeyPt', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                   '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);

   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   
   
   
   L_EV_SEQ_NR := -1;
   L_EVENT_TP := 'LoadEvRules';
   L_RESULT := UNAPIEV.BROADCASTEVENT ('DeleteGroupKeyPt', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                       '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('DeleteGroupKeyPt', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'DeleteGroupKeyPt'));
END DELETEGROUPKEYPT;

FUNCTION CREATEGROUPKEYPTSTRUCTURES                
(A_GK                IN    VARCHAR2,               
 A_STOR_INITIAL      IN    VARCHAR2,               
 A_STOR_NEXT         IN    VARCHAR2,               
 A_STOR_MIN_EXTENTS  IN    NUMBER,                 
 A_STOR_PCT_INCREASE IN    NUMBER,                 
 A_STOR_PCT_FREE     IN    NUMBER,                 
 A_STOR_PCT_USED     IN    NUMBER                  
)
RETURN NUMBER IS

A_VERSION            VARCHAR2(20);
L_GKPT_CURSOR        INTEGER;
L_GK_FOUND           BOOLEAN;
L_LOG_HS             CHAR(1);
L_STOR_INITIAL       VARCHAR2(20);
L_STOR_NEXT          VARCHAR2(20);
L_STOR_MIN_EXTENTS   NUMBER; 
L_STOR_PCT_INCREASE  NUMBER;
L_STOR_PCT_FREE      NUMBER;
L_STOR_PCT_USED      NUMBER;

L_TABLE_CREATED      BOOLEAN;
L_TABLESPACE         VARCHAR2(40);
L_INDEX_TABLESPACE   VARCHAR2(40);

CURSOR L_GK_CURSOR IS
   SELECT *
   FROM UTGKPT
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

L_GK_REC       L_GK_CURSOR%ROWTYPE;

BEGIN

   L_SQLERRM := NULL;
   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
   
   L_TABLE_CREATED := FALSE;

   OPEN L_GK_CURSOR;
   FETCH L_GK_CURSOR
   INTO L_GK_REC;
   L_GK_FOUND := L_GK_CURSOR%FOUND;
   CLOSE L_GK_CURSOR;

   IF NOT L_GK_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
      RAISE STPERROR;
   END IF;

   IF NVL(L_GK_REC.STRUCT_CREATED, '0') = '1' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_STRUCTCREATED;
      RAISE STPERROR;
   END IF;

   OPEN L_TABLESPACE_CURSOR ('UTPT');
   FETCH L_TABLESPACE_CURSOR 
      INTO L_TABLESPACE;
   CLOSE L_TABLESPACE_CURSOR;

   OPEN L_INDEX_TABLESPACE_CURSOR ('UKPT');
   FETCH L_INDEX_TABLESPACE_CURSOR 
      INTO L_INDEX_TABLESPACE;
   CLOSE L_INDEX_TABLESPACE_CURSOR;
    
   IF ( A_STOR_INITIAL IS NULL ) THEN
      L_RET_CODE := UNAPIGK.INITGROUPKEYDEFSTORAGE('PT', 
                                                   L_STOR_INITIAL, 
                                                   L_STOR_NEXT, 
                                                   L_STOR_MIN_EXTENTS, 
                                                   L_STOR_PCT_INCREASE, 
                                                   L_STOR_PCT_FREE, 
                                                   L_STOR_PCT_USED);
   ELSE
      L_STOR_INITIAL      := A_STOR_INITIAL;
      L_STOR_NEXT         := A_STOR_NEXT;
      L_STOR_MIN_EXTENTS  := A_STOR_MIN_EXTENTS;
      L_STOR_PCT_INCREASE := A_STOR_PCT_INCREASE;
      L_STOR_PCT_FREE     := A_STOR_PCT_FREE;
      L_STOR_PCT_USED     := A_STOR_PCT_USED;
   END IF;
   
    
   
   
   

   
   
   
   
   
   
   
   
   L_GKPT_CURSOR := DBMS_SQL.OPEN_CURSOR;
    
    L_SQL_STRING := 'CREATE TABLE utptgk' || A_GK ||
                    '(' || A_GK || ' VARCHAR2(40),'||
                    'pt VARCHAR2(20),' ||
                    'version VARCHAR2(20),' ||
                    'CONSTRAINT ukptgk' || A_GK ||
                    ' PRIMARY KEY(' || A_GK ||', pt, version)' ||
                    ' USING INDEX TABLESPACE '|| L_INDEX_TABLESPACE ||
                    ' STORAGE (INITIAL '      || L_STOR_INITIAL || 
                             ' NEXT '         || L_STOR_NEXT ||
                             ' PCTINCREASE '  || TO_CHAR(L_STOR_PCT_INCREASE) || ') ' ||
                    ' PCTFREE ' || TO_CHAR(L_STOR_PCT_FREE) ;

   IF L_GK_REC.VALUE_UNIQUE = '1' THEN
      L_SQL_STRING :=  L_SQL_STRING || ',CONSTRAINT ucptgk' || A_GK ||
                     ' UNIQUE(' || A_GK || ')'||
                     ' USING INDEX TABLESPACE '|| L_INDEX_TABLESPACE ||
                     ' STORAGE (INITIAL '      || L_STOR_INITIAL || 
                              ' NEXT '         || L_STOR_NEXT ||
                              ' PCTINCREASE '  || TO_CHAR(L_STOR_PCT_INCREASE) || ') ' ||
                     ' PCTFREE ' || TO_CHAR(L_STOR_PCT_FREE) ;
   END IF;
   
   L_SQL_STRING := L_SQL_STRING || ') TABLESPACE '          || L_TABLESPACE || 
                                    ' STORAGE (INITIAL '    || L_STOR_INITIAL || 
                                             ' NEXT '       || L_STOR_NEXT || 
                                             ' PCTINCREASE '|| TO_CHAR(L_STOR_PCT_INCREASE)|| 
                                             ' MINEXTENTS ' || TO_CHAR(L_STOR_MIN_EXTENTS)|| 
                                              ')'           ||
                                    ' PCTFREE ' || TO_CHAR(L_STOR_PCT_FREE) ||
                                    ' PCTUSED ' || TO_CHAR(L_STOR_PCT_USED) ;

   DBMS_SQL.PARSE(L_GKPT_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   L_RESULT := DBMS_SQL.EXECUTE(L_GKPT_CURSOR);
   L_TABLE_CREATED := TRUE;   

   
   
   
   
   
   
   
   L_SQL_STRING := 'CREATE INDEX uiptgk'|| A_GK ||
                   ' ON utptgk' || A_GK || '(pt) ' ||
                   ' STORAGE (INITIAL '    || L_STOR_INITIAL || 
                            ' NEXT '       || L_STOR_NEXT || 
                            ' PCTINCREASE '|| TO_CHAR(L_STOR_PCT_INCREASE)|| 
                            ' MINEXTENTS ' || TO_CHAR(L_STOR_MIN_EXTENTS)|| 
                   ' ) PCTFREE ' || TO_CHAR(L_STOR_PCT_FREE) ||
                   ' TABLESPACE '|| L_INDEX_TABLESPACE;
   DBMS_SQL.PARSE(L_GKPT_CURSOR, L_SQL_STRING, DBMS_SQL.V7);
   L_RESULT := DBMS_SQL.EXECUTE(L_GKPT_CURSOR);
   
   DBMS_SQL.CLOSE_CURSOR(L_GKPT_CURSOR);

   
   UPDATE UTGKPT
   SET STRUCT_CREATED = '1'
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   
   
   
   L_RESULT := CREATEGROUPKEYPTENTRIES(A_GK);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      L_SQLERRM := 'CreateGroupKeyPtEntries returned '||L_RESULT||' for gk='||A_GK;
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;

   
   L_RESULT := UNAPIGK.CREATEUSERSTRUCTSFORGROUPKEY('PT', A_GK);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      L_SQLERRM := 'CreateUserStructsForGroupKey returned '||L_RESULT||' for gk_tp=PT#gk='||A_GK;
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;

   L_EVENT_TP := 'GroupKeyStructuresCreated';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT ('CreateGroupKeyPtStructures', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                    '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   BEGIN
      SELECT LOG_HS
      INTO L_LOG_HS
      FROM UTOBJECTS 
      WHERE OBJECT = 'gkpt';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      
      
      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OBJTP;
      RAISE STPERROR;
   END;
   
   IF NVL(L_LOG_HS, ' ') = '1' THEN
      INSERT INTO UTGKPTHS (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                            WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES (A_GK, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
              'Database objects for group key "'||A_GK||'" are created.', 
              CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
         UNAPIGEN.LOGERROR('CreateGroupKeyPtStructures', SQLERRM);
         UNAPIGEN.LOGERROR('CreateGroupKeyPtStructures', 'HELP for DBA:'||SUBSTR(L_SQL_STRING,1,235));
         IF (LENGTH(L_SQL_STRING)>235) THEN
            UNAPIGEN.LOGERROR('CreateGroupKeyPtStructures', 'HELP for DBA:'||SUBSTR(L_SQL_STRING,236,235));
         END IF;
   END IF;
   IF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('CreateGroupKeyPtStructures', SUBSTR(L_SQLERRM,1,235));
   END IF;
   IF L_GK_CURSOR%ISOPEN THEN
      CLOSE L_GK_CURSOR;
   END IF;
   IF L_TABLE_CREATED THEN
      
      BEGIN
         L_SQL_STRING := 'DROP TABLE utptgk' || A_GK;
         DBMS_SQL.PARSE(L_GKPT_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         L_RESULT := DBMS_SQL.EXECUTE(L_GKPT_CURSOR);
      EXCEPTION
      WHEN OTHERS THEN
         NULL;
      END;
   END IF;
   IF DBMS_SQL.IS_OPEN(L_GKPT_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_GKPT_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'CreateGroupKeyPtStructures'));
END CREATEGROUPKEYPTSTRUCTURES;

FUNCTION DELETEGROUPKEYPTSTRUCTURES              
(A_GK    IN    VARCHAR2)                         
RETURN NUMBER IS

A_VERSION         VARCHAR2(20);
L_GKPT_CURSOR     INTEGER;
L_STRUCT_CREATED  CHAR(1);
L_GK_FOUND        BOOLEAN;
L_LOG_HS          CHAR(1);

CURSOR L_GK_CURSOR IS
   SELECT NVL(STRUCT_CREATED, '0')
   FROM UTGKPT
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   OPEN L_GK_CURSOR;
   FETCH L_GK_CURSOR
   INTO L_STRUCT_CREATED;
   L_GK_FOUND := L_GK_CURSOR%FOUND;
   CLOSE L_GK_CURSOR;

   IF NOT L_GK_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
      RAISE STPERROR;
   END IF;

   IF NVL(L_STRUCT_CREATED, '0') = '0' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_STRUCTCREATED;
      RAISE STPERROR;
   END IF;

   
   IF UNAPIGEN.ISSYSTEM21CFR11COMPLIANT = UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTALLOWEDIN21CFR11;
      RAISE STPERROR;
   END IF;

   DELETE FROM UTPTGK
   WHERE GK = A_GK;

   BEGIN
      L_GKPT_CURSOR := DBMS_SQL.OPEN_CURSOR;
      L_SQL_STRING := 'DROP TABLE utptgk' || A_GK ;
      DBMS_SQL.PARSE(L_GKPT_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      L_RESULT := DBMS_SQL.EXECUTE(L_GKPT_CURSOR);
      DBMS_SQL.CLOSE_CURSOR(L_GKPT_CURSOR);
   EXCEPTION
   WHEN TABLE_DOES_NOT_EXIST THEN
      
      NULL;
   END;

   
   UPDATE UTGKPT
   SET STRUCT_CREATED = '0'
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   L_EVENT_TP := 'GroupKeyStructuresDeleted';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT ('DeleteGroupKeyPtStructures', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                    '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   BEGIN
      SELECT LOG_HS
      INTO L_LOG_HS
      FROM UTOBJECTS 
      WHERE OBJECT = 'gkpt';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      
      
      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OBJTP;
      RAISE STPERROR;
   END;
   
   IF NVL(L_LOG_HS, ' ') = '1' THEN
      INSERT INTO UTGKPTHS (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                            WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES (A_GK, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
              'Database objects for group key "'||A_GK||'" are deleted.', 
              CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   
   UNAPIGK.DELETEGROUPKEYFROMTASK('ptgk', A_GK);

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('DeleteGroupKeyPtStructures', SQLERRM);
   END IF;
   IF L_GK_CURSOR%ISOPEN THEN
      CLOSE L_GK_CURSOR;
   END IF;
   IF DBMS_SQL.IS_OPEN(L_GKPT_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_GKPT_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'DeleteGroupKeyPtStructures'));
END DELETEGROUPKEYPTSTRUCTURES;

FUNCTION CREATEGROUPKEYPTENTRIES                 
(A_GK    IN    VARCHAR2)                         
RETURN NUMBER IS

A_VERSION        VARCHAR2(20);
L_GKPT_CURSOR  INTEGER;
L_GK_FOUND     BOOLEAN;

CURSOR L_GK_CURSOR IS
   SELECT *
   FROM UTGKPT
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

L_GK_REC       L_GK_CURSOR%ROWTYPE;

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   OPEN L_GK_CURSOR;
   FETCH L_GK_CURSOR
   INTO L_GK_REC;
   L_GK_FOUND := L_GK_CURSOR%FOUND;
   CLOSE L_GK_CURSOR;

   IF NOT L_GK_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
      RAISE STPERROR;
   END IF;

   IF NVL(L_GK_REC.STRUCT_CREATED, '0') = '0' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_STRUCTCREATED;
      RAISE STPERROR;
   END IF;

   
   
   
   
   L_GKPT_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'INSERT INTO utptgk'||A_GK||'('||A_GK||', pt, version) '||
                   'SELECT value, pt, version '||
                   'FROM utptgk '||
                   'WHERE gk = '''||A_GK||''' AND value IS NOT NULL';
   DBMS_SQL.PARSE(L_GKPT_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   
   BEGIN
      L_RESULT := DBMS_SQL.EXECUTE(L_GKPT_CURSOR);
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UNIQUEGK;
         RAISE STPERROR;
   END;
   
   DBMS_SQL.CLOSE_CURSOR(L_GKPT_CURSOR);

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('CreateGroupKeyPtEntries', SQLERRM);
   END IF;
   IF L_GK_CURSOR%ISOPEN THEN
      CLOSE L_GK_CURSOR;
   END IF;
   IF DBMS_SQL.IS_OPEN (L_GKPT_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_GKPT_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'CreateGroupKeyPtEntries'));
END CREATEGROUPKEYPTENTRIES;

FUNCTION DELETEGROUPKEYPTENTRIES                 
(A_GK    IN    VARCHAR2)                         
RETURN NUMBER IS

A_VERSION        VARCHAR2(20);
L_GKPT_CURSOR     INTEGER;
L_STRUCT_CREATED  CHAR(1);
L_GK_FOUND        BOOLEAN;

CURSOR L_GK_CURSOR IS
   SELECT NVL(STRUCT_CREATED, '0')
   FROM UTGKPT
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   OPEN L_GK_CURSOR;
   FETCH L_GK_CURSOR
   INTO L_STRUCT_CREATED;
   L_GK_FOUND := L_GK_CURSOR%FOUND;
   CLOSE L_GK_CURSOR;

   IF NOT L_GK_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
      RAISE STPERROR;
   END IF;

   IF NVL(L_STRUCT_CREATED,'0') = '0' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_STRUCTCREATED;
      RAISE STPERROR;
   END IF;

   
   IF UNAPIGEN.ISSYSTEM21CFR11COMPLIANT = UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTALLOWEDIN21CFR11;
      RAISE STPERROR;
   END IF;

   DELETE FROM UTPTGK
   WHERE GK = A_GK;

   L_GKPT_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'TRUNCATE TABLE utptgk' || A_GK;
   DBMS_SQL.PARSE(L_GKPT_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   L_RESULT := DBMS_SQL.EXECUTE(L_GKPT_CURSOR);

   DBMS_SQL.CLOSE_CURSOR(L_GKPT_CURSOR);

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('DeleteGroupKeyPtEntries', SQLERRM);
   END IF;
   IF L_GK_CURSOR%ISOPEN THEN
      CLOSE L_GK_CURSOR;
   END IF;
   IF DBMS_SQL.IS_OPEN(L_GKPT_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_GKPT_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'DeleteGroupKeyPtEntries'));
END DELETEGROUPKEYPTENTRIES;


FUNCTION GETGROUPKEYSDLIST                                 
(A_GK                  OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_DESCRIPTION         OUT     UNAPIGEN.VC40_TABLE_TYPE,   
 A_NR_OF_ROWS          IN OUT  NUMBER,                     
 A_WHERE_CLAUSE        IN      VARCHAR2,                   
 A_NEXT_ROWS           IN      NUMBER)                     
RETURN NUMBER IS

L_GK           VARCHAR2(20);
L_DESCRIPTION  VARCHAR2(40);

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_GK_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_GK_CURSOR);
         P_GK_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_GK_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
         L_WHERE_CLAUSE := 'ORDER BY gk, version'; 
      ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
         L_WHERE_CLAUSE := 'WHERE version_is_current = ''1'' '||
                           'AND gk = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                           ''' ORDER BY gk, version';
      ELSE
         L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
      END IF;

      IF P_GK_CURSOR IS NULL THEN
         P_GK_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;

      L_SQL_STRING:= 'SELECT gk, description FROM dd'||UNAPIGEN.P_DD||'.uvgksd ' ||
                      L_WHERE_CLAUSE;
      DBMS_SQL.PARSE(P_GK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

      DBMS_SQL.DEFINE_COLUMN(P_GK_CURSOR, 1, L_GK, 20);
      DBMS_SQL.DEFINE_COLUMN(P_GK_CURSOR, 2, L_DESCRIPTION, 40);
      L_RESULT := DBMS_SQL.EXECUTE(P_GK_CURSOR);
   END IF;

   L_RESULT := DBMS_SQL.FETCH_ROWS(P_GK_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_GK_CURSOR, 1, L_GK);
      DBMS_SQL.COLUMN_VALUE(P_GK_CURSOR, 2, L_DESCRIPTION);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_GK(L_FETCHED_ROWS) := L_GK;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_GK_CURSOR);
      END IF;
   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_GK_CURSOR);
       P_GK_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   END IF;

   IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_GK_CURSOR);
      P_GK_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP,  CURRENT_TIMESTAMP,
              'GetGroupKeySdList', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (P_GK_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (P_GK_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETGROUPKEYSDLIST;

FUNCTION GETGROUPKEYSD                                  
(A_GK               OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_DESCRIPTION      OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_IS_PROTECTED     OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_VALUE_UNIQUE     OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_SINGLE_VALUED    OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_NEW_VAL_ALLOWED  OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_MANDATORY        OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_STRUCT_CREATED   OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_INHERIT_GK       OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_VALUE_LIST_TP    OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_DEFAULT_VALUE    OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_DSP_ROWS         OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_VAL_LENGTH       OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_VAL_START        OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_ASSIGN_TP        OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_ASSIGN_ID        OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_Q_TP             OUT    UNAPIGEN.CHAR2_TABLE_TYPE,   
 A_Q_ID             OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_Q_CHECK_AU       OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_Q_AU             OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_NR_OF_ROWS       IN OUT NUMBER,                      
 A_WHERE_CLAUSE     IN     VARCHAR2)                    
RETURN NUMBER IS

L_GK                VARCHAR2(20);
L_DESCRIPTION       VARCHAR2(40);
L_IS_PROTECTED      CHAR(1);
L_VALUE_UNIQUE      CHAR(1);
L_SINGLE_VALUED     CHAR(1);
L_NEW_VAL_ALLOWED   CHAR(1);
L_MANDATORY         CHAR(1);
L_STRUCT_CREATED    CHAR(1);
L_INHERIT_GK        CHAR(1);
L_VALUE_LIST_TP     CHAR(1);
L_DEFAULT_VALUE     VARCHAR2(40);
L_DSP_ROWS          NUMBER(3);
L_VAL_LENGTH        NUMBER(3);
L_VAL_START         NUMBER(3);
L_ASSIGN_TP         CHAR(1);
L_ASSIGN_ID         VARCHAR2(20);
L_Q_TP              CHAR(2);
L_Q_ID              VARCHAR2(20);
L_Q_CHECK_AU        CHAR(1);
L_Q_AU              VARCHAR2(20);
L_GK_CURSOR         INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'ORDER BY gk, version'; 
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := 'WHERE version_is_current = ''1'' '||
                        'AND gk = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                        ''' ORDER BY gk, version';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_GK_CURSOR := DBMS_SQL.OPEN_CURSOR;

   L_SQL_STRING := 'SELECT gk, description, is_protected, value_unique, ' ||
                   'single_valued, new_val_allowed, mandatory, struct_created, inherit_gk,' ||
                   'value_list_tp, default_value, dsp_rows, val_length, val_start, ' ||
                   'assign_tp, assign_id, q_tp, q_id, q_check_au, q_au ' ||
                   'FROM dd' || UNAPIGEN.P_DD || '.uvgksd ' || L_WHERE_CLAUSE;
   DBMS_SQL.PARSE(L_GK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 1, L_GK, 20);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 2, L_DESCRIPTION, 40);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 3, L_IS_PROTECTED, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 4, L_VALUE_UNIQUE, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 5, L_SINGLE_VALUED, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 6, L_NEW_VAL_ALLOWED, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 7, L_MANDATORY, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 8, L_STRUCT_CREATED, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 9, L_INHERIT_GK, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 10, L_VALUE_LIST_TP, 1);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 11, L_DEFAULT_VALUE, 40);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 12, L_DSP_ROWS);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 13, L_VAL_LENGTH);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 14, L_VAL_START);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 15, L_ASSIGN_TP, 1);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 16, L_ASSIGN_ID, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 17, L_Q_TP, 2);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 18, L_Q_ID, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 19, L_Q_CHECK_AU, 1);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 20, L_Q_AU, 20);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_GK_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 1, L_GK);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 2, L_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 3, L_IS_PROTECTED);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 4, L_VALUE_UNIQUE);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 5, L_SINGLE_VALUED);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 6, L_NEW_VAL_ALLOWED);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 7, L_MANDATORY);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 8, L_STRUCT_CREATED);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 9, L_INHERIT_GK);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 10, L_VALUE_LIST_TP);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 11, L_DEFAULT_VALUE);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 12, L_DSP_ROWS);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 13, L_VAL_LENGTH);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 14, L_VAL_START);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 15, L_ASSIGN_TP);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 16, L_ASSIGN_ID);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 17, L_Q_TP);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 18, L_Q_ID);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 19, L_Q_CHECK_AU);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 20, L_Q_AU);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_GK (L_FETCHED_ROWS) := L_GK;
      A_DESCRIPTION (L_FETCHED_ROWS) := L_DESCRIPTION;
      A_IS_PROTECTED (L_FETCHED_ROWS) := L_IS_PROTECTED;
      A_VALUE_UNIQUE (L_FETCHED_ROWS) := L_VALUE_UNIQUE;
      A_SINGLE_VALUED (L_FETCHED_ROWS) := L_SINGLE_VALUED;
      A_NEW_VAL_ALLOWED (L_FETCHED_ROWS) := L_NEW_VAL_ALLOWED;
      A_MANDATORY (L_FETCHED_ROWS) := L_MANDATORY;
      A_STRUCT_CREATED (L_FETCHED_ROWS) := L_STRUCT_CREATED;
      A_INHERIT_GK (L_FETCHED_ROWS) := L_INHERIT_GK;
      A_VALUE_LIST_TP (L_FETCHED_ROWS) := L_VALUE_LIST_TP;
      A_DEFAULT_VALUE (L_FETCHED_ROWS) := L_DEFAULT_VALUE;
      A_DSP_ROWS(L_FETCHED_ROWS) := L_DSP_ROWS;
      A_VAL_LENGTH(L_FETCHED_ROWS) := L_VAL_LENGTH;
      A_VAL_START(L_FETCHED_ROWS) := L_VAL_START;
      A_ASSIGN_TP(L_FETCHED_ROWS) := L_ASSIGN_TP;
      A_ASSIGN_ID(L_FETCHED_ROWS) := L_ASSIGN_ID;
      A_Q_TP(L_FETCHED_ROWS) := L_Q_TP;
      A_Q_ID(L_FETCHED_ROWS) := L_Q_ID;
      A_Q_CHECK_AU(L_FETCHED_ROWS) := L_Q_CHECK_AU;
      A_Q_AU(L_FETCHED_ROWS) := L_Q_AU;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_GK_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_GK_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetGroupKeySd', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
     IF DBMS_SQL.IS_OPEN (L_GK_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_GK_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETGROUPKEYSD;

FUNCTION GETGROUPKEYSDVALUE                            
(A_GK               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_VALUE            OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_NR_OF_ROWS       IN OUT  NUMBER,                    
 A_WHERE_CLAUSE     IN      VARCHAR2)                  
RETURN NUMBER IS

L_GK              VARCHAR2(20);
L_VALUE           VARCHAR2(40);
L_GK_CURSOR       INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'ORDER BY list.gk, list.version, list.seq'; 
   ELSIF
      UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := ', dd'||UNAPIGEN.P_DD||'.uvgksd sd WHERE sd.version_is_current = ''1'' '||
                        'AND list.version = sd.version '||
                        'AND list.gk = sd.gk '||
                        'AND list.gk = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                        ''' ORDER BY list.seq';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_GK_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT list.gk, list.value FROM dd'||UNAPIGEN.P_DD||'.uvgksdlist list ' || L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_GK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 1, L_GK, 20);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 2, L_VALUE, 40);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_GK_CURSOR);

   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 1, L_GK);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 2, L_VALUE);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_GK(L_FETCHED_ROWS) := L_GK;
      A_VALUE(L_FETCHED_ROWS) := L_VALUE;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_GK_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_GK_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;
   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetGroupKeySdValue', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (L_GK_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_GK_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETGROUPKEYSDVALUE;

FUNCTION GETGROUPKEYSDSQL                              
(A_GK              OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_SQLTEXT         OUT     UNAPIGEN.VC255_TABLE_TYPE,  
 A_NR_OF_ROWS      IN OUT  NUMBER,                     
 A_WHERE_CLAUSE    IN      VARCHAR2)                   
RETURN NUMBER IS

L_GK              VARCHAR2(20);
L_SQLTEXT         VARCHAR2(255);
L_GK_CURSOR       INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'ORDER BY sql.gk, sql.version, sql.seq'; 
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := ', dd'||UNAPIGEN.P_DD||'.uvgksd sd WHERE sd.version_is_current = ''1'' '||
                        'AND sql.version = sd.version '||
                        'AND sql.gk = sd.gk '||
                        'AND sql.gk = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                        ''' ORDER BY sql.seq';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_GK_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT sql.gk, sql.sqltext FROM dd'||UNAPIGEN.P_DD||'.uvgksdsql sql ' || L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_GK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 1, L_GK, 20);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 2, L_SQLTEXT, 255);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_GK_CURSOR);

   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 1, L_GK);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 2, L_SQLTEXT);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_GK(L_FETCHED_ROWS) := L_GK;
      A_SQLTEXT(L_FETCHED_ROWS) := L_SQLTEXT;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_GK_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_GK_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetGroupKeySdSql', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (L_GK_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_GK_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETGROUPKEYSDSQL;

FUNCTION SAVEGROUPKEYSD                               
(A_GK               IN   VARCHAR2,                    
 A_DESCRIPTION      IN   VARCHAR2,                    
 A_IS_PROTECTED     IN   CHAR,                        
 A_VALUE_UNIQUE     IN   CHAR,                        
 A_SINGLE_VALUED    IN   CHAR,                        
 A_NEW_VAL_ALLOWED  IN   CHAR,                        
 A_MANDATORY        IN   CHAR,                        
 A_STRUCT_CREATED   IN   CHAR,                        
 A_INHERIT_GK       IN   CHAR,                        
 A_VALUE_LIST_TP    IN   CHAR,                        
 A_DEFAULT_VALUE    IN   VARCHAR2,                    
 A_DSP_ROWS         IN   NUMBER,                      
 A_VAL_LENGTH       IN   NUMBER,                      
 A_VAL_START        IN   NUMBER,                      
 A_ASSIGN_TP        IN   CHAR,                        
 A_ASSIGN_ID        IN   VARCHAR2,                    
 A_Q_TP             IN   CHAR,                        
 A_Q_ID             IN   VARCHAR2,                    
 A_Q_CHECK_AU       IN   CHAR,                        
 A_Q_AU             IN   VARCHAR2,                    
 A_VALUE            IN   UNAPIGEN.VC40_TABLE_TYPE,    
 A_SQLTEXT          IN   UNAPIGEN.VC255_TABLE_TYPE,   
 A_NR_OF_ROWS       IN   NUMBER,                      
 A_MODIFY_REASON    IN   VARCHAR2)                    
RETURN NUMBER IS

A_VERSION        VARCHAR2(20);
L_FOUND          BOOLEAN;
L_SEQ_NO         NUMBER;
L_GK             VARCHAR2(20);
L_STRUCT_CREATED CHAR(1);
L_LC             VARCHAR2(2);
L_LC_VERSION     VARCHAR2(20);
L_SS             VARCHAR2(2);
L_LOG_HS         CHAR(1);
L_ALLOW_MODIFY   CHAR(1);
L_ACTIVE         CHAR(1);
L_RULE_NR        NUMBER(5);

CURSOR L_GK_CURSOR IS
   SELECT GK 
   FROM UTGKSD
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_GK, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_IS_PROTECTED, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_PROTECTED;
      RAISE STPERROR;
   END IF;

   IF NVL(A_SINGLE_VALUED, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SINGLEVALUED;
      RAISE STPERROR;
   END IF;

   IF NVL(A_NEW_VAL_ALLOWED, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NEWVALALLOWED;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VALUE_UNIQUE, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UNIQUEGK;
      RAISE STPERROR;
   END IF;

   IF NVL(A_MANDATORY, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_MANDATORY;
      RAISE STPERROR;
   END IF;

   IF NVL(A_INHERIT_GK, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INHERITGK;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VALUE_LIST_TP, ' ') NOT IN ('F', 'Q') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_VALUELISTTP;
      RAISE STPERROR;
   END IF;

   IF NVL(A_ASSIGN_TP, ' ') IN ('F', 'I') AND
      NVL(A_ASSIGN_ID, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   
   
   
   
   L_LC := '@L';
   L_SS := '@A';

   BEGIN
      SELECT VERSION
      INTO L_LC_VERSION
      FROM UTLC
      WHERE LC = '@L'
      AND VERSION_IS_CURRENT = '1';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOCURRENTLCVERSION;
      RAISE STPERROR;
   END;

   BEGIN
      SELECT ALLOW_MODIFY, ACTIVE
      INTO L_ALLOW_MODIFY, L_ACTIVE
      FROM UTSS
      WHERE SS = '@A';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR;
   END;
   
   BEGIN
      SELECT LOG_HS
      INTO L_LOG_HS
      FROM UTOBJECTS 
      WHERE OBJECT = 'gksd';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      
      
      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OBJTP;
      RAISE STPERROR;
   END;
   

   OPEN L_GK_CURSOR;
   FETCH L_GK_CURSOR
   INTO L_GK;
   IF L_GK_CURSOR%FOUND THEN
      L_FOUND := TRUE;
   ELSE
      L_FOUND := FALSE;
   END IF;
   CLOSE L_GK_CURSOR;

   IF L_FOUND THEN
      DELETE FROM UTGKSD
      WHERE VERSION = A_VERSION
        AND GK = A_GK;

      DELETE FROM UTGKSDLIST
      WHERE VERSION = A_VERSION
        AND GK = A_GK;

      DELETE FROM UTGKSDSQL
      WHERE VERSION = A_VERSION
        AND GK = A_GK;
        
      L_EVENT_TP := 'GroupKeyUpdated';
   ELSE
      L_EVENT_TP := 'GroupKeyCreated';
   END IF;
   
   OPEN UNAPIGK.L_DBA_OBJECTS_CURSOR ('UTSDGK'||A_GK);
   FETCH UNAPIGK.L_DBA_OBJECTS_CURSOR INTO L_STRUCT_CREATED;
   CLOSE UNAPIGK.L_DBA_OBJECTS_CURSOR;

   INSERT INTO UTGKSD (GK, VERSION, VERSION_IS_CURRENT, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ, EFFECTIVE_TILL, EFFECTIVE_TILL_TZ, DESCRIPTION, 
                       IS_PROTECTED, VALUE_UNIQUE, SINGLE_VALUED, NEW_VAL_ALLOWED, MANDATORY,
                       STRUCT_CREATED, INHERIT_GK, VALUE_LIST_TP, DEFAULT_VALUE, DSP_ROWS, VAL_LENGTH, 
                       VAL_START, ASSIGN_TP, ASSIGN_ID, Q_TP, Q_ID, Q_CHECK_AU, Q_AU, 
                       LOG_HS, ALLOW_MODIFY, ACTIVE, LC, LC_VERSION, SS)
   VALUES (A_GK, A_VERSION, '1', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, NULL, A_DESCRIPTION, 
           A_IS_PROTECTED, A_VALUE_UNIQUE, A_SINGLE_VALUED, A_NEW_VAL_ALLOWED, A_MANDATORY, 
           L_STRUCT_CREATED, A_INHERIT_GK, A_VALUE_LIST_TP, A_DEFAULT_VALUE, A_DSP_ROWS, A_VAL_LENGTH, 
           A_VAL_START, A_ASSIGN_TP, A_ASSIGN_ID, A_Q_TP, A_Q_ID, A_Q_CHECK_AU, A_Q_AU, 
           L_LOG_HS, L_ALLOW_MODIFY, L_ACTIVE, L_LC, L_LC_VERSION, L_SS);

   IF A_VALUE_LIST_TP = 'Q' THEN
      FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
         IF NVL(A_SQLTEXT(L_SEQ_NO), ' ') <> ' ' THEN
            INSERT INTO UTGKSDSQL(GK, VERSION, SEQ, SQLTEXT)
            VALUES (A_GK, A_VERSION, L_SEQ_NO, A_SQLTEXT(L_SEQ_NO));
         END IF;
      END LOOP;
   ELSIF A_VALUE_LIST_TP = 'F' THEN
      FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
         IF NVL(A_VALUE(L_SEQ_NO), ' ') <> ' ' THEN
            INSERT INTO UTGKSDLIST(GK, VERSION, SEQ, VALUE)
            VALUES (A_GK, A_VERSION, L_SEQ_NO, A_VALUE(L_SEQ_NO));
         END IF;
      END LOOP;
   END IF;

   
   
   
   
   DELETE FROM UTEVRULES
   WHERE CUSTOM = '0'
     AND EV_TP IN ('StudyCreated', 'SdProtocolChanged', 'SdInfoFieldCreated',
                   'SdInfoFieldValueChanged', 'SdInfoFieldDeleted', 'StudyUpdated')
     AND AF LIKE '%''sdgk''%'                                                
     AND AF LIKE '%'''||A_GK||'''%';
   
   DELETE FROM UTEVRULES
   WHERE CUSTOM = '0'
     AND EV_TP IN ('StudyCreated', 'SdProtocolChanged', 'SdInfoFieldCreated',
                   'SdInfoFieldValueChanged', 'SdInfoFieldDeleted', 'StudyUpdated')
     AND AF LIKE 'UNGKASSIGN%'                                                
     AND AF LIKE '%'''||A_GK||'''%';

   
   SELECT NVL(MAX(RULE_NR),0)+1
   INTO L_RULE_NR
   FROM UTEVRULES;

   IF A_ASSIGN_TP = 'T' THEN
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR, 'sd', 'StudyCreated', 
             'AssignGroupKey(''sdgk'', '''||A_GK||''', ''~sd@pt~'', '||A_VAL_START||', '||A_VAL_LENGTH||')', 
             '0');
      
      
      
      
      
   ELSIF A_ASSIGN_TP = 'C' THEN
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR, 'sd', 'StudyCreated', 
             'AssignGroupKey(''sdgk'', '''||A_GK||''', ''~sd@sd~'', '||A_VAL_START||', '||A_VAL_LENGTH||')', 
             '0');
   ELSIF A_ASSIGN_TP = 'I' THEN
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, OBJECT_ID, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR, 'sdii', A_ASSIGN_ID, 'SdInfoFieldCreated', 
             'AssignGroupKey(''sdgk'', '''||A_GK||''', ''~sdii@'||A_ASSIGN_ID||'~'', '||A_VAL_START||', '||A_VAL_LENGTH||')', 
             '0');
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, OBJECT_ID, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR+1, 'sdii', A_ASSIGN_ID, 'SdInfoFieldValueChanged', 
             'AssignGroupKey(''sdgk'', '''||A_GK||''', ''~sdii@'||A_ASSIGN_ID||'~'', '||A_VAL_START||', '||A_VAL_LENGTH||')', 
             '0');
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, OBJECT_ID, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR+2, 'sdii', A_ASSIGN_ID, 'SdInfoFieldDeleted', 
             'DeAssignGroupKey(''sdgk'', '''||A_GK||''')', 
             '0');
   ELSIF A_ASSIGN_TP = 'F' THEN
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR, 'sd', 'StudyCreated', 
             'UNGKASSIGN.'||A_ASSIGN_ID||'('''||A_GK||''')', '0');
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR+1, 'sd', 'StudyUpdated', 
             'UNGKASSIGN.'||A_ASSIGN_ID||'('''||A_GK||''')', '0');
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR+2, 'sdii', 'SdInfoFieldCreated', 
             'UNGKASSIGN.'||A_ASSIGN_ID||'('''||A_GK||''')', '0');
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR+3, 'sdii', 'SdInfoFieldValueChanged', 
             'UNGKASSIGN.'||A_ASSIGN_ID||'('''||A_GK||''')', '0');
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR+4, 'sdii', 'SdInfoFieldDeleted', 
             'UNGKASSIGN.'||A_ASSIGN_ID||'('''||A_GK||''')', '0');
   END IF;

   
   L_RULE_NR := 0;
   FOR C_EVRULE_REC IN (SELECT *
                        FROM UTEVRULES
                        ORDER BY RULE_NR) LOOP
      L_RULE_NR := L_RULE_NR + 1;
      IF C_EVRULE_REC.RULE_NR <> L_RULE_NR THEN
         UPDATE UTEVRULES
         SET RULE_NR = L_RULE_NR
         WHERE RULE_NR = C_EVRULE_REC.RULE_NR;
      END IF;
   END LOOP;

   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT ('SaveGroupKeySd', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                    '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

















   IF NVL(L_LOG_HS, ' ') = '1' THEN
      IF L_EVENT_TP = 'GroupKeyCreated' THEN
         INSERT INTO UTGKSDHS (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                               WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_GK, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'group key "'||A_GK||'" is created.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                 L_EV_SEQ_NR);
      ELSE
         INSERT INTO UTGKSDHS (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                               WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_GK, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'group key "'||A_GK||'" is updated.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                 L_EV_SEQ_NR);
      END IF;
   ELSE
      
      
      IF L_EVENT_TP = 'GroupKeyCreated' THEN
         INSERT INTO UTGKSDHS (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                               WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_GK, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'group key "'||A_GK||'" is created.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                 L_EV_SEQ_NR);
      END IF;
   END IF;

   
   
   
   L_EV_SEQ_NR := -1;
   L_EVENT_TP := 'LoadEvRules';
   L_RESULT := UNAPIEV.BROADCASTEVENT ('SaveGroupKeySd', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                       '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   
   UNAPIGEN.NOTIFYTASKGKTODBA('SD',
                               A_GK,
                               A_VERSION,
                               A_VALUE_UNIQUE);

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveGroupKeySd',SQLERRM);
   END IF;
   IF UNAPIGK.L_DBA_OBJECTS_CURSOR%ISOPEN THEN
      CLOSE UNAPIGK.L_DBA_OBJECTS_CURSOR;
   END IF;   
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveGroupKeySd'));
END SAVEGROUPKEYSD;

FUNCTION DELETEGROUPKEYSD                              
(A_GK               IN     VARCHAR2,                   
 A_MODIFY_REASON    IN     VARCHAR2)                   
RETURN NUMBER IS

A_VERSION        VARCHAR2(20);

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_GK, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   
   IF UNAPIGEN.ISSYSTEM21CFR11COMPLIANT = UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTALLOWEDIN21CFR11;
      RAISE STPERROR;
   END IF;

   
   L_RESULT := DELETEGROUPKEYSDSTRUCTURES(A_GK);
   IF L_RESULT <> 0 AND
      L_RESULT <> UNAPIGEN.DBERR_STRUCTCREATED THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   ELSE
      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   DELETE FROM UTGKSDLIST
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   DELETE FROM UTGKSDSQL
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   DELETE FROM UTGKSD
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   DELETE FROM UTGKSDHS
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   
   
   DELETE FROM UTEVRULES
   WHERE CUSTOM = '0'
     AND EV_TP IN ('StudyCreated', 'SdProtocolChanged', 'SdInfoFieldCreated',
                   'SdInfoFieldValueChanged', 'SdInfoFieldDeleted', 'StudyUpdated')
     AND AF LIKE '%''sdgk''%'                                                
     AND AF LIKE '%'''||A_GK||'''%';
   
   DELETE FROM UTEVRULES
   WHERE CUSTOM = '0'
     AND EV_TP IN ('StudyCreated', 'SdProtocolChanged', 'SdInfoFieldCreated',
                   'SdInfoFieldValueChanged', 'SdInfoFieldDeleted', 'StudyUpdated')
     AND AF LIKE 'UNGKASSIGN%'                                                
     AND AF LIKE '%'''||A_GK||'''%';

   L_EVENT_TP := 'ObjectDeleted';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT('DeleteGroupKeySd', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                   '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);

   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   
   
   
   L_EV_SEQ_NR := -1;
   L_EVENT_TP := 'LoadEvRules';
   L_RESULT := UNAPIEV.BROADCASTEVENT ('DeleteGroupKeySd', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                       '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('DeleteGroupKeySd', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'DeleteGroupKeySd'));
END DELETEGROUPKEYSD;

FUNCTION CREATEGROUPKEYSDSTRUCTURES                
(A_GK                IN    VARCHAR2,               
 A_STOR_INITIAL      IN    VARCHAR2,               
 A_STOR_NEXT         IN    VARCHAR2,               
 A_STOR_MIN_EXTENTS  IN    NUMBER,                 
 A_STOR_PCT_INCREASE IN    NUMBER,                 
 A_STOR_PCT_FREE     IN    NUMBER,                 
 A_STOR_PCT_USED     IN    NUMBER                  
)
RETURN NUMBER IS

A_VERSION            VARCHAR2(20);
L_GKSD_CURSOR        INTEGER;
L_GK_FOUND           BOOLEAN;
L_LOG_HS             CHAR(1);
L_STOR_INITIAL       VARCHAR2(20);
L_STOR_NEXT          VARCHAR2(20);
L_STOR_MIN_EXTENTS   NUMBER; 
L_STOR_PCT_INCREASE  NUMBER;
L_STOR_PCT_FREE      NUMBER;
L_STOR_PCT_USED      NUMBER;

L_TABLE_CREATED      BOOLEAN;
L_TABLESPACE         VARCHAR2(40);
L_INDEX_TABLESPACE   VARCHAR2(40);

CURSOR L_GK_CURSOR IS
   SELECT *
   FROM UTGKSD
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

L_GK_REC       L_GK_CURSOR%ROWTYPE;

BEGIN

   L_SQLERRM := NULL;
   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
   
   L_TABLE_CREATED := FALSE;

   OPEN L_GK_CURSOR;
   FETCH L_GK_CURSOR
   INTO L_GK_REC;
   L_GK_FOUND := L_GK_CURSOR%FOUND;
   CLOSE L_GK_CURSOR;

   IF NOT L_GK_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
      RAISE STPERROR;
   END IF;

   IF NVL(L_GK_REC.STRUCT_CREATED, '0') = '1' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_STRUCTCREATED;
      RAISE STPERROR;
   END IF;

   OPEN L_TABLESPACE_CURSOR ('UTSD');
   FETCH L_TABLESPACE_CURSOR 
      INTO L_TABLESPACE;
   CLOSE L_TABLESPACE_CURSOR;

   OPEN L_INDEX_TABLESPACE_CURSOR ('UKSD');
   FETCH L_INDEX_TABLESPACE_CURSOR 
      INTO L_INDEX_TABLESPACE;
   CLOSE L_INDEX_TABLESPACE_CURSOR;
    
   IF ( A_STOR_INITIAL IS NULL ) THEN
      L_RET_CODE := UNAPIGK.INITGROUPKEYDEFSTORAGE('SD', 
                                                   L_STOR_INITIAL, 
                                                   L_STOR_NEXT, 
                                                   L_STOR_MIN_EXTENTS, 
                                                   L_STOR_PCT_INCREASE, 
                                                   L_STOR_PCT_FREE, 
                                                   L_STOR_PCT_USED);
   ELSE
      L_STOR_INITIAL      := A_STOR_INITIAL;
      L_STOR_NEXT         := A_STOR_NEXT;
      L_STOR_MIN_EXTENTS  := A_STOR_MIN_EXTENTS;
      L_STOR_PCT_INCREASE := A_STOR_PCT_INCREASE;
      L_STOR_PCT_FREE     := A_STOR_PCT_FREE;
      L_STOR_PCT_USED     := A_STOR_PCT_USED;
   END IF;
   
    
   
   
   

   
   
   
   
   
   
   
   
   L_GKSD_CURSOR := DBMS_SQL.OPEN_CURSOR;
   
   L_SQL_STRING := 'CREATE TABLE utsdgk' || A_GK ||
                   '(' || A_GK || ' VARCHAR2(40),'||
                   'sd VARCHAR2(20),' ||
                   'CONSTRAINT uksdgk' || A_GK ||
                   ' PRIMARY KEY(' || A_GK ||', sd)' ||
                   ' USING INDEX TABLESPACE '|| L_INDEX_TABLESPACE ||
                   ' STORAGE (INITIAL '      || L_STOR_INITIAL || 
                             ' NEXT '        || L_STOR_NEXT ||
                             ' PCTINCREASE ' || TO_CHAR(L_STOR_PCT_INCREASE) || ') ' ||
                   ' PCTFREE ' || TO_CHAR(L_STOR_PCT_FREE) ;

   IF L_GK_REC.VALUE_UNIQUE = '1' THEN
      L_SQL_STRING :=  L_SQL_STRING || ',CONSTRAINT ucscgk' || A_GK ||
                     ' UNIQUE(' || A_GK || ')'||
                     ' USING INDEX TABLESPACE '|| L_INDEX_TABLESPACE ||
                     ' STORAGE (INITIAL '      || L_STOR_INITIAL || 
                              ' NEXT '         || L_STOR_NEXT ||
                              ' PCTINCREASE '  || TO_CHAR(L_STOR_PCT_INCREASE) || ') ' ||
                     ' PCTFREE ' || TO_CHAR(L_STOR_PCT_FREE) ;
   END IF;
   
   L_SQL_STRING := L_SQL_STRING || ') TABLESPACE '          || L_TABLESPACE || 
                                    ' STORAGE (INITIAL '    || L_STOR_INITIAL || 
                                             ' NEXT '       || L_STOR_NEXT || 
                                             ' PCTINCREASE '|| TO_CHAR(L_STOR_PCT_INCREASE)|| 
                                             ' MINEXTENTS ' || TO_CHAR(L_STOR_MIN_EXTENTS)|| 
                                              ')'           ||
                                    ' PCTFREE ' || TO_CHAR(L_STOR_PCT_FREE) ||
                                    ' PCTUSED ' || TO_CHAR(L_STOR_PCT_USED) ;

   DBMS_SQL.PARSE(L_GKSD_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   L_RESULT := DBMS_SQL.EXECUTE(L_GKSD_CURSOR);
   L_TABLE_CREATED := TRUE;   

   
   
   
   
   
   
   
   L_SQL_STRING := 'CREATE INDEX uisdgk'|| A_GK ||
                   ' ON utsdgk' || A_GK || '(sd) ' ||
                   ' STORAGE (INITIAL '    || L_STOR_INITIAL || 
                            ' NEXT '       || L_STOR_NEXT || 
                            ' PCTINCREASE '|| TO_CHAR(L_STOR_PCT_INCREASE)|| 
                            ' MINEXTENTS ' || TO_CHAR(L_STOR_MIN_EXTENTS)|| 
                   ' ) PCTFREE ' || TO_CHAR(L_STOR_PCT_FREE) ||
                   ' TABLESPACE '|| L_INDEX_TABLESPACE;
   DBMS_SQL.PARSE(L_GKSD_CURSOR, L_SQL_STRING, DBMS_SQL.V7);
   L_RESULT := DBMS_SQL.EXECUTE(L_GKSD_CURSOR);
   
   DBMS_SQL.CLOSE_CURSOR(L_GKSD_CURSOR);

   
   UPDATE UTGKSD
   SET STRUCT_CREATED = '1'
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   
   
   
   L_RESULT := CREATEGROUPKEYSDENTRIES(A_GK);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      L_SQLERRM := 'CreateGroupKeySdEntries returned '||L_RESULT||' for gk='||A_GK;
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;

   
   L_RESULT := UNAPIGK.CREATEUSERSTRUCTSFORGROUPKEY('SD', A_GK);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      L_SQLERRM := 'CreateUserStructsForGroupKey returned '||L_RESULT||' for gk_tp=SD#gk='||A_GK;
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;

   L_EVENT_TP := 'GroupKeyStructuresCreated';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT ('CreateGroupKeySdStructures', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                    '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   BEGIN
      SELECT LOG_HS
      INTO L_LOG_HS
      FROM UTOBJECTS 
      WHERE OBJECT = 'gksd';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      
      
      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OBJTP;
      RAISE STPERROR;
   END;
   
   IF NVL(L_LOG_HS, ' ') = '1' THEN
      INSERT INTO UTGKSDHS (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                            WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES (A_GK, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
              'Database objects for group key "'||A_GK||'" are created.', 
              CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
         UNAPIGEN.LOGERROR('CreateGroupKeySdStructures', SQLERRM);
         UNAPIGEN.LOGERROR('CreateGroupKeySdStructures', 'HELP for DBA:'||SUBSTR(L_SQL_STRING,1,235));
         IF (LENGTH(L_SQL_STRING)>235) THEN
            UNAPIGEN.LOGERROR('CreateGroupKeySdStructures', 'HELP for DBA:'||SUBSTR(L_SQL_STRING,236,235));
         END IF;
   END IF;
   IF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('CreateGroupKeySdStructures', SUBSTR(L_SQLERRM,1,235));
   END IF;   
   IF L_GK_CURSOR%ISOPEN THEN
      CLOSE L_GK_CURSOR;
   END IF;
   IF L_TABLE_CREATED THEN
      
      BEGIN
         L_SQL_STRING := 'DROP TABLE utsdgk' || A_GK;
         DBMS_SQL.PARSE(L_GKSD_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         L_RESULT := DBMS_SQL.EXECUTE(L_GKSD_CURSOR);
      EXCEPTION
      WHEN OTHERS THEN
         NULL;
      END;
   END IF;
   IF DBMS_SQL.IS_OPEN(L_GKSD_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_GKSD_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'CreateGroupKeySdStructures'));
END CREATEGROUPKEYSDSTRUCTURES;

FUNCTION DELETEGROUPKEYSDSTRUCTURES              
(A_GK    IN    VARCHAR2)                         
RETURN NUMBER IS

A_VERSION         VARCHAR2(20);
L_GKSD_CURSOR     INTEGER;
L_STRUCT_CREATED  CHAR(1);
L_GK_FOUND        BOOLEAN;
L_LOG_HS          CHAR(1);

CURSOR L_GK_CURSOR IS
   SELECT NVL(STRUCT_CREATED, '0')
   FROM UTGKSD
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   OPEN L_GK_CURSOR;
   FETCH L_GK_CURSOR
   INTO L_STRUCT_CREATED;
   L_GK_FOUND := L_GK_CURSOR%FOUND;
   CLOSE L_GK_CURSOR;

   IF NOT L_GK_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
      RAISE STPERROR;
   END IF;

   IF NVL(L_STRUCT_CREATED, '0') = '0' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_STRUCTCREATED;
      RAISE STPERROR;
   END IF;

   
   IF UNAPIGEN.ISSYSTEM21CFR11COMPLIANT = UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTALLOWEDIN21CFR11;
      RAISE STPERROR;
   END IF;

      
   L_RESULT := UNAPIGK.DELETEUSERSTRUCTSFORGROUPKEY('SD', A_GK);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      L_SQLERRM := 'DeleteUserStructsForGroupKey returned '||L_RESULT||' for gk_tp=ST#gk='||A_GK;
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;


   DELETE FROM UTSDGK
   WHERE GK = A_GK;

   BEGIN
      L_GKSD_CURSOR := DBMS_SQL.OPEN_CURSOR;
      L_SQL_STRING := 'DROP TABLE utsdgk' || A_GK ;
      DBMS_SQL.PARSE(L_GKSD_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      L_RESULT := DBMS_SQL.EXECUTE(L_GKSD_CURSOR);
      DBMS_SQL.CLOSE_CURSOR(L_GKSD_CURSOR);
   EXCEPTION
   WHEN TABLE_DOES_NOT_EXIST THEN
      
      NULL;
   END;

   
   UPDATE UTGKSD
   SET STRUCT_CREATED = '0'
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   L_EVENT_TP := 'GroupKeyStructuresDeleted';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT ('DeleteGroupKeySdStructures', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                    '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   BEGIN
      SELECT LOG_HS
      INTO L_LOG_HS
      FROM UTOBJECTS 
      WHERE OBJECT = 'gksd';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      
      
      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OBJTP;
      RAISE STPERROR;
   END;
   
   IF NVL(L_LOG_HS, ' ') = '1' THEN
      INSERT INTO UTGKSDHS (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                            WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES (A_GK, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
              'Database objects for group key "'||A_GK||'" are deleted.', 
              CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   
   UNAPIGK.DELETEGROUPKEYFROMTASK('sdgk', A_GK);

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('DeleteGroupKeySdStructures', SQLERRM);
   END IF;
   IF L_GK_CURSOR%ISOPEN THEN
      CLOSE L_GK_CURSOR;
   END IF;
   IF DBMS_SQL.IS_OPEN(L_GKSD_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_GKSD_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'DeleteGroupKeySdStructures'));
END DELETEGROUPKEYSDSTRUCTURES;

FUNCTION CREATEGROUPKEYSDENTRIES                 
(A_GK    IN    VARCHAR2)                         
RETURN NUMBER IS

A_VERSION        VARCHAR2(20);
L_GKSD_CURSOR  INTEGER;
L_GK_FOUND     BOOLEAN;

CURSOR L_GK_CURSOR IS
   SELECT *
   FROM UTGKSD
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

L_GK_REC       L_GK_CURSOR%ROWTYPE;

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   OPEN L_GK_CURSOR;
   FETCH L_GK_CURSOR
   INTO L_GK_REC;
   L_GK_FOUND := L_GK_CURSOR%FOUND;
   CLOSE L_GK_CURSOR;

   IF NOT L_GK_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
      RAISE STPERROR;
   END IF;

   IF NVL(L_GK_REC.STRUCT_CREATED, '0') = '0' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_STRUCTCREATED;
      RAISE STPERROR;
   END IF;

   
   
   
   
   L_GKSD_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'INSERT INTO utsdgk'||A_GK||'('||A_GK||', sd) '||
                   'SELECT value, sd '||
                   'FROM utsdgk '||
                   'WHERE gk = '''||A_GK||''' AND value IS NOT NULL';
   DBMS_SQL.PARSE(L_GKSD_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   
   BEGIN
      L_RESULT := DBMS_SQL.EXECUTE(L_GKSD_CURSOR);
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UNIQUEGK;
         RAISE STPERROR;
   END;
   
   DBMS_SQL.CLOSE_CURSOR(L_GKSD_CURSOR);

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('CreateGroupKeySdEntries', SQLERRM);
   END IF;
   IF L_GK_CURSOR%ISOPEN THEN
      CLOSE L_GK_CURSOR;
   END IF;
   IF DBMS_SQL.IS_OPEN (L_GKSD_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_GKSD_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'CreateGroupKeySdEntries'));
END CREATEGROUPKEYSDENTRIES;

FUNCTION DELETEGROUPKEYSDENTRIES                 
(A_GK    IN    VARCHAR2)                         
RETURN NUMBER IS

A_VERSION        VARCHAR2(20);
L_GKSD_CURSOR     INTEGER;
L_STRUCT_CREATED  CHAR(1);
L_GK_FOUND        BOOLEAN;

CURSOR L_GK_CURSOR IS
   SELECT NVL(STRUCT_CREATED, '0')
   FROM UTGKSD
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   OPEN L_GK_CURSOR;
   FETCH L_GK_CURSOR
   INTO L_STRUCT_CREATED;
   L_GK_FOUND := L_GK_CURSOR%FOUND;
   CLOSE L_GK_CURSOR;

   IF NOT L_GK_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
      RAISE STPERROR;
   END IF;

   IF NVL(L_STRUCT_CREATED,'0') = '0' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_STRUCTCREATED;
      RAISE STPERROR;
   END IF;

   
   IF UNAPIGEN.ISSYSTEM21CFR11COMPLIANT = UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTALLOWEDIN21CFR11;
      RAISE STPERROR;
   END IF;

   DELETE FROM UTSDGK
   WHERE GK = A_GK;

   L_GKSD_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'TRUNCATE TABLE utsdgk' || A_GK;
   DBMS_SQL.PARSE(L_GKSD_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   L_RESULT := DBMS_SQL.EXECUTE(L_GKSD_CURSOR);

   DBMS_SQL.CLOSE_CURSOR(L_GKSD_CURSOR);

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('DeleteGroupKeySdEntries', SQLERRM);
   END IF;
   IF L_GK_CURSOR%ISOPEN THEN
      CLOSE L_GK_CURSOR;
   END IF;
   IF DBMS_SQL.IS_OPEN(L_GKSD_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_GKSD_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'DeleteGroupKeySdEntries'));
END DELETEGROUPKEYSDENTRIES;

FUNCTION GETGROUPKEYDCLIST                                 
(A_GK                  OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_DESCRIPTION         OUT     UNAPIGEN.VC40_TABLE_TYPE,   
 A_NR_OF_ROWS          IN OUT  NUMBER,                     
 A_WHERE_CLAUSE        IN      VARCHAR2,                   
 A_NEXT_ROWS           IN      NUMBER)                     
RETURN NUMBER IS

L_GK           VARCHAR2(20);
L_DESCRIPTION  VARCHAR2(40);

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_GK_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_GK_CURSOR);
         P_GK_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_GK_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
         L_WHERE_CLAUSE := 'ORDER BY gk, version'; 
      ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
         L_WHERE_CLAUSE := 'WHERE version_is_current = ''1'' '||
                           'AND gk = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                           ''' ORDER BY gk, version';
      ELSE
         L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
      END IF;

      IF P_GK_CURSOR IS NULL THEN
         P_GK_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;

      L_SQL_STRING:= 'SELECT gk, description FROM dd'||UNAPIGEN.P_DD||'.uvgkdc ' ||
                      L_WHERE_CLAUSE;
      DBMS_SQL.PARSE(P_GK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

      DBMS_SQL.DEFINE_COLUMN(P_GK_CURSOR, 1, L_GK, 20);
      DBMS_SQL.DEFINE_COLUMN(P_GK_CURSOR, 2, L_DESCRIPTION, 40);
      L_RESULT := DBMS_SQL.EXECUTE(P_GK_CURSOR);
   END IF;

   L_RESULT := DBMS_SQL.FETCH_ROWS(P_GK_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_GK_CURSOR, 1, L_GK);
      DBMS_SQL.COLUMN_VALUE(P_GK_CURSOR, 2, L_DESCRIPTION);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_GK(L_FETCHED_ROWS) := L_GK;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_GK_CURSOR);
      END IF;
   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_GK_CURSOR);
       P_GK_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   END IF;

   IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_GK_CURSOR);
      P_GK_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetGroupKeyDcList', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (P_GK_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (P_GK_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETGROUPKEYDCLIST;
 
FUNCTION GETGROUPKEYDC                                  
(A_GK               OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_DESCRIPTION      OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_IS_PROTECTED     OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_VALUE_UNIQUE     OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_SINGLE_VALUED    OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_NEW_VAL_ALLOWED  OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_MANDATORY        OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_STRUCT_CREATED   OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_INHERIT_GK       OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_VALUE_LIST_TP    OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_DEFAULT_VALUE    OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_DSP_ROWS         OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_VAL_LENGTH       OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_VAL_START        OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_ASSIGN_TP        OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_ASSIGN_ID        OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_Q_TP             OUT    UNAPIGEN.CHAR2_TABLE_TYPE,   
 A_Q_ID             OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_Q_CHECK_AU       OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_Q_AU             OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_NR_OF_ROWS       IN OUT NUMBER,                      
 A_WHERE_CLAUSE     IN     VARCHAR2)                    
RETURN NUMBER IS

L_GK                VARCHAR2(20);
L_DESCRIPTION       VARCHAR2(40);
L_IS_PROTECTED      CHAR(1);
L_VALUE_UNIQUE      CHAR(1);
L_SINGLE_VALUED     CHAR(1);
L_NEW_VAL_ALLOWED   CHAR(1);
L_MANDATORY         CHAR(1);
L_STRUCT_CREATED    CHAR(1);
L_INHERIT_GK        CHAR(1);
L_VALUE_LIST_TP     CHAR(1);
L_DEFAULT_VALUE     VARCHAR2(40);
L_DSP_ROWS          NUMBER(3);
L_VAL_LENGTH        NUMBER(3);
L_VAL_START         NUMBER(3);
L_ASSIGN_TP         CHAR(1);
L_ASSIGN_ID         VARCHAR2(20);
L_Q_TP              CHAR(2);
L_Q_ID              VARCHAR2(20);
L_Q_CHECK_AU        CHAR(1);
L_Q_AU              VARCHAR2(20);
L_GK_CURSOR         INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'ORDER BY gk, version'; 
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := 'WHERE version_is_current = ''1'' '||
                        'AND gk = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                        ''' ORDER BY gk, version';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_GK_CURSOR := DBMS_SQL.OPEN_CURSOR;

   L_SQL_STRING := 'SELECT gk, description, is_protected, value_unique, ' ||
                   'single_valued, new_val_allowed, mandatory, struct_created, inherit_gk,' ||
                   'value_list_tp, default_value, dsp_rows, val_length, val_start, ' ||
                   'assign_tp, assign_id, q_tp, q_id, q_check_au, q_au ' ||
                   'FROM dd' || UNAPIGEN.P_DD || '.uvgkdc ' || L_WHERE_CLAUSE;
   DBMS_SQL.PARSE(L_GK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 1, L_GK, 20);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 2, L_DESCRIPTION, 40);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 3, L_IS_PROTECTED, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 4, L_VALUE_UNIQUE, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 5, L_SINGLE_VALUED, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 6, L_NEW_VAL_ALLOWED, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 7, L_MANDATORY, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 8, L_STRUCT_CREATED, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 9, L_INHERIT_GK, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 10, L_VALUE_LIST_TP, 1);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 11, L_DEFAULT_VALUE, 40);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 12, L_DSP_ROWS);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 13, L_VAL_LENGTH);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 14, L_VAL_START);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 15, L_ASSIGN_TP, 1);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 16, L_ASSIGN_ID, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 17, L_Q_TP, 2);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 18, L_Q_ID, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 19, L_Q_CHECK_AU, 1);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 20, L_Q_AU, 20);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_GK_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 1, L_GK);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 2, L_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 3, L_IS_PROTECTED);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 4, L_VALUE_UNIQUE);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 5, L_SINGLE_VALUED);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 6, L_NEW_VAL_ALLOWED);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 7, L_MANDATORY);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 8, L_STRUCT_CREATED);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 9, L_INHERIT_GK);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 10, L_VALUE_LIST_TP);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 11, L_DEFAULT_VALUE);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 12, L_DSP_ROWS);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 13, L_VAL_LENGTH);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 14, L_VAL_START);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 15, L_ASSIGN_TP);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 16, L_ASSIGN_ID);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 17, L_Q_TP);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 18, L_Q_ID);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 19, L_Q_CHECK_AU);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 20, L_Q_AU);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_GK (L_FETCHED_ROWS) := L_GK;
      A_DESCRIPTION (L_FETCHED_ROWS) := L_DESCRIPTION;
      A_IS_PROTECTED (L_FETCHED_ROWS) := L_IS_PROTECTED;
      A_VALUE_UNIQUE (L_FETCHED_ROWS) := L_VALUE_UNIQUE;
      A_SINGLE_VALUED (L_FETCHED_ROWS) := L_SINGLE_VALUED;
      A_NEW_VAL_ALLOWED (L_FETCHED_ROWS) := L_NEW_VAL_ALLOWED;
      A_MANDATORY (L_FETCHED_ROWS) := L_MANDATORY;
      A_STRUCT_CREATED (L_FETCHED_ROWS) := L_STRUCT_CREATED;
      A_INHERIT_GK (L_FETCHED_ROWS) := L_INHERIT_GK;
      A_VALUE_LIST_TP (L_FETCHED_ROWS) := L_VALUE_LIST_TP;
      A_DEFAULT_VALUE (L_FETCHED_ROWS) := L_DEFAULT_VALUE;
      A_DSP_ROWS(L_FETCHED_ROWS) := L_DSP_ROWS;
      A_VAL_LENGTH(L_FETCHED_ROWS) := L_VAL_LENGTH;
      A_VAL_START(L_FETCHED_ROWS) := L_VAL_START;
      A_ASSIGN_TP(L_FETCHED_ROWS) := L_ASSIGN_TP;
      A_ASSIGN_ID(L_FETCHED_ROWS) := L_ASSIGN_ID;
      A_Q_TP(L_FETCHED_ROWS) := L_Q_TP;
      A_Q_ID(L_FETCHED_ROWS) := L_Q_ID;
      A_Q_CHECK_AU(L_FETCHED_ROWS) := L_Q_CHECK_AU;
      A_Q_AU(L_FETCHED_ROWS) := L_Q_AU;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_GK_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_GK_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetGroupKeyDc', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
     IF DBMS_SQL.IS_OPEN (L_GK_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_GK_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETGROUPKEYDC;

FUNCTION GETGROUPKEYDCVALUE                            
(A_GK               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_VALUE            OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_NR_OF_ROWS       IN OUT  NUMBER,                    
 A_WHERE_CLAUSE     IN      VARCHAR2)                  
RETURN NUMBER IS

L_GK              VARCHAR2(20);
L_VALUE           VARCHAR2(40);
L_GK_CURSOR       INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'ORDER BY list.gk, list.version, list.seq'; 
   ELSIF
      UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := ', dd'||UNAPIGEN.P_DD||'.uvgkdc dc WHERE dc.version_is_current = ''1'' '||
                        'AND list.version = dc.version '||
                        'AND list.gk = dc.gk '||
                        'AND list.gk = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                        ''' ORDER BY list.seq';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_GK_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT list.gk, list.value FROM dd'||UNAPIGEN.P_DD||'.uvgkdclist list ' || L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_GK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 1, L_GK, 20);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 2, L_VALUE, 40);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_GK_CURSOR);

   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 1, L_GK);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 2, L_VALUE);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_GK(L_FETCHED_ROWS) := L_GK;
      A_VALUE(L_FETCHED_ROWS) := L_VALUE;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_GK_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_GK_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;
   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetGroupKeyDcValue', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (L_GK_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_GK_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETGROUPKEYDCVALUE;

FUNCTION GETGROUPKEYDCSQL                              
(A_GK              OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_SQLTEXT         OUT     UNAPIGEN.VC255_TABLE_TYPE,  
 A_NR_OF_ROWS      IN OUT  NUMBER,                     
 A_WHERE_CLAUSE    IN      VARCHAR2)                   
RETURN NUMBER IS

L_GK              VARCHAR2(20);
L_SQLTEXT         VARCHAR2(255);
L_GK_CURSOR       INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'ORDER BY sql.gk, sql.version, sql.seq'; 
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := ', dd'||UNAPIGEN.P_DD||'.uvgkdc dc WHERE dc.version_is_current = ''1'' '||
                        'AND sql.version = dc.version '||
                        'AND sql.gk = dc.gk '||
                        'AND sql.gk = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                        ''' ORDER BY sql.seq';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_GK_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT sql.gk, sql.sqltext FROM dd'||UNAPIGEN.P_DD||'.uvgkdcsql sql ' || L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_GK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 1, L_GK, 20);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 2, L_SQLTEXT, 255);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_GK_CURSOR);

   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 1, L_GK);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 2, L_SQLTEXT);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_GK(L_FETCHED_ROWS) := L_GK;
      A_SQLTEXT(L_FETCHED_ROWS) := L_SQLTEXT;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_GK_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_GK_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetGroupKeyDcSql', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (L_GK_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_GK_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETGROUPKEYDCSQL;

FUNCTION SAVEGROUPKEYDC                               
(A_GK               IN   VARCHAR2,                    
 A_DESCRIPTION      IN   VARCHAR2,                    
 A_IS_PROTECTED     IN   CHAR,                        
 A_VALUE_UNIQUE     IN   CHAR,                        
 A_SINGLE_VALUED    IN   CHAR,                        
 A_NEW_VAL_ALLOWED  IN   CHAR,                        
 A_MANDATORY        IN   CHAR,                        
 A_STRUCT_CREATED   IN   CHAR,                        
 A_INHERIT_GK       IN   CHAR,                        
 A_VALUE_LIST_TP    IN   CHAR,                        
 A_DEFAULT_VALUE    IN   VARCHAR2,                    
 A_DSP_ROWS         IN   NUMBER,                      
 A_VAL_LENGTH       IN   NUMBER,                      
 A_VAL_START        IN   NUMBER,                      
 A_ASSIGN_TP        IN   CHAR,                        
 A_ASSIGN_ID        IN   VARCHAR2,                    
 A_Q_TP             IN   CHAR,                        
 A_Q_ID             IN   VARCHAR2,                    
 A_Q_CHECK_AU       IN   CHAR,                        
 A_Q_AU             IN   VARCHAR2,                    
 A_VALUE            IN   UNAPIGEN.VC40_TABLE_TYPE,    
 A_SQLTEXT          IN   UNAPIGEN.VC255_TABLE_TYPE,   
 A_NR_OF_ROWS       IN   NUMBER,                      
 A_MODIFY_REASON    IN   VARCHAR2)                    
RETURN NUMBER IS

A_VERSION        VARCHAR2(20);
L_FOUND          BOOLEAN;
L_SEQ_NO         NUMBER;
L_GK             VARCHAR2(20);
L_STRUCT_CREATED CHAR(1);
L_LC             VARCHAR2(2);
L_LC_VERSION     VARCHAR2(20);
L_SS             VARCHAR2(2);
L_LOG_HS         CHAR(1);
L_ALLOW_MODIFY   CHAR(1);
L_ACTIVE         CHAR(1);
L_RULE_NR        NUMBER(5);

CURSOR L_GK_CURSOR IS
   SELECT GK 
   FROM UTGKDC
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_GK, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_IS_PROTECTED, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_PROTECTED;
      RAISE STPERROR;
   END IF;

   IF NVL(A_SINGLE_VALUED, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SINGLEVALUED;
      RAISE STPERROR;
   END IF;

   IF NVL(A_NEW_VAL_ALLOWED, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NEWVALALLOWED;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VALUE_UNIQUE, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UNIQUEGK;
      RAISE STPERROR;
   END IF;

   IF NVL(A_MANDATORY, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_MANDATORY;
      RAISE STPERROR;
   END IF;

   IF NVL(A_INHERIT_GK, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INHERITGK;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VALUE_LIST_TP, ' ') NOT IN ('F', 'Q') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_VALUELISTTP;
      RAISE STPERROR;
   END IF;

   IF NVL(A_ASSIGN_TP, ' ') = 'F' AND
      NVL(A_ASSIGN_ID, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   
   
   
   
   L_LC := '@L';
   L_SS := '@A';

   BEGIN
      SELECT VERSION
      INTO L_LC_VERSION
      FROM UTLC
      WHERE LC = '@L'
      AND VERSION_IS_CURRENT = '1';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOCURRENTLCVERSION;
      RAISE STPERROR;
   END;

   BEGIN
      SELECT ALLOW_MODIFY, ACTIVE
      INTO L_ALLOW_MODIFY, L_ACTIVE
      FROM UTSS
      WHERE SS = '@A';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR;
   END;
   
   BEGIN
      SELECT LOG_HS
      INTO L_LOG_HS
      FROM UTOBJECTS 
      WHERE OBJECT = 'gkdc';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      
      
      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OBJTP;
      RAISE STPERROR;
   END;
   

   OPEN L_GK_CURSOR;
   FETCH L_GK_CURSOR
   INTO L_GK;
   IF L_GK_CURSOR%FOUND THEN
      L_FOUND := TRUE;
   ELSE
      L_FOUND := FALSE;
   END IF;
   CLOSE L_GK_CURSOR;

   IF L_FOUND THEN
      DELETE FROM UTGKDC
      WHERE VERSION = A_VERSION
        AND GK = A_GK;

      DELETE FROM UTGKDCLIST
      WHERE VERSION = A_VERSION
        AND GK = A_GK;

      DELETE FROM UTGKDCSQL
      WHERE VERSION = A_VERSION
        AND GK = A_GK;
        
      L_EVENT_TP := 'GroupKeyUpdated';
   ELSE
      L_EVENT_TP := 'GroupKeyCreated';
   END IF;

   OPEN UNAPIGK.L_DBA_OBJECTS_CURSOR ('UTDCGK'||A_GK);
   FETCH UNAPIGK.L_DBA_OBJECTS_CURSOR INTO L_STRUCT_CREATED;
   CLOSE UNAPIGK.L_DBA_OBJECTS_CURSOR;
      
   INSERT INTO UTGKDC (GK, VERSION, VERSION_IS_CURRENT, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ, EFFECTIVE_TILL, EFFECTIVE_TILL_TZ, DESCRIPTION, 
                       IS_PROTECTED, VALUE_UNIQUE, SINGLE_VALUED, NEW_VAL_ALLOWED, MANDATORY,
                       STRUCT_CREATED, INHERIT_GK, VALUE_LIST_TP, DEFAULT_VALUE, DSP_ROWS, VAL_LENGTH, 
                       VAL_START, ASSIGN_TP, ASSIGN_ID, Q_TP, Q_ID, Q_CHECK_AU, Q_AU, 
                       LOG_HS, ALLOW_MODIFY, ACTIVE, LC, LC_VERSION, SS)
   VALUES (A_GK, A_VERSION, '1', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, NULL, A_DESCRIPTION, 
           A_IS_PROTECTED, A_VALUE_UNIQUE, A_SINGLE_VALUED, A_NEW_VAL_ALLOWED, A_MANDATORY, 
           L_STRUCT_CREATED, A_INHERIT_GK, A_VALUE_LIST_TP, A_DEFAULT_VALUE, A_DSP_ROWS, A_VAL_LENGTH, 
           A_VAL_START, A_ASSIGN_TP, A_ASSIGN_ID, A_Q_TP, A_Q_ID, A_Q_CHECK_AU, A_Q_AU, 
           L_LOG_HS, L_ALLOW_MODIFY, L_ACTIVE, L_LC, L_LC_VERSION, L_SS);

   IF A_VALUE_LIST_TP = 'Q' THEN
      FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
         IF NVL(A_SQLTEXT(L_SEQ_NO), ' ') <> ' ' THEN
            INSERT INTO UTGKDCSQL(GK, VERSION, SEQ, SQLTEXT)
            VALUES (A_GK, A_VERSION, L_SEQ_NO, A_SQLTEXT(L_SEQ_NO));
         END IF;
      END LOOP;
   ELSIF A_VALUE_LIST_TP = 'F' THEN
      FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
         IF NVL(A_VALUE(L_SEQ_NO), ' ') <> ' ' THEN
            INSERT INTO UTGKDCLIST(GK, VERSION, SEQ, VALUE)
            VALUES (A_GK, A_VERSION, L_SEQ_NO, A_VALUE(L_SEQ_NO));
         END IF;
      END LOOP;
   END IF;

   
   
   
   
   DELETE FROM UTEVRULES
   WHERE CUSTOM = '0'
     AND OBJECT_TP = 'dc'
     AND EV_TP IN ('ObjectCreated', 'ObjectUpdated')
     AND AF LIKE '%''dcgk''%'
     AND AF LIKE '%'''||A_GK||'''%';
   
   DELETE FROM UTEVRULES
   WHERE CUSTOM = '0'
     AND OBJECT_TP = 'dc'
     AND EV_TP IN ('ObjectCreated', 'ObjectUpdated')
     AND AF LIKE 'UNGKASSIGN%'
     AND AF LIKE '%'''||A_GK||'''%';

   
   SELECT NVL(MAX(RULE_NR),0)+1
   INTO L_RULE_NR
   FROM UTEVRULES;
   
   IF A_ASSIGN_TP = 'T' THEN
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR, 'dc', 'ObjectCreated', 
             'AssignGroupKey(''dcgk'', '''||A_GK||''', ''~dc@dc~'', '||A_VAL_START||', '||A_VAL_LENGTH||')', 
             '0');
   ELSIF A_ASSIGN_TP = 'F' THEN
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR, 'dc', 'ObjectCreated', 
             'UNGKASSIGN.'||A_ASSIGN_ID||'('''||A_GK||''')', '0');
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR+1, 'dc', 'ObjectUpdated', 
             'UNGKASSIGN.'||A_ASSIGN_ID||'('''||A_GK||''')', '0');
   END IF;

   
   L_RULE_NR := 0;
   FOR C_EVRULE_REC IN (SELECT *
                        FROM UTEVRULES
                        ORDER BY RULE_NR) LOOP
      L_RULE_NR := L_RULE_NR + 1;
      IF C_EVRULE_REC.RULE_NR <> L_RULE_NR THEN
         UPDATE UTEVRULES
         SET RULE_NR = L_RULE_NR
         WHERE RULE_NR = C_EVRULE_REC.RULE_NR;
      END IF;
   END LOOP;

   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT ('SaveGroupKeyDc', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                    '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

















   IF NVL(L_LOG_HS, ' ') = '1' THEN
      IF L_EVENT_TP = 'GroupKeyCreated' THEN
         INSERT INTO UTGKDCHS (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                               WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_GK, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'group key "'||A_GK||'" is created.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                 L_EV_SEQ_NR);
      ELSE
         INSERT INTO UTGKDCHS (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                               WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_GK, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'group key "'||A_GK||'" is updated.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                 L_EV_SEQ_NR);
      END IF;
   ELSE
      
      
      IF L_EVENT_TP = 'GroupKeyCreated' THEN
         INSERT INTO UTGKDCHS (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                               WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_GK, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'group key "'||A_GK||'" is created.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                 L_EV_SEQ_NR);
      END IF;
   END IF;

   
   
   
   L_EV_SEQ_NR := -1;
   L_EVENT_TP := 'LoadEvRules';
   L_RESULT := UNAPIEV.BROADCASTEVENT ('SaveGroupKeyDc', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                       '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   
   UNAPIGEN.NOTIFYTASKGKTODBA('DC',
                               A_GK,
                               A_VERSION,
                               A_VALUE_UNIQUE);

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveGroupKeyDc',SQLERRM);
   END IF;
   IF UNAPIGK.L_DBA_OBJECTS_CURSOR%ISOPEN THEN
      CLOSE UNAPIGK.L_DBA_OBJECTS_CURSOR;
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveGroupKeyDc'));
END SAVEGROUPKEYDC;

FUNCTION DELETEGROUPKEYDC                              
(A_GK               IN     VARCHAR2,                   
 A_MODIFY_REASON    IN     VARCHAR2)                   
RETURN NUMBER IS

A_VERSION        VARCHAR2(20);

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_GK, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   
   IF UNAPIGEN.ISSYSTEM21CFR11COMPLIANT = UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTALLOWEDIN21CFR11;
      RAISE STPERROR;
   END IF;

   
   L_RESULT := DELETEGROUPKEYDCSTRUCTURES(A_GK);
   IF L_RESULT <> 0 AND
      L_RESULT <> UNAPIGEN.DBERR_STRUCTCREATED THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   ELSE
      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   DELETE FROM UTGKDCLIST
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   DELETE FROM UTGKDCSQL
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   DELETE FROM UTGKDC
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   DELETE FROM UTGKDCHS
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   
   
   DELETE FROM UTEVRULES
   WHERE CUSTOM = '0'
     AND OBJECT_TP = 'dc'
     AND EV_TP IN ('ObjectCreated', 'ObjectUpdated')
     AND AF LIKE '%''dcgk''%'
     AND AF LIKE '%'''||A_GK||'''%';
   
   DELETE FROM UTEVRULES
   WHERE CUSTOM = '0'
     AND OBJECT_TP = 'dc'
     AND EV_TP IN ('ObjectCreated', 'ObjectUpdated')
     AND AF LIKE 'UNGKASSIGN%'
     AND AF LIKE '%'''||A_GK||'''%';

   L_EVENT_TP := 'ObjectDeleted';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT('DeleteGroupKeyDc', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                   '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);

   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   
   
   
   L_EV_SEQ_NR := -1;
   L_EVENT_TP := 'LoadEvRules';
   L_RESULT := UNAPIEV.BROADCASTEVENT ('DeleteGroupKeyDc', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                       '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('DeleteGroupKeyDc', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'DeleteGroupKeyDc'));
END DELETEGROUPKEYDC;

FUNCTION CREATEGROUPKEYDCSTRUCTURES                
(A_GK                IN    VARCHAR2,               
 A_STOR_INITIAL      IN    VARCHAR2,               
 A_STOR_NEXT         IN    VARCHAR2,               
 A_STOR_MIN_EXTENTS  IN    NUMBER,                 
 A_STOR_PCT_INCREASE IN    NUMBER,                 
 A_STOR_PCT_FREE     IN    NUMBER,                 
 A_STOR_PCT_USED     IN    NUMBER                  
)
RETURN NUMBER IS

A_VERSION            VARCHAR2(20);
L_GKDC_CURSOR        INTEGER;
L_GK_FOUND           BOOLEAN;
L_LOG_HS             CHAR(1);
L_STOR_INITIAL       VARCHAR2(20);
L_STOR_NEXT          VARCHAR2(20);
L_STOR_MIN_EXTENTS   NUMBER; 
L_STOR_PCT_INCREASE  NUMBER;
L_STOR_PCT_FREE      NUMBER;
L_STOR_PCT_USED      NUMBER;

L_TABLE_CREATED      BOOLEAN;
L_TABLESPACE         VARCHAR2(40);
L_INDEX_TABLESPACE   VARCHAR2(40);

CURSOR L_GK_CURSOR IS
   SELECT *
   FROM UTGKDC
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

L_GK_REC       L_GK_CURSOR%ROWTYPE;

BEGIN

   L_SQLERRM := NULL;
   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   L_TABLE_CREATED := FALSE;
   
   OPEN L_GK_CURSOR;
   FETCH L_GK_CURSOR
   INTO L_GK_REC;
   L_GK_FOUND := L_GK_CURSOR%FOUND;
   CLOSE L_GK_CURSOR;

   IF NOT L_GK_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
      RAISE STPERROR;
   END IF;

   IF NVL(L_GK_REC.STRUCT_CREATED, '0') = '1' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_STRUCTCREATED;
      RAISE STPERROR;
   END IF;

   OPEN L_TABLESPACE_CURSOR ('UTDC');
   FETCH L_TABLESPACE_CURSOR 
      INTO L_TABLESPACE;
   CLOSE L_TABLESPACE_CURSOR;

   OPEN L_INDEX_TABLESPACE_CURSOR ('UKDC');
   FETCH L_INDEX_TABLESPACE_CURSOR 
      INTO L_INDEX_TABLESPACE;
   CLOSE L_INDEX_TABLESPACE_CURSOR;
    
   IF ( A_STOR_INITIAL IS NULL ) THEN
      L_RET_CODE := UNAPIGK.INITGROUPKEYDEFSTORAGE('DC', 
                                                   L_STOR_INITIAL, 
                                                   L_STOR_NEXT, 
                                                   L_STOR_MIN_EXTENTS, 
                                                   L_STOR_PCT_INCREASE, 
                                                   L_STOR_PCT_FREE, 
                                                   L_STOR_PCT_USED);
   ELSE
      L_STOR_INITIAL      := A_STOR_INITIAL;
      L_STOR_NEXT         := A_STOR_NEXT;
      L_STOR_MIN_EXTENTS  := A_STOR_MIN_EXTENTS;
      L_STOR_PCT_INCREASE := A_STOR_PCT_INCREASE;
      L_STOR_PCT_FREE     := A_STOR_PCT_FREE;
      L_STOR_PCT_USED     := A_STOR_PCT_USED;
   END IF;

    
   
   
   

   
   
   
   
   
   
   
   
   L_GKDC_CURSOR := DBMS_SQL.OPEN_CURSOR;
   
   L_SQL_STRING := 'CREATE TABLE utdcgk' || A_GK ||
                   '(' || A_GK || ' VARCHAR2(40),'||
                   'dc VARCHAR2(40),' ||
                   'version VARCHAR2(20),' ||
                   'CONSTRAINT ukdcgk' || A_GK ||
                   ' PRIMARY KEY(' || A_GK ||', dc, version)' ||
                   ' USING INDEX TABLESPACE '|| L_INDEX_TABLESPACE ||
                   ' STORAGE (INITIAL '      || L_STOR_INITIAL || 
                            ' NEXT '         || L_STOR_NEXT ||
                            ' PCTINCREASE '  || TO_CHAR(L_STOR_PCT_INCREASE) || ') ' ||
                   ' PCTFREE ' || TO_CHAR(L_STOR_PCT_FREE) ;

   IF L_GK_REC.VALUE_UNIQUE = '1' THEN
      L_SQL_STRING :=  L_SQL_STRING || ',CONSTRAINT ucdcgk' || A_GK ||
                     ' UNIQUE(' || A_GK || ')'||
                     ' USING INDEX TABLESPACE '|| L_INDEX_TABLESPACE ||
                     ' STORAGE (INITIAL '      || L_STOR_INITIAL || 
                              ' NEXT '         || L_STOR_NEXT ||
                              ' PCTINCREASE '  || TO_CHAR(L_STOR_PCT_INCREASE) || ') ' ||
                     ' PCTFREE ' || TO_CHAR(L_STOR_PCT_FREE) ;
   END IF;
   
   L_SQL_STRING := L_SQL_STRING || ') TABLESPACE '           || L_TABLESPACE || 
                                    ' STORAGE (INITIAL '     || L_STOR_INITIAL || 
                                             ' NEXT '        || L_STOR_NEXT || 
                                             ' PCTINCREASE ' || TO_CHAR(L_STOR_PCT_INCREASE)|| 
                                             ' MINEXTENTS '  || TO_CHAR(L_STOR_MIN_EXTENTS)|| 
                                              ')'            ||
                                    ' PCTFREE ' || TO_CHAR(L_STOR_PCT_FREE) ||
                                    ' PCTUSED ' || TO_CHAR(L_STOR_PCT_USED) ;

   DBMS_SQL.PARSE(L_GKDC_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   L_RESULT := DBMS_SQL.EXECUTE(L_GKDC_CURSOR);
   L_TABLE_CREATED := TRUE;

   
   
   
   
   
   

   L_SQL_STRING := 'CREATE INDEX uidcgk'|| A_GK ||
                   ' ON utdcgk' || A_GK || '(dc, version) ' ||
                   ' STORAGE (INITIAL '    || L_STOR_INITIAL || 
                            ' NEXT '       || L_STOR_NEXT || 
                            ' PCTINCREASE '|| TO_CHAR(L_STOR_PCT_INCREASE)|| 
                            ' MINEXTENTS '  || TO_CHAR(L_STOR_MIN_EXTENTS)|| 
                   ' ) PCTFREE ' || TO_CHAR(L_STOR_PCT_FREE) ||
                   ' TABLESPACE '|| L_INDEX_TABLESPACE;
   DBMS_SQL.PARSE(L_GKDC_CURSOR, L_SQL_STRING, DBMS_SQL.V7);
   L_RESULT := DBMS_SQL.EXECUTE(L_GKDC_CURSOR);

   DBMS_SQL.CLOSE_CURSOR(L_GKDC_CURSOR);

   
   UPDATE UTGKDC
   SET STRUCT_CREATED = '1'
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   
   
   
   L_RESULT := CREATEGROUPKEYDCENTRIES(A_GK);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      L_SQLERRM := 'CreateGroupKeyDcEntries returned '||L_RESULT||' for gk='||A_GK;
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   
   
   L_RESULT := UNAPIGK.CREATEUSERSTRUCTSFORGROUPKEY('DC', A_GK);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      L_SQLERRM := 'CreateUserStructsForGroupKey returned '||L_RESULT||' for gk_tp=DC#gk='||A_GK;
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;   

   L_EVENT_TP := 'GroupKeyStructuresCreated';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT ('CreateGroupKeyDcStructures', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                    '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   BEGIN
      SELECT LOG_HS
      INTO L_LOG_HS
      FROM UTOBJECTS 
      WHERE OBJECT = 'gkdc';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      
      
      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OBJTP;
      RAISE STPERROR;
   END;
   
   IF NVL(L_LOG_HS, ' ') = '1' THEN
      INSERT INTO UTGKDCHS (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                            WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES (A_GK, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
              'Database objects for group key "'||A_GK||'" are created.', 
              CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('CreateGroupKeyDcStructures', SQLERRM);
      UNAPIGEN.LOGERROR('CreateGroupKeyDcStructures', 'HELP for DBA:'||SUBSTR(L_SQL_STRING,1,235));
      IF (LENGTH(L_SQL_STRING)>235) THEN
         UNAPIGEN.LOGERROR('CreateGroupKeyDcStructures', 'HELP for DBA:'||SUBSTR(L_SQL_STRING,236,235));
      END IF;
   END IF;
   IF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('CreateGroupKeyDcStructures', SUBSTR(L_SQLERRM,1,235));
   END IF;
   IF L_GK_CURSOR%ISOPEN THEN
      CLOSE L_GK_CURSOR;
   END IF;
   IF L_TABLE_CREATED THEN
      
      BEGIN
         L_SQL_STRING := 'DROP TABLE utdcgk' || A_GK;
         DBMS_SQL.PARSE(L_GKDC_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         L_RESULT := DBMS_SQL.EXECUTE(L_GKDC_CURSOR);
      EXCEPTION
      WHEN OTHERS THEN
         NULL;
      END;
   END IF;
   IF DBMS_SQL.IS_OPEN (L_GKDC_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_GKDC_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'CreateGroupKeyDcStructures'));
END CREATEGROUPKEYDCSTRUCTURES;

FUNCTION DELETEGROUPKEYDCSTRUCTURES              
(A_GK    IN    VARCHAR2)                         
RETURN NUMBER IS

A_VERSION         VARCHAR2(20);
L_GKDC_CURSOR     INTEGER;
L_STRUCT_CREATED  CHAR(1);
L_GK_FOUND        BOOLEAN;
L_LOG_HS          CHAR(1);

CURSOR L_GK_CURSOR IS
   SELECT NVL(STRUCT_CREATED, '0')
   FROM UTGKDC
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   OPEN L_GK_CURSOR;
   FETCH L_GK_CURSOR
   INTO L_STRUCT_CREATED;
   L_GK_FOUND := L_GK_CURSOR%FOUND;
   CLOSE L_GK_CURSOR;

   IF NOT L_GK_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
      RAISE STPERROR;
   END IF;

   IF NVL(L_STRUCT_CREATED, '0') = '0' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_STRUCTCREATED;
      RAISE STPERROR;
   END IF;

   
   IF UNAPIGEN.ISSYSTEM21CFR11COMPLIANT = UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTALLOWEDIN21CFR11;
      RAISE STPERROR;
   END IF;

      
   L_RESULT := UNAPIGK.DELETEUSERSTRUCTSFORGROUPKEY('DC', A_GK);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      L_SQLERRM := 'DeleteUserStructsForGroupKey returned '||L_RESULT||' for gk_tp=DC#gk='||A_GK;
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   
   DELETE FROM UTDCGK
   WHERE GK = A_GK;

   BEGIN
      L_GKDC_CURSOR := DBMS_SQL.OPEN_CURSOR;
      L_SQL_STRING := 'DROP TABLE utdcgk' || A_GK ;
      DBMS_SQL.PARSE(L_GKDC_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      L_RESULT := DBMS_SQL.EXECUTE(L_GKDC_CURSOR);
      DBMS_SQL.CLOSE_CURSOR(L_GKDC_CURSOR);
   EXCEPTION
   WHEN TABLE_DOES_NOT_EXIST THEN
      
      NULL;
   END;

   
   UNAPIGK.DELETEGROUPKEYFROMTASK('dcgk', A_GK);

   
   UPDATE UTGKDC
   SET STRUCT_CREATED = '0'
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   L_EVENT_TP := 'GroupKeyStructuresDeleted';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT ('DeleteGroupKeyDcStructures', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                    '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   BEGIN
      SELECT LOG_HS
      INTO L_LOG_HS
      FROM UTOBJECTS 
      WHERE OBJECT = 'gkdc';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      
      
      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OBJTP;
      RAISE STPERROR;
   END;
   
   IF NVL(L_LOG_HS, ' ') = '1' THEN
      INSERT INTO UTGKDCHS (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                            WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES (A_GK, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
              'Database objects for group key "'||A_GK||'" are deleted.', 
              CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('DeleteGroupKeyDcStructures', SQLERRM);
   END IF;
   IF L_GK_CURSOR%ISOPEN THEN
      CLOSE L_GK_CURSOR;
   END IF;
   IF DBMS_SQL.IS_OPEN (L_GKDC_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_GKDC_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'DeleteGroupKeyDcStructures'));
END DELETEGROUPKEYDCSTRUCTURES;

FUNCTION CREATEGROUPKEYDCENTRIES                 
(A_GK    IN    VARCHAR2)                         
RETURN NUMBER IS

A_VERSION      VARCHAR2(20);
L_GKDC_CURSOR  INTEGER;
L_GK_FOUND     BOOLEAN;

CURSOR L_GK_CURSOR IS
   SELECT *
   FROM UTGKDC
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

L_GK_REC       L_GK_CURSOR%ROWTYPE;

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   OPEN L_GK_CURSOR;
   FETCH L_GK_CURSOR
   INTO L_GK_REC;
   L_GK_FOUND := L_GK_CURSOR%FOUND;
   CLOSE L_GK_CURSOR;

   IF NOT L_GK_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
      RAISE STPERROR;
   END IF;

   IF NVL(L_GK_REC.STRUCT_CREATED, '0') = '0' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_STRUCTCREATED;
      RAISE STPERROR;
   END IF;

   
   
   
   
   L_GKDC_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'INSERT INTO utdcgk'||A_GK||'('||A_GK||', dc, version) '||
                   'SELECT value, dc, version '||
                   'FROM utdcgk '||
                   'WHERE gk = '''||A_GK||''' AND value IS NOT NULL';
   DBMS_SQL.PARSE(L_GKDC_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   
   BEGIN
      L_RESULT := DBMS_SQL.EXECUTE(L_GKDC_CURSOR);
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UNIQUEGK;
         RAISE STPERROR;
   END;
   
   DBMS_SQL.CLOSE_CURSOR(L_GKDC_CURSOR);

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('CreateGroupKeyDcEntries', SQLERRM);
   END IF;
   IF L_GK_CURSOR%ISOPEN THEN
      CLOSE L_GK_CURSOR;
   END IF;
   IF DBMS_SQL.IS_OPEN (L_GKDC_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_GKDC_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'CreateGroupKeyDcEntries'));
END CREATEGROUPKEYDCENTRIES;

FUNCTION DELETEGROUPKEYDCENTRIES                 
(A_GK    IN    VARCHAR2)                         
RETURN NUMBER IS

A_VERSION         VARCHAR2(20);
L_GKDC_CURSOR     INTEGER;
L_STRUCT_CREATED  CHAR(1);
L_GK_FOUND        BOOLEAN;

CURSOR L_GK_CURSOR IS
   SELECT NVL(STRUCT_CREATED, '0')
   FROM UTGKDC
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   OPEN L_GK_CURSOR;
   FETCH L_GK_CURSOR
   INTO L_STRUCT_CREATED;
   L_GK_FOUND := L_GK_CURSOR%FOUND;
   CLOSE L_GK_CURSOR;

   IF NOT L_GK_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
      RAISE STPERROR;
   END IF;

   IF NVL(L_STRUCT_CREATED, '0') = '0' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_STRUCTCREATED;
      RAISE STPERROR;
   END IF;

   
   IF UNAPIGEN.ISSYSTEM21CFR11COMPLIANT = UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTALLOWEDIN21CFR11;
      RAISE STPERROR;
   END IF;

   DELETE FROM UTDCGK
   WHERE GK = A_GK;

   L_GKDC_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'TRUNCATE TABLE utdcgk' || A_GK;
   DBMS_SQL.PARSE(L_GKDC_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   L_RESULT := DBMS_SQL.EXECUTE(L_GKDC_CURSOR);

   DBMS_SQL.CLOSE_CURSOR(L_GKDC_CURSOR);

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('DeleteGroupKeyDcEntries', SQLERRM);
   END IF;
   IF L_GK_CURSOR%ISOPEN THEN
      CLOSE L_GK_CURSOR;
   END IF;
   IF DBMS_SQL.IS_OPEN (L_GKDC_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_GKDC_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'DeleteGroupKeyDcEntries'));
END DELETEGROUPKEYDCENTRIES;

FUNCTION GETGROUPKEYCHLIST                                 
(A_GK                  OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_DESCRIPTION         OUT     UNAPIGEN.VC40_TABLE_TYPE,   
 A_NR_OF_ROWS          IN OUT  NUMBER,                     
 A_WHERE_CLAUSE        IN      VARCHAR2,                   
 A_NEXT_ROWS           IN      NUMBER)                     
RETURN NUMBER IS

L_GK           VARCHAR2(20);
L_DESCRIPTION  VARCHAR2(40);

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_GK_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_GK_CURSOR);
         P_GK_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_GK_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
         L_WHERE_CLAUSE := 'ORDER BY gk, version'; 
      ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
         L_WHERE_CLAUSE := 'WHERE version_is_current = ''1'' '||
                           'AND gk = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                           ''' ORDER BY gk, version';
      ELSE
         L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
      END IF;

      IF P_GK_CURSOR IS NULL THEN
         P_GK_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;

      L_SQL_STRING:= 'SELECT gk, description FROM dd'||UNAPIGEN.P_DD||'.uvgkch ' ||
                      L_WHERE_CLAUSE;
      DBMS_SQL.PARSE(P_GK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

      DBMS_SQL.DEFINE_COLUMN(P_GK_CURSOR, 1, L_GK, 20);
      DBMS_SQL.DEFINE_COLUMN(P_GK_CURSOR, 2, L_DESCRIPTION, 40);
      L_RESULT := DBMS_SQL.EXECUTE(P_GK_CURSOR);
   END IF;

   L_RESULT := DBMS_SQL.FETCH_ROWS(P_GK_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_GK_CURSOR, 1, L_GK);
      DBMS_SQL.COLUMN_VALUE(P_GK_CURSOR, 2, L_DESCRIPTION);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_GK(L_FETCHED_ROWS) := L_GK;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_GK_CURSOR);
      END IF;
   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_GK_CURSOR);
       P_GK_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   END IF;

   IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_GK_CURSOR);
      P_GK_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetGroupKeyChList', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (P_GK_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (P_GK_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETGROUPKEYCHLIST;
 
FUNCTION GETGROUPKEYCH                                  
(A_GK               OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_DESCRIPTION      OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_IS_PROTECTED     OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_VALUE_UNIQUE     OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_SINGLE_VALUED    OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_NEW_VAL_ALLOWED  OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_MANDATORY        OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_STRUCT_CREATED   OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_INHERIT_GK       OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_VALUE_LIST_TP    OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_DEFAULT_VALUE    OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_DSP_ROWS         OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_VAL_LENGTH       OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_VAL_START        OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_ASSIGN_TP        OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_ASSIGN_ID        OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_Q_TP             OUT    UNAPIGEN.CHAR2_TABLE_TYPE,   
 A_Q_ID             OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_Q_CHECK_AU       OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_Q_AU             OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_NR_OF_ROWS       IN OUT NUMBER,                      
 A_WHERE_CLAUSE     IN     VARCHAR2)                    
RETURN NUMBER IS

L_GK                VARCHAR2(20);
L_DESCRIPTION       VARCHAR2(40);
L_IS_PROTECTED      CHAR(1);
L_VALUE_UNIQUE      CHAR(1);
L_SINGLE_VALUED     CHAR(1);
L_NEW_VAL_ALLOWED   CHAR(1);
L_MANDATORY         CHAR(1);
L_STRUCT_CREATED    CHAR(1);
L_INHERIT_GK        CHAR(1);
L_VALUE_LIST_TP     CHAR(1);
L_DEFAULT_VALUE     VARCHAR2(40);
L_DSP_ROWS          NUMBER(3);
L_VAL_LENGTH        NUMBER(3);
L_VAL_START         NUMBER(3);
L_ASSIGN_TP         CHAR(1);
L_ASSIGN_ID         VARCHAR2(20);
L_Q_TP              CHAR(2);
L_Q_ID              VARCHAR2(20);
L_Q_CHECK_AU        CHAR(1);
L_Q_AU              VARCHAR2(20);
L_GK_CURSOR         INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'ORDER BY gk, version'; 
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := 'WHERE version_is_current = ''1'' '||
                        'AND gk = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                        ''' ORDER BY gk, version';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_GK_CURSOR := DBMS_SQL.OPEN_CURSOR;

   L_SQL_STRING := 'SELECT gk, description, is_protected, value_unique, ' ||
                   'single_valued, new_val_allowed, mandatory, struct_created, inherit_gk,' ||
                   'value_list_tp, default_value, dsp_rows, val_length, val_start, ' ||
                   'assign_tp, assign_id, q_tp, q_id, q_check_au, q_au ' ||
                   'FROM dd' || UNAPIGEN.P_DD || '.uvgkch ' || L_WHERE_CLAUSE;
   DBMS_SQL.PARSE(L_GK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 1, L_GK, 20);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 2, L_DESCRIPTION, 40);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 3, L_IS_PROTECTED, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 4, L_VALUE_UNIQUE, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 5, L_SINGLE_VALUED, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 6, L_NEW_VAL_ALLOWED, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 7, L_MANDATORY, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 8, L_STRUCT_CREATED, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 9, L_INHERIT_GK, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 10, L_VALUE_LIST_TP, 1);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 11, L_DEFAULT_VALUE, 40);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 12, L_DSP_ROWS);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 13, L_VAL_LENGTH);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 14, L_VAL_START);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 15, L_ASSIGN_TP, 1);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 16, L_ASSIGN_ID, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 17, L_Q_TP, 2);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 18, L_Q_ID, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 19, L_Q_CHECK_AU, 1);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 20, L_Q_AU, 20);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_GK_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 1, L_GK);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 2, L_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 3, L_IS_PROTECTED);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 4, L_VALUE_UNIQUE);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 5, L_SINGLE_VALUED);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 6, L_NEW_VAL_ALLOWED);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 7, L_MANDATORY);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 8, L_STRUCT_CREATED);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 9, L_INHERIT_GK);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 10, L_VALUE_LIST_TP);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 11, L_DEFAULT_VALUE);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 12, L_DSP_ROWS);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 13, L_VAL_LENGTH);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 14, L_VAL_START);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 15, L_ASSIGN_TP);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 16, L_ASSIGN_ID);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 17, L_Q_TP);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 18, L_Q_ID);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 19, L_Q_CHECK_AU);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 20, L_Q_AU);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_GK (L_FETCHED_ROWS) := L_GK;
      A_DESCRIPTION (L_FETCHED_ROWS) := L_DESCRIPTION;
      A_IS_PROTECTED (L_FETCHED_ROWS) := L_IS_PROTECTED;
      A_VALUE_UNIQUE (L_FETCHED_ROWS) := L_VALUE_UNIQUE;
      A_SINGLE_VALUED (L_FETCHED_ROWS) := L_SINGLE_VALUED;
      A_NEW_VAL_ALLOWED (L_FETCHED_ROWS) := L_NEW_VAL_ALLOWED;
      A_MANDATORY (L_FETCHED_ROWS) := L_MANDATORY;
      A_STRUCT_CREATED (L_FETCHED_ROWS) := L_STRUCT_CREATED;
      A_INHERIT_GK (L_FETCHED_ROWS) := L_INHERIT_GK;
      A_VALUE_LIST_TP (L_FETCHED_ROWS) := L_VALUE_LIST_TP;
      A_DEFAULT_VALUE (L_FETCHED_ROWS) := L_DEFAULT_VALUE;
      A_DSP_ROWS(L_FETCHED_ROWS) := L_DSP_ROWS;
      A_VAL_LENGTH(L_FETCHED_ROWS) := L_VAL_LENGTH;
      A_VAL_START(L_FETCHED_ROWS) := L_VAL_START;
      A_ASSIGN_TP(L_FETCHED_ROWS) := L_ASSIGN_TP;
      A_ASSIGN_ID(L_FETCHED_ROWS) := L_ASSIGN_ID;
      A_Q_TP(L_FETCHED_ROWS) := L_Q_TP;
      A_Q_ID(L_FETCHED_ROWS) := L_Q_ID;
      A_Q_CHECK_AU(L_FETCHED_ROWS) := L_Q_CHECK_AU;
      A_Q_AU(L_FETCHED_ROWS) := L_Q_AU;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_GK_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_GK_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetGroupKeyCh', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
     IF DBMS_SQL.IS_OPEN (L_GK_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_GK_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETGROUPKEYCH;

FUNCTION GETGROUPKEYCHVALUE                            
(A_GK               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_VALUE            OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_NR_OF_ROWS       IN OUT  NUMBER,                    
 A_WHERE_CLAUSE     IN      VARCHAR2)                  
RETURN NUMBER IS

L_GK              VARCHAR2(20);
L_VALUE           VARCHAR2(40);
L_GK_CURSOR       INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'ORDER BY list.gk, list.version, list.seq'; 
   ELSIF
      UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := ', dd'||UNAPIGEN.P_DD||'.uvgkch ch WHERE ch.version_is_current = ''1'' '||
                        'AND list.gk = ch.gk '||
                        'AND list.gk = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                        ''' ORDER BY list.seq';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_GK_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT list.gk, list.value FROM dd'||UNAPIGEN.P_DD||'.uvgkchlist list ' || L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_GK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 1, L_GK, 20);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 2, L_VALUE, 40);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_GK_CURSOR);

   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 1, L_GK);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 2, L_VALUE);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_GK(L_FETCHED_ROWS) := L_GK;
      A_VALUE(L_FETCHED_ROWS) := L_VALUE;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_GK_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_GK_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;
   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetGroupKeyChValue', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (L_GK_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_GK_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETGROUPKEYCHVALUE;

FUNCTION GETGROUPKEYCHSQL                              
(A_GK              OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_SQLTEXT         OUT     UNAPIGEN.VC255_TABLE_TYPE,  
 A_NR_OF_ROWS      IN OUT  NUMBER,                     
 A_WHERE_CLAUSE    IN      VARCHAR2)                   
RETURN NUMBER IS

L_GK              VARCHAR2(20);
L_SQLTEXT         VARCHAR2(255);
L_GK_CURSOR       INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'ORDER BY sql.gk, sql.version, sql.seq'; 
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := ', dd'||UNAPIGEN.P_DD||'.uvgkch ch WHERE ch.version_is_current = ''1'' '||
                        'AND sql.gk = ch.gk '||
                        'AND sql.gk = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                        ''' ORDER BY sql.seq';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_GK_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT sql.gk, sql.sqltext FROM dd'||UNAPIGEN.P_DD||'.uvgkchsql sql ' || L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_GK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 1, L_GK, 20);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 2, L_SQLTEXT, 255);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_GK_CURSOR);

   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 1, L_GK);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 2, L_SQLTEXT);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_GK(L_FETCHED_ROWS) := L_GK;
      A_SQLTEXT(L_FETCHED_ROWS) := L_SQLTEXT;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_GK_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_GK_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetGroupKeyChSql', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (L_GK_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_GK_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETGROUPKEYCHSQL;

FUNCTION SAVEGROUPKEYCH                               
(A_GK               IN   VARCHAR2,                    
 A_DESCRIPTION      IN   VARCHAR2,                    
 A_IS_PROTECTED     IN   CHAR,                        
 A_VALUE_UNIQUE     IN   CHAR,                        
 A_SINGLE_VALUED    IN   CHAR,                        
 A_NEW_VAL_ALLOWED  IN   CHAR,                        
 A_MANDATORY        IN   CHAR,                        
 A_STRUCT_CREATED   IN   CHAR,                        
 A_INHERIT_GK       IN   CHAR,                        
 A_VALUE_LIST_TP    IN   CHAR,                        
 A_DEFAULT_VALUE    IN   VARCHAR2,                    
 A_DSP_ROWS         IN   NUMBER,                      
 A_VAL_LENGTH       IN   NUMBER,                      
 A_VAL_START        IN   NUMBER,                      
 A_ASSIGN_TP        IN   CHAR,                        
 A_ASSIGN_ID        IN   VARCHAR2,                    
 A_Q_TP             IN   CHAR,                        
 A_Q_ID             IN   VARCHAR2,                    
 A_Q_CHECK_AU       IN   CHAR,                        
 A_Q_AU             IN   VARCHAR2,                    
 A_VALUE            IN   UNAPIGEN.VC40_TABLE_TYPE,    
 A_SQLTEXT          IN   UNAPIGEN.VC255_TABLE_TYPE,   
 A_NR_OF_ROWS       IN   NUMBER,                      
 A_MODIFY_REASON    IN   VARCHAR2)                    
RETURN NUMBER IS

A_VERSION        VARCHAR2(20);
L_FOUND          BOOLEAN;
L_SEQ_NO         NUMBER;
L_GK             VARCHAR2(20);
L_STRUCT_CREATED CHAR(1);
L_LC             VARCHAR2(2);
L_LC_VERSION     VARCHAR2(20);
L_SS             VARCHAR2(2);
L_LOG_HS         CHAR(1);
L_ALLOW_MODIFY   CHAR(1);
L_ACTIVE         CHAR(1);
L_RULE_NR        NUMBER(5);

CURSOR L_GK_CURSOR IS
   SELECT GK 
   FROM UTGKCH
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_GK, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_IS_PROTECTED, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_PROTECTED;
      RAISE STPERROR;
   END IF;

   IF NVL(A_SINGLE_VALUED, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SINGLEVALUED;
      RAISE STPERROR;
   END IF;

   IF NVL(A_NEW_VAL_ALLOWED, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NEWVALALLOWED;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VALUE_UNIQUE, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UNIQUEGK;
      RAISE STPERROR;
   END IF;

   IF NVL(A_MANDATORY, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_MANDATORY;
      RAISE STPERROR;
   END IF;

   IF NVL(A_INHERIT_GK, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INHERITGK;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VALUE_LIST_TP, ' ') NOT IN ('F', 'Q') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_VALUELISTTP;
      RAISE STPERROR;
   END IF;

   IF NVL(A_ASSIGN_TP, ' ') = 'F' AND
      NVL(A_ASSIGN_ID, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   
   
   
   
   L_LC := '@L';
   L_SS := '@A';

   BEGIN
      SELECT VERSION
      INTO L_LC_VERSION
      FROM UTLC
      WHERE LC = '@L'
      AND VERSION_IS_CURRENT = '1';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOCURRENTLCVERSION;
      RAISE STPERROR;
   END;

   BEGIN
      SELECT ALLOW_MODIFY, ACTIVE
      INTO L_ALLOW_MODIFY, L_ACTIVE
      FROM UTSS
      WHERE SS = '@A';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR;
   END;
   
   BEGIN
      SELECT LOG_HS
      INTO L_LOG_HS
      FROM UTOBJECTS 
      WHERE OBJECT = 'gkch';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      
      
      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OBJTP;
      RAISE STPERROR;
   END;
   

   OPEN L_GK_CURSOR;
   FETCH L_GK_CURSOR
   INTO L_GK;
   IF L_GK_CURSOR%FOUND THEN
      L_FOUND := TRUE;
   ELSE
      L_FOUND := FALSE;
   END IF;
   CLOSE L_GK_CURSOR;

   IF L_FOUND THEN
      DELETE FROM UTGKCH
      WHERE VERSION = A_VERSION
        AND GK = A_GK;

      DELETE FROM UTGKCHLIST
      WHERE VERSION = A_VERSION
        AND GK = A_GK;

      DELETE FROM UTGKCHSQL
      WHERE VERSION = A_VERSION
        AND GK = A_GK;
        
      L_EVENT_TP := 'GroupKeyUpdated';
   ELSE
      L_EVENT_TP := 'GroupKeyCreated';
   END IF;

   OPEN UNAPIGK.L_DBA_OBJECTS_CURSOR ('UTCHGK'||A_GK);
   FETCH UNAPIGK.L_DBA_OBJECTS_CURSOR INTO L_STRUCT_CREATED;
   CLOSE UNAPIGK.L_DBA_OBJECTS_CURSOR;
      
   INSERT INTO UTGKCH (GK, VERSION, VERSION_IS_CURRENT, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ, EFFECTIVE_TILL, EFFECTIVE_TILL_TZ, DESCRIPTION, 
                       IS_PROTECTED, VALUE_UNIQUE, SINGLE_VALUED, NEW_VAL_ALLOWED, MANDATORY,
                       STRUCT_CREATED, INHERIT_GK, VALUE_LIST_TP, DEFAULT_VALUE, DSP_ROWS, VAL_LENGTH, 
                       VAL_START, ASSIGN_TP, ASSIGN_ID, Q_TP, Q_ID, Q_CHECK_AU, Q_AU, 
                       LOG_HS, ALLOW_MODIFY, ACTIVE, LC, LC_VERSION, SS)
   VALUES (A_GK, A_VERSION, '1', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, NULL, A_DESCRIPTION, 
           A_IS_PROTECTED, A_VALUE_UNIQUE, A_SINGLE_VALUED, A_NEW_VAL_ALLOWED, A_MANDATORY, 
           L_STRUCT_CREATED, A_INHERIT_GK, A_VALUE_LIST_TP, A_DEFAULT_VALUE, A_DSP_ROWS, A_VAL_LENGTH, 
           A_VAL_START, A_ASSIGN_TP, A_ASSIGN_ID, A_Q_TP, A_Q_ID, A_Q_CHECK_AU, A_Q_AU, 
           L_LOG_HS, L_ALLOW_MODIFY, L_ACTIVE, L_LC, L_LC_VERSION, L_SS);

   IF A_VALUE_LIST_TP = 'Q' THEN
      FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
         IF NVL(A_SQLTEXT(L_SEQ_NO), ' ') <> ' ' THEN
            INSERT INTO UTGKCHSQL(GK, VERSION, SEQ, SQLTEXT)
            VALUES (A_GK, A_VERSION, L_SEQ_NO, A_SQLTEXT(L_SEQ_NO));
         END IF;
      END LOOP;
   ELSIF A_VALUE_LIST_TP = 'F' THEN
      FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
         IF NVL(A_VALUE(L_SEQ_NO), ' ') <> ' ' THEN
            INSERT INTO UTGKCHLIST(GK, VERSION, SEQ, VALUE)
            VALUES (A_GK, A_VERSION, L_SEQ_NO, A_VALUE(L_SEQ_NO));
         END IF;
      END LOOP;
   END IF;

   
   
   
   
   DELETE FROM UTEVRULES
   WHERE CUSTOM = '0'
     AND OBJECT_TP = 'ch'
     AND EV_TP IN ('ChartCreated', 'ChartUpdated','ChartDatapointCreated', 'ChartDatapointUpdated')
     AND AF LIKE '%''chgk''%'
     AND AF LIKE '%'''||A_GK||'''%';
   
   DELETE FROM UTEVRULES
   WHERE CUSTOM = '0'
     AND OBJECT_TP = 'ch'
     AND EV_TP IN ('ChartCreated', 'ChartUpdated','ChartDatapointCreated', 'ChartDatapointUpdated')
     AND AF LIKE 'UNGKASSIGN%'
     AND AF LIKE '%'''||A_GK||'''%';

   
   SELECT NVL(MAX(RULE_NR),0)+1
   INTO L_RULE_NR
   FROM UTEVRULES;
   
   IF A_ASSIGN_TP = 'T' THEN
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR, 'ch', 'ChartCreated', 
             'AssignGroupKey(''chgk'', '''||A_GK||''', ''~ch@ch~'', '||A_VAL_START||', '||A_VAL_LENGTH||')', 
             '0');
   ELSIF A_ASSIGN_TP = 'F' THEN
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR, 'ch', 'ChartCreated', 
             'UNGKASSIGN.'||A_ASSIGN_ID||'('''||A_GK||''')', '0');
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR+1, 'ch', 'ChartDatapointCreated', 
             'UNGKASSIGN.'||A_ASSIGN_ID||'('''||A_GK||''')', '0');
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR+2, 'ch', 'ChartDatapointUpdated', 
             'UNGKASSIGN.'||A_ASSIGN_ID||'('''||A_GK||''')', '0');            
   END IF;

   
   L_RULE_NR := 0;
   FOR C_EVRULE_REC IN (SELECT *
                        FROM UTEVRULES
                        ORDER BY RULE_NR) LOOP
      L_RULE_NR := L_RULE_NR + 1;
      IF C_EVRULE_REC.RULE_NR <> L_RULE_NR THEN
         UPDATE UTEVRULES
         SET RULE_NR = L_RULE_NR
         WHERE RULE_NR = C_EVRULE_REC.RULE_NR;
      END IF;
   END LOOP;

   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT ('SaveGroupKeyCh', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                    '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

















   IF NVL(L_LOG_HS, ' ') = '1' THEN
      IF L_EVENT_TP = 'GroupKeyCreated' THEN
         INSERT INTO UTGKCHHS (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                               WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_GK, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'group key "'||A_GK||'" is created.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                 L_EV_SEQ_NR);
      ELSE
         INSERT INTO UTGKCHHS (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                               WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_GK, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'group key "'||A_GK||'" is updated.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                 L_EV_SEQ_NR);
      END IF;
   ELSE
      
      
      IF L_EVENT_TP = 'GroupKeyCreated' THEN
         INSERT INTO UTGKCHHS (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                               WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_GK, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'group key "'||A_GK||'" is created.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                 L_EV_SEQ_NR);
      END IF;
   END IF;

   
   
   
   L_EV_SEQ_NR := -1;
   L_EVENT_TP := 'LoadEvRules';
   L_RESULT := UNAPIEV.BROADCASTEVENT ('SaveGroupKeyCh', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                       '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   
   UNAPIGEN.NOTIFYTASKGKTODBA('CH',
                               A_GK,
                               A_VERSION,
                               A_VALUE_UNIQUE);

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveGroupKeyCh',SQLERRM);
   END IF;
   IF UNAPIGK.L_DBA_OBJECTS_CURSOR%ISOPEN THEN
      CLOSE UNAPIGK.L_DBA_OBJECTS_CURSOR;
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveGroupKeyCh'));
END SAVEGROUPKEYCH;

FUNCTION DELETEGROUPKEYCH                              
(A_GK               IN     VARCHAR2,                   
 A_MODIFY_REASON    IN     VARCHAR2)                   
RETURN NUMBER IS

A_VERSION        VARCHAR2(20);

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_GK, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   
   IF UNAPIGEN.ISSYSTEM21CFR11COMPLIANT = UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTALLOWEDIN21CFR11;
      RAISE STPERROR;
   END IF;

   
   L_RESULT := DELETEGROUPKEYCHSTRUCTURES(A_GK);
   IF L_RESULT <> 0 AND
      L_RESULT <> UNAPIGEN.DBERR_STRUCTCREATED THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   ELSE
      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   DELETE FROM UTGKCHLIST
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   DELETE FROM UTGKCHSQL
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   DELETE FROM UTGKCH
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   DELETE FROM UTGKCHHS
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   
   
   DELETE FROM UTEVRULES
   WHERE CUSTOM = '0'
     AND OBJECT_TP = 'ch'
     AND EV_TP IN ('ObjectCreated', 'ObjectUpdated')
     AND AF LIKE '%''chgk''%'
     AND AF LIKE '%'''||A_GK||'''%';
   
   DELETE FROM UTEVRULES
   WHERE CUSTOM = '0'
     AND OBJECT_TP = 'ch'
     AND EV_TP IN ('ObjectCreated', 'ObjectUpdated')
     AND AF LIKE 'UNGKASSIGN%'
     AND AF LIKE '%'''||A_GK||'''%';

   L_EVENT_TP := 'ObjectDeleted';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT('DeleteGroupKeyCh', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                   '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);

   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   
   
   
   L_EV_SEQ_NR := -1;
   L_EVENT_TP := 'LoadEvRules';
   L_RESULT := UNAPIEV.BROADCASTEVENT ('DeleteGroupKeyCh', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                       '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('DeleteGroupKeyCh', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'DeleteGroupKeyCh'));
END DELETEGROUPKEYCH;

FUNCTION CREATEGROUPKEYCHSTRUCTURES                
(A_GK                IN    VARCHAR2,               
 A_STOR_INITIAL      IN    VARCHAR2,               
 A_STOR_NEXT         IN    VARCHAR2,               
 A_STOR_MIN_EXTENTS  IN    NUMBER,                 
 A_STOR_PCT_INCREASE IN    NUMBER,                 
 A_STOR_PCT_FREE     IN    NUMBER,                 
 A_STOR_PCT_USED     IN    NUMBER                  
)
RETURN NUMBER IS

A_VERSION            VARCHAR2(20);
L_GKCH_CURSOR        INTEGER;
L_GK_FOUND           BOOLEAN;
L_LOG_HS             CHAR(1);
L_STOR_INITIAL       VARCHAR2(20);
L_STOR_NEXT          VARCHAR2(20);
L_STOR_MIN_EXTENTS   NUMBER; 
L_STOR_PCT_INCREASE  NUMBER;
L_STOR_PCT_FREE      NUMBER;
L_STOR_PCT_USED      NUMBER;

L_TABLE_CREATED      BOOLEAN;
L_TABLESPACE         VARCHAR2(40);
L_INDEX_TABLESPACE   VARCHAR2(40);

CURSOR L_GK_CURSOR IS
   SELECT *
   FROM UTGKCH
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

L_GK_REC       L_GK_CURSOR%ROWTYPE;

BEGIN

   L_SQLERRM := NULL;
   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   L_TABLE_CREATED := FALSE;
   
   OPEN L_GK_CURSOR;
   FETCH L_GK_CURSOR
   INTO L_GK_REC;
   L_GK_FOUND := L_GK_CURSOR%FOUND;
   CLOSE L_GK_CURSOR;

   IF NOT L_GK_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
      RAISE STPERROR;
   END IF;

   IF NVL(L_GK_REC.STRUCT_CREATED, '0') = '1' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_STRUCTCREATED;
      RAISE STPERROR;
   END IF;

   OPEN L_TABLESPACE_CURSOR ('UTCH');
   FETCH L_TABLESPACE_CURSOR 
      INTO L_TABLESPACE;
   CLOSE L_TABLESPACE_CURSOR;

   OPEN L_INDEX_TABLESPACE_CURSOR ('UKCH');
   FETCH L_INDEX_TABLESPACE_CURSOR 
      INTO L_INDEX_TABLESPACE;
   CLOSE L_INDEX_TABLESPACE_CURSOR;
    
   IF ( A_STOR_INITIAL IS NULL ) THEN
      L_RET_CODE := UNAPIGK.INITGROUPKEYDEFSTORAGE('CH', 
                                                   L_STOR_INITIAL, 
                                                   L_STOR_NEXT, 
                                                   L_STOR_MIN_EXTENTS, 
                                                   L_STOR_PCT_INCREASE, 
                                                   L_STOR_PCT_FREE, 
                                                   L_STOR_PCT_USED);
   ELSE
      L_STOR_INITIAL      := A_STOR_INITIAL;
      L_STOR_NEXT         := A_STOR_NEXT;
      L_STOR_MIN_EXTENTS  := A_STOR_MIN_EXTENTS;
      L_STOR_PCT_INCREASE := A_STOR_PCT_INCREASE;
      L_STOR_PCT_FREE     := A_STOR_PCT_FREE;
      L_STOR_PCT_USED     := A_STOR_PCT_USED;
   END IF;

    
   
   
   

   
   
   
   
   
   
   
   
   L_GKCH_CURSOR := DBMS_SQL.OPEN_CURSOR;
   
   L_SQL_STRING := 'CREATE TABLE utchgk' || A_GK ||
                   '(' || A_GK || ' VARCHAR2(40),'||
                   'ch VARCHAR2(20),' ||
                   'CONSTRAINT ukchgk' || A_GK ||
                   ' PRIMARY KEY(' || A_GK ||', ch)' ||
                   ' USING INDEX TABLESPACE '|| L_INDEX_TABLESPACE ||
                   ' STORAGE (INITIAL '      || L_STOR_INITIAL || 
                            ' NEXT '         || L_STOR_NEXT ||
                            ' PCTINCREASE '  || TO_CHAR(L_STOR_PCT_INCREASE) || ') ' ||
                   ' PCTFREE ' || TO_CHAR(L_STOR_PCT_FREE) ;

   IF L_GK_REC.VALUE_UNIQUE = '1' THEN
      L_SQL_STRING :=  L_SQL_STRING || ',CONSTRAINT ucchgk' || A_GK ||
                     ' UNIQUE(' || A_GK || ')'||
                     ' USING INDEX TABLESPACE '|| L_INDEX_TABLESPACE ||
                     ' STORAGE (INITIAL '      || L_STOR_INITIAL || 
                              ' NEXT '         || L_STOR_NEXT ||
                              ' PCTINCREASE '  || TO_CHAR(L_STOR_PCT_INCREASE) || ') ' ||
                     ' PCTFREE ' || TO_CHAR(L_STOR_PCT_FREE) ;
   END IF;
   
   L_SQL_STRING := L_SQL_STRING || ') TABLESPACE '           || L_TABLESPACE || 
                                    ' STORAGE (INITIAL '     || L_STOR_INITIAL || 
                                             ' NEXT '        || L_STOR_NEXT || 
                                             ' PCTINCREASE ' || TO_CHAR(L_STOR_PCT_INCREASE)|| 
                                             ' MINEXTENTS '  || TO_CHAR(L_STOR_MIN_EXTENTS)|| 
                                              ')'            ||
                                    ' PCTFREE ' || TO_CHAR(L_STOR_PCT_FREE) ||
                                    ' PCTUSED ' || TO_CHAR(L_STOR_PCT_USED) ;

   DBMS_SQL.PARSE(L_GKCH_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   L_RESULT := DBMS_SQL.EXECUTE(L_GKCH_CURSOR);
   L_TABLE_CREATED := TRUE;

   
   
   
   
   
   

   L_SQL_STRING := 'CREATE INDEX uichgk'|| A_GK ||
                   ' ON utchgk' || A_GK || '(ch) ' ||
                   ' STORAGE (INITIAL '    || L_STOR_INITIAL || 
                            ' NEXT '       || L_STOR_NEXT || 
                            ' PCTINCREASE '|| TO_CHAR(L_STOR_PCT_INCREASE)|| 
                            ' MINEXTENTS '  || TO_CHAR(L_STOR_MIN_EXTENTS)|| 
                   ' ) PCTFREE ' || TO_CHAR(L_STOR_PCT_FREE) ||
                   ' TABLESPACE '|| L_INDEX_TABLESPACE;
   DBMS_SQL.PARSE(L_GKCH_CURSOR, L_SQL_STRING, DBMS_SQL.V7);
   L_RESULT := DBMS_SQL.EXECUTE(L_GKCH_CURSOR);

   DBMS_SQL.CLOSE_CURSOR(L_GKCH_CURSOR);

   
   UPDATE UTGKCH
   SET STRUCT_CREATED = '1'
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   
   
   
   L_RESULT := CREATEGROUPKEYCHENTRIES(A_GK);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      L_SQLERRM := 'CreateGroupKeyChEntries returned '||L_RESULT||' for gk='||A_GK;
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   
   
   L_RESULT := UNAPIGK.CREATEUSERSTRUCTSFORGROUPKEY('CH', A_GK);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      L_SQLERRM := 'CreateUserStructsForGroupKey returned '||L_RESULT||' for gk_tp=CH#gk='||A_GK;
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;   

   L_EVENT_TP := 'GroupKeyStructuresCreated';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT ('CreateGroupKeyChStructures', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                    '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   BEGIN
      SELECT LOG_HS
      INTO L_LOG_HS
      FROM UTOBJECTS 
      WHERE OBJECT = 'gkch';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      
      
      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OBJTP;
      RAISE STPERROR;
   END;
   
   IF NVL(L_LOG_HS, ' ') = '1' THEN
      INSERT INTO UTGKCHHS (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                            WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES (A_GK, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
              'Database objects for group key "'||A_GK||'" are created.', 
              CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('CreateGroupKeyChStructures', SQLERRM);
      UNAPIGEN.LOGERROR('CreateGroupKeyChStructures', 'HELP for DBA:'||SUBSTR(L_SQL_STRING,1,235));
      IF (LENGTH(L_SQL_STRING)>235) THEN
         UNAPIGEN.LOGERROR('CreateGroupKeyChStructures', 'HELP for DBA:'||SUBSTR(L_SQL_STRING,236,235));
      END IF;
   END IF;
   IF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('CreateGroupKeyChStructures', SUBSTR(L_SQLERRM,1,235));
   END IF;
   IF L_GK_CURSOR%ISOPEN THEN
      CLOSE L_GK_CURSOR;
   END IF;
   IF L_TABLE_CREATED THEN
      
      BEGIN
         L_SQL_STRING := 'DROP TABLE utchgk' || A_GK;
         DBMS_SQL.PARSE(L_GKCH_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         L_RESULT := DBMS_SQL.EXECUTE(L_GKCH_CURSOR);
      EXCEPTION
      WHEN OTHERS THEN
         NULL;
      END;
   END IF;
   IF DBMS_SQL.IS_OPEN (L_GKCH_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_GKCH_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'CreateGroupKeyChStructures'));
END CREATEGROUPKEYCHSTRUCTURES;

FUNCTION DELETEGROUPKEYCHSTRUCTURES              
(A_GK    IN    VARCHAR2)                         
RETURN NUMBER IS

A_VERSION         VARCHAR2(20);
L_GKCH_CURSOR     INTEGER;
L_STRUCT_CREATED  CHAR(1);
L_GK_FOUND        BOOLEAN;
L_LOG_HS          CHAR(1);

CURSOR L_GK_CURSOR IS
   SELECT NVL(STRUCT_CREATED, '0')
   FROM UTGKCH
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   OPEN L_GK_CURSOR;
   FETCH L_GK_CURSOR
   INTO L_STRUCT_CREATED;
   L_GK_FOUND := L_GK_CURSOR%FOUND;
   CLOSE L_GK_CURSOR;

   IF NOT L_GK_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
      RAISE STPERROR;
   END IF;

   IF NVL(L_STRUCT_CREATED, '0') = '0' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_STRUCTCREATED;
      RAISE STPERROR;
   END IF;

   
   IF UNAPIGEN.ISSYSTEM21CFR11COMPLIANT = UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTALLOWEDIN21CFR11;
      RAISE STPERROR;
   END IF;

      
   L_RESULT := UNAPIGK.DELETEUSERSTRUCTSFORGROUPKEY('CH', A_GK);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      L_SQLERRM := 'DeleteUserStructsForGroupKey returned '||L_RESULT||' for gk_tp=CH#gk='||A_GK;
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   
   DELETE FROM UTCHGK
   WHERE GK = A_GK;

   BEGIN
      L_GKCH_CURSOR := DBMS_SQL.OPEN_CURSOR;
      L_SQL_STRING := 'DROP TABLE utchgk' || A_GK ;
      DBMS_SQL.PARSE(L_GKCH_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      L_RESULT := DBMS_SQL.EXECUTE(L_GKCH_CURSOR);
      DBMS_SQL.CLOSE_CURSOR(L_GKCH_CURSOR);
   EXCEPTION
   WHEN TABLE_DOES_NOT_EXIST THEN
      
      NULL;
   END;

   
   UNAPIGK.DELETEGROUPKEYFROMTASK('chgk', A_GK);

   
   UPDATE UTGKCH
   SET STRUCT_CREATED = '0'
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   L_EVENT_TP := 'GroupKeyStructuresDeleted';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT ('DeleteGroupKeyChStructures', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                    '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   BEGIN
      SELECT LOG_HS
      INTO L_LOG_HS
      FROM UTOBJECTS 
      WHERE OBJECT = 'gkch';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      
      
      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OBJTP;
      RAISE STPERROR;
   END;
   
   IF NVL(L_LOG_HS, ' ') = '1' THEN
      INSERT INTO UTGKCHHS (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                            WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES (A_GK, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
              'Database objects for group key "'||A_GK||'" are deleted.', 
              CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('DeleteGroupKeyChStructures', SQLERRM);
   END IF;
   IF L_GK_CURSOR%ISOPEN THEN
      CLOSE L_GK_CURSOR;
   END IF;
   IF DBMS_SQL.IS_OPEN (L_GKCH_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_GKCH_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'DeleteGroupKeyChStructures'));
END DELETEGROUPKEYCHSTRUCTURES;

FUNCTION CREATEGROUPKEYCHENTRIES                 
(A_GK    IN    VARCHAR2)                         
RETURN NUMBER IS

A_VERSION      VARCHAR2(20);
L_GKCH_CURSOR  INTEGER;
L_GK_FOUND     BOOLEAN;

CURSOR L_GK_CURSOR IS
   SELECT *
   FROM UTGKCH
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

L_GK_REC       L_GK_CURSOR%ROWTYPE;

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   OPEN L_GK_CURSOR;
   FETCH L_GK_CURSOR
   INTO L_GK_REC;
   L_GK_FOUND := L_GK_CURSOR%FOUND;
   CLOSE L_GK_CURSOR;

   IF NOT L_GK_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
      RAISE STPERROR;
   END IF;

   IF NVL(L_GK_REC.STRUCT_CREATED, '0') = '0' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_STRUCTCREATED;
      RAISE STPERROR;
   END IF;

   
   
   
   
   L_GKCH_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'INSERT INTO utchgk'||A_GK||'('||A_GK||', ch) '||
                   'SELECT value, ch '||
                   'FROM utchgk '||
                   'WHERE gk = '''||A_GK||''' AND value IS NOT NULL';
   DBMS_SQL.PARSE(L_GKCH_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   
   BEGIN
      L_RESULT := DBMS_SQL.EXECUTE(L_GKCH_CURSOR);
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UNIQUEGK;
         RAISE STPERROR;
   END;
   
   DBMS_SQL.CLOSE_CURSOR(L_GKCH_CURSOR);

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('CreateGroupKeyChEntries', SQLERRM);
   END IF;
   IF L_GK_CURSOR%ISOPEN THEN
      CLOSE L_GK_CURSOR;
   END IF;
   IF DBMS_SQL.IS_OPEN (L_GKCH_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_GKCH_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'CreateGroupKeyChEntries'));
END CREATEGROUPKEYCHENTRIES;

FUNCTION DELETEGROUPKEYCHENTRIES                 
(A_GK    IN    VARCHAR2)                         
RETURN NUMBER IS

A_VERSION         VARCHAR2(20);
L_GKCH_CURSOR     INTEGER;
L_STRUCT_CREATED  CHAR(1);
L_GK_FOUND        BOOLEAN;

CURSOR L_GK_CURSOR IS
   SELECT NVL(STRUCT_CREATED, '0')
   FROM UTGKCH
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   OPEN L_GK_CURSOR;
   FETCH L_GK_CURSOR
   INTO L_STRUCT_CREATED;
   L_GK_FOUND := L_GK_CURSOR%FOUND;
   CLOSE L_GK_CURSOR;

   IF NOT L_GK_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
      RAISE STPERROR;
   END IF;

   IF NVL(L_STRUCT_CREATED, '0') = '0' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_STRUCTCREATED;
      RAISE STPERROR;
   END IF;

   
   IF UNAPIGEN.ISSYSTEM21CFR11COMPLIANT = UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTALLOWEDIN21CFR11;
      RAISE STPERROR;
   END IF;

   DELETE FROM UTCHGK
   WHERE GK = A_GK;

   L_GKCH_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'TRUNCATE TABLE utchgk' || A_GK;
   DBMS_SQL.PARSE(L_GKCH_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   L_RESULT := DBMS_SQL.EXECUTE(L_GKCH_CURSOR);

   DBMS_SQL.CLOSE_CURSOR(L_GKCH_CURSOR);

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('DeleteGroupKeyChEntries', SQLERRM);
   END IF;
   IF L_GK_CURSOR%ISOPEN THEN
      CLOSE L_GK_CURSOR;
   END IF;
   IF DBMS_SQL.IS_OPEN (L_GKCH_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_GKCH_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'DeleteGroupKeyChEntries'));
END DELETEGROUPKEYCHENTRIES;

FUNCTION INITGROUPKEYDEFBUFFER
(A_GK_TP               IN      VARCHAR2)              
RETURN NUMBER IS 

TYPE REFCURTYPE                  IS REF CURSOR;
L_REF_CURSOR                     REFCURTYPE;
L_GK                             VARCHAR2(20);
L_DESCRIPTION                    VARCHAR2(40);
L_IS_PROTECTED                   CHAR(1);
L_VALUE_UNIQUE                   CHAR(1);
L_SINGLE_VALUED                  CHAR(1);
L_NEW_VAL_ALLOWED                CHAR(1);
L_MANDATORY                      CHAR(1);
L_VALUE_LIST_TP                  CHAR(1);
L_DSP_ROWS                       NUMBER(3);

BEGIN
   
   UNAPIGK.P_GK_DEF_BUFFER.DELETE();
   L_SQL_STRING:=   'SELECT gk, description, is_protected, value_unique, single_valued, '
                  ||'new_val_allowed, mandatory, value_list_tp, dsp_rows '
                  ||'FROM dd'||UNAPIGEN.P_DD||'.uvgk' ||A_GK_TP;
   OPEN L_REF_CURSOR FOR L_SQL_STRING;
   LOOP
      FETCH L_REF_CURSOR 
      INTO L_GK, L_DESCRIPTION, L_IS_PROTECTED, L_VALUE_UNIQUE, L_SINGLE_VALUED,
           L_NEW_VAL_ALLOWED, L_MANDATORY, L_VALUE_LIST_TP, L_DSP_ROWS;
      EXIT WHEN L_REF_CURSOR%NOTFOUND;
      UNAPIGK.P_GK_DEF_BUFFER(L_GK).DESCRIPTION := L_DESCRIPTION;
      UNAPIGK.P_GK_DEF_BUFFER(L_GK).IS_PROTECTED := L_IS_PROTECTED;
      UNAPIGK.P_GK_DEF_BUFFER(L_GK).VALUE_UNIQUE := L_VALUE_UNIQUE;
      UNAPIGK.P_GK_DEF_BUFFER(L_GK).SINGLE_VALUED := L_SINGLE_VALUED;
      UNAPIGK.P_GK_DEF_BUFFER(L_GK).NEW_VAL_ALLOWED := L_NEW_VAL_ALLOWED;
      UNAPIGK.P_GK_DEF_BUFFER(L_GK).MANDATORY := L_MANDATORY;
      UNAPIGK.P_GK_DEF_BUFFER(L_GK).VALUE_LIST_TP := L_VALUE_LIST_TP;
      UNAPIGK.P_GK_DEF_BUFFER(L_GK).DSP_ROWS := L_DSP_ROWS;      
   END LOOP;
   CLOSE L_REF_CURSOR;
   RETURN (UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'InitGroupKeyDefBuffer', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF L_REF_CURSOR%ISOPEN THEN
         CLOSE L_REF_CURSOR;
      END IF;
      UNAPIGK.P_GK_DEF_BUFFER.DELETE();
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END INITGROUPKEYDEFBUFFER;

FUNCTION CLOSEGROUPKEYDEFBUFFER
(A_GK_TP               IN      VARCHAR2)              
RETURN NUMBER IS
BEGIN
   UNAPIGK.P_GK_DEF_BUFFER.DELETE();
RETURN (UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'CloseGroupKeyDefBuffer', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END CLOSEGROUPKEYDEFBUFFER;

END UNAPIGK2;
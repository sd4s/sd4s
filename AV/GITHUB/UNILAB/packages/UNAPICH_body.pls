PACKAGE BODY unapich AS

TYPE BOOLEAN_TABLE_TYPE IS TABLE OF BOOLEAN INDEX BY BINARY_INTEGER;
P_SELECTCH_CURSOR          INTEGER;
P_CHDP_CURSOR                INTEGER;

L_SQLERRM         VARCHAR2(255);
L_SQL_STRING      VARCHAR2(10000);
L_WHERE_CLAUSE    VARCHAR2(10000);
L_ORDER_BY_CLAUSE VARCHAR2(1000);
L_EVENT_TP        UTEV.EV_TP%TYPE;
L_RET_CODE        NUMBER;
L_RESULT          NUMBER;
L_FETCHED_ROWS    NUMBER;
L_EV_SEQ_NR       NUMBER;
L_EV_DETAILS      VARCHAR2(255);
STPERROR          EXCEPTION;

FUNCTION GETVERSION
   RETURN VARCHAR2
IS
BEGIN
   RETURN('06.07.00.00_00.13');
EXCEPTION
   WHEN OTHERS THEN
      RETURN (NULL);
END GETVERSION;

FUNCTION SAVECHART
(A_CH               IN    VARCHAR2,      
A_CY                IN    VARCHAR2, 
A_CY_VERSION        IN    VARCHAR2, 
A_DESCRIPTION       IN    VARCHAR2, 
A_CHART_TITLE       IN    VARCHAR2, 
A_X_AXIS_TITLE      IN    VARCHAR2, 
A_Y_AXIS_TITLE      IN    VARCHAR2, 
A_Y_AXIS_UNIT       IN    VARCHAR2, 
A_CREATION_DATE     IN    DATE    ,   
A_CH_CONTEXT_KEY    IN    VARCHAR2,   
A_DATAPOINT_CNT     IN    NUMBER  , 
A_DATAPOINT_UNIT    IN    VARCHAR2,                                                        
A_XR_MEASUREMENTS   IN    NUMBER  , 
A_XR_MAX_CHARTS     IN    NUMBER  , 
A_SQC_AVG           IN    NUMBER  , 
A_SQC_STD_DEV       IN    NUMBER  , 
A_SQC_AVG_RANGE     IN    NUMBER  , 
A_SQC_STD_DEV_RANGE IN    NUMBER  , 
A_EXEC_START_DATE   IN    DATE    ,   
A_EXEC_END_DATE     IN    DATE    ,   
A_ASSIGN_CF         IN    VARCHAR2, 
A_CY_CALC_CF        IN    VARCHAR2, 
A_VISUAL_CF         IN    VARCHAR2, 
A_XR_SERIE_SEQ      IN    NUMBER  , 
A_CH_CLASS          IN    VARCHAR2, 
A_LOG_HS            IN    CHAR    , 
A_LOG_HS_DETAILS    IN    CHAR    , 
A_LC                IN    VARCHAR2, 
A_LC_VERSION        IN    VARCHAR2, 
A_MODIFY_REASON     IN    VARCHAR2) 
RETURN NUMBER IS
L_VALID_SQC_RULE1          VARCHAR2(255);
L_VALID_SQC_RULE2          VARCHAR2(255);
L_VALID_SQC_RULE3          VARCHAR2(255);
L_VALID_SQC_RULE4          VARCHAR2(255);
L_VALID_SQC_RULE5          VARCHAR2(255);
L_VALID_SQC_RULE6          VARCHAR2(255);
L_VALID_SQC_RULE7          VARCHAR2(255);
BEGIN
RETURN(UNAPICH.SAVECHART
                (A_CH,
                 A_CY,
                 A_CY_VERSION,
                 A_DESCRIPTION,
                 A_CHART_TITLE,
                 A_X_AXIS_TITLE,
                 A_Y_AXIS_TITLE,
                 A_Y_AXIS_UNIT,
                 A_CREATION_DATE,
                 A_CH_CONTEXT_KEY,
                 A_DATAPOINT_CNT,
                 A_DATAPOINT_UNIT,
                 A_XR_MEASUREMENTS,
                 A_XR_MAX_CHARTS,
                 A_SQC_AVG,
                 A_SQC_STD_DEV,
                 A_SQC_AVG_RANGE,
                 A_SQC_STD_DEV_RANGE,
                 A_EXEC_START_DATE,
                 A_EXEC_END_DATE,
                 A_ASSIGN_CF,
                 A_CY_CALC_CF,
                 A_VISUAL_CF,
                 L_VALID_SQC_RULE1,
                 L_VALID_SQC_RULE2,
                 L_VALID_SQC_RULE3,
                 L_VALID_SQC_RULE4,
                 L_VALID_SQC_RULE5,
                 L_VALID_SQC_RULE6,
                 L_VALID_SQC_RULE7,
                 A_XR_SERIE_SEQ,
                 A_CH_CLASS,
                 A_LOG_HS,
                 A_LOG_HS_DETAILS,
                 A_LC,
                 A_LC_VERSION,
                 A_MODIFY_REASON));
END SAVECHART;

FUNCTION SAVECHART
(A_CH               IN    VARCHAR2,      
 A_CY                IN    VARCHAR2, 
 A_CY_VERSION        IN    VARCHAR2, 
 A_DESCRIPTION       IN    VARCHAR2, 
 A_CHART_TITLE       IN    VARCHAR2, 
 A_X_AXIS_TITLE      IN    VARCHAR2, 
 A_Y_AXIS_TITLE      IN    VARCHAR2, 
 A_Y_AXIS_UNIT       IN    VARCHAR2, 
 A_CREATION_DATE     IN    DATE    ,   
 A_CH_CONTEXT_KEY    IN    VARCHAR2,   
 A_DATAPOINT_CNT     IN    NUMBER  , 
 A_DATAPOINT_UNIT    IN    VARCHAR2,                                                        
 A_XR_MEASUREMENTS   IN    NUMBER  , 
 A_XR_MAX_CHARTS     IN    NUMBER  , 
 A_SQC_AVG           IN    NUMBER  , 
 A_SQC_STD_DEV       IN    NUMBER  , 
 A_SQC_AVG_RANGE     IN    NUMBER  , 
 A_SQC_STD_DEV_RANGE IN    NUMBER  , 
 A_EXEC_START_DATE   IN    DATE    ,   
 A_EXEC_END_DATE     IN    DATE    ,   
 A_ASSIGN_CF         IN    VARCHAR2, 
 A_CY_CALC_CF        IN    VARCHAR2, 
 A_VISUAL_CF         IN    VARCHAR2, 
 A_VALID_SQC_RULE1   IN    VARCHAR2, 
 A_VALID_SQC_RULE2   IN    VARCHAR2, 
 A_VALID_SQC_RULE3   IN    VARCHAR2, 
 A_VALID_SQC_RULE4   IN    VARCHAR2, 
 A_VALID_SQC_RULE5   IN    VARCHAR2, 
 A_VALID_SQC_RULE6   IN    VARCHAR2, 
 A_VALID_SQC_RULE7   IN    VARCHAR2, 
 A_XR_SERIE_SEQ      IN    NUMBER  , 
 A_CH_CLASS          IN    VARCHAR2, 
 A_LOG_HS            IN    CHAR    , 
 A_LOG_HS_DETAILS    IN    CHAR    , 
 A_LC                IN    VARCHAR2, 
 A_LC_VERSION        IN    VARCHAR2, 
 A_MODIFY_REASON     IN    VARCHAR2) 
RETURN NUMBER IS
L_LC             VARCHAR2(2);
L_LC_VERSION     VARCHAR2(20);
L_SS             VARCHAR2(2);
L_LOG_HS         CHAR(1);
L_LOG_HS_DETAILS CHAR(1);
L_ALLOW_MODIFY   CHAR(1);
L_ACTIVE         CHAR(1);
L_INSERT         BOOLEAN;
L_DEF_AU_LEVEL   VARCHAR2(4);
L_CY_CALC_CF     VARCHAR2(255);
L_CY_VERSION     VARCHAR2(20);
L_HS_DETAILS_SEQ_NR   INTEGER;

CURSOR L_CHOLD_CURSOR (A_CH IN VARCHAR2) IS
   SELECT A.*
   FROM UDCH A
   WHERE A.CH = A_CH;
L_CHOLD_REC UDCH%ROWTYPE;
L_CHNEW_REC UDCH%ROWTYPE;

L_ERROR        EXCEPTION;

BEGIN
 
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE L_ERROR;
   END IF;
   
   IF NVL(A_CH, ' ') = ' ' THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
         RAISE  L_ERROR;
   END IF;

   IF NVL(A_LOG_HS, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_LOGHS;
      RAISE  L_ERROR ;
   END IF;
 
   L_CY_VERSION := A_CY_VERSION;
   L_RET_CODE := UNAPIAUT.GETCHAUTHORISATION( A_CH, L_CY_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS, L_LOG_HS_DETAILS);

   IF L_RET_CODE = UNAPIGEN.DBERR_NOOBJECT THEN
      L_INSERT := TRUE;
   ELSIF L_RET_CODE = UNAPIGEN.DBERR_SUCCESS THEN
      L_INSERT := FALSE;
   ELSE
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE L_ERROR;
   END IF;

   IF L_INSERT THEN              
      IF NVL(A_LC, ' ') <> ' ' THEN
         L_LC := A_LC;
      END IF;
      IF NVL(A_LC_VERSION, ' ') <> ' ' THEN
         L_LC_VERSION := A_LC_VERSION;
      END IF;
      INSERT INTO UTCH (CH, CY, CY_VERSION, DESCRIPTION, CHART_TITLE, X_AXIS_TITLE, Y_AXIS_TITLE, Y_AXIS_UNIT, CREATION_DATE, CREATION_DATE_TZ,
         CH_CONTEXT_KEY, DATAPOINT_CNT, DATAPOINT_UNIT, XR_MEASUREMENTS , XR_MAX_CHARTS, SQC_AVG,            
         SQC_STD_DEV, SQC_AVG_RANGE, SQC_STD_DEV_RANGE, 
         EXEC_START_DATE, EXEC_START_DATE_TZ, EXEC_END_DATE, EXEC_END_DATE_TZ, ASSIGN_CF, CY_CALC_CF, VISUAL_CF, 
         VALID_SQC_RULE1, VALID_SQC_RULE2, VALID_SQC_RULE3, VALID_SQC_RULE4, VALID_SQC_RULE5, VALID_SQC_RULE6, VALID_SQC_RULE7,
         XR_SERIE_SEQ, CH_CLASS, LOG_HS, LOG_HS_DETAILS, LC, LC_VERSION ,ALLOW_MODIFY, ACTIVE) 
      VALUES ( A_CH, A_CY , A_CY_VERSION , A_DESCRIPTION , A_CHART_TITLE, A_X_AXIS_TITLE, A_Y_AXIS_TITLE, A_Y_AXIS_UNIT, CURRENT_TIMESTAMP , CURRENT_TIMESTAMP,   
         A_CH_CONTEXT_KEY, A_DATAPOINT_CNT, A_DATAPOINT_UNIT, A_XR_MEASUREMENTS, A_XR_MAX_CHARTS,     
         A_SQC_AVG, A_SQC_STD_DEV , A_SQC_AVG_RANGE, A_SQC_STD_DEV_RANGE, A_EXEC_START_DATE, A_EXEC_START_DATE,  
         A_EXEC_END_DATE, A_EXEC_END_DATE, A_ASSIGN_CF, A_CY_CALC_CF, A_VISUAL_CF , 
         A_VALID_SQC_RULE1, A_VALID_SQC_RULE2, A_VALID_SQC_RULE3, A_VALID_SQC_RULE4, A_VALID_SQC_RULE5, A_VALID_SQC_RULE6, A_VALID_SQC_RULE7,
         A_XR_SERIE_SEQ, A_CH_CLASS, A_LOG_HS, A_LOG_HS_DETAILS,    
         A_LC, A_LC_VERSION, '#', L_ACTIVE);
      L_EVENT_TP := 'ChartCreated';
   ELSE
      OPEN L_CHOLD_CURSOR(A_CH);
      FETCH L_CHOLD_CURSOR
      INTO L_CHOLD_REC;
      CLOSE L_CHOLD_CURSOR;
      L_CHNEW_REC := L_CHOLD_REC;

         
      UPDATE UTCH
      SET CH                  = A_CH                    ,
          CY                  = A_CY                    ,
          CY_VERSION          = A_CY_VERSION            ,
          DESCRIPTION         = A_DESCRIPTION           ,
          CHART_TITLE         = A_CHART_TITLE           ,
          X_AXIS_TITLE        = A_X_AXIS_TITLE          ,
          Y_AXIS_TITLE        = A_Y_AXIS_TITLE          ,
          Y_AXIS_UNIT         = A_Y_AXIS_UNIT           ,
          CH_CONTEXT_KEY      = A_CH_CONTEXT_KEY        ,
          DATAPOINT_CNT       = A_DATAPOINT_CNT         ,
          DATAPOINT_UNIT      = A_DATAPOINT_UNIT        ,
          XR_MEASUREMENTS     = A_XR_MEASUREMENTS       ,
          XR_MAX_CHARTS       = A_XR_MAX_CHARTS         ,
          SQC_AVG             = A_SQC_AVG               ,
          SQC_STD_DEV         = A_SQC_STD_DEV           ,
          SQC_AVG_RANGE       = A_SQC_AVG_RANGE         ,
          SQC_STD_DEV_RANGE   = A_SQC_STD_DEV_RANGE   ,
          EXEC_START_DATE     = A_EXEC_START_DATE       ,
          EXEC_START_DATE_TZ  = DECODE(A_EXEC_START_DATE, EXEC_START_DATE_TZ, EXEC_START_DATE_TZ, A_EXEC_START_DATE)       ,
          EXEC_END_DATE       = A_EXEC_END_DATE         ,
          EXEC_END_DATE_TZ    = DECODE(A_EXEC_END_DATE, EXEC_END_DATE_TZ, EXEC_END_DATE_TZ, A_EXEC_END_DATE)         ,
          ASSIGN_CF           = A_ASSIGN_CF             ,
          CY_CALC_CF          = A_CY_CALC_CF            ,
          VISUAL_CF           = A_VISUAL_CF             ,
          VALID_SQC_RULE1     = A_VALID_SQC_RULE1       ,
          VALID_SQC_RULE2     = A_VALID_SQC_RULE2       ,
          VALID_SQC_RULE3     = A_VALID_SQC_RULE3       ,
          VALID_SQC_RULE4     = A_VALID_SQC_RULE4       ,
          VALID_SQC_RULE5     = A_VALID_SQC_RULE5       ,
          VALID_SQC_RULE6     = A_VALID_SQC_RULE6       ,
          VALID_SQC_RULE7     = A_VALID_SQC_RULE7       ,
          XR_SERIE_SEQ        = A_XR_SERIE_SEQ          ,
          CH_CLASS            = A_CH_CLASS              ,
          LOG_HS              = A_LOG_HS                ,
          LOG_HS_DETAILS      = A_LOG_HS_DETAILS        ,
          LC                  = A_LC                    ,
          LC_VERSION          = A_LC_VERSION            ,
          ALLOW_MODIFY        = '#'
      WHERE CH = A_CH 
      RETURNING CH, CY, CY_VERSION, DESCRIPTION, CHART_TITLE, X_AXIS_TITLE, Y_AXIS_TITLE, Y_AXIS_UNIT, CH_CONTEXT_KEY, DATAPOINT_CNT, 
               DATAPOINT_UNIT, XR_MEASUREMENTS, XR_MAX_CHARTS, SQC_AVG, SQC_STD_DEV, SQC_AVG_RANGE, SQC_STD_DEV_RANGE, 
               EXEC_START_DATE, EXEC_START_DATE_TZ, EXEC_END_DATE, EXEC_END_DATE_TZ, ASSIGN_CF, CY_CALC_CF, VISUAL_CF,
               VALID_SQC_RULE1, VALID_SQC_RULE2, VALID_SQC_RULE3, VALID_SQC_RULE4, VALID_SQC_RULE5, VALID_SQC_RULE6, VALID_SQC_RULE7,
               XR_SERIE_SEQ, LC, LC_VERSION, CH_CLASS, LOG_HS, LOG_HS_DETAILS, ALLOW_MODIFY
      INTO  L_CHNEW_REC.CH, L_CHNEW_REC.CY, L_CHNEW_REC.CY_VERSION, L_CHNEW_REC.DESCRIPTION, 
            L_CHNEW_REC.CHART_TITLE,  L_CHNEW_REC.X_AXIS_TITLE, L_CHNEW_REC.Y_AXIS_TITLE, L_CHNEW_REC.Y_AXIS_UNIT,
            L_CHNEW_REC.CH_CONTEXT_KEY, L_CHNEW_REC.DATAPOINT_CNT, 
            L_CHNEW_REC.DATAPOINT_UNIT, L_CHNEW_REC.XR_MEASUREMENTS, L_CHNEW_REC.XR_MAX_CHARTS, 
            L_CHNEW_REC.SQC_AVG, L_CHNEW_REC.SQC_STD_DEV, L_CHNEW_REC.SQC_AVG_RANGE, 
            L_CHNEW_REC.SQC_STD_DEV_RANGE, L_CHNEW_REC.EXEC_START_DATE, L_CHNEW_REC.EXEC_START_DATE_TZ, 
            L_CHNEW_REC.EXEC_END_DATE, L_CHNEW_REC.EXEC_END_DATE_TZ,
            L_CHNEW_REC.ASSIGN_CF, L_CHNEW_REC.CY_CALC_CF, L_CHNEW_REC.VISUAL_CF, 
            L_CHNEW_REC.VALID_SQC_RULE1, L_CHNEW_REC.VALID_SQC_RULE2, L_CHNEW_REC.VALID_SQC_RULE3, L_CHNEW_REC.VALID_SQC_RULE4,
            L_CHNEW_REC.VALID_SQC_RULE5, L_CHNEW_REC.VALID_SQC_RULE6, L_CHNEW_REC.VALID_SQC_RULE7,
            L_CHNEW_REC.XR_SERIE_SEQ, L_CHNEW_REC.LC, L_CHNEW_REC.LC_VERSION, 
            L_CHNEW_REC.CH_CLASS, L_CHNEW_REC.LOG_HS, L_CHNEW_REC.LOG_HS_DETAILS, 
            L_CHNEW_REC.ALLOW_MODIFY;
      L_EVENT_TP := 'ChartUpdated';    
   END IF;

   L_EV_SEQ_NR := -1;
   L_HS_DETAILS_SEQ_NR := 1;
   L_EV_DETAILS := 'cy_version=' || L_CY_VERSION;
   L_RET_CODE := UNAPIEV.INSERTEVENT('SaveChart',UNAPIGEN.P_EVMGR_NAME, 'ch', A_CH,
                                     L_LC, L_LC_VERSION, L_SS, L_EVENT_TP, L_EV_DETAILS,
                                     L_EV_SEQ_NR);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE  L_ERROR ;
   END IF;
   
   
   L_HS_DETAILS_SEQ_NR := 0;
   IF NVL(L_LOG_HS, ' ') <> A_LOG_HS THEN
      IF A_LOG_HS = '1' THEN
         INSERT INTO UTCHHS (CH,  WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_CH, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 'History switched ON', 
                 'Audit trail is turned on.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      ELSE
         INSERT INTO UTCHHS (CH,  WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_CH, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 'History switched OFF', 
                 'Audit trail is turned off.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   END IF;
   IF NVL(L_LOG_HS_DETAILS, ' ') <> A_LOG_HS_DETAILS THEN
      IF A_LOG_HS_DETAILS = '1' THEN
         L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
         INSERT INTO UTCHHSDETAILS(CH, TR_SEQ, EV_SEQ, SEQ, DETAILS)
         VALUES(A_CH, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR, 
                'Audit trail is turned on.');
      ELSE
         L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
         INSERT INTO UTCHHSDETAILS(CH, TR_SEQ, EV_SEQ, SEQ, DETAILS)
         VALUES(A_CH, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR, 
                'Audit trail is turned off.');
      END IF;
   END IF;

   IF NVL(L_LOG_HS, ' ') = '1' THEN
      IF L_EVENT_TP = 'ChartCreated'  THEN
         INSERT INTO UTCHHS (CH,  WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_CH, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'chart "'||A_CH||'" is created.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                 L_EV_SEQ_NR);
      ELSE
         INSERT INTO UTCHHS (CH,  WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_CH, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'chart "'||A_CH||'" is updated.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                 L_EV_SEQ_NR);
      END IF;
   END IF;
   IF NVL(L_LOG_HS_DETAILS, ' ') = '1' THEN
      IF L_EVENT_TP = 'ChartCreated' THEN
         L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
         INSERT INTO UTCHHSDETAILS(CH, TR_SEQ, EV_SEQ, SEQ, DETAILS)
         VALUES(A_CH, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR, 
                'Chart "'||A_CH||'" is created.');
      ELSE
         L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
         INSERT INTO UTCHHSDETAILS(CH, TR_SEQ, EV_SEQ, SEQ, DETAILS)
         VALUES(A_CH, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR, 
                'Chart "'||A_CH||'" is updated.');
         UNAPIHSDETAILS.ADDCHHSDETAILS(L_CHOLD_REC, L_CHNEW_REC, UNAPIGEN.P_TR_SEQ, 
                                       L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR); 
      END IF;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE L_ERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveChart',SQLERRM);
   END IF ;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveChart'));
END SAVECHART;

FUNCTION GETCHART
(A_CH                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_CY                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_CY_VERSION           OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_DESCRIPTION          OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_CHART_TITLE          OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_X_AXIS_TITLE         OUT     UNAPIGEN.VC255_TABLE_TYPE,  
 A_Y_AXIS_TITLE         OUT     UNAPIGEN.VC255_TABLE_TYPE,  
 A_Y_AXIS_UNIT          OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_CREATION_DATE        OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_CH_CONTEXT_KEY       OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_DATAPOINT_CNT        OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_DATAPOINT_UNIT       OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_XR_MEASUREMENTS      OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_XR_MAX_CHARTS        OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_SQC_AVG              OUT     UNAPIGEN.FLOAT_TABLE_TYPE,   
 A_SQC_STD_DEV          OUT     UNAPIGEN.FLOAT_TABLE_TYPE,   
 A_SQC_AVG_RANGE        OUT     UNAPIGEN.FLOAT_TABLE_TYPE,   
 A_SQC_STD_DEV_RANGE    OUT     UNAPIGEN.FLOAT_TABLE_TYPE,   
 A_EXEC_START_DATE      OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_EXEC_END_DATE        OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_ASSIGN_CF            OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_CY_CALC_CF           OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_VISUAL_CF            OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_XR_SERIE_SEQ         OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_CH_CLASS             OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_LOG_HS               OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LOG_HS_DETAILS       OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ALLOW_MODIFY         OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_AR                   OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ACTIVE               OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LC                   OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_LC_VERSION           OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SS                   OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_NR_OF_ROWS           IN OUT  NUMBER,                    
 A_WHERE_CLAUSE         IN      VARCHAR2)                  
RETURN NUMBER IS
L_VALID_SQC_RULE1_TAB          UNAPIGEN.VC255_TABLE_TYPE;
L_VALID_SQC_RULE2_TAB          UNAPIGEN.VC255_TABLE_TYPE;
L_VALID_SQC_RULE3_TAB          UNAPIGEN.VC255_TABLE_TYPE;
L_VALID_SQC_RULE4_TAB          UNAPIGEN.VC255_TABLE_TYPE;
L_VALID_SQC_RULE5_TAB          UNAPIGEN.VC255_TABLE_TYPE;
L_VALID_SQC_RULE6_TAB          UNAPIGEN.VC255_TABLE_TYPE;
L_VALID_SQC_RULE7_TAB          UNAPIGEN.VC255_TABLE_TYPE;
BEGIN
RETURN(UNAPICH.GETCHART(A_CH,
                       A_CY,
                       A_CY_VERSION,
                       A_DESCRIPTION,
                       A_CHART_TITLE,
                       A_X_AXIS_TITLE,
                       A_Y_AXIS_TITLE,
                       A_Y_AXIS_UNIT,
                       A_CREATION_DATE,
                       A_CH_CONTEXT_KEY,
                       A_DATAPOINT_CNT,
                       A_DATAPOINT_UNIT,
                       A_XR_MEASUREMENTS,
                       A_XR_MAX_CHARTS,
                       A_SQC_AVG,
                       A_SQC_STD_DEV,
                       A_SQC_AVG_RANGE,
                       A_SQC_STD_DEV_RANGE,
                       A_EXEC_START_DATE,
                       A_EXEC_END_DATE,
                       A_ASSIGN_CF,
                       A_CY_CALC_CF,
                       A_VISUAL_CF,
                       L_VALID_SQC_RULE1_TAB,
                       L_VALID_SQC_RULE2_TAB,
                       L_VALID_SQC_RULE3_TAB,
                       L_VALID_SQC_RULE4_TAB,
                       L_VALID_SQC_RULE5_TAB,
                       L_VALID_SQC_RULE6_TAB,
                       L_VALID_SQC_RULE7_TAB,
                       A_XR_SERIE_SEQ,
                       A_CH_CLASS,
                       A_LOG_HS,
                       A_LOG_HS_DETAILS,
                       A_ALLOW_MODIFY,
                       A_AR,
                       A_ACTIVE,
                       A_LC,
                       A_LC_VERSION,
                       A_SS,
                       A_NR_OF_ROWS,
                       A_WHERE_CLAUSE));
END GETCHART;

FUNCTION GETCHART
(A_CH                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_CY                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_CY_VERSION           OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_DESCRIPTION          OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_CHART_TITLE          OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_X_AXIS_TITLE         OUT     UNAPIGEN.VC255_TABLE_TYPE,  
 A_Y_AXIS_TITLE         OUT     UNAPIGEN.VC255_TABLE_TYPE,  
 A_Y_AXIS_UNIT          OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_CREATION_DATE        OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_CH_CONTEXT_KEY       OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_DATAPOINT_CNT        OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_DATAPOINT_UNIT       OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_XR_MEASUREMENTS      OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_XR_MAX_CHARTS        OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_SQC_AVG              OUT     UNAPIGEN.FLOAT_TABLE_TYPE,   
 A_SQC_STD_DEV          OUT     UNAPIGEN.FLOAT_TABLE_TYPE,   
 A_SQC_AVG_RANGE        OUT     UNAPIGEN.FLOAT_TABLE_TYPE,   
 A_SQC_STD_DEV_RANGE    OUT     UNAPIGEN.FLOAT_TABLE_TYPE,   
 A_EXEC_START_DATE      OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_EXEC_END_DATE        OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_ASSIGN_CF            OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_CY_CALC_CF           OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_VISUAL_CF            OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_VALID_SQC_RULE1      OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_VALID_SQC_RULE2      OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_VALID_SQC_RULE3      OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_VALID_SQC_RULE4      OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_VALID_SQC_RULE5      OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_VALID_SQC_RULE6      OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_VALID_SQC_RULE7      OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_XR_SERIE_SEQ         OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_CH_CLASS             OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_LOG_HS               OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LOG_HS_DETAILS       OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ALLOW_MODIFY         OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_AR                   OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ACTIVE               OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LC                   OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_LC_VERSION           OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SS                   OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_NR_OF_ROWS           IN OUT  NUMBER,                    
 A_WHERE_CLAUSE         IN      VARCHAR2)                  
RETURN NUMBER IS
L_CH                       VARCHAR2(20);
L_CY                       VARCHAR2(20);
L_CY_VERSION               VARCHAR2(20);
L_DESCRIPTION              VARCHAR2(40);
L_CHART_TITLE              VARCHAR2(255);
L_CREATION_DATE            TIMESTAMP WITH TIME ZONE;
L_CH_CONTEXT_KEY           VARCHAR2(255);
L_DATAPOINT_CNT            NUMBER;
L_DATAPOINT_UNIT           VARCHAR2(20);
L_XR_MEASUREMENTS          NUMBER;
L_XR_MAX_CHARTS            NUMBER;
L_SQC_AVG                  NUMBER;
L_SQC_STD_DEV              NUMBER;
L_SQC_AVG_RANGE            NUMBER;
L_SQC_STD_DEV_RANGE        NUMBER;
L_EXEC_START_DATE          TIMESTAMP WITH TIME ZONE;
L_EXEC_END_DATE            TIMESTAMP WITH TIME ZONE;
L_ASSIGN_CF                VARCHAR2(255);
L_VISUAL_CF                VARCHAR2(255);
L_VALID_SQC_RULE1          VARCHAR2(255);
L_VALID_SQC_RULE2          VARCHAR2(255);
L_VALID_SQC_RULE3          VARCHAR2(255);
L_VALID_SQC_RULE4          VARCHAR2(255);
L_VALID_SQC_RULE5          VARCHAR2(255);
L_VALID_SQC_RULE6          VARCHAR2(255);
L_VALID_SQC_RULE7          VARCHAR2(255);
L_XR_SERIE_SEQ             NUMBER;
L_SS                       VARCHAR2(2);
L_LC                       VARCHAR2(2);
L_LC_VERSION               VARCHAR2(20);
L_CH_CLASS                 VARCHAR2(2);
L_LOG_HS                   CHAR(1);
L_LOG_HS_DETAILS           CHAR(1);
L_ALLOW_MODIFY             CHAR(1);
L_AR                       CHAR(1);
L_ACTIVE                   CHAR(1);
L_CY_CALC_CF               VARCHAR2(255);
L_X_AXIS_TITLE             VARCHAR2(255);
L_Y_AXIS_TITLE             VARCHAR2(255);
L_Y_AXIS_UNIT              VARCHAR2(20);
L_CH_CURSOR                INTEGER;
L_BIND_FIXED_CH_FLAG       BOOLEAN;

BEGIN

   L_BIND_FIXED_CH_FLAG := FALSE;
   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'ORDER BY ch'; 
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_BIND_FIXED_CH_FLAG := TRUE;
      L_WHERE_CLAUSE := 'WHERE ch = :ch_val ORDER BY ch';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_CH_CURSOR := DBMS_SQL.OPEN_CURSOR;

   L_SQL_STRING := 'SELECT ch, cy, cy_version, description, chart_title, creation_date, ch_context_key, ' ||
      'datapoint_cnt, datapoint_unit, xr_measurements, xr_max_charts, sqc_avg, sqc_std_dev, sqc_avg_range, ' ||
      'sqc_std_dev_range, exec_start_date, exec_end_date, assign_cf, visual_cf, '||
      'valid_sqc_rule1, valid_sqc_rule2, valid_sqc_rule3, valid_sqc_rule4, valid_sqc_rule5, valid_sqc_rule6, valid_sqc_rule7, '||
      'xr_serie_seq, ss, lc, lc_version, ' ||
      'ch_class, log_hs, log_hs_details, allow_modify, ar, active, cy_calc_cf, x_axis_title, y_axis_title, y_axis_unit ' ||
      ' FROM dd' || UNAPIGEN.P_DD || '.uvch ' || L_WHERE_CLAUSE;
   DBMS_SQL.PARSE(L_CH_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   IF L_BIND_FIXED_CH_FLAG THEN
      DBMS_SQL.BIND_VARIABLE(L_CH_CURSOR, ':ch_val' , A_WHERE_CLAUSE); 
   END IF;

   DBMS_SQL.DEFINE_COLUMN(L_CH_CURSOR,       1,   L_CH                ,  20   );
   DBMS_SQL.DEFINE_COLUMN(L_CH_CURSOR,       2,   L_CY                ,  20   );
   DBMS_SQL.DEFINE_COLUMN(L_CH_CURSOR,       3,   L_CY_VERSION        ,  20   );
   DBMS_SQL.DEFINE_COLUMN(L_CH_CURSOR,       4,   L_DESCRIPTION       ,  40   );
   DBMS_SQL.DEFINE_COLUMN(L_CH_CURSOR,       5,   L_CHART_TITLE       ,  255   );
   DBMS_SQL.DEFINE_COLUMN(L_CH_CURSOR,       6,   L_CREATION_DATE     );
   DBMS_SQL.DEFINE_COLUMN(L_CH_CURSOR,       7,   L_CH_CONTEXT_KEY    ,  255   );
   DBMS_SQL.DEFINE_COLUMN(L_CH_CURSOR,       8,   L_DATAPOINT_CNT     );
   DBMS_SQL.DEFINE_COLUMN(L_CH_CURSOR,       9,   L_DATAPOINT_UNIT    ,  20   );
   DBMS_SQL.DEFINE_COLUMN(L_CH_CURSOR,       10,   L_XR_MEASUREMENTS  );
   DBMS_SQL.DEFINE_COLUMN(L_CH_CURSOR,       11,   L_XR_MAX_CHARTS    );
   DBMS_SQL.DEFINE_COLUMN(L_CH_CURSOR,       12,   L_SQC_AVG          );
   DBMS_SQL.DEFINE_COLUMN(L_CH_CURSOR,       13,   L_SQC_STD_DEV      );
   DBMS_SQL.DEFINE_COLUMN(L_CH_CURSOR,       14,   L_SQC_AVG_RANGE    );
   DBMS_SQL.DEFINE_COLUMN(L_CH_CURSOR,       15,   L_SQC_STD_DEV_RANGE);
   DBMS_SQL.DEFINE_COLUMN(L_CH_CURSOR,       16,   L_EXEC_START_DATE  );
   DBMS_SQL.DEFINE_COLUMN(L_CH_CURSOR,       17,   L_EXEC_END_DATE    );
   DBMS_SQL.DEFINE_COLUMN(L_CH_CURSOR,       18,   L_ASSIGN_CF        ,  255   );
   DBMS_SQL.DEFINE_COLUMN(L_CH_CURSOR,       19,   L_VISUAL_CF        ,  255   );
   DBMS_SQL.DEFINE_COLUMN(L_CH_CURSOR,       20,   L_VALID_SQC_RULE1  ,  255   );
   DBMS_SQL.DEFINE_COLUMN(L_CH_CURSOR,       21,   L_VALID_SQC_RULE2  ,  255   );
   DBMS_SQL.DEFINE_COLUMN(L_CH_CURSOR,       22,   L_VALID_SQC_RULE3  ,  255   );
   DBMS_SQL.DEFINE_COLUMN(L_CH_CURSOR,       23,   L_VALID_SQC_RULE4  ,  255   );
   DBMS_SQL.DEFINE_COLUMN(L_CH_CURSOR,       24,   L_VALID_SQC_RULE5  ,  255   );
   DBMS_SQL.DEFINE_COLUMN(L_CH_CURSOR,       25,   L_VALID_SQC_RULE6  ,  255   );
   DBMS_SQL.DEFINE_COLUMN(L_CH_CURSOR,       26,   L_VALID_SQC_RULE7  ,  255   );   
   DBMS_SQL.DEFINE_COLUMN(L_CH_CURSOR,       27,   L_XR_SERIE_SEQ     );
   DBMS_SQL.DEFINE_COLUMN(L_CH_CURSOR,       28,   L_SS               ,  2   );
   DBMS_SQL.DEFINE_COLUMN(L_CH_CURSOR,       29,   L_LC               ,  2   );
   DBMS_SQL.DEFINE_COLUMN(L_CH_CURSOR,       30,   L_LC_VERSION       ,  20   );
   DBMS_SQL.DEFINE_COLUMN(L_CH_CURSOR,       31,   L_CH_CLASS         ,  2   );
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_CH_CURSOR,  32,   L_LOG_HS           ,  1   );
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_CH_CURSOR,  33,   L_LOG_HS_DETAILS   ,  1   );
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_CH_CURSOR,  34,   L_ALLOW_MODIFY     ,  1   );
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_CH_CURSOR,  35,   L_AR               ,  1   );
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_CH_CURSOR,  36,   L_ACTIVE           ,  1   );
   DBMS_SQL.DEFINE_COLUMN(L_CH_CURSOR,       37,   L_CY_CALC_CF       ,  255   );
   DBMS_SQL.DEFINE_COLUMN(L_CH_CURSOR,       38,   L_X_AXIS_TITLE     ,  255   );
   DBMS_SQL.DEFINE_COLUMN(L_CH_CURSOR,       39,   L_Y_AXIS_TITLE     ,  255   );
   DBMS_SQL.DEFINE_COLUMN(L_CH_CURSOR,       40,   L_Y_AXIS_UNIT      ,  20   );
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_CH_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

   DBMS_SQL.COLUMN_VALUE(L_CH_CURSOR,       1,   L_CH                );
   DBMS_SQL.COLUMN_VALUE(L_CH_CURSOR,       2,   L_CY                );
   DBMS_SQL.COLUMN_VALUE(L_CH_CURSOR,       3,   L_CY_VERSION        );
   DBMS_SQL.COLUMN_VALUE(L_CH_CURSOR,       4,   L_DESCRIPTION       );
   DBMS_SQL.COLUMN_VALUE(L_CH_CURSOR,       5,   L_CHART_TITLE       );
   DBMS_SQL.COLUMN_VALUE(L_CH_CURSOR,       6,   L_CREATION_DATE     );
   DBMS_SQL.COLUMN_VALUE(L_CH_CURSOR,       7,   L_CH_CONTEXT_KEY    );
   DBMS_SQL.COLUMN_VALUE(L_CH_CURSOR,       8,   L_DATAPOINT_CNT     );
   DBMS_SQL.COLUMN_VALUE(L_CH_CURSOR,       9,   L_DATAPOINT_UNIT    );
   DBMS_SQL.COLUMN_VALUE(L_CH_CURSOR,       10,   L_XR_MEASUREMENTS  );
   DBMS_SQL.COLUMN_VALUE(L_CH_CURSOR,       11,   L_XR_MAX_CHARTS    );
   DBMS_SQL.COLUMN_VALUE(L_CH_CURSOR,       12,   L_SQC_AVG          );
   DBMS_SQL.COLUMN_VALUE(L_CH_CURSOR,       13,   L_SQC_STD_DEV      );
   DBMS_SQL.COLUMN_VALUE(L_CH_CURSOR,       14,   L_SQC_AVG_RANGE    );
   DBMS_SQL.COLUMN_VALUE(L_CH_CURSOR,       15,   L_SQC_STD_DEV_RANGE);
   DBMS_SQL.COLUMN_VALUE(L_CH_CURSOR,       16,   L_EXEC_START_DATE  );
   DBMS_SQL.COLUMN_VALUE(L_CH_CURSOR,       17,   L_EXEC_END_DATE    );
   DBMS_SQL.COLUMN_VALUE(L_CH_CURSOR,       18,   L_ASSIGN_CF        );
   DBMS_SQL.COLUMN_VALUE(L_CH_CURSOR,       19,   L_VISUAL_CF        );
   DBMS_SQL.COLUMN_VALUE(L_CH_CURSOR,       20,  L_VALID_SQC_RULE1   );
   DBMS_SQL.COLUMN_VALUE(L_CH_CURSOR,       21,  L_VALID_SQC_RULE2   );
   DBMS_SQL.COLUMN_VALUE(L_CH_CURSOR,       22,  L_VALID_SQC_RULE3   );
   DBMS_SQL.COLUMN_VALUE(L_CH_CURSOR,       23,  L_VALID_SQC_RULE4   );
   DBMS_SQL.COLUMN_VALUE(L_CH_CURSOR,       24,  L_VALID_SQC_RULE5   );
   DBMS_SQL.COLUMN_VALUE(L_CH_CURSOR,       25,  L_VALID_SQC_RULE6   );
   DBMS_SQL.COLUMN_VALUE(L_CH_CURSOR,       26,  L_VALID_SQC_RULE7   );
   DBMS_SQL.COLUMN_VALUE(L_CH_CURSOR,       27,   L_XR_SERIE_SEQ     );
   DBMS_SQL.COLUMN_VALUE(L_CH_CURSOR,       28,   L_SS               );
   DBMS_SQL.COLUMN_VALUE(L_CH_CURSOR,       29,   L_LC               );
   DBMS_SQL.COLUMN_VALUE(L_CH_CURSOR,       30,   L_LC_VERSION       );
   DBMS_SQL.COLUMN_VALUE(L_CH_CURSOR,       31,   L_CH_CLASS         );
   DBMS_SQL.COLUMN_VALUE_CHAR(L_CH_CURSOR,  32,   L_LOG_HS           );
   DBMS_SQL.COLUMN_VALUE_CHAR(L_CH_CURSOR,  33,   L_LOG_HS_DETAILS   );
   DBMS_SQL.COLUMN_VALUE_CHAR(L_CH_CURSOR,  34,   L_ALLOW_MODIFY     );
   DBMS_SQL.COLUMN_VALUE_CHAR(L_CH_CURSOR,  35,   L_AR               );
   DBMS_SQL.COLUMN_VALUE_CHAR(L_CH_CURSOR,  36,   L_ACTIVE           );
   DBMS_SQL.COLUMN_VALUE(L_CH_CURSOR,       37,   L_CY_CALC_CF       );
   DBMS_SQL.COLUMN_VALUE(L_CH_CURSOR,       38,   L_X_AXIS_TITLE     );
   DBMS_SQL.COLUMN_VALUE(L_CH_CURSOR,       39,   L_Y_AXIS_TITLE     );
   DBMS_SQL.COLUMN_VALUE(L_CH_CURSOR,       40,   L_Y_AXIS_UNIT      );
   
   L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
   
   A_CH                   (L_FETCHED_ROWS) := L_CH ;
   A_CY                   (L_FETCHED_ROWS) := L_CY ;
   A_CY_VERSION           (L_FETCHED_ROWS) := L_CY_VERSION ;
   A_DESCRIPTION          (L_FETCHED_ROWS) := L_DESCRIPTION ;
   A_CHART_TITLE          (L_FETCHED_ROWS) := L_CHART_TITLE ;
   A_CREATION_DATE        (L_FETCHED_ROWS) := L_CREATION_DATE ;
   A_CH_CONTEXT_KEY       (L_FETCHED_ROWS) := L_CH_CONTEXT_KEY ;
   A_DATAPOINT_CNT        (L_FETCHED_ROWS) := L_DATAPOINT_CNT ;
   A_DATAPOINT_UNIT       (L_FETCHED_ROWS) := L_DATAPOINT_UNIT ;
   A_XR_MEASUREMENTS      (L_FETCHED_ROWS) := L_XR_MEASUREMENTS ;
   A_XR_MAX_CHARTS        (L_FETCHED_ROWS) := L_XR_MAX_CHARTS ;
   A_SQC_AVG              (L_FETCHED_ROWS) := L_SQC_AVG ;
   A_SQC_STD_DEV          (L_FETCHED_ROWS) := L_SQC_STD_DEV ;
   A_SQC_AVG_RANGE        (L_FETCHED_ROWS) := L_SQC_AVG_RANGE ;
   A_SQC_STD_DEV_RANGE    (L_FETCHED_ROWS) := L_SQC_STD_DEV_RANGE ;
   A_EXEC_START_DATE      (L_FETCHED_ROWS) := L_EXEC_START_DATE ;
   A_EXEC_END_DATE        (L_FETCHED_ROWS) := L_EXEC_END_DATE ;
   A_ASSIGN_CF            (L_FETCHED_ROWS) := L_ASSIGN_CF ;
   A_VISUAL_CF            (L_FETCHED_ROWS) := L_VISUAL_CF ;
   A_VALID_SQC_RULE1      (L_FETCHED_ROWS) := L_VALID_SQC_RULE1 ;
   A_VALID_SQC_RULE2      (L_FETCHED_ROWS) := L_VALID_SQC_RULE2 ;
   A_VALID_SQC_RULE3      (L_FETCHED_ROWS) := L_VALID_SQC_RULE3 ;
   A_VALID_SQC_RULE4      (L_FETCHED_ROWS) := L_VALID_SQC_RULE4 ;
   A_VALID_SQC_RULE5      (L_FETCHED_ROWS) := L_VALID_SQC_RULE5 ;
   A_VALID_SQC_RULE6      (L_FETCHED_ROWS) := L_VALID_SQC_RULE6 ;
   A_VALID_SQC_RULE7      (L_FETCHED_ROWS) := L_VALID_SQC_RULE7 ;      
   A_XR_SERIE_SEQ         (L_FETCHED_ROWS) := L_XR_SERIE_SEQ ;
   A_SS                   (L_FETCHED_ROWS) := L_SS ;
   A_LC                   (L_FETCHED_ROWS) := L_LC ;
   A_LC_VERSION           (L_FETCHED_ROWS) := L_LC_VERSION ;
   A_CH_CLASS             (L_FETCHED_ROWS) := L_CH_CLASS ;
   A_LOG_HS               (L_FETCHED_ROWS) := L_LOG_HS ;
   A_LOG_HS_DETAILS       (L_FETCHED_ROWS) := L_LOG_HS_DETAILS ;
   A_ALLOW_MODIFY         (L_FETCHED_ROWS) := L_ALLOW_MODIFY ;
   A_AR                   (L_FETCHED_ROWS) := L_AR ;
   A_ACTIVE               (L_FETCHED_ROWS) := L_ACTIVE ;
   A_CY_CALC_CF           (L_FETCHED_ROWS) := L_CY_CALC_CF ;
   A_X_AXIS_TITLE         (L_FETCHED_ROWS) := L_X_AXIS_TITLE ;
   A_Y_AXIS_TITLE         (L_FETCHED_ROWS) := L_Y_AXIS_TITLE ;
   A_Y_AXIS_UNIT          (L_FETCHED_ROWS) := L_Y_AXIS_UNIT ;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_CH_CURSOR);
      END IF;
   END LOOP;
   DBMS_SQL.CLOSE_CURSOR(L_CH_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;
   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetChart', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (L_CH_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_CH_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETCHART;

FUNCTION CREATECHART
(A_CY                   IN      VARCHAR2,       
 A_CY_VERSION           IN OUT  VARCHAR2,       
 A_CH                   IN OUT  VARCHAR2,       
 A_CH_CONTEXT_KEY       IN      VARCHAR2,       
 A_REF_DATE             IN      DATE,           
 A_USERID               IN      VARCHAR2,       
 A_MODIFY_REASON        IN      VARCHAR2)       
RETURN NUMBER IS

L_DATE_CURSOR          INTEGER;
L_SCGK_CURSOR          INTEGER;
L_REF_DATE             TIMESTAMP WITH TIME ZONE;
L_LC                   VARCHAR2(2);
L_LC_VERSION           VARCHAR2(20);
L_CY_VERSION           VARCHAR2(20);
L_SS                   VARCHAR2(2);
L_LOG_HS               CHAR(1);
L_LOG_HS_DETAILS       CHAR(1);
L_ALLOW_MODIFY         CHAR(1);
L_ACTIVE               CHAR(1);
L_LAST_CH              VARCHAR2(20);
L_LAST_SERIE_SEQ       NUMBER;
L_SERIE_SEQ            NUMBER;
L_CY_REC               UTCY%ROWTYPE;

CURSOR LAST_CH_IN_SERIE(C_CY VARCHAR2, C_CH_CONTEXT_KEY VARCHAR2) IS
SELECT CH, XR_SERIE_SEQ FROM UTCH 
   WHERE CY = C_CY AND
         CH_CONTEXT_KEY = C_CH_CONTEXT_KEY
   ORDER BY NVL(CREATION_DATE, TO_TIMESTAMP_TZ('1/1/0001', 'DD/MM/YYYY')) DESC;
   
BEGIN
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   
   
   
 
   
 
      A_CY_VERSION := UNAPIGEN.VALIDATEVERSION('cy', A_CY, A_CY_VERSION);
 
   IF A_REF_DATE IS NULL THEN
      L_REF_DATE := CURRENT_TIMESTAMP;
   ELSE
      L_REF_DATE := A_REF_DATE;
   END IF;
      
   
   
   
   
   IF NVL(A_CH, ' ') = ' ' THEN
      L_RET_CODE := UNSQCASSIGN.GENERATECHARTID(A_CY, A_CH_CONTEXT_KEY, A_CH) ;

      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
         RAISE STPERROR;
      END IF;
   END IF;
   
   
   
   
   
   
   
   
   L_CY_VERSION := A_CY_VERSION;
   L_RET_CODE := UNAPIAUT.GETCHAUTHORISATION(A_CH, L_CY_VERSION, L_LC, L_LC_VERSION, L_SS,
                                             L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS, L_LOG_HS_DETAILS);

   IF L_RET_CODE = UNAPIGEN.DBERR_NOCURRENTLCVERSION THEN
      L_SQLERRM := 'No current life cycle for default chart life cycle';
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   ELSIF L_RET_CODE <> UNAPIGEN.DBERR_NOOBJECT  THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_ALREADYEXISTS;
      RAISE STPERROR;
   END IF;
   
   BEGIN
      SELECT *
      INTO L_CY_REC
      FROM UTCY
      WHERE CY=A_CY
      AND VERSION = A_CY_VERSION;
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
     UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR;
   END;
   
   
   OPEN LAST_CH_IN_SERIE(A_CY, A_CH_CONTEXT_KEY);
   FETCH LAST_CH_IN_SERIE INTO L_LAST_CH, L_LAST_SERIE_SEQ;
   IF LAST_CH_IN_SERIE%FOUND THEN
      IF L_LAST_SERIE_SEQ >= L_CY_REC.XR_MAX_CHARTS THEN
          L_SERIE_SEQ := 1;
      ELSE
          L_SERIE_SEQ := NVL(L_LAST_SERIE_SEQ, 0) + 1;
      END IF;
   ELSE
      L_SERIE_SEQ := 1;
   END IF;
   CLOSE LAST_CH_IN_SERIE;
   
   L_LC_VERSION := UNAPIGEN.USEVERSION('lc', L_CY_REC.CH_LC, L_CY_REC.CH_LC_VERSION);
   INSERT INTO UTCH
   ( CH                 ,          
     CY                 ,          
     CY_VERSION         ,          
     DESCRIPTION        ,             
     CHART_TITLE        ,
     X_AXIS_TITLE       ,
     Y_AXIS_TITLE       ,
     Y_AXIS_UNIT        ,
     CREATION_DATE      ,          
     CREATION_DATE_TZ   ,          
     CH_CONTEXT_KEY     ,          
     DATAPOINT_CNT      ,             
     DATAPOINT_UNIT     ,             
     XR_MEASUREMENTS    ,             
     XR_MAX_CHARTS      ,             
     SQC_AVG            ,          
     SQC_STD_DEV        ,          
     SQC_AVG_RANGE      ,          
     SQC_STD_DEV_RANGE  ,          
     EXEC_START_DATE    ,          
     EXEC_START_DATE_TZ ,          
     EXEC_END_DATE      ,          
     EXEC_END_DATE_TZ   ,          
     ASSIGN_CF          ,
     CY_CALC_CF         ,
     VISUAL_CF          ,
     VALID_SQC_RULE1    , 
     VALID_SQC_RULE2    , 
     VALID_SQC_RULE3    , 
     VALID_SQC_RULE4    ,
     VALID_SQC_RULE5    ,
     VALID_SQC_RULE6    ,
     VALID_SQC_RULE7    ,
     XR_SERIE_SEQ       ,             
     CH_CLASS           ,             
     LOG_HS             ,          
     LOG_HS_DETAILS     ,          
     ALLOW_MODIFY       ,          
     ACTIVE             ,          
     LC                 ,          
     LC_VERSION)                   
   VALUES(             
     A_CH                          ,
     A_CY                          ,
     A_CY_VERSION                  ,
     L_CY_REC.DESCRIPTION          ,
     L_CY_REC.CHART_TITLE          ,
     L_CY_REC.X_AXIS_TITLE         ,
     L_CY_REC.Y_AXIS_TITLE         ,
     L_CY_REC.Y_AXIS_UNIT          ,
     L_REF_DATE                    ,
     L_REF_DATE                    ,
     A_CH_CONTEXT_KEY              ,
     L_CY_REC.DATAPOINT_CNT        ,
     L_CY_REC.DATAPOINT_UNIT       ,
     L_CY_REC.XR_MEASUREMENTS      ,
     L_CY_REC.XR_MAX_CHARTS        ,
     NULL                          ,
     NULL                          ,
     NULL                          ,
     NULL                          ,
     NULL                          ,
     NULL                          ,
     NULL                          ,
     NULL                          ,
     L_CY_REC.ASSIGN_CF            ,
     L_CY_REC.CY_CALC_CF           ,
     L_CY_REC.VISUAL_CF            ,
     L_CY_REC.VALID_SQC_RULE1      ,
     L_CY_REC.VALID_SQC_RULE2      ,
     L_CY_REC.VALID_SQC_RULE3      ,
     L_CY_REC.VALID_SQC_RULE4      ,
     L_CY_REC.VALID_SQC_RULE5      ,
     L_CY_REC.VALID_SQC_RULE6      ,
     L_CY_REC.VALID_SQC_RULE7      ,
     L_SERIE_SEQ                   ,
     L_CY_REC.CY_CLASS             ,
     L_LOG_HS                      ,
     L_LOG_HS_DETAILS              ,
     '#'                           ,
     '0'                           ,
     L_CY_REC.CH_LC                ,
     L_LC_VERSION) ;     
     UNAPIAUT.UPDATELCINAUTHORISATIONBUFFER('ch', A_CH, '', L_CY_REC.CH_LC, L_LC_VERSION);                 

 
   
   
   
   L_EVENT_TP  := 'ChartCreated';
   L_EV_SEQ_NR := -1;
   L_EV_DETAILS := 'cy_version='||A_CY_VERSION;

   L_RESULT := UNAPIEV.INSERTEVENT('ChartCreated', UNAPIGEN.P_EVMGR_NAME, 'ch',
                                   A_CH, '', '', '', L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   
   INSERT INTO UTCHHS(CH, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION,
                      LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
   VALUES(A_CH, NVL(A_USERID, UNAPIGEN.P_USER), UNAPIGEN.SQLUSERDESCRIPTION(NVL(A_USERID, UNAPIGEN.P_USER)),
          L_EVENT_TP, 'chart "'||A_CH||'" is created',
          CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('CreateChart', SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('CreateChart', L_SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'CreateChart'));
END CREATECHART;

FUNCTION GETCHDATAPOINT
(A_CH                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_DATAPOINT_SEQ        OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_MEASURE_SEQ          OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_X_VALUE_F            OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_X_VALUE_S            OUT     UNAPIGEN.VC40_TABLE_TYPE,    
 A_X_VALUE_D            OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_DATAPOINT_VALUE_F    OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_DATAPOINT_VALUE_S    OUT     UNAPIGEN.VC40_TABLE_TYPE,    
 A_DATAPOINT_LABEL      OUT     UNAPIGEN.VC255_TABLE_TYPE,    
 A_DATAPOINT_MARKER     OUT     UNAPIGEN.VC20_TABLE_TYPE,     
 A_DATAPOINT_COLOUR     OUT     UNAPIGEN.VC20_TABLE_TYPE,       
 A_DATAPOINT_LINK       OUT     UNAPIGEN.VC255_TABLE_TYPE,    
 A_Z_VALUE_F            OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_Z_VALUE_S            OUT     UNAPIGEN.VC40_TABLE_TYPE,     
 A_DATAPOINT_RANGE      OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_SQC_AVG              OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SQC_AVG_RANGE        OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SQC_STD_DEV          OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SQC_STD_DEV_RANGE    OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC1                OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC2                OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC3                OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC4                OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC5                OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC6                OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC7                OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC8                OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC9                OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC10               OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC11               OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC12               OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC13               OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC14               OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC15               OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_ACTIVE               OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NR_OF_ROWS           IN OUT  NUMBER,                    
 A_WHERE_CLAUSE         IN      VARCHAR2)                  
RETURN NUMBER IS
L_CH                     UNAPIGEN.VC20_TABLE_TYPE;
L_DATAPOINT_SEQ          UNAPIGEN.NUM_TABLE_TYPE;
L_MEASURE_SEQ            UNAPIGEN.NUM_TABLE_TYPE;
L_X_VALUE_F              UNAPIGEN.FLOAT_TABLE_TYPE;
L_X_VALUE_S              UNAPIGEN.VC40_TABLE_TYPE;
L_X_VALUE_D              UNAPIGEN.DATE_TABLE_TYPE;
L_DATAPOINT_VALUE_F      UNAPIGEN.FLOAT_TABLE_TYPE;
L_DATAPOINT_VALUE_S      UNAPIGEN.VC40_TABLE_TYPE;
L_DATAPOINT_LABEL        UNAPIGEN.VC255_TABLE_TYPE;
L_DATAPOINT_MARKER       UNAPIGEN.VC20_TABLE_TYPE;
L_DATAPOINT_COLOUR       UNAPIGEN.VC20_TABLE_TYPE;
L_DATAPOINT_LINK         UNAPIGEN.VC255_TABLE_TYPE;
L_Z_VALUE_F              UNAPIGEN.FLOAT_TABLE_TYPE;
L_Z_VALUE_S              UNAPIGEN.VC40_TABLE_TYPE;
L_DATAPOINT_RANGE        UNAPIGEN.NUM_TABLE_TYPE;
L_SQC_AVG                UNAPIGEN.FLOAT_TABLE_TYPE;
L_SQC_AVG_RANGE          UNAPIGEN.FLOAT_TABLE_TYPE;
L_SQC_STD_DEV            UNAPIGEN.FLOAT_TABLE_TYPE;
L_SQC_STD_DEV_RANGE      UNAPIGEN.FLOAT_TABLE_TYPE;
L_SPEC1                  UNAPIGEN.FLOAT_TABLE_TYPE;
L_SPEC2                  UNAPIGEN.FLOAT_TABLE_TYPE;
L_SPEC3                  UNAPIGEN.FLOAT_TABLE_TYPE;
L_SPEC4                  UNAPIGEN.FLOAT_TABLE_TYPE;
L_SPEC5                  UNAPIGEN.FLOAT_TABLE_TYPE;
L_SPEC6                  UNAPIGEN.FLOAT_TABLE_TYPE;
L_SPEC7                  UNAPIGEN.FLOAT_TABLE_TYPE;
L_SPEC8                  UNAPIGEN.FLOAT_TABLE_TYPE;
L_SPEC9                  UNAPIGEN.FLOAT_TABLE_TYPE;
L_SPEC10                 UNAPIGEN.FLOAT_TABLE_TYPE;
L_SPEC11                 UNAPIGEN.FLOAT_TABLE_TYPE;
L_SPEC12                 UNAPIGEN.FLOAT_TABLE_TYPE;
L_SPEC13                 UNAPIGEN.FLOAT_TABLE_TYPE;
L_SPEC14                 UNAPIGEN.FLOAT_TABLE_TYPE;
L_SPEC15                 UNAPIGEN.FLOAT_TABLE_TYPE;
L_ACTIVE                 UNAPIGEN.CHAR1_TABLE_TYPE;
L_RULE1_VIOLATED         UNAPIGEN.CHAR1_TABLE_TYPE;
L_RULE2_VIOLATED         UNAPIGEN.CHAR1_TABLE_TYPE;
L_RULE3_VIOLATED         UNAPIGEN.CHAR1_TABLE_TYPE;
L_RULE4_VIOLATED         UNAPIGEN.CHAR1_TABLE_TYPE;
L_RULE5_VIOLATED         UNAPIGEN.CHAR1_TABLE_TYPE;
L_RULE6_VIOLATED         UNAPIGEN.CHAR1_TABLE_TYPE;
L_RULE7_VIOLATED         UNAPIGEN.CHAR1_TABLE_TYPE;
L_NR_OF_ROWS             NUMBER;
L_WHERE_CLAUSE           VARCHAR2(511);
L_NEXT_ROWS              NUMBER;

BEGIN
   L_RET_CODE := UNAPICH.GETCHDATAPOINT
                   (A_CH,
                    A_DATAPOINT_SEQ,
                    A_MEASURE_SEQ,
                    A_X_VALUE_F,
                    A_X_VALUE_S,
                    A_X_VALUE_D,
                    A_DATAPOINT_VALUE_F,
                    A_DATAPOINT_VALUE_S,
                    A_DATAPOINT_LABEL,
                    A_DATAPOINT_MARKER,
                    A_DATAPOINT_COLOUR,
                    A_DATAPOINT_LINK,
                    A_Z_VALUE_F,
                    A_Z_VALUE_S,
                    A_DATAPOINT_RANGE,
                    A_SQC_AVG,
                    A_SQC_AVG_RANGE,
                    A_SQC_STD_DEV,
                    A_SQC_STD_DEV_RANGE,
                    A_SPEC1,
                    A_SPEC2,
                    A_SPEC3,
                    A_SPEC4,
                    A_SPEC5,
                    A_SPEC6,
                    A_SPEC7,
                    A_SPEC8,
                    A_SPEC9,
                    A_SPEC10,
                    A_SPEC11,
                    A_SPEC12,
                    A_SPEC13,
                    A_SPEC14,
                    A_SPEC15,
                    A_ACTIVE,
                    L_RULE1_VIOLATED,
                    L_RULE2_VIOLATED,
                    L_RULE3_VIOLATED,
                    L_RULE4_VIOLATED,
                    L_RULE5_VIOLATED,
                    L_RULE6_VIOLATED,
                    L_RULE7_VIOLATED,
                    A_NR_OF_ROWS,
                    A_WHERE_CLAUSE,
                    0);
    IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
       RETURN(L_RET_CODE);
    END IF;
        
    L_NR_OF_ROWS := 1;
    L_WHERE_CLAUSE := A_WHERE_CLAUSE;
    L_RET_CODE := UNAPICH.GETCHDATAPOINT
                   (L_CH,
                    L_DATAPOINT_SEQ,
                    L_MEASURE_SEQ,
                    L_X_VALUE_F,
                    L_X_VALUE_S,
                    L_X_VALUE_D,
                    L_DATAPOINT_VALUE_F,
                    L_DATAPOINT_VALUE_S,
                    L_DATAPOINT_LABEL,
                    L_DATAPOINT_MARKER,
                    L_DATAPOINT_COLOUR,
                    L_DATAPOINT_LINK,
                    L_Z_VALUE_F,
                    L_Z_VALUE_S,
                    L_DATAPOINT_RANGE,
                    L_SQC_AVG,
                    L_SQC_AVG_RANGE,
                    L_SQC_STD_DEV,
                    L_SQC_STD_DEV_RANGE,
                    L_SPEC1,
                    L_SPEC2,
                    L_SPEC3,
                    L_SPEC4,
                    L_SPEC5,
                    L_SPEC6,
                    L_SPEC7,
                    L_SPEC8,
                    L_SPEC9,
                    L_SPEC10,
                    L_SPEC11,
                    L_SPEC12,
                    L_SPEC13,
                    L_SPEC14,
                    L_SPEC15,
                    L_ACTIVE,
                    L_RULE1_VIOLATED,
                    L_RULE2_VIOLATED,
                    L_RULE3_VIOLATED,
                    L_RULE4_VIOLATED,
                    L_RULE5_VIOLATED,
                    L_RULE6_VIOLATED,
                    L_RULE7_VIOLATED,
                    L_NR_OF_ROWS,
                    L_WHERE_CLAUSE,
                    -1);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      RETURN(L_RET_CODE);
   END IF;                    
   RETURN(UNAPIGEN.DBERR_SUCCESS);    
EXCEPTION
WHEN OTHERS THEN
  L_SQLERRM := SQLERRM;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
           'GetChDatapoint', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   IF DBMS_SQL.IS_OPEN (P_CHDP_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (P_CHDP_CURSOR);
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETCHDATAPOINT;

FUNCTION GETCHDATAPOINT
(A_CH                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_DATAPOINT_SEQ        OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_MEASURE_SEQ          OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_X_VALUE_F            OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_X_VALUE_S            OUT     UNAPIGEN.VC40_TABLE_TYPE,    
 A_X_VALUE_D            OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_DATAPOINT_VALUE_F    OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_DATAPOINT_VALUE_S    OUT     UNAPIGEN.VC40_TABLE_TYPE,    
 A_DATAPOINT_LABEL      OUT     UNAPIGEN.VC255_TABLE_TYPE,    
 A_DATAPOINT_MARKER     OUT     UNAPIGEN.VC20_TABLE_TYPE,     
 A_DATAPOINT_COLOUR     OUT     UNAPIGEN.VC20_TABLE_TYPE,       
 A_DATAPOINT_LINK       OUT     UNAPIGEN.VC255_TABLE_TYPE,    
 A_Z_VALUE_F            OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_Z_VALUE_S            OUT     UNAPIGEN.VC40_TABLE_TYPE,     
 A_DATAPOINT_RANGE      OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_SQC_AVG              OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SQC_AVG_RANGE        OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SQC_STD_DEV          OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SQC_STD_DEV_RANGE    OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC1                OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC2                OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC3                OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC4                OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC5                OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC6                OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC7                OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC8                OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC9                OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC10               OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC11               OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC12               OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC13               OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC14               OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC15               OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_ACTIVE               OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_RULE1_VIOLATED       OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_RULE2_VIOLATED       OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_RULE3_VIOLATED       OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_RULE4_VIOLATED       OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_RULE5_VIOLATED       OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_RULE6_VIOLATED       OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_RULE7_VIOLATED       OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NR_OF_ROWS           IN OUT  NUMBER,                    
 A_WHERE_CLAUSE         IN      VARCHAR2)                  
RETURN NUMBER IS
L_CH                     UNAPIGEN.VC20_TABLE_TYPE;
L_DATAPOINT_SEQ          UNAPIGEN.NUM_TABLE_TYPE;
L_MEASURE_SEQ            UNAPIGEN.NUM_TABLE_TYPE;
L_X_VALUE_F              UNAPIGEN.FLOAT_TABLE_TYPE;
L_X_VALUE_S              UNAPIGEN.VC40_TABLE_TYPE;
L_X_VALUE_D              UNAPIGEN.DATE_TABLE_TYPE;
L_DATAPOINT_VALUE_F      UNAPIGEN.FLOAT_TABLE_TYPE;
L_DATAPOINT_VALUE_S      UNAPIGEN.VC40_TABLE_TYPE;
L_DATAPOINT_LABEL        UNAPIGEN.VC255_TABLE_TYPE;
L_DATAPOINT_MARKER       UNAPIGEN.VC20_TABLE_TYPE;
L_DATAPOINT_COLOUR       UNAPIGEN.VC20_TABLE_TYPE;
L_DATAPOINT_LINK         UNAPIGEN.VC255_TABLE_TYPE;
L_Z_VALUE_F              UNAPIGEN.FLOAT_TABLE_TYPE;
L_Z_VALUE_S              UNAPIGEN.VC40_TABLE_TYPE;
L_DATAPOINT_RANGE        UNAPIGEN.NUM_TABLE_TYPE;
L_SQC_AVG                UNAPIGEN.FLOAT_TABLE_TYPE;
L_SQC_AVG_RANGE          UNAPIGEN.FLOAT_TABLE_TYPE;
L_SQC_STD_DEV            UNAPIGEN.FLOAT_TABLE_TYPE;
L_SQC_STD_DEV_RANGE      UNAPIGEN.FLOAT_TABLE_TYPE;
L_SPEC1                  UNAPIGEN.FLOAT_TABLE_TYPE;
L_SPEC2                  UNAPIGEN.FLOAT_TABLE_TYPE;
L_SPEC3                  UNAPIGEN.FLOAT_TABLE_TYPE;
L_SPEC4                  UNAPIGEN.FLOAT_TABLE_TYPE;
L_SPEC5                  UNAPIGEN.FLOAT_TABLE_TYPE;
L_SPEC6                  UNAPIGEN.FLOAT_TABLE_TYPE;
L_SPEC7                  UNAPIGEN.FLOAT_TABLE_TYPE;
L_SPEC8                  UNAPIGEN.FLOAT_TABLE_TYPE;
L_SPEC9                  UNAPIGEN.FLOAT_TABLE_TYPE;
L_SPEC10                 UNAPIGEN.FLOAT_TABLE_TYPE;
L_SPEC11                 UNAPIGEN.FLOAT_TABLE_TYPE;
L_SPEC12                 UNAPIGEN.FLOAT_TABLE_TYPE;
L_SPEC13                 UNAPIGEN.FLOAT_TABLE_TYPE;
L_SPEC14                 UNAPIGEN.FLOAT_TABLE_TYPE;
L_SPEC15                 UNAPIGEN.FLOAT_TABLE_TYPE;
L_ACTIVE                 UNAPIGEN.CHAR1_TABLE_TYPE;
L_RULE1_VIOLATED         UNAPIGEN.CHAR1_TABLE_TYPE;
L_RULE2_VIOLATED         UNAPIGEN.CHAR1_TABLE_TYPE;
L_RULE3_VIOLATED         UNAPIGEN.CHAR1_TABLE_TYPE;
L_RULE4_VIOLATED         UNAPIGEN.CHAR1_TABLE_TYPE;
L_RULE5_VIOLATED         UNAPIGEN.CHAR1_TABLE_TYPE;
L_RULE6_VIOLATED         UNAPIGEN.CHAR1_TABLE_TYPE;
L_RULE7_VIOLATED         UNAPIGEN.CHAR1_TABLE_TYPE;
L_NR_OF_ROWS             NUMBER;
L_WHERE_CLAUSE           VARCHAR2(511);
L_NEXT_ROWS              NUMBER;

BEGIN
   L_RET_CODE := UNAPICH.GETCHDATAPOINT
                   (A_CH,
                    A_DATAPOINT_SEQ,
                    A_MEASURE_SEQ,
                    A_X_VALUE_F,
                    A_X_VALUE_S,
                    A_X_VALUE_D,
                    A_DATAPOINT_VALUE_F,
                    A_DATAPOINT_VALUE_S,
                    A_DATAPOINT_LABEL,
                    A_DATAPOINT_MARKER,
                    A_DATAPOINT_COLOUR,
                    A_DATAPOINT_LINK,
                    A_Z_VALUE_F,
                    A_Z_VALUE_S,
                    A_DATAPOINT_RANGE,
                    A_SQC_AVG,
                    A_SQC_AVG_RANGE,
                    A_SQC_STD_DEV,
                    A_SQC_STD_DEV_RANGE,
                    A_SPEC1,
                    A_SPEC2,
                    A_SPEC3,
                    A_SPEC4,
                    A_SPEC5,
                    A_SPEC6,
                    A_SPEC7,
                    A_SPEC8,
                    A_SPEC9,
                    A_SPEC10,
                    A_SPEC11,
                    A_SPEC12,
                    A_SPEC13,
                    A_SPEC14,
                    A_SPEC15,
                    A_ACTIVE,
                    A_RULE1_VIOLATED,
                    A_RULE2_VIOLATED,
                    A_RULE3_VIOLATED,
                    A_RULE4_VIOLATED,
                    A_RULE5_VIOLATED,
                    A_RULE6_VIOLATED,
                    A_RULE7_VIOLATED,
                    A_NR_OF_ROWS,
                    A_WHERE_CLAUSE,
                    0);
    IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
       RETURN(L_RET_CODE);
    END IF;
    
    
    L_NR_OF_ROWS := 1;
    L_WHERE_CLAUSE := A_WHERE_CLAUSE;
    L_RET_CODE := UNAPICH.GETCHDATAPOINT
                   (L_CH,
                    L_DATAPOINT_SEQ,
                    L_MEASURE_SEQ,
                    L_X_VALUE_F,
                    L_X_VALUE_S,
                    L_X_VALUE_D,
                    L_DATAPOINT_VALUE_F,
                    L_DATAPOINT_VALUE_S,
                    L_DATAPOINT_LABEL,
                    L_DATAPOINT_MARKER,
                    L_DATAPOINT_COLOUR,
                    L_DATAPOINT_LINK,
                    L_Z_VALUE_F,
                    L_Z_VALUE_S,
                    L_DATAPOINT_RANGE,
                    L_SQC_AVG,
                    L_SQC_AVG_RANGE,
                    L_SQC_STD_DEV,
                    L_SQC_STD_DEV_RANGE,
                    L_SPEC1,
                    L_SPEC2,
                    L_SPEC3,
                    L_SPEC4,
                    L_SPEC5,
                    L_SPEC6,
                    L_SPEC7,
                    L_SPEC8,
                    L_SPEC9,
                    L_SPEC10,
                    L_SPEC11,
                    L_SPEC12,
                    L_SPEC13,
                    L_SPEC14,
                    L_SPEC15,
                    L_ACTIVE,
                    L_RULE1_VIOLATED,
                    L_RULE2_VIOLATED,
                    L_RULE3_VIOLATED,
                    L_RULE4_VIOLATED,
                    L_RULE5_VIOLATED,
                    L_RULE6_VIOLATED,
                    L_RULE7_VIOLATED,
                    L_NR_OF_ROWS,
                    L_WHERE_CLAUSE,
                    -1);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      RETURN(L_RET_CODE);
   END IF;                    
   RETURN(UNAPIGEN.DBERR_SUCCESS);    
EXCEPTION
WHEN OTHERS THEN
  L_SQLERRM := SQLERRM;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
           'GetChDatapoint', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   IF DBMS_SQL.IS_OPEN (P_CHDP_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (P_CHDP_CURSOR);
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETCHDATAPOINT;

FUNCTION GETCHDATAPOINT
(A_CH                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_DATAPOINT_SEQ        OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_MEASURE_SEQ          OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_X_VALUE_F            OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_X_VALUE_S            OUT     UNAPIGEN.VC40_TABLE_TYPE,    
 A_X_VALUE_D            OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_DATAPOINT_VALUE_F    OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_DATAPOINT_VALUE_S    OUT     UNAPIGEN.VC40_TABLE_TYPE,    
 A_DATAPOINT_LABEL      OUT     UNAPIGEN.VC255_TABLE_TYPE,    
 A_DATAPOINT_MARKER     OUT     UNAPIGEN.VC20_TABLE_TYPE,     
 A_DATAPOINT_COLOUR     OUT     UNAPIGEN.VC20_TABLE_TYPE,       
 A_DATAPOINT_LINK       OUT     UNAPIGEN.VC255_TABLE_TYPE,    
 A_Z_VALUE_F            OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_Z_VALUE_S            OUT     UNAPIGEN.VC40_TABLE_TYPE,     
 A_DATAPOINT_RANGE      OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_SQC_AVG              OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SQC_AVG_RANGE        OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SQC_STD_DEV          OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SQC_STD_DEV_RANGE    OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC1                OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC2                OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC3                OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC4                OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC5                OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC6                OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC7                OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC8                OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC9                OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC10               OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC11               OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC12               OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC13               OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC14               OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC15               OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_ACTIVE               OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NR_OF_ROWS           IN OUT  NUMBER,                    
 A_WHERE_CLAUSE         IN      VARCHAR2,                  
 A_NEXT_ROWS            IN      NUMBER)                    
RETURN NUMBER IS

L_RULE1_VIOLATED_TAB      UNAPIGEN.CHAR1_TABLE_TYPE;
L_RULE2_VIOLATED_TAB      UNAPIGEN.CHAR1_TABLE_TYPE;
L_RULE3_VIOLATED_TAB      UNAPIGEN.CHAR1_TABLE_TYPE;
L_RULE4_VIOLATED_TAB      UNAPIGEN.CHAR1_TABLE_TYPE;
L_RULE5_VIOLATED_TAB      UNAPIGEN.CHAR1_TABLE_TYPE;
L_RULE6_VIOLATED_TAB      UNAPIGEN.CHAR1_TABLE_TYPE;
L_RULE7_VIOLATED_TAB      UNAPIGEN.CHAR1_TABLE_TYPE;

BEGIN
   RETURN(UNAPICH.GETCHDATAPOINT
                   (A_CH,
                    A_DATAPOINT_SEQ,
                    A_MEASURE_SEQ,
                    A_X_VALUE_F,
                    A_X_VALUE_S,
                    A_X_VALUE_D,
                    A_DATAPOINT_VALUE_F,
                    A_DATAPOINT_VALUE_S,
                    A_DATAPOINT_LABEL,
                    A_DATAPOINT_MARKER,
                    A_DATAPOINT_COLOUR,
                    A_DATAPOINT_LINK,
                    A_Z_VALUE_F,
                    A_Z_VALUE_S,
                    A_DATAPOINT_RANGE,
                    A_SQC_AVG,
                    A_SQC_AVG_RANGE,
                    A_SQC_STD_DEV,
                    A_SQC_STD_DEV_RANGE,
                    A_SPEC1,
                    A_SPEC2,
                    A_SPEC3,
                    A_SPEC4,
                    A_SPEC5,
                    A_SPEC6,
                    A_SPEC7,
                    A_SPEC8,
                    A_SPEC9,
                    A_SPEC10,
                    A_SPEC11,
                    A_SPEC12,
                    A_SPEC13,
                    A_SPEC14,
                    A_SPEC15,
                    A_ACTIVE,
                    L_RULE1_VIOLATED_TAB,
                    L_RULE2_VIOLATED_TAB,
                    L_RULE3_VIOLATED_TAB,
                    L_RULE4_VIOLATED_TAB,
                    L_RULE5_VIOLATED_TAB,
                    L_RULE6_VIOLATED_TAB,
                    L_RULE7_VIOLATED_TAB,
                    A_NR_OF_ROWS,
                    A_WHERE_CLAUSE,
                    A_NEXT_ROWS));    
END GETCHDATAPOINT;

FUNCTION GETCHDATAPOINT
(A_CH                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_DATAPOINT_SEQ        OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_MEASURE_SEQ          OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_X_VALUE_F            OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_X_VALUE_S            OUT     UNAPIGEN.VC40_TABLE_TYPE,    
 A_X_VALUE_D            OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_DATAPOINT_VALUE_F    OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_DATAPOINT_VALUE_S    OUT     UNAPIGEN.VC40_TABLE_TYPE,    
 A_DATAPOINT_LABEL      OUT     UNAPIGEN.VC255_TABLE_TYPE,    
 A_DATAPOINT_MARKER     OUT     UNAPIGEN.VC20_TABLE_TYPE,     
 A_DATAPOINT_COLOUR     OUT     UNAPIGEN.VC20_TABLE_TYPE,       
 A_DATAPOINT_LINK       OUT     UNAPIGEN.VC255_TABLE_TYPE,    
 A_Z_VALUE_F            OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_Z_VALUE_S            OUT     UNAPIGEN.VC40_TABLE_TYPE,     
 A_DATAPOINT_RANGE      OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_SQC_AVG              OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SQC_AVG_RANGE        OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SQC_STD_DEV          OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SQC_STD_DEV_RANGE    OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC1                OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC2                OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC3                OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC4                OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC5                OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC6                OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC7                OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC8                OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC9                OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC10               OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC11               OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC12               OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC13               OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC14               OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC15               OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_ACTIVE               OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_RULE1_VIOLATED       OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_RULE2_VIOLATED       OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_RULE3_VIOLATED       OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_RULE4_VIOLATED       OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_RULE5_VIOLATED       OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_RULE6_VIOLATED       OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_RULE7_VIOLATED       OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NR_OF_ROWS           IN OUT  NUMBER,                    
 A_WHERE_CLAUSE         IN      VARCHAR2,                  
 A_NEXT_ROWS            IN      NUMBER)                    
RETURN NUMBER IS
L_CH                       VARCHAR2(20);
L_DATAPOINT_SEQ            NUMBER(4);
L_MEASURE_SEQ              NUMBER(2);
L_X_VALUE_F                NUMBER;
L_X_VALUE_S                VARCHAR2(40);
L_X_VALUE_D                TIMESTAMP WITH TIME ZONE;
L_DATAPOINT_VALUE_F        NUMBER;
L_DATAPOINT_VALUE_S        VARCHAR2(40);
L_DATAPOINT_LABEL          VARCHAR2(255);
L_DATAPOINT_MARKER         VARCHAR2(20);
L_DATAPOINT_COLOUR         VARCHAR2(20);
L_DATAPOINT_LINK           VARCHAR2(255);
L_Z_VALUE_F                NUMBER;
L_Z_VALUE_S                VARCHAR2(40);
L_DATAPOINT_RANGE          NUMBER;
L_SQC_AVG                  NUMBER;
L_SQC_AVG_RANGE            NUMBER;
L_SQC_STD_DEV              NUMBER;
L_SQC_STD_DEV_RANGE        NUMBER;
L_SPEC1                    NUMBER;
L_SPEC2                    NUMBER;
L_SPEC3                    NUMBER;
L_SPEC4                    NUMBER;
L_SPEC5                    NUMBER;
L_SPEC6                    NUMBER;
L_SPEC7                    NUMBER;
L_SPEC8                    NUMBER;
L_SPEC9                    NUMBER;
L_SPEC10                   NUMBER;
L_SPEC11                   NUMBER;
L_SPEC12                   NUMBER;
L_SPEC13                   NUMBER;
L_SPEC14                   NUMBER;
L_SPEC15                   NUMBER;
L_ACTIVE                   CHAR(1);
L_RULE1_VIOLATED           CHAR(1);
L_RULE2_VIOLATED           CHAR(1);
L_RULE3_VIOLATED           CHAR(1);
L_RULE4_VIOLATED           CHAR(1);
L_RULE5_VIOLATED           CHAR(1);
L_RULE6_VIOLATED           CHAR(1);
L_RULE7_VIOLATED           CHAR(1);
L_BIND_FIXED_CH_FLAG       BOOLEAN;

BEGIN
   L_BIND_FIXED_CH_FLAG := FALSE;
   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_CHDP_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_CHDP_CURSOR);
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_CHDP_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      IF P_CHDP_CURSOR IS NULL THEN
         
         P_CHDP_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;

      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
         L_WHERE_CLAUSE := ' ORDER BY ch, datapoint_seq , measure_seq'; 
      ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
         L_BIND_FIXED_CH_FLAG := TRUE;         
         L_WHERE_CLAUSE := 'WHERE ch = :ch_val ORDER BY ch, datapoint_seq, measure_seq'; 
      ELSE
         L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
      END IF;

      
      L_SQL_STRING :=  'SELECT ch, datapoint_seq, measure_seq, X_value_f, X_value_s, X_value_d, datapoint_value_f, '||
      'datapoint_value_s, datapoint_label, datapoint_marker, datapoint_colour, datapoint_link, Z_value_f, Z_value_s, '||
      'datapoint_range, sqc_avg, sqc_avg_range, sqc_std_dev, sqc_std_dev_range, spec1, spec2, spec3, spec4, spec5, '||
      'spec6, spec7, spec8, spec9, spec10, spec11, spec12, spec13, spec14, spec15, Active, ' ||
      'rule1_violated, rule2_violated, rule3_violated, rule4_violated, rule5_violated, rule6_violated, rule7_violated '||
      'FROM dd' || UNAPIGEN.P_DD || '.uvchdp ' || L_WHERE_CLAUSE;

      DBMS_SQL.PARSE(P_CHDP_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      IF L_BIND_FIXED_CH_FLAG THEN
         DBMS_SQL.BIND_VARIABLE(P_CHDP_CURSOR, ':ch_val' , A_WHERE_CLAUSE); 
      END IF;
      DBMS_SQL.DEFINE_COLUMN(P_CHDP_CURSOR,       1  ,   L_CH                , 20 ); 
      DBMS_SQL.DEFINE_COLUMN(P_CHDP_CURSOR,       2  ,   L_DATAPOINT_SEQ          );  
      DBMS_SQL.DEFINE_COLUMN(P_CHDP_CURSOR,       3  ,   L_MEASURE_SEQ            );  
      DBMS_SQL.DEFINE_COLUMN(P_CHDP_CURSOR,       4  ,   L_X_VALUE_F              );    
      DBMS_SQL.DEFINE_COLUMN(P_CHDP_CURSOR,       5  ,   L_X_VALUE_S         , 40 ); 
      DBMS_SQL.DEFINE_COLUMN(P_CHDP_CURSOR,       6  ,   L_X_VALUE_D              );   
      DBMS_SQL.DEFINE_COLUMN(P_CHDP_CURSOR,       7  ,   L_DATAPOINT_VALUE_F      ); 
      DBMS_SQL.DEFINE_COLUMN(P_CHDP_CURSOR,       8  ,   L_DATAPOINT_VALUE_S , 40 ); 
      DBMS_SQL.DEFINE_COLUMN(P_CHDP_CURSOR,       9  ,   L_DATAPOINT_LABEL   , 255); 
      DBMS_SQL.DEFINE_COLUMN(P_CHDP_CURSOR,       10 ,   L_DATAPOINT_MARKER  , 20 ); 
      DBMS_SQL.DEFINE_COLUMN(P_CHDP_CURSOR,       11 ,   L_DATAPOINT_COLOUR  , 20 ); 
      DBMS_SQL.DEFINE_COLUMN(P_CHDP_CURSOR,       12 ,   L_DATAPOINT_LINK    , 255); 
      DBMS_SQL.DEFINE_COLUMN(P_CHDP_CURSOR,       13 ,   L_Z_VALUE_F              ); 
      DBMS_SQL.DEFINE_COLUMN(P_CHDP_CURSOR,       14 ,   L_Z_VALUE_S         , 40 ); 
      DBMS_SQL.DEFINE_COLUMN(P_CHDP_CURSOR,       15 ,   L_DATAPOINT_RANGE        );  
      DBMS_SQL.DEFINE_COLUMN(P_CHDP_CURSOR,       16 ,   L_SQC_AVG                );  
      DBMS_SQL.DEFINE_COLUMN(P_CHDP_CURSOR,       17 ,   L_SQC_AVG_RANGE          );    
      DBMS_SQL.DEFINE_COLUMN(P_CHDP_CURSOR,       18 ,   L_SQC_STD_DEV            );  
      DBMS_SQL.DEFINE_COLUMN(P_CHDP_CURSOR,       19 ,   L_SQC_STD_DEV_RANGE      );     
      DBMS_SQL.DEFINE_COLUMN(P_CHDP_CURSOR,       20 ,   L_SPEC1                  );  
      DBMS_SQL.DEFINE_COLUMN(P_CHDP_CURSOR,       21 ,   L_SPEC2                  );  
      DBMS_SQL.DEFINE_COLUMN(P_CHDP_CURSOR,       22 ,   L_SPEC3                  );    
      DBMS_SQL.DEFINE_COLUMN(P_CHDP_CURSOR,       23 ,   L_SPEC4                  );  
      DBMS_SQL.DEFINE_COLUMN(P_CHDP_CURSOR,       24 ,   L_SPEC5                  );     
      DBMS_SQL.DEFINE_COLUMN(P_CHDP_CURSOR,       25 ,   L_SPEC6                  );     
      DBMS_SQL.DEFINE_COLUMN(P_CHDP_CURSOR,       26 ,   L_SPEC7                  );     
      DBMS_SQL.DEFINE_COLUMN(P_CHDP_CURSOR,       27 ,   L_SPEC8                  );     
      DBMS_SQL.DEFINE_COLUMN(P_CHDP_CURSOR,       28 ,   L_SPEC9                  );     
      DBMS_SQL.DEFINE_COLUMN(P_CHDP_CURSOR,       29 ,   L_SPEC10                 );     
      DBMS_SQL.DEFINE_COLUMN(P_CHDP_CURSOR,       30 ,   L_SPEC11                 );     
      DBMS_SQL.DEFINE_COLUMN(P_CHDP_CURSOR,       31 ,   L_SPEC12                 );     
      DBMS_SQL.DEFINE_COLUMN(P_CHDP_CURSOR,       32 ,   L_SPEC13                 );     
      DBMS_SQL.DEFINE_COLUMN(P_CHDP_CURSOR,       33 ,   L_SPEC14                 );     
      DBMS_SQL.DEFINE_COLUMN(P_CHDP_CURSOR,       34 ,   L_SPEC15                 );     
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_CHDP_CURSOR , 35 ,   L_ACTIVE            , 1  );   
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_CHDP_CURSOR , 36 ,   L_RULE1_VIOLATED    , 1  );   
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_CHDP_CURSOR , 37 ,   L_RULE2_VIOLATED    , 1  );   
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_CHDP_CURSOR , 38 ,   L_RULE3_VIOLATED    , 1  );   
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_CHDP_CURSOR , 39 ,   L_RULE4_VIOLATED    , 1  );   
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_CHDP_CURSOR , 40 ,   L_RULE5_VIOLATED    , 1  );   
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_CHDP_CURSOR , 41 ,   L_RULE6_VIOLATED    , 1  );   
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_CHDP_CURSOR , 42 ,   L_RULE7_VIOLATED    , 1  );   
      L_RESULT := DBMS_SQL.EXECUTE(P_CHDP_CURSOR);
   END IF;
   
   L_RESULT := DBMS_SQL.FETCH_ROWS(P_CHDP_CURSOR);
   L_FETCHED_ROWS := 0;
     
   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;
      DBMS_SQL.COLUMN_VALUE(P_CHDP_CURSOR,       1 ,      L_CH                 );
      DBMS_SQL.COLUMN_VALUE(P_CHDP_CURSOR,       2 ,      L_DATAPOINT_SEQ      );
      DBMS_SQL.COLUMN_VALUE(P_CHDP_CURSOR,       3 ,      L_MEASURE_SEQ        );
      DBMS_SQL.COLUMN_VALUE(P_CHDP_CURSOR,       4 ,      L_X_VALUE_F          );
      DBMS_SQL.COLUMN_VALUE(P_CHDP_CURSOR,       5 ,      L_X_VALUE_S          );
      DBMS_SQL.COLUMN_VALUE(P_CHDP_CURSOR,       6 ,      L_X_VALUE_D          );
      DBMS_SQL.COLUMN_VALUE(P_CHDP_CURSOR,       7 ,      L_DATAPOINT_VALUE_F  );
      DBMS_SQL.COLUMN_VALUE(P_CHDP_CURSOR,       8 ,      L_DATAPOINT_VALUE_S  );
      DBMS_SQL.COLUMN_VALUE(P_CHDP_CURSOR,       9 ,      L_DATAPOINT_LABEL    );
      DBMS_SQL.COLUMN_VALUE(P_CHDP_CURSOR,       10 ,     L_DATAPOINT_MARKER   );
      DBMS_SQL.COLUMN_VALUE(P_CHDP_CURSOR,       11 ,     L_DATAPOINT_COLOUR   );
      DBMS_SQL.COLUMN_VALUE(P_CHDP_CURSOR,       12 ,     L_DATAPOINT_LINK     );
      DBMS_SQL.COLUMN_VALUE(P_CHDP_CURSOR,       13 ,     L_Z_VALUE_F          );
      DBMS_SQL.COLUMN_VALUE(P_CHDP_CURSOR,       14 ,     L_Z_VALUE_S          );
      DBMS_SQL.COLUMN_VALUE(P_CHDP_CURSOR,       15 ,     L_DATAPOINT_RANGE    );
      DBMS_SQL.COLUMN_VALUE(P_CHDP_CURSOR,       16 ,     L_SQC_AVG            );
      DBMS_SQL.COLUMN_VALUE(P_CHDP_CURSOR,       17 ,     L_SQC_AVG_RANGE      );
      DBMS_SQL.COLUMN_VALUE(P_CHDP_CURSOR,       18 ,     L_SQC_STD_DEV        );
      DBMS_SQL.COLUMN_VALUE(P_CHDP_CURSOR,       19 ,     L_SQC_STD_DEV_RANGE  );
      DBMS_SQL.COLUMN_VALUE(P_CHDP_CURSOR,       20 ,     L_SPEC1              );  
      DBMS_SQL.COLUMN_VALUE(P_CHDP_CURSOR,       21 ,     L_SPEC2              );  
      DBMS_SQL.COLUMN_VALUE(P_CHDP_CURSOR,       22 ,     L_SPEC3              );    
      DBMS_SQL.COLUMN_VALUE(P_CHDP_CURSOR,       23 ,     L_SPEC4              );  
      DBMS_SQL.COLUMN_VALUE(P_CHDP_CURSOR,       24 ,     L_SPEC5              );     
      DBMS_SQL.COLUMN_VALUE(P_CHDP_CURSOR,       25 ,     L_SPEC6              );     
      DBMS_SQL.COLUMN_VALUE(P_CHDP_CURSOR,       26 ,     L_SPEC7              );     
      DBMS_SQL.COLUMN_VALUE(P_CHDP_CURSOR,       27 ,     L_SPEC8              );     
      DBMS_SQL.COLUMN_VALUE(P_CHDP_CURSOR,       28 ,     L_SPEC9              );     
      DBMS_SQL.COLUMN_VALUE(P_CHDP_CURSOR,       29 ,     L_SPEC10             );     
      DBMS_SQL.COLUMN_VALUE(P_CHDP_CURSOR,       30 ,     L_SPEC11             );     
      DBMS_SQL.COLUMN_VALUE(P_CHDP_CURSOR,       31 ,     L_SPEC12             );     
      DBMS_SQL.COLUMN_VALUE(P_CHDP_CURSOR,       32 ,     L_SPEC13             );     
      DBMS_SQL.COLUMN_VALUE(P_CHDP_CURSOR,       33 ,     L_SPEC14             );     
      DBMS_SQL.COLUMN_VALUE(P_CHDP_CURSOR,       34 ,     L_SPEC15             );     
      DBMS_SQL.COLUMN_VALUE_CHAR(P_CHDP_CURSOR , 35 ,     L_ACTIVE             );
      DBMS_SQL.COLUMN_VALUE_CHAR(P_CHDP_CURSOR , 36 ,     L_RULE1_VIOLATED     );
      DBMS_SQL.COLUMN_VALUE_CHAR(P_CHDP_CURSOR , 37 ,     L_RULE2_VIOLATED     );
      DBMS_SQL.COLUMN_VALUE_CHAR(P_CHDP_CURSOR , 38 ,     L_RULE3_VIOLATED     );
      DBMS_SQL.COLUMN_VALUE_CHAR(P_CHDP_CURSOR , 39 ,     L_RULE4_VIOLATED     );
      DBMS_SQL.COLUMN_VALUE_CHAR(P_CHDP_CURSOR , 40 ,     L_RULE5_VIOLATED     );
      DBMS_SQL.COLUMN_VALUE_CHAR(P_CHDP_CURSOR , 41 ,     L_RULE6_VIOLATED     );
      DBMS_SQL.COLUMN_VALUE_CHAR(P_CHDP_CURSOR , 42 ,     L_RULE7_VIOLATED     );

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      
      A_CH                   (L_FETCHED_ROWS) := L_CH                 ;
      A_DATAPOINT_SEQ        (L_FETCHED_ROWS) := L_DATAPOINT_SEQ      ;
      A_MEASURE_SEQ          (L_FETCHED_ROWS) := L_MEASURE_SEQ        ;
      A_X_VALUE_F            (L_FETCHED_ROWS) := L_X_VALUE_F          ;
      A_X_VALUE_S            (L_FETCHED_ROWS) := L_X_VALUE_S          ;
      A_X_VALUE_D            (L_FETCHED_ROWS) := L_X_VALUE_D          ;
      A_DATAPOINT_VALUE_F    (L_FETCHED_ROWS) := L_DATAPOINT_VALUE_F  ;
      A_DATAPOINT_VALUE_S    (L_FETCHED_ROWS) := L_DATAPOINT_VALUE_S  ;
      A_DATAPOINT_LABEL      (L_FETCHED_ROWS) := L_DATAPOINT_LABEL    ;
      A_DATAPOINT_MARKER     (L_FETCHED_ROWS) := L_DATAPOINT_MARKER   ;
      A_DATAPOINT_COLOUR     (L_FETCHED_ROWS) := L_DATAPOINT_COLOUR   ;
      A_DATAPOINT_LINK       (L_FETCHED_ROWS) := L_DATAPOINT_LINK     ;
      A_Z_VALUE_F            (L_FETCHED_ROWS) := L_Z_VALUE_F          ;
      A_Z_VALUE_S            (L_FETCHED_ROWS) := L_Z_VALUE_S          ;
      A_DATAPOINT_RANGE      (L_FETCHED_ROWS) := L_DATAPOINT_RANGE    ;
      A_SQC_AVG              (L_FETCHED_ROWS) := L_SQC_AVG            ;
      A_SQC_AVG_RANGE        (L_FETCHED_ROWS) := L_SQC_AVG_RANGE      ;
      A_SQC_STD_DEV          (L_FETCHED_ROWS) := L_SQC_STD_DEV        ;
      A_SQC_STD_DEV_RANGE    (L_FETCHED_ROWS) := L_SQC_STD_DEV_RANGE  ;
      A_SPEC1                (L_FETCHED_ROWS) := L_SPEC1              ;
      A_SPEC2                (L_FETCHED_ROWS) := L_SPEC2              ;
      A_SPEC3                (L_FETCHED_ROWS) := L_SPEC3              ;
      A_SPEC4                (L_FETCHED_ROWS) := L_SPEC4              ;
      A_SPEC5                (L_FETCHED_ROWS) := L_SPEC5              ;
      A_SPEC6                (L_FETCHED_ROWS) := L_SPEC6              ;
      A_SPEC7                (L_FETCHED_ROWS) := L_SPEC7              ;
      A_SPEC8                (L_FETCHED_ROWS) := L_SPEC8              ;
      A_SPEC9                (L_FETCHED_ROWS) := L_SPEC9              ;
      A_SPEC10               (L_FETCHED_ROWS) := L_SPEC10             ;
      A_SPEC11               (L_FETCHED_ROWS) := L_SPEC11             ;
      A_SPEC12               (L_FETCHED_ROWS) := L_SPEC12             ;
      A_SPEC13               (L_FETCHED_ROWS) := L_SPEC13             ;
      A_SPEC14               (L_FETCHED_ROWS) := L_SPEC14             ;
      A_SPEC15               (L_FETCHED_ROWS) := L_SPEC15             ;
      A_ACTIVE               (L_FETCHED_ROWS) := L_ACTIVE             ;
      A_RULE1_VIOLATED       (L_FETCHED_ROWS) := L_RULE1_VIOLATED     ;
      A_RULE2_VIOLATED       (L_FETCHED_ROWS) := L_RULE2_VIOLATED     ;
      A_RULE3_VIOLATED       (L_FETCHED_ROWS) := L_RULE3_VIOLATED     ;
      A_RULE4_VIOLATED       (L_FETCHED_ROWS) := L_RULE4_VIOLATED     ;
      A_RULE5_VIOLATED       (L_FETCHED_ROWS) := L_RULE5_VIOLATED     ;
      A_RULE6_VIOLATED       (L_FETCHED_ROWS) := L_RULE6_VIOLATED     ;
      A_RULE7_VIOLATED       (L_FETCHED_ROWS) := L_RULE7_VIOLATED     ;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_CHDP_CURSOR);
      END IF;
   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
      DBMS_SQL.CLOSE_CURSOR(P_CHDP_CURSOR);
      
      
      
      FOR L_X IN 1..1 LOOP
         A_CH                   (L_X) := '********************';
         A_DATAPOINT_SEQ        (L_X) := 1;
         A_MEASURE_SEQ          (L_X) := 1;
         A_X_VALUE_F            (L_X) := 1;
         A_X_VALUE_S            (L_X) := '********************';
         A_X_VALUE_D            (L_X) := CURRENT_TIMESTAMP;
         A_DATAPOINT_VALUE_F    (L_X) := 1;
         A_DATAPOINT_VALUE_S    (L_X) := '********************';
         A_DATAPOINT_LABEL      (L_X) := '********************';
         A_DATAPOINT_MARKER     (L_X) := '********************';
         A_DATAPOINT_COLOUR     (L_X) := '********************';
         A_DATAPOINT_LINK       (L_X) := '********************';
         A_Z_VALUE_F            (L_X) := 1;
         A_Z_VALUE_S            (L_X) := '********************';
         A_DATAPOINT_RANGE      (L_X) := 1;
         A_SQC_AVG              (L_X) := 1;
         A_SQC_AVG_RANGE        (L_X) := 1;
         A_SQC_STD_DEV          (L_X) := 1;
         A_SQC_STD_DEV_RANGE    (L_X) := 1;
         A_SPEC1                (L_X) := 1;
         A_SPEC2                (L_X) := 1;
         A_SPEC3                (L_X) := 1;
         A_SPEC4                (L_X) := 1;
         A_SPEC5                (L_X) := 1;
         A_SPEC6                (L_X) := 1;
         A_SPEC7                (L_X) := 1;
         A_SPEC8                (L_X) := 1;
         A_SPEC9                (L_X) := 1;
         A_SPEC10               (L_X) := 1;
         A_SPEC11               (L_X) := 1;
         A_SPEC12               (L_X) := 1;
         A_SPEC13               (L_X) := 1;
         A_SPEC14               (L_X) := 1;
         A_SPEC15               (L_X) := 1;
         A_ACTIVE               (L_X) := '0';
         A_RULE1_VIOLATED       (L_X) := '0';
         A_RULE2_VIOLATED       (L_X) := '0';
         A_RULE3_VIOLATED       (L_X) := '0';
         A_RULE4_VIOLATED       (L_X) := '0';
         A_RULE5_VIOLATED       (L_X) := '0';
         A_RULE6_VIOLATED       (L_X) := '0';
         A_RULE7_VIOLATED       (L_X) := '0';          
      END LOOP;
      A_NR_OF_ROWS  := 0;
      RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_CHDP_CURSOR);
      A_NR_OF_ROWS  := L_FETCHED_ROWS;
   END IF;   
   RETURN(UNAPIGEN.DBERR_SUCCESS);  
   
EXCEPTION
WHEN OTHERS THEN
  L_SQLERRM := SQLERRM;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
           'GetChDatapoint', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   IF DBMS_SQL.IS_OPEN (P_CHDP_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (P_CHDP_CURSOR);
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETCHDATAPOINT;

FUNCTION SAVECHDATAPOINT
(A_CH                   IN      UNAPIGEN.VC20_TABLE_TYPE,     
 A_DATAPOINT_SEQ        IN      UNAPIGEN.NUM_TABLE_TYPE,   
 A_MEASURE_SEQ          IN      UNAPIGEN.NUM_TABLE_TYPE,   
 A_X_VALUE_F            IN      UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_X_VALUE_S            IN      UNAPIGEN.VC40_TABLE_TYPE,    
 A_X_VALUE_D            IN      UNAPIGEN.DATE_TABLE_TYPE,  
 A_DATAPOINT_VALUE_F    IN      UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_DATAPOINT_VALUE_S    IN      UNAPIGEN.VC40_TABLE_TYPE,    
 A_DATAPOINT_LABEL      IN      UNAPIGEN.VC255_TABLE_TYPE,    
 A_DATAPOINT_MARKER     IN      UNAPIGEN.VC20_TABLE_TYPE,     
 A_DATAPOINT_COLOUR     IN      UNAPIGEN.VC20_TABLE_TYPE,       
 A_DATAPOINT_LINK       IN      UNAPIGEN.VC255_TABLE_TYPE,    
 A_Z_VALUE_F            IN      UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_Z_VALUE_S            IN      UNAPIGEN.VC40_TABLE_TYPE,     
 A_DATAPOINT_RANGE      IN      UNAPIGEN.NUM_TABLE_TYPE,   
 A_SQC_AVG              IN      UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SQC_AVG_RANGE        IN      UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SQC_STD_DEV          IN      UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SQC_STD_DEV_RANGE    IN      UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC1                IN      UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC2                IN      UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC3                IN      UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC4                IN      UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC5                IN      UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC6                IN      UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC7                IN      UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC8                IN      UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC9                IN      UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC10               IN      UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC11               IN      UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC12               IN      UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC13               IN      UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC14               IN      UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC15               IN      UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_ACTIVE               IN      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NR_OF_ROWS           IN      NUMBER,                    
 A_MODIFY_REASON        IN      VARCHAR2)                  
RETURN NUMBER IS
L_RULE1_VIOLATED_TAB         UNAPIGEN.CHAR1_TABLE_TYPE;
L_RULE2_VIOLATED_TAB         UNAPIGEN.CHAR1_TABLE_TYPE;
L_RULE3_VIOLATED_TAB         UNAPIGEN.CHAR1_TABLE_TYPE;
L_RULE4_VIOLATED_TAB         UNAPIGEN.CHAR1_TABLE_TYPE;
L_RULE5_VIOLATED_TAB         UNAPIGEN.CHAR1_TABLE_TYPE;
L_RULE6_VIOLATED_TAB         UNAPIGEN.CHAR1_TABLE_TYPE;
L_RULE7_VIOLATED_TAB         UNAPIGEN.CHAR1_TABLE_TYPE;
BEGIN
FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
   L_RULE1_VIOLATED_TAB(L_SEQ_NO) := NULL;
   L_RULE2_VIOLATED_TAB(L_SEQ_NO) := NULL;
   L_RULE3_VIOLATED_TAB(L_SEQ_NO) := NULL;
   L_RULE4_VIOLATED_TAB(L_SEQ_NO) := NULL;
   L_RULE5_VIOLATED_TAB(L_SEQ_NO) := NULL;
   L_RULE6_VIOLATED_TAB(L_SEQ_NO) := NULL;
   L_RULE7_VIOLATED_TAB(L_SEQ_NO) := NULL;
END LOOP;
RETURN(UNAPICH.SAVECHDATAPOINT
                (A_CH,
                 A_DATAPOINT_SEQ,
                 A_MEASURE_SEQ,
                 A_X_VALUE_F,
                 A_X_VALUE_S,
                 A_X_VALUE_D,
                 A_DATAPOINT_VALUE_F,
                 A_DATAPOINT_VALUE_S,
                 A_DATAPOINT_LABEL,
                 A_DATAPOINT_MARKER,
                 A_DATAPOINT_COLOUR,
                 A_DATAPOINT_LINK,
                 A_Z_VALUE_F,
                 A_Z_VALUE_S,
                 A_DATAPOINT_RANGE,
                 A_SQC_AVG,
                 A_SQC_AVG_RANGE,
                 A_SQC_STD_DEV,
                 A_SQC_STD_DEV_RANGE,
                 A_SPEC1,
                 A_SPEC2,
                 A_SPEC3,
                 A_SPEC4,
                 A_SPEC5,
                 A_SPEC6,
                 A_SPEC7,
                 A_SPEC8,
                 A_SPEC9,
                 A_SPEC10,
                 A_SPEC11,
                 A_SPEC12,
                 A_SPEC13,
                 A_SPEC14,
                 A_SPEC15,
                 A_ACTIVE,
                 L_RULE1_VIOLATED_TAB,
                 L_RULE2_VIOLATED_TAB,
                 L_RULE3_VIOLATED_TAB,
                 L_RULE4_VIOLATED_TAB,
                 L_RULE5_VIOLATED_TAB,
                 L_RULE6_VIOLATED_TAB,
                 L_RULE7_VIOLATED_TAB,
                 A_NR_OF_ROWS,
                 A_MODIFY_REASON));
END SAVECHDATAPOINT;

FUNCTION SAVECHDATAPOINT
(A_CH                   IN      UNAPIGEN.VC20_TABLE_TYPE,     
 A_DATAPOINT_SEQ        IN      UNAPIGEN.NUM_TABLE_TYPE,   
 A_MEASURE_SEQ          IN      UNAPIGEN.NUM_TABLE_TYPE,   
 A_X_VALUE_F            IN      UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_X_VALUE_S            IN      UNAPIGEN.VC40_TABLE_TYPE,    
 A_X_VALUE_D            IN      UNAPIGEN.DATE_TABLE_TYPE,  
 A_DATAPOINT_VALUE_F    IN      UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_DATAPOINT_VALUE_S    IN      UNAPIGEN.VC40_TABLE_TYPE,    
 A_DATAPOINT_LABEL      IN      UNAPIGEN.VC255_TABLE_TYPE,    
 A_DATAPOINT_MARKER     IN      UNAPIGEN.VC20_TABLE_TYPE,     
 A_DATAPOINT_COLOUR     IN      UNAPIGEN.VC20_TABLE_TYPE,       
 A_DATAPOINT_LINK       IN      UNAPIGEN.VC255_TABLE_TYPE,    
 A_Z_VALUE_F            IN      UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_Z_VALUE_S            IN      UNAPIGEN.VC40_TABLE_TYPE,     
 A_DATAPOINT_RANGE      IN      UNAPIGEN.NUM_TABLE_TYPE,   
 A_SQC_AVG              IN      UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SQC_AVG_RANGE        IN      UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SQC_STD_DEV          IN      UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SQC_STD_DEV_RANGE    IN      UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC1                IN      UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC2                IN      UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC3                IN      UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC4                IN      UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC5                IN      UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC6                IN      UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC7                IN      UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC8                IN      UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC9                IN      UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC10               IN      UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC11               IN      UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC12               IN      UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC13               IN      UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC14               IN      UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SPEC15               IN      UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_ACTIVE               IN      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_RULE1_VIOLATED       IN      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_RULE2_VIOLATED       IN      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_RULE3_VIOLATED       IN      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_RULE4_VIOLATED       IN      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_RULE5_VIOLATED       IN      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_RULE6_VIOLATED       IN      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_RULE7_VIOLATED       IN      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NR_OF_ROWS           IN      NUMBER,                    
 A_MODIFY_REASON        IN      VARCHAR2)                  
RETURN NUMBER IS
L_LC                   VARCHAR2(2);
L_LC_VERSION           VARCHAR2(20);
L_SS                   VARCHAR2(2);
L_LOG_HS               CHAR(1);
L_LOG_HS_DETAILS       CHAR(1);
L_ALLOW_MODIFY         CHAR(1);
L_ACTIVE               CHAR(1);
L_INSERT               BOOLEAN;

L_CH_TEMP              VARCHAR2(20);
L_CY                   VARCHAR2(20);
L_CY_VERSION           VARCHAR2(20);

L_NO_CHART             BOOLEAN;
L_ERROR                EXCEPTION;
L_CH_CURSOR            INTEGER;
L_HS_DETAILS_SEQ_NR    INTEGER;


CURSOR C_CH( C_CH IN VARCHAR2) IS
SELECT CH, CY, CY_VERSION FROM UTCH WHERE
   CH = C_CH;

CURSOR C_CHDATAPOINT( C_CH IN VARCHAR2, C_DATAPOINT_SEQ IN NUMBER, C_MEASURE_SEQ IN NUMBER) IS
   SELECT * 
   FROM UTCHDP 
   WHERE CH = C_CH 
   AND DATAPOINT_SEQ = C_DATAPOINT_SEQ
   AND MEASURE_SEQ = C_MEASURE_SEQ;
L_CHDPOLD_REC UTCHDP%ROWTYPE;
L_CHDPNEW_REC UTCHDP%ROWTYPE;
         
BEGIN
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE L_ERROR;
   END IF;
   L_NO_CHART := FALSE; 
   L_HS_DETAILS_SEQ_NR := 0;
 
   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      IF NVL(A_CH(L_SEQ_NO), ' ') = ' ' THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
            RAISE  L_ERROR;
      END IF;
      
      OPEN C_CH (A_CH(L_SEQ_NO));
      FETCH C_CH INTO L_CH_TEMP, L_CY, L_CY_VERSION;
      IF C_CH%NOTFOUND THEN
           L_NO_CHART :=  TRUE ;
      END IF;
      CLOSE C_CH;
     
   
      IF L_NO_CHART =  TRUE THEN
           UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
           RAISE  STPERROR ;     
      END IF;
      L_RET_CODE := UNAPIAUT.GETCHAUTHORISATION( A_CH(L_SEQ_NO), L_CY_VERSION, L_LC, L_LC_VERSION, L_SS,
                                                L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS, L_LOG_HS_DETAILS);

      IF L_RET_CODE = UNAPIGEN.DBERR_NOOBJECT THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
         RAISE  STPERROR ;
      ELSIF L_RET_CODE = UNAPIGEN.DBERR_SUCCESS THEN
         NULL;
      ELSE
         UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
         RAISE L_ERROR;
      END IF;
      
      OPEN C_CHDATAPOINT (A_CH(L_SEQ_NO), A_DATAPOINT_SEQ(L_SEQ_NO), A_MEASURE_SEQ(L_SEQ_NO));
      FETCH C_CHDATAPOINT 
      INTO L_CHDPOLD_REC;
      L_CHDPNEW_REC := L_CHDPOLD_REC;
      IF C_CHDATAPOINT%NOTFOUND THEN
           L_INSERT := TRUE;
      ELSE
           L_INSERT := FALSE;
      END IF;
      CLOSE C_CHDATAPOINT;
       
      IF L_INSERT = TRUE THEN              
       INSERT INTO UTCHDP (CH, DATAPOINT_SEQ, MEASURE_SEQ, X_VALUE_F, X_VALUE_S, X_VALUE_D, X_VALUE_D_TZ, DATAPOINT_VALUE_F, 
           DATAPOINT_VALUE_S, DATAPOINT_LABEL, DATAPOINT_MARKER, DATAPOINT_COLOUR, DATAPOINT_LINK, Z_VALUE_F, Z_VALUE_S, 
           DATAPOINT_RANGE, SQC_AVG, SQC_AVG_RANGE, SQC_STD_DEV, SQC_STD_DEV_RANGE, ACTIVE,
           RULE1_VIOLATED, RULE2_VIOLATED, RULE3_VIOLATED, RULE4_VIOLATED, RULE5_VIOLATED, RULE6_VIOLATED, RULE7_VIOLATED)
        VALUES ( A_CH(L_SEQ_NO), A_DATAPOINT_SEQ(L_SEQ_NO), A_MEASURE_SEQ(L_SEQ_NO), A_X_VALUE_F(L_SEQ_NO),
           A_X_VALUE_S(L_SEQ_NO), A_X_VALUE_D(L_SEQ_NO), A_X_VALUE_D(L_SEQ_NO), A_DATAPOINT_VALUE_F(L_SEQ_NO), A_DATAPOINT_VALUE_S(L_SEQ_NO),
           A_DATAPOINT_LABEL(L_SEQ_NO), A_DATAPOINT_MARKER(L_SEQ_NO), A_DATAPOINT_COLOUR(L_SEQ_NO), 
           A_DATAPOINT_LINK(L_SEQ_NO), A_Z_VALUE_F(L_SEQ_NO), A_Z_VALUE_S(L_SEQ_NO), A_DATAPOINT_RANGE(L_SEQ_NO),
           A_SQC_AVG(L_SEQ_NO), A_SQC_AVG_RANGE(L_SEQ_NO), A_SQC_STD_DEV(L_SEQ_NO), A_SQC_STD_DEV_RANGE(L_SEQ_NO), 
           A_ACTIVE(L_SEQ_NO),
           A_RULE1_VIOLATED(L_SEQ_NO), A_RULE2_VIOLATED(L_SEQ_NO), A_RULE3_VIOLATED(L_SEQ_NO), A_RULE4_VIOLATED(L_SEQ_NO), A_RULE5_VIOLATED(L_SEQ_NO), A_RULE6_VIOLATED(L_SEQ_NO), A_RULE7_VIOLATED(L_SEQ_NO));
           
        L_EVENT_TP := 'ChartDatapointCreated';
      ELSE                                   
        UPDATE UTCHDP
        SET 
            CH                 = A_CH(L_SEQ_NO)               ,
            DATAPOINT_SEQ      = A_DATAPOINT_SEQ(L_SEQ_NO)    ,
            MEASURE_SEQ        = A_MEASURE_SEQ(L_SEQ_NO)      ,
            X_VALUE_F          = A_X_VALUE_F(L_SEQ_NO)        ,
            X_VALUE_S          = A_X_VALUE_S(L_SEQ_NO)        ,
            X_VALUE_D          = A_X_VALUE_D(L_SEQ_NO)        ,
            X_VALUE_D_TZ       = DECODE(A_X_VALUE_D(L_SEQ_NO), X_VALUE_D_TZ, X_VALUE_D_TZ, A_X_VALUE_D(L_SEQ_NO))        ,
            DATAPOINT_VALUE_F  = A_DATAPOINT_VALUE_F(L_SEQ_NO),
            DATAPOINT_VALUE_S  = A_DATAPOINT_VALUE_S(L_SEQ_NO),
            DATAPOINT_LABEL    = A_DATAPOINT_LABEL(L_SEQ_NO)  ,
            DATAPOINT_MARKER   = A_DATAPOINT_MARKER(L_SEQ_NO) ,
            DATAPOINT_COLOUR   = A_DATAPOINT_COLOUR(L_SEQ_NO) ,
            DATAPOINT_LINK     = A_DATAPOINT_LINK(L_SEQ_NO)   ,
            Z_VALUE_F          = A_Z_VALUE_F(L_SEQ_NO)        ,
            Z_VALUE_S          = A_Z_VALUE_S(L_SEQ_NO)        ,
            DATAPOINT_RANGE    = A_DATAPOINT_RANGE(L_SEQ_NO)  ,
            SQC_AVG            = A_SQC_AVG(L_SEQ_NO)          ,
            SQC_AVG_RANGE      = A_SQC_AVG_RANGE(L_SEQ_NO)    ,
            SQC_STD_DEV        = A_SQC_STD_DEV(L_SEQ_NO)      ,
            SQC_STD_DEV_RANGE  = A_SQC_STD_DEV_RANGE(L_SEQ_NO),
            ACTIVE             = A_ACTIVE(L_SEQ_NO),
            RULE1_VIOLATED     = A_RULE1_VIOLATED(L_SEQ_NO),
            RULE2_VIOLATED     = A_RULE2_VIOLATED(L_SEQ_NO),
            RULE3_VIOLATED     = A_RULE3_VIOLATED(L_SEQ_NO),
            RULE4_VIOLATED     = A_RULE4_VIOLATED(L_SEQ_NO),
            RULE5_VIOLATED     = A_RULE5_VIOLATED(L_SEQ_NO),
            RULE6_VIOLATED     = A_RULE6_VIOLATED(L_SEQ_NO),
            RULE7_VIOLATED     = A_RULE7_VIOLATED(L_SEQ_NO)
        WHERE 
            CH             = A_CH(L_SEQ_NO)              AND
            DATAPOINT_SEQ  = A_DATAPOINT_SEQ(L_SEQ_NO)   AND
            MEASURE_SEQ    = A_MEASURE_SEQ(L_SEQ_NO) 
        RETURNING CH, DATAPOINT_SEQ, MEASURE_SEQ,
                  X_VALUE_F, X_VALUE_S, X_VALUE_D,
                  DATAPOINT_VALUE_F, DATAPOINT_VALUE_S, DATAPOINT_LABEL,
                  DATAPOINT_MARKER, DATAPOINT_COLOUR, DATAPOINT_LINK,
                  Z_VALUE_F, Z_VALUE_S, DATAPOINT_RANGE,
                  SQC_AVG, SQC_AVG_RANGE, SQC_STD_DEV,
                  SQC_STD_DEV_RANGE, ACTIVE,
                  RULE1_VIOLATED, RULE2_VIOLATED, RULE3_VIOLATED, RULE4_VIOLATED, 
                  RULE5_VIOLATED, RULE6_VIOLATED, RULE7_VIOLATED
        INTO L_CHDPNEW_REC.CH, L_CHDPNEW_REC.DATAPOINT_SEQ, L_CHDPNEW_REC.MEASURE_SEQ, 
             L_CHDPNEW_REC.X_VALUE_F, L_CHDPNEW_REC.X_VALUE_S, L_CHDPNEW_REC.X_VALUE_D,
             L_CHDPNEW_REC.DATAPOINT_VALUE_F, L_CHDPNEW_REC.DATAPOINT_VALUE_S, L_CHDPNEW_REC.DATAPOINT_LABEL,
             L_CHDPNEW_REC.DATAPOINT_MARKER, L_CHDPNEW_REC.DATAPOINT_COLOUR, L_CHDPNEW_REC.DATAPOINT_LINK,
             L_CHDPNEW_REC.Z_VALUE_F, L_CHDPNEW_REC.Z_VALUE_S, L_CHDPNEW_REC.DATAPOINT_RANGE, 
             L_CHDPNEW_REC.SQC_AVG, L_CHDPNEW_REC.SQC_AVG_RANGE, L_CHDPNEW_REC.SQC_STD_DEV, 
             L_CHDPNEW_REC.SQC_STD_DEV_RANGE, L_CHDPNEW_REC.ACTIVE,
             L_CHDPNEW_REC.RULE1_VIOLATED, L_CHDPNEW_REC.RULE2_VIOLATED, L_CHDPNEW_REC.RULE3_VIOLATED, L_CHDPNEW_REC.RULE4_VIOLATED, 
             L_CHDPNEW_REC.RULE5_VIOLATED, L_CHDPNEW_REC.RULE6_VIOLATED, L_CHDPNEW_REC.RULE7_VIOLATED;            
            L_EVENT_TP := 'ChartDatapointUpdated';    
      END IF;
      
      L_EV_SEQ_NR := -1;
      L_EV_DETAILS := 'ch=' || A_CH(L_SEQ_NO) ||'#datapoint_seq=' || A_DATAPOINT_SEQ(L_SEQ_NO) ||
                      '#measure_seq=' || A_MEASURE_SEQ(L_SEQ_NO) ||
                      '#cy_version=' || L_CY_VERSION;
      L_RET_CODE := UNAPIEV.INSERTEVENT('SaveChartDatapoint',UNAPIGEN.P_EVMGR_NAME, 'ch', A_CH(L_SEQ_NO),
                                        L_LC, L_LC_VERSION, L_SS, L_EVENT_TP, L_EV_DETAILS,
                                        L_EV_SEQ_NR);

      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
         UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
         RAISE  L_ERROR ;
      END IF;

      
      IF NVL(L_LOG_HS, ' ') = '1' THEN
         IF L_EVENT_TP = 'ChartDatapointCreated'  THEN
            INSERT INTO UTCHHS (CH,  WHO, WHO_DESCRIPTION, WHAT, 
                                WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
            VALUES (A_CH(L_SEQ_NO), UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                    'chart datapoint <'||A_CH(L_SEQ_NO)||' ; '|| A_DATAPOINT_SEQ(L_SEQ_NO) ||' ; '|| 
                    A_MEASURE_SEQ(L_SEQ_NO)||'> is created.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                    L_EV_SEQ_NR);
         ELSE
            INSERT INTO UTCHHS (CH,  WHO, WHO_DESCRIPTION, WHAT, 
                                WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
            VALUES (A_CH(L_SEQ_NO), UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                    'chart datapoint <'||A_CH(L_SEQ_NO)||' ; '|| A_DATAPOINT_SEQ(L_SEQ_NO) ||' ; '|| 
                    A_MEASURE_SEQ(L_SEQ_NO)||'>  is updated.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                    L_EV_SEQ_NR);
         END IF;
      END IF;

      
      IF NVL(L_LOG_HS_DETAILS, ' ') = '1' THEN
         IF L_EVENT_TP = 'ChartDatapointCreated'  THEN
            L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
            INSERT INTO UTCHHSDETAILS(CH, TR_SEQ, EV_SEQ, SEQ, DETAILS)
            VALUES(A_CH(L_SEQ_NO), UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR, 
                   'chart datapoint <'||A_CH(L_SEQ_NO)||' ; '|| A_DATAPOINT_SEQ(L_SEQ_NO) ||' ; '|| 
                    A_MEASURE_SEQ(L_SEQ_NO)||'> is created.');
         
         ELSE
            L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
            INSERT INTO UTCHHSDETAILS(CH, TR_SEQ, EV_SEQ, SEQ, DETAILS)
            VALUES(A_CH(L_SEQ_NO), UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR, 
                   'chart datapoint <'||A_CH(L_SEQ_NO)||' ; '|| A_DATAPOINT_SEQ(L_SEQ_NO) ||' ; '|| 
                    A_MEASURE_SEQ(L_SEQ_NO)||'>  is updated.');
            UNAPIHSDETAILS.ADDCHDPHSDETAILS(L_CHDPOLD_REC, L_CHDPNEW_REC, UNAPIGEN.P_TR_SEQ, 
                                            L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR); 

         END IF;
      END IF;
   END LOOP;
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE L_ERROR;
   END IF;
   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveChDatapoint',SQLERRM);
   END IF ;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveChDatapoint'));
END SAVECHDATAPOINT;   

FUNCTION SELECTCHART
(A_COL_ID               IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_TP               IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_VALUE            IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_OPERATOR         IN      UNAPIGEN.VC20_TABLE_TYPE,  
 A_COL_ANDOR            IN      UNAPIGEN.VC3_TABLE_TYPE,   
 A_COL_NR_OF_ROWS       IN      NUMBER,                    
 A_CH                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_CY                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_CY_VERSION           OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_DESCRIPTION          OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_CHART_TITLE          OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_X_AXIS_TITLE         OUT     UNAPIGEN.VC255_TABLE_TYPE,  
 A_Y_AXIS_TITLE         OUT     UNAPIGEN.VC255_TABLE_TYPE,  
 A_Y_AXIS_UNIT          OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_CREATION_DATE        OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_CH_CONTEXT_KEY       OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_DATAPOINT_CNT        OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_DATAPOINT_UNIT       OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_XR_MEASUREMENTS      OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_XR_MAX_CHARTS        OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_SQC_AVG              OUT     UNAPIGEN.FLOAT_TABLE_TYPE,   
 A_SQC_STD_DEV          OUT     UNAPIGEN.FLOAT_TABLE_TYPE,   
 A_SQC_AVG_RANGE        OUT     UNAPIGEN.FLOAT_TABLE_TYPE,   
 A_SQC_STD_DEV_RANGE    OUT     UNAPIGEN.FLOAT_TABLE_TYPE,   
 A_EXEC_START_DATE      OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_EXEC_END_DATE        OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_ASSIGN_CF            OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_CY_CALC_CF           OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_VISUAL_CF            OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_VALID_SQC_RULE1      OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_VALID_SQC_RULE2      OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_VALID_SQC_RULE3      OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_VALID_SQC_RULE4      OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_VALID_SQC_RULE5      OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_VALID_SQC_RULE6      OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_VALID_SQC_RULE7      OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_XR_SERIE_SEQ         OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_CH_CLASS             OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_LOG_HS               OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LOG_HS_DETAILS       OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ALLOW_MODIFY         OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_AR                   OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ACTIVE               OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LC                   OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_LC_VERSION           OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SS                   OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_NR_OF_ROWS           IN OUT  NUMBER,                    
 A_ORDER_BY_CLAUSE      IN      VARCHAR2,                  
 A_NEXT_ROWS            IN      NUMBER)                    
RETURN NUMBER IS

L_CH                             VARCHAR2(20);
L_CY                             VARCHAR2(20);
L_CY_VERSION                     VARCHAR2(20);
L_DESCRIPTION                    VARCHAR2(40);
L_CHART_TITLE                    VARCHAR2(255);
L_X_AXIS_TITLE                   VARCHAR2(255);
L_Y_AXIS_TITLE                   VARCHAR2(255);
L_Y_AXIS_UNIT                    VARCHAR2(20);
L_CREATION_DATE                  TIMESTAMP WITH TIME ZONE;
L_CH_CONTEXT_KEY                 VARCHAR2(255);
L_DATAPOINT_CNT                  NUMBER;
L_DATAPOINT_UNIT                 VARCHAR2(20);
L_XR_MEASUREMENTS                NUMBER;
L_XR_MAX_CHARTS                  NUMBER;
L_SQC_AVG                        NUMBER;
L_SQC_STD_DEV                    NUMBER;
L_SQC_AVG_RANGE                  NUMBER;
L_SQC_STD_DEV_RANGE              NUMBER;
L_EXEC_START_DATE                TIMESTAMP WITH TIME ZONE;
L_EXEC_END_DATE                  TIMESTAMP WITH TIME ZONE;
L_ASSIGN_CF                      VARCHAR2(255);
L_CY_CALC_CF                     VARCHAR2(255);
L_VISUAL_CF                      VARCHAR2(255);
L_VALID_SQC_RULE1                VARCHAR2(255);
L_VALID_SQC_RULE2                VARCHAR2(255);
L_VALID_SQC_RULE3                VARCHAR2(255);
L_VALID_SQC_RULE4                VARCHAR2(255);
L_VALID_SQC_RULE5                VARCHAR2(255);
L_VALID_SQC_RULE6                VARCHAR2(255);
L_VALID_SQC_RULE7                VARCHAR2(255);
L_XR_SERIE_SEQ                   NUMBER;
L_SS                             VARCHAR2(2);
L_LC                             VARCHAR2(2);
L_LC_VERSION                     VARCHAR2(20);
L_CH_CLASS                       VARCHAR2(2);
L_LOG_HS                         CHAR(1);
L_LOG_HS_DETAILS                 CHAR(1);
L_ALLOW_MODIFY                   CHAR(1);
L_AR                             CHAR(1);
L_ACTIVE                         CHAR(1);

L_ORDER_BY_CLAUSE                VARCHAR2(255);
L_FROM_CLAUSE                    VARCHAR2(255);
L_NEXT_CHGK_JOIN                 VARCHAR2(4);
L_NEXT_CH_JOIN                   VARCHAR2(4);
L_COLUMN_HANDLED                 BOOLEAN_TABLE_TYPE;
L_ANYOR_PRESENT                  BOOLEAN;
L_COL_ANDOR                      VARCHAR2(3);
L_PREV_COL_TP                    VARCHAR2(40);
L_PREV_COL_ID                    VARCHAR2(40);
L_PREV_COL_INDEX                 INTEGER;
L_WHERE_CLAUSE4JOIN              VARCHAR2(1000);
L_LENGTH                         INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_SELECTCH_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_SELECTCH_CURSOR);
         P_SELECTCH_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_SELECTCH_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      P_SELECTION_VAL_TAB.DELETE;
      L_SQL_STRING := 'SELECT a.ch, a.cy, a.cy_version, a.description, a.chart_title, a.creation_date, a.ch_context_key, ' ||
         'a.datapoint_cnt, a.datapoint_unit, a.xr_measurements, a.xr_max_charts, a.sqc_avg, sqc_std_dev, a.sqc_avg_range, ' ||
         'a.sqc_std_dev_range, a.exec_start_date, a.exec_end_date, a.assign_cf, a.visual_cf, '||
         'a.valid_sqc_rule1, a.valid_sqc_rule2, a.valid_sqc_rule3, a.valid_sqc_rule4, a.valid_sqc_rule5, a.valid_sqc_rule6, a.valid_sqc_rule7, '||
         'a.xr_serie_seq, a.ss, a.lc, a.lc_version, ' ||
         'a.ch_class, a.log_hs, a.log_hs_details, a.allow_modify, a.ar, a.active, a.cy_calc_cf, a.x_axis_title, a.y_axis_title, a.y_axis_unit ' ||
         ' FROM ';
      
      L_FROM_CLAUSE := 'dd' || UNAPIGEN.P_DD || '.uvch a';

      
      L_WHERE_CLAUSE4JOIN := '';
      L_WHERE_CLAUSE := '';
      L_ANYOR_PRESENT := FALSE;
      FOR I IN 1..A_COL_NR_OF_ROWS LOOP
         L_COLUMN_HANDLED(I) := FALSE;
         IF LTRIM(RTRIM(UPPER(A_COL_ANDOR(I)))) = 'OR' AND
            NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
            L_ANYOR_PRESENT := TRUE;
         END IF;
         
         
         IF I<>1 THEN
            IF NVL(A_COL_TP(I), ' ') = NVL(A_COL_TP(I-1), ' ') AND
               NVL(A_COL_ID(I), ' ') = NVL(A_COL_ID(I-1), ' ') AND
               NVL(A_COL_OPERATOR(I), '=') = '=' AND
               NVL(A_COL_OPERATOR(I-1), '=') = '=' AND
               NVL(A_COL_ANDOR(I-1), 'AND') =  'AND' AND
               (NVL(A_COL_VALUE(I), ' ') <> ' ' OR NVL(A_COL_VALUE(I-1), ' ') <> ' ') THEN
               IF I> 2 AND A_COL_ANDOR(I-2) = 'OR' THEN
                  L_ANYOR_PRESENT := TRUE;
               END IF;
            END IF;
         END IF;         
      END LOOP;

      
      
      

      L_NEXT_CHGK_JOIN := 'a';
      L_NEXT_CH_JOIN := 'a';
      FOR I IN REVERSE 1..A_COL_NR_OF_ROWS LOOP
         IF NVL(LTRIM(A_COL_ID(I)), ' ') = ' ' THEN
            RETURN(UNAPIGEN.DBERR_SELCOLSINVALID);
         END IF;

         
         L_COL_ANDOR := 'AND';
         IF I<>1 THEN
            L_COL_ANDOR := A_COL_ANDOR(I-1);
         END IF;
         IF L_COL_ANDOR IS NULL THEN
            
            L_COL_ANDOR := 'AND';
         END IF;
         IF L_COLUMN_HANDLED(I) = FALSE THEN
            IF NVL(A_COL_TP(I), ' ') = 'chgk' THEN 
               IF NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
                  UNAPIGEN.WHERECLAUSESTRINGBUILDER (A_BASE_TABLE => 'utch', A_INDEX =>I, A_COL_TP => A_COL_TP(I), A_COL_ID => A_COL_ID(I),
                                   A_COL_VALUE => A_COL_VALUE(I), A_COL_OPERATOR => A_COL_OPERATOR(I),
                                   A_COL_ANDOR => L_COL_ANDOR, A_ANYOR_PRESENT => L_ANYOR_PRESENT,
                                   A_JOINTABLE_PREFIX => 'utchgk', A_JOINCOLUMN1 => 'ch', A_JOINCOLUMN2 => '', 
                                   A_PREV_COL_TP => L_PREV_COL_TP, A_PREV_COL_ID => L_PREV_COL_ID, A_PREV_COL_INDEX => L_PREV_COL_INDEX,
                                   A_NEXTTABLE_TOJOIN => L_NEXT_CHGK_JOIN, A_FROM_CLAUSE => L_FROM_CLAUSE,
                                   A_WHERE_CLAUSE4JOIN => L_WHERE_CLAUSE4JOIN, A_WHERE_CLAUSE => L_WHERE_CLAUSE,
                                 A_SQL_VAL_TAB => P_SELECTION_VAL_TAB);                  
               ELSIF INSTR(A_ORDER_BY_CLAUSE, 't'|| TO_CHAR(I)) <> 0 THEN
                  L_FROM_CLAUSE := L_FROM_CLAUSE || ', utchgk' || A_COL_ID(I) || ' t' || I;
                  L_COL_ANDOR := 'AND'; 
                  
                  L_WHERE_CLAUSE4JOIN := L_WHERE_CLAUSE4JOIN ||
                                    't' || I || '.ch(+) = a.ch ' || L_COL_ANDOR || ' ';
               END IF;
               L_COLUMN_HANDLED(I) := TRUE; 
            ELSE
               
               IF NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
                  UNAPIGEN.WHERECLAUSESTRINGBUILDER (A_BASE_TABLE => 'utch', A_INDEX =>I, A_COL_TP => A_COL_TP(I), A_COL_ID => A_COL_ID(I),
                                   A_COL_VALUE => A_COL_VALUE(I), A_COL_OPERATOR => A_COL_OPERATOR(I),
                                   A_COL_ANDOR => L_COL_ANDOR, A_ANYOR_PRESENT => L_ANYOR_PRESENT,
                                   A_JOINTABLE_PREFIX => '', A_JOINCOLUMN1 => '', A_JOINCOLUMN2 => '', 
                                   A_PREV_COL_TP => L_PREV_COL_TP, A_PREV_COL_ID => L_PREV_COL_ID, A_PREV_COL_INDEX => L_PREV_COL_INDEX,
                                   A_NEXTTABLE_TOJOIN => L_NEXT_CH_JOIN, A_FROM_CLAUSE => L_FROM_CLAUSE,
                                   A_WHERE_CLAUSE4JOIN => L_WHERE_CLAUSE4JOIN, A_WHERE_CLAUSE => L_WHERE_CLAUSE,
                                 A_SQL_VAL_TAB => P_SELECTION_VAL_TAB);                  
               END IF;
               L_COLUMN_HANDLED(I) := TRUE; 
            END IF;
         END IF;
      END LOOP;

      
      IF SUBSTR(L_WHERE_CLAUSE4JOIN, -4) = 'AND ' THEN
         L_WHERE_CLAUSE4JOIN := SUBSTR(L_WHERE_CLAUSE4JOIN, 1,
                                  LENGTH(L_WHERE_CLAUSE4JOIN)-4);
      END IF;
      
      
      IF SUBSTR(L_WHERE_CLAUSE, -4) = 'AND ' THEN
         L_WHERE_CLAUSE := SUBSTR(L_WHERE_CLAUSE, 1,
                                  LENGTH(L_WHERE_CLAUSE)-4);
      END IF;
      IF UPPER(SUBSTR(L_WHERE_CLAUSE, -4)) = ' OR ' THEN
         L_WHERE_CLAUSE := SUBSTR(L_WHERE_CLAUSE, 1,
                                  LENGTH(L_WHERE_CLAUSE)-3);
      END IF;
      
      IF L_WHERE_CLAUSE4JOIN IS NOT NULL THEN
         IF L_WHERE_CLAUSE IS NULL THEN
            L_WHERE_CLAUSE := ' WHERE ' || L_WHERE_CLAUSE4JOIN;
         ELSE
            L_WHERE_CLAUSE := ' WHERE (' || L_WHERE_CLAUSE4JOIN || ') AND ('||L_WHERE_CLAUSE||') ';
         END IF;
      ELSE
         IF L_WHERE_CLAUSE IS NOT NULL THEN
            L_WHERE_CLAUSE := ' WHERE '||L_WHERE_CLAUSE;
         ELSE
            L_WHERE_CLAUSE := ' ';
         END IF;
      END IF;

      IF NVL(A_ORDER_BY_CLAUSE, ' ') = ' ' THEN
         L_ORDER_BY_CLAUSE := ' ORDER BY a.ch';
      ELSE
         L_ORDER_BY_CLAUSE := A_ORDER_BY_CLAUSE;
      END IF;

      L_SQL_STRING := L_SQL_STRING || L_FROM_CLAUSE || L_WHERE_CLAUSE || L_ORDER_BY_CLAUSE;
      P_SELECTION_CLAUSE := L_FROM_CLAUSE || L_WHERE_CLAUSE;

      IF P_SELECTCH_CURSOR IS NULL THEN
         P_SELECTCH_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;

      UNAPIAUT.ADDORACLECBOHINT (L_SQL_STRING) ;
      DBMS_SQL.PARSE(P_SELECTCH_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      FOR L_X IN 1..P_SELECTION_VAL_TAB.COUNT() LOOP
         DBMS_SQL.BIND_VARIABLE(P_SELECTCH_CURSOR, ':col_val'||L_X , P_SELECTION_VAL_TAB(L_X)); 
      END LOOP;      
      
      DBMS_SQL.DEFINE_COLUMN(P_SELECTCH_CURSOR,       1,   L_CH                ,  20   );
      DBMS_SQL.DEFINE_COLUMN(P_SELECTCH_CURSOR,       2,   L_CY                ,  20   );
      DBMS_SQL.DEFINE_COLUMN(P_SELECTCH_CURSOR,       3,   L_CY_VERSION        ,  20   );
      DBMS_SQL.DEFINE_COLUMN(P_SELECTCH_CURSOR,       4,   L_DESCRIPTION       ,  40   );
      DBMS_SQL.DEFINE_COLUMN(P_SELECTCH_CURSOR,       5,   L_CHART_TITLE       ,  255   );
      DBMS_SQL.DEFINE_COLUMN(P_SELECTCH_CURSOR,       6,   L_CREATION_DATE     );
      DBMS_SQL.DEFINE_COLUMN(P_SELECTCH_CURSOR,       7,   L_CH_CONTEXT_KEY    ,  255   );
      DBMS_SQL.DEFINE_COLUMN(P_SELECTCH_CURSOR,       8,   L_DATAPOINT_CNT     );
      DBMS_SQL.DEFINE_COLUMN(P_SELECTCH_CURSOR,       9,   L_DATAPOINT_UNIT    ,  20   );
      DBMS_SQL.DEFINE_COLUMN(P_SELECTCH_CURSOR,       10,   L_XR_MEASUREMENTS  );
      DBMS_SQL.DEFINE_COLUMN(P_SELECTCH_CURSOR,       11,   L_XR_MAX_CHARTS    );
      DBMS_SQL.DEFINE_COLUMN(P_SELECTCH_CURSOR,       12,   L_SQC_AVG          );
      DBMS_SQL.DEFINE_COLUMN(P_SELECTCH_CURSOR,       13,   L_SQC_STD_DEV      );
      DBMS_SQL.DEFINE_COLUMN(P_SELECTCH_CURSOR,       14,   L_SQC_AVG_RANGE    );
      DBMS_SQL.DEFINE_COLUMN(P_SELECTCH_CURSOR,       15,   L_SQC_STD_DEV_RANGE);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTCH_CURSOR,       16,   L_EXEC_START_DATE  );
      DBMS_SQL.DEFINE_COLUMN(P_SELECTCH_CURSOR,       17,   L_EXEC_END_DATE    );
      DBMS_SQL.DEFINE_COLUMN(P_SELECTCH_CURSOR,       18,   L_ASSIGN_CF        ,  255   );
      DBMS_SQL.DEFINE_COLUMN(P_SELECTCH_CURSOR,       19,   L_VISUAL_CF        ,  255   );
      DBMS_SQL.DEFINE_COLUMN(P_SELECTCH_CURSOR,       20,   L_VALID_SQC_RULE1  ,  255   );
      DBMS_SQL.DEFINE_COLUMN(P_SELECTCH_CURSOR,       21,   L_VALID_SQC_RULE2  ,  255   );
      DBMS_SQL.DEFINE_COLUMN(P_SELECTCH_CURSOR,       22,   L_VALID_SQC_RULE3  ,  255   );
      DBMS_SQL.DEFINE_COLUMN(P_SELECTCH_CURSOR,       23,   L_VALID_SQC_RULE4  ,  255   );
      DBMS_SQL.DEFINE_COLUMN(P_SELECTCH_CURSOR,       24,   L_VALID_SQC_RULE5  ,  255   );
      DBMS_SQL.DEFINE_COLUMN(P_SELECTCH_CURSOR,       25,   L_VALID_SQC_RULE6  ,  255   );
      DBMS_SQL.DEFINE_COLUMN(P_SELECTCH_CURSOR,       26,   L_VALID_SQC_RULE7  ,  255   );   
      DBMS_SQL.DEFINE_COLUMN(P_SELECTCH_CURSOR,       27,   L_XR_SERIE_SEQ     );
      DBMS_SQL.DEFINE_COLUMN(P_SELECTCH_CURSOR,       28,   L_SS               ,  2   );
      DBMS_SQL.DEFINE_COLUMN(P_SELECTCH_CURSOR,       29,   L_LC               ,  2   );
      DBMS_SQL.DEFINE_COLUMN(P_SELECTCH_CURSOR,       30,   L_LC_VERSION       ,  20   );
      DBMS_SQL.DEFINE_COLUMN(P_SELECTCH_CURSOR,       31,   L_CH_CLASS         ,  2   );
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTCH_CURSOR,  32,   L_LOG_HS           ,  1   );
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTCH_CURSOR,  33,   L_LOG_HS_DETAILS   ,  1   );
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTCH_CURSOR,  34,   L_ALLOW_MODIFY     ,  1   );
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTCH_CURSOR,  35,   L_AR               ,  1   );
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTCH_CURSOR,  36,   L_ACTIVE           ,  1   );
      DBMS_SQL.DEFINE_COLUMN(P_SELECTCH_CURSOR,       37,   L_CY_CALC_CF       ,  255   );
      DBMS_SQL.DEFINE_COLUMN(P_SELECTCH_CURSOR,       38,   L_X_AXIS_TITLE     ,  255   );
      DBMS_SQL.DEFINE_COLUMN(P_SELECTCH_CURSOR,       39,   L_Y_AXIS_TITLE     ,  255   );
      DBMS_SQL.DEFINE_COLUMN(P_SELECTCH_CURSOR,       40,   L_Y_AXIS_UNIT      ,  20   );
      L_RESULT := DBMS_SQL.EXECUTE(P_SELECTCH_CURSOR);

   END IF;

   L_RESULT := DBMS_SQL.FETCH_ROWS(P_SELECTCH_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_SELECTCH_CURSOR,       1,   L_CH                );
      DBMS_SQL.COLUMN_VALUE(P_SELECTCH_CURSOR,       2,   L_CY                );
      DBMS_SQL.COLUMN_VALUE(P_SELECTCH_CURSOR,       3,   L_CY_VERSION        );
      DBMS_SQL.COLUMN_VALUE(P_SELECTCH_CURSOR,       4,   L_DESCRIPTION       );
      DBMS_SQL.COLUMN_VALUE(P_SELECTCH_CURSOR,       5,   L_CHART_TITLE       );
      DBMS_SQL.COLUMN_VALUE(P_SELECTCH_CURSOR,       6,   L_CREATION_DATE     );
      DBMS_SQL.COLUMN_VALUE(P_SELECTCH_CURSOR,       7,   L_CH_CONTEXT_KEY    );
      DBMS_SQL.COLUMN_VALUE(P_SELECTCH_CURSOR,       8,   L_DATAPOINT_CNT     );
      DBMS_SQL.COLUMN_VALUE(P_SELECTCH_CURSOR,       9,   L_DATAPOINT_UNIT    );
      DBMS_SQL.COLUMN_VALUE(P_SELECTCH_CURSOR,       10,   L_XR_MEASUREMENTS  );
      DBMS_SQL.COLUMN_VALUE(P_SELECTCH_CURSOR,       11,   L_XR_MAX_CHARTS    );
      DBMS_SQL.COLUMN_VALUE(P_SELECTCH_CURSOR,       12,   L_SQC_AVG          );
      DBMS_SQL.COLUMN_VALUE(P_SELECTCH_CURSOR,       13,   L_SQC_STD_DEV      );
      DBMS_SQL.COLUMN_VALUE(P_SELECTCH_CURSOR,       14,   L_SQC_AVG_RANGE    );
      DBMS_SQL.COLUMN_VALUE(P_SELECTCH_CURSOR,       15,   L_SQC_STD_DEV_RANGE);
      DBMS_SQL.COLUMN_VALUE(P_SELECTCH_CURSOR,       16,   L_EXEC_START_DATE  );
      DBMS_SQL.COLUMN_VALUE(P_SELECTCH_CURSOR,       17,   L_EXEC_END_DATE    );
      DBMS_SQL.COLUMN_VALUE(P_SELECTCH_CURSOR,       18,   L_ASSIGN_CF        );
      DBMS_SQL.COLUMN_VALUE(P_SELECTCH_CURSOR,       19,   L_VISUAL_CF        );
      DBMS_SQL.COLUMN_VALUE(P_SELECTCH_CURSOR,       20,  L_VALID_SQC_RULE1   );
      DBMS_SQL.COLUMN_VALUE(P_SELECTCH_CURSOR,       21,  L_VALID_SQC_RULE2   );
      DBMS_SQL.COLUMN_VALUE(P_SELECTCH_CURSOR,       22,  L_VALID_SQC_RULE3   );
      DBMS_SQL.COLUMN_VALUE(P_SELECTCH_CURSOR,       23,  L_VALID_SQC_RULE4   );
      DBMS_SQL.COLUMN_VALUE(P_SELECTCH_CURSOR,       24,  L_VALID_SQC_RULE5   );
      DBMS_SQL.COLUMN_VALUE(P_SELECTCH_CURSOR,       25,  L_VALID_SQC_RULE6   );
      DBMS_SQL.COLUMN_VALUE(P_SELECTCH_CURSOR,       26,  L_VALID_SQC_RULE7   );
      DBMS_SQL.COLUMN_VALUE(P_SELECTCH_CURSOR,       27,   L_XR_SERIE_SEQ     );
      DBMS_SQL.COLUMN_VALUE(P_SELECTCH_CURSOR,       28,   L_SS               );
      DBMS_SQL.COLUMN_VALUE(P_SELECTCH_CURSOR,       29,   L_LC               );
      DBMS_SQL.COLUMN_VALUE(P_SELECTCH_CURSOR,       30,   L_LC_VERSION       );
      DBMS_SQL.COLUMN_VALUE(P_SELECTCH_CURSOR,       31,   L_CH_CLASS         );
      DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTCH_CURSOR,  32,   L_LOG_HS           );
      DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTCH_CURSOR,  33,   L_LOG_HS_DETAILS   );
      DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTCH_CURSOR,  34,   L_ALLOW_MODIFY     );
      DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTCH_CURSOR,  35,   L_AR               );
      DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTCH_CURSOR,  36,   L_ACTIVE           );
      DBMS_SQL.COLUMN_VALUE(P_SELECTCH_CURSOR,       37,   L_CY_CALC_CF       );
      DBMS_SQL.COLUMN_VALUE(P_SELECTCH_CURSOR,       38,   L_X_AXIS_TITLE     );
      DBMS_SQL.COLUMN_VALUE(P_SELECTCH_CURSOR,       39,   L_Y_AXIS_TITLE     );
      DBMS_SQL.COLUMN_VALUE(P_SELECTCH_CURSOR,       40,   L_Y_AXIS_UNIT      );

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_CH                   (L_FETCHED_ROWS) := L_CH ;
      A_CY                   (L_FETCHED_ROWS) := L_CY ;
      A_CY_VERSION           (L_FETCHED_ROWS) := L_CY_VERSION ;
      A_DESCRIPTION          (L_FETCHED_ROWS) := L_DESCRIPTION ;
      A_CHART_TITLE          (L_FETCHED_ROWS) := L_CHART_TITLE ;
      A_CREATION_DATE        (L_FETCHED_ROWS) := L_CREATION_DATE ;
      A_CH_CONTEXT_KEY       (L_FETCHED_ROWS) := L_CH_CONTEXT_KEY ;
      A_DATAPOINT_CNT        (L_FETCHED_ROWS) := L_DATAPOINT_CNT ;
      A_DATAPOINT_UNIT       (L_FETCHED_ROWS) := L_DATAPOINT_UNIT ;
      A_XR_MEASUREMENTS      (L_FETCHED_ROWS) := L_XR_MEASUREMENTS ;
      A_XR_MAX_CHARTS        (L_FETCHED_ROWS) := L_XR_MAX_CHARTS ;
      A_SQC_AVG              (L_FETCHED_ROWS) := L_SQC_AVG ;
      A_SQC_STD_DEV          (L_FETCHED_ROWS) := L_SQC_STD_DEV ;
      A_SQC_AVG_RANGE        (L_FETCHED_ROWS) := L_SQC_AVG_RANGE ;
      A_SQC_STD_DEV_RANGE    (L_FETCHED_ROWS) := L_SQC_STD_DEV_RANGE ;
      A_EXEC_START_DATE      (L_FETCHED_ROWS) := L_EXEC_START_DATE ;
      A_EXEC_END_DATE        (L_FETCHED_ROWS) := L_EXEC_END_DATE ;
      A_ASSIGN_CF            (L_FETCHED_ROWS) := L_ASSIGN_CF ;
      A_VISUAL_CF            (L_FETCHED_ROWS) := L_VISUAL_CF ;
      A_VALID_SQC_RULE1      (L_FETCHED_ROWS) := L_VALID_SQC_RULE1 ;
      A_VALID_SQC_RULE2      (L_FETCHED_ROWS) := L_VALID_SQC_RULE2 ;
      A_VALID_SQC_RULE3      (L_FETCHED_ROWS) := L_VALID_SQC_RULE3 ;
      A_VALID_SQC_RULE4      (L_FETCHED_ROWS) := L_VALID_SQC_RULE4 ;
      A_VALID_SQC_RULE5      (L_FETCHED_ROWS) := L_VALID_SQC_RULE5 ;
      A_VALID_SQC_RULE6      (L_FETCHED_ROWS) := L_VALID_SQC_RULE6 ;
      A_VALID_SQC_RULE7      (L_FETCHED_ROWS) := L_VALID_SQC_RULE7 ;      
      A_XR_SERIE_SEQ         (L_FETCHED_ROWS) := L_XR_SERIE_SEQ ;
      A_SS                   (L_FETCHED_ROWS) := L_SS ;
      A_LC                   (L_FETCHED_ROWS) := L_LC ;
      A_LC_VERSION           (L_FETCHED_ROWS) := L_LC_VERSION ;
      A_CH_CLASS             (L_FETCHED_ROWS) := L_CH_CLASS ;
      A_LOG_HS               (L_FETCHED_ROWS) := L_LOG_HS ;
      A_LOG_HS_DETAILS       (L_FETCHED_ROWS) := L_LOG_HS_DETAILS ;
      A_ALLOW_MODIFY         (L_FETCHED_ROWS) := L_ALLOW_MODIFY ;
      A_AR                   (L_FETCHED_ROWS) := L_AR ;
      A_ACTIVE               (L_FETCHED_ROWS) := L_ACTIVE ;
      A_CY_CALC_CF           (L_FETCHED_ROWS) := L_CY_CALC_CF ;
      A_X_AXIS_TITLE         (L_FETCHED_ROWS) := L_X_AXIS_TITLE ;
      A_Y_AXIS_TITLE         (L_FETCHED_ROWS) := L_Y_AXIS_TITLE ;
      A_Y_AXIS_UNIT          (L_FETCHED_ROWS) := L_Y_AXIS_UNIT ;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_SELECTCH_CURSOR);
      END IF;

   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_SELECTCH_CURSOR);
       P_SELECTCH_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_SELECTCH_CURSOR);
      P_SELECTCH_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;
   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
             'SelectChart', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      L_LENGTH := 200;
      FOR L_X IN 1..10 LOOP
         IF ( LENGTH(L_SQL_STRING) > ((L_LENGTH*(L_X-1))+1) ) THEN
            INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
            VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                   'SelectChart', '(SQL)'||SUBSTR(L_SQL_STRING, (L_LENGTH*(L_X-1))+1, L_LENGTH));             
         ELSE
            EXIT;
         END IF;
      END LOOP;            
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN(P_SELECTCH_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(P_SELECTCH_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END SELECTCHART;

END UNAPICH;
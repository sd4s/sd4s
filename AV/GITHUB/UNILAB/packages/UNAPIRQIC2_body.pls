PACKAGE BODY unapirqic2 AS

TYPE BOOLEAN_TABLE_TYPE IS TABLE OF BOOLEAN INDEX BY BINARY_INTEGER;

L_SQLERRM         VARCHAR2(255);
L_SQL_STRING      VARCHAR2(4000);
L_WHERE_CLAUSE    VARCHAR2(1000);
L_EVENT_TP        UTEV.EV_TP%TYPE;
L_RET_CODE        NUMBER;
L_RESULT          NUMBER;
L_FETCHED_ROWS    NUMBER;
L_EV_SEQ_NR       NUMBER;
L_EV_DETAILS      VARCHAR2(255);
L_ERRM            VARCHAR2(255);
STPERROR          EXCEPTION;


P_GETRQICCOMMENT_CURSOR       INTEGER;
P_HS_DETAILS_CURSOR           INTEGER;
P_HS_CURSOR                   INTEGER;

FUNCTION GETVERSION
   RETURN VARCHAR2
IS
BEGIN
   RETURN('06.07.00.00_00.13');
EXCEPTION
   WHEN OTHERS THEN
      RETURN (NULL);
END GETVERSION;

FUNCTION GETRQICATTRIBUTE                               
(A_RQ                 OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_IC                 OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_ICNODE             OUT    UNAPIGEN.LONG_TABLE_TYPE,  
 A_AU                 OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_AU_VERSION         OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_VALUE              OUT    UNAPIGEN.VC40_TABLE_TYPE,  
 A_DESCRIPTION        OUT    UNAPIGEN.VC40_TABLE_TYPE,  
 A_IS_PROTECTED       OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_SINGLE_VALUED      OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NEW_VAL_ALLOWED    OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_STORE_DB           OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_VALUE_LIST_TP      OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_RUN_MODE           OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_SERVICE            OUT    UNAPIGEN.VC255_TABLE_TYPE, 
 A_CF_VALUE           OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_NR_OF_ROWS         IN OUT NUMBER,                    
 A_WHERE_CLAUSE       IN     VARCHAR2)                  
RETURN NUMBER IS

L_AU              VARCHAR2(20);
L_AU_VERSION      VARCHAR2(20);
L_RQ              VARCHAR2(20);
L_IC              VARCHAR2(20);
L_ICNODE          NUMBER(9);
L_VALUE           VARCHAR2(40);
L_DESCRIPTION     VARCHAR2(40);
L_IS_PROTECTED    CHAR(1);
L_SINGLE_VALUED   CHAR(1);
L_NEW_VAL_ALLOWED CHAR(1);
L_STORE_DB        CHAR(1);
L_VALUE_LIST_TP   CHAR(1);
L_RUN_MODE        CHAR(1);
L_SERVICE         VARCHAR2(255);
L_CF_VALUE        VARCHAR2(20);
L_AU_CURSOR       INTEGER;

BEGIN
  IF NVL(A_NR_OF_ROWS,0) = 0 THEN
     A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
  ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
     RETURN(UNAPIGEN.DBERR_NROFROWS);
  END IF;

  IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      RETURN(UNAPIGEN.DBERR_WHERECLAUSE);
  ELSIF
     UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
     L_WHERE_CLAUSE := 'WHERE rq = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                       ''' ORDER BY icnode, auseq';
  ELSE
     L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
  END IF;

  L_SQL_STRING := 'SELECT rq, ic, icnode, au, au_version, value FROM dd' ||
                   UNAPIGEN.P_DD || '.uvrqicau ' || L_WHERE_CLAUSE;

  L_AU_CURSOR := DBMS_SQL.OPEN_CURSOR;
  DBMS_SQL.PARSE(L_AU_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

  DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 1, L_RQ, 20);
  DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 2, L_IC, 20);
  DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 3, L_ICNODE);
  DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 4, L_AU, 20);
  DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 5, L_AU_VERSION, 20);
  DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 6, L_VALUE, 40);
  L_RESULT := DBMS_SQL.EXECUTE(L_AU_CURSOR);

  L_FETCHED_ROWS := 0;

  LOOP
     IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
        L_RESULT := DBMS_SQL.FETCH_ROWS(L_AU_CURSOR);
     END IF;

     EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;
     DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 1, L_RQ);
     DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 2, L_IC);
     DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 3, L_ICNODE);
     DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 4, L_AU);
     DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 5, L_AU_VERSION);
     DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 6, L_VALUE);

     L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

     A_RQ(L_FETCHED_ROWS) := L_RQ;
     A_IC(L_FETCHED_ROWS) := L_IC;
     A_ICNODE(L_FETCHED_ROWS) := L_ICNODE;
     A_AU(L_FETCHED_ROWS) := L_AU;
     A_AU_VERSION(L_FETCHED_ROWS) := L_AU_VERSION;
     A_VALUE(L_FETCHED_ROWS) := L_VALUE;

     OPEN UNAPIGEN.L_AUDET_CURSOR(L_AU, L_AU_VERSION);
     FETCH UNAPIGEN.L_AUDET_CURSOR
     INTO L_DESCRIPTION, L_IS_PROTECTED, L_SINGLE_VALUED,
          L_NEW_VAL_ALLOWED, L_STORE_DB, L_VALUE_LIST_TP, L_RUN_MODE,
          L_SERVICE, L_CF_VALUE;
     IF UNAPIGEN.L_AUDET_CURSOR%NOTFOUND THEN
        
        
        
        A_DESCRIPTION(L_FETCHED_ROWS)     := L_AU;
        A_IS_PROTECTED(L_FETCHED_ROWS)    := '1';
        A_SINGLE_VALUED(L_FETCHED_ROWS)   := '1';
        A_NEW_VAL_ALLOWED(L_FETCHED_ROWS) := '0';
        A_STORE_DB(L_FETCHED_ROWS)        := '0';
        A_VALUE_LIST_TP(L_FETCHED_ROWS)   := 'E';
        A_RUN_MODE(L_FETCHED_ROWS)        := 'H';
        A_SERVICE(L_FETCHED_ROWS)         := NULL;
        A_CF_VALUE(L_FETCHED_ROWS)        := NULL;
     ELSE
        A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;
        A_IS_PROTECTED(L_FETCHED_ROWS) := L_IS_PROTECTED;
        A_SINGLE_VALUED(L_FETCHED_ROWS) := L_SINGLE_VALUED;
        A_NEW_VAL_ALLOWED(L_FETCHED_ROWS) := L_NEW_VAL_ALLOWED;
        A_STORE_DB(L_FETCHED_ROWS) := L_STORE_DB;
        A_VALUE_LIST_TP(L_FETCHED_ROWS) := L_VALUE_LIST_TP;
        A_RUN_MODE(L_FETCHED_ROWS) := L_RUN_MODE;
        A_SERVICE(L_FETCHED_ROWS) := L_SERVICE;
        A_CF_VALUE(L_FETCHED_ROWS) := L_CF_VALUE;
     END IF;
     CLOSE UNAPIGEN.L_AUDET_CURSOR;
  END LOOP;

  DBMS_SQL.CLOSE_CURSOR(L_AU_CURSOR);

  IF L_FETCHED_ROWS = 0 THEN
     L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
  ELSE
     L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
     A_NR_OF_ROWS := L_FETCHED_ROWS;
  END IF;

  RETURN(L_RET_CODE);

EXCEPTION
  WHEN OTHERS THEN
     L_SQLERRM := SQLERRM;
     UNAPIGEN.U4ROLLBACK;
     INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
     VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
            'GetRqIcAttribute', L_SQLERRM);
     UNAPIGEN.U4COMMIT;
      IF UNAPIGEN.L_AUDET_CURSOR%ISOPEN THEN
         CLOSE UNAPIGEN.L_AUDET_CURSOR;
      END IF;
      IF DBMS_SQL.IS_OPEN(L_AU_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(L_AU_CURSOR);
      END IF;
     RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETRQICATTRIBUTE;

FUNCTION SAVERQICATTRIBUTE
(A_RQ             IN        VARCHAR2,                 
 A_IC             IN        VARCHAR2,                 
 A_ICNODE         IN        NUMBER,                   
 A_AU             IN        UNAPIGEN.VC20_TABLE_TYPE, 
 A_AU_VERSION     IN OUT    UNAPIGEN.VC20_TABLE_TYPE, 
 A_VALUE          IN        UNAPIGEN.VC40_TABLE_TYPE, 
 A_NR_OF_ROWS     IN        NUMBER,                   
 A_MODIFY_REASON  IN        VARCHAR2)                 
RETURN NUMBER IS

L_LOG_HS            CHAR(1);
L_LOG_HS_DETAILS    CHAR(1);
L_ACTIVE            CHAR(1);
L_LC                VARCHAR2(2);
L_LC_VERSION        VARCHAR2(20);
L_SS                VARCHAR2(2);
L_ALLOW_MODIFY      CHAR(1);
L_WHAT_DESCRIPTION  VARCHAR2(255);
L_HS_SEQ            INTEGER;
L_IP_VERSION        VARCHAR2(20);

CURSOR L_MODIFIEDICAU_CURSOR IS
   
   (SELECT A.AU AU, A.AU_VERSION AU_VERSION, A.VALUE VALUE, 'DELETE' ACTION
    FROM UTRQICAU A
    WHERE A.RQ = A_RQ
    AND A.IC = A_IC
    AND A.ICNODE = A_ICNODE
    AND AUSEQ < 0
   MINUS
    SELECT A.AU AU, A.AU_VERSION AU_VERSION, A.VALUE VALUE, 'DELETE' ACTION
    FROM UTRQICAU A
    WHERE A.RQ = A_RQ
    AND A.IC = A_IC
    AND A.ICNODE = A_ICNODE
    AND AUSEQ > 0)
   UNION ALL
   
   (SELECT A.AU AU, A.AU_VERSION AU_VERSION, A.VALUE VALUE, 'NEW' ACTION
    FROM UTRQICAU A
    WHERE A.RQ = A_RQ
    AND A.IC = A_IC
    AND A.ICNODE = A_ICNODE
    AND AUSEQ > 0
   MINUS
    SELECT A.AU AU, A.AU_VERSION AU_VERSION, A.VALUE VALUE, 'NEW' ACTION
    FROM UTRQICAU A
    WHERE A.RQ = A_RQ
    AND A.IC = A_IC
    AND A.ICNODE = A_ICNODE
    AND AUSEQ < 0);

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_RQ, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_IC, ' ') = ' '
   OR NVL(A_ICNODE, 0) = 0 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIAUT.GETRQICAUTHORISATION(A_RQ, A_IC, A_ICNODE, L_IP_VERSION, L_LC, L_LC_VERSION,
                                               L_SS, L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS, 
                                               L_LOG_HS_DETAILS);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTRQIC
   SET ALLOW_MODIFY = '#'
   WHERE RQ = A_RQ
      AND IC = A_IC
      AND ICNODE = A_ICNODE;
   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR ;
   END IF;






   L_EVENT_TP := 'RqIcAttributesUpdated';
   L_EV_SEQ_NR := -1;
   L_EV_DETAILS := 'rq=' ||A_RQ ||
                   '#icnode='||A_ICNODE ||
                   '#ip_version=' || L_IP_VERSION;
   L_RESULT := UNAPIEV.INSERTEVENT('SaveRqIcAttribute', UNAPIGEN.P_EVMGR_NAME, 'rqic', A_IC, L_LC, 
                                   L_LC_VERSION, L_SS, L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF (L_LOG_HS = '1') THEN
       INSERT INTO UTRQICHS(RQ, IC, ICNODE, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, 
                            LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
       VALUES(A_RQ, A_IC, A_ICNODE, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
              'attributes for info card "'||A_IC||'" are updated', 
              CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   L_HS_SEQ := 0;
   IF (L_LOG_HS_DETAILS = '1') THEN
       L_HS_SEQ := L_HS_SEQ + 1;
       INSERT INTO UTRQICHSDETAILS(RQ, IC, ICNODE, TR_SEQ, EV_SEQ, SEQ, DETAILS)
       VALUES(A_RQ, A_IC, A_ICNODE, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_SEQ, 
              'attributes for info card "'||A_IC||'" are updated');
   END IF;

   
   
   
   UPDATE UTRQICAU
   SET AUSEQ = -AUSEQ
   WHERE RQ = A_RQ
     AND IC = A_IC
     AND ICNODE = A_ICNODE;

   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      INSERT INTO UTRQICAU(RQ, IC, ICNODE, AU, AUSEQ, VALUE)
      VALUES(A_RQ, A_IC, A_ICNODE, A_AU(L_SEQ_NO), L_SEQ_NO, A_VALUE(L_SEQ_NO));
   END LOOP;

   
   
      
   
   
   
   IF (L_LOG_HS_DETAILS = '1') THEN
      FOR L_ICAU_REC IN L_MODIFIEDICAU_CURSOR LOOP
         IF L_ICAU_REC.ACTION = 'DELETE' THEN
            L_WHAT_DESCRIPTION := 'Attribute "'||L_ICAU_REC.AU||'" with value "'||L_ICAU_REC.VALUE||'" is removed from info card "'||A_IC||'".';
         ELSE
            L_WHAT_DESCRIPTION := 'Attribute "'||L_ICAU_REC.AU||'" is added to info card "'||A_IC||'", value is "'||L_ICAU_REC.VALUE||'".';
         END IF;
         L_HS_SEQ := L_HS_SEQ + 1;
         INSERT INTO UTRQICHSDETAILS(RQ, IC, ICNODE, TR_SEQ, EV_SEQ, SEQ, DETAILS)
         VALUES(A_RQ, A_IC, A_ICNODE, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_SEQ, L_WHAT_DESCRIPTION);
      END LOOP;
   END IF;
  
   
   
   
   DELETE FROM UTRQICAU
   WHERE RQ = A_RQ
   AND IC = A_IC
   AND ICNODE = A_ICNODE
   AND AUSEQ < 0;
   
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveRqIcAttribute', SQLERRM);
   END IF;
   IF L_MODIFIEDICAU_CURSOR%ISOPEN THEN
      CLOSE L_MODIFIEDICAU_CURSOR;
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveRqIcAttribute'));
END SAVERQICATTRIBUTE;

FUNCTION SAVE1RQICATTRIBUTE
(A_RQ             IN        VARCHAR2,                 
 A_IC             IN        VARCHAR2,                 
 A_ICNODE         IN        NUMBER,                   
 A_AU             IN        VARCHAR2,                 
 A_AU_VERSION     IN OUT    VARCHAR2,                 
 A_VALUE          IN        UNAPIGEN.VC40_TABLE_TYPE, 
 A_NR_OF_ROWS     IN        NUMBER,                   
 A_MODIFY_REASON  IN        VARCHAR2)                 
RETURN NUMBER IS

L_LC                VARCHAR2(2);
L_LC_VERSION        VARCHAR2(20);
L_SS                VARCHAR2(2);
L_LOG_HS            CHAR(1);
L_LOG_HS_DETAILS    CHAR(1);
L_ALLOW_MODIFY      CHAR(1);
L_ACTIVE            CHAR(1);
L_NEW_SEQ           NUMBER;
L_AU_HANDLE         BOOLEAN_TABLE_TYPE;
L_AU_FOUND          BOOLEAN;
L_INSERT_EVENT      BOOLEAN;
L_LAST_SEQ          INTEGER;
L_WHAT_DESCRIPTION  VARCHAR2(255);
L_HS_SEQ            INTEGER;
L_IP_VERSION        VARCHAR2(20);

CURSOR L_AU_CURSOR IS
   SELECT VALUE, AUSEQ
   FROM UTRQICAU
   WHERE RQ = A_RQ
      AND IC = A_IC
      AND ICNODE = A_ICNODE
      AND AU = A_AU
   ORDER BY AUSEQ;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> 
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_RQ, ' ') = ' ' OR
      NVL(A_AU, ' ') = ' ' OR
      NVL(A_IC, ' ') = ' ' OR
      NVL(A_ICNODE, 0) = 0 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      L_AU_HANDLE(L_SEQ_NO) := TRUE;
   END LOOP;

   L_RET_CODE := UNAPIAUT.GETRQICAUTHORISATION(A_RQ, A_IC, A_ICNODE,  
                                               L_IP_VERSION, L_LC, L_LC_VERSION, 
                                               L_SS, L_ALLOW_MODIFY, L_ACTIVE,
                                               L_LOG_HS, L_LOG_HS_DETAILS);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTRQIC
   SET ALLOW_MODIFY = '#'
   WHERE RQ = A_RQ
      AND IC = A_IC
      AND ICNODE = A_ICNODE;

   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR ;
   END IF;

   L_EVENT_TP := 'RqIcAttributesUpdated';
   L_EV_SEQ_NR := -1;
   L_EV_DETAILS := 'rq=' || A_RQ ||
                   '#icnode=' || TO_CHAR(A_ICNODE) ||
                   '#au=' || A_AU || '#au_version=' || A_AU_VERSION ||
                   '#ip_version=' || L_IP_VERSION;
                   
   L_RESULT := UNAPIEV.INSERTEVENT('Save1RqIcAttribute', UNAPIGEN.P_EVMGR_NAME,
                                   'ic', A_IC, L_LC, L_LC_VERSION, L_SS,
                                   L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF L_LOG_HS = '1' THEN
      INSERT INTO UTRQICHS(RQ, IC, ICNODE, WHO, WHO_DESCRIPTION, WHAT,
                           WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES(A_RQ, A_IC, A_ICNODE, UNAPIGEN.P_USER,
             UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
             'info card "'||A_IC||'" attribute "'||A_AU||'" is created/updated.', 
             CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   L_HS_SEQ := 0;
   IF L_LOG_HS_DETAILS = '1' THEN
      L_HS_SEQ := L_HS_SEQ + 1;
      INSERT INTO UTRQICHSDETAILS(RQ, IC, ICNODE, TR_SEQ, EV_SEQ, SEQ, DETAILS)
      VALUES(A_RQ, A_IC, A_ICNODE,
             UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_SEQ, 
             'info card "'||A_IC||'" attribute "'||A_AU||'" is created/updated.');
   END IF;   

   L_LAST_SEQ := 499;
   FOR L_ICAU IN L_AU_CURSOR LOOP
      L_AU_FOUND := FALSE;
      FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
         IF (L_ICAU.VALUE = A_VALUE(L_SEQ_NO) OR
             (L_ICAU.VALUE IS NULL AND A_VALUE(L_SEQ_NO) IS NULL)) THEN
            L_AU_HANDLE(L_SEQ_NO) := FALSE;
            L_AU_FOUND := TRUE;
            EXIT;
         END IF;
      END LOOP;

      IF NOT L_AU_FOUND THEN
         DELETE FROM UTRQICAU
         WHERE RQ = A_RQ
            AND IC = A_IC
            AND ICNODE = A_ICNODE
            AND AU = A_AU
            AND VALUE = L_ICAU.VALUE;

         IF L_ICAU.VALUE IS NULL THEN
            DELETE FROM UTRQICAU
            WHERE RQ = A_RQ
              AND IC = A_IC
              AND ICNODE = A_ICNODE
              AND AU = A_AU
              AND VALUE IS NULL;
         END IF;

         IF (L_LOG_HS_DETAILS = '1') THEN
            L_WHAT_DESCRIPTION := 'Attribute "'||A_AU||'" with value "'||L_ICAU.VALUE||'" is removed from info card "'||A_IC||'".';
            L_HS_SEQ := L_HS_SEQ + 1;
            INSERT INTO UTRQICHSDETAILS(RQ, IC, ICNODE, TR_SEQ, EV_SEQ, SEQ, DETAILS)
            VALUES(A_RQ, A_IC, A_ICNODE, UNAPIGEN.P_TR_SEQ, 
                   L_EV_SEQ_NR, L_HS_SEQ, L_WHAT_DESCRIPTION);
         END IF;   
      ELSE      
         L_LAST_SEQ := L_ICAU.AUSEQ;         
      END IF;
   END LOOP;

   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      IF L_AU_HANDLE(L_SEQ_NO) THEN
         L_LAST_SEQ := L_LAST_SEQ+1;

         
         INSERT INTO UTRQICAU
         (RQ, IC, ICNODE,   
          AU, AUSEQ, VALUE)
         VALUES
         (A_RQ, A_IC, A_ICNODE,  
          A_AU, L_LAST_SEQ, A_VALUE(L_SEQ_NO));

         IF (L_LOG_HS_DETAILS = '1') THEN
            L_WHAT_DESCRIPTION := 'Attribute "'||A_AU||'" is added to info card "'||A_IC||'", value is "'||A_VALUE(L_SEQ_NO)||'".';
            L_HS_SEQ := L_HS_SEQ + 1;
            INSERT INTO UTRQICHSDETAILS(RQ, IC, ICNODE, TR_SEQ, EV_SEQ, SEQ, DETAILS)
            VALUES(A_RQ, A_IC, A_ICNODE, UNAPIGEN.P_TR_SEQ, 
                   L_EV_SEQ_NR, L_HS_SEQ, L_WHAT_DESCRIPTION);
         END IF;   

      END IF;
   END LOOP;
     
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('Save1RqIcAttribute', SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('Save1RqIcAttribute', L_SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'Save1RqIcAttribute'));
END SAVE1RQICATTRIBUTE;

FUNCTION INITANDSAVERQICATTRIBUTES                     
(A_RQ               IN      VARCHAR2,                  
 A_IC               IN      VARCHAR2,                  
 A_ICNODE           IN      NUMBER)                    
RETURN NUMBER IS

CURSOR L_RT_CURSOR(A_RQ VARCHAR2) IS
   SELECT RT, RT_VERSION
   FROM UTRQ
   WHERE RQ = A_RQ;
L_RT           VARCHAR2(20);
L_RT_VERSION   VARCHAR2(20);

CURSOR L_IPVERSION_CURSOR(A_RQ VARCHAR2, A_IC VARCHAR2, A_ICNODE NUMBER) IS
   SELECT IP_VERSION
   FROM UTRQIC
   WHERE RQ = A_RQ
   AND IC = A_IC
   AND ICNODE = A_ICNODE;
L_IP_VERSION   VARCHAR2(20);

CURSOR L_RTIP_CURSOR(C_RT VARCHAR2, C_RT_VERSION VARCHAR2, C_IP VARCHAR2, C_IP_VERSION VARCHAR2) IS
   SELECT IP
   FROM UTRTIP
   WHERE RT = C_RT
   AND VERSION = C_RT_VERSION
   AND IP = C_IP
   AND UNAPIGEN.VALIDATEVERSION('ip', IP, IP_VERSION) = C_IP_VERSION;
L_RTIP_REC L_RTIP_CURSOR%ROWTYPE;
L_RTIP_FOUND             BOOLEAN;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
   
   OPEN L_RT_CURSOR(A_RQ);
   FETCH L_RT_CURSOR
   INTO L_RT, L_RT_VERSION;
   CLOSE L_RT_CURSOR;

   OPEN L_IPVERSION_CURSOR(A_RQ, A_IC, A_ICNODE);
   FETCH L_IPVERSION_CURSOR
   INTO L_IP_VERSION;
   CLOSE L_IPVERSION_CURSOR;

   
   
   
   
   OPEN L_RTIP_CURSOR(L_RT, L_RT_VERSION, A_IC, L_IP_VERSION);
   FETCH L_RTIP_CURSOR
   INTO L_RTIP_REC;
   L_RTIP_FOUND := L_RTIP_CURSOR%FOUND;
   CLOSE L_RTIP_CURSOR;

   IF L_RTIP_FOUND THEN
      
      
      
      
      INSERT INTO UTRQICAU(RQ, IC, ICNODE, AU, AU_VERSION, AUSEQ, VALUE)
      SELECT A_RQ, A_IC, A_ICNODE, A.AU, '' D_VERSION, A.AUSEQ, A.VALUE
      FROM UTIPAU A, UTIP B, UTRTIP C, UTAU D
      WHERE A.IP = A_IC
        AND A.VERSION = L_IP_VERSION
        AND A.IP = B.IP
        AND A.VERSION = B.VERSION
        AND A.AU = D.AU
        AND UNAPIGEN.VALIDATEVERSION('au', A.AU, A.AU_VERSION) = D.VERSION
        AND C.RT = L_RT
        AND C.VERSION = L_RT_VERSION     
        AND C.IP = B.IP
        AND UNAPIGEN.VALIDATEVERSION('ip', C.IP, C.IP_VERSION) = B.VERSION     
        AND DECODE(D.INHERIT_AU,'0',DECODE(C.INHERIT_AU,'2',B.INHERIT_AU,C.INHERIT_AU),D.INHERIT_AU) = '1'
        AND A.AU NOT IN (SELECT DISTINCT J.AU
                         FROM UTRTIPAU J, UTRTIP K, UTIP L, UTAU M
                         WHERE J.IP = L.IP
                           AND UNAPIGEN.VALIDATEVERSION('ip', J.IP, J.IP_VERSION) = L.VERSION
                           AND J.RT = L_RT
                           AND J.VERSION = L_RT_VERSION
                           AND J.IP = A_IC
                           AND UNAPIGEN.VALIDATEVERSION('ip', J.IP, J.IP_VERSION) = L_IP_VERSION
                           AND J.IP = K.IP
                           AND UNAPIGEN.VALIDATEVERSION('ip', J.IP, J.IP_VERSION) = UNAPIGEN.VALIDATEVERSION('ip', K.IP, K.IP_VERSION)
                           AND J.RT = K.RT
                           AND J.VERSION = K.VERSION
                           AND DECODE(M.INHERIT_AU,'0',DECODE(K.INHERIT_AU,'2',L.INHERIT_AU,K.INHERIT_AU),M.INHERIT_AU) = '1'
                           AND M.AU = J.AU
                           AND M.VERSION = UNAPIGEN.VALIDATEVERSION('au', J.AU, J.AU_VERSION))
      
      
      
      
      UNION
      SELECT A_RQ, A_IC, A_ICNODE, V.AU, '' Y_VERSION, V.AUSEQ+500, V.VALUE
      FROM UTRTIPAU V, UTRTIP W, UTIP X, UTAU Y
      WHERE V.IP = X.IP
        AND UNAPIGEN.VALIDATEVERSION('ip', V.IP, V.IP_VERSION) = X.VERSION
        AND V.RT = L_RT
        AND V.VERSION = L_RT_VERSION
        AND V.IP = A_IC
        AND UNAPIGEN.VALIDATEVERSION('ip', V.IP, V.IP_VERSION) = L_IP_VERSION
        AND V.RT = W.RT
        AND V.VERSION = W.VERSION
        AND V.IP = W.IP
        AND UNAPIGEN.VALIDATEVERSION('ip', V.IP, V.IP_VERSION) = UNAPIGEN.VALIDATEVERSION('ip', W.IP, W.IP_VERSION)
        AND DECODE(Y.INHERIT_AU,'0',DECODE(W.INHERIT_AU,'2',X.INHERIT_AU,W.INHERIT_AU),Y.INHERIT_AU) = '1' 
        AND V.AU = Y.AU
        AND UNAPIGEN.VALIDATEVERSION('au', V.AU, V.AU_VERSION) = Y.VERSION;
   ELSE
      INSERT INTO UTRQICAU(RQ, IC, ICNODE, AU, AU_VERSION, AUSEQ, VALUE)
      SELECT A_RQ, A_IC, A_ICNODE, A.AU, '' D_VERSION, A.AUSEQ, A.VALUE
      FROM UTIPAU A, UTIP B, UTAU D
      WHERE A.IP = A_IC
        AND A.VERSION = L_IP_VERSION
        AND A.IP = B.IP
        AND A.VERSION = B.VERSION
        AND A.AU = D.AU
        AND UNAPIGEN.VALIDATEVERSION('au', A.AU, A.AU_VERSION) = D.VERSION     
        AND DECODE(D.INHERIT_AU, '0', B.INHERIT_AU, D.INHERIT_AU) = '1';      
   END IF;
   
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('InitAndSaveRqIcAttributes', SQLERRM);
   END IF;
   IF L_RT_CURSOR%ISOPEN THEN
      CLOSE L_RT_CURSOR;
   END IF;
   IF L_IPVERSION_CURSOR%ISOPEN THEN
      CLOSE L_IPVERSION_CURSOR;
   END IF;
   IF L_RTIP_CURSOR%ISOPEN THEN
      CLOSE L_RTIP_CURSOR;
   END IF;      
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'InitAndSaveRqIcAttributes'));
END INITANDSAVERQICATTRIBUTES;

FUNCTION GETRQICHISTORY                                 
(A_RQ                OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_IC                OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_ICNODE            OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_WHO               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_WHO_DESCRIPTION   OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_WHAT              OUT     UNAPIGEN.VC60_TABLE_TYPE,  
 A_WHAT_DESCRIPTION  OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_LOGDATE           OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_WHY               OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_TR_SEQ            OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_EV_SEQ            OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_NR_OF_ROWS        IN OUT  NUMBER,                    
 A_WHERE_CLAUSE      IN      VARCHAR2)                  
RETURN NUMBER IS

L_NR_OF_ROWS_IN               INTEGER;
L_NR_OF_ROWS_OUT              INTEGER;


L_RQ_TAB                      UNAPIGEN.VC20_TABLE_TYPE;
L_IC_TAB                      UNAPIGEN.VC20_TABLE_TYPE;
L_ICNODE_TAB                  UNAPIGEN.LONG_TABLE_TYPE;
L_WHO_TAB                     UNAPIGEN.VC20_TABLE_TYPE;
L_WHO_DESCRIPTION_TAB         UNAPIGEN.VC40_TABLE_TYPE;
L_WHAT_TAB                    UNAPIGEN.VC60_TABLE_TYPE;
L_WHAT_DESCRIPTION_TAB        UNAPIGEN.VC255_TABLE_TYPE;
L_LOGDATE_TAB                 UNAPIGEN.DATE_TABLE_TYPE;
L_WHY_TAB                     UNAPIGEN.VC255_TABLE_TYPE;
L_TR_SEQ_TAB                  UNAPIGEN.NUM_TABLE_TYPE;
L_EV_SEQ_TAB                  UNAPIGEN.NUM_TABLE_TYPE;

BEGIN
   L_NR_OF_ROWS_IN := A_NR_OF_ROWS;
   L_NR_OF_ROWS_OUT := L_NR_OF_ROWS_IN;
   L_RET_CODE := GETRQICHISTORY(A_RQ,             
                                A_IC,
                                A_ICNODE,
                                A_WHO,             
                                A_WHO_DESCRIPTION,
                                A_WHAT,            
                                A_WHAT_DESCRIPTION,
                                A_LOGDATE,         
                                A_WHY,             
                                A_TR_SEQ,          
                                A_EV_SEQ,          
                                L_NR_OF_ROWS_OUT,      
                                A_WHERE_CLAUSE,
                                0);
    IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
       RETURN(L_RET_CODE);
    ELSE
       A_NR_OF_ROWS := L_NR_OF_ROWS_OUT;
       IF L_NR_OF_ROWS_OUT = L_NR_OF_ROWS_IN THEN
          
          L_RET_CODE := GETRQICHISTORY(L_RQ_TAB,             
                                       L_IC_TAB,
                                       L_ICNODE_TAB,
                                       L_WHO_TAB,
                                       L_WHO_DESCRIPTION_TAB,
                                       L_WHAT_TAB,
                                       L_WHAT_DESCRIPTION_TAB,
                                       L_LOGDATE_TAB,
                                       L_WHY_TAB,
                                       L_TR_SEQ_TAB,
                                       L_EV_SEQ_TAB,
                                       L_NR_OF_ROWS_OUT,      
                                       A_WHERE_CLAUSE,
                                       -1);
          IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
             RETURN(L_RET_CODE);
          END IF;
       END IF;
    END IF;
    RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
             'GetRqIcHistory', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETRQICHISTORY;

FUNCTION GETRQICHISTORY 
(A_RQ                OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_IC                OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_ICNODE            OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_WHO               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_WHO_DESCRIPTION   OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_WHAT              OUT     UNAPIGEN.VC60_TABLE_TYPE,  
 A_WHAT_DESCRIPTION  OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_LOGDATE           OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_WHY               OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_TR_SEQ            OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_EV_SEQ            OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_NR_OF_ROWS        IN OUT  NUMBER,                    
 A_WHERE_CLAUSE      IN      VARCHAR2,                  
 A_NEXT_ROWS         IN      NUMBER)                    
RETURN NUMBER IS

L_RQ                      VARCHAR2(20);
L_IC                      VARCHAR2(20);
L_ICNODE                  NUMBER(9);
L_WHO                     VARCHAR2(20);
L_WHO_DESCRIPTION         VARCHAR2(40);
L_WHAT                    VARCHAR2(60);
L_WHAT_DESCRIPTION        VARCHAR2(255);
L_LOGDATE                 TIMESTAMP WITH TIME ZONE;
L_WHY                     VARCHAR2(255);
L_TR_SEQ                  NUMBER;
L_EV_SEQ                  NUMBER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF DBMS_SQL.IS_OPEN(P_HS_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(P_HS_CURSOR);
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_HS_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      
      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
         RETURN(UNAPIGEN.DBERR_WHERECLAUSE);
      ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
         L_WHERE_CLAUSE := 'WHERE rq = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                           ''' ORDER BY icnode, logdate DESC';
      ELSE
         L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
      END IF;
      
      L_WHERE_CLAUSE := REPLACE(REPLACE(L_WHERE_CLAUSE, 
                                        'logdate DESC', 
                                        'logdate DESC, ROWID DESC'),
                                'LOGDATE DESC', 
                                'LOGDATE DESC, ROWID DESC');

      IF DBMS_SQL.IS_OPEN(P_HS_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(P_HS_CURSOR);
      END IF;
      P_HS_CURSOR := DBMS_SQL.OPEN_CURSOR;
      L_SQL_STRING := 'SELECT rq, ic, icnode, who, who_description, what, what_description, logdate, why, tr_seq, ev_seq '||
                      'FROM dd' || UNAPIGEN.P_DD || '.uvrqichs ' ||
                      L_WHERE_CLAUSE;
      DBMS_SQL.PARSE(P_HS_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

      DBMS_SQL.DEFINE_COLUMN(P_HS_CURSOR, 1, L_RQ, 20);
      DBMS_SQL.DEFINE_COLUMN(P_HS_CURSOR, 2, L_IC, 20);
      DBMS_SQL.DEFINE_COLUMN(P_HS_CURSOR, 3, L_ICNODE);
      DBMS_SQL.DEFINE_COLUMN(P_HS_CURSOR, 4, L_WHO, 20);
      DBMS_SQL.DEFINE_COLUMN(P_HS_CURSOR, 5, L_WHO_DESCRIPTION, 40);
      DBMS_SQL.DEFINE_COLUMN(P_HS_CURSOR, 6, L_WHAT, 60);
      DBMS_SQL.DEFINE_COLUMN(P_HS_CURSOR, 7, L_WHAT_DESCRIPTION, 255);
      DBMS_SQL.DEFINE_COLUMN(P_HS_CURSOR, 8, L_LOGDATE);
      DBMS_SQL.DEFINE_COLUMN(P_HS_CURSOR, 9, L_WHY, 255);
      DBMS_SQL.DEFINE_COLUMN(P_HS_CURSOR, 10, L_TR_SEQ);
      DBMS_SQL.DEFINE_COLUMN(P_HS_CURSOR, 11, L_EV_SEQ);
      L_RESULT := DBMS_SQL.EXECUTE(P_HS_CURSOR);
   END IF;

   L_RESULT := DBMS_SQL.FETCH_ROWS(P_HS_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;
      DBMS_SQL.COLUMN_VALUE(P_HS_CURSOR, 1, L_RQ);
      DBMS_SQL.COLUMN_VALUE(P_HS_CURSOR, 2, L_IC);
      DBMS_SQL.COLUMN_VALUE(P_HS_CURSOR, 3, L_ICNODE);
      DBMS_SQL.COLUMN_VALUE(P_HS_CURSOR, 4, L_WHO);
      DBMS_SQL.COLUMN_VALUE(P_HS_CURSOR, 5, L_WHO_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE(P_HS_CURSOR, 6, L_WHAT);
      DBMS_SQL.COLUMN_VALUE(P_HS_CURSOR, 7, L_WHAT_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE(P_HS_CURSOR, 8, L_LOGDATE);
      DBMS_SQL.COLUMN_VALUE(P_HS_CURSOR, 9, L_WHY);
      DBMS_SQL.COLUMN_VALUE(P_HS_CURSOR, 10, L_TR_SEQ);
      DBMS_SQL.COLUMN_VALUE(P_HS_CURSOR, 11, L_EV_SEQ);
      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_RQ(L_FETCHED_ROWS)               := L_RQ;
      A_IC(L_FETCHED_ROWS)               := L_IC;
      A_ICNODE(L_FETCHED_ROWS)           := L_ICNODE;
      A_WHO(L_FETCHED_ROWS)              := L_WHO;
      A_WHO_DESCRIPTION(L_FETCHED_ROWS)  := L_WHO_DESCRIPTION;
      A_WHAT(L_FETCHED_ROWS)             := L_WHAT;
      A_WHAT_DESCRIPTION(L_FETCHED_ROWS) := L_WHAT_DESCRIPTION;
      A_LOGDATE(L_FETCHED_ROWS)          := TO_CHAR(L_LOGDATE);
      A_WHY(L_FETCHED_ROWS)              := L_WHY;
      A_TR_SEQ(L_FETCHED_ROWS)           := L_TR_SEQ;
      A_EV_SEQ(L_FETCHED_ROWS)           := L_EV_SEQ;
      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_HS_CURSOR);
      END IF;
   END LOOP;

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
      DBMS_SQL.CLOSE_CURSOR(P_HS_CURSOR);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
      DBMS_SQL.CLOSE_CURSOR(P_HS_CURSOR);
   ELSE
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;
   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   L_SQLERRM := SQLERRM;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
          'GetRqIcHistory', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   IF DBMS_SQL.IS_OPEN(P_HS_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(P_HS_CURSOR);
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETRQICHISTORY;

FUNCTION GETRQICHISTORYDETAILS 
(A_RQ                OUT     UNAPIGEN.VC20_TABLE_TYPE,    
 A_IC                OUT     UNAPIGEN.VC20_TABLE_TYPE,    
 A_ICNODE            OUT     UNAPIGEN.LONG_TABLE_TYPE,    
 A_TR_SEQ            OUT     UNAPIGEN.NUM_TABLE_TYPE,     
 A_EV_SEQ            OUT     UNAPIGEN.NUM_TABLE_TYPE,     
 A_SEQ               OUT     UNAPIGEN.NUM_TABLE_TYPE,     
 A_DETAILS           OUT     UNAPIGEN.VC4000_TABLE_TYPE,  
 A_NR_OF_ROWS        IN OUT  NUMBER,                      
 A_WHERE_CLAUSE      IN      VARCHAR2,                    
 A_NEXT_ROWS         IN      NUMBER)                      
RETURN NUMBER IS

L_RQ                      VARCHAR2(20);
L_IC                      VARCHAR2(20);
L_ICNODE                  NUMBER(9);
L_TR_SEQ                  NUMBER;
L_EV_SEQ                  NUMBER;
L_SEQ                     NUMBER;
L_DETAILS                 VARCHAR2(4000);

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF DBMS_SQL.IS_OPEN(P_HS_DETAILS_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(P_HS_DETAILS_CURSOR);
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_HS_DETAILS_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN

      
      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
         RETURN(UNAPIGEN.DBERR_WHERECLAUSE);
      ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
         L_WHERE_CLAUSE := 'WHERE rq = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                           ''' ORDER BY icnode, tr_seq DESC, ev_seq DESC, seq DESC';
      ELSE
         L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
      END IF;

      IF DBMS_SQL.IS_OPEN(P_HS_DETAILS_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(P_HS_DETAILS_CURSOR);
      END IF;
      P_HS_DETAILS_CURSOR := DBMS_SQL.OPEN_CURSOR;
      L_SQL_STRING := 'SELECT rq, ic, icnode, tr_seq, ev_seq, seq, details '||
                      'FROM dd' || UNAPIGEN.P_DD || '.uvrqichsdetails ' ||
                      L_WHERE_CLAUSE;
      DBMS_SQL.PARSE(P_HS_DETAILS_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      DBMS_SQL.DEFINE_COLUMN(P_HS_DETAILS_CURSOR, 1, L_RQ, 20);
      DBMS_SQL.DEFINE_COLUMN(P_HS_DETAILS_CURSOR, 2, L_IC, 20);
      DBMS_SQL.DEFINE_COLUMN(P_HS_DETAILS_CURSOR, 3, L_ICNODE);
      DBMS_SQL.DEFINE_COLUMN(P_HS_DETAILS_CURSOR, 4, L_TR_SEQ);
      DBMS_SQL.DEFINE_COLUMN(P_HS_DETAILS_CURSOR, 5, L_EV_SEQ);
      DBMS_SQL.DEFINE_COLUMN(P_HS_DETAILS_CURSOR, 6, L_SEQ);
      DBMS_SQL.DEFINE_COLUMN(P_HS_DETAILS_CURSOR, 7, L_DETAILS, 4000);   
      L_RESULT := DBMS_SQL.EXECUTE(P_HS_DETAILS_CURSOR);
   END IF;
   
   L_RESULT := DBMS_SQL.FETCH_ROWS(P_HS_DETAILS_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;
      DBMS_SQL.COLUMN_VALUE(P_HS_DETAILS_CURSOR, 1, L_RQ);
      DBMS_SQL.COLUMN_VALUE(P_HS_DETAILS_CURSOR, 2, L_IC);
      DBMS_SQL.COLUMN_VALUE(P_HS_DETAILS_CURSOR, 3, L_ICNODE);
      DBMS_SQL.COLUMN_VALUE(P_HS_DETAILS_CURSOR, 4, L_TR_SEQ);
      DBMS_SQL.COLUMN_VALUE(P_HS_DETAILS_CURSOR, 5, L_EV_SEQ);
      DBMS_SQL.COLUMN_VALUE(P_HS_DETAILS_CURSOR, 6, L_SEQ);
      DBMS_SQL.COLUMN_VALUE(P_HS_DETAILS_CURSOR, 7, L_DETAILS);
      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_RQ(L_FETCHED_ROWS)      := L_RQ;
      A_IC(L_FETCHED_ROWS)      := L_IC;
      A_ICNODE(L_FETCHED_ROWS)  := L_ICNODE;
      A_TR_SEQ(L_FETCHED_ROWS)  := L_TR_SEQ;
      A_EV_SEQ(L_FETCHED_ROWS)  := L_EV_SEQ;
      A_SEQ(L_FETCHED_ROWS)     := L_SEQ;
      A_DETAILS(L_FETCHED_ROWS) := L_DETAILS;
      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_HS_DETAILS_CURSOR);
      END IF;
   END LOOP;

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
      DBMS_SQL.CLOSE_CURSOR(P_HS_DETAILS_CURSOR);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
      DBMS_SQL.CLOSE_CURSOR(P_HS_DETAILS_CURSOR);
   ELSE
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;
   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
             'GetRqIcHistoryDetails', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN(P_HS_DETAILS_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(P_HS_DETAILS_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETRQICHISTORYDETAILS;

FUNCTION SAVERQICHISTORY                               
(A_RQ             IN        VARCHAR2,                  
 A_IC                IN        VARCHAR2,                  
 A_ICNODE            IN        NUMBER,                    
 A_WHO               IN        UNAPIGEN.VC20_TABLE_TYPE,   
 A_WHO_DESCRIPTION   IN        UNAPIGEN.VC40_TABLE_TYPE,   
 A_WHAT              IN        UNAPIGEN.VC60_TABLE_TYPE,   
 A_WHAT_DESCRIPTION  IN        UNAPIGEN.VC255_TABLE_TYPE,  
 A_LOGDATE           IN        UNAPIGEN.DATE_TABLE_TYPE,   
 A_WHY               IN        UNAPIGEN.VC255_TABLE_TYPE,  
 A_TR_SEQ            IN        UNAPIGEN.NUM_TABLE_TYPE,    
 A_EV_SEQ            IN        UNAPIGEN.NUM_TABLE_TYPE,    
 A_NR_OF_ROWS     IN        NUMBER)                    
RETURN NUMBER IS

L_ALLOW_MODIFY     CHAR(1);
L_LOG_HS           CHAR(1);
L_LOG_HS_DETAILS   CHAR(1);
L_LC               VARCHAR2(2);
L_LC_VERSION       VARCHAR2(20);
L_SS               VARCHAR2(2);
L_ACTIVE           CHAR(1);
L_IP_VERSION       VARCHAR2(20);

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;


   IF NVL(A_RQ, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_IC, ' ') = ' '
   OR NVL(A_ICNODE, 0) = 0 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIAUT.GETRQICAUTHORISATION(A_RQ, A_IC, A_ICNODE, L_IP_VERSION, L_LC, L_LC_VERSION, 
                                               L_SS, L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS, 
                                               L_LOG_HS_DETAILS);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      UPDATE UTRQICHS
      SET WHY = A_WHY(L_SEQ_NO)
      WHERE RQ = A_RQ
      AND IC = A_IC
      AND ICNODE = A_ICNODE
      AND WHO = A_WHO(L_SEQ_NO)
      AND WHO_DESCRIPTION = A_WHO_DESCRIPTION(L_SEQ_NO)
      AND TO_CHAR(LOGDATE) = A_LOGDATE(L_SEQ_NO)
      AND WHAT = A_WHAT(L_SEQ_NO)
      AND WHAT_DESCRIPTION = A_WHAT_DESCRIPTION(L_SEQ_NO)
      AND TR_SEQ = A_TR_SEQ(L_SEQ_NO)
      AND EV_SEQ = A_EV_SEQ(L_SEQ_NO);

      IF SQL%ROWCOUNT = 0 THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
         RAISE STPERROR;
      END IF;
   END LOOP;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveRqIcHistory', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveRqIcHistory'));
END SAVERQICHISTORY;

FUNCTION ADDRQICCOMMENT       
(A_RQ           IN  VARCHAR2, 
 A_IC           IN  VARCHAR2, 
 A_ICNODE       IN  NUMBER,   
 A_COMMENT      IN  VARCHAR2) 
RETURN NUMBER IS

L_ALLOW_MODIFY      CHAR(1);
L_LOG_HS            CHAR(1);
L_LOG_HS_DETAILS    CHAR(1);
L_LC                VARCHAR2(2);
L_LC_VERSION        VARCHAR2(20);
L_ACTIVE            CHAR(1);
L_SS                VARCHAR2(2);
L_HS_DETAILS_SEQ_NR INTEGER;
L_OLD_COMMENT       VARCHAR2(255);
L_IP_VERSION        VARCHAR2(20);

CURSOR L_RQICCOMMENTOLD_CURSOR (A_RQ IN VARCHAR2, 
                                A_IC IN VARCHAR2, A_ICNODE IN NUMBER) IS
   SELECT LAST_COMMENT
   FROM UTRQIC A
   WHERE A.RQ = A_RQ
     AND A.IC = A_IC
     AND A.ICNODE = A_ICNODE;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_RQ, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_IC, ' ') = ' '
   OR NVL(A_ICNODE, 0) = 0 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIAUT.GETRQICAUTHORISATION(A_RQ, A_IC, A_ICNODE, L_IP_VERSION, L_LC, L_LC_VERSION, 
                                               L_SS, L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS, 
                                               L_LOG_HS_DETAILS);
   IF L_RET_CODE <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   
   
   
   OPEN L_RQICCOMMENTOLD_CURSOR(A_RQ, A_IC, A_ICNODE);
   FETCH L_RQICCOMMENTOLD_CURSOR
   INTO L_OLD_COMMENT;
   CLOSE L_RQICCOMMENTOLD_CURSOR;

   UPDATE UTRQIC
   SET LAST_COMMENT = A_COMMENT 
   WHERE RQ = A_RQ
   AND IC = A_IC
   AND ICNODE = A_ICNODE;

   L_RET_CODE := UNAPIGEN.GETNEXTEVENTSEQNR(L_EV_SEQ_NR);
   IF L_RET_CODE <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   IF L_LOG_HS = '1' THEN
      INSERT INTO UTRQICHS(RQ, IC, ICNODE, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, 
                           LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES(A_RQ, A_IC, A_ICNODE, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 'Comment', 
             'comment is added on info card "'||A_IC||'"', 
             CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_COMMENT, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;   

   L_HS_DETAILS_SEQ_NR := 0;
   IF L_LOG_HS_DETAILS = '1' THEN
      IF NVL((L_OLD_COMMENT <> A_COMMENT), TRUE) AND NOT(L_OLD_COMMENT IS NULL AND A_COMMENT IS NULL)  THEN 
         L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
         INSERT INTO UTRQICHSDETAILS(RQ, IC, ICNODE, TR_SEQ, EV_SEQ, SEQ, DETAILS)
         VALUES(A_RQ, A_IC, A_ICNODE, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR, 
                'info card "'||A_IC||'" is updated: property <last_comment> changed value from "' || SUBSTR(L_OLD_COMMENT,1,40) || '" to "' || SUBSTR(A_COMMENT,1,40) || '".');
      END IF;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('AddRqIcComment', SQLERRM);
   END IF;
   IF L_RQICCOMMENTOLD_CURSOR%ISOPEN THEN
      CLOSE L_RQICCOMMENTOLD_CURSOR;
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'AddRqIcComment'));
END ADDRQICCOMMENT;

FUNCTION GETRQICCOMMENT
(A_RQ               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_IC               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_ICNODE           OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_LAST_COMMENT     OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_NR_OF_ROWS       IN OUT  NUMBER,                    
 A_WHERE_CLAUSE     IN      VARCHAR2,                  
 A_NEXT_ROWS        IN      NUMBER)                    
RETURN NUMBER IS

L_RQ                VARCHAR2(20);
L_IC                VARCHAR2(20);
L_ICNODE            NUMBER(9);
L_LAST_COMMENT      VARCHAR2(255);

L_FROM_CLAUSE       VARCHAR2(255);

BEGIN

   IF NVL(A_NR_OF_ROWS, 0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_GETRQICCOMMENT_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_GETRQICCOMMENT_CURSOR);
         P_GETRQICCOMMENT_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;
   
   
   IF A_NEXT_ROWS = 1 THEN
      IF P_GETRQICCOMMENT_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      L_SQL_STRING := 'SELECT a.rq, a.ic, a.icnode, a.last_comment FROM ';

      L_FROM_CLAUSE := 'dd' || UNAPIGEN.P_DD || '.uvrqic a ';

      
      L_WHERE_CLAUSE := ' ';
      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
         RETURN(UNAPIGEN.DBERR_WHERECLAUSE);
      ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
         L_WHERE_CLAUSE := ' WHERE a.rq = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                           ''' ORDER BY a.icnode';
      ELSE
         L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
      END IF;

      L_SQL_STRING := L_SQL_STRING || L_FROM_CLAUSE || L_WHERE_CLAUSE;

      IF P_GETRQICCOMMENT_CURSOR IS NULL THEN
         P_GETRQICCOMMENT_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;
      
      DBMS_SQL.PARSE(P_GETRQICCOMMENT_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

      DBMS_SQL.DEFINE_COLUMN(P_GETRQICCOMMENT_CURSOR, 1, L_RQ, 20);
      DBMS_SQL.DEFINE_COLUMN(P_GETRQICCOMMENT_CURSOR, 2, L_IC, 20);
      DBMS_SQL.DEFINE_COLUMN(P_GETRQICCOMMENT_CURSOR, 3, L_ICNODE);
      DBMS_SQL.DEFINE_COLUMN(P_GETRQICCOMMENT_CURSOR, 4, L_LAST_COMMENT, 255);

      L_RESULT := DBMS_SQL.EXECUTE(P_GETRQICCOMMENT_CURSOR);

   END IF;
   
   L_RESULT := DBMS_SQL.FETCH_ROWS(P_GETRQICCOMMENT_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_GETRQICCOMMENT_CURSOR, 1, L_RQ);
      DBMS_SQL.COLUMN_VALUE(P_GETRQICCOMMENT_CURSOR, 2, L_IC);
      DBMS_SQL.COLUMN_VALUE(P_GETRQICCOMMENT_CURSOR, 3, L_ICNODE);
      DBMS_SQL.COLUMN_VALUE(P_GETRQICCOMMENT_CURSOR, 4, L_LAST_COMMENT);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_RQ(L_FETCHED_ROWS) := L_RQ;
      A_IC(L_FETCHED_ROWS) := L_IC;
      A_ICNODE(L_FETCHED_ROWS) := L_ICNODE;
      A_LAST_COMMENT(L_FETCHED_ROWS) := L_LAST_COMMENT;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_GETRQICCOMMENT_CURSOR);
      END IF;

   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_GETRQICCOMMENT_CURSOR);
       P_GETRQICCOMMENT_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_GETRQICCOMMENT_CURSOR);
      P_GETRQICCOMMENT_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;
   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
             'GetRqIcComment', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN(P_GETRQICCOMMENT_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(P_GETRQICCOMMENT_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETRQICCOMMENT;

FUNCTION GETRQICACCESS                                  
(A_RQ                OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_IC                OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_ICNODE            OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_DD                OUT     UNAPIGEN.VC3_TABLE_TYPE,   
 A_DATA_DOMAIN       OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_ACCESS_RIGHTS     OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NR_OF_ROWS        IN OUT  NUMBER,                    
 A_WHERE_CLAUSE      IN      VARCHAR2)                  
RETURN NUMBER IS

L_RQ             VARCHAR2(20);
L_IC             VARCHAR2(20);
L_ICNODE         NUMBER(9);
L_DD_DESCRIPTION VARCHAR2(40);
L_AR             UNAPIGEN.CHAR1_TABLE_TYPE; 
L_DD             VARCHAR2(3);
L_DESCRIPTION    UNAPIGEN.VC40_TABLE_TYPE;
L_ROW            INTEGER;
L_DD_CURSOR      UNAPIGEN.CURSOR_REF_TYPE;
L_AR_CURSOR      UNAPIGEN.CURSOR_REF_TYPE;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      RETURN(UNAPIGEN.DBERR_WHERECLAUSE);
   ELSIF
      UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := 'WHERE rq = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') ||''' ORDER BY icnode'; 
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   
   
   
   L_SQL_STRING:= 'SELECT dd, description FROM dd'||UNAPIGEN.P_DD||'.uvdd ORDER BY dd';
   OPEN L_DD_CURSOR FOR L_SQL_STRING;
   FOR I IN 1..UNAPIGEN.P_DATADOMAINS LOOP
      FETCH L_DD_CURSOR INTO L_DD, L_DD_DESCRIPTION;
      L_DESCRIPTION(L_DD) := L_DD_DESCRIPTION;
   END LOOP;
   CLOSE L_DD_CURSOR;

   L_SQL_STRING:= 
      'SELECT ar1, ar2, ar3, ar4, ar5, ar6, ar7, ar8, ar9, ar10, ar11, ar12, ar13, ar14, ar15, ar16, ' ||
      'ar17, ar18, ar19, ar20, ar21, ar22, ar23, ar24, ar25, ar26, ar27, ar28, ar29, ar30, ar31, ' ||
      'ar32, ar33, ar34, ar35, ar36, ar37, ar38, ar39, ar40, ar41, ar42, ar43, ar44, ar45, ar46, ' ||
      'ar47, ar48, ar49, ar50, ar51, ar52, ar53, ar54, ar55, ar56, ar57, ar58, ar59, ar60, ar61, ' ||
      'ar62, ar63, ar64, ar65, ar66, ar67, ar68, ar69, ar70, ar71, ar72, ar73, ar74, ar75, ar76, ' ||
      'ar77, ar78, ar79, ar80, ar81, ar82, ar83, ar84, ar85, ar86, ar87, ar88, ar89, ar90, ar91, ' ||
      'ar92, ar93, ar94, ar95, ar96, ar97, ar98, ar99, ar100, ar101, ar102, ar103, ar104, ar105, ' ||
      'ar106, ar107, ar108, ar109, ar110, ar111, ar112, ar113, ar114, ar115, ar116, ar117, ar118, ' ||
      'ar119, ar120, ar121, ar122, ar123, ar124, ar125, ar126, ar127, ar128, rq, ic, icnode ' ||
      'FROM udrqic ' || 
       L_WHERE_CLAUSE;
   L_FETCHED_ROWS := 0;
   OPEN L_AR_CURSOR FOR L_SQL_STRING;
   LOOP
      FETCH L_AR_CURSOR INTO L_AR(1),L_AR(2),L_AR(3),L_AR(4),L_AR(5),L_AR(6),L_AR(7),L_AR(8),L_AR(9),
      L_AR(10),L_AR(11),L_AR(12),L_AR(13),L_AR(14),L_AR(15),L_AR(16),L_AR(17),L_AR(18),L_AR(19),
      L_AR(20),L_AR(21),L_AR(22),L_AR(23),L_AR(24),L_AR(25),L_AR(26),L_AR(27),L_AR(28),L_AR(29),
      L_AR(30),L_AR(31),L_AR(32),L_AR(33),L_AR(34),L_AR(35),L_AR(36),L_AR(37),L_AR(38),L_AR(39),
      L_AR(40),L_AR(41),L_AR(42),L_AR(43),L_AR(44),L_AR(45),L_AR(46),L_AR(47),L_AR(48),L_AR(49),
      L_AR(50),L_AR(51),L_AR(52),L_AR(53),L_AR(54),L_AR(55),L_AR(56),L_AR(57),L_AR(58),L_AR(59),
      L_AR(60),L_AR(61),L_AR(62),L_AR(63),L_AR(64),L_AR(65),L_AR(66),L_AR(67),L_AR(68),L_AR(69),
      L_AR(70),L_AR(71),L_AR(72),L_AR(73),L_AR(74),L_AR(75),L_AR(76),L_AR(77),L_AR(78),L_AR(79),
      L_AR(80),L_AR(81),L_AR(82),L_AR(83),L_AR(84),L_AR(85),L_AR(86),L_AR(87),L_AR(88),L_AR(89),
      L_AR(90),L_AR(91),L_AR(92),L_AR(93),L_AR(94),L_AR(95),L_AR(96),L_AR(97),L_AR(98),L_AR(99),
      L_AR(100),L_AR(101),L_AR(102),L_AR(103),L_AR(104),L_AR(105),L_AR(106),L_AR(107),L_AR(108),
      L_AR(109),L_AR(110),L_AR(111),L_AR(112),L_AR(113),L_AR(114),L_AR(115),L_AR(116),L_AR(117),
      L_AR(118),L_AR(119),L_AR(120),L_AR(121),L_AR(122),L_AR(123),L_AR(124),L_AR(125),L_AR(126),
      L_AR(127),L_AR(128), L_RQ, L_IC, L_ICNODE;
      EXIT WHEN L_AR_CURSOR%NOTFOUND;
      
      FOR L_ROW IN 1..UNAPIGEN.P_DATADOMAINS LOOP
          L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
          A_RQ(L_FETCHED_ROWS) := L_RQ;
          A_IC(L_FETCHED_ROWS) := L_IC;
          A_ICNODE(L_FETCHED_ROWS) := L_ICNODE;
          A_DD(L_FETCHED_ROWS) := TO_CHAR(L_ROW);
          A_DATA_DOMAIN(L_FETCHED_ROWS) := L_DESCRIPTION(L_ROW);
          A_ACCESS_RIGHTS(L_FETCHED_ROWS) := L_AR(L_ROW);
          IF L_FETCHED_ROWS >= A_NR_OF_ROWS THEN
             EXIT;
          END IF;
      END LOOP;
      IF L_FETCHED_ROWS >= A_NR_OF_ROWS THEN
         EXIT;
      END IF;
   END LOOP;
   CLOSE L_AR_CURSOR;

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
WHEN NO_DATA_FOUND THEN
   IF L_DD_CURSOR%ISOPEN THEN
      CLOSE L_DD_CURSOR;
   END IF;
   IF L_AR_CURSOR%ISOPEN THEN
      CLOSE L_AR_CURSOR;
   END IF;
   RETURN(UNAPIGEN.DBERR_SYSDEFAULTS);
WHEN OTHERS THEN
   L_SQLERRM := SQLERRM;
   IF L_DD_CURSOR%ISOPEN THEN
      CLOSE L_DD_CURSOR;
   END IF;
   IF L_AR_CURSOR%ISOPEN THEN
      CLOSE L_AR_CURSOR;
   END IF;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
           'GetRqIcAccess', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETRQICACCESS;

FUNCTION SAVERQICACCESS                                 
(A_RQ                IN      VARCHAR2,                  
 A_IC                IN      VARCHAR2,                  
 A_ICNODE            IN      NUMBER,                    
 A_DD                IN      UNAPIGEN.VC3_TABLE_TYPE,   
 A_ACCESS_RIGHTS     IN      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NR_OF_ROWS        IN      NUMBER,                    
 A_MODIFY_REASON     IN      VARCHAR2)                  
RETURN NUMBER IS

L_ALLOW_MODIFY         CHAR(1);
L_LOG_HS               CHAR(1);
L_LOG_HS_DETAILS       CHAR(1);
L_ACTIVE               CHAR(1);
L_LC                   VARCHAR2(2);
L_LC_VERSION           VARCHAR2(20);
L_SS                   VARCHAR2(2);
L_AR_CURSOR            INTEGER;
L_WRITE_FOUND          BOOLEAN;
L_HS_DETAILS_SEQ_NR    INTEGER;
L_IP_VERSION           VARCHAR2(20);

CURSOR L_RQICOLD_CURSOR (A_RQ IN VARCHAR2, A_IC IN VARCHAR2, A_ICNODE IN NUMBER) IS
   SELECT A.*
   FROM UDRQIC A
   WHERE A.RQ = A_RQ
     AND A.IC = A_IC
     AND A.ICNODE = A_ICNODE;
L_RQICOLD_REC UDRQIC%ROWTYPE;
L_RQICNEW_REC UDRQIC%ROWTYPE;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_NR_OF_ROWS, -1) < 0 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NROFROWS;
      RAISE STPERROR;
   END IF;

   
   
   
   IF NVL(A_RQ, ' ') = ' ' OR
      NVL(A_IC, ' ') = ' ' OR
      NVL(A_ICNODE, 0) = 0 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIAUT.GETRQICAUTHORISATION(A_RQ, A_IC, A_ICNODE, L_IP_VERSION, L_LC, L_LC_VERSION, 
                                               L_SS, L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS, 
                                               L_LOG_HS_DETAILS);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTRQIC
   SET ALLOW_MODIFY = '#'
   WHERE RQ = A_RQ
      AND IC = A_IC
      AND ICNODE = A_ICNODE;
   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR ;
   END IF;

   
   
   
   
   L_SQL_STRING := '';
   L_WRITE_FOUND := FALSE;
   FOR L_CTR IN 1..A_NR_OF_ROWS LOOP

      IF NVL(A_ACCESS_RIGHTS(L_CTR), 'N') NOT IN ('R','W','N') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_AR;
         RAISE STPERROR;
      END IF;

      IF NVL(A_ACCESS_RIGHTS(L_CTR), 'N') = 'W' THEN
         L_WRITE_FOUND := TRUE;
      END IF;

      IF (NVL(TO_NUMBER(A_DD(L_CTR)), -1) < 0) OR (NVL(TO_NUMBER(A_DD(L_CTR)), -1) > UNAPIGEN.P_DATADOMAINS) THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_DD;
         RAISE STPERROR;
      END IF;

      L_SQL_STRING := L_SQL_STRING || ' ar' || A_DD(L_CTR) ||
                   '= ''' || NVL(A_ACCESS_RIGHTS(L_CTR), 'N') || '''';
      IF L_CTR <> A_NR_OF_ROWS THEN
        L_SQL_STRING :=  L_SQL_STRING || ',';
      END IF;
   END LOOP;

   
   IF NOT L_WRITE_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOWRITEACCESS;
      RAISE STPERROR;
   END IF;

   IF NVL(L_SQL_STRING, ' ')  = ' ' THEN
      
      
      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NROFROWS;
      RAISE STPERROR;
   ELSE
      
      
      
      OPEN L_RQICOLD_CURSOR(A_RQ, A_IC, A_ICNODE);
      FETCH L_RQICOLD_CURSOR
      INTO L_RQICOLD_REC;
      CLOSE L_RQICOLD_CURSOR;
      L_RQICNEW_REC := L_RQICOLD_REC;
            
      
      
      
      L_SQL_STRING := 
         'UPDATE utrqic SET '|| L_SQL_STRING || 
         ' WHERE rq = ''' || REPLACE(A_RQ, '''', '''''') || ''' AND'|| 
         ' ic=''' || REPLACE(A_IC, '''', '''''') || ''' AND icnode=' || A_ICNODE || ' ' || 
         'RETURNING';
      FOR I IN 1..UNAPIGEN.P_DATADOMAINS LOOP
         L_SQL_STRING := L_SQL_STRING||' ar'||I||',';
      END LOOP;
      FOR I IN (UNAPIGEN.P_DATADOMAINS+1)..128 LOOP
         L_SQL_STRING := L_SQL_STRING||' ''N'',';
      END LOOP;
      L_SQL_STRING := SUBSTR(L_SQL_STRING, 1, LENGTH(L_SQL_STRING)-1);   
      L_SQL_STRING := L_SQL_STRING||
         ' INTO :ar1, :ar2, :ar3, :ar4, :ar5, :ar6, :ar7, :ar8, :ar9, :ar10, ' ||
              ':ar11, :ar12, :ar13, :ar14, :ar15, :ar16, :ar17, :ar18, :ar19, :ar20, :ar21, :ar22, ' ||
              ':ar23, :ar24, :ar25, :ar26, :ar27, :ar28, :ar29, :ar30, :ar31, :ar32, :ar33, :ar34, ' ||
              ':ar35, :ar36, :ar37, :ar38, :ar39, :ar40, :ar41, :ar42, :ar43, :ar44, :ar45, :ar46, ' ||
              ':ar47, :ar48, :ar49, :ar50, :ar51, :ar52, :ar53, :ar54, :ar55, :ar56, :ar57, :ar58, ' ||
              ':ar59, :ar60, :ar61, :ar62, :ar63, :ar64, :ar65, :ar66, :ar67, :ar68, :ar69, :ar70, ' ||
              ':ar71, :ar72, :ar73, :ar74, :ar75, :ar76, :ar77, :ar78, :ar79, :ar80, :ar81, :ar82, ' ||
              ':ar83, :ar84, :ar85, :ar86, :ar87, :ar88, :ar89, :ar90, :ar91, :ar92, :ar93, :ar94, ' ||
              ':ar95, :ar96, :ar97, :ar98, :ar99, :ar100, :ar101, :ar102, :ar103, :ar104, :ar105, ' ||
              ':ar106, :ar107, :ar108, :ar109, :ar110, :ar111, :ar112, :ar113, :ar114, :ar115, :ar116, ' ||
              ':ar117, :ar118, :ar119, :ar120, :ar121, :ar122, :ar123, :ar124, :ar125, :ar126, :ar127, ' ||
              ':ar128';
         
      
      
      
      L_AR_CURSOR := DBMS_SQL.OPEN_CURSOR;
      DBMS_SQL.PARSE(L_AR_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar1',   L_RQICNEW_REC.AR1,   1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar2',   L_RQICNEW_REC.AR2,   1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar3',   L_RQICNEW_REC.AR3,   1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar4',   L_RQICNEW_REC.AR4,   1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar5',   L_RQICNEW_REC.AR5,   1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar6',   L_RQICNEW_REC.AR6,   1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar7',   L_RQICNEW_REC.AR7,   1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar8',   L_RQICNEW_REC.AR8,   1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar9',   L_RQICNEW_REC.AR9,   1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar10',  L_RQICNEW_REC.AR10,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar11',  L_RQICNEW_REC.AR11,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar12',  L_RQICNEW_REC.AR12,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar13',  L_RQICNEW_REC.AR13,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar14',  L_RQICNEW_REC.AR14,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar15',  L_RQICNEW_REC.AR15,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar16',  L_RQICNEW_REC.AR16,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar17',  L_RQICNEW_REC.AR17,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar18',  L_RQICNEW_REC.AR18,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar19',  L_RQICNEW_REC.AR19,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar20',  L_RQICNEW_REC.AR20,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar21',  L_RQICNEW_REC.AR21,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar22',  L_RQICNEW_REC.AR22,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar23',  L_RQICNEW_REC.AR23,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar24',  L_RQICNEW_REC.AR24,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar25',  L_RQICNEW_REC.AR25,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar26',  L_RQICNEW_REC.AR26,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar27',  L_RQICNEW_REC.AR27,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar28',  L_RQICNEW_REC.AR28,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar29',  L_RQICNEW_REC.AR29,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar30',  L_RQICNEW_REC.AR30,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar31',  L_RQICNEW_REC.AR31,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar32',  L_RQICNEW_REC.AR32,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar33',  L_RQICNEW_REC.AR33,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar34',  L_RQICNEW_REC.AR34,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar35',  L_RQICNEW_REC.AR35,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar36',  L_RQICNEW_REC.AR36,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar37',  L_RQICNEW_REC.AR37,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar38',  L_RQICNEW_REC.AR38,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar39',  L_RQICNEW_REC.AR39,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar40',  L_RQICNEW_REC.AR40,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar41',  L_RQICNEW_REC.AR41,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar42',  L_RQICNEW_REC.AR42,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar43',  L_RQICNEW_REC.AR43,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar44',  L_RQICNEW_REC.AR44,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar45',  L_RQICNEW_REC.AR45,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar46',  L_RQICNEW_REC.AR46,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar47',  L_RQICNEW_REC.AR47,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar48',  L_RQICNEW_REC.AR48,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar49',  L_RQICNEW_REC.AR49,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar50',  L_RQICNEW_REC.AR50,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar51',  L_RQICNEW_REC.AR51,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar52',  L_RQICNEW_REC.AR52,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar53',  L_RQICNEW_REC.AR53,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar54',  L_RQICNEW_REC.AR54,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar55',  L_RQICNEW_REC.AR55,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar56',  L_RQICNEW_REC.AR56,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar57',  L_RQICNEW_REC.AR57,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar58',  L_RQICNEW_REC.AR58,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar59',  L_RQICNEW_REC.AR59,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar60',  L_RQICNEW_REC.AR60,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar61',  L_RQICNEW_REC.AR61,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar62',  L_RQICNEW_REC.AR62,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar63',  L_RQICNEW_REC.AR63,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar64',  L_RQICNEW_REC.AR64,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar65',  L_RQICNEW_REC.AR65,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar66',  L_RQICNEW_REC.AR66,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar67',  L_RQICNEW_REC.AR67,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar68',  L_RQICNEW_REC.AR68,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar69',  L_RQICNEW_REC.AR69,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar70',  L_RQICNEW_REC.AR70,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar71',  L_RQICNEW_REC.AR71,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar72',  L_RQICNEW_REC.AR72,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar73',  L_RQICNEW_REC.AR73,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar74',  L_RQICNEW_REC.AR74,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar75',  L_RQICNEW_REC.AR75,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar76',  L_RQICNEW_REC.AR76,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar77',  L_RQICNEW_REC.AR77,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar78',  L_RQICNEW_REC.AR78,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar79',  L_RQICNEW_REC.AR79,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar80',  L_RQICNEW_REC.AR80,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar81',  L_RQICNEW_REC.AR81,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar82',  L_RQICNEW_REC.AR82,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar83',  L_RQICNEW_REC.AR83,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar84',  L_RQICNEW_REC.AR84,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar85',  L_RQICNEW_REC.AR85,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar86',  L_RQICNEW_REC.AR86,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar87',  L_RQICNEW_REC.AR87,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar88',  L_RQICNEW_REC.AR88,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar89',  L_RQICNEW_REC.AR89,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar90',  L_RQICNEW_REC.AR90,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar91',  L_RQICNEW_REC.AR91,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar92',  L_RQICNEW_REC.AR92,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar93',  L_RQICNEW_REC.AR93,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar94',  L_RQICNEW_REC.AR94,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar95',  L_RQICNEW_REC.AR95,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar96',  L_RQICNEW_REC.AR96,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar97',  L_RQICNEW_REC.AR97,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar98',  L_RQICNEW_REC.AR98,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar99',  L_RQICNEW_REC.AR99,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar100', L_RQICNEW_REC.AR100, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar101', L_RQICNEW_REC.AR101, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar102', L_RQICNEW_REC.AR102, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar103', L_RQICNEW_REC.AR103, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar104', L_RQICNEW_REC.AR104, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar105', L_RQICNEW_REC.AR105, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar106', L_RQICNEW_REC.AR106, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar107', L_RQICNEW_REC.AR107, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar108', L_RQICNEW_REC.AR108, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar109', L_RQICNEW_REC.AR109, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar110', L_RQICNEW_REC.AR110, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar111', L_RQICNEW_REC.AR111, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar112', L_RQICNEW_REC.AR112, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar113', L_RQICNEW_REC.AR113, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar114', L_RQICNEW_REC.AR114, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar115', L_RQICNEW_REC.AR115, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar116', L_RQICNEW_REC.AR116, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar117', L_RQICNEW_REC.AR117, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar118', L_RQICNEW_REC.AR118, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar119', L_RQICNEW_REC.AR119, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar120', L_RQICNEW_REC.AR120, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar121', L_RQICNEW_REC.AR121, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar122', L_RQICNEW_REC.AR122, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar123', L_RQICNEW_REC.AR123, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar124', L_RQICNEW_REC.AR124, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar125', L_RQICNEW_REC.AR125, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar126', L_RQICNEW_REC.AR126, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar127', L_RQICNEW_REC.AR127, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar128', L_RQICNEW_REC.AR128, 1);

      L_RESULT := DBMS_SQL.EXECUTE(L_AR_CURSOR);

      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar1',   L_RQICNEW_REC.AR1  );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar2',   L_RQICNEW_REC.AR2  );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar3',   L_RQICNEW_REC.AR3  );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar4',   L_RQICNEW_REC.AR4  );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar5',   L_RQICNEW_REC.AR5  );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar6',   L_RQICNEW_REC.AR6  );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar7',   L_RQICNEW_REC.AR7  );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar8',   L_RQICNEW_REC.AR8  );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar9',   L_RQICNEW_REC.AR9  );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar10',  L_RQICNEW_REC.AR10 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar11',  L_RQICNEW_REC.AR11 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar12',  L_RQICNEW_REC.AR12 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar13',  L_RQICNEW_REC.AR13 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar14',  L_RQICNEW_REC.AR14 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar15',  L_RQICNEW_REC.AR15 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar16',  L_RQICNEW_REC.AR16 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar17',  L_RQICNEW_REC.AR17 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar18',  L_RQICNEW_REC.AR18 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar19',  L_RQICNEW_REC.AR19 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar20',  L_RQICNEW_REC.AR20 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar21',  L_RQICNEW_REC.AR21 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar22',  L_RQICNEW_REC.AR22 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar23',  L_RQICNEW_REC.AR23 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar24',  L_RQICNEW_REC.AR24 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar25',  L_RQICNEW_REC.AR25 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar26',  L_RQICNEW_REC.AR26 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar27',  L_RQICNEW_REC.AR27 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar28',  L_RQICNEW_REC.AR28 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar29',  L_RQICNEW_REC.AR29 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar30',  L_RQICNEW_REC.AR30 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar31',  L_RQICNEW_REC.AR31 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar32',  L_RQICNEW_REC.AR32 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar33',  L_RQICNEW_REC.AR33 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar34',  L_RQICNEW_REC.AR34 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar35',  L_RQICNEW_REC.AR35 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar36',  L_RQICNEW_REC.AR36 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar37',  L_RQICNEW_REC.AR37 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar38',  L_RQICNEW_REC.AR38 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar39',  L_RQICNEW_REC.AR39 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar40',  L_RQICNEW_REC.AR40 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar41',  L_RQICNEW_REC.AR41 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar42',  L_RQICNEW_REC.AR42 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar43',  L_RQICNEW_REC.AR43 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar44',  L_RQICNEW_REC.AR44 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar45',  L_RQICNEW_REC.AR45 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar46',  L_RQICNEW_REC.AR46 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar47',  L_RQICNEW_REC.AR47 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar48',  L_RQICNEW_REC.AR48 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar49',  L_RQICNEW_REC.AR49 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar50',  L_RQICNEW_REC.AR50 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar51',  L_RQICNEW_REC.AR51 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar52',  L_RQICNEW_REC.AR52 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar53',  L_RQICNEW_REC.AR53 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar54',  L_RQICNEW_REC.AR54 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar55',  L_RQICNEW_REC.AR55 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar56',  L_RQICNEW_REC.AR56 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar57',  L_RQICNEW_REC.AR57 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar58',  L_RQICNEW_REC.AR58 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar59',  L_RQICNEW_REC.AR59 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar60',  L_RQICNEW_REC.AR60 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar61',  L_RQICNEW_REC.AR61 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar62',  L_RQICNEW_REC.AR62 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar63',  L_RQICNEW_REC.AR63 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar64',  L_RQICNEW_REC.AR64 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar65',  L_RQICNEW_REC.AR65 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar66',  L_RQICNEW_REC.AR66 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar67',  L_RQICNEW_REC.AR67 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar68',  L_RQICNEW_REC.AR68 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar69',  L_RQICNEW_REC.AR69 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar70',  L_RQICNEW_REC.AR70 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar71',  L_RQICNEW_REC.AR71 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar72',  L_RQICNEW_REC.AR72 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar73',  L_RQICNEW_REC.AR73 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar74',  L_RQICNEW_REC.AR74 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar75',  L_RQICNEW_REC.AR75 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar76',  L_RQICNEW_REC.AR76 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar77',  L_RQICNEW_REC.AR77 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar78',  L_RQICNEW_REC.AR78 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar79',  L_RQICNEW_REC.AR79 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar80',  L_RQICNEW_REC.AR80 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar81',  L_RQICNEW_REC.AR81 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar82',  L_RQICNEW_REC.AR82 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar83',  L_RQICNEW_REC.AR83 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar84',  L_RQICNEW_REC.AR84 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar85',  L_RQICNEW_REC.AR85 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar86',  L_RQICNEW_REC.AR86 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar87',  L_RQICNEW_REC.AR87 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar88',  L_RQICNEW_REC.AR88 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar89',  L_RQICNEW_REC.AR89 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar90',  L_RQICNEW_REC.AR90 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar91',  L_RQICNEW_REC.AR91 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar92',  L_RQICNEW_REC.AR92 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar93',  L_RQICNEW_REC.AR93 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar94',  L_RQICNEW_REC.AR94 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar95',  L_RQICNEW_REC.AR95 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar96',  L_RQICNEW_REC.AR96 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar97',  L_RQICNEW_REC.AR97 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar98',  L_RQICNEW_REC.AR98 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar99',  L_RQICNEW_REC.AR99 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar100', L_RQICNEW_REC.AR100);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar101', L_RQICNEW_REC.AR101);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar102', L_RQICNEW_REC.AR102);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar103', L_RQICNEW_REC.AR103);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar104', L_RQICNEW_REC.AR104);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar105', L_RQICNEW_REC.AR105);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar106', L_RQICNEW_REC.AR106);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar107', L_RQICNEW_REC.AR107);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar108', L_RQICNEW_REC.AR108);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar109', L_RQICNEW_REC.AR109);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar110', L_RQICNEW_REC.AR110);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar111', L_RQICNEW_REC.AR111);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar112', L_RQICNEW_REC.AR112);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar113', L_RQICNEW_REC.AR113);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar114', L_RQICNEW_REC.AR114);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar115', L_RQICNEW_REC.AR115);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar116', L_RQICNEW_REC.AR116);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar117', L_RQICNEW_REC.AR117);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar118', L_RQICNEW_REC.AR118);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar119', L_RQICNEW_REC.AR119);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar120', L_RQICNEW_REC.AR120);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar121', L_RQICNEW_REC.AR121);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar122', L_RQICNEW_REC.AR122);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar123', L_RQICNEW_REC.AR123);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar124', L_RQICNEW_REC.AR124);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar125', L_RQICNEW_REC.AR125);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar126', L_RQICNEW_REC.AR126);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar127', L_RQICNEW_REC.AR127);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar128', L_RQICNEW_REC.AR128);

      IF L_RESULT = 0 THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
         RAISE STPERROR;
      END IF;

      DBMS_SQL.CLOSE_CURSOR(L_AR_CURSOR);

      
      
      
      L_EVENT_TP := 'RqIcAccessRightsUpdated';
      L_EV_SEQ_NR := -1;
      L_EV_DETAILS := 'rq=' || A_RQ || 
                      '#icnode=' || A_ICNODE ||
                      '#ip_version=' || L_IP_VERSION;
      L_RESULT := UNAPIEV.INSERTEVENT('SaveRqIcAccess', UNAPIGEN.P_EVMGR_NAME, 'rqic', A_IC, L_LC, 
                                      L_LC_VERSION, L_SS, L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);
      IF L_RESULT <>0 THEN
         UNAPIGEN.P_TXN_ERROR := L_RESULT;
         RAISE STPERROR;
      END IF;

      IF L_LOG_HS = '1' THEN
         INSERT INTO UTRQICHS(RQ, IC, ICNODE ,WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, 
                              LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES(A_RQ, A_IC, A_ICNODE, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                'access rights for info card "'||A_IC||'" are updated', 
                CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;

      L_HS_DETAILS_SEQ_NR := 0;
      IF L_LOG_HS_DETAILS = '1' THEN
         L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
         INSERT INTO UTRQICHSDETAILS(RQ, IC, ICNODE, TR_SEQ, EV_SEQ, SEQ, DETAILS)
         VALUES(A_RQ, A_IC, A_ICNODE, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR,
                'access rights for info card "'||A_IC||'" are updated');

         UNAPIHSDETAILS.ADDRQICHSDETAILS(L_RQICOLD_REC, L_RQICNEW_REC, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, 
                                         L_HS_DETAILS_SEQ_NR);
      END IF;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveRqIcAccess', SQLERRM);
   END IF;
   IF DBMS_SQL.IS_OPEN(L_AR_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_AR_CURSOR);
   END IF;
   IF L_RQICOLD_CURSOR%ISOPEN THEN
      CLOSE L_RQICOLD_CURSOR;
   END IF;   
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveRqIcAccess'));
END SAVERQICACCESS;

FUNCTION RQICTRANSITIONAUTHORISED          
(A_RQ                IN      VARCHAR2,     
 A_IC                IN      VARCHAR2,     
 A_ICNODE            IN      NUMBER,       
 A_LC                IN OUT  VARCHAR2,     
 A_LC_VERSION        IN OUT  VARCHAR2,     
 A_OLD_SS            IN OUT  VARCHAR2,     
 A_NEW_SS            IN      VARCHAR2,     
 A_AUTHORISED_BY     IN      VARCHAR2,     
 A_LC_SS_FROM        OUT     VARCHAR2,     
 A_TR_NO             OUT     NUMBER,       
 A_ALLOW_MODIFY      OUT     CHAR,         
 A_ACTIVE            OUT     CHAR,         
 A_LOG_HS            OUT     CHAR,         
 A_LOG_HS_DETAILS    OUT     CHAR)         
RETURN NUMBER IS

L_LC                  VARCHAR2(2);
L_LC_VERSION          VARCHAR2(20);
L_SS                  VARCHAR2(2);
L_OLD_ACTIVE          CHAR(1);
L_OLD_ALLOW_MODIFY    CHAR(1);
L_RQ_LC               VARCHAR2(2);
L_RQ_LC_VERSION       VARCHAR2(20);
L_RQ_SS               VARCHAR2(2);
L_RQ_ALLOW_MODIFY     CHAR(1);
L_RQ_ACTIVE           CHAR(1);
L_RQ_LOG_HS           CHAR(1);
L_RQ_LOG_HS_DETAILS   CHAR(1);
L_RQ_RT_VERSION       VARCHAR2(20);
L_TR_OK               BOOLEAN;
L_IP_VERSION          VARCHAR2(20);
L_LOCK_IC             VARCHAR2(20);

CURSOR L_COS_CURSOR(A_LC VARCHAR2, A_LC_VERSION VARCHAR2, A_SS_FROM VARCHAR2, A_SS_TO VARCHAR2, A_UP NUMBER, A_USER VARCHAR2) IS
   SELECT SS_FROM, TR_NO
   FROM  UTLCUS
   WHERE LC  = A_LC
     AND VERSION = A_LC_VERSION
     AND SS_FROM IN (A_SS_FROM, '@@')
     AND SS_TO   = A_SS_TO
     AND US IN (A_USER, '~ANY~',  'UP'||TO_CHAR(A_UP))
   ORDER BY SS_FROM DESC, TR_NO;

CURSOR L_TR_CURSOR(A_LC VARCHAR2, A_LC_VERSION VARCHAR2, A_SS_FROM VARCHAR2, A_SS_TO VARCHAR2) IS
   SELECT SS_FROM, TR_NO
   FROM  UTLCTR
   WHERE LC  = A_LC
     AND VERSION = A_LC_VERSION
     AND SS_FROM IN (A_SS_FROM, '@@')
     AND SS_TO   = A_SS_TO
   ORDER BY SS_FROM DESC, TR_NO;

CURSOR L_TRDYN_CURSOR(A_LC VARCHAR2, A_LC_VERSION VARCHAR2, A_SS_FROM VARCHAR2, A_SS_TO VARCHAR2) IS
   SELECT *
   FROM  UTLCUS
   WHERE LC  = A_LC
     AND VERSION = A_LC_VERSION
     AND SS_FROM IN (A_SS_FROM, '@@')
     AND SS_TO   = A_SS_TO
     AND US = '~DYNAMIC~'
   ORDER BY SS_FROM DESC, TR_NO;

BEGIN
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_RQ, ' ') = ' ' OR
      NVL(A_IC, ' ') = ' ' OR
      NVL(A_ICNODE, 0) = 0 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   
   SELECT IC
   INTO L_LOCK_IC
   FROM UTRQIC
   WHERE RQ = A_RQ
   AND IC = A_IC
   AND ICNODE = A_ICNODE
   FOR UPDATE;

   L_RET_CODE := UNAPIAUT.GETRQICAUTHORISATION(A_RQ, A_IC, A_ICNODE, L_IP_VERSION, L_LC, L_LC_VERSION, 
                                               L_SS, L_OLD_ALLOW_MODIFY, L_OLD_ACTIVE, A_LOG_HS, 
                                               A_LOG_HS_DETAILS);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      IF L_RET_CODE <> UNAPIGEN.DBERR_NOTMODIFIABLE THEN
         UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
         RAISE STPERROR;
      ELSE
         L_RET_CODE := UNAPIAUT.GETRQAUTHORISATION(A_RQ, L_RQ_RT_VERSION, L_RQ_LC, L_RQ_LC_VERSION, 
                                                   L_RQ_SS, L_RQ_ALLOW_MODIFY, L_RQ_ACTIVE, L_RQ_LOG_HS, 
                                                   L_RQ_LOG_HS_DETAILS);
         IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
            UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
            RAISE STPERROR;
         END IF;
      END IF;
   END IF;
   
   L_SS := NVL(L_SS, '@~');

   IF A_LC IS NULL THEN
      
      IF L_LC IS NULL THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OBJECTLCMATCH;
         RAISE STPERROR;
      END IF;
      IF L_LC_VERSION IS NULL THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OBJECTLCVERSIONMATCH;
         RAISE STPERROR;
      END IF;
      A_LC := L_LC;
      A_LC_VERSION := L_LC_VERSION;
   ELSE
      
      IF A_LC <> NVL(L_LC, '####') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OBJECTLCMATCH;
         RAISE STPERROR;
      END IF;

      
      
      IF L_LC_VERSION IS NULL THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OBJECTLCVERSIONMATCH;
         RAISE STPERROR;
      END IF;
      A_LC_VERSION := L_LC_VERSION;
   END IF;

   IF NVL(A_OLD_SS, ' ') = ' ' THEN
      
      A_OLD_SS := L_SS;
   ELSE
      
      IF A_OLD_SS <> L_SS THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OBJECTSSMATCH;
         RAISE STPERROR;
      END IF;
   END IF;

   BEGIN
      SELECT ALLOW_MODIFY, ACTIVE
      INTO A_ALLOW_MODIFY, A_ACTIVE
      FROM UTSS
      WHERE SS = A_NEW_SS;
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOSS;
      RAISE STPERROR;
   END;

   
   
   
   L_TR_OK := FALSE;
   OPEN L_COS_CURSOR (L_LC, L_LC_VERSION, L_SS, A_NEW_SS, UNAPIGEN.P_CURRENT_UP, NVL(A_AUTHORISED_BY, UNAPIGEN.P_USER))  ;
   FETCH L_COS_CURSOR INTO  A_LC_SS_FROM, A_TR_NO;

   IF L_COS_CURSOR%FOUND THEN
      L_TR_OK := TRUE;
   ELSE
      
      
      OPEN L_TR_CURSOR (L_LC, L_LC_VERSION, L_SS, A_NEW_SS);
      FETCH L_TR_CURSOR INTO  A_LC_SS_FROM, A_TR_NO;
      IF L_TR_CURSOR%NOTFOUND THEN
         UNAPIAUT.P_NOT_AUTHORISED := 'Transition lc(ss_from => ss_to)='||L_LC||'('||NVL(L_SS,'NULL')||' OR @@ => '||A_NEW_SS||') does not exist';      
         L_TR_OK := FALSE;
      ELSE
      
         
         
         IF NVL(A_AUTHORISED_BY, UNAPIGEN.P_USER) = UNAPIGEN.P_DBA_NAME THEN
            L_TR_OK := TRUE;
         ELSE
            
            
            
            
            
            
            
            OPEN L_TRDYN_CURSOR (L_LC, L_LC_VERSION, L_SS, A_NEW_SS);
            LOOP
               FETCH L_TRDYN_CURSOR INTO  UNAPIAUT.P_LCTRUS_REC;
               IF L_TRDYN_CURSOR%NOTFOUND THEN
                  UNAPIAUT.P_NOT_AUTHORISED := 'Transition lc(ss_from => ss_to)='||L_LC||'('||NVL(L_SS,'NULL')||' OR @@ => '||A_NEW_SS||' not authorised for user:';
                  L_TR_OK := FALSE;
                  EXIT;
               ELSE
                  UNAPIAUT.P_OBJECT_TP      := 'ic';
                  UNAPIAUT.P_OBJECT_ID      := A_IC;
                  UNAPIAUT.P_OBJECT_VERSION := NULL;
                  UNAPIAUT.P_LC             := L_LC;
                  UNAPIAUT.P_SS_FROM        := L_SS;
                  UNAPIAUT.P_LC_SS_FROM     := UNAPIAUT.P_LCTRUS_REC.SS_FROM;
                  UNAPIAUT.P_SS_TO          := A_NEW_SS;
                  UNAPIAUT.P_TR_NO          := UNAPIAUT.P_LCTRUS_REC.TR_NO;
                  UNAPIAUT.P_RQ             := A_RQ;
                  UNAPIAUT.P_CH             := NULL;
                  UNAPIAUT.P_SD             := NULL;
                  UNAPIAUT.P_SC             := NULL;
                  UNAPIAUT.P_WS             := NULL;
                  UNAPIAUT.P_PG             := NULL;    UNAPIAUT.P_PGNODE := NULL;
                  UNAPIAUT.P_PA             := NULL;    UNAPIAUT.P_PANODE := NULL;
                  UNAPIAUT.P_ME             := NULL;    UNAPIAUT.P_MENODE := NULL;
                  UNAPIAUT.P_IC             := A_IC;    UNAPIAUT.P_ICNODE := A_ICNODE;
                  UNAPIAUT.P_II             := NULL;    UNAPIAUT.P_IINODE := NULL;
                  UNAPIAUT.P_PP_KEY1        := NULL;                  
                  UNAPIAUT.P_PP_KEY2        := NULL;                  
                  UNAPIAUT.P_PP_KEY3        := NULL;                  
                  UNAPIAUT.P_PP_KEY4        := NULL;                  
                  UNAPIAUT.P_PP_KEY5        := NULL;                  
                  UNAPIAUT.P_LAB            := NULL;
                  A_LC_SS_FROM := UNAPIAUT.P_LCTRUS_REC.SS_FROM;
                  A_TR_NO := UNAPIAUT.P_LCTRUS_REC.TR_NO;
                  L_TR_OK := UNACCESS.TRANSITIONAUTHORISED;
                  IF L_TR_OK THEN
                     UNAPIAUT.P_NOT_AUTHORISED := NULL;
                     EXIT;
                  ELSE
                     
                     
                     
                     UNAPIAUT.P_NOT_AUTHORISED := 'Dynamic user authorisation evaluation returned False Transition lc(ss_from => ss_to)='||L_LC||'('||NVL(L_SS,'NULL')||' OR @@ => '||A_NEW_SS||' not authorised for user:';
                  END IF;
               END IF;
            END LOOP;
            CLOSE L_TRDYN_CURSOR;
         END IF;
      END IF;
      CLOSE L_TR_CURSOR;
   END IF;
   CLOSE L_COS_CURSOR;
   
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NOT L_TR_OK THEN
      RETURN(UNAPIGEN.DBERR_NOTAUTHORISED);
   ELSE
      RETURN(UNAPIGEN.DBERR_SUCCESS);
   END IF;

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('RqIcTransitionAuthorised', SQLERRM);
   END IF;
   IF L_COS_CURSOR%ISOPEN THEN
      CLOSE L_COS_CURSOR;
   END IF;
   IF L_TR_CURSOR%ISOPEN THEN
      CLOSE L_TR_CURSOR;
   END IF;
   IF L_TRDYN_CURSOR%ISOPEN THEN
      CLOSE L_TRDYN_CURSOR;
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'RqIcTransitionAuthorised'));
END RQICTRANSITIONAUTHORISED;

FUNCTION CHANGERQICSTATUS                  
(A_RQ                IN      VARCHAR2,     
 A_IC                IN      VARCHAR2,     
 A_ICNODE            IN      NUMBER,       
 A_OLD_SS            IN      VARCHAR2,     
 A_NEW_SS            IN      VARCHAR2,     
 A_LC                IN      VARCHAR2,     
 A_LC_VERSION        IN      VARCHAR2,     
 A_MODIFY_REASON     IN      VARCHAR2)     
RETURN NUMBER IS

L_LC                      VARCHAR2(2);
L_LC_VERSION              VARCHAR2(20);
L_OLD_SS                  VARCHAR2(2);
L_ALLOW_MODIFY            CHAR(1);
L_ACTIVE                  CHAR(1);
L_LOG_HS                  CHAR(1);
L_LOG_HS_DETAILS          CHAR(1);
L_LC_SS_FROM              VARCHAR2(2);
L_TR_NO                   NUMBER(3);
L_HS_DETAILS_SEQ_NR       INTEGER;
L_OBJECT_ID               VARCHAR2(255);
L_IP_VERSION              VARCHAR2(20);

CURSOR L_VERSION_CURSOR IS
   SELECT IP_VERSION 
   FROM UTRQIC
   WHERE RQ     = A_RQ
     AND IC     = A_IC
     AND ICNODE = A_ICNODE;
  
BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   L_LC := A_LC;
   L_LC_VERSION := A_LC_VERSION;
   L_OLD_SS := A_OLD_SS; 
   L_RET_CODE := UNAPIRQIC2.RQICTRANSITIONAUTHORISED
                    (A_RQ, A_IC, A_ICNODE,
                     L_LC, L_LC_VERSION, L_OLD_SS, A_NEW_SS,
                     UNAPIGEN.P_USER,
                     L_LC_SS_FROM, L_TR_NO, 
                     L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS, L_LOG_HS_DETAILS);
                  
                     
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS AND
      L_RET_CODE <> UNAPIGEN.DBERR_NOTAUTHORISED THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   IF L_RET_CODE = UNAPIGEN.DBERR_SUCCESS THEN
      UPDATE UTRQIC
      SET SS = A_NEW_SS,
          ALLOW_MODIFY = '#',
          ACTIVE = L_ACTIVE
      WHERE RQ = A_RQ
         AND IC = A_IC
         AND ICNODE = A_ICNODE;
   
      IF SQL%ROWCOUNT = 0 THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
         RAISE STPERROR;
      END IF;
   
      OPEN L_VERSION_CURSOR;
      FETCH L_VERSION_CURSOR INTO L_IP_VERSION;
      IF L_VERSION_CURSOR%NOTFOUND THEN
         CLOSE L_VERSION_CURSOR;
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_IPVERSION;
         RAISE STPERROR;
      END IF;
      CLOSE L_VERSION_CURSOR;
      
      L_EVENT_TP := 'RqIcStatusChanged';
      L_EV_SEQ_NR := -1;
      L_EV_DETAILS := 'rq=' || A_RQ || 
                      '#icnode=' || TO_CHAR(A_ICNODE) ||
                      '#tr_no=' || L_TR_NO || 
                      '#ss_from=' || L_OLD_SS  ||
                      '#lc_ss_from='|| L_LC_SS_FROM ||
                      '#ip_version=' || L_IP_VERSION;
      L_RESULT := UNAPIEV.INSERTEVENT('ChangeRqIcStatus', UNAPIGEN.P_EVMGR_NAME, 'rqic', A_IC, L_LC, 
                                      L_LC_VERSION, A_NEW_SS, L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);
      IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
         UNAPIGEN.P_TXN_ERROR := L_RESULT;
         RAISE STPERROR;
      END IF;
   
      
      L_RET_CODE := UNAPIGEN.GETNEXTEVENTSEQNR(L_EV_SEQ_NR);

      IF L_LOG_HS = '1' THEN
         INSERT INTO UTRQICHS(RQ, IC, ICNODE, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, 
                              LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES(A_RQ, A_IC, A_ICNODE, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                'status of info card "'||A_IC||'" is changed from "'||UNAPIGEN.SQLSSNAME(L_OLD_SS)||'" ['||L_OLD_SS||'] to "'||UNAPIGEN.SQLSSNAME(A_NEW_SS)||'" ['||A_NEW_SS||'].', 
                CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;

      L_HS_DETAILS_SEQ_NR := 0;
      IF L_LOG_HS_DETAILS = '1' THEN
         L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
         INSERT INTO UTRQICHSDETAILS(RQ, IC, ICNODE, TR_SEQ, EV_SEQ, SEQ, DETAILS)
         VALUES(A_RQ, A_IC, A_ICNODE, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR, 
                'status of info card "'||A_IC||'" is changed from "'||UNAPIGEN.SQLSSNAME(L_OLD_SS)||'" ['||L_OLD_SS||'] to "'||UNAPIGEN.SQLSSNAME(A_NEW_SS)||'" ['||A_NEW_SS||'].');
      END IF;
   END IF;
   
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   L_OBJECT_ID :=  A_RQ || A_IC || TO_CHAR(A_ICNODE);
   UNAPIAUT.UPDATEAUTHORISATIONBUFFER('ic', L_OBJECT_ID, NULL, A_NEW_SS);

   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('ChangeRqIcStatus', SQLERRM);
   END IF;
   IF L_VERSION_CURSOR%ISOPEN THEN
      CLOSE L_VERSION_CURSOR;
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'ChangeRqIcStatus'));
END CHANGERQICSTATUS;

FUNCTION INTERNALCHANGERQICSTATUS          
(A_RQ                IN      VARCHAR2,     
 A_IC                IN      VARCHAR2,     
 A_ICNODE            IN      NUMBER,       
 A_NEW_SS            IN      VARCHAR2,     
 A_MODIFY_REASON     IN      VARCHAR2)     
RETURN NUMBER IS

L_RET_CODE                    INTEGER;

L_OLD_SS                      VARCHAR2(2);
L_LC                          VARCHAR2(2);
L_LC_VERSION                  VARCHAR2(20);


L_SEQ_NR                      NUMBER;
L_OBJECT_ID                   VARCHAR2(255);
L_IP_VERSION                  VARCHAR2(20);


L_TMP_RETRIESWHENINTRANSITION  INTEGER;
L_TMP_INTERVALWHENINTRANSITION NUMBER;
L_TMP_REMOTE_MODE              INTEGER;

BEGIN 

   L_TMP_REMOTE_MODE := UNAPIGEN.P_REMOTE;
   UNAPIGEN.P_REMOTE := '1'; 
   
   L_OLD_SS := NULL;
   L_LC := NULL;
   L_LC_VERSION := NULL;
   L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_RQ, ' ') = ' ' OR
      NVL(A_IC, ' ') = ' ' OR
      A_ICNODE IS NULL OR
      NVL(A_NEW_SS, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIPRP.CHECKELECSIGNATURE(A_NEW_SS);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      L_SQLERRM := 'Status '||A_NEW_SS ||' does not exist or must be signed electronically !';
      RAISE STPERROR;
   END IF;   

   
   L_TMP_RETRIESWHENINTRANSITION := UNAPIEV.P_RETRIESWHENINTRANSITION;
   L_TMP_INTERVALWHENINTRANSITION := UNAPIEV.P_INTERVALWHENINTRANSITION;
   UNAPIEV.P_RETRIESWHENINTRANSITION  := 1;
   UNAPIEV.P_INTERVALWHENINTRANSITION := 0.2;   

   
   
   IF A_NEW_SS <> '@C' THEN
      L_RET_CODE := UNAPIRQIC2.CHANGERQICSTATUS (A_RQ, A_IC, A_ICNODE,
                                                 L_OLD_SS, A_NEW_SS, L_LC, L_LC_VERSION, A_MODIFY_REASON);

   ELSIF A_NEW_SS = '@C' THEN
      L_RET_CODE := UNAPIRQIC2.CANCELRQIC (A_RQ, A_IC, A_ICNODE, A_MODIFY_REASON);      
   END IF;
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SUCCESS; 
      
      L_SEQ_NR := NULL;
      BEGIN 
         SELECT IP_VERSION
         INTO L_IP_VERSION
         FROM UTRQIC
         WHERE RQ = A_RQ
         AND IC = A_IC
         AND ICNODE = A_ICNODE;
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
         L_IP_VERSION := NULL;
      END;
      
      L_RET_CODE := UNAPIEV.INSERTEVENT
                      (A_API_NAME          => 'InternalChangeRqIcStatus',
                       A_EVMGR_NAME        => UNAPIGEN.P_EVMGR_NAME,
                       A_OBJECT_TP         => 'rqic',
                       A_OBJECT_ID         => A_IC,
                       A_OBJECT_LC         => NULL,
                       A_OBJECT_LC_VERSION => NULL,
                       A_OBJECT_SS         => NULL,
                       A_EV_TP             => 'RqInfoCardUpdated',
                       A_EV_DETAILS        => 'rq=' || A_RQ || 
                                              '#icnode=' || TO_CHAR(A_ICNODE) ||
                                              '#ip_version='||L_IP_VERSION||
                                              '#ss_to='||A_NEW_SS,
                       A_SEQ_NR            => L_SEQ_NR);
   END IF;

   
   UNAPIEV.P_RETRIESWHENINTRANSITION  := L_TMP_RETRIESWHENINTRANSITION;
   UNAPIEV.P_INTERVALWHENINTRANSITION := L_TMP_INTERVALWHENINTRANSITION;      

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
   L_OBJECT_ID :=  A_RQ || A_IC || TO_CHAR(A_ICNODE);
   UNAPIAUT.UPDATEAUTHORISATIONBUFFER('ic', L_OBJECT_ID, NULL, A_NEW_SS);

   UNAPIGEN.P_REMOTE := L_TMP_REMOTE_MODE;
   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   
   UNAPIGEN.P_REMOTE := L_TMP_REMOTE_MODE;
   IF L_TMP_RETRIESWHENINTRANSITION IS NOT NULL THEN
      UNAPIEV.P_RETRIESWHENINTRANSITION  := L_TMP_RETRIESWHENINTRANSITION;
      UNAPIEV.P_INTERVALWHENINTRANSITION := L_TMP_INTERVALWHENINTRANSITION;   
   END IF;
   IF SQLCODE <> 1 THEN 
      UNAPIGEN.LOGERROR('InternalChangeRqIcStatus', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'InternalChangeRqIcStatus'));
END INTERNALCHANGERQICSTATUS;

FUNCTION CANCELRQIC                        
(A_RQ                IN      VARCHAR2,     
 A_IC                IN      VARCHAR2,     
 A_ICNODE            IN      NUMBER,       
 A_MODIFY_REASON     IN      VARCHAR2)     
RETURN NUMBER IS

L_LC                          VARCHAR2(2);
L_LC_VERSION                  VARCHAR2(20);
L_OLD_SS                      VARCHAR2(2);
L_NEW_SS                      VARCHAR2(2);
L_ALLOW_MODIFY                CHAR(1);
L_ACTIVE                      CHAR(1);
L_LOG_HS                      CHAR(1);
L_LOG_HS_DETAILS              CHAR(1);
L_LC_SS_FROM                  VARCHAR2(2);
L_TR_NO                       NUMBER(3);
L_HS_DETAILS_SEQ_NR           INTEGER;
L_OBJECT_ID                   VARCHAR2(255);
L_CURRENT_TIMESTAMP                     VARCHAR2(40);
L_IP_VERSION                  VARCHAR2(20);

CURSOR L_VERSION_CURSOR IS
   SELECT IP_VERSION 
   FROM UTRQIC
   WHERE RQ     = A_RQ
     AND IC     = A_IC
     AND ICNODE = A_ICNODE;
  
BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
   
   L_CURRENT_TIMESTAMP := CURRENT_TIMESTAMP;
   L_LC := NULL;
   L_LC_VERSION := NULL;
   L_OLD_SS := NULL; 
   L_NEW_SS := '@C';
   L_RET_CODE := UNAPIRQIC2.RQICTRANSITIONAUTHORISED
                    (A_RQ, A_IC, A_ICNODE,
                     L_LC, L_LC_VERSION, L_OLD_SS, L_NEW_SS,
                     UNAPIGEN.P_USER,
                     L_LC_SS_FROM, L_TR_NO, 
                     L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS, L_LOG_HS_DETAILS);
                  
                     
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS AND
      L_RET_CODE <> UNAPIGEN.DBERR_NOTAUTHORISED THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   IF L_RET_CODE = UNAPIGEN.DBERR_SUCCESS THEN
      OPEN L_VERSION_CURSOR;
      FETCH L_VERSION_CURSOR INTO L_IP_VERSION;
      IF L_VERSION_CURSOR%NOTFOUND THEN
         CLOSE L_VERSION_CURSOR;
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_IPVERSION;
         RAISE STPERROR;
      END IF;
      CLOSE L_VERSION_CURSOR;
      
      
      
      
      
      L_EVENT_TP := 'RqIcCanceled';
      L_EV_SEQ_NR := -1;
      L_EV_DETAILS := 'rq=' || A_RQ ||
                      '#icnode=' || TO_CHAR(A_ICNODE) ||
                      '#tr_no=' || L_TR_NO ||
                      '#ss_from=' || L_OLD_SS ||
                      '#lc_ss_from='|| L_LC_SS_FROM ||
                      '#ip_version=' || L_IP_VERSION;
      L_RESULT := UNAPIEV.INSERTEVENT('CancelRqIc', UNAPIGEN.P_EVMGR_NAME,
                                      'rqic', A_IC, L_LC, L_LC_VERSION, L_NEW_SS,
                                      L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);
      IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
         UNAPIGEN.P_TXN_ERROR := L_RESULT;
         RAISE STPERROR;
      END IF;

      
      L_RET_CODE := UNAPIGEN.GETNEXTEVENTSEQNR(L_EV_SEQ_NR);

      IF L_LOG_HS = '1' THEN
         INSERT INTO UTRQICHS(RQ, IC, ICNODE, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, 
                              LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES(A_RQ, A_IC, A_ICNODE, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                'info card "'||A_IC||'" canceled, status is changed from "'||UNAPIGEN.SQLSSNAME(L_OLD_SS)||'" ['||L_OLD_SS||'] to "'||UNAPIGEN.SQLSSNAME(L_NEW_SS)||'" ['||L_NEW_SS||'].', 
                CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   
      L_HS_DETAILS_SEQ_NR := 0;
      IF L_LOG_HS_DETAILS = '1' THEN
         L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
         INSERT INTO UTRQICHSDETAILS(RQ, IC, ICNODE, TR_SEQ, EV_SEQ, SEQ, DETAILS)
         VALUES(A_RQ, A_IC, A_ICNODE, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR,
                'info card "'||A_IC||'" canceled, status is changed from "'||UNAPIGEN.SQLSSNAME(L_OLD_SS)||'" ['||L_OLD_SS||'] to "'||UNAPIGEN.SQLSSNAME(L_NEW_SS)||'" ['||L_NEW_SS||'].');
      END IF;
   
      
      
      
      
      UPDATE UTRQIC
      SET SS = L_NEW_SS,
          ALLOW_MODIFY = '#',
          ACTIVE = L_ACTIVE
      WHERE RQ = A_RQ
        AND IC = A_IC
        AND ICNODE = A_ICNODE;
   
      IF SQL%ROWCOUNT = 0 THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
         RAISE STPERROR;
      END IF;   
   END IF;
   
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   L_OBJECT_ID :=  A_RQ || A_IC || TO_CHAR(A_ICNODE);
   UNAPIAUT.UPDATEAUTHORISATIONBUFFER('ic', L_OBJECT_ID, NULL, '@C');

   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('CancelRqIc', SQLERRM);
   END IF;
   IF L_VERSION_CURSOR%ISOPEN THEN
      CLOSE L_VERSION_CURSOR;
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'CancelRqIc'));
END CANCELRQIC;

FUNCTION CHANGERQICLIFECYCLE               
(A_RQ                IN      VARCHAR2,     
 A_IC                IN      VARCHAR2,     
 A_ICNODE            IN      NUMBER,       
 A_OLD_LC            IN      VARCHAR2,     
 A_OLD_LC_VERSION    IN      VARCHAR2,     
 A_NEW_LC            IN      VARCHAR2,     
 A_NEW_LC_VERSION    IN      VARCHAR2,     
 A_MODIFY_REASON     IN      VARCHAR2)     
RETURN NUMBER IS

L_COUNT_US          NUMBER;
L_COUNT_LC          NUMBER;
L_ALLOW_MODIFY      CHAR(1);
L_LOG_HS            CHAR(1);
L_LOG_HS_DETAILS    CHAR(1);
L_LC                VARCHAR2(2);
L_LC_VERSION        VARCHAR2(20);
L_SS                VARCHAR2(2);
L_ACTIVE            CHAR(1);
L_OBJECT_ID         VARCHAR2(255);
L_RQ_ALLOW_MODIFY   CHAR(1);
L_RQ_LOG_HS         CHAR(1);
L_RQ_LOG_HS_DETAILS CHAR(1);
L_RQ_LC             VARCHAR2(2);
L_RQ_LC_VERSION     VARCHAR2(20);
L_RQ_SS             VARCHAR2(2);
L_RQ_ACTIVE         CHAR(1);
L_RQ_RT_VERSION     VARCHAR2(20);
L_HS_DETAILS_SEQ_NR INTEGER;
L_IP_VERSION        VARCHAR2(20);
L_LOCK_IC           VARCHAR2(20);

BEGIN
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_RQ, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_IC, ' ') = ' ' OR
      NVL(A_ICNODE, 0) = 0 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   
   SELECT IC
   INTO L_LOCK_IC
   FROM UTRQIC
   WHERE RQ = A_RQ
   AND IC = A_IC
   AND ICNODE = A_ICNODE
   FOR UPDATE;

   L_RET_CODE := UNAPIAUT.GETRQICAUTHORISATION(A_RQ, A_IC, A_ICNODE, L_IP_VERSION, L_LC, L_LC_VERSION,
                                               L_SS, L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS, 
                                               L_LOG_HS_DETAILS);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      IF L_RET_CODE <> UNAPIGEN.DBERR_NOTMODIFIABLE THEN
         UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
         RAISE STPERROR;
      ELSE
         L_RET_CODE := UNAPIAUT.GETRQAUTHORISATION(A_RQ, L_RQ_RT_VERSION, L_RQ_LC, L_RQ_LC_VERSION, 
                                                   L_RQ_SS, L_RQ_ALLOW_MODIFY, L_RQ_ACTIVE,
                                                   L_RQ_LOG_HS, L_RQ_LOG_HS_DETAILS);
         IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
            UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
            RAISE STPERROR;
         END IF;
      END IF;
   END IF;
   
   L_SS := NVL(L_SS, '@~');

   IF NVL(A_OLD_LC, ' ') = ' ' THEN
      
      NULL;
   ELSE
      IF A_OLD_LC <> L_LC THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OBJECTLCMATCH;
         RAISE STPERROR;
      END IF;

      
      
   END IF;

   SELECT COUNT(*)
   INTO  L_COUNT_LC
   FROM  UTLC
   WHERE VERSION = UNVERSION.P_NO_VERSION    
     AND LC = A_NEW_LC;

   IF L_COUNT_LC = 0  THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOLC;
      RAISE STPERROR;
   END IF;

   IF (NVL(L_LC, ' ') <> ' ') AND (NVL(L_LC_VERSION, ' ') <> ' ') THEN
      SELECT COUNT(*)
      INTO  L_COUNT_US
      FROM  UTLCUS
      WHERE LC = L_LC
        AND VERSION = L_LC_VERSION
        AND SS_FROM = L_SS
        AND US IN (UNAPIGEN.P_USER, '~ANY~', 'UP'||TO_CHAR(UNAPIGEN.P_CURRENT_UP));

      IF L_COUNT_US = 0 THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTAUTHORISED;
         RAISE STPERROR;
      END IF;
   END IF;

   UPDATE UTRQIC
   SET LC = A_NEW_LC,
       LC_VERSION = UNVERSION.P_NO_VERSION,    
       ALLOW_MODIFY = '#',
       SS = ''
   WHERE RQ = A_RQ
     AND IC = A_IC
     AND ICNODE = A_ICNODE;

   IF SQL%ROWCOUNT = 0 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
      RAISE STPERROR;
   END IF;

   L_EVENT_TP := 'RqIcLifeCycleChanged';
   L_EV_SEQ_NR := -1;
   L_EV_DETAILS := 'rq=' || A_RQ || 
                   '#icnode=' || A_ICNODE || 
                   '#from_lc=' || L_LC || 
                   '#from_lc_version=' || L_LC_VERSION || 
                   '#ss_from=' || L_SS ||
                   '#ip_version=' || L_IP_VERSION;
   L_RESULT := UNAPIEV.INSERTEVENT('ChangeRqIcLifeCycle', UNAPIGEN.P_EVMGR_NAME, 'rqic', A_IC,
                                   A_NEW_LC, UNVERSION.P_NO_VERSION, '',    
                                   L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF L_LOG_HS = '1' OR A_MODIFY_REASON IS NOT NULL THEN
     INSERT INTO UTRQICHS(RQ, IC, ICNODE, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, 
                          LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES(A_RQ, A_IC, A_ICNODE, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
             'life cycle of info card "'||A_IC||'" is changed from "'||UNAPIGEN.SQLLCNAME(L_LC)||'" ['||L_LC||'] to "'||UNAPIGEN.SQLLCNAME(A_NEW_LC)||'" ['||A_NEW_LC||'].', 
             CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   L_HS_DETAILS_SEQ_NR := 0;
   IF L_LOG_HS_DETAILS = '1' OR A_MODIFY_REASON IS NOT NULL THEN
      L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
      INSERT INTO UTRQICHSDETAILS(RQ, IC, ICNODE, TR_SEQ, EV_SEQ, SEQ, DETAILS)
      VALUES(A_RQ, A_IC, A_ICNODE, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR, 
             'life cycle of info card "'||A_IC||'" is changed from "'||UNAPIGEN.SQLLCNAME(L_LC)||'" ['||L_LC||'] to "'||UNAPIGEN.SQLLCNAME(A_NEW_LC)||'" ['||A_NEW_LC||'].');
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   L_OBJECT_ID :=  A_RQ || A_IC || TO_CHAR(A_ICNODE);
   FOR L_SEQ_NO IN 1..UNAPIGEN.PA_OBJECT_NR LOOP
      IF UNAPIGEN.PA_OBJECT_ID(L_SEQ_NO) = L_OBJECT_ID THEN
         UNAPIGEN.PA_OBJECT_LC(L_SEQ_NO) := A_NEW_LC;
         
         
         
         UNAPIGEN.PA_OBJECT_ACTIVE(L_SEQ_NO) := NULL;
         UNAPIGEN.PA_OBJECT_ALLOW_MODIFY(L_SEQ_NO) := NULL;
      END IF;
   END LOOP;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('ChangeRqIcLifeCycle',SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'ChangeRqIcLifeCycle'));
END CHANGERQICLIFECYCLE;

FUNCTION RQICELECTRONICSIGNATURE           
(A_RQ                IN      VARCHAR2,     
 A_IC                IN      VARCHAR2,     
 A_ICNODE            IN      NUMBER,       
 A_AUTHORISED_BY     IN      VARCHAR2,     
 A_MODIFY_REASON     IN      VARCHAR2)     
RETURN NUMBER IS

L_IP_VERSION        VARCHAR2(20);
L_LC                VARCHAR2(2);
L_LC_VERSION        VARCHAR2(20);
L_SS                VARCHAR2(2);
L_ALLOW_MODIFY      CHAR(1);
L_ACTIVE            CHAR(1);
L_LOG_HS            CHAR(1);
L_LOG_HS_DETAILS    CHAR(1);
L_HS_DETAILS_SEQ_NR INTEGER;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
   
   L_RET_CODE := UNAPIAUT.GETRQICAUTHORISATION(A_RQ, A_IC, A_ICNODE, L_IP_VERSION, L_LC, L_LC_VERSION,
                                               L_SS, L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS, 
                                               L_LOG_HS_DETAILS);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   IF A_AUTHORISED_BY IS NOT NULL THEN
      L_RET_CODE := UNAPIGEN.GETNEXTEVENTSEQNR(L_EV_SEQ_NR);
 
      INSERT INTO UTRQICHS(RQ, IC, ICNODE, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, 
                           LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES(A_RQ, A_IC, A_ICNODE, A_AUTHORISED_BY, UNAPIGEN.SQLUSERDESCRIPTION(A_AUTHORISED_BY), 
             'ElectronicSignature', 'Last action of info card "'||A_IC||'" is signed electronically.', 
             CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);

      L_HS_DETAILS_SEQ_NR := 0;
      L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
      INSERT INTO UTRQICHSDETAILS(RQ, IC, ICNODE, TR_SEQ, EV_SEQ, SEQ, DETAILS)
      VALUES(A_RQ, A_IC, A_ICNODE, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR, 
             'Last action of info card "'||A_IC||'" is signed electronically.');
   END IF;
   
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('RqIcElectronicSignature', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'RqIcElectronicSignature'));
END RQICELECTRONICSIGNATURE;

END UNAPIRQIC2;
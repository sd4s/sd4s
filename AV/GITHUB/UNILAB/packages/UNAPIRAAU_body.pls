PACKAGE BODY unapiraau AS






STPERROR      EXCEPTION;
L_RET_CODE    INTEGER;
L_SQLERRM     VARCHAR2(255);
L_SQL_STRING  VARCHAR2(2000);
L_SEP         CHAR(1);

FUNCTION GETVERSION
   RETURN VARCHAR2
IS
BEGIN
   RETURN('06.07.00.00_00.13');
EXCEPTION
   WHEN OTHERS THEN
   RETURN (NULL);
END GETVERSION;




PROCEDURE LOGERROR
(A_API IN VARCHAR2, A_ERROR_MSG IN VARCHAR2)
IS
BEGIN
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
           A_API, A_ERROR_MSG);
END LOGERROR;




FUNCTION REMOVEAUFROMARCHIVE
(A_AU IN VARCHAR2, A_VERSION IN VARCHAR2)
RETURN NUMBER IS
BEGIN
   

   DELETE FROM UAUTAU
   WHERE AU = A_AU
   AND VERSION = A_VERSION;

   DELETE FROM UAUTAUHS
   WHERE AU = A_AU
   AND VERSION = A_VERSION;

   DELETE FROM UAUTAUSQL
   WHERE AU = A_AU
   AND VERSION = A_VERSION;

   DELETE FROM UAUTAULIST
   WHERE AU = A_AU
   AND VERSION = A_VERSION;

   DELETE FROM UAUTAUHSDETAILS
   WHERE AU = A_AU
   AND VERSION = A_VERSION;

   
   DELETE FROM UAUTSHORTCUT
   WHERE KEY_TP = 'au'
   AND VALUE_S = A_AU ;

   RETURN(UNAPIGEN.DBERR_SUCCESS);
END REMOVEAUFROMARCHIVE;




FUNCTION COPYAUTOARCHDB(A_AU IN VARCHAR2, A_VERSION IN VARCHAR2, A_IGNORE_DUP_VAL_ON_INDEX BOOLEAN) RETURN NUMBER IS
BEGIN
   

   INSERT INTO UAUTAU
      (AU, VERSION, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ, EFFECTIVE_TILL,
      EFFECTIVE_TILL_TZ, DESCRIPTION, DESCRIPTION2, IS_PROTECTED, SINGLE_VALUED,
      NEW_VAL_ALLOWED, STORE_DB, INHERIT_AU, SHORTCUT, VALUE_LIST_TP, DEFAULT_VALUE,
      RUN_MODE, SERVICE, CF_VALUE, LAST_COMMENT, AU_CLASS, LOG_HS, LOG_HS_DETAILS,
      ALLOW_MODIFY, ACTIVE, LC, LC_VERSION, SS)
   SELECT  AU, VERSION, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ, EFFECTIVE_TILL,
      EFFECTIVE_TILL_TZ, DESCRIPTION, DESCRIPTION2, IS_PROTECTED, SINGLE_VALUED,
      NEW_VAL_ALLOWED, STORE_DB, INHERIT_AU, SHORTCUT, VALUE_LIST_TP, DEFAULT_VALUE,
      RUN_MODE, SERVICE, CF_VALUE, LAST_COMMENT, AU_CLASS, LOG_HS, LOG_HS_DETAILS,
      ALLOW_MODIFY, ACTIVE, LC, LC_VERSION, SS
   FROM UTAU
   WHERE AU = A_AU
   AND VERSION = A_VERSION;

   INSERT INTO UAUTAUHS
      (AU, VERSION, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE,
      LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
   SELECT  AU, VERSION, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE,
      LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ
   FROM UTAUHS
   WHERE AU = A_AU
   AND VERSION = A_VERSION;

   INSERT INTO UAUTAUSQL
      (AU, VERSION, SEQ, SQLTEXT)
   SELECT        AU, VERSION, SEQ, SQLTEXT
   FROM UTAUSQL
   WHERE AU = A_AU
   AND VERSION = A_VERSION;

   INSERT INTO UAUTAULIST
      (AU, VERSION, SEQ, VALUE)
   SELECT        AU, VERSION, SEQ, VALUE
   FROM UTAULIST
   WHERE AU = A_AU
   AND VERSION = A_VERSION;

   INSERT INTO UAUTAUHSDETAILS
      (AU, VERSION, TR_SEQ, EV_SEQ, SEQ, DETAILS)
   SELECT        AU, VERSION, TR_SEQ, EV_SEQ, SEQ, DETAILS
   FROM UTAUHSDETAILS
   WHERE AU = A_AU
   AND VERSION = A_VERSION;

   
   INSERT INTO UAUTSHORTCUT
      (SHORTCUT, KEY_TP, VALUE_S, VALUE_F, STORE_DB, RUN_MODE, SERVICE)
   SELECT
       SHORTCUT, KEY_TP, VALUE_S, VALUE_F, STORE_DB, RUN_MODE, SERVICE
   FROM UTSHORTCUT
   WHERE KEY_TP = 'au'
   AND VALUE_S = A_AU;

   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
   IF A_IGNORE_DUP_VAL_ON_INDEX THEN
      L_RET_CODE := REMOVEAUFROMARCHIVE(A_AU, A_VERSION);
   END IF;
   RETURN(UNAPIGEN.DBERR_NORECORDS);
END COPYAUTOARCHDB;

FUNCTION ARCHIVEAUTODB
(A_AU IN VARCHAR2, A_VERSION IN VARCHAR2)
RETURN NUMBER IS
BEGIN
   L_RET_CODE := COPYAUTOARCHDB(A_AU, A_VERSION, TRUE);
   IF L_RET_CODE = UNAPIGEN.DBERR_NORECORDS THEN
      L_RET_CODE := COPYAUTOARCHDB(A_AU, A_VERSION, FALSE);
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         L_SQLERRM := 'CopyAuToArchDB#return='||TO_CHAR(L_RET_CODE)||' for au='||A_AU||'#version='||A_VERSION;
         RAISE STPERROR;
      END IF;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      L_SQLERRM := SUBSTR(SQLERRM,1,200);
   END IF;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
          'ArchiveAuToDB', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END ARCHIVEAUTODB;

FUNCTION COPYAUFROMARCHDB(A_AU IN VARCHAR2, A_VERSION IN VARCHAR2, A_IGNORE_DUP_VAL_ON_INDEX BOOLEAN) RETURN NUMBER IS
BEGIN
   

   INSERT INTO UTAU
      (AU, VERSION, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ, EFFECTIVE_TILL,
      EFFECTIVE_TILL_TZ, DESCRIPTION, DESCRIPTION2, IS_PROTECTED, SINGLE_VALUED,
      NEW_VAL_ALLOWED, STORE_DB, INHERIT_AU, SHORTCUT, VALUE_LIST_TP, DEFAULT_VALUE,
      RUN_MODE, SERVICE, CF_VALUE, LAST_COMMENT, AU_CLASS, LOG_HS, LOG_HS_DETAILS,
      ALLOW_MODIFY, ACTIVE, LC, LC_VERSION, SS)
   SELECT  AU, VERSION, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ, EFFECTIVE_TILL,
      EFFECTIVE_TILL_TZ, DESCRIPTION, DESCRIPTION2, IS_PROTECTED, SINGLE_VALUED,
      NEW_VAL_ALLOWED, STORE_DB, INHERIT_AU, SHORTCUT, VALUE_LIST_TP, DEFAULT_VALUE,
      RUN_MODE, SERVICE, CF_VALUE, LAST_COMMENT, AU_CLASS, LOG_HS, LOG_HS_DETAILS,
      ALLOW_MODIFY, ACTIVE, LC, LC_VERSION, SS
   FROM UAUTAU
   WHERE AU = A_AU
   AND VERSION = A_VERSION;

   INSERT INTO UTAUHS
      (AU, VERSION, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE,
      LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
   SELECT  AU, VERSION, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE,
      LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ
   FROM UAUTAUHS
   WHERE AU = A_AU
   AND VERSION = A_VERSION;

   INSERT INTO UTAUSQL
      (AU, VERSION, SEQ, SQLTEXT)
   SELECT        AU, VERSION, SEQ, SQLTEXT
   FROM UAUTAUSQL
   WHERE AU = A_AU
   AND VERSION = A_VERSION;

   INSERT INTO UTAULIST
      (AU, VERSION, SEQ, VALUE)
   SELECT        AU, VERSION, SEQ, VALUE
   FROM UAUTAULIST
   WHERE AU = A_AU
   AND VERSION = A_VERSION;

   INSERT INTO UTAUHSDETAILS
      (AU, VERSION, TR_SEQ, EV_SEQ, SEQ, DETAILS)
   SELECT        AU, VERSION, TR_SEQ, EV_SEQ, SEQ, DETAILS
   FROM UAUTAUHSDETAILS
   WHERE AU = A_AU
   AND VERSION = A_VERSION;

   
   INSERT INTO UTSHORTCUT
      (SHORTCUT, KEY_TP, VALUE_S, VALUE_F, STORE_DB, RUN_MODE, SERVICE)
   SELECT
       SHORTCUT, KEY_TP, VALUE_S, VALUE_F, STORE_DB, RUN_MODE, SERVICE
   FROM UAUTSHORTCUT
   WHERE KEY_TP = 'au'
   AND VALUE_S = A_AU;

   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
   IF A_IGNORE_DUP_VAL_ON_INDEX THEN
      L_RET_CODE := REMOVEAUFROMDB(A_AU, A_VERSION);
   END IF;
   RETURN(UNAPIGEN.DBERR_NORECORDS);
END COPYAUFROMARCHDB;

FUNCTION RESTOREAUFROMDB
(A_AU IN VARCHAR2, A_VERSION IN VARCHAR2)
RETURN NUMBER IS
BEGIN
   L_RET_CODE := COPYAUFROMARCHDB(A_AU, A_VERSION, TRUE);
   IF L_RET_CODE = UNAPIGEN.DBERR_NORECORDS THEN
      L_RET_CODE := COPYAUFROMARCHDB(A_AU, A_VERSION, FALSE);
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         L_SQLERRM := 'CopyAuFromArchDB#return='||TO_CHAR(L_RET_CODE)||' for au='||A_AU||'#version='||A_VERSION;
         RAISE STPERROR;
      END IF;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      L_SQLERRM := SUBSTR(SQLERRM,1,200);
   END IF;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
          'RestoreAuFromDB', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END RESTOREAUFROMDB;

FUNCTION REMOVEAUFROMDB
(A_AU IN VARCHAR2, A_VERSION IN VARCHAR2)
RETURN NUMBER IS
BEGIN
   

   DELETE FROM UTAU
   WHERE AU = A_AU
   AND VERSION = A_VERSION;

   DELETE FROM UTAUHS
   WHERE AU = A_AU
   AND VERSION = A_VERSION;

   DELETE FROM UTAUSQL
   WHERE AU = A_AU
   AND VERSION = A_VERSION;

   DELETE FROM UTAULIST
   WHERE AU = A_AU
   AND VERSION = A_VERSION;

   DELETE FROM UTAUHSDETAILS
   WHERE AU = A_AU
   AND VERSION = A_VERSION;

   
   DELETE FROM UTSHORTCUT
   WHERE KEY_TP = 'au'
   AND VALUE_S = A_AU ;

   RETURN(UNAPIGEN.DBERR_SUCCESS);
END REMOVEAUFROMDB;

FUNCTION ARCHIVEAUTOFILE
(A_AU            IN VARCHAR2, A_VERSION IN VARCHAR2)
RETURN NUMBER IS
   
CURSOR L_UTAU_CURSOR (A_AU IN VARCHAR2, A_VERSION IN VARCHAR2) IS
   SELECT * FROM UTAU WHERE AU=A_AU AND VERSION=A_VERSION;

CURSOR L_UTAUHS_CURSOR (A_AU IN VARCHAR2, A_VERSION IN VARCHAR2) IS
   SELECT * FROM UTAUHS WHERE AU=A_AU AND VERSION=A_VERSION;

CURSOR L_UTAUSQL_CURSOR (A_AU IN VARCHAR2, A_VERSION IN VARCHAR2) IS
   SELECT * FROM UTAUSQL WHERE AU=A_AU AND VERSION=A_VERSION;

CURSOR L_UTAULIST_CURSOR (A_AU IN VARCHAR2, A_VERSION IN VARCHAR2) IS
   SELECT * FROM UTAULIST WHERE AU=A_AU AND VERSION=A_VERSION;

CURSOR L_UTAUHSDETAILS_CURSOR (A_AU IN VARCHAR2, A_VERSION IN VARCHAR2) IS
   SELECT * FROM UTAUHSDETAILS WHERE AU=A_AU AND VERSION=A_VERSION;

   
CURSOR L_UTSHORTCUT_CURSOR (A_AU IN VARCHAR2) IS
   SELECT * FROM UTSHORTCUT WHERE KEY_TP = 'au' AND VALUE_S = A_AU;
BEGIN

   L_SQLERRM:=NULL;
   UNAPIRA.L_EXCEPTION_STEP :='utau' ||'au='||A_AU||'#version='||A_VERSION;
   FOR L_REC IN L_UTAU_CURSOR(A_AU, A_VERSION) LOOP
      UNAPIRA3.L_PUTTEXT := 'utau' || L_SEP ||
      L_REC.AU || L_SEP || L_REC.VERSION || L_SEP ||
      TO_CHAR(L_REC.EFFECTIVE_FROM,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      TO_CHAR(L_REC.EFFECTIVE_FROM_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      TO_CHAR(L_REC.EFFECTIVE_TILL,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      TO_CHAR(L_REC.EFFECTIVE_TILL_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      L_REC.DESCRIPTION || L_SEP || L_REC.DESCRIPTION2 || L_SEP ||
      L_REC.IS_PROTECTED || L_SEP || L_REC.SINGLE_VALUED || L_SEP ||
      L_REC.NEW_VAL_ALLOWED || L_SEP || L_REC.STORE_DB || L_SEP ||
      L_REC.INHERIT_AU || L_SEP || L_REC.SHORTCUT || L_SEP ||
      L_REC.VALUE_LIST_TP || L_SEP || L_REC.DEFAULT_VALUE || L_SEP ||
      L_REC.RUN_MODE || L_SEP || L_REC.SERVICE || L_SEP ||
      L_REC.CF_VALUE || L_SEP || L_REC.LAST_COMMENT || L_SEP ||
      L_REC.AU_CLASS || L_SEP || L_REC.LOG_HS || L_SEP ||
      L_REC.LOG_HS_DETAILS || L_SEP || L_REC.ALLOW_MODIFY || L_SEP ||
      L_REC.ACTIVE || L_SEP || L_REC.LC || L_SEP || L_REC.LC_VERSION || L_SEP ||
      L_REC.SS;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   UNAPIRA.L_EXCEPTION_STEP :='utauhs' ||'au='||A_AU||'#version='||A_VERSION;
   FOR L_REC IN L_UTAUHS_CURSOR(A_AU, A_VERSION) LOOP
      UNAPIRA3.L_PUTTEXT := 'utauhs' || L_SEP ||
      L_REC.AU || L_SEP || L_REC.VERSION || L_SEP || L_REC.WHO || L_SEP ||
      L_REC.WHO_DESCRIPTION || L_SEP || L_REC.WHAT || L_SEP ||
      L_REC.WHAT_DESCRIPTION || L_SEP ||
      TO_CHAR(L_REC.LOGDATE,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      TO_CHAR(L_REC.LOGDATE_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      L_REC.WHY || L_SEP || L_REC.TR_SEQ || L_SEP || L_REC.EV_SEQ;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   UNAPIRA.L_EXCEPTION_STEP :='utausql' ||'au='||A_AU||'#version='||A_VERSION;
   FOR L_REC IN L_UTAUSQL_CURSOR(A_AU, A_VERSION) LOOP
      UNAPIRA3.L_PUTTEXT := 'utausql' || L_SEP ||
      L_REC.AU || L_SEP || L_REC.VERSION || L_SEP || L_REC.SEQ || L_SEP ||
      L_REC.SQLTEXT;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   UNAPIRA.L_EXCEPTION_STEP :='utaulist' ||'au='||A_AU||'#version='||A_VERSION;
   FOR L_REC IN L_UTAULIST_CURSOR(A_AU, A_VERSION) LOOP
      UNAPIRA3.L_PUTTEXT := 'utaulist' || L_SEP ||
      L_REC.AU || L_SEP || L_REC.VERSION || L_SEP || L_REC.SEQ || L_SEP ||
      L_REC.VALUE;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   UNAPIRA.L_EXCEPTION_STEP :='utauhsdetails' ||'au='||A_AU||'#version='||A_VERSION;
   FOR L_REC IN L_UTAUHSDETAILS_CURSOR(A_AU, A_VERSION) LOOP
      UNAPIRA3.L_PUTTEXT := 'utauhsdetails' || L_SEP ||
      L_REC.AU || L_SEP || L_REC.VERSION || L_SEP || L_REC.TR_SEQ || L_SEP ||
      L_REC.EV_SEQ || L_SEP || L_REC.SEQ || L_SEP || L_REC.DETAILS;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   
   UNAPIRA.L_EXCEPTION_STEP :='utshortcut' ||'au='||A_AU;
   FOR L_REC IN L_UTSHORTCUT_CURSOR(A_AU) LOOP
      UNAPIRA3.L_PUTTEXT := 'utshortcut' || L_SEP ||
      L_REC.SHORTCUT || L_SEP || L_REC.KEY_TP || L_SEP ||
      L_REC.VALUE_S || L_SEP || L_REC.VALUE_F || L_SEP ||
      L_REC.STORE_DB || L_SEP || L_REC.RUN_MODE || L_SEP ||
      L_REC.SERVICE;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   UNAPIRA3.U4DATAPUTLINE( ' ');

   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN UTL_FILE.INVALID_PATH THEN
   L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Invalid path';
   UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveAuToFile', L_SQLERRM, 'UTL_FILE.INVALID_PATH',UNAPIRA.P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_NOOBJECT);

WHEN UTL_FILE.INVALID_MODE THEN
   L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Invalid mode';
   UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveAuToFile', L_SQLERRM, 'UTL_FILE.INVALID_MODE',UNAPIRA.P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_GENFAIL);

WHEN UTL_FILE.INVALID_FILEHANDLE THEN
   L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Invalid filehandle';
   UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveAuToFile', L_SQLERRM, 'UTL_FILE.INVALID_FILEHANDLE',UNAPIRA.P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_GENFAIL);

WHEN UTL_FILE.INVALID_OPERATION THEN
   
   L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Invalid operation';
   UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveAuToFile', L_SQLERRM, 'UTL_FILE.INVALID_OPERATION',UNAPIRA.P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_NOOBJECT);

WHEN UTL_FILE.READ_ERROR THEN
   L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Read error';
   UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveAuToFile', L_SQLERRM, 'UTL_FILE.READ_ERROR',UNAPIRA.P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_GENFAIL);

WHEN UTL_FILE.WRITE_ERROR THEN
   L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Write error';
   UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveAuToFile', L_SQLERRM, 'UTL_FILE.WRITE_ERROR',UNAPIRA.P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_GENFAIL);

WHEN UTL_FILE.INTERNAL_ERROR THEN
   L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Internal error';
   UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveAuToFile', L_SQLERRM, 'UTL_FILE.INTERNAL_ERROR',UNAPIRA.P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_GENFAIL);

WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      L_SQLERRM := SQLERRM;
      UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveAuToFile', L_SQLERRM, 'UTL_FILE.INTERNAL_ERROR',UNAPIRA.P_CLOSE_CURSOR);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveAuToFile', L_SQLERRM, 'UTL_FILE.INTERNAL_ERROR',UNAPIRA.P_CLOSE_CURSOR);
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END ARCHIVEAUTOFILE;

BEGIN
   L_SEP:=UNAPIRA.P_INTERNAL_SEP;
END UNAPIRAAU;
PACKAGE BODY unapievp AS

L_SQLERRM         VARCHAR2(255);
L_SQL_STRING      VARCHAR2(2000);
L_WHERE_CLAUSE    VARCHAR2(1000);
L_EVENT_TP        UTEV.EV_TP%TYPE;
L_TIMED_EVENT_TP  UTEV.EV_TP%TYPE;
L_RET_CODE        NUMBER;
L_RESULT          NUMBER;
L_FETCHED_ROWS    NUMBER;
L_EV_SEQ_NR       NUMBER;
L_EV_DETAILS      VARCHAR2(255);
STPERROR          EXCEPTION;
L_OBJ_CURSOR      INTEGER;


L_SQC_ON            VARCHAR2(40) DEFAULT NULL;
L_MAX_OUT_3S        INTEGER DEFAULT 0;
L_MAX_OUT_2S        INTEGER DEFAULT 0;
L_MAX_ABOVE_AVG     INTEGER DEFAULT 0;
L_MAX_BELOW_AVG     INTEGER DEFAULT 0;
L_MAX_RISING        INTEGER DEFAULT 0;
L_MAX_FALLING       INTEGER DEFAULT 0;

FUNCTION GETVERSION
   RETURN VARCHAR2
IS
BEGIN
   RETURN('06.07.00.00_00.13');
EXCEPTION
   WHEN OTHERS THEN
      RETURN (NULL);
END GETVERSION;

FUNCTION EVALALARMHANDLING                          
(A_ALARMS_HANDLED   IN    CHAR,                     
 A_SC               IN    VARCHAR2,                 
 A_PG               IN    VARCHAR2,                 
 A_PGNODE           IN    NUMBER,                   
 A_PA               IN    VARCHAR2,                 
 A_PANODE           IN    NUMBER,                   
 A_VALID_SPECSA     OUT   CHAR,                     
 A_VALID_SPECSB     OUT   CHAR,                     
 A_VALID_SPECSC     OUT   CHAR,                     
 A_VALID_LIMITSA    OUT   CHAR,                     
 A_VALID_LIMITSB    OUT   CHAR,                     
 A_VALID_LIMITSC    OUT   CHAR,                     
 A_VALID_TARGETA    OUT   CHAR,                     
 A_VALID_TARGETB    OUT   CHAR,                     
 A_VALID_TARGETC    OUT   CHAR)                     
RETURN NUMBER IS

L_VALIDATED           BOOLEAN;
L_VALID_LIMITSA       CHAR(1);
L_VALID_LIMITSB       CHAR(1);
L_VALID_LIMITSC       CHAR(1);
L_VALID_SPECSA        CHAR(1);
L_VALID_SPECSB        CHAR(1);
L_VALID_SPECSC        CHAR(1);
L_VALID_TARGETA       CHAR(1);
L_VALID_TARGETB       CHAR(1);
L_VALID_TARGETC       CHAR(1);
L_ALARMS_CNT          NUMBER;
L_ALARMS_QUEUE        UNAPIGEN.VC40_TABLE_TYPE;
L_LOW_LIMIT           FLOAT;
L_HIGH_LIMIT          FLOAT;
L_LOW_SPEC            FLOAT;
L_HIGH_SPEC           FLOAT;
L_LOW_DEV             FLOAT;
L_REL_LOW_DEV         CHAR(1);
L_HIGH_DEV            FLOAT;
L_REL_HIGH_DEV        CHAR(1);
L_TARGET              FLOAT;
L_SETA_SPECS          VARCHAR2(20);
L_SETB_SPECS          VARCHAR2(20);
L_SETC_SPECS          VARCHAR2(20);
L_SETA_LIMITS         VARCHAR2(20);
L_SETB_LIMITS         VARCHAR2(20);
L_SETC_LIMITS         VARCHAR2(20);
L_SETA_TARGET         VARCHAR2(20);
L_SETB_TARGET         VARCHAR2(20);
L_SETC_TARGET         VARCHAR2(20);
L_SCPA_REC            UDSCPA%ROWTYPE;
L_SCPANEW_REC         UDSCPA%ROWTYPE;
L_REANALYSIS          NUMBER;
L_ERRM                VARCHAR2(255);
L_HS_DETAILS_SEQ_NR   INTEGER;

CURSOR L_SCPA_CURSOR IS
   SELECT *
   FROM UDSCPA
   WHERE SC = A_SC
     AND PG = A_PG
     AND PGNODE = A_PGNODE
     AND PA = A_PA
     AND PANODE = A_PANODE;

CURSOR L_SCPASPA_CURSOR IS
   SELECT LOW_LIMIT, HIGH_LIMIT, LOW_SPEC, HIGH_SPEC, LOW_DEV, REL_LOW_DEV,
          TARGET, HIGH_DEV, REL_HIGH_DEV
   FROM UTSCPASPA
   WHERE SC = A_SC
     AND PG = A_PG
     AND PGNODE = A_PGNODE
     AND PA = A_PA
     AND PANODE = A_PANODE;

CURSOR L_SCPASPB_CURSOR IS
   SELECT LOW_LIMIT, HIGH_LIMIT, LOW_SPEC, HIGH_SPEC, LOW_DEV, REL_LOW_DEV,
          TARGET, HIGH_DEV, REL_HIGH_DEV
   FROM UTSCPASPB
   WHERE SC = A_SC
     AND PG = A_PG
     AND PGNODE = A_PGNODE
     AND PA = A_PA
     AND PANODE = A_PANODE;

CURSOR L_SCPASPC_CURSOR IS
   SELECT LOW_LIMIT, HIGH_LIMIT, LOW_SPEC, HIGH_SPEC, LOW_DEV, REL_LOW_DEV,
          TARGET, HIGH_DEV, REL_HIGH_DEV
   FROM UTSCPASPC
   WHERE SC = A_SC
     AND PG = A_PG
     AND PGNODE = A_PGNODE
     AND PA = A_PA
     AND PANODE = A_PANODE;

CURSOR L_PR_CURSOR(C_PA VARCHAR2, C_PR_VERSION VARCHAR2) IS
   SELECT SETA_SPECS, SETA_LIMITS, SETA_TARGET,
          SETB_SPECS, SETB_LIMITS, SETB_TARGET,
          SETC_SPECS, SETC_LIMITS, SETC_TARGET
   FROM UTPR
   WHERE PR = C_PA
     AND VERSION = C_PR_VERSION;

   
   
   
   
   PROCEDURE CHECKSPECS(L_LOCAL_LIMIT  IN OUT VARCHAR2,
                        L_LOCAL_SPEC   IN OUT VARCHAR2,
                        L_LOCAL_TARGET IN OUT VARCHAR2,
                        L_SET_LIMITS   IN     VARCHAR2,
                        L_SET_SPECS    IN     VARCHAR2,
                        L_SET_TARGET   IN     VARCHAR2) IS

   BEGIN

      
      
      
      L_LOCAL_LIMIT := '';
      IF L_LOW_LIMIT IS NOT NULL AND
         L_SCPA_REC.VALUE_F < L_LOW_LIMIT THEN
         L_LOCAL_LIMIT := '<';
         L_ALARMS_CNT := L_ALARMS_CNT + 1;
         L_ALARMS_QUEUE(L_ALARMS_CNT) := L_SET_LIMITS;
      END IF;

      IF L_HIGH_LIMIT IS NOT NULL AND
         L_SCPA_REC.VALUE_F > L_HIGH_LIMIT THEN
         L_LOCAL_LIMIT := '>';
         L_ALARMS_CNT := L_ALARMS_CNT + 1;
         L_ALARMS_QUEUE(L_ALARMS_CNT) := L_SET_LIMITS;
      END IF;

      
      
      
      L_LOCAL_SPEC := '';
      IF L_LOW_SPEC IS NOT NULL AND
         L_SCPA_REC.VALUE_F < L_LOW_SPEC THEN
         L_LOCAL_SPEC := '<';
         L_ALARMS_CNT := L_ALARMS_CNT + 1;
         L_ALARMS_QUEUE(L_ALARMS_CNT) := L_SET_SPECS;
      END IF;

      IF L_HIGH_SPEC IS NOT NULL AND
         L_SCPA_REC.VALUE_F > L_HIGH_SPEC THEN
         L_LOCAL_SPEC := '>';
         L_ALARMS_CNT := L_ALARMS_CNT + 1;
         L_ALARMS_QUEUE(L_ALARMS_CNT) := L_SET_SPECS;
      END IF;

      
      
      
      L_LOCAL_TARGET := '';
      IF L_TARGET IS NOT NULL THEN
         IF L_LOW_DEV IS NOT NULL THEN
            IF L_REL_LOW_DEV = '0' AND
               L_SCPA_REC.VALUE_F < (L_TARGET - L_LOW_DEV) THEN
               L_LOCAL_TARGET := '<';
               L_ALARMS_CNT := L_ALARMS_CNT + 1;
               L_ALARMS_QUEUE(L_ALARMS_CNT) := L_SET_TARGET;
            ELSIF L_REL_LOW_DEV = '1' AND
               L_SCPA_REC.VALUE_F < (L_TARGET * (1 - L_LOW_DEV/100)) THEN
               L_LOCAL_TARGET := '<';
               L_ALARMS_CNT := L_ALARMS_CNT + 1;
               L_ALARMS_QUEUE(L_ALARMS_CNT) := L_SET_TARGET;
            END IF;
         END IF;

         IF L_HIGH_DEV IS NOT NULL THEN
            IF L_REL_HIGH_DEV = '0' AND
               L_SCPA_REC.VALUE_F > (L_TARGET + L_HIGH_DEV) THEN
               L_LOCAL_TARGET := '>';
               L_ALARMS_CNT := L_ALARMS_CNT + 1;
               L_ALARMS_QUEUE(L_ALARMS_CNT) := L_SET_TARGET;
            ELSIF L_REL_HIGH_DEV = '1' AND
               L_SCPA_REC.VALUE_F > (L_TARGET * (1 + L_HIGH_DEV/100)) THEN
               L_LOCAL_TARGET := '>';
               L_ALARMS_CNT := L_ALARMS_CNT + 1;
               L_ALARMS_QUEUE(L_ALARMS_CNT) := L_SET_TARGET;
            END IF;
         END IF;
      END IF;
   END CHECKSPECS;

   
   
   
   
   
   PROCEDURE ADDMEASUREMENT IS

   L_SC                   UNAPIGEN.VC20_TABLE_TYPE;
   L_PG                   UNAPIGEN.VC20_TABLE_TYPE;
   L_PGNODE               UNAPIGEN.LONG_TABLE_TYPE;
   L_PA                   UNAPIGEN.VC20_TABLE_TYPE;
   L_PANODE               UNAPIGEN.LONG_TABLE_TYPE;
   L_PR_VERSION           UNAPIGEN.VC20_TABLE_TYPE;
   L_DESCRIPTION          UNAPIGEN.VC40_TABLE_TYPE;
   L_VALUE_F              UNAPIGEN.FLOAT_TABLE_TYPE;
   L_VALUE_S              UNAPIGEN.VC40_TABLE_TYPE;
   L_UNIT                 UNAPIGEN.VC20_TABLE_TYPE;
   L_EXEC_START_DATE      UNAPIGEN.DATE_TABLE_TYPE;
   L_EXEC_END_DATE        UNAPIGEN.DATE_TABLE_TYPE;
   L_EXECUTOR             UNAPIGEN.VC20_TABLE_TYPE;
   L_PLANNED_EXECUTOR     UNAPIGEN.VC20_TABLE_TYPE;
   L_MANUALLY_ENTERED     UNAPIGEN.CHAR1_TABLE_TYPE;
   L_ASSIGN_DATE          UNAPIGEN.DATE_TABLE_TYPE;
   L_ASSIGNED_BY          UNAPIGEN.VC20_TABLE_TYPE;
   L_MANUALLY_ADDED       UNAPIGEN.CHAR1_TABLE_TYPE;
   L_FORMAT               UNAPIGEN.VC40_TABLE_TYPE;
   L_TD_INFO              UNAPIGEN.NUM_TABLE_TYPE;
   L_TD_INFO_UNIT         UNAPIGEN.VC20_TABLE_TYPE;
   L_CONFIRM_UID          UNAPIGEN.CHAR1_TABLE_TYPE;
   L_ALLOW_ANY_ME         UNAPIGEN.CHAR1_TABLE_TYPE;
   L_DELAY                UNAPIGEN.NUM_TABLE_TYPE;
   L_DELAY_UNIT           UNAPIGEN.VC20_TABLE_TYPE;
   L_MIN_NR_RESULTS       UNAPIGEN.NUM_TABLE_TYPE;
   L_CALC_METHOD          UNAPIGEN.CHAR1_TABLE_TYPE;
   L_CALC_CF              UNAPIGEN.VC20_TABLE_TYPE;
   L_ALARM_ORDER          UNAPIGEN.VC3_TABLE_TYPE;
   L_SPECSA               UNAPIGEN.CHAR1_TABLE_TYPE;
   L_SPECSB               UNAPIGEN.CHAR1_TABLE_TYPE;
   L_SPECSC               UNAPIGEN.CHAR1_TABLE_TYPE;
   L_LIMITSA              UNAPIGEN.CHAR1_TABLE_TYPE;
   L_LIMITSB              UNAPIGEN.CHAR1_TABLE_TYPE;
   L_LIMITSC              UNAPIGEN.CHAR1_TABLE_TYPE;
   L_TARGETA              UNAPIGEN.CHAR1_TABLE_TYPE;
   L_TARGETB              UNAPIGEN.CHAR1_TABLE_TYPE;
   L_TARGETC              UNAPIGEN.CHAR1_TABLE_TYPE;
   L_LOG_EXCEPTIONS       UNAPIGEN.CHAR1_TABLE_TYPE;
   L_MT                   UNAPIGEN.VC20_TABLE_TYPE;
   L_MT_VERSION           UNAPIGEN.VC20_TABLE_TYPE;
   L_MT_NR_MEASUR         UNAPIGEN.NUM_TABLE_TYPE;
   L_REANALYSIS           UNAPIGEN.NUM_TABLE_TYPE;
   L_PA_CLASS             UNAPIGEN.VC2_TABLE_TYPE;
   L_LOG_HS               UNAPIGEN.CHAR1_TABLE_TYPE;
   L_LOG_HS_DETAILS       UNAPIGEN.CHAR1_TABLE_TYPE;
   L_LC                   UNAPIGEN.VC2_TABLE_TYPE;
   L_LC_VERSION           UNAPIGEN.VC20_TABLE_TYPE;
   L_MODIFY_FLAG          UNAPIGEN.NUM_TABLE_TYPE;
   L_NR_OF_ROWS           NUMBER;
   L_ST                   VARCHAR2(20);
   L_ST_VERSION           VARCHAR2(20);
   L_PP_VERSION           VARCHAR2(20);
   L_PP_KEY1              VARCHAR2(20);
   L_PP_KEY2              VARCHAR2(20);
   L_PP_KEY3              VARCHAR2(20);
   L_PP_KEY4              VARCHAR2(20);
   L_PP_KEY5              VARCHAR2(20);

   BEGIN

      
      
      
      L_NR_OF_ROWS := 1;
      L_SC(L_NR_OF_ROWS) := L_SCPA_REC.SC;
      L_PG(L_NR_OF_ROWS) := L_SCPA_REC.PG;
      L_PGNODE(L_NR_OF_ROWS) := L_SCPA_REC.PGNODE;
      L_PA(L_NR_OF_ROWS) := L_SCPA_REC.PA;
      L_PANODE(L_NR_OF_ROWS) := NULL;
      L_PR_VERSION(L_NR_OF_ROWS) := L_SCPA_REC.PR_VERSION;
      L_DESCRIPTION(L_NR_OF_ROWS) := L_SCPA_REC.DESCRIPTION;
      L_VALUE_F(L_NR_OF_ROWS) := NULL;
      L_VALUE_S(L_NR_OF_ROWS) := NULL;
      L_UNIT(L_NR_OF_ROWS) := L_SCPA_REC.UNIT;
      L_EXEC_START_DATE(L_NR_OF_ROWS) := NULL;
      L_EXEC_END_DATE(L_NR_OF_ROWS) := NULL;
      L_EXECUTOR(L_NR_OF_ROWS) := NULL;
      L_PLANNED_EXECUTOR(L_NR_OF_ROWS) := L_SCPA_REC.PLANNED_EXECUTOR;
      L_MANUALLY_ENTERED(L_NR_OF_ROWS) := '0';
      L_ASSIGN_DATE(L_NR_OF_ROWS) := CURRENT_TIMESTAMP;
      IF UNAPIEV.P_EV_MGR_SESSION THEN
         L_ASSIGNED_BY(L_NR_OF_ROWS) := UNAPIEV.P_EV_REC.USERNAME;
      ELSE
         L_ASSIGNED_BY(L_NR_OF_ROWS) := UNAPIGEN.P_USER;
      END IF;
      L_MANUALLY_ADDED(L_NR_OF_ROWS) := '0';
      L_FORMAT(L_NR_OF_ROWS) := L_SCPA_REC.FORMAT;
      L_TD_INFO(L_NR_OF_ROWS) := L_SCPA_REC.TD_INFO;
      L_TD_INFO_UNIT(L_NR_OF_ROWS) := L_SCPA_REC.TD_INFO_UNIT;
      L_CONFIRM_UID(L_NR_OF_ROWS) := L_SCPA_REC.CONFIRM_UID;
      L_ALLOW_ANY_ME(L_NR_OF_ROWS) := L_SCPA_REC.ALLOW_ANY_ME;
      L_DELAY(L_NR_OF_ROWS) := L_SCPA_REC.DELAY;
      L_DELAY_UNIT(L_NR_OF_ROWS) := L_SCPA_REC.DELAY_UNIT;
      L_MIN_NR_RESULTS(L_NR_OF_ROWS) := L_SCPA_REC.MIN_NR_RESULTS;
      L_CALC_METHOD(L_NR_OF_ROWS) := L_SCPA_REC.CALC_METHOD;
      L_CALC_CF(L_NR_OF_ROWS) := L_SCPA_REC.CALC_CF;
      L_ALARM_ORDER(L_NR_OF_ROWS) := L_SCPA_REC.ALARM_ORDER;
      L_SPECSA(L_NR_OF_ROWS) := '';
      L_SPECSB(L_NR_OF_ROWS) := '';
      L_SPECSC(L_NR_OF_ROWS) := '';
      L_LIMITSA(L_NR_OF_ROWS) := '';
      L_LIMITSB(L_NR_OF_ROWS) := '';
      L_LIMITSC(L_NR_OF_ROWS) := '';
      L_TARGETA(L_NR_OF_ROWS) := '';
      L_TARGETB(L_NR_OF_ROWS) := '';
      L_TARGETC(L_NR_OF_ROWS) := '';
      L_MT(L_NR_OF_ROWS) := NULL;
      L_MT_VERSION(L_NR_OF_ROWS) := NULL;
      L_MT_NR_MEASUR(L_NR_OF_ROWS) := NULL;
      L_LOG_EXCEPTIONS(L_NR_OF_ROWS) := L_SCPA_REC.LOG_EXCEPTIONS;
      L_PA_CLASS(L_NR_OF_ROWS) := L_SCPA_REC.PA_CLASS;
      L_LOG_HS(L_NR_OF_ROWS) := L_SCPA_REC.LOG_HS;
      L_LOG_HS_DETAILS(L_NR_OF_ROWS) := L_SCPA_REC.LOG_HS_DETAILS;
      L_LC(L_NR_OF_ROWS) := L_SCPA_REC.LC;
      L_LC_VERSION(L_NR_OF_ROWS) := L_SCPA_REC.LC_VERSION;
      L_MODIFY_FLAG(L_NR_OF_ROWS) := UNAPIGEN.MOD_FLAG_INSERT;

      L_RET_CODE :=
         UNAPIPA.SAVESCPARAMETER(UNAPIGEN.ALARMS_ALREADY_HANDLED, 
                                 L_SC, L_PG, L_PGNODE, L_PA,
                                 L_PANODE, L_PR_VERSION, L_DESCRIPTION, L_VALUE_F,
                                 L_VALUE_S, L_UNIT, L_EXEC_START_DATE,
                                 L_EXEC_END_DATE, L_EXECUTOR, L_PLANNED_EXECUTOR,
                                 L_MANUALLY_ENTERED, L_ASSIGN_DATE,
                                 L_ASSIGNED_BY, L_MANUALLY_ADDED, L_FORMAT,
                                 L_TD_INFO, L_TD_INFO_UNIT, L_CONFIRM_UID,
                                 L_ALLOW_ANY_ME, L_DELAY, L_DELAY_UNIT,
                                 L_MIN_NR_RESULTS, L_CALC_METHOD, L_CALC_CF,
                                 L_ALARM_ORDER, L_SPECSA, L_SPECSB, L_SPECSC,
                                 L_LIMITSA, L_LIMITSB, L_LIMITSC, L_TARGETA,
                                 L_TARGETB, L_TARGETC,
                                 L_MT, L_MT_VERSION, L_MT_NR_MEASUR, L_LOG_EXCEPTIONS,
                                 L_PA_CLASS, L_LOG_HS, L_LOG_HS_DETAILS, L_LC, L_LC_VERSION, 
                                 L_MODIFY_FLAG, L_NR_OF_ROWS, 'Alarm handling');
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         L_ERRM := 'SaveScParameter returned ' || TO_CHAR(L_RET_CODE);
         UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
         RAISE STPERROR;
      END IF;

      SELECT ST, ST_VERSION
      INTO L_ST, L_ST_VERSION
      FROM UTSC
      WHERE SC = A_SC;

      SELECT PP_VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5 
      INTO L_PP_VERSION, L_PP_KEY1, L_PP_KEY2, L_PP_KEY3, L_PP_KEY4, L_PP_KEY5 
      FROM UTSCPG
      WHERE SC = A_SC
        AND PG = A_PG
        AND PGNODE = A_PGNODE;
      
      
      
      L_RET_CODE := UNAPIPA.CREATESCPADETAILS(L_ST, L_ST_VERSION, A_PG, L_PP_VERSION,
                                              L_PP_KEY1, L_PP_KEY2, L_PP_KEY3, L_PP_KEY4, L_PP_KEY5, A_PA, 
                                              L_PR_VERSION(1), NULL, A_SC, A_PG, L_PGNODE(1), 
                                              L_PANODE(1), UNAPIGEN.PERFORM_FREQ_FILTERING, CURRENT_TIMESTAMP, NULL, 
                                              L_MT_VERSION(1), NULL, 'Alarm handling');
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         L_ERRM := 'CreateScPaDetails returned ' || TO_CHAR(L_RET_CODE);
         UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
         RAISE STPERROR;
      END IF;

   EXCEPTION
   
   WHEN NO_DATA_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR;
   END ADDMEASUREMENT;

   
   PROCEDURE EXECUTECUSTOMFUNCTION(A_CF IN VARCHAR2) IS

   L_CF_CURSOR         INTEGER;
   
   COMPONENT_NOT_DECLARED EXCEPTION;
   PRAGMA EXCEPTION_INIT(COMPONENT_NOT_DECLARED, -6550);

   BEGIN

      L_CF_CURSOR := DBMS_SQL.OPEN_CURSOR;
      L_SQL_STRING := 'BEGIN :l_retcode := UNALARM.' || A_CF ||
                      '(:l_sc, :l_pg, :l_pgnode, :l_pa,' ||
                      ':l_panode, :l_valid_specsa, :l_valid_specsb, '||
                      ':l_valid_specsc, :l_valid_limitsa, :l_valid_limitsb, '||
                      ':l_valid_limitsc, :l_valid_targeta, :l_valid_targetb, '||
                      ':l_valid_targetc); END;';

      BEGIN
         DBMS_SQL.PARSE(L_CF_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

         DBMS_SQL.BIND_VARIABLE(L_CF_CURSOR, ':l_retcode', L_RET_CODE);
         DBMS_SQL.BIND_VARIABLE(L_CF_CURSOR, ':l_sc', A_SC);
         DBMS_SQL.BIND_VARIABLE(L_CF_CURSOR, ':l_pg', A_PG);
         DBMS_SQL.BIND_VARIABLE(L_CF_CURSOR, ':l_pgnode', A_PGNODE);
         DBMS_SQL.BIND_VARIABLE(L_CF_CURSOR, ':l_pa', A_PA);
         DBMS_SQL.BIND_VARIABLE(L_CF_CURSOR, ':l_panode', A_PANODE);
         DBMS_SQL.BIND_VARIABLE(L_CF_CURSOR, ':l_valid_specsa', L_VALID_SPECSA);
         DBMS_SQL.BIND_VARIABLE(L_CF_CURSOR, ':l_valid_specsb', L_VALID_SPECSB);
         DBMS_SQL.BIND_VARIABLE(L_CF_CURSOR, ':l_valid_specsc', L_VALID_SPECSC);
         DBMS_SQL.BIND_VARIABLE(L_CF_CURSOR, ':l_valid_limitsa', L_VALID_LIMITSA);
         DBMS_SQL.BIND_VARIABLE(L_CF_CURSOR, ':l_valid_limitsb', L_VALID_LIMITSB);
         DBMS_SQL.BIND_VARIABLE(L_CF_CURSOR, ':l_valid_limitsc', L_VALID_LIMITSC);
         DBMS_SQL.BIND_VARIABLE(L_CF_CURSOR, ':l_valid_targeta', L_VALID_TARGETA);
         DBMS_SQL.BIND_VARIABLE(L_CF_CURSOR, ':l_valid_targetb', L_VALID_TARGETB);
         DBMS_SQL.BIND_VARIABLE(L_CF_CURSOR, ':l_valid_targetc', L_VALID_TARGETC);

         L_RESULT := DBMS_SQL.EXECUTE(L_CF_CURSOR);
         DBMS_SQL.VARIABLE_VALUE(L_CF_CURSOR, ':l_retcode', L_RET_CODE);
         DBMS_SQL.CLOSE_CURSOR(L_CF_CURSOR);

      EXCEPTION
      WHEN COMPONENT_NOT_DECLARED THEN
         IF DBMS_SQL.IS_OPEN(L_CF_CURSOR) THEN
            DBMS_SQL.CLOSE_CURSOR(L_CF_CURSOR);
         END IF;
         L_RET_CODE := UNAPIGEN.DBERR_SUCCESS ;
      WHEN OTHERS THEN
			L_ERRM := SUBSTR('UNALARM.' || A_CF, 1, 40)|| ' returned '||SUBSTR(SQLERRM,1,170);
			L_RET_CODE := UNAPIGEN.DBERR_GENFAIL;
			IF DBMS_SQL.IS_OPEN(L_CF_CURSOR) THEN
				DBMS_SQL.CLOSE_CURSOR(L_CF_CURSOR);
			END IF;
      END;

      
      
      
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
         RAISE STPERROR;
      END IF;

      A_VALID_SPECSA := L_VALID_SPECSA;
      A_VALID_SPECSB := L_VALID_SPECSB;
      A_VALID_SPECSC := L_VALID_SPECSC;
      A_VALID_LIMITSA := L_VALID_LIMITSA;
      A_VALID_LIMITSB := L_VALID_LIMITSB;
      A_VALID_LIMITSC := L_VALID_LIMITSC;
      A_VALID_TARGETA := L_VALID_TARGETA;
      A_VALID_TARGETB := L_VALID_TARGETB;
      A_VALID_TARGETC := L_VALID_TARGETC;
   END EXECUTECUSTOMFUNCTION;

BEGIN

   
   
   
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   L_ERRM := '';
   
   
   
   OPEN L_SCPA_CURSOR;
   FETCH L_SCPA_CURSOR
   INTO L_SCPA_REC;
   IF L_SCPA_CURSOR%NOTFOUND THEN
      L_ERRM := 'No records for sc=' || A_SC ||
                '#pg=' || A_PG || '#pgnode=' || TO_CHAR(A_PGNODE) ||
                '#pa=' || A_PA || '#panode=' || TO_CHAR(A_PANODE) ;
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR;
   END IF;
   CLOSE L_SCPA_CURSOR;
   L_SCPANEW_REC := L_SCPA_REC;

   
   
   
   
   IF L_SCPA_REC.EXEC_END_DATE IS NULL OR
      L_SCPA_REC.VALUE_F IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SUCCESS;
   ELSE
      
      
      
      OPEN L_PR_CURSOR(A_PA, L_SCPA_REC.PR_VERSION);
      FETCH L_PR_CURSOR
      INTO L_SETA_SPECS, L_SETA_LIMITS, L_SETA_TARGET,
           L_SETB_SPECS, L_SETB_LIMITS, L_SETB_TARGET,
           L_SETC_SPECS, L_SETC_LIMITS, L_SETC_TARGET;
      IF L_PR_CURSOR%NOTFOUND THEN
         L_SETA_SPECS  := NULL;
         L_SETA_LIMITS := NULL;
         L_SETB_SPECS  := NULL;
         L_SETB_LIMITS := NULL;
         L_SETB_TARGET := NULL;
         L_SETC_SPECS  := NULL;
         L_SETC_LIMITS := NULL;
         L_SETC_TARGET := NULL;
      END IF;
      CLOSE L_PR_CURSOR;
   
      L_VALID_LIMITSA := NULL;
      L_VALID_LIMITSB := NULL;
      L_VALID_LIMITSC := NULL;
      L_VALID_SPECSA := NULL;
      L_VALID_SPECSB := NULL;
      L_VALID_SPECSC := NULL;
      L_VALID_TARGETA := NULL;
      L_VALID_TARGETB := NULL;
      L_VALID_TARGETC := NULL;
      L_ALARMS_CNT := 0;
   
      
      
      
      
      FOR S IN 1..3 LOOP
         
         
         
         IF SUBSTR(L_SCPA_REC.ALARM_ORDER, S, 1) = 'a' THEN
            OPEN L_SCPASPA_CURSOR;
            FETCH L_SCPASPA_CURSOR
            INTO L_LOW_LIMIT, L_HIGH_LIMIT, L_LOW_SPEC, L_HIGH_SPEC, L_LOW_DEV,
                 L_REL_LOW_DEV, L_TARGET, L_HIGH_DEV, L_REL_HIGH_DEV;
            IF L_SCPASPA_CURSOR%FOUND THEN
               CHECKSPECS(L_VALID_LIMITSA, L_VALID_SPECSA, L_VALID_TARGETA,
                          L_SETA_LIMITS, L_SETA_SPECS, L_SETA_TARGET);
            END IF;
            CLOSE L_SCPASPA_CURSOR;
         
         
         
         ELSIF SUBSTR(L_SCPA_REC.ALARM_ORDER, S, 1) = 'b' THEN
            OPEN L_SCPASPB_CURSOR;
            FETCH L_SCPASPB_CURSOR
            INTO L_LOW_LIMIT, L_HIGH_LIMIT, L_LOW_SPEC, L_HIGH_SPEC, L_LOW_DEV,
                 L_REL_LOW_DEV, L_TARGET, L_HIGH_DEV, L_REL_HIGH_DEV;
            IF L_SCPASPB_CURSOR%FOUND THEN
               CHECKSPECS(L_VALID_LIMITSB, L_VALID_SPECSB, L_VALID_TARGETB,
                          L_SETB_LIMITS, L_SETB_SPECS, L_SETB_TARGET);
            END IF;
            CLOSE L_SCPASPB_CURSOR;
         
         
         
         ELSIF SUBSTR(L_SCPA_REC.ALARM_ORDER, S, 1) = 'c' THEN
            OPEN L_SCPASPC_CURSOR;
            FETCH L_SCPASPC_CURSOR
            INTO L_LOW_LIMIT, L_HIGH_LIMIT, L_LOW_SPEC, L_HIGH_SPEC, L_LOW_DEV,
                 L_REL_LOW_DEV, L_TARGET, L_HIGH_DEV, L_REL_HIGH_DEV;
            IF L_SCPASPC_CURSOR%FOUND THEN
               CHECKSPECS(L_VALID_LIMITSC, L_VALID_SPECSC, L_VALID_TARGETC,
                          L_SETC_LIMITS, L_SETC_SPECS, L_SETC_TARGET);
            END IF;
            CLOSE L_SCPASPC_CURSOR;
         END IF;
      END LOOP;
   
      
      
      
      IF NVL(L_VALID_TARGETA, ' ') <> ' ' OR NVL(L_VALID_SPECSA,  ' ') <> ' ' OR
         NVL(L_VALID_LIMITSA, ' ') <> ' ' OR NVL(L_VALID_TARGETB, ' ') <> ' ' OR
         NVL(L_VALID_SPECSB,  ' ') <> ' ' OR NVL(L_VALID_LIMITSB, ' ') <> ' ' OR
         NVL(L_VALID_TARGETC, ' ') <> ' ' OR NVL(L_VALID_SPECSC,  ' ') <> ' ' OR
         NVL(L_VALID_LIMITSC, ' ') <> ' ' THEN
         L_VALIDATED := FALSE;
         
         
         
         IF NVL(L_SCPA_REC.LOG_EXCEPTIONS, ' ') = '1' THEN
            BEGIN
               INSERT INTO UTRESULTEXCEPTION(SC, PG, PGNODE, PA, PANODE, REANALYSIS)
               VALUES(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, L_SCPA_REC.REANALYSIS);
            EXCEPTION
            WHEN DUP_VAL_ON_INDEX THEN
               NULL;
            END;
         END IF;
      ELSE
         L_VALIDATED := TRUE;
      END IF;
   
      
      
      
      UPDATE UTSCPA
         SET VALID_SPECSA = L_VALID_SPECSA,
             VALID_SPECSB = L_VALID_SPECSB,
             VALID_SPECSC = L_VALID_SPECSC,
             VALID_LIMITSA = L_VALID_LIMITSA,
             VALID_LIMITSB = L_VALID_LIMITSB,
             VALID_LIMITSC = L_VALID_LIMITSC,
             VALID_TARGETA = L_VALID_TARGETA,
             VALID_TARGETB = L_VALID_TARGETB,
             VALID_TARGETC = L_VALID_TARGETC
      WHERE SC = A_SC
        AND PG = A_PG
        AND PGNODE = A_PGNODE
        AND PA = A_PA
        AND PANODE = A_PANODE
      RETURNING SC, PG, PGNODE, PA, PANODE, PR_VERSION, DESCRIPTION, VALUE_F, VALUE_S, UNIT, 
                EXEC_START_DATE, EXEC_END_DATE, EXECUTOR, PLANNED_EXECUTOR, MANUALLY_ENTERED, 
                ASSIGN_DATE, ASSIGNED_BY, MANUALLY_ADDED, FORMAT, TD_INFO, TD_INFO_UNIT, CONFIRM_UID, 
                ALLOW_ANY_ME, DELAY, DELAY_UNIT, MIN_NR_RESULTS, CALC_METHOD, CALC_CF, ALARM_ORDER, 
                VALID_SPECSA, VALID_SPECSB, VALID_SPECSC, VALID_LIMITSA, VALID_LIMITSB, VALID_LIMITSC, 
                VALID_TARGETA, VALID_TARGETB, VALID_TARGETC, LOG_EXCEPTIONS, REANALYSIS, LAST_COMMENT, 
                PA_CLASS, LOG_HS, LOG_HS_DETAILS, ALLOW_MODIFY, ACTIVE, LC, LC_VERSION, SS
      INTO L_SCPANEW_REC.SC, L_SCPANEW_REC.PG, L_SCPANEW_REC.PGNODE, L_SCPANEW_REC.PA, 
           L_SCPANEW_REC.PANODE, L_SCPANEW_REC.PR_VERSION, L_SCPANEW_REC.DESCRIPTION, 
           L_SCPANEW_REC.VALUE_F, L_SCPANEW_REC.VALUE_S, L_SCPANEW_REC.UNIT, 
           L_SCPANEW_REC.EXEC_START_DATE, L_SCPANEW_REC.EXEC_END_DATE, L_SCPANEW_REC.EXECUTOR, 
           L_SCPANEW_REC.PLANNED_EXECUTOR, L_SCPANEW_REC.MANUALLY_ENTERED, L_SCPANEW_REC.ASSIGN_DATE, 
           L_SCPANEW_REC.ASSIGNED_BY, L_SCPANEW_REC.MANUALLY_ADDED, L_SCPANEW_REC.FORMAT, 
           L_SCPANEW_REC.TD_INFO, L_SCPANEW_REC.TD_INFO_UNIT, L_SCPANEW_REC.CONFIRM_UID, 
           L_SCPANEW_REC.ALLOW_ANY_ME, L_SCPANEW_REC.DELAY, L_SCPANEW_REC.DELAY_UNIT, 
           L_SCPANEW_REC.MIN_NR_RESULTS, L_SCPANEW_REC.CALC_METHOD, L_SCPANEW_REC.CALC_CF, 
           L_SCPANEW_REC.ALARM_ORDER, L_SCPANEW_REC.VALID_SPECSA, L_SCPANEW_REC.VALID_SPECSB, 
           L_SCPANEW_REC.VALID_SPECSC, L_SCPANEW_REC.VALID_LIMITSA, L_SCPANEW_REC.VALID_LIMITSB, 
           L_SCPANEW_REC.VALID_LIMITSC, L_SCPANEW_REC.VALID_TARGETA, L_SCPANEW_REC.VALID_TARGETB, 
           L_SCPANEW_REC.VALID_TARGETC, L_SCPANEW_REC.LOG_EXCEPTIONS, L_SCPANEW_REC.REANALYSIS, 
           L_SCPANEW_REC.LAST_COMMENT, L_SCPANEW_REC.PA_CLASS, L_SCPANEW_REC.LOG_HS, 
           L_SCPANEW_REC.LOG_HS_DETAILS, L_SCPANEW_REC.ALLOW_MODIFY, L_SCPANEW_REC.ACTIVE, 
           L_SCPANEW_REC.LC, L_SCPANEW_REC.LC_VERSION, L_SCPANEW_REC.SS;
             
      A_VALID_SPECSA := L_VALID_SPECSA;
      A_VALID_SPECSB := L_VALID_SPECSB;
      A_VALID_SPECSC := L_VALID_SPECSC;
      A_VALID_LIMITSA := L_VALID_LIMITSA;
      A_VALID_LIMITSB := L_VALID_LIMITSB;
      A_VALID_LIMITSC := L_VALID_LIMITSC;
      A_VALID_TARGETA := L_VALID_TARGETA;
      A_VALID_TARGETB := L_VALID_TARGETB;
      A_VALID_TARGETC := L_VALID_TARGETC;
   
      
      
      
      IF NOT L_VALIDATED AND
         NVL(A_ALARMS_HANDLED, ' ') <> '1' THEN
         
         
         
         
         
         
   
         FOR I IN 1..L_ALARMS_CNT LOOP
            IF L_ALARMS_QUEUE(I) = 'PerformReanalysis' THEN
               
               
               
               FOR J IN I+1..L_ALARMS_CNT LOOP
                  IF L_ALARMS_QUEUE(J) = 'PerformReanalysis' OR
                     L_ALARMS_QUEUE(J) = 'AddMeasurement' THEN
                     L_ALARMS_QUEUE(J) := '';
                  END IF;
               END LOOP;
            ELSIF L_ALARMS_QUEUE(I) = 'AddMeasurement' THEN
               
               
               
               FOR J IN I+1..L_ALARMS_CNT LOOP
                  IF L_ALARMS_QUEUE(J) = 'AddMeasurement' THEN
                     L_ALARMS_QUEUE(J) := '';
                  END IF;
               END LOOP;
            END IF;
         END LOOP;
   
         
         
         
         FOR I IN 1..L_ALARMS_CNT LOOP
            IF L_ALARMS_QUEUE(I) = 'PerformReanalysis' THEN
               
               
               
               L_RET_CODE :=
                  UNAPIPA.REANALSCPARAMETER(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE,
                                            L_REANALYSIS, 'Alarm handling');
               IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
                  L_ERRM := 'ReanalScParameter returned ' || TO_CHAR(L_RET_CODE);
                  UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
                  RAISE STPERROR;
               END IF;
            ELSIF L_ALARMS_QUEUE(I) = 'AddMeasurement' THEN
                ADDMEASUREMENT;
            ELSIF L_ALARMS_QUEUE(I) = 'WarningOnStatusBar' THEN
               
               NULL;
            ELSIF L_ALARMS_QUEUE(I) = 'AskToAddComment' THEN
               
               NULL;
            ELSIF L_ALARMS_QUEUE(I) = 'WarningAskToConfirm' THEN
               
               NULL;
            ELSIF L_ALARMS_QUEUE(I) IS NOT NULL THEN
               EXECUTECUSTOMFUNCTION(L_ALARMS_QUEUE(I));
            END IF;
         END LOOP;
      END IF;
   
      L_EV_DETAILS := 'sc=' || A_SC ||
                      '#pg=' || A_PG || '#pgnode=' || TO_CHAR(A_PGNODE) ||
                      '#pa=' || A_PA || '#panode=' || TO_CHAR(A_PANODE) ||
                      '#pr_version=' || L_SCPA_REC.PR_VERSION;
      L_EVENT_TP := 'PaValidationDone';
      L_EV_SEQ_NR := -1;
      L_RESULT := UNAPIEV.INSERTEVENT('EvalAlarmHandling', UNAPIGEN.P_EVMGR_NAME, 'pa', A_PA,
                                      L_SCPA_REC.LC, L_SCPA_REC.LC_VERSION, L_SCPA_REC.SS, 
                                      L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);
      IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
         UNAPIGEN.P_TXN_ERROR := L_RESULT;
         RAISE STPERROR;
      END IF;
      
      L_HS_DETAILS_SEQ_NR := 0;
      IF L_SCPA_REC.LOG_HS_DETAILS = '1' THEN
         UNAPIHSDETAILS.ADDSCPAHSDETAILS(L_SCPA_REC, L_SCPANEW_REC, UNAPIGEN.P_TR_SEQ, 
                                         L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR);
      END IF;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('EvalAlarmHandling', SQLERRM);
   ELSIF L_ERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('EvalAlarmHandling', L_ERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'EvalAlarmHandling'));
END EVALALARMHANDLING;

FUNCTION CHECKSQCRULES                     
(A_SC                      IN  VARCHAR2,   
 A_PG                      IN  VARCHAR2,   
 A_PGNODE                  IN  NUMBER,     
 A_PA                      IN  VARCHAR2,   
 A_PANODE                  IN  NUMBER,     
 A_VALUE_F                 IN  NUMBER,     
 A_VALID_SQC               OUT CHAR)       
RETURN NUMBER IS

L_VALID_SQC                   CHAR(1);
L_SQC_FOUND                   BOOLEAN;
L_SQC_AVG                     NUMBER;
L_SQC_SIGMA                   NUMBER;
L_ST                          VARCHAR2(20);
L_ST_VERSION                  VARCHAR2(20);
L_PREVIOUS_VALUE_FROM_CURSOR  FLOAT;


L_CHECK_RISING      BOOLEAN;
L_CHECK_FALLING     BOOLEAN;
L_CHECK_ABOVE       BOOLEAN;
L_CHECK_BELOW       BOOLEAN;
L_CHECK_PLUS2S      BOOLEAN;
L_CHECK_PLUS3S      BOOLEAN;
L_CHECK_MIN2S       BOOLEAN;
L_CHECK_MIN3S       BOOLEAN;


L_CHECK_RISING_CNT  INTEGER;
L_CHECK_FALLING_CNT INTEGER;
L_CHECK_ABOVE_CNT   INTEGER;
L_CHECK_BELOW_CNT   INTEGER;
L_CHECK_PLUS2S_CNT  INTEGER;
L_CHECK_PLUS3S_CNT  INTEGER;
L_CHECK_MIN2S_CNT   INTEGER;
L_CHECK_MIN3S_CNT   INTEGER;


CURSOR L_OLD_RESULTS_CURSOR(C_ST VARCHAR2, C_ST_VERSION VARCHAR2, C_PA VARCHAR2) IS
   SELECT A.SC, A.PG, A.PGNODE, A.PA, A.PANODE, A.VALUE_F, B.SQC_AVG, B.SQC_SIGMA
   FROM UTSCPATD A, UTSCPASQC B
   WHERE A.ST = C_ST
     AND A.ST_VERSION = C_ST_VERSION
     AND A.PA = C_PA
     AND A.SC = B.SC (+)
     AND A.PG = B.PG (+)
     AND A.PGNODE = B.PGNODE (+)
     AND A.PA = B.PA (+)
     AND A.PANODE = B.PANODE (+)
   ORDER BY A.EXEC_END_DATE DESC;


CURSOR L_SQC_CURSOR IS
   SELECT SQC_AVG, SQC_SIGMA
   FROM UTSCPASQC
   WHERE SC = A_SC
     AND PG = A_PG
     AND PGNODE = A_PGNODE
     AND PA = A_PA
     AND PANODE = A_PANODE;
  

CURSOR L_UTSYSTEM_CURSOR IS
   SELECT SETTING_NAME, SETTING_VALUE
   FROM UTSYSTEM
   WHERE SETTING_NAME IN ('SQC_POINTS_OUT_3S', 'SQC_POINTS_OUT_2S',
                          'SQC_POINTS_ABOVE_AVG', 'SQC_POINTS_BELOW_AVG',
                          'SQC_POINTS_RISING', 'SQC_POINTS_FALLING');


CURSOR L_ST_CURSOR(A_SC VARCHAR2) IS
   SELECT ST, ST_VERSION
   FROM UTSC
   WHERE SC = A_SC;


CURSOR C_SYSTEM (A_SETTING_NAME VARCHAR2) IS
   SELECT SETTING_VALUE
   FROM UTSYSTEM
   WHERE SETTING_NAME = A_SETTING_NAME;

   
   PROCEDURE DEBUGSQCRULES(A_MESSAGE VARCHAR2) IS
   BEGIN
      IF NOT UNAPIEV.P_EV_MGR_SESSION THEN
         IF UNAPIEVP.DEBUG_SQC_RULES THEN      
            DBMS_OUTPUT.PUT_LINE(A_MESSAGE);
         END IF;
      ELSE
         IF UNAPIEV.P_EV_OUTPUT_ON THEN
            UNTRACE.LOG(A_MESSAGE);
         END IF;
      END IF;
   END DEBUGSQCRULES;

BEGIN





IF L_SQC_ON = 'NO' THEN
   A_VALID_SQC := ' ';
   DEBUGSQCRULES('No SQC ON');
   RETURN(UNAPIGEN.DBERR_SUCCESS);
   
ELSIF L_SQC_ON IS NULL THEN

   OPEN C_SYSTEM('ON_LINE_SQC');
   FETCH C_SYSTEM
   INTO L_SQC_ON;
   IF C_SYSTEM%NOTFOUND THEN
      L_SQC_ON := 'NO';
   END IF;
   CLOSE C_SYSTEM;
   
   IF L_SQC_ON = 'NO' THEN
      A_VALID_SQC := ' ';
      DEBUGSQCRULES('No SQC ON');
      RETURN(UNAPIGEN.DBERR_SUCCESS);
   END IF;
END IF;




OPEN L_SQC_CURSOR;
FETCH L_SQC_CURSOR
INTO L_SQC_AVG, L_SQC_SIGMA;
L_SQC_FOUND := L_SQC_CURSOR%FOUND;
CLOSE L_SQC_CURSOR;













IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
   RAISE STPERROR;
END IF;




IF NOT UNAPIEVP.SQC_RULES_LOADED THEN
   FOR L_UTSYSTEM_REC IN L_UTSYSTEM_CURSOR LOOP
      IF L_UTSYSTEM_REC.SETTING_NAME = 'SQC_POINTS_OUT_3S' THEN
         L_MAX_OUT_3S := NVL(TO_NUMBER(L_UTSYSTEM_REC.SETTING_VALUE),0);
      ELSIF L_UTSYSTEM_REC.SETTING_NAME = 'SQC_POINTS_OUT_2S' THEN
         L_MAX_OUT_2S := NVL(TO_NUMBER(L_UTSYSTEM_REC.SETTING_VALUE),0);
      ELSIF L_UTSYSTEM_REC.SETTING_NAME = 'SQC_POINTS_ABOVE_AVG' THEN
         L_MAX_ABOVE_AVG := NVL(TO_NUMBER(L_UTSYSTEM_REC.SETTING_VALUE),0);
      ELSIF L_UTSYSTEM_REC.SETTING_NAME = 'SQC_POINTS_BELOW_AVG' THEN
         L_MAX_BELOW_AVG := NVL(TO_NUMBER(L_UTSYSTEM_REC.SETTING_VALUE),0);
      ELSIF L_UTSYSTEM_REC.SETTING_NAME = 'SQC_POINTS_RISING' THEN
         L_MAX_RISING := NVL(TO_NUMBER(L_UTSYSTEM_REC.SETTING_VALUE),0);
      ELSIF L_UTSYSTEM_REC.SETTING_NAME = 'SQC_POINTS_FALLING' THEN
         L_MAX_FALLING := NVL(TO_NUMBER(L_UTSYSTEM_REC.SETTING_VALUE),0);
      END IF;
      UNAPIEVP.SQC_RULES_LOADED := TRUE;
   END LOOP;
   IF NOT UNAPIEVP.SQC_RULES_LOADED THEN
      L_SQLERRM := 'No SQC rules found in system settings';
      RAISE STPERROR;
   END IF;
END IF;

DEBUGSQCRULES('Rules configuration');
DEBUGSQCRULES('max cnt 3s=' || L_MAX_OUT_3S);
DEBUGSQCRULES('max cnt 2s=' || L_MAX_OUT_2S);
DEBUGSQCRULES('max cnt  +=' || L_MAX_ABOVE_AVG);
DEBUGSQCRULES('max cnt  -=' || L_MAX_BELOW_AVG);
DEBUGSQCRULES('max cnt ->=' || L_MAX_RISING);
DEBUGSQCRULES('max cnt <-=' || L_MAX_FALLING);


L_CHECK_FALLING := TRUE;
L_CHECK_RISING := TRUE;
L_CHECK_ABOVE := TRUE;
L_CHECK_BELOW := TRUE;
L_CHECK_PLUS2S := TRUE;
L_CHECK_PLUS3S := TRUE;
L_CHECK_MIN2S := TRUE;
L_CHECK_MIN3S := TRUE;


IF L_MAX_OUT_3S = 0 THEN
   L_CHECK_PLUS3S := FALSE;
   L_CHECK_MIN3S := FALSE;
END IF;
IF L_MAX_OUT_2S = 0 THEN
   L_CHECK_PLUS2S := FALSE;
   L_CHECK_MIN2S := FALSE;
END IF;
IF L_MAX_ABOVE_AVG = 0 THEN
   L_CHECK_ABOVE := FALSE;
END IF;
IF L_MAX_BELOW_AVG = 0 THEN
   L_CHECK_BELOW := FALSE;
END IF;
IF L_MAX_RISING = 0 THEN
   L_CHECK_RISING := FALSE;
ELSE
   L_CHECK_RISING := TRUE;
END IF;
IF L_MAX_FALLING = 0 THEN
   L_CHECK_FALLING := FALSE;
END IF;




L_VALID_SQC := NULL;
L_CHECK_RISING_CNT := 0;
L_CHECK_FALLING_CNT := 0;
L_CHECK_ABOVE_CNT := 0;
L_CHECK_BELOW_CNT := 0;
L_CHECK_PLUS2S_CNT := 0;
L_CHECK_PLUS3S_CNT := 0;
L_CHECK_MIN2S_CNT := 0;
L_CHECK_MIN3S_CNT := 0;


L_CHECK_RISING_CNT := 1;
L_CHECK_FALLING_CNT := 1;


IF A_VALUE_F > L_SQC_AVG THEN
   L_CHECK_ABOVE := TRUE;
   L_CHECK_ABOVE_CNT := 1;
   L_CHECK_BELOW := FALSE;
   L_CHECK_MIN3S := FALSE;
   L_CHECK_MIN2S := FALSE;
   IF A_VALUE_F > (L_SQC_AVG + 2*L_SQC_SIGMA) THEN
      L_CHECK_PLUS2S := TRUE;
      L_CHECK_PLUS2S_CNT := 1;
      IF A_VALUE_F > (L_SQC_AVG + 3*L_SQC_SIGMA) THEN
         L_CHECK_PLUS3S := TRUE;
         L_CHECK_PLUS3S_CNT := 1;
      ELSE
         L_CHECK_PLUS3S := FALSE;
      END IF;
   ELSE
      L_CHECK_PLUS3S := FALSE;
      L_CHECK_PLUS2S := FALSE;
   END IF;
ELSIF A_VALUE_F < L_SQC_AVG THEN
   L_CHECK_BELOW := TRUE;
   L_CHECK_BELOW_CNT := 1;
   L_CHECK_ABOVE := FALSE;
   L_CHECK_PLUS3S := FALSE;
   L_CHECK_PLUS2S := FALSE;
   IF A_VALUE_F < (L_SQC_AVG - 2*L_SQC_SIGMA) THEN
      L_CHECK_MIN2S := TRUE;
      L_CHECK_MIN2S_CNT := 1;
      IF A_VALUE_F < (L_SQC_AVG - 3*L_SQC_SIGMA) THEN
         L_CHECK_MIN3S := TRUE;
         L_CHECK_MIN3S_CNT := 1;
      ELSE
         L_CHECK_MIN3S := FALSE;
      END IF;
   ELSE
      L_CHECK_MIN3S := FALSE;
      L_CHECK_MIN2S := FALSE;
   END IF;
ELSE
   L_CHECK_BELOW := FALSE;
   L_CHECK_ABOVE := FALSE;
   L_CHECK_PLUS3S := FALSE;
   L_CHECK_PLUS2S := FALSE;
   L_CHECK_MIN3S := FALSE;
   L_CHECK_MIN2S := FALSE;
END IF;




IF L_MAX_OUT_3S = 0 THEN
   L_CHECK_PLUS3S := FALSE;
   L_CHECK_MIN3S := FALSE;
ELSIF L_MAX_OUT_3S = 1 THEN
   
   IF L_CHECK_PLUS3S_CNT >= L_MAX_OUT_3S OR
      L_CHECK_MIN3S_CNT >= L_MAX_OUT_3S THEN
      L_VALID_SQC := UNAPIGEN.EXCEEDED_OUT_3S;
   ELSE
      L_CHECK_PLUS3S := FALSE;
      L_CHECK_MIN3S := FALSE;
   END IF;
END IF;


IF L_MAX_OUT_2S = 0 THEN
   L_CHECK_PLUS2S := FALSE;
   L_CHECK_MIN2S := FALSE;
ELSIF L_MAX_OUT_2S = 1 THEN
   
   IF L_CHECK_PLUS2S_CNT >= L_MAX_OUT_2S OR
      L_CHECK_MIN2S_CNT >= L_MAX_OUT_2S THEN
      L_VALID_SQC := UNAPIGEN.EXCEEDED_OUT_2S;
   ELSE
      L_CHECK_PLUS2S := FALSE;
      L_CHECK_MIN2S := FALSE;
   END IF;
END IF;
IF NVL(L_MAX_ABOVE_AVG, 0) = 0 THEN
   L_CHECK_ABOVE := FALSE;
END IF;
IF NVL(L_MAX_BELOW_AVG, 0) = 0 THEN
   L_CHECK_BELOW := FALSE;
END IF;
IF NVL(L_MAX_RISING, 0) = 0 THEN
   L_CHECK_RISING := FALSE;
END IF;
IF NVL(L_MAX_FALLING, 0) = 0 THEN
   L_CHECK_FALLING := FALSE;
END IF;

DEBUGSQCRULES('Rules checked after current value:'||L_VALID_SQC);
DEBUGSQCRULES('>3s='|| NVL(L_CHECK_PLUS3S_CNT, 0));
DEBUGSQCRULES('>2s='|| NVL(L_CHECK_PLUS2S_CNT, 0));
DEBUGSQCRULES('<3s='|| NVL(L_CHECK_MIN3S_CNT, 0));
DEBUGSQCRULES('<2s='|| NVL(L_CHECK_MIN2S_CNT, 0));
DEBUGSQCRULES('+='|| NVL(L_CHECK_ABOVE_CNT, 0));
DEBUGSQCRULES('-='|| NVL(L_CHECK_BELOW_CNT, 0));
DEBUGSQCRULES('->='|| NVL(L_CHECK_RISING_CNT, 0));
DEBUGSQCRULES('<-='|| NVL(L_CHECK_FALLING_CNT, 0));


IF L_VALID_SQC IS NULL THEN
   
   
   
   
   OPEN L_ST_CURSOR(A_SC);
   FETCH L_ST_CURSOR
   INTO L_ST, L_ST_VERSION;
   CLOSE L_ST_CURSOR;
      
   
   L_PREVIOUS_VALUE_FROM_CURSOR := A_VALUE_F;
   FOR L_PREV IN L_OLD_RESULTS_CURSOR(L_ST, L_ST_VERSION, A_PA) LOOP
   
      IF L_PREV.SC = A_SC AND
         L_PREV.PG = A_PG AND
         L_PREV.PGNODE = A_PGNODE AND
         L_PREV.PA = A_PA AND
         L_PREV.PANODE = A_PANODE THEN
         
         NULL;
      ELSE
         
         DEBUGSQCRULES('---Checking in historic data');
         DEBUGSQCRULES('---Checking value = '|| L_PREV.VALUE_F);

         
         L_SQC_AVG := NVL(L_PREV.SQC_AVG, L_SQC_AVG);
         L_SQC_SIGMA := NVL(L_PREV.SQC_SIGMA, L_SQC_SIGMA);

         IF L_PREV.VALUE_F > L_SQC_AVG THEN
            
            IF L_PREV.VALUE_F > (L_SQC_AVG + 3*L_SQC_SIGMA) THEN
               IF L_CHECK_PLUS3S THEN
                  L_CHECK_PLUS3S_CNT := L_CHECK_PLUS3S_CNT + 1;
                  IF L_CHECK_PLUS3S_CNT >= L_MAX_OUT_3S THEN
                     L_VALID_SQC := UNAPIGEN.EXCEEDED_OUT_3S;
                     EXIT;
                  END IF;
               END IF;
            ELSE
               L_CHECK_PLUS3S := FALSE;
            END IF;
            
            IF L_PREV.VALUE_F > (L_SQC_AVG + 2*L_SQC_SIGMA) THEN
               IF L_CHECK_PLUS2S THEN
                  L_CHECK_PLUS2S_CNT := L_CHECK_PLUS2S_CNT + 1;
                  IF L_CHECK_PLUS2S_CNT >= L_MAX_OUT_2S THEN
                     L_VALID_SQC := UNAPIGEN.EXCEEDED_OUT_2S;
                     EXIT;
                  END IF;
               END IF;
            ELSE
               L_CHECK_PLUS2S := FALSE;
            END IF;

            
            IF L_CHECK_ABOVE THEN
               L_CHECK_ABOVE_CNT := L_CHECK_ABOVE_CNT + 1;
               IF L_CHECK_ABOVE_CNT >= L_MAX_ABOVE_AVG THEN
                  L_VALID_SQC := UNAPIGEN.EXCEEDED_ABOVE_AVG;
                  EXIT;
               END IF;
            END IF;

            
            L_CHECK_MIN2S := FALSE;
            L_CHECK_MIN3S := FALSE;
            L_CHECK_BELOW := FALSE;
         ELSIF L_PREV.VALUE_F < L_SQC_AVG THEN

            
            IF L_PREV.VALUE_F < (L_SQC_AVG - 3*L_SQC_SIGMA) THEN
               IF L_CHECK_MIN3S THEN
                  L_CHECK_MIN3S_CNT := L_CHECK_MIN3S_CNT + 1;
                  IF L_CHECK_MIN3S_CNT >= L_MAX_OUT_3S THEN
                     L_VALID_SQC := UNAPIGEN.EXCEEDED_OUT_3S;
                     EXIT;
                  END IF;
               END IF;
            ELSE
               L_CHECK_MIN3S := FALSE;
            END IF;
            
            IF L_PREV.VALUE_F < (L_SQC_AVG - 2*L_SQC_SIGMA) THEN
               IF L_CHECK_MIN2S THEN
                  L_CHECK_MIN2S_CNT := L_CHECK_MIN2S_CNT + 1;
                  IF L_CHECK_MIN2S_CNT >= L_MAX_OUT_2S THEN
                     L_VALID_SQC := UNAPIGEN.EXCEEDED_OUT_2S;
                     EXIT;
                  END IF;
               END IF;
            ELSE
               L_CHECK_MIN2S := FALSE;
            END IF;

            
            IF L_CHECK_BELOW THEN
               L_CHECK_BELOW_CNT := L_CHECK_BELOW_CNT + 1;
               IF L_CHECK_BELOW_CNT >= L_MAX_BELOW_AVG THEN
                  L_VALID_SQC := UNAPIGEN.EXCEEDED_BELOW_AVG;
                  EXIT;
               END IF;
            END IF;

            
            L_CHECK_PLUS2S := FALSE;
            L_CHECK_PLUS3S := FALSE; 
            L_CHECK_ABOVE := FALSE;
         ELSE
            L_CHECK_MIN2S := FALSE;
            L_CHECK_MIN3S := FALSE;
            L_CHECK_BELOW := FALSE;
            L_CHECK_PLUS2S := FALSE;
            L_CHECK_PLUS3S := FALSE; 
            L_CHECK_ABOVE := FALSE;
         
         END IF;

         
         IF L_PREV.VALUE_F < L_PREVIOUS_VALUE_FROM_CURSOR THEN
            
            L_CHECK_FALLING := FALSE;
            
            IF L_CHECK_RISING THEN
               L_CHECK_RISING_CNT := L_CHECK_RISING_CNT + 1;
               IF L_CHECK_RISING_CNT >= L_MAX_RISING THEN
                  L_VALID_SQC := UNAPIGEN.EXCEEDED_RISING;
                  EXIT;
               END IF;
            END IF;
         
         ELSIF L_PREV.VALUE_F > L_PREVIOUS_VALUE_FROM_CURSOR THEN
            
            L_CHECK_RISING := FALSE;
            
            IF L_CHECK_FALLING THEN
               L_CHECK_FALLING_CNT := L_CHECK_FALLING_CNT + 1;
               IF L_CHECK_FALLING_CNT >= L_MAX_FALLING THEN
                  L_VALID_SQC := UNAPIGEN.EXCEEDED_FALLING;
                  EXIT;
               END IF;
            END IF;
         ELSE
            
            L_CHECK_FALLING := FALSE;
            L_CHECK_RISING := FALSE;
         END IF;

      DEBUGSQCRULES('>3s='|| NVL(L_CHECK_PLUS3S_CNT, 0));
      DEBUGSQCRULES('>2s='|| NVL(L_CHECK_PLUS2S_CNT, 0));
      DEBUGSQCRULES('<3s='|| NVL(L_CHECK_MIN3S_CNT, 0));
      DEBUGSQCRULES('<2s='|| NVL(L_CHECK_MIN2S_CNT, 0));
      DEBUGSQCRULES('+='|| NVL(L_CHECK_ABOVE_CNT, 0));
      DEBUGSQCRULES('-='|| NVL(L_CHECK_BELOW_CNT, 0));
      DEBUGSQCRULES('->='|| NVL(L_CHECK_RISING_CNT, 0));
      DEBUGSQCRULES('<-='|| NVL(L_CHECK_FALLING_CNT, 0));

         
         IF NOT L_CHECK_FALLING AND
            NOT L_CHECK_RISING AND
            NOT L_CHECK_ABOVE AND
            NOT L_CHECK_BELOW AND
            NOT L_CHECK_PLUS2S AND
            NOT L_CHECK_PLUS3S AND
            NOT L_CHECK_MIN2S AND
            NOT L_CHECK_MIN3S THEN
            EXIT;
         END IF;
      END IF;
      
      L_PREVIOUS_VALUE_FROM_CURSOR := L_PREV.VALUE_F;
   END LOOP;
END IF;


UPDATE UTSCPASQC
SET VALID_SQC = L_VALID_SQC
WHERE SC = A_SC
  AND PG = A_PG
  AND PGNODE = A_PGNODE
  AND PA = A_PA
  AND PANODE = A_PANODE;
    
A_VALID_SQC := L_VALID_SQC;
DEBUGSQCRULES('Result valid_sqc = '|| L_VALID_SQC);

IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
   RAISE STPERROR;
END IF;

RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.LOGERROR('CheckSQCRules', L_SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('CheckSQCRules', L_SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'CheckSQCRules'));
END CHECKSQCRULES;

FUNCTION INHERITNEWSPECS                                 
(A_SC                     IN      VARCHAR2,              
 A_MODIFIED               IN      VARCHAR2,              
 A_NEW_INHERIT_FROM_PP    IN      VARCHAR2)              
RETURN NUMBER IS

BEGIN
      
   RETURN(UNAPIGEN.DBERR_SUCCESS);
   
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('InheritNewSpecs', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'InheritNewSpecs'));
END INHERITNEWSPECS;

FUNCTION SAVESCPATEXTRESULT                    
(A_SC               IN   VARCHAR2,             
 A_PG               IN   VARCHAR2,             
 A_PGNODE           IN   NUMBER,               
 A_PA               IN   VARCHAR2,             
 A_PANODE           IN   NUMBER,               
 A_VALUE_F          IN   FLOAT,                
 A_VALUE_S          IN   VARCHAR2,             
 A_UNIT             IN   VARCHAR2,             
 A_EXEC_END_DATE    IN   DATE,                 
 A_EXECUTOR         IN   VARCHAR2,             
 A_MANUALLY_ENTERED IN   CHAR)                 
RETURN NUMBER IS

L_PR_VERSION         VARCHAR2(20);
L_LC                 VARCHAR2(2);
L_LC_VERSION         VARCHAR2(20);
L_SS                 VARCHAR2(2);
L_LOG_HS             CHAR(1);
L_LOG_HS_DETAILS     CHAR(1);
L_ALLOW_MODIFY       CHAR(1);
L_ACTIVE             CHAR(1);
L_PA_EXEC_END_DATE   TIMESTAMP WITH TIME ZONE;
L_REANALYSIS         NUMBER;
L_ME_REANALYSIS      NUMBER;
L_SVALARMS_HANDLED   CHAR(1);
L_SVSC               UNAPIGEN.VC20_TABLE_TYPE;
L_SVPG               UNAPIGEN.VC20_TABLE_TYPE;
L_SVPGNODE           UNAPIGEN.LONG_TABLE_TYPE;
L_SVPA               UNAPIGEN.VC20_TABLE_TYPE;
L_SVPANODE           UNAPIGEN.LONG_TABLE_TYPE;
L_SVVALUE_F          UNAPIGEN.FLOAT_TABLE_TYPE;
L_SVVALUE_S          UNAPIGEN.VC40_TABLE_TYPE;
L_SVUNIT             UNAPIGEN.VC20_TABLE_TYPE;
L_SVFORMAT           UNAPIGEN.VC40_TABLE_TYPE;
L_SVEXEC_END_DATE    UNAPIGEN.DATE_TABLE_TYPE;
L_SVEXECUTOR         UNAPIGEN.VC20_TABLE_TYPE;
L_SVMANUALLY_ENTERED UNAPIGEN.CHAR1_TABLE_TYPE;
L_SVREANALYSIS       UNAPIGEN.NUM_TABLE_TYPE;
L_SVMODIFY_FLAG      UNAPIGEN.NUM_TABLE_TYPE;
L_SVNR_OF_ROWS       NUMBER;
L_OLD_VALID_SQC      CHAR(1);
L_HS_DETAILS_SEQ_NR  INTEGER;
L_OLD_VALUE_S        VARCHAR2(20);
L_NEW_VALUE_S        VARCHAR2(20);
L_IS_VALUE_S_UPDATED BOOLEAN:=FALSE;


CURSOR L_SCPA_CURSOR(C_SC VARCHAR2, C_PG VARCHAR2, C_PGNODE NUMBER,
                     C_PA VARCHAR2, C_PANODE NUMBER) IS
   SELECT EXEC_END_DATE, REANALYSIS
   FROM UTSCPA
   WHERE SC = C_SC
     AND PG = C_PG
     AND PGNODE = C_PGNODE
     AND PA = C_PA
     AND PANODE = C_PANODE;

CURSOR L_SCME_MAX_CURSOR IS
   SELECT NVL(MAX(REANALYSIS),0)
   FROM UTSCME
   WHERE SC = A_SC
     AND PG = A_PG
     AND PGNODE = A_PGNODE
     AND PA = A_PA
     AND PANODE = A_PANODE;

CURSOR L_SCPAOLD_CURSOR (A_SC IN VARCHAR2, 
                         A_PG IN VARCHAR2, A_PGNODE IN NUMBER,
                         A_PA IN VARCHAR2, A_PANODE IN NUMBER) IS
   SELECT A.*
   FROM UDSCPA A
   WHERE A.SC = A_SC
     AND A.PG = A_PG
     AND A.PGNODE = A_PGNODE
     AND A.PA = A_PA
     AND A.PANODE = A_PANODE;
L_SCPAOLD_REC           UDSCPA%ROWTYPE;
L_SCPANEW_REC           UDSCPA%ROWTYPE;


CURSOR L_UTSCPAOLD_CURSOR (A_SC IN VARCHAR2, 
                         A_PG IN VARCHAR2, A_PGNODE IN NUMBER,
                         A_PA IN VARCHAR2, A_PANODE IN NUMBER) IS
   SELECT A.*
   FROM UTSCPA A
   WHERE A.SC = A_SC
     AND A.PG = A_PG
     AND A.PGNODE = A_PGNODE
     AND A.PA = A_PA
     AND A.PANODE = A_PANODE;
L_UTSCPAOLD_REC           UTSCPA%ROWTYPE;

CURSOR L_SCPASQCOLD_CURSOR (A_SC IN VARCHAR2, 
                            A_PG IN VARCHAR2, A_PGNODE IN NUMBER,
                            A_PA IN VARCHAR2, A_PANODE IN NUMBER) IS
   SELECT VALID_SQC
   FROM UTSCPASQC A
   WHERE A.SC = A_SC
     AND A.PG = A_PG
     AND A.PGNODE = A_PGNODE
     AND A.PA = A_PA
     AND A.PANODE = A_PANODE;

BEGIN

   
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_SC, ' ') = ' ' OR
      NVL(A_PG, ' ') = ' ' OR
      NVL(A_PGNODE, 0) = 0 OR
      NVL(A_PA, ' ') = ' ' OR
      NVL(A_PANODE, 0) = 0 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   
   
   
      
   OPEN L_SCPA_CURSOR(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE);
   FETCH L_SCPA_CURSOR
   INTO L_PA_EXEC_END_DATE, L_REANALYSIS;
   IF L_SCPA_CURSOR%NOTFOUND THEN
      CLOSE L_SCPA_CURSOR;
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR;
   END IF;
   CLOSE L_SCPA_CURSOR;

   
   
   
   IF L_PA_EXEC_END_DATE IS NOT NULL THEN
      L_RET_CODE := UNAPIAUT.GETSCPAAUTHORISATION(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, 
                                                  L_PR_VERSION, L_LC, L_LC_VERSION, L_SS,
                                                  L_ALLOW_MODIFY, L_ACTIVE,
                                                  L_LOG_HS, L_LOG_HS_DETAILS);
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
         RAISE STPERROR;
      END IF;

      
      
      
      L_IS_VALUE_S_UPDATED := FALSE;
      
      OPEN L_UTSCPAOLD_CURSOR(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE);
      FETCH L_UTSCPAOLD_CURSOR
      INTO L_UTSCPAOLD_REC;
      CLOSE L_UTSCPAOLD_CURSOR;
      
      
      
      
      IF ( SUBSTR(L_UTSCPAOLD_REC.VALUE_S, -4)  IN ('#BLB', '@TXT', '#IMG', '#LNK', '#TXT', '#DOC' ) ) THEN

         L_OLD_VALUE_S := L_UTSCPAOLD_REC.VALUE_S ;
         L_NEW_VALUE_S := SUBSTR(L_OLD_VALUE_S, 0, LENGTH(L_OLD_VALUE_S) - 4 ) || '#R' || SUBSTR(L_OLD_VALUE_S, -4) ;

         IF ( SUBSTR(L_OLD_VALUE_S, -4)  = '#BLB') THEN
            UPDATE UTBLOB
            SET ID = L_NEW_VALUE_S
            WHERE ID = L_OLD_VALUE_S ;

            UPDATE UTBLOBHS
            SET ID = L_NEW_VALUE_S
            WHERE ID = L_OLD_VALUE_S ;
         ELSE 
            UPDATE UTLONGTEXT
            SET DOC_NAME = L_NEW_VALUE_S
            WHERE DOC_NAME = L_OLD_VALUE_S ;
         END IF ;

         L_UTSCPAOLD_REC.VALUE_S := L_NEW_VALUE_S ;
         L_IS_VALUE_S_UPDATED := TRUE;

      END IF ; 

      INSERT INTO UTRSCPA
      VALUES L_UTSCPAOLD_REC ;
      
      
      
      
      OPEN L_SCPAOLD_CURSOR(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE);
      FETCH L_SCPAOLD_CURSOR
      INTO L_SCPAOLD_REC;
      CLOSE L_SCPAOLD_CURSOR;

      IF (L_IS_VALUE_S_UPDATED = TRUE) THEN
         
         L_SCPAOLD_REC.VALUE_S := L_NEW_VALUE_S;
      END IF;
      
      L_SCPANEW_REC := L_SCPAOLD_REC;

      
      
      
      INSERT INTO UTRSCPASPA(SC, PG, PGNODE, PA, PANODE, REANALYSIS, 
         LOW_LIMIT, HIGH_LIMIT, LOW_SPEC, HIGH_SPEC, LOW_DEV, REL_LOW_DEV,
         TARGET, HIGH_DEV, REL_HIGH_DEV)
      SELECT SC, PG, PGNODE, PA, PANODE, L_REANALYSIS, LOW_LIMIT,
             HIGH_LIMIT, LOW_SPEC, HIGH_SPEC, LOW_DEV, REL_LOW_DEV,
             TARGET, HIGH_DEV, REL_HIGH_DEV
      FROM UTSCPASPA
      WHERE SC = A_SC
        AND PG = A_PG
        AND PGNODE = A_PGNODE
        AND PA = A_PA
        AND PANODE = A_PANODE;

      
      
      
      INSERT INTO UTRSCPASPB(SC, PG, PGNODE, PA, PANODE, REANALYSIS, 
         LOW_LIMIT, HIGH_LIMIT, LOW_SPEC, HIGH_SPEC, LOW_DEV, REL_LOW_DEV,
         TARGET, HIGH_DEV, REL_HIGH_DEV)
      SELECT SC, PG, PGNODE, PA, PANODE, L_REANALYSIS, LOW_LIMIT,
             HIGH_LIMIT, LOW_SPEC, HIGH_SPEC, LOW_DEV, REL_LOW_DEV,
             TARGET, HIGH_DEV, REL_HIGH_DEV
      FROM UTSCPASPB
      WHERE SC = A_SC
        AND PG = A_PG
        AND PGNODE = A_PGNODE
        AND PA = A_PA
        AND PANODE = A_PANODE;

      
      
      
      INSERT INTO UTRSCPASPC(SC, PG, PGNODE, PA, PANODE, REANALYSIS, 
         LOW_LIMIT, HIGH_LIMIT, LOW_SPEC, HIGH_SPEC, LOW_DEV, REL_LOW_DEV,
         TARGET, HIGH_DEV, REL_HIGH_DEV)
      SELECT SC, PG, PGNODE, PA, PANODE, L_REANALYSIS, LOW_LIMIT,
             HIGH_LIMIT, LOW_SPEC, HIGH_SPEC, LOW_DEV, REL_LOW_DEV,
             TARGET, HIGH_DEV, REL_HIGH_DEV
      FROM UTSCPASPC
      WHERE SC = A_SC
        AND PG = A_PG
        AND PGNODE = A_PGNODE
        AND PA = A_PA
        AND PANODE = A_PANODE;

      
      
      
      INSERT INTO UTRSCPASQC
      (SC, PG, PGNODE, PA, PANODE, REANALYSIS, SQC_AVG, SQC_SIGMA,
       SQC_AVGR, SQC_UCLR, VALID_SQC)
      SELECT SC, PG, PGNODE, PA, PANODE, L_REANALYSIS, SQC_AVG, SQC_SIGMA,
             SQC_AVGR, SQC_UCLR, VALID_SQC
      FROM UTSCPASQC
      WHERE SC = A_SC
        AND PG = A_PG
        AND PGNODE = A_PGNODE
        AND PA = A_PA
        AND PANODE = A_PANODE;

      
      
      
      OPEN L_SCPASQCOLD_CURSOR(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE);
      FETCH L_SCPASQCOLD_CURSOR
      INTO L_OLD_VALID_SQC;
      CLOSE L_SCPASQCOLD_CURSOR;

      
      
      
      UPDATE UTSCPASQC
      SET VALID_SQC = NULL
      WHERE SC = A_SC
         AND PG = A_PG
         AND PGNODE = A_PGNODE
         AND PA = A_PA
         AND PANODE = A_PANODE;

      
      
      
      DELETE FROM UTSCPATD
      WHERE SC = A_SC
         AND PG = A_PG
         AND PGNODE = A_PGNODE
         AND PA = A_PA
         AND PANODE = A_PANODE;


      
      
      

      
      
      
      OPEN L_SCME_MAX_CURSOR;
      FETCH L_SCME_MAX_CURSOR
      INTO L_ME_REANALYSIS;
      IF L_SCME_MAX_CURSOR%NOTFOUND THEN
         CLOSE L_SCME_MAX_CURSOR;
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
         RAISE STPERROR;
      END IF;
      CLOSE L_SCME_MAX_CURSOR;

      L_REANALYSIS := GREATEST(NVL(L_REANALYSIS,0)+1, NVL(L_ME_REANALYSIS,0));
      
      
      
      
      
      
      
      UPDATE UTSCPA
         SET VALUE_F = NULL,
             VALUE_S = NULL,
             EXEC_START_DATE = NULL,
             EXEC_START_DATE_TZ = NULL,
             EXEC_END_DATE = NULL,
             EXEC_END_DATE_TZ = NULL,
             EXECUTOR = NULL,
             MANUALLY_ENTERED = '0',
             ASSIGN_DATE = CURRENT_TIMESTAMP,
             ASSIGN_DATE_TZ = CURRENT_TIMESTAMP,
             ASSIGNED_BY = UNAPIGEN.P_USER,
             VALID_SPECSA = NULL,
             VALID_SPECSB = NULL,
             VALID_SPECSC = NULL,
             VALID_LIMITSA = NULL,
             VALID_LIMITSB = NULL,
             VALID_LIMITSC = NULL,
             VALID_TARGETA = NULL,
             VALID_TARGETB = NULL,
             VALID_TARGETC = NULL,
             REANALYSIS = L_REANALYSIS,
             PA_CLASS = '0'
       WHERE SC = A_SC
         AND PG = A_PG
         AND PGNODE = A_PGNODE
         AND PA = A_PA
         AND PANODE = A_PANODE
      RETURNING VALUE_F, VALUE_S, EXEC_START_DATE, EXEC_START_DATE_TZ, EXEC_END_DATE, EXEC_END_DATE_TZ, EXECUTOR, MANUALLY_ENTERED, 
                ASSIGN_DATE, ASSIGNED_BY,
                VALID_SPECSA, VALID_SPECSB, VALID_SPECSC, VALID_LIMITSA, VALID_LIMITSB, 
                VALID_LIMITSC, VALID_TARGETA, VALID_TARGETB, VALID_TARGETC, REANALYSIS, PA_CLASS
      INTO L_SCPANEW_REC.VALUE_F, L_SCPANEW_REC.VALUE_S, L_SCPANEW_REC.EXEC_START_DATE, 
           L_SCPANEW_REC.EXEC_START_DATE_TZ, L_SCPANEW_REC.EXEC_END_DATE, 
      L_SCPANEW_REC.EXEC_END_DATE_TZ, L_SCPANEW_REC.EXECUTOR, L_SCPANEW_REC.MANUALLY_ENTERED, 
           L_SCPANEW_REC.ASSIGN_DATE, L_SCPANEW_REC.ASSIGNED_BY,
           L_SCPANEW_REC.VALID_SPECSA, L_SCPANEW_REC.VALID_SPECSB, L_SCPANEW_REC.VALID_SPECSC, 
           L_SCPANEW_REC.VALID_LIMITSA, L_SCPANEW_REC.VALID_LIMITSB, L_SCPANEW_REC.VALID_LIMITSC, 
           L_SCPANEW_REC.VALID_TARGETA, L_SCPANEW_REC.VALID_TARGETB, L_SCPANEW_REC.VALID_TARGETC, 
           L_SCPANEW_REC.REANALYSIS, L_SCPANEW_REC.PA_CLASS;

   END IF;

   L_SVNR_OF_ROWS := 1;
   L_SVALARMS_HANDLED := UNAPIGEN.ALARMS_NOT_HANDLED;
   L_SVSC(L_SVNR_OF_ROWS) := A_SC;
   L_SVPG(L_SVNR_OF_ROWS) := A_PG;
   L_SVPGNODE(L_SVNR_OF_ROWS) := A_PGNODE;
   L_SVPA(L_SVNR_OF_ROWS) := A_PA;
   L_SVPANODE(L_SVNR_OF_ROWS) := A_PANODE;
   L_SVVALUE_F(L_SVNR_OF_ROWS) := A_VALUE_F;
   L_SVVALUE_S(L_SVNR_OF_ROWS) := A_VALUE_S;
   L_SVUNIT(L_SVNR_OF_ROWS) := A_UNIT;
   L_SVFORMAT(L_SVNR_OF_ROWS) := NULL;   
   L_SVEXEC_END_DATE(L_SVNR_OF_ROWS) := A_EXEC_END_DATE;
   L_SVEXECUTOR(L_SVNR_OF_ROWS) := A_EXECUTOR;
   L_SVMANUALLY_ENTERED(L_SVNR_OF_ROWS) := A_MANUALLY_ENTERED;
   L_SVREANALYSIS(L_SVNR_OF_ROWS) := NULL;
   L_SVMODIFY_FLAG(L_SVNR_OF_ROWS) := UNAPIGEN.MOD_FLAG_UPDATE;

   
   
   
   L_RET_CODE := UNAPIPA.SAVESCPARESULT(L_SVALARMS_HANDLED, L_SVSC, L_SVPG,
                                        L_SVPGNODE, L_SVPA,
                                        L_SVPANODE, L_SVVALUE_F, L_SVVALUE_S,
                                        L_SVUNIT, L_SVFORMAT, L_SVEXEC_END_DATE,
                                        L_SVEXECUTOR, L_SVMANUALLY_ENTERED,
                                        L_SVREANALYSIS, L_SVMODIFY_FLAG,
                                        L_SVNR_OF_ROWS, '');
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   L_EVENT_TP := 'PaReanalysis';
   L_RET_CODE := UNAPIGEN.GETNEXTEVENTSEQNR(L_EV_SEQ_NR);
   IF L_RET_CODE <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   IF L_LOG_HS = '1' THEN
      INSERT INTO UTSCPAHS(SC, PG, PGNODE, PA, PANODE, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, 
                           LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 
             L_EVENT_TP, 'parameter "'||A_PA||'" is implicitely reanalysed',
             CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   L_HS_DETAILS_SEQ_NR := 0;
   IF L_LOG_HS_DETAILS = '1' THEN
      L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
      INSERT INTO UTSCPAHSDETAILS(SC, PG, PGNODE, PA, PANODE, TR_SEQ, EV_SEQ, SEQ, DETAILS)
      VALUES(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR, 
             'parameter "'||A_PA||'" is implicitely reanalysed');

      UNAPIHSDETAILS.ADDSCPAHSDETAILS(L_SCPAOLD_REC, L_SCPANEW_REC, UNAPIGEN.P_TR_SEQ, 
                                      L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR); 

      IF L_OLD_VALID_SQC IS NOT NULL THEN
         L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
         INSERT INTO UTSCPAHSDETAILS(SC, PG, PGNODE, PA, PANODE, TR_SEQ, EV_SEQ, SEQ, DETAILS)
         VALUES(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR, 
                'parameter "'||A_PA||'" is updated: property <valid_sqc> changed value from "' || L_OLD_VALID_SQC|| '" to "".');
      END IF;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveScPaTextResult',SQLERRM);
   END IF;
   IF L_SCME_MAX_CURSOR%ISOPEN THEN
      CLOSE L_SCME_MAX_CURSOR;
   END IF;
   IF L_SCPA_CURSOR%ISOPEN THEN
      CLOSE L_SCPA_CURSOR;
   END IF;
   IF L_SCPAOLD_CURSOR%ISOPEN THEN
      CLOSE L_SCPAOLD_CURSOR;
   END IF;
   IF L_SCPASQCOLD_CURSOR%ISOPEN THEN
      CLOSE L_SCPASQCOLD_CURSOR;
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveScPaTextResult'));
END SAVESCPATEXTRESULT;

BEGIN
NULL;
END UNAPIEVP;
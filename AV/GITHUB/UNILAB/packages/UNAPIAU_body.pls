PACKAGE BODY unapiau AS

L_SQLERRM         VARCHAR2(255);
L_SQL_STRING      VARCHAR2(2000);
L_WHERE_CLAUSE    VARCHAR2(1000);
L_EVENT_TP        UTEV.EV_TP%TYPE;
L_RET_CODE        NUMBER;
L_RESULT          NUMBER;
L_FETCHED_ROWS    NUMBER;
L_EV_SEQ_NR       NUMBER;
STPERROR          EXCEPTION;


 P_AU_CURSOR            INTEGER;

FUNCTION GETVERSION
   RETURN VARCHAR2
IS
BEGIN
   RETURN('06.07.00.00_00.13');
EXCEPTION
   WHEN OTHERS THEN
      RETURN (NULL);
END GETVERSION;

FUNCTION GETATTRIBUTELIST
(A_AU                  OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_VERSION             OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_VERSION_IS_CURRENT  OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_EFFECTIVE_FROM      OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_EFFECTIVE_TILL      OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_DESCRIPTION         OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_SS                  OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_NR_OF_ROWS          IN OUT  NUMBER,                    
 A_WHERE_CLAUSE        IN      VARCHAR2,                  
 A_NEXT_ROWS           IN      NUMBER)                    
RETURN NUMBER IS

L_AU                    VARCHAR2(20);
L_VERSION               VARCHAR2(20);
L_VERSION_IS_CURRENT    CHAR(1);
L_EFFECTIVE_FROM        TIMESTAMP WITH TIME ZONE;
L_EFFECTIVE_TILL        TIMESTAMP WITH TIME ZONE;
L_DESCRIPTION           VARCHAR2(40);
L_SS                    VARCHAR2(2);

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_AU_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_AU_CURSOR);
         P_AU_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_AU_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      IF P_AU_CURSOR IS NULL THEN
         P_AU_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;

      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
         L_WHERE_CLAUSE := 'WHERE active = ''1'' ORDER BY au, version'; 
      ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
         L_WHERE_CLAUSE := 'WHERE version_is_current = ''1'' '||
                           'AND au = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                           ''' ORDER BY au, version';
      ELSE
         L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
      END IF;

      L_SQL_STRING:= 'SELECT au, version, nvl(version_is_current,''0''), effective_from, effective_till, description, ss '||
                     'FROM dd' || UNAPIGEN.P_DD ||
                      '.uvau ' || L_WHERE_CLAUSE;
                      
      DBMS_SQL.PARSE(P_AU_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      
      DBMS_SQL.DEFINE_COLUMN(P_AU_CURSOR, 1, L_AU, 20);
      DBMS_SQL.DEFINE_COLUMN(P_AU_CURSOR, 2, L_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_AU_CURSOR, 3, L_VERSION_IS_CURRENT, 1);
      DBMS_SQL.DEFINE_COLUMN(P_AU_CURSOR, 4, L_EFFECTIVE_FROM);
      DBMS_SQL.DEFINE_COLUMN(P_AU_CURSOR, 5, L_EFFECTIVE_TILL);
      DBMS_SQL.DEFINE_COLUMN(P_AU_CURSOR, 6, L_DESCRIPTION, 40);
      DBMS_SQL.DEFINE_COLUMN(P_AU_CURSOR, 7, L_SS, 2);
      L_RESULT := DBMS_SQL.EXECUTE(P_AU_CURSOR);
   END IF;

   L_RESULT := DBMS_SQL.FETCH_ROWS(P_AU_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_AU_CURSOR, 1, L_AU);
      DBMS_SQL.COLUMN_VALUE(P_AU_CURSOR, 2, L_VERSION);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_AU_CURSOR, 3, L_VERSION_IS_CURRENT);
      DBMS_SQL.COLUMN_VALUE(P_AU_CURSOR, 4, L_EFFECTIVE_FROM);
      DBMS_SQL.COLUMN_VALUE(P_AU_CURSOR, 5, L_EFFECTIVE_TILL);
      DBMS_SQL.COLUMN_VALUE(P_AU_CURSOR, 6, L_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE(P_AU_CURSOR, 7, L_SS);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_AU(L_FETCHED_ROWS) := L_AU;
      A_VERSION(L_FETCHED_ROWS) := L_VERSION;
      A_VERSION_IS_CURRENT(L_FETCHED_ROWS) := L_VERSION_IS_CURRENT;
      A_EFFECTIVE_FROM(L_FETCHED_ROWS) := L_EFFECTIVE_FROM;
      A_EFFECTIVE_TILL(L_FETCHED_ROWS) := L_EFFECTIVE_TILL;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;
      A_SS(L_FETCHED_ROWS) := L_SS;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_AU_CURSOR);
      END IF;
   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_AU_CURSOR);
       P_AU_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   END IF;

   IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_AU_CURSOR);
      P_AU_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ,
                          API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
              'GetAttributeList', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (P_AU_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (P_AU_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETATTRIBUTELIST;

FUNCTION GETATTRIBUTE
(A_AU                  OUT   UNAPIGEN.VC20_TABLE_TYPE,   
 A_VERSION             OUT   UNAPIGEN.VC20_TABLE_TYPE,   
 A_VERSION_IS_CURRENT  OUT   UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_EFFECTIVE_FROM      OUT   UNAPIGEN.DATE_TABLE_TYPE,   
 A_EFFECTIVE_TILL      OUT   UNAPIGEN.DATE_TABLE_TYPE,   
 A_DESCRIPTION         OUT   UNAPIGEN.VC40_TABLE_TYPE,   
 A_DESCRIPTION2        OUT   UNAPIGEN.VC40_TABLE_TYPE,   
 A_IS_PROTECTED        OUT   UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_SINGLE_VALUED       OUT   UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_NEW_VAL_ALLOWED     OUT   UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_STORE_DB            OUT   UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_INHERIT_AU          OUT   UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_SHORTCUT            OUT   UNAPIGEN.RAW8_TABLE_TYPE,   
 A_VALUE_LIST_TP       OUT   UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_DEFAULT_VALUE       OUT   UNAPIGEN.VC40_TABLE_TYPE,   
 A_RUN_MODE            OUT   UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_SERVICE             OUT   UNAPIGEN.VC255_TABLE_TYPE,  
 A_CF_VALUE            OUT   UNAPIGEN.VC20_TABLE_TYPE,   
 A_AU_CLASS            OUT   UNAPIGEN.VC2_TABLE_TYPE,    
 A_LOG_HS              OUT   UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_ALLOW_MODIFY        OUT   UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_ACTIVE              OUT   UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_LC                  OUT   UNAPIGEN.VC2_TABLE_TYPE,    
 A_LC_VERSION          OUT   UNAPIGEN.VC20_TABLE_TYPE,   
 A_SS                  OUT   UNAPIGEN.VC2_TABLE_TYPE,    
 A_NR_OF_ROWS          IN OUT  NUMBER,                   
 A_WHERE_CLAUSE        IN      VARCHAR2)                 
RETURN NUMBER IS

L_AU                  VARCHAR2(20);
L_VERSION             VARCHAR2(20);
L_VERSION_IS_CURRENT  CHAR(1);
L_EFFECTIVE_FROM      TIMESTAMP WITH TIME ZONE;
L_EFFECTIVE_TILL      TIMESTAMP WITH TIME ZONE;
L_DESCRIPTION         VARCHAR2(40);
L_DESCRIPTION2        VARCHAR2(40);
L_IS_PROTECTED        CHAR(1);
L_SINGLE_VALUED       CHAR(1);
L_NEW_VAL_ALLOWED     CHAR(1);
L_STORE_DB            CHAR(1);
L_INHERIT_AU          CHAR(1);
L_SHORTCUT            RAW(8);
L_VALUE_LIST_TP       CHAR(1);
L_DEFAULT_VALUE       VARCHAR2(40); 
L_RUN_MODE            CHAR(1);
L_SERVICE             VARCHAR2(255);
L_CF_VALUE            VARCHAR2(20);
L_AU_CLASS            VARCHAR2(2);
L_LOG_HS              CHAR(1);
L_ALLOW_MODIFY        CHAR(1);
L_ACTIVE              CHAR(1);
L_LC                  VARCHAR2(2);
L_LC_VERSION          VARCHAR2(20);
L_SS                  VARCHAR2(2);
L_AU_CURSOR           INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'WHERE active = ''1'' ORDER BY au, version'; 
   ELSIF
      UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := 'WHERE version_is_current = ''1'' '||
                        'AND au = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                        ''' ORDER BY au, version';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_AU_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT au, version, nvl(version_is_current,''0''), effective_from, effective_till, description, description2, '||
                   'is_protected, single_valued, new_val_allowed, store_db, inherit_au, shortcut, ' ||
                   'value_list_tp, default_value, run_mode, service, cf_value, au_class, log_hs, ' ||
                   'allow_modify, active, lc, lc_version, ss FROM  dd' || UNAPIGEN.P_DD || '.uvau ' ||
                   L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_AU_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 1, L_AU, 20);
   DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 2, L_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_AU_CURSOR, 3, L_VERSION_IS_CURRENT, 1);
   DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 4, L_EFFECTIVE_FROM);
   DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 5, L_EFFECTIVE_TILL);
   DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 6, L_DESCRIPTION, 40);
   DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 7, L_DESCRIPTION2, 40);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_AU_CURSOR, 8, L_IS_PROTECTED, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_AU_CURSOR, 9, L_SINGLE_VALUED, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_AU_CURSOR, 10, L_NEW_VAL_ALLOWED, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_AU_CURSOR, 11, L_STORE_DB, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_AU_CURSOR, 12, L_INHERIT_AU, 1);
   DBMS_SQL.DEFINE_COLUMN_RAW(L_AU_CURSOR, 13, L_SHORTCUT, 8);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_AU_CURSOR, 14, L_VALUE_LIST_TP, 1);
   DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 15, L_DEFAULT_VALUE, 40);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_AU_CURSOR, 16, L_RUN_MODE, 1);
   DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 17, L_SERVICE, 255);
   DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 18, L_CF_VALUE, 20);
   DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 19, L_AU_CLASS, 2);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_AU_CURSOR, 20, L_LOG_HS, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_AU_CURSOR, 21, L_ALLOW_MODIFY, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_AU_CURSOR, 22, L_ACTIVE, 1);
   DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 23, L_LC, 2);
   DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 24, L_LC_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 25, L_SS, 2);
   L_RESULT := DBMS_SQL.EXECUTE(L_AU_CURSOR);

   L_RESULT := DBMS_SQL.FETCH_ROWS(L_AU_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 1, L_AU);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 2, L_VERSION);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_AU_CURSOR, 3, L_VERSION_IS_CURRENT);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 4, L_EFFECTIVE_FROM);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 5, L_EFFECTIVE_TILL);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 6, L_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 7, L_DESCRIPTION2);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_AU_CURSOR, 8, L_IS_PROTECTED);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_AU_CURSOR, 9, L_SINGLE_VALUED);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_AU_CURSOR, 10, L_NEW_VAL_ALLOWED);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_AU_CURSOR, 11, L_STORE_DB);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_AU_CURSOR, 12, L_INHERIT_AU);
      DBMS_SQL.COLUMN_VALUE_RAW(L_AU_CURSOR, 13, L_SHORTCUT);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_AU_CURSOR, 14, L_VALUE_LIST_TP);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 15, L_DEFAULT_VALUE);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_AU_CURSOR, 16, L_RUN_MODE);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 17, L_SERVICE);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 18, L_CF_VALUE);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 19, L_AU_CLASS);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_AU_CURSOR, 20, L_LOG_HS);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_AU_CURSOR, 21, L_ALLOW_MODIFY);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_AU_CURSOR, 22, L_ACTIVE);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 23, L_LC);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 24, L_LC_VERSION);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 25, L_SS);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_AU(L_FETCHED_ROWS) := L_AU;
      A_VERSION(L_FETCHED_ROWS) := L_VERSION;
      A_VERSION_IS_CURRENT(L_FETCHED_ROWS) := L_VERSION_IS_CURRENT;
      A_EFFECTIVE_FROM(L_FETCHED_ROWS) := L_EFFECTIVE_FROM;
      A_EFFECTIVE_TILL(L_FETCHED_ROWS) := L_EFFECTIVE_TILL;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;
      A_DESCRIPTION2(L_FETCHED_ROWS) := L_DESCRIPTION2;
      A_IS_PROTECTED (L_FETCHED_ROWS) := L_IS_PROTECTED;
      A_SINGLE_VALUED (L_FETCHED_ROWS) := L_SINGLE_VALUED;
      A_NEW_VAL_ALLOWED(L_FETCHED_ROWS) := L_NEW_VAL_ALLOWED;
      A_STORE_DB(L_FETCHED_ROWS) := L_STORE_DB;
      A_INHERIT_AU(L_FETCHED_ROWS) := L_INHERIT_AU;
      A_SHORTCUT(L_FETCHED_ROWS) := L_SHORTCUT;
      A_VALUE_LIST_TP(L_FETCHED_ROWS) := L_VALUE_LIST_TP;
      A_DEFAULT_VALUE(L_FETCHED_ROWS) := L_DEFAULT_VALUE;
      A_RUN_MODE(L_FETCHED_ROWS) := L_RUN_MODE;
      A_SERVICE(L_FETCHED_ROWS) := L_SERVICE;
      A_CF_VALUE(L_FETCHED_ROWS) := L_CF_VALUE;
      A_AU_CLASS(L_FETCHED_ROWS) := L_AU_CLASS;
      A_LOG_HS(L_FETCHED_ROWS) := L_LOG_HS;
      A_ALLOW_MODIFY(L_FETCHED_ROWS) := L_ALLOW_MODIFY;
      A_ACTIVE(L_FETCHED_ROWS) := L_ACTIVE;
      A_LC(L_FETCHED_ROWS) := L_LC;
      A_LC_VERSION(L_FETCHED_ROWS) := L_LC_VERSION;
      A_SS(L_FETCHED_ROWS) := L_SS;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_AU_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_AU_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;
   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
              'GetAttribute', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (L_AU_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_AU_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETATTRIBUTE;


FUNCTION GETATTRIBUTE
(A_AU                  OUT   UNAPIGEN.VC20_TABLE_TYPE,   
 A_VERSION             OUT   UNAPIGEN.VC20_TABLE_TYPE,   
 A_VERSION_IS_CURRENT  OUT   UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_EFFECTIVE_FROM      OUT   UNAPIGEN.DATE_TABLE_TYPE,   
 A_EFFECTIVE_TILL      OUT   UNAPIGEN.DATE_TABLE_TYPE,   
 A_DESCRIPTION         OUT   UNAPIGEN.VC40_TABLE_TYPE,   
 A_DESCRIPTION2        OUT   UNAPIGEN.VC40_TABLE_TYPE,   
 A_IS_PROTECTED        OUT   UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_SINGLE_VALUED       OUT   UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_NEW_VAL_ALLOWED     OUT   UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_STORE_DB            OUT   UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_INHERIT_AU          OUT   UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_ALT                 OUT   UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_CTRL                OUT   UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_SHIFT               OUT   UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_KEY_NAME            OUT   UNAPIGEN.VC20_TABLE_TYPE,   
 A_VALUE_LIST_TP       OUT   UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_DEFAULT_VALUE       OUT   UNAPIGEN.VC40_TABLE_TYPE,   
 A_RUN_MODE            OUT   UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_SERVICE             OUT   UNAPIGEN.VC255_TABLE_TYPE,  
 A_CF_VALUE            OUT   UNAPIGEN.VC20_TABLE_TYPE,   
 A_AU_CLASS            OUT   UNAPIGEN.VC2_TABLE_TYPE,    
 A_LOG_HS              OUT   UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_ALLOW_MODIFY        OUT   UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_ACTIVE              OUT   UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_LC                  OUT   UNAPIGEN.VC2_TABLE_TYPE,    
 A_LC_VERSION          OUT   UNAPIGEN.VC20_TABLE_TYPE,   
 A_SS                  OUT   UNAPIGEN.VC2_TABLE_TYPE,    
 A_NR_OF_ROWS          IN OUT  NUMBER,                   
 A_WHERE_CLAUSE        IN      VARCHAR2)                 
RETURN NUMBER IS

L_AU                  VARCHAR2(20);
L_VERSION             VARCHAR2(20);
L_VERSION_IS_CURRENT  CHAR(1);
L_EFFECTIVE_FROM      TIMESTAMP WITH TIME ZONE;
L_EFFECTIVE_TILL      TIMESTAMP WITH TIME ZONE;
L_DESCRIPTION         VARCHAR2(40);
L_DESCRIPTION2        VARCHAR2(40);
L_IS_PROTECTED        CHAR(1);
L_SINGLE_VALUED       CHAR(1);
L_NEW_VAL_ALLOWED     CHAR(1);
L_STORE_DB            CHAR(1);
L_INHERIT_AU          CHAR(1);
L_SHORTCUT            RAW(8);
L_VALUE_LIST_TP       CHAR(1);
L_DEFAULT_VALUE       VARCHAR2(40); 
L_RUN_MODE            CHAR(1);
L_SERVICE             VARCHAR2(255);
L_CF_VALUE            VARCHAR2(20);
L_AU_CLASS            VARCHAR2(2);
L_LOG_HS              CHAR(1);
L_ALLOW_MODIFY        CHAR(1);
L_ACTIVE              CHAR(1);
L_LC                  VARCHAR2(2);
L_LC_VERSION          VARCHAR2(20);
L_SS                  VARCHAR2(2);
L_AU_CURSOR           INTEGER;

L_VC8_SHORTCUT        VARCHAR2(8);
L_CHAR1_ALT           CHAR(1);
L_CHAR1_CTRL          CHAR(1);
L_CHAR1_SHIFT         CHAR(1);
L_VC20_KEY_NAME       VARCHAR2(20);

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'WHERE active = ''1'' ORDER BY au, version'; 
   ELSIF
      UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := 'WHERE version_is_current = ''1'' '||
                        'AND au = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                        ''' ORDER BY au, version';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_AU_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT au, version, nvl(version_is_current,''0''), effective_from, effective_till, description, description2, '||
                   'is_protected, single_valued, new_val_allowed, store_db, inherit_au, shortcut, ' ||
                   'value_list_tp, default_value, run_mode, service, cf_value, au_class, log_hs, ' ||
                   'allow_modify, active, lc, lc_version, ss FROM  dd' || UNAPIGEN.P_DD || '.uvau ' ||
                   L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_AU_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 1, L_AU, 20);
   DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 2, L_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_AU_CURSOR, 3, L_VERSION_IS_CURRENT, 1);
   DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 4, L_EFFECTIVE_FROM);
   DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 5, L_EFFECTIVE_TILL);
   DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 6, L_DESCRIPTION, 40);
   DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 7, L_DESCRIPTION2, 40);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_AU_CURSOR, 8, L_IS_PROTECTED, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_AU_CURSOR, 9, L_SINGLE_VALUED, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_AU_CURSOR, 10, L_NEW_VAL_ALLOWED, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_AU_CURSOR, 11, L_STORE_DB, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_AU_CURSOR, 12, L_INHERIT_AU, 1);
   DBMS_SQL.DEFINE_COLUMN_RAW(L_AU_CURSOR, 13, L_SHORTCUT, 8);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_AU_CURSOR, 14, L_VALUE_LIST_TP, 1);
   DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 15, L_DEFAULT_VALUE, 40);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_AU_CURSOR, 16, L_RUN_MODE, 1);
   DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 17, L_SERVICE, 255);
   DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 18, L_CF_VALUE, 20);
   DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 19, L_AU_CLASS, 2);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_AU_CURSOR, 20, L_LOG_HS, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_AU_CURSOR, 21, L_ALLOW_MODIFY, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_AU_CURSOR, 22, L_ACTIVE, 1);
   DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 23, L_LC, 2);
   DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 24, L_LC_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 25, L_SS, 2);
   L_RESULT := DBMS_SQL.EXECUTE(L_AU_CURSOR);

   L_RESULT := DBMS_SQL.FETCH_ROWS(L_AU_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 1, L_AU);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 2, L_VERSION);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_AU_CURSOR, 3, L_VERSION_IS_CURRENT);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 4, L_EFFECTIVE_FROM);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 5, L_EFFECTIVE_TILL);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 6, L_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 7, L_DESCRIPTION2);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_AU_CURSOR, 8, L_IS_PROTECTED);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_AU_CURSOR, 9, L_SINGLE_VALUED);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_AU_CURSOR, 10, L_NEW_VAL_ALLOWED);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_AU_CURSOR, 11, L_STORE_DB);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_AU_CURSOR, 12, L_INHERIT_AU);
      DBMS_SQL.COLUMN_VALUE_RAW(L_AU_CURSOR, 13, L_SHORTCUT);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_AU_CURSOR, 14, L_VALUE_LIST_TP);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 15, L_DEFAULT_VALUE);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_AU_CURSOR, 16, L_RUN_MODE);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 17, L_SERVICE);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 18, L_CF_VALUE);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 19, L_AU_CLASS);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_AU_CURSOR, 20, L_LOG_HS);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_AU_CURSOR, 21, L_ALLOW_MODIFY);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_AU_CURSOR, 22, L_ACTIVE);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 23, L_LC);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 24, L_LC_VERSION);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 25, L_SS);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_AU(L_FETCHED_ROWS) := L_AU;
      A_VERSION(L_FETCHED_ROWS) := L_VERSION;
      A_VERSION_IS_CURRENT(L_FETCHED_ROWS) := L_VERSION_IS_CURRENT;
      A_EFFECTIVE_FROM(L_FETCHED_ROWS) := L_EFFECTIVE_FROM;
      A_EFFECTIVE_TILL(L_FETCHED_ROWS) := L_EFFECTIVE_TILL;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;
      A_DESCRIPTION2(L_FETCHED_ROWS) := L_DESCRIPTION2;
      A_IS_PROTECTED (L_FETCHED_ROWS) := L_IS_PROTECTED;
      A_SINGLE_VALUED (L_FETCHED_ROWS) := L_SINGLE_VALUED;
      A_NEW_VAL_ALLOWED(L_FETCHED_ROWS) := L_NEW_VAL_ALLOWED;
      A_STORE_DB(L_FETCHED_ROWS) := L_STORE_DB;
      A_INHERIT_AU(L_FETCHED_ROWS) := L_INHERIT_AU;

      
      IF L_SHORTCUT = HEXTORAW('0000000000000000') THEN
         L_VC8_SHORTCUT := NULL;
      ELSE
         L_VC8_SHORTCUT := UTL_RAW.CAST_TO_VARCHAR2(L_SHORTCUT);
      END IF;
      IF NVL(L_VC8_SHORTCUT, ' ') = ' ' THEN
         L_VC8_SHORTCUT := '000Undef';
      END IF;
      L_CHAR1_ALT     := SUBSTR(L_VC8_SHORTCUT, 1, 1);
      L_CHAR1_CTRL    := SUBSTR(L_VC8_SHORTCUT, 2, 1);
      L_CHAR1_SHIFT   := SUBSTR(L_VC8_SHORTCUT, 3, 1);
      L_VC20_KEY_NAME := SUBSTR(L_VC8_SHORTCUT, 4);
      IF L_VC20_KEY_NAME = 'Undef' THEN
         L_VC20_KEY_NAME := '';
      END IF;
      A_ALT(L_FETCHED_ROWS)      := L_CHAR1_ALT;
      A_CTRL(L_FETCHED_ROWS)     := L_CHAR1_CTRL;
      A_SHIFT(L_FETCHED_ROWS)    := L_CHAR1_SHIFT;
      A_KEY_NAME(L_FETCHED_ROWS) := RTRIM(L_VC20_KEY_NAME);

      A_VALUE_LIST_TP(L_FETCHED_ROWS) := L_VALUE_LIST_TP;
      A_DEFAULT_VALUE(L_FETCHED_ROWS) := L_DEFAULT_VALUE;
      A_RUN_MODE(L_FETCHED_ROWS) := L_RUN_MODE;
      A_SERVICE(L_FETCHED_ROWS) := L_SERVICE;
      A_CF_VALUE(L_FETCHED_ROWS) := L_CF_VALUE;
      A_AU_CLASS(L_FETCHED_ROWS) := L_AU_CLASS;
      A_LOG_HS(L_FETCHED_ROWS) := L_LOG_HS;
      A_ALLOW_MODIFY(L_FETCHED_ROWS) := L_ALLOW_MODIFY;
      A_ACTIVE(L_FETCHED_ROWS) := L_ACTIVE;
      A_LC(L_FETCHED_ROWS) := L_LC;
      A_LC_VERSION(L_FETCHED_ROWS) := L_LC_VERSION;
      A_SS(L_FETCHED_ROWS) := L_SS;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_AU_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_AU_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;
   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetAttribute', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (L_AU_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_AU_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETATTRIBUTE;

FUNCTION GETATTRIBUTESQL
(A_AU            OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_VERSION       OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_SQLTEXT       OUT     UNAPIGEN.VC255_TABLE_TYPE,  
 A_NR_OF_ROWS    IN OUT  NUMBER,                     
 A_WHERE_CLAUSE  IN      VARCHAR2)                   
RETURN NUMBER IS

L_AU              VARCHAR2(20);
L_VERSION         VARCHAR2(20);
L_SQLTEXT         VARCHAR2(255);
L_AU_CURSOR       INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := ' ORDER BY au, version, seq'; 
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := ', dd'||UNAPIGEN.P_DD||'.uvau au WHERE au.version_is_current = ''1'' '||
                        'AND ausql.version = au.version '||
                        'AND ausql.au = au.au '||
                        'AND ausql.au = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                        ''' ORDER BY ausql.seq';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_AU_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT ausql.au, ausql.version, ausql.sqltext FROM dd' || UNAPIGEN.P_DD ||
                   '.uvausql ausql ' || L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_AU_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 1, L_AU, 20);
   DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 2, L_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 3, L_SQLTEXT, 255);
   L_RESULT := DBMS_SQL.EXECUTE(L_AU_CURSOR);

   L_RESULT := DBMS_SQL.FETCH_ROWS(L_AU_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 1, L_AU);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 2, L_VERSION);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 3, L_SQLTEXT);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_AU(L_FETCHED_ROWS) := L_AU;
      A_VERSION(L_FETCHED_ROWS) := L_VERSION;
      A_SQLTEXT(L_FETCHED_ROWS) := L_SQLTEXT;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_AU_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_AU_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ,
                          API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetAttributeSql', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (L_AU_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_AU_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETATTRIBUTESQL;

FUNCTION GETATTRIBUTEVALUE
(A_AU               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_VERSION          OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_VALUE            OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_NR_OF_ROWS       IN OUT  NUMBER,                    
 A_WHERE_CLAUSE     IN      VARCHAR2)                  
 RETURN NUMBER IS

L_AU              VARCHAR2(20);
L_VERSION         VARCHAR2(20);
L_VALUE           VARCHAR2(40);
L_AU_CURSOR       INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := ' ORDER BY au, version, seq'; 
   ELSIF
      UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := ', dd'||UNAPIGEN.P_DD||'.uvau au WHERE au.version_is_current = ''1'' '||
                        'AND aulist.version = au.version '||
                        'AND aulist.au = au.au '||
                        'AND aulist.au = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                        ''' ORDER BY aulist.seq';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_AU_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT aulist.au, aulist.version, aulist.value FROM  dd' || UNAPIGEN.P_DD ||
                   '.uvaulist aulist ' || L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_AU_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 1, L_AU, 20);
   DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 2, L_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 3, L_VALUE, 40);
   L_RESULT := DBMS_SQL.EXECUTE(L_AU_CURSOR);

   L_RESULT := DBMS_SQL.FETCH_ROWS(L_AU_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 1, L_AU);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 2, L_VERSION);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 3, L_VALUE);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_AU(L_FETCHED_ROWS) := L_AU;
      A_VERSION(L_FETCHED_ROWS) := L_VERSION;
      A_VALUE(L_FETCHED_ROWS) := L_VALUE;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_AU_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_AU_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;
   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ,
                          API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
              'GetAttributeValue', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (L_AU_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_AU_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETATTRIBUTEVALUE;

FUNCTION GETATTRIBUTEVALUES
(A_OBJECT_TP       IN     VARCHAR2,                   
 A_OBJECT_ID       IN     VARCHAR2,                   
 A_AU              IN     VARCHAR2,                   
 A_VALUE           OUT    UNAPIGEN.VC40_TABLE_TYPE,   
 A_NR_OF_ROWS      IN OUT NUMBER)                     
RETURN NUMBER IS

L_AU           VARCHAR2(20);
L_VALUE        VARCHAR2(40);
L_AU_CURSOR    INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

  IF NVL(A_OBJECT_TP, ' ') = ' ' THEN
     RETURN (UNAPIGEN.DBERR_NOOBJTP);
  END IF;

  IF NVL(A_AU, ' ') = ' ' THEN
     RETURN (UNAPIGEN.DBERR_NOOBJID);
  END IF;

  IF NVL(A_OBJECT_ID, ' ') = ' ' THEN
     L_SQL_STRING := 'SELECT DISTINCT value FROM dd' ||
                     UNAPIGEN.P_DD || '.uv' || A_OBJECT_TP || 'au'
                     || ' WHERE au = ''' || REPLACE(A_AU, '''', '''''') || '''' 
                     || ' ORDER BY value ';
  ELSE
     L_SQL_STRING := 'SELECT DISTINCT value '
                     || ' FROM dd' || UNAPIGEN.P_DD || '.uv' || A_OBJECT_TP ||
                     'au'|| ' WHERE au = ''' || REPLACE(A_AU, '''', '''''') || ''' AND ' 
                     || SUBSTR(A_OBJECT_TP,-2) || ' = ''' || REPLACE(A_OBJECT_ID, '''', '''''') || '''' 
                     || ' ORDER BY value ';
  END IF;
  L_AU_CURSOR := DBMS_SQL.OPEN_CURSOR;
  DBMS_SQL.PARSE(L_AU_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

  DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 1, L_VALUE, 40);
  L_RESULT := DBMS_SQL.EXECUTE(L_AU_CURSOR);

  L_FETCHED_ROWS := 0;
  L_RESULT := DBMS_SQL.FETCH_ROWS(L_AU_CURSOR);

  LOOP
     EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

     DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 1, L_VALUE);
     L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
     A_VALUE(L_FETCHED_ROWS) := L_VALUE;

     IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
        L_RESULT := DBMS_SQL.FETCH_ROWS(L_AU_CURSOR);
     END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_AU_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
  WHEN OTHERS THEN
     L_SQLERRM := SQLERRM;
     UNAPIGEN.U4ROLLBACK;
     INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
     VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
             'GetAttributeValues', L_SQLERRM);
     UNAPIGEN.U4COMMIT;
     IF DBMS_SQL.IS_OPEN (L_AU_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_AU_CURSOR);
     END IF;
     RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETATTRIBUTEVALUES;

FUNCTION DELETEATTRIBUTE
(A_AU               IN     VARCHAR2,                   
 A_VERSION          IN     VARCHAR2,                   
 A_MODIFY_REASON    IN     VARCHAR2)                   
RETURN NUMBER IS

L_ALLOW_MODIFY CHAR(1);
L_ACTIVE       CHAR(1);
L_LOG_HS       CHAR(1);
L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_AU, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('au', A_AU, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS   THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   
   IF UNAPIGEN.ISSYSTEM21CFR11COMPLIANT = UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTALLOWEDIN21CFR11;
      RAISE STPERROR;
   END IF;

   DELETE FROM UTAUHS
   WHERE AU = A_AU
     AND VERSION = A_VERSION;

   DELETE FROM UTAULIST
   WHERE AU = A_AU
     AND VERSION = A_VERSION;

   DELETE FROM UTAUSQL
   WHERE AU = A_AU
     AND VERSION = A_VERSION;

   DELETE FROM UTAU
   WHERE AU = A_AU
     AND VERSION = A_VERSION;

   DELETE FROM UTSHORTCUT
   WHERE KEY_TP='au'
   AND VALUE_S = A_AU;

   DELETE FROM UTEVTIMED
   WHERE (OBJECT_TP='au' AND OBJECT_ID=A_AU AND INSTR(EV_DETAILS,'version='||A_VERSION)<>0);

   DELETE FROM UTEVRULESDELAYED
   WHERE (OBJECT_TP='au' AND OBJECT_ID=A_AU AND INSTR(EV_DETAILS,'version='||A_VERSION)<>0);

   L_EVENT_TP := 'ObjectDeleted';
   L_EV_SEQ_NR := -1;

   L_RESULT := UNAPIEV.INSERTEVENT('DeleteAttribute',
                                   UNAPIGEN.P_EVMGR_NAME,'au',
                                   A_AU, L_LC, L_LC_VERSION, L_SS,
                                   L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE <> 1 THEN
         UNAPIGEN.LOGERROR('DeleteAttribute', SQLERRM);
      END IF;
      RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'DeleteAttribute'));
END DELETEATTRIBUTE;

FUNCTION SAVEATTRIBUTE
(A_AU                   IN   VARCHAR2,                    
 A_VERSION              IN   VARCHAR2,                    
 A_VERSION_IS_CURRENT   IN   CHAR,                        
 A_EFFECTIVE_FROM       IN   DATE,                        
 A_EFFECTIVE_TILL       IN   DATE,                        
 A_DESCRIPTION          IN   VARCHAR2,                    
 A_DESCRIPTION2         IN   VARCHAR2,                    
 A_IS_PROTECTED         IN   CHAR,                        
 A_SINGLE_VALUED        IN   CHAR,                        
 A_NEW_VAL_ALLOWED      IN   CHAR,                        
 A_STORE_DB             IN   CHAR,                        
 A_INHERIT_AU           IN   CHAR,                        
 A_SHORTCUT             IN   RAW,                         
 A_VALUE_LIST_TP        IN   CHAR,                        
 A_DEFAULT_VALUE        IN   VARCHAR2,                    
 A_RUN_MODE             IN   CHAR,                        
 A_SERVICE              IN   VARCHAR2,                    
 A_CF_VALUE             IN   VARCHAR2,                    
 A_AU_CLASS             IN   VARCHAR2,                    
 A_LOG_HS               IN   CHAR,                        
 A_LC                   IN   VARCHAR2,                    
 A_LC_VERSION           IN   VARCHAR2,                    
 A_MODIFY_REASON        IN   VARCHAR2)                    
 RETURN NUMBER IS

L_LC                      VARCHAR2(2);
L_LC_VERSION              VARCHAR2(20);
L_SS                      VARCHAR2(2);
L_ALLOW_MODIFY            CHAR(1);
L_ACTIVE                  CHAR(1);
L_LOG_HS                  CHAR(1);
L_CF_VALUE                VARCHAR2(20);
L_INSERT                  BOOLEAN;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_AU, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   IF NVL(A_IS_PROTECTED, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_PROTECTED;
      RAISE STPERROR;
   END IF;

   IF NVL(A_SINGLE_VALUED, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SINGLEVALUED;
      RAISE STPERROR;
   END IF;

   IF NVL(A_NEW_VAL_ALLOWED, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NEWVALALLOWED;
      RAISE STPERROR;
   END IF;

   IF NVL(A_STORE_DB, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_STOREDB;
      RAISE STPERROR;
   END IF;

   IF NVL(A_INHERIT_AU, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INHERITAU;
      RAISE STPERROR;
   END IF;

   IF NVL(A_RUN_MODE, ' ') NOT IN ('H','Z','R','N','X','M','I','C','E','L') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_RUNMODE;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VALUE_LIST_TP, ' ') NOT IN ('E', 'F', 'Q','C') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_VALUELISTTP;
      RAISE STPERROR;
   END IF;

   IF NVL(A_LOG_HS, ' ') NOT IN ('1', '0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_LOGHS;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VALUE_LIST_TP, ' ') <> 'C' THEN
      L_CF_VALUE := '';
   ELSE
      L_CF_VALUE := A_CF_VALUE;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('au', A_AU, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE,L_LOG_HS);

   IF L_RET_CODE = UNAPIGEN.DBERR_NOOBJECT THEN
      L_INSERT := TRUE;
   ELSIF L_RET_CODE = UNAPIGEN.DBERR_SUCCESS THEN
      L_INSERT := FALSE;
   ELSE
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   IF NOT L_INSERT THEN                 

      UPDATE UTAU
      SET EFFECTIVE_FROM      = DECODE(EFFECTIVE_TILL, NULL, A_EFFECTIVE_FROM, EFFECTIVE_FROM),
          EFFECTIVE_FROM_TZ   = DECODE(EFFECTIVE_TILL, NULL, DECODE(A_EFFECTIVE_FROM, EFFECTIVE_FROM_TZ, EFFECTIVE_FROM_TZ, A_EFFECTIVE_FROM) , EFFECTIVE_FROM_TZ),
          DESCRIPTION     = A_DESCRIPTION,
          DESCRIPTION2    = A_DESCRIPTION2,
          IS_PROTECTED    = A_IS_PROTECTED,
          SINGLE_VALUED   = A_SINGLE_VALUED,
          NEW_VAL_ALLOWED = A_NEW_VAL_ALLOWED,
          STORE_DB        = A_STORE_DB,
          INHERIT_AU      = A_INHERIT_AU,
          SHORTCUT        = A_SHORTCUT,
          VALUE_LIST_TP   = A_VALUE_LIST_TP,
          DEFAULT_VALUE   = A_DEFAULT_VALUE,
          RUN_MODE        = A_RUN_MODE,
          SERVICE         = A_SERVICE,
          CF_VALUE        = L_CF_VALUE,
          AU_CLASS        = A_AU_CLASS,
          LOG_HS          = A_LOG_HS,
          ALLOW_MODIFY    = '#'
      WHERE AU = A_AU
        AND VERSION = A_VERSION;

      IF NVL(A_VALUE_LIST_TP, ' ') <> 'F' THEN
         DELETE FROM UTAULIST
         WHERE AU = A_AU
           AND VERSION = A_VERSION;
      END IF;
      
      IF NVL(A_VALUE_LIST_TP, ' ') <> 'Q' THEN
         DELETE FROM UTAUSQL
         WHERE AU = A_AU
           AND VERSION = A_VERSION;
      END IF;
      
      L_EVENT_TP := 'ObjectUpdated';
      
   ELSE                                  
      IF NVL(A_LC, ' ') <> ' ' THEN
         L_LC := A_LC;
      END IF;
      IF NVL(A_LC_VERSION, ' ') <> ' ' THEN
         L_LC_VERSION := A_LC_VERSION;
      END IF;
      INSERT INTO UTAU(AU, VERSION, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ, DESCRIPTION, DESCRIPTION2, IS_PROTECTED, 
                       SINGLE_VALUED, NEW_VAL_ALLOWED, STORE_DB, INHERIT_AU, SHORTCUT, VALUE_LIST_TP,
                       DEFAULT_VALUE, RUN_MODE, SERVICE, AU_CLASS, CF_VALUE, LOG_HS,
                       ALLOW_MODIFY, ACTIVE, LC, LC_VERSION)
      VALUES(A_AU, A_VERSION, A_EFFECTIVE_FROM, A_EFFECTIVE_FROM, A_DESCRIPTION, A_DESCRIPTION2, A_IS_PROTECTED, 
             A_SINGLE_VALUED, A_NEW_VAL_ALLOWED, A_STORE_DB, A_INHERIT_AU, A_SHORTCUT, A_VALUE_LIST_TP,
             A_DEFAULT_VALUE, A_RUN_MODE, A_SERVICE, L_CF_VALUE, A_AU_CLASS, A_LOG_HS,
             '#', '0', L_LC, L_LC_VERSION);

      L_EVENT_TP := 'ObjectCreated';

   END IF;

   
   DELETE FROM UTSHORTCUT
   WHERE KEY_TP='au'
     AND VALUE_S = A_AU;

   IF (A_SHORTCUT <> HEXTORAW('0000000000000000')) THEN
      INSERT INTO UTSHORTCUT(SHORTCUT, KEY_TP, VALUE_S, STORE_DB,
                             RUN_MODE, SERVICE)
      VALUES(A_SHORTCUT, 'au', A_AU, A_STORE_DB, A_RUN_MODE, A_SERVICE);
   END IF;

   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT('SaveAttribute',
                                   UNAPIGEN.P_EVMGR_NAME,'au',
                                   A_AU, L_LC, L_LC_VERSION, L_SS, L_EVENT_TP, 'version='||A_VERSION,
                                   L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF NVL(L_LOG_HS, ' ') <> A_LOG_HS THEN
      IF A_LOG_HS = '1' THEN
         INSERT INTO UTAUHS(AU, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                            WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES(A_AU, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 'History switched ON', 
                'Audit trail is turned on.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      ELSE
         INSERT INTO UTAUHS(AU, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                            WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES(A_AU, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 'History switched OFF', 
                'Audit trail is turned off.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   END IF;

   IF NVL(L_LOG_HS, ' ') = '1' THEN
      IF L_EVENT_TP = 'ObjectCreated' THEN
         INSERT INTO UTAUHS(AU, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                            WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES(A_AU, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                'attribute "'||A_AU||'" is created.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                L_EV_SEQ_NR);
      ELSE
         INSERT INTO UTAUHS(AU, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                            WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES(A_AU, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                'attribute "'||A_AU||'" is updated.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                L_EV_SEQ_NR);
      END IF;
   ELSE
      
      
      IF L_EVENT_TP = 'ObjectCreated' THEN
         INSERT INTO UTAUHS(AU, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                            WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES(A_AU, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                'attribute "'||A_AU||'" is created.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                L_EV_SEQ_NR);
      END IF;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
   UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UQSHORTCUTKEY;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveAttribute'));
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveAttribute',SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveAttribute'));
END SAVEATTRIBUTE;


FUNCTION SAVEATTRIBUTE
(A_AU                   IN   VARCHAR2,                    
 A_VERSION              IN   VARCHAR2,                    
 A_VERSION_IS_CURRENT   IN   CHAR,                        
 A_EFFECTIVE_FROM       IN   DATE,                        
 A_EFFECTIVE_TILL       IN   DATE,                        
 A_DESCRIPTION          IN   VARCHAR2,                    
 A_DESCRIPTION2         IN   VARCHAR2,                    
 A_IS_PROTECTED         IN   CHAR,                        
 A_SINGLE_VALUED        IN   CHAR,                        
 A_NEW_VAL_ALLOWED      IN   CHAR,                        
 A_STORE_DB             IN   CHAR,                        
 A_INHERIT_AU           IN   CHAR,                        
 A_ALT                  IN   CHAR,                        
 A_CTRL                 IN   CHAR,                        
 A_SHIFT                IN   CHAR,                        
 A_KEY_NAME             IN   VARCHAR2,                    
 A_VALUE_LIST_TP        IN   CHAR,                        
 A_DEFAULT_VALUE        IN   VARCHAR2,                    
 A_RUN_MODE             IN   CHAR,                        
 A_SERVICE              IN   VARCHAR2,                    
 A_CF_VALUE             IN   VARCHAR2,                    
 A_AU_CLASS             IN   VARCHAR2,                    
 A_LOG_HS               IN   CHAR,                        
 A_LC                   IN   VARCHAR2,                    
 A_LC_VERSION           IN   VARCHAR2,                    
 A_MODIFY_REASON        IN   VARCHAR2)                    
 RETURN NUMBER IS

L_LC                      VARCHAR2(2);
L_LC_VERSION              VARCHAR2(20);
L_SS                      VARCHAR2(2);
L_ALLOW_MODIFY            CHAR(1);
L_ACTIVE                  CHAR(1);
L_LOG_HS                  CHAR(1);
L_CF_VALUE                VARCHAR2(20);
L_INSERT                  BOOLEAN;
L_SHORTCUT                RAW(8);

L_VC8_SHORTCUT            VARCHAR2(8);

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_AU, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   IF NVL(A_IS_PROTECTED, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_PROTECTED;
      RAISE STPERROR;
   END IF;

   IF NVL(A_SINGLE_VALUED, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SINGLEVALUED;
      RAISE STPERROR;
   END IF;

   IF NVL(A_NEW_VAL_ALLOWED, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NEWVALALLOWED;
      RAISE STPERROR;
   END IF;

   IF NVL(A_STORE_DB, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_STOREDB;
      RAISE STPERROR;
   END IF;

   IF NVL(A_INHERIT_AU, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INHERITAU;
      RAISE STPERROR;
   END IF;

   IF NVL(A_RUN_MODE, ' ') NOT IN ('H','Z','R','N','X','M','I','C','E','L') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_RUNMODE;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VALUE_LIST_TP, ' ') NOT IN ('E', 'F', 'Q','C') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_VALUELISTTP;
      RAISE STPERROR;
   END IF;

   IF NVL(A_LOG_HS, ' ') NOT IN ('1', '0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_LOGHS;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VALUE_LIST_TP, ' ') <> 'C' THEN
      L_CF_VALUE := '';
   ELSE
      L_CF_VALUE := A_CF_VALUE;
   END IF;
   
   
   IF NVL(A_KEY_NAME, ' ') = ' ' THEN
      L_VC8_SHORTCUT := NULL;
      L_SHORTCUT := NULL;
   ELSE
      L_VC8_SHORTCUT := A_ALT || A_CTRL || A_SHIFT || SUBSTR(A_KEY_NAME,1,5);
      L_SHORTCUT := UTL_RAW.CAST_TO_RAW(L_VC8_SHORTCUT);
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('au', A_AU, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE,L_LOG_HS);

   IF L_RET_CODE = UNAPIGEN.DBERR_NOOBJECT THEN
      L_INSERT := TRUE;
   ELSIF L_RET_CODE = UNAPIGEN.DBERR_SUCCESS THEN
      L_INSERT := FALSE;
   ELSE
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   IF NOT L_INSERT THEN                 

      UPDATE UTAU
      SET EFFECTIVE_FROM      = DECODE(EFFECTIVE_TILL, NULL, A_EFFECTIVE_FROM, EFFECTIVE_FROM),
          EFFECTIVE_FROM_TZ   = DECODE(EFFECTIVE_TILL, NULL, DECODE(A_EFFECTIVE_FROM, EFFECTIVE_FROM_TZ, EFFECTIVE_FROM_TZ, A_EFFECTIVE_FROM), EFFECTIVE_FROM_TZ),
          DESCRIPTION     = A_DESCRIPTION,
          DESCRIPTION2    = A_DESCRIPTION2,
          IS_PROTECTED    = A_IS_PROTECTED,
          SINGLE_VALUED   = A_SINGLE_VALUED,
          NEW_VAL_ALLOWED = A_NEW_VAL_ALLOWED,
          STORE_DB        = A_STORE_DB,
          INHERIT_AU      = A_INHERIT_AU,
          SHORTCUT        = L_SHORTCUT,
          VALUE_LIST_TP   = A_VALUE_LIST_TP,
          DEFAULT_VALUE   = A_DEFAULT_VALUE,
          RUN_MODE        = A_RUN_MODE,
          SERVICE         = A_SERVICE,
          CF_VALUE        = L_CF_VALUE,
          AU_CLASS        = A_AU_CLASS,
          LOG_HS          = A_LOG_HS,
          ALLOW_MODIFY    = '#'
      WHERE AU = A_AU
        AND VERSION = A_VERSION;

      IF NVL(A_VALUE_LIST_TP, ' ') <> 'F' THEN
         DELETE FROM UTAULIST
         WHERE AU = A_AU
           AND VERSION = A_VERSION;
      END IF;
      
      IF NVL(A_VALUE_LIST_TP, ' ') <> 'Q' THEN
         DELETE FROM UTAUSQL
         WHERE AU = A_AU
           AND VERSION = A_VERSION;
      END IF;
      
      L_EVENT_TP := 'ObjectUpdated';
      
   ELSE                                  
      IF NVL(A_LC, ' ') <> ' ' THEN
         L_LC := A_LC;
      END IF;
      IF NVL(A_LC_VERSION, ' ') <> ' ' THEN
         L_LC_VERSION := A_LC_VERSION;
      END IF;
      INSERT INTO UTAU(AU, VERSION, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ, DESCRIPTION, DESCRIPTION2, IS_PROTECTED, 
                       SINGLE_VALUED, NEW_VAL_ALLOWED, STORE_DB, INHERIT_AU, SHORTCUT, VALUE_LIST_TP,
                       DEFAULT_VALUE, RUN_MODE, SERVICE, AU_CLASS, CF_VALUE, LOG_HS,
                       ALLOW_MODIFY, ACTIVE, LC, LC_VERSION)
      VALUES(A_AU, A_VERSION, A_EFFECTIVE_FROM, A_EFFECTIVE_FROM, A_DESCRIPTION, A_DESCRIPTION2, A_IS_PROTECTED, 
             A_SINGLE_VALUED, A_NEW_VAL_ALLOWED, A_STORE_DB, A_INHERIT_AU, L_SHORTCUT, A_VALUE_LIST_TP,
             A_DEFAULT_VALUE, A_RUN_MODE, A_SERVICE, L_CF_VALUE, A_AU_CLASS, A_LOG_HS,
             '#', '0', L_LC, L_LC_VERSION);

      L_EVENT_TP := 'ObjectCreated';

   END IF;

   
   DELETE FROM UTSHORTCUT
   WHERE KEY_TP='au'
     AND VALUE_S = A_AU;

   IF (L_SHORTCUT <> HEXTORAW('0000000000000000')) THEN
      INSERT INTO UTSHORTCUT(SHORTCUT, KEY_TP, VALUE_S, STORE_DB,
                             RUN_MODE, SERVICE)
      VALUES(L_SHORTCUT, 'au', A_AU, A_STORE_DB, A_RUN_MODE, A_SERVICE);
   END IF;

   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT('SaveAttribute',
                                   UNAPIGEN.P_EVMGR_NAME,'au',
                                   A_AU, L_LC, L_LC_VERSION, L_SS, L_EVENT_TP, 'version='||A_VERSION,
                                   L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF NVL(L_LOG_HS, ' ') <> A_LOG_HS THEN
      IF A_LOG_HS = '1' THEN
         INSERT INTO UTAUHS(AU, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                            WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES(A_AU, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 'History switched ON', 
                'Audit trail is turned on.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      ELSE
         INSERT INTO UTAUHS(AU, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                            WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES(A_AU, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 'History switched OFF', 
                'Audit trail is turned off.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   END IF;

   IF NVL(L_LOG_HS, ' ') = '1' THEN
      IF L_EVENT_TP = 'ObjectCreated' THEN
         INSERT INTO UTAUHS(AU, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                            WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES(A_AU, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                'attribute "'||A_AU||'" is created.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                L_EV_SEQ_NR);
      ELSE
         INSERT INTO UTAUHS(AU, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                            WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES(A_AU, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                'attribute "'||A_AU||'" is updated.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                L_EV_SEQ_NR);
      END IF;
   ELSE
      
      
      IF L_EVENT_TP = 'ObjectCreated' THEN
         INSERT INTO UTAUHS(AU, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                            WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES(A_AU, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                'attribute "'||A_AU||'" is created.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                L_EV_SEQ_NR);
      END IF;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
   UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UQSHORTCUTKEY;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveAttribute'));
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveAttribute',SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveAttribute'));
END SAVEATTRIBUTE;

FUNCTION SAVEATTRIBUTESQL
(A_AU               IN   VARCHAR2,                    
 A_VERSION          IN   VARCHAR2,                    
 A_SQLTEXT          IN   UNAPIGEN.VC255_TABLE_TYPE,   
 A_NR_OF_ROWS       IN   NUMBER,                      
 A_MODIFY_REASON    IN   VARCHAR2)                    
 RETURN NUMBER IS

L_LC                      VARCHAR2(2);
L_LC_VERSION              VARCHAR2(20);
L_SS                      VARCHAR2(2);
L_ALLOW_MODIFY            CHAR(1);
L_ACTIVE                  CHAR(1);
L_LOG_HS                  CHAR(1);
L_SEQ_NO                  NUMBER;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_AU, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('au', A_AU, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE,L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTAU
   SET ALLOW_MODIFY = '#'
   WHERE AU = A_AU
     AND VERSION = A_VERSION;

   DELETE FROM UTAUSQL
   WHERE AU = A_AU
     AND VERSION = A_VERSION;

   L_EVENT_TP := 'ObjectUpdated';

   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      IF NVL(A_SQLTEXT(L_SEQ_NO), ' ') <> ' ' THEN
         INSERT INTO UTAUSQL(AU, VERSION, SEQ, SQLTEXT)
         VALUES(A_AU, A_VERSION, L_SEQ_NO, A_SQLTEXT(L_SEQ_NO));
      END IF;
   END LOOP;

   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT('SaveAttributeSql',
                                   UNAPIGEN.P_EVMGR_NAME, 'au',
                                   A_AU, L_LC, L_LC_VERSION, L_SS, L_EVENT_TP, 'version='||A_VERSION,
                                   L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF NVL(L_LOG_HS, ' ') = '1' THEN
      INSERT INTO UTAUHS(AU, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                         WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES(A_AU, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
             'attribute "'||A_AU||'" is updated.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
             L_EV_SEQ_NR);
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveAttributeSql',SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveAttributeSql'));
END SAVEATTRIBUTESQL;

FUNCTION SAVEATTRIBUTEVALUE
(A_AU               IN   VARCHAR2,                    
 A_VERSION          IN   VARCHAR2,                    
 A_VALUE            IN   UNAPIGEN.VC40_TABLE_TYPE,    
 A_NR_OF_ROWS       IN   NUMBER,                      
 A_MODIFY_REASON    IN   VARCHAR2)                    
 RETURN NUMBER IS

L_LC                      VARCHAR2(2);
L_LC_VERSION              VARCHAR2(20);
L_SS                      VARCHAR2(2);
L_ALLOW_MODIFY            CHAR(1);
L_ACTIVE                  CHAR(1);
L_LOG_HS                  CHAR(1);
L_SEQ_NO                  NUMBER;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_AU, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('au', A_AU, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTAU
   SET ALLOW_MODIFY = '#'
   WHERE AU = A_AU
     AND VERSION = A_VERSION;

   DELETE FROM UTAULIST
   WHERE AU = A_AU
     AND VERSION = A_VERSION;

   L_EVENT_TP := 'ObjectUpdated';

   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      IF NVL(A_VALUE(L_SEQ_NO), ' ') <> ' ' THEN
         INSERT INTO UTAULIST(AU, VERSION, SEQ, VALUE)
         VALUES(A_AU, A_VERSION, L_SEQ_NO, A_VALUE(L_SEQ_NO));
      END IF;
   END LOOP;

   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT('SaveAttributeValue',
                                   UNAPIGEN.P_EVMGR_NAME,'au',
                                   A_AU, L_LC, L_LC_VERSION, L_SS, L_EVENT_TP, 'version='||A_VERSION,
                                   L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF NVL(L_LOG_HS, ' ') = '1' THEN
      INSERT INTO UTAUHS(AU, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                         WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES(A_AU, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
             'attribute "'||A_AU||'" is updated.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
             L_EV_SEQ_NR);
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveAttributeValue',SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveAttributeValue'));
END SAVEATTRIBUTEVALUE;




BEGIN
   P_AU_CURSOR := NULL;
END UNAPIAU;
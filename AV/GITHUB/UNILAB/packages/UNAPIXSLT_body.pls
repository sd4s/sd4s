PACKAGE BODY unapixslt AS

L_SQLERRM         VARCHAR2(255);
L_SQL_STRING      VARCHAR2(4000);
L_WHERE_CLAUSE    VARCHAR2(1000);
L_EVENT_TP        UTEV.EV_TP%TYPE;
L_EV_DETAILS      VARCHAR2(255);
L_RET_CODE        NUMBER;
L_RESULT          NUMBER;
L_FETCHED_ROWS    NUMBER;
L_EV_SEQ_NR       NUMBER;
STPERROR          EXCEPTION;

FUNCTION GETVERSION
   RETURN VARCHAR2
IS
BEGIN
   RETURN('06.07.00.00_00.13');
EXCEPTION
   WHEN OTHERS THEN
      RETURN (NULL);
END GETVERSION;

FUNCTION GETPDAXSLT
(A_OBJ_ID                     OUT UNAPIGEN.VC20_TABLE_TYPE,     
 A_SEQ                        OUT UNAPIGEN.NUM_TABLE_TYPE,      
 A_LINE                       OUT UNAPIGEN.VC255_TABLE_TYPE,    
 A_NR_OF_ROWS              IN OUT NUMBER,                       
 A_WHERE_CLAUSE            IN     VARCHAR2)                     
RETURN NUMBER IS

L_OBJ_ID             VARCHAR2(20);
L_SEQ                NUMBER;
L_LINE               VARCHAR2(255);

L_PDA_CURSOR         INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'ORDER BY obj_id, seq'; 
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := 'WHERE obj_id = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                        ''' ORDER BY seq';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_PDA_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT obj_id, seq, line ' ||
                   'FROM dd' || UNAPIGEN.P_DD || '.uvxslt ' || L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_PDA_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_PDA_CURSOR, 1, L_OBJ_ID,  20);
   DBMS_SQL.DEFINE_COLUMN(L_PDA_CURSOR, 2, L_SEQ        );
   DBMS_SQL.DEFINE_COLUMN(L_PDA_CURSOR, 3, L_LINE,   255);

   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_PDA_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_PDA_CURSOR, 1, L_OBJ_ID);
      DBMS_SQL.COLUMN_VALUE(L_PDA_CURSOR, 2, L_SEQ);
      DBMS_SQL.COLUMN_VALUE(L_PDA_CURSOR, 3, L_LINE);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_OBJ_ID(L_FETCHED_ROWS) := L_OBJ_ID;
      A_SEQ(L_FETCHED_ROWS)    := L_SEQ;
      A_LINE(L_FETCHED_ROWS)   := L_LINE;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_PDA_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_PDA_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);
EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
              'GetPdaXslt', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (L_PDA_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_PDA_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETPDAXSLT;

FUNCTION GETXSLT
(A_OBJ_ID          OUT    UNAPIGEN.VC20_TABLE_TYPE,     
 A_USAGE_TYPE      OUT    UNAPIGEN.VC20_TABLE_TYPE,     
 A_LINE            OUT    UNAPIGEN.VC255_TABLE_TYPE,    
 A_NR_OF_ROWS      IN OUT NUMBER,                       
 A_WHERE_CLAUSE    IN     VARCHAR2)                     
RETURN NUMBER IS

L_OBJ_ID             VARCHAR2(20);
L_USAGE_TYPE         VARCHAR2(20);
L_SEQ                NUMBER;
L_LINE               VARCHAR2(255);

L_PDA_CURSOR         INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'ORDER BY obj_id, seq'; 
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := 'WHERE obj_id = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                        ''' ORDER BY seq';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_PDA_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT obj_id, usage_type, line ' ||
                   'FROM dd' || UNAPIGEN.P_DD || '.uvxslt ' || L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_PDA_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_PDA_CURSOR, 1, L_OBJ_ID,  20);
   DBMS_SQL.DEFINE_COLUMN(L_PDA_CURSOR, 2, L_USAGE_TYPE, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PDA_CURSOR, 3, L_LINE,   255);

   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_PDA_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_PDA_CURSOR, 1, L_OBJ_ID);
      DBMS_SQL.COLUMN_VALUE(L_PDA_CURSOR, 2, L_USAGE_TYPE);
      DBMS_SQL.COLUMN_VALUE(L_PDA_CURSOR, 3, L_LINE);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_OBJ_ID(L_FETCHED_ROWS) := L_OBJ_ID;
      A_USAGE_TYPE(L_FETCHED_ROWS)    := L_USAGE_TYPE;
      A_LINE(L_FETCHED_ROWS)   := L_LINE;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_PDA_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_PDA_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);
EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetXslt', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (L_PDA_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_PDA_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETXSLT;
  
FUNCTION GETXSLTLIST
(A_OBJ_ID          OUT    UNAPIGEN.VC20_TABLE_TYPE,     
 A_USAGE_TYPE      OUT    UNAPIGEN.VC20_TABLE_TYPE,     
 A_NR_OF_ROWS      IN OUT NUMBER,                       
 A_WHERE_CLAUSE    IN     VARCHAR2)                     
RETURN NUMBER IS

L_OBJ_ID       VARCHAR2(20);
L_USAGE_TYPE   VARCHAR2(20);
L_SEQ          NUMBER(5);
L_LT_CURSOR    INTEGER;
L_NR_OF_ROWS   NUMBER;   

L_SQLERRM      VARCHAR2(255) ;


BEGIN
   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   
   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := ' ORDER BY a.obj_id';
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := ' WHERE a.obj_id = ''' || A_WHERE_CLAUSE ||
                        ''' ORDER BY a.obj_id';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE;
   END IF;

   L_LT_CURSOR := DBMS_SQL.OPEN_CURSOR;

   L_SQL_STRING:= 'SELECT DISTINCT a.obj_id, a.usage_type FROM dd'||UNAPIGEN.P_DD||
                  '.uvxslt a '||L_WHERE_CLAUSE;
   DBMS_SQL.PARSE(L_LT_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_LT_CURSOR, 1, L_OBJ_ID, 20);
   DBMS_SQL.DEFINE_COLUMN(L_LT_CURSOR, 2, L_USAGE_TYPE, 20);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_LT_CURSOR);

   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;
      DBMS_SQL.COLUMN_VALUE(L_LT_CURSOR, 1, L_OBJ_ID);
      DBMS_SQL.COLUMN_VALUE(L_LT_CURSOR, 2, L_USAGE_TYPE);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;      
      A_OBJ_ID(L_FETCHED_ROWS)      := L_OBJ_ID;
      A_USAGE_TYPE(L_FETCHED_ROWS)  := L_USAGE_TYPE;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_LT_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_LT_CURSOR);
   
   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;
   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetXsltList', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (L_LT_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_LT_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETXSLTLIST;

FUNCTION SAVEXSLT
(A_OBJ_ID           IN    VARCHAR2,                     
 A_USAGE_TYPE       IN    VARCHAR2,                     
 A_LINE             IN    UNAPIGEN.VC255_TABLE_TYPE,    
 A_NR_OF_ROWS       IN    NUMBER,                       
 A_MODIFY_REASON    IN    VARCHAR2)                     
RETURN NUMBER IS
BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_OBJ_ID, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   DELETE FROM UTXSLT
   WHERE OBJ_ID = A_OBJ_ID;
   
   IF A_NR_OF_ROWS > 0 THEN
      L_EVENT_TP := 'XsltUpdated';
   ELSE
      L_EVENT_TP := 'XsltDeleted';
   END IF;

   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      INSERT INTO UTXSLT(OBJ_ID, USAGE_TYPE, SEQ, LINE)
      VALUES(A_OBJ_ID, A_USAGE_TYPE, L_SEQ_NO, A_LINE(L_SEQ_NO));
   END LOOP;

   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT('SaveXslt',
                                   UNAPIGEN.P_EVMGR_NAME, 'xslt',
                                   A_OBJ_ID, '', '', '', L_EVENT_TP, '', L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;


      INSERT INTO UTEDTBLHS(TABLE_NAME, WHO, WHO_DESCRIPTION, WHAT, 
                            WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES('utxslt', UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
             'table "utxslt" is updated.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, 
             UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);


   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveXslt',SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveXslt'));
END SAVEXSLT;
 
FUNCTION DELETEXSLT
(A_OBJ_ID           IN    VARCHAR2,                     
 A_MODIFY_REASON    IN    VARCHAR2)                     
RETURN NUMBER IS
L_LINE              UNAPIGEN.VC255_TABLE_TYPE;
BEGIN
   RETURN(UNAPIXSLT.SAVEXSLT(A_OBJ_ID, '', L_LINE, 0, A_MODIFY_REASON));
END DELETEXSLT;

END UNAPIXSLT;
PACKAGE BODY unapipr AS

L_SQLERRM         VARCHAR2(255);
L_SQL_STRING      VARCHAR2(4000);
L_WHERE_CLAUSE    VARCHAR2(1000);
L_EVENT_TP        UTEV.EV_TP%TYPE;
L_EV_DETAILS      VARCHAR2(255);
L_RET_CODE        NUMBER;
L_RESULT          NUMBER;
L_FETCHED_ROWS    NUMBER;
L_EV_SEQ_NR       NUMBER;
STPERROR          EXCEPTION;

FUNCTION GETVERSION
   RETURN VARCHAR2
IS
BEGIN
   RETURN('06.07.00.00_00.13');
EXCEPTION
   WHEN OTHERS THEN
      RETURN (NULL);
END GETVERSION;

FUNCTION GETPARAMETERLIST
(A_PR                      OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_VERSION                 OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_VERSION_IS_CURRENT      OUT      UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_EFFECTIVE_FROM          OUT      UNAPIGEN.DATE_TABLE_TYPE,   
 A_EFFECTIVE_TILL          OUT      UNAPIGEN.DATE_TABLE_TYPE,   
 A_DESCRIPTION             OUT      UNAPIGEN.VC40_TABLE_TYPE,   
 A_SS                      OUT      UNAPIGEN.VC2_TABLE_TYPE,    
 A_NR_OF_ROWS              IN OUT   NUMBER,                     
 A_WHERE_CLAUSE            IN       VARCHAR2,                   
 A_NEXT_ROWS               IN       NUMBER)                     
RETURN NUMBER IS

L_PR                    VARCHAR2(20);
L_VERSION               VARCHAR2(20);
L_VERSION_IS_CURRENT    CHAR(1);
L_EFFECTIVE_FROM        TIMESTAMP WITH TIME ZONE;
L_EFFECTIVE_TILL        TIMESTAMP WITH TIME ZONE;
L_DESCRIPTION           VARCHAR2(40);
L_SS                    VARCHAR2(2);

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_PR_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_PR_CURSOR);
         P_PR_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_PR_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
         L_WHERE_CLAUSE := 'WHERE active = ''1'' ORDER BY pr, version'; 
      ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
         L_WHERE_CLAUSE := 'WHERE version_is_current = ''1'' '||
                           'AND pr = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || ''' ORDER BY pr, version'; 
      ELSE
         L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
      END IF;

      IF P_PR_CURSOR IS NULL THEN
         P_PR_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;

      L_SQL_STRING := 'SELECT pr, version, nvl(version_is_current,''0''), effective_from, effective_till, description, ss '||
                      'FROM dd' || UNAPIGEN.P_DD ||'.uvpr ' || L_WHERE_CLAUSE;
      DBMS_SQL.PARSE(P_PR_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

      DBMS_SQL.DEFINE_COLUMN(P_PR_CURSOR, 1, L_PR, 20);
      DBMS_SQL.DEFINE_COLUMN(P_PR_CURSOR, 2, L_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_PR_CURSOR, 3, L_VERSION_IS_CURRENT, 1);
      DBMS_SQL.DEFINE_COLUMN(P_PR_CURSOR, 4, L_EFFECTIVE_FROM);
      DBMS_SQL.DEFINE_COLUMN(P_PR_CURSOR, 5, L_EFFECTIVE_TILL);
      DBMS_SQL.DEFINE_COLUMN(P_PR_CURSOR, 6, L_DESCRIPTION, 40);
      DBMS_SQL.DEFINE_COLUMN(P_PR_CURSOR, 7, L_SS, 2);
      L_RESULT := DBMS_SQL.EXECUTE(P_PR_CURSOR);
   END IF;

   L_RESULT := DBMS_SQL.FETCH_ROWS(P_PR_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_PR_CURSOR, 1, L_PR);
      DBMS_SQL.COLUMN_VALUE(P_PR_CURSOR, 2, L_VERSION);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_PR_CURSOR, 3, L_VERSION_IS_CURRENT);
      DBMS_SQL.COLUMN_VALUE(P_PR_CURSOR, 4, L_EFFECTIVE_FROM);
      DBMS_SQL.COLUMN_VALUE(P_PR_CURSOR, 5, L_EFFECTIVE_TILL);
      DBMS_SQL.COLUMN_VALUE(P_PR_CURSOR, 6, L_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE(P_PR_CURSOR, 7, L_SS);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_PR(L_FETCHED_ROWS) := L_PR;
      A_VERSION(L_FETCHED_ROWS) := L_VERSION;
      A_VERSION_IS_CURRENT(L_FETCHED_ROWS) := L_VERSION_IS_CURRENT;
      A_EFFECTIVE_FROM(L_FETCHED_ROWS) := L_EFFECTIVE_FROM;
      A_EFFECTIVE_TILL(L_FETCHED_ROWS) := L_EFFECTIVE_TILL;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;
      A_SS(L_FETCHED_ROWS) := L_SS;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_PR_CURSOR);
      END IF;
   END LOOP;

   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_PR_CURSOR);
       P_PR_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   END IF;

   IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_PR_CURSOR);
      P_PR_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   L_SQLERRM := SQLERRM;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
           'GetParameterList', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   IF DBMS_SQL.IS_OPEN (P_PR_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (P_PR_CURSOR);
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETPARAMETERLIST;

FUNCTION GETPARAMETER
(A_PR                      OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_VERSION                 OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_VERSION_IS_CURRENT      OUT      UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_EFFECTIVE_FROM          OUT      UNAPIGEN.DATE_TABLE_TYPE,   
 A_EFFECTIVE_TILL          OUT      UNAPIGEN.DATE_TABLE_TYPE,   
 A_DESCRIPTION             OUT      UNAPIGEN.VC40_TABLE_TYPE,   
 A_DESCRIPTION2            OUT      UNAPIGEN.VC40_TABLE_TYPE,   
 A_UNIT                    OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_FORMAT                  OUT      UNAPIGEN.VC40_TABLE_TYPE,   
 A_TD_INFO                 OUT      UNAPIGEN.NUM_TABLE_TYPE,    
 A_TD_INFO_UNIT            OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_CONFIRM_UID             OUT      UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_DEF_VAL_TP              OUT      UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_DEF_AU_LEVEL            OUT      UNAPIGEN.VC4_TABLE_TYPE,    
 A_DEF_VAL                 OUT      UNAPIGEN.VC40_TABLE_TYPE,   
 A_ALLOW_ANY_MT            OUT      UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_DELAY                   OUT      UNAPIGEN.NUM_TABLE_TYPE,    
 A_DELAY_UNIT              OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_MIN_NR_RESULTS          OUT      UNAPIGEN.NUM_TABLE_TYPE,    
 A_CALC_METHOD             OUT      UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_CALC_CF                 OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_ALARM_ORDER             OUT      UNAPIGEN.VC3_TABLE_TYPE,    
 A_SETA_SPECS              OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_SETA_LIMITS             OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_SETA_TARGET             OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_SETB_SPECS              OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_SETB_LIMITS             OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_SETB_TARGET             OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_SETC_SPECS              OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_SETC_LIMITS             OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_SETC_TARGET             OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_IS_TEMPLATE             OUT      UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_LOG_EXCEPTIONS          OUT      UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_SC_LC                   OUT      UNAPIGEN.VC2_TABLE_TYPE,    
 A_SC_LC_VERSION           OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_INHERIT_AU              OUT      UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_PR_CLASS                OUT      UNAPIGEN.VC2_TABLE_TYPE,    
 A_LOG_HS                  OUT      UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_ALLOW_MODIFY            OUT      UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_ACTIVE                  OUT      UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_LC                      OUT      UNAPIGEN.VC2_TABLE_TYPE,    
 A_LC_VERSION              OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_SS                      OUT      UNAPIGEN.VC2_TABLE_TYPE,    
 A_NR_OF_ROWS              IN OUT   NUMBER,                     
 A_WHERE_CLAUSE            IN       VARCHAR2)                   
RETURN NUMBER IS

L_PR                   VARCHAR2(20);
L_VERSION              VARCHAR2(20);
L_VERSION_IS_CURRENT   CHAR(1);
L_EFFECTIVE_FROM       TIMESTAMP WITH TIME ZONE;
L_EFFECTIVE_TILL       TIMESTAMP WITH TIME ZONE;
L_DESCRIPTION          VARCHAR2(40);
L_DESCRIPTION2         VARCHAR2(40);
L_UNIT                 VARCHAR2(20);
L_FORMAT               VARCHAR2(40);
L_TD_INFO              NUMBER;
L_TD_INFO_UNIT         VARCHAR2(20);
L_CONFIRM_UID          CHAR(1);
L_DEF_VAL_TP           CHAR(1);
L_DEF_AU_LEVEL         VARCHAR2(4);
L_DEF_VAL              VARCHAR2(40);
L_ALLOW_ANY_MT         CHAR(1);
L_DELAY                NUMBER;
L_DELAY_UNIT           VARCHAR2(20);
L_MIN_NR_RESULTS       NUMBER(3);
L_CALC_METHOD          CHAR(1);
L_CALC_CF              VARCHAR2(20);
L_ALARM_ORDER          VARCHAR2(3);
L_SETA_SPECS           VARCHAR2(20);
L_SETA_LIMITS          VARCHAR2(20);
L_SETA_TARGET          VARCHAR2(20);
L_SETB_SPECS           VARCHAR2(20);
L_SETB_LIMITS          VARCHAR2(20);
L_SETB_TARGET          VARCHAR2(20);
L_SETC_SPECS           VARCHAR2(20);
L_SETC_LIMITS          VARCHAR2(20);
L_SETC_TARGET          VARCHAR2(20);
L_IS_TEMPLATE          CHAR(1);
L_LOG_EXCEPTIONS       CHAR(1);
L_SC_LC                VARCHAR2(2);
L_SC_LC_VERSION        VARCHAR2(20);
L_INHERIT_AU           CHAR(1);
L_PR_CLASS             VARCHAR2(2);
L_LOG_HS               CHAR(1);
L_ALLOW_MODIFY         CHAR(1);
L_ACTIVE               CHAR(1);
L_LC                   VARCHAR2(2);
L_LC_VERSION           VARCHAR2(20);
L_SS                   VARCHAR2(2);
L_PR_CURSOR            INTEGER;

BEGIN
   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'WHERE active = ''1'' ORDER BY pr, version'; 
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := 'WHERE version_is_current = ''1'' '||
                        'AND pr = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || ''' ORDER BY pr, version'; 
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_PR_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT pr, version, nvl(version_is_current,''0''), effective_from, effective_till, description, '||
                   'description2, unit, format, td_info, td_info_unit, confirm_uid, def_val_tp, ' ||
                   'def_au_level, def_val, allow_any_mt, delay, delay_unit, min_nr_results, ' ||
                   'calc_method, calc_cf, alarm_order, seta_specs, ' ||
                   'seta_limits, seta_target, setb_specs, setb_limits, ' ||
                   'setb_target, setc_specs, setc_limits, setc_target, ' ||
                   'is_template, log_exceptions, sc_lc, sc_lc_version, inherit_au, pr_class, ' ||
                   'log_hs, allow_modify, active, lc, lc_version, ss ' ||
                   'FROM dd' || UNAPIGEN.P_DD || '.uvpr ' || L_WHERE_CLAUSE;
   DBMS_SQL.PARSE(L_PR_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_PR_CURSOR, 1, L_PR, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PR_CURSOR, 2, L_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PR_CURSOR, 3, L_VERSION_IS_CURRENT, 1);
   DBMS_SQL.DEFINE_COLUMN(L_PR_CURSOR, 4, L_EFFECTIVE_FROM);
   DBMS_SQL.DEFINE_COLUMN(L_PR_CURSOR, 5, L_EFFECTIVE_TILL);
   DBMS_SQL.DEFINE_COLUMN(L_PR_CURSOR, 6, L_DESCRIPTION, 40);
   DBMS_SQL.DEFINE_COLUMN(L_PR_CURSOR, 7, L_DESCRIPTION2, 40);
   DBMS_SQL.DEFINE_COLUMN(L_PR_CURSOR, 8, L_UNIT, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PR_CURSOR, 9, L_FORMAT, 40);
   DBMS_SQL.DEFINE_COLUMN(L_PR_CURSOR, 10, L_TD_INFO);
   DBMS_SQL.DEFINE_COLUMN(L_PR_CURSOR, 11, L_TD_INFO_UNIT, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PR_CURSOR, 12, L_CONFIRM_UID, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PR_CURSOR, 13, L_DEF_VAL_TP, 1);
   DBMS_SQL.DEFINE_COLUMN(L_PR_CURSOR, 14, L_DEF_AU_LEVEL, 4);
   DBMS_SQL.DEFINE_COLUMN(L_PR_CURSOR, 15, L_DEF_VAL, 40);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PR_CURSOR, 16, L_ALLOW_ANY_MT, 1);
   DBMS_SQL.DEFINE_COLUMN(L_PR_CURSOR, 17, L_DELAY);
   DBMS_SQL.DEFINE_COLUMN(L_PR_CURSOR, 18, L_DELAY_UNIT, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PR_CURSOR, 19, L_MIN_NR_RESULTS);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PR_CURSOR, 20, L_CALC_METHOD, 1);
   DBMS_SQL.DEFINE_COLUMN(L_PR_CURSOR, 21, L_CALC_CF, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PR_CURSOR, 22, L_ALARM_ORDER, 3);
   DBMS_SQL.DEFINE_COLUMN(L_PR_CURSOR, 23, L_SETA_SPECS, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PR_CURSOR, 24, L_SETA_LIMITS, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PR_CURSOR, 25, L_SETA_TARGET, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PR_CURSOR, 26, L_SETB_SPECS, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PR_CURSOR, 27, L_SETB_LIMITS, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PR_CURSOR, 28, L_SETB_TARGET, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PR_CURSOR, 29, L_SETC_SPECS, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PR_CURSOR, 30, L_SETC_LIMITS, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PR_CURSOR, 31, L_SETC_TARGET, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PR_CURSOR, 32, L_IS_TEMPLATE, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PR_CURSOR, 33, L_LOG_EXCEPTIONS, 1);
   DBMS_SQL.DEFINE_COLUMN(L_PR_CURSOR, 34, L_SC_LC, 2);
   DBMS_SQL.DEFINE_COLUMN(L_PR_CURSOR, 35, L_SC_LC_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PR_CURSOR, 36, L_INHERIT_AU, 1);
   DBMS_SQL.DEFINE_COLUMN(L_PR_CURSOR, 37, L_PR_CLASS, 2);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PR_CURSOR, 38, L_LOG_HS, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PR_CURSOR, 39, L_ALLOW_MODIFY, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PR_CURSOR, 40, L_ACTIVE, 1);
   DBMS_SQL.DEFINE_COLUMN(L_PR_CURSOR, 41, L_LC, 2);
   DBMS_SQL.DEFINE_COLUMN(L_PR_CURSOR, 42, L_LC_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PR_CURSOR, 43, L_SS, 2);

   L_RESULT := DBMS_SQL.EXECUTE(L_PR_CURSOR);
   L_RESULT := DBMS_SQL.FETCH_ROWS(L_PR_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_PR_CURSOR, 1, L_PR);
      DBMS_SQL.COLUMN_VALUE(L_PR_CURSOR, 2, L_VERSION);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PR_CURSOR, 3, L_VERSION_IS_CURRENT);
      DBMS_SQL.COLUMN_VALUE(L_PR_CURSOR, 4, L_EFFECTIVE_FROM);
      DBMS_SQL.COLUMN_VALUE(L_PR_CURSOR, 5, L_EFFECTIVE_TILL);
      DBMS_SQL.COLUMN_VALUE(L_PR_CURSOR, 6, L_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE(L_PR_CURSOR, 7, L_DESCRIPTION2);
      DBMS_SQL.COLUMN_VALUE(L_PR_CURSOR, 8, L_UNIT);
      DBMS_SQL.COLUMN_VALUE(L_PR_CURSOR, 9, L_FORMAT);
      DBMS_SQL.COLUMN_VALUE(L_PR_CURSOR, 10, L_TD_INFO);
      DBMS_SQL.COLUMN_VALUE(L_PR_CURSOR, 11, L_TD_INFO_UNIT);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PR_CURSOR, 12, L_CONFIRM_UID);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PR_CURSOR, 13, L_DEF_VAL_TP);
      DBMS_SQL.COLUMN_VALUE(L_PR_CURSOR, 14, L_DEF_AU_LEVEL);
      DBMS_SQL.COLUMN_VALUE(L_PR_CURSOR, 15, L_DEF_VAL);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PR_CURSOR, 16, L_ALLOW_ANY_MT);
      DBMS_SQL.COLUMN_VALUE(L_PR_CURSOR, 17, L_DELAY);
      DBMS_SQL.COLUMN_VALUE(L_PR_CURSOR, 18, L_DELAY_UNIT);
      DBMS_SQL.COLUMN_VALUE(L_PR_CURSOR, 19, L_MIN_NR_RESULTS);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PR_CURSOR, 20, L_CALC_METHOD);
      DBMS_SQL.COLUMN_VALUE(L_PR_CURSOR, 21, L_CALC_CF);
      DBMS_SQL.COLUMN_VALUE(L_PR_CURSOR, 22, L_ALARM_ORDER);
      DBMS_SQL.COLUMN_VALUE(L_PR_CURSOR, 23, L_SETA_SPECS);
      DBMS_SQL.COLUMN_VALUE(L_PR_CURSOR, 24, L_SETA_LIMITS);
      DBMS_SQL.COLUMN_VALUE(L_PR_CURSOR, 25, L_SETA_TARGET);
      DBMS_SQL.COLUMN_VALUE(L_PR_CURSOR, 26, L_SETB_SPECS);
      DBMS_SQL.COLUMN_VALUE(L_PR_CURSOR, 27, L_SETB_LIMITS);
      DBMS_SQL.COLUMN_VALUE(L_PR_CURSOR, 28, L_SETB_TARGET);
      DBMS_SQL.COLUMN_VALUE(L_PR_CURSOR, 29, L_SETC_SPECS);
      DBMS_SQL.COLUMN_VALUE(L_PR_CURSOR, 30, L_SETC_LIMITS);
      DBMS_SQL.COLUMN_VALUE(L_PR_CURSOR, 31, L_SETC_TARGET);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PR_CURSOR, 32, L_IS_TEMPLATE);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PR_CURSOR, 33, L_LOG_EXCEPTIONS);
      DBMS_SQL.COLUMN_VALUE(L_PR_CURSOR, 34, L_SC_LC);
      DBMS_SQL.COLUMN_VALUE(L_PR_CURSOR, 35, L_SC_LC_VERSION);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PR_CURSOR, 36, L_INHERIT_AU);
      DBMS_SQL.COLUMN_VALUE(L_PR_CURSOR, 37, L_PR_CLASS);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PR_CURSOR, 38, L_LOG_HS);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PR_CURSOR, 39, L_ALLOW_MODIFY);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PR_CURSOR, 40, L_ACTIVE);
      DBMS_SQL.COLUMN_VALUE(L_PR_CURSOR, 41, L_LC);
      DBMS_SQL.COLUMN_VALUE(L_PR_CURSOR, 42, L_LC_VERSION);
      DBMS_SQL.COLUMN_VALUE(L_PR_CURSOR, 43, L_SS);
    
      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_PR (L_FETCHED_ROWS) := L_PR;
      A_VERSION (L_FETCHED_ROWS) := L_VERSION;
      A_VERSION_IS_CURRENT (L_FETCHED_ROWS) := L_VERSION_IS_CURRENT;
      A_EFFECTIVE_FROM (L_FETCHED_ROWS) := L_EFFECTIVE_FROM;
      A_EFFECTIVE_TILL (L_FETCHED_ROWS) := L_EFFECTIVE_TILL;
      A_DESCRIPTION (L_FETCHED_ROWS) := L_DESCRIPTION;
      A_DESCRIPTION2 (L_FETCHED_ROWS) := L_DESCRIPTION2;
      A_UNIT (L_FETCHED_ROWS) := L_UNIT;
      A_FORMAT (L_FETCHED_ROWS) := L_FORMAT;
      A_TD_INFO (L_FETCHED_ROWS) := L_TD_INFO;
      A_TD_INFO_UNIT (L_FETCHED_ROWS) := L_TD_INFO_UNIT;
      A_CONFIRM_UID (L_FETCHED_ROWS) := L_CONFIRM_UID;
      A_DEF_VAL_TP  (L_FETCHED_ROWS) := L_DEF_VAL_TP;
      A_DEF_AU_LEVEL (L_FETCHED_ROWS) := L_DEF_AU_LEVEL;
      A_DEF_VAL (L_FETCHED_ROWS) := L_DEF_VAL;
      A_ALLOW_ANY_MT (L_FETCHED_ROWS) := L_ALLOW_ANY_MT;
      A_DELAY (L_FETCHED_ROWS) := L_DELAY;
      A_DELAY_UNIT (L_FETCHED_ROWS) := L_DELAY_UNIT;
      A_MIN_NR_RESULTS (L_FETCHED_ROWS) := L_MIN_NR_RESULTS;
      A_CALC_METHOD (L_FETCHED_ROWS) := L_CALC_METHOD;
      A_CALC_CF (L_FETCHED_ROWS) := L_CALC_CF;
      A_ALARM_ORDER (L_FETCHED_ROWS) := L_ALARM_ORDER;
      A_SETA_SPECS (L_FETCHED_ROWS) := L_SETA_SPECS;
      A_SETA_LIMITS (L_FETCHED_ROWS) := L_SETA_LIMITS;
      A_SETA_TARGET (L_FETCHED_ROWS) := L_SETA_TARGET;
      A_SETB_SPECS (L_FETCHED_ROWS) := L_SETB_SPECS;
      A_SETB_LIMITS (L_FETCHED_ROWS) := L_SETB_LIMITS;
      A_SETB_TARGET (L_FETCHED_ROWS) := L_SETB_TARGET;
      A_SETC_SPECS (L_FETCHED_ROWS) := L_SETC_SPECS;
      A_SETC_LIMITS (L_FETCHED_ROWS) := L_SETC_LIMITS;
      A_SETC_TARGET (L_FETCHED_ROWS) := L_SETC_TARGET;
      A_IS_TEMPLATE(L_FETCHED_ROWS) := L_IS_TEMPLATE;
      A_LOG_EXCEPTIONS (L_FETCHED_ROWS) := L_LOG_EXCEPTIONS;
      A_SC_LC (L_FETCHED_ROWS) := L_SC_LC;
      A_SC_LC_VERSION (L_FETCHED_ROWS) := L_SC_LC_VERSION;
      A_INHERIT_AU (L_FETCHED_ROWS) := L_INHERIT_AU;
      A_PR_CLASS(L_FETCHED_ROWS) := L_PR_CLASS;
      A_LOG_HS (L_FETCHED_ROWS) := L_LOG_HS;
      A_ALLOW_MODIFY (L_FETCHED_ROWS) := L_ALLOW_MODIFY;
      A_ACTIVE (L_FETCHED_ROWS) := L_ACTIVE;
      A_LC (L_FETCHED_ROWS) := L_LC;
      A_LC_VERSION (L_FETCHED_ROWS) := L_LC_VERSION;
      A_SS (L_FETCHED_ROWS) := L_SS;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_PR_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_PR_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      RETURN(UNAPIGEN.DBERR_NORECORDS);
   END IF;

   A_NR_OF_ROWS := L_FETCHED_ROWS;
   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   L_SQLERRM := SQLERRM;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
           'GetParameter', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   IF DBMS_SQL.IS_OPEN (L_PR_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_PR_CURSOR);
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);

END GETPARAMETER;

FUNCTION GETPRMETHOD
(A_PR                  OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_VERSION             OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_MT                  OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_MT_VERSION          OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_DESCRIPTION         OUT      UNAPIGEN.VC40_TABLE_TYPE,   
 A_NR_MEASUR           OUT      UNAPIGEN.NUM_TABLE_TYPE,    
 A_UNIT                OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_FORMAT              OUT      UNAPIGEN.VC40_TABLE_TYPE,   
 A_ALLOW_ADD           OUT      UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_IGNORE_OTHER        OUT      UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_ACCURACY            OUT      UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_FREQ_TP             OUT      UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_FREQ_VAL            OUT      UNAPIGEN.NUM_TABLE_TYPE,    
 A_FREQ_UNIT           OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_INVERT_FREQ         OUT      UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_ST_BASED_FREQ       OUT      UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_LAST_SCHED          OUT      UNAPIGEN.DATE_TABLE_TYPE,   
 A_LAST_CNT            OUT      UNAPIGEN.NUM_TABLE_TYPE,    
 A_LAST_VAL            OUT      UNAPIGEN.VC40_TABLE_TYPE,   
 A_INHERIT_AU          OUT      UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_NR_OF_ROWS          IN OUT   NUMBER,                     
 A_WHERE_CLAUSE        IN       VARCHAR2)                   
RETURN NUMBER IS

L_PR              VARCHAR2(20);
L_VERSION         VARCHAR2(20);
L_DESCRIPTION     VARCHAR2(40);
L_MT              VARCHAR2(20);
L_MT_VERSION      VARCHAR2(20);
L_NR_MEASUR       NUMBER(3);
L_UNIT            VARCHAR2(20);
L_FORMAT          VARCHAR2(20);
L_ALLOW_ADD       CHAR(1);
L_IGNORE_OTHER    CHAR(1);
L_ACCURACY        NUMBER;
L_FREQ_TP         CHAR(1);
L_FREQ_VAL        NUMBER;
L_FREQ_UNIT       VARCHAR2(20);
L_INVERT_FREQ     CHAR(1);
L_ST_BASED_FREQ   CHAR(1);
L_LAST_SCHED      TIMESTAMP WITH TIME ZONE;
L_LAST_CNT        UTPRMT.LAST_CNT%TYPE;
L_LAST_VAL        VARCHAR2(40);
L_INHERIT_AU      CHAR(1);
L_PRMT_CURSOR     INTEGER;
L_MT_FOUND        BOOLEAN;

BEGIN

   IF NVL(A_NR_OF_ROWS, 0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'ORDER BY pr, version, seq'; 
   ELSIF
      UPPER(SUBSTR(A_WHERE_CLAUSE, 1, 6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := ', dd'||UNAPIGEN.P_DD||'.uvpr pr WHERE pr.version_is_current = ''1'' '||
                        'AND prmt.version = pr.version '||
                        'AND prmt.pr = pr.pr '||
                        'AND prmt.pr = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                        ''' ORDER BY prmt.seq'; 
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_PRMT_CURSOR := DBMS_SQL.OPEN_CURSOR;

   L_SQL_STRING := 'SELECT prmt.pr, prmt.version, prmt.mt, prmt.mt_version, prmt.nr_measur, '||
                   'prmt.unit, prmt.format, prmt.allow_add, prmt.ignore_other, ' ||
                   'prmt.accuracy, prmt.freq_tp, prmt.freq_val, prmt.freq_unit, prmt.invert_freq, ' ||
                   'prmt.st_based_freq, prmt.last_sched, prmt.last_cnt, prmt.last_val, prmt.inherit_au ' ||
                   'FROM dd' || UNAPIGEN.P_DD || '.uvprmt prmt ' || L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_PRMT_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_PRMT_CURSOR, 1, L_PR, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PRMT_CURSOR, 2, L_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PRMT_CURSOR, 3, L_MT, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PRMT_CURSOR, 4, L_MT_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PRMT_CURSOR, 5, L_NR_MEASUR);
   DBMS_SQL.DEFINE_COLUMN(L_PRMT_CURSOR, 6, L_UNIT, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PRMT_CURSOR, 7, L_FORMAT, 40);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PRMT_CURSOR, 8, L_ALLOW_ADD, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PRMT_CURSOR, 9, L_IGNORE_OTHER, 1);
   DBMS_SQL.DEFINE_COLUMN(L_PRMT_CURSOR, 10, L_ACCURACY);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PRMT_CURSOR, 11, L_FREQ_TP, 1);
   DBMS_SQL.DEFINE_COLUMN(L_PRMT_CURSOR, 12,L_FREQ_VAL);
   DBMS_SQL.DEFINE_COLUMN(L_PRMT_CURSOR, 13,L_FREQ_UNIT, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PRMT_CURSOR, 14,L_INVERT_FREQ, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PRMT_CURSOR, 15,L_ST_BASED_FREQ, 1);
   DBMS_SQL.DEFINE_COLUMN(L_PRMT_CURSOR, 16,L_LAST_SCHED);
   DBMS_SQL.DEFINE_COLUMN(L_PRMT_CURSOR, 17,L_LAST_CNT);
   DBMS_SQL.DEFINE_COLUMN(L_PRMT_CURSOR, 18,L_LAST_VAL, 40);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PRMT_CURSOR, 19, L_INHERIT_AU, 1);

   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_PRMT_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_PRMT_CURSOR, 1, L_PR);
      DBMS_SQL.COLUMN_VALUE(L_PRMT_CURSOR, 2, L_VERSION);
      DBMS_SQL.COLUMN_VALUE(L_PRMT_CURSOR, 3, L_MT);
      DBMS_SQL.COLUMN_VALUE(L_PRMT_CURSOR, 4, L_MT_VERSION);
      DBMS_SQL.COLUMN_VALUE(L_PRMT_CURSOR, 5, L_NR_MEASUR);
      DBMS_SQL.COLUMN_VALUE(L_PRMT_CURSOR, 6, L_UNIT);
      DBMS_SQL.COLUMN_VALUE(L_PRMT_CURSOR, 7, L_FORMAT);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PRMT_CURSOR, 8, L_ALLOW_ADD);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PRMT_CURSOR, 9, L_IGNORE_OTHER);
      DBMS_SQL.COLUMN_VALUE(L_PRMT_CURSOR, 10, L_ACCURACY);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PRMT_CURSOR, 11, L_FREQ_TP);
      DBMS_SQL.COLUMN_VALUE(L_PRMT_CURSOR, 12, L_FREQ_VAL);
      DBMS_SQL.COLUMN_VALUE(L_PRMT_CURSOR, 13, L_FREQ_UNIT);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PRMT_CURSOR, 14, L_INVERT_FREQ);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PRMT_CURSOR, 15, L_ST_BASED_FREQ);
      DBMS_SQL.COLUMN_VALUE(L_PRMT_CURSOR, 16, L_LAST_SCHED);
      DBMS_SQL.COLUMN_VALUE(L_PRMT_CURSOR, 17, L_LAST_CNT);
      DBMS_SQL.COLUMN_VALUE(L_PRMT_CURSOR, 18, L_LAST_VAL);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PRMT_CURSOR, 19, L_INHERIT_AU);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_PR (L_FETCHED_ROWS) := L_PR;
      A_VERSION (L_FETCHED_ROWS) := L_VERSION;
      A_MT (L_FETCHED_ROWS) := L_MT;
      A_MT_VERSION (L_FETCHED_ROWS) := L_MT_VERSION;
      A_NR_MEASUR (L_FETCHED_ROWS) := L_NR_MEASUR;
      A_UNIT (L_FETCHED_ROWS) := L_UNIT;
      A_FORMAT (L_FETCHED_ROWS) := L_FORMAT;
      A_ALLOW_ADD (L_FETCHED_ROWS) := L_ALLOW_ADD;
      A_IGNORE_OTHER (L_FETCHED_ROWS) := L_IGNORE_OTHER;
      A_ACCURACY (L_FETCHED_ROWS) := L_ACCURACY;
      A_FREQ_TP (L_FETCHED_ROWS) := L_FREQ_TP;
      A_FREQ_VAL (L_FETCHED_ROWS) := L_FREQ_VAL;
      A_FREQ_UNIT (L_FETCHED_ROWS) := L_FREQ_UNIT;
      A_INVERT_FREQ (L_FETCHED_ROWS) := L_INVERT_FREQ;
      A_ST_BASED_FREQ (L_FETCHED_ROWS) := L_ST_BASED_FREQ;
      A_LAST_SCHED (L_FETCHED_ROWS) := TO_CHAR(L_LAST_SCHED);
      A_LAST_CNT (L_FETCHED_ROWS) := L_LAST_CNT;
      A_LAST_VAL (L_FETCHED_ROWS) := L_LAST_VAL;
      A_INHERIT_AU (L_FETCHED_ROWS) := L_INHERIT_AU;

      L_SQL_STRING:=   'SELECT description '
                     ||'FROM dd'||UNAPIGEN.P_DD||'.uvmt '
                     ||'WHERE version = NVL(UNAPIGEN.UseVersion(''mt'',:l_mt,:l_mt_version), '
                     ||                    'UNAPIGEN.UseVersion(''mt'',:l_mt,''*'')) '
                     ||'AND mt = :l_mt';
      BEGIN
         EXECUTE IMMEDIATE L_SQL_STRING 
         INTO L_DESCRIPTION
         USING L_MT, L_MT_VERSION, L_MT, L_MT;
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            
            NULL;
      END;

      L_MT_FOUND := SQL%FOUND;
      IF NOT L_MT_FOUND THEN
         L_DESCRIPTION := L_MT;
      END IF;

      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_PRMT_CURSOR);
      END IF;

   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_PRMT_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      RETURN(UNAPIGEN.DBERR_NORECORDS);
   END IF;

   A_NR_OF_ROWS := L_FETCHED_ROWS;
   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   L_SQLERRM := SQLERRM;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
           'GetPrMethod', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   IF DBMS_SQL.IS_OPEN (L_PRMT_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_PRMT_CURSOR);
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETPRMETHOD;

FUNCTION DELETEPARAMETER
(A_PR                  IN       VARCHAR2,                   
 A_VERSION             IN       VARCHAR2,                   
 A_MODIFY_REASON       IN       VARCHAR2)                   
RETURN NUMBER IS

L_PR_CURSOR    INTEGER;
L_ALLOW_MODIFY CHAR(1);
L_ACTIVE       CHAR(1);
L_LOG_HS       CHAR(1);
L_LC           VARCHAR(2);
L_LC_VERSION   VARCHAR(20);
L_SS           VARCHAR2(2);

CURSOR L_PPPR_CURSOR(C_PR VARCHAR2, C_VERSION VARCHAR2)  IS
SELECT UTPPPR.PP, UTPPPR.VERSION,
       UTPP.PP_KEY1, UTPP.PP_KEY2, UTPP.PP_KEY3, UTPP.PP_KEY4, UTPP.PP_KEY5,
       UTPP.LC, UTPP.LC_VERSION, UTPP.SS, UTPP.LOG_HS       
FROM   UTPP, UTPPPR
WHERE  UTPPPR.PR         = C_PR
  AND  UNAPIGEN.USEVERSION('pr',UTPPPR.PR,UTPPPR.PR_VERSION) = C_VERSION
  AND  UTPP.PP           = UTPPPR.PP
  AND  UTPP.VERSION      = UTPPPR.VERSION
  AND  UTPP.PP_KEY1      = UTPPPR.PP_KEY1
  AND  UTPP.PP_KEY2      = UTPPPR.PP_KEY2
  AND  UTPP.PP_KEY3      = UTPPPR.PP_KEY3
  AND  UTPP.PP_KEY4      = UTPPPR.PP_KEY4
  AND  UTPP.PP_KEY5      = UTPPPR.PP_KEY5;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF  NVL(A_PR, ' ')= ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE  STPERROR ;
   END IF;

   IF  NVL(A_VERSION, ' ')= ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE  STPERROR ;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('pr', A_PR, A_VERSION, L_LC, L_LC_VERSION, 
                                           L_SS, L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE ;
      RAISE  STPERROR ;
   END IF ;

   
   IF UNAPIGEN.ISSYSTEM21CFR11COMPLIANT = UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTALLOWEDIN21CFR11;
      RAISE STPERROR;
   END IF;

   DELETE FROM UTPRAU
   WHERE PR = A_PR
     AND VERSION = A_VERSION;

   DELETE FROM UTPRHS
   WHERE PR = A_PR
     AND VERSION = A_VERSION;

   DELETE FROM UTPRMT
   WHERE PR = A_PR
     AND VERSION = A_VERSION;

   DELETE FROM UTPRMTAU
   WHERE PR = A_PR
     AND VERSION = A_VERSION;

   DELETE FROM UTPRCYST
   WHERE PR = A_PR
     AND VERSION = A_VERSION;

   BEGIN
      L_EVENT_TP := 'UsedObjectDeleted';
      L_EV_SEQ_NR := -1;
      FOR PP_REC IN L_PPPR_CURSOR(A_PR, A_VERSION) LOOP
         DELETE FROM UTPPPRAU
         WHERE PR = A_PR 
           AND UNAPIGEN.USEVERSION('pr',PR,PR_VERSION) = A_VERSION
           AND PP = PP_REC.PP
           AND VERSION = PP_REC.VERSION
           AND PP_KEY1 = PP_REC.PP_KEY1
           AND PP_KEY2 = PP_REC.PP_KEY2
           AND PP_KEY3 = PP_REC.PP_KEY3
           AND PP_KEY4 = PP_REC.PP_KEY4
           AND PP_KEY5 = PP_REC.PP_KEY5;

         DELETE FROM UTPPSPA
         WHERE PR = A_PR 
           AND UNAPIGEN.USEVERSION('pr',PR,PR_VERSION) = A_VERSION
           AND PP = PP_REC.PP
           AND VERSION = PP_REC.VERSION
           AND PP_KEY1 = PP_REC.PP_KEY1
           AND PP_KEY2 = PP_REC.PP_KEY2
           AND PP_KEY3 = PP_REC.PP_KEY3
           AND PP_KEY4 = PP_REC.PP_KEY4
           AND PP_KEY5 = PP_REC.PP_KEY5;

         DELETE FROM UTPPSPB
         WHERE PR = A_PR 
           AND UNAPIGEN.USEVERSION('pr',PR,PR_VERSION) = A_VERSION
           AND PP = PP_REC.PP
           AND VERSION = PP_REC.VERSION
           AND PP_KEY1 = PP_REC.PP_KEY1
           AND PP_KEY2 = PP_REC.PP_KEY2
           AND PP_KEY3 = PP_REC.PP_KEY3
           AND PP_KEY4 = PP_REC.PP_KEY4
           AND PP_KEY5 = PP_REC.PP_KEY5;

         DELETE FROM UTPPSPC
         WHERE PR = A_PR 
           AND UNAPIGEN.USEVERSION('pr',PR,PR_VERSION) = A_VERSION
           AND PP = PP_REC.PP
           AND VERSION = PP_REC.VERSION
           AND PP_KEY1 = PP_REC.PP_KEY1
           AND PP_KEY2 = PP_REC.PP_KEY2
           AND PP_KEY3 = PP_REC.PP_KEY3
           AND PP_KEY4 = PP_REC.PP_KEY4
           AND PP_KEY5 = PP_REC.PP_KEY5;

         DELETE FROM UTPPPR
         WHERE PR = A_PR 
           AND UNAPIGEN.USEVERSION('pr',PR,PR_VERSION) = A_VERSION
           AND PP = PP_REC.PP
           AND VERSION = PP_REC.VERSION
           AND PP_KEY1 = PP_REC.PP_KEY1
           AND PP_KEY2 = PP_REC.PP_KEY2
           AND PP_KEY3 = PP_REC.PP_KEY3
           AND PP_KEY4 = PP_REC.PP_KEY4
           AND PP_KEY5 = PP_REC.PP_KEY5;

         L_EV_DETAILS := 'version='  || PP_REC.VERSION ||
                         '#pp_key1=' || PP_REC.PP_KEY1 ||
                         '#pp_key2=' || PP_REC.PP_KEY2 ||
                         '#pp_key3=' || PP_REC.PP_KEY3 ||
                         '#pp_key4=' || PP_REC.PP_KEY4 ||
                         '#pp_key5=' || PP_REC.PP_KEY5;
         L_RET_CODE := UNAPIEV.INSERTEVENT('DeleteParameter', UNAPIGEN.P_EVMGR_NAME, 'pp',
                                           PP_REC.PP, PP_REC.LC, PP_REC.LC_VERSION, PP_REC.SS,
                                           L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);

         IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
            UNAPIGEN.P_TXN_ERROR := L_RET_CODE ;
            RAISE  STPERROR ;
         END IF;

         IF PP_REC.LOG_HS = '1' THEN
            INSERT INTO UTPPHS(PP, VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, WHO, WHO_DESCRIPTION, WHAT, 
                               WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
            VALUES  (PP_REC.PP, PP_REC.VERSION, PP_REC.PP_KEY1, PP_REC.PP_KEY2, PP_REC.PP_KEY3, PP_REC.PP_KEY4, 
                     PP_REC.PP_KEY5, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 
                     L_EVENT_TP||' '||A_PR||' '||A_VERSION,
                     'parameter "'||A_PR||'" is deleted and removed from parameter profile <<'||PP_REC.PP||'>>', 
                     CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
         END IF;
      END LOOP;
   END;

   DELETE FROM UTSTMTFREQ
   WHERE PR = A_PR 
     AND UNAPIGEN.USEVERSION('pr',PR,PR_VERSION) = A_VERSION;

   DELETE FROM UTEVTIMED
   WHERE (OBJECT_TP='pr' AND OBJECT_ID=A_PR AND INSTR(EV_DETAILS,'version='||A_VERSION)<>0);

   DELETE FROM UTEVRULESDELAYED
   WHERE (OBJECT_TP='pr' AND OBJECT_ID=A_PR AND INSTR(EV_DETAILS,'version='||A_VERSION)<>0);

   DELETE FROM UTPR
   WHERE PR = A_PR
     AND VERSION = A_VERSION;

   L_EVENT_TP := 'ObjectDeleted';
   L_EV_SEQ_NR := -1;
   L_RET_CODE := UNAPIEV.INSERTEVENT('DeleteParameter', UNAPIGEN.P_EVMGR_NAME, 'pr',
                                     A_PR, L_LC, L_LC_VERSION, L_SS, L_EVENT_TP, 
                                     'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE ;
      RAISE  STPERROR ;
   END IF ;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('DeleteParameter',SQLERRM);
   END IF ;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'DeleteParameter'));
END DELETEPARAMETER;

FUNCTION SAVEPARAMETER
(A_PR                      IN       VARCHAR2,                   
 A_VERSION                 IN       VARCHAR2,                   
 A_VERSION_IS_CURRENT      IN       CHAR,                       
 A_EFFECTIVE_FROM          IN       DATE,                       
 A_EFFECTIVE_TILL          IN       DATE,                       
 A_DESCRIPTION             IN       VARCHAR2,                   
 A_DESCRIPTION2            IN       VARCHAR2,                   
 A_UNIT                    IN       VARCHAR2,                   
 A_FORMAT                  IN       VARCHAR2,                   
 A_TD_INFO                 IN       NUMBER,                     
 A_TD_INFO_UNIT            IN       VARCHAR2,                   
 A_CONFIRM_UID             IN       CHAR,                       
 A_DEF_VAL_TP              IN       CHAR,                       
 A_DEF_AU_LEVEL            IN       VARCHAR2,                   
 A_DEF_VAL                 IN       VARCHAR2,                   
 A_ALLOW_ANY_MT            IN       CHAR,                       
 A_DELAY                   IN       NUMBER,                     
 A_DELAY_UNIT              IN       VARCHAR2,                   
 A_MIN_NR_RESULTS          IN       NUMBER,                     
 A_CALC_METHOD             IN       CHAR,                       
 A_CALC_CF                 IN       VARCHAR2,                   
 A_ALARM_ORDER             IN       VARCHAR2,                   
 A_SETA_SPECS              IN       VARCHAR2,                   
 A_SETA_LIMITS             IN       VARCHAR2,                   
 A_SETA_TARGET             IN       VARCHAR2,                   
 A_SETB_SPECS              IN       VARCHAR2,                   
 A_SETB_LIMITS             IN       VARCHAR2,                   
 A_SETB_TARGET             IN       VARCHAR2,                   
 A_SETC_SPECS              IN       VARCHAR2,                   
 A_SETC_LIMITS             IN       VARCHAR2,                   
 A_SETC_TARGET             IN       VARCHAR2,                   
 A_IS_TEMPLATE             IN       CHAR,                       
 A_LOG_EXCEPTIONS          IN       CHAR,                       
 A_SC_LC                   IN       VARCHAR2,                   
 A_SC_LC_VERSION           IN       VARCHAR2,                   
 A_INHERIT_AU              IN       CHAR,                       
 A_PR_CLASS                IN       VARCHAR2,                   
 A_LOG_HS                  IN       CHAR,                       
 A_LC                      IN       VARCHAR2,                   
 A_LC_VERSION              IN       VARCHAR2,                   
 A_MODIFY_REASON           IN       VARCHAR2)                   
RETURN NUMBER IS

L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);
L_LOG_HS       CHAR(1);
L_ALLOW_MODIFY CHAR(1);
L_ACTIVE       CHAR(1);
L_INSERT       BOOLEAN;
L_DEF_AU_LEVEL VARCHAR2(4);
L_CALC_CF      VARCHAR2(20);

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_PR, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE  STPERROR ;
   END IF;

   IF NVL(A_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE  STPERROR ;
   END IF;

  IF NVL(A_TD_INFO, 0) <> 0 AND
     NVL(A_TD_INFO_UNIT, ' ') NOT IN ('SC', 'MI','HH','DD','WW','MM','YY') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_TDDELAY;
      RAISE  STPERROR ;
   END IF;

   IF NVL(A_CONFIRM_UID, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_CONFIRMUSERID;
      RAISE  STPERROR ;
   END IF;

   IF NVL(A_DEF_VAL_TP, ' ') NOT IN ('F','A') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_DEFVALUETP;
      RAISE  STPERROR ;
   END IF;

   IF NVL(A_DEF_VAL_TP, ' ') = 'A' AND
      NVL(A_DEF_AU_LEVEL, ' ') NOT IN
      ('rt', 'rtst', 'st', 'stpp', 'pp', 'pppr', 'pr', 'sc', 'scpg', 'scpa', 'rq') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_AULEVEL;
      RAISE STPERROR;
   END IF;

   IF NVL(A_ALLOW_ANY_MT, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_ALLOWANYMT;
      RAISE  STPERROR ;
   END IF;

   IF NVL(A_DELAY_UNIT, ' ') NOT IN ('MI','HH','DD','WW','MM','YY') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_DELAYUNIT;
      RAISE  STPERROR ;
   END IF;

   IF NVL(A_CALC_METHOD, ' ') NOT IN ('F','L','H','A','C','N') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_CALCMETHOD;
      RAISE  STPERROR ;
   END IF;

   IF NVL(A_CALC_METHOD, ' ') <> 'C' THEN
      L_CALC_CF := NULL;
   ELSE
      L_CALC_CF := A_CALC_CF;
   END IF;

   IF NVL(A_IS_TEMPLATE, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_TEMPLATE;
      RAISE STPERROR ;
   END IF;

   IF NVL(A_LOG_EXCEPTIONS, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_LOGEXCEPTIONS;
      RAISE  STPERROR ;
   END IF;

   IF NVL(A_INHERIT_AU, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INHERITAU;
      RAISE  STPERROR ;
   END IF;

   IF NVL(A_LOG_HS, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_LOGHS;
      RAISE  STPERROR ;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('pr', A_PR, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE = UNAPIGEN.DBERR_NOOBJECT THEN
      L_INSERT := TRUE;
   ELSIF L_RET_CODE = UNAPIGEN.DBERR_SUCCESS THEN
      L_INSERT := FALSE;
   ELSE
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   IF A_DEF_VAL_TP = 'F' THEN
      L_DEF_AU_LEVEL := NULL;
   ELSE
      L_DEF_AU_LEVEL := A_DEF_AU_LEVEL;
   END IF;

   IF L_INSERT THEN              
      IF NVL(A_LC, ' ') <> ' ' THEN
         L_LC := A_LC;
      END IF;
      IF NVL(A_LC_VERSION, ' ') <> ' ' THEN
         L_LC_VERSION := A_LC_VERSION;
      END IF;
      INSERT INTO UTPR (PR, VERSION, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ, DESCRIPTION, DESCRIPTION2, UNIT, 
                        FORMAT, TD_INFO, TD_INFO_UNIT, CONFIRM_UID, DEF_VAL_TP, 
                        DEF_AU_LEVEL, DEF_VAL, ALLOW_ANY_MT, DELAY, DELAY_UNIT, 
                        MIN_NR_RESULTS, CALC_METHOD, CALC_CF, ALARM_ORDER, SETA_SPECS, 
                        SETA_LIMITS, SETA_TARGET, SETB_SPECS, SETB_LIMITS, SETB_TARGET, 
                        SETC_SPECS, SETC_LIMITS, SETC_TARGET, IS_TEMPLATE, LOG_EXCEPTIONS,
                        SC_LC, SC_LC_VERSION, INHERIT_AU, PR_CLASS, LOG_HS, LC, LC_VERSION,
                        ALLOW_MODIFY, ACTIVE)
      VALUES (A_PR, A_VERSION, A_EFFECTIVE_FROM, A_EFFECTIVE_FROM, A_DESCRIPTION, A_DESCRIPTION2, A_UNIT, 
              A_FORMAT, A_TD_INFO, A_TD_INFO_UNIT, A_CONFIRM_UID, A_DEF_VAL_TP, 
              L_DEF_AU_LEVEL, A_DEF_VAL, A_ALLOW_ANY_MT, A_DELAY, A_DELAY_UNIT, 
              A_MIN_NR_RESULTS, A_CALC_METHOD, L_CALC_CF, A_ALARM_ORDER, A_SETA_SPECS, 
              A_SETA_LIMITS, A_SETA_TARGET, A_SETB_SPECS, A_SETB_LIMITS, A_SETB_TARGET, 
              A_SETC_SPECS, A_SETC_LIMITS, A_SETC_TARGET, A_IS_TEMPLATE, A_LOG_EXCEPTIONS,
              A_SC_LC, A_SC_LC_VERSION, A_INHERIT_AU, A_PR_CLASS, A_LOG_HS, L_LC, 
              L_LC_VERSION, '#', '0');
      L_EVENT_TP := 'ObjectCreated';
   ELSE                                   
      UPDATE UTPR
      SET EFFECTIVE_FROM       = DECODE(EFFECTIVE_TILL, NULL, A_EFFECTIVE_FROM, EFFECTIVE_FROM),
          EFFECTIVE_FROM_TZ    = DECODE(EFFECTIVE_TILL, NULL,  DECODE(A_EFFECTIVE_FROM, EFFECTIVE_FROM_TZ, EFFECTIVE_FROM_TZ, A_EFFECTIVE_FROM), EFFECTIVE_FROM_TZ),
          DESCRIPTION       = A_DESCRIPTION,
          DESCRIPTION2      = A_DESCRIPTION2,
          UNIT              = A_UNIT,
          FORMAT            = A_FORMAT,
          TD_INFO           = A_TD_INFO,
          TD_INFO_UNIT      = A_TD_INFO_UNIT,
          CONFIRM_UID       = A_CONFIRM_UID,
          DEF_VAL_TP        = A_DEF_VAL_TP,
          DEF_AU_LEVEL      = L_DEF_AU_LEVEL,
          DEF_VAL           = A_DEF_VAL,
          ALLOW_ANY_MT      = A_ALLOW_ANY_MT,
          DELAY             = A_DELAY,
          DELAY_UNIT        = A_DELAY_UNIT,
          MIN_NR_RESULTS    = A_MIN_NR_RESULTS,
          CALC_METHOD       = A_CALC_METHOD,
          CALC_CF           = L_CALC_CF,
          ALARM_ORDER       = A_ALARM_ORDER,
          SETA_SPECS        = A_SETA_SPECS,
          SETA_LIMITS       = A_SETA_LIMITS,
          SETA_TARGET       = A_SETA_TARGET,
          SETB_SPECS        = A_SETB_SPECS,
          SETB_LIMITS       = A_SETB_LIMITS,
          SETB_TARGET       = A_SETB_TARGET,
          SETC_SPECS        = A_SETC_SPECS,
          SETC_LIMITS       = A_SETC_LIMITS,
          SETC_TARGET       = A_SETC_TARGET,
          IS_TEMPLATE       = A_IS_TEMPLATE,
          LOG_EXCEPTIONS    = A_LOG_EXCEPTIONS,
          SC_LC             = A_SC_LC,
          SC_LC_VERSION     = A_SC_LC_VERSION,
          INHERIT_AU        = A_INHERIT_AU,
          PR_CLASS          = A_PR_CLASS,
          LOG_HS            = A_LOG_HS,
          ALLOW_MODIFY      = '#'
      WHERE PR = A_PR
        AND VERSION = A_VERSION;
      L_EVENT_TP := 'ObjectUpdated';
   END IF;

   L_EV_SEQ_NR := -1;
   L_RET_CODE := UNAPIEV.INSERTEVENT('SaveParameter',UNAPIGEN.P_EVMGR_NAME, 'pr', A_PR, 
                                     L_LC, L_LC_VERSION, L_SS, L_EVENT_TP, 'version='||A_VERSION,
                                     L_EV_SEQ_NR);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE  STPERROR ;
   END IF;

   IF NVL(L_LOG_HS, ' ') <> A_LOG_HS THEN
      IF A_LOG_HS = '1' THEN
         INSERT INTO UTPRHS (PR, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_PR, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 'History switched ON', 
                 'Audit trail is turned on.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      ELSE
         INSERT INTO UTPRHS (PR, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_PR, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 'History switched OFF', 
                 'Audit trail is turned off.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   END IF;

   IF NVL(L_LOG_HS, ' ') = '1' THEN
      IF L_EVENT_TP = 'ObjectCreated'  THEN
         INSERT INTO UTPRHS (PR, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_PR, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'parameter "'||A_PR||'" is created.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                 L_EV_SEQ_NR);
      ELSE
         INSERT INTO UTPRHS (PR, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_PR, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'parameter "'||A_PR||'" is updated.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                 L_EV_SEQ_NR);
      END IF;
   ELSE
      
      
      IF L_EVENT_TP = 'ObjectCreated'  THEN
         INSERT INTO UTPRHS (PR, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_PR, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'parameter "'||A_PR||'" is created.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                 L_EV_SEQ_NR);
      END IF;   
   END IF;   

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveParameter',SQLERRM);
   END IF ;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveParameter'));
END SAVEPARAMETER;

FUNCTION SAVEPRMETHOD
(A_PR                  IN       VARCHAR2,                   
 A_VERSION             IN       VARCHAR2,                   
 A_MT                  IN       UNAPIGEN.VC20_TABLE_TYPE,   
 A_MT_VERSION          IN       UNAPIGEN.VC20_TABLE_TYPE,   
 A_NR_MEASUR           IN       UNAPIGEN.NUM_TABLE_TYPE,    
 A_UNIT                IN       UNAPIGEN.VC20_TABLE_TYPE,   
 A_FORMAT              IN       UNAPIGEN.VC40_TABLE_TYPE,   
 A_ALLOW_ADD           IN       UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_IGNORE_OTHER        IN       UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_ACCURACY            IN       UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_FREQ_TP             IN       UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_FREQ_VAL            IN       UNAPIGEN.NUM_TABLE_TYPE,    
 A_FREQ_UNIT           IN       UNAPIGEN.VC20_TABLE_TYPE,   
 A_INVERT_FREQ         IN       UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_ST_BASED_FREQ       IN       UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_LAST_SCHED          IN       UNAPIGEN.DATE_TABLE_TYPE,   
 A_LAST_CNT            IN       UNAPIGEN.NUM_TABLE_TYPE,    
 A_LAST_VAL            IN       UNAPIGEN.VC40_TABLE_TYPE,   
 A_INHERIT_AU          IN       UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_NR_OF_ROWS          IN       NUMBER,                     
 A_MODIFY_REASON       IN       VARCHAR2)                   
RETURN NUMBER IS

L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);
L_LOG_HS       CHAR(1);
L_ALLOW_MODIFY CHAR(1);
L_ACTIVE       CHAR(1);
L_INSERT       BOOLEAN;
L_SEQ_NO       NUMBER;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_PR, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE  STPERROR ;
   END IF;

   IF NVL(A_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE  STPERROR ;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('pr', A_PR, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE  STPERROR ;
   END IF;

   UPDATE UTPR
   SET ALLOW_MODIFY = '#'
   WHERE PR = A_PR
     AND VERSION = A_VERSION;
   
   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE  STPERROR ;
   END IF;

   DELETE UTPRMT
   WHERE PR = A_PR
     AND VERSION = A_VERSION;

   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS
   LOOP
      IF NVL(A_MT(L_SEQ_NO), ' ') = ' ' THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
         RAISE  STPERROR ;
      END IF;

      IF NVL(A_FREQ_TP(L_SEQ_NO), ' ') NOT IN ('A','S','T','C','N') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_FREQTP;
         RAISE  STPERROR ;
      END IF;

      IF A_FREQ_TP(L_SEQ_NO) IN ('C','T','S') THEN
         IF A_FREQ_UNIT(L_SEQ_NO) IS NULL THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_FREQUNIT;
            RAISE STPERROR;         
         ELSIF A_FREQ_TP(L_SEQ_NO) = 'T' AND
            A_FREQ_UNIT(L_SEQ_NO) NOT IN ('MI','HH','DD','WW','MM','YY','MF','YF') THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_FREQUNIT;
            RAISE STPERROR;         
         END IF;
      END IF;

      IF NVL(A_ALLOW_ADD(L_SEQ_NO), '0') NOT IN ('1','0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_ALLOWADD;
         RAISE  STPERROR ;
      END IF;

      IF NVL(A_IGNORE_OTHER(L_SEQ_NO), ' ') NOT IN ('1','0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_IGNOREOTHER;
         RAISE  STPERROR ;
      END IF;

      IF NVL(A_INVERT_FREQ(L_SEQ_NO), ' ') NOT IN ('1','0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INVERTFREQ;
         RAISE  STPERROR ;
      END IF;

      IF NVL(A_ST_BASED_FREQ(L_SEQ_NO), ' ') NOT IN ('1','0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_STFREQ;
         RAISE  STPERROR ;
      END IF;

      IF NVL(A_INHERIT_AU(L_SEQ_NO), ' ') NOT IN ('2', '1','0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INHERITAU;
         RAISE  STPERROR ;
      END IF;

      INSERT INTO UTPRMT (PR, VERSION, MT, MT_VERSION, SEQ, NR_MEASUR, UNIT, FORMAT, ALLOW_ADD, 
                          IGNORE_OTHER, ACCURACY, FREQ_TP, FREQ_VAL,
                          FREQ_UNIT, INVERT_FREQ, ST_BASED_FREQ, LAST_SCHED, LAST_SCHED_TZ,
                          LAST_CNT, LAST_VAL, INHERIT_AU)
      VALUES (A_PR, A_VERSION, A_MT(L_SEQ_NO), A_MT_VERSION(L_SEQ_NO), L_SEQ_NO, 
               A_NR_MEASUR(L_SEQ_NO), A_UNIT(L_SEQ_NO), A_FORMAT(L_SEQ_NO), A_ALLOW_ADD(L_SEQ_NO), 
               A_IGNORE_OTHER(L_SEQ_NO), A_ACCURACY(L_SEQ_NO),
               A_FREQ_TP(L_SEQ_NO), A_FREQ_VAL(L_SEQ_NO),
               A_FREQ_UNIT(L_SEQ_NO),
               A_INVERT_FREQ(L_SEQ_NO), A_ST_BASED_FREQ(L_SEQ_NO),
               TO_DATE(A_LAST_SCHED(L_SEQ_NO)), TO_DATE(A_LAST_SCHED(L_SEQ_NO)), A_LAST_CNT(L_SEQ_NO),
               A_LAST_VAL(L_SEQ_NO), A_INHERIT_AU(L_SEQ_NO));

      UPDATE UTSTMTFREQ
      SET FREQ_TP=A_FREQ_TP(L_SEQ_NO),
          FREQ_UNIT=A_FREQ_UNIT(L_SEQ_NO),
          FREQ_VAL=A_FREQ_VAL(L_SEQ_NO),
          INVERT_FREQ=A_INVERT_FREQ(L_SEQ_NO)
      WHERE PR = A_PR
        AND PR_VERSION = A_VERSION
        AND MT = A_MT(L_SEQ_NO)
        AND MT_VERSION = A_MT_VERSION(L_SEQ_NO);

   END LOOP;

   
   UPDATE UTPPPR 
   SET MT=NULL, MT_VERSION=NULL, MT_NR_MEASUR=NULL
   WHERE PR = A_PR 
     AND PR_VERSION = A_VERSION
     AND (MT, NVL(MT_VERSION, '~Current~')) NOT IN (SELECT MT, NVL(MT_VERSION, '~Current~') 
                                                      FROM UTPRMT 
                                                     WHERE PR = A_PR 
                                                       AND VERSION = A_VERSION);
   
   
   
   DELETE FROM UTPRMTAU
   WHERE PR = A_PR
     AND VERSION = A_VERSION
     AND (MT, NVL(MT_VERSION, '~Current~')) NOT IN (SELECT MT, NVL(MT_VERSION, '~Current~') 
                                                      FROM UTPRMT 
                                                     WHERE PR = A_PR 
                                                       AND VERSION = A_VERSION);
   
   
   
   DELETE FROM UTSTMTFREQ
   WHERE PR = A_PR
     AND PR_VERSION = A_VERSION
     AND (MT, NVL(MT_VERSION, '~Current~')) NOT IN (SELECT MT, NVL(MT_VERSION, '~Current~') 
                                                      FROM UTPRMT 
                                                     WHERE PR = A_PR 
                                                       AND VERSION = A_VERSION);
   
   L_EVENT_TP := 'UsedObjectsUpdated';
   L_EV_SEQ_NR := -1;
   L_RET_CODE := UNAPIEV.INSERTEVENT('SavePrMethod',UNAPIGEN.P_EVMGR_NAME, 'pr', A_PR, 
                                     L_LC, L_LC_VERSION, L_SS, L_EVENT_TP, 'version='||A_VERSION,
                                     L_EV_SEQ_NR);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   IF L_LOG_HS = '1' THEN
      INSERT INTO UTPRHS (PR, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                          WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES (A_PR, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
              'parameter "'||A_PR||'" methods are updated.', 
              CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SavePrMethod',SQLERRM);
   END IF ;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SavePrMethod'));
END SAVEPRMETHOD;


FUNCTION GETPRCHARTTYPE
(
 A_PR                    OUT      UNAPIGEN.VC20_TABLE_TYPE,  
 A_VERSION               OUT      UNAPIGEN.VC20_TABLE_TYPE,  
 A_CY                    OUT      UNAPIGEN.VC20_TABLE_TYPE,  
 A_CY_VERSION            OUT      UNAPIGEN.VC20_TABLE_TYPE,  
 A_ST                    OUT      UNAPIGEN.VC20_TABLE_TYPE,  
 A_ST_VERSION            OUT      UNAPIGEN.VC20_TABLE_TYPE,  
 A_NR_OF_ROWS            IN OUT   NUMBER,                    
 A_WHERE_CLAUSE          IN       VARCHAR2)                  
RETURN NUMBER IS
L_PR                VARCHAR2(20);
L_VERSION           VARCHAR2(20);
L_CY                VARCHAR2(20);
L_CY_VERSION        VARCHAR2(20);
L_ST                VARCHAR2(20);
L_ST_VERSION        VARCHAR2(20);

L_PR_CURSOR         INTEGER;

BEGIN
   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'ORDER BY pr, version, cy, cy_version, st, st_version'; 
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
   L_WHERE_CLAUSE :=   ', dd'||UNAPIGEN.P_DD||'.uvpr pr WHERE pr.version_is_current = ''1'' '||
                       'AND prct.version = pr.version '||
                       'AND prct.pr = pr.pr '||
                       'AND prct.pr = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                       ''' ORDER BY pr, version, cy, cy_version, st, st_version'; 
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;
   
   L_PR_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING :=  'SELECT prct.pr, prct.version, prct.cy, prct.cy_version, prct.st, prct.st_version ' ||
            'FROM dd' || UNAPIGEN.P_DD || '.uvprcyst prct ' || L_WHERE_CLAUSE;
            
   DBMS_SQL.PARSE(L_PR_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_PR_CURSOR,       1 ,     L_PR         ,     20); 
   DBMS_SQL.DEFINE_COLUMN(L_PR_CURSOR,       2 ,     L_VERSION    ,     20); 
   DBMS_SQL.DEFINE_COLUMN(L_PR_CURSOR,       3 ,     L_CY         ,     20); 
   DBMS_SQL.DEFINE_COLUMN(L_PR_CURSOR,       4 ,     L_CY_VERSION ,     20); 
   DBMS_SQL.DEFINE_COLUMN(L_PR_CURSOR,       5 ,     L_ST         ,     20); 
   DBMS_SQL.DEFINE_COLUMN(L_PR_CURSOR,       6 ,     L_ST_VERSION ,     20); 
                                                             

   L_RESULT := DBMS_SQL.EXECUTE(L_PR_CURSOR);
   L_RESULT := DBMS_SQL.FETCH_ROWS(L_PR_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;
      DBMS_SQL.COLUMN_VALUE(L_PR_CURSOR,       1 ,     L_PR          );
      DBMS_SQL.COLUMN_VALUE(L_PR_CURSOR,       2 ,     L_VERSION     );
      DBMS_SQL.COLUMN_VALUE(L_PR_CURSOR,       3 ,     L_CY          );
      DBMS_SQL.COLUMN_VALUE(L_PR_CURSOR,       4 ,     L_CY_VERSION  );
      DBMS_SQL.COLUMN_VALUE(L_PR_CURSOR,       5 ,     L_ST          );
      DBMS_SQL.COLUMN_VALUE(L_PR_CURSOR,       6 ,     L_ST_VERSION  );
 
      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
     
      A_PR            (L_FETCHED_ROWS) := L_PR          ;
      A_VERSION       (L_FETCHED_ROWS) := L_VERSION     ;
      A_CY            (L_FETCHED_ROWS) := L_CY          ;
      A_CY_VERSION    (L_FETCHED_ROWS) := L_CY_VERSION  ;
      A_ST            (L_FETCHED_ROWS) := L_ST          ;
      A_ST_VERSION    (L_FETCHED_ROWS) := L_ST_VERSION  ;
      
      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_PR_CURSOR);
      END IF;
   END LOOP;
   
   DBMS_SQL.CLOSE_CURSOR(L_PR_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      RETURN(UNAPIGEN.DBERR_NORECORDS);
   END IF;

   A_NR_OF_ROWS := L_FETCHED_ROWS;
   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   L_SQLERRM := SQLERRM;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
           'GetPrChartType', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   IF DBMS_SQL.IS_OPEN (L_PR_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_PR_CURSOR);
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);

END GETPRCHARTTYPE;

FUNCTION SAVEPRCHARTTYPE
(
A_PR                     IN    VARCHAR2,                       
A_VERSION                IN    VARCHAR2,                       
A_CY                     IN    UNAPIGEN.VC20_TABLE_TYPE,     
A_CY_VERSION             IN    UNAPIGEN.VC20_TABLE_TYPE,     
A_ST                     IN    UNAPIGEN.VC20_TABLE_TYPE,     
A_ST_VERSION             IN    UNAPIGEN.VC20_TABLE_TYPE,     
A_NR_OF_ROWS             IN    NUMBER,                       
A_MODIFY_REASON          IN    VARCHAR2                      
)  RETURN NUMBER IS
L_CY_VERSION     VARCHAR2(2);
L_LC             VARCHAR2(2);
L_LC_VERSION     VARCHAR2(20);
L_SS             VARCHAR2(2);
L_LOG_HS         CHAR(1);
L_ALLOW_MODIFY   CHAR(1);
L_ACTIVE         CHAR(1);
L_INSERT         BOOLEAN;
L_ERROR        EXCEPTION;
BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE L_ERROR;
   END IF;
   
   IF NVL(A_PR, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE  L_ERROR;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('pr', A_PR, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
         UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
         RAISE STPERROR;
   END IF;
   
   UPDATE UTPR
   SET ALLOW_MODIFY = '#'
   WHERE PR = A_PR
     AND VERSION = A_VERSION;
     
   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE  STPERROR ;
   END IF;
   
   DELETE UTPRCYST
   WHERE PR = A_PR
     AND VERSION = A_VERSION;
  
   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      IF NVL(A_CY(L_SEQ_NO), ' ') = ' ' THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
         RAISE  STPERROR ;
      END IF;
      INSERT INTO UTPRCYST (PR, VERSION, CY, CY_VERSION, ST, ST_VERSION)
      VALUES (A_PR, A_VERSION, A_CY(L_SEQ_NO), A_CY_VERSION(L_SEQ_NO), A_ST(L_SEQ_NO), A_ST_VERSION(L_SEQ_NO));
   END LOOP;
   
   L_EVENT_TP := 'UsedObjectsUpdated';
   L_EV_SEQ_NR := -1;
   L_RET_CODE := UNAPIEV.INSERTEVENT('SavePrChartType',UNAPIGEN.P_EVMGR_NAME, 'pr', A_PR, 
                                     L_LC, L_LC_VERSION, L_SS, L_EVENT_TP, 'version='||A_VERSION,
                                     L_EV_SEQ_NR);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;
   IF L_LOG_HS = '1' THEN
      INSERT INTO UTPRHS (PR, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                          WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES (A_PR, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
              'parameter "'||A_PR||'" chart types are updated.', 
              CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SavePrChartType',SQLERRM);
   END IF ;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SavePrChartType'));
END SAVEPRCHARTTYPE;

FUNCTION COPYPARAMETER
(A_PR             IN        VARCHAR2,                 
 A_VERSION        IN        VARCHAR2,                 
 A_CP_PR          IN OUT    VARCHAR2,                 
 A_CP_VERSION     IN OUT    VARCHAR2,                 
 A_MODIFY_REASON  IN        VARCHAR2)                 
RETURN NUMBER IS
   CURSOR L_PR_CURSOR(C_PR IN VARCHAR2, C_PR_VERSION IN VARCHAR2) IS
      SELECT LOG_HS
      FROM UTPR
      WHERE PR = C_PR
        AND VERSION = C_PR_VERSION;
   L_PR_REC          L_PR_CURSOR%ROWTYPE;

   L_DYN_CURSOR  INTEGER;

   L_TEMP_LC                 VARCHAR2(2);
   L_TEMP_LC_VERSION         VARCHAR2(20);
   L_TEMP_SS                 VARCHAR2(2);
   L_TEMP_LOG_HS             CHAR(1);
   L_TEMP_ALLOW_MODIFY       CHAR(1);
   L_TEMP_ACTIVE             CHAR(1);
   L_LOG_HS                  CHAR(1);
   L_SQLERRM2                VARCHAR2(255);
BEGIN
   L_SQLERRM := NULL;
   L_SQLERRM2 := NULL;

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   
   IF NVL(A_PR, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR ;
   END IF;

   IF NVL(A_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   IF NVL(A_CP_PR, ' ') = ' ' THEN
      
      A_CP_PR := A_PR;
   END IF;

   
   OPEN L_PR_CURSOR(A_PR, A_VERSION);
   FETCH L_PR_CURSOR
   INTO L_PR_REC;
   IF L_PR_CURSOR%NOTFOUND THEN
      CLOSE L_PR_CURSOR;
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR;
   END IF;
   CLOSE L_PR_CURSOR;
   
   L_LOG_HS := L_PR_REC.LOG_HS;

   
   IF A_CP_VERSION IS NOT NULL THEN
      OPEN L_PR_CURSOR(A_CP_PR, A_CP_VERSION);
      FETCH L_PR_CURSOR
      INTO L_PR_REC;
      IF L_PR_CURSOR%FOUND THEN
         CLOSE L_PR_CURSOR;
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_ALREADYEXISTS;
         RAISE STPERROR;
      END IF;
      CLOSE L_PR_CURSOR;
   END IF;

   
   
   IF A_CP_VERSION IS NULL THEN
      
      IF A_PR = A_CP_PR THEN
         A_CP_VERSION := A_VERSION;
         L_RET_CODE := UNVERSION.GETHIGHESTMINORVERSION('pr', A_CP_PR, A_CP_VERSION);
         IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
            L_SQLERRM := 'UNVERSION.GetHighestMinorVersion#ret_code='||L_RET_CODE||'#pr='||A_CP_PR||'version='||A_CP_VERSION;
            RAISE STPERROR;
         END IF;

         L_RET_CODE := UNVERSION.GETNEXTMINORVERSION(A_CP_VERSION);
         IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
            L_SQLERRM := 'UNVERSION.GetNextMinorVersion#ret_code='||L_RET_CODE||'#version='||A_CP_VERSION;
            RAISE STPERROR;
         END IF;
      ELSE
         L_RET_CODE := UNVERSION.GETHIGHESTMAJORVERSION('pr', A_CP_PR, A_CP_VERSION);
         IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
            L_SQLERRM := 'UNVERSION.GetHighestMajorVersion#ret_code='||L_RET_CODE||'#pr='||A_CP_PR;
            RAISE STPERROR;
         END IF;

         L_RET_CODE := UNVERSION.GETNEXTMAJORVERSION(A_CP_VERSION);
         IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
            L_SQLERRM := 'UNVERSION.GetNextMajorVersion#ret_code='||L_RET_CODE||'#version='||A_CP_VERSION;
            RAISE STPERROR;
         END IF;
         
      END IF;
   END IF;

   
   
   
   
   
   
   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('pr', A_CP_PR, A_CP_VERSION, L_TEMP_LC,
                                           L_TEMP_LC_VERSION, L_TEMP_SS, L_TEMP_ALLOW_MODIFY,
                                           L_TEMP_ACTIVE, L_TEMP_LOG_HS);
   IF L_RET_CODE <> UNAPIGEN.DBERR_NOOBJECT  THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_ALREADYEXISTS;
      RAISE STPERROR;
   END IF;

   

   
   
   L_SQL_STRING := 'INSERT INTO utpr(pr, version, description, description2, '||
                   'unit, format, td_info, td_info_unit, confirm_uid, def_val_tp, def_au_level, def_val, '||
                   'allow_any_mt, delay, delay_unit, min_nr_results, calc_method, calc_cf, alarm_order, '||
                   'seta_specs, seta_limits, seta_target, setb_specs, setb_limits, setb_target, setc_specs, '||
                   'setc_limits, setc_target, is_template, log_exceptions, sc_lc, sc_lc_version, '||
                   'inherit_au, last_comment, pr_class, log_hs, allow_modify, '||
                   'active, lc, lc_version, ss';
   FOR I IN 1..UNAPIGEN.P_DATADOMAINS LOOP
      L_SQL_STRING := L_SQL_STRING||', ar'||I;
   END LOOP;
   L_SQL_STRING := L_SQL_STRING||') ';
   L_SQL_STRING := L_SQL_STRING||'SELECT :a_cp_pr, :a_cp_version, description, description2, '||
                   'unit, format, td_info, td_info_unit, confirm_uid, def_val_tp, def_au_level, def_val, '||
                   'allow_any_mt, delay, delay_unit, min_nr_results, calc_method, calc_cf, alarm_order, '||
                   'seta_specs, seta_limits, seta_target, setb_specs, setb_limits, setb_target, setc_specs, '||
                   'setc_limits, setc_target, is_template, log_exceptions, sc_lc, sc_lc_version, '||
                   'inherit_au, last_comment, pr_class, log_hs, ''#'', ''0'', lc, lc_version, NULL';
   FOR I IN 1..UNAPIGEN.P_DATADOMAINS LOOP
      L_SQL_STRING := L_SQL_STRING||', ar'||I;
   END LOOP;
   L_SQL_STRING := L_SQL_STRING||' FROM utpr WHERE pr = :a_pr'||
                                             ' AND version = :a_version';
   L_DYN_CURSOR := DBMS_SQL.OPEN_CURSOR;
   BEGIN
      DBMS_SQL.PARSE(L_DYN_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      DBMS_SQL.BIND_VARIABLE(L_DYN_CURSOR, ':a_pr', A_PR);
      DBMS_SQL.BIND_VARIABLE(L_DYN_CURSOR, ':a_version', A_VERSION);
      DBMS_SQL.BIND_VARIABLE(L_DYN_CURSOR, ':a_cp_pr', A_CP_PR);
      DBMS_SQL.BIND_VARIABLE(L_DYN_CURSOR, ':a_cp_version', A_CP_VERSION);
      L_RET_CODE := DBMS_SQL.EXECUTE(L_DYN_CURSOR);
   EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := 'Error while copying data for table utpr#sqlcode='||SQLCODE;
      L_SQLERRM2 := 'Used Sql statement: '||SUBSTR(L_SQL_STRING,1,230);
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END;
   L_SQLERRM2 := NULL;
   DBMS_SQL.CLOSE_CURSOR(L_DYN_CURSOR);

   INSERT INTO UTPRAU
   (PR, VERSION, AU, AU_VERSION, AUSEQ, VALUE)
   SELECT A_CP_PR, A_CP_VERSION, AU, AU_VERSION, AUSEQ, VALUE
   FROM UTPRAU
   WHERE PR = A_PR
     AND VERSION = A_VERSION;

   

   INSERT INTO UTPRMT
   (PR, VERSION, MT, MT_VERSION, SEQ, NR_MEASUR, UNIT, FORMAT, ALLOW_ADD, IGNORE_OTHER, ACCURACY, FREQ_TP, 
    FREQ_VAL, FREQ_UNIT, INVERT_FREQ, ST_BASED_FREQ, LAST_SCHED, LAST_SCHED_TZ, LAST_CNT, LAST_VAL, INHERIT_AU)
   SELECT A_CP_PR, A_CP_VERSION, MT, MT_VERSION, SEQ, NR_MEASUR, UNIT, FORMAT, ALLOW_ADD, IGNORE_OTHER, ACCURACY, FREQ_TP, 
          FREQ_VAL, FREQ_UNIT, INVERT_FREQ, ST_BASED_FREQ, LAST_SCHED, LAST_SCHED, LAST_CNT, LAST_VAL, INHERIT_AU
   FROM UTPRMT
   WHERE PR = A_PR
     AND VERSION = A_VERSION;
   
   INSERT INTO UTPRMTAU
   (PR, VERSION, MT, MT_VERSION, AU, AU_VERSION, AUSEQ, VALUE)
   SELECT A_CP_PR, A_CP_VERSION, MT, MT_VERSION, AU, AU_VERSION, AUSEQ, VALUE
   FROM UTPRMTAU
   WHERE PR = A_PR
     AND VERSION = A_VERSION;
   
   INSERT INTO UTPRCYST
   (PR, VERSION, CY, CY_VERSION, ST, ST_VERSION)
   SELECT A_CP_PR, A_CP_VERSION, CY, CY_VERSION, ST, ST_VERSION
   FROM UTPRCYST
   WHERE PR = A_PR
     AND VERSION = A_VERSION;

   
   L_EVENT_TP := 'ObjectCreated';
   L_EV_SEQ_NR := -1;
   L_RET_CODE := UNAPIEV.INSERTEVENT('NewPrVersion',UNAPIGEN.P_EVMGR_NAME,
                                     'pr', A_CP_PR, '', '', '', L_EVENT_TP,
                                     'version='||A_CP_VERSION, L_EV_SEQ_NR);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   IF L_LOG_HS = '1' THEN
      IF A_PR = A_CP_PR THEN
         INSERT INTO UTPRHS (PR, VERSION, WHO, WHO_DESCRIPTION, WHAT,
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_CP_PR, A_CP_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION,
                 L_EVENT_TP,
                 'parameter "'||A_CP_PR||'" version "'||A_CP_VERSION||'" is created based on version "'||A_VERSION||'"',
                 CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      ELSE
         INSERT INTO UTPRHS (PR, VERSION, WHO, WHO_DESCRIPTION, WHAT,
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_CP_PR, A_CP_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION,
                 L_EVENT_TP,
                 'parameter "'||A_CP_PR||'" version "'||A_CP_VERSION||'" is created based on parameter "'||A_PR||'" version "'||A_VERSION||'"',
                 CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('CopyParameter',SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('CopyParameter',L_SQLERRM);
      IF L_SQLERRM2 IS NOT NULL THEN
         UNAPIGEN.LOGERROR('CopyParameter',L_SQLERRM2);
      END IF;
   END IF ;
   IF L_PR_CURSOR%ISOPEN THEN
      CLOSE L_PR_CURSOR;
   END IF;
   IF DBMS_SQL.IS_OPEN(L_DYN_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_DYN_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'CopyParameter'));
END COPYPARAMETER;






BEGIN
   P_PR_CURSOR := NULL;
END UNAPIPR;
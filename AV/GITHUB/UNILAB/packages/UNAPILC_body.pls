PACKAGE BODY unapilc AS

L_SQLERRM         VARCHAR2(255);
L_SQL_STRING      VARCHAR2(2000);
L_WHERE_CLAUSE    VARCHAR2(1000);
L_EVENT_TP        UTEV.EV_TP%TYPE;
L_RET_CODE        NUMBER;
L_RESULT          NUMBER;
L_FETCHED_ROWS    NUMBER;
L_EV_SEQ_NR       NUMBER;

STPERROR          EXCEPTION;

P_LC_CURSOR        INTEGER;
P_SS_CURSOR        INTEGER;
P_LCTR_CURSOR      INTEGER;
P_LCUS_CURSOR      INTEGER;
P_LCAF_CURSOR      INTEGER;
P_SAVELCTR_CALLS   INTEGER;
P_SAVELCTR_TR_SEQ  INTEGER;
P_SAVELCUS_CALLS   INTEGER;
P_SAVELCUS_TR_SEQ  INTEGER;
P_SAVELCAF_CALLS   INTEGER;
P_SAVELCAF_TR_SEQ  INTEGER;

FUNCTION GETVERSION
   RETURN VARCHAR2
IS
BEGIN
   RETURN('06.07.00.00_00.13');
EXCEPTION
   WHEN OTHERS THEN
      RETURN (NULL);
END GETVERSION;

FUNCTION GETSTATUSLIST
(A_SS                   OUT    UNAPIGEN.VC2_TABLE_TYPE,  
 A_NAME                 OUT    UNAPIGEN.VC20_TABLE_TYPE, 
 A_DESCRIPTION          OUT    UNAPIGEN.VC40_TABLE_TYPE, 
 A_COLOR                OUT    UNAPIGEN.RAW8_TABLE_TYPE, 
 A_NR_OF_ROWS           IN OUT NUMBER,                   
 A_WHERE_CLAUSE         IN     VARCHAR2,                 
 A_NEXT_ROWS            IN     NUMBER)                   
RETURN NUMBER IS

L_SS           VARCHAR2(2);
L_NAME         VARCHAR2(20);
L_DESCRIPTION  VARCHAR2(40);
L_COLOR        RAW(8);

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_SS_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_SS_CURSOR);
         P_SS_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_SS_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      IF P_SS_CURSOR IS NULL THEN
         P_SS_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;

      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
          L_WHERE_CLAUSE := 'ORDER BY ss'; 
      ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
          L_WHERE_CLAUSE := 'WHERE ss = ''' || A_WHERE_CLAUSE || 
                            ''' ORDER BY ss';
      ELSE
          L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
      END IF;

      L_SQL_STRING := 'SELECT ss, name, description, color FROM dd' ||
                      UNAPIGEN.P_DD || '.uvss ' || L_WHERE_CLAUSE;

      DBMS_SQL.PARSE(P_SS_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

      DBMS_SQL.DEFINE_COLUMN(P_SS_CURSOR, 1, L_SS, 2);
      DBMS_SQL.DEFINE_COLUMN(P_SS_CURSOR, 2, L_NAME, 20);
      DBMS_SQL.DEFINE_COLUMN(P_SS_CURSOR, 3, L_DESCRIPTION, 40);
      DBMS_SQL.DEFINE_COLUMN_RAW(P_SS_CURSOR, 4, L_COLOR, 8);
      L_RESULT := DBMS_SQL.EXECUTE(P_SS_CURSOR);
   END IF;

   L_RESULT := DBMS_SQL.FETCH_ROWS(P_SS_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_SS_CURSOR, 1, L_SS);
      DBMS_SQL.COLUMN_VALUE(P_SS_CURSOR, 2, L_NAME);
      DBMS_SQL.COLUMN_VALUE(P_SS_CURSOR, 3, L_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE_RAW(P_SS_CURSOR, 4, L_COLOR);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_SS(L_FETCHED_ROWS) := L_SS;
      A_NAME(L_FETCHED_ROWS) := L_NAME;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;
      A_COLOR(L_FETCHED_ROWS) := L_COLOR;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_SS_CURSOR);
      END IF;
   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_SS_CURSOR);
       P_SS_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
       A_NR_OF_ROWS := L_FETCHED_ROWS;
       DBMS_SQL.CLOSE_CURSOR(P_SS_CURSOR);
       P_SS_CURSOR := NULL;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   L_SQLERRM := SQLERRM;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
          'GetStatusList', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   IF DBMS_SQL.IS_OPEN(P_SS_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(P_SS_CURSOR);
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETSTATUSLIST;


FUNCTION GETSTATUSLIST
(A_SS                   OUT    UNAPIGEN.VC2_TABLE_TYPE,  
 A_NAME                 OUT    UNAPIGEN.VC20_TABLE_TYPE, 
 A_DESCRIPTION          OUT    UNAPIGEN.VC40_TABLE_TYPE, 
 A_R                    OUT    UNAPIGEN.NUM_TABLE_TYPE,  
 A_G                    OUT    UNAPIGEN.NUM_TABLE_TYPE,  
 A_B                    OUT    UNAPIGEN.NUM_TABLE_TYPE,  
 A_NR_OF_ROWS           IN OUT NUMBER,                   
 A_WHERE_CLAUSE         IN     VARCHAR2,                 
 A_NEXT_ROWS            IN     NUMBER)                   
RETURN NUMBER IS

L_SS           VARCHAR2(2);
L_NAME         VARCHAR2(20);
L_DESCRIPTION  VARCHAR2(40);
L_COLOR        RAW(8);

L_VC8_COLOR    VARCHAR2(16);

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_SS_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_SS_CURSOR);
         P_SS_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_SS_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      IF P_SS_CURSOR IS NULL THEN
         P_SS_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;

      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
          L_WHERE_CLAUSE := 'ORDER BY ss'; 
      ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
          L_WHERE_CLAUSE := 'WHERE ss = ''' || A_WHERE_CLAUSE || 
                            ''' ORDER BY ss';
      ELSE
          L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
      END IF;

      L_SQL_STRING := 'SELECT ss, name, description, color FROM dd' ||
                      UNAPIGEN.P_DD || '.uvss ' || L_WHERE_CLAUSE;

      DBMS_SQL.PARSE(P_SS_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

      DBMS_SQL.DEFINE_COLUMN(P_SS_CURSOR, 1, L_SS, 2);
      DBMS_SQL.DEFINE_COLUMN(P_SS_CURSOR, 2, L_NAME, 20);
      DBMS_SQL.DEFINE_COLUMN(P_SS_CURSOR, 3, L_DESCRIPTION, 40);
      DBMS_SQL.DEFINE_COLUMN_RAW(P_SS_CURSOR, 4, L_COLOR, 8);
      L_RESULT := DBMS_SQL.EXECUTE(P_SS_CURSOR);
   END IF;

   L_RESULT := DBMS_SQL.FETCH_ROWS(P_SS_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_SS_CURSOR, 1, L_SS);
      DBMS_SQL.COLUMN_VALUE(P_SS_CURSOR, 2, L_NAME);
      DBMS_SQL.COLUMN_VALUE(P_SS_CURSOR, 3, L_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE_RAW(P_SS_CURSOR, 4, L_COLOR);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_SS(L_FETCHED_ROWS) := L_SS;
      A_NAME(L_FETCHED_ROWS) := L_NAME;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;

      
      L_VC8_COLOR := RAWTOHEX(L_COLOR);
      A_R(L_FETCHED_ROWS) := TO_NUMBER(SUBSTR(L_VC8_COLOR,1,2), '0X');
      A_G(L_FETCHED_ROWS) := TO_NUMBER(SUBSTR(L_VC8_COLOR,3,2), '0X');
      A_B(L_FETCHED_ROWS) := TO_NUMBER(SUBSTR(L_VC8_COLOR,5,2), '0X');

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_SS_CURSOR);
      END IF;
   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_SS_CURSOR);
       P_SS_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
       A_NR_OF_ROWS := L_FETCHED_ROWS;
       DBMS_SQL.CLOSE_CURSOR(P_SS_CURSOR);
       P_SS_CURSOR := NULL;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   L_SQLERRM := SQLERRM;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
          'GetStatusList', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   IF DBMS_SQL.IS_OPEN(P_SS_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(P_SS_CURSOR);
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETSTATUSLIST;

FUNCTION GETSTATUS
(A_SS            OUT       UNAPIGEN.VC2_TABLE_TYPE,   
 A_NAME          OUT       UNAPIGEN.VC20_TABLE_TYPE,  
 A_DESCRIPTION   OUT       UNAPIGEN.VC40_TABLE_TYPE,  
 A_COLOR         OUT       UNAPIGEN.RAW8_TABLE_TYPE,  
 A_SHORTCUT      OUT       UNAPIGEN.RAW8_TABLE_TYPE,  
 A_ALLOW_MODIFY  OUT       UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ACTIVE        OUT       UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_SS_CLASS      OUT       UNAPIGEN.VC2_TABLE_TYPE,   
 A_NR_OF_ROWS    IN OUT    NUMBER,                    
 A_WHERE_CLAUSE IN        VARCHAR2)                   
RETURN NUMBER IS

L_SS                  VARCHAR2(2);
L_NAME                VARCHAR2(20);
L_DESCRIPTION         VARCHAR2(40);
L_COLOR               RAW(8);
L_SHORTCUT            RAW(8);
L_ALLOW_MODIFY        CHAR(1);
L_ACTIVE              CHAR(1);
L_SS_CLASS            VARCHAR2(2);
L_SS_CURSOR           INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'ORDER BY ss'; 
   ELSIF
      UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := 'WHERE ss = ''' || A_WHERE_CLAUSE || ''' ORDER BY ss'; 
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_SQL_STRING := 'SELECT ss, name, description, color, '||
                   'shortcut, ss_class, allow_modify, active '||
                   'FROM dd' || UNAPIGEN.P_DD || '.uvss ' || L_WHERE_CLAUSE;

   L_SS_CURSOR := DBMS_SQL.OPEN_CURSOR;
   DBMS_SQL.PARSE(L_SS_CURSOR,L_SQL_STRING,DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_SS_CURSOR, 1, L_SS, 2);
   DBMS_SQL.DEFINE_COLUMN(L_SS_CURSOR, 2, L_NAME, 20);
   DBMS_SQL.DEFINE_COLUMN(L_SS_CURSOR, 3, L_DESCRIPTION, 40);
   DBMS_SQL.DEFINE_COLUMN_RAW(L_SS_CURSOR, 4, L_COLOR, 8);
   DBMS_SQL.DEFINE_COLUMN_RAW(L_SS_CURSOR, 5, L_SHORTCUT, 8);
   DBMS_SQL.DEFINE_COLUMN(L_SS_CURSOR, 6, L_SS_CLASS, 2);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_SS_CURSOR, 7, L_ALLOW_MODIFY, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_SS_CURSOR, 8, L_ACTIVE, 1);
   L_RESULT := DBMS_SQL.EXECUTE(L_SS_CURSOR);

   L_FETCHED_ROWS := 0;
   L_RESULT := DBMS_SQL.FETCH_ROWS(L_SS_CURSOR);

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_SS_CURSOR, 1, L_SS);
      DBMS_SQL.COLUMN_VALUE(L_SS_CURSOR, 2, L_NAME);
      DBMS_SQL.COLUMN_VALUE(L_SS_CURSOR, 3, L_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE_RAW(L_SS_CURSOR, 4, L_COLOR);
      DBMS_SQL.COLUMN_VALUE_RAW(L_SS_CURSOR, 5, L_SHORTCUT);
      DBMS_SQL.COLUMN_VALUE(L_SS_CURSOR, 6, L_SS_CLASS);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_SS_CURSOR, 7, L_ALLOW_MODIFY);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_SS_CURSOR, 8, L_ACTIVE);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_SS(L_FETCHED_ROWS) := L_SS;
      A_NAME(L_FETCHED_ROWS) := L_NAME;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;
      A_COLOR(L_FETCHED_ROWS) := L_COLOR;
      A_SHORTCUT(L_FETCHED_ROWS) := L_SHORTCUT;
      A_SS_CLASS(L_FETCHED_ROWS) := L_SS_CLASS;
      A_ALLOW_MODIFY(L_FETCHED_ROWS) := L_ALLOW_MODIFY;
      A_ACTIVE(L_FETCHED_ROWS) := L_ACTIVE;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_SS_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_SS_CURSOR);

   
   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF ;

   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   L_SQLERRM := SQLERRM;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
          'GetStatus', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   IF DBMS_SQL.IS_OPEN(L_SS_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_SS_CURSOR);
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETSTATUS;


FUNCTION GETSTATUS
(A_SS            OUT       UNAPIGEN.VC2_TABLE_TYPE,   
 A_NAME          OUT       UNAPIGEN.VC20_TABLE_TYPE,  
 A_DESCRIPTION   OUT       UNAPIGEN.VC40_TABLE_TYPE,  
 A_R             OUT       UNAPIGEN.NUM_TABLE_TYPE,   
 A_G             OUT       UNAPIGEN.NUM_TABLE_TYPE,   
 A_B             OUT       UNAPIGEN.NUM_TABLE_TYPE,   
 A_ALT           OUT       UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_CTRL          OUT       UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_SHIFT         OUT       UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_KEY_NAME      OUT       UNAPIGEN.VC20_TABLE_TYPE,  
 A_ALLOW_MODIFY  OUT       UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ACTIVE        OUT       UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_SS_CLASS      OUT       UNAPIGEN.VC2_TABLE_TYPE,   
 A_NR_OF_ROWS    IN OUT    NUMBER,                    
 A_WHERE_CLAUSE IN        VARCHAR2)                   
RETURN NUMBER IS

L_SS                  VARCHAR2(2);
L_NAME                VARCHAR2(20);
L_DESCRIPTION         VARCHAR2(40);
L_COLOR               RAW(8);
L_SHORTCUT            RAW(8);
L_ALLOW_MODIFY        CHAR(1);
L_ACTIVE              CHAR(1);
L_SS_CLASS            VARCHAR2(2);
L_SS_CURSOR           INTEGER;

L_VC8_COLOR           VARCHAR2(16);

L_VC8_SHORTCUT        VARCHAR2(8);
L_CHAR1_ALT           CHAR(1);
L_CHAR1_CTRL          CHAR(1);
L_CHAR1_SHIFT         CHAR(1);
L_VC20_KEY_NAME       VARCHAR2(20);

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'ORDER BY ss'; 
   ELSIF
      UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := 'WHERE ss = ''' || A_WHERE_CLAUSE || ''' ORDER BY ss'; 
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_SQL_STRING := 'SELECT ss, name, description, color, '||
                   'shortcut, ss_class, allow_modify, active '||
                   'FROM dd' || UNAPIGEN.P_DD || '.uvss ' || L_WHERE_CLAUSE;

   L_SS_CURSOR := DBMS_SQL.OPEN_CURSOR;
   DBMS_SQL.PARSE(L_SS_CURSOR,L_SQL_STRING,DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_SS_CURSOR, 1, L_SS, 2);
   DBMS_SQL.DEFINE_COLUMN(L_SS_CURSOR, 2, L_NAME, 20);
   DBMS_SQL.DEFINE_COLUMN(L_SS_CURSOR, 3, L_DESCRIPTION, 40);
   DBMS_SQL.DEFINE_COLUMN_RAW(L_SS_CURSOR, 4, L_COLOR, 8);
   DBMS_SQL.DEFINE_COLUMN_RAW(L_SS_CURSOR, 5, L_SHORTCUT, 8);
   DBMS_SQL.DEFINE_COLUMN(L_SS_CURSOR, 6, L_SS_CLASS, 2);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_SS_CURSOR, 7, L_ALLOW_MODIFY, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_SS_CURSOR, 8, L_ACTIVE, 1);
   L_RESULT := DBMS_SQL.EXECUTE(L_SS_CURSOR);

   L_FETCHED_ROWS := 0;
   L_RESULT := DBMS_SQL.FETCH_ROWS(L_SS_CURSOR);

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_SS_CURSOR, 1, L_SS);
      DBMS_SQL.COLUMN_VALUE(L_SS_CURSOR, 2, L_NAME);
      DBMS_SQL.COLUMN_VALUE(L_SS_CURSOR, 3, L_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE_RAW(L_SS_CURSOR, 4, L_COLOR);
      DBMS_SQL.COLUMN_VALUE_RAW(L_SS_CURSOR, 5, L_SHORTCUT);
      DBMS_SQL.COLUMN_VALUE(L_SS_CURSOR, 6, L_SS_CLASS);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_SS_CURSOR, 7, L_ALLOW_MODIFY);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_SS_CURSOR, 8, L_ACTIVE);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_SS(L_FETCHED_ROWS) := L_SS;
      A_NAME(L_FETCHED_ROWS) := L_NAME;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;

      
      L_VC8_COLOR := RAWTOHEX(L_COLOR);
      A_R(L_FETCHED_ROWS) := TO_NUMBER(SUBSTR(L_VC8_COLOR,1,2), '0X');
      A_G(L_FETCHED_ROWS) := TO_NUMBER(SUBSTR(L_VC8_COLOR,3,2), '0X');
      A_B(L_FETCHED_ROWS) := TO_NUMBER(SUBSTR(L_VC8_COLOR,5,2), '0X');

      
      IF L_SHORTCUT = HEXTORAW('0000000000000000') THEN
         L_VC8_SHORTCUT := NULL;
      ELSE
         L_VC8_SHORTCUT := UTL_RAW.CAST_TO_VARCHAR2(L_SHORTCUT);
      END IF;
      IF NVL(L_VC8_SHORTCUT, ' ') = ' ' THEN
         L_VC8_SHORTCUT := '000Undef';
      END IF;
      L_CHAR1_ALT     := SUBSTR(L_VC8_SHORTCUT, 1, 1);
      L_CHAR1_CTRL    := SUBSTR(L_VC8_SHORTCUT, 2, 1);
      L_CHAR1_SHIFT   := SUBSTR(L_VC8_SHORTCUT, 3, 1);
      L_VC20_KEY_NAME := SUBSTR(L_VC8_SHORTCUT, 4);
      IF L_VC20_KEY_NAME = 'Undef' THEN
         L_VC20_KEY_NAME := '';
      END IF;
      A_ALT(L_FETCHED_ROWS)      := L_CHAR1_ALT;
      A_CTRL(L_FETCHED_ROWS)     := L_CHAR1_CTRL;
      A_SHIFT(L_FETCHED_ROWS)    := L_CHAR1_SHIFT;
      A_KEY_NAME(L_FETCHED_ROWS) := RTRIM(L_VC20_KEY_NAME);

      A_SS_CLASS(L_FETCHED_ROWS) := L_SS_CLASS;
      A_ALLOW_MODIFY(L_FETCHED_ROWS) := L_ALLOW_MODIFY;
      A_ACTIVE(L_FETCHED_ROWS) := L_ACTIVE;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_SS_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_SS_CURSOR);

   
   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF ;

   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   L_SQLERRM := SQLERRM;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
          'GetStatus', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   IF DBMS_SQL.IS_OPEN(L_SS_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_SS_CURSOR);
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETSTATUS;

FUNCTION SAVESTATUS
(A_SS            IN     UNAPIGEN.VC2_TABLE_TYPE,   
 A_NAME          IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_DESCRIPTION   IN     UNAPIGEN.VC40_TABLE_TYPE,  
 A_COLOR         IN     UNAPIGEN.RAW8_TABLE_TYPE,  
 A_SHORTCUT      IN     UNAPIGEN.RAW8_TABLE_TYPE,  
 A_ALLOW_MODIFY  IN     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ACTIVE        IN     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_SS_CLASS      IN     UNAPIGEN.VC2_TABLE_TYPE,   
 A_NR_OF_ROWS    IN     NUMBER)                    
RETURN NUMBER IS

L_COUNT      NUMBER;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_NR_OF_ROWS, 0) = 0 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NROFROWS;
      RAISE STPERROR;
   END IF;

   DELETE FROM UTSS
   WHERE SUBSTR(SS,1,1) <> '@';

   DELETE FROM UTSHORTCUT
   WHERE KEY_TP = 'ss';

   FOR L_CTR IN 1..A_NR_OF_ROWS LOOP
      IF NVL(A_ALLOW_MODIFY(L_CTR), ' ') NOT IN ('1', '0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_ALLOWMODIFY;
         RAISE STPERROR;
      END IF;

      IF NVL(A_ACTIVE(L_CTR), ' ') NOT IN ('1', '0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_ACTIVE;
         RAISE STPERROR;
      END IF;

      IF NVL(A_SS(L_CTR), ' ') = ' ' THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
      END IF;

      IF SUBSTR(A_SS(L_CTR),1,1) = '@' THEN
         SELECT COUNT(*)
         INTO L_COUNT
         FROM UTSS
         WHERE SS = A_SS(L_CTR);
         IF L_COUNT = 0 THEN
            INSERT INTO UTSS(SS, NAME, DESCRIPTION, COLOR, SHORTCUT,
                             ALLOW_MODIFY, ACTIVE)
            VALUES(A_SS(L_CTR), A_NAME(L_CTR),
                   A_DESCRIPTION(L_CTR), A_COLOR(L_CTR),
                   A_SHORTCUT(L_CTR), A_ALLOW_MODIFY(L_CTR),
                   A_ACTIVE(L_CTR));
         ELSE
            UPDATE UTSS
            SET NAME         = A_NAME(L_CTR),
                DESCRIPTION  = A_DESCRIPTION(L_CTR),
                COLOR        = A_COLOR(L_CTR),
                SHORTCUT     = A_SHORTCUT(L_CTR),
                ALLOW_MODIFY = A_ALLOW_MODIFY(L_CTR),
                ACTIVE       = A_ACTIVE(L_CTR),
                SS_CLASS     = A_SS_CLASS(L_CTR)
            WHERE SS = A_SS(L_CTR);
         END IF;
      ELSE
         INSERT INTO UTSS(SS, NAME, DESCRIPTION, COLOR, SHORTCUT,
                          ALLOW_MODIFY, ACTIVE, SS_CLASS)
         VALUES (A_SS(L_CTR), A_NAME(L_CTR),
                  A_DESCRIPTION(L_CTR), A_COLOR(L_CTR),
                  A_SHORTCUT(L_CTR), A_ALLOW_MODIFY(L_CTR),
                  A_ACTIVE(L_CTR), A_SS_CLASS(L_CTR));
      END IF;
   END LOOP;

   
   BEGIN
      INSERT INTO UTSHORTCUT(SHORTCUT, KEY_TP, VALUE_S)
      SELECT SHORTCUT, 'ss', SS
      FROM UTSS
      WHERE SHORTCUT <> HEXTORAW('0000000000000000');
   EXCEPTION
   WHEN DUP_VAL_ON_INDEX THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UQSHORTCUTKEY;
      RAISE STPERROR;
   END;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
   UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UQSS;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveStatus'));
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveStatus', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveStatus'));
END SAVESTATUS;


FUNCTION SAVESTATUS
(A_SS            IN     UNAPIGEN.VC2_TABLE_TYPE,   
 A_NAME          IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_DESCRIPTION   IN     UNAPIGEN.VC40_TABLE_TYPE,  
 A_R             IN     UNAPIGEN.NUM_TABLE_TYPE,   
 A_G             IN     UNAPIGEN.NUM_TABLE_TYPE,   
 A_B             IN     UNAPIGEN.NUM_TABLE_TYPE,   
 A_ALT           IN     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_CTRL          IN     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_SHIFT         IN     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_KEY_NAME      IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_ALLOW_MODIFY  IN     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ACTIVE        IN     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_SS_CLASS      IN     UNAPIGEN.VC2_TABLE_TYPE,   
 A_NR_OF_ROWS    IN     NUMBER)                    
RETURN NUMBER IS

L_COUNT         NUMBER;
L_SHORTCUT      UNAPIGEN.RAW8_TABLE_TYPE;
L_COLOR         UNAPIGEN.RAW8_TABLE_TYPE;

L_VC8_SHORTCUT  VARCHAR2(8);

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_NR_OF_ROWS, 0) = 0 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NROFROWS;
      RAISE STPERROR;
   END IF;
   
   FOR I IN 1..A_NR_OF_ROWS LOOP
      IF (A_R(I) < 0 OR 255 < A_R(I)) OR
         (A_G(I) < 0 OR 255 < A_G(I)) OR
         (A_B(I) < 0 OR 255 < A_B(I)) THEN
         L_SQLERRM := 'One of the color values (R='||NVL(A_R(I),999)||' G='||NVL(A_G(I),999)||' B='||NVL(A_B(I),999)||
                      ') has a value that is not in the scope 0-255.';
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
         RAISE STPERROR;
      END IF;

      
      L_COLOR(I) := HEXTORAW(TRIM(TO_CHAR(A_R(I),'0X'))||
                             TRIM(TO_CHAR(A_G(I),'0X'))||
                             TRIM(TO_CHAR(A_B(I),'0X'))||
                             '0000000000'
                            );

      
      IF NVL(A_KEY_NAME(I), ' ') = ' ' THEN
         L_VC8_SHORTCUT := NULL;
         L_SHORTCUT(I) := NULL;
      ELSE
         L_VC8_SHORTCUT := A_ALT(I) || A_CTRL(I) || A_SHIFT(I) || SUBSTR(A_KEY_NAME(I),1,5);
         L_SHORTCUT(I) := UTL_RAW.CAST_TO_RAW(L_VC8_SHORTCUT);
      END IF;
   END LOOP;

   DELETE FROM UTSS
   WHERE SUBSTR(SS,1,1) <> '@';

   DELETE FROM UTSHORTCUT
   WHERE KEY_TP = 'ss';

   FOR L_CTR IN 1..A_NR_OF_ROWS LOOP
      IF NVL(A_ALLOW_MODIFY(L_CTR), ' ') NOT IN ('1', '0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_ALLOWMODIFY;
         RAISE STPERROR;
      END IF;

      IF NVL(A_ACTIVE(L_CTR), ' ') NOT IN ('1', '0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_ACTIVE;
         RAISE STPERROR;
      END IF;

      IF NVL(A_SS(L_CTR), ' ') = ' ' THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
      END IF;

      IF SUBSTR(A_SS(L_CTR),1,1) = '@' THEN
         SELECT COUNT(*)
         INTO L_COUNT
         FROM UTSS
         WHERE SS = A_SS(L_CTR);
         IF L_COUNT = 0 THEN
            INSERT INTO UTSS(SS, NAME, DESCRIPTION, COLOR, SHORTCUT,
                             ALLOW_MODIFY, ACTIVE)
            VALUES(A_SS(L_CTR), A_NAME(L_CTR),
                   A_DESCRIPTION(L_CTR), L_COLOR(L_CTR),
                   L_SHORTCUT(L_CTR), A_ALLOW_MODIFY(L_CTR),
                   A_ACTIVE(L_CTR));
         ELSE
            UPDATE UTSS
            SET NAME         = A_NAME(L_CTR),
                DESCRIPTION  = A_DESCRIPTION(L_CTR),
                COLOR        = L_COLOR(L_CTR),
                SHORTCUT     = L_SHORTCUT(L_CTR),
                ALLOW_MODIFY = A_ALLOW_MODIFY(L_CTR),
                ACTIVE       = A_ACTIVE(L_CTR),
                SS_CLASS     = A_SS_CLASS(L_CTR)
            WHERE SS = A_SS(L_CTR);
         END IF;
      ELSE
         INSERT INTO UTSS(SS, NAME, DESCRIPTION, COLOR, SHORTCUT,
                          ALLOW_MODIFY, ACTIVE, SS_CLASS)
         VALUES (A_SS(L_CTR), A_NAME(L_CTR),
                  A_DESCRIPTION(L_CTR), L_COLOR(L_CTR),
                  L_SHORTCUT(L_CTR), A_ALLOW_MODIFY(L_CTR),
                  A_ACTIVE(L_CTR), A_SS_CLASS(L_CTR));
      END IF;
   END LOOP;

   
   BEGIN
      INSERT INTO UTSHORTCUT(SHORTCUT, KEY_TP, VALUE_S)
      SELECT SHORTCUT, 'ss', SS
      FROM UTSS
      WHERE SHORTCUT <> HEXTORAW('0000000000000000');
   EXCEPTION
   WHEN DUP_VAL_ON_INDEX THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UQSHORTCUTKEY;
      RAISE STPERROR;
   END;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
   UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UQSS;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveStatus'));
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveStatus', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveStatus'));
END SAVESTATUS;

FUNCTION GETLIFECYCLELIST
(A_LC                  OUT    UNAPIGEN.VC2_TABLE_TYPE,    
 A_NAME                OUT    UNAPIGEN.VC20_TABLE_TYPE,   
 A_DESCRIPTION         OUT    UNAPIGEN.VC40_TABLE_TYPE,   
 A_SS                  OUT    UNAPIGEN.VC2_TABLE_TYPE,    
 A_SS_AFTER_REANALYSIS OUT    UNAPIGEN.VC2_TABLE_TYPE,    
 A_NR_OF_ROWS          IN OUT NUMBER,                     
 A_WHERE_CLAUSE        IN     VARCHAR2,                   
 A_NEXT_ROWS           IN     NUMBER)                     
RETURN NUMBER IS

L_LC                    VARCHAR2(2);
L_NAME                  VARCHAR2(20);
L_SS                    VARCHAR2(2);
L_DESCRIPTION           VARCHAR2(40);
L_SS_AFTER_REANALYSIS   VARCHAR2(2);

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_LC_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_LC_CURSOR);
         P_LC_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_LC_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      IF P_LC_CURSOR IS NULL THEN
         P_LC_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;

      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
         L_WHERE_CLAUSE := 'WHERE active = ''1'' ORDER BY lc, version'; 
      ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
         L_WHERE_CLAUSE := 'WHERE version_is_current = ''1'' '||
                           'AND lc = ''' || A_WHERE_CLAUSE || 
                           ''' ORDER BY lc, version'; 
      ELSE
         L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
      END IF;

      L_SQL_STRING := 'SELECT lc, name, description, ss, ss_after_reanalysis '||
                      'FROM dd' || UNAPIGEN.P_DD || '.uvlc ' || L_WHERE_CLAUSE;

      DBMS_SQL.PARSE(P_LC_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

      DBMS_SQL.DEFINE_COLUMN(P_LC_CURSOR, 1, L_LC, 2);
      DBMS_SQL.DEFINE_COLUMN(P_LC_CURSOR, 2, L_NAME, 20);
      DBMS_SQL.DEFINE_COLUMN(P_LC_CURSOR, 3, L_DESCRIPTION, 40);
      DBMS_SQL.DEFINE_COLUMN(P_LC_CURSOR, 4, L_SS, 2);
      DBMS_SQL.DEFINE_COLUMN(P_LC_CURSOR, 5, L_SS_AFTER_REANALYSIS, 2);
      L_RESULT := DBMS_SQL.EXECUTE(P_LC_CURSOR);
   END IF;

   L_RESULT := DBMS_SQL.FETCH_ROWS(P_LC_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_LC_CURSOR, 1, L_LC);
      DBMS_SQL.COLUMN_VALUE(P_LC_CURSOR, 2, L_NAME);
      DBMS_SQL.COLUMN_VALUE(P_LC_CURSOR, 3, L_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE(P_LC_CURSOR, 4, L_SS);
      DBMS_SQL.COLUMN_VALUE(P_LC_CURSOR, 5, L_SS_AFTER_REANALYSIS);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_LC(L_FETCHED_ROWS) := L_LC;
      A_NAME(L_FETCHED_ROWS) := L_NAME;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;
      A_SS(L_FETCHED_ROWS) := L_SS;
      A_SS_AFTER_REANALYSIS(L_FETCHED_ROWS) := L_SS_AFTER_REANALYSIS;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_LC_CURSOR);
      END IF;
   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_LC_CURSOR);
       P_LC_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      DBMS_SQL.CLOSE_CURSOR(P_LC_CURSOR);
      P_LC_CURSOR := NULL;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   L_SQLERRM := SQLERRM;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
          'GetLifeCycleList', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   IF DBMS_SQL.IS_OPEN(P_LC_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(P_LC_CURSOR);
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETLIFECYCLELIST;

FUNCTION GETLIFECYCLE
(A_LC                  OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_NAME                OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_DESCRIPTION         OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_INTENDED_USE        OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_IS_TEMPLATE         OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_INHERIT_AU          OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_SS_AFTER_REANALYSIS OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_LC_CLASS            OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_LOG_HS              OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ALLOW_MODIFY        OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ACTIVE              OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LC_LC               OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_SS                  OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_NR_OF_ROWS          IN OUT  NUMBER,                    
 A_WHERE_CLAUSE        IN      VARCHAR2)                  
RETURN NUMBER IS

L_LC                    VARCHAR2(2);
L_NAME                  VARCHAR2(20);
L_DESCRIPTION           VARCHAR2(40);
L_INTENDED_USE          VARCHAR2(40);
L_IS_TEMPLATE           CHAR(1);
L_INHERIT_AU            CHAR(1);
L_SS_AFTER_REANALYSIS   VARCHAR2(2);
L_LC_CLASS              VARCHAR2(2);
L_LOG_HS                CHAR(1);
L_ALLOW_MODIFY          CHAR(1);
L_ACTIVE                CHAR(1);
L_LC_LC                 VARCHAR2(2);
L_SS                    VARCHAR2(2);
L_LC_CURSOR             INTEGER;

BEGIN
   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'WHERE active = ''1'' ORDER BY lc, version'; 
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := 'WHERE version_is_current = ''1'' '||
                        'AND lc = ''' || A_WHERE_CLAUSE || ''' ORDER BY lc, version'; 
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_LC_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT lc, name, description, intended_use, is_template, inherit_au, ss_after_reanalysis, '||
                   'lc_class, log_hs, allow_modify, active, lc_lc, '||
                   'ss FROM dd' || UNAPIGEN.P_DD || '.uvlc ' || L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_LC_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_LC_CURSOR, 1, L_LC, 2);
   DBMS_SQL.DEFINE_COLUMN(L_LC_CURSOR, 2, L_NAME, 20);
   DBMS_SQL.DEFINE_COLUMN(L_LC_CURSOR, 3, L_DESCRIPTION , 40);
   DBMS_SQL.DEFINE_COLUMN(L_LC_CURSOR, 4, L_INTENDED_USE, 40);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_LC_CURSOR, 5, L_IS_TEMPLATE, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_LC_CURSOR, 6, L_INHERIT_AU, 1);
   DBMS_SQL.DEFINE_COLUMN(L_LC_CURSOR, 7, L_SS_AFTER_REANALYSIS, 2);
   DBMS_SQL.DEFINE_COLUMN(L_LC_CURSOR, 8, L_LC_CLASS, 2);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_LC_CURSOR, 9, L_LOG_HS, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_LC_CURSOR, 10, L_ALLOW_MODIFY, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_LC_CURSOR, 11, L_ACTIVE, 1);
   DBMS_SQL.DEFINE_COLUMN(L_LC_CURSOR, 12, L_LC_LC, 2);
   DBMS_SQL.DEFINE_COLUMN(L_LC_CURSOR, 13, L_SS, 2);

   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_LC_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_LC_CURSOR, 1, L_LC);
      DBMS_SQL.COLUMN_VALUE(L_LC_CURSOR, 2, L_NAME);
      DBMS_SQL.COLUMN_VALUE(L_LC_CURSOR, 3, L_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE(L_LC_CURSOR, 4, L_INTENDED_USE);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_LC_CURSOR, 5, L_IS_TEMPLATE);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_LC_CURSOR, 6, L_INHERIT_AU);
      DBMS_SQL.COLUMN_VALUE(L_LC_CURSOR, 7, L_SS_AFTER_REANALYSIS);
      DBMS_SQL.COLUMN_VALUE(L_LC_CURSOR, 8, L_LC_CLASS);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_LC_CURSOR, 9, L_LOG_HS);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_LC_CURSOR, 10, L_ALLOW_MODIFY);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_LC_CURSOR, 11, L_ACTIVE);
      DBMS_SQL.COLUMN_VALUE(L_LC_CURSOR, 12, L_LC_LC);
      DBMS_SQL.COLUMN_VALUE(L_LC_CURSOR, 13, L_SS);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_LC(L_FETCHED_ROWS) := L_LC;
      A_NAME(L_FETCHED_ROWS) := L_NAME;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;
      A_INTENDED_USE(L_FETCHED_ROWS) := L_INTENDED_USE;
      A_IS_TEMPLATE(L_FETCHED_ROWS) := L_IS_TEMPLATE;
      A_INHERIT_AU(L_FETCHED_ROWS) := L_INHERIT_AU;
      A_SS_AFTER_REANALYSIS(L_FETCHED_ROWS) := L_SS_AFTER_REANALYSIS;
      A_LC_CLASS(L_FETCHED_ROWS) := L_LC_CLASS;
      A_LOG_HS(L_FETCHED_ROWS) := L_LOG_HS;
      A_ALLOW_MODIFY(L_FETCHED_ROWS) := L_ALLOW_MODIFY;
      A_ACTIVE(L_FETCHED_ROWS) := L_ACTIVE;
      A_LC_LC(L_FETCHED_ROWS) := L_LC_LC;
      A_SS(L_FETCHED_ROWS) := L_SS;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_LC_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_LC_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   L_SQLERRM := SQLERRM;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
          'GetLifeCycle', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   IF DBMS_SQL.IS_OPEN(L_LC_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_LC_CURSOR);
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETLIFECYCLE;

FUNCTION GETLCTRCONDITION
(A_LC                  OUT     UNAPIGEN.VC2_TABLE_TYPE,  
 A_SS_FROM             OUT     UNAPIGEN.VC2_TABLE_TYPE,  
 A_SS_TO               OUT     UNAPIGEN.VC2_TABLE_TYPE,  
 A_TR_NO               OUT     UNAPIGEN.NUM_TABLE_TYPE,  
 A_CONDITION           OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_NR_OF_ROWS          IN OUT  NUMBER,                   
 A_WHERE_CLAUSE        IN      VARCHAR2)                 
RETURN NUMBER IS

L_NEXT_ROWS         INTEGER;
L_NR_OF_ROWS_IN     INTEGER;
L_NR_OF_ROWS_OUT    INTEGER;


L_LC                UNAPIGEN.VC2_TABLE_TYPE;
L_SS_FROM           UNAPIGEN.VC2_TABLE_TYPE;
L_SS_TO             UNAPIGEN.VC2_TABLE_TYPE;
L_TR_NO             UNAPIGEN.NUM_TABLE_TYPE;
L_CONDITION         UNAPIGEN.VC255_TABLE_TYPE;

BEGIN
   
   L_NR_OF_ROWS_IN := A_NR_OF_ROWS;
   L_NR_OF_ROWS_OUT := L_NR_OF_ROWS_IN;
   L_NEXT_ROWS := 0;
   L_RET_CODE := UNAPILC.GETLCTRCONDITION(A_LC,
                                          A_SS_FROM,
                                          A_SS_TO,
                                          A_TR_NO,
                                          A_CONDITION,
                                          L_NR_OF_ROWS_OUT,
                                          A_WHERE_CLAUSE,
                                          L_NEXT_ROWS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      RETURN(L_RET_CODE);
   ELSE
      A_NR_OF_ROWS := L_NR_OF_ROWS_OUT;
      IF L_NR_OF_ROWS_OUT = L_NR_OF_ROWS_IN THEN
         
         L_NEXT_ROWS := -1;
         L_RET_CODE := UNAPILC.GETLCTRCONDITION(L_LC,
                                                L_SS_FROM,
                                                L_SS_TO,
                                                L_TR_NO,
                                                L_CONDITION,
                                                L_NR_OF_ROWS_OUT,
                                                A_WHERE_CLAUSE,
                                                L_NEXT_ROWS);
         IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
            RETURN(L_RET_CODE);
         END IF;
      END IF;
   END IF;
   RETURN(L_RET_CODE);
   
EXCEPTION
WHEN OTHERS THEN
   L_SQLERRM := SQLERRM;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
          'GetLcTrCondition', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETLCTRCONDITION;

FUNCTION GETLCTRCONDITION
(A_LC                  OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_SS_FROM             OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_SS_TO               OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_TR_NO               OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_CONDITION           OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_NR_OF_ROWS          IN OUT  NUMBER,                    
 A_WHERE_CLAUSE        IN      VARCHAR2,                  
 A_NEXT_ROWS           IN      NUMBER)                    
RETURN NUMBER IS

L_LC              VARCHAR2(2);
L_SS_FROM         VARCHAR2(2);
L_SS_TO           VARCHAR2(2);
L_TR_NO           NUMBER;
L_CONDITION       VARCHAR2(255);

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_LCTR_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_LCTR_CURSOR);
         P_LCTR_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_LCTR_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;
   
   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
         L_WHERE_CLAUSE := 'ORDER BY lctr.lc, lctr.version, lctr.tr_no'; 
      ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
         L_WHERE_CLAUSE := ', dd'||UNAPIGEN.P_DD||'.uvlc lc WHERE lc.version_is_current = ''1'' '||
                           'AND lctr.version = lc.version '|| 
                           'AND lctr.lc = lc.lc '||
                           'AND lctr.lc = ''' || A_WHERE_CLAUSE || 
                           ''' ORDER BY lctr.lc, lctr.version, lctr.tr_no';
      ELSE
         L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
      END IF;

      L_SQL_STRING := 'SELECT lctr.lc, lctr.ss_from, lctr.ss_to, lctr.tr_no, lctr.condition '||
                      'FROM dd' || UNAPIGEN.P_DD || '.uvlctr lctr ' || L_WHERE_CLAUSE;

      IF P_LCTR_CURSOR IS NULL THEN
         P_LCTR_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;

      DBMS_SQL.PARSE(P_LCTR_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

      DBMS_SQL.DEFINE_COLUMN(P_LCTR_CURSOR, 1, L_LC, 2);
      DBMS_SQL.DEFINE_COLUMN(P_LCTR_CURSOR, 2, L_SS_FROM, 2);
      DBMS_SQL.DEFINE_COLUMN(P_LCTR_CURSOR, 3, L_SS_TO, 2);
      DBMS_SQL.DEFINE_COLUMN(P_LCTR_CURSOR, 4, L_TR_NO);
      DBMS_SQL.DEFINE_COLUMN(P_LCTR_CURSOR, 5, L_CONDITION, 1000);

      L_RESULT := DBMS_SQL.EXECUTE(P_LCTR_CURSOR);
   END IF;
   
   L_RESULT := DBMS_SQL.FETCH_ROWS(P_LCTR_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_LCTR_CURSOR, 1, L_LC);
      DBMS_SQL.COLUMN_VALUE(P_LCTR_CURSOR, 2, L_SS_FROM);
      DBMS_SQL.COLUMN_VALUE(P_LCTR_CURSOR, 3, L_SS_TO);
      DBMS_SQL.COLUMN_VALUE(P_LCTR_CURSOR, 4, L_TR_NO);
      DBMS_SQL.COLUMN_VALUE(P_LCTR_CURSOR, 5, L_CONDITION);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_LC(L_FETCHED_ROWS) := L_LC;
      A_SS_FROM(L_FETCHED_ROWS) := L_SS_FROM;
      A_SS_TO(L_FETCHED_ROWS) := L_SS_TO;
      A_TR_NO(L_FETCHED_ROWS) := L_TR_NO;
      A_CONDITION(L_FETCHED_ROWS) := L_CONDITION;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_LCTR_CURSOR);
      END IF;
   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_LCTR_CURSOR);
       P_LCTR_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_LCTR_CURSOR);
      P_LCTR_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;
   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   L_SQLERRM := SQLERRM;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
          'GetLcTrCondition', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   IF DBMS_SQL.IS_OPEN(P_LCTR_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(P_LCTR_CURSOR);
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETLCTRCONDITION;

FUNCTION GETLCTRAUTHORISED
(A_LC                  OUT     UNAPIGEN.VC2_TABLE_TYPE,  
 A_SS_FROM             OUT     UNAPIGEN.VC2_TABLE_TYPE,  
 A_SS_TO               OUT     UNAPIGEN.VC2_TABLE_TYPE,  
 A_TR_NO               OUT     UNAPIGEN.NUM_TABLE_TYPE,  
 A_US                  OUT     UNAPIGEN.VC20_TABLE_TYPE, 
 A_NR_OF_ROWS          IN OUT  NUMBER,                   
 A_WHERE_CLAUSE        IN      VARCHAR2)                 
RETURN NUMBER IS

L_NEXT_ROWS        INTEGER;
L_NR_OF_ROWS_IN     INTEGER;
L_NR_OF_ROWS_OUT    INTEGER;


L_LC                UNAPIGEN.VC2_TABLE_TYPE;
L_SS_FROM           UNAPIGEN.VC2_TABLE_TYPE;
L_SS_TO             UNAPIGEN.VC2_TABLE_TYPE;
L_TR_NO             UNAPIGEN.NUM_TABLE_TYPE;
L_US                UNAPIGEN.VC20_TABLE_TYPE;

BEGIN
   
   L_NR_OF_ROWS_IN := A_NR_OF_ROWS;
   L_NR_OF_ROWS_OUT := L_NR_OF_ROWS_IN;
   L_NEXT_ROWS := 0;
   L_RET_CODE := UNAPILC.GETLCTRAUTHORISED(A_LC,
                                           A_SS_FROM,
                                           A_SS_TO,
                                           A_TR_NO,
                                           A_US,
                                           L_NR_OF_ROWS_OUT,
                                           A_WHERE_CLAUSE,
                                           L_NEXT_ROWS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      RETURN(L_RET_CODE);
   ELSE
      A_NR_OF_ROWS := L_NR_OF_ROWS_OUT;
      IF L_NR_OF_ROWS_OUT = L_NR_OF_ROWS_IN THEN
         
         L_NEXT_ROWS := -1;
         L_RET_CODE := UNAPILC.GETLCTRAUTHORISED(L_LC,
                                                 L_SS_FROM,
                                                 L_SS_TO,
                                                 L_TR_NO,
                                                 L_US,
                                                 L_NR_OF_ROWS_OUT,
                                                 A_WHERE_CLAUSE,
                                                 L_NEXT_ROWS);
         IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
            RETURN(L_RET_CODE);
         END IF;
      END IF;
   END IF;
   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   L_SQLERRM := SQLERRM;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
          'GetLcTrAuthorised', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETLCTRAUTHORISED;

FUNCTION GETLCTRAUTHORISED
(A_LC                  OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_SS_FROM             OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_SS_TO               OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_TR_NO               OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_US                  OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_NR_OF_ROWS          IN OUT  NUMBER,                    
 A_WHERE_CLAUSE        IN      VARCHAR2,                  
 A_NEXT_ROWS           IN      NUMBER)                    
RETURN NUMBER IS

L_LC              VARCHAR2(2);
L_SS_FROM         VARCHAR2(2);
L_SS_TO           VARCHAR2(2);
L_TR_NO           NUMBER;
L_US              VARCHAR2(20);

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_LCUS_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_LCUS_CURSOR);
         P_LCUS_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_LCUS_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;
   
   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
         L_WHERE_CLAUSE := 'ORDER BY lcus.lc, lcus.version, lcus.tr_no, lcus.us'; 
      ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
         L_WHERE_CLAUSE := ', dd'||UNAPIGEN.P_DD||'.uvlc lc WHERE lc.version_is_current = ''1'' '||
                           'AND lcus.version = lc.version '||
                           'AND lcus.lc = lc.lc '||
                           'AND lcus.lc = ''' || A_WHERE_CLAUSE || 
                           ''' ORDER BY lcus.lc, lcus.version, lcus.tr_no, lcus.us';
      ELSE
         L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
      END IF;

      L_SQL_STRING := 'SELECT lcus.lc, lcus.ss_from, lcus.ss_to, lcus.tr_no, lcus.us '||
                      'FROM dd' || UNAPIGEN.P_DD || '.uvlcus lcus ' || L_WHERE_CLAUSE;
      IF P_LCUS_CURSOR IS NULL THEN
         P_LCUS_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;

      DBMS_SQL.PARSE(P_LCUS_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

      DBMS_SQL.DEFINE_COLUMN(P_LCUS_CURSOR, 1, L_LC, 2);
      DBMS_SQL.DEFINE_COLUMN(P_LCUS_CURSOR, 2, L_SS_FROM, 2);
      DBMS_SQL.DEFINE_COLUMN(P_LCUS_CURSOR, 3, L_SS_TO, 2);
      DBMS_SQL.DEFINE_COLUMN(P_LCUS_CURSOR, 4, L_TR_NO);
      DBMS_SQL.DEFINE_COLUMN(P_LCUS_CURSOR, 5, L_US, 20);

      L_RESULT := DBMS_SQL.EXECUTE(P_LCUS_CURSOR);
   END IF;
   
   L_RESULT := DBMS_SQL.FETCH_ROWS(P_LCUS_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_LCUS_CURSOR, 1, L_LC);
      DBMS_SQL.COLUMN_VALUE(P_LCUS_CURSOR, 2, L_SS_FROM);
      DBMS_SQL.COLUMN_VALUE(P_LCUS_CURSOR, 3, L_SS_TO);
      DBMS_SQL.COLUMN_VALUE(P_LCUS_CURSOR, 4, L_TR_NO);
      DBMS_SQL.COLUMN_VALUE(P_LCUS_CURSOR, 5, L_US);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_LC(L_FETCHED_ROWS) := L_LC;
      A_SS_FROM(L_FETCHED_ROWS) := L_SS_FROM;
      A_SS_TO(L_FETCHED_ROWS) := L_SS_TO;
      A_TR_NO(L_FETCHED_ROWS) := L_TR_NO;
      A_US(L_FETCHED_ROWS) := L_US;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_LCUS_CURSOR);
      END IF;
   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_LCUS_CURSOR);
       P_LCUS_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_LCUS_CURSOR);
      P_LCUS_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;
   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   L_SQLERRM := SQLERRM;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
          'GetLcTrAuthorised', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   IF DBMS_SQL.IS_OPEN(P_LCUS_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(P_LCUS_CURSOR);
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETLCTRAUTHORISED;

FUNCTION GETLCTRACTION
(A_LC                  OUT     UNAPIGEN.VC2_TABLE_TYPE,  
 A_SS_FROM             OUT     UNAPIGEN.VC2_TABLE_TYPE,  
 A_SS_TO               OUT     UNAPIGEN.VC2_TABLE_TYPE,  
 A_TR_NO               OUT     UNAPIGEN.NUM_TABLE_TYPE,  
 A_AF                  OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_NR_OF_ROWS          IN OUT  NUMBER,                   
 A_WHERE_CLAUSE        IN      VARCHAR2)                 
RETURN NUMBER IS

L_NEXT_ROWS         INTEGER;
L_NR_OF_ROWS_IN     INTEGER;
L_NR_OF_ROWS_OUT    INTEGER;


L_LC                UNAPIGEN.VC2_TABLE_TYPE;
L_SS_FROM           UNAPIGEN.VC2_TABLE_TYPE;
L_SS_TO             UNAPIGEN.VC2_TABLE_TYPE;
L_TR_NO             UNAPIGEN.NUM_TABLE_TYPE;
L_AF                UNAPIGEN.VC255_TABLE_TYPE;

BEGIN
   
   L_NR_OF_ROWS_IN := A_NR_OF_ROWS;
   L_NR_OF_ROWS_OUT := L_NR_OF_ROWS_IN;
   L_NEXT_ROWS := 0;
   L_RET_CODE := UNAPILC.GETLCTRACTION(A_LC,
                                       A_SS_FROM,
                                       A_SS_TO,
                                       A_TR_NO,
                                       A_AF,
                                       L_NR_OF_ROWS_OUT,
                                       A_WHERE_CLAUSE,
                                       L_NEXT_ROWS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      RETURN(L_RET_CODE);
   ELSE
      A_NR_OF_ROWS := L_NR_OF_ROWS_OUT;
      IF L_NR_OF_ROWS_OUT = L_NR_OF_ROWS_IN THEN
         
         L_NEXT_ROWS := -1;
         L_RET_CODE := UNAPILC.GETLCTRACTION(L_LC,
                                             L_SS_FROM,
                                             L_SS_TO,
                                             L_TR_NO,
                                             L_AF,
                                             L_NR_OF_ROWS_OUT,
                                             A_WHERE_CLAUSE,
                                             L_NEXT_ROWS);
         IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
            RETURN(L_RET_CODE);
         END IF;
      END IF;
   END IF;
   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   L_SQLERRM := SQLERRM;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
          'GetLcTrAction', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETLCTRACTION;

FUNCTION GETLCTRACTION
(A_LC                  OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_SS_FROM             OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_SS_TO               OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_TR_NO               OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_AF                  OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_NR_OF_ROWS          IN OUT  NUMBER,                    
 A_WHERE_CLAUSE        IN      VARCHAR2,                  
 A_NEXT_ROWS           IN      NUMBER)                    
RETURN NUMBER IS

L_LC              VARCHAR2(2);
L_SS_FROM         VARCHAR2(2);
L_SS_TO           VARCHAR2(2);
L_TR_NO           NUMBER;
L_AF              VARCHAR2(255);

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_LCAF_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_LCAF_CURSOR);
         P_LCAF_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_LCAF_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;
   
   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
         L_WHERE_CLAUSE := 'ORDER BY lcaf.lc, lcaf.version, lcaf.tr_no, lcaf.seq'; 
      ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
         L_WHERE_CLAUSE := ', dd'||UNAPIGEN.P_DD||'.uvlc lc WHERE lc.version_is_current = ''1'' '||
                           'AND lcaf.version = lc.version '||
                           'AND lcaf.lc = lc.lc '||
                           'AND lcaf.lc = ''' || A_WHERE_CLAUSE || 
                           ''' ORDER BY lcaf.lc, lcaf.version, lcaf.tr_no, lcaf.seq';
      ELSE
         L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
      END IF;

      L_SQL_STRING := 'SELECT lcaf.lc, lcaf.ss_from, lcaf.ss_to, lcaf.tr_no, lcaf.af FROM dd'||
                       UNAPIGEN.P_DD || '.uvlcaf lcaf ' || L_WHERE_CLAUSE;
      IF P_LCAF_CURSOR IS NULL THEN
         P_LCAF_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;

      DBMS_SQL.PARSE(P_LCAF_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

      DBMS_SQL.DEFINE_COLUMN(P_LCAF_CURSOR, 1, L_LC, 2);
      DBMS_SQL.DEFINE_COLUMN(P_LCAF_CURSOR, 2, L_SS_FROM, 2);
      DBMS_SQL.DEFINE_COLUMN(P_LCAF_CURSOR, 3, L_SS_TO, 2);
      DBMS_SQL.DEFINE_COLUMN(P_LCAF_CURSOR, 4, L_TR_NO);
      DBMS_SQL.DEFINE_COLUMN(P_LCAF_CURSOR, 5, L_AF, 1000);

      L_RESULT := DBMS_SQL.EXECUTE(P_LCAF_CURSOR);
   END IF;
   
   L_RESULT := DBMS_SQL.FETCH_ROWS(P_LCAF_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_LCAF_CURSOR, 1, L_LC);
      DBMS_SQL.COLUMN_VALUE(P_LCAF_CURSOR, 2, L_SS_FROM);
      DBMS_SQL.COLUMN_VALUE(P_LCAF_CURSOR, 3, L_SS_TO);
      DBMS_SQL.COLUMN_VALUE(P_LCAF_CURSOR, 4, L_TR_NO);
      DBMS_SQL.COLUMN_VALUE(P_LCAF_CURSOR, 5, L_AF);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_LC(L_FETCHED_ROWS) := L_LC;
      A_SS_FROM(L_FETCHED_ROWS) := L_SS_FROM;
      A_SS_TO(L_FETCHED_ROWS) := L_SS_TO;
      A_TR_NO(L_FETCHED_ROWS) := L_TR_NO;
      A_AF(L_FETCHED_ROWS) := L_AF;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_LCAF_CURSOR);
      END IF;
   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_LCAF_CURSOR);
       P_LCAF_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_LCAF_CURSOR);
      P_LCAF_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;
   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   L_SQLERRM := SQLERRM;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
          'GetLcTrAction', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   IF DBMS_SQL.IS_OPEN(P_LCAF_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(P_LCAF_CURSOR);
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETLCTRACTION;

FUNCTION SAVELIFECYCLE
(A_LC                  IN      VARCHAR2,                
 A_NAME                IN      VARCHAR2,                
 A_DESCRIPTION         IN      VARCHAR2,                
 A_INTENDED_USE        IN      VARCHAR2,                
 A_IS_TEMPLATE         IN      CHAR,                    
 A_INHERIT_AU          IN      CHAR,                    
 A_SS_AFTER_REANALYSIS IN      VARCHAR2,                
 A_LC_CLASS            IN      VARCHAR2,                
 A_LOG_HS              IN      CHAR,                    
 A_MODIFY_REASON       IN      VARCHAR2)                
RETURN NUMBER IS

A_VERSION                   VARCHAR2(20);
L_SS                        VARCHAR2(2);
L_LOG_HS                    CHAR(1);
L_ALLOW_MODIFY              CHAR(1);
L_ACTIVE                    CHAR(1);
L_INSERT                    BOOLEAN;
L_LC_LC                     VARCHAR2(2);
L_LC_LC_VERSION             VARCHAR2(20);

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_LC, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_IS_TEMPLATE, ' ') NOT IN ('1', '0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_TEMPLATE;
      RAISE STPERROR;
   END IF;

   IF NVL(A_LOG_HS, ' ') NOT IN ('1', '0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_LOGHS;
      RAISE STPERROR;
   END IF;

   IF NVL(A_INHERIT_AU, ' ') NOT IN ('1', '0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INHERITAU;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('lc', A_LC, A_VERSION, L_LC_LC, L_LC_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE = UNAPIGEN.DBERR_NOOBJECT THEN
      L_INSERT := TRUE;
   ELSIF L_RET_CODE = UNAPIGEN.DBERR_SUCCESS THEN
      L_INSERT := FALSE;
   ELSE
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   IF L_INSERT THEN                   
      L_LC_LC := '@L';
      
      BEGIN
         SELECT VERSION
         INTO L_LC_LC_VERSION
         FROM UTLC
         WHERE LC = '@L'
         AND VERSION_IS_CURRENT = '1';
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOCURRENTLCVERSION;
         RAISE STPERROR;         
      END;
      
      INSERT INTO UTLC(LC, VERSION, VERSION_IS_CURRENT, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ, EFFECTIVE_TILL, EFFECTIVE_TILL_TZ, NAME, DESCRIPTION, 
                       INTENDED_USE, IS_TEMPLATE, INHERIT_AU, SS_AFTER_REANALYSIS, LC_CLASS, LOG_HS,
                       LC_LC, LC_LC_VERSION, ALLOW_MODIFY, ACTIVE)
      VALUES(A_LC, A_VERSION, '1', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, NULL, A_NAME, A_DESCRIPTION, 
             A_INTENDED_USE, A_IS_TEMPLATE, A_INHERIT_AU, A_SS_AFTER_REANALYSIS, A_LC_CLASS, A_LOG_HS,
             L_LC_LC, L_LC_LC_VERSION, '#', '0');
      L_EVENT_TP := 'ObjectCreated';
   ELSE                                 
      UPDATE UTLC
      SET NAME                = A_NAME,
          DESCRIPTION         = A_DESCRIPTION,
          INTENDED_USE        = A_INTENDED_USE,
          IS_TEMPLATE         = A_IS_TEMPLATE,
          INHERIT_AU          = A_INHERIT_AU,
          SS_AFTER_REANALYSIS = A_SS_AFTER_REANALYSIS,
          LC_CLASS            = A_LC_CLASS,
          LOG_HS              = A_LOG_HS,
          ALLOW_MODIFY        = '#'
      WHERE VERSION = A_VERSION
        AND LC = A_LC;
      L_EVENT_TP := 'ObjectUpdated';
   END IF;

   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT('SaveLifeCycle', UNAPIGEN.P_EVMGR_NAME, 'lc', A_LC, L_LC_LC, 
                                   L_LC_LC_VERSION, L_SS, L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);

   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF NVL(L_LOG_HS, ' ') <> A_LOG_HS THEN
      IF A_LOG_HS = '1' THEN
         INSERT INTO UTLCHS (LC, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_LC, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 'History switched ON', 
                 'Audit trail is turned on.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      ELSE
         INSERT INTO UTLCHS (LC, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_LC, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 'History switched OFF', 
                 'Audit trail is turned off.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   END IF;

   IF NVL(L_LOG_HS, ' ') = '1' THEN
      IF L_EVENT_TP = 'ObjectCreated' THEN
         INSERT INTO UTLCHS (LC, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES(A_LC, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                'life cycle "'||A_LC||'" is created.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                L_EV_SEQ_NR);
      ELSE
         INSERT INTO UTLCHS (LC, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES(A_LC, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                'life cycle "'||A_LC||'" is updated.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                L_EV_SEQ_NR);
      END IF;
   ELSE
      
      
      IF L_EVENT_TP = 'ObjectCreated' THEN
         INSERT INTO UTLCHS (LC, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES(A_LC, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                'life cycle "'||A_LC||'" is created.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                L_EV_SEQ_NR);
      END IF;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
     UNAPIGEN.LOGERROR('SaveLifeCycle', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveLifeCycle'));
END SAVELIFECYCLE;

FUNCTION SAVELCTRCONDITION
(A_LC                  IN      VARCHAR2,                 
 A_SS_FROM             IN      UNAPIGEN.VC2_TABLE_TYPE,  
 A_SS_TO               IN      UNAPIGEN.VC2_TABLE_TYPE,  
 A_TR_NO               IN      UNAPIGEN.NUM_TABLE_TYPE,  
 A_CONDITION           IN      UNAPIGEN.VC255_TABLE_TYPE, 
 A_NR_OF_ROWS          IN      NUMBER,                   
 A_MODIFY_REASON       IN      VARCHAR2)                 
RETURN NUMBER IS
BEGIN
   RETURN(UNAPILC.SAVELCTRCONDITION(A_LC, A_SS_FROM, A_SS_TO, A_TR_NO, A_CONDITION, A_NR_OF_ROWS,-1, A_MODIFY_REASON));
END SAVELCTRCONDITION;

FUNCTION SAVELCTRCONDITION
(A_LC                  IN      VARCHAR2,                  
 A_SS_FROM             IN      UNAPIGEN.VC2_TABLE_TYPE,   
 A_SS_TO               IN      UNAPIGEN.VC2_TABLE_TYPE,   
 A_TR_NO               IN      UNAPIGEN.NUM_TABLE_TYPE,   
 A_CONDITION           IN      UNAPIGEN.VC255_TABLE_TYPE, 
 A_NR_OF_ROWS          IN      NUMBER,                    
 A_NEXT_ROWS           IN      NUMBER,                    
 A_MODIFY_REASON       IN      VARCHAR2)                  
RETURN NUMBER IS

A_VERSION          VARCHAR2(20);
L_LC_LC            VARCHAR2(2);
L_LC_LC_VERSION    VARCHAR2(20);
L_SS               VARCHAR2(2);
L_LOG_HS           CHAR(1);
L_ALLOW_MODIFY     CHAR(1);
L_ACTIVE           CHAR(1);

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   L_SQLERRM := NULL;
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_LC, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_NEXT_ROWS, 0) = 0 THEN
      IF NVL(P_SAVELCTR_CALLS, 0) <> 0 THEN
         L_SQLERRM := 'SaveLcTrCondition termination call never called for previous life cycle ! (a_next_rows=-1) a_next_rows='||
                      TO_CHAR(A_NEXT_ROWS);
         RAISE STPERROR;
      END IF;
      P_SAVELCTR_CALLS := 1;
   ELSIF NVL(A_NEXT_ROWS, 0) = -1 THEN
      P_SAVELCTR_CALLS := NVL(P_SAVELCTR_CALLS, 0) + 1;      
   ELSIF NVL(A_NEXT_ROWS, 0) = 1 THEN
      IF NVL(P_SAVELCTR_CALLS, 0) = 0 THEN   
         L_SQLERRM := 'SaveLcTrCondition startup call never called ! (a_next_rows=0)';
         RAISE STPERROR;   
      END IF;
      IF NVL(UNAPIGEN.P_TXN_LEVEL, 0) <= 1 THEN   
         L_SQLERRM := 'SaveLcTrCondition called with a_next_rows=1 in a non MST transaction !';
         RAISE STPERROR;   
      END IF;
      P_SAVELCTR_CALLS := NVL(P_SAVELCTR_CALLS, 0) + 1;      
   ELSE
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NEXTROWS;
      RAISE STPERROR;
   END IF;         
   IF P_SAVELCTR_CALLS = 1 THEN
      P_SAVELCTR_TR_SEQ := UNAPIGEN.P_TR_SEQ;
   ELSE
      IF UNAPIGEN.P_TR_SEQ <> P_SAVELCTR_TR_SEQ THEN
         L_SQLERRM := 'Successive calls of SaveLcTrCondition not in the same transaction !';
         RAISE STPERROR;   
      END IF;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('lc', A_LC, A_VERSION, L_LC_LC, L_LC_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTLC
   SET ALLOW_MODIFY = '#'
   WHERE VERSION = A_VERSION
     AND LC = A_LC;

   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR;
   END IF;

   
   IF NVL(P_SAVELCTR_CALLS, 0) = 1 THEN
      DELETE FROM UTLCTR
      WHERE VERSION = A_VERSION
        AND LC = A_LC;
   END IF;

   FOR I IN 1..A_NR_OF_ROWS LOOP
      IF NVL(A_SS_FROM(I), ' ') = ' ' OR
         NVL(A_SS_TO(I), ' ') = ' ' OR
         A_TR_NO(I) IS NULL THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
      END IF;

      INSERT INTO UTLCTR(LC, VERSION, SS_FROM, SS_TO, TR_NO, CONDITION)
      VALUES(A_LC, A_VERSION, A_SS_FROM(I), A_SS_TO(I), A_TR_NO(I), A_CONDITION(I));
   END LOOP;

   
   IF NVL(A_NEXT_ROWS, 0) = -1 THEN 
      L_EVENT_TP := 'UsedObjectsUpdated';
      L_EV_SEQ_NR := -1;
      L_RESULT :=
            UNAPIEV.INSERTEVENT('SaveLcTrCondition', UNAPIGEN.P_EVMGR_NAME, 'lc', A_LC, L_LC_LC, 
                                L_LC_LC_VERSION, L_SS, L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
      IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS  THEN
         UNAPIGEN.P_TXN_ERROR := L_RESULT;
         RAISE STPERROR;
      END IF;

      IF L_LOG_HS = '1' THEN
         INSERT INTO UTLCHS (LC, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_LC, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'life cycle "'||A_LC||'" transitions/conditions are updated.', 
                 CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS, 0) = -1 THEN
      
      P_SAVELCTR_CALLS := 0;
   END IF;
   
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
     UNAPIGEN.LOGERROR('SaveLcTrCondition', SQLERRM);
   END IF;
   
   P_SAVELCTR_CALLS := 0;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveLcTrCondition'));
END SAVELCTRCONDITION;

FUNCTION SAVELCTRAUTHORISED
(A_LC                  IN      VARCHAR2,                 
 A_SS_FROM             IN      UNAPIGEN.VC2_TABLE_TYPE,  
 A_SS_TO               IN      UNAPIGEN.VC2_TABLE_TYPE,  
 A_TR_NO               IN      UNAPIGEN.NUM_TABLE_TYPE,  
 A_US                  IN      UNAPIGEN.VC20_TABLE_TYPE, 
 A_NR_OF_ROWS          IN      NUMBER,                   
 A_MODIFY_REASON       IN      VARCHAR2)                 
RETURN NUMBER IS
BEGIN
   RETURN(UNAPILC.SAVELCTRAUTHORISED(A_LC, A_SS_FROM, A_SS_TO, A_TR_NO, A_US, A_NR_OF_ROWS,-1, A_MODIFY_REASON));
END SAVELCTRAUTHORISED;

FUNCTION SAVELCTRAUTHORISED
(A_LC                  IN      VARCHAR2,                 
 A_SS_FROM             IN      UNAPIGEN.VC2_TABLE_TYPE,  
 A_SS_TO               IN      UNAPIGEN.VC2_TABLE_TYPE,  
 A_TR_NO               IN      UNAPIGEN.NUM_TABLE_TYPE,  
 A_US                  IN      UNAPIGEN.VC20_TABLE_TYPE, 
 A_NR_OF_ROWS          IN      NUMBER,                   
 A_NEXT_ROWS           IN      NUMBER,                    
 A_MODIFY_REASON       IN      VARCHAR2)                 
RETURN NUMBER IS

A_VERSION         VARCHAR2(20);
L_LC_LC           VARCHAR2(2);
L_LC_LC_VERSION   VARCHAR2(20);
L_SS              VARCHAR2(2);
L_LOG_HS          CHAR(1);
L_ALLOW_MODIFY    CHAR(1);
L_ACTIVE          CHAR(1);

CURSOR L_USTR_CURSOR (C_LC VARCHAR2, C_VERSION VARCHAR2) IS
   SELECT COUNT(A.LC) 
   FROM UTLCUS A
   WHERE A.VERSION = C_VERSION
     AND A.LC = C_LC
     AND (A.SS_FROM, A.SS_TO, A.TR_NO) NOT IN
         (SELECT B.SS_FROM, B.SS_TO, B.TR_NO FROM UTLCTR B WHERE B.VERSION=C_VERSION AND B.LC=C_LC);

L_CHECK_TR     INTEGER;

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   L_SQLERRM := NULL;
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_LC, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_NEXT_ROWS, 0) = 0 THEN
      IF NVL(P_SAVELCUS_CALLS, 0) <> 0 THEN
         L_SQLERRM := 'SaveLcTrAuthorised termination call never called for previous life cycle ! (a_next_rows=-1) a_next_rows='||
                      TO_CHAR(A_NEXT_ROWS);
         RAISE STPERROR;
      END IF;
      P_SAVELCUS_CALLS := 1;
   ELSIF NVL(A_NEXT_ROWS, 0) = -1 THEN
      P_SAVELCUS_CALLS := NVL(P_SAVELCUS_CALLS, 0) + 1;      
   ELSIF NVL(A_NEXT_ROWS, 0) = 1 THEN
      IF NVL(P_SAVELCUS_CALLS, 0) = 0 THEN   
         L_SQLERRM := 'SaveLcTrAuthorised startup call never called ! (a_next_rows=0)';
         RAISE STPERROR;   
      END IF;
      IF NVL(UNAPIGEN.P_TXN_LEVEL, 0) <= 1 THEN   
         L_SQLERRM := 'SaveLcTrAuthorised called with a_next_rows=1 in a non MST transaction !';
         RAISE STPERROR;   
      END IF;
      P_SAVELCUS_CALLS := NVL(P_SAVELCUS_CALLS, 0) + 1;      
   ELSE
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NEXTROWS;
      RAISE STPERROR;
   END IF;         
   IF P_SAVELCUS_CALLS = 1 THEN
      P_SAVELCUS_TR_SEQ := UNAPIGEN.P_TR_SEQ;
   ELSE
      IF UNAPIGEN.P_TR_SEQ <> P_SAVELCUS_TR_SEQ THEN
         L_SQLERRM := 'Successive calls of SaveLcTrAuthorised not in the same transaction !';
         RAISE STPERROR;   
      END IF;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('lc', A_LC, A_VERSION, L_LC_LC, L_LC_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTLC
   SET ALLOW_MODIFY = '#'
   WHERE VERSION = A_VERSION
     AND LC = A_LC;

   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR;
   END IF;

   
   IF NVL(P_SAVELCUS_CALLS, 0) = 1 THEN
      DELETE FROM UTLCUS
      WHERE VERSION = A_VERSION
        AND LC = A_LC;
   END IF;

   FOR I IN 1..A_NR_OF_ROWS LOOP
      IF NVL(A_SS_FROM(I), ' ') = ' ' OR
         NVL(A_SS_TO(I), ' ') = ' ' OR
         A_TR_NO(I) IS NULL THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
      END IF;

      INSERT INTO UTLCUS(LC, VERSION, SS_FROM, SS_TO, TR_NO, US)
      VALUES(A_LC, A_VERSION, A_SS_FROM(I), A_SS_TO(I), A_TR_NO(I), A_US(I));
   END LOOP;

   
   IF NVL(A_NEXT_ROWS, 0) = -1 THEN 
      
      OPEN L_USTR_CURSOR(A_LC, A_VERSION);
      FETCH L_USTR_CURSOR
      INTO L_CHECK_TR;
      CLOSE L_USTR_CURSOR;

      IF L_CHECK_TR > 0 THEN
         L_SQLERRM := TO_CHAR(L_CHECK_TR)||' user authorisation(s) on non existing transitions for lc='||
                      A_LC||' version='||A_VERSION;
         RAISE STPERROR;
      END IF;

      L_EVENT_TP := 'UsedObjectsUpdated';
      L_EV_SEQ_NR := -1;
      L_RESULT :=
            UNAPIEV.INSERTEVENT('SaveLcTrAuthorised', UNAPIGEN.P_EVMGR_NAME, 'lc', A_LC, L_LC_LC, 
                                L_LC_LC_VERSION, L_SS, L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);

      IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS  THEN
         UNAPIGEN.P_TXN_ERROR := L_RESULT;
         RAISE STPERROR;
      END IF;

      IF L_LOG_HS = '1' THEN
         INSERT INTO UTLCHS (LC, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_LC, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'life cycle "'||A_LC||'" authorisations for manual transitions are updated.', 
                 CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS, 0) = -1 THEN
      
      P_SAVELCUS_CALLS := 0;
   END IF;
   
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
     UNAPIGEN.LOGERROR('SaveLcTrAuthorised', SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('SaveLcTrAuthorised', L_SQLERRM);
   END IF;
   IF L_USTR_CURSOR%ISOPEN THEN
      CLOSE L_USTR_CURSOR;
   END IF;
   
   P_SAVELCUS_CALLS := 0;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveLcTrAuthorised'));
END SAVELCTRAUTHORISED;

FUNCTION SAVELCTRACTION
(A_LC                  IN      VARCHAR2,                 
 A_SS_FROM             IN      UNAPIGEN.VC2_TABLE_TYPE,  
 A_SS_TO               IN      UNAPIGEN.VC2_TABLE_TYPE,  
 A_TR_NO               IN      UNAPIGEN.NUM_TABLE_TYPE,  
 A_AF                  IN      UNAPIGEN.VC255_TABLE_TYPE, 
 A_NR_OF_ROWS          IN      NUMBER,                   
 A_MODIFY_REASON       IN      VARCHAR2)                 
RETURN NUMBER IS
BEGIN
   RETURN(UNAPILC.SAVELCTRACTION(A_LC, A_SS_FROM, A_SS_TO, A_TR_NO, A_AF, A_NR_OF_ROWS,-1, A_MODIFY_REASON));
END SAVELCTRACTION;

FUNCTION SAVELCTRACTION
(A_LC                  IN      VARCHAR2,                 
 A_SS_FROM             IN      UNAPIGEN.VC2_TABLE_TYPE,  
 A_SS_TO               IN      UNAPIGEN.VC2_TABLE_TYPE,  
 A_TR_NO               IN      UNAPIGEN.NUM_TABLE_TYPE,  
 A_AF                  IN      UNAPIGEN.VC255_TABLE_TYPE, 
 A_NR_OF_ROWS          IN      NUMBER,                   
 A_NEXT_ROWS           IN      NUMBER,                    
 A_MODIFY_REASON       IN      VARCHAR2)                 
RETURN NUMBER IS

A_VERSION          VARCHAR2(20);
L_LC_LC            VARCHAR2(2);
L_LC_LC_VERSION    VARCHAR2(20);
L_SS               VARCHAR2(2);
L_LOG_HS           CHAR(1);
L_ALLOW_MODIFY     CHAR(1);
L_ACTIVE           CHAR(1);

CURSOR L_AFTR_CURSOR (C_LC VARCHAR2, C_VERSION VARCHAR2) IS
   SELECT COUNT(A.LC) 
   FROM UTLCAF A
   WHERE A.VERSION = C_VERSION
     AND A.LC = C_LC
     AND (A.SS_FROM, A.SS_TO, A.TR_NO) NOT IN
         (SELECT B.SS_FROM, B.SS_TO, B.TR_NO FROM UTLCTR B WHERE B.VERSION=C_VERSION AND B.LC=C_LC);
         
L_CHECK_TR     INTEGER;

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   L_SQLERRM := NULL;
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_LC, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_NEXT_ROWS, 0) = 0 THEN
      IF NVL(P_SAVELCAF_CALLS, 0) <> 0 THEN
         L_SQLERRM := 'SaveLcTrAction termination call never called for previous life cycle ! (a_next_rows=-1) a_next_rows='||
                      TO_CHAR(A_NEXT_ROWS);
         RAISE STPERROR;
      END IF;
      P_SAVELCAF_CALLS := 1;
   ELSIF NVL(A_NEXT_ROWS, 0) = -1 THEN
      P_SAVELCAF_CALLS := NVL(P_SAVELCAF_CALLS, 0) + 1;      
   ELSIF NVL(A_NEXT_ROWS, 0) = 1 THEN
      IF NVL(P_SAVELCAF_CALLS, 0) = 0 THEN   
         L_SQLERRM := 'SaveLcTrAction startup call never called ! (a_next_rows=0)';
         RAISE STPERROR;   
      END IF;
      IF NVL(UNAPIGEN.P_TXN_LEVEL, 0) <= 1 THEN   
         L_SQLERRM := 'SaveLcTrAction called with a_next_rows=1 in a non MST transaction !';
         RAISE STPERROR;   
      END IF;
      P_SAVELCAF_CALLS := NVL(P_SAVELCAF_CALLS, 0) + 1;      
   ELSE
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NEXTROWS;
      RAISE STPERROR;
   END IF;         
   IF P_SAVELCAF_CALLS = 1 THEN
      P_SAVELCAF_TR_SEQ := UNAPIGEN.P_TR_SEQ;
   ELSE
      IF UNAPIGEN.P_TR_SEQ <> P_SAVELCAF_TR_SEQ THEN
         L_SQLERRM := 'Successive calls of SaveLcTrAction not in the same transaction !';
         RAISE STPERROR;   
      END IF;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('lc', A_LC, A_VERSION, L_LC_LC, L_LC_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTLC
   SET ALLOW_MODIFY = '#'
   WHERE VERSION = A_VERSION
     AND LC = A_LC;

   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR;
   END IF;

   
   IF NVL(P_SAVELCAF_CALLS, 0) = 1 THEN
      DELETE FROM UTLCAF
      WHERE VERSION = A_VERSION
        AND LC = A_LC;
   END IF;        

   FOR I IN 1..A_NR_OF_ROWS LOOP
      IF NVL(A_SS_FROM(I), ' ') = ' ' OR
         NVL(A_SS_TO(I), ' ') = ' ' OR
         A_TR_NO(I) IS NULL THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
      END IF;
      
      INSERT INTO UTLCAF(LC, VERSION, SS_FROM, SS_TO, TR_NO, SEQ, AF)
      SELECT A_LC, A_VERSION, A_SS_FROM(I), A_SS_TO(I), A_TR_NO(I), NVL(MAX(SEQ),0)+1, A_AF(I)
      FROM UTLCAF
      WHERE LC = A_LC
      AND VERSION = A_VERSION
      AND SS_FROM = A_SS_FROM(I)
      AND SS_TO = A_SS_TO(I)
      AND TR_NO = A_TR_NO(I);
      
   END LOOP;

   
   IF NVL(A_NEXT_ROWS, 0) = -1 THEN 
      
      OPEN L_AFTR_CURSOR(A_LC, A_VERSION);
      FETCH L_AFTR_CURSOR
      INTO L_CHECK_TR;
      CLOSE L_AFTR_CURSOR;

      IF L_CHECK_TR > 0 THEN
         L_SQLERRM := TO_CHAR(L_CHECK_TR)||' action(s) on non existing transitions for lc='||
                      A_LC||' version='||A_VERSION;
         RAISE STPERROR;
      END IF;

      L_EVENT_TP := 'UsedObjectsUpdated';
      L_EV_SEQ_NR := -1;
      L_RESULT :=
            UNAPIEV.INSERTEVENT('SaveLcTrAction', UNAPIGEN.P_EVMGR_NAME, 'lc', A_LC, L_LC_LC, 
                                L_LC_LC_VERSION, L_SS, L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
      IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS  THEN
         UNAPIGEN.P_TXN_ERROR := L_RESULT;
         RAISE STPERROR;
      END IF;

      IF L_LOG_HS = '1' THEN
         INSERT INTO UTLCHS (LC, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_LC, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'life cycle "'||A_LC||'" actions on transitions are updated.', 
                 CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   END IF;
   
   
   IF NVL(A_NEXT_ROWS, 0) = -1 THEN
      
      P_SAVELCAF_CALLS := 0;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveLcTrAction', SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('SaveLcTrAction', L_SQLERRM);
   END IF;
   IF L_AFTR_CURSOR%ISOPEN THEN
      CLOSE L_AFTR_CURSOR;
   END IF;
   
   P_SAVELCAF_CALLS := 0;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveLcTrAction'));
END SAVELCTRACTION;

FUNCTION DELETELIFECYCLE
(A_LC            IN  VARCHAR2,          
 A_MODIFY_REASON IN  VARCHAR2)          
RETURN NUMBER IS

A_VERSION          VARCHAR2(20);
L_ALLOW_MODIFY     CHAR(1);
L_LC_LC            VARCHAR2(2);
L_LC_LC_VERSION    VARCHAR2(20);
L_SS               VARCHAR2(2);
L_LOG_HS           CHAR(1);
L_ACTIVE           CHAR(1);

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_LC, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF A_LC = '@L' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTMODIFIABLE;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('lc', A_LC, A_VERSION, L_LC_LC, L_LC_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   
   IF UNAPIGEN.ISSYSTEM21CFR11COMPLIANT = UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTALLOWEDIN21CFR11;
      RAISE STPERROR;
   END IF;

   DELETE FROM UTLCAU
   WHERE VERSION = A_VERSION
     AND LC = A_LC;

   DELETE FROM UTLCHS
   WHERE VERSION = A_VERSION
     AND LC = A_LC;

   DELETE FROM UTLCTR
   WHERE VERSION = A_VERSION
     AND LC = A_LC;

   DELETE FROM UTLCUS
   WHERE VERSION = A_VERSION
     AND LC = A_LC;

   DELETE FROM UTLCAF
   WHERE VERSION = A_VERSION
     AND LC = A_LC;

   DELETE FROM UTLC
   WHERE VERSION = A_VERSION
     AND LC = A_LC;
   
   UPDATE UTOBJECTS
   SET DEF_LC = '@L'
   WHERE DEF_LC = A_LC;

   L_EVENT_TP := 'ObjectDeleted';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT('DeleteLifeCycle', UNAPIGEN.P_EVMGR_NAME, 'lc', A_LC, L_LC_LC, 
                                   L_LC_LC_VERSION, L_SS, L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
     UNAPIGEN.LOGERROR('DeleteLifeCycle', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'DeleteLifeCycle'));
END DELETELIFECYCLE;

FUNCTION GETDEFAULTLIFECYCLES
(A_OBJECT_TP           OUT     UNAPIGEN.VC4_TABLE_TYPE,   
 A_DESCRIPTION         OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_DEF_LC              OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_LC_NAME             OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_LOG_HS              OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LOG_HS_DETAILS      OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_AR                  OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NR_OF_ROWS          IN OUT  NUMBER)                    
RETURN NUMBER IS

L_NR_OF_ROWS        INTEGER;
L_DEFLC_CURSOR      UNAPIGEN.CURSOR_REF_TYPE;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   L_NR_OF_ROWS := 0;

   L_SQL_STRING:=   'SELECT obj.object, obj.description, obj.def_lc, '
                  ||'DECODE(lc.name,NULL,''<<''||obj.def_lc||''>>'',lc.name) name, '
                  ||'obj.log_hs, obj.log_hs_details, obj.ar '
                  ||'FROM dd'||UNAPIGEN.P_DD||'.uvobjects obj, dd'||UNAPIGEN.P_DD||'.uvlc lc '
                  ||'WHERE obj.def_lc = lc.lc (+)';
   OPEN L_DEFLC_CURSOR FOR L_SQL_STRING;
   LOOP
      L_NR_OF_ROWS := L_NR_OF_ROWS + 1;
      FETCH L_DEFLC_CURSOR 
      INTO A_OBJECT_TP(L_NR_OF_ROWS), A_DESCRIPTION(L_NR_OF_ROWS), A_DEF_LC(L_NR_OF_ROWS),
           A_LC_NAME(L_NR_OF_ROWS), A_LOG_HS(L_NR_OF_ROWS), A_LOG_HS_DETAILS(L_NR_OF_ROWS), A_AR(L_NR_OF_ROWS);
      IF L_DEFLC_CURSOR%NOTFOUND THEN
                           L_NR_OF_ROWS := L_NR_OF_ROWS - 1;
      END IF;
      EXIT WHEN (L_DEFLC_CURSOR%NOTFOUND) OR (L_NR_OF_ROWS >= A_NR_OF_ROWS);
   END LOOP;
   CLOSE L_DEFLC_CURSOR;

   IF L_NR_OF_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_NR_OF_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   L_SQLERRM := SQLERRM;
   IF L_DEFLC_CURSOR%ISOPEN THEN
      CLOSE L_DEFLC_CURSOR;
   END IF;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
          'GetDefaultLifeCycles', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETDEFAULTLIFECYCLES;

FUNCTION SAVEDEFAULTLIFECYCLES
(A_OBJECT_TP           IN      UNAPIGEN.VC4_TABLE_TYPE,   
 A_DESCRIPTION         IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_DEF_LC              IN      UNAPIGEN.VC2_TABLE_TYPE,   
 A_LOG_HS              IN      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LOG_HS_DETAILS      IN      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_AR                  IN      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NR_OF_ROWS          IN      NUMBER,                    
 A_MODIFY_REASON       IN      VARCHAR2)                  
RETURN NUMBER IS

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF A_NR_OF_ROWS < 0 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NROFROWS;
      RAISE STPERROR;
   END IF;

   FOR I IN 1..A_NR_OF_ROWS LOOP
      IF NVL(A_OBJECT_TP(I), ' ') <> ' ' THEN
         UPDATE UTOBJECTS
         SET DESCRIPTION = A_DESCRIPTION(I),
             DEF_LC = A_DEF_LC(I),
             LOG_HS = A_LOG_HS(I),
             LOG_HS_DETAILS = A_LOG_HS_DETAILS(I),
             AR = A_AR(I)
         WHERE OBJECT = A_OBJECT_TP(I);
      END IF;
   END LOOP;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveDefaultLifeCycles', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveDefaultLifeCycles'));
END SAVEDEFAULTLIFECYCLES;

FUNCTION GETSSUSAGELIFECYCLELIST
(A_SS                  IN      VARCHAR2,                 
 A_LC                  OUT     UNAPIGEN.VC2_TABLE_TYPE,  
 A_LC_NAME             OUT     UNAPIGEN.VC20_TABLE_TYPE, 
 A_NR_OF_ROWS          IN OUT  NUMBER)                   
RETURN NUMBER IS

L_NR_OF_ROWS       INTEGER;
L_SSLC_CURSOR      UNAPIGEN.CURSOR_REF_TYPE;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_SS, ' ') = ' ' THEN
      RETURN(UNAPIGEN.DBERR_NOOBJID);
   END IF;

   L_NR_OF_ROWS := 0;

   L_SQL_STRING:=   'SELECT DISTINCT lctr.lc, lc.name '
                  ||'FROM dd'||UNAPIGEN.P_DD||'.uvlctr lctr, dd'||UNAPIGEN.P_DD||'.uvlc lc '
                  ||'WHERE lctr.version = lc.version '
                  ||'AND lctr.lc = lc.lc '
                  ||'AND (lctr.ss_from = :a_ss OR lctr.ss_to = :a_ss)';
   OPEN L_SSLC_CURSOR FOR L_SQL_STRING USING A_SS, A_SS;
   LOOP
      L_NR_OF_ROWS := L_NR_OF_ROWS + 1;
      FETCH L_SSLC_CURSOR 
      INTO A_LC(L_NR_OF_ROWS), A_LC_NAME(L_NR_OF_ROWS);
      IF L_SSLC_CURSOR%NOTFOUND THEN
                           L_NR_OF_ROWS := L_NR_OF_ROWS - 1;
      END IF;
      EXIT WHEN (L_SSLC_CURSOR%NOTFOUND) OR (L_NR_OF_ROWS >= A_NR_OF_ROWS);
   END LOOP;
   CLOSE L_SSLC_CURSOR;

   IF L_NR_OF_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_NR_OF_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   L_SQLERRM := SQLERRM;
   IF L_SSLC_CURSOR%ISOPEN THEN
      CLOSE L_SSLC_CURSOR;
   END IF;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
          'GetSsUsageLifeCycleList', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETSSUSAGELIFECYCLELIST;

FUNCTION GETWLRULES
(A_SS            OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_ENTRY_ACTION  OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_GK_ENTRY      OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_ENTRY_TP      OUT     UNAPIGEN.CHAR2_TABLE_TYPE, 
 A_USE_VALUE     OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_NR_OF_ROWS    IN OUT  NUMBER,                    
 A_WHERE_CLAUSE  IN      VARCHAR2)                  
RETURN NUMBER IS

L_SS                  VARCHAR2(2);
L_ENTRY_ACTION        CHAR(1);
L_GK_ENTRY            VARCHAR2(20);
L_ENTRY_TP            CHAR(2);
L_USE_VALUE           VARCHAR2(40);
L_SSWL_CURSOR         INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'ORDER BY ss'; 
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_SQL_STRING := 'SELECT ss, entry_action, gk_entry, entry_tp, use_value '||
                   'FROM dd' || UNAPIGEN.P_DD || '.uvsswl ' || L_WHERE_CLAUSE;

   L_SSWL_CURSOR := DBMS_SQL.OPEN_CURSOR;
   DBMS_SQL.PARSE(L_SSWL_CURSOR,L_SQL_STRING,DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_SSWL_CURSOR, 1, L_SS, 2);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_SSWL_CURSOR, 2, L_ENTRY_ACTION, 1);
   DBMS_SQL.DEFINE_COLUMN(L_SSWL_CURSOR, 3, L_GK_ENTRY, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_SSWL_CURSOR, 4, L_ENTRY_TP, 2);
   DBMS_SQL.DEFINE_COLUMN(L_SSWL_CURSOR, 5, L_USE_VALUE, 40);
   L_RESULT := DBMS_SQL.EXECUTE(L_SSWL_CURSOR);

   L_FETCHED_ROWS := 0;
   L_RESULT := DBMS_SQL.FETCH_ROWS(L_SSWL_CURSOR);

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_SSWL_CURSOR, 1, L_SS);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_SSWL_CURSOR, 2, L_ENTRY_ACTION);
      DBMS_SQL.COLUMN_VALUE(L_SSWL_CURSOR, 3, L_GK_ENTRY);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_SSWL_CURSOR, 4, L_ENTRY_TP);
      DBMS_SQL.COLUMN_VALUE(L_SSWL_CURSOR, 5, L_USE_VALUE);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_SS(L_FETCHED_ROWS) := L_SS;
      A_ENTRY_ACTION(L_FETCHED_ROWS) := L_ENTRY_ACTION;
      A_GK_ENTRY(L_FETCHED_ROWS) := L_GK_ENTRY;
      A_ENTRY_TP(L_FETCHED_ROWS) := L_ENTRY_TP;
      A_USE_VALUE(L_FETCHED_ROWS) := L_USE_VALUE;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_SSWL_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_SSWL_CURSOR);

   
   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF ;

   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   L_SQLERRM := SQLERRM;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
          'GetWlRules', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   IF DBMS_SQL.IS_OPEN(L_SSWL_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_SSWL_CURSOR);
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETWLRULES;

FUNCTION SAVEWLRULES
(A_SS            IN     UNAPIGEN.VC2_TABLE_TYPE,   
 A_ENTRY_ACTION  IN     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_GK_ENTRY      IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_ENTRY_TP      IN     UNAPIGEN.CHAR2_TABLE_TYPE, 
 A_USE_VALUE     IN     UNAPIGEN.VC40_TABLE_TYPE,  
 A_NR_OF_ROWS    IN     NUMBER)                    
RETURN NUMBER IS

L_COUNT          NUMBER;
L_RULE_NR        NUMBER;
L_AF             VARCHAR2(255);
L_VALUE          VARCHAR2(40);
L_OBJECT         VARCHAR2(4);

CURSOR C_SSWL IS
   SELECT *
   FROM UTSSWL
   ORDER BY GK_ENTRY, ENTRY_ACTION, SS, ENTRY_TP, USE_VALUE;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   
   
   
   DELETE FROM UTSSWL;

   FOR L_CTR IN 1..A_NR_OF_ROWS LOOP
      IF A_SS(L_CTR)IS NULL THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
      END IF;

      IF NVL(A_ENTRY_ACTION(L_CTR), ' ') NOT IN ('I', 'O') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_ENTRYACTION;
         RAISE STPERROR;
      END IF;

      IF A_ENTRY_ACTION(L_CTR) = 'I' AND
         NVL(A_ENTRY_TP(L_CTR), ' ') NOT IN ('sc', 'me', 'cf') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_ENTRYTP;
         RAISE STPERROR;
      END IF;

      INSERT INTO UTSSWL(SS, ENTRY_ACTION, GK_ENTRY, ENTRY_TP, USE_VALUE)
      VALUES(A_SS(L_CTR), A_ENTRY_ACTION(L_CTR), A_GK_ENTRY(L_CTR),
             A_ENTRY_TP(L_CTR), A_USE_VALUE(L_CTR));
   END LOOP;

   
   
   
   DELETE FROM UTEVRULES
   WHERE CUSTOM = '0'
     AND EV_TP = 'MeStatusChanged'
     AND OBJECT_TP = 'me';
   
   
   SELECT NVL(MAX(RULE_NR),0)+1
   INTO L_RULE_NR
   FROM UTEVRULES;
   
   
   FOR C_SSWL_REC IN C_SSWL LOOP
      
      IF C_SSWL_REC.ENTRY_ACTION = 'I' THEN
         IF C_SSWL_REC.ENTRY_TP = 'cf' THEN
            L_AF := 'UNWLASSIGN.'||C_SSWL_REC.USE_VALUE||'('''||C_SSWL_REC.SS||''')';
         ELSE
            
            L_OBJECT := SUBSTR(C_SSWL_REC.USE_VALUE, 3, INSTR(C_SSWL_REC.USE_VALUE, '.')-3);
            IF SUBSTR(L_OBJECT, LENGTH(L_OBJECT)-1) IN ('pg','pa','me') THEN
               
               L_OBJECT := SUBSTR(L_OBJECT, LENGTH(L_OBJECT)-1); 
            END IF;
            L_VALUE := '~' || L_OBJECT || 
                       '@' || 
                       SUBSTR(C_SSWL_REC.USE_VALUE, INSTR(C_SSWL_REC.USE_VALUE, '.')+1) || '~';
            L_AF := 'AssignGroupKey(''megk'', '''||C_SSWL_REC.GK_ENTRY||''', '''||L_VALUE||''', 1, 40)';
         END IF;
      ELSIF C_SSWL_REC.ENTRY_ACTION = 'O' THEN
         L_AF := 'DeAssignGroupKey(''megk'','''||C_SSWL_REC.GK_ENTRY||''')';
      END IF;
      DBMS_OUTPUT.PUT_LINE('      af: '||L_AF);
      
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, OBJECT_SS, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR, 'me', C_SSWL_REC.SS, 'MeStatusChanged', L_AF, '0');
      L_RULE_NR := L_RULE_NR + 1;
   END LOOP;
   
   
   L_RULE_NR := 0;
   FOR C_EVRULE_REC IN (SELECT *
                        FROM UTEVRULES
                        ORDER BY RULE_NR) LOOP
      L_RULE_NR := L_RULE_NR + 1;
      IF C_EVRULE_REC.RULE_NR <> L_RULE_NR THEN
         UPDATE UTEVRULES
         SET RULE_NR = L_RULE_NR
         WHERE RULE_NR = C_EVRULE_REC.RULE_NR;
      END IF;
   END LOOP;

   
   L_EV_SEQ_NR := -1;
   L_EVENT_TP := 'LoadEvRules';
   L_RESULT := UNAPIEV.BROADCASTEVENT ('SaveWlRules', UNAPIGEN.P_EVMGR_NAME, 'wl', '', '', 
                                       '', '', L_EVENT_TP, '', L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;
   
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveWlRules', SQLERRM);
   END IF;
   IF C_SSWL%ISOPEN THEN
      CLOSE C_SSWL;
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveWlRules'));
END SAVEWLRULES;

BEGIN
   P_LC_CURSOR := NULL;
   P_SS_CURSOR := NULL;
   P_LCTR_CURSOR := NULL;
   P_LCUS_CURSOR := NULL;
   P_LCAF_CURSOR := NULL;
   P_SAVELCTR_CALLS := 0;
   P_SAVELCUS_CALLS := 0;
   P_SAVELCAF_CALLS := 0;
END UNAPILC;
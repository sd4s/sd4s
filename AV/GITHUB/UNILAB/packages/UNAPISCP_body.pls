PACKAGE BODY unapiscp AS

TYPE BOOLEAN_TABLE_TYPE IS TABLE OF BOOLEAN INDEX BY BINARY_INTEGER;

L_SQLERRM                   VARCHAR2(255);
L_SQL_STRING                VARCHAR2(4000);
L_WHERE_CLAUSE              VARCHAR2(1000);
L_EVENT_TP                  UTEV.EV_TP%TYPE;
L_RET_CODE                  NUMBER;
L_RESULT                    NUMBER;
L_FETCHED_ROWS              NUMBER;
L_EV_SEQ_NR                 NUMBER;
STPERROR                    EXCEPTION;
L_EV_DETAILS                VARCHAR2(255);
L_AU_CURSOR                 INTEGER;
L_SCGK_CURSOR               INTEGER;


P_GETSCCOMMENT_CURSOR       INTEGER;
P_HS_DETAILS_CURSOR         INTEGER;
P_HS_CURSOR                 INTEGER;

FUNCTION GETVERSION
   RETURN VARCHAR2
IS
BEGIN
   RETURN('06.07.00.00_00.13');
EXCEPTION
   WHEN OTHERS THEN
      RETURN (NULL);
END GETVERSION;

FUNCTION INITSCATTRIBUTE
(A_SC               IN     VARCHAR2,                  
 A_ST               IN     VARCHAR2,                  
 A_ST_VERSION       IN     VARCHAR2,                  
 A_AU               OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_AU_VERSION       OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_VALUE            OUT    UNAPIGEN.VC40_TABLE_TYPE,  
 A_DESCRIPTION      OUT    UNAPIGEN.VC40_TABLE_TYPE,  
 A_IS_PROTECTED     OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_SINGLE_VALUED    OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NEW_VAL_ALLOWED  OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_STORE_DB         OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_VALUE_LIST_TP    OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_RUN_MODE         OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_SERVICE          OUT    UNAPIGEN.VC255_TABLE_TYPE, 
 A_CF_VALUE         OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_NR_OF_ROWS       IN OUT NUMBER)                    
RETURN NUMBER IS

L_ST              VARCHAR2(20);
L_ST_VERSION      VARCHAR2(20);
L_INHERIT_AU      CHAR(1);

CURSOR L_STAU_CURSOR (C_ST VARCHAR2, C_ST_VERSION VARCHAR2, C_ST_INHERIT_AU CHAR) IS
   SELECT A.AU, AU.VERSION, A.VALUE, AU.DESCRIPTION, AU.IS_PROTECTED, AU.SINGLE_VALUED,
          AU.NEW_VAL_ALLOWED, AU.STORE_DB, AU.VALUE_LIST_TP,
          AU.RUN_MODE, AU.SERVICE, AU.CF_VALUE
   FROM UTAU AU, UTSTAU A
   WHERE A.ST = C_ST
   AND A.VERSION = C_ST_VERSION
   AND A.AU = AU.AU
   AND UNAPIGEN.VALIDATEVERSION('au', A.AU, A.AU_VERSION) = AU.AU
   AND AU.INHERIT_AU = DECODE(C_ST_INHERIT_AU,'0','1',AU.INHERIT_AU)
   ORDER BY A.AUSEQ;
   
   
   
   
   
   

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_ST, ' ') = ' ' THEN
      SELECT ST, ST_VERSION
      INTO L_ST, L_ST_VERSION
      FROM UTSC
      WHERE SC = A_SC;
   ELSE
      L_ST := A_ST;
      IF A_ST_VERSION IS NULL THEN
         RETURN(UNAPIGEN.DBERR_STVERSION);
      END IF;
      L_ST_VERSION := A_ST_VERSION;            
   END IF;

   
   
   SELECT INHERIT_AU
   INTO L_INHERIT_AU
   FROM UTST
   WHERE ST = L_ST
   AND VERSION = L_ST_VERSION;

   L_FETCHED_ROWS := 0;

   FOR L_STAU IN L_STAU_CURSOR(L_ST, L_ST_VERSION, NVL(L_INHERIT_AU,'0')) LOOP
      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_AU(L_FETCHED_ROWS) := L_STAU.AU;
      A_AU_VERSION(L_FETCHED_ROWS) := L_STAU.VERSION;
      A_VALUE(L_FETCHED_ROWS) := L_STAU.VALUE;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_STAU.DESCRIPTION;
      A_IS_PROTECTED(L_FETCHED_ROWS) := L_STAU.IS_PROTECTED;
      A_SINGLE_VALUED(L_FETCHED_ROWS) := L_STAU.SINGLE_VALUED;
      A_NEW_VAL_ALLOWED(L_FETCHED_ROWS) := L_STAU.NEW_VAL_ALLOWED;
      A_STORE_DB(L_FETCHED_ROWS) := L_STAU.STORE_DB;
      A_VALUE_LIST_TP(L_FETCHED_ROWS) := L_STAU.VALUE_LIST_TP;
      A_RUN_MODE(L_FETCHED_ROWS) := L_STAU.RUN_MODE;
      A_SERVICE(L_FETCHED_ROWS) := L_STAU.SERVICE;
      A_CF_VALUE(L_FETCHED_ROWS) := L_STAU.CF_VALUE;

      EXIT WHEN L_FETCHED_ROWS >= A_NR_OF_ROWS;
   END LOOP;

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN NO_DATA_FOUND THEN
      RETURN(UNAPIGEN.DBERR_NOOBJECT);
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
             'InitScAttribute', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END INITSCATTRIBUTE;

FUNCTION GETSCATTRIBUTE 
(A_SC               OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_AU               OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_AU_VERSION       OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_VALUE            OUT    UNAPIGEN.VC40_TABLE_TYPE,  
 A_DESCRIPTION      OUT    UNAPIGEN.VC40_TABLE_TYPE,  
 A_IS_PROTECTED     OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_SINGLE_VALUED    OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NEW_VAL_ALLOWED  OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_STORE_DB         OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_VALUE_LIST_TP    OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_RUN_MODE         OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_SERVICE          OUT    UNAPIGEN.VC255_TABLE_TYPE, 
 A_CF_VALUE         OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_NR_OF_ROWS       IN OUT NUMBER,                    
 A_WHERE_CLAUSE     IN     VARCHAR2)                  
RETURN NUMBER IS

L_SC                             VARCHAR2(20);
L_AU                             VARCHAR2(20);
L_AU_VERSION                     VARCHAR2(20);
L_VALUE                          VARCHAR2(40);
L_DESCRIPTION                    VARCHAR2(40);
L_IS_PROTECTED                   CHAR(1);
L_SINGLE_VALUED                  CHAR(1);
L_NEW_VAL_ALLOWED                CHAR(1);
L_STORE_DB                       CHAR(1);
L_VALUE_LIST_TP                  CHAR(1);
L_RUN_MODE                       CHAR(1);
L_SERVICE                        VARCHAR2(255);
L_CF_VALUE                       VARCHAR2(20);
L_BIND_SC_SELECTION              BOOLEAN;
L_BIND_FIXED_SC_FLAG             BOOLEAN;

BEGIN

   L_BIND_SC_SELECTION := FALSE;
   L_BIND_FIXED_SC_FLAG := FALSE;
   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      RETURN(UNAPIGEN.DBERR_WHERECLAUSE);
   ELSIF A_WHERE_CLAUSE = 'SELECTION' THEN
      IF UNAPISC.P_SELECTION_CLAUSE IS NOT NULL THEN
         IF INSTR(UPPER(UNAPISC.P_SELECTION_CLAUSE), ' WHERE ') <> 0 THEN       
            L_WHERE_CLAUSE := ','||UNAPISC.P_SELECTION_CLAUSE|| ' AND a.sc = au.sc ORDER BY au.sc,au.auseq'; 
         ELSE
            L_WHERE_CLAUSE := ','||UNAPISC.P_SELECTION_CLAUSE|| ' WHERE a.sc = au.sc ORDER BY au.sc,au.auseq'; 
         END IF;
         L_BIND_SC_SELECTION := TRUE;
      ELSE
         L_WHERE_CLAUSE := 'ORDER BY au.sc,au.auseq'; 
      END IF;
   ELSIF
      UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_BIND_FIXED_SC_FLAG := TRUE;
      L_WHERE_CLAUSE := 'WHERE au.sc = :sc_val ORDER BY au.auseq';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_SQL_STRING := 'SELECT au.sc, au.au, au.au_version, au.value FROM dd' ||
                   UNAPIGEN.P_DD || '.uvscau au ' || L_WHERE_CLAUSE;

   IF NOT DBMS_SQL.IS_OPEN(L_AU_CURSOR) THEN
      L_AU_CURSOR := DBMS_SQL.OPEN_CURSOR;
      DBMS_SQL.PARSE(L_AU_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      IF L_BIND_SC_SELECTION THEN
         FOR L_X IN 1..UNAPISC.P_SELECTION_VAL_TAB.COUNT() LOOP
            DBMS_SQL.BIND_VARIABLE(L_AU_CURSOR, ':col_val'||L_X , UNAPISC.P_SELECTION_VAL_TAB(L_X)); 
         END LOOP;
      ELSIF L_BIND_FIXED_SC_FLAG THEN
         DBMS_SQL.BIND_VARIABLE(L_AU_CURSOR, ':sc_val' , A_WHERE_CLAUSE); 
      END IF;

      DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 1, L_SC, 20);
      DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 2, L_AU, 20);
      DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 3, L_AU_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 4, L_VALUE, 40);
      L_RESULT := DBMS_SQL.EXECUTE(L_AU_CURSOR);
   END IF;
   
   L_RESULT := DBMS_SQL.FETCH_ROWS(L_AU_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 1, L_SC);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 2, L_AU);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 3, L_AU_VERSION);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 4, L_VALUE);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_SC(L_FETCHED_ROWS) := L_SC;
      A_AU(L_FETCHED_ROWS) := L_AU;
      A_AU_VERSION(L_FETCHED_ROWS) := L_AU_VERSION;
      A_VALUE(L_FETCHED_ROWS) := L_VALUE;

      OPEN UNAPIGEN.L_AUDET_CURSOR(L_AU, L_AU_VERSION);
      FETCH UNAPIGEN.L_AUDET_CURSOR
      INTO L_DESCRIPTION, L_IS_PROTECTED, L_SINGLE_VALUED,
           L_NEW_VAL_ALLOWED, L_STORE_DB, L_VALUE_LIST_TP, L_RUN_MODE,
           L_SERVICE, L_CF_VALUE;
      IF UNAPIGEN.L_AUDET_CURSOR%NOTFOUND THEN
         
         
         
         A_DESCRIPTION(L_FETCHED_ROWS)     := L_AU;
         A_IS_PROTECTED(L_FETCHED_ROWS)    := '1';
         A_SINGLE_VALUED(L_FETCHED_ROWS)   := '1';
         A_NEW_VAL_ALLOWED(L_FETCHED_ROWS) := '0';
         A_STORE_DB(L_FETCHED_ROWS)        := '0';
         A_VALUE_LIST_TP(L_FETCHED_ROWS)   := 'E';
         A_RUN_MODE(L_FETCHED_ROWS)        := 'H';
         A_SERVICE(L_FETCHED_ROWS)         := NULL;
         A_CF_VALUE(L_FETCHED_ROWS)        := NULL;
      ELSE
         A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;
         A_IS_PROTECTED(L_FETCHED_ROWS) := L_IS_PROTECTED;
         A_SINGLE_VALUED(L_FETCHED_ROWS) := L_SINGLE_VALUED;
         A_NEW_VAL_ALLOWED(L_FETCHED_ROWS) := L_NEW_VAL_ALLOWED;
         A_STORE_DB(L_FETCHED_ROWS) := L_STORE_DB;
         A_VALUE_LIST_TP(L_FETCHED_ROWS) := L_VALUE_LIST_TP;
         A_RUN_MODE(L_FETCHED_ROWS) := L_RUN_MODE;
         A_SERVICE(L_FETCHED_ROWS) := L_SERVICE;
         A_CF_VALUE(L_FETCHED_ROWS) := L_CF_VALUE;
      END IF;
      CLOSE UNAPIGEN.L_AUDET_CURSOR;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_AU_CURSOR);
      END IF;
   END LOOP;

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
      DBMS_SQL.CLOSE_CURSOR(L_AU_CURSOR);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      DBMS_SQL.CLOSE_CURSOR(L_AU_CURSOR);
   ELSE   
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   IF A_WHERE_CLAUSE <> 'SELECTION' AND
      DBMS_SQL.IS_OPEN(L_AU_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_AU_CURSOR);
   END IF;

   RETURN(L_RET_CODE);


EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
             'GetScAttribute', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF UNAPIGEN.L_AUDET_CURSOR%ISOPEN THEN
         CLOSE UNAPIGEN.L_AUDET_CURSOR;
      END IF;
      IF DBMS_SQL.IS_OPEN(L_AU_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(L_AU_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETSCATTRIBUTE;

FUNCTION SAVESCATTRIBUTE 
(A_SC             IN        VARCHAR2,                 
 A_AU             IN        UNAPIGEN.VC20_TABLE_TYPE, 
 A_AU_VERSION     IN OUT    UNAPIGEN.VC20_TABLE_TYPE, 
 A_VALUE          IN        UNAPIGEN.VC40_TABLE_TYPE, 
 A_NR_OF_ROWS     IN        NUMBER,                   
 A_MODIFY_REASON  IN        VARCHAR2)                 
RETURN NUMBER IS

L_LC                     VARCHAR2(2);
L_LC_VERSION             VARCHAR2(20);
L_SS                     VARCHAR2(2);
L_LOG_HS                 CHAR(1);
L_LOG_HS_DETAILS         CHAR(1);
L_ALLOW_MODIFY           CHAR(1);
L_ACTIVE                 CHAR(1);
L_WHAT_DESCRIPTION       VARCHAR2(255);
L_HS_SEQ                 INTEGER;
L_ST_VERSION             VARCHAR2(20);

L_SCII_SC                UNAPIGEN.VC20_TABLE_TYPE;
L_SCII_IC                UNAPIGEN.VC20_TABLE_TYPE;
L_SCII_ICNODE            UNAPIGEN.LONG_TABLE_TYPE;
L_SCII_II                UNAPIGEN.VC20_TABLE_TYPE;
L_SCII_IINODE            UNAPIGEN.LONG_TABLE_TYPE;
L_SCII_IE_VERSION        UNAPIGEN.VC20_TABLE_TYPE;
L_SCII_IIVALUE           UNAPIGEN.VC2000_TABLE_TYPE;
L_SCII_POS_X             UNAPIGEN.NUM_TABLE_TYPE;
L_SCII_POS_Y             UNAPIGEN.NUM_TABLE_TYPE;
L_SCII_IS_PROTECTED      UNAPIGEN.CHAR1_TABLE_TYPE;
L_SCII_MANDATORY         UNAPIGEN.CHAR1_TABLE_TYPE;
L_SCII_HIDDEN            UNAPIGEN.CHAR1_TABLE_TYPE;
L_SCII_DSP_TITLE         UNAPIGEN.VC40_TABLE_TYPE;
L_SCII_DSP_LEN           UNAPIGEN.NUM_TABLE_TYPE;
L_SCII_DSP_TP            UNAPIGEN.CHAR1_TABLE_TYPE;
L_SCII_DSP_ROWS          UNAPIGEN.NUM_TABLE_TYPE;
L_SCII_II_CLASS          UNAPIGEN.VC2_TABLE_TYPE;
L_SCII_LOG_HS            UNAPIGEN.CHAR1_TABLE_TYPE;
L_SCII_LOG_HS_DETAILS    UNAPIGEN.CHAR1_TABLE_TYPE;
L_SCII_LC                UNAPIGEN.VC2_TABLE_TYPE;
L_SCII_LC_VERSION        UNAPIGEN.VC20_TABLE_TYPE;
L_SCII_MODIFY_FLAG       UNAPIGEN.NUM_TABLE_TYPE;
L_SCII_NR_OF_ROWS        NUMBER;
L_SCII_MODIFY_REASON     VARCHAR2(255);

CURSOR L_SCII_CURSOR(A_AU VARCHAR2) IS
   SELECT A.*
   FROM UTSCII A, UTIE B
   WHERE A.SC = A_SC
   AND A.II = B.IE
   AND B.DEF_VAL_TP = 'A'
   AND B.DEF_AU_LEVEL = 'sc'
   AND B.IEVALUE = A_AU;

CURSOR L_SCII_TO_CLEAN_CURSOR IS
   SELECT A.*
   FROM UTSCII A, UTIE B
   WHERE A.SC = A_SC
   AND A.II = B.IE
   AND B.DEF_VAL_TP = 'A'
   AND B.DEF_AU_LEVEL = 'sc'
   AND B.IEVALUE NOT IN (SELECT AU FROM UTSCAU WHERE SC=A_SC);

CURSOR L_MODIFIEDAU_CURSOR IS
   
   (SELECT A.AU AU, A.AU_VERSION AU_VERSION, A.VALUE VALUE, 'DELETE' ACTION
    FROM UTSCAU A
    WHERE A.SC = A_SC
    AND AUSEQ < 0
   MINUS
    SELECT A.AU AU, A.AU_VERSION AU_VERSION, A.VALUE VALUE, 'DELETE' ACTION
    FROM UTSCAU A
    WHERE A.SC = A_SC
    AND AUSEQ > 0)
   UNION ALL
   
   (SELECT A.AU AU, A.AU_VERSION AU_VERSION, A.VALUE VALUE, 'NEW' ACTION
    FROM UTSCAU A
    WHERE A.SC = A_SC
    AND AUSEQ > 0
   MINUS
    SELECT A.AU AU, A.AU_VERSION AU_VERSION, A.VALUE VALUE, 'NEW' ACTION
    FROM UTSCAU A
    WHERE A.SC = A_SC
    AND AUSEQ < 0);
   
BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_NR_OF_ROWS, -1) < 0 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NROFROWS;
      RAISE STPERROR;
   END IF;

   IF NVL(A_SC, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIAUT.GETSCAUTHORISATION(A_SC, L_ST_VERSION, L_LC, L_LC_VERSION, L_SS,
                                             L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS, L_LOG_HS_DETAILS);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTSC
   SET ALLOW_MODIFY = '#'
   WHERE SC = A_SC;

   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR ;
   END IF;




   L_EVENT_TP := 'ScAttributesUpdated';
   L_EV_SEQ_NR := -1;
   L_EV_DETAILS := 'st_version=' || L_ST_VERSION;
   L_HS_SEQ := 0;
   L_RESULT := UNAPIEV.INSERTEVENT('SaveScAttribute', UNAPIGEN.P_EVMGR_NAME, 'sc', A_SC, L_LC, 
                                   L_LC_VERSION, L_SS, L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF (L_LOG_HS = '1') THEN
      INSERT INTO UTSCHS(SC, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES(A_SC, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
             'sample "'||A_SC||'" attributes are updated.', 
             CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;
   
   IF (L_LOG_HS_DETAILS = '1') THEN
      L_HS_SEQ := L_HS_SEQ + 1;
      INSERT INTO UTSCHSDETAILS(SC, TR_SEQ, EV_SEQ, SEQ, DETAILS)
      VALUES(A_SC, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_SEQ, 'sample "'||A_SC||'" attributes are updated.');
   END IF;

   
   
   
   UPDATE UTSCAU
   SET AUSEQ = -AUSEQ
   WHERE SC = A_SC;

   L_SCII_NR_OF_ROWS := 0;
   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      INSERT INTO UTSCAU(SC, AU, AUSEQ, VALUE)
      VALUES(A_SC, A_AU(L_SEQ_NO), L_SEQ_NO, A_VALUE(L_SEQ_NO));
      
      FOR L_SCII_REC IN L_SCII_CURSOR(A_AU(L_SEQ_NO)) LOOP

         L_SCII_NR_OF_ROWS := L_SCII_NR_OF_ROWS + 1;
         L_SCII_SC(L_SCII_NR_OF_ROWS) := A_SC;
         L_SCII_IC(L_SCII_NR_OF_ROWS) := L_SCII_REC.IC;
         L_SCII_ICNODE(L_SCII_NR_OF_ROWS) := L_SCII_REC.ICNODE;
         L_SCII_II(L_SCII_NR_OF_ROWS) := L_SCII_REC.II;
         L_SCII_IINODE(L_SCII_NR_OF_ROWS) := L_SCII_REC.IINODE;
         L_SCII_IE_VERSION(L_SCII_NR_OF_ROWS) := L_SCII_REC.IE_VERSION;
         L_SCII_IIVALUE(L_SCII_NR_OF_ROWS) := A_VALUE(L_SEQ_NO);   
         L_SCII_POS_X(L_SCII_NR_OF_ROWS) := L_SCII_REC.POS_X;
         L_SCII_POS_Y(L_SCII_NR_OF_ROWS) := L_SCII_REC.POS_Y;
         L_SCII_IS_PROTECTED(L_SCII_NR_OF_ROWS) := L_SCII_REC.IS_PROTECTED;
         L_SCII_MANDATORY(L_SCII_NR_OF_ROWS) := L_SCII_REC.MANDATORY;
         L_SCII_HIDDEN(L_SCII_NR_OF_ROWS) := L_SCII_REC.HIDDEN;
         L_SCII_DSP_TITLE(L_SCII_NR_OF_ROWS) := L_SCII_REC.DSP_TITLE;
         L_SCII_DSP_LEN(L_SCII_NR_OF_ROWS) := L_SCII_REC.DSP_LEN;
         L_SCII_DSP_TP(L_SCII_NR_OF_ROWS) := L_SCII_REC.DSP_TP;
         L_SCII_DSP_ROWS(L_SCII_NR_OF_ROWS) := L_SCII_REC.DSP_ROWS;
         L_SCII_II_CLASS(L_SCII_NR_OF_ROWS) := L_SCII_REC.II_CLASS;
         L_SCII_LOG_HS(L_SCII_NR_OF_ROWS) := L_SCII_REC.LOG_HS;
         L_SCII_LOG_HS_DETAILS(L_SCII_NR_OF_ROWS) := L_SCII_REC.LOG_HS_DETAILS;
         L_SCII_LC(L_SCII_NR_OF_ROWS) := L_SCII_REC.LC;
         L_SCII_LC_VERSION(L_SCII_NR_OF_ROWS) := L_SCII_REC.LC_VERSION;
         L_SCII_MODIFY_FLAG(L_SCII_NR_OF_ROWS) := UNAPIGEN.MOD_FLAG_UPDATE;

      END LOOP;
      
   END LOOP;

   
   
      
   
   
   
   IF (L_LOG_HS_DETAILS = '1') THEN
      FOR L_AU_REC IN L_MODIFIEDAU_CURSOR LOOP
         IF L_AU_REC.ACTION = 'DELETE' THEN
            L_WHAT_DESCRIPTION := 'Attribute "'||L_AU_REC.AU||'" with value "'||L_AU_REC.VALUE||'" is removed from sample "'||A_SC||'".';            
         ELSE
            L_WHAT_DESCRIPTION := 'Attribute "'||L_AU_REC.AU||'" is added to sample "'||A_SC||'", value is "'||L_AU_REC.VALUE||'".';
         END IF;
         L_HS_SEQ := L_HS_SEQ + 1;
         INSERT INTO UTSCHSDETAILS(SC, TR_SEQ, EV_SEQ, SEQ, DETAILS)
         VALUES(A_SC, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR,L_HS_SEQ, L_WHAT_DESCRIPTION);
      END LOOP;
   END IF;
  
   
   
   
   DELETE FROM UTSCAU
   WHERE SC = A_SC
   AND AUSEQ < 0;
   
   
   
   
   FOR L_SCII_REC IN L_SCII_TO_CLEAN_CURSOR LOOP

      L_SCII_NR_OF_ROWS := L_SCII_NR_OF_ROWS + 1;
      L_SCII_SC(L_SCII_NR_OF_ROWS) := A_SC;
      L_SCII_IC(L_SCII_NR_OF_ROWS) := L_SCII_REC.IC;
      L_SCII_ICNODE(L_SCII_NR_OF_ROWS) := L_SCII_REC.ICNODE;
      L_SCII_II(L_SCII_NR_OF_ROWS) := L_SCII_REC.II;
      L_SCII_IINODE(L_SCII_NR_OF_ROWS) := L_SCII_REC.IINODE;
      L_SCII_IE_VERSION(L_SCII_NR_OF_ROWS) := L_SCII_REC.IE_VERSION;
      L_SCII_IIVALUE(L_SCII_NR_OF_ROWS) := NULL;             
      L_SCII_POS_X(L_SCII_NR_OF_ROWS) := L_SCII_REC.POS_X;
      L_SCII_POS_Y(L_SCII_NR_OF_ROWS) := L_SCII_REC.POS_Y;
      L_SCII_IS_PROTECTED(L_SCII_NR_OF_ROWS) := L_SCII_REC.IS_PROTECTED;
      L_SCII_MANDATORY(L_SCII_NR_OF_ROWS) := L_SCII_REC.MANDATORY;
      L_SCII_HIDDEN(L_SCII_NR_OF_ROWS) := L_SCII_REC.HIDDEN;
      L_SCII_DSP_TITLE(L_SCII_NR_OF_ROWS) := L_SCII_REC.DSP_TITLE;
      L_SCII_DSP_LEN(L_SCII_NR_OF_ROWS) := L_SCII_REC.DSP_LEN;
      L_SCII_DSP_TP(L_SCII_NR_OF_ROWS) := L_SCII_REC.DSP_TP;
      L_SCII_DSP_ROWS(L_SCII_NR_OF_ROWS) := L_SCII_REC.DSP_ROWS;
      L_SCII_II_CLASS(L_SCII_NR_OF_ROWS) := L_SCII_REC.II_CLASS;
      L_SCII_LOG_HS(L_SCII_NR_OF_ROWS) := L_SCII_REC.LOG_HS;
      L_SCII_LOG_HS_DETAILS(L_SCII_NR_OF_ROWS) := L_SCII_REC.LOG_HS_DETAILS;
      L_SCII_LC(L_SCII_NR_OF_ROWS) := L_SCII_REC.LC;
      L_SCII_LC_VERSION(L_SCII_NR_OF_ROWS) := L_SCII_REC.LC_VERSION;
      L_SCII_MODIFY_FLAG(L_SCII_NR_OF_ROWS) := UNAPIGEN.MOD_FLAG_UPDATE;

   END LOOP;
   
   IF L_SCII_NR_OF_ROWS > 0 THEN
      L_SCII_MODIFY_REASON := 'Sample user attributes modified';   
      L_RET_CODE := UNAPIIC.SAVESCINFOFIELD
                   (L_SCII_SC,
                    L_SCII_IC,
                    L_SCII_ICNODE,
                    L_SCII_II,
                    L_SCII_IINODE,
                    L_SCII_IE_VERSION,
                    L_SCII_IIVALUE,
                    L_SCII_POS_X,
                    L_SCII_POS_Y,
                    L_SCII_IS_PROTECTED,
                    L_SCII_MANDATORY,
                    L_SCII_HIDDEN,
                    L_SCII_DSP_TITLE,
                    L_SCII_DSP_LEN,
                    L_SCII_DSP_TP,
                    L_SCII_DSP_ROWS,
                    L_SCII_II_CLASS,
                    L_SCII_LOG_HS,
                    L_SCII_LOG_HS_DETAILS,
                    L_SCII_LC,
                    L_SCII_LC_VERSION,
                    L_SCII_MODIFY_FLAG,
                    L_SCII_NR_OF_ROWS,
                    L_SCII_MODIFY_REASON);
      
      
      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SUCCESS;
      L_SQLERRM := NULL;
      IF L_RET_CODE = UNAPIGEN.DBERR_PARTIALSAVE THEN
         
         
         
         FOR L_ROW IN 1..L_SCII_NR_OF_ROWS LOOP
            IF L_SCII_MODIFY_FLAG(L_ROW) > UNAPIGEN.DBERR_SUCCESS THEN
               L_SQLERRM := 'sc=' || L_SCII_SC(L_ROW) ||
                         '#ic=' || L_SCII_IC(L_ROW) ||
                         '#icnode=' || TO_CHAR(L_SCII_ICNODE(L_ROW)) ||
                         '#ii=' || L_SCII_II(L_ROW) ||
                         '#iinode=' || TO_CHAR(L_SCII_IINODE(L_ROW)) ||
                         '#ie_version=' || L_SCII_IE_VERSION(L_ROW) ||
                         '#modify_flag=' || TO_CHAR(L_SCII_MODIFY_FLAG(L_ROW)) ||
                         '#SaveScInfoField#ErrorCode='||TO_CHAR(L_RET_CODE);
               EXIT;
            END IF;
         END LOOP;
      ELSIF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         L_SQLERRM := 'SaveScInfoField#ErrorCode='||TO_CHAR(L_RET_CODE);
      END IF;
      
      IF L_SQLERRM IS NOT NULL THEN
         INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
         VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
                'SaveScAttribute', L_SQLERRM);
      END IF;
   END IF;


   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveScAttribute', SQLERRM);
   END IF;
   IF L_MODIFIEDAU_CURSOR%ISOPEN THEN
      CLOSE L_MODIFIEDAU_CURSOR;
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveScAttribute'));
END SAVESCATTRIBUTE;

FUNCTION SAVE1SCATTRIBUTE 
(A_SC             IN        VARCHAR2,                 
 A_AU             IN        VARCHAR2,                 
 A_AU_VERSION     IN OUT    VARCHAR2,                 
 A_VALUE          IN        UNAPIGEN.VC40_TABLE_TYPE, 
 A_NR_OF_ROWS     IN        NUMBER,                   
 A_MODIFY_REASON  IN        VARCHAR2)                 
RETURN NUMBER IS

L_LC                   VARCHAR2(2);
L_LC_VERSION           VARCHAR2(20);
L_SS                   VARCHAR2(2);
L_LOG_HS               CHAR(1);
L_LOG_HS_DETAILS       CHAR(1);
L_ALLOW_MODIFY         CHAR(1);
L_ACTIVE               CHAR(1);
L_NEW_SEQ              NUMBER;
L_AU_HANDLE            BOOLEAN_TABLE_TYPE;
L_AU_FOUND             BOOLEAN;
L_INSERT_EVENT         BOOLEAN;
L_LAST_SEQ             INTEGER;
L_WHAT_DESCRIPTION     VARCHAR2(255);
L_HS_SEQ               INTEGER;
L_ST_VERSION           VARCHAR2(20);

L_SCII_SC                UNAPIGEN.VC20_TABLE_TYPE;
L_SCII_IC                UNAPIGEN.VC20_TABLE_TYPE;
L_SCII_ICNODE            UNAPIGEN.LONG_TABLE_TYPE;
L_SCII_II                UNAPIGEN.VC20_TABLE_TYPE;
L_SCII_IINODE            UNAPIGEN.LONG_TABLE_TYPE;
L_SCII_IE_VERSION        UNAPIGEN.VC20_TABLE_TYPE;
L_SCII_IIVALUE           UNAPIGEN.VC2000_TABLE_TYPE;
L_SCII_POS_X             UNAPIGEN.NUM_TABLE_TYPE;
L_SCII_POS_Y             UNAPIGEN.NUM_TABLE_TYPE;
L_SCII_IS_PROTECTED      UNAPIGEN.CHAR1_TABLE_TYPE;
L_SCII_MANDATORY         UNAPIGEN.CHAR1_TABLE_TYPE;
L_SCII_HIDDEN            UNAPIGEN.CHAR1_TABLE_TYPE;
L_SCII_DSP_TITLE         UNAPIGEN.VC40_TABLE_TYPE;
L_SCII_DSP_LEN           UNAPIGEN.NUM_TABLE_TYPE;
L_SCII_DSP_TP            UNAPIGEN.CHAR1_TABLE_TYPE;
L_SCII_DSP_ROWS          UNAPIGEN.NUM_TABLE_TYPE;
L_SCII_II_CLASS          UNAPIGEN.VC2_TABLE_TYPE;
L_SCII_LOG_HS            UNAPIGEN.CHAR1_TABLE_TYPE;
L_SCII_LOG_HS_DETAILS    UNAPIGEN.CHAR1_TABLE_TYPE;
L_SCII_LC                UNAPIGEN.VC2_TABLE_TYPE;
L_SCII_LC_VERSION        UNAPIGEN.VC20_TABLE_TYPE;
L_SCII_MODIFY_FLAG       UNAPIGEN.NUM_TABLE_TYPE;
L_SCII_NR_OF_ROWS        NUMBER;
L_SCII_MODIFY_REASON     VARCHAR2(255);

CURSOR L_AU_CURSOR IS
SELECT VALUE, AUSEQ
FROM UTSCAU
WHERE SC = A_SC
AND AU = A_AU
ORDER BY AUSEQ;

CURSOR L_SCII_CURSOR(A_AU VARCHAR2) IS
   SELECT A.*
   FROM UTSCII A, UTIE B
   WHERE A.SC = A_SC
   AND A.II = B.IE
   AND B.DEF_VAL_TP = 'A'
   AND B.DEF_AU_LEVEL = 'sc'
   AND B.IEVALUE = A_AU;

CURSOR L_SCII_TO_CLEAN_CURSOR IS
   SELECT A.*
   FROM UTSCII A, UTIE B
   WHERE A.SC = A_SC
   AND A.II = B.IE
   AND B.DEF_VAL_TP = 'A'
   AND B.DEF_AU_LEVEL = 'sc'
   AND B.IEVALUE NOT IN (SELECT AU FROM UTSCAU WHERE SC=A_SC);

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_NR_OF_ROWS, -1) < 0 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NROFROWS;
      RAISE STPERROR;
   END IF;

   IF NVL(A_SC, ' ') = ' ' OR NVL(A_AU, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      L_AU_HANDLE(L_SEQ_NO) := TRUE;
   END LOOP;

   L_RET_CODE := UNAPIAUT.GETSCAUTHORISATION(A_SC, L_ST_VERSION, L_LC, L_LC_VERSION, L_SS,
                                             L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS, L_LOG_HS_DETAILS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTSC
   SET ALLOW_MODIFY = '#'
   WHERE SC = A_SC;

   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR ;
   END IF;

   L_EVENT_TP := 'ScAttributesUpdated';
   L_EV_SEQ_NR := -1;
   L_EV_DETAILS := 'st_version=' || L_ST_VERSION;
   L_RESULT := UNAPIEV.INSERTEVENT('Save1ScAttribute', UNAPIGEN.P_EVMGR_NAME, 'sc', A_SC, L_LC, 
                                   L_LC_VERSION, L_SS, L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;
   
   IF L_LOG_HS = '1' THEN
      INSERT INTO UTSCHS(SC, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES(A_SC, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
             'sample "'||A_SC||'" attribute "'||A_AU||'" is created/updated.', 
             CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   L_HS_SEQ := 0;
   IF L_LOG_HS_DETAILS = '1' THEN
      L_HS_SEQ := L_HS_SEQ + 1;
      INSERT INTO UTSCHSDETAILS(SC, TR_SEQ, EV_SEQ, SEQ ,DETAILS)
      VALUES(A_SC, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_SEQ, 
             'sample "'||A_SC||'" attribute "'||A_AU||'" is created/updated.');
   END IF;

   L_LAST_SEQ := 499;
   FOR L_SCAU IN L_AU_CURSOR LOOP
      L_AU_FOUND := FALSE;
      FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
         
         IF L_SCAU.VALUE = A_VALUE(L_SEQ_NO) OR
            (L_SCAU.VALUE IS NULL AND A_VALUE(L_SEQ_NO) IS NULL) THEN
            L_AU_HANDLE(L_SEQ_NO) := FALSE;
            L_AU_FOUND := TRUE;
            EXIT;
         END IF;
      END LOOP;

      IF NOT L_AU_FOUND THEN
         
         DELETE FROM UTSCAU
         WHERE SC = A_SC
            AND AU = A_AU
            AND VALUE = L_SCAU.VALUE;

         
         IF L_SCAU.VALUE IS NULL THEN
            DELETE FROM UTSCAU
            WHERE SC = A_SC
              AND AU = A_AU
              AND VALUE IS NULL;
         END IF;            

         IF (L_LOG_HS_DETAILS = '1') THEN
            L_WHAT_DESCRIPTION := 'Attribute "'||A_AU||'" with value "'||L_SCAU.VALUE||'" is removed from sample "'||A_SC||'".';
            L_HS_SEQ := L_HS_SEQ + 1;
            INSERT INTO UTSCHSDETAILS(SC, TR_SEQ, EV_SEQ, SEQ, DETAILS)
            VALUES(A_SC, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_SEQ, L_WHAT_DESCRIPTION);
         END IF;   
      ELSE      
         L_LAST_SEQ := L_SCAU.AUSEQ;
      END IF;
   END LOOP;

   L_SCII_NR_OF_ROWS := 0;
   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      IF L_AU_HANDLE(L_SEQ_NO) THEN
         L_LAST_SEQ := L_LAST_SEQ+1;

         
         INSERT INTO UTSCAU(SC, AU, AUSEQ, VALUE)
         VALUES
         (A_SC, A_AU, L_LAST_SEQ, A_VALUE(L_SEQ_NO));

         IF (L_LOG_HS_DETAILS = '1') THEN
            L_WHAT_DESCRIPTION := 'Attribute "'||A_AU||'" is added to sample "'||A_SC||'", value is "'||A_VALUE(L_SEQ_NO)||'".';
            L_HS_SEQ := L_HS_SEQ + 1;
            INSERT INTO UTSCHSDETAILS(SC, TR_SEQ, EV_SEQ, SEQ, DETAILS)
            VALUES(A_SC, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_SEQ, L_WHAT_DESCRIPTION);
         END IF; 
         
         FOR L_SCII_REC IN L_SCII_CURSOR(A_AU) LOOP
            L_SCII_NR_OF_ROWS := L_SCII_NR_OF_ROWS + 1;
            L_SCII_SC(L_SCII_NR_OF_ROWS) := A_SC;
            L_SCII_IC(L_SCII_NR_OF_ROWS) := L_SCII_REC.IC;
            L_SCII_ICNODE(L_SCII_NR_OF_ROWS) := L_SCII_REC.ICNODE;
            L_SCII_II(L_SCII_NR_OF_ROWS) := L_SCII_REC.II;
            L_SCII_IINODE(L_SCII_NR_OF_ROWS) := L_SCII_REC.IINODE;
            L_SCII_IE_VERSION(L_SCII_NR_OF_ROWS) := L_SCII_REC.IE_VERSION;
            L_SCII_IIVALUE(L_SCII_NR_OF_ROWS) := A_VALUE(L_SEQ_NO);   
            L_SCII_POS_X(L_SCII_NR_OF_ROWS) := L_SCII_REC.POS_X;
            L_SCII_POS_Y(L_SCII_NR_OF_ROWS) := L_SCII_REC.POS_Y;
            L_SCII_IS_PROTECTED(L_SCII_NR_OF_ROWS) := L_SCII_REC.IS_PROTECTED;
            L_SCII_MANDATORY(L_SCII_NR_OF_ROWS) := L_SCII_REC.MANDATORY;
            L_SCII_HIDDEN(L_SCII_NR_OF_ROWS) := L_SCII_REC.HIDDEN;
            L_SCII_DSP_TITLE(L_SCII_NR_OF_ROWS) := L_SCII_REC.DSP_TITLE;
            L_SCII_DSP_LEN(L_SCII_NR_OF_ROWS) := L_SCII_REC.DSP_LEN;
            L_SCII_DSP_TP(L_SCII_NR_OF_ROWS) := L_SCII_REC.DSP_TP;
            L_SCII_DSP_ROWS(L_SCII_NR_OF_ROWS) := L_SCII_REC.DSP_ROWS;
            L_SCII_II_CLASS(L_SCII_NR_OF_ROWS) := L_SCII_REC.II_CLASS;
            L_SCII_LOG_HS(L_SCII_NR_OF_ROWS) := L_SCII_REC.LOG_HS;
            L_SCII_LOG_HS_DETAILS(L_SCII_NR_OF_ROWS) := L_SCII_REC.LOG_HS_DETAILS;
            L_SCII_LC(L_SCII_NR_OF_ROWS) := L_SCII_REC.LC;
            L_SCII_LC_VERSION(L_SCII_NR_OF_ROWS) := L_SCII_REC.LC_VERSION;
            L_SCII_MODIFY_FLAG(L_SCII_NR_OF_ROWS) := UNAPIGEN.MOD_FLAG_UPDATE;
         END LOOP;                  
      END IF;
   END LOOP;

   
   
   
   FOR L_SCII_REC IN L_SCII_TO_CLEAN_CURSOR LOOP

      L_SCII_NR_OF_ROWS := L_SCII_NR_OF_ROWS + 1;
      L_SCII_SC(L_SCII_NR_OF_ROWS) := A_SC;
      L_SCII_IC(L_SCII_NR_OF_ROWS) := L_SCII_REC.IC;
      L_SCII_ICNODE(L_SCII_NR_OF_ROWS) := L_SCII_REC.ICNODE;
      L_SCII_II(L_SCII_NR_OF_ROWS) := L_SCII_REC.II;
      L_SCII_IINODE(L_SCII_NR_OF_ROWS) := L_SCII_REC.IINODE;
      L_SCII_IE_VERSION(L_SCII_NR_OF_ROWS) := L_SCII_REC.IE_VERSION;
      L_SCII_IIVALUE(L_SCII_NR_OF_ROWS) := NULL;             
      L_SCII_POS_X(L_SCII_NR_OF_ROWS) := L_SCII_REC.POS_X;
      L_SCII_POS_Y(L_SCII_NR_OF_ROWS) := L_SCII_REC.POS_Y;
      L_SCII_IS_PROTECTED(L_SCII_NR_OF_ROWS) := L_SCII_REC.IS_PROTECTED;
      L_SCII_MANDATORY(L_SCII_NR_OF_ROWS) := L_SCII_REC.MANDATORY;
      L_SCII_HIDDEN(L_SCII_NR_OF_ROWS) := L_SCII_REC.HIDDEN;
      L_SCII_DSP_TITLE(L_SCII_NR_OF_ROWS) := L_SCII_REC.DSP_TITLE;
      L_SCII_DSP_LEN(L_SCII_NR_OF_ROWS) := L_SCII_REC.DSP_LEN;
      L_SCII_DSP_TP(L_SCII_NR_OF_ROWS) := L_SCII_REC.DSP_TP;
      L_SCII_DSP_ROWS(L_SCII_NR_OF_ROWS) := L_SCII_REC.DSP_ROWS;
      L_SCII_II_CLASS(L_SCII_NR_OF_ROWS) := L_SCII_REC.II_CLASS;
      L_SCII_LOG_HS(L_SCII_NR_OF_ROWS) := L_SCII_REC.LOG_HS;
      L_SCII_LOG_HS_DETAILS(L_SCII_NR_OF_ROWS) := L_SCII_REC.LOG_HS_DETAILS;
      L_SCII_LC(L_SCII_NR_OF_ROWS) := L_SCII_REC.LC;
      L_SCII_LC_VERSION(L_SCII_NR_OF_ROWS) := L_SCII_REC.LC_VERSION;
      L_SCII_MODIFY_FLAG(L_SCII_NR_OF_ROWS) := UNAPIGEN.MOD_FLAG_UPDATE;
   END LOOP;

   IF L_SCII_NR_OF_ROWS > 0 THEN
      L_SCII_MODIFY_REASON := 'Sample user attributes modified';   
      L_RET_CODE := UNAPIIC.SAVESCINFOFIELD
                   (L_SCII_SC,
                    L_SCII_IC,
                    L_SCII_ICNODE,
                    L_SCII_II,
                    L_SCII_IINODE,
                    L_SCII_IE_VERSION,
                    L_SCII_IIVALUE,
                    L_SCII_POS_X,
                    L_SCII_POS_Y,
                    L_SCII_IS_PROTECTED,
                    L_SCII_MANDATORY,
                    L_SCII_HIDDEN,
                    L_SCII_DSP_TITLE,
                    L_SCII_DSP_LEN,
                    L_SCII_DSP_TP,
                    L_SCII_DSP_ROWS,
                    L_SCII_II_CLASS,
                    L_SCII_LOG_HS,
                    L_SCII_LOG_HS_DETAILS,
                    L_SCII_LC,
                    L_SCII_LC_VERSION,
                    L_SCII_MODIFY_FLAG,
                    L_SCII_NR_OF_ROWS,
                    L_SCII_MODIFY_REASON);
      
      
      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SUCCESS;
      L_SQLERRM := NULL;
      IF L_RET_CODE = UNAPIGEN.DBERR_PARTIALSAVE THEN
         
         
         
         FOR L_ROW IN 1..L_SCII_NR_OF_ROWS LOOP
            IF L_SCII_MODIFY_FLAG(L_ROW) > UNAPIGEN.DBERR_SUCCESS THEN
               L_SQLERRM := 'sc=' || L_SCII_SC(L_ROW) ||
                         '#ic=' || L_SCII_IC(L_ROW) ||
                         '#icnode=' || TO_CHAR(L_SCII_ICNODE(L_ROW)) ||
                         '#ii=' || L_SCII_II(L_ROW) ||
                         '#iinode=' || TO_CHAR(L_SCII_IINODE(L_ROW)) ||
                         '#ie_version=' || L_SCII_IE_VERSION(L_ROW) ||
                         '#modify_flag=' || TO_CHAR(L_SCII_MODIFY_FLAG(L_ROW)) ||
                         '#SaveScInfoField#ErrorCode='||TO_CHAR(L_RET_CODE);
               EXIT;
            END IF;
         END LOOP;
      ELSIF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         L_SQLERRM := 'SaveScInfoField#ErrorCode='||TO_CHAR(L_RET_CODE);
      END IF;
      
      IF L_SQLERRM IS NOT NULL THEN
         INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
         VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                'SaveScAttribute', L_SQLERRM);
      END IF;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('Save1ScAttribute', SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('Save1ScAttribute', L_SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'Save1ScAttribute'));
END SAVE1SCATTRIBUTE;

FUNCTION GETSCHISTORY 
(A_SC                OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_WHO               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_WHO_DESCRIPTION   OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_WHAT              OUT     UNAPIGEN.VC60_TABLE_TYPE,  
 A_WHAT_DESCRIPTION  OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_LOGDATE           OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_WHY               OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_TR_SEQ            OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_EV_SEQ            OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_NR_OF_ROWS        IN OUT  NUMBER,                    
 A_WHERE_CLAUSE      IN      VARCHAR2)                  
RETURN NUMBER IS

L_NR_OF_ROWS_IN               INTEGER;
L_NR_OF_ROWS_OUT              INTEGER;


L_SC_TAB                      UNAPIGEN.VC20_TABLE_TYPE;
L_WHO_TAB                     UNAPIGEN.VC20_TABLE_TYPE;
L_WHO_DESCRIPTION_TAB         UNAPIGEN.VC40_TABLE_TYPE;
L_WHAT_TAB                    UNAPIGEN.VC60_TABLE_TYPE;
L_WHAT_DESCRIPTION_TAB        UNAPIGEN.VC255_TABLE_TYPE;
L_LOGDATE_TAB                 UNAPIGEN.DATE_TABLE_TYPE;
L_WHY_TAB                     UNAPIGEN.VC255_TABLE_TYPE;
L_TR_SEQ_TAB                  UNAPIGEN.NUM_TABLE_TYPE;
L_EV_SEQ_TAB                  UNAPIGEN.NUM_TABLE_TYPE;

BEGIN
   L_NR_OF_ROWS_IN := A_NR_OF_ROWS;
   L_NR_OF_ROWS_OUT := L_NR_OF_ROWS_IN;
   L_RET_CODE := GETSCHISTORY(A_SC,             
                              A_WHO,             
                              A_WHO_DESCRIPTION,
                              A_WHAT,            
                              A_WHAT_DESCRIPTION,
                              A_LOGDATE,         
                              A_WHY,             
                              A_TR_SEQ,          
                              A_EV_SEQ,          
                              L_NR_OF_ROWS_OUT,      
                              A_WHERE_CLAUSE,
                              0);
    IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
       RETURN(L_RET_CODE);
    ELSE
       A_NR_OF_ROWS := L_NR_OF_ROWS_OUT;
       IF L_NR_OF_ROWS_OUT = L_NR_OF_ROWS_IN THEN
          
          L_RET_CODE := GETSCHISTORY(L_SC_TAB,             
                                     L_WHO_TAB,
                                     L_WHO_DESCRIPTION_TAB,
                                     L_WHAT_TAB,
                                     L_WHAT_DESCRIPTION_TAB,
                                     L_LOGDATE_TAB,
                                     L_WHY_TAB,
                                     L_TR_SEQ_TAB,
                                     L_EV_SEQ_TAB,
                                     L_NR_OF_ROWS_OUT,      
                                     A_WHERE_CLAUSE,
                                     -1);
          IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
             RETURN(L_RET_CODE);
          END IF;
       END IF;
    END IF;
    RETURN(L_RET_CODE);
                              
EXCEPTION
WHEN OTHERS THEN
   L_SQLERRM := SQLERRM;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
          'GetScHistory', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETSCHISTORY;

FUNCTION GETSCHISTORY 
(A_SC                OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_WHO               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_WHO_DESCRIPTION   OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_WHAT              OUT     UNAPIGEN.VC60_TABLE_TYPE,  
 A_WHAT_DESCRIPTION  OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_LOGDATE           OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_WHY               OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_TR_SEQ            OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_EV_SEQ            OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_NR_OF_ROWS        IN OUT  NUMBER,                    
 A_WHERE_CLAUSE      IN      VARCHAR2,                  
 A_NEXT_ROWS         IN      NUMBER)                    
RETURN NUMBER IS

L_SC                      VARCHAR2(20);
L_WHO                     VARCHAR2(20);
L_WHO_DESCRIPTION         VARCHAR2(40);
L_WHAT                    VARCHAR2(60);
L_WHAT_DESCRIPTION        VARCHAR2(255);
L_LOGDATE                 TIMESTAMP WITH TIME ZONE;
L_WHY                     VARCHAR2(255);
L_TR_SEQ                  NUMBER;
L_EV_SEQ                  NUMBER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF DBMS_SQL.IS_OPEN(P_HS_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(P_HS_CURSOR);
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_HS_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      
      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
         RETURN(UNAPIGEN.DBERR_WHERECLAUSE);
      ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
         L_WHERE_CLAUSE := 'WHERE sc = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                           ''' ORDER BY logdate DESC';
      ELSE
         L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
      END IF;
      
      L_WHERE_CLAUSE := REPLACE(REPLACE(L_WHERE_CLAUSE, 
                                        'logdate DESC', 
                                        'logdate DESC, ROWID DESC'),
                                'LOGDATE DESC', 
                                'LOGDATE DESC, ROWID DESC');

      IF DBMS_SQL.IS_OPEN(P_HS_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(P_HS_CURSOR);
      END IF;
      P_HS_CURSOR := DBMS_SQL.OPEN_CURSOR;
      L_SQL_STRING := 'SELECT sc, who, who_description, what, what_description, logdate, why, tr_seq, ev_seq '||
                      'FROM dd' || UNAPIGEN.P_DD || '.uvschs ' ||
                      L_WHERE_CLAUSE;
      DBMS_SQL.PARSE(P_HS_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

      DBMS_SQL.DEFINE_COLUMN(P_HS_CURSOR, 1, L_SC, 20);
      DBMS_SQL.DEFINE_COLUMN(P_HS_CURSOR, 2, L_WHO, 20);
      DBMS_SQL.DEFINE_COLUMN(P_HS_CURSOR, 3, L_WHO_DESCRIPTION, 40);
      DBMS_SQL.DEFINE_COLUMN(P_HS_CURSOR, 4, L_WHAT, 60);
      DBMS_SQL.DEFINE_COLUMN(P_HS_CURSOR, 5, L_WHAT_DESCRIPTION, 255);
      DBMS_SQL.DEFINE_COLUMN(P_HS_CURSOR, 6, L_LOGDATE);
      DBMS_SQL.DEFINE_COLUMN(P_HS_CURSOR, 7, L_WHY, 255);
      DBMS_SQL.DEFINE_COLUMN(P_HS_CURSOR, 8, L_TR_SEQ);
      DBMS_SQL.DEFINE_COLUMN(P_HS_CURSOR, 9, L_EV_SEQ);
      L_RESULT := DBMS_SQL.EXECUTE(P_HS_CURSOR);
   END IF;

   L_RESULT := DBMS_SQL.FETCH_ROWS(P_HS_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;
      DBMS_SQL.COLUMN_VALUE(P_HS_CURSOR, 1, L_SC);
      DBMS_SQL.COLUMN_VALUE(P_HS_CURSOR, 2, L_WHO);
      DBMS_SQL.COLUMN_VALUE(P_HS_CURSOR, 3, L_WHO_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE(P_HS_CURSOR, 4, L_WHAT);
      DBMS_SQL.COLUMN_VALUE(P_HS_CURSOR, 5, L_WHAT_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE(P_HS_CURSOR, 6, L_LOGDATE);
      DBMS_SQL.COLUMN_VALUE(P_HS_CURSOR, 7, L_WHY);
      DBMS_SQL.COLUMN_VALUE(P_HS_CURSOR, 8, L_TR_SEQ);
      DBMS_SQL.COLUMN_VALUE(P_HS_CURSOR, 9, L_EV_SEQ);
      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_SC(L_FETCHED_ROWS) := L_SC;
      A_WHO(L_FETCHED_ROWS) := L_WHO;
      A_WHO_DESCRIPTION(L_FETCHED_ROWS) := L_WHO_DESCRIPTION;
      A_WHAT(L_FETCHED_ROWS) := L_WHAT;
      A_WHAT_DESCRIPTION(L_FETCHED_ROWS) := L_WHAT_DESCRIPTION;
      A_LOGDATE(L_FETCHED_ROWS) := TO_CHAR(L_LOGDATE);
      A_WHY(L_FETCHED_ROWS) := L_WHY;
      A_TR_SEQ(L_FETCHED_ROWS) := L_TR_SEQ;
      A_EV_SEQ(L_FETCHED_ROWS) := L_EV_SEQ;
      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_HS_CURSOR);
      END IF;
   END LOOP;

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
      DBMS_SQL.CLOSE_CURSOR(P_HS_CURSOR);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
      DBMS_SQL.CLOSE_CURSOR(P_HS_CURSOR);
   ELSE
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;
   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   L_SQLERRM := SQLERRM;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
          'GetScHistory', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   IF DBMS_SQL.IS_OPEN(P_HS_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(P_HS_CURSOR);
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETSCHISTORY;

FUNCTION GETSCHISTORYDETAILS 
(A_SC                OUT     UNAPIGEN.VC20_TABLE_TYPE,    
 A_TR_SEQ            OUT     UNAPIGEN.NUM_TABLE_TYPE,     
 A_EV_SEQ            OUT     UNAPIGEN.NUM_TABLE_TYPE,     
 A_SEQ               OUT     UNAPIGEN.NUM_TABLE_TYPE,     
 A_DETAILS           OUT     UNAPIGEN.VC4000_TABLE_TYPE,  
 A_NR_OF_ROWS        IN OUT  NUMBER,                      
 A_WHERE_CLAUSE      IN      VARCHAR2,                    
 A_NEXT_ROWS         IN      NUMBER)                      
RETURN NUMBER IS

L_SC                      VARCHAR2(20);
L_TR_SEQ                  NUMBER;
L_EV_SEQ                  NUMBER;
L_SEQ                     NUMBER;
L_DETAILS                 VARCHAR2(4000);

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF DBMS_SQL.IS_OPEN(P_HS_DETAILS_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(P_HS_DETAILS_CURSOR);
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_HS_DETAILS_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN

      
      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
         RETURN(UNAPIGEN.DBERR_WHERECLAUSE);
      ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
         L_WHERE_CLAUSE := 'WHERE sc = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                           ''' ORDER BY tr_seq DESC, ev_seq DESC, seq DESC';
      ELSE
         L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
      END IF;

      IF DBMS_SQL.IS_OPEN(P_HS_DETAILS_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(P_HS_DETAILS_CURSOR);
      END IF;
      P_HS_DETAILS_CURSOR := DBMS_SQL.OPEN_CURSOR;
      L_SQL_STRING := 'SELECT sc, tr_seq, ev_seq, seq, details '||
                      'FROM dd' || UNAPIGEN.P_DD || '.uvschsdetails ' ||
                      L_WHERE_CLAUSE;
      DBMS_SQL.PARSE(P_HS_DETAILS_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      DBMS_SQL.DEFINE_COLUMN(P_HS_DETAILS_CURSOR, 1, L_SC, 20);
      DBMS_SQL.DEFINE_COLUMN(P_HS_DETAILS_CURSOR, 2, L_TR_SEQ);
      DBMS_SQL.DEFINE_COLUMN(P_HS_DETAILS_CURSOR, 3, L_EV_SEQ);
      DBMS_SQL.DEFINE_COLUMN(P_HS_DETAILS_CURSOR, 4, L_SEQ);
      DBMS_SQL.DEFINE_COLUMN(P_HS_DETAILS_CURSOR, 5, L_DETAILS, 4000);   
      L_RESULT := DBMS_SQL.EXECUTE(P_HS_DETAILS_CURSOR);
   END IF;
   
   L_RESULT := DBMS_SQL.FETCH_ROWS(P_HS_DETAILS_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;
      DBMS_SQL.COLUMN_VALUE(P_HS_DETAILS_CURSOR, 1, L_SC);
      DBMS_SQL.COLUMN_VALUE(P_HS_DETAILS_CURSOR, 2, L_TR_SEQ);
      DBMS_SQL.COLUMN_VALUE(P_HS_DETAILS_CURSOR, 3, L_EV_SEQ);
      DBMS_SQL.COLUMN_VALUE(P_HS_DETAILS_CURSOR, 4, L_SEQ);
      DBMS_SQL.COLUMN_VALUE(P_HS_DETAILS_CURSOR, 5, L_DETAILS);
      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_SC(L_FETCHED_ROWS) := L_SC;
      A_TR_SEQ(L_FETCHED_ROWS) := L_TR_SEQ;
      A_EV_SEQ(L_FETCHED_ROWS) := L_EV_SEQ;
      A_SEQ(L_FETCHED_ROWS) := L_SEQ;
      A_DETAILS(L_FETCHED_ROWS) := L_DETAILS;
      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_HS_DETAILS_CURSOR);
      END IF;
   END LOOP;

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
      DBMS_SQL.CLOSE_CURSOR(P_HS_DETAILS_CURSOR);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
      DBMS_SQL.CLOSE_CURSOR(P_HS_DETAILS_CURSOR);
   ELSE
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;
   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
             'GetScHistoryDetails', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN(P_HS_DETAILS_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(P_HS_DETAILS_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETSCHISTORYDETAILS;

FUNCTION SAVESCHISTORY 
(A_SC                IN     VARCHAR2,                   
 A_WHO               IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_WHO_DESCRIPTION   IN     UNAPIGEN.VC40_TABLE_TYPE,   
 A_WHAT              IN     UNAPIGEN.VC60_TABLE_TYPE,   
 A_WHAT_DESCRIPTION  IN     UNAPIGEN.VC255_TABLE_TYPE,  
 A_LOGDATE           IN     UNAPIGEN.DATE_TABLE_TYPE,   
 A_WHY               IN     UNAPIGEN.VC255_TABLE_TYPE,  
 A_TR_SEQ            IN     UNAPIGEN.NUM_TABLE_TYPE,    
 A_EV_SEQ            IN     UNAPIGEN.NUM_TABLE_TYPE,    
 A_NR_OF_ROWS        IN     NUMBER)                     
RETURN NUMBER IS

L_LC                   VARCHAR2(2);
L_LC_VERSION           VARCHAR2(20);
L_SS                   VARCHAR2(2);
L_LOG_HS               CHAR(1);
L_LOG_HS_DETAILS       CHAR(1);
L_ALLOW_MODIFY         CHAR(1);
L_ACTIVE               CHAR(1);
L_ST_VERSION           VARCHAR2(20);

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_NR_OF_ROWS, -1) < 0 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NROFROWS;
      RAISE STPERROR;
   END IF;

   IF NVL(A_SC, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIAUT.GETSCAUTHORISATION(A_SC, L_ST_VERSION, L_LC, L_LC_VERSION, L_SS,
                                             L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS, L_LOG_HS_DETAILS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      UPDATE UTSCHS
      SET WHY = A_WHY(L_SEQ_NO)
      WHERE SC = A_SC
         AND WHO = A_WHO(L_SEQ_NO)
         AND WHO_DESCRIPTION = A_WHO_DESCRIPTION(L_SEQ_NO)
         AND TO_CHAR(LOGDATE) = A_LOGDATE(L_SEQ_NO)
         AND WHAT = A_WHAT(L_SEQ_NO)
         AND WHAT_DESCRIPTION = A_WHAT_DESCRIPTION(L_SEQ_NO)
         AND TR_SEQ = A_TR_SEQ(L_SEQ_NO)
         AND EV_SEQ = A_EV_SEQ(L_SEQ_NO);

      IF SQL%ROWCOUNT = 0 THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
         RAISE STPERROR;
      END IF;
   END LOOP;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveScHistory', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveScHistory'));
END SAVESCHISTORY;

FUNCTION GETSCGROUPKEY
(A_SC              OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_GK              OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_GK_VERSION      OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_VALUE           OUT    UNAPIGEN.VC40_TABLE_TYPE,  
 A_DESCRIPTION     OUT    UNAPIGEN.VC40_TABLE_TYPE,  
 A_IS_PROTECTED    OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_VALUE_UNIQUE    OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_SINGLE_VALUED   OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NEW_VAL_ALLOWED OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_MANDATORY       OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_VALUE_LIST_TP   OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_DSP_ROWS        OUT    UNAPIGEN.NUM_TABLE_TYPE,   
 A_NR_OF_ROWS      IN OUT NUMBER,                    
 A_WHERE_CLAUSE    IN     VARCHAR2)                  
RETURN NUMBER IS

L_SC                             VARCHAR2(20);
L_GK                             VARCHAR2(20);
L_GK_VERSION                     VARCHAR2(20);
L_VALUE                          VARCHAR2(40);
L_DESCRIPTION                    VARCHAR2(40);
L_IS_PROTECTED                   CHAR(1);
L_VALUE_UNIQUE                   CHAR(1);
L_SINGLE_VALUED                  CHAR(1);
L_NEW_VAL_ALLOWED                CHAR(1);
L_MANDATORY                      CHAR(1);
L_VALUE_LIST_TP                  CHAR(1);
L_DSP_ROWS                       NUMBER(3);
L_FETCH_WSSC                     BOOLEAN;
L_FETCH_RQSC                     BOOLEAN;
L_BIND_SC_SELECTION              BOOLEAN;
L_ADDORACLECBOHINT               BOOLEAN;
L_BIND_FIXED_SC_FLAG             BOOLEAN;
L_GKDEF_REC                      UNAPIGK.GKDEFINITIONREC;
L_TEMP_RET_CODE                  INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   L_FETCH_WSSC := FALSE;
   L_FETCH_RQSC := FALSE;
   L_BIND_SC_SELECTION := FALSE;
   L_BIND_FIXED_SC_FLAG := FALSE;
   L_ADDORACLECBOHINT := FALSE;
   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      RETURN(UNAPIGEN.DBERR_WHERECLAUSE);
   ELSIF A_WHERE_CLAUSE = 'SELECTION' THEN
      IF UNAPISC.P_SELECTION_CLAUSE IS NOT NULL THEN 
         IF INSTR(UPPER(UNAPISC.P_SELECTION_CLAUSE), ' WHERE ') <> 0 THEN       
            L_WHERE_CLAUSE := ','||UNAPISC.P_SELECTION_CLAUSE|| ' AND a.sc = gk.sc ORDER BY gk.sc,gk.gkseq'; 
         ELSE
            L_WHERE_CLAUSE := ','||UNAPISC.P_SELECTION_CLAUSE|| ' WHERE a.sc = gk.sc ORDER BY gk.sc,gk.gkseq'; 
         END IF;
         L_BIND_SC_SELECTION := TRUE;
         L_ADDORACLECBOHINT := TRUE;
      ELSE
         L_WHERE_CLAUSE := 'ORDER BY gk.sc, gk.gkseq'; 
      END IF;
   ELSIF REPLACE( SUBSTR(A_WHERE_CLAUSE, 1 , INSTR(A_WHERE_CLAUSE,'''')), ' ', '')='WS=''' THEN
      
      
      L_FETCH_WSSC := TRUE;
      L_WHERE_CLAUSE := 'WHERE utwssc.sc=gk.sc AND utwssc.ws = :ws_val '; 
      IF INSTR(UPPER(A_WHERE_CLAUSE), 'ORDER BY')=0 THEN
         L_WHERE_CLAUSE := L_WHERE_CLAUSE||' ORDER BY utwssc.rownr';          
      END IF;   
   ELSIF REPLACE( SUBSTR(A_WHERE_CLAUSE, 1 , INSTR(A_WHERE_CLAUSE,'''')), ' ', '')='RQ=''' THEN
      
      
      L_FETCH_RQSC := TRUE;
      L_WHERE_CLAUSE := 'WHERE sc IN (SELECT sc FROM utrqsc WHERE rq =:rq_val) '; 
      IF INSTR(UPPER(A_WHERE_CLAUSE), 'ORDER BY')=0 THEN
         L_WHERE_CLAUSE := L_WHERE_CLAUSE||' ORDER BY sc';          
      END IF;   
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_BIND_FIXED_SC_FLAG := TRUE;
      L_WHERE_CLAUSE := 'WHERE gk.sc = :sc_val ORDER BY gk.gkseq';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   IF NOT DBMS_SQL.IS_OPEN(L_SCGK_CURSOR) THEN
      
      L_TEMP_RET_CODE := UNAPIGK.INITGROUPKEYDEFBUFFER('sc');
      IF L_TEMP_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         RAISE_APPLICATION_ERROR(-20000, 'InitGroupKeyDefBuffer failed with ret_code='||L_TEMP_RET_CODE||' for a_gk_tp=sc');   
      END IF;
      L_SCGK_CURSOR := DBMS_SQL.OPEN_CURSOR;
      IF L_FETCH_WSSC THEN
         L_SQL_STRING := 'SELECT gk.sc, gk.gk, gk.gk_version, gk.value ' ||
                         'FROM dd'|| UNAPIGEN.P_DD ||'.uvscgk gk, utwssc ' || L_WHERE_CLAUSE;
      ELSE
         L_SQL_STRING := 'SELECT gk.sc, gk.gk, gk.gk_version, gk.value ' ||
                         'FROM dd'|| UNAPIGEN.P_DD ||'.uvscgk gk ' || L_WHERE_CLAUSE;
      END IF;
      
      IF L_ADDORACLECBOHINT THEN
         UNAPIAUT.ADDORACLECBOHINT (L_SQL_STRING) ;
      END IF;

      DBMS_SQL.PARSE(L_SCGK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      IF L_BIND_SC_SELECTION THEN
         FOR L_X IN 1..UNAPISC.P_SELECTION_VAL_TAB.COUNT() LOOP
            DBMS_SQL.BIND_VARIABLE(L_SCGK_CURSOR, ':col_val'||L_X , UNAPISC.P_SELECTION_VAL_TAB(L_X)); 
         END LOOP;
      ELSIF L_BIND_FIXED_SC_FLAG THEN
         DBMS_SQL.BIND_VARIABLE(L_SCGK_CURSOR, ':sc_val' , A_WHERE_CLAUSE); 
      ELSIF L_FETCH_WSSC THEN
         DBMS_SQL.BIND_VARIABLE(L_SCGK_CURSOR, ':ws_val' , SUBSTR(A_WHERE_CLAUSE,5, LENGTH(A_WHERE_CLAUSE)-5)); 
      ELSIF L_FETCH_RQSC THEN
         DBMS_SQL.BIND_VARIABLE(L_SCGK_CURSOR, ':rq_val' , SUBSTR(A_WHERE_CLAUSE,5, LENGTH(A_WHERE_CLAUSE)-5)); 
      END IF;

      DBMS_SQL.DEFINE_COLUMN(L_SCGK_CURSOR, 1, L_SC, 20);
      DBMS_SQL.DEFINE_COLUMN(L_SCGK_CURSOR, 2, L_GK, 20);
      DBMS_SQL.DEFINE_COLUMN(L_SCGK_CURSOR, 3, L_GK_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(L_SCGK_CURSOR, 4, L_VALUE, 40);

      L_RESULT := DBMS_SQL.EXECUTE(L_SCGK_CURSOR);
   END IF;
   
   L_RESULT := DBMS_SQL.FETCH_ROWS(L_SCGK_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_SCGK_CURSOR, 1, L_SC);
      DBMS_SQL.COLUMN_VALUE(L_SCGK_CURSOR, 2, L_GK);
      DBMS_SQL.COLUMN_VALUE(L_SCGK_CURSOR, 3, L_GK_VERSION);
      DBMS_SQL.COLUMN_VALUE(L_SCGK_CURSOR, 4, L_VALUE);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_SC(L_FETCHED_ROWS) := L_SC;
      A_GK(L_FETCHED_ROWS) := L_GK;
      A_GK_VERSION(L_FETCHED_ROWS) := L_GK_VERSION;
      A_VALUE(L_FETCHED_ROWS) := L_VALUE;

      
      BEGIN
         L_GKDEF_REC := UNAPIGK.P_GK_DEF_BUFFER(L_GK);
         A_DESCRIPTION(L_FETCHED_ROWS) := L_GKDEF_REC.DESCRIPTION;
         A_IS_PROTECTED(L_FETCHED_ROWS) := L_GKDEF_REC.IS_PROTECTED;
         A_VALUE_UNIQUE(L_FETCHED_ROWS) := L_GKDEF_REC.VALUE_UNIQUE;
         A_SINGLE_VALUED(L_FETCHED_ROWS) := L_GKDEF_REC.SINGLE_VALUED;
         A_NEW_VAL_ALLOWED(L_FETCHED_ROWS) := L_GKDEF_REC.NEW_VAL_ALLOWED;
         A_MANDATORY(L_FETCHED_ROWS) := L_GKDEF_REC.MANDATORY;
         A_VALUE_LIST_TP(L_FETCHED_ROWS) := L_GKDEF_REC.VALUE_LIST_TP;
         A_DSP_ROWS(L_FETCHED_ROWS) := L_GKDEF_REC.DSP_ROWS;
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
         
         
         
         A_DESCRIPTION(L_FETCHED_ROWS)     := L_GK;
         A_IS_PROTECTED(L_FETCHED_ROWS)    := '1';
         A_VALUE_UNIQUE(L_FETCHED_ROWS)    := '0';
         A_SINGLE_VALUED(L_FETCHED_ROWS)   := '1';
         A_NEW_VAL_ALLOWED(L_FETCHED_ROWS) := '1';
         A_MANDATORY(L_FETCHED_ROWS)       := '0';
         A_VALUE_LIST_TP(L_FETCHED_ROWS)   := 'F';
         A_DSP_ROWS(L_FETCHED_ROWS)        := 10;      
      END;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_SCGK_CURSOR);
      END IF;
   END LOOP;

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
      DBMS_SQL.CLOSE_CURSOR(L_SCGK_CURSOR);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      DBMS_SQL.CLOSE_CURSOR(L_SCGK_CURSOR);
   ELSE   
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   IF A_WHERE_CLAUSE <> 'SELECTION' AND 
      L_FETCH_WSSC = FALSE AND L_FETCH_RQSC = FALSE AND
      DBMS_SQL.IS_OPEN(L_SCGK_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_SCGK_CURSOR);
   END IF;

   IF NOT DBMS_SQL.IS_OPEN(L_SCGK_CURSOR) THEN
      L_TEMP_RET_CODE := UNAPIGK.CLOSEGROUPKEYDEFBUFFER('sc');
      IF L_TEMP_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         RAISE_APPLICATION_ERROR(-20000, 'CloseGroupKeyDefBuffer failed with ret_code='||L_TEMP_RET_CODE||' for a_gk_tp=sc');   
      END IF;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
             'GetScGroupKey', L_SQLERRM);
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
             'GetScGroupKey', SUBSTR(L_SQL_STRING,1,200));
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
             'GetScGroupKey', SUBSTR(L_SQL_STRING,201,200));       
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN(L_SCGK_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(L_SCGK_CURSOR);
      END IF;
      L_RET_CODE := UNAPIGK.CLOSEGROUPKEYDEFBUFFER('sc');
      
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETSCGROUPKEY;

FUNCTION SAVESCGROUPKEY
(A_SC              IN     VARCHAR2,                   
 A_GK              IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_GK_VERSION      IN OUT UNAPIGEN.VC20_TABLE_TYPE,   
 A_VALUE           IN     UNAPIGEN.VC40_TABLE_TYPE,   
 A_NR_OF_ROWS      IN     NUMBER,                     
 A_MODIFY_REASON   IN     VARCHAR2)                   
RETURN NUMBER IS

L_LC                   VARCHAR2(2);
L_LC_VERSION           VARCHAR2(20);
L_SS                   VARCHAR2(2);
L_LOG_HS               CHAR(1);
L_LOG_HS_DETAILS       CHAR(1);
L_ALLOW_MODIFY         CHAR(1);
L_ACTIVE               CHAR(1);
L_SC_CURSOR            NUMBER;
L_NEW_SEQ              NUMBER;
L_GK_HANDLE            BOOLEAN_TABLE_TYPE;
L_GK_FOUND             BOOLEAN;
L_WHAT_DESCRIPTION     VARCHAR2(255);
L_HS_SEQ               INTEGER;
L_ST_VERSION           VARCHAR2(20);
L_SKIP                 BOOLEAN;

TABLE_DOES_NOT_EXIST EXCEPTION;
PRAGMA EXCEPTION_INIT (TABLE_DOES_NOT_EXIST, -942);

CURSOR L_GK_CURSOR IS
SELECT GK, GK_VERSION, VALUE
FROM UTSCGK
WHERE SC = A_SC
ORDER BY GKSEQ;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_NR_OF_ROWS, -1) < 0 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NROFROWS;
      RAISE STPERROR;
   END IF;

   IF NVL(A_SC, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      IF NVL(A_GK(L_SEQ_NO), ' ') = ' ' THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
      END IF;
      L_GK_HANDLE(L_SEQ_NO) := TRUE;
   END LOOP;

   L_RET_CODE := UNAPIAUT.GETSCAUTHORISATION(A_SC, L_ST_VERSION, L_LC, L_LC_VERSION, L_SS,
                                             L_ALLOW_MODIFY,L_ACTIVE,
                                             L_LOG_HS, L_LOG_HS_DETAILS);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTSC
   SET ALLOW_MODIFY = '#'
   WHERE SC = A_SC;

   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR ;
   END IF;

   
   
   
   L_EVENT_TP := 'ScGroupKeyUpdated';
   L_EV_SEQ_NR := -1;
   L_EV_DETAILS := 'st_version=' || L_ST_VERSION;
   L_RESULT := UNAPIEV.INSERTEVENT('SaveScGroupKey', UNAPIGEN.P_EVMGR_NAME, 'sc', A_SC, L_LC, 
                                   L_LC_VERSION, L_SS, L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF (L_LOG_HS = '1') AND (UNAPIGEN.P_LOG_GK_HS = '1') THEN
      INSERT INTO UTSCHS(SC, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES(A_SC, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
             'sample "'||A_SC||'" group keys are updated.', 
             CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   L_HS_SEQ := 0;
   IF L_LOG_HS_DETAILS = '1' THEN
      L_HS_SEQ := L_HS_SEQ + 1;
      INSERT INTO UTSCHSDETAILS(SC, TR_SEQ, EV_SEQ, SEQ, DETAILS)
      VALUES(A_SC, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_SEQ, 
             'sample "'||A_SC||'" group keys are updated.');
   END IF;

   L_SC_CURSOR := DBMS_SQL.OPEN_CURSOR;
   FOR L_SCGK IN L_GK_CURSOR LOOP
      L_GK_FOUND := FALSE;
      FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
         
         IF L_SCGK.GK = A_GK(L_SEQ_NO) AND
            (L_SCGK.VALUE = A_VALUE(L_SEQ_NO) OR
             (L_SCGK.VALUE IS NULL AND A_VALUE(L_SEQ_NO) IS NULL)) THEN
            L_GK_HANDLE(L_SEQ_NO) := FALSE;
            L_GK_FOUND := TRUE;
            EXIT;
         END IF;
      END LOOP;

      IF NOT L_GK_FOUND THEN
         
         DELETE FROM UTSCGK
         WHERE SC = A_SC
            AND GK = L_SCGK.GK
            AND VALUE = L_SCGK.VALUE;

         
         IF L_SCGK.VALUE IS NULL THEN
            DELETE FROM UTSCGK
            WHERE SC = A_SC
              AND GK = L_SCGK.GK
              AND VALUE IS NULL;
         END IF;            

         IF (L_LOG_HS_DETAILS = '1') THEN
            L_WHAT_DESCRIPTION := 'Groupkey "'||L_SCGK.GK||'" with value "'||L_SCGK.VALUE||'" is removed from sample "'||A_SC||'".';
            L_HS_SEQ := L_HS_SEQ + 1;
            INSERT INTO UTSCHSDETAILS(SC, TR_SEQ, EV_SEQ, SEQ, DETAILS)
            VALUES(A_SC, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_SEQ, L_WHAT_DESCRIPTION);
         END IF;   

         L_SQL_STRING := 'DELETE FROM utscgk' || L_SCGK.GK ||
                         ' WHERE sc = :sc AND ' || 
                         L_SCGK.GK || ' = :value '; 
         BEGIN
            DBMS_SQL.PARSE(L_SC_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
            DBMS_SQL.BIND_VARIABLE(L_SC_CURSOR, ':sc' , A_SC); 
            DBMS_SQL.BIND_VARIABLE(L_SC_CURSOR, ':value' , L_SCGK.VALUE); 
            L_RESULT := DBMS_SQL.EXECUTE(L_SC_CURSOR);
         EXCEPTION
         WHEN TABLE_DOES_NOT_EXIST THEN
            
            
            NULL;
         END;
      END IF;
   END LOOP;

   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      IF L_GK_HANDLE(L_SEQ_NO) THEN
         L_SKIP := FALSE; 
         IF NVL(A_VALUE(L_SEQ_NO), ' ') <> ' ' THEN
            L_SQL_STRING := 'INSERT INTO utscgk' || A_GK(L_SEQ_NO) ||
                            ' ('||A_GK(L_SEQ_NO)||', sc)'||
                            ' VALUES (:value, :sc) ';  
            BEGIN
               DBMS_SQL.PARSE(L_SC_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
               DBMS_SQL.BIND_VARIABLE(L_SC_CURSOR, ':value' , A_VALUE(L_SEQ_NO)); 
               DBMS_SQL.BIND_VARIABLE(L_SC_CURSOR, ':sc' , A_SC); 
               L_RESULT := DBMS_SQL.EXECUTE(L_SC_CURSOR);
            EXCEPTION
            WHEN TABLE_DOES_NOT_EXIST THEN
               
               
               NULL;
            WHEN DUP_VAL_ON_INDEX THEN
               L_SKIP := TRUE;
            END;
         END IF;

         IF NOT L_SKIP THEN
            
            INSERT INTO UTSCGK(SC, GK, GKSEQ, VALUE)
            SELECT A_SC, A_GK(L_SEQ_NO), NVL(MAX(GKSEQ), 0)+1,
                   A_VALUE(L_SEQ_NO)
            FROM UTSCGK
            WHERE SC =A_SC;

            IF (L_LOG_HS_DETAILS = '1') THEN
               L_WHAT_DESCRIPTION := 'Groupkey "'||A_GK(L_SEQ_NO)||'" is added to sample "'||A_SC||'", value is "'||A_VALUE(L_SEQ_NO)||'".';
               L_HS_SEQ := L_HS_SEQ + 1;
               INSERT INTO UTSCHSDETAILS(SC, TR_SEQ, EV_SEQ, SEQ, DETAILS)
               VALUES(A_SC, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_SEQ, L_WHAT_DESCRIPTION);
            END IF;   
         END IF;
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_SC_CURSOR);

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
   IF DBMS_SQL.IS_OPEN(L_SC_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_SC_CURSOR);
   END IF;
   UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UNIQUEGK;
   
   
   L_RESULT := UNAPIGEN.ENDTXN; 
   RETURN(UNAPIGEN.P_TXN_ERROR);
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveScGroupKey', SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('SaveScGroupKey', L_SQLERRM);
   END IF;
   IF DBMS_SQL.IS_OPEN(L_SC_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_SC_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveScGroupKey'));
END SAVESCGROUPKEY;

FUNCTION SAVE1SCGROUPKEY
(A_SC              IN     VARCHAR2,                   
 A_GK              IN     VARCHAR2,                   
 A_GK_VERSION      IN OUT VARCHAR2,                   
 A_VALUE           IN     UNAPIGEN.VC40_TABLE_TYPE,   
 A_NR_OF_ROWS      IN     NUMBER,                     
 A_MODIFY_REASON   IN     VARCHAR2)                   
RETURN NUMBER IS

L_LC                   VARCHAR2(2);
L_LC_VERSION           VARCHAR2(20);
L_SS                   VARCHAR2(2);
L_LOG_HS               CHAR(1);
L_LOG_HS_DETAILS       CHAR(1);
L_ALLOW_MODIFY         CHAR(1);
L_ACTIVE               CHAR(1);
L_SC_CURSOR            NUMBER;
L_NEW_SEQ              NUMBER;
L_GK_HANDLE            BOOLEAN_TABLE_TYPE;
L_GK_FOUND             BOOLEAN;
L_INSERT_EVENT         BOOLEAN;
L_LAST_SEQ             INTEGER;
L_WHAT_DESCRIPTION     VARCHAR2(255);
L_HS_SEQ               INTEGER;
L_ST_VERSION           VARCHAR2(20);
L_SKIP                 BOOLEAN;

TABLE_DOES_NOT_EXIST EXCEPTION;
PRAGMA EXCEPTION_INIT (TABLE_DOES_NOT_EXIST, -942);

CURSOR L_GK_CURSOR IS
SELECT VALUE, GKSEQ
FROM UTSCGK
WHERE SC = A_SC
AND GK = A_GK
ORDER BY GKSEQ;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_NR_OF_ROWS, -1) < 0 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NROFROWS;
      RAISE STPERROR;
   END IF;

   IF NVL(A_SC, ' ') = ' ' OR NVL(A_GK, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      L_GK_HANDLE(L_SEQ_NO) := TRUE;
   END LOOP;

   L_RET_CODE := UNAPIAUT.GETSCAUTHORISATION(A_SC, L_ST_VERSION, L_LC, L_LC_VERSION, L_SS,
                                             L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS, L_LOG_HS_DETAILS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   L_EVENT_TP := 'ScGroupKeyUpdated';

   
   
   
   L_INSERT_EVENT := TRUE;
   IF UNAPIEV.P_EV_MGR_SESSION AND
      UNAPIEV.P_SCGK_PREVIOUS_SC = A_SC THEN
      L_INSERT_EVENT := FALSE;
   END IF;
   UNAPIEV.P_SCGK_PREVIOUS_SC := A_SC;
   
   L_EV_SEQ_NR:=0;
   IF L_INSERT_EVENT AND 
      (NOT UNAPIEV.P_EV_MGR_SESSION) THEN

      UPDATE UTSC
      SET ALLOW_MODIFY = '#'
      WHERE SC = A_SC;

      IF SQL%ROWCOUNT < 1 THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
         RAISE STPERROR ;
      END IF;

      L_EV_SEQ_NR := -1;
      L_EV_DETAILS := 'gk=' || A_GK || 
                      '#gk_version=' || A_GK_VERSION ||
                      '#st_version=' || L_ST_VERSION;
      L_RESULT := UNAPIEV.INSERTEVENT('Save1ScGroupKey', UNAPIGEN.P_EVMGR_NAME, 'sc', A_SC, L_LC, 
                                      L_LC_VERSION, L_SS, L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);
      IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
         UNAPIGEN.P_TXN_ERROR := L_RESULT;
         RAISE STPERROR;
      END IF;
   END IF;
   
   
   IF (L_EV_SEQ_NR = 0) OR (L_EV_SEQ_NR = 1) THEN
      L_RET_CODE := UNAPIGEN.GETNEXTEVENTSEQNR(L_EV_SEQ_NR);
      IF L_RET_CODE <> 0 THEN
         UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
         RAISE STPERROR;
      END IF;
   END IF;

   IF (L_LOG_HS = '1') AND (UNAPIGEN.P_LOG_GK_HS = '1') THEN
      INSERT INTO UTSCHS(SC, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES(A_SC, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
             'sample "'||A_SC||'" group key "'||A_GK||'" is created/updated.', 
             CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   L_HS_SEQ := 0;
   IF L_LOG_HS_DETAILS = '1' THEN
      L_HS_SEQ := L_HS_SEQ + 1;
      INSERT INTO UTSCHSDETAILS(SC, TR_SEQ, EV_SEQ, SEQ ,DETAILS)
      VALUES(A_SC, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_SEQ, 
             'sample "'||A_SC||'" group key "'||A_GK||'" is created/updated.');
   END IF;

   L_LAST_SEQ := 499;
   L_SC_CURSOR := DBMS_SQL.OPEN_CURSOR;
   FOR L_SCGK IN L_GK_CURSOR LOOP
      L_GK_FOUND := FALSE;
      FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
         
         IF L_SCGK.VALUE = A_VALUE(L_SEQ_NO) OR
            (L_SCGK.VALUE IS NULL AND A_VALUE(L_SEQ_NO) IS NULL) THEN
            L_GK_HANDLE(L_SEQ_NO) := FALSE;
            L_GK_FOUND := TRUE;
            EXIT;
         END IF;
      END LOOP;

      IF NOT L_GK_FOUND THEN
         
         DELETE FROM UTSCGK
         WHERE SC = A_SC
            AND GK = A_GK
            AND VALUE = L_SCGK.VALUE;

         
         IF L_SCGK.VALUE IS NULL THEN
            DELETE FROM UTSCGK
            WHERE SC = A_SC
              AND GK = A_GK
              AND VALUE IS NULL;
         END IF;            

         IF (L_LOG_HS_DETAILS = '1') THEN
            L_WHAT_DESCRIPTION := 'Groupkey "'||A_GK||'" with value "'||L_SCGK.VALUE||'" is removed from sample "'||A_SC||'".';
            L_HS_SEQ := L_HS_SEQ + 1;
            INSERT INTO UTSCHSDETAILS(SC, TR_SEQ, EV_SEQ, SEQ, DETAILS)
            VALUES(A_SC, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_SEQ, L_WHAT_DESCRIPTION);
         END IF;   

         L_SQL_STRING := 'DELETE FROM utscgk' || A_GK ||
                         ' WHERE sc = :sc AND ' || A_GK || ' = :value '; 
         BEGIN
            DBMS_SQL.PARSE(L_SC_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
            DBMS_SQL.BIND_VARIABLE(L_SC_CURSOR, ':sc' , A_SC); 
            DBMS_SQL.BIND_VARIABLE(L_SC_CURSOR, ':value' , L_SCGK.VALUE); 
            L_RESULT := DBMS_SQL.EXECUTE(L_SC_CURSOR);
         EXCEPTION
         WHEN TABLE_DOES_NOT_EXIST THEN
            
            
            NULL;
         END;
      ELSE      
         L_LAST_SEQ := L_SCGK.GKSEQ;
      END IF;
   END LOOP;

   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      IF L_GK_HANDLE(L_SEQ_NO) THEN
         L_SKIP := FALSE; 
         IF NVL(A_VALUE(L_SEQ_NO), ' ') <> ' ' THEN
            L_SQL_STRING := 'INSERT INTO utscgk' || A_GK ||
                            ' ('||A_GK||', sc)'||
                            ' VALUES (:value, :sc) '; 
            BEGIN
               DBMS_SQL.PARSE(L_SC_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
               DBMS_SQL.BIND_VARIABLE(L_SC_CURSOR, ':value' , A_VALUE(L_SEQ_NO)); 
               DBMS_SQL.BIND_VARIABLE(L_SC_CURSOR, ':sc' , A_SC); 
               L_RESULT := DBMS_SQL.EXECUTE(L_SC_CURSOR);
            EXCEPTION
            WHEN TABLE_DOES_NOT_EXIST THEN
               
               
               NULL;
            WHEN DUP_VAL_ON_INDEX THEN
               L_SKIP := TRUE;
            END;
         END IF;

         IF NOT L_SKIP THEN

            L_LAST_SEQ := L_LAST_SEQ+1;

            
            INSERT INTO UTSCGK(SC, GK, GKSEQ, VALUE)
            VALUES
            (A_SC, A_GK, L_LAST_SEQ, A_VALUE(L_SEQ_NO));

            IF (L_LOG_HS_DETAILS = '1') THEN
               L_WHAT_DESCRIPTION := 'Groupkey "'||A_GK||'" is added to sample "'||A_SC||'", value is "'||A_VALUE(L_SEQ_NO)||'".';
               L_HS_SEQ := L_HS_SEQ + 1;
               INSERT INTO UTSCHSDETAILS(SC, TR_SEQ, EV_SEQ, SEQ, DETAILS)
               VALUES(A_SC, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_SEQ, L_WHAT_DESCRIPTION);
            END IF;   
         END IF;
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_SC_CURSOR);

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
   IF DBMS_SQL.IS_OPEN(L_SC_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_SC_CURSOR);
   END IF;
   UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UNIQUEGK;
   
    UPDATE UTSC
      SET ALLOW_MODIFY = '1' 
    WHERE SC = A_SC;
   
   
   L_RESULT := UNAPIGEN.ENDTXN; 
   RETURN(UNAPIGEN.P_TXN_ERROR);
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('Save1ScGroupKey', SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('Save1ScGroupKey', L_SQLERRM);
   END IF;
   IF DBMS_SQL.IS_OPEN(L_SC_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_SC_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'Save1ScGroupKey'));
END SAVE1SCGROUPKEY;

FUNCTION ADDSCCOMMENT
(A_SC           IN  VARCHAR2, 
 A_COMMENT      IN  VARCHAR2) 
RETURN NUMBER IS

L_LC                   VARCHAR2(2);
L_LC_VERSION           VARCHAR2(20);
L_SS                   VARCHAR2(2);
L_LOG_HS               CHAR(1);
L_LOG_HS_DETAILS       CHAR(1);
L_ALLOW_MODIFY         CHAR(1);
L_ACTIVE               CHAR(1);
L_HS_DETAILS_SEQ_NR    INTEGER;
L_OLD_COMMENT          VARCHAR2(255);
L_ST_VERSION           VARCHAR2(20);

CURSOR L_SCCOMMENTOLD_CURSOR (A_SC IN VARCHAR2) IS
   SELECT LAST_COMMENT
   FROM UTSC A
   WHERE A.SC = A_SC;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_SC, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIAUT.GETSCAUTHORISATION(A_SC, L_ST_VERSION, L_LC, L_LC_VERSION, L_SS,
                                             L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS, L_LOG_HS_DETAILS);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   
   
   
   OPEN L_SCCOMMENTOLD_CURSOR(A_SC);
   FETCH L_SCCOMMENTOLD_CURSOR
   INTO L_OLD_COMMENT;
   CLOSE L_SCCOMMENTOLD_CURSOR;

   UPDATE UTSC
   SET LAST_COMMENT = A_COMMENT
   WHERE SC = A_SC;

   L_RET_CODE := UNAPIGEN.GETNEXTEVENTSEQNR(L_EV_SEQ_NR);
   IF L_RET_CODE <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   IF L_LOG_HS = '1' THEN
      INSERT INTO UTSCHS(SC, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES(A_SC, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 'Comment', 
             'comment is added on sample "'||A_SC||'"', 
             CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_COMMENT, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;
   
   L_HS_DETAILS_SEQ_NR := 0;
   IF L_LOG_HS_DETAILS = '1' THEN
      IF NVL((L_OLD_COMMENT <> A_COMMENT), TRUE) AND NOT(L_OLD_COMMENT IS NULL AND A_COMMENT IS NULL)  THEN 
         L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
         INSERT INTO UTSCHSDETAILS(SC, TR_SEQ, EV_SEQ, SEQ, DETAILS)
         VALUES(A_SC, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR, 
                'sample "'||A_SC||'" is updated: property <last_comment> changed value from "' || SUBSTR(L_OLD_COMMENT,1,40) || '" to "' || SUBSTR(A_COMMENT,1,40) || '".');
      END IF;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('AddScComment', SQLERRM);
   END IF;
   IF L_SCCOMMENTOLD_CURSOR%ISOPEN THEN
      CLOSE L_SCCOMMENTOLD_CURSOR;
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'AddScComment'));
END ADDSCCOMMENT;

FUNCTION GETSCCOMMENT
(A_SC               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_LAST_COMMENT     OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_NR_OF_ROWS       IN OUT  NUMBER,                    
 A_WHERE_CLAUSE     IN      VARCHAR2,                  
 A_NEXT_ROWS        IN      NUMBER)                    
RETURN NUMBER IS

L_SC                             VARCHAR2(20);
L_LAST_COMMENT                   VARCHAR2(255);
L_FROM_CLAUSE                    VARCHAR2(255);
L_BIND_SC_SELECTION              BOOLEAN;
L_BIND_FIXED_SC_FLAG             BOOLEAN;
L_ADDORACLECBOHINT               BOOLEAN;

BEGIN

   L_BIND_SC_SELECTION  := FALSE;
   L_BIND_FIXED_SC_FLAG := FALSE;
   L_ADDORACLECBOHINT := FALSE;
   IF NVL(A_NR_OF_ROWS, 0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF A_WHERE_CLAUSE <> 'SELECTION' THEN
      IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
         RETURN(UNAPIGEN.DBERR_NEXTROWS);
      END IF;

      
      IF A_NEXT_ROWS = -1 THEN
         IF P_GETSCCOMMENT_CURSOR IS NOT NULL THEN
            DBMS_SQL.CLOSE_CURSOR(P_GETSCCOMMENT_CURSOR);
            P_GETSCCOMMENT_CURSOR := NULL;
         END IF;
         RETURN (UNAPIGEN.DBERR_SUCCESS);
      END IF;

      
      IF A_NEXT_ROWS = 1 THEN
         IF P_GETSCCOMMENT_CURSOR IS NULL THEN
            RETURN(UNAPIGEN.DBERR_NOCURSOR);
         END IF;
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 OR
      A_WHERE_CLAUSE = 'SELECTION' THEN
      
      IF P_GETSCCOMMENT_CURSOR IS NULL THEN
         L_SQL_STRING := 'SELECT a.sc, a.last_comment FROM ';

         L_FROM_CLAUSE := 'dd' || UNAPIGEN.P_DD || '.uvsc a ';

         
         L_WHERE_CLAUSE := ' ';
         IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
            RETURN(UNAPIGEN.DBERR_WHERECLAUSE);
         ELSIF A_WHERE_CLAUSE = 'SELECTION' THEN
            
            
            
            
            
            
            
            
            
            IF UNAPISC.P_SELECTION_CLAUSE IS NOT NULL THEN 
               L_FROM_CLAUSE := '';
               L_WHERE_CLAUSE := UNAPISC.P_SELECTION_CLAUSE || 
                                 ' ORDER BY a.sc';
               L_BIND_SC_SELECTION := TRUE;
               L_ADDORACLECBOHINT := TRUE;
            ELSE
               L_WHERE_CLAUSE := ' ORDER BY a.sc'; 
            END IF;
         ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
             L_BIND_FIXED_SC_FLAG := TRUE;
            L_WHERE_CLAUSE := ' WHERE a.sc = :sc_val ';
         ELSE
            L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
         END IF;

         L_SQL_STRING := L_SQL_STRING || L_FROM_CLAUSE || L_WHERE_CLAUSE;

         P_GETSCCOMMENT_CURSOR := DBMS_SQL.OPEN_CURSOR;

         IF L_ADDORACLECBOHINT THEN
            UNAPIAUT.ADDORACLECBOHINT (L_SQL_STRING) ;
         END IF;
         DBMS_SQL.PARSE(P_GETSCCOMMENT_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         IF L_BIND_SC_SELECTION THEN
            FOR L_X IN 1..UNAPISC.P_SELECTION_VAL_TAB.COUNT() LOOP
               DBMS_SQL.BIND_VARIABLE(P_GETSCCOMMENT_CURSOR, ':col_val'||L_X , UNAPISC.P_SELECTION_VAL_TAB(L_X)); 
            END LOOP;
         ELSIF L_BIND_FIXED_SC_FLAG THEN
            DBMS_SQL.BIND_VARIABLE(P_GETSCCOMMENT_CURSOR, ':sc_val' , A_WHERE_CLAUSE); 
         END IF;

         DBMS_SQL.DEFINE_COLUMN(P_GETSCCOMMENT_CURSOR, 1, L_SC, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETSCCOMMENT_CURSOR, 2, L_LAST_COMMENT, 255);

         L_RESULT := DBMS_SQL.EXECUTE(P_GETSCCOMMENT_CURSOR);
      END IF;
   END IF;
   
   L_RESULT := DBMS_SQL.FETCH_ROWS(P_GETSCCOMMENT_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_GETSCCOMMENT_CURSOR, 1, L_SC);
      DBMS_SQL.COLUMN_VALUE(P_GETSCCOMMENT_CURSOR, 2, L_LAST_COMMENT);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_SC(L_FETCHED_ROWS) := L_SC;
      A_LAST_COMMENT(L_FETCHED_ROWS) := L_LAST_COMMENT;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_GETSCCOMMENT_CURSOR);
      END IF;

   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_GETSCCOMMENT_CURSOR);
       P_GETSCCOMMENT_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_GETSCCOMMENT_CURSOR);
      P_GETSCCOMMENT_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;
   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
             'GetScComment', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN(P_GETSCCOMMENT_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(P_GETSCCOMMENT_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETSCCOMMENT;

FUNCTION GETSCACCESS
(A_SC             OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_DD             OUT     UNAPIGEN.VC3_TABLE_TYPE,   
 A_DATA_DOMAIN    OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_ACCESS_RIGHTS  OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NR_OF_ROWS     IN OUT  NUMBER,                    
 A_WHERE_CLAUSE   IN      VARCHAR2)                  
RETURN NUMBER IS

L_SC             VARCHAR2(20);
L_DD_DESCRIPTION VARCHAR2(40);
L_AR             UNAPIGEN.CHAR1_TABLE_TYPE; 
L_DD             VARCHAR2(3);
L_DESCRIPTION    UNAPIGEN.VC40_TABLE_TYPE;
L_ROW            INTEGER;
L_DD_CURSOR      UNAPIGEN.CURSOR_REF_TYPE;
L_AR_CURSOR      UNAPIGEN.CURSOR_REF_TYPE;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      RETURN(UNAPIGEN.DBERR_WHERECLAUSE);
   ELSIF
      UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := 'WHERE sc = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') ||''''; 
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   
   
   
   L_SQL_STRING:= 'SELECT dd, description FROM dd'||UNAPIGEN.P_DD||'.uvdd ORDER BY dd';
   OPEN L_DD_CURSOR FOR L_SQL_STRING;
   FOR I IN 1..UNAPIGEN.P_DATADOMAINS LOOP
      FETCH L_DD_CURSOR INTO L_DD, L_DD_DESCRIPTION;
      L_DESCRIPTION(L_DD) := L_DD_DESCRIPTION;
   END LOOP;
   CLOSE L_DD_CURSOR;

   L_SQL_STRING:= 
      'SELECT ar1, ar2, ar3, ar4, ar5, ar6, ar7, ar8, ar9, ar10, ar11, ar12, ar13, ar14, ar15, ar16, ' ||
      'ar17, ar18, ar19, ar20, ar21, ar22, ar23, ar24, ar25, ar26, ar27, ar28, ar29, ar30, ar31, ' ||
      'ar32, ar33, ar34, ar35, ar36, ar37, ar38, ar39, ar40, ar41, ar42, ar43, ar44, ar45, ar46, ' ||
      'ar47, ar48, ar49, ar50, ar51, ar52, ar53, ar54, ar55, ar56, ar57, ar58, ar59, ar60, ar61, ' ||
      'ar62, ar63, ar64, ar65, ar66, ar67, ar68, ar69, ar70, ar71, ar72, ar73, ar74, ar75, ar76, ' ||
      'ar77, ar78, ar79, ar80, ar81, ar82, ar83, ar84, ar85, ar86, ar87, ar88, ar89, ar90, ar91, ' ||
      'ar92, ar93, ar94, ar95, ar96, ar97, ar98, ar99, ar100, ar101, ar102, ar103, ar104, ar105, ' ||
      'ar106, ar107, ar108, ar109, ar110, ar111, ar112, ar113, ar114, ar115, ar116, ar117, ar118, ' ||
      'ar119, ar120, ar121, ar122, ar123, ar124, ar125, ar126, ar127, ar128, sc FROM udsc ' || 
       L_WHERE_CLAUSE;
   L_FETCHED_ROWS := 0;
   OPEN L_AR_CURSOR FOR L_SQL_STRING;
   LOOP
      FETCH L_AR_CURSOR INTO L_AR(1),L_AR(2),L_AR(3),L_AR(4),L_AR(5),L_AR(6),L_AR(7),L_AR(8),L_AR(9),
      L_AR(10),L_AR(11),L_AR(12),L_AR(13),L_AR(14),L_AR(15),L_AR(16),L_AR(17),L_AR(18),L_AR(19),
      L_AR(20),L_AR(21),L_AR(22),L_AR(23),L_AR(24),L_AR(25),L_AR(26),L_AR(27),L_AR(28),L_AR(29),
      L_AR(30),L_AR(31),L_AR(32),L_AR(33),L_AR(34),L_AR(35),L_AR(36),L_AR(37),L_AR(38),L_AR(39),
      L_AR(40),L_AR(41),L_AR(42),L_AR(43),L_AR(44),L_AR(45),L_AR(46),L_AR(47),L_AR(48),L_AR(49),
      L_AR(50),L_AR(51),L_AR(52),L_AR(53),L_AR(54),L_AR(55),L_AR(56),L_AR(57),L_AR(58),L_AR(59),
      L_AR(60),L_AR(61),L_AR(62),L_AR(63),L_AR(64),L_AR(65),L_AR(66),L_AR(67),L_AR(68),L_AR(69),
      L_AR(70),L_AR(71),L_AR(72),L_AR(73),L_AR(74),L_AR(75),L_AR(76),L_AR(77),L_AR(78),L_AR(79),
      L_AR(80),L_AR(81),L_AR(82),L_AR(83),L_AR(84),L_AR(85),L_AR(86),L_AR(87),L_AR(88),L_AR(89),
      L_AR(90),L_AR(91),L_AR(92),L_AR(93),L_AR(94),L_AR(95),L_AR(96),L_AR(97),L_AR(98),L_AR(99),
      L_AR(100),L_AR(101),L_AR(102),L_AR(103),L_AR(104),L_AR(105),L_AR(106),L_AR(107),L_AR(108),
      L_AR(109),L_AR(110),L_AR(111),L_AR(112),L_AR(113),L_AR(114),L_AR(115),L_AR(116),L_AR(117),
      L_AR(118),L_AR(119),L_AR(120),L_AR(121),L_AR(122),L_AR(123),L_AR(124),L_AR(125),L_AR(126),
      L_AR(127),L_AR(128), L_SC;
      EXIT WHEN L_AR_CURSOR%NOTFOUND;
      
      FOR L_ROW IN 1..UNAPIGEN.P_DATADOMAINS LOOP
          L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
          A_SC(L_FETCHED_ROWS) := L_SC;
          A_DD(L_FETCHED_ROWS) := TO_CHAR(L_ROW);
          A_DATA_DOMAIN(L_FETCHED_ROWS) := L_DESCRIPTION(L_ROW);
          A_ACCESS_RIGHTS(L_FETCHED_ROWS) := L_AR(L_ROW);
          IF L_FETCHED_ROWS >= A_NR_OF_ROWS THEN
             EXIT;
          END IF;
      END LOOP;
      IF L_FETCHED_ROWS >= A_NR_OF_ROWS THEN
         EXIT;
      END IF;
   END LOOP;
   CLOSE L_AR_CURSOR;

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
WHEN NO_DATA_FOUND THEN
   IF L_DD_CURSOR%ISOPEN THEN
      CLOSE L_DD_CURSOR;
   END IF;
   IF L_AR_CURSOR%ISOPEN THEN
      CLOSE L_AR_CURSOR;
   END IF;
   RETURN(UNAPIGEN.DBERR_SYSDEFAULTS);
WHEN OTHERS THEN
   L_SQLERRM := SQLERRM;
   IF L_DD_CURSOR%ISOPEN THEN
      CLOSE L_DD_CURSOR;
   END IF;
   IF L_AR_CURSOR%ISOPEN THEN
      CLOSE L_AR_CURSOR;
   END IF;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
           'GetScAccess', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETSCACCESS;

FUNCTION SAVESCACCESS
(A_SC             IN      VARCHAR2,                  
 A_DD             IN      UNAPIGEN.VC3_TABLE_TYPE,   
 A_ACCESS_RIGHTS  IN      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NR_OF_ROWS     IN      NUMBER,                    
 A_MODIFY_REASON  IN      VARCHAR2)                  
RETURN NUMBER IS

L_ALLOW_MODIFY         CHAR(1);
L_LOG_HS               CHAR(1);
L_LOG_HS_DETAILS       CHAR(1);
L_ACTIVE               CHAR(1);
L_LC                   VARCHAR2(2);
L_LC_VERSION           VARCHAR2(20);
L_SS                   VARCHAR2(2);
L_AR_CURSOR            INTEGER;
L_WRITE_FOUND          BOOLEAN;
L_HS_DETAILS_SEQ_NR    INTEGER;
L_ST_VERSION           VARCHAR2(20);

CURSOR L_SCOLD_CURSOR (A_SC IN VARCHAR2) IS
   SELECT A.*
   FROM UDSC A
   WHERE A.SC = A_SC;
L_SCOLD_REC UDSC%ROWTYPE;
L_SCNEW_REC UDSC%ROWTYPE;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_NR_OF_ROWS, -1) < 0 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NROFROWS;
      RAISE STPERROR;
   END IF;

   
   
   
   IF NVL(A_SC, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIAUT.GETSCAUTHORISATION(A_SC, L_ST_VERSION, L_LC, L_LC_VERSION, L_SS,
                                             L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS, L_LOG_HS_DETAILS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTSC
   SET ALLOW_MODIFY = '#'
   WHERE SC = A_SC;

   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR ;
   END IF;

   
   
   
   
   L_SQL_STRING := '';
   L_WRITE_FOUND := FALSE;
   FOR L_CTR IN 1..A_NR_OF_ROWS LOOP

      IF NVL(A_ACCESS_RIGHTS(L_CTR), 'N') NOT IN ('R','W','N') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_AR;
         RAISE STPERROR;
      END IF;

      IF NVL(A_ACCESS_RIGHTS(L_CTR), 'N') = 'W' THEN
         L_WRITE_FOUND := TRUE;
      END IF;

      IF (NVL(TO_NUMBER(A_DD(L_CTR)), -1) < 0) OR (NVL(TO_NUMBER(A_DD(L_CTR)), -1) > UNAPIGEN.P_DATADOMAINS) THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_DD;
         RAISE STPERROR;
      END IF;

      L_SQL_STRING := L_SQL_STRING || ' ar' || A_DD(L_CTR) ||
                   '= ''' || NVL(A_ACCESS_RIGHTS(L_CTR), 'N') || '''';
      IF L_CTR <> A_NR_OF_ROWS THEN
        L_SQL_STRING :=  L_SQL_STRING || ',';
      END IF;
   END LOOP;

   
   IF NOT L_WRITE_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOWRITEACCESS;
      RAISE STPERROR;
   END IF;

   IF NVL(L_SQL_STRING, ' ')  = ' ' THEN
      
      
      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NROFROWS;
      RAISE STPERROR;
   ELSE
      
      
      
      OPEN L_SCOLD_CURSOR(A_SC);
      FETCH L_SCOLD_CURSOR
      INTO L_SCOLD_REC;
      CLOSE L_SCOLD_CURSOR;
      L_SCNEW_REC := L_SCOLD_REC;
            
      
      
      
      L_SQL_STRING := 
         'UPDATE utsc SET '|| L_SQL_STRING || 
         ' WHERE sc = ''' || REPLACE(A_SC, '''', '''''') || ''' ' || 
         'RETURNING';
      FOR I IN 1..UNAPIGEN.P_DATADOMAINS LOOP
         L_SQL_STRING := L_SQL_STRING||' ar'||I||',';
      END LOOP;
      FOR I IN (UNAPIGEN.P_DATADOMAINS+1)..128 LOOP
         L_SQL_STRING := L_SQL_STRING||' ''N'',';
      END LOOP;
      L_SQL_STRING := SUBSTR(L_SQL_STRING, 1, LENGTH(L_SQL_STRING)-1);   
      L_SQL_STRING := L_SQL_STRING||
         ' INTO :ar1, :ar2, :ar3, :ar4, :ar5, :ar6, :ar7, :ar8, :ar9, :ar10, ' ||
              ':ar11, :ar12, :ar13, :ar14, :ar15, :ar16, :ar17, :ar18, :ar19, :ar20, :ar21, :ar22, ' ||
              ':ar23, :ar24, :ar25, :ar26, :ar27, :ar28, :ar29, :ar30, :ar31, :ar32, :ar33, :ar34, ' ||
              ':ar35, :ar36, :ar37, :ar38, :ar39, :ar40, :ar41, :ar42, :ar43, :ar44, :ar45, :ar46, ' ||
              ':ar47, :ar48, :ar49, :ar50, :ar51, :ar52, :ar53, :ar54, :ar55, :ar56, :ar57, :ar58, ' ||
              ':ar59, :ar60, :ar61, :ar62, :ar63, :ar64, :ar65, :ar66, :ar67, :ar68, :ar69, :ar70, ' ||
              ':ar71, :ar72, :ar73, :ar74, :ar75, :ar76, :ar77, :ar78, :ar79, :ar80, :ar81, :ar82, ' ||
              ':ar83, :ar84, :ar85, :ar86, :ar87, :ar88, :ar89, :ar90, :ar91, :ar92, :ar93, :ar94, ' ||
              ':ar95, :ar96, :ar97, :ar98, :ar99, :ar100, :ar101, :ar102, :ar103, :ar104, :ar105, ' ||
              ':ar106, :ar107, :ar108, :ar109, :ar110, :ar111, :ar112, :ar113, :ar114, :ar115, :ar116, ' ||
              ':ar117, :ar118, :ar119, :ar120, :ar121, :ar122, :ar123, :ar124, :ar125, :ar126, :ar127, ' ||
              ':ar128';

      
      
      
      L_AR_CURSOR := DBMS_SQL.OPEN_CURSOR;
      DBMS_SQL.PARSE(L_AR_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar1',   L_SCNEW_REC.AR1,   1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar2',   L_SCNEW_REC.AR2,   1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar3',   L_SCNEW_REC.AR3,   1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar4',   L_SCNEW_REC.AR4,   1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar5',   L_SCNEW_REC.AR5,   1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar6',   L_SCNEW_REC.AR6,   1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar7',   L_SCNEW_REC.AR7,   1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar8',   L_SCNEW_REC.AR8,   1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar9',   L_SCNEW_REC.AR9,   1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar10',  L_SCNEW_REC.AR10,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar11',  L_SCNEW_REC.AR11,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar12',  L_SCNEW_REC.AR12,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar13',  L_SCNEW_REC.AR13,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar14',  L_SCNEW_REC.AR14,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar15',  L_SCNEW_REC.AR15,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar16',  L_SCNEW_REC.AR16,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar17',  L_SCNEW_REC.AR17,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar18',  L_SCNEW_REC.AR18,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar19',  L_SCNEW_REC.AR19,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar20',  L_SCNEW_REC.AR20,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar21',  L_SCNEW_REC.AR21,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar22',  L_SCNEW_REC.AR22,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar23',  L_SCNEW_REC.AR23,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar24',  L_SCNEW_REC.AR24,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar25',  L_SCNEW_REC.AR25,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar26',  L_SCNEW_REC.AR26,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar27',  L_SCNEW_REC.AR27,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar28',  L_SCNEW_REC.AR28,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar29',  L_SCNEW_REC.AR29,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar30',  L_SCNEW_REC.AR30,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar31',  L_SCNEW_REC.AR31,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar32',  L_SCNEW_REC.AR32,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar33',  L_SCNEW_REC.AR33,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar34',  L_SCNEW_REC.AR34,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar35',  L_SCNEW_REC.AR35,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar36',  L_SCNEW_REC.AR36,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar37',  L_SCNEW_REC.AR37,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar38',  L_SCNEW_REC.AR38,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar39',  L_SCNEW_REC.AR39,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar40',  L_SCNEW_REC.AR40,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar41',  L_SCNEW_REC.AR41,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar42',  L_SCNEW_REC.AR42,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar43',  L_SCNEW_REC.AR43,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar44',  L_SCNEW_REC.AR44,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar45',  L_SCNEW_REC.AR45,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar46',  L_SCNEW_REC.AR46,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar47',  L_SCNEW_REC.AR47,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar48',  L_SCNEW_REC.AR48,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar49',  L_SCNEW_REC.AR49,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar50',  L_SCNEW_REC.AR50,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar51',  L_SCNEW_REC.AR51,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar52',  L_SCNEW_REC.AR52,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar53',  L_SCNEW_REC.AR53,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar54',  L_SCNEW_REC.AR54,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar55',  L_SCNEW_REC.AR55,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar56',  L_SCNEW_REC.AR56,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar57',  L_SCNEW_REC.AR57,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar58',  L_SCNEW_REC.AR58,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar59',  L_SCNEW_REC.AR59,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar60',  L_SCNEW_REC.AR60,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar61',  L_SCNEW_REC.AR61,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar62',  L_SCNEW_REC.AR62,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar63',  L_SCNEW_REC.AR63,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar64',  L_SCNEW_REC.AR64,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar65',  L_SCNEW_REC.AR65,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar66',  L_SCNEW_REC.AR66,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar67',  L_SCNEW_REC.AR67,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar68',  L_SCNEW_REC.AR68,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar69',  L_SCNEW_REC.AR69,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar70',  L_SCNEW_REC.AR70,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar71',  L_SCNEW_REC.AR71,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar72',  L_SCNEW_REC.AR72,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar73',  L_SCNEW_REC.AR73,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar74',  L_SCNEW_REC.AR74,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar75',  L_SCNEW_REC.AR75,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar76',  L_SCNEW_REC.AR76,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar77',  L_SCNEW_REC.AR77,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar78',  L_SCNEW_REC.AR78,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar79',  L_SCNEW_REC.AR79,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar80',  L_SCNEW_REC.AR80,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar81',  L_SCNEW_REC.AR81,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar82',  L_SCNEW_REC.AR82,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar83',  L_SCNEW_REC.AR83,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar84',  L_SCNEW_REC.AR84,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar85',  L_SCNEW_REC.AR85,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar86',  L_SCNEW_REC.AR86,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar87',  L_SCNEW_REC.AR87,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar88',  L_SCNEW_REC.AR88,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar89',  L_SCNEW_REC.AR89,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar90',  L_SCNEW_REC.AR90,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar91',  L_SCNEW_REC.AR91,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar92',  L_SCNEW_REC.AR92,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar93',  L_SCNEW_REC.AR93,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar94',  L_SCNEW_REC.AR94,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar95',  L_SCNEW_REC.AR95,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar96',  L_SCNEW_REC.AR96,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar97',  L_SCNEW_REC.AR97,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar98',  L_SCNEW_REC.AR98,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar99',  L_SCNEW_REC.AR99,  1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar100', L_SCNEW_REC.AR100, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar101', L_SCNEW_REC.AR101, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar102', L_SCNEW_REC.AR102, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar103', L_SCNEW_REC.AR103, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar104', L_SCNEW_REC.AR104, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar105', L_SCNEW_REC.AR105, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar106', L_SCNEW_REC.AR106, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar107', L_SCNEW_REC.AR107, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar108', L_SCNEW_REC.AR108, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar109', L_SCNEW_REC.AR109, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar110', L_SCNEW_REC.AR110, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar111', L_SCNEW_REC.AR111, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar112', L_SCNEW_REC.AR112, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar113', L_SCNEW_REC.AR113, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar114', L_SCNEW_REC.AR114, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar115', L_SCNEW_REC.AR115, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar116', L_SCNEW_REC.AR116, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar117', L_SCNEW_REC.AR117, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar118', L_SCNEW_REC.AR118, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar119', L_SCNEW_REC.AR119, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar120', L_SCNEW_REC.AR120, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar121', L_SCNEW_REC.AR121, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar122', L_SCNEW_REC.AR122, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar123', L_SCNEW_REC.AR123, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar124', L_SCNEW_REC.AR124, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar125', L_SCNEW_REC.AR125, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar126', L_SCNEW_REC.AR126, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar127', L_SCNEW_REC.AR127, 1);
      DBMS_SQL.BIND_VARIABLE_CHAR(L_AR_CURSOR, ':ar128', L_SCNEW_REC.AR128, 1);

      L_RESULT := DBMS_SQL.EXECUTE(L_AR_CURSOR);

      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar1',   L_SCNEW_REC.AR1  );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar2',   L_SCNEW_REC.AR2  );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar3',   L_SCNEW_REC.AR3  );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar4',   L_SCNEW_REC.AR4  );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar5',   L_SCNEW_REC.AR5  );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar6',   L_SCNEW_REC.AR6  );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar7',   L_SCNEW_REC.AR7  );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar8',   L_SCNEW_REC.AR8  );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar9',   L_SCNEW_REC.AR9  );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar10',  L_SCNEW_REC.AR10 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar11',  L_SCNEW_REC.AR11 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar12',  L_SCNEW_REC.AR12 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar13',  L_SCNEW_REC.AR13 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar14',  L_SCNEW_REC.AR14 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar15',  L_SCNEW_REC.AR15 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar16',  L_SCNEW_REC.AR16 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar17',  L_SCNEW_REC.AR17 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar18',  L_SCNEW_REC.AR18 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar19',  L_SCNEW_REC.AR19 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar20',  L_SCNEW_REC.AR20 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar21',  L_SCNEW_REC.AR21 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar22',  L_SCNEW_REC.AR22 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar23',  L_SCNEW_REC.AR23 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar24',  L_SCNEW_REC.AR24 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar25',  L_SCNEW_REC.AR25 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar26',  L_SCNEW_REC.AR26 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar27',  L_SCNEW_REC.AR27 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar28',  L_SCNEW_REC.AR28 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar29',  L_SCNEW_REC.AR29 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar30',  L_SCNEW_REC.AR30 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar31',  L_SCNEW_REC.AR31 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar32',  L_SCNEW_REC.AR32 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar33',  L_SCNEW_REC.AR33 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar34',  L_SCNEW_REC.AR34 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar35',  L_SCNEW_REC.AR35 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar36',  L_SCNEW_REC.AR36 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar37',  L_SCNEW_REC.AR37 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar38',  L_SCNEW_REC.AR38 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar39',  L_SCNEW_REC.AR39 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar40',  L_SCNEW_REC.AR40 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar41',  L_SCNEW_REC.AR41 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar42',  L_SCNEW_REC.AR42 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar43',  L_SCNEW_REC.AR43 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar44',  L_SCNEW_REC.AR44 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar45',  L_SCNEW_REC.AR45 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar46',  L_SCNEW_REC.AR46 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar47',  L_SCNEW_REC.AR47 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar48',  L_SCNEW_REC.AR48 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar49',  L_SCNEW_REC.AR49 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar50',  L_SCNEW_REC.AR50 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar51',  L_SCNEW_REC.AR51 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar52',  L_SCNEW_REC.AR52 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar53',  L_SCNEW_REC.AR53 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar54',  L_SCNEW_REC.AR54 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar55',  L_SCNEW_REC.AR55 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar56',  L_SCNEW_REC.AR56 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar57',  L_SCNEW_REC.AR57 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar58',  L_SCNEW_REC.AR58 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar59',  L_SCNEW_REC.AR59 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar60',  L_SCNEW_REC.AR60 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar61',  L_SCNEW_REC.AR61 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar62',  L_SCNEW_REC.AR62 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar63',  L_SCNEW_REC.AR63 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar64',  L_SCNEW_REC.AR64 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar65',  L_SCNEW_REC.AR65 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar66',  L_SCNEW_REC.AR66 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar67',  L_SCNEW_REC.AR67 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar68',  L_SCNEW_REC.AR68 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar69',  L_SCNEW_REC.AR69 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar70',  L_SCNEW_REC.AR70 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar71',  L_SCNEW_REC.AR71 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar72',  L_SCNEW_REC.AR72 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar73',  L_SCNEW_REC.AR73 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar74',  L_SCNEW_REC.AR74 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar75',  L_SCNEW_REC.AR75 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar76',  L_SCNEW_REC.AR76 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar77',  L_SCNEW_REC.AR77 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar78',  L_SCNEW_REC.AR78 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar79',  L_SCNEW_REC.AR79 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar80',  L_SCNEW_REC.AR80 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar81',  L_SCNEW_REC.AR81 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar82',  L_SCNEW_REC.AR82 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar83',  L_SCNEW_REC.AR83 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar84',  L_SCNEW_REC.AR84 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar85',  L_SCNEW_REC.AR85 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar86',  L_SCNEW_REC.AR86 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar87',  L_SCNEW_REC.AR87 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar88',  L_SCNEW_REC.AR88 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar89',  L_SCNEW_REC.AR89 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar90',  L_SCNEW_REC.AR90 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar91',  L_SCNEW_REC.AR91 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar92',  L_SCNEW_REC.AR92 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar93',  L_SCNEW_REC.AR93 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar94',  L_SCNEW_REC.AR94 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar95',  L_SCNEW_REC.AR95 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar96',  L_SCNEW_REC.AR96 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar97',  L_SCNEW_REC.AR97 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar98',  L_SCNEW_REC.AR98 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar99',  L_SCNEW_REC.AR99 );
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar100', L_SCNEW_REC.AR100);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar101', L_SCNEW_REC.AR101);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar102', L_SCNEW_REC.AR102);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar103', L_SCNEW_REC.AR103);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar104', L_SCNEW_REC.AR104);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar105', L_SCNEW_REC.AR105);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar106', L_SCNEW_REC.AR106);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar107', L_SCNEW_REC.AR107);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar108', L_SCNEW_REC.AR108);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar109', L_SCNEW_REC.AR109);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar110', L_SCNEW_REC.AR110);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar111', L_SCNEW_REC.AR111);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar112', L_SCNEW_REC.AR112);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar113', L_SCNEW_REC.AR113);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar114', L_SCNEW_REC.AR114);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar115', L_SCNEW_REC.AR115);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar116', L_SCNEW_REC.AR116);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar117', L_SCNEW_REC.AR117);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar118', L_SCNEW_REC.AR118);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar119', L_SCNEW_REC.AR119);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar120', L_SCNEW_REC.AR120);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar121', L_SCNEW_REC.AR121);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar122', L_SCNEW_REC.AR122);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar123', L_SCNEW_REC.AR123);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar124', L_SCNEW_REC.AR124);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar125', L_SCNEW_REC.AR125);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar126', L_SCNEW_REC.AR126);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar127', L_SCNEW_REC.AR127);
      DBMS_SQL.VARIABLE_VALUE_CHAR(L_AR_CURSOR, ':ar128', L_SCNEW_REC.AR128);

      IF L_RESULT = 0 THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
         RAISE STPERROR;
      END IF;

      DBMS_SQL.CLOSE_CURSOR(L_AR_CURSOR);

      
      
      
      L_EVENT_TP := 'ScAccessRightsUpdated';
      L_EV_SEQ_NR := -1;
      L_EV_DETAILS := 'st_version=' || L_ST_VERSION;
      L_RESULT := UNAPIEV.INSERTEVENT('SaveScAccess', UNAPIGEN.P_EVMGR_NAME, 'sc', A_SC, L_LC, 
                                      L_LC_VERSION, L_SS, L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);
      IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
         UNAPIGEN.P_TXN_ERROR := L_RESULT;
         RAISE STPERROR;
      END IF;

      IF L_LOG_HS = '1' THEN
         INSERT INTO UTSCHS(SC, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES(A_SC, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                'access rights for sample "'||A_SC||'" are updated', 
                CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;

      L_HS_DETAILS_SEQ_NR := 0;
      IF L_LOG_HS_DETAILS = '1' THEN
         L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
         INSERT INTO UTSCHSDETAILS(SC, TR_SEQ, EV_SEQ, SEQ, DETAILS)
         VALUES(A_SC, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR,
                'access rights for sample "'||A_SC||'" are updated');

         UNAPIHSDETAILS.ADDSCHSDETAILS(L_SCOLD_REC, L_SCNEW_REC, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, 
                                       L_HS_DETAILS_SEQ_NR);
      END IF;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveScAccess', SQLERRM);
   END IF;
   IF DBMS_SQL.IS_OPEN(L_AR_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_AR_CURSOR);
   END IF;
   IF L_SCOLD_CURSOR%ISOPEN THEN
      CLOSE L_SCOLD_CURSOR;
   END IF;   
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveScAccess'));
END SAVESCACCESS;

FUNCTION SCTRANSITIONAUTHORISED            
(A_SC                IN      VARCHAR2,     
 A_LC                IN OUT  VARCHAR2,     
 A_LC_VERSION        IN OUT  VARCHAR2,     
 A_OLD_SS            IN OUT  VARCHAR2,     
 A_NEW_SS            IN      VARCHAR2,     
 A_AUTHORISED_BY     IN      VARCHAR2,     
 A_LC_SS_FROM        OUT     VARCHAR2,     
 A_TR_NO             OUT     NUMBER,       
 A_ALLOW_MODIFY      OUT     CHAR,         
 A_ACTIVE            OUT     CHAR,         
 A_LOG_HS            OUT     CHAR,         
 A_LOG_HS_DETAILS    OUT     CHAR)         
RETURN NUMBER IS

L_LC                  VARCHAR2(2);
L_LC_VERSION          VARCHAR2(20);
L_SS                  VARCHAR2(2);
L_OLD_ACTIVE          CHAR(1);
L_OLD_ALLOW_MODIFY    CHAR(1);
L_RQ_LC               VARCHAR2(2);
L_RQ_LC_VERSION       VARCHAR2(20);
L_RQ_SS               VARCHAR2(2);
L_RQ_ALLOW_MODIFY     CHAR(1);
L_RQ_ACTIVE           CHAR(1);
L_RQ_LOG_HS           CHAR(1);
L_RQ_LOG_HS_DETAILS   CHAR(1);
L_TR_OK               BOOLEAN;
L_RQ                  VARCHAR2(20);
L_ST_VERSION          VARCHAR2(20);
L_RT_VERSION          VARCHAR2(20);
L_LOCK_SC             VARCHAR2(20);

CURSOR L_COS_CURSOR(A_LC VARCHAR2, A_LC_VERSION VARCHAR2, A_SS_FROM VARCHAR2, A_SS_TO VARCHAR2, A_UP NUMBER, A_USER VARCHAR2) IS
   SELECT SS_FROM, TR_NO
   FROM  UTLCUS
   WHERE LC  = A_LC
     AND VERSION = A_LC_VERSION
     AND SS_FROM IN (A_SS_FROM, '@@')
     AND SS_TO   = A_SS_TO
     AND US IN (A_USER, '~ANY~',  'UP'||TO_CHAR(A_UP))
   ORDER BY SS_FROM DESC, TR_NO;

CURSOR L_TR_CURSOR(A_LC VARCHAR2, A_LC_VERSION VARCHAR2, A_SS_FROM VARCHAR2, A_SS_TO VARCHAR2) IS
   SELECT SS_FROM, TR_NO
   FROM  UTLCTR
   WHERE LC  = A_LC
     AND VERSION = A_LC_VERSION
     AND SS_FROM IN (A_SS_FROM, '@@')
     AND SS_TO   = A_SS_TO
   ORDER BY SS_FROM DESC, TR_NO;

CURSOR L_TRDYN_CURSOR(A_LC VARCHAR2, A_LC_VERSION VARCHAR2, A_SS_FROM VARCHAR2, A_SS_TO VARCHAR2) IS
   SELECT *
   FROM  UTLCUS
   WHERE LC  = A_LC
     AND VERSION = A_LC_VERSION
     AND SS_FROM IN (A_SS_FROM, '@@')
     AND SS_TO   = A_SS_TO
     AND US = '~DYNAMIC~'
   ORDER BY SS_FROM DESC, TR_NO;

CURSOR L_SCRQ_CURSOR IS
   SELECT RQ
   FROM UTSC
   WHERE SC = A_SC;

BEGIN
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_SC, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   
   SELECT SC
   INTO L_LOCK_SC
   FROM UTSC
   WHERE SC = A_SC
   FOR UPDATE;   

   L_RET_CODE := UNAPIAUT.GETSCAUTHORISATION(A_SC, L_ST_VERSION, L_LC, L_LC_VERSION, L_SS, 
                                             L_OLD_ALLOW_MODIFY, L_OLD_ACTIVE, A_LOG_HS, 
                                             A_LOG_HS_DETAILS);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      IF L_RET_CODE <> UNAPIGEN.DBERR_NOTMODIFIABLE THEN
         UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
         RAISE STPERROR;
      ELSE
         L_RQ := NULL;
         OPEN L_SCRQ_CURSOR;
         FETCH L_SCRQ_CURSOR
         INTO L_RQ;
         CLOSE L_SCRQ_CURSOR;
         IF L_RQ IS NOT NULL THEN
            L_RET_CODE := UNAPIAUT.GETRQAUTHORISATION(L_RQ, L_RT_VERSION, L_RQ_LC, L_RQ_LC_VERSION, 
                                                      L_RQ_SS, L_RQ_ALLOW_MODIFY, L_RQ_ACTIVE,
                                                      L_RQ_LOG_HS, L_RQ_LOG_HS_DETAILS);
            IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
               UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
               RAISE STPERROR;
            END IF;
         END IF;
      END IF;
   END IF;
   
   L_SS := NVL(L_SS, '@~');   

   IF A_LC IS NULL THEN
      
      IF L_LC IS NULL THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OBJECTLCMATCH;
         RAISE STPERROR;
      END IF;
      IF L_LC_VERSION IS NULL THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OBJECTLCVERSIONMATCH;
         RAISE STPERROR;
      END IF;
      A_LC := L_LC;
      A_LC_VERSION := L_LC_VERSION;
   ELSE
      
      IF A_LC <> NVL(L_LC, '####') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OBJECTLCMATCH;
         RAISE STPERROR;
      END IF;

      
      
      IF L_LC_VERSION IS NULL THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OBJECTLCVERSIONMATCH;
         RAISE STPERROR;
      END IF;
      A_LC_VERSION := L_LC_VERSION;
   END IF;

   IF NVL(A_OLD_SS, ' ') = ' ' THEN
      
      A_OLD_SS := L_SS;
   ELSE
      
      IF A_OLD_SS <> L_SS THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OBJECTSSMATCH;
         RAISE STPERROR;
      END IF;
   END IF;

   BEGIN
      SELECT ALLOW_MODIFY, ACTIVE
      INTO A_ALLOW_MODIFY, A_ACTIVE
      FROM UTSS
      WHERE SS = A_NEW_SS;
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOSS;
      RAISE STPERROR;
   END;

   
   
   
   L_TR_OK := FALSE;
   OPEN L_COS_CURSOR (L_LC, L_LC_VERSION, L_SS, A_NEW_SS, UNAPIGEN.P_CURRENT_UP, NVL(A_AUTHORISED_BY, UNAPIGEN.P_USER))  ;
   FETCH L_COS_CURSOR INTO  A_LC_SS_FROM, A_TR_NO;

   IF L_COS_CURSOR%FOUND THEN
      L_TR_OK := TRUE;
   ELSE
      
      
      OPEN L_TR_CURSOR (L_LC, L_LC_VERSION, L_SS, A_NEW_SS);
      FETCH L_TR_CURSOR INTO  A_LC_SS_FROM, A_TR_NO;
      IF L_TR_CURSOR%NOTFOUND THEN
         UNAPIAUT.P_NOT_AUTHORISED := 'Transition lc(ss_from => ss_to)='||L_LC||'('||NVL(L_SS,'NULL')||' OR @@ => '||A_NEW_SS||') does not exist';      
         L_TR_OK := FALSE;
      ELSE
      
         
         
         IF NVL(A_AUTHORISED_BY, UNAPIGEN.P_USER) = UNAPIGEN.P_DBA_NAME THEN
            L_TR_OK := TRUE;
         ELSE
            
            
            
            
            
            
            
            OPEN L_TRDYN_CURSOR (L_LC, L_LC_VERSION, L_SS, A_NEW_SS);
            LOOP
               FETCH L_TRDYN_CURSOR INTO  UNAPIAUT.P_LCTRUS_REC;
               IF L_TRDYN_CURSOR%NOTFOUND THEN
                  UNAPIAUT.P_NOT_AUTHORISED := 'Transition lc(ss_from => ss_to)='||L_LC||'('||NVL(L_SS,'NULL')||' OR @@ => '||A_NEW_SS||' not authorised for user:';
                  L_TR_OK := FALSE;
                  EXIT;
               ELSE
                  UNAPIAUT.P_OBJECT_TP      := 'sc';
                  UNAPIAUT.P_OBJECT_ID      := A_SC;
                  UNAPIAUT.P_OBJECT_VERSION := NULL;
                  UNAPIAUT.P_LC             := L_LC;
                  UNAPIAUT.P_SS_FROM        := L_SS;
                  UNAPIAUT.P_LC_SS_FROM     := UNAPIAUT.P_LCTRUS_REC.SS_FROM;
                  UNAPIAUT.P_SS_TO          := A_NEW_SS;
                  UNAPIAUT.P_TR_NO          := UNAPIAUT.P_LCTRUS_REC.TR_NO;
                  UNAPIAUT.P_RQ             := L_RQ;
                  UNAPIAUT.P_CH             := NULL;
                  UNAPIAUT.P_SD             := NULL;
                  UNAPIAUT.P_SC             := A_SC;
                  UNAPIAUT.P_WS             := NULL;
                  UNAPIAUT.P_PG             := NULL;    UNAPIAUT.P_PGNODE := NULL;
                  UNAPIAUT.P_PA             := NULL;    UNAPIAUT.P_PANODE := NULL;
                  UNAPIAUT.P_ME             := NULL;    UNAPIAUT.P_MENODE := NULL;
                  UNAPIAUT.P_IC             := NULL;    UNAPIAUT.P_ICNODE := NULL;
                  UNAPIAUT.P_II             := NULL;    UNAPIAUT.P_IINODE := NULL;
                  UNAPIAUT.P_PP_KEY1        := NULL;                  
                  UNAPIAUT.P_PP_KEY2        := NULL;                  
                  UNAPIAUT.P_PP_KEY3        := NULL;                  
                  UNAPIAUT.P_PP_KEY4        := NULL;                  
                  UNAPIAUT.P_PP_KEY5        := NULL;                  
                  UNAPIAUT.P_LAB            := NULL;
                  A_LC_SS_FROM := UNAPIAUT.P_LCTRUS_REC.SS_FROM;
                  A_TR_NO := UNAPIAUT.P_LCTRUS_REC.TR_NO;
                  L_TR_OK := UNACCESS.TRANSITIONAUTHORISED;
                  IF L_TR_OK THEN
                     UNAPIAUT.P_NOT_AUTHORISED := NULL;
                     EXIT;
                  ELSE
                     
                     
                     
                     UNAPIAUT.P_NOT_AUTHORISED := 'Dynamic user authorisation evaluation returned False Transition lc(ss_from => ss_to)='||L_LC||'('||NVL(L_SS,'NULL')||' OR @@ => '||A_NEW_SS||' not authorised for user:';
                  END IF;
               END IF;
            END LOOP;
            CLOSE L_TRDYN_CURSOR;
         END IF;
      END IF;
      CLOSE L_TR_CURSOR;
   END IF;
   CLOSE L_COS_CURSOR;
   
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NOT L_TR_OK THEN
      RETURN(UNAPIGEN.DBERR_NOTAUTHORISED);
   ELSE
      RETURN(UNAPIGEN.DBERR_SUCCESS);
   END IF;

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('ScTransitionAuthorised', SQLERRM);
   END IF;
   IF L_COS_CURSOR%ISOPEN THEN
      CLOSE L_COS_CURSOR;
   END IF;
   IF L_TR_CURSOR%ISOPEN THEN
      CLOSE L_TR_CURSOR;
   END IF;
   IF L_TRDYN_CURSOR%ISOPEN THEN
      CLOSE L_TRDYN_CURSOR;
   END IF;
   IF L_SCRQ_CURSOR%ISOPEN THEN
      CLOSE L_SCRQ_CURSOR;
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'ScTransitionAuthorised'));
END SCTRANSITIONAUTHORISED;

FUNCTION CHANGESCSTATUS
(A_SC                IN      VARCHAR2,     
 A_OLD_SS            IN      VARCHAR2,     
 A_NEW_SS            IN      VARCHAR2,     
 A_LC                IN      VARCHAR2,     
 A_LC_VERSION        IN      VARCHAR2,     
 A_MODIFY_REASON     IN      VARCHAR2)     
RETURN NUMBER IS

L_LC                    VARCHAR2(2);
L_LC_VERSION            VARCHAR2(20);
L_OLD_SS                VARCHAR2(2);
L_ALLOW_MODIFY          CHAR(1);
L_ACTIVE                CHAR(1);
L_LOG_HS                CHAR(1);
L_LOG_HS_DETAILS        CHAR(1);
L_LC_SS_FROM            VARCHAR2(2);
L_TR_NO                 NUMBER(3);
L_HS_DETAILS_SEQ_NR     INTEGER;
L_OBJECT_ID             VARCHAR2(255);
L_ST_VERSION            VARCHAR2(20);

CURSOR L_VERSION_CURSOR IS
   SELECT ST_VERSION 
   FROM UTSC
   WHERE SC = A_SC;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   L_LC := A_LC;
   L_LC_VERSION := A_LC_VERSION;
   L_OLD_SS := A_OLD_SS; 
   L_RET_CODE := UNAPISCP.SCTRANSITIONAUTHORISED
                    (A_SC, 
                     L_LC, L_LC_VERSION, L_OLD_SS, A_NEW_SS,
                     UNAPIGEN.P_USER,
                     L_LC_SS_FROM, L_TR_NO, 
                     L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS, L_LOG_HS_DETAILS);
                  
                     
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS AND
      L_RET_CODE <> UNAPIGEN.DBERR_NOTAUTHORISED THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   IF L_RET_CODE = UNAPIGEN.DBERR_SUCCESS THEN
      UPDATE UTSC
      SET SS = A_NEW_SS,
          ALLOW_MODIFY = '#',
          ACTIVE = L_ACTIVE
      WHERE SC = A_SC;
   
      IF SQL%ROWCOUNT = 0 THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
         RAISE STPERROR;
      END IF;
   
      OPEN L_VERSION_CURSOR;
      FETCH L_VERSION_CURSOR INTO L_ST_VERSION;
      IF L_VERSION_CURSOR%NOTFOUND THEN
         CLOSE L_VERSION_CURSOR;
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_STVERSION;
         RAISE STPERROR;
      END IF;
      CLOSE L_VERSION_CURSOR;

      L_EVENT_TP := 'ScStatusChanged';
      L_EV_SEQ_NR := -1;
      L_EV_DETAILS := 'tr_no=' || L_TR_NO || 
                      '#ss_from=' || L_OLD_SS  ||
                      '#lc_ss_from='|| L_LC_SS_FROM ||
                      '#st_version=' || L_ST_VERSION;
      L_RESULT := UNAPIEV.INSERTEVENT('ChangeScStatus', UNAPIGEN.P_EVMGR_NAME, 'sc', A_SC, L_LC, 
                                      L_LC_VERSION, A_NEW_SS, L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);
      IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
         UNAPIGEN.P_TXN_ERROR := L_RESULT;
         RAISE STPERROR;
      END IF;
   
      IF L_LOG_HS = '1' THEN
         INSERT INTO UTSCHS(SC, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES(A_SC, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                'status of sample "'||A_SC||'" is changed from "'||UNAPIGEN.SQLSSNAME(L_OLD_SS)||'" ['||L_OLD_SS||'] to "'||UNAPIGEN.SQLSSNAME(A_NEW_SS)||'" ['||A_NEW_SS||'].', 
                CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;

      L_HS_DETAILS_SEQ_NR := 0;
      IF L_LOG_HS_DETAILS = '1' THEN
         L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
         INSERT INTO UTSCHSDETAILS(SC, TR_SEQ, EV_SEQ, SEQ, DETAILS)
         VALUES(A_SC, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR, 
                'status of sample "'||A_SC||'" is changed from "'||UNAPIGEN.SQLSSNAME(L_OLD_SS)||'" ['||L_OLD_SS||'] to "'||UNAPIGEN.SQLSSNAME(A_NEW_SS)||'" ['||A_NEW_SS||'].');
      END IF;
   END IF;
   
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   UNAPIAUT.UPDATEAUTHORISATIONBUFFER('sc', A_SC, NULL, A_NEW_SS);

   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('ChangeScStatus', SQLERRM);
   END IF;
   IF L_VERSION_CURSOR%ISOPEN THEN
      CLOSE L_VERSION_CURSOR;
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'ChangeScStatus'));
END CHANGESCSTATUS;

FUNCTION INTERNALCHANGESCSTATUS            
(A_SC                IN      VARCHAR2,     
 A_NEW_SS            IN      VARCHAR2,     
 A_MODIFY_REASON     IN      VARCHAR2)     
RETURN NUMBER IS

L_RET_CODE                    INTEGER;

L_OLD_SS                      VARCHAR2(2);
L_LC                          VARCHAR2(2);
L_LC_VERSION                  VARCHAR2(20);


L_SEQ_NR                      NUMBER;
L_ST_VERSION                  VARCHAR2(20);


L_TMP_RETRIESWHENINTRANSITION  INTEGER;
L_TMP_INTERVALWHENINTRANSITION NUMBER;
L_TMP_REMOTE_MODE              INTEGER;

BEGIN 

   L_TMP_REMOTE_MODE := UNAPIGEN.P_REMOTE;
   UNAPIGEN.P_REMOTE := '1'; 
   
   L_OLD_SS := NULL;
   L_LC := NULL;
   L_LC_VERSION := NULL;
   L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_SC, ' ') = ' ' OR
      NVL(A_NEW_SS, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIPRP.CHECKELECSIGNATURE(A_NEW_SS);
   IF L_RET_CODE = UNAPIGEN.DBERR_SUCCESS THEN
 
      
      L_TMP_RETRIESWHENINTRANSITION := UNAPIEV.P_RETRIESWHENINTRANSITION;
      L_TMP_INTERVALWHENINTRANSITION := UNAPIEV.P_INTERVALWHENINTRANSITION;
      UNAPIEV.P_RETRIESWHENINTRANSITION  := 1;
      UNAPIEV.P_INTERVALWHENINTRANSITION := 0.2;   
   
      
      
      IF A_NEW_SS <> '@C' THEN
         L_RET_CODE := UNAPISCP.CHANGESCSTATUS (A_SC,  
                                                L_OLD_SS, A_NEW_SS, L_LC, L_LC_VERSION, A_MODIFY_REASON);
   
      ELSIF A_NEW_SS = '@C' THEN
         L_RET_CODE := UNAPISCP.CANCELSC (A_SC, A_MODIFY_REASON);      
      END IF;
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SUCCESS; 
         
         L_SEQ_NR := NULL;
         BEGIN 
            SELECT ST_VERSION
            INTO L_ST_VERSION
            FROM UTSC
            WHERE SC = A_SC;
         EXCEPTION
         WHEN NO_DATA_FOUND THEN
            L_ST_VERSION := NULL;
         END;
         
         L_RET_CODE := UNAPIEV.INSERTEVENT
                         (A_API_NAME          => 'InternalChangeScStatus',
                          A_EVMGR_NAME        => UNAPIGEN.P_EVMGR_NAME,
                          A_OBJECT_TP         => 'sc',
                          A_OBJECT_ID         => A_SC,
                          A_OBJECT_LC         => NULL,
                          A_OBJECT_LC_VERSION => NULL,
                          A_OBJECT_SS         => NULL,
                          A_EV_TP             => 'SampleUpdated',
                          A_EV_DETAILS        => 'st_version='||L_ST_VERSION||
                                                 '#ss_to='||A_NEW_SS,
                          A_SEQ_NR            => L_SEQ_NR);
      END IF;
   
      
      UNAPIEV.P_RETRIESWHENINTRANSITION  := L_TMP_RETRIESWHENINTRANSITION;
      UNAPIEV.P_INTERVALWHENINTRANSITION := L_TMP_INTERVALWHENINTRANSITION;      
   ELSE
         L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;   

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
   UNAPIAUT.UPDATEAUTHORISATIONBUFFER('sc', A_SC, NULL, A_NEW_SS);

   UNAPIGEN.P_REMOTE := L_TMP_REMOTE_MODE;
   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   
   UNAPIGEN.P_REMOTE := L_TMP_REMOTE_MODE;
   IF L_TMP_RETRIESWHENINTRANSITION IS NOT NULL THEN
      UNAPIEV.P_RETRIESWHENINTRANSITION  := L_TMP_RETRIESWHENINTRANSITION;
      UNAPIEV.P_INTERVALWHENINTRANSITION := L_TMP_INTERVALWHENINTRANSITION;   
   END IF;
   IF SQLCODE <> 1 THEN 
      UNAPIGEN.LOGERROR('InternalChangeScStatus', SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('InternalChangeScStatus', L_SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'InternalChangeScStatus'));
END INTERNALCHANGESCSTATUS;

FUNCTION CANCELSC
(A_SC                IN      VARCHAR2,     
 A_MODIFY_REASON     IN      VARCHAR2)     
RETURN NUMBER IS

L_LC                          VARCHAR2(2);
L_LC_VERSION                  VARCHAR2(20);
L_OLD_SS                      VARCHAR2(2);
L_ALLOW_MODIFY                CHAR(1);
L_ACTIVE                      CHAR(1);
L_LOG_HS                      CHAR(1);
L_LOG_HS_DETAILS              CHAR(1);
L_LC_SS_FROM                  VARCHAR2(2);
L_TR_NO                       NUMBER(3);
L_HS_DETAILS_SEQ_NR           INTEGER;
L_ST_VERSION                  VARCHAR2(20);
L_OLD_EXEC_START_DATE         TIMESTAMP WITH TIME ZONE;
L_OLD_EXEC_END_DATE           TIMESTAMP WITH TIME ZONE;
L_NEW_EXEC_START_DATE         TIMESTAMP WITH TIME ZONE;
L_NEW_EXEC_END_DATE           TIMESTAMP WITH TIME ZONE;
L_NEW_EXEC_START_DATE_TZ      TIMESTAMP WITH TIME ZONE;
L_NEW_EXEC_END_DATE_TZ        TIMESTAMP WITH TIME ZONE;

L_OBJECT_ID                   VARCHAR2(255);
L_CURRENT_TIMESTAMP                     VARCHAR2(40);
L_NEW_SS                      VARCHAR2(2);
L_PREVIOUS_ALLOW_MODIFY_CHECK CHAR(1);

CURSOR L_SCPG_CURSOR (A_SC VARCHAR2) IS
   SELECT PG, PGNODE
   FROM UTSCPG
   WHERE SC = A_SC;

CURSOR L_SCIC_CURSOR (A_SC VARCHAR2) IS
   SELECT IC, ICNODE
   FROM UTSCIC
   WHERE SC = A_SC;

CURSOR L_SC_EXEC_DATES_CURSOR (A_SC VARCHAR2) IS
   SELECT EXEC_START_DATE, EXEC_END_DATE
   FROM UTSC
   WHERE SC = A_SC;

CURSOR L_VERSION_CURSOR IS
   SELECT ST_VERSION 
   FROM UTSC
   WHERE SC = A_SC;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
   
   L_CURRENT_TIMESTAMP := CURRENT_TIMESTAMP;
   L_LC := NULL;
   L_LC_VERSION := NULL;
   L_OLD_SS := NULL; 
   L_NEW_SS := '@C';
   L_RET_CODE := UNAPISCP.SCTRANSITIONAUTHORISED
                    (A_SC, 
                     L_LC, L_LC_VERSION, L_OLD_SS, L_NEW_SS,
                     UNAPIGEN.P_USER,
                     L_LC_SS_FROM, L_TR_NO, 
                     L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS, L_LOG_HS_DETAILS);
                  
                     
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS AND
      L_RET_CODE <> UNAPIGEN.DBERR_NOTAUTHORISED THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   IF L_RET_CODE = UNAPIGEN.DBERR_SUCCESS THEN
      OPEN L_VERSION_CURSOR;
      FETCH L_VERSION_CURSOR INTO L_ST_VERSION;
      IF L_VERSION_CURSOR%NOTFOUND THEN
         CLOSE L_VERSION_CURSOR;
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_STVERSION;
         RAISE STPERROR;
      END IF;
      CLOSE L_VERSION_CURSOR;
      
      
      
      
      
      L_EVENT_TP := 'ScCanceled';
      L_EV_SEQ_NR := -1;
      L_EV_DETAILS := 'tr_no=' || L_TR_NO ||
                      '#ss_from=' || L_OLD_SS ||
                      '#lc_ss_from='|| L_LC_SS_FROM ||
                      '#st_version=' || L_ST_VERSION;
      L_RESULT := UNAPIEV.INSERTEVENT('CancelSc', UNAPIGEN.P_EVMGR_NAME,
                                      'sc', A_SC, L_LC, L_LC_VERSION, L_NEW_SS,
                                      L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);
      IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
         UNAPIGEN.P_TXN_ERROR := L_RESULT;
         RAISE STPERROR;
      END IF;

      IF L_LOG_HS = '1' THEN
         INSERT INTO UTSCHS(SC, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES(A_SC, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                'sample "'||A_SC||'" canceled, status is changed from "'||UNAPIGEN.SQLSSNAME(L_OLD_SS)||'" ['||L_OLD_SS||'] to "'||UNAPIGEN.SQLSSNAME(L_NEW_SS)||'" ['||L_NEW_SS||'].', 
                CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   
      L_HS_DETAILS_SEQ_NR := 0;
      IF L_LOG_HS_DETAILS = '1' THEN
         L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
         INSERT INTO UTSCHSDETAILS(SC, TR_SEQ, EV_SEQ, SEQ, DETAILS)
         VALUES(A_SC, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR, 
                'sample "'||A_SC||'" canceled, status is changed from "'||UNAPIGEN.SQLSSNAME(L_OLD_SS)||'" ['||L_OLD_SS||'] to "'||UNAPIGEN.SQLSSNAME(L_NEW_SS)||'" ['||L_NEW_SS||'].');
      END IF;
   
      
      
      
      L_RESULT := UNAPIAUT.GETALLOWMODIFYCHECKMODE(L_PREVIOUS_ALLOW_MODIFY_CHECK);
      IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
         UNAPIGEN.P_TXN_ERROR := L_RESULT;
         RAISE STPERROR;
      END IF;

      IF L_PREVIOUS_ALLOW_MODIFY_CHECK = '0' THEN
         L_RESULT := UNAPIAUT.DISABLEALLOWMODIFYCHECK('1');
         IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
            UNAPIGEN.P_TXN_ERROR := L_RESULT;
            RAISE STPERROR;
         END IF;
      END IF;

      
      
      
      FOR L_SCIC_REC IN L_SCIC_CURSOR(A_SC) LOOP
         L_RET_CODE := UNAPIAUT.DISABLEARCHECK('1');            
         L_RESULT := UNAPIICP.CANCELSCIC(A_SC, L_SCIC_REC.IC, L_SCIC_REC.ICNODE, A_MODIFY_REASON);
         
         
         
         IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS AND 
            L_RESULT <> UNAPIGEN.DBERR_NOTAUTHORISED THEN
            UNAPIGEN.P_TXN_ERROR := L_RESULT;
            RAISE STPERROR;
         END IF;                                         
         L_RET_CODE := UNAPIAUT.DISABLEARCHECK('0');            
      END LOOP;

      
      
      
      FOR L_SCPG_REC IN L_SCPG_CURSOR(A_SC) LOOP
         L_RET_CODE := UNAPIAUT.DISABLEARCHECK('1');      
         L_RESULT := UNAPIPGP.CANCELSCPG(A_SC, L_SCPG_REC.PG, L_SCPG_REC.PGNODE, A_MODIFY_REASON);
         
         
         
         IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS AND 
            L_RESULT <> UNAPIGEN.DBERR_NOTAUTHORISED THEN
            UNAPIGEN.P_TXN_ERROR := L_RESULT;
            RAISE STPERROR;
         END IF;                                         
         L_RET_CODE := UNAPIAUT.DISABLEARCHECK('0');      
      END LOOP;

      
      
      
      L_RESULT := UNAPIAUT.DISABLEALLOWMODIFYCHECK(L_PREVIOUS_ALLOW_MODIFY_CHECK);
      IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
         UNAPIGEN.P_TXN_ERROR := L_RESULT;
         RAISE STPERROR;
      END IF;
      
      
      
      
      
      OPEN L_SC_EXEC_DATES_CURSOR(A_SC);
      FETCH L_SC_EXEC_DATES_CURSOR
      INTO L_OLD_EXEC_START_DATE, L_OLD_EXEC_END_DATE;
      CLOSE L_SC_EXEC_DATES_CURSOR;

      
      
      
      
      UPDATE UTSC
      SET SS = L_NEW_SS,
          ALLOW_MODIFY = '#',
          ACTIVE = L_ACTIVE,
          EXEC_START_DATE = NVL(EXEC_START_DATE, L_CURRENT_TIMESTAMP),
          EXEC_START_DATE_TZ = NVL(EXEC_START_DATE, L_CURRENT_TIMESTAMP),
     EXEC_END_DATE = NVL(EXEC_END_DATE, L_CURRENT_TIMESTAMP),
     EXEC_END_DATE_TZ = NVL(EXEC_END_DATE, L_CURRENT_TIMESTAMP) 
      WHERE SC = A_SC
      RETURNING EXEC_START_DATE,EXEC_START_DATE_TZ, EXEC_END_DATE, EXEC_END_DATE_TZ
      INTO L_NEW_EXEC_START_DATE, L_NEW_EXEC_START_DATE_TZ, L_NEW_EXEC_END_DATE, L_NEW_EXEC_END_DATE_TZ;
   
      IF SQL%ROWCOUNT = 0 THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
         RAISE STPERROR;
      END IF;

      IF L_LOG_HS_DETAILS = '1' THEN
         
         IF L_NEW_EXEC_START_DATE = L_CURRENT_TIMESTAMP THEN
            L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
            INSERT INTO UTSCHSDETAILS(SC, TR_SEQ, EV_SEQ, SEQ, DETAILS)
            VALUES(A_SC, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR,
                   'sample "'||A_SC||'" is updated: property <exec_start_date_tz> changed value from "" to "' || TO_CHAR(L_NEW_EXEC_START_DATE_TZ) || '".');
         END IF;

         
         IF L_NEW_EXEC_END_DATE = L_CURRENT_TIMESTAMP THEN
            L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
            INSERT INTO UTSCHSDETAILS(SC, TR_SEQ, EV_SEQ, SEQ, DETAILS)
            VALUES(A_SC, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR,
                   'sample "'||A_SC||'" is updated: property <exec_end_date_tz> changed value from "" to "' || TO_CHAR(L_NEW_EXEC_END_DATE_TZ) || '".');
         END IF;
      END IF;

      
      
      
      IF L_OLD_EXEC_START_DATE IS NULL THEN
         L_RET_CODE := UNAPISC.UPDATELINKEDSCII
                          (A_SC, 'exec_start_date', '0', '', '', '',
                          '', '', '',
                          '', '', L_CURRENT_TIMESTAMP,
                          '', '', '',
                          '', '', '',    '',
                          '', '', '', '', '',
                          '', '');
         IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
            UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
            RAISE STPERROR;
         END IF;
      END IF;

      IF L_OLD_EXEC_END_DATE IS NULL THEN
         L_RET_CODE := UNAPISC.UPDATELINKEDSCII
                          (A_SC, 'exec_end_date', '0', '', '', '',
                          '', '', '',
                          '', '', '',
                          L_CURRENT_TIMESTAMP, '', '',
                          '', '', '',  '',
                          '', '', '', '', '',
                          '', '');
         IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
            UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
            RAISE STPERROR;
         END IF;
      END IF;
   
   END IF;
   
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   UNAPIAUT.UPDATEAUTHORISATIONBUFFER('sc', A_SC, NULL, '@C');

   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('CancelSc', SQLERRM);
   END IF;
   L_RET_CODE := UNAPIAUT.DISABLEARCHECK('0');      
   IF L_VERSION_CURSOR%ISOPEN THEN
      CLOSE L_VERSION_CURSOR;
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'CancelSc'));
END CANCELSC;

FUNCTION CHANGESCLIFECYCLE
(A_SC                IN      VARCHAR2,     
 A_OLD_LC            IN      VARCHAR2,     
 A_OLD_LC_VERSION    IN      VARCHAR2,     
 A_NEW_LC            IN      VARCHAR2,     
 A_NEW_LC_VERSION    IN      VARCHAR2,     
 A_MODIFY_REASON     IN      VARCHAR2)     
RETURN NUMBER IS

L_ALLOW_MODIFY         CHAR(1);
L_ACTIVE               CHAR(1);
L_LC                   VARCHAR2(2);
L_LC_VERSION           VARCHAR2(20);
L_SS                   VARCHAR2(2);
L_LOG_HS               CHAR(1);
L_LOG_HS_DETAILS       CHAR(1);
L_COUNT_US             NUMBER;
L_COUNT_LC             NUMBER;
L_HS_DETAILS_SEQ_NR    INTEGER;
L_ST_VERSION           VARCHAR2(20);
L_LOCK_SC              VARCHAR2(20);

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_SC, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   
   SELECT SC
   INTO L_LOCK_SC
   FROM UTSC
   WHERE SC = A_SC
   FOR UPDATE;   

   L_RET_CODE := UNAPIAUT.GETSCAUTHORISATION(A_SC, L_ST_VERSION, L_LC, L_LC_VERSION, L_SS,
                                             L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS, L_LOG_HS_DETAILS);
   IF (L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS AND
       L_RET_CODE <> UNAPIGEN.DBERR_NOTMODIFIABLE) THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;
   
   L_SS := NVL(L_SS, '@~');   

   IF NVL(A_OLD_LC, ' ') = ' ' THEN
      
      NULL;
   ELSE
      IF A_OLD_LC <> L_LC THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OBJECTLCMATCH;
         RAISE STPERROR;
      END IF;

      
      
   END IF;

   SELECT COUNT(*)
   INTO L_COUNT_LC
   FROM UTLC
   WHERE VERSION = UNVERSION.P_NO_VERSION    
     AND LC = A_NEW_LC;

   IF L_COUNT_LC = 0 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOLC;
      RAISE STPERROR;
   END IF;

   IF (NVL(L_LC, ' ') <> ' ') AND (NVL(L_LC_VERSION, ' ') <> ' ') THEN
      SELECT COUNT(*)
      INTO L_COUNT_US
      FROM UTLCUS
      WHERE LC = L_LC
        AND VERSION = L_LC_VERSION
        AND SS_FROM = L_SS
        AND US IN (UNAPIGEN.P_USER, '~ANY~', 'UP'||TO_CHAR(UNAPIGEN.P_CURRENT_UP));

      IF L_COUNT_US = 0 THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTAUTHORISED;
         RAISE STPERROR;
      END IF;
   END IF;

   UPDATE UTSC
   SET LC = A_NEW_LC,
       LC_VERSION = UNVERSION.P_NO_VERSION,    
       ALLOW_MODIFY = '#',
       SS = ''
   WHERE SC = A_SC;

   IF SQL%ROWCOUNT = 0 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
      RAISE STPERROR;
   END IF;

   L_EVENT_TP := 'ScLifeCycleChanged';
   L_EV_DETAILS := 'from_lc=' || L_LC || 
                   '#from_lc_version='|| L_LC_VERSION || 
                   '#ss_from=' || L_SS ||
                   '#st_version=' || L_ST_VERSION;
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT('ChangeScLifeCycle', UNAPIGEN.P_EVMGR_NAME, 'sc', A_SC, A_NEW_LC, 
                                   UNVERSION.P_NO_VERSION, '', L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);    
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF L_LOG_HS = '1' OR A_MODIFY_REASON IS NOT NULL THEN
      INSERT INTO UTSCHS(SC, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES(A_SC, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
             'life cycle of sample "'||A_SC||'" is changed from "'||UNAPIGEN.SQLLCNAME(L_LC)||'" ['||L_LC||'] to "'||UNAPIGEN.SQLLCNAME(A_NEW_LC)||'" ['||A_NEW_LC||'].', 
             CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   L_HS_DETAILS_SEQ_NR := 0;
   IF L_LOG_HS_DETAILS = '1' OR A_MODIFY_REASON IS NOT NULL THEN
      L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
      INSERT INTO UTSCHSDETAILS(SC, TR_SEQ, EV_SEQ, SEQ, DETAILS)
      VALUES(A_SC, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR, 
             'life cycle of sample "'||A_SC||'" is changed from "'||UNAPIGEN.SQLLCNAME(L_LC)||'" ['||L_LC||'] to "'||UNAPIGEN.SQLLCNAME(A_NEW_LC)||'" ['||A_NEW_LC||'].');
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;












   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('ChangeScLifeCycle',SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'ChangeScLifeCycle'));
END CHANGESCLIFECYCLE;

FUNCTION SCELECTRONICSIGNATURE
(A_SC                IN      VARCHAR2,     
 A_AUTHORISED_BY     IN      VARCHAR2,     
 A_MODIFY_REASON     IN      VARCHAR2)     
RETURN NUMBER IS

L_ST_VERSION             VARCHAR2(20);
L_LC                     VARCHAR2(2);
L_LC_VERSION             VARCHAR2(20);
L_SS                     VARCHAR2(2);
L_ALLOW_MODIFY           CHAR(1);
L_ACTIVE                 CHAR(1);
L_LOG_HS                 CHAR(1);
L_LOG_HS_DETAILS         CHAR(1);
L_HS_DETAILS_SEQ_NR      INTEGER;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
   
   L_RET_CODE := UNAPIAUT.GETSCAUTHORISATION(A_SC, L_ST_VERSION, L_LC, L_LC_VERSION, L_SS,
                                             L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS, L_LOG_HS_DETAILS);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   IF A_AUTHORISED_BY IS NOT NULL THEN
      L_RET_CODE := UNAPIGEN.GETNEXTEVENTSEQNR(L_EV_SEQ_NR);
 
      INSERT INTO UTSCHS(SC, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES(A_SC, A_AUTHORISED_BY, UNAPIGEN.SQLUSERDESCRIPTION(A_AUTHORISED_BY), 
             'ElectronicSignature', 'Last action of sample "'||A_SC||'" is signed electronically.', 
             CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);

      L_HS_DETAILS_SEQ_NR := 0;
      L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
      INSERT INTO UTSCHSDETAILS(SC, TR_SEQ, EV_SEQ, SEQ ,DETAILS)
      VALUES(A_SC, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR, 
             'Last action of sample "'||A_SC||'" is signed electronically.');
   END IF;
   
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('ScElectronicSignature', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'ScElectronicSignature'));
END SCELECTRONICSIGNATURE;

FUNCTION ISSAMPLENOTINTRANSITION   
(A_SC  IN  VARCHAR2)               
RETURN NUMBER IS

L_COUNT   NUMBER;

CURSOR L_SC_CURSOR(C_SC VARCHAR2) IS
   SELECT COUNT(*)
     FROM UTSC
    WHERE SC = C_SC
      AND ALLOW_MODIFY = '#';

CURSOR L_SCPG_CURSOR(C_SC VARCHAR2) IS
   SELECT COUNT(*)
     FROM UTSCPG
    WHERE SC = C_SC
      AND ALLOW_MODIFY = '#';

CURSOR L_SCPA_CURSOR(C_SC VARCHAR2) IS
   SELECT COUNT(*)
     FROM UTSCPA
    WHERE SC = C_SC
      AND ALLOW_MODIFY = '#';

CURSOR L_SCME_CURSOR(C_SC VARCHAR2) IS
   SELECT COUNT(*)
     FROM UTSCME
    WHERE SC = C_SC
      AND ALLOW_MODIFY = '#';

CURSOR L_SCIC_CURSOR(C_SC VARCHAR2) IS
   SELECT COUNT(*)
     FROM UTSCIC
    WHERE SC = C_SC
      AND ALLOW_MODIFY = '#';

CURSOR L_SCII_CURSOR(C_SC VARCHAR2) IS
   SELECT COUNT(*)
     FROM UTSCII
    WHERE SC = C_SC
      AND ALLOW_MODIFY = '#';

BEGIN
   
   OPEN L_SC_CURSOR(A_SC);
   FETCH L_SC_CURSOR INTO L_COUNT;
   CLOSE L_SC_CURSOR;
   IF L_COUNT > 0 THEN
      RETURN(UNAPIGEN.DBERR_TRANSITION);
   END IF;
   
   
   OPEN L_SCPG_CURSOR(A_SC);
   FETCH L_SCPG_CURSOR INTO L_COUNT;
   CLOSE L_SCPG_CURSOR;
   IF L_COUNT > 0 THEN
      RETURN(UNAPIGEN.DBERR_TRANSITION);
   END IF;
   
   
   OPEN L_SCPA_CURSOR(A_SC);
   FETCH L_SCPA_CURSOR INTO L_COUNT;
   CLOSE L_SCPA_CURSOR;
   IF L_COUNT > 0 THEN
      RETURN(UNAPIGEN.DBERR_TRANSITION);
   END IF;
   
   
   OPEN L_SCME_CURSOR(A_SC);
   FETCH L_SCME_CURSOR INTO L_COUNT;
   CLOSE L_SCME_CURSOR;
   IF L_COUNT > 0 THEN
      RETURN(UNAPIGEN.DBERR_TRANSITION);
   END IF;

   
   OPEN L_SCIC_CURSOR(A_SC);
   FETCH L_SCIC_CURSOR INTO L_COUNT;
   CLOSE L_SCIC_CURSOR;
   IF L_COUNT > 0 THEN
      RETURN(UNAPIGEN.DBERR_TRANSITION);
   END IF;
   
   
   OPEN L_SCII_CURSOR(A_SC);
   FETCH L_SCII_CURSOR INTO L_COUNT;
   CLOSE L_SCII_CURSOR;
   IF L_COUNT > 0 THEN
      RETURN(UNAPIGEN.DBERR_TRANSITION);
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN OTHERS THEN
   L_SQLERRM := SQLERRM;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
          'IsSampleNotInTransition', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   IF L_SC_CURSOR%ISOPEN THEN
      CLOSE L_SC_CURSOR;
   END IF;
   IF L_SCPG_CURSOR%ISOPEN THEN
      CLOSE L_SCPG_CURSOR;
   END IF;
   IF L_SCPA_CURSOR%ISOPEN THEN
      CLOSE L_SCPA_CURSOR;
   END IF;
   IF L_SCME_CURSOR%ISOPEN THEN
      CLOSE L_SCME_CURSOR;
   END IF;
   IF L_SCIC_CURSOR%ISOPEN THEN
      CLOSE L_SCIC_CURSOR;
   END IF;
   IF L_SCII_CURSOR%ISOPEN THEN
      CLOSE L_SCII_CURSOR;
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END ISSAMPLENOTINTRANSITION;




BEGIN
   NULL;
END UNAPISCP;
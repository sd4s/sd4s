PACKAGE BODY unapiuc AS



















L_SQLERRM         VARCHAR2(255);
L_SQL_STRING      VARCHAR2(2000);
L_WHERE_CLAUSE    VARCHAR2(1000);
L_EVENT_TP        UTEV.EV_TP%TYPE;
L_EV_DETAILS      UTEV.EV_DETAILS%TYPE;
L_RET_CODE        NUMBER;
L_RESULT          NUMBER;
L_FETCHED_ROWS    NUMBER;
L_EV_SEQ_NR       NUMBER;


P_UC_CURSOR       INTEGER;


P_COUNTER_CURSOR  INTEGER;

STPERROR          EXCEPTION;

FUNCTION GETVERSION
   RETURN VARCHAR2
IS
BEGIN
   RETURN('06.07.00.00_00.13');
EXCEPTION
   WHEN OTHERS THEN
      RETURN (NULL);
END GETVERSION;

FUNCTION IMPOSE_QUALIFIER
(A_IN_VAL               IN   VARCHAR2,
 A_QUALIFIER            IN   VARCHAR2)
RETURN VARCHAR2 IS

L_OUT_VAL                 VARCHAR2(255);
L_Q_START                 INTEGER;
L_Q_LEN                   INTEGER;
L_Q_COMMA                 INTEGER;

BEGIN

   IF (A_QUALIFIER IS NULL) THEN
      L_OUT_VAL := A_IN_VAL;
      RETURN (L_OUT_VAL);
   END IF;

   IF (A_IN_VAL IS NULL) THEN
      L_OUT_VAL := '';
      RETURN (L_OUT_VAL);
   END IF;

   IF (UPPER(SUBSTR(A_QUALIFIER, 1, 4)) = 'LEFT') THEN
      L_Q_START := 1;
      L_Q_LEN := TO_NUMBER(SUBSTR(A_QUALIFIER, 6, LENGTH(A_QUALIFIER) - 6));
   ELSIF (UPPER(SUBSTR(A_QUALIFIER, 1, 3)) = 'MID') THEN
      L_Q_COMMA := INSTR(A_QUALIFIER, ',', 5);
      L_Q_START := TO_NUMBER(SUBSTR(A_QUALIFIER, 5, L_Q_COMMA - 5));
      L_Q_LEN := TO_NUMBER(SUBSTR(A_QUALIFIER, L_Q_COMMA + 1,
                 LENGTH(A_QUALIFIER) - L_Q_COMMA - 1));
   ELSIF (UPPER(SUBSTR(A_QUALIFIER, 1, 5)) = 'RIGHT') THEN
      L_Q_LEN := TO_NUMBER(SUBSTR(A_QUALIFIER, 7, LENGTH(A_QUALIFIER) - 7));
      L_Q_START := LENGTH(A_IN_VAL) - L_Q_LEN +1;
   END IF;
   L_OUT_VAL := SUBSTR(A_IN_VAL, L_Q_START, L_Q_LEN);
   RETURN (L_OUT_VAL);
END IMPOSE_QUALIFIER;

FUNCTION CREATECOUNTERSTRUCTURES
(A_COUNTER             IN       VARCHAR2,
 A_LOW_CNT             IN       NUMBER,
 A_HIGH_CNT            IN       NUMBER,
 A_INCR_CNT            IN       NUMBER,
 A_FIXED_LENGTH        IN       CHAR,
 A_CIRCULAR            IN       CHAR)
RETURN NUMBER IS

L_COUNTER_CURSOR       INTEGER;

BEGIN
   L_COUNTER_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'CREATE SEQUENCE ' || A_COUNTER ||
                   ' MINVALUE ' || TO_CHAR(A_LOW_CNT) ||
                   ' INCREMENT BY ' || TO_CHAR(A_INCR_CNT) ||
                   ' NOCACHE ORDER ';
   IF (A_HIGH_CNT IS NOT NULL) THEN
      L_SQL_STRING := L_SQL_STRING || ' MAXVALUE ' || TO_CHAR(A_HIGH_CNT);
   END IF;
   IF NVL(A_CIRCULAR,'0') <> '0' THEN
      L_SQL_STRING := L_SQL_STRING || ' CYCLE ';
   ELSE
      L_SQL_STRING := L_SQL_STRING || ' NOCYCLE ';
   END IF;
   DBMS_SQL.PARSE(L_COUNTER_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   DBMS_SQL.CLOSE_CURSOR( L_COUNTER_CURSOR);

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('CreateCounterStructures', SQLERRM);
   END IF;
   IF DBMS_SQL.IS_OPEN(L_COUNTER_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_COUNTER_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'CreateCounterStructures'));
END CREATECOUNTERSTRUCTURES;

FUNCTION GETUNIQUECODEMASKLIST
(A_UC             OUT      UNAPIGEN.VC20_TABLE_TYPE,     
 A_DESCRIPTION    OUT      UNAPIGEN.VC40_TABLE_TYPE,     
 A_SS             OUT      UNAPIGEN.VC2_TABLE_TYPE,      
 A_NR_OF_ROWS     IN OUT   NUMBER,                       
 A_WHERE_CLAUSE   IN       VARCHAR2,                     
 A_NEXT_ROWS      IN       NUMBER)                       
RETURN NUMBER IS

L_UC                  VARCHAR2(20);
L_DESCRIPTION         VARCHAR2(40);
L_SS                  VARCHAR2(2);

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_UC_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_UC_CURSOR);
         P_UC_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_UC_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      IF P_UC_CURSOR IS NULL THEN
         P_UC_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;

      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
         L_WHERE_CLAUSE := ' WHERE active = ''1'' ORDER BY uc'; 
      ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
         L_WHERE_CLAUSE := ' WHERE uc = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || ''' ORDER BY uc'; 
      ELSE
         L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
      END IF;

      L_SQL_STRING := 'SELECT uc, description, ss FROM dd' ||
                       UNAPIGEN.P_DD || '.uvuc ' || L_WHERE_CLAUSE;

      DBMS_SQL.PARSE(P_UC_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

      DBMS_SQL.DEFINE_COLUMN(P_UC_CURSOR, 1, L_UC, 20);
      DBMS_SQL.DEFINE_COLUMN(P_UC_CURSOR, 2, L_DESCRIPTION, 40);
      DBMS_SQL.DEFINE_COLUMN(P_UC_CURSOR, 3, L_SS, 2);
      L_RESULT := DBMS_SQL.EXECUTE(P_UC_CURSOR);
   END IF;

   L_RESULT := DBMS_SQL.FETCH_ROWS(P_UC_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_UC_CURSOR, 1, L_UC);
      DBMS_SQL.COLUMN_VALUE(P_UC_CURSOR, 2, L_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE(P_UC_CURSOR, 3, L_SS);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_UC(L_FETCHED_ROWS) := L_UC;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;
      A_SS(L_FETCHED_ROWS) := L_SS;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_UC_CURSOR);
      END IF;
   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
      DBMS_SQL.CLOSE_CURSOR(P_UC_CURSOR);
      P_UC_CURSOR := NULL;
      RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_UC_CURSOR);
      P_UC_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetUniqueCodeMaskList', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN(P_UC_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(P_UC_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETUNIQUECODEMASKLIST;

FUNCTION GETUNIQUECODEMASK
(A_UC               OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_DESCRIPTION      OUT     UNAPIGEN.VC40_TABLE_TYPE,   
 A_UC_STRUCTURE     OUT     UNAPIGEN.VC255_TABLE_TYPE,  
 A_CURR_VAL         OUT     UNAPIGEN.VC255_TABLE_TYPE,  
 A_DEF_MASK_FOR     OUT     UNAPIGEN.CHAR2_TABLE_TYPE,  
 A_EDIT_ALLOWED     OUT     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_VALID_CF         OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_LOG_HS           OUT     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_ALLOW_MODIFY     OUT     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_ACTIVE           OUT     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_LC               OUT     UNAPIGEN.VC2_TABLE_TYPE,    
 A_SS               OUT     UNAPIGEN.VC2_TABLE_TYPE,    
 A_NR_OF_ROWS       IN OUT  NUMBER,                     
 A_WHERE_CLAUSE     IN      VARCHAR2)                   
RETURN NUMBER IS

L_UC              VARCHAR2(20);
L_DESCRIPTION     VARCHAR2(40);
L_UC_STRUCTURE    VARCHAR2(255);
L_CURR_VAL        VARCHAR2(255);
L_DEF_MASK_FOR    CHAR(2);
L_EDIT_ALLOWED    CHAR(1);
L_VALID_CF        VARCHAR2(20);
L_LOG_HS          CHAR(1);
L_ALLOW_MODIFY    CHAR(1);
L_ACTIVE          CHAR(1);
L_LC              VARCHAR2(2);
L_SS              VARCHAR2(2);
L_UC_CURSOR       INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'WHERE active = ''1'' ORDER BY uc'; 
   ELSIF
      UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := 'WHERE uc = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || ''' ORDER BY uc'; 
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_UC_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT uc, description, uc_structure, curr_val, ' ||
                   'def_mask_for, edit_allowed, valid_cf, ' ||
                   'log_hs, allow_modify, active, lc, ss ' ||
                   'FROM dd' || UNAPIGEN.P_DD || '.uvuc ' || L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_UC_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_UC_CURSOR, 1, L_UC, 20);
   DBMS_SQL.DEFINE_COLUMN(L_UC_CURSOR, 2, L_DESCRIPTION, 40);
   DBMS_SQL.DEFINE_COLUMN(L_UC_CURSOR, 3, L_UC_STRUCTURE, 255);
   DBMS_SQL.DEFINE_COLUMN(L_UC_CURSOR, 4, L_CURR_VAL, 255);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_UC_CURSOR, 5, L_DEF_MASK_FOR, 2);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_UC_CURSOR, 6, L_EDIT_ALLOWED, 1);
   DBMS_SQL.DEFINE_COLUMN(L_UC_CURSOR, 7, L_VALID_CF, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_UC_CURSOR, 8, L_LOG_HS, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_UC_CURSOR, 9, L_ALLOW_MODIFY, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_UC_CURSOR, 10,L_ACTIVE, 1);
   DBMS_SQL.DEFINE_COLUMN(L_UC_CURSOR, 11, L_LC, 2);
   DBMS_SQL.DEFINE_COLUMN(L_UC_CURSOR, 12, L_SS, 2);

   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_UC_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_UC_CURSOR, 1, L_UC);
      DBMS_SQL.COLUMN_VALUE(L_UC_CURSOR, 2, L_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE(L_UC_CURSOR, 3, L_UC_STRUCTURE);
      DBMS_SQL.COLUMN_VALUE(L_UC_CURSOR, 4, L_CURR_VAL);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_UC_CURSOR, 5, L_DEF_MASK_FOR);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_UC_CURSOR, 6, L_EDIT_ALLOWED);
      DBMS_SQL.COLUMN_VALUE(L_UC_CURSOR, 7, L_VALID_CF);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_UC_CURSOR, 8, L_LOG_HS);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_UC_CURSOR, 9, L_ALLOW_MODIFY);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_UC_CURSOR, 10, L_ACTIVE);
      DBMS_SQL.COLUMN_VALUE(L_UC_CURSOR, 11, L_LC);
      DBMS_SQL.COLUMN_VALUE(L_UC_CURSOR, 12, L_SS);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_UC(L_FETCHED_ROWS) := L_UC;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;
      A_UC_STRUCTURE(L_FETCHED_ROWS) := L_UC_STRUCTURE;
      A_CURR_VAL(L_FETCHED_ROWS) := L_CURR_VAL;
      A_DEF_MASK_FOR(L_FETCHED_ROWS) := L_DEF_MASK_FOR;
      A_EDIT_ALLOWED(L_FETCHED_ROWS) := L_EDIT_ALLOWED;
      A_VALID_CF(L_FETCHED_ROWS) := L_VALID_CF;
      A_LOG_HS(L_FETCHED_ROWS) := L_LOG_HS;
      A_ALLOW_MODIFY(L_FETCHED_ROWS) := L_ALLOW_MODIFY;
      A_ACTIVE(L_FETCHED_ROWS) := L_ACTIVE;
      A_LC(L_FETCHED_ROWS) := L_LC;
      A_SS(L_FETCHED_ROWS) := L_SS;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_UC_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_UC_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetUniqueCodeMask', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN(L_UC_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(L_UC_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETUNIQUECODEMASK;

FUNCTION DELETEUNIQUECODEMASK
(A_UC            IN  VARCHAR2,             
 A_MODIFY_REASON IN  VARCHAR2)             
RETURN NUMBER IS

L_ALLOW_MODIFY       CHAR(1);
L_ACTIVE             CHAR(1);
L_LOG_HS             CHAR(1);
L_LOG_HS_DETAILS     CHAR(1);
L_LC                 VARCHAR2(2);
L_LC_VERSION         VARCHAR2(20);
L_SS                 VARCHAR2(2);
A_VERSION            VARCHAR2(20);


BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_UC, ' ')= ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('uc', A_UC, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   
   IF UNAPIGEN.ISSYSTEM21CFR11COMPLIANT = UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTALLOWEDIN21CFR11;
      RAISE STPERROR;
   END IF;

   DELETE FROM UTUCAU
   WHERE UC = A_UC
   AND VERSION = A_VERSION;

   DELETE FROM UTUCAUDITTRAIL
   WHERE UC = A_UC
   AND VERSION = A_VERSION;

   DELETE FROM UTUCHS
   WHERE UC = A_UC
   AND VERSION = A_VERSION;

   DELETE FROM UTUC
   WHERE UC = A_UC
   AND VERSION = A_VERSION;

   
   
   
   
   

   L_EVENT_TP := 'ObjectDeleted';
   L_EV_SEQ_NR := -1;
   L_EV_DETAILS := 'version='||A_VERSION;
   L_RESULT :=
      UNAPIEV.INSERTEVENT('DeleteUniqueCodeMask',UNAPIGEN.P_EVMGR_NAME,
                           'uc', A_UC, L_LC, L_LC_VERSION, L_SS, L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);

   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
     UNAPIGEN.LOGERROR('DeleteUniqueCodeMask', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'DeleteUniqueCodeMask'));
END DELETEUNIQUECODEMASK;

FUNCTION SAVEUNIQUECODEMASK
(A_UC                   IN     VARCHAR2,          
 A_DESCRIPTION          IN     VARCHAR2,          
 A_UC_STRUCTURE         IN     VARCHAR2,          
 A_DEF_MASK_FOR         IN     CHAR,              
 A_EDIT_ALLOWED         IN     CHAR,              
 A_VALID_CF             IN     VARCHAR2,          
 A_LOG_HS               IN     CHAR,              
 A_LC                   IN     VARCHAR2,          
 A_MODIFY_REASON        IN     VARCHAR2)          
RETURN NUMBER IS

L_LC                 VARCHAR2(2);
L_LC_VERSION         VARCHAR2(20);
L_SS                 VARCHAR2(2);
L_LOG_HS             CHAR(1);
L_LOG_HS_DETAILS     CHAR(1);
L_ALLOW_MODIFY       CHAR(1);
L_ACTIVE             CHAR(1);
L_INSERT             BOOLEAN;
L_UC_STRUCTURE       VARCHAR2(255);
L_CURR_VAL           VARCHAR2(255);
L_LOCKNAME           VARCHAR2(30);
L_LOCKHANDLE         VARCHAR2(200);
L_DEF_MASK_FOR       VARCHAR2(2);
A_VERSION            VARCHAR2(20);

BEGIN


   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF NVL(A_UC, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_EDIT_ALLOWED, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_EDITALLOWED;
      RAISE STPERROR;
   END IF;

   IF NVL(A_LOG_HS, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_LOGHS;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('uc', A_UC, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                            L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE = UNAPIGEN.DBERR_NOOBJECT THEN
      L_INSERT := TRUE;
   ELSIF L_RET_CODE = UNAPIGEN.DBERR_SUCCESS THEN
      L_INSERT := FALSE;
   ELSE
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   L_DEF_MASK_FOR := LTRIM(RTRIM(A_DEF_MASK_FOR));

   IF L_INSERT THEN     
      IF NVL(A_LC, ' ') <> ' ' THEN
         L_LC := A_LC;
      END IF;
      INSERT INTO UTUC (UC, VERSION, VERSION_IS_CURRENT, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ, EFFECTIVE_TILL, EFFECTIVE_TILL_TZ, DESCRIPTION, UC_STRUCTURE,
                        DEF_MASK_FOR, EDIT_ALLOWED, VALID_CF,
                        LOG_HS, LOG_HS_DETAILS, ALLOW_MODIFY, ACTIVE, LC, LC_VERSION)
      VALUES (A_UC, A_VERSION, '1', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, NULL, A_DESCRIPTION, A_UC_STRUCTURE,
              L_DEF_MASK_FOR, A_EDIT_ALLOWED, A_VALID_CF,
              A_LOG_HS, L_LOG_HS_DETAILS, '#', '0', L_LC, L_LC_VERSION);
      L_EVENT_TP := 'ObjectCreated';
   ELSE                
      SELECT UC_STRUCTURE , CURR_VAL
      INTO L_UC_STRUCTURE , L_CURR_VAL
      FROM UTUC
      WHERE UC = A_UC
      AND VERSION = A_VERSION;
      IF L_UC_STRUCTURE <> A_UC_STRUCTURE THEN
         L_CURR_VAL := NULL;
      END IF;
      UPDATE UTUC
      SET DESCRIPTION   = A_DESCRIPTION,
          UC_STRUCTURE  = A_UC_STRUCTURE,
          CURR_VAL      = L_CURR_VAL,
          DEF_MASK_FOR  = L_DEF_MASK_FOR,
          EDIT_ALLOWED  = A_EDIT_ALLOWED,
          VALID_CF      = A_VALID_CF,
          LOG_HS        = A_LOG_HS,
          ALLOW_MODIFY  = '#'
      WHERE UC = A_UC
      AND VERSION = A_VERSION;
      L_EVENT_TP := 'ObjectUpdated';
   END IF;

   L_EV_SEQ_NR := -1;
   L_EV_DETAILS := 'version='||A_VERSION;
   L_RESULT :=
         UNAPIEV.INSERTEVENT('SaveUniqueCodeMask ', UNAPIGEN.P_EVMGR_NAME,
                             'uc', A_UC, L_LC, L_LC_VERSION, L_SS, L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF NVL(L_LOG_HS, ' ') <> A_LOG_HS THEN
      IF A_LOG_HS = '1' THEN
         INSERT INTO UTUCHS (UC, VERSION, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_UC, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION,
                 'History switched ON', 'Audit trail is turned on.',
                 CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      ELSE
         INSERT INTO UTUCHS (UC, VERSION, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_UC, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION,
                 'History switched OFF', 'Audit trail is turned off.',
                 CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   END IF;

   IF NVL(L_LOG_HS, ' ') = '1' THEN
      IF L_EVENT_TP = 'ObjectCreated' THEN
         INSERT INTO UTUCHS (UC, VERSION, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_UC, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION,
                 L_EVENT_TP, 'unique code mask "'||A_UC||'" is created',
                 CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      ELSE
         INSERT INTO UTUCHS (UC, VERSION, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_UC, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION,
                 L_EVENT_TP, 'unique code mask "'||A_UC||'" is updated',
                 CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   ELSE
      
      
      IF L_EVENT_TP = 'ObjectCreated' THEN
         INSERT INTO UTUCHS (UC, VERSION, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_UC, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION,
                 L_EVENT_TP, 'unique code mask "'||A_UC||'" is created',
                 CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   END IF;

   
   
   L_LOCKNAME := 'U4' || A_UC;
   DBMS_LOCK.ALLOCATE_UNIQUE(L_LOCKNAME, L_LOCKHANDLE, 68*365*24*60*60);

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
   IF INSTR(UPPER(SQLERRM),'UCDEF_MASK_FOR')<> 0 THEN
      RETURN(UNAPIGEN.DBERR_UQDEFMASKFOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveUniqueCodeMask'));
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveUniqueCodeMask', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveUniqueCodeMask'));
END SAVEUNIQUECODEMASK;

FUNCTION GETCOUNTERLIST
(A_COUNTER           OUT      UNAPIGEN.VC20_TABLE_TYPE, 
 A_NR_OF_ROWS        IN OUT   NUMBER,                   
 A_WHERE_CLAUSE      IN       VARCHAR2,                 
 A_NEXT_ROWS         IN       NUMBER)                   
RETURN NUMBER IS

L_COUNTER      VARCHAR2(20);

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_COUNTER_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_COUNTER_CURSOR);
         P_COUNTER_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_COUNTER_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      IF P_COUNTER_CURSOR IS NULL THEN
         P_COUNTER_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;

      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
         L_WHERE_CLAUSE := 'ORDER BY counter'; 
      ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
         L_WHERE_CLAUSE := 'WHERE counter = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                           ''' ORDER BY counter';
      ELSE
         L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
      END IF;

      L_SQL_STRING := 'SELECT counter FROM dd' || UNAPIGEN.P_DD ||
                      '.uvcounter ' || L_WHERE_CLAUSE;

      DBMS_SQL.PARSE(P_COUNTER_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

      DBMS_SQL.DEFINE_COLUMN(P_COUNTER_CURSOR, 1, L_COUNTER, 20);
      L_RESULT := DBMS_SQL.EXECUTE(P_COUNTER_CURSOR);
   END IF;

   L_RESULT := DBMS_SQL.FETCH_ROWS(P_COUNTER_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_COUNTER_CURSOR, 1, L_COUNTER);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_COUNTER(L_FETCHED_ROWS) := L_COUNTER;

       IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_COUNTER_CURSOR);
      END IF;
   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_COUNTER_CURSOR);
       P_COUNTER_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
       DBMS_SQL.CLOSE_CURSOR(P_COUNTER_CURSOR);
       P_COUNTER_CURSOR := NULL;
       A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
            'GetCounterList', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN(P_COUNTER_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(P_COUNTER_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETCOUNTERLIST;

FUNCTION GETCOUNTER
(A_COUNTER          OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_CURR_CNT         OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_LOW_CNT          OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_HIGH_CNT         OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_INCR_CNT         OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_FIXED_LENGTH     OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_CIRCULAR         OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NR_OF_ROWS       IN OUT  NUMBER,                    
 A_WHERE_CLAUSE     IN      VARCHAR2)                  
RETURN NUMBER IS

L_COUNTER              VARCHAR2(20);
L_CURR_CNT             NUMBER;
L_LOW_CNT              NUMBER(22);
L_HIGH_CNT             NUMBER(22);
L_INCR_CNT             NUMBER(22);
L_FIXED_LENGTH         CHAR(1);
L_CIRCULAR             CHAR(1);
L_COUNTER_CURSOR       INTEGER;


BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'ORDER BY counter'; 
   ELSIF
      UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := 'WHERE counter = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                        ''' ORDER BY counter';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_COUNTER_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT counter, curr_cnt, low_cnt, high_cnt,' ||
                   'incr_cnt, fixed_length, circular FROM dd' || UNAPIGEN.P_DD ||
                   '.uvcounter ' || L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_COUNTER_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_COUNTER_CURSOR, 1, L_COUNTER, 20);
   DBMS_SQL.DEFINE_COLUMN(L_COUNTER_CURSOR, 2, L_CURR_CNT);
   DBMS_SQL.DEFINE_COLUMN(L_COUNTER_CURSOR, 3, L_LOW_CNT);
   DBMS_SQL.DEFINE_COLUMN(L_COUNTER_CURSOR, 4, L_HIGH_CNT);
   DBMS_SQL.DEFINE_COLUMN(L_COUNTER_CURSOR, 5, L_INCR_CNT);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_COUNTER_CURSOR, 6, L_FIXED_LENGTH, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_COUNTER_CURSOR, 7, L_CIRCULAR, 1);

   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_COUNTER_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_COUNTER_CURSOR, 1, L_COUNTER);
      DBMS_SQL.COLUMN_VALUE(L_COUNTER_CURSOR, 2, L_CURR_CNT);
      DBMS_SQL.COLUMN_VALUE(L_COUNTER_CURSOR, 3, L_LOW_CNT);
      DBMS_SQL.COLUMN_VALUE(L_COUNTER_CURSOR, 4, L_HIGH_CNT);
      DBMS_SQL.COLUMN_VALUE(L_COUNTER_CURSOR, 5, L_INCR_CNT);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_COUNTER_CURSOR, 6, L_FIXED_LENGTH);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_COUNTER_CURSOR, 7, L_CIRCULAR);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_COUNTER(L_FETCHED_ROWS) := L_COUNTER;
      A_CURR_CNT(L_FETCHED_ROWS):= L_CURR_CNT;
      A_LOW_CNT(L_FETCHED_ROWS) := L_LOW_CNT;
      A_HIGH_CNT(L_FETCHED_ROWS) := L_HIGH_CNT;
      A_INCR_CNT(L_FETCHED_ROWS) := L_INCR_CNT;
      A_FIXED_LENGTH(L_FETCHED_ROWS) := L_FIXED_LENGTH;
      A_CIRCULAR(L_FETCHED_ROWS) := L_CIRCULAR;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_COUNTER_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_COUNTER_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetCounter', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN(L_COUNTER_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(L_COUNTER_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETCOUNTER;

FUNCTION DELETECOUNTER
(A_COUNTER                 IN     VARCHAR2,          
 A_MODIFY_REASON           IN     VARCHAR2)          
RETURN NUMBER IS

L_COUNTER_CURSOR    INTEGER;

BEGIN

   IF NVL(A_COUNTER, ' ')= ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   
   IF UNAPIGEN.ISSYSTEM21CFR11COMPLIANT = UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTALLOWEDIN21CFR11;
      RAISE STPERROR;
   END IF;

   DELETE FROM UTCOUNTER
   WHERE COUNTER = A_COUNTER;

   L_COUNTER_CURSOR := DBMS_SQL.OPEN_CURSOR;

   L_SQL_STRING := 'DROP SEQUENCE ' || A_COUNTER;
   DBMS_SQL.PARSE(L_COUNTER_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.CLOSE_CURSOR(L_COUNTER_CURSOR);

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('DeleteCounter', SQLERRM);
   END IF;
   IF DBMS_SQL.IS_OPEN(L_COUNTER_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_COUNTER_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'DeleteCounter'));
END DELETECOUNTER;

FUNCTION SAVECOUNTER
(A_COUNTER             IN       VARCHAR2,   
 A_LOW_CNT             IN       INTEGER,    
 A_HIGH_CNT            IN       INTEGER,    
 A_INCR_CNT            IN       INTEGER ,   
 A_FIXED_LENGTH        IN       CHAR,       
 A_CIRCULAR            IN       CHAR)       
RETURN NUMBER IS

L_OLD_LOW_CNT       NUMBER(22);
L_OLD_HIGH_CNT      NUMBER(22);
L_OLD_INCR_CNT      NUMBER(22);
L_OLD_CIRCULAR      CHAR(1);
L_CREATED_NEW       BOOLEAN := FALSE;
L_CREATE_BACK       BOOLEAN := FALSE;
L_LOW_CNT           NUMBER(22);
L_INCR_CNT          NUMBER(22);
L_COUNTER_CURSOR    INTEGER;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_COUNTER, ' ')= ' ' THEN
      UNAPIGEN.P_TXN_ERROR :=UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF A_COUNTER IN ('DAYCOUNTER','WEEKCOUNTER',
                           'MONTHCOUNTER', 'YEARCOUNTER') THEN
      UNAPIGEN.P_TXN_ERROR :=UNAPIGEN.DBERR_RESERVEDID;
      RAISE STPERROR;
   END IF;

   IF A_FIXED_LENGTH NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_FIXEDLENGTH;
      RAISE STPERROR;
   END IF;

   IF A_CIRCULAR NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_CIRCULAR;
      RAISE STPERROR;
   END IF;

   L_LOW_CNT := NVL(A_LOW_CNT, 1);
   L_INCR_CNT := NVL(A_INCR_CNT, 1);

   IF A_HIGH_CNT IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_HIGHCNTNOTNULL;
      RAISE STPERROR;
   END IF;

   IF A_HIGH_CNT < L_LOW_CNT THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SEQMAXMINVALUE;
      RAISE STPERROR;
   END IF;

   IF ABS(L_INCR_CNT) > ABS(A_HIGH_CNT - L_LOW_CNT) THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SEQINCR;
      RAISE STPERROR;
   END IF;

   L_COUNTER_CURSOR := DBMS_SQL.OPEN_CURSOR;

   BEGIN
      SELECT LOW_CNT, HIGH_CNT, INCR_CNT, CIRCULAR
      INTO L_OLD_LOW_CNT, L_OLD_HIGH_CNT, L_OLD_INCR_CNT, L_OLD_CIRCULAR
      FROM UTCOUNTER
      WHERE COUNTER = A_COUNTER FOR UPDATE NOWAIT;
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      
      
      
      
      L_RESULT := CREATECOUNTERSTRUCTURES(A_COUNTER, L_LOW_CNT, A_HIGH_CNT,
                                          L_INCR_CNT, A_FIXED_LENGTH, A_CIRCULAR);
      IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
         UNAPIGEN.P_TXN_ERROR := L_RESULT;
         RAISE STPERROR;
      END IF;

      INSERT INTO UTCOUNTER(COUNTER, CURR_CNT, LOW_CNT, HIGH_CNT, INCR_CNT,
                            FIXED_LENGTH, CIRCULAR)
      VALUES (A_COUNTER, L_LOW_CNT, L_LOW_CNT, A_HIGH_CNT, L_INCR_CNT,
              NVL(A_FIXED_LENGTH,'0'),NVL(A_CIRCULAR,'0') );
      L_CREATED_NEW := TRUE;
   END;

   IF NOT L_CREATED_NEW THEN
      UPDATE UTCOUNTER
      SET LOW_CNT      = L_LOW_CNT,
          HIGH_CNT     = A_HIGH_CNT,
          INCR_CNT     = L_INCR_CNT,
          FIXED_LENGTH = NVL(A_FIXED_LENGTH,'0'),
          CIRCULAR     = NVL(A_CIRCULAR,'0')
      WHERE COUNTER    = A_COUNTER;

      IF (L_OLD_LOW_CNT <> L_LOW_CNT) THEN
         L_SQL_STRING := 'ALTER SEQUENCE ' || A_COUNTER ||
                         ' MINVALUE ' || TO_CHAR(L_LOW_CNT);
         BEGIN
            DBMS_SQL.PARSE(L_COUNTER_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         EXCEPTION
         WHEN OTHERS THEN
            IF SQLCODE = -4007 THEN
               L_CREATE_BACK := TRUE;
            ELSE
               RAISE;
            END IF;
         END;
      END IF;

      IF (L_OLD_HIGH_CNT <> A_HIGH_CNT) AND (NOT L_CREATE_BACK) THEN
         L_SQL_STRING := 'ALTER SEQUENCE ' || A_COUNTER ||
                         ' MAXVALUE ' || TO_CHAR(A_HIGH_CNT);
         BEGIN
            DBMS_SQL.PARSE(L_COUNTER_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         EXCEPTION
         WHEN OTHERS THEN
            IF SQLCODE = -4009 THEN
               L_CREATE_BACK := TRUE;
            ELSE
               RAISE;
            END IF;
         END;
      END IF;

      IF ((L_OLD_INCR_CNT <> L_INCR_CNT) OR
         (L_OLD_CIRCULAR <> A_CIRCULAR)) AND
         (NOT L_CREATE_BACK) THEN
         L_SQL_STRING := 'ALTER SEQUENCE ' || A_COUNTER ||
                         ' INCREMENT BY ' || TO_CHAR(L_INCR_CNT);
         IF NVL(A_CIRCULAR,'0') = '1' THEN
            L_SQL_STRING := L_SQL_STRING || ' CYCLE';
         ELSE
            L_SQL_STRING := L_SQL_STRING || ' NOCYCLE';
         END IF;
         BEGIN
            DBMS_SQL.PARSE(L_COUNTER_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         EXCEPTION
         WHEN OTHERS THEN
            IF SQLCODE = -4009 THEN
               L_CREATE_BACK := TRUE;
            ELSE
               RAISE;
            END IF;
         END;
      END IF;

      IF L_CREATE_BACK THEN
         L_SQL_STRING := 'DROP SEQUENCE ' || A_COUNTER;
         DBMS_SQL.PARSE(L_COUNTER_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      END IF;

   END IF;

   IF L_CREATE_BACK THEN
      L_RESULT := CREATECOUNTERSTRUCTURES(A_COUNTER, L_LOW_CNT, A_HIGH_CNT,
                                          L_INCR_CNT, A_FIXED_LENGTH, A_CIRCULAR);
      IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
         UNAPIGEN.P_TXN_ERROR := L_RESULT;
         RAISE STPERROR;
      END IF;
   END IF;

   DBMS_SQL.CLOSE_CURSOR(L_COUNTER_CURSOR);

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveCounter', SQLERRM);
   END IF;
   IF DBMS_SQL.IS_OPEN(L_COUNTER_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_COUNTER_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveCounter'));
END SAVECOUNTER;

FUNCTION SAVECOUNTER
(A_COUNTER             IN       VARCHAR2,   
 A_CURR_CNT            IN       INTEGER,    
 A_LOW_CNT             IN       INTEGER,    
 A_HIGH_CNT            IN       INTEGER,    
 A_INCR_CNT            IN       INTEGER ,   
 A_FIXED_LENGTH        IN       CHAR,       
 A_CIRCULAR            IN       CHAR)       
RETURN NUMBER IS
L_RET NUMBER;
L_RET_NEXT_VAL NUMBER;
L_CURR_VAL_UTCOUNTER NUMBER;
L_NEXT_CNT           NUMBER;
BEGIN
   L_RET := SAVECOUNTER(A_COUNTER, A_LOW_CNT, A_HIGH_CNT, A_INCR_CNT, A_FIXED_LENGTH, A_CIRCULAR);
   IF L_RET = UNAPIGEN.DBERR_SUCCESS THEN
      
      IF A_CURR_CNT <= A_HIGH_CNT THEN 
         SELECT CURR_CNT
         INTO L_CURR_VAL_UTCOUNTER
         FROM UTCOUNTER
         WHERE COUNTER = A_COUNTER;
         IF A_CURR_CNT > L_CURR_VAL_UTCOUNTER THEN
            LOOP
               L_RET_NEXT_VAL := CREATENEXTCOUNTERVALUE(A_COUNTER, L_NEXT_CNT);
               IF L_RET_NEXT_VAL <> UNAPIGEN.DBERR_SUCCESS THEN
                  EXIT;
               END IF;
               IF L_NEXT_CNT >= A_CURR_CNT THEN
                  EXIT;
               END IF;
               IF L_NEXT_CNT = L_CURR_VAL_UTCOUNTER THEN 
                  EXIT;
               END IF;
            END LOOP;
         END IF;
      END IF;
   END IF;
   RETURN L_RET;
END SAVECOUNTER;

FUNCTION RESETCOUNTER
(A_COUNTER              IN  VARCHAR2)          
RETURN NUMBER IS

L_COUNTER_CURSOR   INTEGER;
L_COUNTER          VARCHAR2(20);
L_LOW_CNT          NUMBER(22);
L_HIGH_CNT         NUMBER(22);
L_INCR_CNT         NUMBER(22);
L_FIXED_LENGTH     CHAR(1);
L_CIRCULAR         CHAR(1);

BEGIN

   IF NVL (A_COUNTER, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   BEGIN
      
      SELECT COUNTER, LOW_CNT, HIGH_CNT, INCR_CNT, FIXED_LENGTH, CIRCULAR
      INTO L_COUNTER, L_LOW_CNT, L_HIGH_CNT, L_INCR_CNT, L_FIXED_LENGTH, L_CIRCULAR
      FROM UTCOUNTER
      WHERE COUNTER = A_COUNTER;

      UPDATE UTCOUNTER
      SET CURR_CNT  = L_LOW_CNT
      WHERE COUNTER = A_COUNTER;

   EXCEPTION
      WHEN NO_DATA_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR;
   END;

   L_COUNTER_CURSOR := DBMS_SQL.OPEN_CURSOR;

   L_SQL_STRING := 'DROP SEQUENCE ' || A_COUNTER;
   DBMS_SQL.PARSE(L_COUNTER_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   L_RESULT := CREATECOUNTERSTRUCTURES(A_COUNTER, L_LOW_CNT, L_HIGH_CNT,
                                       L_INCR_CNT, L_FIXED_LENGTH, L_CIRCULAR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;
   DBMS_SQL.CLOSE_CURSOR(L_COUNTER_CURSOR);

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('ResetCounter', SQLERRM);
   END IF;
   IF DBMS_SQL.IS_OPEN(L_COUNTER_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_COUNTER_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'Resetcounter'));
END RESETCOUNTER;

FUNCTION CREATENEXTCOUNTERVALUE
(A_COUNTER                  IN       VARCHAR2,        
 A_NEXT_CNT                 OUT      VARCHAR2)        
RETURN NUMBER IS

L_COUNTER_CURSOR     INTEGER;
L_NEXT_CNT           NUMBER;
L_HIGH_CNT           NUMBER(22);
L_FIXED_LENGTH       CHAR(1);

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_COUNTER, ' ')= ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   BEGIN
      
      SELECT HIGH_CNT, FIXED_LENGTH
      INTO L_HIGH_CNT, L_FIXED_LENGTH
      FROM UTCOUNTER
      WHERE COUNTER = A_COUNTER;
   EXCEPTION
      WHEN NO_DATA_FOUND THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
         RAISE STPERROR;
   END;

   L_COUNTER_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT ' || A_COUNTER || '.NEXTVAL FROM DUAL';
   DBMS_SQL.PARSE(L_COUNTER_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_COUNTER_CURSOR, 1, L_NEXT_CNT);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_COUNTER_CURSOR);

    IF L_RESULT <> 0 THEN
      DBMS_SQL.COLUMN_VALUE(L_COUNTER_CURSOR, 1, L_NEXT_CNT);
    END IF;

    DBMS_SQL.CLOSE_CURSOR(L_COUNTER_CURSOR);

    IF L_RESULT = 0 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NORECORDS;
      RAISE STPERROR;
    END IF;

   UPDATE UTCOUNTER
   SET CURR_CNT = L_NEXT_CNT
   WHERE COUNTER = A_COUNTER;

   IF L_FIXED_LENGTH = '1' THEN
      A_NEXT_CNT := UNAPIGEN.CX_LPAD(L_NEXT_CNT,
                         GREATEST(LENGTH(L_HIGH_CNT),LENGTH(TO_CHAR(L_NEXT_CNT))),
                         '0');
   ELSE
      A_NEXT_CNT := L_NEXT_CNT;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('CreateNextCounterValue', SQLERRM);
   END IF;
   IF DBMS_SQL.IS_OPEN(L_COUNTER_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_COUNTER_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'CreateNextCounterValue'));
END CREATENEXTCOUNTERVALUE;






FUNCTION INTCREATENEXTUNIQUECODEVALUE                        
(A_UC                  IN       VARCHAR2,                    
 A_FIELDTYPE_TAB       IN       UNAPIGEN.VC20_TABLE_TYPE,    
 A_FIELDNAMES_TAB      IN       UNAPIGEN.VC40_TABLE_TYPE,    
 A_FIELDVALUES_TAB     IN       UNAPIGEN.VC40_TABLE_TYPE,    
 A_NR_OF_ROWS          IN       NUMBER,                      
 A_REF_DATE            IN       DATE,                        
 A_NEXT_VAL            OUT      VARCHAR2,                    
 A_EDIT_ALLOWED        OUT      CHAR,                        
 A_VALID_CF            OUT      VARCHAR2)                    
RETURN NUMBER IS

L_UC_STRUCTURE           VARCHAR2(255);
L_CURR_VAL               VARCHAR2(255);
L_EDIT_ALLOWED           CHAR(1);
L_VALID_CF               VARCHAR2(20);
L_UC_LOG_HS              CHAR(1);
L_SP_FLD_OR_CT           BOOLEAN;
L_CURR_POS               INTEGER;
L_CURR_FIELD             VARCHAR2(255);
L_END_POS                INTEGER;
L_Q_POS                  INTEGER;
L_FIELD_NAME             VARCHAR2(255);
L_QUALIFIER              VARCHAR2(255);
L_NEW_VAL                VARCHAR2(255);
L_REF_DATE               TIMESTAMP WITH TIME ZONE;
L_WEEK_NR                NUMBER(2);
L_YEAR_NR                NUMBER(4);
L_DAY_OF_WEEK            NUMBER(1);
L_VALUE                  VARCHAR2(40);
L_C_VAL                  VARCHAR2(255);
L_CURR_F_VAL             VARCHAR2(255);
L_NEW_F_VAL              VARCHAR2(255);
L_START_UC_STRU          INTEGER;
L_POS_UC_STRU            INTEGER;
L_UC_CURSOR              INTEGER;
L_START_PREV             INTEGER;
L_END_PREV               INTEGER;
L_END                    INTEGER;
L_NR_FIELDS              INTEGER;
L_BRACE_CNT              INTEGER;
L_CURR_VAL_BRACE         VARCHAR2(255);
L_NEW_CNT                NUMBER(6);
L_FIRST_DAY_OF_WEEK      TIMESTAMP WITH TIME ZONE;
L_PREVIOUS_WEEK_NR       NUMBER(2);
L_DAY                    TIMESTAMP WITH TIME ZONE;
L_COUNTER_LOCKNAME       VARCHAR2(30);
L_RQSCSEQ                INTEGER;
L_SDSCSEQ                NUMBER;
A_VERSION                VARCHAR2(20);
L_FOUND                  BOOLEAN;
L_COUNTER_EXISTS         VARCHAR2(20);
L_COUNTER_FOUND          BOOLEAN;
L_COUNTER                UNAPIGEN.CHAR1_TABLE_TYPE;
L_NEW_VAL_BEFORE_CT      VARCHAR2(255);
L_NEW_VAL_AFTER_CT       VARCHAR2(255);
L_OBJECT_COUNTER         NUMBER(6);


L_RQ                     VARCHAR2(20);
L_WS                     VARCHAR2(20);
L_SD                     VARCHAR2(20);
L_ST                     VARCHAR2(20);
L_RT                     VARCHAR2(20);
L_PT                     VARCHAR2(20);
L_WT                     VARCHAR2(20);
L_ST_VERSION             VARCHAR2(20);
L_RT_VERSION             VARCHAR2(20);
L_PT_VERSION             VARCHAR2(20);
L_WT_VERSION             VARCHAR2(20);


CURSOR C_UC (A_UC VARCHAR2, A_VERSION VARCHAR2) IS
   SELECT UC_STRUCTURE, CURR_VAL, EDIT_ALLOWED, VALID_CF, LOG_HS
   FROM UTUC
   WHERE UC = A_UC
   AND VERSION = A_VERSION;

CURSOR C_WEEK (A_REF_DATE TIMESTAMP WITH TIME ZONE) IS
   SELECT DAY_OF_YEAR,WEEK_NR
   FROM UTWEEKNR
   WHERE DAY_OF_YEAR <= TO_TIMESTAMP_TZ(TO_CHAR(L_REF_DATE,'DD/MM/YYYY')||' 00:00:00 '||DBTIMEZONE, 'DD/MM/YYYY HH24:MI:SS TZR')
   ORDER BY DAY_OF_YEAR DESC;

CURSOR C_RQSCSEQ(A_RQ VARCHAR2) IS
   SELECT NVL(OBJECT_COUNTER,0)+1
   FROM UTUCOBJECTCOUNTER
   WHERE OBJECT_TP = 'rq'
     AND OBJECT_ID = A_RQ;

CURSOR C_RQSCINITIALSEQ(A_RQ VARCHAR2) IS
   SELECT COUNT(SC)+1
   FROM UTRQSC
   WHERE RQ = A_RQ;

CURSOR C_SDSCSEQ(A_SD VARCHAR2) IS
   SELECT NVL(OBJECT_COUNTER,0)+1
   FROM UTUCOBJECTCOUNTER
   WHERE OBJECT_TP = 'sd'
     AND OBJECT_ID = A_SD;

CURSOR C_SDSCINITIALSEQ(A_SD VARCHAR2) IS
   SELECT COUNT(SC)+1
   FROM UTSDCELLSC
   WHERE SD = A_SD;

CURSOR C_UTCOUNTER_CURSOR (A_COUNTER VARCHAR2) IS
   SELECT COUNTER
   FROM UTCOUNTER
   WHERE COUNTER = A_COUNTER;

   PROCEDURE IMPOSEDIGITS (A_NEW_CNT IN NUMBER, A_QUALIFIER IN VARCHAR2, A_NEW_VAL IN OUT VARCHAR2) IS

   L_NR_OF_DIGITS      INTEGER;

   BEGIN
         L_NR_OF_DIGITS := 0;
         BEGIN
            L_NR_OF_DIGITS := NVL(A_QUALIFIER,'0');
         EXCEPTION
         WHEN OTHERS THEN
            
            NULL;
         END;

         IF L_NR_OF_DIGITS = 0 THEN
            A_NEW_VAL := A_NEW_VAL || TO_CHAR(A_NEW_CNT);
         ELSE
            A_NEW_VAL := A_NEW_VAL || UNAPIGEN.CX_LPAD(TO_CHAR(A_NEW_CNT),
                                           GREATEST(LENGTH(TO_CHAR(A_NEW_CNT)),L_NR_OF_DIGITS),
                                           '0');
         END IF;
   END IMPOSEDIGITS;

BEGIN
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL (A_UC, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;

   


   

   OPEN C_UC (A_UC, A_VERSION);
   FETCH C_UC
   INTO L_UC_STRUCTURE, L_CURR_VAL, L_EDIT_ALLOWED, L_VALID_CF, L_UC_LOG_HS;
   IF C_UC%NOTFOUND THEN
      CLOSE C_UC;
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR;
   END IF;
   CLOSE C_UC;

   

   IF A_REF_DATE IS NOT NULL THEN
      L_REF_DATE := A_REF_DATE;
   ELSE
      L_REF_DATE := CURRENT_TIMESTAMP;
   END IF;

   FOR L_ROW IN 1..A_NR_OF_ROWS LOOP
      IF A_FIELDNAMES_TAB(L_ROW) = 'rq' THEN
         L_RQ := A_FIELDVALUES_TAB(L_ROW);
      ELSIF A_FIELDNAMES_TAB(L_ROW) = 'ws' THEN
         L_WS := A_FIELDVALUES_TAB(L_ROW);
      ELSIF A_FIELDNAMES_TAB(L_ROW) = 'sd' THEN
         L_SD := A_FIELDVALUES_TAB(L_ROW);
      ELSIF A_FIELDNAMES_TAB(L_ROW) = 'st' THEN
         L_ST := A_FIELDVALUES_TAB(L_ROW);
      ELSIF A_FIELDNAMES_TAB(L_ROW) = 'rt' THEN
         L_RT := A_FIELDVALUES_TAB(L_ROW);
      ELSIF A_FIELDNAMES_TAB(L_ROW) = 'wt' THEN
         L_WT := A_FIELDVALUES_TAB(L_ROW);
      ELSIF A_FIELDNAMES_TAB(L_ROW) = 'pt' THEN
         L_PT := A_FIELDVALUES_TAB(L_ROW);
      ELSIF A_FIELDNAMES_TAB(L_ROW) = 'st_version' THEN
         L_ST_VERSION := A_FIELDVALUES_TAB(L_ROW);
      ELSIF A_FIELDNAMES_TAB(L_ROW) = 'rt_version' THEN
         L_RT_VERSION := A_FIELDVALUES_TAB(L_ROW);
      ELSIF A_FIELDNAMES_TAB(L_ROW) = 'wt_version' THEN
         L_WT_VERSION := A_FIELDVALUES_TAB(L_ROW);
      ELSIF A_FIELDNAMES_TAB(L_ROW) = 'pt_version' THEN
         L_PT_VERSION := A_FIELDVALUES_TAB(L_ROW);
      END IF;
   END LOOP;
   IF (NVL(L_RQ, ' ') <> ' ') AND (NVL(L_RT, ' ') = ' ') THEN
      BEGIN
         SELECT RT, RT_VERSION
         INTO L_RT, L_RT_VERSION
         FROM UTRQ
         WHERE RQ = L_RQ;
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
         
         
         
         
         
         NULL;
      END;
   END IF;
   IF (NVL(L_WS, ' ') <> ' ') AND (NVL(L_WT, ' ') = ' ') THEN
      BEGIN
         SELECT WT, WT_VERSION
         INTO L_WT, L_WT_VERSION
         FROM UTWS
         WHERE WS = L_WS;
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
         
         
         
         
         
         NULL;
      END;
   END IF;
   IF (NVL(L_SD, ' ') <> ' ') AND (NVL(L_PT, ' ') = ' ') THEN
      BEGIN
         SELECT PT, PT_VERSION
         INTO L_PT, L_PT_VERSION
         FROM UTSD
         WHERE SD = L_SD;
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
         
         
         
         
         
         NULL;
      END;
   END IF;

   
   
   
   
   
   
   
   FOR LOOP_NR IN 1..2 LOOP
      L_CURR_POS := 1;
      L_NR_FIELDS := 0;
      
      WHILE L_CURR_POS < LENGTH(L_UC_STRUCTURE) LOOP

         L_FIELD_NAME := NULL;
         L_SP_FLD_OR_CT := FALSE;

         
         IF SUBSTR(L_UC_STRUCTURE,L_CURR_POS,1) = '{'  THEN
            L_SP_FLD_OR_CT := TRUE;
            L_END_POS := INSTR(L_UC_STRUCTURE, '}', L_CURR_POS + 1);
            IF (L_END_POS = 0) THEN
               UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UCSTRUCTURE;
               RAISE STPERROR;
            END IF;
            L_NR_FIELDS := L_NR_FIELDS + 1;
            L_CURR_FIELD := SUBSTR(L_UC_STRUCTURE, L_CURR_POS + 1,
                                   L_END_POS - L_CURR_POS - 1);
            L_Q_POS := INSTR(L_CURR_FIELD, '\');
            IF L_Q_POS = 0 THEN
               L_FIELD_NAME := L_CURR_FIELD;
               L_QUALIFIER := '';
            ELSE
               L_FIELD_NAME := SUBSTR(L_CURR_FIELD, 1, L_Q_POS - 1);
               L_QUALIFIER := SUBSTR(L_CURR_FIELD, L_Q_POS + 1,
                                  LENGTH(L_CURR_FIELD)-L_Q_POS);
            END IF;
            
            IF LOOP_NR = 1 THEN
               L_NEW_VAL := L_NEW_VAL || '{';
            END IF;
         ELSE
            LOOP
               
               IF LOOP_NR = 1 THEN
                  L_NEW_VAL := L_NEW_VAL || SUBSTR(L_UC_STRUCTURE, L_CURR_POS, 1);
               END IF;
               L_CURR_POS := L_CURR_POS + 1;
               EXIT WHEN (SUBSTR(L_UC_STRUCTURE, L_CURR_POS, 1)= '{') OR
                         L_CURR_POS > LENGTH(L_UC_STRUCTURE);
            END LOOP;
            L_END_POS := L_CURR_POS - 1;
         END IF;

         
         IF (LOOP_NR = 1) AND L_SP_FLD_OR_CT THEN
            L_COUNTER(L_NR_FIELDS) := '0';

            IF L_FIELD_NAME = 'Y' THEN
               L_NEW_VAL := L_NEW_VAL || TO_CHAR(L_REF_DATE, 'Y');
            ELSIF L_FIELD_NAME = 'YY' THEN
               L_NEW_VAL := L_NEW_VAL || TO_CHAR(L_REF_DATE, 'RR');
            ELSIF L_FIELD_NAME = 'YYYY' THEN
               L_NEW_VAL := L_NEW_VAL || TO_CHAR(L_REF_DATE, 'YYYY');
            ELSIF L_FIELD_NAME = 'MM' THEN
               L_NEW_VAL := L_NEW_VAL || TO_CHAR(L_REF_DATE, 'MM');
            ELSIF L_FIELD_NAME = 'MMM' THEN
               L_NEW_VAL := L_NEW_VAL || TO_CHAR(L_REF_DATE, 'MON');
            ELSIF L_FIELD_NAME = 'DDD' THEN
               L_NEW_VAL := L_NEW_VAL || TO_CHAR(L_REF_DATE, 'DDD');
            ELSIF L_FIELD_NAME = 'DD' THEN
               L_NEW_VAL := L_NEW_VAL || TO_CHAR(L_REF_DATE, 'DD');
            ELSIF L_FIELD_NAME = 'hh' THEN
               L_NEW_VAL := L_NEW_VAL || TO_CHAR(L_REF_DATE, 'HH24');
            ELSIF L_FIELD_NAME = 'mm' THEN
               L_NEW_VAL := L_NEW_VAL || TO_CHAR(L_REF_DATE, 'MI');
            ELSIF L_FIELD_NAME = 'ss' THEN
               L_NEW_VAL := L_NEW_VAL || TO_CHAR(L_REF_DATE, 'SS');
            ELSIF L_FIELD_NAME = 'WW' THEN
               SELECT WEEK_NR
               INTO L_WEEK_NR
               FROM UTWEEKNR
               WHERE DAY_OF_YEAR = TO_TIMESTAMP_TZ(TO_CHAR(L_REF_DATE,'DD/MM/YYYY')||' 00:00:00 '||DBTIMEZONE, 'DD/MM/YYYY HH24:MI:SS TZR');
               L_NEW_VAL := L_NEW_VAL || LTRIM(TO_CHAR(L_WEEK_NR,'00'));
            ELSIF L_FIELD_NAME IN ('IY', 'IYY', 'IYYYY') THEN
               SELECT YEAR_NR
               INTO L_YEAR_NR
               FROM UTWEEKNR
               WHERE DAY_OF_YEAR = TO_TIMESTAMP_TZ(TO_CHAR(L_REF_DATE,'DD/MM/YYYY')||' 00:00:00 '||DBTIMEZONE, 'DD/MM/YYYY HH24:MI:SS TZR');
               IF L_FIELD_NAME = 'IYYYY' THEN
                  L_NEW_VAL := L_NEW_VAL || LTRIM(TO_CHAR(L_YEAR_NR,'0000'));
               ELSIF L_FIELD_NAME = 'IYY' THEN
                  L_NEW_VAL := L_NEW_VAL || SUBSTR(LTRIM(TO_CHAR(L_YEAR_NR,'0000')),-2);
               ELSIF L_FIELD_NAME = 'IY' THEN
                  L_NEW_VAL := L_NEW_VAL || SUBSTR(LTRIM(TO_CHAR(L_YEAR_NR,'0000')),-1);
               END IF;
            ELSIF L_FIELD_NAME = 'D' THEN
               SELECT DAY_OF_WEEK
               INTO L_DAY_OF_WEEK
               FROM UTWEEKNR
               WHERE DAY_OF_YEAR = TO_TIMESTAMP_TZ(TO_CHAR(L_REF_DATE,'DD/MM/YYYY')||' 00:00:00 '||DBTIMEZONE, 'DD/MM/YYYY HH24:MI:SS TZR');
               L_NEW_VAL := L_NEW_VAL || L_DAY_OF_WEEK;

            ELSIF L_FIELD_NAME = 'userid' THEN
               L_NEW_VAL := L_NEW_VAL || IMPOSE_QUALIFIER(UNAPIGEN.P_USER, L_QUALIFIER);
               

            ELSIF L_FIELD_NAME = 'st' THEN
               L_NEW_VAL := L_NEW_VAL || IMPOSE_QUALIFIER(L_ST, L_QUALIFIER);
               

            ELSIF L_FIELD_NAME = 'wt' THEN
               IF NVL(L_WT, ' ') = ' ' THEN
                  
                  L_WT :=  L_ST;
               END IF;
               L_NEW_VAL := L_NEW_VAL || IMPOSE_QUALIFIER(L_WT, L_QUALIFIER);
               

            ELSIF SUBSTR(L_FIELD_NAME, 1, 4) = 'au->' THEN
               L_UC_CURSOR := DBMS_SQL.OPEN_CURSOR;
               L_SQL_STRING := 'SELECT value FROM utstau a ' ||
                               'WHERE a.st = :a_st '|| 
                               'AND a.version = UNAPIGEN.UseVersion(''st'',:a_st, :a_st_version) '|| 
                               'AND au = :a_au ORDER BY auseq'; 
               DBMS_SQL.PARSE(L_UC_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
               DBMS_SQL.BIND_VARIABLE(L_UC_CURSOR, ':a_st', L_ST, 20);
               DBMS_SQL.BIND_VARIABLE(L_UC_CURSOR, ':a_st_version', L_ST_VERSION, 20);
               DBMS_SQL.BIND_VARIABLE(L_UC_CURSOR, ':a_au', SUBSTR(L_FIELD_NAME, 5), 20);
               DBMS_SQL.DEFINE_COLUMN(L_UC_CURSOR, 1, L_VALUE, 40);
               L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_UC_CURSOR);

               IF  L_RESULT <> 0 THEN
                  DBMS_SQL.COLUMN_VALUE(L_UC_CURSOR, 1, L_VALUE);
               ELSE
                  UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NORECORDS;
                  RAISE STPERROR;
               END IF;

               DBMS_SQL.CLOSE_CURSOR(L_UC_CURSOR);

               L_NEW_VAL := L_NEW_VAL || IMPOSE_QUALIFIER(L_VALUE, L_QUALIFIER);
               

            ELSIF SUBSTR(L_FIELD_NAME, 1, 6) = 'upau->' THEN
               L_UC_CURSOR := DBMS_SQL.OPEN_CURSOR;
               L_SQL_STRING := 'SELECT upau.value FROM utupau upau, utup up ' || 
                               'WHERE up.up = :a_up AND up.up = upau.up '|| 
                               'AND up.version_is_current  = ''1'' '|| 
                               'AND upau.au = :a_au  ORDER BY auseq'; 
               DBMS_SQL.PARSE(L_UC_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
               DBMS_SQL.BIND_VARIABLE(L_UC_CURSOR, ':a_up', UNAPIGEN.P_CURRENT_UP, 20);
               DBMS_SQL.BIND_VARIABLE(L_UC_CURSOR, ':a_au', SUBSTR(L_FIELD_NAME, 7), 20);
               DBMS_SQL.DEFINE_COLUMN(L_UC_CURSOR, 1, L_VALUE, 40);
               L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_UC_CURSOR);

               IF  L_RESULT <> 0 THEN
                  DBMS_SQL.COLUMN_VALUE(L_UC_CURSOR, 1, L_VALUE);
               ELSE
                  UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NORECORDS;
                  RAISE STPERROR;
               END IF;

               DBMS_SQL.CLOSE_CURSOR(L_UC_CURSOR);

               L_NEW_VAL := L_NEW_VAL || IMPOSE_QUALIFIER(L_VALUE, L_QUALIFIER);
               

            ELSIF SUBSTR(L_FIELD_NAME, 1, 6) IN ('usau->','adau->') THEN
               L_UC_CURSOR := DBMS_SQL.OPEN_CURSOR;
               L_SQL_STRING := 'SELECT adau.value FROM utadau adau, utad ad ' || 
                               'WHERE ad.ad = :a_ad AND ad.ad = adau.ad ' || 
                               'AND ad.version_is_current  = ''1'' '|| 
                               'AND au = :a_au ORDER BY auseq'; 
               DBMS_SQL.PARSE(L_UC_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
               DBMS_SQL.BIND_VARIABLE(L_UC_CURSOR, ':a_ad', UNAPIGEN.P_USER, 20);
               DBMS_SQL.BIND_VARIABLE(L_UC_CURSOR, ':a_au', SUBSTR(L_FIELD_NAME, 7), 20);
               DBMS_SQL.DEFINE_COLUMN(L_UC_CURSOR, 1, L_VALUE, 40);
               L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_UC_CURSOR);

               IF  L_RESULT <> 0 THEN
                  DBMS_SQL.COLUMN_VALUE(L_UC_CURSOR, 1, L_VALUE);
               ELSE
                  UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NORECORDS;
                  RAISE STPERROR;
               END IF;

               DBMS_SQL.CLOSE_CURSOR(L_UC_CURSOR);

               L_NEW_VAL := L_NEW_VAL || IMPOSE_QUALIFIER(L_VALUE, L_QUALIFIER);
               

            ELSIF L_FIELD_NAME = 'rt' THEN
               L_NEW_VAL := L_NEW_VAL || IMPOSE_QUALIFIER(L_RT, L_QUALIFIER);
               

            ELSIF SUBSTR(L_FIELD_NAME, 1, 6) = 'rtau->' THEN
               L_UC_CURSOR := DBMS_SQL.OPEN_CURSOR;
               L_SQL_STRING := 'SELECT value FROM utrtau a ' ||
                               'WHERE a.rt = :a_rt '|| 
                               'AND a.version = UNAPIGEN.UseVersion(''rt'',:a_rt, :a_rt_version) '|| 
                               'AND au = :a_au ORDER BY auseq'; 
               DBMS_SQL.PARSE(L_UC_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
               DBMS_SQL.BIND_VARIABLE(L_UC_CURSOR, ':a_rt', L_RT, 20);
               DBMS_SQL.BIND_VARIABLE(L_UC_CURSOR, ':a_rt_version', L_RT_VERSION, 20);
               DBMS_SQL.BIND_VARIABLE(L_UC_CURSOR, ':a_au', SUBSTR(L_FIELD_NAME, 7), 20);
               DBMS_SQL.DEFINE_COLUMN(L_UC_CURSOR, 1, L_VALUE, 40);
               L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_UC_CURSOR);

               IF  L_RESULT <> 0 THEN
                  DBMS_SQL.COLUMN_VALUE(L_UC_CURSOR, 1, L_VALUE);
               ELSE
                  UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NORECORDS;
                  RAISE STPERROR;
               END IF;

               DBMS_SQL.CLOSE_CURSOR(L_UC_CURSOR);

               L_NEW_VAL := L_NEW_VAL || IMPOSE_QUALIFIER(L_VALUE, L_QUALIFIER);
               

            ELSIF L_FIELD_NAME = 'rq' THEN
               L_NEW_VAL := L_NEW_VAL || IMPOSE_QUALIFIER(L_RQ, L_QUALIFIER);
               

            ELSIF L_FIELD_NAME IN ('rq seq0','rq seq1') THEN
               OPEN C_RQSCSEQ(L_RQ);
               FETCH C_RQSCSEQ INTO L_RQSCSEQ;
               IF C_RQSCSEQ%NOTFOUND THEN
                  
                  
                  
                  
                  OPEN C_RQSCINITIALSEQ(L_RQ);
                  FETCH C_RQSCINITIALSEQ INTO L_RQSCSEQ;
                  IF C_RQSCINITIALSEQ%NOTFOUND THEN
                     L_RQSCSEQ := 1;
                  END IF;
                  CLOSE C_RQSCINITIALSEQ;
               END IF;
               CLOSE C_RQSCSEQ;

               
               
               UPDATE UTUCOBJECTCOUNTER
               SET OBJECT_COUNTER = L_RQSCSEQ
               WHERE OBJECT_TP = 'rq'
                 AND OBJECT_ID = L_RQ;
               
               IF SQL%ROWCOUNT < 1 THEN
                  INSERT INTO UTUCOBJECTCOUNTER(OBJECT_TP, OBJECT_ID, OBJECT_COUNTER)
                  VALUES('rq', L_RQ, L_RQSCSEQ);
               END IF;

               IF L_FIELD_NAME = 'rq seq0' THEN
                  L_RQSCSEQ := L_RQSCSEQ -1;
               END IF;

               IMPOSEDIGITS (L_RQSCSEQ , L_QUALIFIER , L_NEW_VAL);
               
               
            ELSIF L_FIELD_NAME = 'pt' THEN
               L_NEW_VAL := L_NEW_VAL || IMPOSE_QUALIFIER(L_PT, L_QUALIFIER);
               
            ELSIF SUBSTR(L_FIELD_NAME, 1, 6) = 'ptau->' THEN
               L_UC_CURSOR := DBMS_SQL.OPEN_CURSOR;
               L_SQL_STRING := 'SELECT value FROM utptau a ' ||
                               'WHERE a.pt = :a_pt '|| 
                               'AND a.version = UNAPIGEN.UseVersion(''pt'',:a_pt, :a_pt_version) '|| 
                               'AND au = :a_au ORDER BY auseq'; 
               DBMS_SQL.PARSE(L_UC_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
               DBMS_SQL.BIND_VARIABLE(L_UC_CURSOR, ':a_pt', L_PT, 20);
               DBMS_SQL.BIND_VARIABLE(L_UC_CURSOR, ':a_pt_version', L_PT_VERSION, 20);
               DBMS_SQL.BIND_VARIABLE(L_UC_CURSOR, ':a_au', SUBSTR(L_FIELD_NAME, 7), 20);
               DBMS_SQL.DEFINE_COLUMN(L_UC_CURSOR, 1, L_VALUE, 40);
               L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_UC_CURSOR);

               IF  L_RESULT <> 0 THEN
                  DBMS_SQL.COLUMN_VALUE(L_UC_CURSOR, 1, L_VALUE);
               ELSE
                  UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NORECORDS;
                  RAISE STPERROR;
               END IF;

               DBMS_SQL.CLOSE_CURSOR(L_UC_CURSOR);

               L_NEW_VAL := L_NEW_VAL || IMPOSE_QUALIFIER(L_VALUE, L_QUALIFIER);
               

            ELSIF L_FIELD_NAME = 'sd' THEN
               L_NEW_VAL := L_NEW_VAL || IMPOSE_QUALIFIER(L_SD, L_QUALIFIER);
               

            ELSIF L_FIELD_NAME IN ('sd seq0','sd seq1') THEN
               OPEN C_SDSCSEQ(L_SD);
               FETCH C_SDSCSEQ INTO L_SDSCSEQ;
               IF C_SDSCSEQ%NOTFOUND THEN
                  
                  
                  
                  
                  OPEN C_SDSCINITIALSEQ(L_SD);
                  FETCH C_SDSCINITIALSEQ INTO L_SDSCSEQ;
                  IF C_SDSCINITIALSEQ%NOTFOUND THEN
                     L_SDSCSEQ := 1;
                  END IF;
                  CLOSE C_SDSCINITIALSEQ;
               END IF;
               CLOSE C_SDSCSEQ;

               
               
               UPDATE UTUCOBJECTCOUNTER
               SET OBJECT_COUNTER = L_SDSCSEQ
               WHERE OBJECT_TP = 'sd'
                 AND OBJECT_ID = L_SD;
               
               IF SQL%ROWCOUNT < 1 THEN
                  INSERT INTO UTUCOBJECTCOUNTER(OBJECT_TP, OBJECT_ID, OBJECT_COUNTER)
                  VALUES('sd', L_SD, L_SDSCSEQ);
               END IF;

               IF L_FIELD_NAME = 'sd seq0' THEN
                  L_SDSCSEQ := L_SDSCSEQ -1;
               END IF;

               IMPOSEDIGITS (L_SDSCSEQ , L_QUALIFIER , L_NEW_VAL);
               
               
            ELSIF SUBSTR(L_FIELD_NAME, -5) IN (' seq0',' seq1') THEN
               
               
               
               L_FOUND := FALSE ;
               FOR L_ROW IN 1..A_NR_OF_ROWS LOOP
                  IF A_FIELDTYPE_TAB(L_ROW)||'.'||A_FIELDNAMES_TAB(L_ROW) = SUBSTR(L_FIELD_NAME,1, INSTR(L_FIELD_NAME,' ', -4)-1) THEN
                     UPDATE UTUCOBJECTCOUNTER
                     SET OBJECT_COUNTER = OBJECT_COUNTER+1
                     WHERE OBJECT_TP = SUBSTR(A_FIELDTYPE_TAB(L_ROW)||A_FIELDNAMES_TAB(L_ROW),1,20)
                       AND OBJECT_ID = SUBSTR(A_FIELDVALUES_TAB(L_ROW),1,20)
                     RETURNING OBJECT_COUNTER
                     INTO L_OBJECT_COUNTER;
                     
                     IF SQL%ROWCOUNT < 1 THEN
                        L_OBJECT_COUNTER := 1;
                        INSERT INTO UTUCOBJECTCOUNTER(OBJECT_TP, OBJECT_ID, OBJECT_COUNTER)
                        VALUES(SUBSTR(A_FIELDTYPE_TAB(L_ROW)||A_FIELDNAMES_TAB(L_ROW),1,20), SUBSTR(A_FIELDVALUES_TAB(L_ROW),1,20), L_OBJECT_COUNTER);
                     END IF;

                     IF SUBSTR(L_FIELD_NAME, -5) = ' seq0' THEN
                        L_OBJECT_COUNTER := L_OBJECT_COUNTER -1;
                     END IF;
                     L_FOUND := TRUE;
                     EXIT;
                  END IF;
               END LOOP;

               IF L_FOUND THEN
                  IMPOSEDIGITS (L_OBJECT_COUNTER , L_QUALIFIER , L_NEW_VAL);
                  
                  
               ELSE
                  
                  
                  
                  IF L_FIELD_NAME IS NOT NULL THEN
                     L_COUNTER(L_NR_FIELDS) := '1';
                  END IF;
               END IF;

            ELSIF L_FIELD_NAME IN ('DayCounter', 'WeekCounter', 'MonthCounter', 'YearCounter',
                                   'DayCounter1','WeekCounter1', 'MonthCounter1','YearCounter1', 
                                   'DayCounter2','WeekCounter2', 'MonthCounter2','YearCounter2', 
                                   'DayCounter3','WeekCounter3', 'MonthCounter3','YearCounter3', 
                                   'DayCounter4','WeekCounter4', 'MonthCounter4','YearCounter4'  
                                   ) THEN
               
               


               L_NEW_CNT := NULL;
               IF L_FIELD_NAME = 'DayCounter' THEN

                  UPDATE UTWEEKNR
                  SET DAY_CNT = NVL(DAY_CNT,0)+1
                  WHERE DAY_OF_YEAR = TO_TIMESTAMP_TZ(TO_CHAR(L_REF_DATE,'DD/MM/YYYY')||' 00:00:00 '||DBTIMEZONE, 'DD/MM/YYYY HH24:MI:SS TZR')
                  RETURNING DAY_CNT INTO L_NEW_CNT;
                  IF SQL%ROWCOUNT=0 THEN
                     UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OUTOFCALENDAR;
                     RAISE STPERROR;
                  END IF;

               ELSIF L_FIELD_NAME = 'WeekCounter' THEN
                  

                  OPEN C_WEEK(L_REF_DATE);
                  L_PREVIOUS_WEEK_NR := NULL;
                  L_WEEK_NR          := NULL;
                  L_DAY              := NULL;
                  WHILE NVL(L_PREVIOUS_WEEK_NR,-1) = NVL(L_WEEK_NR, -1) LOOP
                     FETCH C_WEEK INTO L_DAY,L_WEEK_NR;
                     IF C_WEEK%NOTFOUND THEN
                        UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OUTOFCALENDAR;
                        RAISE STPERROR;
                     END IF;
                     IF NVL(L_PREVIOUS_WEEK_NR,L_WEEK_NR) = L_WEEK_NR THEN
                        L_FIRST_DAY_OF_WEEK := L_DAY;
                        L_PREVIOUS_WEEK_NR  := L_WEEK_NR;
                     END IF;
                  END LOOP;
                  CLOSE C_WEEK;

                  UPDATE UTWEEKNR
                  SET WEEK_CNT = NVL(WEEK_CNT,0)+1
                  WHERE DAY_OF_YEAR = L_FIRST_DAY_OF_WEEK
                  RETURNING WEEK_CNT INTO L_NEW_CNT;
                  IF SQL%ROWCOUNT=0 THEN
                     UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OUTOFCALENDAR;
                     RAISE STPERROR;
                  END IF;

               ELSIF L_FIELD_NAME = 'MonthCounter' THEN

                  UPDATE UTYEARNR
                  SET MONTH_CNT = NVL(MONTH_CNT,0)+1
                  WHERE MONTH_OF_YEAR = TO_TIMESTAMP_TZ('01/'||TO_CHAR(L_REF_DATE,'MM/YYYY')||' 00:00:00 '||DBTIMEZONE, 'DD/MM/YYYY HH24:MI:SS TZR')
                  RETURNING MONTH_CNT INTO L_NEW_CNT;
                  IF SQL%ROWCOUNT=0 THEN
                     UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OUTOFCALENDAR;
                     RAISE STPERROR;
                  END IF;

               ELSIF L_FIELD_NAME = 'YearCounter' THEN

                  UPDATE UTYEARNR
                  SET YEAR_CNT = NVL(YEAR_CNT,0)+1
                  WHERE MONTH_OF_YEAR = TO_TIMESTAMP_TZ('01/01/'||TO_CHAR(L_REF_DATE,'YYYY')||' 00:00:00 '||DBTIMEZONE, 'DD/MM/YYYY HH24:MI:SS TZR')
                  RETURNING YEAR_CNT INTO L_NEW_CNT;
                  IF SQL%ROWCOUNT=0 THEN
                     UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OUTOFCALENDAR;
                     RAISE STPERROR;
                  END IF;
               
               
             ELSIF L_FIELD_NAME = 'DayCounter1' THEN

                  UPDATE UTWEEKNR
                  SET DAY_CNT1 = NVL(DAY_CNT1,0)+1
                  WHERE DAY_OF_YEAR = TO_TIMESTAMP_TZ(TO_CHAR(L_REF_DATE,'DD/MM/YYYY')||' 00:00:00 '||DBTIMEZONE, 'DD/MM/YYYY HH24:MI:SS TZR')
                  RETURNING DAY_CNT1 INTO L_NEW_CNT;
                  IF SQL%ROWCOUNT=0 THEN
                     UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OUTOFCALENDAR;
                     RAISE STPERROR;
                  END IF;

               ELSIF L_FIELD_NAME = 'WeekCounter1' THEN
                  

                  OPEN C_WEEK(L_REF_DATE);
                  L_PREVIOUS_WEEK_NR := NULL;
                  L_WEEK_NR          := NULL;
                  L_DAY              := NULL;
                  WHILE NVL(L_PREVIOUS_WEEK_NR,-1) = NVL(L_WEEK_NR, -1) LOOP
                     FETCH C_WEEK INTO L_DAY,L_WEEK_NR;
                     IF C_WEEK%NOTFOUND THEN
                        UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OUTOFCALENDAR;
                        RAISE STPERROR;
                     END IF;
                     IF NVL(L_PREVIOUS_WEEK_NR,L_WEEK_NR) = L_WEEK_NR THEN
                        L_FIRST_DAY_OF_WEEK := L_DAY;
                        L_PREVIOUS_WEEK_NR  := L_WEEK_NR;
                     END IF;
                  END LOOP;
                  CLOSE C_WEEK;

                  UPDATE UTWEEKNR
                  SET WEEK_CNT1 = NVL(WEEK_CNT1,0)+1
                  WHERE DAY_OF_YEAR = L_FIRST_DAY_OF_WEEK
                  RETURNING WEEK_CNT1 INTO L_NEW_CNT;
                  IF SQL%ROWCOUNT=0 THEN
                     UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OUTOFCALENDAR;
                     RAISE STPERROR;
                  END IF;

               ELSIF L_FIELD_NAME = 'MonthCounter1' THEN

                  UPDATE UTYEARNR
                  SET MONTH_CNT1 = NVL(MONTH_CNT1,0)+1
                  WHERE MONTH_OF_YEAR = TO_TIMESTAMP_TZ('01/'||TO_CHAR(L_REF_DATE,'MM/YYYY')||' 00:00:00 '||DBTIMEZONE, 'DD/MM/YYYY HH24:MI:SS TZR')
                  RETURNING MONTH_CNT1 INTO L_NEW_CNT;
                  IF SQL%ROWCOUNT=0 THEN
                     UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OUTOFCALENDAR;
                     RAISE STPERROR;
                  END IF;

               ELSIF L_FIELD_NAME = 'YearCounter1' THEN

                  UPDATE UTYEARNR
                  SET YEAR_CNT1 = NVL(YEAR_CNT1,0)+1
                  WHERE MONTH_OF_YEAR = TO_TIMESTAMP_TZ('01/01/'||TO_CHAR(L_REF_DATE,'YYYY')||' 00:00:00 '||DBTIMEZONE, 'DD/MM/YYYY HH24:MI:SS TZR')
                  RETURNING YEAR_CNT1 INTO L_NEW_CNT;
                  IF SQL%ROWCOUNT=0 THEN
                     UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OUTOFCALENDAR;
                     RAISE STPERROR;
                  END IF;
               
               ELSIF L_FIELD_NAME = 'DayCounter2' THEN

                  UPDATE UTWEEKNR
                  SET DAY_CNT2 = NVL(DAY_CNT2,0)+1
                  WHERE DAY_OF_YEAR = TO_TIMESTAMP_TZ(TO_CHAR(L_REF_DATE,'DD/MM/YYYY')||' 00:00:00 '||DBTIMEZONE, 'DD/MM/YYYY HH24:MI:SS TZR')
                  RETURNING DAY_CNT2 INTO L_NEW_CNT;
                  IF SQL%ROWCOUNT=0 THEN
                     UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OUTOFCALENDAR;
                     RAISE STPERROR;
                  END IF;

               ELSIF L_FIELD_NAME = 'WeekCounter2' THEN
                  

                  OPEN C_WEEK(L_REF_DATE);
                  L_PREVIOUS_WEEK_NR := NULL;
                  L_WEEK_NR          := NULL;
                  L_DAY              := NULL;
                  WHILE NVL(L_PREVIOUS_WEEK_NR,-1) = NVL(L_WEEK_NR, -1) LOOP
                     FETCH C_WEEK INTO L_DAY,L_WEEK_NR;
                     IF C_WEEK%NOTFOUND THEN
                        UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OUTOFCALENDAR;
                        RAISE STPERROR;
                     END IF;
                     IF NVL(L_PREVIOUS_WEEK_NR,L_WEEK_NR) = L_WEEK_NR THEN
                        L_FIRST_DAY_OF_WEEK := L_DAY;
                        L_PREVIOUS_WEEK_NR  := L_WEEK_NR;
                     END IF;
                  END LOOP;
                  CLOSE C_WEEK;

                  UPDATE UTWEEKNR
                  SET WEEK_CNT2 = NVL(WEEK_CNT2,0)+1
                  WHERE DAY_OF_YEAR = L_FIRST_DAY_OF_WEEK
                  RETURNING WEEK_CNT2 INTO L_NEW_CNT;
                  IF SQL%ROWCOUNT=0 THEN
                     UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OUTOFCALENDAR;
                     RAISE STPERROR;
                  END IF;

               ELSIF L_FIELD_NAME = 'MonthCounter2' THEN

                  UPDATE UTYEARNR
                  SET MONTH_CNT2 = NVL(MONTH_CNT2,0)+1
                  WHERE MONTH_OF_YEAR = TO_TIMESTAMP_TZ('01/'||TO_CHAR(L_REF_DATE,'MM/YYYY')||' 00:00:00 '||DBTIMEZONE, 'DD/MM/YYYY HH24:MI:SS TZR')
                  RETURNING MONTH_CNT2 INTO L_NEW_CNT;
                  IF SQL%ROWCOUNT=0 THEN
                     UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OUTOFCALENDAR;
                     RAISE STPERROR;
                  END IF;

               ELSIF L_FIELD_NAME = 'YearCounter2' THEN

                  UPDATE UTYEARNR
                  SET YEAR_CNT2 = NVL(YEAR_CNT2,0)+1
                  WHERE MONTH_OF_YEAR = TO_TIMESTAMP_TZ('01/01/'||TO_CHAR(L_REF_DATE,'YYYY')||' 00:00:00 '||DBTIMEZONE, 'DD/MM/YYYY HH24:MI:SS TZR')
                  RETURNING YEAR_CNT2 INTO L_NEW_CNT;
                  IF SQL%ROWCOUNT=0 THEN
                     UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OUTOFCALENDAR;
                     RAISE STPERROR;
                  END IF;
                
               ELSIF L_FIELD_NAME = 'DayCounter3' THEN

                  UPDATE UTWEEKNR
                  SET DAY_CNT3 = NVL(DAY_CNT3,0)+1
                  WHERE DAY_OF_YEAR = TO_TIMESTAMP_TZ(TO_CHAR(L_REF_DATE,'DD/MM/YYYY')||' 00:00:00 '||DBTIMEZONE, 'DD/MM/YYYY HH24:MI:SS TZR')
                  RETURNING DAY_CNT3 INTO L_NEW_CNT;
                  IF SQL%ROWCOUNT=0 THEN
                     UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OUTOFCALENDAR;
                     RAISE STPERROR;
                  END IF;

               ELSIF L_FIELD_NAME = 'WeekCounter3' THEN
                  

                  OPEN C_WEEK(L_REF_DATE);
                  L_PREVIOUS_WEEK_NR := NULL;
                  L_WEEK_NR          := NULL;
                  L_DAY              := NULL;
                  WHILE NVL(L_PREVIOUS_WEEK_NR,-1) = NVL(L_WEEK_NR, -1) LOOP
                     FETCH C_WEEK INTO L_DAY,L_WEEK_NR;
                     IF C_WEEK%NOTFOUND THEN
                        UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OUTOFCALENDAR;
                        RAISE STPERROR;
                     END IF;
                     IF NVL(L_PREVIOUS_WEEK_NR,L_WEEK_NR) = L_WEEK_NR THEN
                        L_FIRST_DAY_OF_WEEK := L_DAY;
                        L_PREVIOUS_WEEK_NR  := L_WEEK_NR;
                     END IF;
                  END LOOP;
                  CLOSE C_WEEK;

                  UPDATE UTWEEKNR
                  SET WEEK_CNT3 = NVL(WEEK_CNT3,0)+1
                  WHERE DAY_OF_YEAR = L_FIRST_DAY_OF_WEEK
                  RETURNING WEEK_CNT3 INTO L_NEW_CNT;
                  IF SQL%ROWCOUNT=0 THEN
                     UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OUTOFCALENDAR;
                     RAISE STPERROR;
                  END IF;

               ELSIF L_FIELD_NAME = 'MonthCounter3' THEN

                  UPDATE UTYEARNR
                  SET MONTH_CNT3 = NVL(MONTH_CNT3,0)+1
                  WHERE MONTH_OF_YEAR = TO_TIMESTAMP_TZ('01/'||TO_CHAR(L_REF_DATE,'MM/YYYY')||' 00:00:00 '||DBTIMEZONE, 'DD/MM/YYYY HH24:MI:SS TZR')
                  RETURNING MONTH_CNT3 INTO L_NEW_CNT;
                  IF SQL%ROWCOUNT=0 THEN
                     UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OUTOFCALENDAR;
                     RAISE STPERROR;
                  END IF;

               ELSIF L_FIELD_NAME = 'YearCounter3' THEN

                  UPDATE UTYEARNR
                  SET YEAR_CNT3 = NVL(YEAR_CNT3,0)+1
                  WHERE MONTH_OF_YEAR = TO_TIMESTAMP_TZ('01/01/'||TO_CHAR(L_REF_DATE,'YYYY')||' 00:00:00 '||DBTIMEZONE, 'DD/MM/YYYY HH24:MI:SS TZR')
                  RETURNING YEAR_CNT3 INTO L_NEW_CNT;
                  IF SQL%ROWCOUNT=0 THEN
                     UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OUTOFCALENDAR;
                     RAISE STPERROR;
                  END IF;
              
               ELSIF L_FIELD_NAME = 'DayCounter4' THEN

                  UPDATE UTWEEKNR
                  SET DAY_CNT4 = NVL(DAY_CNT4,0)+1
                  WHERE DAY_OF_YEAR = TO_TIMESTAMP_TZ(TO_CHAR(L_REF_DATE,'DD/MM/YYYY')||' 00:00:00 '||DBTIMEZONE, 'DD/MM/YYYY HH24:MI:SS TZR')
                  RETURNING DAY_CNT4 INTO L_NEW_CNT;
                  IF SQL%ROWCOUNT=0 THEN
                     UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OUTOFCALENDAR;
                     RAISE STPERROR;
                  END IF;

               ELSIF L_FIELD_NAME = 'WeekCounter4' THEN
                  

                  OPEN C_WEEK(L_REF_DATE);
                  L_PREVIOUS_WEEK_NR := NULL;
                  L_WEEK_NR          := NULL;
                  L_DAY              := NULL;
                  WHILE NVL(L_PREVIOUS_WEEK_NR,-1) = NVL(L_WEEK_NR, -1) LOOP
                     FETCH C_WEEK INTO L_DAY,L_WEEK_NR;
                     IF C_WEEK%NOTFOUND THEN
                        UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OUTOFCALENDAR;
                        RAISE STPERROR;
                     END IF;
                     IF NVL(L_PREVIOUS_WEEK_NR,L_WEEK_NR) = L_WEEK_NR THEN
                        L_FIRST_DAY_OF_WEEK := L_DAY;
                        L_PREVIOUS_WEEK_NR  := L_WEEK_NR;
                     END IF;
                  END LOOP;
                  CLOSE C_WEEK;

                  UPDATE UTWEEKNR
                  SET WEEK_CNT4 = NVL(WEEK_CNT4,0)+1
                  WHERE DAY_OF_YEAR = L_FIRST_DAY_OF_WEEK
                  RETURNING WEEK_CNT4 INTO L_NEW_CNT;
                  IF SQL%ROWCOUNT=0 THEN
                     UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OUTOFCALENDAR;
                     RAISE STPERROR;
                  END IF;

               ELSIF L_FIELD_NAME = 'MonthCounter4' THEN

                  UPDATE UTYEARNR
                  SET MONTH_CNT4 = NVL(MONTH_CNT4,0)+1
                  WHERE MONTH_OF_YEAR = TO_TIMESTAMP_TZ('01/'||TO_CHAR(L_REF_DATE,'MM/YYYY')||' 00:00:00 '||DBTIMEZONE, 'DD/MM/YYYY HH24:MI:SS TZR')
                  RETURNING MONTH_CNT4 INTO L_NEW_CNT;
                  IF SQL%ROWCOUNT=0 THEN
                     UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OUTOFCALENDAR;
                     RAISE STPERROR;
                  END IF;

               ELSIF L_FIELD_NAME = 'YearCounter4' THEN

                  UPDATE UTYEARNR
                  SET YEAR_CNT4 = NVL(YEAR_CNT4,0)+1
                  WHERE MONTH_OF_YEAR = TO_TIMESTAMP_TZ('01/01/'||TO_CHAR(L_REF_DATE,'YYYY')||' 00:00:00 '||DBTIMEZONE, 'DD/MM/YYYY HH24:MI:SS TZR')
                  RETURNING YEAR_CNT4 INTO L_NEW_CNT;
                  IF SQL%ROWCOUNT=0 THEN
                     UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OUTOFCALENDAR;
                     RAISE STPERROR;
                  END IF;
       
               
               END IF;

               IMPOSEDIGITS (L_NEW_CNT , L_QUALIFIER , L_NEW_VAL);
               
               

            ELSE 
               
               
               IF L_FIELD_NAME IS NOT NULL THEN
                  L_COUNTER(L_NR_FIELDS) := '1';
               END IF;
            END IF;

            
            IF L_FIELD_NAME IS NOT NULL THEN
               L_NEW_VAL := L_NEW_VAL || '}';
            END IF;
         END IF;

         
         IF (LOOP_NR = 2) AND L_SP_FLD_OR_CT THEN
            
            IF L_COUNTER(L_NR_FIELDS) = '1' THEN
               L_FOUND := FALSE ;
               FOR L_ROW IN 1..A_NR_OF_ROWS LOOP
                  IF A_FIELDNAMES_TAB(L_ROW) = L_FIELD_NAME THEN
                     
                     
                     
                     
                     
                     L_END_PREV   := INSTR(L_NEW_VAL, '{', 1, L_NR_FIELDS);
                     L_NEW_VAL_BEFORE_CT := SUBSTR(L_NEW_VAL, 1, L_END_PREV);
                     
                     L_START_PREV := INSTR(L_NEW_VAL, '}', 1, L_NR_FIELDS);
                     L_NEW_VAL_AFTER_CT := SUBSTR(L_NEW_VAL, L_START_PREV);
                     
                     L_NEW_VAL := L_NEW_VAL_BEFORE_CT ||
                                  IMPOSE_QUALIFIER(A_FIELDVALUES_TAB(L_ROW), L_QUALIFIER) ||
                                  L_NEW_VAL_AFTER_CT;
                     L_FOUND := TRUE;
                     EXIT;
                  END IF;
               END LOOP;
               IF L_FOUND = FALSE THEN
                  L_COUNTER_FOUND := FALSE;
                  OPEN C_UTCOUNTER_CURSOR(L_FIELD_NAME);
                  FETCH C_UTCOUNTER_CURSOR
                  INTO L_COUNTER_EXISTS;
                  L_COUNTER_FOUND := C_UTCOUNTER_CURSOR%FOUND;
                  CLOSE C_UTCOUNTER_CURSOR;

                  IF L_COUNTER_FOUND THEN
                     
                     
                     
                     
                     
                     IF NVL(L_QUALIFIER,' ') = ' ' THEN
                        
                        IF L_NR_FIELDS > 1 THEN
                           
                           L_START_PREV := INSTR(L_NEW_VAL, '{', 1, L_NR_FIELDS - 1);
                           L_END_PREV   := INSTR(L_NEW_VAL, '}', L_START_PREV + 1);
                           L_NEW_F_VAL  := SUBSTR(L_NEW_VAL, L_START_PREV + 1,
                                                   L_END_PREV - L_START_PREV - 1);
                           
                           IF L_CURR_VAL IS NOT NULL THEN
                              L_START_PREV := INSTR(L_CURR_VAL, '{', 1, L_NR_FIELDS - 1);
                              L_END_PREV   := INSTR(L_CURR_VAL, '}', L_START_PREV + 1);
                              L_CURR_F_VAL := SUBSTR(L_CURR_VAL, L_START_PREV + 1,
                                                     L_END_PREV - L_START_PREV - 1);
                           END IF;
                        
                        ELSE
                           
                           L_END := INSTR(L_NEW_VAL, '}', 1);
                           
                           L_START_PREV := INSTR(L_NEW_VAL, '{', L_END + 1);
                           L_END_PREV   := INSTR(L_NEW_VAL, '}', L_END + 1);
                           L_NEW_F_VAL  := SUBSTR(L_NEW_VAL, L_START_PREV + 1,
                                                   L_END_PREV - L_START_PREV - 1);
                           
                           IF L_CURR_VAL IS NOT NULL THEN
                              
                              L_END := INSTR(L_CURR_VAL, '}', 1);
                              
                              L_START_PREV := INSTR(L_CURR_VAL, '{', L_END + 1);
                              L_END_PREV   := INSTR(L_CURR_VAL, '}', L_END + 1);
                              L_CURR_F_VAL := SUBSTR(L_CURR_VAL, L_START_PREV + 1,
                                                     L_END_PREV - L_START_PREV - 1);
                           END IF;
                        END IF;
                     
                     ELSE
                        
                        L_START_UC_STRU:= INSTR(L_UC_STRUCTURE, '{' || L_QUALIFIER, 1, 1);
                        
                        IF (L_START_UC_STRU = 0) THEN
                           L_CURR_F_VAL := '';  
                           L_NEW_F_VAL  := '';
                        
                        ELSE
                           
                           L_POS_UC_STRU := 0;
                           L_BRACE_CNT := 0;
                           WHILE L_POS_UC_STRU < L_START_UC_STRU LOOP
                              L_POS_UC_STRU := INSTR(L_UC_STRUCTURE, '{',
                                                     L_POS_UC_STRU + 1);
                              L_BRACE_CNT := L_BRACE_CNT + 1;
                           END LOOP;
                           
                           L_START_PREV := INSTR(L_NEW_VAL, '{', 1, L_BRACE_CNT);
                           L_END_PREV   := INSTR(L_NEW_VAL, '}', L_START_PREV + 1);
                           L_NEW_F_VAL  := SUBSTR(L_NEW_VAL, L_START_PREV + 1,
                                                  L_END_PREV - L_START_PREV - 1);
                           
                           IF L_CURR_VAL IS NOT NULL THEN
                              L_START_PREV := INSTR(L_CURR_VAL, '{', 1, L_BRACE_CNT);
                              L_END_PREV   := INSTR(L_CURR_VAL, '}', L_START_PREV + 1);
                              L_CURR_F_VAL := SUBSTR(L_CURR_VAL, L_START_PREV + 1,
                                                     L_END_PREV - L_START_PREV - 1);
                           END IF;
                        END IF;
                     END IF;

                     
                     IF (L_CURR_F_VAL <> L_NEW_F_VAL) THEN
                        L_RESULT := RESETCOUNTER(L_FIELD_NAME);
                        IF L_RESULT <> 0 THEN
                           UNAPIGEN.P_TXN_ERROR := L_RESULT;
                           RAISE STPERROR;
                        END IF;
                     END IF;
                     
                     L_RESULT := CREATENEXTCOUNTERVALUE(L_FIELD_NAME, L_C_VAL);
                     IF L_RESULT <> 0 THEN
                        UNAPIGEN.P_TXN_ERROR := L_RESULT;
                        RAISE STPERROR;
                     END IF;
                     
                     
                     
                     
                     
                     L_END_PREV   := INSTR(L_NEW_VAL, '{', 1, L_NR_FIELDS);
                     L_NEW_VAL_BEFORE_CT := SUBSTR(L_NEW_VAL, 1, L_END_PREV);
                     
                     L_START_PREV := INSTR(L_NEW_VAL, '}', 1, L_NR_FIELDS);
                     L_NEW_VAL_AFTER_CT := SUBSTR(L_NEW_VAL, L_START_PREV);
                     
                     L_NEW_VAL := L_NEW_VAL_BEFORE_CT || L_C_VAL || L_NEW_VAL_AFTER_CT;
                  END IF;
               END IF;
            END IF;
         END IF;

         L_CURR_POS := L_END_POS + 1;
      END LOOP;
   END LOOP;

   
   L_CURR_VAL_BRACE := L_NEW_VAL;
   L_NEW_VAL := REPLACE(REPLACE(L_NEW_VAL,'}'),'{');

   A_EDIT_ALLOWED := L_EDIT_ALLOWED;
   A_NEXT_VAL := L_NEW_VAL;
   A_VALID_CF := L_VALID_CF;

   UPDATE UTUC
   SET CURR_VAL = L_CURR_VAL_BRACE
   WHERE UC = A_UC
   AND VERSION = A_VERSION;

   
   IF L_UC_LOG_HS = '1' THEN
      INSERT INTO UTUCAUDITTRAIL
      (UC, VERSION, CURR_VAL, REF_DATE, REF_DATE_TZ, LOGDATE, LOGDATE_TZ,
       US, CLIENT_ID, APPLIC,
       SID, SERIAL#, OSUSER, TERMINAL,  PROGRAM, LOGON_TIME, LOGON_TIME_TZ)
      SELECT A_UC, A_VERSION, A_NEXT_VAL, L_REF_DATE, L_REF_DATE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
             UNAPIGEN.P_USER, UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME,
             SID, SERIAL#, OSUSER, TERMINAL, PROGRAM, LOGON_TIME, LOGON_TIME
      FROM V$SESSION
      WHERE AUDSID=USERENV('SESSIONID');
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('CreateNextUniqueCodeValue', SQLERRM);
   END IF;
   IF C_UC%ISOPEN THEN
      CLOSE C_UC;
   END IF;
   IF C_RQSCSEQ%ISOPEN THEN
      CLOSE C_RQSCSEQ;
   END IF;
   IF C_WEEK%ISOPEN THEN
      CLOSE C_WEEK;
   END IF;
   IF C_RQSCINITIALSEQ%ISOPEN THEN
      CLOSE C_RQSCINITIALSEQ;
   END IF;
   IF C_UTCOUNTER_CURSOR%ISOPEN THEN
      CLOSE C_UTCOUNTER_CURSOR;
   END IF;
   IF DBMS_SQL.IS_OPEN(L_UC_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_UC_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'CreateNextUniqueCodeValue'));
END INTCREATENEXTUNIQUECODEVALUE;

FUNCTION CREATENEXTUCVALNOTREMOTE
(A_UC                  IN       VARCHAR2,                    
 A_FIELDTYPE_TAB       IN       UNAPIGEN.VC20_TABLE_TYPE,    
 A_FIELDNAMES_TAB      IN       UNAPIGEN.VC40_TABLE_TYPE,    
 A_FIELDVALUES_TAB     IN       UNAPIGEN.VC40_TABLE_TYPE,    
 A_NR_OF_ROWS          IN       NUMBER,                      
 A_REF_DATE            IN       DATE,                        
 A_NEXT_VAL            OUT      VARCHAR2,                    
 A_EDIT_ALLOWED        OUT      CHAR,                        
 A_VALID_CF            OUT      VARCHAR2)                    
RETURN NUMBER IS
PRAGMA AUTONOMOUS_TRANSACTION;

L_UC_LOCKNAME            VARCHAR2(30);
L_UC_LOCKED              BOOLEAN;
L_OLD_TXN_ERROR          INTEGER;

BEGIN

   L_UC_LOCKED := FALSE;
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   
   
   
   L_UC_LOCKNAME := 'U4' || A_UC;
   L_RET_CODE := UNAPIGEN.REQUESTLOCK(A_LOCKNAME => L_UC_LOCKNAME,
                                      A_RELEASE_ON_TRANSACTION_END => '0',
                                      A_TIMEOUT => UNAPIGEN.P_UC_TIMEOUT);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;
   L_UC_LOCKED := TRUE;

   L_RET_CODE := INTCREATENEXTUNIQUECODEVALUE(A_UC, A_FIELDTYPE_TAB, A_FIELDNAMES_TAB, A_FIELDVALUES_TAB, A_NR_OF_ROWS,
                                              A_REF_DATE, A_NEXT_VAL, A_EDIT_ALLOWED, A_VALID_CF);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   
   COMMIT;

   
   L_RET_CODE := UNAPIGEN.RELEASELOCK(A_LOCKNAME => L_UC_LOCKNAME,
                                      A_TIMEOUT => UNAPIGEN.P_UC_TIMEOUT);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;
   L_UC_LOCKED := FALSE;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;


   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('CreateNextUniqueCodeValue', SQLERRM);
   END IF;
   IF L_UC_LOCKED THEN
      L_OLD_TXN_ERROR := UNAPIGEN.P_TXN_ERROR;
      L_RET_CODE := UNAPIGEN.RELEASELOCK(A_LOCKNAME => L_UC_LOCKNAME,
                                         A_TIMEOUT => UNAPIGEN.P_UC_TIMEOUT);
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         UNAPIGEN.LOGERROR('CreateNextUniqueCodeValue',
                           'Release Lock returned '|| L_RET_CODE ||
                           ' for lockname:' || L_UC_LOCKNAME ||
                           ' used timeout: '|| TO_CHAR(UNAPIGEN.P_UC_TIMEOUT));
      END IF;
      L_UC_LOCKED := FALSE;
      UNAPIGEN.P_TXN_ERROR := L_OLD_TXN_ERROR;
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'CreateNextUniqueCodeValue'));
END CREATENEXTUCVALNOTREMOTE;

FUNCTION CREATENEXTUCVALREMOTE
(A_UC                  IN       VARCHAR2,                    
 A_FIELDTYPE_TAB       IN       UNAPIGEN.VC20_TABLE_TYPE,    
 A_FIELDNAMES_TAB      IN       UNAPIGEN.VC40_TABLE_TYPE,   
 A_FIELDVALUES_TAB     IN       UNAPIGEN.VC40_TABLE_TYPE,   
 A_NR_OF_ROWS          IN       NUMBER,                      
 A_REF_DATE            IN       DATE,                        
 A_NEXT_VAL            OUT      VARCHAR2,                    
 A_EDIT_ALLOWED        OUT      CHAR,                        
 A_VALID_CF            OUT      VARCHAR2)                    
RETURN NUMBER IS

L_UC_LOCKNAME            VARCHAR2(30);
L_OLD_TXN_ERROR          INTEGER;

BEGIN

   L_SQLERRM := NULL;
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   
   
   
   L_UC_LOCKNAME := 'U4' || A_UC;
   L_RET_CODE := UNAPIGEN.REQUESTLOCK(A_LOCKNAME => L_UC_LOCKNAME,
                                      A_RELEASE_ON_TRANSACTION_END => '1',
                                      A_TIMEOUT => UNAPIGEN.P_UC_TIMEOUT);
   IF L_RET_CODE = UNAPIGEN.DBERR_NORECORDS THEN
      L_SQLERRM := 'Timeout for lock '||L_UC_LOCKNAME;
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   ELSIF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := INTCREATENEXTUNIQUECODEVALUE(A_UC, A_FIELDTYPE_TAB, A_FIELDNAMES_TAB, A_FIELDVALUES_TAB, A_NR_OF_ROWS,
                                              A_REF_DATE, A_NEXT_VAL, A_EDIT_ALLOWED, A_VALID_CF);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('CreateNextUniqueCodeValue', SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('CreateNextUniqueCodeValue', L_SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'CreateNextUniqueCodeValue'));
END CREATENEXTUCVALREMOTE;

FUNCTION CREATENEXTUNIQUECODEVALUE                           
(A_UC                  IN       VARCHAR2,                    
 A_FIELDTYPE_TAB       IN       UNAPIGEN.VC20_TABLE_TYPE,    
 A_FIELDNAMES_TAB      IN       UNAPIGEN.VC40_TABLE_TYPE,    
 A_FIELDVALUES_TAB     IN       UNAPIGEN.VC40_TABLE_TYPE,    
 A_NR_OF_ROWS          IN       NUMBER,                      
 A_REF_DATE            IN       DATE,                        
 A_NEXT_VAL            OUT      VARCHAR2,                    
 A_EDIT_ALLOWED        OUT      CHAR,                        
 A_VALID_CF            OUT      VARCHAR2)                    
RETURN NUMBER IS

BEGIN
   IF UNAPIGEN.P_REMOTE = '0' THEN
      RETURN(CREATENEXTUCVALNOTREMOTE(A_UC, A_FIELDTYPE_TAB, A_FIELDNAMES_TAB, A_FIELDVALUES_TAB, A_NR_OF_ROWS,
                                      A_REF_DATE, A_NEXT_VAL, A_EDIT_ALLOWED, A_VALID_CF));
   ELSE
      RETURN(CREATENEXTUCVALREMOTE(A_UC, A_FIELDTYPE_TAB, A_FIELDNAMES_TAB, A_FIELDVALUES_TAB, A_NR_OF_ROWS,
                                   A_REF_DATE, A_NEXT_VAL, A_EDIT_ALLOWED, A_VALID_CF));
   END IF;
END CREATENEXTUNIQUECODEVALUE;

FUNCTION CREATENEXTUNIQUECODEVALUE
(A_UC                  IN       VARCHAR2,                  
 A_ST                  IN       VARCHAR2,                  
 A_ST_VERSION          IN       VARCHAR2,                  
 A_RT                  IN       VARCHAR2,                  
 A_RT_VERSION          IN       VARCHAR2,                  
 A_RQ                  IN       VARCHAR2,                  
 A_REF_DATE            IN       DATE,                      
 A_NEXT_VAL            OUT      VARCHAR2,                  
 A_EDIT_ALLOWED        OUT      CHAR,                      
 A_VALID_CF            OUT      VARCHAR2)                  
RETURN NUMBER IS
L_FIELDTYPE_TAB       UNAPIGEN.VC20_TABLE_TYPE;
L_FIELDNAMES_TAB      UNAPIGEN.VC40_TABLE_TYPE;
L_FIELDVALUES_TAB     UNAPIGEN.VC40_TABLE_TYPE;
L_NR_OF_ROWS          NUMBER;

BEGIN
   L_NR_OF_ROWS := 5;
   L_FIELDTYPE_TAB  (1) := 'st';
   L_FIELDNAMES_TAB (1) := 'st';
   L_FIELDVALUES_TAB(1) := A_ST;
   L_FIELDTYPE_TAB  (2) := 'st';
   L_FIELDNAMES_TAB (2) := 'st_version';
   L_FIELDVALUES_TAB(2) := A_ST_VERSION;
   L_FIELDTYPE_TAB  (3) := 'rt';
   L_FIELDNAMES_TAB (3) := 'rt';
   L_FIELDVALUES_TAB(3) := A_RT;
   L_FIELDTYPE_TAB  (4) := 'rt';
   L_FIELDNAMES_TAB (4) := 'rt_version';
   L_FIELDVALUES_TAB(4) := A_RT_VERSION;
   L_FIELDTYPE_TAB  (4) := 'rq';
   L_FIELDNAMES_TAB (5) := 'rq';
   L_FIELDVALUES_TAB(5) := A_RQ;

   L_RET_CODE :=
      CREATENEXTUNIQUECODEVALUE( A_UC, L_FIELDTYPE_TAB, L_FIELDNAMES_TAB, L_FIELDVALUES_TAB, L_NR_OF_ROWS,
         A_REF_DATE, A_NEXT_VAL, A_EDIT_ALLOWED, A_VALID_CF);

   RETURN (L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('CreateNextUniqueCodeValue', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'CreateNextUniqueCodeValue'));
END CREATENEXTUNIQUECODEVALUE;




BEGIN
   P_UC_CURSOR := NULL;
   P_COUNTER_CURSOR := NULL;

END UNAPIUC;
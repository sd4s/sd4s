PACKAGE BODY unapiupp AS

L_SQLERRM         VARCHAR2(255);
L_SQL_STRING      VARCHAR2(2000);
L_WHERE_CLAUSE    VARCHAR2(1000);
L_EVENT_TP        UTEV.EV_TP%TYPE;
L_RET_CODE        NUMBER;
L_RESULT          NUMBER;
L_FETCHED_ROWS    NUMBER;
L_EV_SEQ_NR       NUMBER;  
L_PREV_SEQ_NR     NUMBER;
STPERROR          EXCEPTION;
L_UP_CURSOR       INTEGER;
L_TK_CURSOR       INTEGER;

CURSOR L_TKVALLISTS_CURSOR (A_UP NUMBER,
                            A_US VARCHAR2,
                            A_TK_TP VARCHAR2,
                            A_TK VARCHAR2) IS
   SELECT COL_ID, COL_TP, SEQ, VALUESEQ, VALUE
   FROM UTUPUSTKVALUELISTS
   WHERE UP = A_UP
   AND US = A_US
   AND TK_TP = A_TK_TP
   AND TK = A_TK
   ORDER BY SEQ, VALUESEQ;

P_SAVEUPUSTKLS_INSERT_EVENT      BOOLEAN;
P_SAVEUPUSTKLS_CALLS             INTEGER;
P_SAVEUPUSTKLS_TR_SEQ            INTEGER;
P_SAVEUPUSTKLSVALUES_CALLS       INTEGER;
P_SAVEUPUSTKLSVALUES_TR_SEQ      INTEGER;

FUNCTION GETVERSION
   RETURN VARCHAR2
IS
BEGIN
   RETURN('06.07.00.00_00.13');
EXCEPTION
   WHEN OTHERS THEN
      RETURN (NULL);
END GETVERSION;

FUNCTION GETFUNCACCESS
(A_APPLIC            OUT    UNAPIGEN.VC20_TABLE_TYPE, 
 A_DESCRIPTION       OUT    UNAPIGEN.VC40_TABLE_TYPE, 
 A_TOPIC             OUT    UNAPIGEN.VC20_TABLE_TYPE, 
 A_TOPIC_DESCRIPTION OUT    UNAPIGEN.VC40_TABLE_TYPE, 
 A_FA                OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_NR_OF_ROWS        IN OUT NUMBER,                   
 A_WHERE_CLAUSE      IN     VARCHAR2)                 
RETURN NUMBER IS

L_APPLIC             VARCHAR2(20);
L_DESCRIPTION        VARCHAR2(40);
L_TOPIC              VARCHAR2(20);
L_TOPIC_DESCRIPTION  VARCHAR2(40);
L_FA                 CHAR(1);
L_AP_CURSOR          INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := ' ORDER BY applic, seq'; 
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := ' WHERE applic = ''' || A_WHERE_CLAUSE || 
                        ''' ORDER BY applic, seq';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;
   
   L_AP_CURSOR := DBMS_SQL.OPEN_CURSOR;

   L_SQL_STRING := 'SELECT applic, description, topic, topic_description, fa' ||
                   ' FROM dd'||UNAPIGEN.P_DD||'.uvfa ' || L_WHERE_CLAUSE;
   DBMS_SQL.PARSE(L_AP_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_AP_CURSOR, 1, L_APPLIC, 20);
   DBMS_SQL.DEFINE_COLUMN(L_AP_CURSOR, 2, L_DESCRIPTION, 40);
   DBMS_SQL.DEFINE_COLUMN(L_AP_CURSOR, 3, L_TOPIC, 20);
   DBMS_SQL.DEFINE_COLUMN(L_AP_CURSOR, 4, L_TOPIC_DESCRIPTION, 40);
   DBMS_SQL.DEFINE_COLUMN(L_AP_CURSOR, 5, L_FA, 1);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_AP_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_AP_CURSOR, 1, L_APPLIC);
      DBMS_SQL.COLUMN_VALUE(L_AP_CURSOR, 2, L_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE(L_AP_CURSOR, 3, L_TOPIC);
      DBMS_SQL.COLUMN_VALUE(L_AP_CURSOR, 4, L_TOPIC_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE(L_AP_CURSOR, 5, L_FA);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_APPLIC(L_FETCHED_ROWS) := L_APPLIC;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;
      A_TOPIC(L_FETCHED_ROWS) := L_TOPIC;
      A_TOPIC_DESCRIPTION(L_FETCHED_ROWS) := L_TOPIC_DESCRIPTION;
      A_FA(L_FETCHED_ROWS) := L_FA;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_AP_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_AP_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   UNAPIGEN.LOGERROR('GetFuncAccess', SQLERRM);
   IF DBMS_SQL.IS_OPEN (L_AP_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_AP_CURSOR);
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETFUNCACCESS;

FUNCTION GETUPFUNCLIST
(A_UP_IN             IN     NUMBER,                   
 A_UP                OUT    UNAPIGEN.LONG_TABLE_TYPE, 
 A_APPLIC            OUT    UNAPIGEN.VC20_TABLE_TYPE, 
 A_DESCRIPTION       OUT    UNAPIGEN.VC40_TABLE_TYPE, 
 A_FA                OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_INHERIT_FA        OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_NR_OF_ROWS        IN OUT NUMBER)                   
RETURN NUMBER IS



A_VERSION_IN        VARCHAR2(20);
L_UP                NUMBER(5);
L_APPLIC            VARCHAR2(20);
L_DESCRIPTION       VARCHAR2(40);
L_FA                CHAR(1);
L_INHERIT_FA        CHAR(1);
L_FOUND             BOOLEAN;




CURSOR L_FA_CURSOR IS
   SELECT A.UP, A.APPLIC, B.DESCRIPTION, A.FA, A.INHERIT_FA
   FROM UTUPFA A, UTFA B
   WHERE A.APPLIC = A.TOPIC
     AND A.APPLIC = B.APPLIC
     AND A.TOPIC = B.TOPIC
     AND A.VERSION = NVL(A_VERSION_IN, A.VERSION)
     AND A.UP = NVL(A_UP_IN, A.UP)
   UNION
   SELECT A.UP, B.APPLIC, B.DESCRIPTION, B.FA, '1'
   FROM UTUP A, UTFA B
   WHERE (A.UP, A.VERSION, B.APPLIC) NOT IN 
      (SELECT UP, VERSION, APPLIC FROM UTUPFA
       WHERE TOPIC = APPLIC
         AND VERSION = A.VERSION
         AND UP = A.UP)
     AND B.TOPIC = B.APPLIC
     AND A.VERSION = NVL(A_VERSION_IN, A.VERSION)
     AND A.UP = NVL(A_UP_IN, A.UP)
   ORDER BY 1,3;

BEGIN

   
   A_VERSION_IN := UNVERSION.P_NO_VERSION;
   IF A_VERSION_IN IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   
   
   

   OPEN L_FA_CURSOR;
   FETCH L_FA_CURSOR
   INTO L_UP, L_APPLIC, L_DESCRIPTION, L_FA, L_INHERIT_FA;
   L_FOUND := L_FA_CURSOR%FOUND;

   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN NOT L_FOUND OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_UP(L_FETCHED_ROWS) := L_UP;
      A_APPLIC(L_FETCHED_ROWS) := L_APPLIC;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;
      A_FA(L_FETCHED_ROWS) := L_FA;
      A_INHERIT_FA(L_FETCHED_ROWS) := L_INHERIT_FA;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         FETCH L_FA_CURSOR
         INTO L_UP, L_APPLIC, L_DESCRIPTION, L_FA, L_INHERIT_FA;
         L_FOUND := L_FA_CURSOR%FOUND;
      END IF;
   END LOOP;

   CLOSE L_FA_CURSOR;

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   UNAPIGEN.LOGERROR('GetUpFuncList', SQLERRM);
   IF L_FA_CURSOR%ISOPEN THEN
      CLOSE L_FA_CURSOR;
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETUPFUNCLIST;

FUNCTION GETUPFUNCDETAILS
(A_UP_IN             IN     NUMBER,                   
 A_APPLIC_IN         IN     VARCHAR2,                 
 A_UP                OUT    UNAPIGEN.LONG_TABLE_TYPE, 
 A_APPLIC            OUT    UNAPIGEN.VC20_TABLE_TYPE, 
 A_DESCRIPTION       OUT    UNAPIGEN.VC40_TABLE_TYPE, 
 A_TOPIC             OUT    UNAPIGEN.VC20_TABLE_TYPE, 
 A_TOPIC_DESCRIPTION OUT    UNAPIGEN.VC40_TABLE_TYPE, 
 A_FA                OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_INHERIT_FA        OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_NR_OF_ROWS        IN OUT NUMBER)                   
RETURN NUMBER IS



A_VERSION_IN         VARCHAR2(20);
L_APPLIC_IN          VARCHAR2(20);
L_UP                 NUMBER(5);
L_APPLIC             VARCHAR2(20);
L_DESCRIPTION        VARCHAR2(40);
L_TOPIC              VARCHAR2(20);
L_TOPIC_DESCRIPTION  VARCHAR2(40);
L_FA                 CHAR(1);
L_INHERIT_FA         CHAR(1);
L_SEQ                NUMBER;
L_FOUND              BOOLEAN;




CURSOR L_FA_CURSOR IS
SELECT A.UP, A.APPLIC, B.DESCRIPTION, B.SEQ, B.TOPIC, B.TOPIC_DESCRIPTION, A.FA, A.INHERIT_FA
FROM UTUPFA A, UTFA B
WHERE A.APPLIC = B.APPLIC
  AND A.TOPIC = B.TOPIC
  AND A.VERSION = NVL(A_VERSION_IN, A.VERSION)
  AND A.UP = NVL(A_UP_IN, A.UP) 
  AND A.APPLIC LIKE L_APPLIC_IN
UNION
SELECT A.UP, B.APPLIC, B.DESCRIPTION, B.SEQ, B.TOPIC, B.TOPIC_DESCRIPTION, B.FA, '1' 
FROM UTUP A, UTFA B
WHERE (A.UP, A.VERSION, B.APPLIC, TOPIC) NOT IN 
   (SELECT UP, VERSION, APPLIC, TOPIC FROM UTUPFA
    WHERE VERSION = A.VERSION
      AND UP = A.UP
      AND APPLIC LIKE L_APPLIC_IN)
  AND A.VERSION = NVL(A_VERSION_IN, A.VERSION)
  AND A.UP = NVL(A_UP_IN, A.UP) 
  AND B.APPLIC LIKE L_APPLIC_IN
ORDER BY 1,2,4;

L_QUAL_MANAGEMENT_ALLOWED CHAR(1);
L_EQ_MANAGEMENT_ALLOWED   CHAR(1);

BEGIN

   
   A_VERSION_IN := UNVERSION.P_NO_VERSION;
   IF A_VERSION_IN IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   
   L_EQ_MANAGEMENT_ALLOWED := '0';
   L_QUAL_MANAGEMENT_ALLOWED := '0';
   L_RET_CODE := UNAPIGEN.ISSYSTEMSUPPORTINGEQMNGMT;
   IF L_RET_CODE = UNAPIGEN.DBERR_SUCCESS THEN
      L_EQ_MANAGEMENT_ALLOWED := '1';
      L_QUAL_MANAGEMENT_ALLOWED := '1';   
   END IF;

   
   
   
   L_APPLIC_IN := NVL(A_APPLIC_IN, '%');

   OPEN L_FA_CURSOR;
   FETCH L_FA_CURSOR
   INTO L_UP, L_APPLIC, L_DESCRIPTION, L_SEQ, L_TOPIC, L_TOPIC_DESCRIPTION, L_FA, L_INHERIT_FA;
   L_FOUND := L_FA_CURSOR%FOUND;

   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN NOT L_FOUND OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      
      
      IF L_TOPIC IN ('emtel', 'vmtel') THEN
         IF NVL(L_QUAL_MANAGEMENT_ALLOWED, '0') = '0' THEN
            L_FA := '0';
         END IF;         
      END IF;

      
      
      IF L_TOPIC IN ('emteq', 'vmteq') THEN
         IF NVL(L_EQ_MANAGEMENT_ALLOWED, '0') = '0' THEN
            L_FA := '0';
         END IF;         
      END IF;
    
      
      
      IF (LOWER(L_TOPIC) LIKE ('%delete%')) AND (UNAPIGEN.ISSYSTEM21CFR11COMPLIANT() = UNAPIGEN.DBERR_SUCCESS) THEN
           L_FA := '0';     
      END IF;
      
      
      
	
      A_UP(L_FETCHED_ROWS) := L_UP;
      A_APPLIC(L_FETCHED_ROWS) := L_APPLIC;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;
      A_TOPIC(L_FETCHED_ROWS) := L_TOPIC;
      A_TOPIC_DESCRIPTION(L_FETCHED_ROWS) := L_TOPIC_DESCRIPTION;
      A_FA(L_FETCHED_ROWS) := L_FA;
      A_INHERIT_FA(L_FETCHED_ROWS) := L_INHERIT_FA;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         FETCH L_FA_CURSOR
         INTO L_UP, L_APPLIC, L_DESCRIPTION, L_SEQ, L_TOPIC, L_TOPIC_DESCRIPTION, L_FA, L_INHERIT_FA;
         L_FOUND := L_FA_CURSOR%FOUND;
      END IF;
   END LOOP;

   CLOSE L_FA_CURSOR;

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;
   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   UNAPIGEN.LOGERROR('GetUpFuncDetails', SQLERRM);
   IF L_FA_CURSOR%ISOPEN THEN
      CLOSE L_FA_CURSOR;
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETUPFUNCDETAILS;

FUNCTION GETUPUSFUNCLIST
(A_UP_IN             IN     NUMBER,                   
 A_US_IN             IN     VARCHAR2,                 
 A_UP                OUT    UNAPIGEN.LONG_TABLE_TYPE, 
 A_US                OUT    UNAPIGEN.VC20_TABLE_TYPE, 
 A_APPLIC            OUT    UNAPIGEN.VC20_TABLE_TYPE, 
 A_DESCRIPTION       OUT    UNAPIGEN.VC40_TABLE_TYPE, 
 A_FA                OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_INHERIT_FA        OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_NR_OF_ROWS        IN OUT NUMBER)                   
RETURN NUMBER IS



L_US_VERSION_IN     VARCHAR2(20);
A_VERSION_IN        VARCHAR2(20);
A_US_VERSION_IN     VARCHAR2(20);
L_US_IN             VARCHAR2(20);
L_UP                NUMBER(5);
L_US                VARCHAR2(20);
L_APPLIC            VARCHAR2(20);
L_DESCRIPTION       VARCHAR2(40);
L_FA                CHAR(1);
L_INHERIT_FA        CHAR(1);
L_FOUND             BOOLEAN;




CURSOR L_FA_CURSOR IS
   SELECT A.UP, A.US, A.APPLIC, B.DESCRIPTION, A.FA, A.INHERIT_FA
   FROM UTUPUSFA A, UTFA B
   WHERE A.APPLIC = A.TOPIC
     AND A.APPLIC = B.APPLIC
     AND A.TOPIC = B.TOPIC
     AND A.VERSION = NVL(A_VERSION_IN, A.VERSION)
     AND A.UP = NVL(A_UP_IN, A.UP) 
     AND A.US_VERSION LIKE L_US_VERSION_IN
     AND A.US LIKE L_US_IN
   UNION
   SELECT A.UP, C.US, A.APPLIC, B.DESCRIPTION, A.FA, '1'
   FROM UTUPFA A, UTFA B, UTUPUS C
   WHERE A.APPLIC = A.TOPIC
     AND A.APPLIC = B.APPLIC
     AND A.TOPIC = B.TOPIC
     AND A.VERSION = C.VERSION
     AND A.UP = C.UP
     AND C.VERSION = NVL(A_VERSION_IN, C.VERSION)
     AND C.UP = NVL(A_UP_IN, C.UP)
     AND C.US_VERSION LIKE L_US_VERSION_IN
     AND C.US LIKE L_US_IN
     AND A.APPLIC NOT IN (SELECT APPLIC
                          FROM UTUPUSFA
                          WHERE APPLIC = TOPIC
                            AND VERSION = C.VERSION
                            AND UP = C.UP
                            AND US_VERSION = C.US_VERSION
                            AND US = C.US)
   UNION 
   SELECT C.UP, C.US, B.APPLIC, B.DESCRIPTION, B.FA, '1' 
   FROM UTFA B, UTUPUS C
   WHERE B.APPLIC NOT IN (SELECT APPLIC
                          FROM UTUPUSFA
                          WHERE APPLIC = TOPIC
                            AND VERSION = C.VERSION
                            AND UP = C.UP
                            AND US_VERSION = C.US_VERSION
                            AND US = C.US
                          UNION
                          SELECT APPLIC
                          FROM UTUPFA
                          WHERE APPLIC = TOPIC
                            AND VERSION = C.VERSION
                            AND UP = C.UP)
     AND B.TOPIC = B.APPLIC
     AND C.VERSION = NVL(A_VERSION_IN, C.VERSION)
     AND C.UP = NVL(A_UP_IN, C.UP)
     AND C.US_VERSION LIKE L_US_VERSION_IN
     AND C.US LIKE L_US_IN
   ORDER BY 1,2,4;

BEGIN

   
   A_VERSION_IN := UNVERSION.P_NO_VERSION;
   IF A_VERSION_IN IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;

   A_US_VERSION_IN := UNVERSION.P_NO_VERSION;
   IF A_US_VERSION_IN IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   
   
   
   L_US_IN := NVL(A_US_IN, '%');
   L_US_VERSION_IN := NVL(A_US_VERSION_IN, '%');

   OPEN L_FA_CURSOR;
   FETCH L_FA_CURSOR
   INTO L_UP, L_US, L_APPLIC, L_DESCRIPTION, L_FA, L_INHERIT_FA;
   L_FOUND := L_FA_CURSOR%FOUND;

   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN NOT L_FOUND OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_UP(L_FETCHED_ROWS) := L_UP;
      A_US(L_FETCHED_ROWS) := L_US;
      A_APPLIC(L_FETCHED_ROWS) := L_APPLIC;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;
      A_FA(L_FETCHED_ROWS) := L_FA;
      A_INHERIT_FA(L_FETCHED_ROWS) := L_INHERIT_FA;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         FETCH L_FA_CURSOR
         INTO L_UP, L_US, L_APPLIC, L_DESCRIPTION, L_FA, L_INHERIT_FA;
         L_FOUND := L_FA_CURSOR%FOUND;
      END IF;
   END LOOP;

   CLOSE L_FA_CURSOR;

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   UNAPIGEN.LOGERROR('GetUpUsFuncList',SQLERRM);
   IF L_FA_CURSOR%ISOPEN THEN
      CLOSE L_FA_CURSOR;
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETUPUSFUNCLIST;

FUNCTION GETUPUSFUNCDETAILS
(A_UP_IN             IN     NUMBER,                   
 A_US_IN             IN     VARCHAR2,                 
 A_APPLIC_IN         IN     VARCHAR2,                 
 A_UP                OUT    UNAPIGEN.LONG_TABLE_TYPE, 
 A_US                OUT    UNAPIGEN.VC20_TABLE_TYPE, 
 A_APPLIC            OUT    UNAPIGEN.VC20_TABLE_TYPE, 
 A_DESCRIPTION       OUT    UNAPIGEN.VC40_TABLE_TYPE, 
 A_TOPIC             OUT    UNAPIGEN.VC20_TABLE_TYPE, 
 A_TOPIC_DESCRIPTION OUT    UNAPIGEN.VC40_TABLE_TYPE, 
 A_FA                OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_INHERIT_FA        OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_NR_OF_ROWS        IN OUT NUMBER)                   

RETURN NUMBER IS



L_US_VERSION_IN     VARCHAR2(20);
A_VERSION_IN        VARCHAR2(20);
A_US_VERSION_IN     VARCHAR2(20);
L_US_IN             VARCHAR2(20);
L_APPLIC_IN         VARCHAR2(20);
L_UP                NUMBER(5);
L_US                VARCHAR2(20);
L_APPLIC            VARCHAR2(20);
L_DESCRIPTION       VARCHAR2(40);
L_TOPIC             VARCHAR2(20);
L_TOPIC_DESCRIPTION VARCHAR2(40);
L_FA                CHAR(1);
L_INHERIT_FA        CHAR(1);
L_SEQ               NUMBER;
L_FOUND             BOOLEAN;





CURSOR L_FA_CURSOR IS
   SELECT A.UP, A.US, A.APPLIC, B.DESCRIPTION, B.SEQ, A.TOPIC, B.TOPIC_DESCRIPTION, A.FA, A.INHERIT_FA, 'us' INHERIT_LEVEL
   FROM UTUPUSFA A, UTFA B
   WHERE A.APPLIC = B.APPLIC
     AND A.TOPIC = B.TOPIC
     AND A.VERSION = NVL(A_VERSION_IN, A.VERSION)
     AND A.UP = NVL(A_UP_IN, A.UP)
     AND A.US_VERSION LIKE L_US_VERSION_IN
     AND A.US LIKE L_US_IN
     AND A.APPLIC LIKE L_APPLIC_IN
   UNION
   SELECT A.UP, C.US, A.APPLIC, B.DESCRIPTION, B.SEQ, A.TOPIC, B.TOPIC_DESCRIPTION, A.FA, '1', 'up' INHERIT_LEVEL
   FROM UTUPFA A, UTFA B, UTUPUS C
   WHERE A.APPLIC = B.APPLIC
     AND A.TOPIC = B.TOPIC
     AND A.VERSION = C.VERSION
     AND A.UP = C.UP
     AND A.VERSION = NVL(A_VERSION_IN, A.VERSION)
     AND A.UP = NVL(A_UP_IN, A.UP)
     AND C.US_VERSION LIKE L_US_VERSION_IN
     AND C.US LIKE L_US_IN
     AND A.APPLIC LIKE L_APPLIC_IN
     AND (A.APPLIC, A.TOPIC) NOT IN (SELECT APPLIC,TOPIC
                                     FROM UTUPUSFA
                                     WHERE VERSION = C.VERSION
                                       AND UP = C.UP
                                       AND US_VERSION = C.US_VERSION
                                       AND US = C.US)
   UNION 
   SELECT C.UP, C.US, B.APPLIC, B.DESCRIPTION, B.SEQ, B.TOPIC, B.TOPIC_DESCRIPTION, B.FA, '1', 'system' INHERIT_LEVEL
   FROM UTFA B, UTUPUS C
   WHERE (B.APPLIC, B.TOPIC) NOT IN (SELECT APPLIC, TOPIC
                                     FROM UTUPUSFA
                                     WHERE VERSION = C.VERSION
                                       AND UP = C.UP
                                       AND US_VERSION = C.US_VERSION
                                       AND US = C.US
                                     UNION
                                     SELECT APPLIC, TOPIC
                                     FROM UTUPFA
                                     WHERE VERSION = C.VERSION
                                       AND UP = C.UP)
     AND C.VERSION = NVL(A_VERSION_IN, C.VERSION)
     AND C.UP = NVL(A_UP_IN, C.UP)
     AND C.US_VERSION LIKE L_US_VERSION_IN
     AND C.US LIKE L_US_IN
     AND B.APPLIC LIKE L_APPLIC_IN
   ORDER BY 1,2,3,5;

L_QUAL_MANAGEMENT_ALLOWED CHAR(1);
L_EQ_MANAGEMENT_ALLOWED   CHAR(1);
L_UP_FOR_DBA_USERS        NUMBER;
L_INHERIT_LEVEL           VARCHAR2(20);
   
BEGIN

   
   A_VERSION_IN := UNVERSION.P_NO_VERSION;
   IF A_VERSION_IN IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;

   A_US_VERSION_IN := UNVERSION.P_NO_VERSION;
   IF A_US_VERSION_IN IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   
   L_EQ_MANAGEMENT_ALLOWED := '0';
   L_QUAL_MANAGEMENT_ALLOWED := '0';
   L_RET_CODE := UNAPIGEN.ISSYSTEMSUPPORTINGEQMNGMT;
   IF L_RET_CODE = UNAPIGEN.DBERR_SUCCESS THEN
      L_EQ_MANAGEMENT_ALLOWED := '1';
      L_QUAL_MANAGEMENT_ALLOWED := '1';   
   END IF;
   
   SELECT DEF_UP
   INTO L_UP_FOR_DBA_USERS
   FROM UTAD
   WHERE AD = NVL(UNAPIGEN.P_DBA_NAME, (SELECT SETTING_VALUE FROM UTSYSTEM WHERE SETTING_NAME='DBA_NAME'));
      
   
   
   
   L_US_IN := NVL(A_US_IN, '%');
   L_US_VERSION_IN := NVL(A_US_VERSION_IN, '%');
   L_APPLIC_IN := NVL(A_APPLIC_IN, '%');

   OPEN L_FA_CURSOR;
   FETCH L_FA_CURSOR
   INTO L_UP, L_US, L_APPLIC, L_DESCRIPTION, L_SEQ, 
        L_TOPIC, L_TOPIC_DESCRIPTION, L_FA, L_INHERIT_FA, L_INHERIT_LEVEL;
   L_FOUND := L_FA_CURSOR%FOUND;

   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN NOT L_FOUND OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      
      
      IF L_TOPIC IN ('emtel', 'vmtel') THEN
         IF NVL(L_QUAL_MANAGEMENT_ALLOWED, '0') = '0' THEN
            L_FA := '0';
         END IF;         
      END IF;

      
      
      IF L_TOPIC IN ('emteq', 'vmteq') THEN
         IF NVL(L_EQ_MANAGEMENT_ALLOWED, '0') = '0' THEN
            L_FA := '0';
         END IF;         
      END IF;
      
      
      IF (LOWER(L_TOPIC) LIKE ('%delete%')) AND (UNAPIGEN.ISSYSTEM21CFR11COMPLIANT() = UNAPIGEN.DBERR_SUCCESS) THEN
           L_FA := '0';     
      END IF;
      
      
      

      IF (LOWER(L_TOPIC) LIKE ('resetpwd')) AND L_INHERIT_LEVEL IN ('system', 'up') THEN
         
         
         L_FA := '0';         
      END IF;
      
      A_UP(L_FETCHED_ROWS) := L_UP;
      A_US(L_FETCHED_ROWS) := L_US;
      A_APPLIC(L_FETCHED_ROWS) := L_APPLIC;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;
      A_TOPIC(L_FETCHED_ROWS) := L_TOPIC;
      A_TOPIC_DESCRIPTION(L_FETCHED_ROWS) := L_TOPIC_DESCRIPTION;
      A_FA(L_FETCHED_ROWS) := L_FA;
      A_INHERIT_FA(L_FETCHED_ROWS) := L_INHERIT_FA;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         FETCH L_FA_CURSOR
         INTO L_UP, L_US, L_APPLIC, L_DESCRIPTION, L_SEQ, 
              L_TOPIC, L_TOPIC_DESCRIPTION, L_FA, L_INHERIT_FA, L_INHERIT_LEVEL;
         L_FOUND := L_FA_CURSOR%FOUND;
      END IF;
   END LOOP;

   CLOSE L_FA_CURSOR;

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   UNAPIGEN.LOGERROR('GetUpUsFuncDetails',SQLERRM);
   IF L_FA_CURSOR%ISOPEN THEN
      CLOSE L_FA_CURSOR;
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETUPUSFUNCDETAILS;

FUNCTION SAVEUPFUNCLIST
(A_UP                IN     NUMBER,                   
 A_APPLIC            IN     UNAPIGEN.VC20_TABLE_TYPE, 
 A_FA                IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_INHERIT_FA        IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_NR_OF_ROWS        IN OUT NUMBER,                   
 A_MODIFY_REASON     IN     VARCHAR2)                 
RETURN NUMBER IS

A_VERSION      VARCHAR2(20);
L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);
L_LOG_HS       CHAR(1);
L_ALLOW_MODIFY CHAR(1);
L_ACTIVE       CHAR(1);

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF (TRUNC(NVL(A_UP, -1)) - NVL(A_UP, 0)) <> 0 
      OR (NVL(A_UP, -1)) <= 0 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UP;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('up', A_UP, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTUP
   SET ALLOW_MODIFY = '#'
   WHERE VERSION = A_VERSION
     AND UP = A_UP;

   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR ;
   END IF;

   
   DELETE FROM UTUPFA
   WHERE VERSION = A_VERSION
     AND UP = A_UP
     AND APPLIC = TOPIC;

   FOR L_SEQ IN 1..A_NR_OF_ROWS LOOP
      IF NVL(A_APPLIC(L_SEQ), ' ') = ' ' THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
      END IF;
      IF NVL(A_FA(L_SEQ), ' ') NOT IN ('1', '0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_FA;
         RAISE STPERROR;
      END IF;
      IF NVL(A_INHERIT_FA(L_SEQ), ' ') NOT IN ('1', '0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INHERITFLAG;
         RAISE STPERROR;
      END IF;

      
      IF NVL(A_INHERIT_FA(L_SEQ), ' ') = '0' THEN
         
         INSERT INTO UTUPFA(UP, VERSION, APPLIC, TOPIC, FA, INHERIT_FA)
         VALUES(A_UP, A_VERSION, A_APPLIC(L_SEQ), A_APPLIC(L_SEQ), A_FA(L_SEQ), A_INHERIT_FA(L_SEQ));
      END IF;
   END LOOP;

   L_EVENT_TP := 'UsedObjectsUpdated';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT('SaveUpFuncList', UNAPIGEN.P_EVMGR_NAME, 'up', A_UP, L_LC, 
                                   L_LC_VERSION, L_SS, L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF L_LOG_HS = '1' THEN
      INSERT INTO UTUPHS (UP, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                          WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES (A_UP, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
              'functional access rights of user profile "'||A_UP||'" are updated.', 
              CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveUpFuncList', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveUpFuncList'));
END SAVEUPFUNCLIST;

FUNCTION SAVEUPFUNCDETAILS
(A_UP                IN     NUMBER,                   
 A_APPLIC            IN     VARCHAR2,                 
 A_TOPIC             IN     UNAPIGEN.VC20_TABLE_TYPE, 
 A_FA                IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_INHERIT_FA        IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_NR_OF_ROWS        IN OUT NUMBER,                   
 A_MODIFY_REASON     IN     VARCHAR2)                 
RETURN NUMBER IS

A_VERSION             VARCHAR2(20);
L_LC                  VARCHAR2(2);
L_LC_VERSION          VARCHAR2(20);
L_SS                  VARCHAR2(2);
L_LOG_HS              CHAR(1);
L_ALLOW_MODIFY        CHAR(1);
L_ACTIVE              CHAR(1);


BEGIN
   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF (TRUNC(NVL(A_UP, -1)) - NVL(A_UP, 0)) <> 0 
      OR (NVL(A_UP, -1)) <= 0 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UP;
      RAISE STPERROR;
   END IF;

   IF NVL(A_APPLIC, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('up', A_UP, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTUP
   SET ALLOW_MODIFY = '#'
   WHERE VERSION = A_VERSION
     AND UP = A_UP;

   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR ;
   END IF;

   
   DELETE FROM UTUPFA
   WHERE VERSION = A_VERSION
     AND UP = A_UP
     AND APPLIC = A_APPLIC;

   FOR L_SEQ IN 1..A_NR_OF_ROWS LOOP
      IF NVL(A_TOPIC(L_SEQ), ' ') = ' ' THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
      END IF;
      IF NVL(A_FA(L_SEQ), ' ') NOT IN ('1', '0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_FA;
         RAISE STPERROR;
      END IF;
      IF NVL(A_INHERIT_FA(L_SEQ), ' ') NOT IN ('1', '0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INHERITFLAG;
         RAISE STPERROR;
      END IF;

      
      IF NVL(A_INHERIT_FA(L_SEQ), ' ') = '0' THEN
         INSERT INTO UTUPFA(UP, VERSION, APPLIC, TOPIC, FA, INHERIT_FA)
         VALUES(A_UP, A_VERSION, A_APPLIC, A_TOPIC(L_SEQ), A_FA(L_SEQ), A_INHERIT_FA(L_SEQ));
      END IF;
   END LOOP;

   L_EVENT_TP := 'UsedObjectsUpdated';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT('SaveUpFuncDetails', UNAPIGEN.P_EVMGR_NAME, 'up', A_UP, L_LC, 
                                   L_LC_VERSION, L_SS, L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF L_LOG_HS = '1' THEN
      INSERT INTO UTUPHS (UP, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                          WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES (A_UP, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
              'functional access rights of user profile "'||A_UP||'" are updated.', 
              CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveUpFuncDetails', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveUpFuncDetails'));
END SAVEUPFUNCDETAILS;

FUNCTION SAVEUPUSFUNCLIST
(A_UP                IN     NUMBER,                   
 A_US                IN     VARCHAR2,                 
 A_APPLIC            IN     UNAPIGEN.VC20_TABLE_TYPE, 
 A_FA                IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_INHERIT_FA        IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_NR_OF_ROWS        IN OUT NUMBER,                   
 A_MODIFY_REASON     IN     VARCHAR2)                 
RETURN NUMBER IS

A_VERSION      VARCHAR2(20);
A_US_VERSION   VARCHAR2(20);
L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);
L_LOG_HS       CHAR(1);
L_ALLOW_MODIFY CHAR(1);
L_ACTIVE       CHAR(1);

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;

   A_US_VERSION := UNVERSION.P_NO_VERSION;
   IF A_US_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_US, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF (TRUNC(NVL(A_UP, -1)) - NVL(A_UP, 0)) <> 0 
      OR (NVL(A_UP, -1)) <= 0  THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UP;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('ad', A_US, A_US_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTAD
   SET ALLOW_MODIFY = '#'
   WHERE VERSION = A_US_VERSION
     AND AD = A_US
     AND IS_USER IN ('1', '2');

   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR ;
   END IF;

   
   DELETE FROM UTUPUSFA
   WHERE VERSION = A_VERSION
     AND UP = A_UP
     AND US_VERSION = A_US_VERSION
     AND US = A_US
     AND APPLIC = TOPIC;

   FOR L_SEQ IN 1..A_NR_OF_ROWS LOOP
      IF NVL(A_APPLIC(L_SEQ), ' ') = ' ' THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
      END IF;
      IF NVL(A_FA(L_SEQ), ' ') NOT IN ('1', '0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_FA;
         RAISE STPERROR;
      END IF;
      IF NVL(A_INHERIT_FA(L_SEQ), ' ') NOT IN ('1', '0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INHERITFLAG;
         RAISE STPERROR;
      END IF;

      
      IF NVL(A_INHERIT_FA(L_SEQ), ' ') = '0' THEN
         
         INSERT INTO UTUPUSFA(UP, VERSION, US, US_VERSION, APPLIC, TOPIC, FA, INHERIT_FA)
         VALUES(A_UP, A_VERSION, A_US, A_US_VERSION, A_APPLIC(L_SEQ), A_APPLIC(L_SEQ), A_FA(L_SEQ), A_INHERIT_FA(L_SEQ));
      END IF;
   END LOOP;

   L_EVENT_TP := 'ObjectUpdated';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT('SaveUpUsFuncList', UNAPIGEN.P_EVMGR_NAME, 'ad', A_US, L_LC, 
                                   L_LC_VERSION, L_SS, L_EVENT_TP, 
                                   'version='||A_US_VERSION||'#up='||A_UP||'#up_version='||A_VERSION, 
                                   L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF L_LOG_HS = '1' THEN
      INSERT INTO UTADHS(AD, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                         WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      SELECT T.AD, T.VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
             'functional access rights of user "'||A_US||'" in user profile "'||A_UP||'" are updated.', 
             CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR
      FROM UTAD T
      WHERE T.VERSION = A_US_VERSION
        AND T.AD = A_US
        AND T.IS_USER IN ('1', '2');
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveUpUsFuncList', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveUpUsFuncList'));
END SAVEUPUSFUNCLIST;

FUNCTION SAVEUPUSFUNCDETAILS
(A_UP                IN     NUMBER,                   
 A_US                IN     VARCHAR2,                 
 A_APPLIC            IN     VARCHAR2,                 
 A_TOPIC             IN     UNAPIGEN.VC20_TABLE_TYPE, 
 A_FA                IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_INHERIT_FA        IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_NR_OF_ROWS        IN OUT NUMBER,                   
 A_MODIFY_REASON     IN     VARCHAR2)                 
RETURN NUMBER IS

A_VERSION             VARCHAR2(20);
A_US_VERSION          VARCHAR2(20);
L_LC                  VARCHAR2(2);
L_LC_VERSION          VARCHAR2(20);
L_SS                  VARCHAR2(2);
L_LOG_HS              CHAR(1);
L_ALLOW_MODIFY        CHAR(1);
L_ACTIVE              CHAR(1);

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;

   A_US_VERSION := UNVERSION.P_NO_VERSION;
   IF A_US_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF (TRUNC(NVL(A_UP, -1)) - NVL(A_UP, 0)) <> 0 
      OR (NVL(A_UP, -1)) <= 0  THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UP;
      RAISE STPERROR;
   END IF;

   IF NVL(A_US, ' ') = ' ' OR
      NVL(A_APPLIC, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('ad', A_US, A_US_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTAD
   SET ALLOW_MODIFY = '#'
   WHERE VERSION = A_US_VERSION
     AND AD = A_US
     AND IS_USER IN ('1', '2');

   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR ;
   END IF;

   
   DELETE FROM UTUPUSFA
   WHERE VERSION = A_VERSION
     AND UP = A_UP
     AND US_VERSION = A_US_VERSION
     AND US = A_US
     AND APPLIC = A_APPLIC;

   FOR L_SEQ IN 1..A_NR_OF_ROWS LOOP
      IF NVL(A_TOPIC(L_SEQ), ' ') = ' ' THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
      END IF;
      IF NVL(A_FA(L_SEQ), ' ') NOT IN ('1', '0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_FA;
         RAISE STPERROR;
      END IF;
      IF NVL(A_INHERIT_FA(L_SEQ), ' ') NOT IN ('1', '0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INHERITFLAG;
         RAISE STPERROR;
      END IF;

      
      IF NVL(A_INHERIT_FA(L_SEQ), ' ') = '0' THEN
         INSERT INTO UTUPUSFA(UP, VERSION, US, US_VERSION, APPLIC, TOPIC, FA, INHERIT_FA)
         VALUES(A_UP, A_VERSION, A_US, A_US_VERSION, A_APPLIC, A_TOPIC(L_SEQ), A_FA(L_SEQ), A_INHERIT_FA(L_SEQ));
      END IF;
   END LOOP;

   L_EVENT_TP := 'ObjectUpdated';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT('SaveUpUsFuncDetails', UNAPIGEN.P_EVMGR_NAME, 'ad', A_US, L_LC, 
                                   L_LC_VERSION, L_SS, L_EVENT_TP, 
                                   'version='||A_US_VERSION||'#up='||A_UP||'#up_version='||A_VERSION, 
                                   L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF L_LOG_HS = '1' THEN
      INSERT INTO UTADHS(AD, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                         WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      SELECT T.AD, T.VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
             'functional access rights of user "'||A_US||'" in user profile "'||A_UP||'" are updated.', 
             CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR
      FROM UTAD T
      WHERE T.VERSION = A_US_VERSION
        AND T.AD = A_US
        AND T.IS_USER IN ('1', '2');
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveUpUsFuncDetails', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveUpUsFuncDetails'));
END SAVEUPUSFUNCDETAILS;

FUNCTION GETPREF
(A_PREF_TP          OUT    UNAPIGEN.VC20_TABLE_TYPE,   
 A_PREF_NAME        OUT    UNAPIGEN.VC20_TABLE_TYPE,   
 A_PREF_VALUE       OUT    UNAPIGEN.VC40_TABLE_TYPE,   
 A_APPLICABLE_OBJ   OUT    UNAPIGEN.VC40_TABLE_TYPE,   
 A_CATEGORY         OUT    UNAPIGEN.VC40_TABLE_TYPE,   
 A_DESCRIPTION      OUT    UNAPIGEN.VC255_TABLE_TYPE,  
 A_NR_OF_ROWS       IN OUT NUMBER,                     
 A_WHERE_CLAUSE     IN     VARCHAR2)                   
RETURN NUMBER IS

L_PREF_TP            VARCHAR2(20);
L_PREF_NAME          VARCHAR2(20);
L_PREF_VALUE         VARCHAR2(40);
L_APPLICABLE_OBJ     VARCHAR2(40);
L_CATEGORY           VARCHAR2(40);
L_DESCRIPTION        VARCHAR2(250);
L_PREF_CURSOR        INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := ' ORDER BY applicable_obj, category, pref_name, seq'; 
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := ' WHERE pref_tp = ''' || A_WHERE_CLAUSE || 
                        ''' ORDER BY applicable_obj, category, pref_name, seq';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;
   
   L_PREF_CURSOR := DBMS_SQL.OPEN_CURSOR;

   L_SQL_STRING := 'SELECT pref_tp, pref_name, pref_value, applicable_obj, category, description ' ||
                   ' FROM utpref ' || L_WHERE_CLAUSE;
   DBMS_SQL.PARSE(L_PREF_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_PREF_CURSOR, 1, L_PREF_TP, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PREF_CURSOR, 2, L_PREF_NAME, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PREF_CURSOR, 3, L_PREF_VALUE, 40);
   DBMS_SQL.DEFINE_COLUMN(L_PREF_CURSOR, 4, L_APPLICABLE_OBJ, 40);
   DBMS_SQL.DEFINE_COLUMN(L_PREF_CURSOR, 5, L_CATEGORY, 40);
   DBMS_SQL.DEFINE_COLUMN(L_PREF_CURSOR, 6, L_DESCRIPTION, 250);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_PREF_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_PREF_CURSOR, 1, L_PREF_TP);
      DBMS_SQL.COLUMN_VALUE(L_PREF_CURSOR, 2, L_PREF_NAME);
      DBMS_SQL.COLUMN_VALUE(L_PREF_CURSOR, 3, L_PREF_VALUE);
      DBMS_SQL.COLUMN_VALUE(L_PREF_CURSOR, 4, L_APPLICABLE_OBJ);
      DBMS_SQL.COLUMN_VALUE(L_PREF_CURSOR, 5, L_CATEGORY);
      DBMS_SQL.COLUMN_VALUE(L_PREF_CURSOR, 6, L_DESCRIPTION);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_PREF_TP(L_FETCHED_ROWS) := L_PREF_TP;
      A_PREF_NAME(L_FETCHED_ROWS) := L_PREF_NAME;
      A_PREF_VALUE(L_FETCHED_ROWS) := L_PREF_VALUE;
      A_APPLICABLE_OBJ(L_FETCHED_ROWS) := L_APPLICABLE_OBJ;
      A_CATEGORY(L_FETCHED_ROWS) := L_CATEGORY;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_PREF_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_PREF_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   UNAPIGEN.LOGERROR('GetPref', SQLERRM);
   IF DBMS_SQL.IS_OPEN (L_PREF_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_PREF_CURSOR);
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETPREF;

FUNCTION GETUPPREF
(A_UP_IN            IN     NUMBER,                     
 A_PREF_NAME_IN     IN     VARCHAR2,                   
 A_UP               OUT    UNAPIGEN.LONG_TABLE_TYPE,   
 A_PREF_NAME        OUT    UNAPIGEN.VC20_TABLE_TYPE,   
 A_PREF_VALUE       OUT    UNAPIGEN.VC40_TABLE_TYPE,   
 A_INHERIT_PREF     OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_APPLICABLE_OBJ   OUT    UNAPIGEN.VC40_TABLE_TYPE,   
 A_CATEGORY         OUT    UNAPIGEN.VC40_TABLE_TYPE,   
 A_DESCRIPTION      OUT    UNAPIGEN.VC255_TABLE_TYPE,  
 A_NR_OF_ROWS       IN OUT NUMBER)                     
RETURN NUMBER IS



A_VERSION_IN        VARCHAR2(20);
L_PREF_NAME_IN      VARCHAR2(20);
L_UP                NUMBER(5);
L_PREF_NAME         VARCHAR2(20);
L_PREF_VALUE        VARCHAR2(40);
L_INHERIT_PREF      CHAR(1);
L_APPLICABLE_OBJ    VARCHAR2(40);
L_CATEGORY          VARCHAR2(40);
L_DESCRIPTION       VARCHAR2(255);
L_FOUND             BOOLEAN;




CURSOR L_PREF_CURSOR IS
   SELECT A.UP, A.PREF_NAME, A.PREF_VALUE, A.INHERIT_PREF
   FROM UTUPPREF A
   WHERE A.VERSION = NVL(A_VERSION_IN, A.VERSION)
     AND A.UP = NVL(A_UP_IN, A.UP)
     AND A.PREF_NAME LIKE L_PREF_NAME_IN
   UNION
   SELECT A.UP, B.PREF_NAME, B.PREF_VALUE, '1'
   FROM UTUP A, UTPREF B
   WHERE (A.UP, A.VERSION, B.PREF_NAME) NOT IN 
      (SELECT UP, VERSION, PREF_NAME FROM UTUPPREF
       WHERE VERSION = A.VERSION
         AND UP = A.UP)
     AND A.VERSION = NVL(A_VERSION_IN, A.VERSION)
     AND A.UP = NVL(A_UP_IN, A.UP)
     AND B.PREF_TP = 'up'
     AND B.PREF_NAME LIKE L_PREF_NAME_IN
   ORDER BY 1,2;

BEGIN

   
   A_VERSION_IN := UNVERSION.P_NO_VERSION;
   IF A_VERSION_IN IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   
   
   
   L_PREF_NAME_IN := NVL(A_PREF_NAME_IN, '%');

   OPEN L_PREF_CURSOR;
   FETCH L_PREF_CURSOR
   INTO L_UP, L_PREF_NAME, L_PREF_VALUE, L_INHERIT_PREF;
   L_FOUND := L_PREF_CURSOR%FOUND;

   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN NOT L_FOUND OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_UP(L_FETCHED_ROWS) := L_UP;
      A_PREF_NAME(L_FETCHED_ROWS) := L_PREF_NAME;
      A_PREF_VALUE(L_FETCHED_ROWS) := L_PREF_VALUE;
      A_INHERIT_PREF(L_FETCHED_ROWS) := L_INHERIT_PREF;

      L_SQL_STRING :=    'SELECT applicable_obj, category, description '
                      || 'FROM dd'||UNAPIGEN.P_DD||'.uvpref '
                      || 'WHERE pref_tp = ''up'' '
                      || 'AND pref_name = :l_pref_name';
      BEGIN
         EXECUTE IMMEDIATE L_SQL_STRING
         INTO L_APPLICABLE_OBJ, L_CATEGORY, L_DESCRIPTION
         USING L_PREF_NAME;
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
         
         L_APPLICABLE_OBJ := NULL;
         L_CATEGORY := NULL;
         L_DESCRIPTION := NULL;
      END;
      A_APPLICABLE_OBJ(L_FETCHED_ROWS) := L_APPLICABLE_OBJ;
      A_CATEGORY(L_FETCHED_ROWS) := L_CATEGORY;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         FETCH L_PREF_CURSOR
         INTO L_UP, L_PREF_NAME, L_PREF_VALUE, L_INHERIT_PREF;
         L_FOUND := L_PREF_CURSOR%FOUND;
      END IF;
   END LOOP;

   CLOSE L_PREF_CURSOR;

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   UNAPIGEN.LOGERROR('GetUpPref', SQLERRM);
   IF L_PREF_CURSOR%ISOPEN THEN
      CLOSE L_PREF_CURSOR;
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETUPPREF;

FUNCTION SAVEUPPREF
(A_UP             IN   NUMBER,                       
 A_PREF_NAME      IN   UNAPIGEN.VC20_TABLE_TYPE,     
 A_PREF_VALUE     IN   UNAPIGEN.VC40_TABLE_TYPE,     
 A_INHERIT_PREF   IN   UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_NR_OF_ROWS     IN   NUMBER,                       
 A_MODIFY_REASON  IN   VARCHAR2)                     
RETURN NUMBER IS

A_VERSION      VARCHAR2(20);
L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);
L_LOG_HS       CHAR(1);
L_ALLOW_MODIFY CHAR(1);
L_ACTIVE       CHAR(1);

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF (TRUNC(NVL(A_UP, -1)) - NVL(A_UP, 0)) <> 0 
      OR (NVL(A_UP, -1)) <= 0  THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UP;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('up', A_UP, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTUP
   SET ALLOW_MODIFY = '#'
   WHERE VERSION = A_VERSION
     AND UP = A_UP;

   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR ;
   END IF;

   DELETE FROM UTUPPREF
   WHERE VERSION = A_VERSION
     AND UP = A_UP;

   FOR L_SEQ IN 1..A_NR_OF_ROWS LOOP
      IF NVL(A_PREF_NAME(L_SEQ), ' ') = ' ' THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
      END IF;
      IF NVL(A_INHERIT_PREF(L_SEQ), ' ') NOT IN ('1', '0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INHERITFLAG;
         RAISE STPERROR;
      END IF;

      
      IF NVL(A_INHERIT_PREF(L_SEQ), ' ') = '0' THEN
         INSERT INTO UTUPPREF(UP, VERSION, PREF_NAME, PREF_VALUE, SEQ, INHERIT_PREF)
         (SELECT A_UP, A_VERSION, A_PREF_NAME(L_SEQ), A_PREF_VALUE(L_SEQ),
                 NVL(MAX(SEQ),0) + 1, A_INHERIT_PREF(L_SEQ)
          FROM UTUPPREF
          WHERE VERSION = A_VERSION
            AND UP = A_UP
            AND PREF_NAME = A_PREF_NAME(L_SEQ));
      END IF;
   END LOOP;

   L_EVENT_TP := 'UsedObjectsUpdated';
   L_EV_SEQ_NR := -1;
   L_RESULT :=
         UNAPIEV.INSERTEVENT('SaveUpPref', UNAPIGEN.P_EVMGR_NAME, 'up', A_UP, L_LC, 
                             L_LC_VERSION, L_SS, L_EVENT_TP, 'version='||A_VERSION,
                             L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF L_LOG_HS = '1' THEN
      INSERT INTO UTUPHS (UP, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                          WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES (A_UP, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
              'preferences of user profile "'||A_UP||'" are updated.', 
              CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveUpPref', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveUpPref'));
END SAVEUPPREF;

FUNCTION GETUPUSPREF
(A_UP_IN            IN     NUMBER,                     
 A_US_IN            IN     VARCHAR2,                   
 A_PREF_NAME_IN     IN     VARCHAR2,                   
 A_UP               OUT    UNAPIGEN.LONG_TABLE_TYPE,   
 A_US               OUT    UNAPIGEN.VC20_TABLE_TYPE,   
 A_PREF_NAME        OUT    UNAPIGEN.VC20_TABLE_TYPE,   
 A_PREF_VALUE       OUT    UNAPIGEN.VC40_TABLE_TYPE,   
 A_INHERIT_PREF     OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_NR_OF_ROWS       IN OUT NUMBER)                     
RETURN NUMBER IS

L_APPLICABLE_OBJ   UNAPIGEN.VC40_TABLE_TYPE;
L_CATEGORY         UNAPIGEN.VC40_TABLE_TYPE;
L_DESCRIPTION      UNAPIGEN.VC255_TABLE_TYPE;

BEGIN
   RETURN(GETUPUSPREF(A_UP_IN,
                      A_US_IN,
                      A_PREF_NAME_IN,
                      A_UP,
                      A_US,
                      A_PREF_NAME,
                      A_PREF_VALUE,
                      A_INHERIT_PREF,
                      L_APPLICABLE_OBJ,
                      L_CATEGORY,
                      L_DESCRIPTION,
                      A_NR_OF_ROWS));
END GETUPUSPREF;

FUNCTION GETUPUSPREF
(A_UP_IN            IN     NUMBER,                     
 A_US_IN            IN     VARCHAR2,                   
 A_PREF_NAME_IN     IN     VARCHAR2,                   
 A_UP               OUT    UNAPIGEN.LONG_TABLE_TYPE,   
 A_US               OUT    UNAPIGEN.VC20_TABLE_TYPE,   
 A_PREF_NAME        OUT    UNAPIGEN.VC20_TABLE_TYPE,   
 A_PREF_VALUE       OUT    UNAPIGEN.VC40_TABLE_TYPE,   
 A_INHERIT_PREF     OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_APPLICABLE_OBJ   OUT    UNAPIGEN.VC40_TABLE_TYPE,   
 A_CATEGORY         OUT    UNAPIGEN.VC40_TABLE_TYPE,   
 A_DESCRIPTION      OUT    UNAPIGEN.VC255_TABLE_TYPE,  
 A_NR_OF_ROWS       IN OUT NUMBER)                     
RETURN NUMBER IS
L_PREF_TP                 VARCHAR2(20);
BEGIN
   L_PREF_TP := 'up';
   RETURN(GETUPUSPREF(A_UP_IN,
                      A_US_IN,
                      L_PREF_TP,
                      A_PREF_NAME_IN,
                      A_UP,
                      A_US,
                      A_PREF_NAME,
                      A_PREF_VALUE,
                      A_INHERIT_PREF,
                      A_APPLICABLE_OBJ,
                      A_CATEGORY,
                      A_DESCRIPTION,
                      A_NR_OF_ROWS));
END GETUPUSPREF;

FUNCTION GETUPUSPREF
(A_UP_IN            IN     NUMBER,                     
 A_US_IN            IN     VARCHAR2,                   
 A_PREF_TP_IN       IN     VARCHAR2,                   
 A_PREF_NAME_IN     IN     VARCHAR2,                   
 A_UP               OUT    UNAPIGEN.LONG_TABLE_TYPE,   
 A_US               OUT    UNAPIGEN.VC20_TABLE_TYPE,   
 A_PREF_NAME        OUT    UNAPIGEN.VC20_TABLE_TYPE,   
 A_PREF_VALUE       OUT    UNAPIGEN.VC40_TABLE_TYPE,   
 A_INHERIT_PREF     OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_APPLICABLE_OBJ   OUT    UNAPIGEN.VC40_TABLE_TYPE,   
 A_CATEGORY         OUT    UNAPIGEN.VC40_TABLE_TYPE,   
 A_DESCRIPTION      OUT    UNAPIGEN.VC255_TABLE_TYPE,  
 A_NR_OF_ROWS       IN OUT NUMBER)                     
RETURN NUMBER IS



L_US_VERSION_IN     VARCHAR2(20);
A_VERSION_IN        VARCHAR2(20);
A_US_VERSION_IN     VARCHAR2(20);
L_US_IN             VARCHAR2(20);
L_PREF_TP_IN        VARCHAR2(20);
L_PREF_NAME_IN      VARCHAR2(20);
L_UP                NUMBER(5);
L_US                VARCHAR2(20);
L_PREF_NAME         VARCHAR2(20);
L_PREF_VALUE        VARCHAR2(40);
L_INHERIT_PREF      CHAR(1);
L_APPLICABLE_OBJ    VARCHAR2(40);
L_CATEGORY          VARCHAR2(40);
L_DESCRIPTION       VARCHAR2(255);
L_FOUND             BOOLEAN;




CURSOR L_PREF_CURSOR IS
   SELECT A.UP, A.US, A.PREF_NAME, A.PREF_VALUE, A.INHERIT_PREF
   FROM UTUPUSPREF A
   WHERE A.VERSION = NVL(A_VERSION_IN, A.VERSION)
     AND A.UP = NVL(A_UP_IN, A.UP)
     AND A.US_VERSION LIKE L_US_VERSION_IN
     AND A.US LIKE L_US_IN
     AND A.PREF_NAME IN (SELECT PREF_NAME FROM UTPREF WHERE PREF_TP = L_PREF_TP_IN)
     AND A.PREF_NAME LIKE L_PREF_NAME_IN
   UNION
   SELECT A.UP, C.US, A.PREF_NAME, A.PREF_VALUE, '1'
   FROM UTUPPREF A, UTUPUS C
   WHERE A.VERSION = C.VERSION
     AND A.UP = C.UP
     AND C.VERSION = NVL(A_VERSION_IN, C.VERSION)
     AND C.UP = NVL(A_UP_IN, C.UP)
     AND C.US_VERSION LIKE L_US_VERSION_IN
     AND C.US LIKE L_US_IN
     AND A.PREF_NAME LIKE L_PREF_NAME_IN
     AND A.PREF_NAME IN (SELECT PREF_NAME FROM UTPREF WHERE PREF_TP = L_PREF_TP_IN)
     AND A.PREF_NAME NOT IN
              (SELECT PREF_NAME
               FROM UTUPUSPREF
               WHERE VERSION = C.VERSION
                 AND UP = C.UP
                 AND US_VERSION = C.US_VERSION
                 AND US = C.US)
   UNION 
   SELECT C.UP, C.US, B.PREF_NAME, B.PREF_VALUE, '1' 
   FROM UTPREF B, UTUPUS C
   WHERE B.PREF_NAME NOT IN 
      (SELECT PREF_NAME
       FROM UTUPUSPREF
       WHERE VERSION = C.VERSION
         AND UP = C.UP
         AND US_VERSION = C.US_VERSION
         AND US = C.US
       UNION
       SELECT PREF_NAME
       FROM UTUPPREF
       WHERE VERSION = C.VERSION
         AND UP = C.UP)
     AND C.VERSION = NVL(A_VERSION_IN, C.VERSION)
     AND C.UP = NVL(A_UP_IN, C.UP)
     AND C.US_VERSION LIKE L_US_VERSION_IN
     AND C.US LIKE L_US_IN
     AND B.PREF_TP LIKE L_PREF_TP_IN
     AND B.PREF_NAME LIKE L_PREF_NAME_IN
   ORDER BY 1,2,3;

         
CURSOR L_PREF_XML_CURSOR IS
   SELECT A.UP, A.US, 
   DECODE (SUBSTR (A.PREF_NAME, LENGTH (A.PREF_NAME)),
                     CHR(10), 
                     SUBSTR (A.PREF_NAME, 1, LENGTH (A.PREF_NAME) - 1),
                     CHR(13), 
                     SUBSTR (A.PREF_NAME, 1, LENGTH (A.PREF_NAME) - 1),
                     A.PREF_NAME
                 ) PREF_NAME,
   A.PREF_VALUE, A.INHERIT_PREF
   FROM UTUPUSPREF A
   WHERE A.VERSION = NVL(A_VERSION_IN, A.VERSION)
     AND A.UP = NVL(A_UP_IN, A.UP)
     AND A.US_VERSION LIKE L_US_VERSION_IN
     AND A.US LIKE L_US_IN
     AND  A.PREF_NAME
     IN (SELECT 
                 DECODE (L_PREF_TP_IN,
                              'xml_imp', PREF_NAME || CHR(10),
                              'xml_exp', PREF_NAME || CHR(13),
                              PREF_NAME
                               )
     FROM UTPREF WHERE PREF_TP = L_PREF_TP_IN)
     AND  A.PREF_NAME LIKE
                      DECODE (L_PREF_TP_IN,
                              'xml_imp', L_PREF_NAME_IN || CHR(10),
                              'xml_exp', L_PREF_NAME_IN || CHR(13),
                              L_PREF_NAME_IN
                               )
    UNION 
   SELECT C.UP, C.US, B.PREF_NAME, B.PREF_VALUE, '1' 
   FROM UTPREF B, UTUPUS C
   WHERE B.PREF_NAME NOT IN 
      (SELECT 
      DECODE (SUBSTR (PREF_NAME, LENGTH (PREF_NAME)),
                     CHR(10), 
                     SUBSTR (PREF_NAME, 1, LENGTH (PREF_NAME) - 1),
                     CHR(13), 
                     SUBSTR (PREF_NAME, 1, LENGTH (PREF_NAME) - 1),
                     PREF_NAME
                 ) PREF_NAME
       FROM UTUPUSPREF
       WHERE VERSION = C.VERSION
         AND UP = C.UP
         AND US_VERSION = C.US_VERSION
         AND US = C.US
         AND SUBSTR (PREF_NAME, LENGTH (PREF_NAME)) LIKE 
                      DECODE (L_PREF_TP_IN,
                              'xml_imp', CHR(10),
                              'xml_exp',  CHR(13),
                             ''
                               )
        )
     AND C.VERSION = NVL(A_VERSION_IN, C.VERSION)
     AND C.UP = NVL(A_UP_IN, C.UP)
     AND C.US_VERSION LIKE L_US_VERSION_IN
     AND C.US LIKE L_US_IN
     AND B.PREF_TP LIKE L_PREF_TP_IN
     AND B.PREF_NAME LIKE L_PREF_NAME_IN
   ORDER BY 1,2,3;
         

BEGIN

   
   A_VERSION_IN := UNVERSION.P_NO_VERSION;
   IF A_VERSION_IN IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;

   A_US_VERSION_IN := UNVERSION.P_NO_VERSION;
   IF A_US_VERSION_IN IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   
   
   
   L_US_IN := NVL(A_US_IN, '%');
   L_US_VERSION_IN := NVL(A_US_VERSION_IN, '%');
   L_PREF_NAME_IN := NVL(A_PREF_NAME_IN, '%');
   L_PREF_TP_IN := NVL(A_PREF_TP_IN, 'up');

   IF L_PREF_TP_IN NOT IN ('xml_exp', 'xml_imp') THEN

      OPEN L_PREF_CURSOR;
      FETCH L_PREF_CURSOR
      INTO L_UP, L_US, L_PREF_NAME, L_PREF_VALUE, L_INHERIT_PREF;
      L_FOUND := L_PREF_CURSOR%FOUND;

      L_FETCHED_ROWS := 0;

      LOOP
         EXIT WHEN NOT L_FOUND OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

         L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

         A_UP(L_FETCHED_ROWS) := L_UP;
         A_US(L_FETCHED_ROWS) := L_US;
         A_PREF_NAME(L_FETCHED_ROWS) := L_PREF_NAME;
         A_PREF_VALUE(L_FETCHED_ROWS) := L_PREF_VALUE;
         A_INHERIT_PREF(L_FETCHED_ROWS) := L_INHERIT_PREF;

         L_SQL_STRING :=    'SELECT applicable_obj, category, description '
                         || 'FROM dd'||UNAPIGEN.P_DD||'.uvpref '
                         || 'WHERE pref_tp = :l_pref_tp_in '
                         || 'AND pref_name = :l_pref_name';
         BEGIN
            EXECUTE IMMEDIATE L_SQL_STRING
            INTO L_APPLICABLE_OBJ, L_CATEGORY, L_DESCRIPTION
            USING L_PREF_TP_IN, L_PREF_NAME;
         EXCEPTION
         WHEN NO_DATA_FOUND THEN
            
            L_APPLICABLE_OBJ := NULL;
            L_CATEGORY := NULL;
            L_DESCRIPTION := NULL;
         END;
         A_APPLICABLE_OBJ(L_FETCHED_ROWS) := L_APPLICABLE_OBJ;
         A_CATEGORY(L_FETCHED_ROWS) := L_CATEGORY;
         A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;

         IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
            FETCH L_PREF_CURSOR
            INTO L_UP, L_US, L_PREF_NAME, L_PREF_VALUE, L_INHERIT_PREF;
            L_FOUND := L_PREF_CURSOR%FOUND;
         END IF;
      END LOOP;

      CLOSE L_PREF_CURSOR;

      
   ELSE
      OPEN L_PREF_XML_CURSOR;
      FETCH L_PREF_XML_CURSOR
      INTO L_UP, L_US, L_PREF_NAME, L_PREF_VALUE, L_INHERIT_PREF;
      L_FOUND := L_PREF_XML_CURSOR%FOUND;
      L_FETCHED_ROWS := 0;
      LOOP
         EXIT WHEN NOT L_FOUND OR L_FETCHED_ROWS >= A_NR_OF_ROWS;
         L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
         A_UP(L_FETCHED_ROWS) := L_UP;
         A_US(L_FETCHED_ROWS) := L_US;
         A_PREF_NAME(L_FETCHED_ROWS) := L_PREF_NAME;
         A_PREF_VALUE(L_FETCHED_ROWS) := L_PREF_VALUE;
         A_INHERIT_PREF(L_FETCHED_ROWS) := L_INHERIT_PREF;
         A_APPLICABLE_OBJ(L_FETCHED_ROWS) := NULL;
         A_CATEGORY(L_FETCHED_ROWS) := NULL;
         A_DESCRIPTION(L_FETCHED_ROWS) := NULL;
         IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
            FETCH L_PREF_XML_CURSOR
            INTO L_UP, L_US, L_PREF_NAME, L_PREF_VALUE, L_INHERIT_PREF;
            L_FOUND := L_PREF_XML_CURSOR%FOUND;
         END IF;
      END LOOP;
      CLOSE L_PREF_XML_CURSOR;
   END IF;
         
   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   UNAPIGEN.LOGERROR('GetUpUsPref',SQLERRM);
   IF L_PREF_CURSOR%ISOPEN THEN
      CLOSE L_PREF_CURSOR;
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETUPUSPREF;

FUNCTION GETUPUSTKPREF
(A_UP               IN     NUMBER,                     
 A_US               IN     VARCHAR2,                   
 A_TK_TP            IN     VARCHAR2,                   
 A_TK               IN     VARCHAR2,                   
 A_PREF_NAME        OUT    UNAPIGEN.VC20_TABLE_TYPE,   
 A_PREF_VALUE       OUT    UNAPIGEN.VC40_TABLE_TYPE,   
 A_NR_OF_ROWS       IN OUT NUMBER)                     
RETURN NUMBER IS

L_APPLICABLE_OBJ    UNAPIGEN.VC40_TABLE_TYPE;
L_CATEGORY          UNAPIGEN.VC40_TABLE_TYPE;
L_DESCRIPTION       UNAPIGEN.VC255_TABLE_TYPE;

BEGIN
   RETURN(GETUPUSTKPREF(A_UP,
                        A_US,
                        A_TK_TP,
                        A_TK,
                        A_PREF_NAME,
                        A_PREF_VALUE,
                        L_APPLICABLE_OBJ,
                        L_CATEGORY,
                        L_DESCRIPTION,
                        A_NR_OF_ROWS));
END GETUPUSTKPREF;

FUNCTION GETUPUSTKPREF
(A_UP               IN     NUMBER,                     
 A_US               IN     VARCHAR2,                   
 A_TK_TP            IN     VARCHAR2,                   
 A_TK               IN     VARCHAR2,                   
 A_PREF_NAME        OUT    UNAPIGEN.VC20_TABLE_TYPE,   
 A_PREF_VALUE       OUT    UNAPIGEN.VC40_TABLE_TYPE,   
 A_APPLICABLE_OBJ   OUT    UNAPIGEN.VC40_TABLE_TYPE,   
 A_CATEGORY         OUT    UNAPIGEN.VC40_TABLE_TYPE,   
 A_DESCRIPTION      OUT    UNAPIGEN.VC255_TABLE_TYPE,  
 A_NR_OF_ROWS       IN OUT NUMBER)                     
RETURN NUMBER IS

A_VERSION           VARCHAR2(20);
A_US_VERSION        VARCHAR2(20);
L_PREF_NAME         VARCHAR2(20);
L_PREF_VALUE        VARCHAR2(40);
L_APPLICABLE_OBJ    VARCHAR2(40);
L_CATEGORY          VARCHAR2(40);
L_DESCRIPTION       VARCHAR2(255);
L_FOUND             BOOLEAN;




CURSOR L_PREF_CURSOR (C_UP IN NUMBER, C_VERSION IN VARCHAR2, C_US IN VARCHAR2, C_US_VERSION IN VARCHAR2,
                      C_TK_TP IN VARCHAR2, C_TK IN VARCHAR2) IS
   SELECT TKPREF.PREF_NAME, TKPREF.PREF_VALUE
   FROM UTTKPREF TKPREF
   WHERE TKPREF.TK_TP = C_TK_TP
     AND TKPREF.TK = C_TK
   UNION
   SELECT USPREF.PREF_NAME, USPREF.PREF_VALUE
   FROM UTUPUSPREF USPREF
   WHERE USPREF.VERSION = C_VERSION
     AND USPREF.UP = C_UP
     AND USPREF.US_VERSION = C_US_VERSION
     AND USPREF.US = C_US
     AND USPREF.PREF_NAME NOT IN
        (SELECT TKPREF.PREF_NAME
         FROM UTTKPREF TKPREF
         WHERE TKPREF.TK_TP = C_TK_TP
           AND TKPREF.TK = C_TK)
   UNION
   SELECT UPPREF.PREF_NAME, UPPREF.PREF_VALUE
   FROM UTUPPREF UPPREF, UTUPUS UPUS
   WHERE UPPREF.VERSION = UPUS.VERSION
     AND UPPREF.UP = UPUS.UP
     AND UPUS.VERSION = C_VERSION
     AND UPUS.UP = C_UP
     AND UPUS.US_VERSION = C_US_VERSION
     AND UPUS.US = C_US
     AND UPPREF.PREF_NAME NOT IN
        (SELECT TKPREF.PREF_NAME
         FROM UTTKPREF TKPREF
         WHERE TKPREF.TK_TP = C_TK_TP
           AND TKPREF.TK = C_TK
         UNION
         SELECT USPREF.PREF_NAME
         FROM UTUPUSPREF USPREF
         WHERE USPREF.VERSION = C_VERSION
           AND USPREF.UP = C_UP
           AND USPREF.US_VERSION = C_US_VERSION
           AND USPREF.US = C_US)
   UNION
   SELECT PREF.PREF_NAME, PREF.PREF_VALUE
   FROM UTPREF PREF
   WHERE PREF_TP = 'up'
     AND PREF.PREF_NAME NOT IN 
        (SELECT TKPREF.PREF_NAME
         FROM UTTKPREF TKPREF
         WHERE TKPREF.TK_TP = C_TK_TP
           AND TKPREF.TK = C_TK
         UNION
         SELECT USPREF.PREF_NAME
         FROM UTUPUSPREF USPREF
         WHERE USPREF.VERSION = C_VERSION
           AND USPREF.UP = C_UP
           AND USPREF.US_VERSION = C_US_VERSION
           AND USPREF.US = C_US
         UNION
         SELECT UPPREF.PREF_NAME
         FROM UTUPPREF UPPREF
         WHERE UPPREF.VERSION = C_VERSION
           AND UPPREF.UP = C_UP);

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;

   A_US_VERSION := UNVERSION.P_NO_VERSION;
   IF A_US_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_UP, -1) = -1 OR
      NVL(A_US, ' ') = ' ' OR
      NVL(A_TK_TP, ' ') = ' ' OR
      NVL(A_TK, ' ') = ' ' THEN
      RETURN(UNAPIGEN.DBERR_NOOBJID);
   END IF;

   OPEN L_PREF_CURSOR(A_UP, A_VERSION, A_US, A_US_VERSION, A_TK_TP, A_TK);
   FETCH L_PREF_CURSOR
   INTO L_PREF_NAME, L_PREF_VALUE;
   L_FOUND := L_PREF_CURSOR%FOUND;

   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN NOT L_FOUND OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_PREF_NAME(L_FETCHED_ROWS) := L_PREF_NAME;
      A_PREF_VALUE(L_FETCHED_ROWS) := L_PREF_VALUE;

      L_SQL_STRING :=    'SELECT applicable_obj, category, description '
                      || 'FROM dd'||UNAPIGEN.P_DD||'.uvpref '
                      || 'WHERE pref_tp = ''up'' '
                      || 'AND pref_name = :l_pref_name';
      BEGIN
         EXECUTE IMMEDIATE L_SQL_STRING
         INTO L_APPLICABLE_OBJ, L_CATEGORY, L_DESCRIPTION
         USING L_PREF_NAME;
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
         
         L_APPLICABLE_OBJ := NULL;
         L_CATEGORY := NULL;
         L_DESCRIPTION := NULL;
      END;
      A_APPLICABLE_OBJ(L_FETCHED_ROWS) := L_APPLICABLE_OBJ;
      A_CATEGORY(L_FETCHED_ROWS) := L_CATEGORY;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         FETCH L_PREF_CURSOR
         INTO L_PREF_NAME, L_PREF_VALUE;
         L_FOUND := L_PREF_CURSOR%FOUND;
      END IF;
   END LOOP;

   CLOSE L_PREF_CURSOR;

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   UNAPIGEN.LOGERROR('GetUpUsTkPref',SQLERRM);
   IF L_PREF_CURSOR%ISOPEN THEN
      CLOSE L_PREF_CURSOR;
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETUPUSTKPREF;

FUNCTION SAVEUPUSPREF
(A_UP             IN   NUMBER,                       
 A_US             IN   VARCHAR2,                     
 A_PREF_NAME      IN   UNAPIGEN.VC20_TABLE_TYPE,     
 A_PREF_VALUE     IN   UNAPIGEN.VC40_TABLE_TYPE,     
 A_INHERIT_PREF   IN   UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_NR_OF_ROWS     IN   NUMBER,                       
 A_MODIFY_REASON  IN   VARCHAR2)                     
RETURN NUMBER IS
L_PREF_TP                 VARCHAR2(20);
BEGIN
   L_PREF_TP := 'up';
   RETURN(SAVEUPUSPREF(A_UP,
                       A_US,
                       L_PREF_TP,
                       A_PREF_NAME,
                       A_PREF_VALUE,
                       A_INHERIT_PREF,
                       A_NR_OF_ROWS,
                       A_MODIFY_REASON));
END SAVEUPUSPREF;

FUNCTION SAVEUPUSPREF
(A_UP             IN   NUMBER,                       
 A_US             IN   VARCHAR2,                     
 A_PREF_TP_IN     IN   VARCHAR2,                     
 A_PREF_NAME      IN   UNAPIGEN.VC20_TABLE_TYPE,     
 A_PREF_VALUE     IN   UNAPIGEN.VC40_TABLE_TYPE,     
 A_INHERIT_PREF   IN   UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_NR_OF_ROWS     IN   NUMBER,                       
 A_MODIFY_REASON  IN   VARCHAR2)                     
RETURN NUMBER IS

A_VERSION      VARCHAR2(20);
A_US_VERSION   VARCHAR2(20);
L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);
L_LOG_HS       CHAR(1);
L_ALLOW_MODIFY CHAR(1);
L_ACTIVE       CHAR(1);
L_PREF_TP_IN   VARCHAR2(20);
L_PREF_NAME VARCHAR2(20);

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;

   A_US_VERSION := UNVERSION.P_NO_VERSION;
   IF A_US_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF (TRUNC(NVL(A_UP, -1)) - NVL(A_UP, 0)) <> 0 
      OR (NVL(A_UP, -1)) <= 0  THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UP;
      RAISE STPERROR;
   END IF;

   IF NVL(A_US, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;
   L_PREF_TP_IN := NVL(A_PREF_TP_IN, 'up');
   
   IF L_PREF_TP_IN NOT IN ('xml_exp', 'xml_imp') THEN
      L_RET_CODE := UNAPIGEN.GETAUTHORISATION('ad', A_US, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                              L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
         RAISE STPERROR;
      END IF;
   

      UPDATE UTAD
      SET ALLOW_MODIFY = '#'
      WHERE VERSION = A_US_VERSION
        AND AD = A_US
        AND IS_USER IN ('1', '2');

      IF SQL%ROWCOUNT < 1 THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
         RAISE STPERROR ;
      END IF;
   END IF;
   
   DELETE FROM UTUPUSPREF
   WHERE VERSION = A_VERSION
     AND UP = A_UP
     AND US_VERSION = A_US_VERSION
     AND US = A_US
     AND PREF_NAME
     IN (SELECT 
     
            DECODE (L_PREF_TP_IN,
                              'xml_imp', PREF_NAME || CHR(10),
                              'xml_exp', PREF_NAME || CHR(13),
                              PREF_NAME
                               )
     
     FROM UTPREF WHERE PREF_TP LIKE L_PREF_TP_IN);

   FOR L_SEQ IN 1..A_NR_OF_ROWS LOOP
      IF NVL(A_PREF_NAME(L_SEQ), ' ') = ' ' THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
      END IF;
      IF NVL(A_INHERIT_PREF(L_SEQ), ' ') NOT IN ('1', '0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INHERITFLAG;
         RAISE STPERROR;
      END IF;

      
      IF NVL(A_INHERIT_PREF(L_SEQ), ' ') = '0' THEN
         
        IF L_PREF_TP_IN NOT IN ('xml_exp', 'xml_imp') THEN
             L_PREF_NAME := A_PREF_NAME(L_SEQ);
        ELSIF (L_PREF_TP_IN = 'xml_imp') THEN
             L_PREF_NAME := A_PREF_NAME(L_SEQ)||CHR(10);
        ELSIF (L_PREF_TP_IN = 'xml_exp') THEN
             L_PREF_NAME := A_PREF_NAME(L_SEQ)||CHR(13);
        END IF;
         
         INSERT INTO UTUPUSPREF(UP, VERSION, US, US_VERSION, PREF_NAME, PREF_VALUE, SEQ, INHERIT_PREF)
         (SELECT A_UP, A_VERSION, A_US, A_US_VERSION, L_PREF_NAME, A_PREF_VALUE(L_SEQ),
                 NVL(MAX(SEQ),0) + 1, A_INHERIT_PREF(L_SEQ)
          FROM UTUPUSPREF
          WHERE VERSION = A_VERSION
            AND UP = A_UP
            AND US_VERSION = A_US_VERSION
            AND US = A_US
            AND PREF_NAME = A_PREF_NAME(L_SEQ));
      END IF;
   END LOOP;

   L_EVENT_TP := 'UsedObjectsUpdated';
   L_EV_SEQ_NR := -1;
   L_RESULT :=
         UNAPIEV.INSERTEVENT('SaveUpUsPref', UNAPIGEN.P_EVMGR_NAME, 'ad', A_US, L_LC, 
                             L_LC_VERSION, L_SS, L_EVENT_TP, 'version='||A_US_VERSION,
                             L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF L_LOG_HS = '1' THEN
      INSERT INTO UTADHS (AD, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                          WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      SELECT T.AD, T.VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
             'preferences of user "'||A_US||'" in user profile "'||A_UP||'" are updated.', 
             CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR
      FROM UTAD T
      WHERE T.VERSION = A_US_VERSION
        AND T.AD = A_US
        AND T.IS_USER IN ('1', '2');
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveUpUsPref', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveUpUsPref'));
END SAVEUPUSPREF;

FUNCTION GETUPTASKLIST
(A_UP_IN             IN     NUMBER,                   
 A_TK_TP_IN          IN     VARCHAR2,                 
 A_UP                OUT    UNAPIGEN.LONG_TABLE_TYPE, 
 A_TK_TP             OUT    UNAPIGEN.VC20_TABLE_TYPE, 
 A_TK                OUT    UNAPIGEN.VC20_TABLE_TYPE, 
 A_DESCRIPTION       OUT    UNAPIGEN.VC40_TABLE_TYPE, 
 A_IS_ENABLED        OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_NR_OF_ROWS        IN OUT NUMBER)                   
RETURN NUMBER IS



A_VERSION_IN        VARCHAR2(20);
L_TK_TP_IN          VARCHAR2(20);
L_UP                NUMBER(5);
L_SEQ               NUMBER(5);
L_TK_TP             VARCHAR2(20);
L_TK                VARCHAR2(20);
L_DESCRIPTION       VARCHAR2(40);
L_IS_ENABLED        CHAR(1);
L_FOUND             BOOLEAN;
L_TK_CURSOR         INTEGER;

BEGIN

   
   A_VERSION_IN := UNVERSION.P_NO_VERSION;
   IF A_VERSION_IN IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   
   
   
   L_TK_TP_IN := NVL(A_TK_TP_IN, '%');

   L_TK_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT a.up, a.seq, a.tk_tp, a.tk, b.description, a.is_enabled ' || 
      'FROM utuptk a, dd' || UNAPIGEN.P_DD || '.uvtk b ' || 
      'WHERE a.tk_tp = b.tk_tp ' || 
      'AND a.tk = b.tk ' || 
      'AND a.version = NVL(:a_version_in, a.version) ' || 
      'AND a.up = NVL(:a_up_in, a.up) ' || 
      'AND a.tk_tp LIKE :l_tk_tp_in ' || 
      'UNION ' || 
      'SELECT a.up, 999, b.tk_tp, b.tk, b.description, ''0''  ' || 
      'FROM utup a, dd' || UNAPIGEN.P_DD || '.uvtk b ' || 
      'WHERE (a.up, b.tk_tp, b.tk) NOT IN  ' || 
      '(SELECT up, tk_tp, tk FROM utuptk ' || 
      'WHERE up = a.up) ' || 
      'AND a.version = NVL(:a_version_in, a.version) ' || 
      'AND a.up = NVL(:a_up_in, a.up) ' || 
      'AND b.tk_tp LIKE :l_tk_tp_in ' || 
      'ORDER BY 1,2,3' ;

   DBMS_SQL.PARSE(L_TK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.BIND_VARIABLE(L_TK_CURSOR, ':a_version_in', A_VERSION_IN);
   DBMS_SQL.BIND_VARIABLE(L_TK_CURSOR, ':a_up_in', A_UP_IN);
   DBMS_SQL.BIND_VARIABLE(L_TK_CURSOR, ':l_tk_tp_in', L_TK_TP_IN);

   DBMS_SQL.DEFINE_COLUMN(L_TK_CURSOR, 1, L_UP);
   DBMS_SQL.DEFINE_COLUMN(L_TK_CURSOR, 2, L_SEQ);
   DBMS_SQL.DEFINE_COLUMN(L_TK_CURSOR, 3, L_TK_TP, 20);
   DBMS_SQL.DEFINE_COLUMN(L_TK_CURSOR, 4, L_TK, 20);
   DBMS_SQL.DEFINE_COLUMN(L_TK_CURSOR, 5, L_DESCRIPTION, 40);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_TK_CURSOR, 6, L_IS_ENABLED, 1);

   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_TK_CURSOR);

   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT=0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      DBMS_SQL.COLUMN_VALUE( L_TK_CURSOR, 1, L_UP);
      DBMS_SQL.COLUMN_VALUE( L_TK_CURSOR, 2, L_SEQ);
      DBMS_SQL.COLUMN_VALUE( L_TK_CURSOR, 3, L_TK_TP);
      DBMS_SQL.COLUMN_VALUE( L_TK_CURSOR, 4, L_TK);
      DBMS_SQL.COLUMN_VALUE( L_TK_CURSOR, 5, L_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE_CHAR( L_TK_CURSOR, 6, L_IS_ENABLED);

      A_UP(L_FETCHED_ROWS) := L_UP;
      A_TK_TP(L_FETCHED_ROWS) := L_TK_TP;
      A_TK(L_FETCHED_ROWS) := L_TK;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;
      A_IS_ENABLED(L_FETCHED_ROWS) := L_IS_ENABLED;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_TK_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_TK_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   UNAPIGEN.LOGERROR('GetUpTaskList', SQLERRM);
   IF DBMS_SQL.IS_OPEN(L_TK_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_TK_CURSOR);
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETUPTASKLIST;

FUNCTION GETUPTASKDETAILS
(A_UP_IN             IN     NUMBER,                   
 A_TK_TP_IN          IN     VARCHAR2,                 
 A_TK_IN             IN     VARCHAR2,                 
 A_UP                OUT    UNAPIGEN.LONG_TABLE_TYPE, 
 A_TK_TP             OUT    UNAPIGEN.VC20_TABLE_TYPE, 
 A_TK                OUT    UNAPIGEN.VC20_TABLE_TYPE, 
 A_COL_ID            OUT    UNAPIGEN.VC40_TABLE_TYPE, 
 A_COL_TP            OUT    UNAPIGEN.VC40_TABLE_TYPE, 
 A_DISP_TITLE        OUT    UNAPIGEN.VC40_TABLE_TYPE, 
 A_DEF_VAL           OUT    UNAPIGEN.VC40_TABLE_TYPE, 
 A_HIDDEN            OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_IS_PROTECTED      OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_MANDATORY         OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_AUTO_REFRESH      OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_COL_ASC           OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_VALUE_LIST_TP     OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_DSP_LEN           OUT    UNAPIGEN.NUM_TABLE_TYPE,  
 A_INHERIT_TK        OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_NR_OF_ROWS        IN OUT NUMBER)                   
RETURN NUMBER IS



A_VERSION_IN        VARCHAR2(20);
L_TK_TP_IN           VARCHAR2(20);
L_TK_IN              VARCHAR2(20);
L_UP                 NUMBER(5);
L_TK_TP              VARCHAR2(20);
L_TK                 VARCHAR2(20);
L_COL_ID             VARCHAR2(40);
L_COL_TP             VARCHAR2(40);
L_OBJECT_TP          VARCHAR2(2);
L_DISP_TITLE         VARCHAR2(40);
L_DEF_VAL            VARCHAR2(40);
L_HIDDEN             CHAR(1);
L_IS_PROTECTED       CHAR(1);
L_MANDATORY          CHAR(1);
L_AUTO_REFRESH       CHAR(1);
L_COL_ASC            CHAR(1);
L_VALUE_LIST_TP      CHAR(1);
L_DSP_LEN            NUMBER(3);
L_INHERIT_TK         CHAR(1);
L_SEQ                NUMBER;
L_FOUND              BOOLEAN;
L_GK_CURSOR          INTEGER;
L_OT_CURSOR          INTEGER;







CURSOR L_TK_CURSOR IS
   SELECT A.UP, A.TK_TP, A.TK, B.SEQ, B.COL_ID, B.COL_TP,
          A.DEF_VAL, A.HIDDEN, A.IS_PROTECTED, A.MANDATORY,
          A.AUTO_REFRESH, A.COL_ASC, B.VALUE_LIST_TP, A.DSP_LEN, A.INHERIT_TK
   FROM UTUPTKDETAILS A, UTTK B
   WHERE A.VERSION = NVL(A_VERSION_IN, A.VERSION)
     AND A.UP = NVL(A_UP_IN, A.UP) 
     AND A.TK_TP LIKE L_TK_TP_IN
     AND A.TK LIKE L_TK_IN
     AND A.TK_TP = B.TK_TP
     AND A.TK = B.TK
     AND A.COL_ID = B.COL_ID
     AND A.COL_TP = B.COL_TP
   UNION
   SELECT A.UP, B.TK_TP, B.TK, B.SEQ, B.COL_ID, B.COL_TP,
          B.DEF_VAL, B.HIDDEN, B.IS_PROTECTED, B.MANDATORY,
          B.AUTO_REFRESH, B.COL_ASC, B.VALUE_LIST_TP, B.DSP_LEN, '1'
   FROM UTUPTK A, UTTK B
   WHERE (B.TK_TP, B.TK, B.COL_ID, B.COL_TP) NOT IN 
      (SELECT TK_TP, TK, COL_ID, COL_TP
       FROM UTUPTKDETAILS
       WHERE VERSION = A.VERSION
         AND UP = A.UP
         AND TK_TP LIKE L_TK_TP_IN
         AND TK LIKE L_TK_IN)
     AND A.VERSION = NVL(A_VERSION_IN, A.VERSION)
     AND A.UP = NVL(A_UP_IN, A.UP)
     AND A.TK_TP LIKE L_TK_TP_IN
     AND A.TK LIKE L_TK_IN
     AND A.TK_TP = B.TK_TP
     AND A.TK = B.TK
   ORDER BY 1,2,4;

BEGIN

   
   A_VERSION_IN := UNVERSION.P_NO_VERSION;
   IF A_VERSION_IN IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   
   
   
   L_TK_TP_IN := NVL(A_TK_TP_IN, '%');
   L_TK_IN := NVL(A_TK_IN, '%');

   L_GK_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_OT_CURSOR := DBMS_SQL.OPEN_CURSOR;

   OPEN L_TK_CURSOR;
   FETCH L_TK_CURSOR
   INTO L_UP, L_TK_TP, L_TK, L_SEQ, L_COL_ID, L_COL_TP,
       L_DEF_VAL, L_HIDDEN, L_IS_PROTECTED, L_MANDATORY, L_AUTO_REFRESH,
       L_COL_ASC, L_VALUE_LIST_TP, L_DSP_LEN, L_INHERIT_TK;
   L_FOUND := L_TK_CURSOR%FOUND;

   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN NOT L_FOUND OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_UP(L_FETCHED_ROWS) := L_UP;
      A_TK_TP(L_FETCHED_ROWS) := L_TK_TP;
      A_TK(L_FETCHED_ROWS) := L_TK;
      A_COL_ID(L_FETCHED_ROWS) := L_COL_ID;
      A_COL_TP(L_FETCHED_ROWS) := L_COL_TP;
      A_DEF_VAL(L_FETCHED_ROWS) := L_DEF_VAL;
      A_HIDDEN(L_FETCHED_ROWS) := L_HIDDEN;
      A_IS_PROTECTED(L_FETCHED_ROWS) := L_IS_PROTECTED;
      A_MANDATORY(L_FETCHED_ROWS) := L_MANDATORY;
      A_AUTO_REFRESH(L_FETCHED_ROWS) := L_AUTO_REFRESH;
      A_COL_ASC(L_FETCHED_ROWS) := L_COL_ASC;
    A_VALUE_LIST_TP(L_FETCHED_ROWS) := L_VALUE_LIST_TP;
      A_DSP_LEN(L_FETCHED_ROWS) := L_DSP_LEN;
      A_INHERIT_TK(L_FETCHED_ROWS) := L_INHERIT_TK;

      L_OBJECT_TP := SUBSTR(L_COL_TP,1, 2);
      IF SUBSTR(L_COL_TP, 3, 2) = 'gk' THEN
         L_SQL_STRING := 'SELECT description '||
                         'FROM dd'||UNAPIGEN.P_DD||'.uvgk' || L_OBJECT_TP ||
                         ' WHERE version_is_current = ''1'' '||
                         'AND gk = ''' || REPLACE(L_COL_ID, '''', '''''') || ''''; 
         DBMS_SQL.PARSE(L_GK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 1, L_DISP_TITLE, 40);
         L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_GK_CURSOR);
         DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 1, L_DISP_TITLE);
         A_DISP_TITLE(L_FETCHED_ROWS) := L_DISP_TITLE;
      ELSE
         L_SQL_STRING := 'SELECT disp_title '||
                         'FROM dd'||UNAPIGEN.P_DD||'.uvotdetails' ||
                         ' WHERE col_tp = ''' || L_OBJECT_TP || '''' ||
                         '   AND col_id = ''' || L_COL_ID || '''';
         DBMS_SQL.PARSE(L_OT_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         DBMS_SQL.DEFINE_COLUMN(L_OT_CURSOR, 1, L_DISP_TITLE, 40);
         L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_OT_CURSOR);
         DBMS_SQL.COLUMN_VALUE(L_OT_CURSOR, 1, L_DISP_TITLE);
         A_DISP_TITLE(L_FETCHED_ROWS) := L_DISP_TITLE;
      END IF;


      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         FETCH L_TK_CURSOR
         INTO L_UP, L_TK_TP, L_TK, L_SEQ, L_COL_ID, L_COL_TP,
              L_DEF_VAL, L_HIDDEN, L_IS_PROTECTED, L_MANDATORY, L_AUTO_REFRESH,
              L_COL_ASC, L_VALUE_LIST_TP, L_DSP_LEN, L_INHERIT_TK;
         L_FOUND := L_TK_CURSOR%FOUND;
      END IF;
   END LOOP;

   CLOSE L_TK_CURSOR;
 
   DBMS_SQL.CLOSE_CURSOR(L_GK_CURSOR);
   DBMS_SQL.CLOSE_CURSOR(L_OT_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   UNAPIGEN.LOGERROR('GetUpTaskDetails', SQLERRM);
   IF L_TK_CURSOR%ISOPEN THEN
      CLOSE L_TK_CURSOR;
   END IF;
   IF DBMS_SQL.IS_OPEN(L_GK_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_GK_CURSOR);
   END IF;
   IF DBMS_SQL.IS_OPEN(L_OT_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_OT_CURSOR);
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETUPTASKDETAILS;

FUNCTION GETUPTASKDETAILS
(A_UP_IN             IN     NUMBER,                      
 A_TK_TP_IN          IN     VARCHAR2,                    
 A_TK_IN             IN     VARCHAR2,                    
 A_UP                OUT    UNAPIGEN.LONG_TABLE_TYPE,    
 A_TK_TP             OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_TK                OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_COL_ID            OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_COL_TP            OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_DISP_TITLE        OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_OPERATOR          OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_DEF_VAL           OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_ANDOR             OUT    UNAPIGEN.VC3_TABLE_TYPE,     
 A_HIDDEN            OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_IS_PROTECTED      OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_MANDATORY         OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_AUTO_REFRESH      OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_COL_ASC           OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_VALUE_LIST_TP     OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_OPERATOR_PROTECT  OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_ANDOR_PROTECT     OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_DSP_LEN           OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_INHERIT_TK        OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_NR_OF_ROWS        IN OUT NUMBER)                      
RETURN NUMBER IS
BEGIN
   RETURN(UNAPIGEN.DBERR_SUCCESS);
END GETUPTASKDETAILS;

FUNCTION GETUPUSTASKLIST
(A_UP_IN             IN     NUMBER,                   
 A_US_IN             IN     VARCHAR2,                 
 A_TK_TP_IN          IN     VARCHAR2,                 
 A_UP                OUT    UNAPIGEN.LONG_TABLE_TYPE, 
 A_US                OUT    UNAPIGEN.VC20_TABLE_TYPE, 
 A_TK_TP             OUT    UNAPIGEN.VC20_TABLE_TYPE, 
 A_TK                OUT    UNAPIGEN.VC20_TABLE_TYPE, 
 A_DESCRIPTION       OUT    UNAPIGEN.VC40_TABLE_TYPE, 
 A_IS_ENABLED        OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_NR_OF_ROWS        IN OUT NUMBER)                   
RETURN NUMBER IS



L_US_VERSION_IN     VARCHAR2(20);
A_VERSION_IN        VARCHAR2(20);
A_US_VERSION_IN     VARCHAR2(20);
L_US_IN             VARCHAR2(20);
L_TK_TP_IN          VARCHAR2(20);
L_UP                NUMBER(5);
L_US                VARCHAR2(20);
L_SEQ               NUMBER(5);
L_TK_TP             VARCHAR2(20);
L_TK                VARCHAR2(20);
L_DESCRIPTION       VARCHAR2(40);
L_IS_ENABLED        CHAR(1);
L_FOUND             BOOLEAN;
L_TK_CURSOR         INTEGER ;

BEGIN

   
   A_VERSION_IN := UNVERSION.P_NO_VERSION;
   IF A_VERSION_IN IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;

   A_US_VERSION_IN := UNVERSION.P_NO_VERSION;
   IF A_US_VERSION_IN IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   
   
   
   L_US_IN := NVL(A_US_IN, '%');
   L_US_VERSION_IN := NVL(A_US_VERSION_IN, '%');
   L_TK_TP_IN := NVL(A_TK_TP_IN, '%');

   L_TK_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT a.up, a.us, a.seq, a.tk_tp, a.tk, b.description, a.is_enabled ' || 
      'FROM utupustk a, dd' || UNAPIGEN.P_DD || '.uvtk b ' || 
      'WHERE a.tk_tp = b.tk_tp ' || 
      'AND a.tk = b.tk ' || 
      'AND a.version = NVL(:a_version_in, a.version) ' || 
      'AND a.up = NVL(:a_up_in, a.up) ' || 
      'AND a.us_version LIKE :l_us_version_in ' || 
      'AND a.us LIKE :l_us_in ' || 
      'AND a.tk_tp LIKE :l_tk_tp_in ' || 
      'UNION ' || 
      'SELECT a.up, a.us, 999, c.tk_tp, c.tk, b.description, c.is_enabled ' || 
      'FROM utupus a, dd' || UNAPIGEN.P_DD || '.uvtk b, utuptk c ' || 
      'WHERE (c.tk_tp, c.tk) NOT IN  ' || 
      '(SELECT tk_tp, tk ' || 
      'FROM utupustk ' || 
      'WHERE version = a.version ' || 
      'AND up = a.up ' || 
      'AND us_version = a.us_version ' || 
      'AND us = a.us) ' || 
      'AND a.version = NVL(:a_version_in, a.version) ' || 
      'AND a.up = NVL(:a_up_in, a.up) ' || 
      'AND a.us_version LIKE :l_us_version_in ' || 
      'AND a.us LIKE :l_us_in ' || 
      'AND c.tk_tp LIKE :l_tk_tp_in ' || 
      'AND a.version = c.version ' || 
      'AND a.up = c.up ' || 
      'AND b.tk_tp = c.tk_tp ' || 
      'AND b.tk = c.tk ' || 
      'ORDER BY 4,5' ;

   DBMS_SQL.PARSE(L_TK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.BIND_VARIABLE(L_TK_CURSOR, ':a_version_in', A_VERSION_IN);
   DBMS_SQL.BIND_VARIABLE(L_TK_CURSOR, ':a_up_in', A_UP_IN);
   DBMS_SQL.BIND_VARIABLE(L_TK_CURSOR, ':l_us_version_in', L_US_VERSION_IN);
   DBMS_SQL.BIND_VARIABLE(L_TK_CURSOR, ':l_us_in', L_US_IN);
   DBMS_SQL.BIND_VARIABLE(L_TK_CURSOR, ':l_tk_tp_in', L_TK_TP_IN);

   DBMS_SQL.DEFINE_COLUMN(L_TK_CURSOR, 1, L_UP);
   DBMS_SQL.DEFINE_COLUMN(L_TK_CURSOR, 2, L_US, 20);
   DBMS_SQL.DEFINE_COLUMN(L_TK_CURSOR, 3, L_SEQ);
   DBMS_SQL.DEFINE_COLUMN(L_TK_CURSOR, 4, L_TK_TP, 20);
   DBMS_SQL.DEFINE_COLUMN(L_TK_CURSOR, 5, L_TK, 20);
   DBMS_SQL.DEFINE_COLUMN(L_TK_CURSOR, 6, L_DESCRIPTION, 40);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_TK_CURSOR, 7, L_IS_ENABLED, 1);


   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_TK_CURSOR);

   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT=0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      DBMS_SQL.COLUMN_VALUE( L_TK_CURSOR, 1, L_UP);
      DBMS_SQL.COLUMN_VALUE( L_TK_CURSOR, 2, L_US);
      DBMS_SQL.COLUMN_VALUE( L_TK_CURSOR, 3, L_SEQ);
      DBMS_SQL.COLUMN_VALUE( L_TK_CURSOR, 4, L_TK_TP);
      DBMS_SQL.COLUMN_VALUE( L_TK_CURSOR, 5, L_TK);
      DBMS_SQL.COLUMN_VALUE( L_TK_CURSOR, 6, L_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE_CHAR( L_TK_CURSOR, 7, L_IS_ENABLED);

      A_UP(L_FETCHED_ROWS) := L_UP;
      A_US(L_FETCHED_ROWS) := L_US;
      A_TK_TP(L_FETCHED_ROWS) := L_TK_TP;
      A_TK(L_FETCHED_ROWS) := L_TK;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;
      A_IS_ENABLED(L_FETCHED_ROWS) := L_IS_ENABLED;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_TK_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_TK_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   UNAPIGEN.LOGERROR('GetUpUsTaskList', SQLERRM);
   IF DBMS_SQL.IS_OPEN(L_TK_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_TK_CURSOR);
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETUPUSTASKLIST;

FUNCTION INTERNALGETUPUSTASKDETAILS                            
(A_PERFORM_TILDE_SUBSTITUTION IN     BOOLEAN,                  
 A_UP_IN                      IN     NUMBER,                   
 A_US_IN                      IN     VARCHAR2,                 
 A_TK_TP_IN                   IN     VARCHAR2,                 
 A_TK_IN                      IN     VARCHAR2,                 
 A_UP                         OUT    UNAPIGEN.LONG_TABLE_TYPE, 
 A_US                         OUT    UNAPIGEN.VC20_TABLE_TYPE, 
 A_TK_TP                      OUT    UNAPIGEN.VC20_TABLE_TYPE, 
 A_TK                         OUT    UNAPIGEN.VC20_TABLE_TYPE, 
 A_COL_ID                     OUT    UNAPIGEN.VC40_TABLE_TYPE, 
 A_COL_TP                     OUT    UNAPIGEN.VC40_TABLE_TYPE, 
 A_DISP_TITLE                 OUT    UNAPIGEN.VC40_TABLE_TYPE, 
 A_DEF_VAL                    OUT    UNAPIGEN.VC40_TABLE_TYPE, 
 A_HIDDEN                     OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_IS_PROTECTED               OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_MANDATORY                  OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_AUTO_REFRESH               OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_COL_ASC                    OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_VALUE_LIST_TP              OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_DSP_LEN                    OUT    UNAPIGEN.NUM_TABLE_TYPE,  
 A_INHERIT_TK                 OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_NR_OF_ROWS                 IN OUT NUMBER)                   
RETURN NUMBER IS



L_US_VERSION_IN     VARCHAR2(20);
A_VERSION_IN        VARCHAR2(20);
A_US_VERSION_IN     VARCHAR2(20);
L_US_IN              VARCHAR2(20);
L_TK_TP_IN           VARCHAR2(20);
L_TK_IN              VARCHAR2(20);
L_UP                 NUMBER(5);
A_VERSION            VARCHAR2(20);
L_US                 VARCHAR2(20);
A_US_VERSION         VARCHAR2(20);
L_TK_TP              VARCHAR2(20);
L_TK                 VARCHAR2(20);
L_COL_ID             VARCHAR2(40);
L_COL_TP             VARCHAR2(40);
L_OBJECT_TP          VARCHAR2(2);
L_DISP_TITLE         VARCHAR2(40);
L_DEF_VAL            VARCHAR2(40);
L_HIDDEN             CHAR(1);
L_COL_ASC            CHAR(1);
L_VALUE_LIST_TP      CHAR(1);
L_INHERIT_TK         CHAR(1);
L_MANDATORY          CHAR(1);
L_AUTO_REFRESH       CHAR(1);
L_IS_PROTECTED       CHAR(1);
L_DSP_LEN            NUMBER(3);
L_SEQ                NUMBER;
L_FOUND              BOOLEAN;
L_TITLE_CURSOR       INTEGER;
L_ROW                INTEGER;
L_DEFVAL_CURSOR      INTEGER;
L_NEW_VALUE          VARCHAR2(40);
L_FUNCTION_CALL      BOOLEAN;
L_PROPERTY           VARCHAR2(40);
L_LENGTH_PROP        INTEGER;








CURSOR L_TK_CURSOR IS
   SELECT A.UP, A.US, A.TK_TP, A.TK, B.SEQ, B.COL_ID, B.COL_TP,
          A.DEF_VAL, A.HIDDEN, A.COL_ASC, B.VALUE_LIST_TP, A.INHERIT_TK, A.MANDATORY, A.AUTO_REFRESH, A.IS_PROTECTED, A.DSP_LEN
   FROM UTUPUSTKDETAILS A, UTTK B
   WHERE A.VERSION = NVL(A_VERSION_IN, A.VERSION)
     AND A.UP = NVL(A_UP_IN, A.UP)
     AND A.US_VERSION LIKE L_US_VERSION_IN
     AND A.US LIKE L_US_IN
     AND A.TK_TP LIKE L_TK_TP_IN
     AND A.TK LIKE L_TK_IN
     AND A.TK_TP = B.TK_TP
     AND A.TK = B.TK
     AND A.COL_ID = B.COL_ID
     AND A.COL_TP = B.COL_TP
     
     
     AND (A.TK, A.TK_TP) NOT IN
     (SELECT Z.TK, Z.TK_TP
      FROM UTUPUSTK Z
      WHERE Z.US = A.US
      AND Z.UP = A.UP
      AND IS_ENABLED = '0')
   UNION
   SELECT A.UP, C.US, A.TK_TP, A.TK, B.SEQ, B.COL_ID, B.COL_TP,
          A.DEF_VAL, A.HIDDEN, A.COL_ASC, B.VALUE_LIST_TP, A.INHERIT_TK, A.MANDATORY, A.AUTO_REFRESH, A.IS_PROTECTED, A.DSP_LEN
   FROM UTUPTKDETAILS A, UTTK B, UTUPUS C
   WHERE C.VERSION = NVL(A_VERSION_IN, C.VERSION)
     AND C.UP = NVL(A_UP_IN, C.UP)
     AND C.US_VERSION LIKE L_US_VERSION_IN
     AND C.US LIKE L_US_IN
     AND C.VERSION = A.VERSION
     AND C.UP = A.UP
     AND A.TK_TP LIKE L_TK_TP_IN
     AND A.TK LIKE L_TK_IN
     AND A.TK_TP = B.TK_TP
     AND A.TK = B.TK
     AND A.COL_ID = B.COL_ID
     AND A.COL_TP = B.COL_TP
     AND (B.TK_TP, B.TK, B.COL_ID, B.COL_TP) NOT IN 
         (SELECT TK_TP, TK, COL_ID, COL_TP
          FROM UTUPUSTKDETAILS
          WHERE VERSION = A.VERSION
            AND UP = A.UP
            AND US_VERSION = C.US_VERSION
            AND US = C.US
            AND TK_TP LIKE L_TK_TP_IN
            AND TK LIKE L_TK_IN)
     
     
     AND (A.TK, A.TK_TP) NOT IN
   (SELECT Z.TK, Z.TK_TP
    FROM UTUPUSTK Z
    WHERE Z.US = C.US
    AND Z.UP = A.UP
    AND IS_ENABLED = '0')
   UNION
   SELECT A.UP, C.US, B.TK_TP, B.TK, B.SEQ, B.COL_ID, B.COL_TP,
          B.DEF_VAL, B.HIDDEN, B.COL_ASC, B.VALUE_LIST_TP, '1', B.MANDATORY, B.AUTO_REFRESH, B.IS_PROTECTED, B.DSP_LEN
   FROM UTUPTK A, UTTK B, UTUPUS C
   WHERE C.VERSION = NVL(A_VERSION_IN, C.VERSION)
     AND C.UP = NVL(A_UP_IN, C.UP)
     AND C.US_VERSION LIKE L_US_VERSION_IN
     AND C.US LIKE L_US_IN
     AND C.VERSION = A.VERSION
     AND C.UP = A.UP
     AND (B.TK_TP, B.TK, B.COL_ID, B.COL_TP) NOT IN 
         (SELECT TK_TP, TK, COL_ID, COL_TP
          FROM UTUPTKDETAILS
          WHERE VERSION = A.VERSION
            AND UP = A.UP
            AND TK_TP LIKE L_TK_TP_IN
            AND TK LIKE L_TK_IN
          UNION
          SELECT TK_TP, TK, COL_ID, COL_TP
          FROM UTUPUSTKDETAILS
          WHERE VERSION = A.VERSION
            AND UP = A.UP
            AND US_VERSION = C.US_VERSION
            AND US = C.US
            AND TK_TP LIKE L_TK_TP_IN
            AND TK LIKE L_TK_IN)
     AND A.VERSION = NVL(A_VERSION_IN, A.VERSION)
     AND A.UP = NVL(A_UP_IN, A.UP)
     AND A.TK_TP LIKE L_TK_TP_IN
     AND A.TK LIKE L_TK_IN
     AND A.TK_TP = B.TK_TP
     AND A.TK = B.TK
     
     
     AND (A.TK, A.TK_TP) NOT IN
   (SELECT Z.TK, Z.TK_TP
    FROM UTUPUSTK Z
    WHERE Z.US = C.US
    AND Z.UP = A.UP
    AND IS_ENABLED = '0')
   ORDER BY 1,2,4,5; 


BEGIN

   
   A_VERSION_IN := UNVERSION.P_NO_VERSION;
   IF A_VERSION_IN IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;

   A_US_VERSION_IN := UNVERSION.P_NO_VERSION;
   IF A_US_VERSION_IN IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;

   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;

   A_US_VERSION := UNVERSION.P_NO_VERSION;
   IF A_US_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   
   
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NROFROWS;
      RAISE STPERROR;
   END IF;

   
   
   
   L_US_IN := NVL(A_US_IN, '%');
   L_US_VERSION_IN := NVL(A_US_VERSION_IN, '%');
   L_TK_TP_IN := NVL(A_TK_TP_IN, '%');
   L_TK_IN := NVL(A_TK_IN, '%');

   L_TITLE_CURSOR := DBMS_SQL.OPEN_CURSOR;

   OPEN L_TK_CURSOR;
   FETCH L_TK_CURSOR
   INTO L_UP, L_US, L_TK_TP, L_TK, L_SEQ, L_COL_ID, L_COL_TP,
       L_DEF_VAL, L_HIDDEN, L_COL_ASC, L_VALUE_LIST_TP, L_INHERIT_TK, L_MANDATORY,
       L_AUTO_REFRESH, L_IS_PROTECTED, L_DSP_LEN;
   L_FOUND := L_TK_CURSOR%FOUND;

   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN NOT L_FOUND OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_UP(L_FETCHED_ROWS) := L_UP;
      A_US(L_FETCHED_ROWS) := L_US;
      A_TK_TP(L_FETCHED_ROWS) := L_TK_TP;
      A_TK(L_FETCHED_ROWS) := L_TK;
      A_COL_ID(L_FETCHED_ROWS) := L_COL_ID;
      A_COL_TP(L_FETCHED_ROWS) := L_COL_TP;
      A_DEF_VAL(L_FETCHED_ROWS) := L_DEF_VAL;
      A_HIDDEN(L_FETCHED_ROWS) := L_HIDDEN;
      A_COL_ASC(L_FETCHED_ROWS) := L_COL_ASC;
      A_VALUE_LIST_TP(L_FETCHED_ROWS) := L_VALUE_LIST_TP;
      A_INHERIT_TK(L_FETCHED_ROWS) := L_INHERIT_TK;
      A_MANDATORY(L_FETCHED_ROWS) := L_MANDATORY;
      A_AUTO_REFRESH(L_FETCHED_ROWS) := L_AUTO_REFRESH;
      A_IS_PROTECTED(L_FETCHED_ROWS) := L_IS_PROTECTED;
      A_DSP_LEN(L_FETCHED_ROWS) := L_DSP_LEN;

      L_OBJECT_TP := SUBSTR(L_COL_TP,1, 2);
      IF SUBSTR(L_COL_TP, 3, 2) = 'gk' THEN
         L_SQL_STRING := 'SELECT description '||
                         'FROM dd' || UNAPIGEN.P_DD || '.uvgk' || L_OBJECT_TP ||
                         ' WHERE version_is_current = ''1'' '||
                         'AND gk = ''' || REPLACE(L_COL_ID, '''', '''''') || ''''; 
         DBMS_SQL.PARSE(L_TITLE_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         DBMS_SQL.DEFINE_COLUMN(L_TITLE_CURSOR, 1, L_DISP_TITLE, 40);
         L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_TITLE_CURSOR);
         DBMS_SQL.COLUMN_VALUE(L_TITLE_CURSOR, 1, L_DISP_TITLE);
         A_DISP_TITLE(L_FETCHED_ROWS) := L_DISP_TITLE;
      ELSE
         L_SQL_STRING := 'SELECT disp_title '||
                         'FROM dd'||UNAPIGEN.P_DD||'.uvotdetails' ||
                         ' WHERE col_tp = ''' || L_OBJECT_TP || '''' ||
                         '   AND col_id = ''' || L_COL_ID || '''';
         DBMS_SQL.PARSE(L_TITLE_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         DBMS_SQL.DEFINE_COLUMN(L_TITLE_CURSOR, 1, L_DISP_TITLE, 40);
         L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_TITLE_CURSOR);
         DBMS_SQL.COLUMN_VALUE(L_TITLE_CURSOR, 1, L_DISP_TITLE);
         A_DISP_TITLE(L_FETCHED_ROWS) := L_DISP_TITLE;
      END IF;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         FETCH L_TK_CURSOR
         INTO L_UP, L_US, L_TK_TP, L_TK, L_SEQ, L_COL_ID, L_COL_TP,
             L_DEF_VAL, L_HIDDEN, L_COL_ASC, L_VALUE_LIST_TP, L_INHERIT_TK, L_MANDATORY,
             L_AUTO_REFRESH, L_IS_PROTECTED, L_DSP_LEN;
         L_FOUND := L_TK_CURSOR%FOUND;
      END IF;
   END LOOP;

   CLOSE L_TK_CURSOR;

   DBMS_SQL.CLOSE_CURSOR(L_TITLE_CURSOR);
   
   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;
   
   IF L_RET_CODE = UNAPIGEN.DBERR_SUCCESS AND
      A_PERFORM_TILDE_SUBSTITUTION THEN
      
      UNAPIUPP.P_TK_TAB.DELETE;
      UNAPIUPP.P_TK_NR_OF_ROWS := 0;

      
      
      FOR L_X IN 1..A_NR_OF_ROWS LOOP

         UNAPIUPP.P_TK_TAB(L_X).UP := A_UP(L_X);
         UNAPIUPP.P_TK_TAB(L_X).VERSION := A_VERSION;
         UNAPIUPP.P_TK_TAB(L_X).US := A_US(L_X);
         UNAPIUPP.P_TK_TAB(L_X).US_VERSION := A_US_VERSION;
         UNAPIUPP.P_TK_TAB(L_X).TK_TP := A_TK_TP(L_X);
         UNAPIUPP.P_TK_TAB(L_X).TK := A_TK(L_X);
         UNAPIUPP.P_TK_TAB(L_X).COL_ID := A_COL_ID(L_X);
         UNAPIUPP.P_TK_TAB(L_X).COL_TP := A_COL_TP(L_X);
         
         UNAPIUPP.P_TK_TAB(L_X).DEF_VAL := A_DEF_VAL(L_X);
         UNAPIUPP.P_TK_TAB(L_X).HIDDEN := A_HIDDEN(L_X);
         UNAPIUPP.P_TK_TAB(L_X).IS_PROTECTED := A_IS_PROTECTED(L_X);
         UNAPIUPP.P_TK_TAB(L_X).MANDATORY := A_MANDATORY(L_X);
         UNAPIUPP.P_TK_TAB(L_X).AUTO_REFRESH := A_AUTO_REFRESH(L_X);
         UNAPIUPP.P_TK_TAB(L_X).COL_ASC := A_COL_ASC(L_X);
         UNAPIUPP.P_TK_TAB_VALUE_LIST_TYPE(L_X) := A_VALUE_LIST_TP(L_X);
         UNAPIUPP.P_TK_TAB(L_X).DSP_LEN := A_DSP_LEN(L_X);
         UNAPIUPP.P_TK_TAB(L_X).INHERIT_TK := A_INHERIT_TK(L_X);
         
      END LOOP;
      UNAPIUPP.P_TK_NR_OF_ROWS := A_NR_OF_ROWS;
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      


      L_SQL_STRING := NULL;

      L_DEFVAL_CURSOR := DBMS_SQL.OPEN_CURSOR;
      FOR L_ROW IN 1..A_NR_OF_ROWS LOOP
         IF UNAPIUPP.P_TK_TAB(L_ROW).TK_TP NOT IN ('chlist') THEN 
            IF SUBSTR(UNAPIUPP.P_TK_TAB(L_ROW).DEF_VAL, 1, 1) = '~' AND
               SUBSTR(UNAPIUPP.P_TK_TAB(L_ROW).DEF_VAL, -1, 1) = '~' THEN

               L_SQL_STRING := NULL;
               L_NEW_VALUE := NULL;
               L_FUNCTION_CALL := FALSE;
               L_SQL_STRING := NULL;

               IF SUBSTR(UNAPIUPP.P_TK_TAB(L_ROW).DEF_VAL, 1, 4) = '~us@' THEN
                  L_LENGTH_PROP := LENGTH(UNAPIUPP.P_TK_TAB(L_ROW).DEF_VAL)-4;
                  L_PROPERTY := SUBSTR( SUBSTR(UNAPIUPP.P_TK_TAB(L_ROW).DEF_VAL, 5), 1, L_LENGTH_PROP-1);

                  L_SQL_STRING := 'SELECT '|| L_PROPERTY || 
                                  ' FROM dd'||UNAPIGEN.P_DD||'.uvad ' ||
                                  'WHERE version_is_current = ''1'' '||
                                  'AND ad = '''||REPLACE(UNAPIGEN.P_USER, '''', '''''') || ''''; 

               ELSIF SUBSTR(UNAPIUPP.P_TK_TAB(L_ROW).DEF_VAL, 1, 4) = '~up@' THEN
                  L_LENGTH_PROP := LENGTH(UNAPIUPP.P_TK_TAB(L_ROW).DEF_VAL)-4;
                  L_PROPERTY := SUBSTR( SUBSTR(UNAPIUPP.P_TK_TAB(L_ROW).DEF_VAL, 5), 1, L_LENGTH_PROP-1);

                  L_SQL_STRING := 'SELECT '|| L_PROPERTY || 
                                  ' FROM dd'||UNAPIGEN.P_DD||'.uvup ' ||
                                  'WHERE version_is_current = ''1'' '||
                                  'AND up = '|| UNAPIGEN.P_CURRENT_UP; 

               ELSIF SUBSTR(UNAPIUPP.P_TK_TAB(L_ROW).DEF_VAL, 1, 6) = '~usau@' THEN
                  L_LENGTH_PROP := LENGTH(UNAPIUPP.P_TK_TAB(L_ROW).DEF_VAL)-6;
                  L_PROPERTY := SUBSTR( SUBSTR(UNAPIUPP.P_TK_TAB(L_ROW).DEF_VAL, 7), 1, L_LENGTH_PROP-1);

                  L_SQL_STRING := 'SELECT adau.value '||
                                  'FROM dd'||UNAPIGEN.P_DD||'.uvadau adau, dd'||UNAPIGEN.P_DD||'.uvad ad ' ||
                                  'WHERE ad.version_is_current = ''1'' '||
                                  'AND adau.version = ad.version '||
                                  'AND adau.ad = ad.ad '||
                                  'AND adau.ad = '''|| REPLACE(UNAPIGEN.P_USER, '''', '''''') || ''' ' || 
                                  'AND adau.au = '''|| REPLACE(L_PROPERTY, '''', '''''') || ''' ' || 
                                  'ORDER BY adau.auseq';

               ELSIF SUBSTR(UNAPIUPP.P_TK_TAB(L_ROW).DEF_VAL, 1, 6) = '~upau@' THEN
                  L_LENGTH_PROP := LENGTH(UNAPIUPP.P_TK_TAB(L_ROW).DEF_VAL)-6;
                  L_PROPERTY := SUBSTR( SUBSTR(UNAPIUPP.P_TK_TAB(L_ROW).DEF_VAL, 7), 1, L_LENGTH_PROP-1);

                  L_SQL_STRING := 'SELECT upau.value '||
                                  'FROM dd'||UNAPIGEN.P_DD||'.uvupau upau, dd'||UNAPIGEN.P_DD||'.uvup up ' ||
                                  'WHERE up.version_is_current = ''1'' '||
                                  'AND upau.version = up.version '||
                                  'AND upau.up = up.up '||
                                  'AND upau.up = '||UNAPIGEN.P_CURRENT_UP  || 
                                  ' AND upau.au = '''|| REPLACE(L_PROPERTY, '''', '''''') || 
                                  ''' ORDER BY upau.auseq';

               ELSIF SUBSTR(UNAPIUPP.P_TK_TAB(L_ROW).DEF_VAL, 1, 2) = '~=' THEN
                  L_LENGTH_PROP := LENGTH(UNAPIUPP.P_TK_TAB(L_ROW).DEF_VAL)-2;
                  L_PROPERTY := SUBSTR( SUBSTR(UNAPIUPP.P_TK_TAB(L_ROW).DEF_VAL, 3), 1, L_LENGTH_PROP-1);

                  L_SQL_STRING := 'BEGIN :l_new_value := '||L_PROPERTY||'; END;';
                  L_FUNCTION_CALL := TRUE;
               END IF;

               IF L_SQL_STRING IS NOT NULL THEN
                  BEGIN
                     DBMS_SQL.PARSE(L_DEFVAL_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
                     IF L_FUNCTION_CALL THEN
                        DBMS_SQL.BIND_VARIABLE(L_DEFVAL_CURSOR, ':l_new_value', L_NEW_VALUE, 40);
                        L_RESULT := DBMS_SQL.EXECUTE(L_DEFVAL_CURSOR);
                        DBMS_SQL.VARIABLE_VALUE(L_DEFVAL_CURSOR, ':l_new_value', L_NEW_VALUE);                     
                     ELSE               
                        DBMS_SQL.DEFINE_COLUMN(L_DEFVAL_CURSOR, 1, L_NEW_VALUE, 40);
                        L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_DEFVAL_CURSOR);
                        IF L_RESULT > 0 THEN
                           DBMS_SQL.COLUMN_VALUE(L_DEFVAL_CURSOR, 1, L_NEW_VALUE);
                        ELSE
                           RAISE NO_DATA_FOUND;
                        END IF;
                     END IF;

                     
                     UNAPIUPP.P_TK_TAB(L_ROW).DEF_VAL := L_NEW_VALUE;
                     A_DEF_VAL(L_ROW) := L_NEW_VALUE;

                  EXCEPTION
                  WHEN OTHERS THEN
                     
                     NULL;
   
   
   
   
   
   
   
   

                  END;
               END IF;
            END IF;
         END IF;
      END LOOP;
      DBMS_SQL.CLOSE_CURSOR(L_DEFVAL_CURSOR);
      
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN   
      UNAPIGEN.LOGERROR('GetUpUsTaskDetails', SQLERRM);
   END IF;



   IF L_SQL_STRING IS NOT NULL THEN
      UNAPIGEN.LOGERROR('GetUpUsTaskDetails', L_SQL_STRING);
   END IF;
   IF L_TK_CURSOR%ISOPEN THEN
      CLOSE L_TK_CURSOR;
   END IF;
   IF DBMS_SQL.IS_OPEN(L_TITLE_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_TITLE_CURSOR);
   END IF;
   IF DBMS_SQL.IS_OPEN(L_DEFVAL_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_DEFVAL_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'GetUpUsTaskDetails'));
END INTERNALGETUPUSTASKDETAILS;

FUNCTION INTERNALGETUPUSTASKDETAILS                            
(A_PERFORM_TILDE_SUBSTITUTION IN     BOOLEAN,                  
 A_UP_IN                      IN     NUMBER,                   
 A_US_IN                      IN     VARCHAR2,                 
 A_TK_TP_IN                   IN     VARCHAR2,                 
 A_TK_IN                      IN     VARCHAR2,                 
 A_UP                         OUT    UNAPIGEN.LONG_TABLE_TYPE, 
 A_US                         OUT    UNAPIGEN.VC20_TABLE_TYPE, 
 A_TK_TP                      OUT    UNAPIGEN.VC20_TABLE_TYPE, 
 A_TK                         OUT    UNAPIGEN.VC20_TABLE_TYPE, 
 A_DESCRIPTION                OUT    UNAPIGEN.VC40_TABLE_TYPE, 
 A_COL_ID                     OUT    UNAPIGEN.VC40_TABLE_TYPE, 
 A_COL_TP                     OUT    UNAPIGEN.VC40_TABLE_TYPE, 
 A_DISP_TITLE                 OUT    UNAPIGEN.VC40_TABLE_TYPE, 
 A_OPERATOR                   OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_DEF_VAL                    OUT    UNAPIGEN.VC40_TABLE_TYPE, 
 A_ANDOR                      OUT    UNAPIGEN.VC3_TABLE_TYPE, 
 A_HIDDEN                     OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_IS_PROTECTED               OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_MANDATORY                  OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_AUTO_REFRESH               OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_COL_ASC                    OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_VALUE_LIST_TP              OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_OPERATOR_PROTECT           OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_ANDOR_PROTECT              OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_DSP_LEN                    OUT    UNAPIGEN.NUM_TABLE_TYPE,  
 A_INHERIT_TK                 OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_NR_OF_ROWS                 IN OUT NUMBER)                   
RETURN NUMBER IS



L_US_VERSION_IN     VARCHAR2(20);
A_VERSION_IN        VARCHAR2(20);
A_US_VERSION_IN     VARCHAR2(20);
L_US_IN              VARCHAR2(20);
L_TK_TP_IN           VARCHAR2(20);
L_TK_IN              VARCHAR2(20);
L_UP                 NUMBER(5);
A_VERSION            VARCHAR2(20);
L_US                 VARCHAR2(20);
A_US_VERSION         VARCHAR2(20);
L_TK_TP              VARCHAR2(20);
L_TK                 VARCHAR2(20);
L_DESCRIPTION        VARCHAR2(40);
L_COL_ID             VARCHAR2(40);
L_COL_TP             VARCHAR2(40);
L_OBJECT_TP          VARCHAR2(2);
L_DSP_TITLE          VARCHAR2(40);
L_OPERATOR           VARCHAR2(20);
L_DEF_VAL            VARCHAR2(40);
L_ANDOR              VARCHAR2(3);
L_HIDDEN             CHAR(1);
L_COL_ASC            CHAR(1);
L_VALUE_LIST_TP      CHAR(1);
L_INHERIT_TK         CHAR(1);
L_MANDATORY          CHAR(1);
L_AUTO_REFRESH       CHAR(1);
L_IS_PROTECTED       CHAR(1);
L_OPERATOR_PROTECT   CHAR(1);
L_ANDOR_PROTECT      CHAR(1);
L_DSP_LEN            NUMBER(3);
L_SEQ                NUMBER;
L_FOUND              BOOLEAN;
L_TITLE_CURSOR       INTEGER;
L_ROW                INTEGER;
L_DEFVAL_CURSOR      INTEGER;
L_NEW_VALUE          VARCHAR2(40);
L_FUNCTION_CALL      BOOLEAN;
L_PROPERTY           VARCHAR2(40);
L_LENGTH_PROP        INTEGER;








CURSOR L_TK_CURSOR IS
   SELECT A.UP, A.US, A.TK_TP, A.TK, B.SEQ, B.DESCRIPTION, B.COL_ID, B.COL_TP, B.DSP_TITLE, B.OPERAT,
          A.DEF_VAL, B.ANDOR, A.HIDDEN, A.COL_ASC, B.VALUE_LIST_TP, A.INHERIT_TK, A.MANDATORY, A.AUTO_REFRESH, A.IS_PROTECTED,B.OPERAT_PROTECT,B.ANDOR_PROTECT, A.DSP_LEN
   FROM UTUPUSTKDETAILS A, UTTK B
   WHERE A.VERSION = NVL(A_VERSION_IN, A.VERSION)
     AND A.UP = NVL(A_UP_IN, A.UP)
     AND A.US_VERSION LIKE L_US_VERSION_IN
     AND A.US LIKE L_US_IN
     AND A.TK_TP LIKE L_TK_TP_IN
     AND A.TK LIKE L_TK_IN
     AND A.TK_TP = B.TK_TP
     AND A.TK = B.TK
     AND A.COL_ID = B.COL_ID
     AND A.COL_TP = B.COL_TP
     
     
     AND (A.TK, A.TK_TP) NOT IN
        (SELECT Z.TK, Z.TK_TP
         FROM UTUPUSTK Z
         WHERE Z.US = A.US
         AND Z.UP = A.UP
         AND IS_ENABLED = '0')
   UNION
   SELECT A.UP, C.US, A.TK_TP, A.TK, B.SEQ, B.DESCRIPTION, B.COL_ID, B.COL_TP, B.DSP_TITLE, B.OPERAT,
          A.DEF_VAL, B.ANDOR, A.HIDDEN, A.COL_ASC, B.VALUE_LIST_TP, A.INHERIT_TK, A.MANDATORY, A.AUTO_REFRESH, A.IS_PROTECTED, B.OPERAT_PROTECT,B.ANDOR_PROTECT, A.DSP_LEN
   FROM UTUPTKDETAILS A, UTTK B, UTUPUS C
   WHERE C.VERSION = NVL(A_VERSION_IN, C.VERSION)
     AND C.UP = NVL(A_UP_IN, C.UP)
     AND C.US_VERSION LIKE L_US_VERSION_IN
     AND C.US LIKE L_US_IN
     AND C.VERSION = A.VERSION
     AND C.UP = A.UP
     AND A.TK_TP LIKE L_TK_TP_IN
     AND A.TK LIKE L_TK_IN
     AND A.TK_TP = B.TK_TP
     AND A.TK = B.TK
     AND A.COL_ID = B.COL_ID
     AND A.COL_TP = B.COL_TP
     AND (B.TK_TP, B.TK, B.COL_ID, B.COL_TP) NOT IN 
         (SELECT TK_TP, TK, COL_ID, COL_TP
          FROM UTUPUSTKDETAILS
          WHERE VERSION = A.VERSION
            AND UP = A.UP
            AND US_VERSION = C.US_VERSION
            AND US = C.US
            AND TK_TP LIKE L_TK_TP_IN
            AND TK LIKE L_TK_IN)
     
     
     AND (A.TK, A.TK_TP) NOT IN
      (SELECT Z.TK, Z.TK_TP
       FROM UTUPUSTK Z
       WHERE Z.US = C.US
       AND Z.UP = A.UP
       AND IS_ENABLED = '0')
   UNION
   SELECT A.UP, C.US, B.TK_TP, B.TK, B.SEQ, B.DESCRIPTION, B.COL_ID, B.COL_TP, B.DSP_TITLE, B.OPERAT,
          B.DEF_VAL, B.ANDOR, B.HIDDEN, B.COL_ASC, B.VALUE_LIST_TP, '1', B.MANDATORY, B.AUTO_REFRESH, B.IS_PROTECTED, B.OPERAT_PROTECT,B.ANDOR_PROTECT, B.DSP_LEN
   FROM UTUPTK A, UTTK B, UTUPUS C
   WHERE C.VERSION = NVL(A_VERSION_IN, C.VERSION)
     AND C.UP = NVL(A_UP_IN, C.UP)
     AND C.US_VERSION LIKE L_US_VERSION_IN
     AND C.US LIKE L_US_IN
     AND C.VERSION = A.VERSION
     AND C.UP = A.UP
     AND (B.TK_TP, B.TK, B.COL_ID, B.COL_TP) NOT IN 
         (SELECT TK_TP, TK, COL_ID, COL_TP
          FROM UTUPTKDETAILS
          WHERE VERSION = A.VERSION
            AND UP = A.UP
            AND TK_TP LIKE L_TK_TP_IN
            AND TK LIKE L_TK_IN
          UNION
          SELECT TK_TP, TK, COL_ID, COL_TP
          FROM UTUPUSTKDETAILS
          WHERE VERSION = A.VERSION
            AND UP = A.UP
            AND US_VERSION = C.US_VERSION
            AND US = C.US
            AND TK_TP LIKE L_TK_TP_IN
            AND TK LIKE L_TK_IN)
     AND A.VERSION = NVL(A_VERSION_IN, A.VERSION)
     AND A.UP = NVL(A_UP_IN, A.UP)
     AND A.TK_TP LIKE L_TK_TP_IN
     AND A.TK LIKE L_TK_IN
     AND A.TK_TP = B.TK_TP
     AND A.TK = B.TK
     
     
     AND (A.TK, A.TK_TP) NOT IN
         (SELECT Z.TK, Z.TK_TP
          FROM UTUPUSTK Z
          WHERE Z.US = C.US
          AND Z.UP = A.UP
          AND IS_ENABLED = '0')
   ORDER BY 1,2,4,5; 


BEGIN

   
   A_VERSION_IN := UNVERSION.P_NO_VERSION;
   IF A_VERSION_IN IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;

   A_US_VERSION_IN := UNVERSION.P_NO_VERSION;
   IF A_US_VERSION_IN IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;

   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;

   A_US_VERSION := UNVERSION.P_NO_VERSION;
   IF A_US_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   
   
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NROFROWS;
      RAISE STPERROR;
   END IF;

   
   
   
   L_US_IN := NVL(A_US_IN, '%');
   L_US_VERSION_IN := NVL(A_US_VERSION_IN, '%');
   L_TK_TP_IN := NVL(A_TK_TP_IN, '%');
   L_TK_IN := NVL(A_TK_IN, '%');

   L_TITLE_CURSOR := DBMS_SQL.OPEN_CURSOR;

   OPEN L_TK_CURSOR;
   FETCH L_TK_CURSOR
   INTO L_UP, L_US, L_TK_TP, L_TK, L_SEQ, L_DESCRIPTION, L_COL_ID, L_COL_TP, L_DSP_TITLE, L_OPERATOR,
       L_DEF_VAL, L_ANDOR, L_HIDDEN, L_COL_ASC, L_VALUE_LIST_TP, L_INHERIT_TK, L_MANDATORY,
       L_AUTO_REFRESH, L_IS_PROTECTED, L_OPERATOR_PROTECT,L_ANDOR_PROTECT,L_DSP_LEN;
   L_FOUND := L_TK_CURSOR%FOUND;

   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN NOT L_FOUND OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_UP(L_FETCHED_ROWS) := L_UP;
      A_US(L_FETCHED_ROWS) := L_US;
      A_TK_TP(L_FETCHED_ROWS) := L_TK_TP;
      A_TK(L_FETCHED_ROWS) := L_TK;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;
      A_COL_ID(L_FETCHED_ROWS) := L_COL_ID;
      A_COL_TP(L_FETCHED_ROWS) := L_COL_TP;
      A_DISP_TITLE(L_FETCHED_ROWS) := L_DSP_TITLE;
      A_OPERATOR(L_FETCHED_ROWS) := L_OPERATOR;
      A_DEF_VAL(L_FETCHED_ROWS) := L_DEF_VAL;
      A_ANDOR(L_FETCHED_ROWS) := L_ANDOR;
      A_HIDDEN(L_FETCHED_ROWS) := L_HIDDEN;
      A_COL_ASC(L_FETCHED_ROWS) := L_COL_ASC;
      A_VALUE_LIST_TP(L_FETCHED_ROWS) := L_VALUE_LIST_TP;
      A_INHERIT_TK(L_FETCHED_ROWS) := L_INHERIT_TK;
      A_MANDATORY(L_FETCHED_ROWS) := L_MANDATORY;
      A_AUTO_REFRESH(L_FETCHED_ROWS) := L_AUTO_REFRESH;
      A_IS_PROTECTED(L_FETCHED_ROWS) := L_IS_PROTECTED;
      A_OPERATOR_PROTECT(L_FETCHED_ROWS) := L_OPERATOR_PROTECT;
      A_ANDOR_PROTECT(L_FETCHED_ROWS) := L_ANDOR_PROTECT;
      A_DSP_LEN(L_FETCHED_ROWS) := L_DSP_LEN;

      L_OBJECT_TP := SUBSTR(L_COL_TP,1, 2);
      IF SUBSTR(L_COL_TP, 3, 2) = 'gk' THEN
         L_SQL_STRING := 'SELECT description '||
                      'FROM dd' || UNAPIGEN.P_DD || '.uvgk' || L_OBJECT_TP ||
                      ' WHERE version_is_current = ''1'' '||
                      'AND gk = ''' || REPLACE(L_COL_ID, '''', '''''') || ''''; 
         DBMS_SQL.PARSE(L_TITLE_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         DBMS_SQL.DEFINE_COLUMN(L_TITLE_CURSOR, 1, L_DSP_TITLE, 40);
         L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_TITLE_CURSOR);
         DBMS_SQL.COLUMN_VALUE(L_TITLE_CURSOR, 1, L_DSP_TITLE);
         A_DISP_TITLE(L_FETCHED_ROWS) := L_DSP_TITLE;
       END IF;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         FETCH L_TK_CURSOR
    INTO L_UP, L_US, L_TK_TP, L_TK, L_SEQ, L_DESCRIPTION, L_COL_ID, L_COL_TP, L_DSP_TITLE, L_OPERATOR,
       L_DEF_VAL, L_ANDOR, L_HIDDEN, L_COL_ASC, L_VALUE_LIST_TP, L_INHERIT_TK, L_MANDATORY,
       L_AUTO_REFRESH, L_IS_PROTECTED, L_OPERATOR_PROTECT,L_ANDOR_PROTECT,L_DSP_LEN;
         L_FOUND := L_TK_CURSOR%FOUND;
      END IF;
   END LOOP;

   CLOSE L_TK_CURSOR;

   DBMS_SQL.CLOSE_CURSOR(L_TITLE_CURSOR);
   
   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;
   
   IF L_RET_CODE = UNAPIGEN.DBERR_SUCCESS AND
      A_PERFORM_TILDE_SUBSTITUTION THEN
      
      UNAPIUPP.P_TK_TAB.DELETE;
      UNAPIUPP.P_TK_NR_OF_ROWS := 0;

      
      
      FOR L_X IN 1..A_NR_OF_ROWS LOOP

         UNAPIUPP.P_TK_TAB(L_X).UP := A_UP(L_X);
         UNAPIUPP.P_TK_TAB(L_X).VERSION := A_VERSION;
         UNAPIUPP.P_TK_TAB(L_X).US := A_US(L_X);
         UNAPIUPP.P_TK_TAB(L_X).US_VERSION := A_US_VERSION;
         UNAPIUPP.P_TK_TAB(L_X).TK_TP := A_TK_TP(L_X);
         UNAPIUPP.P_TK_TAB(L_X).TK := A_TK(L_X);
         UNAPIUPP.P_TK_TAB(L_X).COL_ID := A_COL_ID(L_X);
         UNAPIUPP.P_TK_TAB(L_X).COL_TP := A_COL_TP(L_X);
         UNAPIUPP.P_TK_TAB(L_X).DSP_TITLE := A_DISP_TITLE(L_X);
         UNAPIUPP.P_TK_TAB(L_X).OPERAT := A_OPERATOR(L_X);
         UNAPIUPP.P_TK_TAB(L_X).DEF_VAL := A_DEF_VAL(L_X);
         UNAPIUPP.P_TK_TAB(L_X).ANDOR := A_ANDOR(L_X);
         UNAPIUPP.P_TK_TAB(L_X).HIDDEN := A_HIDDEN(L_X);
         UNAPIUPP.P_TK_TAB(L_X).IS_PROTECTED := A_IS_PROTECTED(L_X);
         UNAPIUPP.P_TK_TAB(L_X).MANDATORY := A_MANDATORY(L_X);
         UNAPIUPP.P_TK_TAB(L_X).AUTO_REFRESH := A_AUTO_REFRESH(L_X);
         UNAPIUPP.P_TK_TAB(L_X).COL_ASC := A_COL_ASC(L_X);
         UNAPIUPP.P_TK_TAB_VALUE_LIST_TYPE(L_X) := A_VALUE_LIST_TP(L_X);
         UNAPIUPP.P_TK_TAB(L_X).OPERAT_PROTECT := A_OPERATOR_PROTECT(L_X);
         UNAPIUPP.P_TK_TAB(L_X).ANDOR_PROTECT := A_ANDOR_PROTECT(L_X);
         UNAPIUPP.P_TK_TAB(L_X).DSP_LEN := A_DSP_LEN(L_X);
         UNAPIUPP.P_TK_TAB(L_X).INHERIT_TK := A_INHERIT_TK(L_X);
         
      END LOOP;
      UNAPIUPP.P_TK_NR_OF_ROWS := A_NR_OF_ROWS;
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      


      L_SQL_STRING := NULL;

      L_DEFVAL_CURSOR := DBMS_SQL.OPEN_CURSOR;
      FOR L_ROW IN 1..A_NR_OF_ROWS LOOP
         IF UNAPIUPP.P_TK_TAB(L_ROW).TK_TP NOT IN ('chlist') THEN 
            IF SUBSTR(UNAPIUPP.P_TK_TAB(L_ROW).DEF_VAL, 1, 1) = '~' AND
               SUBSTR(UNAPIUPP.P_TK_TAB(L_ROW).DEF_VAL, -1, 1) = '~' THEN

               L_SQL_STRING := NULL;
               L_NEW_VALUE := NULL;
               L_FUNCTION_CALL := FALSE;
               L_SQL_STRING := NULL;

               IF SUBSTR(UNAPIUPP.P_TK_TAB(L_ROW).DEF_VAL, 1, 4) = '~us@' THEN
                  L_LENGTH_PROP := LENGTH(UNAPIUPP.P_TK_TAB(L_ROW).DEF_VAL)-4;
                  L_PROPERTY := SUBSTR( SUBSTR(UNAPIUPP.P_TK_TAB(L_ROW).DEF_VAL, 5), 1, L_LENGTH_PROP-1);

                  L_SQL_STRING := 'SELECT '|| L_PROPERTY || 
                                  ' FROM dd'||UNAPIGEN.P_DD||'.uvad ' ||
                                  'WHERE version_is_current = ''1'' '||
                                  'AND ad = '''||REPLACE(UNAPIGEN.P_USER, '''', '''''') || ''''; 

               ELSIF SUBSTR(UNAPIUPP.P_TK_TAB(L_ROW).DEF_VAL, 1, 4) = '~up@' THEN
                  L_LENGTH_PROP := LENGTH(UNAPIUPP.P_TK_TAB(L_ROW).DEF_VAL)-4;
                  L_PROPERTY := SUBSTR( SUBSTR(UNAPIUPP.P_TK_TAB(L_ROW).DEF_VAL, 5), 1, L_LENGTH_PROP-1);

                  L_SQL_STRING := 'SELECT '|| L_PROPERTY || 
                                  ' FROM dd'||UNAPIGEN.P_DD||'.uvup ' ||
                                  'WHERE version_is_current = ''1'' '||
                                  'AND up = '|| UNAPIGEN.P_CURRENT_UP; 

               ELSIF SUBSTR(UNAPIUPP.P_TK_TAB(L_ROW).DEF_VAL, 1, 6) = '~usau@' THEN
                  L_LENGTH_PROP := LENGTH(UNAPIUPP.P_TK_TAB(L_ROW).DEF_VAL)-6;
                  L_PROPERTY := SUBSTR( SUBSTR(UNAPIUPP.P_TK_TAB(L_ROW).DEF_VAL, 7), 1, L_LENGTH_PROP-1);

                  L_SQL_STRING := 'SELECT adau.value '||
                                  'FROM dd'||UNAPIGEN.P_DD||'.uvadau adau, dd'||UNAPIGEN.P_DD||'.uvad ad ' ||
                                  'WHERE ad.version_is_current = ''1'' '||
                                  'AND adau.version = ad.version '||
                                  'AND adau.ad = ad.ad '||
                                  'AND adau.ad = '''|| REPLACE(UNAPIGEN.P_USER, '''', '''''') || ''' ' || 
                                  'AND adau.au = '''|| REPLACE(L_PROPERTY, '''', '''''') || ''' ' || 
                                  'ORDER BY adau.auseq';

               ELSIF SUBSTR(UNAPIUPP.P_TK_TAB(L_ROW).DEF_VAL, 1, 6) = '~upau@' THEN
                  L_LENGTH_PROP := LENGTH(UNAPIUPP.P_TK_TAB(L_ROW).DEF_VAL)-6;
                  L_PROPERTY := SUBSTR( SUBSTR(UNAPIUPP.P_TK_TAB(L_ROW).DEF_VAL, 7), 1, L_LENGTH_PROP-1);

                  L_SQL_STRING := 'SELECT upau.value '||
                                  'FROM dd'||UNAPIGEN.P_DD||'.uvupau upau, dd'||UNAPIGEN.P_DD||'.uvup up ' ||
                                  'WHERE up.version_is_current = ''1'' '||
                                  'AND upau.version = up.version '||
                                  'AND upau.up = up.up '||
                                  'AND upau.up = '||UNAPIGEN.P_CURRENT_UP  || 
                                  ' AND upau.au = '''|| REPLACE(L_PROPERTY, '''', '''''') || 
                                  ''' ORDER BY upau.auseq';

               ELSIF SUBSTR(UNAPIUPP.P_TK_TAB(L_ROW).DEF_VAL, 1, 2) = '~=' THEN
                  L_LENGTH_PROP := LENGTH(UNAPIUPP.P_TK_TAB(L_ROW).DEF_VAL)-2;
                  L_PROPERTY := SUBSTR( SUBSTR(UNAPIUPP.P_TK_TAB(L_ROW).DEF_VAL, 3), 1, L_LENGTH_PROP-1);

                  L_SQL_STRING := 'BEGIN :l_new_value := '||L_PROPERTY||'; END;';
                  L_FUNCTION_CALL := TRUE;
               END IF;

               IF L_SQL_STRING IS NOT NULL THEN
                  BEGIN
                     DBMS_SQL.PARSE(L_DEFVAL_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
                     IF L_FUNCTION_CALL THEN
                        DBMS_SQL.BIND_VARIABLE(L_DEFVAL_CURSOR, ':l_new_value', L_NEW_VALUE, 40);
                        L_RESULT := DBMS_SQL.EXECUTE(L_DEFVAL_CURSOR);
                        DBMS_SQL.VARIABLE_VALUE(L_DEFVAL_CURSOR, ':l_new_value', L_NEW_VALUE);                     
                     ELSE               
                        DBMS_SQL.DEFINE_COLUMN(L_DEFVAL_CURSOR, 1, L_NEW_VALUE, 40);
                        L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_DEFVAL_CURSOR);
                        IF L_RESULT > 0 THEN
                           DBMS_SQL.COLUMN_VALUE(L_DEFVAL_CURSOR, 1, L_NEW_VALUE);
                        ELSE
                           RAISE NO_DATA_FOUND;
                        END IF;
                     END IF;

                     
                     UNAPIUPP.P_TK_TAB(L_ROW).DEF_VAL := L_NEW_VALUE;
                     A_DEF_VAL(L_ROW) := L_NEW_VALUE;

                  EXCEPTION
                  WHEN OTHERS THEN
                     
                     NULL;
   
   
   
   
   
   
   
   

                  END;
               END IF;
            END IF;
         END IF;
      END LOOP;
      DBMS_SQL.CLOSE_CURSOR(L_DEFVAL_CURSOR);
      
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN   
      UNAPIGEN.LOGERROR('GetUpUsTaskDetails', SQLERRM);
   END IF;




   IF L_SQL_STRING IS NOT NULL THEN
      UNAPIGEN.LOGERROR('GetUpUsTaskDetails', L_SQL_STRING);
   END IF;
   IF L_TK_CURSOR%ISOPEN THEN
      CLOSE L_TK_CURSOR;
   END IF;
   IF DBMS_SQL.IS_OPEN(L_TITLE_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_TITLE_CURSOR);
   END IF;
   IF DBMS_SQL.IS_OPEN(L_DEFVAL_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_DEFVAL_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'GetUpUsTaskDetails'));
END INTERNALGETUPUSTASKDETAILS;



FUNCTION GETUPUSTASKDETAILSDEFINITION
(A_UP_IN             IN     NUMBER,                   
 A_US_IN             IN     VARCHAR2,                 
 A_TK_TP_IN          IN     VARCHAR2,                 
 A_TK_IN             IN     VARCHAR2,                 
 A_UP                OUT    UNAPIGEN.LONG_TABLE_TYPE, 
 A_US                OUT    UNAPIGEN.VC20_TABLE_TYPE, 
 A_TK_TP             OUT    UNAPIGEN.VC20_TABLE_TYPE, 
 A_TK                OUT    UNAPIGEN.VC20_TABLE_TYPE, 
 A_COL_ID            OUT    UNAPIGEN.VC40_TABLE_TYPE, 
 A_COL_TP            OUT    UNAPIGEN.VC40_TABLE_TYPE, 
 A_DISP_TITLE        OUT    UNAPIGEN.VC40_TABLE_TYPE, 
 A_DEF_VAL           OUT    UNAPIGEN.VC40_TABLE_TYPE, 
 A_HIDDEN            OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_IS_PROTECTED      OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_MANDATORY         OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_AUTO_REFRESH      OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_COL_ASC           OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_DSP_LEN           OUT    UNAPIGEN.NUM_TABLE_TYPE,  
 A_INHERIT_TK        OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_NR_OF_ROWS        IN OUT NUMBER)                   
RETURN NUMBER IS
A_VALUE_LIST_TP UNAPIGEN.CHAR1_TABLE_TYPE;
BEGIN

   RETURN(INTERNALGETUPUSTASKDETAILS
             (FALSE,
              A_UP_IN,
              A_US_IN,
              A_TK_TP_IN,
              A_TK_IN,
              A_UP,
              A_US,
              A_TK_TP,
              A_TK,
              A_COL_ID,
              A_COL_TP,
              A_DISP_TITLE,
              A_DEF_VAL,
              A_HIDDEN,
              A_IS_PROTECTED,
              A_MANDATORY,
              A_AUTO_REFRESH,
              A_COL_ASC,
        A_VALUE_LIST_TP,
              A_DSP_LEN,
              A_INHERIT_TK,
              A_NR_OF_ROWS)
         );
END GETUPUSTASKDETAILSDEFINITION;

FUNCTION GETUPUSTASKDETAILSDEFINITION
(A_UP_IN             IN     NUMBER,                   
 A_US_IN             IN     VARCHAR2,                 
 A_TK_TP_IN          IN     VARCHAR2,                 
 A_TK_IN             IN     VARCHAR2,                 
 A_UP                OUT    UNAPIGEN.LONG_TABLE_TYPE, 
 A_US                OUT    UNAPIGEN.VC20_TABLE_TYPE, 
 A_TK_TP             OUT    UNAPIGEN.VC20_TABLE_TYPE, 
 A_TK                OUT    UNAPIGEN.VC20_TABLE_TYPE, 
 A_DESCRIPTION       OUT    UNAPIGEN.VC40_TABLE_TYPE, 
 A_COL_ID            OUT    UNAPIGEN.VC40_TABLE_TYPE, 
 A_COL_TP            OUT    UNAPIGEN.VC40_TABLE_TYPE, 
 A_DISP_TITLE        OUT    UNAPIGEN.VC40_TABLE_TYPE, 
 A_OPERATOR          OUT    UNAPIGEN.VC20_TABLE_TYPE, 
 A_DEF_VAL           OUT    UNAPIGEN.VC40_TABLE_TYPE, 
 A_ANDOR             OUT    UNAPIGEN.VC3_TABLE_TYPE,  
 A_HIDDEN            OUT    UNAPIGEN.CHAR1_TABLE_TYPE,
 A_IS_PROTECTED      OUT    UNAPIGEN.CHAR1_TABLE_TYPE,
 A_MANDATORY         OUT    UNAPIGEN.CHAR1_TABLE_TYPE,
 A_AUTO_REFRESH      OUT    UNAPIGEN.CHAR1_TABLE_TYPE,
 A_COL_ASC           OUT    UNAPIGEN.CHAR1_TABLE_TYPE,
 A_VALUE_LIST_TP     OUT    UNAPIGEN.CHAR1_TABLE_TYPE,
 A_OPERATOR_PROTECT    OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_ANDOR_PROTECT     OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_DSP_LEN           OUT    UNAPIGEN.NUM_TABLE_TYPE,  
 A_INHERIT_TK        OUT    UNAPIGEN.CHAR1_TABLE_TYPE,
 A_NR_OF_ROWS        IN OUT NUMBER)                   
RETURN NUMBER IS

BEGIN

   RETURN(INTERNALGETUPUSTASKDETAILS
             (FALSE,
              A_UP_IN,
              A_US_IN,
              A_TK_TP_IN,
              A_TK_IN,
              A_UP,
              A_US,
              A_TK_TP,
              A_TK,
              A_DESCRIPTION,
              A_COL_ID,
              A_COL_TP,
              A_DISP_TITLE,
              A_OPERATOR,
              A_DEF_VAL,
              A_ANDOR,
              A_HIDDEN,
              A_IS_PROTECTED,
              A_MANDATORY,
              A_AUTO_REFRESH,
              A_COL_ASC,
              A_VALUE_LIST_TP ,
              A_OPERATOR_PROTECT,
              A_ANDOR_PROTECT,
              A_DSP_LEN,
              A_INHERIT_TK,
              A_NR_OF_ROWS)
         );
END GETUPUSTASKDETAILSDEFINITION;

FUNCTION GETUPUSTASKDETAILS
(A_UP_IN             IN     NUMBER,                   
 A_US_IN             IN     VARCHAR2,                 
 A_TK_TP_IN          IN     VARCHAR2,                 
 A_TK_IN             IN     VARCHAR2,                 
 A_UP                OUT    UNAPIGEN.LONG_TABLE_TYPE, 
 A_US                OUT    UNAPIGEN.VC20_TABLE_TYPE, 
 A_TK_TP             OUT    UNAPIGEN.VC20_TABLE_TYPE, 
 A_TK                OUT    UNAPIGEN.VC20_TABLE_TYPE, 
 A_COL_ID            OUT    UNAPIGEN.VC40_TABLE_TYPE, 
 A_COL_TP            OUT    UNAPIGEN.VC40_TABLE_TYPE, 
 A_DISP_TITLE        OUT    UNAPIGEN.VC40_TABLE_TYPE, 
 A_DEF_VAL           OUT    UNAPIGEN.VC40_TABLE_TYPE, 
 A_HIDDEN            OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_IS_PROTECTED      OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_MANDATORY         OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_AUTO_REFRESH      OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_COL_ASC           OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_VALUE_LIST_TP     OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_DSP_LEN           OUT    UNAPIGEN.NUM_TABLE_TYPE,  
 A_INHERIT_TK        OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_NR_OF_ROWS        IN OUT NUMBER)                   
RETURN NUMBER IS

BEGIN

   RETURN(INTERNALGETUPUSTASKDETAILS
             (TRUE,
              A_UP_IN,
              A_US_IN,
              A_TK_TP_IN,
              A_TK_IN,
              A_UP,
              A_US,
              A_TK_TP,
              A_TK,
              A_COL_ID,
              A_COL_TP,
              A_DISP_TITLE,
              A_DEF_VAL,
              A_HIDDEN,
              A_IS_PROTECTED,
              A_MANDATORY,
              A_AUTO_REFRESH,
              A_COL_ASC,
              A_VALUE_LIST_TP ,
              A_DSP_LEN,
              A_INHERIT_TK,
              A_NR_OF_ROWS)
         );
   
END GETUPUSTASKDETAILS;


FUNCTION GETUPUSTASKDETAILS
(A_UP_IN             IN     NUMBER,                   
 A_US_IN             IN     VARCHAR2,                 
 A_TK_TP_IN          IN     VARCHAR2,                 
 A_TK_IN             IN     VARCHAR2,                 
 A_UP                OUT    UNAPIGEN.LONG_TABLE_TYPE, 
 A_US                OUT    UNAPIGEN.VC20_TABLE_TYPE, 
 A_TK_TP             OUT    UNAPIGEN.VC20_TABLE_TYPE, 
 A_TK                OUT    UNAPIGEN.VC20_TABLE_TYPE, 
 A_DESCRIPTION       OUT    UNAPIGEN.VC40_TABLE_TYPE, 
 A_COL_ID            OUT    UNAPIGEN.VC40_TABLE_TYPE, 
 A_COL_TP            OUT    UNAPIGEN.VC40_TABLE_TYPE, 
 A_DISP_TITLE        OUT    UNAPIGEN.VC40_TABLE_TYPE, 
 A_OPERATOR          OUT    UNAPIGEN.VC20_TABLE_TYPE, 
 A_DEF_VAL           OUT    UNAPIGEN.VC40_TABLE_TYPE, 
 A_ANDOR             OUT    UNAPIGEN.VC3_TABLE_TYPE,  
 A_HIDDEN            OUT    UNAPIGEN.CHAR1_TABLE_TYPE,
 A_IS_PROTECTED      OUT    UNAPIGEN.CHAR1_TABLE_TYPE,
 A_MANDATORY         OUT    UNAPIGEN.CHAR1_TABLE_TYPE,
 A_AUTO_REFRESH      OUT    UNAPIGEN.CHAR1_TABLE_TYPE,
 A_COL_ASC           OUT    UNAPIGEN.CHAR1_TABLE_TYPE,
 A_VALUE_LIST_TP     OUT    UNAPIGEN.CHAR1_TABLE_TYPE,
 A_OPERATOR_PROTECT    OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_ANDOR_PROTECT     OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_DSP_LEN           OUT    UNAPIGEN.NUM_TABLE_TYPE,  
 A_INHERIT_TK        OUT    UNAPIGEN.CHAR1_TABLE_TYPE,
 A_NR_OF_ROWS        IN OUT NUMBER)                   
RETURN NUMBER IS

BEGIN

   RETURN(INTERNALGETUPUSTASKDETAILS
             (TRUE,
              A_UP_IN,
              A_US_IN,
              A_TK_TP_IN,
              A_TK_IN,
              A_UP,
              A_US,
              A_TK_TP,
              A_TK,
              A_DESCRIPTION,
              A_COL_ID,
              A_COL_TP,
              A_DISP_TITLE,
              A_OPERATOR,
              A_DEF_VAL,
              A_ANDOR,
              A_HIDDEN,
              A_IS_PROTECTED,
              A_MANDATORY,
              A_AUTO_REFRESH,
              A_COL_ASC,
              A_VALUE_LIST_TP ,
              A_OPERATOR_PROTECT,
              A_ANDOR_PROTECT,
              A_DSP_LEN,
              A_INHERIT_TK,
              A_NR_OF_ROWS)
         );
   
END GETUPUSTASKDETAILS;

FUNCTION SAVEUPTASKLIST
(A_UP                IN     NUMBER,                   
 A_TK_TP             IN     UNAPIGEN.VC20_TABLE_TYPE, 
 A_TK                IN     UNAPIGEN.VC20_TABLE_TYPE, 
 A_IS_ENABLED        IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_NR_OF_ROWS        IN     NUMBER,                   
 A_MODIFY_REASON     IN     VARCHAR2)                 
RETURN NUMBER IS

A_VERSION      VARCHAR2(20);
L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);
L_LOG_HS       CHAR(1);
L_ALLOW_MODIFY CHAR(1);
L_ACTIVE       CHAR(1);

CURSOR L_UPUS_CURSOR(C_UP VARCHAR2, C_VERSION VARCHAR2) IS
   SELECT DISTINCT US
   FROM UTUPUS
   WHERE VERSION = C_VERSION
     AND UP = C_UP;

CURSOR L_TK_CURSOR(C_TK_TP VARCHAR2, C_TK VARCHAR2) IS
   SELECT DESCRIPTION
   FROM UTTK
   WHERE TK_TP = C_TK_TP
     AND TK = C_TK;

L_TK_REC  L_TK_CURSOR%ROWTYPE;

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF (TRUNC(NVL(A_UP, -1)) - NVL(A_UP, 0)) <> 0 
      OR (NVL(A_UP, -1)) <= 0  THEN 
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UP;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('up', A_UP, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTUP
   SET ALLOW_MODIFY = '#'
   WHERE VERSION = A_VERSION
     AND UP = A_UP;

   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR ;
   END IF;

   
   DELETE FROM UTUPTK
   WHERE VERSION = A_VERSION
     AND UP = A_UP;

   FOR L_SEQ IN 1..A_NR_OF_ROWS LOOP
      IF NVL(A_TK_TP(L_SEQ), ' ') = ' ' OR
         NVL(A_TK(L_SEQ), ' ') = ' '    THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
      END IF;
      IF NVL(A_IS_ENABLED(L_SEQ), ' ') NOT IN ('1', '0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_ISENABLED;
         RAISE STPERROR;
      END IF;

      
      IF NVL(A_IS_ENABLED(L_SEQ), ' ') = '1' THEN
         INSERT INTO UTUPTK(UP, VERSION, SEQ, TK_TP, TK, IS_ENABLED)
         VALUES(A_UP, A_VERSION, L_SEQ, A_TK_TP(L_SEQ), A_TK(L_SEQ), A_IS_ENABLED(L_SEQ));

         
         OPEN L_TK_CURSOR(A_TK_TP(L_SEQ), A_TK(L_SEQ));
         FETCH L_TK_CURSOR
         INTO L_TK_REC;
         CLOSE L_TK_CURSOR;
         
         
         
         
         
         
         INSERT INTO UTUPUSOUTLOOKTASKS
         (UP, US, PAGE_ID, SEQ,  TK, TK_TP, DESCRIPTION, ACTIVE)
         SELECT A_UP, OTLTK.US, A_TK_TP(L_SEQ), NVL(MAX(SEQ),0)+1, A_TK(L_SEQ), A_TK_TP(L_SEQ), L_TK_REC.DESCRIPTION, '1'
         FROM UTUPUSOUTLOOKTASKS OTLTK
         WHERE UP = A_UP
           AND PAGE_ID = A_TK_TP(L_SEQ)
           AND NOT EXISTS (SELECT 'X'
                           FROM UTUPUSOUTLOOKTASKS
                           WHERE UP = A_UP
                           AND PAGE_ID = A_TK_TP(L_SEQ)
                           AND TK_TP = A_TK_TP(L_SEQ)
                           AND TK = A_TK(L_SEQ))
         GROUP BY OTLTK.US;

     ELSE
        
        
        DELETE FROM UTUPUSTK
        WHERE VERSION = A_VERSION
          AND UP = A_UP
          AND TK_TP = A_TK_TP(L_SEQ)
          AND TK = A_TK(L_SEQ);
        DELETE FROM UTUPUSTKDETAILS
        WHERE VERSION = A_VERSION
          AND UP = A_UP
          AND TK_TP = A_TK_TP(L_SEQ)
          AND TK = A_TK(L_SEQ);
        
        
        DELETE FROM UTUPUSOUTLOOKTASKS
        WHERE UP = A_UP
          AND TK_TP = A_TK_TP(L_SEQ)
          AND TK = A_TK(L_SEQ);

        
        
        
        UNAPIGEN.U4COMMIT;
        FOR L_UPUS_REC IN L_UPUS_CURSOR(A_UP, A_VERSION) LOOP
           DELETE FROM UTUPUSTKVALUELISTS
           WHERE TK_TP = A_TK_TP(L_SEQ)
             AND TK = A_TK(L_SEQ)
             AND US = L_UPUS_REC.US
             AND UP = A_UP;
           UNAPIGEN.U4COMMIT;
        END LOOP;
     END IF;      
   END LOOP;

   L_EVENT_TP := 'UsedObjectsUpdated';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT('SaveUpTaskList', UNAPIGEN.P_EVMGR_NAME, 'up', A_UP, L_LC, 
                                   L_LC_VERSION, L_SS, L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF L_LOG_HS = '1' THEN
      INSERT INTO UTUPHS (UP, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                          WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES (A_UP, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
              'list of enabled/disabled tasks in user profile "'||A_UP||'" is updated.', 
              CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveUpTaskList', SQLERRM);
   END IF;
   IF L_TK_CURSOR%ISOPEN THEN
      CLOSE L_TK_CURSOR;
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveUpTaskList'));
END SAVEUPTASKLIST;

FUNCTION SAVEUPTASKDETAILS
(A_UP                IN     NUMBER,                   
 A_TK_TP             IN     VARCHAR2,                 
 A_TK                IN     VARCHAR2,                 
 A_COL_ID            IN     UNAPIGEN.VC40_TABLE_TYPE, 
 A_COL_TP            IN     UNAPIGEN.VC40_TABLE_TYPE, 
 A_DEF_VAL           IN     UNAPIGEN.VC40_TABLE_TYPE, 
 A_HIDDEN            IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_IS_PROTECTED      IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_MANDATORY         IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_AUTO_REFRESH      IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_COL_ASC           IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_DSP_LEN           IN     UNAPIGEN.NUM_TABLE_TYPE,  
 A_INHERIT_TK        IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_NR_OF_ROWS        IN     NUMBER,                   
 A_MODIFY_REASON     IN     VARCHAR2)                 
RETURN NUMBER IS

A_VERSION      VARCHAR2(20);
L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);
L_LOG_HS       CHAR(1);
L_ALLOW_MODIFY CHAR(1);
L_ACTIVE       CHAR(1);
L_DELETE_CACHE BOOLEAN;

CURSOR L_UPUS_CURSOR(C_UP VARCHAR2, C_VERSION VARCHAR2) IS
   SELECT DISTINCT US
   FROM UTUPUS
   WHERE UP = C_UP;

CURSOR L_UPTKDETAILS_CURSOR IS
   SELECT COL_ID, COL_TP, COL_ASC, SEQ 
   FROM UTUPTKDETAILS
   WHERE VERSION = A_VERSION
     AND UP = A_UP
     AND TK_TP = A_TK_TP
     AND TK = A_TK
   ORDER BY SEQ;
L_UPTKDETAILS_REC         L_UPTKDETAILS_CURSOR%ROWTYPE;

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF (TRUNC(NVL(A_UP, -1)) - NVL(A_UP, 0)) <> 0 
      OR (NVL(A_UP, -1)) <= 0  THEN 
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UP;
      RAISE STPERROR;
   END IF;

   IF NVL(A_TK_TP, ' ') = ' ' OR
      NVL(A_TK, ' ') = ' '    THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('up', A_UP, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTUP
   SET ALLOW_MODIFY = '#'
   WHERE VERSION = A_VERSION
     AND UP = A_UP;
   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR ;
   END IF;

   
   
   
   L_DELETE_CACHE := FALSE;
   OPEN L_UPTKDETAILS_CURSOR;
   FETCH L_UPTKDETAILS_CURSOR INTO L_UPTKDETAILS_REC;
   FOR L_SEQ IN 1..A_NR_OF_ROWS LOOP
      IF NVL(A_COL_ID(L_SEQ), ' ') = ' ' OR
         NVL(A_COL_TP(L_SEQ), ' ') = ' '    THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
      END IF;

      
      IF NVL(A_INHERIT_TK(L_SEQ), ' ') = '0' THEN
         IF (L_UPTKDETAILS_REC.COL_ID = A_COL_ID(L_SEQ))   AND 
            (L_UPTKDETAILS_REC.COL_TP = A_COL_TP(L_SEQ))   AND
            (L_UPTKDETAILS_REC.SEQ = L_SEQ)                THEN 
            IF NVL(L_UPTKDETAILS_REC.COL_ASC,' ') <> NVL(A_COL_ASC(L_SEQ),' ') THEN
               L_DELETE_CACHE := TRUE;
               EXIT;
            END IF;
            FETCH L_UPTKDETAILS_CURSOR INTO L_UPTKDETAILS_REC;
         END IF;
      END IF;
   END LOOP;
   CLOSE L_UPTKDETAILS_CURSOR;

   IF L_DELETE_CACHE THEN
      
      
      
      UNAPIGEN.U4COMMIT;
      FOR L_UPUS_REC IN L_UPUS_CURSOR(A_UP, A_VERSION) LOOP
         DELETE FROM UTUPUSTKVALUELISTS
         WHERE TK_TP = A_TK_TP
           AND TK = A_TK
           AND US = L_UPUS_REC.US
           AND UP = A_UP;
         UNAPIGEN.U4COMMIT;
      END LOOP;
      L_DELETE_CACHE := FALSE;
   END IF;

   
   DELETE FROM UTUPTKDETAILS
   WHERE VERSION = A_VERSION
     AND UP = A_UP
     AND TK_TP = A_TK_TP
     AND TK = A_TK;

   FOR L_SEQ IN 1..A_NR_OF_ROWS LOOP
      IF NVL(A_HIDDEN(L_SEQ), ' ') NOT IN ('1', '0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_HIDDEN;
         RAISE STPERROR;
      END IF;
      IF NVL(A_IS_PROTECTED(L_SEQ), ' ') NOT IN ('1', '0') THEN
               UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_PROTECTED;
               RAISE STPERROR;
      END IF;
      IF NVL(A_MANDATORY(L_SEQ), ' ') NOT IN ('1', '0') THEN
               UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_MANDATORY;
               RAISE STPERROR;
      END IF;
      IF NVL(A_AUTO_REFRESH(L_SEQ), ' ') NOT IN ('O', 'L') THEN
               UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_AUTOREFRESH;
               RAISE STPERROR;
      END IF;
      IF NVL(A_INHERIT_TK(L_SEQ), ' ') NOT IN ('1', '0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INHERITFLAG;
         RAISE STPERROR;
      END IF;

      
      IF NVL(A_INHERIT_TK(L_SEQ), ' ') = '0' THEN
         INSERT INTO UTUPTKDETAILS(UP, VERSION, TK_TP, TK, COL_ID, COL_TP, SEQ, DEF_VAL, 
                                   HIDDEN, IS_PROTECTED, MANDATORY, AUTO_REFRESH,
                                   COL_ASC, DSP_LEN, INHERIT_TK)
         VALUES(A_UP, A_VERSION, A_TK_TP, A_TK, A_COL_ID(L_SEQ), A_COL_TP(L_SEQ), L_SEQ, 
                A_DEF_VAL(L_SEQ), A_HIDDEN(L_SEQ), A_IS_PROTECTED(L_SEQ), A_MANDATORY(L_SEQ),
                A_AUTO_REFRESH(L_SEQ), A_COL_ASC(L_SEQ), A_DSP_LEN(L_SEQ), A_INHERIT_TK(L_SEQ));
      END IF;
   END LOOP;

   L_EVENT_TP := 'UsedObjectsUpdated';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT('SaveUpTaskDetails', UNAPIGEN.P_EVMGR_NAME, 'up', A_UP, L_LC, 
                                   L_LC_VERSION, L_SS, L_EVENT_TP, 'version='||A_VERSION,
                                   L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF L_LOG_HS = '1' THEN
      INSERT INTO UTUPHS (UP, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                          WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES (A_UP, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
              'task details in user profile "'||A_UP||'" are updated.', 
              CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveUpTaskDetails', SQLERRM);
   END IF;
   IF L_UPTKDETAILS_CURSOR%ISOPEN THEN
      CLOSE L_UPTKDETAILS_CURSOR;
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveUpTaskDetails'));
END SAVEUPTASKDETAILS;

FUNCTION SAVEUPUSTASKLIST
(A_UP                IN     NUMBER,                   
 A_US                IN     VARCHAR2,                 
 A_TK_TP             IN     UNAPIGEN.VC20_TABLE_TYPE, 
 A_TK                IN     UNAPIGEN.VC20_TABLE_TYPE, 
 A_IS_ENABLED        IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_NR_OF_ROWS        IN     NUMBER,                   
 A_MODIFY_REASON     IN     VARCHAR2)                 
RETURN NUMBER IS

A_VERSION      VARCHAR2(20);
A_US_VERSION   VARCHAR2(20);
L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);
L_LOG_HS       CHAR(1);
L_ALLOW_MODIFY CHAR(1);
L_ACTIVE       CHAR(1);

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;

   A_US_VERSION := UNVERSION.P_NO_VERSION;
   IF A_US_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF (TRUNC(NVL(A_UP, -1)) - NVL(A_UP, 0)) <> 0 
      OR (NVL(A_UP, -1)) <= 0  THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UP;
      RAISE STPERROR;
   END IF;

   IF NVL(A_US, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('ad', A_US, A_US_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTAD
   SET ALLOW_MODIFY = '#'
   WHERE VERSION = A_US_VERSION
     AND AD = A_US
     AND IS_USER IN ('1', '2');

   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR ;
   END IF;

   
   DELETE FROM UTUPUSTK
   WHERE VERSION = A_VERSION
     AND UP = A_UP
     AND US_VERSION = A_US_VERSION
     AND US = A_US;

   FOR L_SEQ IN 1..A_NR_OF_ROWS LOOP
      IF NVL(A_TK_TP(L_SEQ), ' ') = ' ' OR
         NVL(A_TK(L_SEQ), ' ') = ' '    THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
      END IF;
      IF NVL(A_IS_ENABLED(L_SEQ), ' ') NOT IN ('1', '0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_ISENABLED;
         RAISE STPERROR;
      END IF;

      
      IF NVL(A_IS_ENABLED(L_SEQ), ' ') = '0' THEN
         INSERT INTO UTUPUSTK(UP, VERSION, US, US_VERSION, SEQ, TK_TP, TK, IS_ENABLED)
         VALUES(A_UP, A_VERSION, A_US, A_US_VERSION, L_SEQ, A_TK_TP(L_SEQ), A_TK(L_SEQ), A_IS_ENABLED(L_SEQ));      

         
         DELETE FROM UTUPUSOUTLOOKTASKS
         WHERE UP = A_UP
           AND US = A_US
           AND TK_TP = A_TK_TP(L_SEQ)
           AND TK = A_TK(L_SEQ);

         
         
         
         UNAPIGEN.U4COMMIT;
         DELETE FROM UTUPUSTKVALUELISTS
         WHERE TK_TP = A_TK_TP(L_SEQ)
         AND TK = A_TK(L_SEQ)
         AND UP = A_UP
         AND US = A_US;
         UNAPIGEN.U4COMMIT;
         
      END IF;
   END LOOP;

   L_EVENT_TP := 'UsedObjectsUpdated';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT('SaveUpUsTaskList', UNAPIGEN.P_EVMGR_NAME, 'ad', A_US, L_LC, 
                                   L_LC_VERSION, L_SS, L_EVENT_TP, 'version='||A_US_VERSION,
                                   L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF L_LOG_HS = '1' THEN
      INSERT INTO UTADHS(AD, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                         WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      SELECT T.AD, T.VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
             'list of enabled/disabled tasks for user "'||A_US||'" in user profile "'||A_UP||'" is updated.', 
             CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR
      FROM UTAD T
      WHERE T.VERSION = A_US_VERSION
        AND T.AD = A_US
        AND T.IS_USER IN ('1', '2');
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveUpUsTaskList', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveUpUsTaskList'));
END SAVEUPUSTASKLIST;

FUNCTION SAVEUPUSTASKDETAILS
(A_UP                IN     NUMBER,                   
 A_US                IN     VARCHAR2,                 
 A_TK_TP             IN     VARCHAR2,                 
 A_TK                IN     VARCHAR2,                 
 A_COL_ID            IN     UNAPIGEN.VC40_TABLE_TYPE, 
 A_COL_TP            IN     UNAPIGEN.VC40_TABLE_TYPE, 
 A_DEF_VAL           IN     UNAPIGEN.VC40_TABLE_TYPE, 
 A_HIDDEN            IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_IS_PROTECTED      IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_MANDATORY         IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_AUTO_REFRESH      IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_COL_ASC           IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_DSP_LEN           IN     UNAPIGEN.NUM_TABLE_TYPE,  
 A_INHERIT_TK        IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_NR_OF_ROWS        IN     NUMBER,                   
 A_MODIFY_REASON     IN     VARCHAR2)                 
RETURN NUMBER IS

A_VERSION      VARCHAR2(20);
A_US_VERSION   VARCHAR2(20);
L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);
L_LOG_HS       CHAR(1);
L_ALLOW_MODIFY CHAR(1);
L_ACTIVE       CHAR(1);
L_DELETE_CACHE BOOLEAN;

CURSOR L_UPUSTKDETAILS_CURSOR IS
   SELECT COL_ID, COL_TP, COL_ASC, SEQ 
   FROM UTUPUSTKDETAILS
   WHERE VERSION = A_VERSION
     AND UP = A_UP
     AND US_VERSION = A_US_VERSION
     AND US = A_US
     AND TK_TP = A_TK_TP
     AND TK = A_TK
   ORDER BY SEQ;
L_UPUSTKDETAILS_REC         L_UPUSTKDETAILS_CURSOR%ROWTYPE;

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;

   A_US_VERSION := UNVERSION.P_NO_VERSION;
   IF A_US_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF (TRUNC(NVL(A_UP, -1)) - NVL(A_UP, 0)) <> 0 
      OR (NVL(A_UP, -1)) <= 0  THEN 
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UP;
      RAISE STPERROR;
   END IF;

   IF NVL(A_US, ' ') = ' ' OR
      NVL(A_TK_TP, ' ') = ' ' OR
      NVL(A_TK, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('ad', A_US, A_US_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTAD
   SET ALLOW_MODIFY = '#'
   WHERE VERSION = A_US_VERSION
     AND AD = A_US
     AND IS_USER IN ('1', '2');

   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR ;
   END IF;

   
   
   
   L_DELETE_CACHE := FALSE;
   OPEN L_UPUSTKDETAILS_CURSOR;
   FETCH L_UPUSTKDETAILS_CURSOR INTO L_UPUSTKDETAILS_REC;
   FOR L_SEQ IN 1..A_NR_OF_ROWS LOOP
      IF NVL(A_COL_ID(L_SEQ), ' ') = ' ' OR
         NVL(A_COL_TP(L_SEQ), ' ') = ' '    THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
      END IF;

      
      IF NVL(A_INHERIT_TK(L_SEQ), ' ') = '0' THEN
         IF (L_UPUSTKDETAILS_REC.COL_ID = A_COL_ID(L_SEQ)) AND
            (L_UPUSTKDETAILS_REC.COL_TP = A_COL_TP(L_SEQ)) AND 
            (L_UPUSTKDETAILS_REC.SEQ = L_SEQ)              THEN
            IF NVL(L_UPUSTKDETAILS_REC.COL_ASC,' ') <> NVL(A_COL_ASC(L_SEQ),' ') THEN
               L_DELETE_CACHE := TRUE;
               EXIT;
            END IF;
            FETCH L_UPUSTKDETAILS_CURSOR INTO L_UPUSTKDETAILS_REC;
         END IF;
      END IF;
   END LOOP;
   CLOSE L_UPUSTKDETAILS_CURSOR;

   IF L_DELETE_CACHE THEN
      
      
      
      UNAPIGEN.U4COMMIT;
      DELETE FROM UTUPUSTKVALUELISTS
      WHERE TK_TP = A_TK_TP
        AND TK = A_TK
        AND UP = A_UP
        AND US = A_US;
      UNAPIGEN.U4COMMIT;
      L_DELETE_CACHE := FALSE;
   END IF;

   
   DELETE FROM UTUPUSTKDETAILS
   WHERE VERSION = A_VERSION
     AND UP = A_UP
     AND US_VERSION = A_US_VERSION
     AND US = A_US
     AND TK_TP = A_TK_TP
     AND TK = A_TK;

   FOR L_SEQ IN 1..A_NR_OF_ROWS LOOP
      IF NVL(A_HIDDEN(L_SEQ), ' ') NOT IN ('1', '0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_HIDDEN;
         RAISE STPERROR;
      END IF;
      IF NVL(A_IS_PROTECTED(L_SEQ), ' ') NOT IN ('1', '0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_PROTECTED;
         RAISE STPERROR;
         END IF;
      IF NVL(A_MANDATORY(L_SEQ), ' ') NOT IN ('1', '0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_MANDATORY;
         RAISE STPERROR;
         END IF;
      IF NVL(A_AUTO_REFRESH(L_SEQ), ' ') NOT IN ('O', 'L') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_AUTOREFRESH;
         RAISE STPERROR;
      END IF;
      IF NVL(A_INHERIT_TK(L_SEQ), ' ') NOT IN ('1', '0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INHERITFLAG;
         RAISE STPERROR;
      END IF;

      
      IF NVL(A_INHERIT_TK(L_SEQ), ' ') = '0' THEN
         INSERT INTO UTUPUSTKDETAILS(UP, VERSION, US, US_VERSION, TK_TP, TK, COL_ID, COL_TP, SEQ, 
                                     DEF_VAL, HIDDEN, IS_PROTECTED, MANDATORY, AUTO_REFRESH,
                                     COL_ASC, DSP_LEN, INHERIT_TK)
         VALUES(A_UP, A_VERSION, A_US, A_US_VERSION, A_TK_TP, A_TK, A_COL_ID(L_SEQ), A_COL_TP(L_SEQ), 
                L_SEQ, A_DEF_VAL(L_SEQ), A_HIDDEN(L_SEQ), A_IS_PROTECTED(L_SEQ), A_MANDATORY(L_SEQ),
                A_AUTO_REFRESH(L_SEQ), A_COL_ASC(L_SEQ), A_DSP_LEN(L_SEQ), A_INHERIT_TK(L_SEQ));
      END IF;
   END LOOP;

   L_EVENT_TP := 'UsedObjectsUpdated';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT('SaveUpUsTaskDetails', UNAPIGEN.P_EVMGR_NAME, 'ad', A_US, L_LC, 
                                   L_LC_VERSION, L_SS, L_EVENT_TP, 'version='||A_US_VERSION,
                                   L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF L_LOG_HS = '1' THEN
      INSERT INTO UTADHS(AD, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                         WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      SELECT T.AD, T.VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
             'task details for user "'||A_US||'" in user profile "'||A_UP||'" are updated.', 
             CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR
      FROM UTAD T
      WHERE T.VERSION = A_US_VERSION
        AND T.AD = A_US
        AND T.IS_USER IN ('1', '2');
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveUpUsTaskDetails', SQLERRM);
   END IF;
   IF L_UPUSTKDETAILS_CURSOR%ISOPEN THEN
      CLOSE L_UPUSTKDETAILS_CURSOR;
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveUpUsTaskDetails'));
END SAVEUPUSTASKDETAILS;

FUNCTION GETUPUSTASKVALUELISTS
(A_UP                IN     NUMBER,                   
 A_US                IN     VARCHAR2,                 
 A_TK_TP             IN     VARCHAR2,                 
 A_TK                IN     VARCHAR2,                 
 A_COL_ID            OUT    UNAPIGEN.VC40_TABLE_TYPE, 
 A_COL_TP            OUT    UNAPIGEN.VC40_TABLE_TYPE, 
 A_SEQ               OUT    UNAPIGEN.NUM_TABLE_TYPE,  
 A_VALUESEQ          OUT    UNAPIGEN.NUM_TABLE_TYPE,  
 A_VALUE             OUT    UNAPIGEN.VC40_TABLE_TYPE, 
 A_NR_OF_ROWS        IN OUT NUMBER,                   
 A_NEXT_ROWS         IN     NUMBER)                   
RETURN NUMBER IS

L_TKVALLISTS_REC L_TKVALLISTS_CURSOR%ROWTYPE;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_UP, -1) = -1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_US, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_TK_TP, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_TK, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF L_TKVALLISTS_CURSOR%ISOPEN THEN
         CLOSE L_TKVALLISTS_CURSOR;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF NOT L_TKVALLISTS_CURSOR%ISOPEN THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN

      IF NOT L_TKVALLISTS_CURSOR%ISOPEN THEN
         OPEN L_TKVALLISTS_CURSOR(A_UP, A_US, A_TK_TP, A_TK);
      END IF;
   END IF;

   FETCH L_TKVALLISTS_CURSOR
   INTO L_TKVALLISTS_REC;
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_TKVALLISTS_CURSOR%NOTFOUND OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_COL_ID(L_FETCHED_ROWS)   := L_TKVALLISTS_REC.COL_ID;
      A_COL_TP(L_FETCHED_ROWS)   := L_TKVALLISTS_REC.COL_TP;
      A_SEQ(L_FETCHED_ROWS)      := L_TKVALLISTS_REC.SEQ;
      A_VALUESEQ(L_FETCHED_ROWS) := L_TKVALLISTS_REC.VALUESEQ;
      A_VALUE(L_FETCHED_ROWS)    := L_TKVALLISTS_REC.VALUE;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         FETCH L_TKVALLISTS_CURSOR
         INTO L_TKVALLISTS_REC;
      END IF;
   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       CLOSE L_TKVALLISTS_CURSOR;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
       CLOSE L_TKVALLISTS_CURSOR;
       A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;
   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      IF SQLCODE <> 1 THEN
         INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
         VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
                'GetUpUsTaskValueLists', L_SQLERRM);
         UNAPIGEN.U4COMMIT;
      END IF;
      IF L_TKVALLISTS_CURSOR%ISOPEN THEN
         CLOSE L_TKVALLISTS_CURSOR;
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETUPUSTASKVALUELISTS;

FUNCTION SAVEUPUSTASKVALUELISTS
(A_UP                IN     NUMBER,                   
 A_US                IN     VARCHAR2,                 
 A_TK_TP             IN     VARCHAR2,                 
 A_TK                IN     VARCHAR2,                 
 A_COL_ID            IN     UNAPIGEN.VC40_TABLE_TYPE, 
 A_COL_TP            IN     UNAPIGEN.VC40_TABLE_TYPE, 
 A_SEQ               IN     UNAPIGEN.NUM_TABLE_TYPE,  
 A_VALUESEQ          IN     UNAPIGEN.NUM_TABLE_TYPE,  
 A_VALUE             IN     UNAPIGEN.VC40_TABLE_TYPE, 
 A_NR_OF_ROWS        IN     NUMBER,                   
 A_NEXT_ROWS         IN     NUMBER)                   
RETURN NUMBER IS

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   L_SQLERRM := NULL;
   IF NVL(A_NEXT_ROWS, 0) = 0 THEN
      IF NVL(P_SAVEUPUSTKLS_CALLS, 0) <> 0 THEN
         L_SQLERRM := 'SaveUpUsTaskValueLists termination call never called for previous method sheet ! (a_next_rows=-1)';
         RAISE STPERROR;
      END IF;
      P_SAVEUPUSTKLS_CALLS := 1;
      P_SAVEUPUSTKLS_INSERT_EVENT := FALSE;
   ELSIF NVL(A_NEXT_ROWS, 0) = -1 THEN
      IF NVL(P_SAVEUPUSTKLS_CALLS, 0) = 0 THEN
         P_SAVEUPUSTKLS_INSERT_EVENT := FALSE;
      END IF;
      P_SAVEUPUSTKLS_CALLS := NVL(P_SAVEUPUSTKLS_CALLS, 0) + 1;
   ELSIF NVL(A_NEXT_ROWS, 0) = 1 THEN
      IF NVL(P_SAVEUPUSTKLS_CALLS, 0) = 0 THEN
         L_SQLERRM := 'SaveUpUsTaskValueLists startup call never called ! (a_next_rows=0)';
         RAISE STPERROR;
      END IF;
      IF NVL(UNAPIGEN.P_TXN_LEVEL, 0) <= 1 THEN
         L_SQLERRM := 'SaveUpUsTaskValueLists called with a_next_rows=1 in a non MST transaction !';
         RAISE STPERROR;
      END IF;
      P_SAVEUPUSTKLS_CALLS := NVL(P_SAVEUPUSTKLS_CALLS, 0) + 1;
   ELSE
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NEXTROWS;
      RAISE STPERROR;
   END IF;
   IF P_SAVEUPUSTKLS_CALLS = 1 THEN
      P_SAVEUPUSTKLS_TR_SEQ := UNAPIGEN.P_TR_SEQ;
   ELSE
      IF UNAPIGEN.P_TR_SEQ <> P_SAVEUPUSTKLS_TR_SEQ THEN
         L_SQLERRM := 'Successive calls of SaveUpUsTaskValueLists not in the same transaction !';
         RAISE STPERROR;
      END IF;
   END IF;

   IF NVL(A_NEXT_ROWS, 0) = 0 THEN
      
      
      
      L_PREV_SEQ_NR := -1 ;
   END IF;
   
   IF A_NR_OF_ROWS = 0 AND 
      NVL(A_NEXT_ROWS, 0) = 0 THEN
      DELETE FROM UTUPUSTKVALUELISTS
      WHERE UP = A_UP
        AND US = A_US
        AND TK_TP = A_TK_TP
        AND TK = A_TK;             
   END IF;

   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      IF L_PREV_SEQ_NR <> A_SEQ(L_SEQ_NO) THEN
         
         
         
         DELETE FROM UTUPUSTKVALUELISTS
         WHERE UP = A_UP
           AND US = A_US
           AND TK_TP = A_TK_TP
           AND TK = A_TK
           AND SEQ = A_SEQ(L_SEQ_NO);
         L_PREV_SEQ_NR := A_SEQ(L_SEQ_NO);
      END IF;

      INSERT INTO UTUPUSTKVALUELISTS
      (UP, US, TK_TP, TK, COL_ID, COL_TP, SEQ, VALUESEQ, VALUE)
      VALUES
      (A_UP, A_US, A_TK_TP, A_TK, A_COL_ID(L_SEQ_NO), A_COL_TP(L_SEQ_NO),
       A_SEQ(L_SEQ_NO), A_VALUESEQ(L_SEQ_NO), A_VALUE(L_SEQ_NO));
   END LOOP;

   

   
   IF NVL(A_NEXT_ROWS, 0) = -1 THEN
      
      P_SAVEUPUSTKLS_CALLS := 0;
      P_SAVEUPUSTKLS_INSERT_EVENT := FALSE;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveUpUsTaskValueLists',SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('SaveUpUsTaskValueLists',L_SQLERRM);
   END IF;
   P_SAVEUPUSTKLS_INSERT_EVENT := FALSE;
   P_SAVEUPUSTKLS_CALLS := 0;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveUpUsTaskValueLists'));
END SAVEUPUSTASKVALUELISTS;

FUNCTION GETQUALIFICATION                              
(A_QUALIFICATION    OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_DESCRIPTION      OUT    UNAPIGEN.VC40_TABLE_TYPE,   
 A_NR_OF_ROWS       IN OUT NUMBER,                     
 A_WHERE_CLAUSE     IN     VARCHAR2)                   
RETURN NUMBER IS

L_QUALIFICATION      CHAR(1);
L_DESCRIPTION        VARCHAR2(40);
L_QUAL_CURSOR        INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := ' WHERE qualification = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || ''''; 
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;
   
   L_QUAL_CURSOR := DBMS_SQL.OPEN_CURSOR;

   L_SQL_STRING := 'SELECT qualification, description ' ||
                   'FROM dd'||UNAPIGEN.P_DD||'.uvqualification ' || L_WHERE_CLAUSE;
   DBMS_SQL.PARSE(L_QUAL_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN_CHAR(L_QUAL_CURSOR, 1, L_QUALIFICATION, 1);
   DBMS_SQL.DEFINE_COLUMN(L_QUAL_CURSOR, 2, L_DESCRIPTION, 40);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_QUAL_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE_CHAR(L_QUAL_CURSOR, 1, L_QUALIFICATION);
      DBMS_SQL.COLUMN_VALUE(L_QUAL_CURSOR, 2, L_DESCRIPTION);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_QUALIFICATION(L_FETCHED_ROWS) := L_QUALIFICATION;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_QUAL_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_QUAL_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   L_SQLERRM := SQLERRM;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
           'GetQualification', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   IF DBMS_SQL.IS_OPEN (L_QUAL_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_QUAL_CURSOR);
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETQUALIFICATION;

FUNCTION GETUPUSOUTLOOKPAGELIST
(A_UP                IN     NUMBER,                    
 A_US                IN     VARCHAR2,                  
 A_PAGE_ID           OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_PAGE_DESCRIPTION  OUT    UNAPIGEN.VC40_TABLE_TYPE,  
 A_PAGE_TP           OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_ACTIVE            OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NR_OF_ROWS        IN OUT NUMBER,                    
 A_WHERE_CLAUSE      IN     VARCHAR2)                   
RETURN NUMBER IS

L_OP_CURSOR               UNAPIGEN.CURSOR_REF_TYPE;

BEGIN

   
   IF NVL(A_UP, -1) = -1 THEN
      RETURN(UNAPIGEN.DBERR_NOOBJID);
   END IF;

   IF NVL(A_US, ' ') = ' ' THEN
      RETURN(UNAPIGEN.DBERR_NOOBJID);
   END IF;
   
   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;
   
   
   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE :=  'WHERE up = :a_up AND ' ||          
                         'us = :a_us ORDER BY page_id, seq'; 
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      IF INSTR(UPPER(A_WHERE_CLAUSE), 'ORDER BY')=0 THEN
         L_WHERE_CLAUSE :=  'WHERE up = :a_up AND ' ||             
                            'us = :a_us AND '||A_WHERE_CLAUSE ||   
                            ' ORDER BY page_id, seq';              
      ELSE
         IF UPPER(SUBSTR(A_WHERE_CLAUSE,1,9)) <> 'ORDER BY ' THEN      
            L_WHERE_CLAUSE :=  'WHERE up = :a_up AND ' ||             
                               'us = :a_us AND '||A_WHERE_CLAUSE ;    
         ELSE
            L_WHERE_CLAUSE :=  'WHERE up = :a_up AND ' ||         
                               'us = :a_us '||A_WHERE_CLAUSE ;    
         END IF;
      END IF;
   ELSE
      IF INSTR(UPPER(A_WHERE_CLAUSE), 'ORDER BY')=0 THEN
         L_WHERE_CLAUSE :=  'WHERE up = :a_up AND ' ||         
                            'us = :a_us AND '||                
                            SUBSTR(A_WHERE_CLAUSE,7) ||        
                            ' ORDER BY page_id, seq';          
      ELSE
         L_WHERE_CLAUSE :=  'WHERE up = :a_up AND ' ||         
                            'us = :a_us AND '||SUBSTR(A_WHERE_CLAUSE,7) ;    
      END IF;
   END IF;
   
   
   L_SQL_STRING := 'SELECT page_id,  page_description,  page_tp,  active ' ||
                   'FROM dd' || UNAPIGEN.P_DD || '.uvupusoutlookpages ' || 
                   L_WHERE_CLAUSE;
   OPEN L_OP_CURSOR
   FOR L_SQL_STRING
   USING A_UP, A_US;

   L_FETCHED_ROWS := 1;
   LOOP
      FETCH L_OP_CURSOR
      INTO A_PAGE_ID(L_FETCHED_ROWS),
           A_PAGE_DESCRIPTION(L_FETCHED_ROWS),  
           A_PAGE_TP(L_FETCHED_ROWS),
           A_ACTIVE(L_FETCHED_ROWS);
      IF L_OP_CURSOR%NOTFOUND THEN
         L_FETCHED_ROWS := L_FETCHED_ROWS-1;
         EXIT;
      ELSIF L_FETCHED_ROWS >= A_NR_OF_ROWS THEN
         EXIT;
      END IF;
      L_FETCHED_ROWS := L_FETCHED_ROWS+1;
   END LOOP;
               
   CLOSE L_OP_CURSOR;

   IF L_FETCHED_ROWS = 0 THEN
       L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
       A_NR_OF_ROWS := L_FETCHED_ROWS;
       L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;
   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      IF L_SQLERRM IS NULL THEN
         L_SQLERRM := SQLERRM;
      END IF;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, NVL(UNAPIGEN.P_USER,USER), CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetUpUsOutlookPageList', L_SQLERRM);
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, NVL(UNAPIGEN.P_USER,USER), CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
              'GetUpUsOutlookPageList', L_SQL_STRING);
      UNAPIGEN.U4COMMIT;
   END IF;
   IF L_OP_CURSOR%ISOPEN THEN
      CLOSE L_OP_CURSOR;
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETUPUSOUTLOOKPAGELIST;

FUNCTION GETUPUSOUTLOOKBUTTONLIST
(A_UP                IN     NUMBER,                    
 A_US                IN     VARCHAR2,                  
 A_PAGE_ID_IN        IN     VARCHAR2,                  
 A_PAGE_ID           OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_TK                OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_TK_TP             OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_DESCRIPTION       OUT    UNAPIGEN.VC40_TABLE_TYPE,  
 A_ACTIVE            OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ICON_NAME         OUT    UNAPIGEN.VC255_TABLE_TYPE, 
 A_ICON_NBR          OUT    UNAPIGEN.NUM_TABLE_TYPE,   
 A_CMD_LINE          OUT    UNAPIGEN.VC255_TABLE_TYPE, 
 A_NR_OF_ROWS        IN OUT NUMBER,                    
 A_WHERE_CLAUSE      IN     VARCHAR2)                  
RETURN NUMBER IS

L_OB_CURSOR               UNAPIGEN.CURSOR_REF_TYPE;

BEGIN

   
   IF NVL(A_UP, -1) = -1 THEN
      RETURN(UNAPIGEN.DBERR_NOOBJID);
   END IF;

   IF NVL(A_US, ' ') = ' ' THEN
      RETURN(UNAPIGEN.DBERR_NOOBJID);
   END IF;

   
   
   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   
   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE :=  'WHERE up = :a_up AND ' ||            
                   'us = :a_us AND '||                         
                   'page_id = NVL(:a_page_id_in, page_id) '||  
                   'ORDER BY page_id, seq';                    
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      IF INSTR(UPPER(A_WHERE_CLAUSE), 'ORDER BY')=0 THEN
         L_WHERE_CLAUSE :=  'WHERE up = :a_up AND ' ||                  
                            'us = :a_us AND '||                         
                            'page_id = NVL(:a_page_id_in, page_id) '||  
                            'AND '||A_WHERE_CLAUSE ||                   
                            ' ORDER BY page_id, seq';                   
      ELSE
         IF UPPER(SUBSTR(A_WHERE_CLAUSE,1,9)) <> 'ORDER BY ' THEN
            L_WHERE_CLAUSE :=  'WHERE up = :a_up AND ' ||                  
                               'us = :a_us AND '||                         
                               'page_id = NVL(:a_page_id_in, page_id) '||  
                               'AND '||A_WHERE_CLAUSE;                     
         ELSE
            L_WHERE_CLAUSE :=  'WHERE up = :a_up AND ' ||                  
                               'us = :a_us AND '||                         
                               'page_id = NVL(:a_page_id_in, page_id) '||  
                               A_WHERE_CLAUSE;                             
         END IF;
      END IF;
   ELSE
      IF INSTR(UPPER(A_WHERE_CLAUSE), 'ORDER BY')=0 THEN
         L_WHERE_CLAUSE :=  'WHERE up = :a_up AND ' ||                  
                            'us = :a_us AND '||                         
                            'page_id = NVL(:a_page_id_in, page_id) '||  
                            'AND '||SUBSTR(A_WHERE_CLAUSE,7) ||         
                            ' ORDER BY page_id, seq';                   
      ELSE
         L_WHERE_CLAUSE :=  'WHERE up = :a_up AND ' ||                  
                            'us = :a_us AND '||                         
                            'page_id = NVL(:a_page_id_in, page_id) '||  
                            'AND '||SUBSTR(A_WHERE_CLAUSE,7);           
      END IF;
   END IF;

   
   L_SQL_STRING := 'SELECT page_id, tk, tk_tp, description, active, icon_name, icon_nbr, cmd_line ' ||
                   'FROM dd' || UNAPIGEN.P_DD || '.uvupusoutlooktasks ' || 
                   L_WHERE_CLAUSE;
   OPEN L_OB_CURSOR
   FOR L_SQL_STRING
   USING A_UP, A_US, A_PAGE_ID_IN;

   L_FETCHED_ROWS := 1;
   LOOP
      FETCH L_OB_CURSOR
      INTO A_PAGE_ID(L_FETCHED_ROWS),
           A_TK(L_FETCHED_ROWS),
           A_TK_TP(L_FETCHED_ROWS),
           A_DESCRIPTION(L_FETCHED_ROWS), 
           A_ACTIVE(L_FETCHED_ROWS), 
           A_ICON_NAME(L_FETCHED_ROWS),
           A_ICON_NBR(L_FETCHED_ROWS), 
           A_CMD_LINE(L_FETCHED_ROWS);
      IF L_OB_CURSOR%NOTFOUND THEN
         L_FETCHED_ROWS := L_FETCHED_ROWS-1;
         EXIT;
      ELSIF L_FETCHED_ROWS >= A_NR_OF_ROWS THEN
         EXIT;
      END IF;
      L_FETCHED_ROWS := L_FETCHED_ROWS+1;
   END LOOP;
               
   CLOSE L_OB_CURSOR;

   IF L_FETCHED_ROWS = 0 THEN
       L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
       A_NR_OF_ROWS := L_FETCHED_ROWS;
       L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;
   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      IF L_SQLERRM IS NULL THEN
         L_SQLERRM := SQLERRM;
      END IF;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, NVL(UNAPIGEN.P_USER,USER), CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetUpUsOutlookButtonList', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
   END IF;
   IF L_OB_CURSOR%ISOPEN THEN
      CLOSE L_OB_CURSOR;
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETUPUSOUTLOOKBUTTONLIST;

FUNCTION SAVEUPUSOUTLOOKPAGELIST
(A_UP                      IN     NUMBER,                    
 A_US                      IN     VARCHAR2,                  
 A_PAGE_ID                 IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PAGE_DESCRIPTION        IN     UNAPIGEN.VC40_TABLE_TYPE,  
 A_PAGE_TP                 IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_ACTIVE                  IN     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NR_OF_ROWS              IN     NUMBER,                    
 A_ADD2DEL_WHERE_CLAUSE    IN     VARCHAR2)                  
RETURN NUMBER IS

BEGIN
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   L_SQLERRM := NULL;

   L_SQL_STRING := 'DELETE FROM utupusoutlookpages WHERE up = :a_up AND us = :a_us '||A_ADD2DEL_WHERE_CLAUSE;
   EXECUTE IMMEDIATE L_SQL_STRING USING A_UP, A_US;
   L_SQL_STRING := NULL;
   
   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP

      INSERT INTO UTUPUSOUTLOOKPAGES
      (UP, US, SEQ, PAGE_ID, PAGE_DESCRIPTION, PAGE_TP, ACTIVE)
      VALUES
      (A_UP, A_US, L_SEQ_NO,  A_PAGE_ID(L_SEQ_NO), A_PAGE_DESCRIPTION(L_SEQ_NO),
       A_PAGE_TP(L_SEQ_NO), A_ACTIVE(L_SEQ_NO));
       
   END LOOP;

   

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveUpUsOutlookPageList',SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('SaveUpUsOutlookPageList',L_SQLERRM);
   END IF;
   IF L_SQL_STRING IS NOT NULL THEN
      UNAPIGEN.LOGERROR('SaveUpUsOutlookPageList',SUBSTR('Used sql:'||L_SQL_STRING,1,255));
   END IF;      
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveUpUsOutlookPageList'));
END SAVEUPUSOUTLOOKPAGELIST;

FUNCTION SAVEUPUSOUTLOOKBUTTONLIST
(A_UP                      IN     NUMBER,                    
 A_US                      IN     VARCHAR2,                  
 A_PAGE_ID                 IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_TK                      IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_TK_TP                   IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_DESCRIPTION             IN     UNAPIGEN.VC40_TABLE_TYPE,  
 A_ACTIVE                  IN     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ICON_NAME               IN     UNAPIGEN.VC255_TABLE_TYPE, 
 A_ICON_NBR                IN     UNAPIGEN.NUM_TABLE_TYPE,   
 A_CMD_LINE                IN     UNAPIGEN.VC255_TABLE_TYPE, 
 A_NR_OF_ROWS              IN     NUMBER,                    
 A_ADD2DEL_WHERE_CLAUSE    IN     VARCHAR2)                  
RETURN NUMBER IS

BEGIN
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   L_SQLERRM := NULL;

   L_SQL_STRING := 'DELETE FROM utupusoutlooktasks WHERE up = :a_up AND us = :a_us '||A_ADD2DEL_WHERE_CLAUSE;
   EXECUTE IMMEDIATE L_SQL_STRING USING A_UP, A_US;
   L_SQL_STRING := NULL;
   
   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP

      INSERT INTO UTUPUSOUTLOOKTASKS
      (UP, US, PAGE_ID, SEQ, TK, TK_TP, DESCRIPTION, ICON_NAME, ICON_NBR, CMD_LINE, ACTIVE)
      VALUES
      (A_UP, A_US, A_PAGE_ID(L_SEQ_NO), L_SEQ_NO, A_TK(L_SEQ_NO),
       A_TK_TP(L_SEQ_NO), A_DESCRIPTION(L_SEQ_NO), A_ICON_NAME(L_SEQ_NO),
       A_ICON_NBR(L_SEQ_NO), A_CMD_LINE(L_SEQ_NO), A_ACTIVE(L_SEQ_NO));
       
   END LOOP;

   

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveUpUsOutlookButtonList',SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('SaveUpUsOutlookButtonList',L_SQLERRM);
   END IF;
   IF L_SQL_STRING IS NOT NULL THEN
      UNAPIGEN.LOGERROR('SaveUpUsOutlookButtonList',SUBSTR('Used sql:'||L_SQL_STRING,1,255));
   END IF;      
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveUpUsOutlookButtonList'));
END SAVEUPUSOUTLOOKBUTTONLIST;

END UNAPIUPP;
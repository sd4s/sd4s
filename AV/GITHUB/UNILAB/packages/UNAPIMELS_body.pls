PACKAGE BODY unapimels AS

L_SQLERRM         VARCHAR2(255);
L_SQL_STRING      VARCHAR2(10000);
L_EVENT_TP        UTEV.EV_TP%TYPE;
L_TIMED_EVENT_TP  UTEV.EV_TP%TYPE;
L_RET_CODE        NUMBER;
L_RESULT          NUMBER;
L_FETCHED_ROWS    NUMBER;
L_EV_SEQ_NR       NUMBER;
L_EV_DETAILS      VARCHAR2(255);
STPERROR          EXCEPTION;

P_SAVESCME_CALLS             INTEGER;
P_SAVESCME_TR_SEQ            INTEGER;
P_SAVESCMERESULT_CALLS       INTEGER;
P_SAVESCMERESULT_TR_SEQ      INTEGER;
P_SAVESCMECELL_CALLS         INTEGER;
P_SAVESCMECELL_TR_SEQ        INTEGER;
P_SAVESCMECELLVALUES_CALLS   INTEGER;
P_SAVESCMECELLVALUES_TR_SEQ  INTEGER;
P_SAVESCMEGK_CALLS           INTEGER;
P_SAVESCMEGK_ROWNUM          INTEGER;
P_SAVESCMEGK_TR_SEQ          INTEGER;
P_SAVESCMEAU_CALLS           INTEGER;
P_SAVESCMEAU_ROWNUM          INTEGER;
P_SAVESCMEAU_TR_SEQ          INTEGER;
P_SAVESC_CALLS               INTEGER;
P_SAVESC_TR_SEQ              INTEGER;
P_SAVESCGK_ROWNUM            INTEGER;
P_SAVESCGK_CALLS             INTEGER;
P_SAVESCGK_TR_SEQ            INTEGER;
P_SAVESCAU_CALLS             INTEGER;
P_SAVESCAU_ROWNUM            INTEGER;
P_SAVESCAU_TR_SEQ            INTEGER;
L_ROWNUM_TAB                 UNAPIGEN.NUM_TABLE_TYPE;

FUNCTION GETVERSION
   RETURN VARCHAR2
IS
BEGIN
   RETURN('06.07.00.00_00.13');
EXCEPTION
   WHEN OTHERS THEN
      RETURN (NULL);
END GETVERSION;


PROCEDURE LOG(A_TEXT IN VARCHAR2) IS
BEGIN
   IF P_DBMS_OUTPUT THEN
      DBMS_OUTPUT.PUT_LINE(A_TEXT);
   END IF;
END;


PROCEDURE SAVEPOINT_UNILAB4 IS
BEGIN
   IF UNAPIEV.P_EVMGRS_EV_IN_BULK = '1' THEN
      UNAPIGEN.U4SAVEPOINT('unilab4');
   ELSE
      SAVEPOINT UNILAB4;
   END IF;
END SAVEPOINT_UNILAB4;

FUNCTION BULKSAVESCMETHOD
(A_ALARMS_HANDLED        IN     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_SC                    IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PG                    IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PGNODE                IN     UNAPIGEN.LONG_TABLE_TYPE,  
 A_PA                    IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PANODE                IN     UNAPIGEN.LONG_TABLE_TYPE,  
 A_ME                    IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_MENODE                IN     UNAPIGEN.LONG_TABLE_TYPE,  
 A_REANALYSIS            IN     UNAPIGEN.NUM_TABLE_TYPE,   
 A_MT_VERSION            IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_DESCRIPTION           IN     UNAPIGEN.VC40_TABLE_TYPE,  
 A_VALUE_F               IN     UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_VALUE_S               IN     UNAPIGEN.VC40_TABLE_TYPE,  
 A_UNIT                  IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_EXEC_START_DATE       IN     UNAPIGEN.DATE_TABLE_TYPE,  
 A_EXEC_END_DATE         IN     UNAPIGEN.DATE_TABLE_TYPE,  
 A_EXECUTOR              IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_LAB                   IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_EQ                    IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_EQ_VERSION            IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PLANNED_EXECUTOR      IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PLANNED_EQ            IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PLANNED_EQ_VERSION    IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_MANUALLY_ENTERED      IN     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ALLOW_ADD             IN     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ASSIGN_DATE           IN     UNAPIGEN.DATE_TABLE_TYPE,  
 A_ASSIGNED_BY           IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_MANUALLY_ADDED        IN     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_DELAY                 IN     UNAPIGEN.NUM_TABLE_TYPE,   
 A_DELAY_UNIT            IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_FORMAT                IN     UNAPIGEN.VC40_TABLE_TYPE,  
 A_ACCURACY              IN     UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_REAL_COST             IN     UNAPIGEN.VC40_TABLE_TYPE,  
 A_REAL_TIME             IN     UNAPIGEN.VC40_TABLE_TYPE,  
 A_CALIBRATION           IN     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_CONFIRM_COMPLETE      IN     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_AUTORECALC            IN     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ME_RESULT_EDITABLE    IN     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NEXT_CELL             IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SOP                   IN     UNAPIGEN.VC40_TABLE_TYPE,  
 A_SOP_VERSION           IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PLAUS_LOW             IN     UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_PLAUS_HIGH            IN     UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_WINSIZE_X             IN     UNAPIGEN.NUM_TABLE_TYPE,   
 A_WINSIZE_Y             IN     UNAPIGEN.NUM_TABLE_TYPE,   
 A_ME_CLASS              IN     UNAPIGEN.VC2_TABLE_TYPE,   
 A_LOG_HS                IN     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LOG_HS_DETAILS        IN     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LC                    IN     UNAPIGEN.VC2_TABLE_TYPE,   
 A_LC_VERSION            IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_MODIFY_FLAG           IN     UNAPIGEN.NUM_TABLE_TYPE,   
 A_NR_OF_ROWS            IN     NUMBER,                    
 A_NEXT_ROWS             IN     NUMBER)                    
RETURN NUMBER IS

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   L_SQLERRM := NULL;
   IF NVL(A_NEXT_ROWS, 0) = 0 THEN
      IF NVL(P_SAVESCME_CALLS, 0) <> 0 THEN
         L_SQLERRM := 'BulkSaveScMethod termination call never called for previous method sheet ! (a_next_rows=-1)';
         RAISE STPERROR;
      END IF;
      P_SAVESCME_CALLS := 1;
   ELSIF NVL(A_NEXT_ROWS, 0) = -1 THEN
      P_SAVESCME_CALLS := NVL(P_SAVESCME_CALLS, 0) + 1;      
   ELSIF NVL(A_NEXT_ROWS, 0) = 1 THEN
      IF NVL(P_SAVESCME_CALLS, 0) = 0 THEN   
         L_SQLERRM := 'BulkSaveScMethod startup call never called ! (a_next_rows=0)';
         RAISE STPERROR;   
      END IF;
      IF NVL(UNAPIGEN.P_TXN_LEVEL, 0) <= 1 THEN   
         L_SQLERRM := 'BulkSaveScMethod called with a_next_rows=1 in a non MST transaction !';
         RAISE STPERROR;   
      END IF;
      P_SAVESCME_CALLS := NVL(P_SAVESCME_CALLS, 0) + 1;      
   ELSE
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NEXTROWS;
      RAISE STPERROR;
   END IF;         
   IF P_SAVESCME_CALLS = 1 THEN
      P_SAVESCME_TR_SEQ := UNAPIGEN.P_TR_SEQ;
   ELSE
      IF UNAPIGEN.P_TR_SEQ <> P_SAVESCME_TR_SEQ THEN
         L_SQLERRM := 'Successive calls of BulkSaveScMethod not in the same transaction !';
         RAISE STPERROR;   
      END IF;
   END IF;

   FORALL L_ROW IN 1..A_NR_OF_ROWS      
      INSERT INTO UTMELSSAVESCMETHOD
      (ALARMS_HANDLED, SC, PG, PGNODE, PA, PANODE, ME, MENODE, REANALYSIS,
       MT_VERSION, DESCRIPTION, VALUE_F, VALUE_S, UNIT, EXEC_START_DATE, EXEC_START_DATE_TZ, EXEC_END_DATE, EXEC_END_DATE_TZ,
       EXECUTOR, LAB, EQ, EQ_VERSION, PLANNED_EXECUTOR, PLANNED_EQ, PLANNED_EQ_VERSION,
       MANUALLY_ENTERED, ALLOW_ADD, ASSIGN_DATE, ASSIGN_DATE_TZ, ASSIGNED_BY, MANUALLY_ADDED,
       DELAY, DELAY_UNIT, FORMAT, ACCURACY, REAL_COST, REAL_TIME, CALIBRATION,
       CONFIRM_COMPLETE, AUTORECALC, ME_RESULT_EDITABLE, NEXT_CELL, SOP, SOP_VERSION,
       PLAUS_LOW, PLAUS_HIGH, WINSIZE_X, WINSIZE_Y, ME_CLASS, LOG_HS, LOG_HS_DETAILS,
       LC, LC_VERSION, MODIFY_FLAG)
       VALUES
      (A_ALARMS_HANDLED(L_ROW), A_SC(L_ROW), A_PG(L_ROW), A_PGNODE(L_ROW), A_PA(L_ROW), A_PANODE(L_ROW), A_ME(L_ROW), A_MENODE(L_ROW), A_REANALYSIS(L_ROW),
       A_MT_VERSION(L_ROW), A_DESCRIPTION(L_ROW), A_VALUE_F(L_ROW), A_VALUE_S(L_ROW), A_UNIT(L_ROW), A_EXEC_START_DATE(L_ROW), A_EXEC_START_DATE(L_ROW),
       A_EXEC_END_DATE(L_ROW),A_EXEC_END_DATE(L_ROW),
       A_EXECUTOR(L_ROW), A_LAB(L_ROW), A_EQ(L_ROW), A_EQ_VERSION(L_ROW), A_PLANNED_EXECUTOR(L_ROW), A_PLANNED_EQ(L_ROW), A_PLANNED_EQ_VERSION(L_ROW),
       A_MANUALLY_ENTERED(L_ROW), A_ALLOW_ADD(L_ROW), A_ASSIGN_DATE(L_ROW), A_ASSIGN_DATE(L_ROW), A_ASSIGNED_BY(L_ROW), A_MANUALLY_ADDED(L_ROW),
       A_DELAY(L_ROW), A_DELAY_UNIT(L_ROW), A_FORMAT(L_ROW), A_ACCURACY(L_ROW), A_REAL_COST(L_ROW), A_REAL_TIME(L_ROW), A_CALIBRATION(L_ROW),
       A_CONFIRM_COMPLETE(L_ROW), A_AUTORECALC(L_ROW), A_ME_RESULT_EDITABLE(L_ROW), A_NEXT_CELL(L_ROW), A_SOP(L_ROW), A_SOP_VERSION(L_ROW),
       A_PLAUS_LOW(L_ROW), A_PLAUS_HIGH(L_ROW), A_WINSIZE_X(L_ROW), A_WINSIZE_Y(L_ROW), A_ME_CLASS(L_ROW), A_LOG_HS(L_ROW), A_LOG_HS_DETAILS(L_ROW),
       A_LC(L_ROW), A_LC_VERSION(L_ROW), A_MODIFY_FLAG(L_ROW));       

   
   IF NVL(A_NEXT_ROWS, 0) = -1 THEN
      
      P_SAVESCME_CALLS := 0;
   END IF;
   
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('BulkSaveScMethod',SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('BulkSaveScMethod',L_SQLERRM);   
   END IF;
   P_SAVESCME_CALLS := 0;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'BulkSaveScMethod'));
END BULKSAVESCMETHOD;

FUNCTION BULKSAVESCMERESULT
(A_ALARMS_HANDLED        IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_SC                    IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PG                    IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PGNODE                IN     UNAPIGEN.LONG_TABLE_TYPE,   
 A_PA                    IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PANODE                IN     UNAPIGEN.LONG_TABLE_TYPE,   
 A_ME                    IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_MENODE                IN     UNAPIGEN.LONG_TABLE_TYPE,   
 A_REANALYSIS            IN     UNAPIGEN.NUM_TABLE_TYPE,    
 A_VALUE_F               IN     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_VALUE_S               IN     UNAPIGEN.VC40_TABLE_TYPE,   
 A_UNIT                  IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_FORMAT                IN     UNAPIGEN.VC40_TABLE_TYPE,   
 A_EXEC_END_DATE         IN     UNAPIGEN.DATE_TABLE_TYPE,   
 A_EXECUTOR              IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_LAB                   IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_EQ                    IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_EQ_VERSION            IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_MANUALLY_ENTERED      IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_REAL_COST             IN     UNAPIGEN.VC40_TABLE_TYPE,   
 A_REAL_TIME             IN     UNAPIGEN.VC40_TABLE_TYPE,   
 A_MODIFY_FLAG           IN     UNAPIGEN.NUM_TABLE_TYPE,    
 A_NR_OF_ROWS            IN     NUMBER,                     
 A_NEXT_ROWS             IN     NUMBER)                     
RETURN NUMBER IS

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   L_SQLERRM := NULL;
   IF NVL(A_NEXT_ROWS, 0) = 0 THEN
      IF NVL(P_SAVESCMERESULT_CALLS, 0) <> 0 THEN
         L_SQLERRM := 'BulkSaveScMeResult termination call never called for previous method sheet ! (a_next_rows=-1)';
         RAISE STPERROR;
      END IF;
      P_SAVESCMERESULT_CALLS := 1;
   ELSIF NVL(A_NEXT_ROWS, 0) = -1 THEN
      P_SAVESCMERESULT_CALLS := NVL(P_SAVESCMERESULT_CALLS, 0) + 1;      
   ELSIF NVL(A_NEXT_ROWS, 0) = 1 THEN
      IF NVL(P_SAVESCMERESULT_CALLS, 0) = 0 THEN   
         L_SQLERRM := 'BulkSaveScMeResult startup call never called ! (a_next_rows=0)';
         RAISE STPERROR;   
      END IF;
      IF NVL(UNAPIGEN.P_TXN_LEVEL, 0) <= 1 THEN   
         L_SQLERRM := 'BulkSaveScMeResult called with a_next_rows=1 in a non MST transaction !';
         RAISE STPERROR;   
      END IF;
      P_SAVESCMERESULT_CALLS := NVL(P_SAVESCMERESULT_CALLS, 0) + 1;      
   ELSE
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NEXTROWS;
      RAISE STPERROR;
   END IF;         
   IF P_SAVESCMERESULT_CALLS = 1 THEN
      P_SAVESCMERESULT_TR_SEQ := UNAPIGEN.P_TR_SEQ;
   ELSE
      IF UNAPIGEN.P_TR_SEQ <> P_SAVESCMERESULT_TR_SEQ THEN
         L_SQLERRM := 'Successive calls of BulkSaveScMeResult not in the same transaction !';
         RAISE STPERROR;   
      END IF;
   END IF;

   FORALL L_ROW IN 1..A_NR_OF_ROWS      
      INSERT INTO UTMELSSAVESCMERESULT
      (ALARMS_HANDLED, SC, PG, PGNODE, PA, PANODE, ME, MENODE, REANALYSIS,
       VALUE_F, VALUE_S, UNIT, FORMAT, EXEC_END_DATE, EXEC_END_DATE_TZ,
       EXECUTOR, LAB, EQ, EQ_VERSION, MANUALLY_ENTERED, REAL_COST, REAL_TIME, MODIFY_FLAG)
       VALUES
      (A_ALARMS_HANDLED(L_ROW), A_SC(L_ROW), A_PG(L_ROW), A_PGNODE(L_ROW), A_PA(L_ROW), A_PANODE(L_ROW), A_ME(L_ROW), A_MENODE(L_ROW), A_REANALYSIS(L_ROW),
       A_VALUE_F(L_ROW), A_VALUE_S(L_ROW), A_UNIT(L_ROW), A_FORMAT(L_ROW), A_EXEC_END_DATE(L_ROW), A_EXEC_END_DATE(L_ROW),
       A_EXECUTOR(L_ROW), A_LAB(L_ROW), A_EQ(L_ROW), A_EQ_VERSION(L_ROW), A_MANUALLY_ENTERED(L_ROW),
       A_REAL_COST(L_ROW), A_REAL_TIME(L_ROW), A_MODIFY_FLAG(L_ROW));       

   
   IF NVL(A_NEXT_ROWS, 0) = -1 THEN
      
      P_SAVESCMERESULT_CALLS := 0;
   END IF;
   
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('BulkSaveScMeResult',SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('BulkSaveScMeResult',L_SQLERRM);   
   END IF;
   P_SAVESCMERESULT_CALLS := 0;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'BulkSaveScMeResult'));
END BULKSAVESCMERESULT;

FUNCTION BULKSAVESCMECELL
(A_COMPLETED             IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_SC                    IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PG                    IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PGNODE                IN     UNAPIGEN.LONG_TABLE_TYPE,   
 A_PA                    IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PANODE                IN     UNAPIGEN.LONG_TABLE_TYPE,   
 A_ME                    IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_MENODE                IN     UNAPIGEN.LONG_TABLE_TYPE,   
 A_REANALYSIS            IN     UNAPIGEN.NUM_TABLE_TYPE,    
 A_CELL                  IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_CELLNODE              IN     UNAPIGEN.LONG_TABLE_TYPE,   
 A_DSP_TITLE             IN     UNAPIGEN.VC40_TABLE_TYPE,   
 A_VALUE_F               IN     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_VALUE_S               IN     UNAPIGEN.VC40_TABLE_TYPE,   
 A_CELL_TP               IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_POS_X                 IN     UNAPIGEN.NUM_TABLE_TYPE,    
 A_POS_Y                 IN     UNAPIGEN.NUM_TABLE_TYPE,    
 A_ALIGN                 IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_WINSIZE_X             IN     UNAPIGEN.NUM_TABLE_TYPE,    
 A_WINSIZE_Y             IN     UNAPIGEN.NUM_TABLE_TYPE,    
 A_IS_PROTECTED          IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_MANDATORY             IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_HIDDEN                IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_UNIT                  IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_FORMAT                IN     UNAPIGEN.VC40_TABLE_TYPE,   
 A_EQ                    IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_EQ_VERSION            IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_COMPONENT             IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_CALC_TP               IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_CALC_FORMULA          IN     UNAPIGEN.VC2000_TABLE_TYPE, 
 A_VALID_CF              IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_MAX_X                 IN     UNAPIGEN.NUM_TABLE_TYPE,    
 A_MAX_Y                 IN     UNAPIGEN.NUM_TABLE_TYPE,    
 A_MULTI_SELECT          IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_MODIFY_FLAG           IN     UNAPIGEN.NUM_TABLE_TYPE,    
 A_NR_OF_ROWS            IN     NUMBER,                     
 A_NEXT_ROWS             IN     NUMBER)                     
RETURN NUMBER IS

BEGIN
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   L_SQLERRM := NULL;
   IF NVL(A_NEXT_ROWS, 0) = 0 THEN
      IF NVL(P_SAVESCMECELL_CALLS, 0) <> 0 THEN
         L_SQLERRM := 'BulkSaveScMeCell termination call never called for previous method sheet ! (a_next_rows=-1)';
         RAISE STPERROR;
      END IF;
      P_SAVESCMECELL_CALLS := 1;
   ELSIF NVL(A_NEXT_ROWS, 0) = -1 THEN
      P_SAVESCMECELL_CALLS := NVL(P_SAVESCMECELL_CALLS, 0) + 1;      
   ELSIF NVL(A_NEXT_ROWS, 0) = 1 THEN
      IF NVL(P_SAVESCMECELL_CALLS, 0) = 0 THEN   
         L_SQLERRM := 'BulkSaveScMeCell startup call never called ! (a_next_rows=0)';
         RAISE STPERROR;   
      END IF;
      IF NVL(UNAPIGEN.P_TXN_LEVEL, 0) <= 1 THEN   
         L_SQLERRM := 'BulkSaveScMeCell called with a_next_rows=1 in a non MST transaction !';
         RAISE STPERROR;   
      END IF;
      P_SAVESCMECELL_CALLS := NVL(P_SAVESCMECELL_CALLS, 0) + 1;      
   ELSE
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NEXTROWS;
      RAISE STPERROR;
   END IF;         
   IF P_SAVESCMECELL_CALLS = 1 THEN
      P_SAVESCMECELL_TR_SEQ := UNAPIGEN.P_TR_SEQ;
   ELSE
      IF UNAPIGEN.P_TR_SEQ <> P_SAVESCMECELL_TR_SEQ THEN
         L_SQLERRM := 'Successive calls of BulkSaveScMeCell not in the same transaction !';
         RAISE STPERROR;   
      END IF;
   END IF;
   FORALL L_ROW IN 1..A_NR_OF_ROWS
      INSERT INTO UTMELSSAVESCMECELL
      (COMPLETED, SC, PG, PGNODE, PA, PANODE, ME, MENODE, REANALYSIS, CELL, CELLNODE,
       DSP_TITLE, VALUE_F, VALUE_S, CELL_TP, POS_X, POS_Y, ALIGN, WINSIZE_X, WINSIZE_Y,
       IS_PROTECTED, MANDATORY, HIDDEN, UNIT, FORMAT, EQ, EQ_VERSION, COMPONENT, CALC_TP,
       CALC_FORMULA, VALID_CF, MAX_X, MAX_Y, MULTI_SELECT, MODIFY_FLAG)
       VALUES
      (A_COMPLETED(L_ROW), A_SC(L_ROW), A_PG(L_ROW), A_PGNODE(L_ROW), A_PA(L_ROW), A_PANODE(L_ROW),
       A_ME(L_ROW), A_MENODE(L_ROW), A_REANALYSIS(L_ROW), A_CELL(L_ROW), A_CELLNODE(L_ROW),
       A_DSP_TITLE(L_ROW), A_VALUE_F(L_ROW), A_VALUE_S(L_ROW), A_CELL_TP(L_ROW), A_POS_X(L_ROW),
       A_POS_Y(L_ROW), A_ALIGN(L_ROW), A_WINSIZE_X(L_ROW), A_WINSIZE_Y(L_ROW),
       A_IS_PROTECTED(L_ROW), A_MANDATORY(L_ROW), A_HIDDEN(L_ROW), A_UNIT(L_ROW), A_FORMAT(L_ROW),
       A_EQ(L_ROW), A_EQ_VERSION(L_ROW), A_COMPONENT(L_ROW), A_CALC_TP(L_ROW),
       A_CALC_FORMULA(L_ROW), A_VALID_CF(L_ROW), A_MAX_X(L_ROW), A_MAX_Y(L_ROW),
       A_MULTI_SELECT(L_ROW), A_MODIFY_FLAG(L_ROW));   

   
   IF NVL(A_NEXT_ROWS, 0) = -1 THEN
      
      P_SAVESCMECELL_CALLS := 0;
   END IF;
   
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('BulkSaveScMeCell',SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('BulkSaveScMeCell',L_SQLERRM);   
   END IF;
   P_SAVESCMECELL_CALLS := 0;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'BulkSaveScMeCell'));
END BULKSAVESCMECELL;

FUNCTION BULKSAVESCMECELLVALUES
(A_SC                    IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PG                    IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PGNODE                IN     UNAPIGEN.LONG_TABLE_TYPE,   
 A_PA                    IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PANODE                IN     UNAPIGEN.LONG_TABLE_TYPE,   
 A_ME                    IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_MENODE                IN     UNAPIGEN.LONG_TABLE_TYPE,   
 A_REANALYSIS            IN     UNAPIGEN.NUM_TABLE_TYPE,    
 A_CELL                  IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_INDEX_X               IN     UNAPIGEN.NUM_TABLE_TYPE,    
 A_INDEX_Y               IN     UNAPIGEN.NUM_TABLE_TYPE,    
 A_VALUE_F               IN     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_VALUE_S               IN     UNAPIGEN.VC40_TABLE_TYPE,   
 A_SELECTED              IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_NR_OF_ROWS            IN     NUMBER,                     
 A_NEXT_ROWS             IN     NUMBER)                     
RETURN NUMBER IS

BEGIN
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   L_SQLERRM := NULL;
   IF NVL(A_NEXT_ROWS, 0) = 0 THEN
      IF NVL(P_SAVESCMECELLVALUES_CALLS, 0) <> 0 THEN
         L_SQLERRM := 'BulkSaveScMeCellValues termination call never called for previous method sheet ! (a_next_rows=-1)';
         RAISE STPERROR;
      END IF;
      P_SAVESCMECELLVALUES_CALLS := 1;
   ELSIF NVL(A_NEXT_ROWS, 0) = -1 THEN
      P_SAVESCMECELLVALUES_CALLS := NVL(P_SAVESCMECELLVALUES_CALLS, 0) + 1;      
   ELSIF NVL(A_NEXT_ROWS, 0) = 1 THEN
      IF NVL(P_SAVESCMECELLVALUES_CALLS, 0) = 0 THEN   
         L_SQLERRM := 'BulkSaveScMeCellValues startup call never called ! (a_next_rows=0)';
         RAISE STPERROR;   
      END IF;
      IF NVL(UNAPIGEN.P_TXN_LEVEL, 0) <= 1 THEN   
         L_SQLERRM := 'BulkSaveScMeCellValues called with a_next_rows=1 in a non MST transaction !';
         RAISE STPERROR;   
      END IF;
      P_SAVESCMECELLVALUES_CALLS := NVL(P_SAVESCMECELLVALUES_CALLS, 0) + 1;      
   ELSE
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NEXTROWS;
      RAISE STPERROR;
   END IF;         
   IF P_SAVESCMECELLVALUES_CALLS = 1 THEN
      P_SAVESCMECELLVALUES_TR_SEQ := UNAPIGEN.P_TR_SEQ;
   ELSE
      IF UNAPIGEN.P_TR_SEQ <> P_SAVESCMECELLVALUES_TR_SEQ THEN
         L_SQLERRM := 'Successive calls of BulkSaveScMeCellValues not in the same transaction !';
         RAISE STPERROR;   
      END IF;
   END IF;

   FORALL L_ROW IN 1..A_NR_OF_ROWS      
      INSERT INTO UTMELSSAVESCMECELLVALUES
      (SC, PG, PGNODE, PA, PANODE,  
       ME, MENODE, REANALYSIS,  
       CELL, INDEX_X, INDEX_Y, 
       VALUE_F, VALUE_S, SELECTED)
       VALUES
      (A_SC(L_ROW), A_PG(L_ROW), A_PGNODE(L_ROW), A_PA(L_ROW), A_PANODE(L_ROW),
       A_ME(L_ROW), A_MENODE(L_ROW), A_REANALYSIS(L_ROW), 
       A_CELL(L_ROW), A_INDEX_X(L_ROW), A_INDEX_Y(L_ROW),
       A_VALUE_F(L_ROW), A_VALUE_S(L_ROW), A_SELECTED(L_ROW));       

   
   IF NVL(A_NEXT_ROWS, 0) = -1 THEN
      
      P_SAVESCMECELLVALUES_CALLS := 0;
   END IF;
   
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('BulkSaveScMeCellValues',SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('BulkSaveScMeCellValues',L_SQLERRM);   
   END IF;
   P_SAVESCMECELLVALUES_CALLS := 0;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'BulkSaveScMeCellValues'));
END BULKSAVESCMECELLVALUES;

FUNCTION BULKSAVESCMEGROUPKEY
(A_SC                    IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PG                    IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PGNODE                IN     UNAPIGEN.LONG_TABLE_TYPE,   
 A_PA                    IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PANODE                IN     UNAPIGEN.LONG_TABLE_TYPE,   
 A_ME                    IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_MENODE                IN     UNAPIGEN.LONG_TABLE_TYPE,   
 A_GK                    IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_GK_VERSION            IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_VALUE                 IN     UNAPIGEN.VC40_TABLE_TYPE,   
 A_NR_OF_ROWS            IN     NUMBER,                     
 A_NEXT_ROWS             IN     NUMBER)                     
RETURN NUMBER IS
BEGIN
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   L_SQLERRM := NULL;
   IF NVL(A_NEXT_ROWS, 0) = 0 THEN
      IF NVL(P_SAVESCMEGK_CALLS, 0) <> 0 THEN
         L_SQLERRM := 'BulkSaveScMeGroupKey termination call never called for previous method sheet ! (a_next_rows=-1)';
         RAISE STPERROR;
      END IF;
      P_SAVESCMEGK_CALLS := 1;
   ELSIF NVL(A_NEXT_ROWS, 0) = -1 THEN
      P_SAVESCMEGK_CALLS := NVL(P_SAVESCMEGK_CALLS, 0) + 1;      
   ELSIF NVL(A_NEXT_ROWS, 0) = 1 THEN
      IF NVL(P_SAVESCMEGK_CALLS, 0) = 0 THEN   
         L_SQLERRM := 'BulkSaveScMeGroupKey startup call never called ! (a_next_rows=0)';
         RAISE STPERROR;   
      END IF;
      IF NVL(UNAPIGEN.P_TXN_LEVEL, 0) <= 1 THEN   
         L_SQLERRM := 'BulkSaveScMeGroupKey called with a_next_rows=1 in a non MST transaction !';
         RAISE STPERROR;   
      END IF;
      P_SAVESCMEGK_CALLS := NVL(P_SAVESCMEGK_CALLS, 0) + 1;      
   ELSE
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NEXTROWS;
      RAISE STPERROR;
   END IF;         
   IF P_SAVESCMEGK_CALLS = 1 THEN
      P_SAVESCMEGK_TR_SEQ := UNAPIGEN.P_TR_SEQ;
      P_SAVESCMEGK_ROWNUM := 0;
   ELSE
      IF UNAPIGEN.P_TR_SEQ <> P_SAVESCMEGK_TR_SEQ THEN
         L_SQLERRM := 'Successive calls of BulkSaveScMeGroupKey not in the same transaction !';
         RAISE STPERROR;   
      END IF;
   END IF;

   FOR L_ROW IN 1..A_NR_OF_ROWS LOOP
      L_ROWNUM_TAB(L_ROW) := P_SAVESCMEGK_ROWNUM + L_ROW;
   END LOOP;
   P_SAVESCMEGK_ROWNUM := P_SAVESCMEGK_ROWNUM+A_NR_OF_ROWS;

   FORALL L_ROW IN 1..A_NR_OF_ROWS      
      INSERT INTO UTMELSSAVESCMEGROUPKEY
      (SC, PG, PGNODE, PA, PANODE,  
       ME, MENODE, 
       GK, GK_VERSION, VALUE, ROW_NUMBER)
       VALUES
      (A_SC(L_ROW), A_PG(L_ROW), A_PGNODE(L_ROW), A_PA(L_ROW), A_PANODE(L_ROW),
       A_ME(L_ROW), A_MENODE(L_ROW), 
       NVL(A_GK(L_ROW),'#'), A_GK_VERSION(L_ROW), A_VALUE(L_ROW), L_ROWNUM_TAB(L_ROW));       

   
   IF NVL(A_NEXT_ROWS, 0) = -1 THEN
      
      P_SAVESCMEGK_CALLS := 0;
      P_SAVESCMEGK_ROWNUM := 0;
      L_ROWNUM_TAB.DELETE();      
   END IF;
   
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('BulkSaveScMeGroupKey',SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('BulkSaveScMeGroupKey',L_SQLERRM);   
   END IF;
   P_SAVESCMEGK_CALLS := 0;
   P_SAVESCMEGK_ROWNUM := 0;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'BulkSaveScMeGroupKey'));
END BULKSAVESCMEGROUPKEY;

FUNCTION BULKSAVESCMEATTRIBUTE
(A_SC                    IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PG                    IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PGNODE                IN     UNAPIGEN.LONG_TABLE_TYPE,   
 A_PA                    IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PANODE                IN     UNAPIGEN.LONG_TABLE_TYPE,   
 A_ME                    IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_MENODE                IN     UNAPIGEN.LONG_TABLE_TYPE,   
 A_AU                    IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_AU_VERSION            IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_VALUE                 IN     UNAPIGEN.VC40_TABLE_TYPE,   
 A_NR_OF_ROWS            IN     NUMBER,                     
 A_NEXT_ROWS             IN     NUMBER)                     
RETURN NUMBER IS

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   L_SQLERRM := NULL;
   IF NVL(A_NEXT_ROWS, 0) = 0 THEN
      IF NVL(P_SAVESCMEAU_CALLS, 0) <> 0 THEN
         L_SQLERRM := 'BulkSaveScMeAttribute termination call never called for previous method sheet ! (a_next_rows=-1)';
         RAISE STPERROR;
      END IF;
      P_SAVESCMEAU_CALLS := 1;
   ELSIF NVL(A_NEXT_ROWS, 0) = -1 THEN
      P_SAVESCMEAU_CALLS := NVL(P_SAVESCMEAU_CALLS, 0) + 1;      
   ELSIF NVL(A_NEXT_ROWS, 0) = 1 THEN
      IF NVL(P_SAVESCMEAU_CALLS, 0) = 0 THEN   
         L_SQLERRM := 'BulkSaveScMeAttribute startup call never called ! (a_next_rows=0)';
         RAISE STPERROR;   
      END IF;
      IF NVL(UNAPIGEN.P_TXN_LEVEL, 0) <= 1 THEN   
         L_SQLERRM := 'BulkSaveScMeAttribute called with a_next_rows=1 in a non MST transaction !';
         RAISE STPERROR;   
      END IF;
      P_SAVESCMEAU_CALLS := NVL(P_SAVESCMEAU_CALLS, 0) + 1;      
   ELSE
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NEXTROWS;
      RAISE STPERROR;
   END IF;         
   IF P_SAVESCMEAU_CALLS = 1 THEN
      P_SAVESCMEAU_TR_SEQ := UNAPIGEN.P_TR_SEQ;
      P_SAVESCMEAU_ROWNUM := 0;
   ELSE
      IF UNAPIGEN.P_TR_SEQ <> P_SAVESCMEAU_TR_SEQ THEN
         L_SQLERRM := 'Successive calls of BulkSaveScMeAttribute not in the same transaction !';
         RAISE STPERROR;   
      END IF;
   END IF;

   FOR L_ROW IN 1..A_NR_OF_ROWS LOOP
      L_ROWNUM_TAB(L_ROW) := P_SAVESCMEAU_ROWNUM + L_ROW;
   END LOOP;
   P_SAVESCMEAU_ROWNUM := P_SAVESCMEAU_ROWNUM+A_NR_OF_ROWS;

   FORALL L_ROW IN 1..A_NR_OF_ROWS      
      INSERT INTO UTMELSSAVESCMEATTRIBUTE
      (SC, PG, PGNODE, PA, PANODE,  
       ME, MENODE, 
       AU, AU_VERSION, VALUE, ROW_NUMBER)
       VALUES
      (A_SC(L_ROW), A_PG(L_ROW), A_PGNODE(L_ROW), A_PA(L_ROW), A_PANODE(L_ROW),
       A_ME(L_ROW), A_MENODE(L_ROW), 
       NVL(A_AU(L_ROW),'#'), A_AU_VERSION(L_ROW), A_VALUE(L_ROW), L_ROWNUM_TAB(L_ROW));       

   
   IF NVL(A_NEXT_ROWS, 0) = -1 THEN
      
      P_SAVESCMEAU_CALLS := 0;
      P_SAVESCMEAU_ROWNUM := 0;
      L_ROWNUM_TAB.DELETE();      
   END IF;
   
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('BulkSaveScMeAttribute',SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('BulkSaveScMeAttribute',L_SQLERRM);   
   END IF;
   P_SAVESCMEAU_CALLS := 0;
   P_SAVESCMEAU_ROWNUM := 0;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'BulkSaveScMeAttribute'));
END BULKSAVESCMEATTRIBUTE;

FUNCTION BULKSAVESAMPLE
(A_SC                    IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_ST                    IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_ST_VERSION            IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_DESCRIPTION           IN     UNAPIGEN.VC40_TABLE_TYPE,   
 A_SHELF_LIFE_VAL        IN     UNAPIGEN.NUM_TABLE_TYPE,    
 A_SHELF_LIFE_UNIT       IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_SAMPLING_DATE         IN     UNAPIGEN.DATE_TABLE_TYPE,   
 A_CREATION_DATE         IN     UNAPIGEN.DATE_TABLE_TYPE,   
 A_CREATED_BY            IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_EXEC_START_DATE       IN     UNAPIGEN.DATE_TABLE_TYPE,   
 A_EXEC_END_DATE         IN     UNAPIGEN.DATE_TABLE_TYPE,   
 A_PRIORITY              IN     UNAPIGEN.NUM_TABLE_TYPE,    
 A_LABEL_FORMAT          IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_DESCR_DOC             IN     UNAPIGEN.VC40_TABLE_TYPE,   
 A_DESCR_DOC_VERSION     IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_RQ                    IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_SD                    IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_DATE1                 IN     UNAPIGEN.DATE_TABLE_TYPE,   
 A_DATE2                 IN     UNAPIGEN.DATE_TABLE_TYPE,   
 A_DATE3                 IN     UNAPIGEN.DATE_TABLE_TYPE,   
 A_DATE4                 IN     UNAPIGEN.DATE_TABLE_TYPE,   
 A_DATE5                 IN     UNAPIGEN.DATE_TABLE_TYPE,   
 A_ALLOW_ANY_PP          IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_SC_CLASS              IN     UNAPIGEN.VC2_TABLE_TYPE,    
 A_LOG_HS                IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_LOG_HS_DETAILS        IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_LC                    IN     UNAPIGEN.VC2_TABLE_TYPE,    
 A_LC_VERSION            IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_NR_OF_ROWS            IN     NUMBER,                     
 A_NEXT_ROWS             IN     NUMBER)                     
RETURN NUMBER IS

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   L_SQLERRM := NULL;
   IF NVL(A_NEXT_ROWS, 0) = 0 THEN
      IF NVL(P_SAVESC_CALLS, 0) <> 0 THEN
         L_SQLERRM := 'BulkSaveSample termination call never called for previous method sheet ! (a_next_rows=-1)';
         RAISE STPERROR;
      END IF;
      P_SAVESC_CALLS := 1;
   ELSIF NVL(A_NEXT_ROWS, 0) = -1 THEN
      P_SAVESC_CALLS := NVL(P_SAVESC_CALLS, 0) + 1;      
   ELSIF NVL(A_NEXT_ROWS, 0) = 1 THEN
      IF NVL(P_SAVESC_CALLS, 0) = 0 THEN   
         L_SQLERRM := 'BulkSaveSample startup call never called ! (a_next_rows=0)';
         RAISE STPERROR;   
      END IF;
      IF NVL(UNAPIGEN.P_TXN_LEVEL, 0) <= 1 THEN   
         L_SQLERRM := 'BulkSaveSample called with a_next_rows=1 in a non MST transaction !';
         RAISE STPERROR;   
      END IF;
      P_SAVESC_CALLS := NVL(P_SAVESC_CALLS, 0) + 1;      
   ELSE
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NEXTROWS;
      RAISE STPERROR;
   END IF;         
   IF P_SAVESC_CALLS = 1 THEN
      P_SAVESC_TR_SEQ := UNAPIGEN.P_TR_SEQ;
   ELSE
      IF UNAPIGEN.P_TR_SEQ <> P_SAVESC_TR_SEQ THEN
         L_SQLERRM := 'Successive calls of BulkSaveSample not in the same transaction !';
         RAISE STPERROR;   
      END IF;
   END IF;

   FORALL L_ROW IN 1..A_NR_OF_ROWS      
      INSERT INTO UTMELSSAVESAMPLE
      (SC, ST, ST_VERSION, DESCRIPTION, 
       SHELF_LIFE_VAL, SHELF_LIFE_UNIT, SAMPLING_DATE, SAMPLING_DATE_TZ,
       CREATION_DATE, CREATION_DATE_TZ, CREATED_BY, EXEC_START_DATE, EXEC_START_DATE_TZ,
       EXEC_END_DATE, EXEC_END_DATE_TZ, PRIORITY, LABEL_FORMAT,
       DESCR_DOC, DESCR_DOC_VERSION, RQ, SD, DATE1, DATE1_TZ, 
       DATE2, DATE2_TZ, DATE3, DATE3_TZ, DATE4, DATE4_TZ, DATE5, DATE5_TZ, ALLOW_ANY_PP,
       SC_CLASS, LOG_HS, LOG_HS_DETAILS, LC,
       LC_VERSION)
      VALUES
      (A_SC(L_ROW), A_ST(L_ROW), A_ST_VERSION(L_ROW), A_DESCRIPTION(L_ROW), 
       A_SHELF_LIFE_VAL(L_ROW), A_SHELF_LIFE_UNIT(L_ROW), A_SAMPLING_DATE(L_ROW), A_SAMPLING_DATE(L_ROW),
       A_CREATION_DATE(L_ROW), A_CREATION_DATE(L_ROW), A_CREATED_BY(L_ROW), A_EXEC_START_DATE(L_ROW), A_EXEC_START_DATE(L_ROW),
       A_EXEC_END_DATE(L_ROW), A_EXEC_END_DATE(L_ROW), A_PRIORITY(L_ROW), A_LABEL_FORMAT(L_ROW),
       A_DESCR_DOC(L_ROW), A_DESCR_DOC_VERSION(L_ROW), A_RQ(L_ROW), A_SD(L_ROW), A_DATE1(L_ROW), A_DATE1(L_ROW),
       A_DATE2(L_ROW), A_DATE2(L_ROW), A_DATE3(L_ROW), A_DATE3(L_ROW), A_DATE4(L_ROW), A_DATE4(L_ROW), A_DATE5(L_ROW), A_DATE5(L_ROW), A_ALLOW_ANY_PP(L_ROW),
       A_SC_CLASS(L_ROW), A_LOG_HS(L_ROW), A_LOG_HS_DETAILS(L_ROW), A_LC(L_ROW),
       A_LC_VERSION(L_ROW));       

   
   IF NVL(A_NEXT_ROWS, 0) = -1 THEN
      
      P_SAVESC_CALLS := 0;
   END IF;
   
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('BulkSaveSample',SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('BulkSaveSample',L_SQLERRM);   
   END IF;
   P_SAVESC_CALLS := 0;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'BulkSaveSample'));
END BULKSAVESAMPLE;

FUNCTION BULKSAVESCGROUPKEY
(A_SC                    IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_GK                    IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_GK_VERSION            IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_VALUE                 IN     UNAPIGEN.VC40_TABLE_TYPE,   
 A_NR_OF_ROWS            IN     NUMBER,                     
 A_NEXT_ROWS             IN     NUMBER)                     
RETURN NUMBER IS
BEGIN
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   L_SQLERRM := NULL;
   IF NVL(A_NEXT_ROWS, 0) = 0 THEN
      IF NVL(P_SAVESCGK_CALLS, 0) <> 0 THEN
         L_SQLERRM := 'BulkSaveScGroupKey termination call never called for previous method sheet ! (a_next_rows=-1)';
         RAISE STPERROR;
      END IF;
      P_SAVESCGK_CALLS := 1;
   ELSIF NVL(A_NEXT_ROWS, 0) = -1 THEN
      P_SAVESCGK_CALLS := NVL(P_SAVESCGK_CALLS, 0) + 1;      
   ELSIF NVL(A_NEXT_ROWS, 0) = 1 THEN
      IF NVL(P_SAVESCGK_CALLS, 0) = 0 THEN   
         L_SQLERRM := 'BulkSaveScGroupKey startup call never called ! (a_next_rows=0)';
         RAISE STPERROR;   
      END IF;
      IF NVL(UNAPIGEN.P_TXN_LEVEL, 0) <= 1 THEN   
         L_SQLERRM := 'BulkSaveScGroupKey called with a_next_rows=1 in a non MST transaction !';
         RAISE STPERROR;   
      END IF;
      P_SAVESCGK_CALLS := NVL(P_SAVESCGK_CALLS, 0) + 1;      
   ELSE
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NEXTROWS;
      RAISE STPERROR;
   END IF;         
   IF P_SAVESCGK_CALLS = 1 THEN
      P_SAVESCGK_TR_SEQ := UNAPIGEN.P_TR_SEQ;
      P_SAVESCGK_ROWNUM := 0;
   ELSE
      IF UNAPIGEN.P_TR_SEQ <> P_SAVESCGK_TR_SEQ THEN
         L_SQLERRM := 'Successive calls of BulkSaveScGroupKey not in the same transaction !';
         RAISE STPERROR;   
      END IF;
   END IF;

   FOR L_ROW IN 1..A_NR_OF_ROWS LOOP
      L_ROWNUM_TAB(L_ROW) := P_SAVESCGK_ROWNUM + L_ROW;
   END LOOP;
   P_SAVESCGK_ROWNUM := P_SAVESCGK_ROWNUM+A_NR_OF_ROWS;

   FORALL L_ROW IN 1..A_NR_OF_ROWS      
      INSERT INTO UTMELSSAVESCGROUPKEY
      (SC, 
       GK, GK_VERSION, VALUE, ROW_NUMBER)
       VALUES
      (A_SC(L_ROW), 
       NVL(A_GK(L_ROW),'#'), A_GK_VERSION(L_ROW), A_VALUE(L_ROW), L_ROWNUM_TAB(L_ROW));       

   
   IF NVL(A_NEXT_ROWS, 0) = -1 THEN
      
      P_SAVESCGK_CALLS := 0;
      P_SAVESCGK_ROWNUM := 0;
      L_ROWNUM_TAB.DELETE();
   END IF;
   
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('BulkSaveScGroupKey',SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('BulkSaveScGroupKey',L_SQLERRM);   
   END IF;
   P_SAVESCGK_CALLS := 0;
   P_SAVESCGK_ROWNUM := 0;   
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'BulkSaveScGroupKey'));
END BULKSAVESCGROUPKEY;

FUNCTION BULKSAVESCATTRIBUTE
(A_SC                    IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_AU                    IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_AU_VERSION            IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_VALUE                 IN     UNAPIGEN.VC40_TABLE_TYPE,   
 A_NR_OF_ROWS            IN     NUMBER,                     
 A_NEXT_ROWS             IN     NUMBER)                     
RETURN NUMBER IS

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   L_SQLERRM := NULL;
   IF NVL(A_NEXT_ROWS, 0) = 0 THEN
      IF NVL(P_SAVESCAU_CALLS, 0) <> 0 THEN
         L_SQLERRM := 'BulkSaveScAttribute termination call never called for previous method sheet ! (a_next_rows=-1)';
         RAISE STPERROR;
      END IF;
      P_SAVESCAU_CALLS := 1;
   ELSIF NVL(A_NEXT_ROWS, 0) = -1 THEN
      P_SAVESCAU_CALLS := NVL(P_SAVESCAU_CALLS, 0) + 1;      
   ELSIF NVL(A_NEXT_ROWS, 0) = 1 THEN
      IF NVL(P_SAVESCAU_CALLS, 0) = 0 THEN   
         L_SQLERRM := 'BulkSaveScAttribute startup call never called ! (a_next_rows=0)';
         RAISE STPERROR;   
      END IF;
      IF NVL(UNAPIGEN.P_TXN_LEVEL, 0) <= 1 THEN   
         L_SQLERRM := 'BulkSaveScAttribute called with a_next_rows=1 in a non MST transaction !';
         RAISE STPERROR;   
      END IF;
      P_SAVESCAU_CALLS := NVL(P_SAVESCAU_CALLS, 0) + 1;      
   ELSE
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NEXTROWS;
      RAISE STPERROR;
   END IF;         
   IF P_SAVESCAU_CALLS = 1 THEN
      P_SAVESCAU_TR_SEQ := UNAPIGEN.P_TR_SEQ;
      P_SAVESCAU_ROWNUM := 0;
   ELSE
      IF UNAPIGEN.P_TR_SEQ <> P_SAVESCAU_TR_SEQ THEN
         L_SQLERRM := 'Successive calls of BulkSaveScAttribute not in the same transaction !';
         RAISE STPERROR;   
      END IF;
   END IF;

   FOR L_ROW IN 1..A_NR_OF_ROWS LOOP
      L_ROWNUM_TAB(L_ROW) := P_SAVESCAU_ROWNUM + L_ROW;
   END LOOP;
   P_SAVESCAU_ROWNUM := P_SAVESCAU_ROWNUM+A_NR_OF_ROWS;
   
   FORALL L_ROW IN 1..A_NR_OF_ROWS      
      INSERT INTO UTMELSSAVESCATTRIBUTE
      (SC, AU, AU_VERSION, VALUE, ROW_NUMBER)
       VALUES
      (A_SC(L_ROW), NVL(A_AU(L_ROW),'#'), A_AU_VERSION(L_ROW), A_VALUE(L_ROW), L_ROWNUM_TAB(L_ROW));       

   
   IF NVL(A_NEXT_ROWS, 0) = -1 THEN
      
      P_SAVESCAU_CALLS := 0;
      P_SAVESCAU_ROWNUM := 0;
      L_ROWNUM_TAB.DELETE();
   END IF;
   
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('BulkSaveScAttribute',SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('BulkSaveScAttribute',L_SQLERRM);   
   END IF;
   P_SAVESCAU_CALLS := 0;
   P_SAVESCAU_ROWNUM := 0;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'BulkSaveScAttribute'));
END BULKSAVESCATTRIBUTE;



PROCEDURE HANDLESCATTRIBUTE
(A_SC         IN VARCHAR2)
IS 


L_RET_CODE           INTEGER;
L_ROW                INTEGER;
L_ENTER_LOOP         BOOLEAN;


L_PREV_SC            VARCHAR2(20);


L_SCAU_SC                          VARCHAR2(20);
L_SCAU_NR_OF_ROWS                  NUMBER;
L_SCAU_MODIFY_REASON               VARCHAR2(255);
L_SCAU_AU_TAB                      UNAPIGEN.VC20_TABLE_TYPE;
L_SCAU_AU_VERSION_TAB              UNAPIGEN.VC20_TABLE_TYPE;
L_SCAU_VALUE_TAB                   UNAPIGEN.VC40_TABLE_TYPE;

CURSOR C_MELSSAVESCATTRIBUTE IS
   SELECT * 
   FROM UTMELSSAVESCATTRIBUTE 
   WHERE SC=NVL(A_SC , SC)
   ORDER BY SC, ROW_NUMBER;
L_SCAU_REC  C_MELSSAVESCATTRIBUTE%ROWTYPE;

   PROCEDURE SAVESCATTRIBUTE IS
   BEGIN
      IF L_ROW > 0 THEN   
         L_SCAU_NR_OF_ROWS := L_ROW;         
         LOG('Savescau for '||L_PREV_SC);         

         
         IF L_SCAU_AU_TAB (1)= '#' THEN
            L_SCAU_NR_OF_ROWS := 0;
         END IF;

         L_RET_CODE := UNAPISCP.SAVESCATTRIBUTE
                         (L_PREV_SC,
                          L_SCAU_AU_TAB,
                          L_SCAU_AU_VERSION_TAB,
                          L_SCAU_VALUE_TAB,
                          L_SCAU_NR_OF_ROWS,
                          L_SCAU_MODIFY_REASON);
         
         IF L_RET_CODE != UNAPIGEN.DBERR_SUCCESS THEN
            RAISE_APPLICATION_ERROR(-20000,'Major error on SaveScAttribute:ret_code='||L_RET_CODE ||
              '#sc='||L_SCAU_SC||
              '#auth='||UNAPIAUT.P_NOT_AUTHORISED);
         END IF;
         SAVEPOINT_UNILAB4;
      END IF;
   END;

BEGIN
   LOG('Start handling scau');

   L_ROW := 0;
   L_ENTER_LOOP := FALSE;
   OPEN C_MELSSAVESCATTRIBUTE;
   LOOP
      FETCH C_MELSSAVESCATTRIBUTE
      INTO L_SCAU_REC;
 
      IF C_MELSSAVESCATTRIBUTE%FOUND THEN
      
         L_ENTER_LOOP := TRUE;
         
         
         
         IF L_PREV_SC <> L_SCAU_REC.SC THEN
                        
            SAVESCATTRIBUTE;            
            L_ROW := 0;
            L_PREV_SC := L_SCAU_REC.SC;
         ELSIF L_PREV_SC IS NULL THEN
            L_PREV_SC := L_SCAU_REC.SC;
         END IF;
            
         
         L_ROW := L_ROW + 1;
         L_SCAU_AU_TAB (L_ROW) := L_SCAU_REC.AU;
         L_SCAU_VALUE_TAB (L_ROW) := L_SCAU_REC.VALUE;
         L_SCAU_AU_VERSION_TAB (L_ROW) := NULL;
      ELSE
         IF L_ROW > 0 AND L_PREV_SC IS NULL THEN
            
            L_PREV_SC := L_SCAU_REC.SC;
         END IF;
         CLOSE C_MELSSAVESCATTRIBUTE;
         SAVESCATTRIBUTE;            
         L_ROW := 0; 
         EXIT;
      END IF;
   END LOOP;
   IF NOT L_ENTER_LOOP AND A_SC IS NOT NULL THEN
      
      SAVEPOINT_UNILAB4;
   END IF;
   LOG('End handling scau');

EXCEPTION
WHEN OTHERS THEN
   
   IF C_MELSSAVESCATTRIBUTE%ISOPEN THEN
      CLOSE C_MELSSAVESCATTRIBUTE;
   END IF;         
   RAISE;
END HANDLESCATTRIBUTE;

PROCEDURE HANDLESCGROUPKEY
(A_SC         IN VARCHAR2)
IS 


L_RET_CODE           INTEGER;
L_ROW                INTEGER;
L_ENTER_LOOP         BOOLEAN;


L_PREV_SC            VARCHAR2(20);


L_SCGK_SC                          VARCHAR2(20);
L_SCGK_NR_OF_ROWS                  NUMBER;
L_SCGK_MODIFY_REASON               VARCHAR2(255);
L_SCGK_GK_TAB                      UNAPIGEN.VC20_TABLE_TYPE;
L_SCGK_GK_VERSION_TAB              UNAPIGEN.VC20_TABLE_TYPE;
L_SCGK_VALUE_TAB                   UNAPIGEN.VC40_TABLE_TYPE;

CURSOR C_MELSSAVESCGROUPKEY IS
   SELECT * 
   FROM UTMELSSAVESCGROUPKEY 
   WHERE SC=NVL(A_SC , SC)
   ORDER BY SC, ROW_NUMBER;
L_SCGK_REC  C_MELSSAVESCGROUPKEY%ROWTYPE;

   PROCEDURE SAVESCGROUPKEY IS
   BEGIN
      IF L_ROW > 0 THEN   
         LOG('Savescgk for '||L_PREV_SC);
         L_SCGK_NR_OF_ROWS := L_ROW;

         
         IF L_SCGK_GK_TAB (1)= '#' THEN
            L_SCGK_NR_OF_ROWS := 0;
         END IF;

         L_RET_CODE := UNAPISCP.SAVESCGROUPKEY
                         (L_PREV_SC,
                          L_SCGK_GK_TAB,
                          L_SCGK_GK_VERSION_TAB,
                          L_SCGK_VALUE_TAB,
                          L_SCGK_NR_OF_ROWS,
                          L_SCGK_MODIFY_REASON);
         
         IF L_RET_CODE != UNAPIGEN.DBERR_SUCCESS THEN
            RAISE_APPLICATION_ERROR(-20000,'Major error on SaveScGroupKey:ret_code='||L_RET_CODE ||
              '#sc='||L_SCGK_SC||
              '#auth='||UNAPIAUT.P_NOT_AUTHORISED);
         END IF;
         HANDLESCATTRIBUTE(L_PREV_SC);
      END IF;
   END;

BEGIN

   LOG('Start handling scgk');
   L_ROW := 0;
   L_ENTER_LOOP := FALSE;
   OPEN C_MELSSAVESCGROUPKEY;
   LOOP
      FETCH C_MELSSAVESCGROUPKEY
      INTO L_SCGK_REC;
 
      IF C_MELSSAVESCGROUPKEY%FOUND THEN
      
         L_ENTER_LOOP := TRUE;
         
         
         IF L_PREV_SC <> L_SCGK_REC.SC THEN
                        
            SAVESCGROUPKEY;            
            L_ROW := 0;
            L_PREV_SC := L_SCGK_REC.SC;
         ELSIF L_PREV_SC IS NULL THEN
            L_PREV_SC := L_SCGK_REC.SC;
         END IF;
            
         
         L_ROW := L_ROW + 1;
         L_SCGK_GK_TAB (L_ROW) := L_SCGK_REC.GK;
         L_SCGK_VALUE_TAB (L_ROW) := L_SCGK_REC.VALUE;
         L_SCGK_GK_VERSION_TAB (L_ROW) := NULL;
      ELSE
         IF L_ROW > 0 AND L_PREV_SC IS NULL THEN
            
            L_PREV_SC := L_SCGK_REC.SC;
         END IF;
         CLOSE C_MELSSAVESCGROUPKEY;
         SAVESCGROUPKEY;            
         L_ROW := 0; 
         EXIT;
      END IF;
   END LOOP;
   IF NOT L_ENTER_LOOP AND A_SC IS NOT NULL THEN
      
      HANDLESCATTRIBUTE(A_SC);
   END IF;
   LOG('End handling scgk');
         
EXCEPTION
WHEN OTHERS THEN
   
   IF C_MELSSAVESCGROUPKEY%ISOPEN THEN
      CLOSE C_MELSSAVESCGROUPKEY;
   END IF;         
   RAISE;
END HANDLESCGROUPKEY;

PROCEDURE HANDLESAMPLE
(A_SC         IN VARCHAR2)
IS 


L_RET_CODE           INTEGER;
L_ROW                INTEGER;
L_ENTER_LOOP         BOOLEAN;


L_PREV_SC            VARCHAR2(20);


L_SC_SC                          VARCHAR2(20);
L_SC_ST                          VARCHAR2(20);
L_SC_ST_VERSION                  VARCHAR2(20);
L_SC_DESCRIPTION                 VARCHAR2(40);
L_SC_SHELF_LIFE_VAL              NUMBER;
L_SC_SHELF_LIFE_UNIT             VARCHAR2(20);
L_SC_SAMPLING_DATE               TIMESTAMP WITH TIME ZONE;
L_SC_CREATION_DATE               TIMESTAMP WITH TIME ZONE;
L_SC_CREATED_BY                  VARCHAR2(20);
L_SC_EXEC_START_DATE             TIMESTAMP WITH TIME ZONE;
L_SC_EXEC_END_DATE               TIMESTAMP WITH TIME ZONE;
L_SC_PRIORITY                    NUMBER;
L_SC_LABEL_FORMAT                VARCHAR2(20);
L_SC_DESCR_DOC                   VARCHAR2(40);
L_SC_DESCR_DOC_VERSION           VARCHAR2(20);
L_SC_RQ                          VARCHAR2(20);
L_SC_SD                          VARCHAR2(20);
L_SC_DATE1                       TIMESTAMP WITH TIME ZONE;
L_SC_DATE2                       TIMESTAMP WITH TIME ZONE;
L_SC_DATE3                       TIMESTAMP WITH TIME ZONE;
L_SC_DATE4                       TIMESTAMP WITH TIME ZONE;
L_SC_DATE5                       TIMESTAMP WITH TIME ZONE;
L_SC_ALLOW_ANY_PP                CHAR(1);
L_SC_SC_CLASS                    VARCHAR2(2);
L_SC_LOG_HS                      CHAR(1);
L_SC_LOG_HS_DETAILS              CHAR(1);
L_SC_LC                          VARCHAR2(2);
L_SC_LC_VERSION                  VARCHAR2(20);
L_SC_MODIFY_REASON               VARCHAR2(255);

CURSOR C_MELSSAVESAMPLE IS
   SELECT * 
   FROM UTMELSSAVESAMPLE 
   WHERE SC=NVL(A_SC , SC)
   ORDER BY SC;
L_SC_REC  C_MELSSAVESAMPLE%ROWTYPE;

   PROCEDURE SAVESAMPLE IS
   BEGIN
      IF L_ROW > 0 THEN   

         LOG('Savesc for '||L_PREV_SC);
         L_RET_CODE := UNAPISC.SAVESAMPLE
                         (L_SC_SC,
                          L_SC_ST,
                          L_SC_ST_VERSION,
                          L_SC_DESCRIPTION,
                          L_SC_SHELF_LIFE_VAL,
                          L_SC_SHELF_LIFE_UNIT,
                          L_SC_SAMPLING_DATE,
                          L_SC_CREATION_DATE,
                          L_SC_CREATED_BY,
                          L_SC_EXEC_START_DATE,
                          L_SC_EXEC_END_DATE,
                          L_SC_PRIORITY,
                          L_SC_LABEL_FORMAT,
                          L_SC_DESCR_DOC,
                          L_SC_DESCR_DOC_VERSION,
                          L_SC_RQ,
                          L_SC_SD,
                          L_SC_DATE1,
                          L_SC_DATE2,
                          L_SC_DATE3,
                          L_SC_DATE4,
                          L_SC_DATE5,
                          L_SC_ALLOW_ANY_PP,
                          L_SC_SC_CLASS,
                          L_SC_LOG_HS,
                          L_SC_LOG_HS_DETAILS,
                          L_SC_LC,
                          L_SC_LC_VERSION,
                          L_SC_MODIFY_REASON);
         
         IF L_RET_CODE != UNAPIGEN.DBERR_SUCCESS THEN
            RAISE_APPLICATION_ERROR(-20000,'Major error on SaveSample:ret_code='||L_RET_CODE ||
              '#sc='||L_SC_SC||
              '#auth='||UNAPIAUT.P_NOT_AUTHORISED);
         END IF;
         HANDLESCGROUPKEY(L_PREV_SC);
      END IF;
   END;

BEGIN

   LOG('Start handling sc');
   L_ROW := 0;
   L_ENTER_LOOP := FALSE;
   OPEN C_MELSSAVESAMPLE;
   LOOP
      FETCH C_MELSSAVESAMPLE
      INTO L_SC_REC;
 
      IF C_MELSSAVESAMPLE%FOUND THEN
      
         L_ENTER_LOOP := TRUE;
         
         
         
         IF L_PREV_SC <> L_SC_REC.SC THEN
                        
            SAVESAMPLE;            
            L_ROW := 0;
            L_PREV_SC := L_SC_REC.SC;
         ELSIF L_PREV_SC IS NULL THEN
            L_PREV_SC := L_SC_REC.SC;
         END IF;
            
         
         L_ROW := L_ROW + 1;
         L_SC_SC := L_SC_REC.SC;
         L_SC_ST := L_SC_REC.ST;
         L_SC_ST_VERSION := L_SC_REC.ST_VERSION;
         L_SC_DESCRIPTION := L_SC_REC.DESCRIPTION;
         L_SC_SHELF_LIFE_VAL := L_SC_REC.SHELF_LIFE_VAL;
         L_SC_SHELF_LIFE_UNIT := L_SC_REC.SHELF_LIFE_UNIT;
         L_SC_SAMPLING_DATE := L_SC_REC.SAMPLING_DATE;
         L_SC_CREATION_DATE := L_SC_REC.CREATION_DATE;
         L_SC_CREATED_BY := L_SC_REC.CREATED_BY;
         L_SC_EXEC_START_DATE := L_SC_REC.EXEC_START_DATE;
         L_SC_EXEC_END_DATE := L_SC_REC.EXEC_END_DATE;
         L_SC_PRIORITY := L_SC_REC.PRIORITY;
         L_SC_LABEL_FORMAT := L_SC_REC.LABEL_FORMAT;
         L_SC_DESCR_DOC := L_SC_REC.DESCR_DOC;
         L_SC_DESCR_DOC_VERSION := L_SC_REC.DESCR_DOC_VERSION;
         L_SC_RQ := L_SC_REC.RQ;
         L_SC_SD := L_SC_REC.SD;
         L_SC_DATE1 := L_SC_REC.DATE1;
         L_SC_DATE2 := L_SC_REC.DATE2;
         L_SC_DATE3 := L_SC_REC.DATE3;
         L_SC_DATE4 := L_SC_REC.DATE4;
         L_SC_DATE5 := L_SC_REC.DATE5;
         L_SC_ALLOW_ANY_PP := L_SC_REC.ALLOW_ANY_PP;
         L_SC_SC_CLASS := L_SC_REC.SC_CLASS;
         L_SC_LOG_HS := L_SC_REC.LOG_HS;
         L_SC_LOG_HS_DETAILS := L_SC_REC.LOG_HS_DETAILS;
         L_SC_LC := L_SC_REC.LC;
         L_SC_LC_VERSION := L_SC_REC.LC_VERSION;
      ELSE
         IF L_ROW > 0 AND L_PREV_SC IS NULL THEN
            
            L_PREV_SC := L_SC_REC.SC;
         END IF;
         CLOSE C_MELSSAVESAMPLE;
         SAVESAMPLE;            
         L_ROW := 0; 
         EXIT;
      END IF;
   END LOOP;
   IF NOT L_ENTER_LOOP AND A_SC IS NOT NULL THEN
      
      HANDLESCGROUPKEY(A_SC);
   END IF;
   LOG('End handling sc');
         
EXCEPTION
WHEN OTHERS THEN
   
   IF C_MELSSAVESAMPLE%ISOPEN THEN
      CLOSE C_MELSSAVESAMPLE;
   END IF;         
   RAISE;
END HANDLESAMPLE;

PROCEDURE HANDLEMETHODATTRIBUTE
(A_SC         IN VARCHAR2,
 A_PG         IN VARCHAR2,
 A_PGNODE     IN NUMBER,
 A_PA         IN VARCHAR2,
 A_PANODE     IN NUMBER,
 A_ME         IN VARCHAR2,
 A_MENODE     IN NUMBER,
 A_REANALYSIS IN NUMBER)
IS 


L_RET_CODE           INTEGER;
L_ROW                INTEGER;
L_ENTER_LOOP         BOOLEAN;

L_PREV_SC            VARCHAR2(20);
L_PREV_PG            VARCHAR2(20);
L_PREV_PGNODE        NUMBER(9);
L_PREV_PA            VARCHAR2(20);
L_PREV_PANODE        NUMBER(9);
L_PREV_ME            VARCHAR2(20);
L_PREV_MENODE        NUMBER(9);
L_PREV_REANALYSIS    NUMBER(3);

L_MEAU_NR_OF_ROWS     NUMBER;
L_MEAU_MODIFY_REASON  VARCHAR2(255);
L_MEAU_AU_TAB         UNAPIGEN.VC20_TABLE_TYPE;
L_MEAU_AU_VERSION_TAB UNAPIGEN.VC20_TABLE_TYPE;
L_MEAU_VALUE_TAB      UNAPIGEN.VC40_TABLE_TYPE;

CURSOR C_MELSSAVESCMEATTRIBUTE IS
   SELECT * 
   FROM UTMELSSAVESCMEATTRIBUTE 
   WHERE SC=NVL(A_SC , SC)
   AND PG=NVL(A_PG, PG)
   AND PGNODE=NVL(A_PGNODE, PGNODE)
   AND PA=NVL(A_PA, PA)
   AND PANODE=NVL(A_PANODE, PANODE)
   AND ME=NVL(A_ME, ME)
   AND MENODE=NVL(A_MENODE, MENODE) 
   ORDER BY SC, PG, PGNODE, PA, PANODE, ME, MENODE, ROW_NUMBER;
L_MEAU_REC  C_MELSSAVESCMEATTRIBUTE%ROWTYPE;

   PROCEDURE SAVESCMEATTRIBUTE IS
   BEGIN
      IF L_ROW > 0 THEN   
         L_MEAU_NR_OF_ROWS := L_ROW;
         
         
         IF L_MEAU_AU_TAB (1)= '#' THEN
            L_MEAU_NR_OF_ROWS := 0;
         END IF;

         
         LOG('Savescmeau for '||L_PREV_SC||'#me='||L_PREV_ME);         
         L_RET_CODE := UNAPIMEP.SAVESCMEATTRIBUTE
                                    (L_PREV_SC,
                                     L_PREV_PG,
                                     L_PREV_PGNODE,
                                     L_PREV_PA,
                                     L_PREV_PANODE,
                                     L_PREV_ME,
                                     L_PREV_MENODE,
                                     L_MEAU_AU_TAB,
                                     L_MEAU_AU_VERSION_TAB,
                                     L_MEAU_VALUE_TAB,
                                     L_MEAU_NR_OF_ROWS,
                                     L_MEAU_MODIFY_REASON);
         
         IF L_RET_CODE != UNAPIGEN.DBERR_SUCCESS THEN
            RAISE_APPLICATION_ERROR(-20000,'Major error on SaveScMeGroupKey:ret_code='||L_RET_CODE ||
              '#sc='||L_PREV_SC||'#pg='||L_PREV_PG||
              '#pgnode='||NVL(TO_CHAR(L_PREV_PGNODE),'null')||
              '#pa='||L_PREV_PA||
              '#panode='||NVL(TO_CHAR(L_PREV_PANODE),'NULL')||
              '#me='||L_PREV_ME||
              '#menode='||NVL(TO_CHAR(L_PREV_MENODE),'NULL')||
              '#auth='||UNAPIAUT.P_NOT_AUTHORISED);
         END IF;
         
         
         HANDLESAMPLE(L_PREV_SC);
      END IF;
   END;

BEGIN

   LOG('Start handling meau');
   L_ROW := 0;
   L_ENTER_LOOP := FALSE;
   OPEN C_MELSSAVESCMEATTRIBUTE;
   LOOP
      FETCH C_MELSSAVESCMEATTRIBUTE
      INTO L_MEAU_REC;
 
      IF C_MELSSAVESCMEATTRIBUTE%FOUND THEN
      
         L_ENTER_LOOP := TRUE;
         
         
         IF L_PREV_SC <> L_MEAU_REC.SC OR
            L_PREV_PG <> L_MEAU_REC.PG OR
            L_PREV_PGNODE <> L_MEAU_REC.PGNODE OR
            L_PREV_PA <> L_MEAU_REC.PA OR
            L_PREV_PANODE <> L_MEAU_REC.PANODE OR
            L_PREV_ME <> L_MEAU_REC.ME OR
            L_PREV_MENODE <> L_MEAU_REC.MENODE THEN
                        
            SAVESCMEATTRIBUTE;            
            L_ROW := 0;
            L_PREV_SC := L_MEAU_REC.SC;
            L_PREV_PG := L_MEAU_REC.PG;
            L_PREV_PGNODE := L_MEAU_REC.PGNODE;
            L_PREV_PA := L_MEAU_REC.PA;
            L_PREV_PANODE := L_MEAU_REC.PANODE;
            L_PREV_ME := L_MEAU_REC.ME;
            L_PREV_MENODE := L_MEAU_REC.MENODE;
            
         ELSIF L_PREV_SC IS NULL THEN
            L_PREV_SC := L_MEAU_REC.SC;
            L_PREV_PG := L_MEAU_REC.PG;
            L_PREV_PGNODE := L_MEAU_REC.PGNODE;            
            L_PREV_PA := L_MEAU_REC.PA;
            L_PREV_PANODE := L_MEAU_REC.PANODE;            
            L_PREV_ME := L_MEAU_REC.ME;
            L_PREV_MENODE := L_MEAU_REC.MENODE;            
         END IF;
            
         
         L_ROW := L_ROW + 1;
         L_MEAU_AU_TAB (L_ROW) := L_MEAU_REC.AU;
         L_MEAU_VALUE_TAB (L_ROW) := L_MEAU_REC.VALUE;
         L_MEAU_AU_VERSION_TAB (L_ROW) := NULL;

      ELSE
         IF L_ROW > 0 AND L_PREV_SC IS NULL THEN
            
            L_PREV_SC := L_MEAU_REC.SC;
            L_PREV_PG := L_MEAU_REC.PG;
            L_PREV_PGNODE := L_MEAU_REC.PGNODE;
            L_PREV_PA := L_MEAU_REC.PA;
            L_PREV_PANODE := L_MEAU_REC.PANODE;
            L_PREV_ME := L_MEAU_REC.ME;
            L_PREV_MENODE := L_MEAU_REC.MENODE;
         END IF;
         CLOSE C_MELSSAVESCMEATTRIBUTE;
         SAVESCMEATTRIBUTE;            
         L_ROW := 0; 
         EXIT;
      END IF;
   END LOOP;
   IF NOT L_ENTER_LOOP AND A_SC IS NOT NULL THEN
      
      HANDLESAMPLE(A_SC);
   END IF;
   LOG('End handling meau');
         
EXCEPTION
WHEN OTHERS THEN
   
   IF C_MELSSAVESCMEATTRIBUTE%ISOPEN THEN
      CLOSE C_MELSSAVESCMEATTRIBUTE;
   END IF;    
   RAISE;
END HANDLEMETHODATTRIBUTE;

PROCEDURE HANDLEMETHODGROUPKEY
(A_SC         IN VARCHAR2,
 A_PG         IN VARCHAR2,
 A_PGNODE     IN NUMBER,
 A_PA         IN VARCHAR2,
 A_PANODE     IN NUMBER,
 A_ME         IN VARCHAR2,
 A_MENODE     IN NUMBER,
 A_REANALYSIS IN NUMBER)
IS 


L_RET_CODE           INTEGER;
L_ROW                INTEGER;
L_ENTER_LOOP         BOOLEAN;

L_PREV_SC            VARCHAR2(20);
L_PREV_PG            VARCHAR2(20);
L_PREV_PGNODE        NUMBER(9);
L_PREV_PA            VARCHAR2(20);
L_PREV_PANODE        NUMBER(9);
L_PREV_ME            VARCHAR2(20);
L_PREV_MENODE        NUMBER(9);
L_PREV_REANALYSIS    NUMBER(3);

L_MEGK_NR_OF_ROWS     NUMBER;
L_MEGK_MODIFY_REASON  VARCHAR2(255);
L_MEGK_GK_TAB         UNAPIGEN.VC20_TABLE_TYPE;
L_MEGK_GK_VERSION_TAB UNAPIGEN.VC20_TABLE_TYPE;
L_MEGK_VALUE_TAB      UNAPIGEN.VC40_TABLE_TYPE;

CURSOR C_MELSSAVESCMEGROUPKEY IS
   SELECT * 
   FROM UTMELSSAVESCMEGROUPKEY 
   WHERE SC=NVL(A_SC , SC)
   AND PG=NVL(A_PG, PG)
   AND PGNODE=NVL(A_PGNODE, PGNODE)
   AND PA=NVL(A_PA, PA)
   AND PANODE=NVL(A_PANODE, PANODE)
   AND ME=NVL(A_ME, ME)
   AND MENODE=NVL(A_MENODE, MENODE) 
   ORDER BY SC, PG, PGNODE, PA, PANODE, ME, MENODE, ROW_NUMBER;
L_MEGK_REC  C_MELSSAVESCMEGROUPKEY%ROWTYPE;

   PROCEDURE SAVESCMEGROUPKEY IS
   BEGIN
      IF L_ROW > 0 THEN   
         L_MEGK_NR_OF_ROWS := L_ROW;

         
         IF L_MEGK_GK_TAB (1)= '#' THEN
            L_MEGK_NR_OF_ROWS := 0;
         END IF;

         
         LOG('Savescmegk for '||L_PREV_SC||'#me='||L_PREV_ME);         
         L_RET_CODE := UNAPIMEP.SAVESCMEGROUPKEY
                                    (L_PREV_SC,
                                     L_PREV_PG,
                                     L_PREV_PGNODE,
                                     L_PREV_PA,
                                     L_PREV_PANODE,
                                     L_PREV_ME,
                                     L_PREV_MENODE,
                                     L_MEGK_GK_TAB,
                                     L_MEGK_GK_VERSION_TAB,
                                     L_MEGK_VALUE_TAB,
                                     L_MEGK_NR_OF_ROWS,
                                     L_MEGK_MODIFY_REASON);
         
         IF L_RET_CODE != UNAPIGEN.DBERR_SUCCESS THEN
            RAISE_APPLICATION_ERROR(-20000,'Major error on SaveScMeGroupKey:ret_code='||L_RET_CODE ||
              '#sc='||L_PREV_SC||'#pg='||L_PREV_PG||
              '#pgnode='||NVL(TO_CHAR(L_PREV_PGNODE),'null')||
              '#pa='||L_PREV_PA||
              '#panode='||NVL(TO_CHAR(L_PREV_PANODE),'NULL')||
              '#me='||L_PREV_ME||
              '#menode='||NVL(TO_CHAR(L_PREV_MENODE),'NULL')||
              '#auth='||UNAPIAUT.P_NOT_AUTHORISED);
         END IF;
         
         
         HANDLEMETHODATTRIBUTE(L_PREV_SC, L_PREV_PG, L_PREV_PGNODE, L_PREV_PA, L_PREV_PANODE,
                               L_PREV_ME, L_PREV_MENODE, L_PREV_REANALYSIS);
      END IF;
   END;

BEGIN

   LOG('Start handling megk');
   L_ROW := 0;
   L_ENTER_LOOP := FALSE;
   OPEN C_MELSSAVESCMEGROUPKEY;
   LOOP
      FETCH C_MELSSAVESCMEGROUPKEY
      INTO L_MEGK_REC;
 
      IF C_MELSSAVESCMEGROUPKEY%FOUND THEN
      
         L_ENTER_LOOP := TRUE;
         
         
         IF L_PREV_SC <> L_MEGK_REC.SC OR
            L_PREV_PG <> L_MEGK_REC.PG OR
            L_PREV_PGNODE <> L_MEGK_REC.PGNODE OR
            L_PREV_PA <> L_MEGK_REC.PA OR
            L_PREV_PANODE <> L_MEGK_REC.PANODE OR
            L_PREV_ME <> L_MEGK_REC.ME OR
            L_PREV_MENODE <> L_MEGK_REC.MENODE THEN
                        
            SAVESCMEGROUPKEY;            
            L_ROW := 0;
            L_PREV_SC := L_MEGK_REC.SC;
            L_PREV_PG := L_MEGK_REC.PG;
            L_PREV_PGNODE := L_MEGK_REC.PGNODE;
            L_PREV_PA := L_MEGK_REC.PA;
            L_PREV_PANODE := L_MEGK_REC.PANODE;
            L_PREV_ME := L_MEGK_REC.ME;
            L_PREV_MENODE := L_MEGK_REC.MENODE;
            
         ELSIF L_PREV_SC IS NULL THEN
            L_PREV_SC := L_MEGK_REC.SC;
            L_PREV_PG := L_MEGK_REC.PG;
            L_PREV_PGNODE := L_MEGK_REC.PGNODE;            
            L_PREV_PA := L_MEGK_REC.PA;
            L_PREV_PANODE := L_MEGK_REC.PANODE;            
            L_PREV_ME := L_MEGK_REC.ME;
            L_PREV_MENODE := L_MEGK_REC.MENODE;            
         END IF;
            
         
         L_ROW := L_ROW + 1;
         L_MEGK_GK_TAB (L_ROW) := L_MEGK_REC.GK;
         L_MEGK_VALUE_TAB (L_ROW) := L_MEGK_REC.VALUE;
         L_MEGK_GK_VERSION_TAB (L_ROW) := NULL;

      ELSE
         IF L_ROW > 0 AND L_PREV_SC IS NULL THEN
            
            L_PREV_SC := L_MEGK_REC.SC;
            L_PREV_PG := L_MEGK_REC.PG;
            L_PREV_PGNODE := L_MEGK_REC.PGNODE;
            L_PREV_PA := L_MEGK_REC.PA;
            L_PREV_PANODE := L_MEGK_REC.PANODE;
            L_PREV_ME := L_MEGK_REC.ME;
            L_PREV_MENODE := L_MEGK_REC.MENODE;
         END IF;
         CLOSE C_MELSSAVESCMEGROUPKEY;
         SAVESCMEGROUPKEY;            
         L_ROW := 0; 
         EXIT;
      END IF;
   END LOOP;
   IF NOT L_ENTER_LOOP AND A_SC IS NOT NULL THEN
      
      HANDLEMETHODATTRIBUTE(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE,
                            A_ME, A_MENODE, A_REANALYSIS);
   END IF;
   LOG('End handling megk');
         
EXCEPTION
WHEN OTHERS THEN
   
   IF C_MELSSAVESCMEGROUPKEY%ISOPEN THEN
      CLOSE C_MELSSAVESCMEGROUPKEY;
   END IF;    
   RAISE;
END HANDLEMETHODGROUPKEY;

PROCEDURE HANDLEMETHODCELL
(A_SC         IN VARCHAR2,
 A_PG         IN VARCHAR2,
 A_PGNODE     IN NUMBER,
 A_PA         IN VARCHAR2,
 A_PANODE     IN NUMBER,
 A_ME         IN VARCHAR2,
 A_MENODE     IN NUMBER,
 A_REANALYSIS IN NUMBER)
IS 


L_RET_CODE           INTEGER;
L_ROW                INTEGER;
L_ENTER_LOOP         BOOLEAN;

L_PREV_SC            VARCHAR2(20);
L_PREV_PG            VARCHAR2(20);
L_PREV_PGNODE        NUMBER(9);
L_PREV_PA            VARCHAR2(20);
L_PREV_PANODE        NUMBER(9);
L_PREV_ME            VARCHAR2(20);
L_PREV_MENODE        NUMBER(9);
L_PREV_REANALYSIS    NUMBER(3);


L_CE_COMPLETED             CHAR(1);
L_CE_NR_OF_ROWS            NUMBER;
L_CE_NEXT_ROWS             NUMBER;
L_CE_SC_TAB                UNAPIGEN.VC20_TABLE_TYPE;
L_CE_PG_TAB                UNAPIGEN.VC20_TABLE_TYPE;
L_CE_PGNODE_TAB            UNAPIGEN.LONG_TABLE_TYPE;
L_CE_PA_TAB                UNAPIGEN.VC20_TABLE_TYPE;
L_CE_PANODE_TAB            UNAPIGEN.LONG_TABLE_TYPE;
L_CE_ME_TAB                UNAPIGEN.VC20_TABLE_TYPE;
L_CE_MENODE_TAB            UNAPIGEN.LONG_TABLE_TYPE;
L_CE_REANALYSIS_TAB        UNAPIGEN.NUM_TABLE_TYPE;
L_CE_CELL_TAB              UNAPIGEN.VC20_TABLE_TYPE;
L_CE_CELLNODE_TAB          UNAPIGEN.LONG_TABLE_TYPE;
L_CE_DSP_TITLE_TAB         UNAPIGEN.VC40_TABLE_TYPE;
L_CE_VALUE_F_TAB           UNAPIGEN.FLOAT_TABLE_TYPE;
L_CE_VALUE_S_TAB           UNAPIGEN.VC40_TABLE_TYPE;
L_CE_CELL_TP_TAB           UNAPIGEN.CHAR1_TABLE_TYPE;
L_CE_POS_X_TAB             UNAPIGEN.NUM_TABLE_TYPE;
L_CE_POS_Y_TAB             UNAPIGEN.NUM_TABLE_TYPE;
L_CE_ALIGN_TAB             UNAPIGEN.CHAR1_TABLE_TYPE;
L_CE_WINSIZE_X_TAB         UNAPIGEN.NUM_TABLE_TYPE;
L_CE_WINSIZE_Y_TAB         UNAPIGEN.NUM_TABLE_TYPE;
L_CE_IS_PROTECTED_TAB      UNAPIGEN.CHAR1_TABLE_TYPE;
L_CE_MANDATORY_TAB         UNAPIGEN.CHAR1_TABLE_TYPE;
L_CE_HIDDEN_TAB            UNAPIGEN.CHAR1_TABLE_TYPE;
L_CE_UNIT_TAB              UNAPIGEN.VC20_TABLE_TYPE;
L_CE_FORMAT_TAB            UNAPIGEN.VC40_TABLE_TYPE;
L_CE_EQ_TAB                UNAPIGEN.VC20_TABLE_TYPE;
L_CE_EQ_VERSION_TAB        UNAPIGEN.VC20_TABLE_TYPE;
L_CE_COMPONENT_TAB         UNAPIGEN.VC20_TABLE_TYPE;
L_CE_CALC_TP_TAB           UNAPIGEN.CHAR1_TABLE_TYPE;
L_CE_CALC_FORMULA_TAB      UNAPIGEN.VC2000_TABLE_TYPE;
L_CE_VALID_CF_TAB          UNAPIGEN.VC20_TABLE_TYPE;
L_CE_MAX_X_TAB             UNAPIGEN.NUM_TABLE_TYPE;
L_CE_MAX_Y_TAB             UNAPIGEN.NUM_TABLE_TYPE;
L_CE_MULTI_SELECT_TAB      UNAPIGEN.CHAR1_TABLE_TYPE;
L_CE_MODIFY_FLAG_TAB       UNAPIGEN.NUM_TABLE_TYPE;      
L_CE_AR_TAB                UNAPIGEN.CHAR1_TABLE_TYPE;
L_CE_REANALYSEDRESULT_TAB  UNAPIGEN.CHAR1_TABLE_TYPE;

CURSOR C_MELSSAVESCMECELL IS
   SELECT * 
   FROM UTMELSSAVESCMECELL 
   WHERE SC=NVL(A_SC , SC)
   AND PG=NVL(A_PG, PG)
   AND PGNODE=NVL(A_PGNODE, PGNODE)
   AND PA=NVL(A_PA, PA)
   AND PANODE=NVL(A_PANODE, PANODE)
   AND ME=NVL(A_ME, ME)
   AND MENODE=NVL(A_MENODE, MENODE) 
   AND REANALYSIS=NVL(A_REANALYSIS, REANALYSIS)
   ORDER BY SC, PG, PGNODE, PA, PANODE, ME, MENODE, REANALYSIS, CELLNODE;
L_CE_REC  C_MELSSAVESCMECELL%ROWTYPE;

   PROCEDURE SAVESCMECELL IS
   BEGIN
      IF L_ROW > 0 THEN   
         L_CE_NEXT_ROWS :=-1;
         L_CE_NR_OF_ROWS := L_ROW;

         LOG('Savescmecell for '||L_PREV_SC||'#me='||L_PREV_ME);         
         LOG('Calling savescmecell for #rows='||L_CE_NR_OF_ROWS);
         FOR L_X IN 1..L_CE_NR_OF_ROWS LOOP
            L_CE_SC_TAB(L_X) := L_PREV_SC;
            L_CE_PG_TAB(L_X) := L_PREV_PG;
            L_CE_PGNODE_TAB(L_X) := L_PREV_PGNODE;
            L_CE_PA_TAB(L_X) := L_PREV_PA;
            L_CE_PANODE_TAB(L_X) := L_PREV_PANODE;
            L_CE_ME_TAB(L_X) := L_PREV_ME;
            L_CE_MENODE_TAB(L_X) := L_PREV_MENODE;
            L_CE_REANALYSIS_TAB(L_X) := L_PREV_REANALYSIS;
         END LOOP;
         
         L_RET_CODE := UNAPIME.SAVESCMECELL
                      (L_CE_COMPLETED,
                       L_CE_SC_TAB,
                       L_CE_PG_TAB,
                       L_CE_PGNODE_TAB,
                       L_CE_PA_TAB,
                       L_CE_PANODE_TAB,
                       L_CE_ME_TAB,
                       L_CE_MENODE_TAB,
                       L_CE_REANALYSIS_TAB,
                       L_CE_CELL_TAB,
                       L_CE_CELLNODE_TAB,
                       L_CE_DSP_TITLE_TAB,
                       L_CE_VALUE_F_TAB,
                       L_CE_VALUE_S_TAB,
                       L_CE_CELL_TP_TAB,
                       L_CE_POS_X_TAB,
                       L_CE_POS_Y_TAB,
                       L_CE_ALIGN_TAB,
                       L_CE_WINSIZE_X_TAB,
                       L_CE_WINSIZE_Y_TAB,
                       L_CE_IS_PROTECTED_TAB,
                       L_CE_MANDATORY_TAB,
                       L_CE_HIDDEN_TAB,
                       L_CE_UNIT_TAB,
                       L_CE_FORMAT_TAB,
                       L_CE_EQ_TAB,
                       L_CE_EQ_VERSION_TAB,
                       L_CE_COMPONENT_TAB,
                       L_CE_CALC_TP_TAB,
                       L_CE_CALC_FORMULA_TAB,
                       L_CE_VALID_CF_TAB,
                       L_CE_MAX_X_TAB,
                       L_CE_MAX_Y_TAB,
                       L_CE_MULTI_SELECT_TAB,
                       L_CE_MODIFY_FLAG_TAB,
                       L_CE_NR_OF_ROWS,
                       L_CE_NEXT_ROWS);
         
         IF L_RET_CODE != UNAPIGEN.DBERR_SUCCESS AND
            L_RET_CODE != UNAPIGEN.DBERR_PARTIALSAVE THEN
            RAISE_APPLICATION_ERROR(-20000,'Major error on SaveScMeCell:ret_code='||L_RET_CODE ||
              '#sc(1)='||L_CE_SC_TAB(1)||'#pg(1)='||L_CE_PG_TAB(1)||
              '#pgnode(1)='||NVL(TO_CHAR(L_CE_PGNODE_TAB(1)),'null')||
              '#pa(1)='||L_CE_PA_TAB(1)||
              '#panode(1)='||NVL(TO_CHAR(L_CE_PANODE_TAB(1)),'NULL')||
              '#me(1)='||L_CE_ME_TAB(1)||
              '#menode(1)='||NVL(TO_CHAR(L_CE_MENODE_TAB(1)),'NULL')||
              '#reanalysis(1)='||NVL(TO_CHAR(L_CE_REANALYSIS_TAB(1)),'NULL')||
              '#mod_flag(1)='||L_CE_MODIFY_FLAG_TAB(1)||
              '#auth='||UNAPIAUT.P_NOT_AUTHORISED);
         ELSIF L_RET_CODE = UNAPIGEN.DBERR_PARTIALSAVE THEN
           IF L_CE_NR_OF_ROWS >= 1 THEN
              FOR L_ROW IN 1..L_CE_NR_OF_ROWS LOOP
                 IF L_CE_MODIFY_FLAG_TAB(L_ROW) > UNAPIGEN.DBERR_SUCCESS THEN
                    RAISE_APPLICATION_ERROR(-20000,'SaveScMeCell authorisation problem row='||L_ROW||
                    '#mod_flag='||L_CE_MODIFY_FLAG_TAB(L_ROW) ||
                    '#sc='||L_CE_SC_TAB(L_ROW)||'#pg='||L_CE_PG_TAB(L_ROW)||
                    '#pgnode='||NVL(TO_CHAR(L_CE_PGNODE_TAB(L_ROW)),'NULL')||
                    '#pa='||L_CE_PA_TAB(L_ROW)||
                    '#panode='||NVL(TO_CHAR(L_CE_PANODE_TAB(L_ROW)),'NULL')||
                    '#me='||L_CE_ME_TAB(L_ROW)||
                    '#menode='||NVL(TO_CHAR(L_CE_MENODE_TAB(L_ROW)),'NULL')||
                    '#reanalysis='||NVL(TO_CHAR(L_CE_REANALYSIS_TAB(L_ROW)),'NULL')||
                    '#auth='||UNAPIAUT.P_NOT_AUTHORISED);
                 END IF;
              END LOOP;
           END IF;
         END IF;
         
         
         HANDLEMETHODGROUPKEY(L_PREV_SC, L_PREV_PG, L_PREV_PGNODE, L_PREV_PA, L_PREV_PANODE,
                              L_PREV_ME, L_PREV_MENODE, L_PREV_REANALYSIS);
      END IF;
   END;

BEGIN

   LOG('Start handling mecell');
   L_ROW := 0;
   L_ENTER_LOOP := FALSE;
   OPEN C_MELSSAVESCMECELL;
   LOOP
      FETCH C_MELSSAVESCMECELL
      INTO L_CE_REC;
 
      IF C_MELSSAVESCMECELL%FOUND THEN
      
         L_ENTER_LOOP := TRUE;
         
         
         IF L_PREV_SC <> L_CE_REC.SC OR
            L_PREV_PG <> L_CE_REC.PG OR
            L_PREV_PGNODE <> L_CE_REC.PGNODE OR
            L_PREV_PA <> L_CE_REC.PA OR
            L_PREV_PANODE <> L_CE_REC.PANODE OR
            L_PREV_ME <> L_CE_REC.ME OR
            L_PREV_MENODE <> L_CE_REC.MENODE THEN
                        
            SAVESCMECELL;            
            L_ROW := 0;
            L_PREV_SC := L_CE_REC.SC;
            L_PREV_PG := L_CE_REC.PG;
            L_PREV_PGNODE := L_CE_REC.PGNODE;
            L_PREV_PA := L_CE_REC.PA;
            L_PREV_PANODE := L_CE_REC.PANODE;
            L_PREV_ME := L_CE_REC.ME;
            L_PREV_MENODE := L_CE_REC.MENODE;
            L_PREV_REANALYSIS := L_CE_REC.REANALYSIS;                        
            
         ELSIF L_PREV_SC IS NULL THEN
            L_PREV_SC := L_CE_REC.SC;
            L_PREV_PG := L_CE_REC.PG;
            L_PREV_PGNODE := L_CE_REC.PGNODE;            
            L_PREV_PA := L_CE_REC.PA;
            L_PREV_PANODE := L_CE_REC.PANODE;            
            L_PREV_ME := L_CE_REC.ME;
            L_PREV_MENODE := L_CE_REC.MENODE;            
            L_PREV_REANALYSIS := L_CE_REC.REANALYSIS;                        
         END IF;
            
         
         L_ROW := L_ROW + 1;
         LOG('row fetched '||L_ROW);
         L_CE_COMPLETED := L_CE_REC.COMPLETED;
         L_CE_CELL_TAB(L_ROW) := L_CE_REC.CELL;
         L_CE_CELLNODE_TAB(L_ROW) := L_CE_REC.CELLNODE;
         L_CE_DSP_TITLE_TAB(L_ROW) := L_CE_REC.DSP_TITLE;
         L_CE_VALUE_F_TAB(L_ROW) := L_CE_REC.VALUE_F;
         L_CE_VALUE_S_TAB(L_ROW) := L_CE_REC.VALUE_S;
         L_CE_CELL_TP_TAB(L_ROW) := L_CE_REC.CELL_TP;
         L_CE_POS_X_TAB(L_ROW) := L_CE_REC.POS_X;
         L_CE_POS_Y_TAB(L_ROW) := L_CE_REC.POS_Y;
         L_CE_ALIGN_TAB(L_ROW) := L_CE_REC.ALIGN;
         L_CE_WINSIZE_X_TAB(L_ROW) := L_CE_REC.WINSIZE_X;
         L_CE_WINSIZE_Y_TAB(L_ROW) := L_CE_REC.WINSIZE_Y;
         L_CE_IS_PROTECTED_TAB(L_ROW) := L_CE_REC.IS_PROTECTED;
         L_CE_MANDATORY_TAB(L_ROW) := L_CE_REC.MANDATORY;
         L_CE_HIDDEN_TAB(L_ROW) := L_CE_REC.HIDDEN;
         L_CE_UNIT_TAB(L_ROW) := L_CE_REC.UNIT;
         L_CE_FORMAT_TAB(L_ROW) := L_CE_REC.FORMAT;
         L_CE_EQ_TAB(L_ROW) := L_CE_REC.EQ;
         L_CE_EQ_VERSION_TAB(L_ROW) := L_CE_REC.EQ_VERSION;
         L_CE_COMPONENT_TAB(L_ROW) := L_CE_REC.COMPONENT;
         L_CE_CALC_TP_TAB(L_ROW) := L_CE_REC.CALC_TP;
         L_CE_CALC_FORMULA_TAB(L_ROW) := L_CE_REC.CALC_FORMULA;
         L_CE_VALID_CF_TAB(L_ROW) := L_CE_REC.VALID_CF;
         L_CE_MAX_X_TAB(L_ROW) := L_CE_REC.MAX_X;
         L_CE_MAX_Y_TAB(L_ROW) := L_CE_REC.MAX_Y;
         L_CE_MULTI_SELECT_TAB(L_ROW) := L_CE_REC.MULTI_SELECT;
         L_CE_MODIFY_FLAG_TAB(L_ROW) := L_CE_REC.MODIFY_FLAG;
      ELSE
         IF L_ROW > 0 AND L_PREV_SC IS NULL THEN
            
            L_PREV_SC := L_CE_REC.SC;
            L_PREV_PG := L_CE_REC.PG;
            L_PREV_PGNODE := L_CE_REC.PGNODE;
            L_PREV_PA := L_CE_REC.PA;
            L_PREV_PANODE := L_CE_REC.PANODE;
            L_PREV_ME := L_CE_REC.ME;
            L_PREV_MENODE := L_CE_REC.MENODE;
            L_PREV_REANALYSIS := L_CE_REC.REANALYSIS;
         END IF;
         CLOSE C_MELSSAVESCMECELL;
         SAVESCMECELL;            
         L_ROW := 0; 
         EXIT;
      END IF;
   END LOOP;
   IF NOT L_ENTER_LOOP AND A_SC IS NOT NULL THEN
      LOG('no cells to be handled  -> handle megk');
      
      HANDLEMETHODGROUPKEY(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE,
                           A_ME, A_MENODE, A_REANALYSIS);
   END IF;
   LOG('End handling mecell');
         
EXCEPTION
WHEN OTHERS THEN
   
   IF C_MELSSAVESCMECELL%ISOPEN THEN
      CLOSE C_MELSSAVESCMECELL;
   END IF;         
   RAISE;
END HANDLEMETHODCELL;

PROCEDURE HANDLEMETHODCELLVALUES
(A_SC         IN VARCHAR2,
 A_PG         IN VARCHAR2,
 A_PGNODE     IN NUMBER,
 A_PA         IN VARCHAR2,
 A_PANODE     IN NUMBER,
 A_ME         IN VARCHAR2,
 A_MENODE     IN NUMBER,
 A_REANALYSIS IN NUMBER)
IS 


L_RET_CODE           INTEGER;
L_ROW                INTEGER;
L_ENTER_LOOP         BOOLEAN;

L_PREV_SC            VARCHAR2(20);
L_PREV_PG            VARCHAR2(20);
L_PREV_PGNODE        NUMBER(9);
L_PREV_PA            VARCHAR2(20);
L_PREV_PANODE        NUMBER(9);
L_PREV_ME            VARCHAR2(20);
L_PREV_MENODE        NUMBER(9);
L_PREV_REANALYSIS    NUMBER(9);
L_NEW_REANALYSIS     NUMBER(9);


L_MELS_CELL_TAB                    UNAPIGEN.VC20_TABLE_TYPE;
L_MELS_INDEX_X_TAB                 UNAPIGEN.NUM_TABLE_TYPE;
L_MELS_INDEX_Y_TAB                 UNAPIGEN.NUM_TABLE_TYPE;
L_MELS_VALUE_F_TAB                 UNAPIGEN.FLOAT_TABLE_TYPE;
L_MELS_VALUE_S_TAB                 UNAPIGEN.VC40_TABLE_TYPE;
L_MELS_SELECTED_TAB                UNAPIGEN.CHAR1_TABLE_TYPE;
L_MELS_NR_OF_ROWS                  NUMBER;
L_MELS_NEXT_ROWS                   NUMBER;

CURSOR C_MELSSAVESCMECELLVALUES IS
   SELECT * 
   FROM UTMELSSAVESCMECELLVALUES 
   WHERE SC=NVL(A_SC , SC)
   AND PG=NVL(A_PG, PG)
   AND PGNODE=NVL(A_PGNODE, PGNODE)
   AND PA=NVL(A_PA, PA)
   AND PANODE=NVL(A_PANODE, PANODE)
   AND ME=NVL(A_ME, ME)
   AND MENODE=NVL(A_MENODE, MENODE) 
   AND REANALYSIS=NVL(A_REANALYSIS, REANALYSIS)
   ORDER BY SC, PG, PGNODE, PA, PANODE, ME, MENODE, REANALYSIS, INDEX_X, INDEX_Y;
L_MECELLLS_REC  C_MELSSAVESCMECELLVALUES%ROWTYPE;

   PROCEDURE SAVESCMECELLVALUES IS
   BEGIN
      IF L_ROW > 0 THEN   
         L_MELS_NEXT_ROWS :=-1;
         L_MELS_NR_OF_ROWS := L_ROW;
         L_NEW_REANALYSIS := L_PREV_REANALYSIS;
         
         LOG('Savescmecellvalues for '||L_PREV_SC||'#me='||L_PREV_ME);         
         L_RET_CODE := UNAPIME.SAVESCMECELLVALUES
                         (L_PREV_SC,
                          L_PREV_PG,
                          L_PREV_PGNODE,
                          L_PREV_PA,
                          L_PREV_PANODE,
                          L_PREV_ME,
                          L_PREV_MENODE,
                          L_NEW_REANALYSIS,
                          L_MELS_CELL_TAB,
                          L_MELS_INDEX_X_TAB,
                          L_MELS_INDEX_Y_TAB,
                          L_MELS_VALUE_F_TAB,
                          L_MELS_VALUE_S_TAB,
                          L_MELS_SELECTED_TAB,
                          L_MELS_NR_OF_ROWS,
                          L_MELS_NEXT_ROWS);
         
         IF L_RET_CODE != UNAPIGEN.DBERR_SUCCESS THEN
            RAISE_APPLICATION_ERROR(-20000,'Major error on SaveScMeCellValues:ret_code='||L_RET_CODE ||
              '#sc='||L_PREV_SC||'#pg='||L_PREV_PG||
              '#pgnode='||NVL(TO_CHAR(L_PREV_PGNODE),'null')||
              '#pa='||L_PREV_PA||
              '#panode='||NVL(TO_CHAR(L_PREV_PANODE),'NULL')||
              '#me='||L_PREV_ME||
              '#menode='||NVL(TO_CHAR(L_PREV_MENODE),'NULL')||
              '#reanalysis='||NVL(TO_CHAR(L_PREV_REANALYSIS),'NULL')||
              '#auth='||UNAPIAUT.P_NOT_AUTHORISED);
         END IF;
         
         
         
         IF L_PREV_REANALYSIS <> L_NEW_REANALYSIS THEN
            LOG('BulkProcess-savescmecellvalues method reanalysed for sc'||L_PREV_SC||'#me='||L_PREV_ME||'old_r#='||L_PREV_REANALYSIS||'new_r#='||L_NEW_REANALYSIS);
            UPDATE UTMELSSAVESCMECELL
            SET REANALYSIS = L_NEW_REANALYSIS
            WHERE SC = L_PREV_SC
            AND PG = L_PREV_PG
            AND PGNODE = L_PREV_PGNODE
            AND PA = L_PREV_PA
            AND PANODE = L_PREV_PANODE
            AND ME = L_PREV_ME
            AND MENODE = L_PREV_MENODE;  
            L_PREV_REANALYSIS := L_NEW_REANALYSIS;
         END IF;

         
         
         HANDLEMETHODCELL(L_PREV_SC, L_PREV_PG, L_PREV_PGNODE, L_PREV_PA, L_PREV_PANODE,
                          L_PREV_ME, L_PREV_MENODE, L_PREV_REANALYSIS);

      END IF;
   END;

BEGIN

   LOG('Start handling mecell values');
   L_ROW := 0;
   L_ENTER_LOOP := FALSE;
   OPEN C_MELSSAVESCMECELLVALUES;
   LOOP
      FETCH C_MELSSAVESCMECELLVALUES
      INTO L_MECELLLS_REC;
 
      IF C_MELSSAVESCMECELLVALUES%FOUND THEN
      
         L_ENTER_LOOP := TRUE;
         
         
         IF L_PREV_SC <> L_MECELLLS_REC.SC OR
            L_PREV_PG <> L_MECELLLS_REC.PG OR
            L_PREV_PGNODE <> L_MECELLLS_REC.PGNODE OR
            L_PREV_PA <> L_MECELLLS_REC.PA OR
            L_PREV_PANODE <> L_MECELLLS_REC.PANODE OR
            L_PREV_ME <> L_MECELLLS_REC.ME OR
            L_PREV_MENODE <> L_MECELLLS_REC.MENODE THEN
                        
            SAVESCMECELLVALUES;            
            L_ROW := 0;
            L_PREV_SC := L_MECELLLS_REC.SC;
            L_PREV_PG := L_MECELLLS_REC.PG;
            L_PREV_PGNODE := L_MECELLLS_REC.PGNODE;
            L_PREV_PA := L_MECELLLS_REC.PA;
            L_PREV_PANODE := L_MECELLLS_REC.PANODE;
            L_PREV_ME := L_MECELLLS_REC.ME;
            L_PREV_MENODE := L_MECELLLS_REC.MENODE;
            L_PREV_REANALYSIS := L_MECELLLS_REC.REANALYSIS;                        
            
         ELSIF L_PREV_SC IS NULL THEN
            L_PREV_SC := L_MECELLLS_REC.SC;
            L_PREV_PG := L_MECELLLS_REC.PG;
            L_PREV_PGNODE := L_MECELLLS_REC.PGNODE;            
            L_PREV_PA := L_MECELLLS_REC.PA;
            L_PREV_PANODE := L_MECELLLS_REC.PANODE;            
            L_PREV_ME := L_MECELLLS_REC.ME;
            L_PREV_MENODE := L_MECELLLS_REC.MENODE;            
            L_PREV_REANALYSIS := L_MECELLLS_REC.REANALYSIS;   
         END IF;
            
         
         L_ROW := L_ROW + 1;
         L_MELS_CELL_TAB(L_ROW) := L_MECELLLS_REC.CELL;
         L_MELS_INDEX_X_TAB(L_ROW) := L_MECELLLS_REC.INDEX_X;
         L_MELS_INDEX_Y_TAB(L_ROW) := L_MECELLLS_REC.INDEX_Y;
         L_MELS_VALUE_F_TAB(L_ROW) := L_MECELLLS_REC.VALUE_F;
         L_MELS_VALUE_S_TAB(L_ROW) := L_MECELLLS_REC.VALUE_S;
         L_MELS_SELECTED_TAB(L_ROW) := L_MECELLLS_REC.SELECTED;
      ELSE
         IF L_ROW > 0 AND L_PREV_SC IS NULL THEN
            
            L_PREV_SC := L_MECELLLS_REC.SC;
            L_PREV_PG := L_MECELLLS_REC.PG;
            L_PREV_PGNODE := L_MECELLLS_REC.PGNODE;
            L_PREV_PA := L_MECELLLS_REC.PA;
            L_PREV_PANODE := L_MECELLLS_REC.PANODE;
            L_PREV_ME := L_MECELLLS_REC.ME;
            L_PREV_MENODE := L_MECELLLS_REC.MENODE;
            L_PREV_REANALYSIS := L_MECELLLS_REC.REANALYSIS;   
         END IF;
         CLOSE C_MELSSAVESCMECELLVALUES;
         SAVESCMECELLVALUES;            
         L_ROW := 0; 
         EXIT;
      END IF;
   END LOOP;
   IF NOT L_ENTER_LOOP AND A_SC IS NOT NULL THEN
      
      HANDLEMETHODCELL(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE,
                       A_ME, A_MENODE, A_REANALYSIS);
   END IF;
   LOG('End handling mecell values');

EXCEPTION
WHEN OTHERS THEN
   
   IF C_MELSSAVESCMECELLVALUES%ISOPEN THEN
      CLOSE C_MELSSAVESCMECELLVALUES;
   END IF;         
   RAISE;
END HANDLEMETHODCELLVALUES;

FUNCTION BULKPROCESS
RETURN NUMBER IS




L_RET_CODE INTEGER;

L_ME_ALARMS_HANDLED              CHAR(1);
L_ME_NR_OF_ROWS                  NUMBER;
L_ME_MODIFY_REASON               VARCHAR2(255);
L_ME_SC_TAB                      UNAPIGEN.VC20_TABLE_TYPE;
L_ME_PG_TAB                      UNAPIGEN.VC20_TABLE_TYPE;
L_ME_PGNODE_TAB                  UNAPIGEN.LONG_TABLE_TYPE;
L_ME_PA_TAB                      UNAPIGEN.VC20_TABLE_TYPE;
L_ME_PANODE_TAB                  UNAPIGEN.LONG_TABLE_TYPE;
L_ME_ME_TAB                      UNAPIGEN.VC20_TABLE_TYPE;
L_ME_MENODE_TAB                  UNAPIGEN.LONG_TABLE_TYPE;
L_ME_REANALYSIS_TAB              UNAPIGEN.NUM_TABLE_TYPE;
L_ME_MT_VERSION_TAB              UNAPIGEN.VC20_TABLE_TYPE;
L_ME_DESCRIPTION_TAB             UNAPIGEN.VC40_TABLE_TYPE;
L_ME_VALUE_F_TAB                 UNAPIGEN.FLOAT_TABLE_TYPE;
L_ME_VALUE_S_TAB                 UNAPIGEN.VC40_TABLE_TYPE;
L_ME_UNIT_TAB                    UNAPIGEN.VC20_TABLE_TYPE;
L_ME_EXEC_START_DATE_TAB         UNAPIGEN.DATE_TABLE_TYPE;
L_ME_EXEC_END_DATE_TAB           UNAPIGEN.DATE_TABLE_TYPE;
L_ME_EXECUTOR_TAB                UNAPIGEN.VC20_TABLE_TYPE;
L_ME_LAB_TAB                     UNAPIGEN.VC20_TABLE_TYPE;
L_ME_EQ_TAB                      UNAPIGEN.VC20_TABLE_TYPE;
L_ME_EQ_VERSION_TAB              UNAPIGEN.VC20_TABLE_TYPE;
L_ME_PLANNED_EXECUTOR_TAB        UNAPIGEN.VC20_TABLE_TYPE;
L_ME_PLANNED_EQ_TAB              UNAPIGEN.VC20_TABLE_TYPE;
L_ME_PLANNED_EQ_VERSION_TAB      UNAPIGEN.VC20_TABLE_TYPE;
L_ME_MANUALLY_ENTERED_TAB        UNAPIGEN.CHAR1_TABLE_TYPE;
L_ME_ALLOW_ADD_TAB               UNAPIGEN.CHAR1_TABLE_TYPE;
L_ME_ASSIGN_DATE_TAB             UNAPIGEN.DATE_TABLE_TYPE;
L_ME_ASSIGNED_BY_TAB             UNAPIGEN.VC20_TABLE_TYPE;
L_ME_MANUALLY_ADDED_TAB          UNAPIGEN.CHAR1_TABLE_TYPE;
L_ME_DELAY_TAB                   UNAPIGEN.NUM_TABLE_TYPE;
L_ME_DELAY_UNIT_TAB              UNAPIGEN.VC20_TABLE_TYPE;
L_ME_FORMAT_TAB                  UNAPIGEN.VC40_TABLE_TYPE;
L_ME_ACCURACY_TAB                UNAPIGEN.FLOAT_TABLE_TYPE;
L_ME_REAL_COST_TAB               UNAPIGEN.VC40_TABLE_TYPE;
L_ME_REAL_TIME_TAB               UNAPIGEN.VC40_TABLE_TYPE;
L_ME_CALIBRATION_TAB             UNAPIGEN.CHAR1_TABLE_TYPE;
L_ME_CONFIRM_COMPLETE_TAB        UNAPIGEN.CHAR1_TABLE_TYPE;
L_ME_AUTORECALC_TAB              UNAPIGEN.CHAR1_TABLE_TYPE;
L_ME_ME_RESULT_EDITABLE_TAB      UNAPIGEN.CHAR1_TABLE_TYPE;
L_ME_NEXT_CELL_TAB               UNAPIGEN.VC20_TABLE_TYPE;
L_ME_SOP_TAB                     UNAPIGEN.VC40_TABLE_TYPE;
L_ME_SOP_VERSION_TAB             UNAPIGEN.VC20_TABLE_TYPE;
L_ME_PLAUS_LOW_TAB               UNAPIGEN.FLOAT_TABLE_TYPE;
L_ME_PLAUS_HIGH_TAB              UNAPIGEN.FLOAT_TABLE_TYPE;
L_ME_WINSIZE_X_TAB               UNAPIGEN.NUM_TABLE_TYPE;
L_ME_WINSIZE_Y_TAB               UNAPIGEN.NUM_TABLE_TYPE;
L_ME_ME_CLASS_TAB                UNAPIGEN.VC2_TABLE_TYPE;
L_ME_LOG_HS_TAB                  UNAPIGEN.CHAR1_TABLE_TYPE;
L_ME_LOG_HS_DETAILS_TAB          UNAPIGEN.CHAR1_TABLE_TYPE;
L_ME_LC_TAB                      UNAPIGEN.VC2_TABLE_TYPE;
L_ME_LC_VERSION_TAB              UNAPIGEN.VC20_TABLE_TYPE;
L_ME_MODIFY_FLAG_TAB             UNAPIGEN.NUM_TABLE_TYPE;


L_MERES_ALARMS_HANDLED              CHAR(1);
L_MERES_NR_OF_ROWS                  NUMBER;
L_MERES_MODIFY_REASON               VARCHAR2(255);
L_MERES_SC_TAB                      UNAPIGEN.VC20_TABLE_TYPE;
L_MERES_PG_TAB                      UNAPIGEN.VC20_TABLE_TYPE;
L_MERES_PGNODE_TAB                  UNAPIGEN.LONG_TABLE_TYPE;
L_MERES_PA_TAB                      UNAPIGEN.VC20_TABLE_TYPE;
L_MERES_PANODE_TAB                  UNAPIGEN.LONG_TABLE_TYPE;
L_MERES_ME_TAB                      UNAPIGEN.VC20_TABLE_TYPE;
L_MERES_MENODE_TAB                  UNAPIGEN.LONG_TABLE_TYPE;
L_MERES_REANALYSIS_TAB              UNAPIGEN.NUM_TABLE_TYPE;
L_MERES_VALUE_F_TAB                 UNAPIGEN.FLOAT_TABLE_TYPE;
L_MERES_VALUE_S_TAB                 UNAPIGEN.VC40_TABLE_TYPE;
L_MERES_UNIT_TAB                    UNAPIGEN.VC20_TABLE_TYPE;
L_MERES_FORMAT_TAB                  UNAPIGEN.VC40_TABLE_TYPE;
L_MERES_EXEC_END_DATE_TAB           UNAPIGEN.DATE_TABLE_TYPE;
L_MERES_EXECUTOR_TAB                UNAPIGEN.VC20_TABLE_TYPE;
L_MERES_LAB_TAB                     UNAPIGEN.VC20_TABLE_TYPE;
L_MERES_EQ_TAB                      UNAPIGEN.VC20_TABLE_TYPE;
L_MERES_EQ_VERSION_TAB              UNAPIGEN.VC20_TABLE_TYPE;
L_MERES_MANUALLY_ENTERED_TAB        UNAPIGEN.CHAR1_TABLE_TYPE;
L_MERES_REAL_COST_TAB               UNAPIGEN.VC40_TABLE_TYPE;
L_MERES_REAL_TIME_TAB               UNAPIGEN.VC40_TABLE_TYPE;
L_MERES_MODIFY_FLAG_TAB             UNAPIGEN.NUM_TABLE_TYPE;

CURSOR L_ME_CURSOR IS
SELECT * 
FROM UTMELSSAVESCMETHOD 
ORDER BY SC, PGNODE, PANODE, MENODE;

CURSOR L_MERES_CURSOR IS
SELECT * 
FROM UTMELSSAVESCMERESULT
ORDER BY SC, PGNODE, PANODE, MENODE;

L_PARTIAL_SAVE_RAISED               BOOLEAN;

BEGIN

   LOG('BulkProcess enter');
   
   
   
   
   
   
   
   
   
   
   
   
   L_PARTIAL_SAVE_RAISED := FALSE;
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   L_SQLERRM := NULL;   
   
   SAVEPOINT_UNILAB4;
   FOR L_ME_REC IN L_ME_CURSOR LOOP
      LOG('BulkProcess start process mels for sc'||L_ME_REC.SC);
         
      BEGIN
         
         L_ME_ALARMS_HANDLED := L_ME_REC.ALARMS_HANDLED;
         L_ME_SC_TAB(1) := L_ME_REC.SC;
         L_ME_PG_TAB(1) := L_ME_REC.PG;
         L_ME_PGNODE_TAB(1) := L_ME_REC.PGNODE;
         L_ME_PA_TAB(1) := L_ME_REC.PA;
         L_ME_PANODE_TAB(1) := L_ME_REC.PANODE;
         L_ME_ME_TAB(1) := L_ME_REC.ME;
         L_ME_MENODE_TAB(1) := L_ME_REC.MENODE;
         L_ME_REANALYSIS_TAB(1) := L_ME_REC.REANALYSIS;
         L_ME_MT_VERSION_TAB(1) := L_ME_REC.MT_VERSION;
         L_ME_DESCRIPTION_TAB(1) := L_ME_REC.DESCRIPTION;
         L_ME_VALUE_F_TAB(1) := L_ME_REC.VALUE_F;
         L_ME_VALUE_S_TAB(1) := L_ME_REC.VALUE_S;
         L_ME_UNIT_TAB(1) := L_ME_REC.UNIT;
         L_ME_EXEC_START_DATE_TAB(1) := L_ME_REC.EXEC_START_DATE;
         L_ME_EXEC_END_DATE_TAB(1) := L_ME_REC.EXEC_END_DATE;
         L_ME_EXECUTOR_TAB(1) := L_ME_REC.EXECUTOR;
         L_ME_LAB_TAB(1) := L_ME_REC.LAB;
         L_ME_EQ_TAB(1) := L_ME_REC.EQ;
         L_ME_EQ_VERSION_TAB(1) := L_ME_REC.EQ_VERSION;
         L_ME_PLANNED_EXECUTOR_TAB(1) := L_ME_REC.PLANNED_EXECUTOR;
         L_ME_PLANNED_EQ_TAB(1) := L_ME_REC.PLANNED_EQ;
         L_ME_PLANNED_EQ_VERSION_TAB(1) := L_ME_REC.PLANNED_EQ_VERSION;
         L_ME_MANUALLY_ENTERED_TAB(1) := L_ME_REC.MANUALLY_ENTERED;
         L_ME_ALLOW_ADD_TAB(1) := L_ME_REC.ALLOW_ADD;
         L_ME_ASSIGN_DATE_TAB(1) := L_ME_REC.ASSIGN_DATE;
         L_ME_ASSIGNED_BY_TAB(1) := L_ME_REC.ASSIGNED_BY;
         L_ME_MANUALLY_ADDED_TAB(1) := L_ME_REC.MANUALLY_ADDED;
         L_ME_DELAY_TAB(1) := L_ME_REC.DELAY;
         L_ME_DELAY_UNIT_TAB(1) := L_ME_REC.DELAY_UNIT;
         L_ME_FORMAT_TAB(1) := L_ME_REC.FORMAT;
         L_ME_ACCURACY_TAB(1) := L_ME_REC.ACCURACY;
         L_ME_REAL_COST_TAB(1) := L_ME_REC.REAL_COST;
         L_ME_REAL_TIME_TAB(1) := L_ME_REC.REAL_TIME;
         L_ME_CALIBRATION_TAB(1) := L_ME_REC.CALIBRATION;
         L_ME_CONFIRM_COMPLETE_TAB(1) := L_ME_REC.CONFIRM_COMPLETE;
         L_ME_AUTORECALC_TAB(1) := L_ME_REC.AUTORECALC;
         L_ME_ME_RESULT_EDITABLE_TAB(1) := L_ME_REC.ME_RESULT_EDITABLE;
         L_ME_NEXT_CELL_TAB(1) := L_ME_REC.NEXT_CELL;
         L_ME_SOP_TAB(1) := L_ME_REC.SOP;
         L_ME_SOP_VERSION_TAB(1) := L_ME_REC.SOP_VERSION;
         L_ME_PLAUS_LOW_TAB(1) := L_ME_REC.PLAUS_LOW;
         L_ME_PLAUS_HIGH_TAB(1) := L_ME_REC.PLAUS_HIGH;
         L_ME_WINSIZE_X_TAB(1) := L_ME_REC.WINSIZE_X;
         L_ME_WINSIZE_Y_TAB(1) := L_ME_REC.WINSIZE_Y;
         L_ME_ME_CLASS_TAB(1) := L_ME_REC.ME_CLASS;
         L_ME_LOG_HS_TAB(1) := L_ME_REC.LOG_HS;
         L_ME_LOG_HS_DETAILS_TAB(1) := L_ME_REC.LOG_HS_DETAILS;
         L_ME_LC_TAB(1) := L_ME_REC.LC;
         L_ME_LC_VERSION_TAB(1) := L_ME_REC.LC_VERSION;
         L_ME_MODIFY_FLAG_TAB(1) := L_ME_REC.MODIFY_FLAG;
         L_ME_NR_OF_ROWS := 1;
         L_RET_CODE := UNAPIME.SAVESCMETHOD
                               (L_ME_ALARMS_HANDLED,
                               L_ME_SC_TAB,
                               L_ME_PG_TAB,
                               L_ME_PGNODE_TAB,
                               L_ME_PA_TAB,
                               L_ME_PANODE_TAB,
                               L_ME_ME_TAB,
                               L_ME_MENODE_TAB,
                               L_ME_REANALYSIS_TAB,
                               L_ME_MT_VERSION_TAB,
                               L_ME_DESCRIPTION_TAB,
                               L_ME_VALUE_F_TAB,
                               L_ME_VALUE_S_TAB,
                               L_ME_UNIT_TAB,
                               L_ME_EXEC_START_DATE_TAB,
                               L_ME_EXEC_END_DATE_TAB,
                               L_ME_EXECUTOR_TAB,
                               L_ME_LAB_TAB,
                               L_ME_EQ_TAB,
                               L_ME_EQ_VERSION_TAB,
                               L_ME_PLANNED_EXECUTOR_TAB,
                               L_ME_PLANNED_EQ_TAB,
                               L_ME_PLANNED_EQ_VERSION_TAB,
                               L_ME_MANUALLY_ENTERED_TAB,
                               L_ME_ALLOW_ADD_TAB,
                               L_ME_ASSIGN_DATE_TAB,
                               L_ME_ASSIGNED_BY_TAB,
                               L_ME_MANUALLY_ADDED_TAB,
                               L_ME_DELAY_TAB,
                               L_ME_DELAY_UNIT_TAB,
                               L_ME_FORMAT_TAB,
                               L_ME_ACCURACY_TAB,
                               L_ME_REAL_COST_TAB,
                               L_ME_REAL_TIME_TAB,
                               L_ME_CALIBRATION_TAB,
                               L_ME_CONFIRM_COMPLETE_TAB,
                               L_ME_AUTORECALC_TAB,
                               L_ME_ME_RESULT_EDITABLE_TAB,
                               L_ME_NEXT_CELL_TAB,
                               L_ME_SOP_TAB,
                               L_ME_SOP_VERSION_TAB,
                               L_ME_PLAUS_LOW_TAB,
                               L_ME_PLAUS_HIGH_TAB,
                               L_ME_WINSIZE_X_TAB,
                               L_ME_WINSIZE_Y_TAB,
                               L_ME_ME_CLASS_TAB,
                               L_ME_LOG_HS_TAB,
                               L_ME_LOG_HS_DETAILS_TAB,
                               L_ME_LC_TAB,
                               L_ME_LC_VERSION_TAB,
                               L_ME_MODIFY_FLAG_TAB,
                               L_ME_NR_OF_ROWS,
                               L_ME_MODIFY_REASON);
         
         IF L_RET_CODE != UNAPIGEN.DBERR_SUCCESS AND
            L_RET_CODE != UNAPIGEN.DBERR_PARTIALSAVE THEN
            RAISE_APPLICATION_ERROR(-20000,'Major error on SaveScMethod:ret_code='||L_RET_CODE ||
              '#sc(1)='||L_ME_SC_TAB(1)||'#pg(1)='||L_ME_PG_TAB(1)||
              '#pgnode(1)='||NVL(TO_CHAR(L_ME_PGNODE_TAB(1)),'null')||
              '#pa(1)='||L_ME_PA_TAB(1)||
              '#panode(1)='||NVL(TO_CHAR(L_ME_PANODE_TAB(1)),'NULL')||
              '#me(1)='||L_ME_ME_TAB(1)||
              '#menode(1)='||NVL(TO_CHAR(L_ME_MENODE_TAB(1)),'NULL')||
              '#reanalysis(1)='||NVL(TO_CHAR(L_ME_REANALYSIS_TAB(1)),'NULL')||
              '#mod_flag(1)='||L_ME_MODIFY_FLAG_TAB(1)||
              '#auth='||UNAPIAUT.P_NOT_AUTHORISED);
         ELSIF L_RET_CODE = UNAPIGEN.DBERR_PARTIALSAVE THEN
           L_PARTIAL_SAVE_RAISED := TRUE;
           IF L_ME_NR_OF_ROWS >= 1 THEN
              FOR L_ROW IN 1..L_ME_NR_OF_ROWS LOOP
                 IF L_ME_MODIFY_FLAG_TAB(L_ROW) > UNAPIGEN.DBERR_SUCCESS THEN
                    RAISE_APPLICATION_ERROR(-20000,'SaveScMethod authorisation problem row='||L_ROW||
                    '#mod_flag='||L_ME_MODIFY_FLAG_TAB(L_ROW) ||
                    '#sc='||L_ME_SC_TAB(L_ROW)||'#pg='||L_ME_PG_TAB(L_ROW)||
                    '#pgnode='||NVL(TO_CHAR(L_ME_PGNODE_TAB(L_ROW)),'NULL')||
                    '#pa='||L_ME_PA_TAB(L_ROW)||
                    '#panode='||NVL(TO_CHAR(L_ME_PANODE_TAB(L_ROW)),'NULL')||
                    '#me='||L_ME_ME_TAB(L_ROW)||
                    '#menode='||NVL(TO_CHAR(L_ME_MENODE_TAB(L_ROW)),'NULL')||
                    '#reanalysis='||NVL(TO_CHAR(L_ME_REANALYSIS_TAB(L_ROW)),'NULL')||
                    '#auth='||UNAPIAUT.P_NOT_AUTHORISED);
                 END IF;
              END LOOP;
           END IF;
         END IF;
         
         
         
         IF L_ME_REANALYSIS_TAB(1) <> L_ME_REC.REANALYSIS THEN
            LOG('BulkProcess-savescmethod method reanalysed for sc'||L_ME_REC.SC||'#me='||L_ME_REC.ME);
            UPDATE UTMELSSAVESCMECELL
            SET REANALYSIS = L_ME_REANALYSIS_TAB(1)
            WHERE SC = L_ME_REC.SC
            AND PG = L_ME_REC.PG
            AND PGNODE = L_ME_REC.PGNODE
            AND PA = L_ME_REC.PA
            AND PANODE = L_ME_REC.PANODE
            AND ME = L_ME_REC.ME
            AND MENODE = L_ME_REC.MENODE;            

            UPDATE UTMELSSAVESCMECELLVALUES
            SET REANALYSIS = L_ME_REANALYSIS_TAB(1)
            WHERE SC = L_ME_REC.SC
            AND PG = L_ME_REC.PG
            AND PGNODE = L_ME_REC.PGNODE
            AND PA = L_ME_REC.PA
            AND PANODE = L_ME_REC.PANODE
            AND ME = L_ME_REC.ME
            AND MENODE = L_ME_REC.MENODE;        
            L_ME_REC.REANALYSIS := L_ME_REANALYSIS_TAB(1);
         END IF;
         LOG('BulkProcess end process mels for sc'||L_ME_REC.SC||' -start handling details ');

         
         
         
         
         
         
         HANDLEMETHODCELLVALUES(L_ME_REC.SC, L_ME_REC.PG, L_ME_REC.PGNODE, 
                                L_ME_REC.PA, L_ME_REC.PANODE, 
                                L_ME_REC.ME, L_ME_REC.MENODE, L_ME_REC.REANALYSIS); 
         LOG('BulkProcess end process mels for sc'||L_ME_REC.SC||' -end handling details ');
      EXCEPTION
      WHEN OTHERS THEN
         IF SQLCODE <> 1 THEN
            LOG('BulkProcess exception !!!');
            LOG(SUBSTR(SQLERRM,1,255));
            UNAPIGEN.LOGERROR('BulkProcess',SQLERRM);
         ELSIF L_SQLERRM IS NOT NULL THEN
            LOG('BulkProcess exception !!!');
            LOG(SUBSTR(L_SQLERRM,1,255));
            UNAPIGEN.LOGERROR('BulkProcess',L_SQLERRM);   
         END IF;      
      END;
      
   END LOOP;

   FOR L_MERES_REC IN L_MERES_CURSOR LOOP
      LOG('BulkProcess start process meresls for sc'||L_MERES_REC.SC);
         
      BEGIN
         
         L_MERES_ALARMS_HANDLED := L_MERES_REC.ALARMS_HANDLED;
         L_MERES_SC_TAB(1) := L_MERES_REC.SC;
         L_MERES_PG_TAB(1) := L_MERES_REC.PG;
         L_MERES_PGNODE_TAB(1) := L_MERES_REC.PGNODE;
         L_MERES_PA_TAB(1) := L_MERES_REC.PA;
         L_MERES_PANODE_TAB(1) := L_MERES_REC.PANODE;
         L_MERES_ME_TAB(1) := L_MERES_REC.ME;
         L_MERES_MENODE_TAB(1) := L_MERES_REC.MENODE;
         L_MERES_REANALYSIS_TAB(1) := L_MERES_REC.REANALYSIS;
         L_MERES_VALUE_F_TAB(1) := L_MERES_REC.VALUE_F;
         L_MERES_VALUE_S_TAB(1) := L_MERES_REC.VALUE_S;
         L_MERES_UNIT_TAB(1) := L_MERES_REC.UNIT;
         L_MERES_FORMAT_TAB(1) := L_MERES_REC.FORMAT;
         L_MERES_EXEC_END_DATE_TAB(1) := L_MERES_REC.EXEC_END_DATE;
         L_MERES_EXECUTOR_TAB(1) := L_MERES_REC.EXECUTOR;
         L_MERES_LAB_TAB(1) := L_MERES_REC.LAB;
         L_MERES_EQ_TAB(1) := L_MERES_REC.EQ;
         L_MERES_EQ_VERSION_TAB(1) := L_MERES_REC.EQ_VERSION;
         L_MERES_MANUALLY_ENTERED_TAB(1) := L_MERES_REC.MANUALLY_ENTERED;
         L_MERES_REAL_COST_TAB(1) := L_MERES_REC.REAL_COST;
         L_MERES_REAL_TIME_TAB(1) := L_MERES_REC.REAL_TIME;
         L_MERES_MODIFY_FLAG_TAB(1) := L_MERES_REC.MODIFY_FLAG;
         L_MERES_NR_OF_ROWS := 1;
         L_RET_CODE := UNAPIME.SAVESCMERESULT
                               (L_MERES_ALARMS_HANDLED,
                               L_MERES_SC_TAB,
                               L_MERES_PG_TAB,
                               L_MERES_PGNODE_TAB,
                               L_MERES_PA_TAB,
                               L_MERES_PANODE_TAB,
                               L_MERES_ME_TAB,
                               L_MERES_MENODE_TAB,
                               L_MERES_REANALYSIS_TAB,
                               L_MERES_VALUE_F_TAB,
                               L_MERES_VALUE_S_TAB,
                               L_MERES_UNIT_TAB,
                               L_MERES_FORMAT_TAB,
                               L_MERES_EXEC_END_DATE_TAB,
                               L_MERES_EXECUTOR_TAB,
                               L_MERES_LAB_TAB,
                               L_MERES_EQ_TAB,
                               L_MERES_EQ_VERSION_TAB,
                               L_MERES_MANUALLY_ENTERED_TAB,
                               L_MERES_REAL_COST_TAB,
                               L_MERES_REAL_TIME_TAB,
                               L_MERES_MODIFY_FLAG_TAB,
                               L_MERES_NR_OF_ROWS,
                               L_MERES_MODIFY_REASON);
         
         IF L_RET_CODE != UNAPIGEN.DBERR_SUCCESS AND
            L_RET_CODE != UNAPIGEN.DBERR_PARTIALSAVE THEN
            RAISE_APPLICATION_ERROR(-20000,'Major error on SaveScMeResult:ret_code='||L_RET_CODE ||
              '#sc(1)='||L_MERES_SC_TAB(1)||'#pg(1)='||L_MERES_PG_TAB(1)||
              '#pgnode(1)='||NVL(TO_CHAR(L_MERES_PGNODE_TAB(1)),'null')||
              '#pa(1)='||L_MERES_PA_TAB(1)||
              '#panode(1)='||NVL(TO_CHAR(L_MERES_PANODE_TAB(1)),'NULL')||
              '#me(1)='||L_MERES_ME_TAB(1)||
              '#menode(1)='||NVL(TO_CHAR(L_MERES_MENODE_TAB(1)),'NULL')||
              '#reanalysis(1)='||NVL(TO_CHAR(L_MERES_REANALYSIS_TAB(1)),'NULL')||
              '#mod_flag(1)='||L_MERES_MODIFY_FLAG_TAB(1)||
              '#auth='||UNAPIAUT.P_NOT_AUTHORISED);
         ELSIF L_RET_CODE = UNAPIGEN.DBERR_PARTIALSAVE THEN
           L_PARTIAL_SAVE_RAISED := TRUE;
           IF L_MERES_NR_OF_ROWS >= 1 THEN
              FOR L_ROW IN 1..L_MERES_NR_OF_ROWS LOOP
                 IF L_MERES_MODIFY_FLAG_TAB(L_ROW) > UNAPIGEN.DBERR_SUCCESS THEN
                    RAISE_APPLICATION_ERROR(-20000,'SaveScMeResult authorisation problem row='||L_ROW||
                    '#mod_flag='||L_MERES_MODIFY_FLAG_TAB(L_ROW) ||
                    '#sc='||L_MERES_SC_TAB(L_ROW)||'#pg='||L_MERES_PG_TAB(L_ROW)||
                    '#pgnode='||NVL(TO_CHAR(L_MERES_PGNODE_TAB(L_ROW)),'NULL')||
                    '#pa='||L_MERES_PA_TAB(L_ROW)||
                    '#panode='||NVL(TO_CHAR(L_MERES_PANODE_TAB(L_ROW)),'NULL')||
                    '#me='||L_MERES_ME_TAB(L_ROW)||
                    '#menode='||NVL(TO_CHAR(L_MERES_MENODE_TAB(L_ROW)),'NULL')||
                    '#reanalysis='||NVL(TO_CHAR(L_MERES_REANALYSIS_TAB(L_ROW)),'NULL')||
                    '#auth='||UNAPIAUT.P_NOT_AUTHORISED);
                 END IF;
              END LOOP;
           END IF;
         END IF;
         
         
         
         IF L_MERES_REANALYSIS_TAB(1) <> L_MERES_REC.REANALYSIS THEN
            LOG('BulkProcess-savescmethod method reanalysed for sc'||L_MERES_REC.SC||'#me='||L_MERES_REC.ME);
            UPDATE UTMELSSAVESCMECELL
            SET REANALYSIS = L_MERES_REANALYSIS_TAB(1)
            WHERE SC = L_MERES_REC.SC
            AND PG = L_MERES_REC.PG
            AND PGNODE = L_MERES_REC.PGNODE
            AND PA = L_MERES_REC.PA
            AND PANODE = L_MERES_REC.PANODE
            AND ME = L_MERES_REC.ME
            AND MENODE = L_MERES_REC.MENODE;            

            UPDATE UTMELSSAVESCMECELLVALUES
            SET REANALYSIS = L_MERES_REANALYSIS_TAB(1)
            WHERE SC = L_MERES_REC.SC
            AND PG = L_MERES_REC.PG
            AND PGNODE = L_MERES_REC.PGNODE
            AND PA = L_MERES_REC.PA
            AND PANODE = L_MERES_REC.PANODE
            AND ME = L_MERES_REC.ME
            AND MENODE = L_MERES_REC.MENODE;        
            L_MERES_REC.REANALYSIS := L_MERES_REANALYSIS_TAB(1);
         END IF;
         LOG('BulkProcess end process mels for sc'||L_MERES_REC.SC||' -start handling details ');

         
         
         
         
         
         
         HANDLEMETHODCELLVALUES(L_MERES_REC.SC, L_MERES_REC.PG, L_MERES_REC.PGNODE, 
                                L_MERES_REC.PA, L_MERES_REC.PANODE, 
                                L_MERES_REC.ME, L_MERES_REC.MENODE, L_MERES_REC.REANALYSIS); 
         LOG('BulkProcess end process mels for sc'||L_MERES_REC.SC||' -end handling details ');
      EXCEPTION
      WHEN OTHERS THEN
         IF SQLCODE <> 1 THEN
            LOG('BulkProcess exception !!!');
            LOG(SUBSTR(SQLERRM,1,255));
            UNAPIGEN.LOGERROR('BulkProcess',SQLERRM);
         ELSIF L_SQLERRM IS NOT NULL THEN
            LOG('BulkProcess exception !!!');
            LOG(SUBSTR(L_SQLERRM,1,255));
            UNAPIGEN.LOGERROR('BulkProcess',L_SQLERRM);   
         END IF;      
      END;
      
   END LOOP;
   
   
   DELETE FROM UTMELSSAVESCATTRIBUTE WHERE SC IN (SELECT DISTINCT SC FROM UTMELSSAVESCMETHOD);
   DELETE FROM UTMELSSAVESCGROUPKEY WHERE SC IN (SELECT DISTINCT SC FROM UTMELSSAVESCMETHOD);
   DELETE FROM UTMELSSAVESAMPLE WHERE SC IN (SELECT DISTINCT SC FROM UTMELSSAVESCMETHOD);
   DELETE FROM UTMELSSAVESCMEATTRIBUTE WHERE (SC, PG, PGNODE, PA, PANODE, ME, MENODE) IN (SELECT SC, PG, PGNODE, PA, PANODE, ME, MENODE FROM UTMELSSAVESCMETHOD);
   DELETE FROM UTMELSSAVESCMEGROUPKEY WHERE (SC, PG, PGNODE, PA, PANODE, ME, MENODE) IN (SELECT SC, PG, PGNODE, PA, PANODE, ME, MENODE FROM UTMELSSAVESCMETHOD);
   DELETE FROM UTMELSSAVESCMECELL WHERE (SC, PG, PGNODE, PA, PANODE, ME, MENODE) IN (SELECT SC, PG, PGNODE, PA, PANODE, ME, MENODE FROM UTMELSSAVESCMETHOD);
   DELETE FROM UTMELSSAVESCMECELLVALUES WHERE (SC, PG, PGNODE, PA, PANODE, ME, MENODE) IN (SELECT SC, PG, PGNODE, PA, PANODE, ME, MENODE FROM UTMELSSAVESCMETHOD);
   DELETE FROM UTMELSSAVESCMETHOD;
   SAVEPOINT_UNILAB4;
   
   
   HANDLEMETHODCELLVALUES(A_SC => NULL,
                          A_PG => NULL,
                          A_PGNODE => NULL, 
                          A_PA => NULL,
                          A_PANODE => NULL, 
                          A_ME => NULL,
                          A_MENODE => NULL,
                          A_REANALYSIS => NULL); 
   DELETE FROM UTMELSSAVESCATTRIBUTE WHERE SC IN (SELECT DISTINCT SC FROM UTMELSSAVESCMECELLVALUES);
   DELETE FROM UTMELSSAVESCGROUPKEY WHERE SC IN (SELECT DISTINCT SC FROM UTMELSSAVESCMECELLVALUES);
   DELETE FROM UTMELSSAVESAMPLE WHERE SC IN (SELECT DISTINCT SC FROM UTMELSSAVESCMECELLVALUES);
   DELETE FROM UTMELSSAVESCMEATTRIBUTE WHERE (SC, PG, PGNODE, PA, PANODE, ME, MENODE) IN (SELECT SC, PG, PGNODE, PA, PANODE, ME, MENODE FROM UTMELSSAVESCMECELLVALUES);
   DELETE FROM UTMELSSAVESCMEGROUPKEY WHERE (SC, PG, PGNODE, PA, PANODE, ME, MENODE) IN (SELECT SC, PG, PGNODE, PA, PANODE, ME, MENODE FROM UTMELSSAVESCMECELLVALUES);
   DELETE FROM UTMELSSAVESCMECELL WHERE (SC, PG, PGNODE, PA, PANODE, ME, MENODE) IN (SELECT SC, PG, PGNODE, PA, PANODE, ME, MENODE FROM UTMELSSAVESCMECELLVALUES);
   DELETE FROM UTMELSSAVESCMECELLVALUES;
   SAVEPOINT_UNILAB4;

   HANDLEMETHODCELL(A_SC => NULL,
                    A_PG => NULL,
                    A_PGNODE => NULL, 
                    A_PA => NULL,
                    A_PANODE => NULL, 
                    A_ME => NULL,
                    A_MENODE => NULL,
                    A_REANALYSIS => NULL); 
   DELETE FROM UTMELSSAVESCATTRIBUTE WHERE SC IN (SELECT DISTINCT SC FROM UTMELSSAVESCMECELLVALUES);
   DELETE FROM UTMELSSAVESCGROUPKEY WHERE SC IN (SELECT DISTINCT SC FROM UTMELSSAVESCMECELLVALUES);
   DELETE FROM UTMELSSAVESAMPLE WHERE SC IN (SELECT DISTINCT SC FROM UTMELSSAVESCMECELLVALUES);
   DELETE FROM UTMELSSAVESCMEATTRIBUTE WHERE (SC, PG, PGNODE, PA, PANODE, ME, MENODE) IN (SELECT SC, PG, PGNODE, PA, PANODE, ME, MENODE FROM UTMELSSAVESCMECELLVALUES);
   DELETE FROM UTMELSSAVESCMEGROUPKEY WHERE (SC, PG, PGNODE, PA, PANODE, ME, MENODE) IN (SELECT SC, PG, PGNODE, PA, PANODE, ME, MENODE FROM UTMELSSAVESCMECELLVALUES);
   DELETE FROM UTMELSSAVESCMECELL;
   SAVEPOINT_UNILAB4;

   HANDLEMETHODGROUPKEY(A_SC => NULL,
                    A_PG => NULL,
                    A_PGNODE => NULL, 
                    A_PA => NULL,
                    A_PANODE => NULL, 
                    A_ME => NULL,
                    A_MENODE => NULL,
                    A_REANALYSIS => NULL); 
   DELETE FROM UTMELSSAVESCATTRIBUTE WHERE SC IN (SELECT DISTINCT SC FROM UTMELSSAVESCMEGROUPKEY);
   DELETE FROM UTMELSSAVESCGROUPKEY WHERE SC IN (SELECT DISTINCT SC FROM UTMELSSAVESCMEGROUPKEY);
   DELETE FROM UTMELSSAVESAMPLE WHERE SC IN (SELECT DISTINCT SC FROM UTMELSSAVESCMEGROUPKEY);
   DELETE FROM UTMELSSAVESCMEATTRIBUTE WHERE (SC, PG, PGNODE, PA, PANODE, ME, MENODE) IN (SELECT SC, PG, PGNODE, PA, PANODE, ME, MENODE FROM UTMELSSAVESCMEGROUPKEY);
   DELETE FROM UTMELSSAVESCMEGROUPKEY;
   SAVEPOINT_UNILAB4;

   HANDLEMETHODATTRIBUTE(A_SC => NULL,
                    A_PG => NULL,
                    A_PGNODE => NULL, 
                    A_PA => NULL,
                    A_PANODE => NULL, 
                    A_ME => NULL,
                    A_MENODE => NULL,
                    A_REANALYSIS => NULL); 
   DELETE FROM UTMELSSAVESCATTRIBUTE WHERE SC IN (SELECT DISTINCT SC FROM UTMELSSAVESCMEATTRIBUTE);
   DELETE FROM UTMELSSAVESCGROUPKEY WHERE SC IN (SELECT DISTINCT SC FROM UTMELSSAVESCMEATTRIBUTE);
   DELETE FROM UTMELSSAVESAMPLE WHERE SC IN (SELECT DISTINCT SC FROM UTMELSSAVESCMEATTRIBUTE);
   DELETE FROM UTMELSSAVESCMEATTRIBUTE;
   SAVEPOINT_UNILAB4;

   HANDLESAMPLE(A_SC => NULL); 
   DELETE FROM UTMELSSAVESCATTRIBUTE WHERE SC IN (SELECT SC FROM UTMELSSAVESAMPLE);
   DELETE FROM UTMELSSAVESCGROUPKEY WHERE SC IN (SELECT SC FROM UTMELSSAVESAMPLE);
   DELETE FROM UTMELSSAVESAMPLE;
   SAVEPOINT_UNILAB4;

   HANDLESCGROUPKEY(A_SC => NULL); 
   DELETE FROM UTMELSSAVESCATTRIBUTE WHERE SC IN (SELECT DISTINCT SC FROM UTMELSSAVESCGROUPKEY);
   DELETE FROM UTMELSSAVESCGROUPKEY;
   SAVEPOINT_UNILAB4;

   HANDLESCATTRIBUTE(A_SC => NULL); 
   DELETE FROM UTMELSSAVESCATTRIBUTE;
   SAVEPOINT_UNILAB4;   

   
   DELETE FROM UTMELSSAVESCATTRIBUTE;
   DELETE FROM UTMELSSAVESCGROUPKEY;
   DELETE FROM UTMELSSAVESAMPLE;
   DELETE FROM UTMELSSAVESCMEATTRIBUTE;
   DELETE FROM UTMELSSAVESCMEGROUPKEY;
   DELETE FROM UTMELSSAVESCMECELL;
   DELETE FROM UTMELSSAVESCMECELLVALUES;
   DELETE FROM UTMELSSAVESCMERESULT;
   LOG('rows deleted in utmelssavescmeresult:'||SQL%ROWCOUNT);
   DELETE FROM UTMELSSAVESCMETHOD;
      
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
   
   LOG('BulkProcess normal exit');
   IF L_PARTIAL_SAVE_RAISED THEN
      RETURN(UNAPIGEN.DBERR_PARTIALSAVE);
   ELSE
      RETURN(UNAPIGEN.DBERR_SUCCESS);
   END IF;

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      LOG('BulkProcess exception !!!'||UNAPIGEN.P_TXN_ERROR);
      LOG(SUBSTR(SQLERRM,1,255));
      UNAPIGEN.LOGERROR('BulkProcess',SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      LOG('BulkProcess exception !!!'||UNAPIGEN.P_TXN_ERROR);
      LOG(SUBSTR(L_SQLERRM,1,255));
      UNAPIGEN.LOGERROR('BulkProcess',L_SQLERRM);   
   END IF;
   LOG('BulkProcess exception exit'||UNAPIGEN.P_TXN_ERROR);
   
   DELETE FROM UTMELSSAVESCATTRIBUTE;
   DELETE FROM UTMELSSAVESCGROUPKEY;
   DELETE FROM UTMELSSAVESAMPLE;
   DELETE FROM UTMELSSAVESCMEATTRIBUTE;
   DELETE FROM UTMELSSAVESCMEGROUPKEY;
   DELETE FROM UTMELSSAVESCMECELL;
   DELETE FROM UTMELSSAVESCMECELLVALUES;
   DELETE FROM UTMELSSAVESCMERESULT;
   DELETE FROM UTMELSSAVESCMETHOD;
   UNAPIGEN.U4COMMIT;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'BulkProcess'));
END BULKPROCESS;

END UNAPIMELS;
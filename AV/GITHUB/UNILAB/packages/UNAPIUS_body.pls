PACKAGE BODY unapius AS

L_SQLERRM         VARCHAR2(255);
L_SQL_STRING      VARCHAR2(2000);
L_WHERE_CLAUSE    VARCHAR2(1000);
L_EVENT_TP        UTEV.EV_TP%TYPE;
L_EV_DETAILS      VARCHAR2(255);
L_RET_CODE        NUMBER;
L_RESULT          NUMBER;
L_FETCHED_ROWS    NUMBER;
L_EV_SEQ_NR       NUMBER;
STPERROR          EXCEPTION;

CURSOR L_UNILABDBA_USER IS
   SELECT SETTING_VALUE
   FROM UTSYSTEM
   WHERE SETTING_NAME = 'DBA_NAME';

CURSOR L_USER(C_US IN VARCHAR2) IS
   SELECT USERNAME
   FROM DBA_USERS
   WHERE USERNAME = C_US;

CURSOR L_OBJECTS_CURSOR(C_US VARCHAR2) IS
   SELECT OBJECT_TYPE, OBJECT_NAME
   FROM DBA_OBJECTS
   WHERE OWNER = C_US;

CURSOR L_PACKAGE_CURSOR IS
   SELECT DISTINCT TABLE_NAME PACKAGE_NAME, OWNER
   FROM DBA_TAB_PRIVS 
   WHERE GRANTEE='URAPI';

CURSOR L_TABLESPACE_NAME_CURSOR ( A_TSNAME VARCHAR2 ) IS 
   SELECT SETTING_VALUE 
   FROM UTDBA
   WHERE SETTING_NAME = A_TSNAME;

FUNCTION GETVERSION
   RETURN VARCHAR2
IS
BEGIN
   RETURN('06.07.00.00_00.13');
EXCEPTION
   WHEN OTHERS THEN
      RETURN (NULL);
END GETVERSION;

FUNCTION CREATEUSER
(A_US          IN VARCHAR2,                  
 A_PASSWORD    IN VARCHAR2,                  
 A_UP          IN NUMBER)                    
RETURN NUMBER IS


BEGIN

RETURN(UNAPIUS.CREATEUSER(A_US => A_US, 
                          A_IDENTIFICATION_TYPE  => 'LOCAL',
                          A_IDENTIFIED_BY_STRING => '',
                          A_UP => A_UP));                          

END CREATEUSER;

FUNCTION CREATEUSER
(A_US                      IN VARCHAR2,                  
 A_IDENTIFICATION_TYPE     IN VARCHAR2,                  
 A_IDENTIFIED_BY_STRING    IN VARCHAR2,                  
 A_UP                      IN NUMBER)                    
RETURN NUMBER IS

L_NAME                  SYS.DBA_USERS.USERNAME%TYPE;
L_UR                    VARCHAR2(20);
L_UP                    NUMBER(5);
L_US                    VARCHAR2(20);
L_US_FOUND              BOOLEAN;
L_DBA_NAME              VARCHAR2(20);
L_POS                   INTEGER;
L_CHAR                  CHAR(1);
L_ASCII                 INTEGER;
L_DEF_TABLESPACE        VARCHAR2(255);
L_TEMP_TABLESPACE       VARCHAR2(255);
L_UP_VERSION            VARCHAR2(20);
L_US_VERSION            VARCHAR2(20);
L_SQLCODE               NUMBER;
L_US_CREATION_OK        BOOLEAN;
L_PASSWORD              VARCHAR2(30);

BEGIN

   
   
   
   L_UP_VERSION := UNVERSION.P_NO_VERSION;
   L_US_VERSION := UNVERSION.P_NO_VERSION;

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_US, ' ') =  ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF (TRUNC(NVL(A_UP, -1)) - NVL(A_UP, 0)) <> 0 OR
      (NVL(A_UP, -1)) <= 0 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UP;
      RAISE STPERROR;
   END IF;

   
   
   
   OPEN L_UNILABDBA_USER;
   FETCH L_UNILABDBA_USER INTO L_DBA_NAME;
   IF L_UNILABDBA_USER%NOTFOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SYSDEFAULTS;
      CLOSE L_UNILABDBA_USER;
      RAISE STPERROR;
   END IF;
   CLOSE  L_UNILABDBA_USER;
   
   IF L_DBA_NAME = A_US THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_DBAUSER;
      RAISE STPERROR;
   END IF;

   
   
   
   

      
   
   
   
   OPEN L_USER(A_US);
   FETCH L_USER INTO L_US;
   L_US_FOUND := L_USER%FOUND;
   CLOSE L_USER;

   IF L_US_FOUND THEN
      L_US_CREATION_OK := TRUE;
   ELSE
      L_US_CREATION_OK := FALSE;

      IF NVL(A_IDENTIFICATION_TYPE, ' ') NOT IN ('LOCAL', 'LOCALHASHED', 'EXTERNAL', 'GLOBAL') THEN
         L_SQLERRM := 'wrong value "'||A_IDENTIFICATION_TYPE||'" for a_identification_type argument (LOCAL, LOCALHASHED, EXTERNAL and GLOBAL are the supported values)';
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;      
         RAISE STPERROR ;
      END IF;
      
       
      
      OPEN L_TABLESPACE_NAME_CURSOR ( 'DATA_OPERAT_TSPACE' ) ;
      FETCH L_TABLESPACE_NAME_CURSOR INTO L_DEF_TABLESPACE ; 
      IF ( L_TABLESPACE_NAME_CURSOR%NOTFOUND ) THEN 
        L_SQLERRM := 'No setting found for DATA_OPERAT_TSPACE for utdba';
        CLOSE L_TABLESPACE_NAME_CURSOR ; 
        RAISE STPERROR ;
      END IF ; 
      CLOSE L_TABLESPACE_NAME_CURSOR ; 

      OPEN L_TABLESPACE_NAME_CURSOR ( 'TEMPORARY_TSPACE' ) ;
      FETCH L_TABLESPACE_NAME_CURSOR INTO L_TEMP_TABLESPACE ; 
      IF ( L_TABLESPACE_NAME_CURSOR%NOTFOUND ) THEN 
        L_SQLERRM := 'No setting found for TEMPORARY_TSPACE for utdba';
        CLOSE L_TABLESPACE_NAME_CURSOR ; 
        RAISE STPERROR ;
      END IF ; 
      CLOSE L_TABLESPACE_NAME_CURSOR ; 

      
      
      
      IF A_IDENTIFICATION_TYPE = 'LOCAL' THEN
      
         
         L_RET_CODE := UNUSER.GETDEFAULTPASSWORD(A_US, L_PASSWORD);
         IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
            L_SQLERRM := 'UNUSER.GetDefaultPassword returned '||L_RET_CODE||' for user "'|| A_US || '"';
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
            RAISE STPERROR;
         END IF;
             
         BEGIN
            L_SQL_STRING := 'CREATE USER "' || A_US || '" IDENTIFIED BY "' || L_PASSWORD ||
                            '" DEFAULT TABLESPACE ' || L_DEF_TABLESPACE || 
                            ' TEMPORARY TABLESPACE ' || L_TEMP_TABLESPACE ||
                            ' PASSWORD EXPIRE';
            EXECUTE IMMEDIATE L_SQL_STRING;
            L_US_CREATION_OK := TRUE;
         EXCEPTION
         WHEN OTHERS THEN
            
            L_SQLERRM := 'Creating the user "'|| A_US || '" with pawword "'|| L_PASSWORD ||'" and expired failed with '||SQLCODE||'. Attempt with default password failed also.';
            L_SQLCODE := SQLCODE;
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
            RAISE STPERROR;
         END;
      ELSIF A_IDENTIFICATION_TYPE = 'LOCALHASHED' THEN
                   
         BEGIN
            L_SQL_STRING := 'CREATE USER "' || A_US || '" IDENTIFIED BY VALUES ''' || A_IDENTIFIED_BY_STRING ||
                            ''' DEFAULT TABLESPACE ' || L_DEF_TABLESPACE || 
                            ' TEMPORARY TABLESPACE ' || L_TEMP_TABLESPACE;
            EXECUTE IMMEDIATE L_SQL_STRING;
            L_US_CREATION_OK := TRUE;
         EXCEPTION
         WHEN OTHERS THEN
            
            L_SQLERRM := 'Creating the user "'|| A_US || '" with hashed pawword "'|| A_IDENTIFIED_BY_STRING ||'" and expired failed with '||SQLCODE||'.';
            L_SQLCODE := SQLCODE;
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
            RAISE STPERROR;
         END;
      ELSIF A_IDENTIFICATION_TYPE = 'EXTERNAL' THEN
         BEGIN
            L_SQL_STRING := 'CREATE USER "' || A_US || '" IDENTIFIED EXTERNALLY '||
                            ' DEFAULT TABLESPACE ' || L_DEF_TABLESPACE || 
                            ' TEMPORARY TABLESPACE ' || L_TEMP_TABLESPACE;
            EXECUTE IMMEDIATE L_SQL_STRING;
            L_US_CREATION_OK := TRUE;
         EXCEPTION
         WHEN OTHERS THEN
            L_SQLERRM := 'Creating the user "'|| A_US || '" IDENTIFIED EXTERNALLY failed with '||SQLCODE;
            L_SQLCODE := SQLCODE;
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
            RAISE STPERROR;
         END;
      ELSIF A_IDENTIFICATION_TYPE = 'GLOBAL' THEN
         BEGIN
            L_SQL_STRING := 'CREATE USER "' || A_US || '" IDENTIFIED GLOBALLY AS '''||A_IDENTIFIED_BY_STRING||''''||
                            ' DEFAULT TABLESPACE ' || L_DEF_TABLESPACE || 
                              ' TEMPORARY TABLESPACE ' || L_TEMP_TABLESPACE;
            EXECUTE IMMEDIATE L_SQL_STRING;
            L_US_CREATION_OK := TRUE;
         EXCEPTION
         WHEN OTHERS THEN
            L_SQLERRM := 'Creating the user "'|| A_US || '" IDENTIFIED GLOBALLY failed with '||SQLCODE;
            L_SQLCODE := SQLCODE;
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
            RAISE STPERROR;
         END;
      END IF;
   END IF;

   IF L_US_CREATION_OK THEN
      
      
      
      
      L_RET_CODE := UNAPIUS.CREATEUSERSTRUCTURES(A_US, A_UP);

      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN 
         UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
         RAISE STPERROR;
      END IF;

      
      
      

      BEGIN   
         INSERT INTO UTUPUS(UP, VERSION, US, US_VERSION)
         VALUES( A_UP, L_UP_VERSION, A_US, L_US_VERSION);
      EXCEPTION
      WHEN DUP_VAL_ON_INDEX THEN
         
         
         
         NULL;
      END;

      
      
      
      UPDATE UTAD
      SET DEF_UP = A_UP
      WHERE AD = A_US
      AND VERSION = L_US_VERSION;
   END IF;
   
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE <> 1 THEN      
         UNAPIGEN.LOGERROR('CreateUser', SQLERRM);
      END IF;
      IF L_SQLERRM IS NOT NULL THEN
         UNAPIGEN.LOGERROR('CreateUser', L_SQLERRM);
      END IF;
      IF L_USER%ISOPEN THEN
         CLOSE L_USER;
      END IF;
      IF L_UNILABDBA_USER%ISOPEN THEN
         CLOSE L_UNILABDBA_USER;
      END IF;
      IF L_TABLESPACE_NAME_CURSOR%ISOPEN THEN
         CLOSE L_TABLESPACE_NAME_CURSOR;
      END IF;
      RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'CreateUser'));
END CREATEUSER;         

FUNCTION CREATESHAREDUSER4UP
(A_US                      IN VARCHAR2,                  
 A_UP                      IN NUMBER)                    
RETURN NUMBER IS
   
   L_ISDBVERSIONENTERPRISEEDITION   BOOLEAN := FALSE;
   
   L_PRODUCT VARCHAR2(500);

   L_VERSION VARCHAR2(500);

   L_IDENTIFICATION_TYPE  VARCHAR2(20);
BEGIN







   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_US, ' ') =  ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF (TRUNC(NVL(A_UP, -1)) - NVL(A_UP, 0)) <> 0 OR
      (NVL(A_UP, -1)) <= 0 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UP;
      RAISE STPERROR;
   END IF;

   L_ISDBVERSIONENTERPRISEEDITION := UNAPIGEN.GETPRODUCTCOMPONENTVERSION(L_PRODUCT,L_VERSION);
   
   



   IF  (TRUE = L_ISDBVERSIONENTERPRISEEDITION )
   THEN
      L_IDENTIFICATION_TYPE  :='GLOBAL';
   ELSE
      L_IDENTIFICATION_TYPE  :='LOCAL';
   END IF;
   
   L_RET_CODE := UNAPIUS.CREATEUSER
                        (A_US => A_US,
                         A_IDENTIFICATION_TYPE => L_IDENTIFICATION_TYPE  ,
                         A_IDENTIFIED_BY_STRING => '',
                         A_UP => A_UP);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN 
      L_SQLERRM := 'CreateUser failed ret_code='||L_RET_CODE||' for a_us='||A_US||
                   '#a_identification_type=' || L_IDENTIFICATION_TYPE || '#a_identified_by_string=''''#a_up='||A_UP;
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;
   
   
   
   
   
   DELETE FROM UTUPUS
   WHERE US = A_US;
   
   EXECUTE IMMEDIATE 'REVOKE UnilabUser FROM "'||A_US||'"';
         
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE <> 1 THEN      
         UNAPIGEN.LOGERROR('CreateSharedUser4up', SQLERRM);
      END IF;
      IF L_SQLERRM IS NOT NULL THEN
         UNAPIGEN.LOGERROR('CreateSharedUser4up', L_SQLERRM);
      END IF;
      RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'CreateSharedUser4up'));
END CREATESHAREDUSER4UP;         

FUNCTION CREATEUSERSTRUCTURES
(A_US          IN VARCHAR2,            
 A_UP          IN NUMBER)              
RETURN NUMBER IS

L_US_CURSOR             INTEGER;
L_VIEW_NAME             SYS.DBA_VIEWS.VIEW_NAME%TYPE;
L_NAME                  SYS.ALL_OBJECTS.OBJECT_NAME%TYPE;
L_COUNT_OBJECTS         INTEGER;
L_COUNT_ROLES           INTEGER;
L_STRUC_OK              BOOLEAN;
L_DBA_NAME              VARCHAR2(20);
L_DD                    VARCHAR2(3);
L_UP_VERSION            VARCHAR2(20);
L_US_VERSION            VARCHAR2(20);
L_US                    VARCHAR2(20);

CURSOR L_VIEWS_CURSOR IS
   SELECT VIEW_NAME 
   FROM SYS.DBA_VIEWS
   WHERE OWNER = (SELECT 'DD' || DD   FROM UTUP WHERE UP = A_UP);
   
CURSOR L_STRUC_CURSOR(C_US IN VARCHAR2) IS
   SELECT COUNT(*) USER_OBJECTS
   FROM DBA_SYNONYMS
   WHERE OWNER =C_US
   AND SYNONYM_NAME LIKE 'UV%';

CURSOR L_ROLES_CURSOR(C_US IN VARCHAR2) IS
   SELECT COUNT(*) ROLES_GRANTED
   FROM DBA_ROLE_PRIVS
   WHERE GRANTEE = C_US
   AND GRANTED_ROLE IN ('URAPI','UR1','UR2','UR3','UR4','UR5','UR6','UR7','UR8','UR9',
   'UR10','UR11','UR12','UR13','UR14','UR15','UR16','UR17','UR18','UR19','UR20','UR21',
   'UR22','UR23','UR24','UR25','UR26','UR27','UR28','UR29','UR30','UR31','UR32','UR33',
   'UR34','UR35','UR36','UR37','UR38','UR39','UR40','UR41','UR42','UR43','UR44','UR45',
   'UR46','UR47','UR48','UR49','UR50','UR51','UR52','UR53','UR54','UR55','UR56','UR57',
   'UR58','UR59','UR60','UR61','UR62','UR63','UR64','UR65','UR66','UR67','UR68','UR69',
   'UR70','UR71','UR72','UR73','UR74','UR75','UR76','UR77','UR78','UR79','UR80','UR81',
   'UR82','UR83','UR84','UR85','UR86','UR87','UR88','UR89','UR90','UR91','UR92','UR93',
   'UR94','UR95','UR96','UR97','UR98','UR99','UR100','UR101','UR102','UR103','UR104','UR105',
   'UR106','UR107','UR108','UR109','UR110','UR111','UR112','UR113','UR114','UR115','UR116',
   'UR117','UR118','UR119','UR120','UR121','UR122','UR123','UR124','UR125','UR126','UR127','UR128');
   
CURSOR L_DD_CURSOR(A_UP NUMBER, A_UP_VERSION VARCHAR2) IS
   SELECT DD 
   FROM UTUP
   WHERE UP = A_UP
   AND VERSION = A_UP_VERSION;                        

BEGIN

   
   
   
   L_UP_VERSION := UNVERSION.P_NO_VERSION;
   L_US_VERSION := UNVERSION.P_NO_VERSION;

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
   
   IF NVL(A_US, ' ') =  ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;
   
   IF (TRUNC(NVL(A_UP, -1)) - NVL(A_UP, 0)) <> 0 OR
      (NVL(A_UP, -1)) <= 0  THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UP;
      RAISE STPERROR;
   END IF;   

   
   
   
   
   OPEN L_UNILABDBA_USER;
   FETCH L_UNILABDBA_USER INTO L_DBA_NAME;
   IF L_UNILABDBA_USER%NOTFOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SYSDEFAULTS;
      CLOSE L_UNILABDBA_USER;
      RAISE STPERROR;
   END IF;
   CLOSE  L_UNILABDBA_USER;

   IF L_DBA_NAME = A_US THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_DBAUSER;
      RAISE STPERROR;
   END IF;

   
   
   
   
   
   L_COUNT_OBJECTS := 0;
   OPEN L_STRUC_CURSOR(A_US);
   FETCH L_STRUC_CURSOR
   INTO L_COUNT_OBJECTS;
   CLOSE L_STRUC_CURSOR;

   L_COUNT_ROLES := 0;
   OPEN L_ROLES_CURSOR(A_US);
   FETCH L_ROLES_CURSOR
   INTO L_COUNT_ROLES;
   CLOSE L_ROLES_CURSOR;

   L_STRUC_OK := FALSE;
   L_US_CURSOR := DBMS_SQL.OPEN_CURSOR;

   IF L_COUNT_OBJECTS > 0 AND
      L_COUNT_ROLES > 0 AND 
      A_US <> UNAPIGEN.P_DBA_NAME THEN
      L_STRUC_OK := TRUE;
      
      L_RET_CODE := UNAPIUS.DELETEUSERSTRUCTURES(A_US, A_UP);
      IF L_RET_CODE <> 0 THEN
         UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
         RAISE STPERROR;
      END IF;
   ELSE
      L_STRUC_OK := TRUE;
   END IF;

   
   
   
   IF L_STRUC_OK THEN
   
      OPEN L_DD_CURSOR(A_UP, L_UP_VERSION);
      FETCH L_DD_CURSOR INTO L_DD;
      CLOSE L_DD_CURSOR;
      
      
      
      
      L_SQL_STRING := 'GRANT UnilabUser TO "' || A_US ||'"';
      DBMS_SQL.PARSE(L_US_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      L_RESULT := DBMS_SQL.EXECUTE(L_US_CURSOR);

      
      
      
      L_SQL_STRING := 'GRANT ' || 'ur' || L_DD ||
                      ' TO "' || A_US || '"';

      DBMS_SQL.PARSE(L_US_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      L_RESULT := DBMS_SQL.EXECUTE(L_US_CURSOR);

      
      
      
      
      
      L_SQL_STRING := 'GRANT URAPI TO "' || A_US ||'"';                        
      DBMS_SQL.PARSE(L_US_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      L_RESULT := DBMS_SQL.EXECUTE(L_US_CURSOR);

      
      
      
      FOR L_VIEW_REC IN L_VIEWS_CURSOR LOOP
         L_SQL_STRING := 'CREATE SYNONYM "' || A_US || '".' ||
                         L_VIEW_REC.VIEW_NAME || ' FOR dd' || L_DD || '.' ||
                         L_VIEW_REC.VIEW_NAME;
         DBMS_SQL.PARSE(L_US_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         L_RESULT := DBMS_SQL.EXECUTE(L_US_CURSOR);
      END LOOP;

      
      
      
      
      
      FOR L_PACKAGE_REC IN L_PACKAGE_CURSOR LOOP
         L_SQL_STRING := 'CREATE SYNONYM "' || A_US || '".' ||
                         L_PACKAGE_REC.PACKAGE_NAME || ' FOR "' ||
                         L_PACKAGE_REC.OWNER || '".' || 
                         L_PACKAGE_REC.PACKAGE_NAME;
         DBMS_SQL.PARSE(L_US_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         L_RESULT := DBMS_SQL.EXECUTE(L_US_CURSOR);
      END LOOP;

   END IF;

   
   
   
   
   
   UPDATE UTAD
   SET STRUCT_CREATED = '1',IS_USER = '1'
   WHERE AD = A_US
   AND VERSION = L_US_VERSION;

   DBMS_SQL.CLOSE_CURSOR(L_US_CURSOR);
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE <> 1 THEN      
         UNAPIGEN.LOGERROR('CreateUserStructures', SQLERRM);
      END IF;
      IF DBMS_SQL.IS_OPEN(L_US_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(L_US_CURSOR);
      END IF;
      IF L_STRUC_CURSOR%ISOPEN THEN
         CLOSE L_STRUC_CURSOR;
      END IF;
      IF L_ROLES_CURSOR%ISOPEN THEN
         CLOSE L_ROLES_CURSOR;
      END IF;
      IF L_UNILABDBA_USER%ISOPEN THEN
         CLOSE L_UNILABDBA_USER;
      END IF;
      IF L_USER%ISOPEN THEN
         CLOSE L_USER;
      END IF;
      RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'CreateUserStructures'));
END CREATEUSERSTRUCTURES;

FUNCTION GETUSERAUTHENTICATIONLIST
(A_US                      OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_IDENTIFICATION_TYPE     OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_IDENTIFIED_BY_STRING    OUT      UNAPIGEN.VC511_TABLE_TYPE,  
 A_UP                      OUT      UNAPIGEN.NUM_TABLE_TYPE,    
 A_NR_OF_ROWS              IN OUT   NUMBER,                     
 A_WHERE_CLAUSE            IN       VARCHAR2)                   
RETURN NUMBER IS





L_ORACLE_USERNAME        VARCHAR2(30);
L_ORACLE_PASSWORD_HASHED VARCHAR2(30);
L_EXTERNAL_NAME          VARCHAR2(4000);
L_USER_CURSOR            INTEGER;
L_FOUND                  CHAR(1);
L_DEF_UP                 NUMBER(5);

BEGIN

   IF NVL(A_NR_OF_ROWS, 0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      RETURN(UNAPIGEN.DBERR_WHERECLAUSE);
   ELSIF
      UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := 'WHERE username = ''' || A_WHERE_CLAUSE || 
                        ''' ORDER BY username';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_USER_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT username, password, external_name FROM '||
                   '(SELECT username, password, external_name '||
                   ' FROM sys.dba_users '||
                   ' UNION ALL '||
                   ' SELECT ad username, ''ENTERPRISE'' password, NULL external_name '||
                   ' FROM utad WHERE is_user=''2'') '||
                   L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_USER_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   DBMS_SQL.DEFINE_COLUMN(L_USER_CURSOR, 1, L_ORACLE_USERNAME, 30);
   DBMS_SQL.DEFINE_COLUMN(L_USER_CURSOR, 2, L_ORACLE_PASSWORD_HASHED, 30);
   DBMS_SQL.DEFINE_COLUMN(L_USER_CURSOR, 3, L_EXTERNAL_NAME, 4000);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_USER_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;
      DBMS_SQL.COLUMN_VALUE(L_USER_CURSOR, 1, L_ORACLE_USERNAME);
      DBMS_SQL.COLUMN_VALUE(L_USER_CURSOR, 2, L_ORACLE_PASSWORD_HASHED);
      DBMS_SQL.COLUMN_VALUE(L_USER_CURSOR, 3, L_EXTERNAL_NAME);

      IF LENGTH(L_ORACLE_USERNAME)<= 20 THEN  
         
         BEGIN
            SELECT DEF_UP
            INTO L_DEF_UP
            FROM UTAD
            WHERE AD = L_ORACLE_USERNAME;
            L_FOUND := '1';
         EXCEPTION
         WHEN NO_DATA_FOUND THEN
            L_FOUND := '0';
         END;
         IF L_FOUND = '1' THEN
            L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
            A_US(L_FETCHED_ROWS) := L_ORACLE_USERNAME;
            A_UP(L_FETCHED_ROWS) := L_DEF_UP;
            
            
            IF L_ORACLE_PASSWORD_HASHED IN ('EXTERNAL', 'GLOBAL', 'ENTERPRISE') THEN
               A_IDENTIFICATION_TYPE(L_FETCHED_ROWS) := L_ORACLE_PASSWORD_HASHED;
               A_IDENTIFIED_BY_STRING(L_FETCHED_ROWS) := SUBSTR(L_EXTERNAL_NAME,1,511);
            ELSE
               A_IDENTIFICATION_TYPE(L_FETCHED_ROWS) := 'LOCALHASHED';
               A_IDENTIFIED_BY_STRING(L_FETCHED_ROWS) := L_ORACLE_PASSWORD_HASHED;
            END IF;
         END IF;
      END IF;
      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_USER_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_USER_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;
   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
              'GetUserAuthenticationList', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN(L_USER_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(L_USER_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETUSERAUTHENTICATIONLIST;

FUNCTION DELETEUSER
(A_US          IN VARCHAR2,            
 A_UP          IN NUMBER)              
RETURN NUMBER IS

L_US_CURSOR             INTEGER;
L_DBA_NAME              VARCHAR2(20);
L_UP_VERSION            VARCHAR2(20);
L_US_VERSION            VARCHAR2(20);

BEGIN

   
   
   
   L_UP_VERSION := UNVERSION.P_NO_VERSION;
   L_US_VERSION := UNVERSION.P_NO_VERSION;

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_US, ' ') =  ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF (TRUNC(NVL(A_UP, -1)) - NVL(A_UP, 0)) <> 0 OR
      (NVL(A_UP, -1)) <= 0  THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UP;
      RAISE STPERROR;
   END IF;

   
   
   
   OPEN L_UNILABDBA_USER;
   FETCH L_UNILABDBA_USER INTO L_DBA_NAME;
   IF L_UNILABDBA_USER%NOTFOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SYSDEFAULTS;
      CLOSE L_UNILABDBA_USER;
      RAISE STPERROR;
   END IF;
   CLOSE  L_UNILABDBA_USER;
   
   IF L_DBA_NAME = A_US THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_DBAUSER;
      RAISE STPERROR;
   END IF;

   
   IF UNAPIGEN.ISSYSTEM21CFR11COMPLIANT = UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTALLOWEDIN21CFR11;
      RAISE STPERROR;
   END IF;

   L_US_CURSOR := DBMS_SQL.OPEN_CURSOR;

   
   
   
   
   L_RET_CODE := UNAPIUS.DELETEUSERSTRUCTURES(A_US, A_UP);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN 
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   
   
   
   L_SQL_STRING := 'DROP USER "' || A_US ||'" CASCADE';
   DBMS_SQL.PARSE(L_US_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   L_RESULT := DBMS_SQL.EXECUTE(L_US_CURSOR);

   
   
   
   DELETE FROM UTUPUS
   WHERE UP = A_UP
     AND VERSION = L_UP_VERSION
     AND US = A_US
     AND US_VERSION = L_US_VERSION;

   
   
   
   
   
   UPDATE UTAD
   SET IS_USER = '0', STRUCT_CREATED='0', DEF_UP=NULL
   WHERE AD = A_US 
   AND VERSION = L_US_VERSION;

   DBMS_SQL.CLOSE_CURSOR(L_US_CURSOR);
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE <> 1 THEN      
         UNAPIGEN.LOGERROR('DeleteUser', SQLERRM);
      END IF;
      IF DBMS_SQL.IS_OPEN(L_US_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(L_US_CURSOR);
      END IF;
      IF L_UNILABDBA_USER%ISOPEN THEN
         CLOSE L_UNILABDBA_USER;
      END IF;
      RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'DeleteUser'));
END DELETEUSER;

FUNCTION DELETEUSERSTRUCTURES
(A_US          IN VARCHAR2,             
 A_UP          IN NUMBER)               
RETURN NUMBER IS

L_US_CURSOR             INTEGER;
L_DBA_NAME              VARCHAR2(20);
L_UP_VERSION            VARCHAR2(20);
L_US_VERSION            VARCHAR2(20);

CURSOR L_ROLES_CURSOR IS
   SELECT GRANTED_ROLE
   FROM DBA_ROLE_PRIVS
   WHERE GRANTEE = A_US
   AND GRANTED_ROLE IN ('URAPI','UR1','UR2','UR3','UR4','UR5','UR6','UR7','UR8','UR9',
   'UR10','UR11','UR12','UR13','UR14','UR15','UR16','UR17','UR18','UR19','UR20','UR21',
   'UR22','UR23','UR24','UR25','UR26','UR27','UR28','UR29','UR30','UR31','UR32','UR33',
   'UR34','UR35','UR36','UR37','UR38','UR39','UR40','UR41','UR42','UR43','UR44','UR45',
   'UR46','UR47','UR48','UR49','UR50','UR51','UR52','UR53','UR54','UR55','UR56','UR57',
   'UR58','UR59','UR60','UR61','UR62','UR63','UR64','UR65','UR66','UR67','UR68','UR69',
   'UR70','UR71','UR72','UR73','UR74','UR75','UR76','UR77','UR78','UR79','UR80','UR81',
   'UR82','UR83','UR84','UR85','UR86','UR87','UR88','UR89','UR90','UR91','UR92','UR93',
   'UR94','UR95','UR96','UR97','UR98','UR99','UR100','UR101','UR102','UR103','UR104','UR105',
   'UR106','UR107','UR108','UR109','UR110','UR111','UR112','UR113','UR114','UR115','UR116',
   'UR117','UR118','UR119','UR120','UR121','UR122','UR123','UR124','UR125','UR126','UR127','UR128');
   
CURSOR L_UP_CURSOR (C_US VARCHAR2) IS
   SELECT UTUPUS.UP, UTUP.LC, UTUP.LC_VERSION, UTUP.SS, UTUP.LOG_HS
   FROM  UTUP, UTUPUS
   WHERE UTUPUS.US = C_US
     AND UTUP.UP   = UTUPUS.UP;

CURSOR L_LC_CURSOR (C_US VARCHAR2) IS
   SELECT UTLCUS.LC, UTLC.VERSION LC_VERSION, UTLC.LC_LC,  UTLC.LC_LC_VERSION LC_LC_VERSION, UTLC.SS, UTLC.LOG_HS
   FROM  UTLC, UTLCUS
   WHERE UTLCUS.US = C_US
     AND UTLC.LC = UTLCUS.LC;

CURSOR L_USTK_CURSOR(A_UP VARCHAR2) IS
   SELECT DISTINCT B.TK_TP, B.TK, A.UP
   FROM UTUPTK B, UTUPUS A
   WHERE A.US = A_US
   AND A.UP = B.UP;
   
BEGIN

   
   
   
   L_UP_VERSION := UNVERSION.P_NO_VERSION;
   L_US_VERSION := UNVERSION.P_NO_VERSION;

   
   
   
   
   

   
   
   
   FOR L_USTK_REC IN L_USTK_CURSOR(A_US) LOOP
      DELETE FROM UTUPUSTKVALUELISTS
      WHERE TK_TP = L_USTK_REC.TK_TP
        AND TK = L_USTK_REC.TK
        AND UP = L_USTK_REC.UP
        AND US = A_US;
      UNAPIGEN.U4COMMIT;
   END LOOP;

   
   
   
   
   
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_US, ' ') =  ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF (TRUNC(NVL(A_UP, -1)) - NVL(A_UP, 0)) <> 0 OR
      (NVL(A_UP, -1)) <= 0   THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UP;
      RAISE STPERROR;
   END IF;

   
   
   
   OPEN L_UNILABDBA_USER;
   FETCH L_UNILABDBA_USER INTO L_DBA_NAME;
   IF L_UNILABDBA_USER%NOTFOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SYSDEFAULTS;
      CLOSE L_UNILABDBA_USER;
      RAISE STPERROR;
   END IF;
   CLOSE  L_UNILABDBA_USER;
   
   IF L_DBA_NAME = A_US THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_DBAUSER;
      RAISE STPERROR;
   END IF;

   L_US_CURSOR := DBMS_SQL.OPEN_CURSOR;

   
   
   
   FOR L_OBJECT_REC IN L_OBJECTS_CURSOR(A_US) LOOP
      L_SQL_STRING := 'DROP ' || L_OBJECT_REC.OBJECT_TYPE ||
                      ' "' || A_US || '".' ||
                      L_OBJECT_REC.OBJECT_NAME ;
      DBMS_SQL.PARSE(L_US_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      L_RESULT := DBMS_SQL.EXECUTE(L_US_CURSOR);
   END LOOP;

   
   
   
   FOR L_ROLE_REC IN L_ROLES_CURSOR LOOP
      L_SQL_STRING := 'REVOKE ' || L_ROLE_REC.GRANTED_ROLE ||
                      ' FROM "' || A_US || '"' ;
      DBMS_SQL.PARSE(L_US_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      L_RESULT := DBMS_SQL.EXECUTE(L_US_CURSOR);
   END LOOP;

   
   
   
   L_EVENT_TP := 'UsedObjectDeleted';

   FOR L_UP_REC IN L_UP_CURSOR(A_US)
   LOOP

      L_EV_SEQ_NR := -1;
      L_EV_DETAILS := 'version='||L_UP_VERSION;
      L_RESULT:= UNAPIEV.INSERTEVENT('DeleteUserStructures',UNAPIGEN.P_EVMGR_NAME,
                                     'up', TO_CHAR(L_UP_REC.UP), L_UP_REC.LC, L_UP_REC.LC_VERSION, 
                                     L_UP_REC.SS, L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);

      IF L_RESULT <> 0 THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
         RAISE STPERROR;
      END IF;

      IF L_UP_REC.LOG_HS = '1' THEN
         INSERT INTO UTUPHS(UP, VERSION, WHO, WHO_DESCRIPTION, 
                            WHAT, WHAT_DESCRIPTION,
                            LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES  (L_UP_REC.UP, L_UP_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 
                  L_EVENT_TP || ' ' || A_US, 'user "'||A_US||'" is deleted and removed from user profile "'||L_UP_REC.UP||'"',
                  CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, '', UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;

   END LOOP;

   DELETE FROM UTUPUS
   WHERE US = A_US;

   DELETE FROM UTUPUSFA
   WHERE US = A_US;

   DELETE FROM UTUPUSPREF
   WHERE US = A_US;

   DELETE FROM UTUPUSTK
   WHERE US = A_US;

   DELETE FROM UTUPUSTKDETAILS
   WHERE US = A_US;   

   DELETE FROM UTUPUSOUTLOOKPAGES
   WHERE US = A_US;

   DELETE FROM UTUPUSOUTLOOKTASKS
   WHERE US = A_US;
      
   
   
   
   FOR L_LC_REC IN L_LC_CURSOR(A_US)
   LOOP

      L_EV_SEQ_NR := -1;
      L_EV_DETAILS := 'version='||L_LC_REC.LC_VERSION;
      L_RESULT :=
         UNAPIEV.INSERTEVENT('DeleteUserStructures',UNAPIGEN.P_EVMGR_NAME,
                             'lc', L_LC_REC.LC, L_LC_REC.LC_LC, L_LC_REC.LC_LC_VERSION, L_LC_REC.SS,
                              L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);

      IF L_RESULT <> 0 THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
         RAISE STPERROR;
      END IF;

      IF L_LC_REC.LOG_HS = '1' THEN
         INSERT INTO UTLCHS( LC, VERSION, WHO, WHO_DESCRIPTION,
                             WHAT, WHAT_DESCRIPTION,
                             LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (L_LC_REC.LC, L_LC_REC.LC_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION,
                 L_EVENT_TP || ' ' || A_US, 'user "'||A_US||'" is deleted and removed from life cycle "'||L_LC_REC.LC||'"',
                 CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, '', UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;

   END LOOP;

   DELETE FROM UTLCUS
   WHERE US = A_US;
   
   
   
   
   
   
   UPDATE UTAD
   SET STRUCT_CREATED = '0', IS_USER = '0', DEF_UP = NULL
   WHERE AD = A_US
   AND VERSION = L_US_VERSION;
      
   DBMS_SQL.CLOSE_CURSOR(L_US_CURSOR);

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE <> 1 THEN      
         UNAPIGEN.LOGERROR('DeleteUserStructures', SQLERRM);
      END IF;
      IF DBMS_SQL.IS_OPEN(L_US_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(L_US_CURSOR);
      END IF;
      IF L_UNILABDBA_USER%ISOPEN THEN
         CLOSE L_UNILABDBA_USER;
      END IF;
      IF L_USTK_CURSOR%ISOPEN THEN
         CLOSE L_USTK_CURSOR;
      END IF;
      RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'DeleteUserStructures'));
END DELETEUSERSTRUCTURES;

FUNCTION ALLOWAPI                              
(A_US            IN VARCHAR2)                  
RETURN NUMBER IS

L_US              VARCHAR2(20);
L_US_CURSOR       INTEGER;
L_US_FOUND        BOOLEAN;
L_DBA_NAME        VARCHAR2(20);

BEGIN

   
   
   
   
   
   
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_US, ' ') =  ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   
   
   
   OPEN L_UNILABDBA_USER;
   FETCH L_UNILABDBA_USER INTO L_DBA_NAME;
   IF L_UNILABDBA_USER%NOTFOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SYSDEFAULTS;
      CLOSE L_UNILABDBA_USER;
      RAISE STPERROR;
   END IF;
   CLOSE  L_UNILABDBA_USER;
   
   IF L_DBA_NAME = A_US THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_DBAUSER;
      RAISE STPERROR;
   END IF;

   
   
   
   OPEN L_USER(A_US);
   FETCH L_USER
   INTO L_US;
   L_US_FOUND := L_USER%FOUND;
   CLOSE L_USER;

   IF NOT L_US_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR;
   END IF;

   L_US_CURSOR := DBMS_SQL.OPEN_CURSOR;

   
   
   
   L_SQL_STRING := 'GRANT URAPI TO "' || A_US || '"';
   DBMS_SQL.PARSE(L_US_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   L_RESULT := DBMS_SQL.EXECUTE(L_US_CURSOR);

   
   
   
   
   
   FOR L_PACKAGE_REC IN L_PACKAGE_CURSOR LOOP
      BEGIN
         L_SQL_STRING := 'DROP SYNONYM "' || A_US || '".' ||
                         L_PACKAGE_REC.PACKAGE_NAME ;
         DBMS_SQL.PARSE(L_US_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         L_RESULT := DBMS_SQL.EXECUTE(L_US_CURSOR);
      EXCEPTION
      WHEN OTHERS THEN
         IF SQLCODE <> -1434 THEN 
            DBMS_SQL.CLOSE_CURSOR(L_US_CURSOR);
            RAISE;
         END IF;
      END;
      
      L_SQL_STRING := 'CREATE SYNONYM "' || A_US || '".' ||
                      L_PACKAGE_REC.PACKAGE_NAME || ' FOR ' ||
                      L_DBA_NAME || '.' || L_PACKAGE_REC.PACKAGE_NAME;
      DBMS_SQL.PARSE(L_US_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      L_RESULT := DBMS_SQL.EXECUTE(L_US_CURSOR);
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_US_CURSOR);

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE <> 1 THEN      
         UNAPIGEN.LOGERROR('AllowApi', SQLERRM);
      END IF;
      IF DBMS_SQL.IS_OPEN(L_US_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(L_US_CURSOR);
      END IF;
      IF L_USER%ISOPEN THEN
         CLOSE L_USER;
      END IF;
      IF L_UNILABDBA_USER%ISOPEN THEN
         CLOSE L_UNILABDBA_USER;
      END IF;
      RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'AllowApi'));
END ALLOWAPI;

FUNCTION NEWDATADOMAIN                  
(A_US          IN VARCHAR2,             
 A_UP          IN NUMBER)               
RETURN NUMBER IS

L_DBA_NAME              VARCHAR2(20);
L_US                    VARCHAR2(20);
L_US_FOUND              BOOLEAN;
L_US_CURSOR             INTEGER;
L_DD                    VARCHAR2(3);
L_UP_VERSION            VARCHAR2(20);
L_US_VERSION            VARCHAR2(20);

CURSOR L_ROLES_CURSOR(A_US VARCHAR2) IS
   SELECT GRANTED_ROLE
   FROM DBA_ROLE_PRIVS
   WHERE GRANTEE = A_US
   AND GRANTED_ROLE IN ('URAPI','UR1','UR2','UR3','UR4','UR5','UR6','UR7','UR8','UR9',
   'UR10','UR11','UR12','UR13','UR14','UR15','UR16','UR17','UR18','UR19','UR20','UR21',
   'UR22','UR23','UR24','UR25','UR26','UR27','UR28','UR29','UR30','UR31','UR32','UR33',
   'UR34','UR35','UR36','UR37','UR38','UR39','UR40','UR41','UR42','UR43','UR44','UR45',
   'UR46','UR47','UR48','UR49','UR50','UR51','UR52','UR53','UR54','UR55','UR56','UR57',
   'UR58','UR59','UR60','UR61','UR62','UR63','UR64','UR65','UR66','UR67','UR68','UR69',
   'UR70','UR71','UR72','UR73','UR74','UR75','UR76','UR77','UR78','UR79','UR80','UR81',
   'UR82','UR83','UR84','UR85','UR86','UR87','UR88','UR89','UR90','UR91','UR92','UR93',
   'UR94','UR95','UR96','UR97','UR98','UR99','UR100','UR101','UR102','UR103','UR104','UR105',
   'UR106','UR107','UR108','UR109','UR110','UR111','UR112','UR113','UR114','UR115','UR116',
   'UR117','UR118','UR119','UR120','UR121','UR122','UR123','UR124','UR125','UR126','UR127','UR128');

CURSOR L_VIEWS_CURSOR IS
   SELECT VIEW_NAME
   FROM SYS.DBA_VIEWS
   WHERE OWNER = (SELECT 'DD' || DD FROM UTUP WHERE UP = A_UP);

CURSOR L_PACKAGE_CURSOR IS
   SELECT DISTINCT TABLE_NAME PACKAGE_NAME, OWNER
   FROM DBA_TAB_PRIVS 
   WHERE GRANTEE='URAPI';
                        
CURSOR L_DD_CURSOR(A_UP NUMBER, A_UP_VERSION VARCHAR2) IS
   SELECT DD 
   FROM UTUP
   WHERE UP = A_UP
   AND VERSION = A_UP_VERSION;                        

BEGIN

   
   
   
   L_UP_VERSION := UNVERSION.P_NO_VERSION;
   L_US_VERSION := UNVERSION.P_NO_VERSION;

   OPEN L_DD_CURSOR(A_UP, L_UP_VERSION);
   FETCH L_DD_CURSOR INTO L_DD;
   CLOSE L_DD_CURSOR;
   
   
   
   
   
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_US, ' ') =  ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(TO_NUMBER(L_DD) , -1) < 1 OR
      NVL(TO_NUMBER(L_DD) , -1) > UNAPIGEN.P_DATADOMAINS THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_DD;
      RAISE STPERROR;
   END IF;

   
   
   
   OPEN L_USER(A_US);
   FETCH L_USER
   INTO L_US;
   L_US_FOUND := L_USER%FOUND;
   CLOSE L_USER;

   IF NOT L_US_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR;
   END IF;

   IF L_DBA_NAME = A_US THEN
      
      
      NULL;
   ELSE
   
      L_SQL_STRING := NULL;
      L_US_CURSOR := DBMS_SQL.OPEN_CURSOR;

      
      
      
      FOR L_OBJECT_REC IN L_OBJECTS_CURSOR(A_US) LOOP
        L_SQL_STRING := 'DROP ' || L_OBJECT_REC.OBJECT_TYPE ||
                    ' "' || A_US || '".' ||
                    L_OBJECT_REC.OBJECT_NAME ;
        DBMS_SQL.PARSE(L_US_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
        L_RESULT := DBMS_SQL.EXECUTE(L_US_CURSOR);
      END LOOP;

      
      
      
      FOR L_ROLE_REC IN L_ROLES_CURSOR(A_US) LOOP
        L_SQL_STRING := 'REVOKE ' || L_ROLE_REC.GRANTED_ROLE ||
                    ' FROM "' || A_US ||'"';
        DBMS_SQL.PARSE(L_US_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
        L_RESULT := DBMS_SQL.EXECUTE(L_US_CURSOR);
      END LOOP;

      
      
      
      L_SQL_STRING := 'GRANT UnilabUser TO "' || A_US ||'"';
      DBMS_SQL.PARSE(L_US_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      L_RESULT := DBMS_SQL.EXECUTE(L_US_CURSOR);

      
      
      
      L_SQL_STRING := 'GRANT ' || 'ur' || L_DD ||
                  ' TO "' || A_US ||'"';
      DBMS_SQL.PARSE(L_US_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      L_RESULT := DBMS_SQL.EXECUTE(L_US_CURSOR);

      
      
      
      
      
      L_SQL_STRING := 'GRANT URAPI TO "' ||A_US||'"';                        
      DBMS_SQL.PARSE(L_US_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      L_RESULT := DBMS_SQL.EXECUTE(L_US_CURSOR);

      
      
      
      FOR L_VIEW_REC IN L_VIEWS_CURSOR LOOP
        L_SQL_STRING := 'CREATE SYNONYM "' || A_US || '".' ||
                    L_VIEW_REC.VIEW_NAME || ' FOR dd' || L_DD || '.' ||
                    L_VIEW_REC.VIEW_NAME;
        DBMS_SQL.PARSE(L_US_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
        L_RESULT := DBMS_SQL.EXECUTE(L_US_CURSOR);
      END LOOP;

      
      
      
      
      
      FOR L_PACKAGE_REC IN L_PACKAGE_CURSOR LOOP
        L_SQL_STRING := 'CREATE SYNONYM "' || A_US || '".' ||
                    L_PACKAGE_REC.PACKAGE_NAME || ' FOR ' ||
                    L_PACKAGE_REC.OWNER || '.' || 
                    L_PACKAGE_REC.PACKAGE_NAME;
        DBMS_SQL.PARSE(L_US_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
        L_RESULT := DBMS_SQL.EXECUTE(L_US_CURSOR);
      END LOOP;
      
      DBMS_SQL.CLOSE_CURSOR(L_US_CURSOR);
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
   RETURN(UNAPIGEN.DBERR_SUCCESS);
      
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN      
      UNAPIGEN.LOGERROR('NewDataDomain', SQLERRM);
      IF L_SQL_STRING IS NOT NULL THEN
         UNAPIGEN.LOGERROR('NewDataDomain', 'HELP for DBA:'||L_SQL_STRING);
      END IF;
   END IF;
   IF DBMS_SQL.IS_OPEN(L_US_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_US_CURSOR);
   END IF;
   IF L_UNILABDBA_USER%ISOPEN THEN
      CLOSE L_UNILABDBA_USER;
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'NewDataDomain'));
END NEWDATADOMAIN;

FUNCTION NEWSHAREDUSER4UP                     
(A_US          IN VARCHAR2,                   
 A_UP          IN NUMBER)                     
RETURN NUMBER IS

L_DBA_NAME              VARCHAR2(20);
L_US                    VARCHAR2(20);
L_US_FOUND              BOOLEAN;
L_US_CURSOR             INTEGER;
L_DD                    VARCHAR2(3);
L_UP_VERSION            VARCHAR2(20);
L_US_VERSION            VARCHAR2(20);

CURSOR L_ROLES_CURSOR(A_US VARCHAR2) IS
   SELECT GRANTED_ROLE
   FROM DBA_ROLE_PRIVS
   WHERE GRANTEE = A_US
   AND GRANTED_ROLE IN ('URAPI','UR1','UR2','UR3','UR4','UR5','UR6','UR7','UR8','UR9',
   'UR10','UR11','UR12','UR13','UR14','UR15','UR16','UR17','UR18','UR19','UR20','UR21',
   'UR22','UR23','UR24','UR25','UR26','UR27','UR28','UR29','UR30','UR31','UR32','UR33',
   'UR34','UR35','UR36','UR37','UR38','UR39','UR40','UR41','UR42','UR43','UR44','UR45',
   'UR46','UR47','UR48','UR49','UR50','UR51','UR52','UR53','UR54','UR55','UR56','UR57',
   'UR58','UR59','UR60','UR61','UR62','UR63','UR64','UR65','UR66','UR67','UR68','UR69',
   'UR70','UR71','UR72','UR73','UR74','UR75','UR76','UR77','UR78','UR79','UR80','UR81',
   'UR82','UR83','UR84','UR85','UR86','UR87','UR88','UR89','UR90','UR91','UR92','UR93',
   'UR94','UR95','UR96','UR97','UR98','UR99','UR100','UR101','UR102','UR103','UR104','UR105',
   'UR106','UR107','UR108','UR109','UR110','UR111','UR112','UR113','UR114','UR115','UR116',
   'UR117','UR118','UR119','UR120','UR121','UR122','UR123','UR124','UR125','UR126','UR127','UR128');

CURSOR L_VIEWS_CURSOR IS
   SELECT VIEW_NAME
   FROM SYS.DBA_VIEWS
   WHERE OWNER = (SELECT 'DD' || DD FROM UTUP WHERE UP = A_UP);

CURSOR L_PACKAGE_CURSOR IS
   SELECT DISTINCT TABLE_NAME PACKAGE_NAME, OWNER
   FROM DBA_TAB_PRIVS 
   WHERE GRANTEE='URAPI';
                        
CURSOR L_DD_CURSOR(A_UP NUMBER, A_UP_VERSION VARCHAR2) IS
   SELECT DD 
   FROM UTUP
   WHERE UP = A_UP
   AND VERSION = A_UP_VERSION;                        

BEGIN

   
   
   
   L_UP_VERSION := UNVERSION.P_NO_VERSION;
   L_US_VERSION := UNVERSION.P_NO_VERSION;

   OPEN L_DD_CURSOR(A_UP, L_UP_VERSION);
   FETCH L_DD_CURSOR INTO L_DD;
   CLOSE L_DD_CURSOR;
   
   
   
   
   
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_US, ' ') =  ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(TO_NUMBER(L_DD) , -1) < 1 OR
      NVL(TO_NUMBER(L_DD) , -1) > UNAPIGEN.P_DATADOMAINS THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_DD;
      RAISE STPERROR;
   END IF;

   
   
   
   OPEN L_USER(A_US);
   FETCH L_USER
   INTO L_US;
   L_US_FOUND := L_USER%FOUND;
   CLOSE L_USER;

   IF NOT L_US_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR;
   END IF;

   IF L_DBA_NAME = A_US THEN
      
      
      NULL;
   ELSE
   
      L_SQL_STRING := NULL;
      L_US_CURSOR := DBMS_SQL.OPEN_CURSOR;

      
      
      
      FOR L_OBJECT_REC IN L_OBJECTS_CURSOR(A_US) LOOP
        L_SQL_STRING := 'DROP ' || L_OBJECT_REC.OBJECT_TYPE ||
                    ' "' || A_US || '".' ||
                    L_OBJECT_REC.OBJECT_NAME ;
        DBMS_SQL.PARSE(L_US_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
        L_RESULT := DBMS_SQL.EXECUTE(L_US_CURSOR);
      END LOOP;

      
      
      
      FOR L_ROLE_REC IN L_ROLES_CURSOR(A_US) LOOP
        L_SQL_STRING := 'REVOKE ' || L_ROLE_REC.GRANTED_ROLE ||
                    ' FROM "' || A_US ||'"';
        DBMS_SQL.PARSE(L_US_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
        L_RESULT := DBMS_SQL.EXECUTE(L_US_CURSOR);
      END LOOP;

      
      
      
      
      
      
      
      

      
      
      
      L_SQL_STRING := 'GRANT ' || 'ur' || L_DD ||
                  ' TO "' || A_US ||'"';
      DBMS_SQL.PARSE(L_US_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      L_RESULT := DBMS_SQL.EXECUTE(L_US_CURSOR);

      
      
      
      
      
      L_SQL_STRING := 'GRANT URAPI TO "' ||A_US||'"';                        
      DBMS_SQL.PARSE(L_US_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      L_RESULT := DBMS_SQL.EXECUTE(L_US_CURSOR);

      
      
      
      FOR L_VIEW_REC IN L_VIEWS_CURSOR LOOP
        L_SQL_STRING := 'CREATE SYNONYM "' || A_US || '".' ||
                    L_VIEW_REC.VIEW_NAME || ' FOR dd' || L_DD || '.' ||
                    L_VIEW_REC.VIEW_NAME;
        DBMS_SQL.PARSE(L_US_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
        L_RESULT := DBMS_SQL.EXECUTE(L_US_CURSOR);
      END LOOP;

      
      
      
      
      
      FOR L_PACKAGE_REC IN L_PACKAGE_CURSOR LOOP
        L_SQL_STRING := 'CREATE SYNONYM "' || A_US || '".' ||
                    L_PACKAGE_REC.PACKAGE_NAME || ' FOR ' ||
                    L_PACKAGE_REC.OWNER || '.' || 
                    L_PACKAGE_REC.PACKAGE_NAME;
        DBMS_SQL.PARSE(L_US_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
        L_RESULT := DBMS_SQL.EXECUTE(L_US_CURSOR);
      END LOOP;
      
      DBMS_SQL.CLOSE_CURSOR(L_US_CURSOR);
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
   RETURN(UNAPIGEN.DBERR_SUCCESS);
      
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN      
      UNAPIGEN.LOGERROR('NewSharedUser4Up', SQLERRM);
      IF L_SQL_STRING IS NOT NULL THEN
         UNAPIGEN.LOGERROR('NewSharedUser4Up', 'HELP for DBA:'||L_SQL_STRING);
      END IF;
   END IF;
   IF DBMS_SQL.IS_OPEN(L_US_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_US_CURSOR);
   END IF;
   IF L_UNILABDBA_USER%ISOPEN THEN
      CLOSE L_UNILABDBA_USER;
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'NewSharedUser4Up'));
END NEWSHAREDUSER4UP;

FUNCTION GETUPUSEXPERIENCELEVEL
(A_UP               OUT      UNAPIGEN.LONG_TABLE_TYPE,  
 A_US               OUT      UNAPIGEN.VC20_TABLE_TYPE,  
 A_EL               OUT      UNAPIGEN.VC20_TABLE_TYPE,  
 A_IS_ENABLED       OUT      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NR_OF_ROWS       IN OUT   NUMBER,                    
 A_WHERE_CLAUSE     IN       VARCHAR2)                  
RETURN NUMBER IS

L_UP           NUMBER(5);
L_US           VARCHAR2(20);
L_EL           VARCHAR2(20);
L_IS_ENABLED   VARCHAR2(1);
L_UPUSEL_CURSOR INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS, 0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      RETURN(UNAPIGEN.DBERR_WHERECLAUSE);
   ELSIF
      UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := 'WHERE us = ''' || A_WHERE_CLAUSE || 
                        ''' ORDER BY up, us, seq';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_UPUSEL_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT up, us, el, is_enabled FROM dd'||
                   UNAPIGEN.P_DD || '.uvupusel '||L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_UPUSEL_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   DBMS_SQL.DEFINE_COLUMN(L_UPUSEL_CURSOR, 1, L_UP);
   DBMS_SQL.DEFINE_COLUMN(L_UPUSEL_CURSOR, 2, L_US, 20);
   DBMS_SQL.DEFINE_COLUMN(L_UPUSEL_CURSOR, 3, L_EL, 20);
   DBMS_SQL.DEFINE_COLUMN(L_UPUSEL_CURSOR, 4, L_IS_ENABLED, 1);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_UPUSEL_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;
      DBMS_SQL.COLUMN_VALUE(L_UPUSEL_CURSOR, 1, L_UP);
      DBMS_SQL.COLUMN_VALUE(L_UPUSEL_CURSOR, 2, L_US);
      DBMS_SQL.COLUMN_VALUE(L_UPUSEL_CURSOR, 3, L_EL);
      DBMS_SQL.COLUMN_VALUE(L_UPUSEL_CURSOR, 4, L_IS_ENABLED);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_UP(L_FETCHED_ROWS) := L_UP;
      A_US(L_FETCHED_ROWS) := L_US;
      A_EL(L_FETCHED_ROWS) := L_EL;
      A_IS_ENABLED(L_FETCHED_ROWS) := L_IS_ENABLED;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_UPUSEL_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_UPUSEL_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetUpUsExperienceLevel', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN(L_UPUSEL_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(L_UPUSEL_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETUPUSEXPERIENCELEVEL;

FUNCTION SAVEUPUSEXPERIENCELEVEL
(A_UP                      IN       NUMBER,                      
 A_US                      IN       VARCHAR2,                    
 A_EL                      IN       UNAPIGEN.VC20_TABLE_TYPE,    
 A_IS_ENABLED              IN       UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_NR_OF_ROWS              IN       NUMBER,                      
 A_MODIFY_REASON           IN       VARCHAR2)                    
RETURN NUMBER IS

L_ALLOW_MODIFY          CHAR(1);
L_LC                    VARCHAR2(2);
L_SS                    VARCHAR2(2);
L_LOG_HS                CHAR(1);
L_ACTIVE                CHAR(1);
L_UP_VERSION            VARCHAR2(20);
L_US_VERSION            VARCHAR2(20);

BEGIN

   
   
   
   L_UP_VERSION := UNVERSION.P_NO_VERSION;
   L_US_VERSION := UNVERSION.P_NO_VERSION;

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_UP, -1) = -1 OR
      NVL(A_US, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;
   
   DELETE FROM UTUPUSEL
   WHERE UP = A_UP 
     AND VERSION = L_UP_VERSION
     AND US = A_US
     AND US_VERSION = L_US_VERSION;

   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      IF A_EL(L_SEQ_NO) IS NULL THEN
         L_RET_CODE := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
      END IF;    
      
      INSERT INTO UTUPUSEL(UP, VERSION, US, US_VERSION, SEQ, EL, IS_ENABLED)
      VALUES(A_UP, L_UP_VERSION, A_US, L_US_VERSION, L_SEQ_NO, A_EL(L_SEQ_NO), A_IS_ENABLED(L_SEQ_NO));
   END LOOP;

   L_EV_SEQ_NR := -1;
   L_EV_DETAILS := 'version='||L_US_VERSION;
   L_EVENT_TP := 'UsExperienceLevelUpdated';
   L_RESULT := UNAPIEV.INSERTEVENT('SaveUpUsExperienceLevel', UNAPIGEN.P_EVMGR_NAME,
                                   'ad', A_US, '', '', '', L_EVENT_TP, L_EV_DETAILS,
                                   L_EV_SEQ_NR);
                                   
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE <> 1 THEN
         UNAPIGEN.LOGERROR('SaveUpUsExperienceLevel', SQLERRM);
      END IF;
      RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveUpUsExperienceLevel'));
END SAVEUPUSEXPERIENCELEVEL;

FUNCTION GETEXPERIENCELEVELLIST
(A_EL               OUT      UNAPIGEN.VC20_TABLE_TYPE,  
 A_NR_OF_ROWS       IN OUT   NUMBER,                    
 A_WHERE_CLAUSE     IN       VARCHAR2)                  
RETURN NUMBER IS

L_EL             VARCHAR2(20); 
L_EL_CURSOR  INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS, 0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;


   L_WHERE_CLAUSE := A_WHERE_CLAUSE;
   
   IF NVL(A_WHERE_CLAUSE, ' ') != ' ' THEN
      IF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
         L_WHERE_CLAUSE := 'WHERE el = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                        ''' ORDER BY el';
      END IF;
   END IF;

   L_EL_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT el FROM dd'||
                   UNAPIGEN.P_DD || '.uvel '||L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_EL_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   DBMS_SQL.DEFINE_COLUMN(L_EL_CURSOR, 1, L_EL, 20);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_EL_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;
      DBMS_SQL.COLUMN_VALUE(L_EL_CURSOR, 1, L_EL);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_EL(L_FETCHED_ROWS) := L_EL;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_EL_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_EL_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
              'GetExperienceLevelList', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN(L_EL_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(L_EL_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETEXPERIENCELEVELLIST;

FUNCTION GETUSERLIST                                          
(A_DN            OUT     UNAPIGEN.VC255_TABLE_TYPE,           
 A_DISPLAY_NAME  OUT     UNAPIGEN.VC255_TABLE_TYPE,           
 A_CONNECT_ID    OUT     UNAPIGEN.VC20_TABLE_TYPE,            
 A_EMAIL         OUT     UNAPIGEN.VC255_TABLE_TYPE,           
 A_NR_OF_ROWS    IN OUT  NUMBER,                              
 A_WHERE_CLAUSE  IN      VARCHAR2)                            
RETURN NUMBER IS

BEGIN
   RETURN(UNLDAP.GETUSERLIST(A_DN, A_DISPLAY_NAME, A_CONNECT_ID, A_EMAIL, A_NR_OF_ROWS, A_WHERE_CLAUSE));
END GETUSERLIST;

FUNCTION SYNCHSHAREDUSER4UP                   
(A_UP          IN NUMBER)                     
RETURN NUMBER IS

L_SHARED_US             VARCHAR2(30);
L_CHECK_COUNT           INTEGER;
L_DD                    INTEGER;
L_UP_VERSION            VARCHAR2(20);
L_US_VERSION            VARCHAR2(20);
L_DBA_NAME              VARCHAR2(20);

CURSOR L_DD_CURSOR(A_UP NUMBER, A_UP_VERSION VARCHAR2) IS
   SELECT DD 
   FROM UTUP
   WHERE UP = A_UP
   AND VERSION = A_UP_VERSION;                        

BEGIN



   L_UP_VERSION := UNVERSION.P_NO_VERSION;
   L_US_VERSION := UNVERSION.P_NO_VERSION;

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF (TRUNC(NVL(A_UP, -1)) - NVL(A_UP, 0)) <> 0 OR
      (NVL(A_UP, -1)) <= 0 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UP;
      RAISE STPERROR;
   END IF;

   L_SHARED_US := UNAPIGEN.P_ENTERPRISE_USER_PREFIX||A_UP;
   SELECT SETTING_VALUE 
   INTO L_DBA_NAME
   FROM UTSYSTEM 
   WHERE SETTING_NAME = 'DBA_NAME';
   
   
   
   
   SELECT COUNT('X')
   INTO L_CHECK_COUNT
   FROM SYS.DBA_USERS
   WHERE USERNAME = L_SHARED_US;
   
   IF L_CHECK_COUNT = 0 THEN
      L_RET_CODE := UNAPIUS.CREATESHAREDUSER4UP(L_SHARED_US, A_UP);
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         L_SQLERRM := 'CreateShared user failed ret_code='||L_RET_CODE||'#us='||UNAPIGEN.P_ENTERPRISE_USER_PREFIX||A_UP||'#up='||A_UP;
         UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
         RAISE STPERROR;
      END IF;
   END IF;
   
   OPEN L_DD_CURSOR(A_UP, L_UP_VERSION);
   FETCH L_DD_CURSOR INTO L_DD;
   CLOSE L_DD_CURSOR;

   
   
   
   
   FOR L_CORRUPTVIEW_REC IN (SELECT SYNONYM_NAME
                             FROM SYS.DBA_SYNONYMS
                             WHERE OWNER = L_SHARED_US
                             AND TABLE_OWNER <> 'DD'||L_DD
                             AND TABLE_NAME IN (SELECT VIEW_NAME
                                                FROM ALL_VIEWS
                                                WHERE OWNER = 'DD'||L_DD)) LOOP
      L_SQL_STRING := 'DROP SYNONYM "' || L_SHARED_US || '".' ||L_CORRUPTVIEW_REC.SYNONYM_NAME;
      EXECUTE IMMEDIATE L_SQL_STRING;
   END LOOP;

   
   
   
   
   FOR L_CORRUPTPACK_REC IN (SELECT SYNONYM_NAME
                             FROM SYS.DBA_SYNONYMS
                             WHERE OWNER = L_SHARED_US
                             AND TABLE_OWNER = L_DBA_NAME
                             AND TABLE_NAME IN (SELECT DISTINCT TABLE_NAME PACKAGE_NAME                          
                                                FROM DBA_TAB_PRIVS 
                                                WHERE GRANTEE='URAPI')) LOOP
      L_SQL_STRING := 'DROP SYNONYM "' || L_SHARED_US || '".' ||L_CORRUPTPACK_REC.SYNONYM_NAME;
      EXECUTE IMMEDIATE L_SQL_STRING;
   END LOOP;
                             
   
   
   
   
   FOR L_URXXROLE_REC IN (SELECT GRANTED_ROLE 
                             FROM SYS.DBA_ROLE_PRIVS 
                             WHERE GRANTED_ROLE LIKE 'UR%'  
                             AND GRANTED_ROLE <> 'URAPI' 
                             AND GRANTEE=L_SHARED_US) LOOP
      IF L_URXXROLE_REC.GRANTED_ROLE <> 'UR'||L_DD THEN
         L_SQL_STRING := 'REVOKE "'||L_URXXROLE_REC.GRANTED_ROLE||'" FROM "'||L_SHARED_US||'"';
         EXECUTE IMMEDIATE L_SQL_STRING;
      END IF;
   END LOOP;
   
   
   
   
   FOR L_MISSINGVIEWYNONYM_REC IN (SELECT VIEW_NAME 
                                   FROM ALL_VIEWS
                                   WHERE OWNER = 'DD'||L_DD
                                   MINUS
                                   SELECT SYNONYM_NAME VIEW_NAME
                                   FROM SYS.DBA_SYNONYMS
                                   WHERE OWNER = L_SHARED_US
                                   AND TABLE_OWNER = 'DD'||L_DD
                                   AND TABLE_NAME IN (SELECT VIEW_NAME 
                                                      FROM ALL_VIEWS
                                                      WHERE OWNER = 'DD'||L_DD)) LOOP
      L_SQL_STRING := 'CREATE SYNONYM "' || L_SHARED_US || '".' ||
                      L_MISSINGVIEWYNONYM_REC.VIEW_NAME || ' FOR dd' || L_DD || '.' ||
                      L_MISSINGVIEWYNONYM_REC.VIEW_NAME;
      EXECUTE IMMEDIATE L_SQL_STRING;
   END LOOP;
   
   
   
   
   FOR L_MISSINGPACKSYNONYM_REC IN (SELECT DISTINCT TABLE_NAME PACKAGE_NAME
                                    FROM DBA_TAB_PRIVS 
                                    WHERE GRANTEE='URAPI'
                                    MINUS
                                    SELECT SYNONYM_NAME VIEW_NAME
                                    FROM SYS.DBA_SYNONYMS
                                    WHERE OWNER = L_SHARED_US
                                    AND TABLE_OWNER = L_DBA_NAME
                                    AND TABLE_NAME IN (SELECT DISTINCT TABLE_NAME PACKAGE_NAME
                                                       FROM DBA_TAB_PRIVS 
                                                       WHERE GRANTEE='URAPI')) LOOP
      L_SQL_STRING := 'CREATE SYNONYM "' || L_SHARED_US || '".' ||
                      L_MISSINGPACKSYNONYM_REC.PACKAGE_NAME || ' FOR "' || L_DBA_NAME || '".' ||
                      L_MISSINGPACKSYNONYM_REC.PACKAGE_NAME;
      EXECUTE IMMEDIATE L_SQL_STRING;
   END LOOP;
   
   
   
   
   FOR L_MISSINGROLE_REC IN ((SELECT 'UR'||L_DD MISSING_ROLE FROM DUAL
                              UNION ALL
                              SELECT 'URAPI' MISSING_ROLE FROM DUAL
                             )
                             MINUS
                               SELECT GRANTED_ROLE MISSING_ROLE 
                               FROM SYS.DBA_ROLE_PRIVS 
                               WHERE GRANTED_ROLE LIKE 'UR%' 
                               AND GRANTEE=L_SHARED_US) LOOP
       L_SQL_STRING := 'GRANT '||L_MISSINGROLE_REC.MISSING_ROLE||' TO "' || L_SHARED_US ||'"';
       EXECUTE IMMEDIATE L_SQL_STRING;
   END LOOP;                               
   
   
   
   
   FOR L_DANGLINGSYNONYMS_REC IN (SELECT SYNONYM_NAME
                                  FROM SYS.DBA_SYNONYMS
                                  WHERE OWNER = L_SHARED_US
                                  AND (TABLE_NAME, TABLE_OWNER) 
                                          NOT IN (SELECT OBJECT_NAME, OWNER 
                                                  FROM SYS.DBA_OBJECTS)) LOOP
      L_SQL_STRING := 'DROP SYNONYM "' || L_SHARED_US || '".' ||L_DANGLINGSYNONYMS_REC.SYNONYM_NAME;
      EXECUTE IMMEDIATE L_SQL_STRING;
   END LOOP;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);
      
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN      
      UNAPIGEN.LOGERROR('SynchSharedUser4up', SQLERRM);
   END IF;
   IF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('SynchSharedUser4up', L_SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SynchSharedUser4up'));
END SYNCHSHAREDUSER4UP;

END UNAPIUS;
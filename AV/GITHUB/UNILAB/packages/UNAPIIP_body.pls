PACKAGE BODY unapiip AS

L_SQLERRM         VARCHAR2(255);
L_SQL_STRING      VARCHAR2(2000);
L_WHERE_CLAUSE    VARCHAR2(1000);
L_EVENT_TP        UTEV.EV_TP%TYPE;
L_RET_CODE        NUMBER;
L_RESULT          NUMBER;
L_FETCHED_ROWS    NUMBER;
L_EV_SEQ_NR       NUMBER;
STPERROR          EXCEPTION;


P_IP_CURSOR        INTEGER;
P_IPIE_CURSOR      INTEGER;

P_SAVEIPIE_CALLS             INTEGER;
P_SAVEIPIE_TR_SEQ            INTEGER;

FUNCTION GETVERSION
   RETURN VARCHAR2
IS
BEGIN
   RETURN('06.07.00.00_00.13');
EXCEPTION
   WHEN OTHERS THEN
      RETURN (NULL);
END GETVERSION;

FUNCTION GETINFOPROFILELIST
(A_IP                      OUT      UNAPIGEN.VC20_TABLE_TYPE, 
 A_VERSION                 OUT      UNAPIGEN.VC20_TABLE_TYPE,  
 A_VERSION_IS_CURRENT      OUT      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_EFFECTIVE_FROM          OUT      UNAPIGEN.DATE_TABLE_TYPE,  
 A_EFFECTIVE_TILL          OUT      UNAPIGEN.DATE_TABLE_TYPE,  
 A_DESCRIPTION             OUT      UNAPIGEN.VC40_TABLE_TYPE, 
 A_SS                      OUT      UNAPIGEN.VC2_TABLE_TYPE,  
 A_NR_OF_ROWS              IN OUT   NUMBER,                   
 A_WHERE_CLAUSE            IN       VARCHAR2,                 
 A_NEXT_ROWS               IN       NUMBER)                   
RETURN NUMBER IS

L_IP                    VARCHAR2(20);
L_VERSION               VARCHAR2(20);
L_VERSION_IS_CURRENT    CHAR(1);
L_EFFECTIVE_FROM        TIMESTAMP WITH TIME ZONE;
L_EFFECTIVE_TILL        TIMESTAMP WITH TIME ZONE;
L_DESCRIPTION           VARCHAR2(40);
L_SS                    VARCHAR2(2);

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_IP_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_IP_CURSOR);
         P_IP_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_IP_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      IF P_IP_CURSOR IS NULL THEN
         P_IP_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;

      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
         L_WHERE_CLAUSE := 'WHERE active = ''1'' ORDER BY ip, version'; 
      ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
         L_WHERE_CLAUSE := 'WHERE version_is_current = ''1'' '||
                           'AND ip = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                           ''' ORDER BY ip, version';
      ELSE
         L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
      END IF;

      L_SQL_STRING := 'SELECT ip, version, nvl(version_is_current,''0''), effective_from, effective_till, description, ss FROM dd' ||
                      UNAPIGEN.P_DD || '.uvip ' || L_WHERE_CLAUSE;

      DBMS_SQL.PARSE(P_IP_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

      DBMS_SQL.DEFINE_COLUMN(P_IP_CURSOR, 1, L_IP, 20);
      DBMS_SQL.DEFINE_COLUMN(P_IP_CURSOR, 2, L_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_IP_CURSOR, 3, L_VERSION_IS_CURRENT, 1);
      DBMS_SQL.DEFINE_COLUMN(P_IP_CURSOR, 4, L_EFFECTIVE_FROM);
      DBMS_SQL.DEFINE_COLUMN(P_IP_CURSOR, 5, L_EFFECTIVE_TILL);
      DBMS_SQL.DEFINE_COLUMN(P_IP_CURSOR, 6, L_DESCRIPTION, 40);
      DBMS_SQL.DEFINE_COLUMN(P_IP_CURSOR, 7, L_SS, 2);
      L_RESULT := DBMS_SQL.EXECUTE(P_IP_CURSOR);
   END IF;

   L_RESULT := DBMS_SQL.FETCH_ROWS(P_IP_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_IP_CURSOR, 1, L_IP);
      DBMS_SQL.COLUMN_VALUE(P_IP_CURSOR, 2, L_VERSION);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_IP_CURSOR, 3, L_VERSION_IS_CURRENT);
      DBMS_SQL.COLUMN_VALUE(P_IP_CURSOR, 4, L_EFFECTIVE_FROM);
      DBMS_SQL.COLUMN_VALUE(P_IP_CURSOR, 5, L_EFFECTIVE_TILL);
      DBMS_SQL.COLUMN_VALUE(P_IP_CURSOR, 6, L_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE(P_IP_CURSOR, 7, L_SS);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_IP(L_FETCHED_ROWS) := L_IP;
      A_VERSION(L_FETCHED_ROWS) := L_VERSION;
      A_VERSION_IS_CURRENT(L_FETCHED_ROWS) := L_VERSION_IS_CURRENT;
      A_EFFECTIVE_FROM(L_FETCHED_ROWS) := L_EFFECTIVE_FROM;
      A_EFFECTIVE_TILL(L_FETCHED_ROWS) := L_EFFECTIVE_TILL;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;
      A_SS(L_FETCHED_ROWS) := L_SS;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_IP_CURSOR);
      END IF;
   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_IP_CURSOR);
       P_IP_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_IP_CURSOR);
      P_IP_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME,
                          ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
              'GetInfoProfileList', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN(P_IP_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(P_IP_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETINFOPROFILELIST;

FUNCTION GETINFOPROFILE
(A_IP                      OUT      UNAPIGEN.VC20_TABLE_TYPE,  
 A_VERSION                 OUT      UNAPIGEN.VC20_TABLE_TYPE,  
 A_VERSION_IS_CURRENT      OUT      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_EFFECTIVE_FROM          OUT      UNAPIGEN.DATE_TABLE_TYPE,  
 A_EFFECTIVE_TILL          OUT      UNAPIGEN.DATE_TABLE_TYPE,  
 A_DESCRIPTION             OUT      UNAPIGEN.VC40_TABLE_TYPE,  
 A_DESCRIPTION2            OUT      UNAPIGEN.VC40_TABLE_TYPE,  
 A_WINSIZE_X               OUT      UNAPIGEN.NUM_TABLE_TYPE,   
 A_WINSIZE_Y               OUT      UNAPIGEN.NUM_TABLE_TYPE,   
 A_IS_PROTECTED            OUT      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_HIDDEN                  OUT      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_IS_TEMPLATE             OUT      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_SC_LC                   OUT      UNAPIGEN.VC2_TABLE_TYPE,   
 A_SC_LC_VERSION           OUT      UNAPIGEN.VC20_TABLE_TYPE,  
 A_INHERIT_AU              OUT      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_IP_CLASS                OUT      UNAPIGEN.VC2_TABLE_TYPE,   
 A_LOG_HS                  OUT      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ALLOW_MODIFY            OUT      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ACTIVE                  OUT      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LC                      OUT      UNAPIGEN.VC2_TABLE_TYPE,   
 A_LC_VERSION              OUT      UNAPIGEN.VC20_TABLE_TYPE,  
 A_SS                      OUT      UNAPIGEN.VC2_TABLE_TYPE,   
 A_NR_OF_ROWS              IN OUT   NUMBER,                    
 A_WHERE_CLAUSE            IN       VARCHAR2)                  
RETURN NUMBER IS

L_IP                    VARCHAR2(20);
L_VERSION               VARCHAR2(20);
L_VERSION_IS_CURRENT    CHAR(1);
L_EFFECTIVE_FROM        TIMESTAMP WITH TIME ZONE;
L_EFFECTIVE_TILL        TIMESTAMP WITH TIME ZONE;
L_DESCRIPTION           VARCHAR2(40);
L_DESCRIPTION2          VARCHAR2(40);
L_WINSIZE_Y             NUMBER(4);
L_WINSIZE_X             NUMBER(4);
L_IS_PROTECTED          CHAR(1);
L_HIDDEN                CHAR(1);
L_IS_TEMPLATE           CHAR(1);
L_SC_LC                 VARCHAR2(2);
L_SC_LC_VERSION         VARCHAR2(20);
L_INHERIT_AU            CHAR(1);
L_IP_CLASS              VARCHAR2(2);
L_LOG_HS                CHAR(1);
L_ALLOW_MODIFY          CHAR(1);
L_ACTIVE                CHAR(1);
L_LC                    VARCHAR2(2);
L_LC_VERSION            VARCHAR2(20);
L_SS                    VARCHAR2(2);
L_IP_CURSOR             INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'WHERE active = ''1'' ORDER BY ip, version'; 
   ELSIF
      UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := 'WHERE version_is_current = ''1'' '||
                        'AND ip = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                        ''' ORDER BY ip, version'; 
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_IP_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT ip, version, nvl(version_is_current,''0''), effective_from, effective_till, description, description2, '||
                   'winsize_x, winsize_y, is_protected, hidden, is_template, sc_lc, sc_lc_version, '||
                   'inherit_au, ip_class, log_hs, allow_modify, active, lc, lc_version, ss '||
                   'FROM dd' || UNAPIGEN.P_DD || '.uvip ' || L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_IP_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_IP_CURSOR, 1, L_IP, 20);
   DBMS_SQL.DEFINE_COLUMN(L_IP_CURSOR, 2, L_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_IP_CURSOR, 3, L_VERSION_IS_CURRENT, 1);
   DBMS_SQL.DEFINE_COLUMN(L_IP_CURSOR, 4, L_EFFECTIVE_FROM);
   DBMS_SQL.DEFINE_COLUMN(L_IP_CURSOR, 5, L_EFFECTIVE_TILL);
   DBMS_SQL.DEFINE_COLUMN(L_IP_CURSOR, 6, L_DESCRIPTION, 40);
   DBMS_SQL.DEFINE_COLUMN(L_IP_CURSOR, 7, L_DESCRIPTION2, 40);
   DBMS_SQL.DEFINE_COLUMN(L_IP_CURSOR, 8, L_WINSIZE_X);
   DBMS_SQL.DEFINE_COLUMN(L_IP_CURSOR, 9, L_WINSIZE_Y);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_IP_CURSOR, 10, L_IS_PROTECTED, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_IP_CURSOR, 11, L_HIDDEN, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_IP_CURSOR, 12, L_IS_TEMPLATE, 1);
   DBMS_SQL.DEFINE_COLUMN(L_IP_CURSOR, 13,  L_SC_LC, 2);
   DBMS_SQL.DEFINE_COLUMN(L_IP_CURSOR, 14,  L_SC_LC_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_IP_CURSOR, 15, L_INHERIT_AU, 1);
   DBMS_SQL.DEFINE_COLUMN(L_IP_CURSOR, 16, L_IP_CLASS, 2);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_IP_CURSOR, 17, L_LOG_HS, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_IP_CURSOR, 18, L_ALLOW_MODIFY, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_IP_CURSOR, 19, L_ACTIVE, 1);
   DBMS_SQL.DEFINE_COLUMN(L_IP_CURSOR, 20, L_LC, 2);
   DBMS_SQL.DEFINE_COLUMN(L_IP_CURSOR, 21, L_LC_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN(L_IP_CURSOR, 22, L_SS, 2);
   L_RESULT := DBMS_SQL.EXECUTE(L_IP_CURSOR);

   L_RESULT := DBMS_SQL.FETCH_ROWS(L_IP_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_IP_CURSOR, 1, L_IP);
      DBMS_SQL.COLUMN_VALUE(L_IP_CURSOR, 2, L_VERSION);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_IP_CURSOR, 3, L_VERSION_IS_CURRENT);
      DBMS_SQL.COLUMN_VALUE(L_IP_CURSOR, 4, L_EFFECTIVE_FROM);
      DBMS_SQL.COLUMN_VALUE(L_IP_CURSOR, 5, L_EFFECTIVE_TILL);
      DBMS_SQL.COLUMN_VALUE(L_IP_CURSOR, 6, L_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE(L_IP_CURSOR, 7, L_DESCRIPTION2);
      DBMS_SQL.COLUMN_VALUE(L_IP_CURSOR, 8, L_WINSIZE_X);
      DBMS_SQL.COLUMN_VALUE(L_IP_CURSOR, 9, L_WINSIZE_Y);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_IP_CURSOR, 10, L_IS_PROTECTED);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_IP_CURSOR, 11, L_HIDDEN);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_IP_CURSOR, 12, L_IS_TEMPLATE);
      DBMS_SQL.COLUMN_VALUE(L_IP_CURSOR, 13, L_SC_LC);
      DBMS_SQL.COLUMN_VALUE(L_IP_CURSOR, 14, L_SC_LC_VERSION);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_IP_CURSOR, 15, L_INHERIT_AU);
      DBMS_SQL.COLUMN_VALUE(L_IP_CURSOR, 16, L_IP_CLASS);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_IP_CURSOR, 17, L_LOG_HS);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_IP_CURSOR, 18, L_ALLOW_MODIFY);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_IP_CURSOR, 19, L_ACTIVE);
      DBMS_SQL.COLUMN_VALUE(L_IP_CURSOR, 20, L_LC);
      DBMS_SQL.COLUMN_VALUE(L_IP_CURSOR, 21, L_LC_VERSION);
      DBMS_SQL.COLUMN_VALUE(L_IP_CURSOR, 22, L_SS);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_IP(L_FETCHED_ROWS) := L_IP;
      A_VERSION(L_FETCHED_ROWS) := L_VERSION;
      A_VERSION_IS_CURRENT(L_FETCHED_ROWS) := L_VERSION_IS_CURRENT;
      A_EFFECTIVE_FROM(L_FETCHED_ROWS) := L_EFFECTIVE_FROM;
      A_EFFECTIVE_TILL(L_FETCHED_ROWS) := L_EFFECTIVE_TILL;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;
      A_DESCRIPTION2(L_FETCHED_ROWS) := L_DESCRIPTION2;
      A_WINSIZE_X(L_FETCHED_ROWS) := L_WINSIZE_X;
      A_WINSIZE_Y(L_FETCHED_ROWS) := L_WINSIZE_Y;
      A_IS_PROTECTED(L_FETCHED_ROWS) := L_IS_PROTECTED;
      A_HIDDEN(L_FETCHED_ROWS) := L_HIDDEN;
      A_IS_TEMPLATE(L_FETCHED_ROWS) := L_IS_TEMPLATE;
      A_SC_LC(L_FETCHED_ROWS) := L_SC_LC;
      A_SC_LC_VERSION(L_FETCHED_ROWS) := L_SC_LC_VERSION;
      A_INHERIT_AU(L_FETCHED_ROWS) := L_INHERIT_AU;
      A_IP_CLASS(L_FETCHED_ROWS) := L_IP_CLASS;
      A_LOG_HS(L_FETCHED_ROWS) := L_LOG_HS;
      A_ALLOW_MODIFY(L_FETCHED_ROWS) := L_ALLOW_MODIFY;
      A_ACTIVE(L_FETCHED_ROWS) := L_ACTIVE;
      A_LC(L_FETCHED_ROWS) := L_LC;
      A_LC_VERSION(L_FETCHED_ROWS) := L_LC_VERSION;
      A_SS(L_FETCHED_ROWS) := L_SS;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_IP_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_IP_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
              'GetInfoprofile', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN(L_IP_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(L_IP_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETINFOPROFILE;

FUNCTION GETIPINFOFIELD
(A_IP            OUT      UNAPIGEN.VC20_TABLE_TYPE,  
 A_VERSION       OUT      UNAPIGEN.VC20_TABLE_TYPE,  
 A_IE            OUT      UNAPIGEN.VC20_TABLE_TYPE,  
 A_IE_VERSION    OUT      UNAPIGEN.VC20_TABLE_TYPE,  
 A_DESCRIPTION   OUT      UNAPIGEN.VC40_TABLE_TYPE,  
 A_DSP_LEN       OUT      UNAPIGEN.NUM_TABLE_TYPE,   
 A_DSP_TP        OUT      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_DSP_ROWS      OUT      UNAPIGEN.NUM_TABLE_TYPE,   
 A_POS_X         OUT      UNAPIGEN.NUM_TABLE_TYPE,   
 A_POS_Y         OUT      UNAPIGEN.NUM_TABLE_TYPE,   
 A_IS_PROTECTED  OUT      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_MANDATORY     OUT      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_HIDDEN        OUT      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_DEF_VAL_TP    OUT      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_DEF_AU_LEVEL  OUT      UNAPIGEN.VC4_TABLE_TYPE,   
 A_IEVALUE       OUT      UNAPIGEN.VC2000_TABLE_TYPE,
 A_NR_OF_ROWS    IN OUT   NUMBER,                    
 A_WHERE_CLAUSE  IN       VARCHAR2,                  
 A_NEXT_ROWS     IN       NUMBER)                    
RETURN NUMBER IS

L_DESCRIPTION_USE_IE      UNAPIGEN.CHAR1_TABLE_TYPE;
L_DSP_LEN_USE_IE          UNAPIGEN.CHAR1_TABLE_TYPE;
L_DSP_TP_USE_IE           UNAPIGEN.CHAR1_TABLE_TYPE;
L_DSP_ROWS_USE_IE         UNAPIGEN.CHAR1_TABLE_TYPE;

BEGIN


   RETURN (UNAPIIP.GETIPINFOFIELD(
           A_IP,
           A_VERSION,
           A_IE,
           A_IE_VERSION,
           A_DESCRIPTION,
           L_DESCRIPTION_USE_IE,
           A_DSP_LEN,
           L_DSP_LEN_USE_IE,
           A_DSP_TP,
           L_DSP_TP_USE_IE,
           A_DSP_ROWS,
           L_DSP_ROWS_USE_IE,
           A_POS_X,
           A_POS_Y,
           A_IS_PROTECTED,
           A_MANDATORY,
           A_HIDDEN,
           A_DEF_VAL_TP,
           A_DEF_AU_LEVEL,
           A_IEVALUE,
           A_NR_OF_ROWS,
           A_WHERE_CLAUSE,
           A_NEXT_ROWS ));
END GETIPINFOFIELD;

FUNCTION GETIPINFOFIELD
(A_IP            OUT      UNAPIGEN.VC20_TABLE_TYPE,  
 A_VERSION       OUT      UNAPIGEN.VC20_TABLE_TYPE,  
 A_IE            OUT      UNAPIGEN.VC20_TABLE_TYPE,  
 A_IE_VERSION    OUT      UNAPIGEN.VC20_TABLE_TYPE,  
 A_DESCRIPTION   OUT      UNAPIGEN.VC40_TABLE_TYPE,  
 A_DESCRIPTION_USE_IE OUT UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_DSP_LEN       OUT      UNAPIGEN.NUM_TABLE_TYPE,   
 A_DSP_LEN_USE_IE     OUT UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_DSP_TP        OUT      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_DSP_TP_USE_IE      OUT UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_DSP_ROWS      OUT      UNAPIGEN.NUM_TABLE_TYPE,   
 A_DSP_ROWS_USE_IE    OUT UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_POS_X         OUT      UNAPIGEN.NUM_TABLE_TYPE,   
 A_POS_Y         OUT      UNAPIGEN.NUM_TABLE_TYPE,   
 A_IS_PROTECTED  OUT      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_MANDATORY     OUT      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_HIDDEN        OUT      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_DEF_VAL_TP    OUT      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_DEF_AU_LEVEL  OUT      UNAPIGEN.VC4_TABLE_TYPE,   
 A_IEVALUE       OUT      UNAPIGEN.VC2000_TABLE_TYPE,
 A_NR_OF_ROWS    IN OUT   NUMBER,                    
 A_WHERE_CLAUSE  IN       VARCHAR2,                  
 A_NEXT_ROWS     IN       NUMBER)                    
RETURN NUMBER IS

L_IP             VARCHAR2(20);
L_VERSION        VARCHAR2(20);
L_DESCRIPTION    VARCHAR2(40);
L_DESCRIPTION_USE_IE CHAR(1);
L_DSP_TP         CHAR(1);
L_DSP_LEN        NUMBER;
L_DSP_ROWS       NUMBER;
L_IE             VARCHAR2(20);
L_IE_VERSION     VARCHAR2(20);
L_SEQ            NUMBER(5);
L_POS_X          NUMBER(4);
L_POS_Y          NUMBER(4);
L_IS_PROTECTED   CHAR(1);
L_MANDATORY      CHAR(1);
L_HIDDEN         CHAR(1);
L_DEF_VAL_TP     CHAR(1);
L_DEF_AU_LEVEL   VARCHAR2(4);
L_IEVALUE        VARCHAR2(2000);
L_IE_FOUND       BOOLEAN;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_IPIE_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_IPIE_CURSOR);
         P_IPIE_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_IPIE_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN

      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
         L_WHERE_CLAUSE := 'ORDER BY ip, version, seq'; 
      ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
         L_WHERE_CLAUSE := ', dd'||UNAPIGEN.P_DD||'.uvip ip WHERE ip.version_is_current = ''1'' '||
                           'AND ipie.version = ip.version '||
                           'AND ipie.ip = ip.ip '||
                           'AND ipie.ip = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                           ''' ORDER BY ipie.seq';
      ELSE
         L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
      END IF;

      L_SQL_STRING := 'SELECT ipie.ip, ipie.version, ipie.ie, ipie.ie_version, ipie.pos_x, ipie.pos_y, '||
                      'ipie.is_protected, ipie.mandatory, ipie.hidden, ipie.def_val_tp, ' ||
                      'ipie.def_au_level, ipie.ievalue, ipie.dsp_title, ipie.dsp_title_use_ie, ipie.dsp_len, ipie.dsp_rows, ipie.dsp_tp ' ||
                      'FROM dd'||UNAPIGEN.P_DD || '.uvipie ipie ' || L_WHERE_CLAUSE;

      IF P_IPIE_CURSOR IS NULL THEN
         P_IPIE_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;

      DBMS_SQL.PARSE(P_IPIE_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

      DBMS_SQL.DEFINE_COLUMN(P_IPIE_CURSOR, 1, L_IP, 20);
      DBMS_SQL.DEFINE_COLUMN(P_IPIE_CURSOR, 2, L_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(P_IPIE_CURSOR, 3, L_IE, 20);
      DBMS_SQL.DEFINE_COLUMN(P_IPIE_CURSOR, 4, L_IE_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(P_IPIE_CURSOR, 5, L_POS_X);
      DBMS_SQL.DEFINE_COLUMN(P_IPIE_CURSOR, 6, L_POS_Y);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_IPIE_CURSOR, 7, L_IS_PROTECTED, 1);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_IPIE_CURSOR, 8, L_MANDATORY, 1);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_IPIE_CURSOR, 9, L_HIDDEN, 1);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_IPIE_CURSOR, 10, L_DEF_VAL_TP, 1);
      DBMS_SQL.DEFINE_COLUMN(P_IPIE_CURSOR, 11, L_DEF_AU_LEVEL, 4);
      DBMS_SQL.DEFINE_COLUMN(P_IPIE_CURSOR, 12, L_IEVALUE, 2000);
      DBMS_SQL.DEFINE_COLUMN(P_IPIE_CURSOR, 13, L_DESCRIPTION, 40);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_IPIE_CURSOR, 14, L_DESCRIPTION_USE_IE, 1);
      DBMS_SQL.DEFINE_COLUMN(P_IPIE_CURSOR, 15, L_DSP_LEN);
      DBMS_SQL.DEFINE_COLUMN(P_IPIE_CURSOR, 16, L_DSP_ROWS);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_IPIE_CURSOR, 17, L_DSP_TP, 1);
      L_RESULT := DBMS_SQL.EXECUTE(P_IPIE_CURSOR);
   END IF;

   L_RESULT := DBMS_SQL.FETCH_ROWS(P_IPIE_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_IPIE_CURSOR, 1, L_IP);
      DBMS_SQL.COLUMN_VALUE(P_IPIE_CURSOR, 2, L_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_IPIE_CURSOR, 3, L_IE);
      DBMS_SQL.COLUMN_VALUE(P_IPIE_CURSOR, 4, L_IE_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_IPIE_CURSOR, 5, L_POS_X);
      DBMS_SQL.COLUMN_VALUE(P_IPIE_CURSOR, 6, L_POS_Y);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_IPIE_CURSOR, 7, L_IS_PROTECTED);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_IPIE_CURSOR, 8, L_MANDATORY);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_IPIE_CURSOR, 9, L_HIDDEN);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_IPIE_CURSOR, 10, L_DEF_VAL_TP);
      DBMS_SQL.COLUMN_VALUE(P_IPIE_CURSOR, 11, L_DEF_AU_LEVEL);
      DBMS_SQL.COLUMN_VALUE(P_IPIE_CURSOR, 12, L_IEVALUE);
      DBMS_SQL.COLUMN_VALUE(P_IPIE_CURSOR, 13, L_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_IPIE_CURSOR, 14, L_DESCRIPTION_USE_IE);
      DBMS_SQL.COLUMN_VALUE(P_IPIE_CURSOR, 15, L_DSP_LEN);
      DBMS_SQL.COLUMN_VALUE(P_IPIE_CURSOR, 16, L_DSP_ROWS);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_IPIE_CURSOR, 17, L_DSP_TP);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_IP (L_FETCHED_ROWS) := L_IP;
      A_VERSION (L_FETCHED_ROWS) := L_VERSION;
      A_IE (L_FETCHED_ROWS) := L_IE;
      A_IE_VERSION (L_FETCHED_ROWS) := L_IE_VERSION;
      A_POS_X (L_FETCHED_ROWS) := L_POS_X;
      A_POS_Y (L_FETCHED_ROWS) := L_POS_Y;
      A_IS_PROTECTED (L_FETCHED_ROWS) := L_IS_PROTECTED;
      A_MANDATORY (L_FETCHED_ROWS) := L_MANDATORY;
      A_HIDDEN (L_FETCHED_ROWS) := L_HIDDEN;
      A_DEF_VAL_TP (L_FETCHED_ROWS) := L_DEF_VAL_TP;
      A_DEF_AU_LEVEL (L_FETCHED_ROWS) := L_DEF_AU_LEVEL;
      A_IEVALUE (L_FETCHED_ROWS) := L_IEVALUE;

      A_DESCRIPTION(L_FETCHED_ROWS) :=  L_DESCRIPTION;
      A_DESCRIPTION_USE_IE(L_FETCHED_ROWS) :=  L_DESCRIPTION_USE_IE;
      A_DSP_LEN(L_FETCHED_ROWS) :=  L_DSP_LEN;
      A_DSP_TP(L_FETCHED_ROWS) :=  L_DSP_TP;
      A_DSP_ROWS(L_FETCHED_ROWS) :=  L_DSP_ROWS;

      L_DESCRIPTION := NULL;
      L_DSP_TP := NULL;
      L_DSP_LEN := NULL;
      L_DSP_ROWS := NULL;
      L_SQL_STRING:=   'SELECT dsp_title, dsp_len, dsp_tp, dsp_rows '
                     ||'FROM dd'||UNAPIGEN.P_DD||'.uvie '
                     ||'WHERE version = NVL(UNAPIGEN.UseVersion(''ie'',:l_ie,:l_ie_version), '
                     ||                    'UNAPIGEN.UseVersion(''ie'',:l_ie,''*'')) '
                     ||'AND ie = :l_ie';
      BEGIN
         EXECUTE IMMEDIATE L_SQL_STRING 
         INTO L_DESCRIPTION, L_DSP_LEN, L_DSP_TP, L_DSP_ROWS 
         USING L_IE, L_IE_VERSION, L_IE, L_IE;
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            
            NULL;
      END;

      L_IE_FOUND := SQL%FOUND;
      IF NOT L_IE_FOUND  THEN
         L_DESCRIPTION := L_IE;
      END IF;

      
      
      IF NVL(A_DESCRIPTION_USE_IE(L_FETCHED_ROWS), '1') = '1' THEN
         A_DESCRIPTION(L_FETCHED_ROWS) :=  L_DESCRIPTION;
         A_DESCRIPTION_USE_IE(L_FETCHED_ROWS) := '1';
      ELSE
         A_DESCRIPTION_USE_IE(L_FETCHED_ROWS) := '0';
      END IF;
      IF A_DSP_LEN(L_FETCHED_ROWS) IS NULL THEN
         A_DSP_LEN (L_FETCHED_ROWS) := L_DSP_LEN;
         A_DSP_LEN_USE_IE(L_FETCHED_ROWS) := '1';
      ELSE
         A_DSP_LEN_USE_IE(L_FETCHED_ROWS) := '0';
      END IF;
      IF A_DSP_ROWS(L_FETCHED_ROWS) IS NULL THEN
         A_DSP_ROWS (L_FETCHED_ROWS) := L_DSP_ROWS;
         A_DSP_ROWS_USE_IE(L_FETCHED_ROWS) := '1';
      ELSE
         A_DSP_ROWS_USE_IE(L_FETCHED_ROWS) := '0';
      END IF;
      IF NVL(A_DSP_TP(L_FETCHED_ROWS), ' ') = ' ' THEN
         A_DSP_TP (L_FETCHED_ROWS) := L_DSP_TP;
         A_DSP_TP_USE_IE(L_FETCHED_ROWS) := '1';
      ELSE
         A_DSP_TP_USE_IE(L_FETCHED_ROWS) := '0';
      END IF;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_IPIE_CURSOR);
      END IF;
   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_IPIE_CURSOR);
       P_IPIE_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_IPIE_CURSOR);
      P_IPIE_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;
   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME,
                          ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetIpInfoField', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN(P_IPIE_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(P_IPIE_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETIPINFOFIELD;

FUNCTION DELETEINFOPROFILE
(A_IP                  IN       VARCHAR2,          
 A_VERSION             IN       VARCHAR2,          
 A_MODIFY_REASON       IN       VARCHAR2)          
RETURN NUMBER IS

L_IP_CURSOR    INTEGER;
L_ALLOW_MODIFY CHAR(1);
L_ACTIVE       CHAR(1);
L_LC           CHAR(2);
L_LC_VERSION   CHAR(20);
L_SS           VARCHAR2(2);
L_LOG_HS       CHAR(1);

CURSOR L_STIP_CURSOR(C_IP VARCHAR2, C_VERSION VARCHAR2) IS
SELECT UTSTIP.ST, UTSTIP.VERSION, UTST.LOG_HS, UTST.LC, UTST.LC_VERSION, UTST.SS
FROM   UTST, UTSTIP
WHERE  UTSTIP.IP         = C_IP           AND
       UNAPIGEN.USEVERSION('ip',UTSTIP.IP,UTSTIP.IP_VERSION) = C_VERSION      AND
       UTST.ST           = UTSTIP.ST      AND
       UTST.VERSION      = UTSTIP.VERSION;

CURSOR L_RTIP_CURSOR(C_IP VARCHAR2, C_VERSION VARCHAR2) IS
SELECT UTRTIP.RT, UTRTIP.VERSION, UTRT.LOG_HS, UTRT.LC, UTRT.LC_VERSION, UTRT.SS
FROM   UTRT, UTRTIP
WHERE  UTRTIP.IP         = C_IP           AND
       UNAPIGEN.USEVERSION('ip',UTRTIP.IP,UTRTIP.IP_VERSION) = C_VERSION      AND
       UTRT.RT           = UTRTIP.RT      AND
       UTRT.VERSION      = UTRTIP.VERSION;

CURSOR L_PTCELLIP_CURSOR(C_IP VARCHAR2, C_VERSION VARCHAR2) IS
SELECT UTPTCELLIP.PT, UTPTCELLIP.VERSION, UTPT.LOG_HS, UTPT.LC, UTPT.LC_VERSION, UTPT.SS
FROM   UTPT, UTPTCELLIP
WHERE  UTPTCELLIP.IP     = C_IP                AND
       UNAPIGEN.USEVERSION('ip',UTPTCELLIP.IP,UTPTCELLIP.IP_VERSION) = C_VERSION AND
       UTPT.PT           = UTPTCELLIP.PT       AND
       UTPT.VERSION      = UTPTCELLIP.VERSION;

CURSOR L_PTIP_CURSOR(C_IP VARCHAR2, C_VERSION VARCHAR2) IS
SELECT UTPTIP.PT, UTPTIP.VERSION, UTPT.LOG_HS, UTPT.LC, UTPT.LC_VERSION, UTPT.SS
FROM   UTPT, UTPTIP
WHERE  UTPTIP.IP         = C_IP            AND
       UNAPIGEN.USEVERSION('ip',UTPTIP.IP,UTPTIP.IP_VERSION) = C_VERSION AND
       UTPT.PT           = UTPTIP.PT       AND
       UTPT.VERSION      = UTPTIP.VERSION;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_IP, ' ')= ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VERSION, ' ')= ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('ip', A_IP, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                            L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   
   IF UNAPIGEN.ISSYSTEM21CFR11COMPLIANT = UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTALLOWEDIN21CFR11;
      RAISE STPERROR;
   END IF;

   DELETE FROM UTIPAU
   WHERE IP = A_IP
     AND VERSION = A_VERSION;

   DELETE FROM UTIPHS
   WHERE IP = A_IP
     AND VERSION = A_VERSION;

   DELETE FROM UTIPIE
   WHERE IP = A_IP
     AND VERSION = A_VERSION;

   DELETE FROM UTIPIEAU
   WHERE IP = A_IP
     AND VERSION = A_VERSION;

   L_EVENT_TP := 'UsedObjectDeleted';
   L_EV_SEQ_NR := -1;

   FOR ST_REC IN L_STIP_CURSOR(A_IP, A_VERSION)  LOOP
      DELETE FROM UTSTIPAU
      WHERE IP         = A_IP
        AND UNAPIGEN.USEVERSION('ip',IP,IP_VERSION) = A_VERSION
        AND ST         = ST_REC.ST
        AND VERSION    = ST_REC.VERSION;

      DELETE FROM UTSTIP
      WHERE IP         = A_IP
        AND UNAPIGEN.USEVERSION('ip',IP,IP_VERSION) = A_VERSION
        AND ST         = ST_REC.ST
        AND VERSION    = ST_REC.VERSION;

      L_RESULT := UNAPIEV.INSERTEVENT('DeleteInfoProfile', UNAPIGEN.P_EVMGR_NAME, 'ip', 
                                      ST_REC.ST, ST_REC.LC, ST_REC.LC_VERSION, ST_REC.SS, 
                                      L_EVENT_TP, 'version='||ST_REC.VERSION, L_EV_SEQ_NR);
      IF L_RESULT <> 0 THEN
         UNAPIGEN.P_TXN_ERROR := L_RESULT;
         RAISE STPERROR;
      END IF;

      IF ST_REC.LOG_HS = '1' THEN
         INSERT INTO UTSTHS(ST, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                            WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES  (ST_REC.ST, ST_REC.VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 
                  L_EVENT_TP||' '||A_IP||' '||A_VERSION,
                  'info profile "'||A_IP||'" is deleted and removed from sample type <<'||ST_REC.ST||'>>', 
                  CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   END LOOP;

   FOR RT_REC IN L_RTIP_CURSOR(A_IP, A_VERSION)  LOOP
      DELETE FROM UTRTIPAU
      WHERE IP         = A_IP
        AND UNAPIGEN.USEVERSION('ip',IP,IP_VERSION) = A_VERSION
        AND RT         = RT_REC.RT
        AND VERSION    = RT_REC.VERSION;

      DELETE FROM UTRTIP
      WHERE IP         = A_IP
        AND UNAPIGEN.USEVERSION('ip',IP,IP_VERSION) = A_VERSION
        AND RT         = RT_REC.RT
        AND VERSION    = RT_REC.VERSION;

      L_RESULT := UNAPIEV.INSERTEVENT('DeleteInfoProfile', UNAPIGEN.P_EVMGR_NAME, 'ip', 
                                      RT_REC.RT, RT_REC.LC, RT_REC.LC_VERSION, RT_REC.SS, 
                                      L_EVENT_TP, 'version='||RT_REC.VERSION, L_EV_SEQ_NR);
      IF L_RESULT <> 0 THEN
         UNAPIGEN.P_TXN_ERROR := L_RESULT;
         RAISE STPERROR;
      END IF;

      IF RT_REC.LOG_HS = '1' THEN
         INSERT INTO UTRTHS(RT, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                            WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES  (RT_REC.RT, RT_REC.VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 
                  L_EVENT_TP||' '||A_IP||' '||A_VERSION,
                  'info profile "'||A_IP||'" is deleted and removed from request type <<'||RT_REC.RT||'>>', 
                  CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   END LOOP;

   L_EVENT_TP := 'UsedObjectDeleted';
   L_EV_SEQ_NR := -1;
   FOR PT_REC IN L_PTCELLIP_CURSOR(A_IP, A_VERSION) LOOP
      DELETE FROM UTPTCELLIP
      WHERE IP         = A_IP
        AND UNAPIGEN.USEVERSION('ip',IP,IP_VERSION) = A_VERSION
        AND PT         = PT_REC.PT
        AND VERSION    = PT_REC.VERSION;

      L_RESULT := UNAPIEV.INSERTEVENT('DeleteInfoProfile', UNAPIGEN.P_EVMGR_NAME, 'pt', 
                                      PT_REC.PT, PT_REC.LC, PT_REC.LC_VERSION, PT_REC.SS, 
                                      L_EVENT_TP, 'version='||PT_REC.VERSION, L_EV_SEQ_NR);
      IF L_RESULT <> 0 THEN
         UNAPIGEN.P_TXN_ERROR := L_RESULT;
         RAISE STPERROR;
      END IF;

      IF PT_REC.LOG_HS = '1' THEN
         INSERT INTO UTPTHS(PT, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                            WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES  (PT_REC.PT, PT_REC.VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 
                  L_EVENT_TP||' '||A_IP||' '||A_VERSION,
                  'info profile "'||A_IP||'" is deleted and removed from the cells of protocol <<'||PT_REC.PT||'>>', 
                  CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   END LOOP;

   L_EVENT_TP := 'UsedObjectDeleted';
   L_EV_SEQ_NR := -1;
   FOR PT_REC IN L_PTIP_CURSOR(A_IP, A_VERSION) LOOP
      DELETE FROM UTPTIPAU
      WHERE IP         = A_IP
        AND UNAPIGEN.USEVERSION('ip',IP,IP_VERSION) = A_VERSION
        AND PT         = PT_REC.PT
        AND VERSION    = PT_REC.VERSION;

      DELETE FROM UTPTIP
      WHERE IP         = A_IP
        AND UNAPIGEN.USEVERSION('ip',IP,IP_VERSION) = A_VERSION
        AND PT         = PT_REC.PT
        AND VERSION    = PT_REC.VERSION;

      L_RESULT := UNAPIEV.INSERTEVENT('DeleteInfoProfile', UNAPIGEN.P_EVMGR_NAME, 'pt', 
                                      PT_REC.PT, PT_REC.LC, PT_REC.LC_VERSION, PT_REC.SS, 
                                      L_EVENT_TP, 'version='||PT_REC.VERSION, L_EV_SEQ_NR);
      IF L_RESULT <> 0 THEN
         UNAPIGEN.P_TXN_ERROR := L_RESULT;
         RAISE STPERROR;
      END IF;

      IF PT_REC.LOG_HS = '1' THEN
         INSERT INTO UTPTHS(PT, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                            WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES  (PT_REC.PT, PT_REC.VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 
                  L_EVENT_TP||' '||A_IP||' '||A_VERSION,
                  'info profile "'||A_IP||'" is deleted and removed from protocol <<'||PT_REC.PT||'>>', 
                  CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   END LOOP;

   DELETE FROM UTEVTIMED
   WHERE (OBJECT_TP='ip' AND OBJECT_ID=A_IP AND INSTR(EV_DETAILS,'version='||A_VERSION)<>0);

   DELETE FROM UTEVRULESDELAYED
   WHERE (OBJECT_TP='ip' AND OBJECT_ID=A_IP AND INSTR(EV_DETAILS,'version='||A_VERSION)<>0);

   DELETE FROM UTIP
   WHERE IP = A_IP
     AND VERSION = A_VERSION;
   
   L_EVENT_TP := 'ObjectDeleted';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT('DeleteInfoProfile',UNAPIGEN.P_EVMGR_NAME, 'ip', 
                                   A_IP, L_LC, L_LC_VERSION, L_SS, L_EVENT_TP, 'version='||A_VERSION,
                                   L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE <> 1 THEN
        UNAPIGEN.LOGERROR('DeleteInfoProfile', SQLERRM);
      END IF;
      RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'DeleteInfoProfile'));

END DELETEINFOPROFILE;

FUNCTION SAVEINFOPROFILE
(A_IP                      IN       VARCHAR2,          
 A_VERSION                 IN       VARCHAR2,          
 A_VERSION_IS_CURRENT      IN       CHAR,              
 A_EFFECTIVE_FROM          IN       DATE,              
 A_EFFECTIVE_TILL          IN       DATE,              
 A_DESCRIPTION             IN       VARCHAR2,          
 A_DESCRIPTION2            IN       VARCHAR2,          
 A_WINSIZE_X               IN       NUMBER,            
 A_WINSIZE_Y               IN       NUMBER,            
 A_IS_PROTECTED            IN       CHAR,              
 A_HIDDEN                  IN       CHAR,              
 A_IS_TEMPLATE             IN       CHAR,              
 A_SC_LC                   IN       VARCHAR2,          
 A_SC_LC_VERSION           IN       VARCHAR2,          
 A_INHERIT_AU              IN       CHAR,              
 A_IP_CLASS                IN       VARCHAR2,          
 A_LOG_HS                  IN       CHAR,              
 A_LC                      IN       VARCHAR2,          
 A_LC_VERSION              IN       VARCHAR2,          
 A_MODIFY_REASON           IN       VARCHAR2)          
RETURN NUMBER IS

L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);
L_LOG_HS       CHAR(1);
L_ALLOW_MODIFY CHAR(1);
L_ACTIVE       CHAR(1);
L_INSERT       BOOLEAN;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_IP, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   IF NVL(A_IS_TEMPLATE, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_TEMPLATE;
      RAISE STPERROR;
    END IF;

   IF NVL(A_IS_PROTECTED, ' ') NOT IN ('1','0') AND 
      NOT (UNAPIGEN.P_RNDSUITESESSION = '1' AND NVL(A_IS_PROTECTED, ' ') IN ('0', '1', '4', '5')) THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_PROTECTED;
      RAISE STPERROR;
   END IF;

   IF NVL(A_HIDDEN, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_HIDDEN;
      RAISE STPERROR;
   END IF;

   IF NVL(A_LOG_HS, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_LOGHS;
      RAISE STPERROR;
   END IF;

   IF NVL(A_INHERIT_AU, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INHERITAU;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('ip', A_IP, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE = UNAPIGEN.DBERR_NOOBJECT THEN
      L_INSERT := TRUE;
   ELSIF L_RET_CODE = UNAPIGEN.DBERR_SUCCESS THEN
      L_INSERT := FALSE;
   ELSE
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   IF L_INSERT THEN                
      IF NVL(A_LC, ' ') <> ' ' THEN
         L_LC := A_LC;
      END IF;
      IF NVL(A_LC_VERSION, ' ') <> ' ' THEN
         L_LC_VERSION := A_LC_VERSION;
      END IF;
      INSERT INTO UTIP(IP, VERSION, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ, DESCRIPTION, DESCRIPTION2, WINSIZE_X, 
                       WINSIZE_Y, IS_PROTECTED, HIDDEN, IS_TEMPLATE, SC_LC, SC_LC_VERSION, 
                       INHERIT_AU, IP_CLASS, LOG_HS, ALLOW_MODIFY, ACTIVE, LC, LC_VERSION)
      VALUES (A_IP, A_VERSION, A_EFFECTIVE_FROM, A_EFFECTIVE_FROM, A_DESCRIPTION, A_DESCRIPTION2, A_WINSIZE_X, 
              A_WINSIZE_Y, A_IS_PROTECTED, A_HIDDEN, A_IS_TEMPLATE, A_SC_LC, A_SC_LC_VERSION, 
              A_INHERIT_AU, A_IP_CLASS, A_LOG_HS, '#', '0', L_LC, L_LC_VERSION);
      L_EVENT_TP := 'ObjectCreated';
   ELSE                             
      UPDATE UTIP
      SET EFFECTIVE_FROM   = DECODE(EFFECTIVE_TILL, NULL, A_EFFECTIVE_FROM, EFFECTIVE_FROM),
          EFFECTIVE_FROM_TZ = DECODE(EFFECTIVE_TILL, NULL,  DECODE(A_EFFECTIVE_FROM, EFFECTIVE_FROM_TZ, EFFECTIVE_FROM_TZ, A_EFFECTIVE_FROM), EFFECTIVE_FROM_TZ),
          DESCRIPTION  = A_DESCRIPTION,
          DESCRIPTION2 = A_DESCRIPTION2,
          WINSIZE_X    = A_WINSIZE_X,
          WINSIZE_Y    = A_WINSIZE_Y,
          IS_PROTECTED = A_IS_PROTECTED,
          HIDDEN       = A_HIDDEN,
          IS_TEMPLATE  = A_IS_TEMPLATE,
          SC_LC        = A_SC_LC,
          SC_LC_VERSION= A_SC_LC_VERSION,
          INHERIT_AU   = A_INHERIT_AU,
          IP_CLASS     = A_IP_CLASS,
          LOG_HS       = A_LOG_HS,
          ALLOW_MODIFY = '#'
      WHERE IP = A_IP
        AND VERSION = A_VERSION;
      L_EVENT_TP := 'ObjectUpdated';
   END IF;

   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT('SaveInfoProfile', UNAPIGEN.P_EVMGR_NAME, 'ip', 
                                   A_IP, L_LC, L_LC_VERSION, L_SS, L_EVENT_TP, 'version='||A_VERSION,
                                   L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF NVL(L_LOG_HS, ' ') <> A_LOG_HS THEN
      IF A_LOG_HS = '1' THEN
         INSERT INTO UTIPHS (IP, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_IP, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 'History switched ON', 
                 'Audit trail is turned on.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      ELSE
         INSERT INTO UTIPHS (IP, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_IP, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 'History switched OFF', 
                 'Audit trail is turned off.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   END IF;

   IF NVL(L_LOG_HS, ' ') = '1' THEN
      IF L_EVENT_TP = 'ObjectCreated' THEN
         INSERT INTO UTIPHS (IP, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_IP, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'info profile "'||A_IP||'" is created.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                 L_EV_SEQ_NR);
      ELSE
         INSERT INTO UTIPHS (IP, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_IP, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'info profile "'||A_IP||'" is updated.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                 L_EV_SEQ_NR);
      END IF;
   ELSE
      
      
      IF L_EVENT_TP = 'ObjectCreated' THEN
         INSERT INTO UTIPHS (IP, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_IP, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'info profile "'||A_IP||'" is created.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                 L_EV_SEQ_NR);
      END IF;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
        UNAPIGEN.LOGERROR('SaveInfoProfile', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveInfoProfile'));
END SAVEINFOPROFILE;

FUNCTION SAVEIPINFOFIELD
(A_IP            IN       VARCHAR2,                  
 A_VERSION       IN       VARCHAR2,                  
 A_IE            IN       UNAPIGEN.VC20_TABLE_TYPE,  
 A_IE_VERSION    IN       UNAPIGEN.VC20_TABLE_TYPE,  
 A_POS_X         IN       UNAPIGEN.NUM_TABLE_TYPE,   
 A_POS_Y         IN       UNAPIGEN.NUM_TABLE_TYPE,   
 A_IS_PROTECTED  IN       UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_MANDATORY     IN       UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_HIDDEN        IN       UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_DEF_VAL_TP    IN       UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_DEF_AU_LEVEL  IN       UNAPIGEN.VC4_TABLE_TYPE,   
 A_IEVALUE       IN       UNAPIGEN.VC2000_TABLE_TYPE,
 A_NR_OF_ROWS    IN       NUMBER,                    
 A_NEXT_ROWS     IN       NUMBER,                     
 A_MODIFY_REASON IN       VARCHAR2)                  
RETURN NUMBER IS

L_DSP_TITLE      UNAPIGEN.VC40_TABLE_TYPE;
L_DSP_LEN        UNAPIGEN.NUM_TABLE_TYPE;
L_DSP_ROWS       UNAPIGEN.NUM_TABLE_TYPE;
L_DSP_TP         UNAPIGEN.CHAR1_TABLE_TYPE;

L_DSP_TITLE_USE_IE      UNAPIGEN.CHAR1_TABLE_TYPE;
L_DSP_LEN_USE_IE        UNAPIGEN.CHAR1_TABLE_TYPE;
L_DSP_ROWS_USE_IE       UNAPIGEN.CHAR1_TABLE_TYPE;
L_DSP_TP_USE_IE         UNAPIGEN.CHAR1_TABLE_TYPE;


BEGIN

   FOR L_X IN 1..A_NR_OF_ROWS LOOP
      L_DSP_TITLE(L_X):= NULL;
      L_DSP_LEN(L_X):= NULL;
      L_DSP_ROWS(L_X):= NULL;
      L_DSP_TP(L_X):= NULL;
      L_DSP_TITLE_USE_IE(L_X):= '1';
      L_DSP_LEN_USE_IE(L_X):= '1';
      L_DSP_ROWS_USE_IE(L_X):= '1';
      L_DSP_TP_USE_IE(L_X):= '1';
   END LOOP;

   RETURN(UNAPIIP.SAVEIPINFOFIELD( 
         A_IP,
         A_VERSION,
         A_IE,
         A_IE_VERSION,
         A_POS_X,
         A_POS_Y,
         A_IS_PROTECTED,
         A_MANDATORY,
         A_HIDDEN,
         L_DSP_TITLE,
         L_DSP_TITLE_USE_IE,
         L_DSP_LEN,
         L_DSP_LEN_USE_IE,
         L_DSP_ROWS,
         L_DSP_ROWS_USE_IE,
         L_DSP_TP,
         L_DSP_TP_USE_IE,
         A_DEF_VAL_TP,
         A_DEF_AU_LEVEL,
         A_IEVALUE,
         A_NR_OF_ROWS,
         A_NEXT_ROWS,
         A_MODIFY_REASON ));
END SAVEIPINFOFIELD;

FUNCTION SAVEIPINFOFIELD
(A_IP            IN       VARCHAR2,                  
 A_VERSION       IN       VARCHAR2,                  
 A_IE            IN       UNAPIGEN.VC20_TABLE_TYPE,  
 A_IE_VERSION    IN       UNAPIGEN.VC20_TABLE_TYPE,  
 A_POS_X         IN       UNAPIGEN.NUM_TABLE_TYPE,   
 A_POS_Y         IN       UNAPIGEN.NUM_TABLE_TYPE,   
 A_IS_PROTECTED  IN       UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_MANDATORY     IN       UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_HIDDEN        IN       UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_DSP_TITLE     IN       UNAPIGEN.VC40_TABLE_TYPE,  
 A_DSP_LEN       IN       UNAPIGEN.NUM_TABLE_TYPE,   
 A_DSP_ROWS      IN       UNAPIGEN.NUM_TABLE_TYPE,   
 A_DSP_TP        IN       UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_DEF_VAL_TP    IN       UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_DEF_AU_LEVEL  IN       UNAPIGEN.VC4_TABLE_TYPE,   
 A_IEVALUE       IN       UNAPIGEN.VC2000_TABLE_TYPE,
 A_NR_OF_ROWS    IN       NUMBER,                    
 A_NEXT_ROWS     IN       NUMBER,                     
 A_MODIFY_REASON IN       VARCHAR2)                  
RETURN NUMBER IS

L_DSP_TITLE_USE_IE      UNAPIGEN.CHAR1_TABLE_TYPE;
L_DSP_LEN_USE_IE        UNAPIGEN.CHAR1_TABLE_TYPE;
L_DSP_ROWS_USE_IE       UNAPIGEN.CHAR1_TABLE_TYPE;
L_DSP_TP_USE_IE         UNAPIGEN.CHAR1_TABLE_TYPE;

BEGIN

   FOR L_X IN 1..A_NR_OF_ROWS LOOP
      L_DSP_TITLE_USE_IE(L_X):= '0';
      L_DSP_LEN_USE_IE(L_X):= '0';
      L_DSP_ROWS_USE_IE(L_X):= '0';
      L_DSP_TP_USE_IE(L_X):= '0';
   END LOOP;

   RETURN(UNAPIIP.SAVEIPINFOFIELD( 
         A_IP,
         A_VERSION,
         A_IE,
         A_IE_VERSION,
         A_POS_X,
         A_POS_Y,
         A_IS_PROTECTED,
         A_MANDATORY,
         A_HIDDEN,
         A_DSP_TITLE,
         L_DSP_TITLE_USE_IE,
         A_DSP_LEN,
         L_DSP_LEN_USE_IE,
         A_DSP_ROWS,
         L_DSP_ROWS_USE_IE,
         A_DSP_TP,
         L_DSP_TP_USE_IE,
         A_DEF_VAL_TP,
         A_DEF_AU_LEVEL,
         A_IEVALUE,
         A_NR_OF_ROWS,
         A_NEXT_ROWS,
         A_MODIFY_REASON ));
END SAVEIPINFOFIELD;

FUNCTION SAVEIPINFOFIELD
(A_IP            IN       VARCHAR2,                  
 A_VERSION       IN       VARCHAR2,                  
 A_IE            IN       UNAPIGEN.VC20_TABLE_TYPE,  
 A_IE_VERSION    IN       UNAPIGEN.VC20_TABLE_TYPE,  
 A_POS_X         IN       UNAPIGEN.NUM_TABLE_TYPE,   
 A_POS_Y         IN       UNAPIGEN.NUM_TABLE_TYPE,   
 A_IS_PROTECTED  IN       UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_MANDATORY     IN       UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_HIDDEN        IN       UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_DSP_TITLE     IN       UNAPIGEN.VC40_TABLE_TYPE,  
 A_DSP_TITLE_USE_IE IN    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_DSP_LEN       IN       UNAPIGEN.NUM_TABLE_TYPE,   
 A_DSP_LEN_USE_IE   IN    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_DSP_ROWS      IN       UNAPIGEN.NUM_TABLE_TYPE,   
 A_DSP_ROWS_USE_IE  IN    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_DSP_TP        IN       UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_DSP_TP_USE_IE    IN    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_DEF_VAL_TP    IN       UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_DEF_AU_LEVEL  IN       UNAPIGEN.VC4_TABLE_TYPE,   
 A_IEVALUE       IN       UNAPIGEN.VC2000_TABLE_TYPE,
 A_NR_OF_ROWS    IN       NUMBER,                    
 A_NEXT_ROWS     IN       NUMBER,                     
 A_MODIFY_REASON IN       VARCHAR2)                  
RETURN NUMBER IS

L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);
L_LOG_HS       CHAR(1);
L_ALLOW_MODIFY CHAR(1);
L_ACTIVE       CHAR(1);
L_DEF_AU_LEVEL VARCHAR2(4);
L_SEQ_NO       NUMBER;

L_DSP_TITLE    VARCHAR2(40);
L_DSP_LEN      NUMBER;
L_DSP_ROWS     NUMBER;
L_DSP_TP       CHAR(1);


BEGIN

   L_SQLERRM := NULL;
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_IP, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   IF NVL(A_NEXT_ROWS, 0) = 0 THEN
      IF NVL(P_SAVEIPIE_CALLS, 0) <> 0 THEN
         L_SQLERRM := 'SaveIpInfoField termination call never called for previous method sheet ! (a_next_rows=-1) a_next_rows='||
                      TO_CHAR(A_NEXT_ROWS);
         RAISE STPERROR;
      END IF;
      P_SAVEIPIE_CALLS := 1;
   ELSIF NVL(A_NEXT_ROWS, 0) = -1 THEN
      P_SAVEIPIE_CALLS := NVL(P_SAVEIPIE_CALLS, 0) + 1;      
   ELSIF NVL(A_NEXT_ROWS, 0) = 1 THEN
      IF NVL(P_SAVEIPIE_CALLS, 0) = 0 THEN   
         L_SQLERRM := 'SaveIpInfoField startup call never called ! (a_next_rows=0)';
         RAISE STPERROR;   
      END IF;
      IF NVL(UNAPIGEN.P_TXN_LEVEL, 0) <= 1 THEN   
         L_SQLERRM := 'SaveIpInfoField called with a_next_rows=1 in a non MST transaction !';
         RAISE STPERROR;   
      END IF;
      P_SAVEIPIE_CALLS := NVL(P_SAVEIPIE_CALLS, 0) + 1;      
   ELSE
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NEXTROWS;
      RAISE STPERROR;
   END IF;         
   IF P_SAVEIPIE_CALLS = 1 THEN
      P_SAVEIPIE_TR_SEQ := UNAPIGEN.P_TR_SEQ;
   ELSE
      IF UNAPIGEN.P_TR_SEQ <> P_SAVEIPIE_TR_SEQ THEN
         L_SQLERRM := 'Successive calls of SaveIpInfoField not in the same transaction !';
         RAISE STPERROR;   
      END IF;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('ip', A_IP, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                            L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTIP
   SET ALLOW_MODIFY = '#'
   WHERE IP = A_IP
     AND VERSION = A_VERSION;
   
   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR ;
   END IF;

   
   IF NVL(P_SAVEIPIE_CALLS, 0) = 1 THEN
      DELETE UTIPIE
      WHERE IP = A_IP
        AND VERSION = A_VERSION;
   END IF;

   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      IF NVL(A_IE(L_SEQ_NO), ' ') = ' ' THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
      END IF;

      IF NVL(A_HIDDEN(L_SEQ_NO), '0') NOT IN ('2','1','0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_HIDDEN;
         RAISE STPERROR;
      END IF;

      IF NVL(A_MANDATORY(L_SEQ_NO), '0') NOT IN ('2','1','0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_MANDATORY;
         RAISE STPERROR;
      END IF;

      IF NVL(A_IS_PROTECTED(L_SEQ_NO), '0') NOT IN ('2','1','0') AND 
         NOT (UNAPIGEN.P_RNDSUITESESSION = '1' AND NVL(A_IS_PROTECTED(L_SEQ_NO), ' ') IN ('0', '1', '2', '4', '5')) THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_PROTECTED;
         RAISE STPERROR;
      END IF;

      IF NVL(A_DEF_VAL_TP(L_SEQ_NO), ' ') NOT IN ('F', 'A', 'S') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_DEFVALUETP;
         RAISE STPERROR;
      ELSIF A_DEF_VAL_TP(L_SEQ_NO) = 'A' THEN
         IF NVL(A_DEF_AU_LEVEL(L_SEQ_NO), ' ') NOT IN ('st', 'sc', 'rq', 'rt', 'pt', 'sd') THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_AULEVEL;
            RAISE STPERROR;
         ELSE
            L_DEF_AU_LEVEL := A_DEF_AU_LEVEL(L_SEQ_NO);
         END IF;
      ELSIF A_DEF_VAL_TP(L_SEQ_NO) = 'S' THEN
         IF A_IEVALUE(L_SEQ_NO) IS NULL THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NODEFVALUE;
            RAISE STPERROR;
         END IF;         
      ELSIF A_DEF_VAL_TP(L_SEQ_NO) = 'F' THEN
         L_DEF_AU_LEVEL := NULL;
      END IF;
      
      
      
      IF NVL(A_DSP_TITLE_USE_IE(L_SEQ_NO), '1') = '1' THEN
         L_DSP_TITLE := ' ';
      ELSE
         L_DSP_TITLE := A_DSP_TITLE(L_SEQ_NO);
      END IF;
      IF NVL(A_DSP_LEN_USE_IE(L_SEQ_NO), '1') = '1' THEN
         L_DSP_LEN := NULL;
      ELSE
         L_DSP_LEN := A_DSP_LEN(L_SEQ_NO);
      END IF;
      IF NVL(A_DSP_ROWS_USE_IE(L_SEQ_NO), '1') = '1' THEN
         L_DSP_ROWS := NULL;
      ELSE
         L_DSP_ROWS := A_DSP_ROWS(L_SEQ_NO);
      END IF;
      IF NVL(A_DSP_TP_USE_IE(L_SEQ_NO), '1') = '1' THEN
         L_DSP_TP := ' ';
      ELSE
         L_DSP_TP := A_DSP_TP(L_SEQ_NO);
      END IF;

      INSERT INTO UTIPIE (IP, VERSION, IE, IE_VERSION, SEQ, POS_X, POS_Y, IS_PROTECTED, 
                          MANDATORY, HIDDEN, DEF_VAL_TP, DEF_AU_LEVEL, IEVALUE, DSP_TITLE, DSP_TITLE_USE_IE, DSP_LEN, DSP_ROWS, DSP_TP)
      SELECT  A_IP, A_VERSION, A_IE(L_SEQ_NO), A_IE_VERSION(L_SEQ_NO), NVL(MAX(SEQ),0)+1, 
              A_POS_X(L_SEQ_NO), A_POS_Y(L_SEQ_NO), A_IS_PROTECTED(L_SEQ_NO),
              A_MANDATORY(L_SEQ_NO), A_HIDDEN(L_SEQ_NO),
              A_DEF_VAL_TP(L_SEQ_NO), L_DEF_AU_LEVEL, A_IEVALUE(L_SEQ_NO),
              L_DSP_TITLE, A_DSP_TITLE_USE_IE(L_SEQ_NO), L_DSP_LEN, L_DSP_ROWS, L_DSP_TP
      FROM UTIPIE 
      WHERE IP = A_IP
        AND VERSION = A_VERSION;
   END LOOP;

   
   IF NVL(A_NEXT_ROWS, 0) = -1 THEN 
      
      
      DELETE FROM UTIPIEAU
      WHERE IP = A_IP
        AND VERSION = A_VERSION
        AND (IE, NVL(IE_VERSION, '~Current~')) NOT IN (SELECT IE, NVL(IE_VERSION, '~Current~') 
                                                         FROM UTIPIE 
                                                        WHERE IP = A_IP 
                                                          AND VERSION = A_VERSION);

      
      L_EVENT_TP := 'UsedObjectsUpdated';
      L_EV_SEQ_NR := -1;
      L_RESULT := UNAPIEV.INSERTEVENT('SaveIpInfofield', UNAPIGEN.P_EVMGR_NAME, 'ip', 
                                      A_IP, L_LC, L_LC_VERSION, L_SS, L_EVENT_TP, 
                                      'version='||A_VERSION, L_EV_SEQ_NR);
      IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS  THEN
         UNAPIGEN.P_TXN_ERROR := L_RESULT;
         RAISE STPERROR;
      END IF;

      IF L_LOG_HS = '1' THEN
         INSERT INTO UTIPHS (IP, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_IP, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'info profile "'||A_IP||'" info fields are updated.', 
                 CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   END IF;
   
   
   IF NVL(A_NEXT_ROWS, 0) = -1 THEN
      
      P_SAVEIPIE_CALLS := 0;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveIpInfoField', SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('SaveIpInfoField',L_SQLERRM);   
   END IF;
   
   P_SAVEIPIE_CALLS := 0;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveIpInfoField'));
END SAVEIPINFOFIELD;




BEGIN
   P_IP_CURSOR := NULL;
   P_SAVEIPIE_CALLS := 0 ;   
END UNAPIIP;
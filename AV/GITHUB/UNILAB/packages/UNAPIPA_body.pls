PACKAGE BODY unapipa AS

L_SQLERRM         VARCHAR2(255);
L_SQL_STRING      VARCHAR2(10000);
L_WHERE_CLAUSE    VARCHAR2(1000);
L_EVENT_TP        UTEV.EV_TP%TYPE;
L_TIMED_EVENT_TP  UTEVTIMED.EV_TP%TYPE;
L_RET_CODE        NUMBER;
L_RESULT          NUMBER;
L_FETCHED_ROWS    NUMBER;
L_EV_SEQ_NR       NUMBER;
L_EV_DETAILS      VARCHAR2(255);
L_ERRM            VARCHAR2(255);
STPERROR          EXCEPTION;

FUNCTION GETVERSION
   RETURN VARCHAR2
IS
BEGIN
   RETURN('06.07.00.00_00.13');
EXCEPTION
   WHEN OTHERS THEN
      RETURN (NULL);
END GETVERSION;

FUNCTION GETSCPARAMETER
(A_SC               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PG               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PGNODE           OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_PA               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PANODE           OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_PR_VERSION       OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_DESCRIPTION      OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_VALUE_F          OUT     UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_VALUE_S          OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_UNIT             OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_EXEC_START_DATE  OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_EXEC_END_DATE    OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_EXECUTOR         OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PLANNED_EXECUTOR OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_MANUALLY_ENTERED OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ASSIGN_DATE      OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_ASSIGNED_BY      OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_MANUALLY_ADDED   OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_FORMAT           OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_TD_INFO          OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_TD_INFO_UNIT     OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_CONFIRM_UID      OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ALLOW_ANY_ME     OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_DELAY            OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_DELAY_UNIT       OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_MIN_NR_RESULTS   OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_CALC_METHOD      OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_CALC_CF          OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_ALARM_ORDER      OUT     UNAPIGEN.VC3_TABLE_TYPE,   
 A_VALID_SPECSA     OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_VALID_SPECSB     OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_VALID_SPECSC     OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_VALID_LIMITSA    OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_VALID_LIMITSB    OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_VALID_LIMITSC    OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_VALID_TARGETA    OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_VALID_TARGETB    OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_VALID_TARGETC    OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LOG_EXCEPTIONS   OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_REANALYSIS       OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_PA_CLASS         OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_LOG_HS           OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LOG_HS_DETAILS   OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ALLOW_MODIFY     OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ACTIVE           OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LC               OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_LC_VERSION       OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SS               OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_NR_OF_ROWS       IN OUT  NUMBER,                    
 A_WHERE_CLAUSE     IN      VARCHAR2)                  
RETURN NUMBER IS

L_SC               VARCHAR2(20);
L_PG               VARCHAR2(20);
L_PGNODE           NUMBER(9);
L_PA               VARCHAR2(20);
L_PANODE           NUMBER(9);
L_PR_VERSION       VARCHAR2(20);
L_DESCRIPTION      VARCHAR2(40);
L_VALUE_F          FLOAT;
L_VALUE_S          VARCHAR2(40);
L_UNIT             VARCHAR2(20);
L_EXEC_START_DATE  TIMESTAMP WITH TIME ZONE;
L_EXEC_END_DATE    TIMESTAMP WITH TIME ZONE;
L_EXECUTOR         VARCHAR2(20);
L_PLANNED_EXECUTOR VARCHAR2(20);
L_MANUALLY_ENTERED CHAR(1);
L_ASSIGN_DATE      TIMESTAMP WITH TIME ZONE;
L_ASSIGNED_BY      VARCHAR2(20);
L_MANUALLY_ADDED   CHAR(1);
L_FORMAT           VARCHAR2(40);
L_TD_INFO          NUMBER(3);
L_TD_INFO_UNIT     VARCHAR2(20);
L_CONFIRM_UID      CHAR(1);
L_ALLOW_ANY_ME     CHAR(1);
L_DELAY            NUMBER(3);
L_DELAY_UNIT       VARCHAR2(20);
L_MIN_NR_RESULTS   NUMBER(3);
L_CALC_METHOD      CHAR(1);
L_CALC_CF          VARCHAR2(20);
L_ALARM_ORDER      VARCHAR2(3);
L_VALID_SPECSA     CHAR(1);
L_VALID_SPECSB     CHAR(1);
L_VALID_SPECSC     CHAR(1);
L_VALID_LIMITSA    CHAR(1);
L_VALID_LIMITSB    CHAR(1);
L_VALID_LIMITSC    CHAR(1);
L_VALID_TARGETA    CHAR(1);
L_VALID_TARGETB    CHAR(1);
L_VALID_TARGETC    CHAR(1);
L_LOG_EXCEPTIONS   CHAR(1);
L_REANALYSIS       NUMBER(3);
L_PA_CLASS         VARCHAR2(2);
L_LOG_HS           CHAR(1);
L_LOG_HS_DETAILS   CHAR(1);
L_ALLOW_MODIFY     CHAR(1);
L_ACTIVE           CHAR(1);
L_LC               VARCHAR2(2);
L_LC_VERSION       VARCHAR2(20);
L_SS               VARCHAR2(2);
L_PA_CURSOR        INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS, 0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      RETURN(UNAPIGEN.DBERR_WHERECLAUSE);
   ELSIF
      UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := 'WHERE sc = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') ||  
                        ''' ORDER BY sc, pgnode, panode';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_PA_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT sc, pg, pgnode, pa, panode, pr_version, description, value_f, '||
                   'value_s, unit, exec_start_date, exec_end_date, executor, '||
                   'planned_executor, manually_entered, assign_date, '||
                   'assigned_by, manually_added, format, td_info, '||
                   'td_info_unit, confirm_uid, allow_any_me, delay, '||
                   'delay_unit, min_nr_results, calc_method, calc_cf, '||
                   'alarm_order, valid_specsa, valid_specsb, valid_specsc, '||
                   'valid_limitsa, valid_limitsb, valid_limitsc, '||
                   'valid_targeta, valid_targetb, valid_targetc, '||
                   'log_exceptions, reanalysis, pa_class, log_hs, log_hs_details, '||
                   'allow_modify, active, lc, lc_version, ss FROM dd' || UNAPIGEN.P_DD ||
                   '.uvscpa '||L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_PA_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 1, L_SC, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 2, L_PG, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 3, L_PGNODE);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 4, L_PA, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 5, L_PANODE);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 6, L_PR_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 7, L_DESCRIPTION, 40);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 8, L_VALUE_F);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 9, L_VALUE_S, 40);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 10, L_UNIT, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 11, L_EXEC_START_DATE);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 12, L_EXEC_END_DATE);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 13, L_EXECUTOR, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 14, L_PLANNED_EXECUTOR, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PA_CURSOR, 15, L_MANUALLY_ENTERED, 1);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 16, L_ASSIGN_DATE);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 17, L_ASSIGNED_BY, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PA_CURSOR, 18, L_MANUALLY_ADDED, 1);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 19, L_FORMAT, 40);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 20, L_TD_INFO);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 21, L_TD_INFO_UNIT,20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PA_CURSOR, 22, L_CONFIRM_UID, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PA_CURSOR, 23, L_ALLOW_ANY_ME, 1);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 24, L_DELAY);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 25, L_DELAY_UNIT, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 26, L_MIN_NR_RESULTS);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PA_CURSOR, 27, L_CALC_METHOD, 1);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 28, L_CALC_CF, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 29, L_ALARM_ORDER, 3);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PA_CURSOR, 30, L_VALID_SPECSA, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PA_CURSOR, 31, L_VALID_SPECSB, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PA_CURSOR, 32, L_VALID_SPECSC, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PA_CURSOR, 33, L_VALID_LIMITSA, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PA_CURSOR, 34, L_VALID_LIMITSB, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PA_CURSOR, 35, L_VALID_LIMITSC, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PA_CURSOR, 36, L_VALID_TARGETA, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PA_CURSOR, 37, L_VALID_TARGETB, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PA_CURSOR, 38, L_VALID_TARGETC, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PA_CURSOR, 39, L_LOG_EXCEPTIONS, 1);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 40, L_REANALYSIS);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 41, L_PA_CLASS, 2);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PA_CURSOR, 42, L_LOG_HS, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PA_CURSOR, 43, L_LOG_HS_DETAILS, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PA_CURSOR, 44, L_ALLOW_MODIFY, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PA_CURSOR, 45, L_ACTIVE, 1);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 46, L_LC, 2);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 47, L_LC_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 48, L_SS, 2);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_PA_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 1, L_SC);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 2, L_PG);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 3, L_PGNODE);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 4, L_PA);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 5, L_PANODE);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 6, L_PR_VERSION);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 7, L_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 8, L_VALUE_F);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 9, L_VALUE_S);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 10, L_UNIT);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 11, L_EXEC_START_DATE);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 12, L_EXEC_END_DATE);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 13, L_EXECUTOR);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 14, L_PLANNED_EXECUTOR);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PA_CURSOR, 15, L_MANUALLY_ENTERED);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 16, L_ASSIGN_DATE);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 17, L_ASSIGNED_BY);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PA_CURSOR, 18, L_MANUALLY_ADDED);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 19, L_FORMAT);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 20, L_TD_INFO);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 21, L_TD_INFO_UNIT);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PA_CURSOR, 22, L_CONFIRM_UID);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PA_CURSOR, 23, L_ALLOW_ANY_ME);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 24, L_DELAY);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 25, L_DELAY_UNIT);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 26, L_MIN_NR_RESULTS);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PA_CURSOR, 27, L_CALC_METHOD);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 28, L_CALC_CF);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 29, L_ALARM_ORDER);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PA_CURSOR, 30, L_VALID_SPECSA);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PA_CURSOR, 31, L_VALID_SPECSB);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PA_CURSOR, 32, L_VALID_SPECSC);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PA_CURSOR, 33, L_VALID_LIMITSA);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PA_CURSOR, 34, L_VALID_LIMITSB);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PA_CURSOR, 35, L_VALID_LIMITSC);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PA_CURSOR, 36, L_VALID_TARGETA);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PA_CURSOR, 37, L_VALID_TARGETB);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PA_CURSOR, 38, L_VALID_TARGETC);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PA_CURSOR, 39, L_LOG_EXCEPTIONS);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 40, L_REANALYSIS);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 41, L_PA_CLASS);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PA_CURSOR, 42, L_LOG_HS);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PA_CURSOR, 43, L_LOG_HS_DETAILS);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PA_CURSOR, 44, L_ALLOW_MODIFY);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PA_CURSOR, 45, L_ACTIVE);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 46, L_LC);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 47, L_LC_VERSION);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 48, L_SS);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_SC(L_FETCHED_ROWS) := L_SC;
      A_PG(L_FETCHED_ROWS) := L_PG;
      A_PGNODE(L_FETCHED_ROWS) := L_PGNODE;
      A_PA(L_FETCHED_ROWS) := L_PA;
      A_PANODE(L_FETCHED_ROWS) := L_PANODE;
      A_PR_VERSION(L_FETCHED_ROWS) := L_PR_VERSION;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;
      A_VALUE_F(L_FETCHED_ROWS) := L_VALUE_F;
      A_VALUE_S(L_FETCHED_ROWS) := L_VALUE_S;
      A_UNIT(L_FETCHED_ROWS) := L_UNIT;
      A_EXEC_START_DATE(L_FETCHED_ROWS) := L_EXEC_START_DATE;
      A_EXEC_END_DATE(L_FETCHED_ROWS) := L_EXEC_END_DATE;
      A_EXECUTOR(L_FETCHED_ROWS) := L_EXECUTOR;
      A_PLANNED_EXECUTOR(L_FETCHED_ROWS) := L_PLANNED_EXECUTOR;
      A_MANUALLY_ENTERED(L_FETCHED_ROWS) := L_MANUALLY_ENTERED;
      A_ASSIGN_DATE(L_FETCHED_ROWS) := L_ASSIGN_DATE;
      A_ASSIGNED_BY(L_FETCHED_ROWS) := L_ASSIGNED_BY;
      A_MANUALLY_ADDED(L_FETCHED_ROWS) := L_MANUALLY_ADDED;
      A_FORMAT(L_FETCHED_ROWS) := L_FORMAT;
      A_TD_INFO(L_FETCHED_ROWS) := L_TD_INFO;
      A_TD_INFO_UNIT(L_FETCHED_ROWS) := L_TD_INFO_UNIT;
      A_CONFIRM_UID(L_FETCHED_ROWS) := L_CONFIRM_UID;
      A_ALLOW_ANY_ME(L_FETCHED_ROWS) := L_ALLOW_ANY_ME;
      A_DELAY(L_FETCHED_ROWS) := L_DELAY;
      A_DELAY_UNIT(L_FETCHED_ROWS) := L_DELAY_UNIT;
      A_MIN_NR_RESULTS(L_FETCHED_ROWS) := L_MIN_NR_RESULTS;
      A_CALC_METHOD(L_FETCHED_ROWS) := L_CALC_METHOD;
      A_CALC_CF(L_FETCHED_ROWS) := L_CALC_CF;
      A_ALARM_ORDER(L_FETCHED_ROWS) := L_ALARM_ORDER;
      A_VALID_SPECSA(L_FETCHED_ROWS) := L_VALID_SPECSA;
      A_VALID_SPECSB(L_FETCHED_ROWS) := L_VALID_SPECSB;
      A_VALID_SPECSC(L_FETCHED_ROWS) := L_VALID_SPECSC;
      A_VALID_LIMITSA(L_FETCHED_ROWS) := L_VALID_LIMITSA;
      A_VALID_LIMITSB(L_FETCHED_ROWS) := L_VALID_LIMITSB;
      A_VALID_LIMITSC(L_FETCHED_ROWS) := L_VALID_LIMITSC;
      A_VALID_TARGETA(L_FETCHED_ROWS) := L_VALID_TARGETA;
      A_VALID_TARGETB(L_FETCHED_ROWS) := L_VALID_TARGETB;
      A_VALID_TARGETC(L_FETCHED_ROWS) := L_VALID_TARGETC;
      A_LOG_EXCEPTIONS(L_FETCHED_ROWS) := L_LOG_EXCEPTIONS;
      A_REANALYSIS(L_FETCHED_ROWS) := L_REANALYSIS;
      A_PA_CLASS(L_FETCHED_ROWS) := L_PA_CLASS;
      A_LOG_HS(L_FETCHED_ROWS) := L_LOG_HS;
      A_LOG_HS_DETAILS(L_FETCHED_ROWS) := L_LOG_HS_DETAILS;
      A_ALLOW_MODIFY(L_FETCHED_ROWS) := L_ALLOW_MODIFY;
      A_ACTIVE(L_FETCHED_ROWS) := L_ACTIVE;
      A_LC(L_FETCHED_ROWS) := L_LC;
      A_LC_VERSION(L_FETCHED_ROWS) := L_LC_VERSION;
      A_SS(L_FETCHED_ROWS) := L_SS;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_PA_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_PA_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetScParameter', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN(L_PA_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(L_PA_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETSCPARAMETER;

FUNCTION GETSCREPARAMETER
(A_SC               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PG               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PGNODE           OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_PA               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PANODE           OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_PR_VERSION       OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_DESCRIPTION      OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_VALUE_F          OUT     UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_VALUE_S          OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_UNIT             OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_EXEC_START_DATE  OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_EXEC_END_DATE    OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_EXECUTOR         OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PLANNED_EXECUTOR OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_MANUALLY_ENTERED OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ASSIGN_DATE      OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_ASSIGNED_BY      OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_MANUALLY_ADDED   OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_FORMAT           OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_TD_INFO          OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_TD_INFO_UNIT     OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_CONFIRM_UID      OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ALLOW_ANY_ME     OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_DELAY            OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_DELAY_UNIT       OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_MIN_NR_RESULTS   OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_CALC_METHOD      OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_CALC_CF          OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_ALARM_ORDER      OUT     UNAPIGEN.VC3_TABLE_TYPE,   
 A_VALID_SPECSA     OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_VALID_SPECSB     OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_VALID_SPECSC     OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_VALID_LIMITSA    OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_VALID_LIMITSB    OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_VALID_LIMITSC    OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_VALID_TARGETA    OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_VALID_TARGETB    OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_VALID_TARGETC    OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LOG_EXCEPTIONS   OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_REANALYSIS       OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_PA_CLASS         OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_LOG_HS           OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LOG_HS_DETAILS   OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ALLOW_MODIFY     OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ACTIVE           OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LC               OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_LC_VERSION       OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SS               OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_NR_OF_ROWS       IN OUT  NUMBER,                    
 A_WHERE_CLAUSE     IN      VARCHAR2)                  
RETURN NUMBER IS

L_SC               VARCHAR2(20);
L_PG               VARCHAR2(20);
L_PGNODE           NUMBER(9);
L_PA               VARCHAR2(20);
L_PANODE           NUMBER(9);
L_PR_VERSION       VARCHAR2(20);
L_DESCRIPTION      VARCHAR2(40);
L_VALUE_F          FLOAT;
L_VALUE_S          VARCHAR2(40);
L_UNIT             VARCHAR2(20);
L_EXEC_START_DATE  TIMESTAMP WITH TIME ZONE;
L_EXEC_END_DATE    TIMESTAMP WITH TIME ZONE;
L_EXECUTOR         VARCHAR2(20);
L_PLANNED_EXECUTOR VARCHAR2(20);
L_MANUALLY_ENTERED CHAR(1);
L_ASSIGN_DATE      TIMESTAMP WITH TIME ZONE;
L_ASSIGNED_BY      VARCHAR2(20);
L_MANUALLY_ADDED   CHAR(1);
L_FORMAT           VARCHAR2(40);
L_TD_INFO          NUMBER(3);
L_TD_INFO_UNIT     VARCHAR2(20);
L_CONFIRM_UID      CHAR(1);
L_ALLOW_ANY_ME     CHAR(1);
L_DELAY            NUMBER(3);
L_DELAY_UNIT       VARCHAR2(20);
L_MIN_NR_RESULTS   NUMBER(3);
L_CALC_METHOD      CHAR(1);
L_CALC_CF          VARCHAR2(20);
L_ALARM_ORDER      VARCHAR2(3);
L_VALID_SPECSA     CHAR(1);
L_VALID_SPECSB     CHAR(1);
L_VALID_SPECSC     CHAR(1);
L_VALID_LIMITSA    CHAR(1);
L_VALID_LIMITSB    CHAR(1);
L_VALID_LIMITSC    CHAR(1);
L_VALID_TARGETA    CHAR(1);
L_VALID_TARGETB    CHAR(1);
L_VALID_TARGETC    CHAR(1);
L_LOG_EXCEPTIONS   CHAR(1);
L_REANALYSIS       NUMBER(3);
L_PA_CLASS         VARCHAR2(2);
L_LOG_HS           CHAR(1);
L_LOG_HS_DETAILS   CHAR(1);
L_ALLOW_MODIFY     CHAR(1);
L_ACTIVE           CHAR(1);
L_LC               VARCHAR2(2);
L_LC_VERSION       VARCHAR2(20);
L_SS               VARCHAR2(2);
L_PA_CURSOR        INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS, 0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      RETURN(UNAPIGEN.DBERR_WHERECLAUSE);
   ELSIF
      UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := 'WHERE sc = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') ||  
                        ''' ORDER BY sc, pgnode, panode, reanalysis';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_PA_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT sc, pg, pgnode, pa, panode, pr_version, description, value_f, '||
                   'value_s, unit, exec_start_date, exec_end_date, executor, '||
                   'planned_executor, manually_entered, assign_date, '||
                   'assigned_by, manually_added, format, td_info, '||
                   'td_info_unit, confirm_uid, allow_any_me, delay, '||
                   'delay_unit, min_nr_results, calc_method, calc_cf, '||
                   'alarm_order, valid_specsa, valid_specsb, valid_specsc, '||
                   'valid_limitsa, valid_limitsb, valid_limitsc, '||
                   'valid_targeta, valid_targetb, valid_targetc, '||
                   'log_exceptions, reanalysis, pa_class, log_hs, log_hs_details, '||
                   'allow_modify, active, lc, lc_version, ss FROM dd' || UNAPIGEN.P_DD ||
                   '.uvrscpa '||L_WHERE_CLAUSE;


   DBMS_SQL.PARSE(L_PA_CURSOR, L_SQL_STRING, DBMS_SQL.V7);  
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 1, L_SC, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 2, L_PG, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 3, L_PGNODE);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 4, L_PA, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 5, L_PANODE);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 6, L_PR_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 7, L_DESCRIPTION, 40);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 8, L_VALUE_F);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 9, L_VALUE_S, 40);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 10, L_UNIT, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 11, L_EXEC_START_DATE);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 12, L_EXEC_END_DATE);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 13, L_EXECUTOR, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 14, L_PLANNED_EXECUTOR, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PA_CURSOR, 15, L_MANUALLY_ENTERED, 1);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 16, L_ASSIGN_DATE);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 17, L_ASSIGNED_BY, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PA_CURSOR, 18, L_MANUALLY_ADDED, 1);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 19, L_FORMAT, 40);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 20, L_TD_INFO);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 21, L_TD_INFO_UNIT,20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PA_CURSOR, 22, L_CONFIRM_UID, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PA_CURSOR, 23, L_ALLOW_ANY_ME, 1);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 24, L_DELAY);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 25, L_DELAY_UNIT, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 26, L_MIN_NR_RESULTS);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PA_CURSOR, 27, L_CALC_METHOD, 1);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 28, L_CALC_CF, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 29, L_ALARM_ORDER, 3);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PA_CURSOR, 30, L_VALID_SPECSA, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PA_CURSOR, 31, L_VALID_SPECSB, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PA_CURSOR, 32, L_VALID_SPECSC, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PA_CURSOR, 33, L_VALID_LIMITSA, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PA_CURSOR, 34, L_VALID_LIMITSB, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PA_CURSOR, 35, L_VALID_LIMITSC, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PA_CURSOR, 36, L_VALID_TARGETA, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PA_CURSOR, 37, L_VALID_TARGETB, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PA_CURSOR, 38, L_VALID_TARGETC, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PA_CURSOR, 39, L_LOG_EXCEPTIONS, 1);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 40, L_REANALYSIS);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 41, L_PA_CLASS, 2);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PA_CURSOR, 42, L_LOG_HS, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PA_CURSOR, 43, L_LOG_HS_DETAILS, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PA_CURSOR, 44, L_ALLOW_MODIFY, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PA_CURSOR, 45, L_ACTIVE, 1);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 46, L_LC, 2);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 47, L_LC_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 48, L_SS, 2);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_PA_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 1, L_SC);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 2, L_PG);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 3, L_PGNODE);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 4, L_PA);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 5, L_PANODE);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 6, L_PR_VERSION);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 7, L_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 8, L_VALUE_F);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 9, L_VALUE_S);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 10, L_UNIT);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 11, L_EXEC_START_DATE);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 12, L_EXEC_END_DATE);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 13, L_EXECUTOR);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 14, L_PLANNED_EXECUTOR);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PA_CURSOR, 15, L_MANUALLY_ENTERED);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 16, L_ASSIGN_DATE);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 17, L_ASSIGNED_BY);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PA_CURSOR, 18, L_MANUALLY_ADDED);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 19, L_FORMAT);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 20, L_TD_INFO);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 21, L_TD_INFO_UNIT);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PA_CURSOR, 22, L_CONFIRM_UID);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PA_CURSOR, 23, L_ALLOW_ANY_ME);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 24, L_DELAY);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 25, L_DELAY_UNIT);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 26, L_MIN_NR_RESULTS);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PA_CURSOR, 27, L_CALC_METHOD);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 28, L_CALC_CF);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 29, L_ALARM_ORDER);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PA_CURSOR, 30, L_VALID_SPECSA);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PA_CURSOR, 31, L_VALID_SPECSB);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PA_CURSOR, 32, L_VALID_SPECSC);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PA_CURSOR, 33, L_VALID_LIMITSA);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PA_CURSOR, 34, L_VALID_LIMITSB);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PA_CURSOR, 35, L_VALID_LIMITSC);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PA_CURSOR, 36, L_VALID_TARGETA);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PA_CURSOR, 37, L_VALID_TARGETB);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PA_CURSOR, 38, L_VALID_TARGETC);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PA_CURSOR, 39, L_LOG_EXCEPTIONS);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 40, L_REANALYSIS);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 41, L_PA_CLASS);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PA_CURSOR, 42, L_LOG_HS);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PA_CURSOR, 43, L_LOG_HS_DETAILS);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PA_CURSOR, 44, L_ALLOW_MODIFY);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PA_CURSOR, 45, L_ACTIVE);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 46, L_LC);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 47, L_LC_VERSION);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 48, L_SS);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_SC(L_FETCHED_ROWS) := L_SC;
      A_PG(L_FETCHED_ROWS) := L_PG;
      A_PGNODE(L_FETCHED_ROWS) := L_PGNODE;
      A_PA(L_FETCHED_ROWS) := L_PA;
      A_PANODE(L_FETCHED_ROWS) := L_PANODE;
      A_PR_VERSION(L_FETCHED_ROWS) := L_PR_VERSION;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;
      A_VALUE_F(L_FETCHED_ROWS) := L_VALUE_F;
      A_VALUE_S(L_FETCHED_ROWS) := L_VALUE_S;
      A_UNIT(L_FETCHED_ROWS) := L_UNIT;
      A_EXEC_START_DATE(L_FETCHED_ROWS) := L_EXEC_START_DATE;
      A_EXEC_END_DATE(L_FETCHED_ROWS) := L_EXEC_END_DATE;
      A_EXECUTOR(L_FETCHED_ROWS) := L_EXECUTOR;
      A_PLANNED_EXECUTOR(L_FETCHED_ROWS) := L_PLANNED_EXECUTOR;
      A_MANUALLY_ENTERED(L_FETCHED_ROWS) := L_MANUALLY_ENTERED;
      A_ASSIGN_DATE(L_FETCHED_ROWS) := L_ASSIGN_DATE;
      A_ASSIGNED_BY(L_FETCHED_ROWS) := L_ASSIGNED_BY;
      A_MANUALLY_ADDED(L_FETCHED_ROWS) := L_MANUALLY_ADDED;
      A_FORMAT(L_FETCHED_ROWS) := L_FORMAT;
      A_TD_INFO(L_FETCHED_ROWS) := L_TD_INFO;
      A_TD_INFO_UNIT(L_FETCHED_ROWS) := L_TD_INFO_UNIT;
      A_CONFIRM_UID(L_FETCHED_ROWS) := L_CONFIRM_UID;
      A_ALLOW_ANY_ME(L_FETCHED_ROWS) := L_ALLOW_ANY_ME;
      A_DELAY(L_FETCHED_ROWS) := L_DELAY;
      A_DELAY_UNIT(L_FETCHED_ROWS) := L_DELAY_UNIT;
      A_MIN_NR_RESULTS(L_FETCHED_ROWS) := L_MIN_NR_RESULTS;
      A_CALC_METHOD(L_FETCHED_ROWS) := L_CALC_METHOD;
      A_CALC_CF(L_FETCHED_ROWS) := L_CALC_CF;
      A_ALARM_ORDER(L_FETCHED_ROWS) := L_ALARM_ORDER;
      A_VALID_SPECSA(L_FETCHED_ROWS) := L_VALID_SPECSA;
      A_VALID_SPECSB(L_FETCHED_ROWS) := L_VALID_SPECSB;
      A_VALID_SPECSC(L_FETCHED_ROWS) := L_VALID_SPECSC;
      A_VALID_LIMITSA(L_FETCHED_ROWS) := L_VALID_LIMITSA;
      A_VALID_LIMITSB(L_FETCHED_ROWS) := L_VALID_LIMITSB;
      A_VALID_LIMITSC(L_FETCHED_ROWS) := L_VALID_LIMITSC;
      A_VALID_TARGETA(L_FETCHED_ROWS) := L_VALID_TARGETA;
      A_VALID_TARGETB(L_FETCHED_ROWS) := L_VALID_TARGETB;
      A_VALID_TARGETC(L_FETCHED_ROWS) := L_VALID_TARGETC;
      A_LOG_EXCEPTIONS(L_FETCHED_ROWS) := L_LOG_EXCEPTIONS;
      A_REANALYSIS(L_FETCHED_ROWS) := L_REANALYSIS;
      A_PA_CLASS(L_FETCHED_ROWS) := L_PA_CLASS;
      A_LOG_HS(L_FETCHED_ROWS) := L_LOG_HS;
      A_LOG_HS_DETAILS(L_FETCHED_ROWS) := L_LOG_HS_DETAILS;
      A_ALLOW_MODIFY(L_FETCHED_ROWS) := L_ALLOW_MODIFY;
      A_ACTIVE(L_FETCHED_ROWS) := L_ACTIVE;
      A_LC(L_FETCHED_ROWS) := L_LC;
      A_LC_VERSION(L_FETCHED_ROWS) := L_LC_VERSION;
      A_SS(L_FETCHED_ROWS) := L_SS;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_PA_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_PA_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
             'GetScReParameter', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN(L_PA_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(L_PA_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETSCREPARAMETER;


FUNCTION INITSCPARAMETER
(A_PR               IN      VARCHAR2,                  
 A_PR_VERSION_IN    IN      VARCHAR2,                  
 A_SEQ              IN      NUMBER,                    
 A_SC               IN      VARCHAR2,                  
 A_PG               IN      VARCHAR2,                  
 A_PGNODE           IN      NUMBER,                    
 A_PP_VERSION       IN      VARCHAR2,                  
 A_PP_KEY1          IN      VARCHAR2,                  
 A_PP_KEY2          IN      VARCHAR2,                  
 A_PP_KEY3          IN      VARCHAR2,                  
 A_PP_KEY4          IN      VARCHAR2,                  
 A_PP_KEY5          IN      VARCHAR2,                  
 A_PR_VERSION       OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_DESCRIPTION      OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_VALUE_F          OUT     UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_VALUE_S          OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_UNIT             OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_EXEC_START_DATE  OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_EXEC_END_DATE    OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_EXECUTOR         OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PLANNED_EXECUTOR OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_MANUALLY_ENTERED OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ASSIGN_DATE      OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_ASSIGNED_BY      OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_MANUALLY_ADDED   OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_FORMAT           OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_TD_INFO          OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_TD_INFO_UNIT     OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_CONFIRM_UID      OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ALLOW_ANY_ME     OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_DELAY            OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_DELAY_UNIT       OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_MIN_NR_RESULTS   OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_CALC_METHOD      OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_CALC_CF          OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_ALARM_ORDER      OUT     UNAPIGEN.VC3_TABLE_TYPE,   
 A_VALID_SPECSA     OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_VALID_SPECSB     OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_VALID_SPECSC     OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_VALID_LIMITSA    OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_VALID_LIMITSB    OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_VALID_LIMITSC    OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_VALID_TARGETA    OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_VALID_TARGETB    OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_VALID_TARGETC    OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_MT               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_MT_VERSION       OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_MT_NR_MEASUR     OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_LOG_EXCEPTIONS   OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_REANALYSIS       OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_PA_CLASS         OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_LOG_HS           OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LOG_HS_DETAILS   OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LC               OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_LC_VERSION       OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_NR_OF_ROWS       IN OUT  NUMBER)                    
RETURN NUMBER IS

L_PR_VERSION_IN               VARCHAR2(20);
L_PR_VERSION                  VARCHAR2(20);
L_DESCRIPTION                 VARCHAR2(40);
L_VALUE_F                     FLOAT;
L_VALUE_S                     VARCHAR2(40);
L_UNIT                        VARCHAR2(20);
L_EXEC_START_DATE             TIMESTAMP WITH TIME ZONE;
L_EXEC_END_DATE               TIMESTAMP WITH TIME ZONE;
L_EXECUTOR                    VARCHAR2(20);
L_PLANNED_EXECUTOR            VARCHAR2(20);
L_MANUALLY_ENTERED            CHAR(1);
L_ASSIGN_DATE                 TIMESTAMP WITH TIME ZONE;
L_ASSIGNED_BY                 VARCHAR2(20);
L_MANUALLY_ADDED              CHAR(1);
L_FORMAT                      VARCHAR2(40);
L_TD_INFO                     NUMBER(3);
L_TD_INFO_UNIT                VARCHAR2(20);
L_CONFIRM_UID                 CHAR(1);
L_ALLOW_ANY_ME                CHAR(1);
L_DELAY                       NUMBER(3);
L_DELAY_UNIT                  VARCHAR2(20);
L_MIN_NR_RESULTS              NUMBER(3);
L_CALC_METHOD                 CHAR(1);
L_CALC_CF                     VARCHAR2(20);
L_ALARM_ORDER                 VARCHAR2(3);
L_VALID_SPECSA                CHAR(1);
L_VALID_SPECSB                CHAR(1);
L_VALID_SPECSC                CHAR(1);
L_VALID_LIMITSA               CHAR(1);
L_VALID_LIMITSB               CHAR(1);
L_VALID_LIMITSC               CHAR(1);
L_VALID_TARGETA               CHAR(1);
L_VALID_TARGETB               CHAR(1);
L_VALID_TARGETC               CHAR(1);
L_MT                          VARCHAR2(20);
L_MT_VERSION                  VARCHAR2(20);
L_MT_NR_MEASUR                NUMBER;
L_LOG_EXCEPTIONS              CHAR(1);
L_REANALYSIS                  NUMBER(3);
L_PA_CLASS                    VARCHAR2(2);
L_LOG_HS                      CHAR(1);
L_LOG_HS_DETAILS              CHAR(1);
L_LC                          VARCHAR2(2);
L_LC_VERSION                  VARCHAR2(20);
L_CUR_DELAY_UNIT              VARCHAR2(20);
L_CUR_DELAY                   NUMBER(3);
L_CUR_UNIT                    VARCHAR2(20);
L_CUR_FORMAT                  VARCHAR2(40);
L_INHERIT_UNIT                VARCHAR2(20);
L_INHERIT_FORMAT              VARCHAR2(40);
L_ALLOW_ADD                   CHAR(1);
L_NR_MEASUR                   NUMBER(3);
L_PP_VERSION                  VARCHAR2(20);
L_PP_KEY1                     VARCHAR2(20);
L_PP_KEY2                     VARCHAR2(20);
L_PP_KEY3                     VARCHAR2(20);
L_PP_KEY4                     VARCHAR2(20);
L_PP_KEY5                     VARCHAR2(20);


L_ADD_MISSING_PR              CHAR(1);
L_REMOVE_EXTRA_PR             CHAR(1);
L_SUPPLIER                    VARCHAR2(20);
L_CUSTOMER                    VARCHAR2(20);
L_ST                          VARCHAR2(20);
L_ST_VERSION                  VARCHAR2(20);
L_COUNT_PR                    INTEGER;
L_PR_DEFINITION_EXISTS        BOOLEAN;

CURSOR L_PR_CURSOR (C_PR VARCHAR2, C_PR_VERSION VARCHAR2) IS
   SELECT VERSION, DESCRIPTION, UNIT, FORMAT, TD_INFO, TD_INFO_UNIT, CONFIRM_UID,
          ALLOW_ANY_MT, DELAY, DELAY_UNIT, MIN_NR_RESULTS, CALC_METHOD, CALC_CF,
          ALARM_ORDER, LOG_EXCEPTIONS, PR_CLASS, SC_LC, SC_LC_VERSION
   FROM UTPR
   WHERE PR = C_PR
   AND VERSION = C_PR_VERSION;





CURSOR L_PPPR_CURSOR (C_PP VARCHAR2, 
                      C_PP_VERSION VARCHAR2, 
                      C_PP_KEY1 VARCHAR2, 
                      C_PP_KEY2 VARCHAR2, 
                      C_PP_KEY3 VARCHAR2, 
                      C_PP_KEY4 VARCHAR2, 
                      C_PP_KEY5 VARCHAR2, 
                      C_PR VARCHAR2,
                      C_PR_VERSION VARCHAR2,
                      C_SEQ NUMBER) IS
   SELECT NR_MEASUR, UNIT, FORMAT, DELAY, DELAY_UNIT, NVL(ALLOW_ADD,'1'), MT, MT_VERSION, 
          MT_NR_MEASUR
   FROM UTPPPR
   WHERE PP = C_PP
   AND VERSION = C_PP_VERSION
   AND PP_KEY1 = C_PP_KEY1
   AND PP_KEY2 = C_PP_KEY2
   AND PP_KEY3 = C_PP_KEY3
   AND PP_KEY4 = C_PP_KEY4
   AND PP_KEY5 = C_PP_KEY5
   AND PR = C_PR
   AND UNAPIGEN.VALIDATEVERSION('pr', PR, PR_VERSION) = C_PR_VERSION
   AND SEQ = DECODE(C_SEQ, 0, SEQ, NULL, SEQ, C_SEQ)
   ORDER BY SEQ;

CURSOR L_OBJECTS_CURSOR (A_OBJECT_TYPE VARCHAR2) IS
   SELECT LOG_HS, LOG_HS_DETAILS
   FROM UTOBJECTS
   WHERE OBJECT=A_OBJECT_TYPE;
   
CURSOR L_SCPG_CURSOR(C_SC VARCHAR2, C_PG VARCHAR2, C_PGNODE NUMBER) IS
   SELECT PP_VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5 
   FROM UTSCPG
   WHERE SC = C_SC
   AND PG = C_PG
   AND PGNODE = C_PGNODE;






















CURSOR L_ST_CURSOR(C_SC          VARCHAR2) IS
   SELECT ST, ST_VERSION
   FROM UTSC
   WHERE SC = C_SC;   
   
CURSOR L_IIVALUE_CURSOR (C_II VARCHAR2) IS
   SELECT SUBSTR(IIVALUE,1,20) IIVALUE
   FROM UTSCII
   WHERE SC = A_SC
     AND II = C_II
ORDER BY ICNODE, IINODE;













BEGIN

   IF NVL(A_NR_OF_ROWS, 0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_PR, ' ') = ' ' OR
      NVL(A_SC, ' ') = ' ' OR
      NVL(A_PG, ' ') = ' ' THEN
      RETURN(UNAPIGEN.DBERR_NOOBJID);
   END IF;

   
   BEGIN
      L_PR_VERSION_IN := UNAPIGEN.VALIDATEVERSION('pr', A_PR, A_PR_VERSION_IN);
      L_PR_DEFINITION_EXISTS := TRUE;
   EXCEPTION
   WHEN OTHERS THEN
      
      
      
      
      SELECT COUNT(*)
      INTO L_COUNT_PR
      FROM UTPR
      WHERE PR = A_PR;
      
      IF L_COUNT_PR >= 1 THEN
         RAISE;
      END IF;
      L_PR_DEFINITION_EXISTS := FALSE;
      
   END;
   

   L_VALUE_F := NULL;
   L_VALUE_S := NULL;
   L_EXEC_START_DATE := NULL;
   L_EXEC_END_DATE := NULL;
   L_EXECUTOR := NULL;
   L_PLANNED_EXECUTOR := NULL;
   L_MANUALLY_ENTERED := '0';
   L_ASSIGN_DATE := CURRENT_TIMESTAMP;
   L_ASSIGNED_BY := UNAPIGEN.P_USER;
   L_MANUALLY_ADDED := '1';
   L_VALID_SPECSA := NULL;
   L_VALID_SPECSB := NULL;
   L_VALID_SPECSC := NULL;
   L_VALID_LIMITSA := NULL;
   L_VALID_LIMITSB := NULL;
   L_VALID_LIMITSC := NULL;
   L_VALID_TARGETA := NULL;
   L_VALID_TARGETB := NULL;
   L_VALID_TARGETC := NULL;
   L_MT := NULL;
   L_MT_VERSION := NULL;
   L_MT_NR_MEASUR := NULL;
   L_REANALYSIS := 0;
   L_PA_CLASS := NULL;

   
   L_LOG_HS := '0';
   L_LOG_HS_DETAILS := '0';
   OPEN L_OBJECTS_CURSOR('pa');
   FETCH L_OBJECTS_CURSOR INTO L_LOG_HS, L_LOG_HS_DETAILS;
   CLOSE L_OBJECTS_CURSOR;

   
   
   
   IF A_PR = '/' OR 
      L_PR_DEFINITION_EXISTS = FALSE THEN
      L_PR_VERSION := UNVERSION.P_NO_VERSION;
      L_DESCRIPTION := A_PR;
      L_UNIT := '';
      L_FORMAT := UNAPIGEN.P_DEFAULT_FORMAT;
      L_TD_INFO := 0;
      L_TD_INFO_UNIT := 'DD';
      L_CONFIRM_UID := '0';
      L_ALLOW_ANY_ME := '1';
      L_DELAY := 0;
      L_DELAY_UNIT := 'DD';
      L_MIN_NR_RESULTS := 1;
      L_CALC_METHOD := 'N';
      L_CALC_CF := '';
      L_ALARM_ORDER := 'abc';
      L_MT := NULL;
      L_MT_NR_MEASUR := NULL;
      L_LOG_EXCEPTIONS := '0';
      L_PA_CLASS := '';
      L_LC := '';
      L_LC_VERSION := '';
   ELSE

      OPEN L_PR_CURSOR(A_PR, L_PR_VERSION_IN);
      FETCH L_PR_CURSOR
      INTO L_PR_VERSION, L_DESCRIPTION, L_UNIT, L_FORMAT, L_TD_INFO, L_TD_INFO_UNIT,
           L_CONFIRM_UID, L_ALLOW_ANY_ME, L_DELAY, L_DELAY_UNIT, L_MIN_NR_RESULTS,
           L_CALC_METHOD, L_CALC_CF, L_ALARM_ORDER, L_LOG_EXCEPTIONS, L_PA_CLASS,
           L_LC, L_LC_VERSION;

      IF L_PR_CURSOR%NOTFOUND THEN
         CLOSE L_PR_CURSOR;
         RETURN(UNAPIGEN.DBERR_NOOBJECT);
      END IF;

      CLOSE L_PR_CURSOR;
   END IF;

   
   
   
   
   
   
   
   L_PP_VERSION := NULL;
   BEGIN
      OPEN L_SCPG_CURSOR(A_SC, A_PG, A_PGNODE);
      FETCH L_SCPG_CURSOR 
      INTO L_PP_VERSION, L_PP_KEY1, L_PP_KEY2, L_PP_KEY3, L_PP_KEY4, L_PP_KEY5;
      IF L_SCPG_CURSOR%NOTFOUND THEN
         CLOSE L_SCPG_CURSOR;
         RAISE NO_DATA_FOUND;
      END IF;
      CLOSE L_SCPG_CURSOR;
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      L_PP_KEY1 := A_PP_KEY1;
      L_PP_KEY2 := A_PP_KEY2;
      L_PP_KEY3 := A_PP_KEY3;
      L_PP_KEY4 := A_PP_KEY4;
      L_PP_KEY5 := A_PP_KEY5;
      L_PP_VERSION := UNAPIGEN.VALIDATEPPVERSION(A_PG, A_PP_VERSION, L_PP_KEY1, L_PP_KEY2, L_PP_KEY3, L_PP_KEY4, L_PP_KEY5);
      IF L_PP_VERSION IS NULL THEN
         L_PP_VERSION := UNVERSION.P_NO_VERSION;
      END IF;
   END;
   
   OPEN L_PPPR_CURSOR(A_PG, L_PP_VERSION, L_PP_KEY1, L_PP_KEY2, L_PP_KEY3, L_PP_KEY4, L_PP_KEY5,
                      A_PR, L_PR_VERSION_IN, A_SEQ);
   FETCH L_PPPR_CURSOR
   INTO L_NR_MEASUR, L_CUR_UNIT, L_CUR_FORMAT, L_CUR_DELAY, L_CUR_DELAY_UNIT, L_ALLOW_ADD, L_MT, 
        L_MT_VERSION, L_MT_NR_MEASUR;
   
   IF L_PPPR_CURSOR%FOUND THEN
      IF (NVL(L_CUR_DELAY_UNIT, 'DD') <> 'DD' OR
          NVL(L_CUR_DELAY,0) <> 0) AND
         NVL(L_CUR_DELAY_UNIT, ' ') <> ' ' THEN
         L_DELAY_UNIT := L_CUR_DELAY_UNIT;
         L_DELAY := L_CUR_DELAY;
      END IF;      
   ELSE
       
      L_NR_MEASUR := 1;
      L_ALLOW_ADD := '1';
   END IF;
   CLOSE L_PPPR_CURSOR;







































































        IF L_CUR_UNIT IS NOT NULL THEN
            L_UNIT := L_CUR_UNIT;
        END IF;
        IF L_CUR_FORMAT IS NOT NULL THEN
           L_FORMAT := L_CUR_FORMAT;
        END IF;


   
   
   
   FOR L_ROWS IN 1..L_NR_MEASUR LOOP
      A_PR_VERSION(L_ROWS) := L_PR_VERSION;
      A_DESCRIPTION(L_ROWS) := L_DESCRIPTION;
      A_VALUE_F(L_ROWS) := L_VALUE_F;
      A_VALUE_S(L_ROWS) := L_VALUE_S;
      A_UNIT(L_ROWS) := L_UNIT;
      A_EXEC_START_DATE(L_ROWS) := L_EXEC_START_DATE;
      A_EXEC_END_DATE(L_ROWS) := L_EXEC_END_DATE;
      A_EXECUTOR(L_ROWS) := L_EXECUTOR;
      A_PLANNED_EXECUTOR(L_ROWS) := L_PLANNED_EXECUTOR;
      A_MANUALLY_ENTERED(L_ROWS) := L_MANUALLY_ENTERED;
      A_ASSIGN_DATE(L_ROWS) := L_ASSIGN_DATE;
      A_ASSIGNED_BY(L_ROWS) := L_ASSIGNED_BY;
      A_MANUALLY_ADDED(L_ROWS) := L_MANUALLY_ADDED;
      A_FORMAT(L_ROWS) := L_FORMAT;
      A_TD_INFO(L_ROWS) := L_TD_INFO;
      A_TD_INFO_UNIT(L_ROWS) := L_TD_INFO_UNIT;
      A_CONFIRM_UID(L_ROWS) := L_CONFIRM_UID;
      A_ALLOW_ANY_ME(L_ROWS) := L_ALLOW_ANY_ME;
      A_DELAY(L_ROWS) := L_DELAY;
      A_DELAY_UNIT(L_ROWS) := L_DELAY_UNIT;
      A_MIN_NR_RESULTS(L_ROWS) := L_MIN_NR_RESULTS;
      A_CALC_METHOD(L_ROWS) := L_CALC_METHOD;
      A_CALC_CF(L_ROWS) := L_CALC_CF;
      A_ALARM_ORDER(L_ROWS) := L_ALARM_ORDER;
      A_VALID_SPECSA(L_ROWS) := L_VALID_SPECSA;
      A_VALID_SPECSB(L_ROWS) := L_VALID_SPECSB;
      A_VALID_SPECSC(L_ROWS) := L_VALID_SPECSC;
      A_VALID_LIMITSA(L_ROWS) := L_VALID_LIMITSA;
      A_VALID_LIMITSB(L_ROWS) := L_VALID_LIMITSB;
      A_VALID_LIMITSC(L_ROWS) := L_VALID_LIMITSC;
      A_VALID_TARGETA(L_ROWS) := L_VALID_TARGETA;
      A_VALID_TARGETB(L_ROWS) := L_VALID_TARGETB;
      A_VALID_TARGETC(L_ROWS) := L_VALID_TARGETC;
      A_MT(L_ROWS) := L_MT;
      A_MT_VERSION(L_ROWS) := L_MT_VERSION;
      A_MT_NR_MEASUR(L_ROWS) := L_MT_NR_MEASUR;
      A_LOG_EXCEPTIONS(L_ROWS) := L_LOG_EXCEPTIONS;
      A_REANALYSIS(L_ROWS) := L_REANALYSIS;
      A_PA_CLASS(L_ROWS) := L_PA_CLASS;
      A_LOG_HS(L_ROWS) := L_LOG_HS;
      A_LOG_HS_DETAILS(L_ROWS) := L_LOG_HS_DETAILS;
      A_LC(L_ROWS) := L_LC;
      A_LC_VERSION(L_ROWS) := L_LC_VERSION;
   END LOOP;

   
   
   
   
   IF L_NR_MEASUR > A_NR_OF_ROWS THEN
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
             'InitScParameter','a_nr_of_rows ('||A_NR_OF_ROWS||
             ') too small for required Parameter initialisation');
   END IF;

   A_NR_OF_ROWS := L_NR_MEASUR;
   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
              'InitScParameter', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF L_PPPR_CURSOR%ISOPEN THEN
         CLOSE L_PPPR_CURSOR;
      END IF;
      IF L_PR_CURSOR%ISOPEN THEN
         CLOSE L_PR_CURSOR;
      END IF;
      IF L_OBJECTS_CURSOR%ISOPEN THEN
         CLOSE L_OBJECTS_CURSOR;
      END IF;      
      IF L_SCPG_CURSOR%ISOPEN THEN
         CLOSE L_SCPG_CURSOR;
      END IF;






      IF L_ST_CURSOR%ISOPEN THEN
         CLOSE L_ST_CURSOR;
      END IF;      
      IF L_IIVALUE_CURSOR%ISOPEN THEN
         CLOSE L_IIVALUE_CURSOR;
      END IF;      
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END INITSCPARAMETER;

FUNCTION GETSCPARESULT
(A_SC               IN      VARCHAR2,               
 A_PG               IN OUT  VARCHAR2,               
 A_PGNODE           IN OUT  NUMBER,                 
 A_PA               IN OUT  VARCHAR2,               
 A_PANODE           IN OUT  NUMBER,                 
 A_VALUE_F          OUT     FLOAT,                  
 A_VALUE_S          OUT     VARCHAR2)               
RETURN NUMBER IS

L_PG               VARCHAR2(20);
L_PGNODE           NUMBER(9);
L_PA               VARCHAR2(20);
L_PANODE           NUMBER(9);
L_VALUE_F          FLOAT;
L_VALUE_S          VARCHAR2(40);
L_PA_CURSOR        INTEGER;

BEGIN

   IF NVL(A_SC, ' ') = ' ' THEN
      RETURN(UNAPIGEN.DBERR_NOOBJID);
   END IF;

   L_WHERE_CLAUSE := 'WHERE sc = ''' || REPLACE(A_SC, '''', '''''') || '''';  

   IF NVL(A_PG, ' ') <> ' ' THEN
      L_WHERE_CLAUSE := L_WHERE_CLAUSE || ' AND pg = ''' || REPLACE(A_PG, '''', '''''') || '''';  
   END IF;

   IF NVL(A_PGNODE, 0) <> 0 THEN
      L_WHERE_CLAUSE := L_WHERE_CLAUSE || ' AND pgnode = ' || A_PGNODE;
   END IF;

   IF NVL(A_PA, ' ') <> ' ' THEN
      L_WHERE_CLAUSE := L_WHERE_CLAUSE || ' AND pa = ''' || REPLACE(A_PA, '''', '''''') || '''';  
   END IF;

   IF NVL(A_PANODE, 0) <> 0 THEN
      L_WHERE_CLAUSE := L_WHERE_CLAUSE || ' AND panode = ' || A_PANODE;
   END IF;

   L_WHERE_CLAUSE := L_WHERE_CLAUSE || ' AND exec_end_date IS NOT NULL ' || 
                     'ORDER BY pgnode, panode';

   L_PA_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT pg, pgnode, pa, panode, value_f, value_s ' ||
                   'FROM dd' || UNAPIGEN.P_DD || '.uvscpa '||
                   L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_PA_CURSOR, L_SQL_STRING, DBMS_SQL.V7);  
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 1, L_PG, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 2, L_PGNODE);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 3, L_PA, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 4, L_PANODE);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 5, L_VALUE_F);
   DBMS_SQL.DEFINE_COLUMN(L_PA_CURSOR, 6, L_VALUE_S, 40);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_PA_CURSOR);

   IF L_RESULT <> 0 THEN
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 1, L_PG);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 2, L_PGNODE);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 3, L_PA);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 4, L_PANODE);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 5, L_VALUE_F);
      DBMS_SQL.COLUMN_VALUE(L_PA_CURSOR, 6, L_VALUE_S);
      A_PG := L_PG;
      A_PGNODE := L_PGNODE;
      A_PA := L_PA;
      A_PANODE := L_PANODE;
      A_VALUE_F := L_VALUE_F;
      A_VALUE_S := L_VALUE_S;
   ELSE
      A_VALUE_F := NULL;
      A_VALUE_S := NULL;
   END IF;

   DBMS_SQL.CLOSE_CURSOR(L_PA_CURSOR);

   IF L_RESULT = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
              'GetScPaResult', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN(L_PA_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(L_PA_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETSCPARESULT;

FUNCTION GETSCPASPECS
(A_SPEC_SET         IN      CHAR,                       
 A_SC               OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PG               OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PGNODE           OUT     UNAPIGEN.LONG_TABLE_TYPE,   
 A_PA               OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PANODE           OUT     UNAPIGEN.LONG_TABLE_TYPE,   
 A_LOW_LIMIT        OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_HIGH_LIMIT       OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_LOW_SPEC         OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_HIGH_SPEC        OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_LOW_DEV          OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_REL_LOW_DEV      OUT     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_TARGET           OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_HIGH_DEV         OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_REL_HIGH_DEV     OUT     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_NR_OF_ROWS       IN OUT  NUMBER,                     
 A_WHERE_CLAUSE     IN      VARCHAR2)                   
RETURN NUMBER IS

L_SC               VARCHAR2(20);
L_PG               VARCHAR2(20);
L_PGNODE           NUMBER(9);
L_PA               VARCHAR2(20);
L_PANODE           NUMBER(9);
L_LOW_LIMIT        FLOAT;
L_HIGH_LIMIT       FLOAT;
L_LOW_SPEC         FLOAT;
L_HIGH_SPEC        FLOAT;
L_LOW_DEV          FLOAT;
L_REL_LOW_DEV      CHAR(1);
L_TARGET           FLOAT;
L_HIGH_DEV         FLOAT;
L_REL_HIGH_DEV     CHAR(1);
L_SCPASP_CURSOR    INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS, 0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      RETURN(UNAPIGEN.DBERR_WHERECLAUSE);
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   IF NVL(A_SPEC_SET, ' ') NOT IN ('a','b','c') THEN
      RETURN(UNAPIGEN.DBERR_SPECSET);
   END IF;

   L_SCPASP_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT sc, pg, pgnode, pa, panode, low_limit, high_limit, ' ||
                   'low_spec, high_spec, low_dev, rel_low_dev, target, ' ||
                   'high_dev, rel_high_dev FROM dd' || UNAPIGEN.P_DD ||
                   '.uvscpasp' || A_SPEC_SET || ' ' || L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_SCPASP_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   DBMS_SQL.DEFINE_COLUMN(L_SCPASP_CURSOR, 1, L_SC, 20);
   DBMS_SQL.DEFINE_COLUMN(L_SCPASP_CURSOR, 2, L_PG, 20);
   DBMS_SQL.DEFINE_COLUMN(L_SCPASP_CURSOR, 3, L_PGNODE);
   DBMS_SQL.DEFINE_COLUMN(L_SCPASP_CURSOR, 4, L_PA, 20);
   DBMS_SQL.DEFINE_COLUMN(L_SCPASP_CURSOR, 5, L_PANODE);
   DBMS_SQL.DEFINE_COLUMN(L_SCPASP_CURSOR, 6, L_LOW_LIMIT);
   DBMS_SQL.DEFINE_COLUMN(L_SCPASP_CURSOR, 7, L_HIGH_LIMIT);
   DBMS_SQL.DEFINE_COLUMN(L_SCPASP_CURSOR, 8, L_LOW_SPEC);
   DBMS_SQL.DEFINE_COLUMN(L_SCPASP_CURSOR, 9, L_HIGH_SPEC);
   DBMS_SQL.DEFINE_COLUMN(L_SCPASP_CURSOR, 10, L_LOW_DEV);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_SCPASP_CURSOR, 11, L_REL_LOW_DEV, 1);
   DBMS_SQL.DEFINE_COLUMN(L_SCPASP_CURSOR, 12, L_TARGET);
   DBMS_SQL.DEFINE_COLUMN(L_SCPASP_CURSOR, 13, L_HIGH_DEV);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_SCPASP_CURSOR, 14, L_REL_HIGH_DEV, 1);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_SCPASP_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;
      DBMS_SQL.COLUMN_VALUE(L_SCPASP_CURSOR, 1, L_SC);
      DBMS_SQL.COLUMN_VALUE(L_SCPASP_CURSOR, 2, L_PG);
      DBMS_SQL.COLUMN_VALUE(L_SCPASP_CURSOR, 3, L_PGNODE);
      DBMS_SQL.COLUMN_VALUE(L_SCPASP_CURSOR, 4, L_PA);
      DBMS_SQL.COLUMN_VALUE(L_SCPASP_CURSOR, 5, L_PANODE);
      DBMS_SQL.COLUMN_VALUE(L_SCPASP_CURSOR, 6, L_LOW_LIMIT);
      DBMS_SQL.COLUMN_VALUE(L_SCPASP_CURSOR, 7, L_HIGH_LIMIT);
      DBMS_SQL.COLUMN_VALUE(L_SCPASP_CURSOR, 8, L_LOW_SPEC);
      DBMS_SQL.COLUMN_VALUE(L_SCPASP_CURSOR, 9, L_HIGH_SPEC);
      DBMS_SQL.COLUMN_VALUE(L_SCPASP_CURSOR, 10, L_LOW_DEV);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_SCPASP_CURSOR, 11, L_REL_LOW_DEV);
      DBMS_SQL.COLUMN_VALUE(L_SCPASP_CURSOR, 12, L_TARGET);
      DBMS_SQL.COLUMN_VALUE(L_SCPASP_CURSOR, 13, L_HIGH_DEV);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_SCPASP_CURSOR, 14, L_REL_HIGH_DEV);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_SC(L_FETCHED_ROWS) := L_SC;
      A_PG(L_FETCHED_ROWS) := L_PG;
      A_PGNODE(L_FETCHED_ROWS) := L_PGNODE;
      A_PA(L_FETCHED_ROWS) := L_PA;
      A_PANODE(L_FETCHED_ROWS) := L_PANODE;
      A_LOW_LIMIT(L_FETCHED_ROWS) := L_LOW_LIMIT;
      A_HIGH_LIMIT(L_FETCHED_ROWS) := L_HIGH_LIMIT;
      A_LOW_SPEC(L_FETCHED_ROWS) := L_LOW_SPEC;
      A_HIGH_SPEC(L_FETCHED_ROWS) := L_HIGH_SPEC;
      A_LOW_DEV(L_FETCHED_ROWS) := L_LOW_DEV;
      A_REL_LOW_DEV(L_FETCHED_ROWS) := L_REL_LOW_DEV;
      A_TARGET(L_FETCHED_ROWS) := L_TARGET;
      A_HIGH_DEV(L_FETCHED_ROWS) := L_HIGH_DEV;
      A_REL_HIGH_DEV(L_FETCHED_ROWS) := L_REL_HIGH_DEV;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_SCPASP_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_SCPASP_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
              'GetScPaSpecs', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN(L_SCPASP_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(L_SCPASP_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETSCPASPECS;

FUNCTION GETSCREPASPECS
(A_SPEC_SET         IN      CHAR,                       
 A_SC               OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PG               OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PGNODE           OUT     UNAPIGEN.LONG_TABLE_TYPE,   
 A_PA               OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PANODE           OUT     UNAPIGEN.LONG_TABLE_TYPE,   
 A_REANALYSIS       OUT     UNAPIGEN.NUM_TABLE_TYPE,    
 A_LOW_LIMIT        OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_HIGH_LIMIT       OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_LOW_SPEC         OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_HIGH_SPEC        OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_LOW_DEV          OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_REL_LOW_DEV      OUT     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_TARGET           OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_HIGH_DEV         OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_REL_HIGH_DEV     OUT     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_NR_OF_ROWS       IN OUT  NUMBER,                     
 A_WHERE_CLAUSE     IN      VARCHAR2)                   
RETURN NUMBER IS

L_SC               VARCHAR2(20);
L_PG               VARCHAR2(20);
L_PGNODE           NUMBER(9);
L_PA               VARCHAR2(20);
L_PANODE           NUMBER(9);
L_REANALYSIS       NUMBER(3);
L_LOW_LIMIT        FLOAT;
L_HIGH_LIMIT       FLOAT;
L_LOW_SPEC         FLOAT;
L_HIGH_SPEC        FLOAT;
L_LOW_DEV          FLOAT;
L_REL_LOW_DEV      CHAR(1);
L_TARGET           FLOAT;
L_HIGH_DEV         FLOAT;
L_REL_HIGH_DEV     CHAR(1);
L_SCPASP_CURSOR    INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS, 0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      RETURN(UNAPIGEN.DBERR_WHERECLAUSE);
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   IF NVL(A_SPEC_SET, ' ') NOT IN ('a','b','c') THEN
      RETURN(UNAPIGEN.DBERR_SPECSET);
   END IF;

   L_SCPASP_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT sc, pg, pgnode, pa, panode, reanalysis, low_limit, ' ||
                   'high_limit, low_spec, high_spec, low_dev, rel_low_dev,  ' ||
                   'target, high_dev, rel_high_dev FROM dd' || UNAPIGEN.P_DD ||
                   '.uvrscpasp' || A_SPEC_SET || ' ' || L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_SCPASP_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   DBMS_SQL.DEFINE_COLUMN(L_SCPASP_CURSOR, 1, L_SC, 20);
   DBMS_SQL.DEFINE_COLUMN(L_SCPASP_CURSOR, 2, L_PG, 20);
   DBMS_SQL.DEFINE_COLUMN(L_SCPASP_CURSOR, 3, L_PGNODE);
   DBMS_SQL.DEFINE_COLUMN(L_SCPASP_CURSOR, 4, L_PA, 20);
   DBMS_SQL.DEFINE_COLUMN(L_SCPASP_CURSOR, 5, L_PANODE);
   DBMS_SQL.DEFINE_COLUMN(L_SCPASP_CURSOR, 6, L_REANALYSIS);
   DBMS_SQL.DEFINE_COLUMN(L_SCPASP_CURSOR, 7, L_LOW_LIMIT);
   DBMS_SQL.DEFINE_COLUMN(L_SCPASP_CURSOR, 8, L_HIGH_LIMIT);
   DBMS_SQL.DEFINE_COLUMN(L_SCPASP_CURSOR, 9, L_LOW_SPEC);
   DBMS_SQL.DEFINE_COLUMN(L_SCPASP_CURSOR, 10, L_HIGH_SPEC);
   DBMS_SQL.DEFINE_COLUMN(L_SCPASP_CURSOR, 11, L_LOW_DEV);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_SCPASP_CURSOR, 12, L_REL_LOW_DEV, 1);
   DBMS_SQL.DEFINE_COLUMN(L_SCPASP_CURSOR, 13, L_TARGET);
   DBMS_SQL.DEFINE_COLUMN(L_SCPASP_CURSOR, 14, L_HIGH_DEV);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_SCPASP_CURSOR, 15, L_REL_HIGH_DEV, 1);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_SCPASP_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;
      DBMS_SQL.COLUMN_VALUE(L_SCPASP_CURSOR, 1, L_SC);
      DBMS_SQL.COLUMN_VALUE(L_SCPASP_CURSOR, 2, L_PG);
      DBMS_SQL.COLUMN_VALUE(L_SCPASP_CURSOR, 3, L_PGNODE);
      DBMS_SQL.COLUMN_VALUE(L_SCPASP_CURSOR, 4, L_PA);
      DBMS_SQL.COLUMN_VALUE(L_SCPASP_CURSOR, 5, L_PANODE);
      DBMS_SQL.COLUMN_VALUE(L_SCPASP_CURSOR, 6, L_REANALYSIS);
      DBMS_SQL.COLUMN_VALUE(L_SCPASP_CURSOR, 7, L_LOW_LIMIT);
      DBMS_SQL.COLUMN_VALUE(L_SCPASP_CURSOR, 8, L_HIGH_LIMIT);
      DBMS_SQL.COLUMN_VALUE(L_SCPASP_CURSOR, 9, L_LOW_SPEC);
      DBMS_SQL.COLUMN_VALUE(L_SCPASP_CURSOR, 10, L_HIGH_SPEC);
      DBMS_SQL.COLUMN_VALUE(L_SCPASP_CURSOR, 11, L_LOW_DEV);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_SCPASP_CURSOR, 12, L_REL_LOW_DEV);
      DBMS_SQL.COLUMN_VALUE(L_SCPASP_CURSOR, 13, L_TARGET);
      DBMS_SQL.COLUMN_VALUE(L_SCPASP_CURSOR, 14, L_HIGH_DEV);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_SCPASP_CURSOR, 15, L_REL_HIGH_DEV);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_SC(L_FETCHED_ROWS) := L_SC;
      A_PG(L_FETCHED_ROWS) := L_PG;
      A_PGNODE(L_FETCHED_ROWS) := L_PGNODE;
      A_PA(L_FETCHED_ROWS) := L_PA;
      A_PANODE(L_FETCHED_ROWS) := L_PANODE;
      A_REANALYSIS(L_FETCHED_ROWS) := L_REANALYSIS;
      A_LOW_LIMIT(L_FETCHED_ROWS) := L_LOW_LIMIT;
      A_HIGH_LIMIT(L_FETCHED_ROWS) := L_HIGH_LIMIT;
      A_LOW_SPEC(L_FETCHED_ROWS) := L_LOW_SPEC;
      A_HIGH_SPEC(L_FETCHED_ROWS) := L_HIGH_SPEC;
      A_LOW_DEV(L_FETCHED_ROWS) := L_LOW_DEV;
      A_REL_LOW_DEV(L_FETCHED_ROWS) := L_REL_LOW_DEV;
      A_TARGET(L_FETCHED_ROWS) := L_TARGET;
      A_HIGH_DEV(L_FETCHED_ROWS) := L_HIGH_DEV;
      A_REL_HIGH_DEV(L_FETCHED_ROWS) := L_REL_HIGH_DEV;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_SCPASP_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_SCPASP_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
              'GetScRePaSpecs', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN(L_SCPASP_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(L_SCPASP_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETSCREPASPECS;

FUNCTION GETSCPADEFAULTRESULT
(A_SC               IN      UNAPIGEN.VC20_TABLE_TYPE,    
 A_PG               IN OUT  UNAPIGEN.VC20_TABLE_TYPE,    
 A_PGNODE           IN OUT  UNAPIGEN.LONG_TABLE_TYPE,    
 A_PA               IN OUT  UNAPIGEN.VC20_TABLE_TYPE,    
 A_PANODE           IN OUT  UNAPIGEN.LONG_TABLE_TYPE,    
 A_VALUE_F          OUT     UNAPIGEN.FLOAT_TABLE_TYPE,   
 A_VALUE_S          OUT     UNAPIGEN.VC40_TABLE_TYPE,    
 A_NR_OF_ROWS       IN      NUMBER)                      
RETURN NUMBER IS

L_VALUE_F          FLOAT;
L_VALUE_S          VARCHAR2(40);
L_DEF_VAL_TP       CHAR(1);
L_DEF_VAL          VARCHAR2(40);
L_DEF_AU_LEVEL     VARCHAR2(4);
L_FORMAT           VARCHAR2(40);
L_PP_VERSION       VARCHAR2(20);
L_PP_KEY1          VARCHAR2(20);
L_PP_KEY2          VARCHAR2(20);
L_PP_KEY3          VARCHAR2(20);
L_PP_KEY4          VARCHAR2(20);
L_PP_KEY5          VARCHAR2(20);
L_PR_VERSION       VARCHAR2(20);

CURSOR L_PPVERSION_CURSOR(C_SC VARCHAR2,
                          C_PG VARCHAR2, C_PGNODE NUMBER) IS
   SELECT PP_VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5
   FROM UTSCPG
   WHERE SC = C_SC
     AND PG = C_PG
     AND PGNODE = C_PGNODE;

CURSOR L_PRVERSION_CURSOR(C_SC VARCHAR2,
                          C_PG VARCHAR2, C_PGNODE NUMBER,
                          C_PA VARCHAR2, C_PANODE NUMBER) IS
   SELECT PR_VERSION
   FROM UTSCPA
   WHERE SC = C_SC
     AND PG = C_PG
     AND PGNODE = C_PGNODE
     AND PA = C_PA
     AND PANODE = C_PANODE;

CURSOR L_PR_CURSOR(C_PA VARCHAR2, C_PR_VERSION VARCHAR2) IS
   SELECT DEF_VAL_TP, DEF_VAL, DEF_AU_LEVEL, FORMAT
   FROM UTPR
   WHERE PR = C_PA
     AND VERSION = C_PR_VERSION;

CURSOR L_STAU_CURSOR(C_SC VARCHAR2, C_DEF_VAL VARCHAR2) IS
   SELECT S.VALUE
   FROM UTSTAU S, UTSC C
   WHERE S.ST = C.ST
     AND S.VERSION = C.ST_VERSION
     AND S.AU = C_DEF_VAL
     AND C.SC = C_SC
   ORDER BY S.AUSEQ;

CURSOR L_RTAU_CURSOR(C_SC VARCHAR2, C_DEF_VAL VARCHAR2) IS
   SELECT S.VALUE
   FROM UTRTAU S, UTRQ R, UTSC C
   WHERE C.SC = C_SC
     AND C.RQ = R.RQ
     AND S.RT = R.RT
     AND S.VERSION = R.RT_VERSION
     AND S.AU = C_DEF_VAL
   ORDER BY S.AUSEQ;

CURSOR L_PPAU_CURSOR(C_PP VARCHAR2, C_PP_VERSION VARCHAR2, C_PP_KEY1 VARCHAR2, C_PP_KEY2 VARCHAR2,
                     C_PP_KEY3 VARCHAR2, C_PP_KEY4 VARCHAR2, C_PP_KEY5 VARCHAR2, C_DEF_VAL VARCHAR2) IS
   SELECT VALUE
   FROM UTPPAU
   WHERE PP = C_PP
     AND VERSION = C_PP_VERSION
     AND PP_KEY1 = C_PP_KEY1
     AND PP_KEY2 = C_PP_KEY2
     AND PP_KEY3 = C_PP_KEY3
     AND PP_KEY4 = C_PP_KEY4
     AND PP_KEY5 = C_PP_KEY5
     AND AU = C_DEF_VAL
   ORDER BY AUSEQ;
   
CURSOR L_STPPAU_CURSOR(C_SC VARCHAR2, C_PP VARCHAR2, C_PP_VERSION VARCHAR2, C_PP_KEY1 VARCHAR2, C_PP_KEY2 VARCHAR2,
                       C_PP_KEY3 VARCHAR2, C_PP_KEY4 VARCHAR2, C_PP_KEY5 VARCHAR2, C_DEF_VAL VARCHAR2) IS
   SELECT S.VALUE
   FROM UTSTPPAU S, UTSC C
   WHERE C.SC = C_SC
     AND S.ST = C.ST
     AND S.VERSION = C.ST_VERSION
     AND S.PP = C_PP
     AND UNAPIGEN.VALIDATEPPVERSION(S.PP,S.PP_VERSION, S.PP_KEY1, S.PP_KEY2, S.PP_KEY3, S.PP_KEY4, S.PP_KEY5) = C_PP_VERSION
     AND S.PP_KEY1 = C_PP_KEY1
     AND S.PP_KEY2 = C_PP_KEY2
     AND S.PP_KEY3 = C_PP_KEY3
     AND S.PP_KEY4 = C_PP_KEY4
     AND S.PP_KEY5 = C_PP_KEY5
     AND S.AU = C_DEF_VAL
   ORDER BY S.AUSEQ;   

CURSOR L_PRAU_CURSOR(C_PR VARCHAR2, C_PR_VERSION VARCHAR2, C_DEF_VAL VARCHAR2) IS
   SELECT VALUE
   FROM UTPRAU
   WHERE PR = C_PR
     AND VERSION = C_PR_VERSION
     AND AU = C_DEF_VAL
   ORDER BY AUSEQ;

CURSOR L_PPPRAU_CURSOR(C_PP VARCHAR2, C_PP_VERSION VARCHAR2, C_PP_KEY1 VARCHAR2, C_PP_KEY2 VARCHAR2,
                       C_PP_KEY3 VARCHAR2, C_PP_KEY4 VARCHAR2, C_PP_KEY5 VARCHAR2, 
                       C_PR VARCHAR2, C_PR_VERSION VARCHAR2, 
                       C_DEF_VAL VARCHAR2) IS
   SELECT VALUE
   FROM UTPPPRAU
   WHERE PP = C_PP
     AND VERSION = C_PP_VERSION
     AND PP_KEY1 = C_PP_KEY1
     AND PP_KEY2 = C_PP_KEY2
     AND PP_KEY3 = C_PP_KEY3
     AND PP_KEY4 = C_PP_KEY4
     AND PP_KEY5 = C_PP_KEY5
     AND PR = C_PR
     AND UNAPIGEN.VALIDATEVERSION('pr',PR,PR_VERSION) = C_PR_VERSION
     AND AU = C_DEF_VAL
   ORDER BY AUSEQ;

CURSOR L_RTSTAU_CURSOR(C_SC VARCHAR2, C_DEF_VAL VARCHAR2) IS
   SELECT S.VALUE
   FROM UTRTSTAU S, UTSC C, UTRQ R
   WHERE C.SC = C_SC
     AND S.ST = C.ST
     AND UNAPIGEN.VALIDATEVERSION('st',S.ST,S.ST_VERSION) = C.ST_VERSION
     AND S.RT = R.RT
     AND S.VERSION = R.RT_VERSION
     AND R.RQ = C.RQ
     AND S.AU = C_DEF_VAL
   ORDER BY S.AUSEQ;

CURSOR L_SCAU_CURSOR(C_SC VARCHAR2, C_DEF_VAL VARCHAR2) IS
   SELECT VALUE
   FROM UTSCAU
   WHERE SC = C_SC
     AND AU = C_DEF_VAL
   ORDER BY AUSEQ;

CURSOR L_SCPGAU_CURSOR(C_SC VARCHAR2, C_PG VARCHAR2, C_PGNODE NUMBER, C_DEF_VAL VARCHAR2) IS
   SELECT VALUE
   FROM UTSCPGAU
   WHERE SC = C_SC
     AND PG = C_PG
     AND PGNODE = C_PGNODE
     AND AU = C_DEF_VAL
   ORDER BY AUSEQ;

CURSOR L_SCPAAU_CURSOR(C_SC VARCHAR2, C_PG VARCHAR2, C_PGNODE NUMBER,
                       C_PA VARCHAR2, C_PANODE NUMBER, C_DEF_VAL VARCHAR2) IS
   SELECT VALUE
   FROM UTSCPAAU
   WHERE SC = C_SC
     AND PG = C_PG
     AND PGNODE = C_PGNODE
     AND PA = C_PA
     AND PANODE = C_PANODE
     AND AU = C_DEF_VAL
   ORDER BY AUSEQ;

CURSOR L_RQAU_CURSOR(C_SC VARCHAR2, C_DEF_VAL VARCHAR2) IS
   SELECT VALUE
   FROM UTRQAU
   WHERE RQ = (SELECT RQ FROM UTSC WHERE SC=C_SC)
     AND AU = C_DEF_VAL
   ORDER BY AUSEQ;
   
BEGIN

   IF NVL(A_NR_OF_ROWS, 0) = 0 THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   FOR L_ROWS IN 1..A_NR_OF_ROWS LOOP
      IF NVL(A_SC(L_ROWS), ' ') = ' ' OR
         NVL(A_PG(L_ROWS), ' ') = ' ' OR
         NVL(A_PA(L_ROWS), ' ') = ' ' THEN
         RETURN(UNAPIGEN.DBERR_NOOBJID);
      END IF;

      OPEN L_PRVERSION_CURSOR(A_SC(L_ROWS),
                              A_PG(L_ROWS), A_PGNODE(L_ROWS),
                              A_PA(L_ROWS), A_PANODE(L_ROWS));
      FETCH L_PRVERSION_CURSOR INTO L_PR_VERSION;
      CLOSE L_PRVERSION_CURSOR;

      OPEN L_PR_CURSOR(A_PA(L_ROWS), L_PR_VERSION);
      FETCH L_PR_CURSOR
      INTO L_DEF_VAL_TP, L_DEF_VAL, L_DEF_AU_LEVEL,L_FORMAT;
      IF L_PR_CURSOR%NOTFOUND THEN
         CLOSE L_PR_CURSOR;
         RETURN(UNAPIGEN.DBERR_NOOBJECT);
      END IF;
      CLOSE L_PR_CURSOR;

      L_VALUE_S := '';
      IF NVL(L_DEF_VAL_TP, ' ') = 'F' THEN
         L_VALUE_S := L_DEF_VAL;
      ELSIF NVL(L_DEF_VAL_TP, ' ') = 'A' THEN
         IF NVL(L_DEF_AU_LEVEL, ' ') = 'st' THEN

            OPEN L_STAU_CURSOR(A_SC(L_ROWS), L_DEF_VAL);
            FETCH L_STAU_CURSOR
            INTO L_VALUE_S;
            IF L_STAU_CURSOR%NOTFOUND THEN
               CLOSE L_STAU_CURSOR;
               RETURN(UNAPIGEN.DBERR_NOOBJECT);
            END IF;
            CLOSE L_STAU_CURSOR;

         ELSIF NVL(L_DEF_AU_LEVEL, ' ') = 'rt' THEN

            OPEN L_RTAU_CURSOR(A_SC(L_ROWS), L_DEF_VAL);
            FETCH L_RTAU_CURSOR
            INTO L_VALUE_S;
            IF L_RTAU_CURSOR%NOTFOUND THEN
               CLOSE L_RTAU_CURSOR;
               RETURN(UNAPIGEN.DBERR_NOOBJECT);
            END IF;
            CLOSE L_RTAU_CURSOR;

         ELSIF NVL(L_DEF_AU_LEVEL, ' ') = 'rtst' THEN

            OPEN L_RTSTAU_CURSOR(A_SC(L_ROWS), L_DEF_VAL);
            FETCH L_RTSTAU_CURSOR
            INTO L_VALUE_S;
            IF L_RTSTAU_CURSOR%NOTFOUND THEN
               CLOSE L_RTSTAU_CURSOR;
               RETURN(UNAPIGEN.DBERR_NOOBJECT);
            END IF;
            CLOSE L_RTSTAU_CURSOR;

         ELSIF NVL(L_DEF_AU_LEVEL, ' ') = 'pp' THEN

            OPEN L_PPVERSION_CURSOR(A_SC(L_ROWS), A_PG(L_ROWS), A_PGNODE(L_ROWS));
            FETCH L_PPVERSION_CURSOR INTO L_PP_VERSION, L_PP_KEY1, L_PP_KEY2, L_PP_KEY3, L_PP_KEY4, L_PP_KEY5;
            CLOSE L_PPVERSION_CURSOR;

            OPEN L_PPAU_CURSOR(A_PG(L_ROWS), L_PP_VERSION, L_PP_KEY1, L_PP_KEY2, L_PP_KEY3, L_PP_KEY4, L_PP_KEY5, L_DEF_VAL);
            FETCH L_PPAU_CURSOR
            INTO L_VALUE_S;
            IF L_PPAU_CURSOR%NOTFOUND THEN
               CLOSE L_PPAU_CURSOR;
               RETURN(UNAPIGEN.DBERR_NOOBJECT);
            END IF;
            CLOSE L_PPAU_CURSOR;

         ELSIF NVL(L_DEF_AU_LEVEL, ' ') = 'stpp' THEN

            OPEN L_PPVERSION_CURSOR(A_SC(L_ROWS), A_PG(L_ROWS), A_PGNODE(L_ROWS));
            FETCH L_PPVERSION_CURSOR INTO L_PP_VERSION, L_PP_KEY1, L_PP_KEY2, L_PP_KEY3, L_PP_KEY4, L_PP_KEY5;
            CLOSE L_PPVERSION_CURSOR;

            OPEN L_STPPAU_CURSOR(A_SC(L_ROWS), A_PG(L_ROWS), L_PP_VERSION, L_PP_KEY1, L_PP_KEY2, 
                                 L_PP_KEY3, L_PP_KEY4, L_PP_KEY5, L_DEF_VAL);
            FETCH L_STPPAU_CURSOR
            INTO L_VALUE_S;
            IF L_STPPAU_CURSOR%NOTFOUND THEN
               CLOSE L_STPPAU_CURSOR;
               RETURN(UNAPIGEN.DBERR_NOOBJECT);
            END IF;
            CLOSE L_STPPAU_CURSOR;

         ELSIF NVL(L_DEF_AU_LEVEL, ' ') = 'pr' THEN

            OPEN L_PRAU_CURSOR(A_PA(L_ROWS), L_PR_VERSION, L_DEF_VAL);
            FETCH L_PRAU_CURSOR
            INTO L_VALUE_S;
            IF L_PRAU_CURSOR%NOTFOUND THEN
               CLOSE L_PRAU_CURSOR;
               RETURN(UNAPIGEN.DBERR_NOOBJECT);
            END IF;
            CLOSE L_PRAU_CURSOR;

         ELSIF NVL(L_DEF_AU_LEVEL, ' ') = 'pppr' THEN

            OPEN L_PPVERSION_CURSOR(A_SC(L_ROWS), A_PG(L_ROWS), A_PGNODE(L_ROWS));
            FETCH L_PPVERSION_CURSOR INTO L_PP_VERSION, L_PP_KEY1, L_PP_KEY2, L_PP_KEY3, L_PP_KEY4, L_PP_KEY5;
            CLOSE L_PPVERSION_CURSOR;

            OPEN L_PPPRAU_CURSOR(A_PG(L_ROWS), L_PP_VERSION, L_PP_KEY1, L_PP_KEY2, L_PP_KEY3, 
                                 L_PP_KEY4, L_PP_KEY5, A_PA(L_ROWS), L_PR_VERSION, L_DEF_VAL);
            FETCH L_PPPRAU_CURSOR
            INTO L_VALUE_S;
            IF L_PPPRAU_CURSOR%NOTFOUND THEN
               CLOSE L_PPPRAU_CURSOR;
               RETURN(UNAPIGEN.DBERR_NOOBJECT);
            END IF;
            CLOSE L_PPPRAU_CURSOR;

         ELSIF NVL(L_DEF_AU_LEVEL, ' ') = 'sc' THEN

            OPEN L_SCAU_CURSOR(A_SC(L_ROWS), L_DEF_VAL);
            FETCH L_SCAU_CURSOR
            INTO L_VALUE_S;
            IF L_SCAU_CURSOR%NOTFOUND THEN
               CLOSE L_SCAU_CURSOR;
               RETURN(UNAPIGEN.DBERR_NOOBJECT);
            END IF;
            CLOSE L_SCAU_CURSOR;
         ELSIF NVL(L_DEF_AU_LEVEL, ' ') = 'scpg' THEN

            OPEN L_SCPGAU_CURSOR(A_SC(L_ROWS), A_PG(L_ROWS), A_PGNODE(L_ROWS), L_DEF_VAL);
            FETCH L_SCPGAU_CURSOR
            INTO L_VALUE_S;
            IF L_SCPGAU_CURSOR%NOTFOUND THEN
               CLOSE L_SCPGAU_CURSOR;
               RETURN(UNAPIGEN.DBERR_NOOBJECT);
            END IF;
            CLOSE L_SCPGAU_CURSOR;
         ELSIF NVL(L_DEF_AU_LEVEL, ' ') = 'scpa' THEN

            OPEN L_SCPAAU_CURSOR(A_SC(L_ROWS), A_PG(L_ROWS), A_PGNODE(L_ROWS), A_PA(L_ROWS), A_PANODE(L_ROWS), L_DEF_VAL);
            FETCH L_SCPAAU_CURSOR
            INTO L_VALUE_S;
            IF L_SCPAAU_CURSOR%NOTFOUND THEN
               CLOSE L_SCPAAU_CURSOR;
               RETURN(UNAPIGEN.DBERR_NOOBJECT);
            END IF;
            CLOSE L_SCPAAU_CURSOR;
         ELSIF NVL(L_DEF_AU_LEVEL, ' ') = 'rq' THEN

            OPEN L_RQAU_CURSOR(A_SC(L_ROWS), L_DEF_VAL);
            FETCH L_RQAU_CURSOR
            INTO L_VALUE_S;
            IF L_RQAU_CURSOR%NOTFOUND THEN
               CLOSE L_RQAU_CURSOR;
               RETURN(UNAPIGEN.DBERR_NOOBJECT);
            END IF;
            CLOSE L_RQAU_CURSOR;

         ELSE
            RETURN(UNAPIGEN.DBERR_AULEVEL);
         END IF;

      ELSE
         RETURN(UNAPIGEN.DBERR_DEFVALUETP);
      END IF;

      
      
      
      
      
      BEGIN
         L_VALUE_F := L_VALUE_S;
         L_VALUE_S := NULL;
      EXCEPTION
      WHEN OTHERS THEN
         L_VALUE_F := NULL;
      END;
      L_RET_CODE := UNAPIGEN.FORMATRESULT(L_VALUE_F, L_FORMAT, L_VALUE_S);

      A_VALUE_S(L_ROWS) := L_VALUE_S;
      A_VALUE_F(L_ROWS) := L_VALUE_F;
      
   END LOOP;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
            'GetScPaDefaultResult', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF L_PPVERSION_CURSOR%ISOPEN THEN
         CLOSE L_PPVERSION_CURSOR;
      END IF;
      IF L_PRVERSION_CURSOR%ISOPEN THEN
         CLOSE L_PRVERSION_CURSOR;
      END IF;
      IF L_PR_CURSOR%ISOPEN THEN
         CLOSE L_PR_CURSOR;
      END IF;
      IF L_STAU_CURSOR%ISOPEN THEN
         CLOSE L_STAU_CURSOR;
      END IF;
      IF L_RTAU_CURSOR%ISOPEN THEN
         CLOSE L_RTAU_CURSOR;
      END IF;
      IF L_RTSTAU_CURSOR%ISOPEN THEN
         CLOSE L_RTSTAU_CURSOR;
      END IF;
      IF L_PPAU_CURSOR%ISOPEN THEN
         CLOSE L_PPAU_CURSOR;
      END IF;
      IF L_STPPAU_CURSOR%ISOPEN THEN
         CLOSE L_STPPAU_CURSOR;
      END IF;      
      IF L_PRAU_CURSOR%ISOPEN THEN
         CLOSE L_PRAU_CURSOR;
      END IF;
      IF L_PPPRAU_CURSOR%ISOPEN THEN
         CLOSE L_PPPRAU_CURSOR;
      END IF;
      IF L_SCAU_CURSOR%ISOPEN THEN
         CLOSE L_SCAU_CURSOR;
      END IF;
      IF L_SCPGAU_CURSOR%ISOPEN THEN
         CLOSE L_SCPGAU_CURSOR;
      END IF;
      IF L_SCPAAU_CURSOR%ISOPEN THEN
         CLOSE L_SCPAAU_CURSOR;
      END IF;
      IF L_RQAU_CURSOR%ISOPEN THEN
         CLOSE L_RQAU_CURSOR;
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETSCPADEFAULTRESULT;

FUNCTION SAVESCPASPECS
(A_SPEC_SET         IN     CHAR,                       
 A_SC               IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PG               IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PGNODE           IN     UNAPIGEN.LONG_TABLE_TYPE,   
 A_PA               IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PANODE           IN     UNAPIGEN.LONG_TABLE_TYPE,   
 A_LOW_LIMIT        IN     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_HIGH_LIMIT       IN     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_LOW_SPEC         IN     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_HIGH_SPEC        IN     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_LOW_DEV          IN     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_REL_LOW_DEV      IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_TARGET           IN     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_HIGH_DEV         IN     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_REL_HIGH_DEV     IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_MODIFY_FLAG      IN OUT UNAPIGEN.NUM_TABLE_TYPE,    
 A_NR_OF_ROWS       IN     NUMBER,                     
 A_MODIFY_REASON    IN     VARCHAR2)                   
RETURN NUMBER IS

L_LC                         VARCHAR2(2);
L_LC_VERSION                 VARCHAR2(20);
L_SS                         VARCHAR2(2);
L_LOG_HS                     CHAR(1);
L_LOG_HS_DETAILS             CHAR(1);
L_ALLOW_MODIFY               CHAR(1);
L_ACTIVE                     CHAR(1);
L_RECORD_OK                  BOOLEAN;
L_ROWS                       NUMBER;
L_INSERT_STRING              VARCHAR2(2000);
L_UPDATE_STRING              VARCHAR2(2000);
L_SELECT_STRING              VARCHAR2(2000);
L_PARTIAL_SAVED              BOOLEAN;
L_PR_VERSION                 VARCHAR2(20);
L_HS_DETAILS_SEQ_NR          INTEGER;
L_ACTION                     VARCHAR2(20);
L_SPEC_SETLABEL              VARCHAR2(40);

L_OLD_LOW_LIMIT              FLOAT;
L_OLD_HIGH_LIMIT             FLOAT;
L_OLD_LOW_SPEC               FLOAT;
L_OLD_HIGH_SPEC              FLOAT;
L_OLD_LOW_DEV                FLOAT;
L_OLD_REL_LOW_DEV            CHAR(1);
L_OLD_TARGET                 FLOAT;
L_OLD_HIGH_DEV               FLOAT;
L_OLD_REL_HIGH_DEV           CHAR(1);

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_SPEC_SET, ' ') NOT IN ('a','b','c') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SPECSET;
      RAISE STPERROR;
   END IF;

   L_HS_DETAILS_SEQ_NR := 0;

   L_WHERE_CLAUSE := ' WHERE sc = :a_sc AND pg = :a_pg AND pgnode = ' ||
                     ':a_pgnode AND pa = :a_pa AND panode = :a_panode';

   L_SELECT_STRING := 'SELECT low_limit, high_limit, low_spec, high_spec, low_dev, rel_low_dev, ' ||
                      'target, high_dev, rel_high_dev FROM  utscpasp' || A_SPEC_SET || ' ';
                      
   L_UPDATE_STRING := 'UPDATE utscpasp' || A_SPEC_SET ||
                      ' SET low_limit = :a_low_limit, high_limit = ' ||
                      ':a_high_limit, low_spec = :a_low_spec, high_spec = ' ||
                      ':a_high_spec, low_dev = :a_low_dev, rel_low_dev = ' ||
                      ':a_rel_low_dev, target = :a_target, high_dev = ' ||
                      ':a_high_dev, rel_high_dev = :a_rel_high_dev';

   L_INSERT_STRING := 'INSERT INTO utscpasp' || A_SPEC_SET ||
                      ' (sc, pg, pgnode, pa, panode, low_limit, high_limit, ' ||
                      'low_spec, high_spec, low_dev, rel_low_dev, target, ' ||
                      'high_dev, rel_high_dev) VALUES(:a_sc, :a_pg, ' ||
                      ':a_pgnode, :a_pa, :a_panode, :a_low_limit, ' ||
                      ':a_high_limit, :a_low_spec, :a_high_spec, :a_low_dev, ' ||
                      ':a_rel_low_dev, :a_target, :a_high_dev, ' ||
                      ':a_rel_high_dev)';

   L_EVENT_TP := 'PaSpecsUpdated';
   L_PARTIAL_SAVED := FALSE;

   
   
   
   FOR L_ROWS IN 1..A_NR_OF_ROWS LOOP

      L_RECORD_OK := TRUE;
      IF NVL(A_SC(L_ROWS), ' ') = ' ' OR
         NVL(A_PG(L_ROWS), ' ') = ' ' OR
         NVL(A_PGNODE(L_ROWS), 0) = 0 OR
         NVL(A_PA(L_ROWS), ' ') = ' ' OR
         NVL(A_PANODE(L_ROWS), 0) = 0 THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
      ELSIF NVL(A_MODIFY_FLAG(L_ROWS), UNAPIGEN.DBERR_SUCCESS)
                                            IN (UNAPIGEN.MOD_FLAG_INSERT,
                                                UNAPIGEN.MOD_FLAG_UPDATE,
                                                UNAPIGEN.MOD_FLAG_DELETE) THEN
         L_RET_CODE := UNAPIAUT.GETSCPAAUTHORISATION(A_SC(L_ROWS), A_PG(L_ROWS), A_PGNODE(L_ROWS),
                                                     A_PA(L_ROWS), A_PANODE(L_ROWS), L_PR_VERSION, 
                                                     L_LC, L_LC_VERSION, L_SS, L_ALLOW_MODIFY, 
                                                     L_ACTIVE, L_LOG_HS, L_LOG_HS_DETAILS);
         IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
            A_MODIFY_FLAG(L_ROWS) := L_RET_CODE;
            L_RECORD_OK := FALSE;
            L_PARTIAL_SAVED := TRUE;
         END IF;

         
         IF L_RECORD_OK THEN
            BEGIN
               EXECUTE IMMEDIATE L_SELECT_STRING||L_WHERE_CLAUSE 
               INTO L_OLD_LOW_LIMIT, L_OLD_HIGH_LIMIT, L_OLD_LOW_SPEC, L_OLD_HIGH_SPEC,
                    L_OLD_LOW_DEV, L_OLD_REL_LOW_DEV, L_OLD_TARGET, L_OLD_HIGH_DEV, L_OLD_REL_HIGH_DEV
               USING A_SC(L_ROWS), A_PG(L_ROWS), A_PGNODE(L_ROWS), A_PA(L_ROWS), A_PANODE(L_ROWS);
            EXCEPTION
            WHEN NO_DATA_FOUND THEN
               L_OLD_LOW_LIMIT := NULL;
               L_OLD_HIGH_LIMIT:= NULL;
               L_OLD_LOW_SPEC := NULL;
               L_OLD_HIGH_SPEC := NULL;
               L_OLD_LOW_DEV := NULL;
               L_OLD_REL_LOW_DEV := NULL;
               L_OLD_TARGET := NULL;
               L_OLD_HIGH_DEV := NULL;
               L_OLD_REL_HIGH_DEV := NULL;
            END;
         END IF;                               
         
         
         
         
         IF L_RECORD_OK AND
            A_MODIFY_FLAG(L_ROWS) IN (UNAPIGEN.MOD_FLAG_INSERT,
                                      UNAPIGEN.MOD_FLAG_UPDATE) THEN
            IF NVL(A_REL_LOW_DEV(L_ROWS), ' ') NOT IN ('1','0') THEN
               UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_RELLOWDEV;
               RAISE STPERROR;
            ELSIF NVL(A_REL_HIGH_DEV(L_ROWS), ' ') NOT IN ('1','0') THEN
               UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_RELHIGHDEV;
               RAISE STPERROR;
            ELSE
               L_SQL_STRING := L_UPDATE_STRING || L_WHERE_CLAUSE;
               EXECUTE IMMEDIATE L_SQL_STRING
               USING A_LOW_LIMIT(L_ROWS), A_HIGH_LIMIT(L_ROWS), A_LOW_SPEC(L_ROWS), A_HIGH_SPEC(L_ROWS),
                     A_LOW_DEV(L_ROWS), A_REL_LOW_DEV(L_ROWS), A_TARGET(L_ROWS), 
                     A_HIGH_DEV(L_ROWS), A_REL_HIGH_DEV(L_ROWS), 
                     A_SC(L_ROWS), A_PG(L_ROWS), A_PGNODE(L_ROWS), A_PA(L_ROWS), A_PANODE(L_ROWS);
               L_ACTION := 'UPDATE';
            END IF;
         ELSIF L_RECORD_OK AND
            A_MODIFY_FLAG(L_ROWS) = UNAPIGEN.MOD_FLAG_DELETE THEN
            
            
            
            


            L_SQL_STRING := 'DELETE FROM utscpasp'||A_SPEC_SET||
                            L_WHERE_CLAUSE;
            EXECUTE IMMEDIATE L_SQL_STRING
            USING A_SC(L_ROWS), A_PG(L_ROWS), A_PGNODE(L_ROWS), A_PA(L_ROWS), A_PANODE(L_ROWS);
            L_ACTION := 'DELETE';
         END IF;

         
         
         
         IF L_RECORD_OK THEN
            
            
            
            IF SQL%ROWCOUNT = 0 AND
               A_MODIFY_FLAG(L_ROWS) = UNAPIGEN.MOD_FLAG_INSERT THEN
               
               EXECUTE IMMEDIATE L_INSERT_STRING
               USING A_SC(L_ROWS), A_PG(L_ROWS), A_PGNODE(L_ROWS), A_PA(L_ROWS), A_PANODE(L_ROWS),
                     A_LOW_LIMIT(L_ROWS), A_HIGH_LIMIT(L_ROWS), A_LOW_SPEC(L_ROWS), A_HIGH_SPEC(L_ROWS),
                     A_LOW_DEV(L_ROWS), A_REL_LOW_DEV(L_ROWS), A_TARGET(L_ROWS), 
                     A_HIGH_DEV(L_ROWS), A_REL_HIGH_DEV(L_ROWS); 
               L_ACTION := 'INSERT';
            ELSIF SQL%ROWCOUNT = 0 AND
               A_MODIFY_FLAG(L_ROWS) = UNAPIGEN.MOD_FLAG_UPDATE THEN
                  UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
                  RAISE STPERROR;
            END IF;
         END IF;

         IF L_RECORD_OK THEN
            L_EV_SEQ_NR := -1;
            L_EV_DETAILS := 'sc=' || A_SC(L_ROWS) || 
                            '#pg=' || A_PG(L_ROWS) ||
                            '#pgnode=' || TO_CHAR(A_PGNODE(L_ROWS)) ||
                            '#panode=' || TO_CHAR(A_PANODE(L_ROWS)) ||
                            '#spec_set=' || A_SPEC_SET ||
                            '#pr_version=' || L_PR_VERSION;
            L_RESULT := UNAPIEV.INSERTEVENT('SaveScPaSpecs', UNAPIGEN.P_EVMGR_NAME,
                                            'pa', A_PA(L_ROWS), L_LC, L_LC_VERSION, L_SS,
                                            L_EVENT_TP, L_EV_DETAILS,
                                            L_EV_SEQ_NR);
            IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
               UNAPIGEN.P_TXN_ERROR := L_RESULT;
               RAISE STPERROR;
            END IF;

            
            
            
            IF (L_LOG_HS = '1') THEN
               INSERT INTO UTSCPAHS(SC, PG, PGNODE, PA, PANODE, WHO, WHO_DESCRIPTION, WHAT,
                                    WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
               VALUES(A_SC(L_ROWS), A_PG(L_ROWS), A_PGNODE(L_ROWS), A_PA(L_ROWS), A_PANODE(L_ROWS), 
                      UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                      'specifications for parameter "'||A_PA(L_ROWS)||'" are updated', 
                      CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
            END IF;
            
            
            
            IF (L_LOG_HS_DETAILS = '1') THEN
               IF A_SPEC_SET = 'a' THEN
                  L_SPEC_SETLABEL := NVL(UNAPIGEN.P_SPEC_SETA_LABEL,'<<spec set a>>');
               ELSIF A_SPEC_SET = 'b' THEN
                  L_SPEC_SETLABEL := NVL(UNAPIGEN.P_SPEC_SETB_LABEL,'<<spec set b>>');
               ELSIF A_SPEC_SET = 'c' THEN
                  L_SPEC_SETLABEL := NVL(UNAPIGEN.P_SPEC_SETC_LABEL,'<<spec set c>>');
               END IF;

               IF L_ACTION = 'INSERT' THEN
                  L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
                  INSERT INTO UTSCPAHSDETAILS(SC, PG, PGNODE, PA, PANODE, TR_SEQ, EV_SEQ, SEQ, DETAILS)
                  VALUES(A_SC(L_ROWS), A_PG(L_ROWS), A_PGNODE(L_ROWS), A_PA(L_ROWS), 
                         A_PANODE(L_ROWS), UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR, 
                         'parameter "'||A_PA(L_ROWS)||
                         '" '|| L_SPEC_SETLABEL || ' specifications are added. property <low_limit>, value is "'||A_LOW_LIMIT(L_ROWS)||'".Property <high_limit>, value is "'||A_HIGH_LIMIT(L_ROWS)||'".');
                  L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
                  INSERT INTO UTSCPAHSDETAILS(SC, PG, PGNODE, PA, PANODE, TR_SEQ, EV_SEQ, SEQ, DETAILS)
                  VALUES(A_SC(L_ROWS), A_PG(L_ROWS), A_PGNODE(L_ROWS), A_PA(L_ROWS), 
                         A_PANODE(L_ROWS), UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR, 
                         'parameter "'||A_PA(L_ROWS)||
                         '" '|| L_SPEC_SETLABEL || ' specifications are added. property <low_spec>, value is "'||A_LOW_SPEC(L_ROWS)||'".Property <high_spec>, value is "'||A_HIGH_SPEC(L_ROWS)||'".');
                  L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
                  INSERT INTO UTSCPAHSDETAILS(SC, PG, PGNODE, PA, PANODE, TR_SEQ, EV_SEQ, SEQ, DETAILS)
                  VALUES(A_SC(L_ROWS), A_PG(L_ROWS), A_PGNODE(L_ROWS), A_PA(L_ROWS), 
                         A_PANODE(L_ROWS), UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR, 
                         'parameter "'||A_PA(L_ROWS)||
                         '" '|| L_SPEC_SETLABEL || ' specifications are added. property <target>, value is "'||
                         A_TARGET(L_ROWS)||'".Property <low_dev>, value is "'||A_LOW_DEV(L_ROWS)||DECODE(A_REL_LOW_DEV(L_ROWS),'1','%')||
                         '".Property <high_dev>, value is "'||A_HIGH_DEV(L_ROWS)||DECODE(A_REL_HIGH_DEV(L_ROWS),'1','%')||'".');
               ELSIF L_ACTION = 'DELETE' THEN
                  L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
                  INSERT INTO UTSCPAHSDETAILS(SC, PG, PGNODE, PA, PANODE, TR_SEQ, EV_SEQ, SEQ, DETAILS)
                  VALUES(A_SC(L_ROWS), A_PG(L_ROWS), A_PGNODE(L_ROWS), A_PA(L_ROWS), 
                         A_PANODE(L_ROWS), UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR, 
                         'parameter "'||A_PA(L_ROWS)||
                         '" '|| L_SPEC_SETLABEL || ' specifications are deleted. property <low_limit>, value was "'||A_LOW_LIMIT(L_ROWS)||'". property <high_limit>, value wass "'||A_HIGH_LIMIT(L_ROWS)||'"');
                  L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
                  INSERT INTO UTSCPAHSDETAILS(SC, PG, PGNODE, PA, PANODE, TR_SEQ, EV_SEQ, SEQ, DETAILS)
                  VALUES(A_SC(L_ROWS), A_PG(L_ROWS), A_PGNODE(L_ROWS), A_PA(L_ROWS), 
                         A_PANODE(L_ROWS), UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR, 
                         'parameter "'||A_PA(L_ROWS)||
                         '" '|| L_SPEC_SETLABEL || ' specifications are deleted. property <low_spec>, value was "'||A_LOW_SPEC(L_ROWS)||'". property <high_spec>, value was "'||A_HIGH_SPEC(L_ROWS)||'"');
                  L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
                  INSERT INTO UTSCPAHSDETAILS(SC, PG, PGNODE, PA, PANODE, TR_SEQ, EV_SEQ, SEQ, DETAILS)
                  VALUES(A_SC(L_ROWS), A_PG(L_ROWS), A_PGNODE(L_ROWS), A_PA(L_ROWS), 
                         A_PANODE(L_ROWS), UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR, 
                         'parameter "'||A_PA(L_ROWS)||
                         '" '|| L_SPEC_SETLABEL || ' specifications are deleted. property <target>, value was "'||
                         A_TARGET(L_ROWS)||'".Property <low_dev>, value was "'||A_LOW_DEV(L_ROWS)||DECODE(A_REL_LOW_DEV(L_ROWS),'1','%')||
                         '".Property <high_dev>, value was "'||A_HIGH_DEV(L_ROWS)||DECODE(A_REL_HIGH_DEV(L_ROWS),'1','%')||'".');
               ELSIF L_ACTION = 'UPDATE' THEN
                  
                  IF NVL((L_OLD_LOW_LIMIT <> A_LOW_LIMIT(L_ROWS)), TRUE) AND NOT(L_OLD_LOW_LIMIT IS NULL AND A_LOW_LIMIT(L_ROWS) IS NULL)  THEN 
                     L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
                     INSERT INTO UTSCPAHSDETAILS (SC, PG, PGNODE, PA, PANODE, TR_SEQ, EV_SEQ, SEQ, DETAILS)
                     VALUES
                     (A_SC(L_ROWS), A_PG(L_ROWS), A_PGNODE(L_ROWS), A_PA(L_ROWS), 
                      A_PANODE(L_ROWS), UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR,
                      'parameter "'||A_PA(L_ROWS)||'" '|| L_SPEC_SETLABEL || ' specifications are updated: property <low_limit> changed value from "' ||
                      L_OLD_LOW_LIMIT|| '" to "' || A_LOW_LIMIT(L_ROWS) || '".');
                  END IF;
                  IF NVL((L_OLD_HIGH_LIMIT <> A_HIGH_LIMIT(L_ROWS)), TRUE) AND NOT(L_OLD_HIGH_LIMIT IS NULL AND A_HIGH_LIMIT(L_ROWS) IS NULL)  THEN 
                     L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
                     INSERT INTO UTSCPAHSDETAILS (SC, PG, PGNODE, PA, PANODE, TR_SEQ, EV_SEQ, SEQ, DETAILS)
                     VALUES
                     (A_SC(L_ROWS), A_PG(L_ROWS), A_PGNODE(L_ROWS), A_PA(L_ROWS), 
                      A_PANODE(L_ROWS), UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR,
                      'parameter "'||A_PA(L_ROWS)||'" '|| L_SPEC_SETLABEL || ' specifications are updated: property <high_limit> changed value from "' ||
                      L_OLD_HIGH_LIMIT|| '" to "' || A_HIGH_LIMIT(L_ROWS) || '".');
                  END IF;
                  IF NVL((L_OLD_LOW_SPEC <> A_LOW_SPEC(L_ROWS)), TRUE) AND NOT(L_OLD_LOW_SPEC IS NULL AND A_LOW_SPEC(L_ROWS) IS NULL)  THEN 
                     L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
                     INSERT INTO UTSCPAHSDETAILS (SC, PG, PGNODE, PA, PANODE, TR_SEQ, EV_SEQ, SEQ, DETAILS)
                     VALUES
                     (A_SC(L_ROWS), A_PG(L_ROWS), A_PGNODE(L_ROWS), A_PA(L_ROWS), 
                      A_PANODE(L_ROWS), UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR,
                      'parameter "'||A_PA(L_ROWS)||'" '|| L_SPEC_SETLABEL || ' specifications are updated: property <low_spec> changed value from "' ||
                      L_OLD_LOW_SPEC|| '" to "' || A_LOW_SPEC(L_ROWS) || '".');
                  END IF;
                  IF NVL((L_OLD_HIGH_SPEC <> A_HIGH_SPEC(L_ROWS)), TRUE) AND NOT(L_OLD_HIGH_SPEC IS NULL AND A_HIGH_SPEC(L_ROWS) IS NULL)  THEN 
                     L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
                     INSERT INTO UTSCPAHSDETAILS (SC, PG, PGNODE, PA, PANODE, TR_SEQ, EV_SEQ, SEQ, DETAILS)
                     VALUES
                     (A_SC(L_ROWS), A_PG(L_ROWS), A_PGNODE(L_ROWS), A_PA(L_ROWS), 
                      A_PANODE(L_ROWS), UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR,
                      'parameter "'||A_PA(L_ROWS)||'" '|| L_SPEC_SETLABEL || ' specifications are updated: property <high_spec> changed value from "' ||
                      L_OLD_HIGH_SPEC|| '" to "' || A_HIGH_SPEC(L_ROWS) || '".');
                  END IF;
                  IF NVL((L_OLD_TARGET <> A_TARGET(L_ROWS)), TRUE) AND NOT(L_OLD_TARGET IS NULL AND A_TARGET(L_ROWS) IS NULL)  THEN 
                     L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
                     INSERT INTO UTSCPAHSDETAILS (SC, PG, PGNODE, PA, PANODE, TR_SEQ, EV_SEQ, SEQ, DETAILS)
                     VALUES
                     (A_SC(L_ROWS), A_PG(L_ROWS), A_PGNODE(L_ROWS), A_PA(L_ROWS), 
                      A_PANODE(L_ROWS), UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR,
                      'parameter "'||A_PA(L_ROWS)||'" '|| L_SPEC_SETLABEL || ' specifications are updated: property <target> changed value from "' ||
                      L_OLD_TARGET|| '" to "' || A_TARGET(L_ROWS) || '".');
                  END IF;
                  IF (NVL((L_OLD_LOW_DEV <> A_LOW_DEV(L_ROWS)), TRUE) AND NOT(L_OLD_LOW_DEV IS NULL AND A_LOW_DEV(L_ROWS) IS NULL))  OR 
                     (NVL((L_OLD_REL_LOW_DEV <> A_REL_LOW_DEV(L_ROWS)), TRUE) AND NOT(L_OLD_REL_LOW_DEV IS NULL AND A_REL_LOW_DEV(L_ROWS) IS NULL))
                     THEN 
                     L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
                     INSERT INTO UTSCPAHSDETAILS (SC, PG, PGNODE, PA, PANODE, TR_SEQ, EV_SEQ, SEQ, DETAILS)
                     VALUES
                     (A_SC(L_ROWS), A_PG(L_ROWS), A_PGNODE(L_ROWS), A_PA(L_ROWS), 
                      A_PANODE(L_ROWS), UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR,
                      'parameter "'||A_PA(L_ROWS)||'" '|| L_SPEC_SETLABEL || ' specifications are updated: property <low_dev> changed value from "' ||
                      L_OLD_LOW_DEV || DECODE(L_OLD_REL_LOW_DEV,'1','%') || '" to "' || A_LOW_DEV(L_ROWS) || DECODE(A_REL_LOW_DEV(L_ROWS),'1','%') || '".');
                  END IF;
                  IF (NVL((L_OLD_HIGH_DEV <> A_HIGH_DEV(L_ROWS)), TRUE) AND NOT(L_OLD_HIGH_DEV IS NULL AND A_HIGH_DEV(L_ROWS) IS NULL))  OR 
                     (NVL((L_OLD_REL_HIGH_DEV <> A_REL_HIGH_DEV(L_ROWS)), TRUE) AND NOT(L_OLD_REL_HIGH_DEV IS NULL AND A_REL_HIGH_DEV(L_ROWS) IS NULL))
                     THEN 
                     L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
                     INSERT INTO UTSCPAHSDETAILS (SC, PG, PGNODE, PA, PANODE, TR_SEQ, EV_SEQ, SEQ, DETAILS)
                     VALUES
                     (A_SC(L_ROWS), A_PG(L_ROWS), A_PGNODE(L_ROWS), A_PA(L_ROWS), 
                      A_PANODE(L_ROWS), UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR,
                      'parameter "'||A_PA(L_ROWS)||'" '|| L_SPEC_SETLABEL || ' specifications are updated: property <high_dev> changed value from "' ||
                      L_OLD_HIGH_DEV || DECODE(L_OLD_REL_HIGH_DEV,'1','%') || '" to "' || A_HIGH_DEV(L_ROWS) || DECODE(A_REL_HIGH_DEV(L_ROWS),'1','%') || '".');
                  END IF;
               END IF;
            END IF;
         END IF;
      END IF;
   END LOOP;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   
   
   
   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      IF A_MODIFY_FLAG(L_SEQ_NO) < UNAPIGEN.DBERR_SUCCESS THEN
         A_MODIFY_FLAG(L_SEQ_NO) := UNAPIGEN.DBERR_SUCCESS;
      END IF;
   END LOOP;

   IF L_PARTIAL_SAVED THEN
      RETURN(UNAPIGEN.DBERR_PARTIALSAVE);
   ELSE
      RETURN(UNAPIGEN.DBERR_SUCCESS);
   END IF;

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveScPaSpecs', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveScPaSpecs'));
END SAVESCPASPECS;

FUNCTION INITSCPASPECS
(A_SPEC_SET         IN      CHAR,                       
 A_SC               IN      VARCHAR2,                   
 A_PG               IN      VARCHAR2,                   
 A_PGNODE           IN      NUMBER,                     
 A_PP_VERSION       IN      VARCHAR2,                   
 A_PA               IN      UNAPIGEN.VC20_TABLE_TYPE,   
 A_PANODE           IN      UNAPIGEN.LONG_TABLE_TYPE,   
 A_PR_VERSION       IN      UNAPIGEN.VC20_TABLE_TYPE,   
 A_LOW_LIMIT        OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_HIGH_LIMIT       OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_LOW_SPEC         OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_HIGH_SPEC        OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_LOW_DEV          OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_REL_LOW_DEV      OUT     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_TARGET           OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_HIGH_DEV         OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_REL_HIGH_DEV     OUT     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_NR_OF_ROWS       IN      NUMBER)                     
RETURN NUMBER IS

L_INHERIT_FROM              VARCHAR2(40); 
L_INHERIT_FROM_VERSION      VARCHAR2(20); 
L_PR                        VARCHAR2(20);
L_PR_VERSION                VARCHAR2(20);
L_LOW_LIMIT                 FLOAT;
L_HIGH_LIMIT                FLOAT;
L_LOW_SPEC                  FLOAT;
L_HIGH_SPEC                 FLOAT;
L_LOW_DEV                   FLOAT;
L_HIGH_DEV                  FLOAT;
L_TARGET                    FLOAT;
L_REL_LOW_DEV               CHAR(1);
L_REL_HIGH_DEV              CHAR(1);
L_PPSP_CURSOR               INTEGER;
L_PR_LIST                   VARCHAR2(2000);
L_DC_LIST                   VARCHAR2(2000);
L_FOUND                     BOOLEAN;
L_ROW                       INTEGER;
L_PREVIOUS_PR               VARCHAR2(20);
L_PREVIOUS_PR_VERSION       VARCHAR2(20);
L_RETURNED_ROWS             INTEGER;
L_PA_TAB_ROWS               INTEGER;
L_SUPPLIER                  VARCHAR2(20);
L_CUSTOMER                  VARCHAR2(20);
L_BULK_SIZE                 PLS_INTEGER;
L_START_IDX                 PLS_INTEGER;
L_LAST_IDX                  PLS_INTEGER;
L_BULK_NR                   PLS_INTEGER;
L_PP_VERSION                VARCHAR2(20);
L_INHERIT_FROM_PP           VARCHAR2(20);
L_ST                        VARCHAR2(20);
L_ST_VERSION                VARCHAR2(20);
L_LOW_LIMIT_PP              VARCHAR2(20);
L_HIGH_LIMIT_PP             VARCHAR2(20);
L_LOW_SPEC_PP               VARCHAR2(20);
L_HIGH_SPEC_PP              VARCHAR2(20);
L_LOW_DEV_PP                VARCHAR2(20);
L_TARGET_PP                 VARCHAR2(20);
L_HIGH_DEV_PP               VARCHAR2(20);
L_CONVERSION_FACTOR         NUMBER;
L_LENGTH                    INTEGER;
L_PP_KEY1                   VARCHAR2(20);
L_PP_KEY2                   VARCHAR2(20);
L_PP_KEY3                   VARCHAR2(20);
L_PP_KEY4                   VARCHAR2(20);
L_PP_KEY5                   VARCHAR2(20);

CURSOR L_IIVALUE_CURSOR (C_II VARCHAR2) IS
   SELECT SUBSTR(IIVALUE,1,20) IIVALUE
   FROM UTSCII
   WHERE SC = A_SC
     AND II = C_II
   ORDER BY ICNODE, IINODE;

CURSOR L_SCPG_CURSOR(C_SC VARCHAR2, C_PG VARCHAR2, C_PGNODE NUMBER) IS
   SELECT PP_VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5
   FROM UTSCPG
   WHERE SC = C_SC
   AND PG = C_PG
   AND PGNODE = C_PGNODE;
   











   

   FUNCTION F_CONVERT_SPECS_CURSOR(A_PP                    VARCHAR2,
                                   A_PP_VERSION            VARCHAR2,
                                   A_INHERIT_FROM          VARCHAR2,
                                   A_INHERIT_FROM_VERSION  VARCHAR2,
                                   A_PR                    VARCHAR2,
                                   A_PR_VERSION            VARCHAR2) 
   RETURN NUMBER IS

   L_INHERIT_PPPR_UNIT   VARCHAR2(20);
   L_PPPR_UNIT           VARCHAR2(20);
   L_PR_UNIT             VARCHAR2(20);
   L_CONVERSION_FACTOR   NUMBER;

   BEGIN

      
      
      
      
      

      BEGIN
         SELECT PPPR.UNIT INHERIT_PPPR_UNIT
         INTO L_INHERIT_PPPR_UNIT
         FROM UTPPPR PPPR
         WHERE PPPR.PP = A_INHERIT_FROM
         AND PPPR.VERSION = A_INHERIT_FROM_VERSION
         AND PPPR.PR = A_PR
         AND UNAPIGEN.VALIDATEVERSION('pr', PPPR.PR, PPPR.PR_VERSION) = A_PR_VERSION;
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
         L_INHERIT_PPPR_UNIT := NULL;
      END;

      BEGIN
         SELECT PPPR.UNIT PPPR_UNIT
         INTO L_PPPR_UNIT
         FROM UTPPPR PPPR
         WHERE PPPR.PP = A_PP
         AND PPPR.VERSION = A_PP_VERSION
         AND PPPR.PR = A_PR
         AND UNAPIGEN.VALIDATEVERSION('pr', PPPR.PR, PPPR.PR_VERSION) = A_PR_VERSION;   
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
         L_PPPR_UNIT := NULL;
      END;

      BEGIN
         SELECT PR.UNIT PR_UNIT
         INTO L_PR_UNIT
         FROM UTPR PR         
         WHERE PR.PR = A_PR
         AND PR.VERSION = A_PR_VERSION;
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
         L_PR_UNIT := NULL;
      END;
         
      L_CONVERSION_FACTOR := UNAPIGEN.SQLUNITCONVERSIONFACTOR( 
                                        NVL(L_PPPR_UNIT,L_PR_UNIT), 
                                        NVL(L_INHERIT_PPPR_UNIT, NVL(L_PPPR_UNIT,L_PR_UNIT))
                                        );
      RETURN(L_CONVERSION_FACTOR);

   END F_CONVERT_SPECS_CURSOR;

BEGIN

   
   

   IF NVL(A_NR_OF_ROWS, 0) = 0 THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_SC, ' ') = ' ' OR
      NVL(A_PG, ' ') = ' ' THEN
      RETURN(UNAPIGEN.DBERR_NOOBJID);
   END IF;

   IF NVL(A_SPEC_SET, ' ') NOT IN ('a','b','c') THEN
      RETURN(UNAPIGEN.DBERR_SPECSET);
   END IF;


   
   
   
   L_PP_VERSION := NULL;
   BEGIN
      OPEN L_SCPG_CURSOR(A_SC, A_PG, A_PGNODE);
      FETCH L_SCPG_CURSOR 
      INTO L_PP_VERSION, L_PP_KEY1, L_PP_KEY2, L_PP_KEY3, L_PP_KEY4, L_PP_KEY5;
      IF L_SCPG_CURSOR%NOTFOUND THEN
         CLOSE L_SCPG_CURSOR;
         RAISE NO_DATA_FOUND;
      END IF;
      CLOSE L_SCPG_CURSOR;
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      L_PP_VERSION := UNAPIGEN.VALIDATEPPVERSION(A_PG, A_PP_VERSION, ' ', ' ', ' ', ' ', ' ');
      L_PP_KEY1 := ' ';
      L_PP_KEY2 := ' ';
      L_PP_KEY3 := ' ';
      L_PP_KEY4 := ' ';
      L_PP_KEY5 := ' ';
      IF L_PP_VERSION IS NULL THEN
         L_PP_VERSION := UNVERSION.P_NO_VERSION;
      END IF;
   END;




















































































   L_PPSP_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_RETURNED_ROWS := 0;
   L_PA_TAB_ROWS := 1;
   L_FOUND := FALSE;
   L_PREVIOUS_PR := NULL;
   L_PREVIOUS_PR_VERSION := NULL;

   
   
   
   
   L_BULK_SIZE := 10;
   L_BULK_NR := 0;

   
   LOOP
      L_BULK_NR := L_BULK_NR + 1;
      L_START_IDX := 1 + ((L_BULK_NR-1)*L_BULK_SIZE);
      L_LAST_IDX := LEAST(L_BULK_NR*L_BULK_SIZE, A_NR_OF_ROWS);
   
      EXIT WHEN L_START_IDX > A_NR_OF_ROWS;
      EXIT WHEN L_RETURNED_ROWS > L_PA_TAB_ROWS; 
      
      
      
      L_PR_LIST := ' AND (pr, UNAPIGEN.UseVersion(''pr'', pr, pr_version)) IN (';
      L_DC_LIST := ' ORDER BY DECODE(pr||UNAPIGEN.UseVersion(''pr'', pr, pr_version),';
      FOR L_ROWS IN L_START_IDX..L_LAST_IDX-1 LOOP
         IF NVL(A_PA(L_ROWS), ' ') = ' ' THEN
            RETURN(UNAPIGEN.DBERR_NOOBJID);
         END IF;

         L_PR_LIST := L_PR_LIST || '(''' || REPLACE(A_PA(L_ROWS), '''', '''''') || ''','''
                                || UNAPIGEN.USEVERSION('pr', A_PA(L_ROWS), A_PR_VERSION(L_ROWS)) || '''),';                  
         L_DC_LIST := L_DC_LIST || '''' || REPLACE(A_PA(L_ROWS), '''', '''''') 
                                || UNAPIGEN.USEVERSION('pr', A_PA(L_ROWS), A_PR_VERSION(L_ROWS)) || ''''                  
                                || ',' || L_ROWS || ','; 
      END LOOP;

      IF NVL(A_PA(L_LAST_IDX), ' ') = ' ' THEN
         RETURN(UNAPIGEN.DBERR_NOOBJID);
      END IF;

      L_PR_LIST := L_PR_LIST || '(''' || REPLACE(A_PA(L_LAST_IDX), '''', '''''') || ''','''
                             || UNAPIGEN.USEVERSION('pr', A_PA(L_LAST_IDX), A_PR_VERSION(L_LAST_IDX)) || '''))'; 
      L_DC_LIST := L_DC_LIST || '''' || REPLACE(A_PA(L_LAST_IDX), '''', '''''')  
                             || UNAPIGEN.USEVERSION('pr', A_PA(L_LAST_IDX), A_PR_VERSION(L_LAST_IDX)) || ''''  
                             || ',' || L_LAST_IDX || ')';

      IF NVL(L_INHERIT_FROM, ' ') = ' ' THEN
         
         
         
         L_SQL_STRING := 'SELECT pr, UNAPIGEN.UseVersion(''pr'', pr, pr_version) pr_version,'||
                         ' low_limit, '''' low_limit_pp, high_limit, '''' high_limit_pp,'||
                         ' low_spec, '''' low_spec_pp, high_spec, '''' high_spec_pp,' ||
                         ' low_dev, rel_low_dev, '''' low_dev_pp, target, '''' target_pp, high_dev,' ||
                         ' rel_high_dev, '''' high_dev_pp FROM utppsp' || A_SPEC_SET ||
                         ' WHERE pp = :a_pp' ||
                         ' AND version = :a_pp_version ' ||
                         ' AND pp_key1 = :a_pp_key1 ' ||
                         ' AND pp_key2 = :a_pp_key2 ' ||
                         ' AND pp_key3 = :a_pp_key3 ' ||
                         ' AND pp_key4 = :a_pp_key4 ' ||
                         ' AND pp_key5 = :a_pp_key5 ' ||
                         L_PR_LIST || L_DC_LIST || ',seq'; 
         DBMS_SQL.PARSE(L_PPSP_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         DBMS_SQL.BIND_VARIABLE(L_PPSP_CURSOR, ':a_pp', A_PG);
         DBMS_SQL.BIND_VARIABLE(L_PPSP_CURSOR, ':a_pp_version', L_PP_VERSION);
         DBMS_SQL.BIND_VARIABLE(L_PPSP_CURSOR, ':a_pp_key1', L_PP_KEY1);
         DBMS_SQL.BIND_VARIABLE(L_PPSP_CURSOR, ':a_pp_key2', L_PP_KEY2);
         DBMS_SQL.BIND_VARIABLE(L_PPSP_CURSOR, ':a_pp_key3', L_PP_KEY3);
         DBMS_SQL.BIND_VARIABLE(L_PPSP_CURSOR, ':a_pp_key4', L_PP_KEY4);
         DBMS_SQL.BIND_VARIABLE(L_PPSP_CURSOR, ':a_pp_key5', L_PP_KEY5);
         
      ELSE
         
         
         
         
         L_SQL_STRING :=
            'SELECT pr, UNAPIGEN.UseVersion(''pr'', pr, pr_version) pr_version, ' ||
            'DECODE(COUNT(low_limit), 0, NULL, ' ||
                                     '1, MAX(low_limit), ' ||
                                     'MAX(DECODE(pp, :a_inherit_from, low_limit))) low_limit, ' ||
            'DECODE(COUNT(low_limit),  1, MAX(DECODE(low_limit,NULL, NULL, pp)),NULL) low_limit_pp, ' ||
            'DECODE(COUNT(high_limit), 0, NULL, ' ||
                                     '1, MAX(high_limit), ' ||
                                     'MAX(DECODE(pp, :a_inherit_from, high_limit))) high_limit, ' ||
            'DECODE(COUNT(high_limit),  1, MAX(DECODE(high_limit,NULL, NULL, pp)),NULL) high_limit_pp, ' ||
            'DECODE(COUNT(low_spec), 0, NULL, ' ||
                                     '1, MAX(low_spec), ' ||
                                     'MAX(DECODE(pp, :a_inherit_from, low_spec))) low_spec, ' ||
            'DECODE(COUNT(low_spec),  1, MAX(DECODE(low_spec,NULL, NULL, pp)),NULL) low_spec_pp, ' ||
            'DECODE(COUNT(high_spec), 0, NULL, ' ||
                                     '1, MAX(high_spec), ' ||
                                     'MAX(DECODE(pp,:a_inherit_from, high_spec))) high_spec, ' ||
            'DECODE(COUNT(high_spec),  1, MAX(DECODE(high_spec,NULL, NULL, pp)),NULL) high_spec_pp, ' ||
            'DECODE(COUNT(low_dev), 0, NULL, ' ||
                                     '1, MAX(low_dev), ' ||
                                     'MAX(DECODE(pp, :a_inherit_from, low_dev))) low_dev, ' ||
            'DECODE(COUNT(low_dev), 0, NULL, ' ||
                                     '1, MAX(rel_low_dev), ' ||
                                     'MAX(DECODE(pp, :a_inherit_from, rel_low_dev))) rel_low_dev,' ||
            'DECODE(COUNT(low_dev),  1, MAX(DECODE(low_dev,NULL, NULL, pp)),NULL) low_dev_pp, ' ||
            'DECODE(COUNT(target), 0, NULL, ' ||
                                     '1, MAX(target), ' ||
                                     'MAX(DECODE(pp, :a_inherit_from, target))) target, ' ||
            'DECODE(COUNT(target),  1, MAX(DECODE(target,NULL, NULL, pp)),NULL) target_pp, ' ||
            'DECODE(COUNT(high_dev), 0, NULL, ' ||
                                     '1, MAX(high_dev), ' ||
                                     'MAX(DECODE(pp, :a_inherit_from, high_dev))) high_dev, ' ||
            'DECODE(COUNT(high_dev), 0, NULL, ' ||
                                     '1, MAX(rel_high_dev), ' ||
                                     'MAX(DECODE(pp, :a_inherit_from, rel_high_dev))) rel_high_dev, ' ||
            'DECODE(COUNT(high_dev),  1, MAX(DECODE(high_dev,NULL, NULL, pp)),NULL) high_dev_pp ' ||
            'FROM utppsp' || A_SPEC_SET ||
            ' WHERE (pp, version) IN ((:a_pp, :a_pp_version),(:a_inherit_from, :a_inherit_from_version)) ' ||
            L_PR_LIST || ' GROUP BY pr, UNAPIGEN.UseVersion(''pr'', pr, pr_version)' || L_DC_LIST;

         DBMS_SQL.PARSE(L_PPSP_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         DBMS_SQL.BIND_VARIABLE(L_PPSP_CURSOR, ':a_inherit_from', L_INHERIT_FROM);
         DBMS_SQL.BIND_VARIABLE(L_PPSP_CURSOR, ':a_inherit_from_version', L_INHERIT_FROM_VERSION);
         DBMS_SQL.BIND_VARIABLE(L_PPSP_CURSOR, ':a_pp', A_PG);
         DBMS_SQL.BIND_VARIABLE(L_PPSP_CURSOR, ':a_pp_version', L_PP_VERSION);

      END IF;

      DBMS_SQL.DEFINE_COLUMN(L_PPSP_CURSOR, 1, L_PR, 20);
      DBMS_SQL.DEFINE_COLUMN(L_PPSP_CURSOR, 2, L_PR_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(L_PPSP_CURSOR, 3, L_LOW_LIMIT);
      DBMS_SQL.DEFINE_COLUMN(L_PPSP_CURSOR, 4, L_LOW_LIMIT_PP, 20);
      DBMS_SQL.DEFINE_COLUMN(L_PPSP_CURSOR, 5, L_HIGH_LIMIT);
      DBMS_SQL.DEFINE_COLUMN(L_PPSP_CURSOR, 6, L_HIGH_LIMIT_PP, 20);
      DBMS_SQL.DEFINE_COLUMN(L_PPSP_CURSOR, 7, L_LOW_SPEC);
      DBMS_SQL.DEFINE_COLUMN(L_PPSP_CURSOR, 8, L_LOW_SPEC_PP, 20);
      DBMS_SQL.DEFINE_COLUMN(L_PPSP_CURSOR, 9, L_HIGH_SPEC);
      DBMS_SQL.DEFINE_COLUMN(L_PPSP_CURSOR, 10, L_HIGH_SPEC_PP, 20);
      DBMS_SQL.DEFINE_COLUMN(L_PPSP_CURSOR, 11, L_LOW_DEV);
      DBMS_SQL.DEFINE_COLUMN_CHAR(L_PPSP_CURSOR, 12, L_REL_LOW_DEV, 1);
      DBMS_SQL.DEFINE_COLUMN(L_PPSP_CURSOR, 13, L_LOW_DEV_PP, 20);
      DBMS_SQL.DEFINE_COLUMN(L_PPSP_CURSOR, 14, L_TARGET);
      DBMS_SQL.DEFINE_COLUMN(L_PPSP_CURSOR, 15, L_TARGET_PP, 20);
      DBMS_SQL.DEFINE_COLUMN(L_PPSP_CURSOR, 16, L_HIGH_DEV);
      DBMS_SQL.DEFINE_COLUMN_CHAR(L_PPSP_CURSOR, 17, L_REL_HIGH_DEV, 1);
      DBMS_SQL.DEFINE_COLUMN(L_PPSP_CURSOR, 18, L_HIGH_DEV_PP, 20);
      L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_PPSP_CURSOR);

      WHILE L_RESULT <> 0 LOOP
         L_FOUND := TRUE;

         DBMS_SQL.COLUMN_VALUE(L_PPSP_CURSOR, 1, L_PR);
         DBMS_SQL.COLUMN_VALUE(L_PPSP_CURSOR, 2, L_PR_VERSION);
         
         
         IF L_PA_TAB_ROWS <= A_NR_OF_ROWS THEN
            IF L_PR = A_PA(L_PA_TAB_ROWS) AND L_PR_VERSION=A_PR_VERSION(L_PA_TAB_ROWS) THEN
               
               
               
               L_RETURNED_ROWS := L_RETURNED_ROWS + 1;
               L_PA_TAB_ROWS := L_PA_TAB_ROWS + 1;
               DBMS_SQL.COLUMN_VALUE(L_PPSP_CURSOR, 3, L_LOW_LIMIT);
               DBMS_SQL.COLUMN_VALUE(L_PPSP_CURSOR, 4, L_LOW_LIMIT_PP);
               DBMS_SQL.COLUMN_VALUE(L_PPSP_CURSOR, 5, L_HIGH_LIMIT);
               DBMS_SQL.COLUMN_VALUE(L_PPSP_CURSOR, 6, L_HIGH_LIMIT_PP);
               DBMS_SQL.COLUMN_VALUE(L_PPSP_CURSOR, 7, L_LOW_SPEC);
               DBMS_SQL.COLUMN_VALUE(L_PPSP_CURSOR, 8, L_LOW_SPEC_PP);
               DBMS_SQL.COLUMN_VALUE(L_PPSP_CURSOR, 9, L_HIGH_SPEC);
               DBMS_SQL.COLUMN_VALUE(L_PPSP_CURSOR,10, L_HIGH_SPEC_PP);
               DBMS_SQL.COLUMN_VALUE(L_PPSP_CURSOR,11, L_LOW_DEV);
               DBMS_SQL.COLUMN_VALUE_CHAR(L_PPSP_CURSOR,12, L_REL_LOW_DEV);
               DBMS_SQL.COLUMN_VALUE(L_PPSP_CURSOR,13, L_LOW_DEV_PP);
               DBMS_SQL.COLUMN_VALUE(L_PPSP_CURSOR,14, L_TARGET);
               DBMS_SQL.COLUMN_VALUE(L_PPSP_CURSOR,15, L_TARGET_PP);
               DBMS_SQL.COLUMN_VALUE(L_PPSP_CURSOR,16, L_HIGH_DEV);
               DBMS_SQL.COLUMN_VALUE_CHAR(L_PPSP_CURSOR, 17, L_REL_HIGH_DEV);
               DBMS_SQL.COLUMN_VALUE(L_PPSP_CURSOR,18, L_HIGH_DEV_PP);

               
               IF L_LOW_LIMIT_PP = A_PG OR
                  L_HIGH_LIMIT_PP = A_PG OR
                  L_LOW_SPEC_PP = A_PG OR
                  L_HIGH_SPEC_PP = A_PG OR
                  L_LOW_DEV_PP = A_PG OR
                  L_TARGET_PP = A_PG OR
                  L_HIGH_DEV_PP = A_PG THEN
                  
                  L_CONVERSION_FACTOR := F_CONVERT_SPECS_CURSOR(A_PG, L_PP_VERSION, 
                                                                L_INHERIT_FROM, L_INHERIT_FROM_VERSION,
                                                                L_PR, L_PR_VERSION);                  
                  IF L_LOW_LIMIT_PP = A_PG THEN
                     L_LOW_LIMIT := L_LOW_LIMIT * L_CONVERSION_FACTOR;
                  END IF;
                  IF L_HIGH_LIMIT_PP = A_PG THEN
                     L_HIGH_LIMIT := L_HIGH_LIMIT * L_CONVERSION_FACTOR;
                  END IF;
                  IF L_LOW_SPEC_PP = A_PG THEN
                     L_LOW_SPEC := L_LOW_SPEC * L_CONVERSION_FACTOR;
                  END IF;
                  IF L_HIGH_SPEC_PP = A_PG THEN
                     L_HIGH_SPEC := L_HIGH_SPEC * L_CONVERSION_FACTOR;
                  END IF;
                  IF L_LOW_DEV_PP = A_PG AND L_REL_LOW_DEV='0' THEN
                     L_LOW_DEV := L_LOW_DEV * L_CONVERSION_FACTOR;
                  END IF;
                  IF L_TARGET_PP = A_PG THEN
                     L_TARGET := L_TARGET * L_CONVERSION_FACTOR;
                  END IF;
                  IF L_HIGH_DEV_PP = A_PG AND L_REL_HIGH_DEV='0' THEN
                     L_HIGH_DEV := L_HIGH_DEV * L_CONVERSION_FACTOR;
                  END IF;                                               

               END IF;
               
               A_LOW_LIMIT(L_RETURNED_ROWS) := L_LOW_LIMIT;
               A_HIGH_LIMIT(L_RETURNED_ROWS) := L_HIGH_LIMIT;
               A_LOW_SPEC(L_RETURNED_ROWS) := L_LOW_SPEC;
               A_HIGH_SPEC(L_RETURNED_ROWS) := L_HIGH_SPEC;
               A_LOW_DEV(L_RETURNED_ROWS) := L_LOW_DEV;
               A_REL_LOW_DEV(L_RETURNED_ROWS) := NVL(L_REL_LOW_DEV, '0');
               A_TARGET(L_RETURNED_ROWS) := L_TARGET;
               A_HIGH_DEV(L_RETURNED_ROWS) := L_HIGH_DEV;
               A_REL_HIGH_DEV(L_RETURNED_ROWS) := NVL(L_REL_HIGH_DEV, '0');
               L_RESULT := DBMS_SQL.FETCH_ROWS(L_PPSP_CURSOR);
               L_PREVIOUS_PR := L_PR;
               L_PREVIOUS_PR_VERSION := L_PR_VERSION;
            ELSE
               IF L_PR = L_PREVIOUS_PR AND L_PR_VERSION = L_PREVIOUS_PR_VERSION THEN
                  
                  
                  
                  
                  L_RESULT := DBMS_SQL.FETCH_ROWS(L_PPSP_CURSOR);
               ELSE
                  
                  
                  
                  L_RETURNED_ROWS := L_RETURNED_ROWS + 1;
                  L_PA_TAB_ROWS := L_PA_TAB_ROWS + 1;

                  A_LOW_LIMIT(L_RETURNED_ROWS) := NULL;
                  A_HIGH_LIMIT(L_RETURNED_ROWS) := NULL;
                  A_LOW_SPEC(L_RETURNED_ROWS) := NULL;
                  A_HIGH_SPEC(L_RETURNED_ROWS) := NULL;
                  A_LOW_DEV(L_RETURNED_ROWS) := NULL;
                  A_REL_LOW_DEV(L_RETURNED_ROWS) := NULL;
                  A_TARGET(L_RETURNED_ROWS) := NULL;
                  A_HIGH_DEV(L_RETURNED_ROWS) := NULL;
                  A_REL_HIGH_DEV(L_RETURNED_ROWS) := NULL;
                  L_PREVIOUS_PR := NULL; 
                  L_PREVIOUS_PR_VERSION := NULL;
               END IF;
            END IF;
         ELSE
            
            
            IF L_PR = L_PREVIOUS_PR AND L_PR_VERSION = L_PREVIOUS_PR_VERSION THEN
               
               
               
               
               L_RESULT := DBMS_SQL.FETCH_ROWS(L_PPSP_CURSOR);
            ELSE

               
               
               L_RETURNED_ROWS := L_PA_TAB_ROWS + 1;
               EXIT; 
            END IF;
         END IF;
      END LOOP;
   END LOOP;
   
   IF L_RETURNED_ROWS > A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(L_PPSP_CURSOR);
      RETURN(UNAPIGEN.DBERR_NOOBJECT);
   END IF;
   DBMS_SQL.CLOSE_CURSOR(L_PPSP_CURSOR);

   
   
   
   IF L_RETURNED_ROWS <= A_NR_OF_ROWS THEN
      FOR L_ROW IN L_RETURNED_ROWS+1..A_NR_OF_ROWS LOOP
         A_LOW_LIMIT(L_ROW)    := NULL;
         A_HIGH_LIMIT(L_ROW)   := NULL;
         A_LOW_SPEC(L_ROW)     := NULL;
         A_HIGH_SPEC(L_ROW)    := NULL;
         A_LOW_DEV(L_ROW)      := NULL;
         A_REL_LOW_DEV(L_ROW)  := NULL;
         A_TARGET(L_ROW)       := NULL;
         A_HIGH_DEV(L_ROW)     := NULL;
         A_REL_HIGH_DEV(L_ROW) := NULL;
      END LOOP;
   END IF;

   
   
   
   IF L_FOUND THEN
      RETURN(UNAPIGEN.DBERR_SUCCESS);
   ELSE
      RETURN(UNAPIGEN.DBERR_NORECORDS);
   END IF;

EXCEPTION
   WHEN NO_DATA_FOUND THEN
      RETURN(UNAPIGEN.DBERR_NOOBJECT);
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
             'InitScPaSpecs', L_SQLERRM);
      UNAPIGEN.U4COMMIT;











      
      IF DBMS_SQL.IS_OPEN(L_PPSP_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(L_PPSP_CURSOR);
      END IF;
      IF L_IIVALUE_CURSOR%ISOPEN THEN
         CLOSE L_IIVALUE_CURSOR;
      END IF;
      IF L_SCPG_CURSOR%ISOPEN THEN
         CLOSE L_SCPG_CURSOR;
      END IF;



      RETURN(UNAPIGEN.DBERR_GENFAIL);
END INITSCPASPECS;

FUNCTION CREATESCPADETAILS
(A_ST             IN        VARCHAR2,                 
 A_ST_VERSION     IN OUT    VARCHAR2,                 
 A_PP             IN        VARCHAR2,                 
 A_PP_VERSION     IN OUT    VARCHAR2,                 
 A_PP_KEY1        IN        VARCHAR2,                 
 A_PP_KEY2        IN        VARCHAR2,                 
 A_PP_KEY3        IN        VARCHAR2,                 
 A_PP_KEY4        IN        VARCHAR2,                 
 A_PP_KEY5        IN        VARCHAR2,                  
 A_PR             IN        VARCHAR2,                 
 A_PR_VERSION     IN OUT    VARCHAR2,                 
 A_SEQ            IN        NUMBER,                   
 A_SC             IN        VARCHAR2,                 
 A_PG             IN        VARCHAR2,                 
 A_PGNODE         IN        NUMBER,                   
 A_PANODE         IN        NUMBER,                   
 A_FILTER_FREQ    IN        CHAR,                     
 A_REF_DATE       IN        DATE,                     
 A_MT             IN        VARCHAR2,                 
 A_MT_VERSION     IN OUT    VARCHAR2,                 
 A_MT_NR_MEASUR   IN        NUMBER,                    
 A_MODIFY_REASON  IN        VARCHAR2)                 
RETURN NUMBER IS

BEGIN
RETURN(UNAPIPA2.CREATESCPADETAILS(
                   A_ST, A_ST_VERSION, A_PP, A_PP_VERSION, 
                   A_PP_KEY1, A_PP_KEY2, A_PP_KEY3, A_PP_KEY4, A_PP_KEY5, 
                   A_PR, A_PR_VERSION, A_SEQ, A_SC, A_PG, A_PGNODE, A_PANODE,
                   A_FILTER_FREQ, A_REF_DATE, A_MT, A_MT_VERSION, A_MT_NR_MEASUR, A_MODIFY_REASON));
                
END CREATESCPADETAILS;

FUNCTION ADDSCPADETAILS
(A_SC             IN    VARCHAR2,                 
 A_ST             IN    VARCHAR2,                 
 A_ST_VERSION     IN    VARCHAR2,                 
 A_PG             IN    VARCHAR2,                 
 A_PGNODE         IN    NUMBER,                   
 A_PA             IN    VARCHAR2,                 
 A_PANODE         IN    NUMBER,                   
 A_MT             IN    VARCHAR2,                 
 A_MT_VERSION     IN    VARCHAR2,                 
 A_SEQ            IN    NUMBER,                   
 A_MODIFY_REASON  IN    VARCHAR2)                 
RETURN NUMBER IS

BEGIN
RETURN(UNAPIPA2.ADDSCPADETAILS(
                   A_SC, A_ST, A_ST_VERSION, A_PG, A_PGNODE, A_PA, A_PANODE,
                   A_MT, A_MT_VERSION, A_SEQ, A_MODIFY_REASON));   
END ADDSCPADETAILS;

FUNCTION COPYSCPADETAILS
(A_SC_FROM        IN        VARCHAR2,                 
 A_PG_FROM        IN        VARCHAR2,                 
 A_PGNODE_FROM    IN        NUMBER,                   
 A_PA_FROM        IN        VARCHAR2,                 
 A_PANODE_FROM    IN        NUMBER,                   
 A_ST_TO          IN        VARCHAR2,                 
 A_ST_TO_VERSION  IN        VARCHAR2,                 
 A_SC_TO          IN        VARCHAR2,                 
 A_PG_TO          IN        VARCHAR2,                 
 A_PGNODE_TO      IN        NUMBER,                   
 A_PA_TO          IN        VARCHAR2,                 
 A_PANODE_TO      IN        NUMBER,                   
 A_MODIFY_REASON  IN        VARCHAR2)                 
RETURN NUMBER IS

BEGIN
RETURN(UNAPIPA2.COPYSCPADETAILS(
                   A_SC_FROM, A_PG_FROM, A_PGNODE_FROM, A_PA_FROM, A_PANODE_FROM,
                   A_ST_TO, A_ST_TO_VERSION, A_SC_TO, A_PG_TO, A_PGNODE_TO, A_PA_TO, A_PANODE_TO, A_MODIFY_REASON));   

END COPYSCPADETAILS;

FUNCTION INITSCPADETAILS
(A_ST                      IN         VARCHAR2,                  
 A_ST_VERSION              IN OUT     VARCHAR2,                  
 A_PP                      IN         VARCHAR2,                  
 A_PGNODE                  IN         NUMBER,                    
 A_PP_VERSION              IN OUT     VARCHAR2,                  
 A_PP_KEY1                 IN         VARCHAR2,                  
 A_PP_KEY2                 IN         VARCHAR2,                  
 A_PP_KEY3                 IN         VARCHAR2,                  
 A_PP_KEY4                 IN         VARCHAR2,                  
 A_PP_KEY5                 IN         VARCHAR2,                   
 A_PR                      IN         VARCHAR2,                  
 A_PR_VERSION              IN OUT     VARCHAR2,                  
 A_SC                      IN         VARCHAR2,                  
 A_FILTER_FREQ             IN         CHAR,                      
 A_REF_DATE                IN         DATE,                      
 A_MT                      IN         VARCHAR2,                  
 A_MT_VERSION_IN           IN         VARCHAR2,                  
 A_MT_NR_MEASUR            IN         NUMBER,                    
 A_ME                      OUT        UNAPIGEN.VC20_TABLE_TYPE,  
 A_REANALYSIS              OUT        UNAPIGEN.NUM_TABLE_TYPE,   
 A_MT_VERSION              OUT        UNAPIGEN.VC20_TABLE_TYPE,  
 A_DESCRIPTION             OUT        UNAPIGEN.VC40_TABLE_TYPE,  
 A_VALUE_F                 OUT        UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_VALUE_S                 OUT        UNAPIGEN.VC40_TABLE_TYPE,  
 A_UNIT                    OUT        UNAPIGEN.VC20_TABLE_TYPE,  
 A_EXEC_START_DATE         OUT        UNAPIGEN.DATE_TABLE_TYPE,  
 A_EXEC_END_DATE           OUT        UNAPIGEN.DATE_TABLE_TYPE,  
 A_EXECUTOR                OUT        UNAPIGEN.VC20_TABLE_TYPE,  
 A_LAB                     OUT        UNAPIGEN.VC20_TABLE_TYPE,  
 A_EQ                      OUT        UNAPIGEN.VC20_TABLE_TYPE,  
 A_EQ_VERSION              OUT        UNAPIGEN.VC20_TABLE_TYPE,  
 A_PLANNED_EXECUTOR        OUT        UNAPIGEN.VC20_TABLE_TYPE,  
 A_PLANNED_EQ              OUT        UNAPIGEN.VC20_TABLE_TYPE,  
 A_PLANNED_EQ_VERSION      OUT        UNAPIGEN.VC20_TABLE_TYPE,  
 A_MANUALLY_ENTERED        OUT        UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ALLOW_ADD               OUT        UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ASSIGN_DATE             OUT        UNAPIGEN.DATE_TABLE_TYPE,  
 A_ASSIGNED_BY             OUT        UNAPIGEN.VC20_TABLE_TYPE,  
 A_MANUALLY_ADDED          OUT        UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_DELAY                   OUT        UNAPIGEN.NUM_TABLE_TYPE,   
 A_DELAY_UNIT              OUT        UNAPIGEN.VC20_TABLE_TYPE,  
 A_FORMAT                  OUT        UNAPIGEN.VC40_TABLE_TYPE,  
 A_ACCURACY                OUT        UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_REAL_COST               OUT        UNAPIGEN.VC40_TABLE_TYPE, 
 A_REAL_TIME               OUT        UNAPIGEN.VC40_TABLE_TYPE, 
 A_CALIBRATION             OUT        UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_CONFIRM_COMPLETE        OUT        UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_AUTORECALC              OUT        UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ME_RESULT_EDITABLE      OUT        UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NEXT_CELL               OUT        UNAPIGEN.VC20_TABLE_TYPE,  
 A_SOP                     OUT        UNAPIGEN.VC40_TABLE_TYPE,  
 A_SOP_VERSION             OUT        UNAPIGEN.VC20_TABLE_TYPE,  
 A_PLAUS_LOW               OUT        UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_PLAUS_HIGH              OUT        UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_WINSIZE_X               OUT        UNAPIGEN.NUM_TABLE_TYPE,   
 A_WINSIZE_Y               OUT        UNAPIGEN.NUM_TABLE_TYPE,   
 A_ME_CLASS                OUT        UNAPIGEN.VC2_TABLE_TYPE,   
 A_LOG_HS                  OUT        UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LOG_HS_DETAILS          OUT        UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LC                      OUT        UNAPIGEN.VC2_TABLE_TYPE,   
 A_LC_VERSION              OUT        UNAPIGEN.VC20_TABLE_TYPE,  
 A_NR_OF_ROWS              IN OUT     NUMBER)                    
RETURN NUMBER IS

BEGIN
RETURN(UNAPIPA2.INITSCPADETAILS(
                   A_ST, A_ST_VERSION, A_PP, A_PGNODE, A_PP_VERSION, A_PP_KEY1, A_PP_KEY2, A_PP_KEY3,
                   A_PP_KEY4, A_PP_KEY5, A_PR, A_PR_VERSION, 
                   A_SC, A_FILTER_FREQ, A_REF_DATE, A_MT, A_MT_VERSION_IN, A_MT_NR_MEASUR, 
                   A_ME, A_REANALYSIS, A_MT_VERSION, A_DESCRIPTION, A_VALUE_F,
                   A_VALUE_S, A_UNIT, A_EXEC_START_DATE, A_EXEC_END_DATE,
                   A_EXECUTOR, A_LAB, A_EQ, A_EQ_VERSION, A_PLANNED_EXECUTOR,
                   A_PLANNED_EQ, A_PLANNED_EQ_VERSION,
                   A_MANUALLY_ENTERED, A_ALLOW_ADD, A_ASSIGN_DATE,
                   A_ASSIGNED_BY, A_MANUALLY_ADDED, A_DELAY, A_DELAY_UNIT,
                   A_FORMAT, A_ACCURACY, A_REAL_COST,
                   A_REAL_TIME, A_CALIBRATION, A_CONFIRM_COMPLETE,
                   A_AUTORECALC, A_ME_RESULT_EDITABLE, 
                   A_NEXT_CELL, A_SOP, A_SOP_VERSION, A_PLAUS_LOW,
                   A_PLAUS_HIGH, A_WINSIZE_X, A_WINSIZE_Y, 
                   A_ME_CLASS, A_LOG_HS, A_LOG_HS_DETAILS,
                   A_LC, A_LC_VERSION, A_NR_OF_ROWS));   
END INITSCPADETAILS;

FUNCTION SAVESCPARAMETER
(A_ALARMS_HANDLED   IN     CHAR,                       
 A_SC               IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PG               IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PGNODE           IN OUT UNAPIGEN.LONG_TABLE_TYPE,   
 A_PA               IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PANODE           IN OUT UNAPIGEN.LONG_TABLE_TYPE,   
 A_PR_VERSION       IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_DESCRIPTION      IN     UNAPIGEN.VC40_TABLE_TYPE,   
 A_VALUE_F          IN     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_VALUE_S          IN     UNAPIGEN.VC40_TABLE_TYPE,   
 A_UNIT             IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_EXEC_START_DATE  IN     UNAPIGEN.DATE_TABLE_TYPE,   
 A_EXEC_END_DATE    IN OUT UNAPIGEN.DATE_TABLE_TYPE,   
 A_EXECUTOR         IN OUT UNAPIGEN.VC20_TABLE_TYPE,   
 A_PLANNED_EXECUTOR IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_MANUALLY_ENTERED IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_ASSIGN_DATE      IN     UNAPIGEN.DATE_TABLE_TYPE,   
 A_ASSIGNED_BY      IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_MANUALLY_ADDED   IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_FORMAT           IN     UNAPIGEN.VC40_TABLE_TYPE,   
 A_TD_INFO          IN     UNAPIGEN.NUM_TABLE_TYPE,    
 A_TD_INFO_UNIT     IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_CONFIRM_UID      IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_ALLOW_ANY_ME     IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_DELAY            IN     UNAPIGEN.NUM_TABLE_TYPE,    
 A_DELAY_UNIT       IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_MIN_NR_RESULTS   IN     UNAPIGEN.NUM_TABLE_TYPE,    
 A_CALC_METHOD      IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_CALC_CF          IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_ALARM_ORDER      IN     UNAPIGEN.VC3_TABLE_TYPE,    
 A_VALID_SPECSA     IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_VALID_SPECSB     IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_VALID_SPECSC     IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_VALID_LIMITSA    IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_VALID_LIMITSB    IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_VALID_LIMITSC    IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_VALID_TARGETA    IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_VALID_TARGETB    IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_VALID_TARGETC    IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_MT               IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_MT_VERSION       IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_MT_NR_MEASUR     IN     UNAPIGEN.NUM_TABLE_TYPE,    
 A_LOG_EXCEPTIONS   IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_PA_CLASS         IN     UNAPIGEN.VC2_TABLE_TYPE,    
 A_LOG_HS           IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_LOG_HS_DETAILS   IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_LC               IN     UNAPIGEN.VC2_TABLE_TYPE,    
 A_LC_VERSION       IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_MODIFY_FLAG      IN OUT UNAPIGEN.NUM_TABLE_TYPE,    
 A_NR_OF_ROWS       IN     NUMBER,                     
 A_MODIFY_REASON    IN     VARCHAR2)                   
RETURN NUMBER IS

BEGIN
RETURN(UNAPIPA3.SAVESCPARAMETER(
                   A_ALARMS_HANDLED, A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, A_PR_VERSION, A_DESCRIPTION, 
                   A_VALUE_F, A_VALUE_S, A_UNIT, A_EXEC_START_DATE, A_EXEC_END_DATE, 
                   A_EXECUTOR, A_PLANNED_EXECUTOR, A_MANUALLY_ENTERED, A_ASSIGN_DATE, 
                   A_ASSIGNED_BY, A_MANUALLY_ADDED, A_FORMAT, A_TD_INFO, A_TD_INFO_UNIT, 
                   A_CONFIRM_UID, A_ALLOW_ANY_ME, A_DELAY, A_DELAY_UNIT, A_MIN_NR_RESULTS, 
                   A_CALC_METHOD, A_CALC_CF, A_ALARM_ORDER, A_VALID_SPECSA, A_VALID_SPECSB, 
                   A_VALID_SPECSC, A_VALID_LIMITSA, A_VALID_LIMITSB, A_VALID_LIMITSC, 
                   A_VALID_TARGETA, A_VALID_TARGETB, A_VALID_TARGETC, A_MT, A_MT_VERSION,
                   A_MT_NR_MEASUR, A_LOG_EXCEPTIONS, A_PA_CLASS, A_LOG_HS, A_LOG_HS_DETAILS,
                   A_LC, A_LC_VERSION,  A_MODIFY_FLAG, A_NR_OF_ROWS, A_MODIFY_REASON));
END SAVESCPARAMETER;

FUNCTION SAVESCPARESULT
(A_ALARMS_HANDLED    IN     CHAR,                      
 A_SC               IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PG               IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PGNODE           IN     UNAPIGEN.LONG_TABLE_TYPE,  
 A_PA               IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_PANODE           IN     UNAPIGEN.LONG_TABLE_TYPE,  
 A_VALUE_F          IN     UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_VALUE_S          IN     UNAPIGEN.VC40_TABLE_TYPE,  
 A_UNIT             IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_FORMAT           IN     UNAPIGEN.VC40_TABLE_TYPE,  
 A_EXEC_END_DATE    IN OUT UNAPIGEN.DATE_TABLE_TYPE,  
 A_EXECUTOR         IN OUT UNAPIGEN.VC20_TABLE_TYPE,  
 A_MANUALLY_ENTERED IN     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_REANALYSIS       OUT    UNAPIGEN.NUM_TABLE_TYPE,   
 A_MODIFY_FLAG      IN OUT UNAPIGEN.NUM_TABLE_TYPE,   
 A_NR_OF_ROWS       IN     NUMBER,                    
 A_MODIFY_REASON    IN     VARCHAR2)                  
RETURN NUMBER IS

BEGIN
RETURN(UNAPIPA2.SAVESCPARESULT(
                   A_ALARMS_HANDLED, A_SC, A_PG, A_PGNODE, A_PA, A_PANODE,
                   A_VALUE_F, A_VALUE_S, A_UNIT, A_FORMAT, A_EXEC_END_DATE,
                   A_EXECUTOR, A_MANUALLY_ENTERED, A_REANALYSIS,
                   A_MODIFY_FLAG, A_NR_OF_ROWS, A_MODIFY_REASON));
END SAVESCPARESULT;

FUNCTION REANALSCPARAMETER
(A_SC               IN    VARCHAR2,                 
 A_PG               IN    VARCHAR2,                 
 A_PGNODE           IN    NUMBER,                   
 A_PA               IN    VARCHAR2,                 
 A_PANODE           IN    NUMBER,                   
 A_REANALYSIS       OUT   NUMBER,                   
 A_MODIFY_REASON    IN    VARCHAR2)                 
RETURN NUMBER IS

BEGIN
RETURN(UNAPIPA2.REANALSCPARAMETER
       (A_SC, A_PG, A_PGNODE, A_PA, A_PANODE, A_REANALYSIS, A_MODIFY_REASON));
                
END REANALSCPARAMETER;

FUNCTION CONFIRMPAASSIGNMENT
(A_ALARMS_HANDLED   IN     CHAR,                       
 A_SC               IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PG               IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PGNODE           IN OUT UNAPIGEN.LONG_TABLE_TYPE,   
 A_PA               IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PANODE           IN OUT UNAPIGEN.LONG_TABLE_TYPE,   
 A_PR_VERSION       IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_DESCRIPTION      IN     UNAPIGEN.VC40_TABLE_TYPE,   
 A_VALUE_F          IN     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_VALUE_S          IN     UNAPIGEN.VC40_TABLE_TYPE,   
 A_UNIT             IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_EXEC_START_DATE  IN     UNAPIGEN.DATE_TABLE_TYPE,   
 A_EXEC_END_DATE    IN OUT UNAPIGEN.DATE_TABLE_TYPE,   
 A_EXECUTOR         IN OUT UNAPIGEN.VC20_TABLE_TYPE,   
 A_PLANNED_EXECUTOR IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_MANUALLY_ENTERED IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_ASSIGN_DATE      IN     UNAPIGEN.DATE_TABLE_TYPE,   
 A_ASSIGNED_BY      IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_MANUALLY_ADDED   IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_FORMAT           IN     UNAPIGEN.VC40_TABLE_TYPE,   
 A_TD_INFO          IN     UNAPIGEN.NUM_TABLE_TYPE,    
 A_TD_INFO_UNIT     IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_CONFIRM_UID      IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_ALLOW_ANY_ME     IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_DELAY            IN     UNAPIGEN.NUM_TABLE_TYPE,    
 A_DELAY_UNIT       IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_MIN_NR_RESULTS   IN     UNAPIGEN.NUM_TABLE_TYPE,    
 A_CALC_METHOD      IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_CALC_CF          IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_ALARM_ORDER      IN     UNAPIGEN.VC3_TABLE_TYPE,    
 A_VALID_SPECSA     IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_VALID_SPECSB     IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_VALID_SPECSC     IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_VALID_LIMITSA    IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_VALID_LIMITSB    IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_VALID_LIMITSC    IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_VALID_TARGETA    IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_VALID_TARGETB    IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_VALID_TARGETC    IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_MT               IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_MT_VERSION       IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_MT_NR_MEASUR     IN     UNAPIGEN.NUM_TABLE_TYPE,    
 A_LOG_EXCEPTIONS   IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_PA_CLASS         IN     UNAPIGEN.VC2_TABLE_TYPE,    
 A_LOG_HS           IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_LOG_HS_DETAILS   IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_LC               IN     UNAPIGEN.VC2_TABLE_TYPE,    
 A_LC_VERSION       IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_MODIFY_FLAG      IN OUT UNAPIGEN.NUM_TABLE_TYPE,    
 A_NR_OF_ROWS       IN     NUMBER,                     
 A_MODIFY_REASON    IN     VARCHAR2)                   
RETURN NUMBER IS

BEGIN 

RETURN(UNAPIPA2.CONFIRMPAASSIGNMENT
                (A_ALARMS_HANDLED,
                 A_SC,
                 A_PG,
                 A_PGNODE,
                 A_PA,
                 A_PANODE,
                 A_PR_VERSION,
                 A_DESCRIPTION,
                 A_VALUE_F,
                 A_VALUE_S,
                 A_UNIT,
                 A_EXEC_START_DATE,
                 A_EXEC_END_DATE,
                 A_EXECUTOR,
                 A_PLANNED_EXECUTOR,
                 A_MANUALLY_ENTERED,
                 A_ASSIGN_DATE,
                 A_ASSIGNED_BY,
                 A_MANUALLY_ADDED,
                 A_FORMAT,
                 A_TD_INFO,
                 A_TD_INFO_UNIT,
                 A_CONFIRM_UID,
                 A_ALLOW_ANY_ME,
                 A_DELAY,
                 A_DELAY_UNIT,
                 A_MIN_NR_RESULTS,
                 A_CALC_METHOD,
                 A_CALC_CF,
                 A_ALARM_ORDER,
                 A_VALID_SPECSA,
                 A_VALID_SPECSB,
                 A_VALID_SPECSC,
                 A_VALID_LIMITSA,
                 A_VALID_LIMITSB,
                 A_VALID_LIMITSC,
                 A_VALID_TARGETA,
                 A_VALID_TARGETB,
                 A_VALID_TARGETC,
                 A_MT,
                 A_MT_VERSION,
                 A_MT_NR_MEASUR,
                 A_LOG_EXCEPTIONS,
                 A_PA_CLASS,
                 A_LOG_HS,
                 A_LOG_HS_DETAILS,
                 A_LC,
                 A_LC_VERSION,
                 A_MODIFY_FLAG,
                 A_NR_OF_ROWS,
                A_MODIFY_REASON));
 
END CONFIRMPAASSIGNMENT;

FUNCTION UPDATETRENDINFO
(A_SC               IN    VARCHAR2,                 
 A_PG               IN    VARCHAR2,                 
 A_PGNODE           IN    NUMBER,                   
 A_PA               IN    VARCHAR2,                 
 A_PANODE           IN    NUMBER,                   
 A_VALUE_F          IN    FLOAT,                    
 A_VALUE_S          IN    VARCHAR2,                 
 A_EXEC_END_DATE    IN    DATE,                     
 A_TD_INFO          IN    NUMBER,                   
 A_TD_INFO_UNIT     IN    VARCHAR2,                 
 A_REANALYSIS       IN    NUMBER)                   
RETURN NUMBER IS

BEGIN

RETURN(UNAPIPA2.UPDATETRENDINFO
                (A_SC,
                 A_PG,
                 A_PGNODE,
                 A_PA,
                 A_PANODE,
                 A_VALUE_F,
                 A_VALUE_S,
                 A_EXEC_END_DATE,
                 A_TD_INFO,
                 A_TD_INFO_UNIT,
                 A_REANALYSIS));
 
END UPDATETRENDINFO;

FUNCTION GETSCPASQCSPECS
(A_SC               OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_PG               OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_PGNODE           OUT    UNAPIGEN.LONG_TABLE_TYPE,  
 A_PA               OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_PANODE           OUT    UNAPIGEN.LONG_TABLE_TYPE,  
 A_SQC_AVG          OUT    UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_SQC_SIGMA        OUT    UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_SQC_AVGR         OUT    UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SQC_UCLR         OUT    UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_VALID_SQC        OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NR_OF_ROWS       IN OUT NUMBER,                    
 A_WHERE_CLAUSE     IN     VARCHAR2)                  
RETURN NUMBER IS

L_SC               VARCHAR2(20);
L_PG               VARCHAR2(20);
L_PGNODE           NUMBER(9);
L_PA               VARCHAR2(20);
L_PANODE           NUMBER(9);
L_SQC_AVG          FLOAT;
L_SQC_SIGMA        FLOAT;
L_SQC_AVGR         FLOAT;
L_SQC_UCLR         FLOAT;
L_VALID_SQC        CHAR(1);
L_SCPASQC_CURSOR   INTEGER;


BEGIN
   IF NVL(A_NR_OF_ROWS, 0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      RETURN(UNAPIGEN.DBERR_WHERECLAUSE);
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_SCPASQC_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT sc, pg, pgnode, pa, panode, sqc_avg, sqc_sigma, ' ||
                   'sqc_avgr, sqc_uclr, valid_sqc FROM dd' || UNAPIGEN.P_DD ||
                   '.uvscpasqc '  || L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_SCPASQC_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   DBMS_SQL.DEFINE_COLUMN(L_SCPASQC_CURSOR, 1, L_SC, 20);
   DBMS_SQL.DEFINE_COLUMN(L_SCPASQC_CURSOR, 2, L_PG, 20);
   DBMS_SQL.DEFINE_COLUMN(L_SCPASQC_CURSOR, 3, L_PGNODE);
   DBMS_SQL.DEFINE_COLUMN(L_SCPASQC_CURSOR, 4, L_PA, 20);
   DBMS_SQL.DEFINE_COLUMN(L_SCPASQC_CURSOR, 5, L_PANODE);
   DBMS_SQL.DEFINE_COLUMN(L_SCPASQC_CURSOR, 6, L_SQC_AVG);
   DBMS_SQL.DEFINE_COLUMN(L_SCPASQC_CURSOR, 7, L_SQC_SIGMA);
   DBMS_SQL.DEFINE_COLUMN(L_SCPASQC_CURSOR, 8, L_SQC_AVGR);
   DBMS_SQL.DEFINE_COLUMN(L_SCPASQC_CURSOR, 9, L_SQC_UCLR);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_SCPASQC_CURSOR, 10, L_VALID_SQC,1);

   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_SCPASQC_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;
      DBMS_SQL.COLUMN_VALUE(L_SCPASQC_CURSOR, 1, L_SC);
      DBMS_SQL.COLUMN_VALUE(L_SCPASQC_CURSOR, 2, L_PG);
      DBMS_SQL.COLUMN_VALUE(L_SCPASQC_CURSOR, 3, L_PGNODE);
      DBMS_SQL.COLUMN_VALUE(L_SCPASQC_CURSOR, 4, L_PA);
      DBMS_SQL.COLUMN_VALUE(L_SCPASQC_CURSOR, 5, L_PANODE);
      DBMS_SQL.COLUMN_VALUE(L_SCPASQC_CURSOR, 6, L_SQC_AVG);
      DBMS_SQL.COLUMN_VALUE(L_SCPASQC_CURSOR, 7, L_SQC_SIGMA);
      DBMS_SQL.COLUMN_VALUE(L_SCPASQC_CURSOR, 8, L_SQC_AVGR);
      DBMS_SQL.COLUMN_VALUE(L_SCPASQC_CURSOR, 9, L_SQC_UCLR);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_SCPASQC_CURSOR, 10, L_VALID_SQC);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_SC(L_FETCHED_ROWS) := L_SC;
      A_PG(L_FETCHED_ROWS) := L_PG;
      A_PGNODE(L_FETCHED_ROWS) := L_PGNODE;
      A_PA(L_FETCHED_ROWS) := L_PA;
      A_PANODE(L_FETCHED_ROWS) := L_PANODE;
      A_SQC_AVG(L_FETCHED_ROWS) := L_SQC_AVG;
      A_SQC_SIGMA(L_FETCHED_ROWS) := L_SQC_SIGMA;
      A_SQC_AVGR(L_FETCHED_ROWS) := L_SQC_AVGR;
      A_SQC_UCLR(L_FETCHED_ROWS) := L_SQC_UCLR;
      A_VALID_SQC(L_FETCHED_ROWS) := L_VALID_SQC;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_SCPASQC_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_SCPASQC_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
              'GetScPaSQCSpecs', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN(L_SCPASQC_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(L_SCPASQC_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETSCPASQCSPECS;

FUNCTION GETRESCPASQCSPECS
(A_SC               OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_PG               OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_PGNODE           OUT    UNAPIGEN.LONG_TABLE_TYPE,  
 A_PA               OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_PANODE           OUT    UNAPIGEN.LONG_TABLE_TYPE,  
 A_REANALYSIS       OUT    UNAPIGEN.NUM_TABLE_TYPE,   
 A_SQC_AVG          OUT    UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_SQC_SIGMA        OUT    UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_SQC_AVGR         OUT    UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_SQC_UCLR         OUT    UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_VALID_SQC        OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NR_OF_ROWS       IN OUT NUMBER,                    
 A_WHERE_CLAUSE     IN     VARCHAR2)                  
RETURN NUMBER IS

L_SC               VARCHAR2(20);
L_PG               VARCHAR2(20);
L_PGNODE           NUMBER(9);
L_PA               VARCHAR2(20);
L_PANODE           NUMBER(9);
L_REANALYSIS       NUMBER;
L_SQC_AVG          FLOAT;
L_SQC_SIGMA        FLOAT;
L_SQC_AVGR         FLOAT;
L_SQC_UCLR         FLOAT;
L_VALID_SQC        CHAR(1);
L_RSCPASQC_CURSOR  INTEGER;


BEGIN
   IF NVL(A_NR_OF_ROWS, 0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      RETURN(UNAPIGEN.DBERR_WHERECLAUSE);
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_RSCPASQC_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT sc, pg, pgnode, pa, panode, reanalysis, sqc_avg, sqc_sigma, ' ||
                   'sqc_avgr, sqc_uclr, valid_sqc FROM dd' || UNAPIGEN.P_DD ||
                   '.uvscpasqc '  || L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_RSCPASQC_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   DBMS_SQL.DEFINE_COLUMN(L_RSCPASQC_CURSOR, 1, L_SC, 20);
   DBMS_SQL.DEFINE_COLUMN(L_RSCPASQC_CURSOR, 2, L_PG, 20);
   DBMS_SQL.DEFINE_COLUMN(L_RSCPASQC_CURSOR, 3, L_PGNODE);
   DBMS_SQL.DEFINE_COLUMN(L_RSCPASQC_CURSOR, 4, L_PA, 20);
   DBMS_SQL.DEFINE_COLUMN(L_RSCPASQC_CURSOR, 5, L_PANODE);
   DBMS_SQL.DEFINE_COLUMN(L_RSCPASQC_CURSOR, 6, L_REANALYSIS);
   DBMS_SQL.DEFINE_COLUMN(L_RSCPASQC_CURSOR, 7, L_SQC_AVG);
   DBMS_SQL.DEFINE_COLUMN(L_RSCPASQC_CURSOR, 8, L_SQC_SIGMA);
   DBMS_SQL.DEFINE_COLUMN(L_RSCPASQC_CURSOR, 9, L_SQC_AVGR);
   DBMS_SQL.DEFINE_COLUMN(L_RSCPASQC_CURSOR, 10, L_SQC_UCLR);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_RSCPASQC_CURSOR, 11, L_VALID_SQC,1 );

   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_RSCPASQC_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;
      DBMS_SQL.COLUMN_VALUE(L_RSCPASQC_CURSOR, 1, L_SC);
      DBMS_SQL.COLUMN_VALUE(L_RSCPASQC_CURSOR, 2, L_PG);
      DBMS_SQL.COLUMN_VALUE(L_RSCPASQC_CURSOR, 3, L_PGNODE);
      DBMS_SQL.COLUMN_VALUE(L_RSCPASQC_CURSOR, 4, L_PA);
      DBMS_SQL.COLUMN_VALUE(L_RSCPASQC_CURSOR, 5, L_PANODE);
      DBMS_SQL.COLUMN_VALUE(L_RSCPASQC_CURSOR, 6, L_REANALYSIS);
      DBMS_SQL.COLUMN_VALUE(L_RSCPASQC_CURSOR, 7, L_SQC_AVG);
      DBMS_SQL.COLUMN_VALUE(L_RSCPASQC_CURSOR, 8, L_SQC_SIGMA);
      DBMS_SQL.COLUMN_VALUE(L_RSCPASQC_CURSOR, 9, L_SQC_AVGR);
      DBMS_SQL.COLUMN_VALUE(L_RSCPASQC_CURSOR, 10, L_SQC_UCLR);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_RSCPASQC_CURSOR, 11, L_VALID_SQC);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_SC(L_FETCHED_ROWS) := L_SC;
      A_PG(L_FETCHED_ROWS) := L_PG;
      A_PGNODE(L_FETCHED_ROWS) := L_PGNODE;
      A_PA(L_FETCHED_ROWS) := L_PA;
      A_PANODE(L_FETCHED_ROWS) := L_PANODE;
      A_REANALYSIS(L_FETCHED_ROWS) := L_REANALYSIS;
      A_SQC_AVG(L_FETCHED_ROWS) := L_SQC_AVG;
      A_SQC_SIGMA(L_FETCHED_ROWS) := L_SQC_SIGMA;
      A_SQC_AVGR(L_FETCHED_ROWS) := L_SQC_AVGR;
      A_SQC_UCLR(L_FETCHED_ROWS) := L_SQC_UCLR;
      A_VALID_SQC(L_FETCHED_ROWS) := L_VALID_SQC;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_RSCPASQC_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_RSCPASQC_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetReScPaSQCSpecs', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN(L_RSCPASQC_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(L_RSCPASQC_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETRESCPASQCSPECS;

FUNCTION GETSCPACHARTLIST
(
 A_SC                IN       VARCHAR2,                       
 A_PG                IN       VARCHAR2,                       
 A_PGNODE            IN       NUMBER,                         
 A_PA                IN       VARCHAR2,                       
 A_PANODE            IN       NUMBER,                         
 A_CH                OUT      UNAPIGEN.VC20_TABLE_TYPE,  
 A_CY                OUT      UNAPIGEN.VC20_TABLE_TYPE,  
 A_CY_VERSION        OUT      UNAPIGEN.VC20_TABLE_TYPE,  
 A_DESCRIPTION       OUT      UNAPIGEN.VC40_TABLE_TYPE,  
 A_CREATION_DATE     OUT      UNAPIGEN.DATE_TABLE_TYPE,  
 A_CH_CONTEXT_KEY    OUT      UNAPIGEN.VC255_TABLE_TYPE, 
 A_VISUAL_CF         OUT      UNAPIGEN.VC255_TABLE_TYPE, 
 A_SS                OUT      UNAPIGEN.VC2_TABLE_TYPE,   
 A_NR_OF_ROWS        IN OUT   NUMBER)                    
RETURN NUMBER IS

 L_CH                         VARCHAR2(20);
 L_CY                         VARCHAR2(20);
 L_CY_VERSION                 VARCHAR2(20);
 L_DESCRIPTION                VARCHAR2(40);
 L_CREATION_DATE              TIMESTAMP WITH TIME ZONE;
 L_CH_CONTEXT_KEY             VARCHAR2(255);
 L_VISUAL_CF                  VARCHAR2(255);
 L_SS                         VARCHAR2(2);
 L_PACH_CURSOR                INTEGER;
 L_DATAPOINT_LINK             VARCHAR2(255);
 L_CONVERTED_CH_CONTEXT_KEY   VARCHAR2(255);
 L_ST                         VARCHAR2(20);
 L_ST_VERSION                 VARCHAR2(20);
 L_PA_EXEC_END_DATE           TIMESTAMP WITH TIME ZONE;
 L_SCPG_PP_VERSION            VARCHAR2(20);
 L_SCPG_PP_KEY1               VARCHAR2(20);
 L_SCPG_PP_KEY2               VARCHAR2(20);
 L_SCPG_PP_KEY3               VARCHAR2(20);
 L_SCPG_PP_KEY4               VARCHAR2(20);
 L_SCPG_PP_KEY5               VARCHAR2(20);  
 L_PR_VERSION                 VARCHAR2(20);
 L_CH_CONTEXT_KEY_TO_SEARCH   VARCHAR2(255);
 
 CURSOR C_ST(A_SC IN VARCHAR2) IS
 SELECT ST, ST_VERSION 
   FROM UTSC 
  WHERE SC = A_SC;

 CURSOR L_SCPG_CURSOR(A_SC IN VARCHAR2,
                      A_PG IN VARCHAR2,
                      A_PGNODE IN NUMBER) IS
    SELECT PP_VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5
    FROM UTSCPG
    WHERE SC = A_SC
    AND PG = A_PG
    AND PGNODE = A_PGNODE;

CURSOR C_CY (C_PR VARCHAR2, C_PR_VERSION VARCHAR2, C_ST VARCHAR2, C_ST_VERSION VARCHAR2 ) IS
   SELECT DISTINCT CY, CY_VERSION
   FROM UTPRCYST
   WHERE PR = C_PR 
     AND VERSION = NVL(C_PR_VERSION, UNAPIGEN.USEVERSION('pr', C_PR, '*'))
     AND NVL(ST, C_ST) = C_ST 
     AND NVL(DECODE(ST_VERSION, '~Current~',NULL, ST_VERSION), C_ST_VERSION) = C_ST_VERSION
   ORDER BY CY;

BEGIN

   IF NVL(A_NR_OF_ROWS, 0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   L_DATAPOINT_LINK  := A_SC|| '#'|| A_PG || '#' || A_PGNODE || '#' || A_PA|| '#' || A_PANODE|| '#%';  
   L_WHERE_CLAUSE := 'WHERE a.ch in (select b.ch from utchdp b where b.datapoint_link  like :a_datapoint_link)';

   L_PACH_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT a.ch, a.cy, a.cy_version, a.description, a.creation_date, a.ch_context_key, a.visual_cf, a.ss ' ||
                   ' FROM dd' || UNAPIGEN.P_DD ||
                   '.uvch a '|| L_WHERE_CLAUSE  ;
  
   DBMS_SQL.PARSE(L_PACH_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   DBMS_SQL.BIND_VARIABLE(L_PACH_CURSOR, ':a_datapoint_link',        L_DATAPOINT_LINK);         
   DBMS_SQL.DEFINE_COLUMN(L_PACH_CURSOR,  1,   L_CH               ,  20);
   DBMS_SQL.DEFINE_COLUMN(L_PACH_CURSOR,  2,   L_CY               ,  20);
   DBMS_SQL.DEFINE_COLUMN(L_PACH_CURSOR,  3,   L_CY_VERSION       ,  20);
   DBMS_SQL.DEFINE_COLUMN(L_PACH_CURSOR,  4,   L_DESCRIPTION      ,  40);
   DBMS_SQL.DEFINE_COLUMN(L_PACH_CURSOR,  5,   L_CREATION_DATE         );
   DBMS_SQL.DEFINE_COLUMN(L_PACH_CURSOR,  6,   L_CH_CONTEXT_KEY   , 255);
   DBMS_SQL.DEFINE_COLUMN(L_PACH_CURSOR,  7,   L_VISUAL_CF        , 255);
   DBMS_SQL.DEFINE_COLUMN(L_PACH_CURSOR,  8,   L_SS               ,  2 );

   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_PACH_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;
      DBMS_SQL.COLUMN_VALUE(L_PACH_CURSOR, 1   , L_CH             );
      DBMS_SQL.COLUMN_VALUE(L_PACH_CURSOR, 2   , L_CY             );
      DBMS_SQL.COLUMN_VALUE(L_PACH_CURSOR, 3   , L_CY_VERSION     );
      DBMS_SQL.COLUMN_VALUE(L_PACH_CURSOR, 4   , L_DESCRIPTION    );
      DBMS_SQL.COLUMN_VALUE(L_PACH_CURSOR, 5   , L_CREATION_DATE  );
      DBMS_SQL.COLUMN_VALUE(L_PACH_CURSOR, 6   , L_CH_CONTEXT_KEY );
      DBMS_SQL.COLUMN_VALUE(L_PACH_CURSOR, 7   , L_VISUAL_CF      );
      DBMS_SQL.COLUMN_VALUE(L_PACH_CURSOR, 8   , L_SS             );

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_CH             (L_FETCHED_ROWS) := L_CH               ;
      A_CY             (L_FETCHED_ROWS) := L_CY               ;
      A_CY_VERSION     (L_FETCHED_ROWS) := L_CY_VERSION       ;
      A_DESCRIPTION    (L_FETCHED_ROWS) := L_DESCRIPTION      ;
      A_CREATION_DATE  (L_FETCHED_ROWS) := L_CREATION_DATE    ;
      A_CH_CONTEXT_KEY (L_FETCHED_ROWS) := L_CH_CONTEXT_KEY   ;
      A_VISUAL_CF      (L_FETCHED_ROWS) := L_VISUAL_CF        ;
      A_SS             (L_FETCHED_ROWS) := L_SS               ;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_PACH_CURSOR);
      END IF;
   END LOOP;

   
   
   IF L_FETCHED_ROWS = 0 THEN
      
      BEGIN
         SELECT EXEC_END_DATE, PR_VERSION
         INTO L_PA_EXEC_END_DATE, L_PR_VERSION
         FROM UTSCPA
         WHERE SC = A_SC 
           AND PG = A_PG 
           AND PGNODE = A_PGNODE 
           AND PA = A_PA
           AND PANODE = A_PANODE;
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
         
         
         L_PA_EXEC_END_DATE := NULL;
      END;          
      
      IF L_PA_EXEC_END_DATE IS NULL THEN
         OPEN C_ST (A_SC);
         FETCH C_ST 
         INTO L_ST, L_ST_VERSION;
         CLOSE C_ST;  
         
         OPEN L_SCPG_CURSOR(A_SC, A_PG, A_PGNODE);
         FETCH L_SCPG_CURSOR 
         INTO L_SCPG_PP_VERSION, L_SCPG_PP_KEY1, L_SCPG_PP_KEY2, L_SCPG_PP_KEY3, L_SCPG_PP_KEY4, L_SCPG_PP_KEY5;
         CLOSE L_SCPG_CURSOR;

         L_CH_CONTEXT_KEY_TO_SEARCH  := L_ST ||'#'|| A_PG ||'#'|| L_SCPG_PP_KEY1 ||'#'|| L_SCPG_PP_KEY2 ||'#'|| L_SCPG_PP_KEY3 ||'#'|| L_SCPG_PP_KEY4 ||'#'|| L_SCPG_PP_KEY5 ||'#'|| A_PA;  
         
         L_SQL_STRING := 'SELECT a.ch, a.cy, a.cy_version, a.description, a.creation_date, a.ch_context_key, a.visual_cf, a.ss ' ||
                         'FROM ' ||
                         '(SELECT b.*, ' ||
                                     'dense_rank() over (PARTITION BY b.cy ORDER BY NVL(b.creation_date, TO_TIMESTAMP_TZ(''1/1/0001'', ''DD/MM/YYYY'')) DESC ) rank '||
                                     'FROM dd' || UNAPIGEN.P_DD || '.uvch b ' || 
                                     'WHERE b.exec_end_date IS NULL '||
                                     'AND b.cy =:a_cy '||
                                     'AND b.ch_context_key =:a_ch_context_key '||
                         ') a WHERE a.rank = 1 ';
         L_FETCHED_ROWS := 0;
         FOR L_CY_REC IN C_CY (A_PA, L_PR_VERSION, L_ST , L_ST_VERSION ) LOOP
            
            L_CONVERTED_CH_CONTEXT_KEY := L_CH_CONTEXT_KEY_TO_SEARCH;
            L_RET_CODE := UNSQCASSIGN.ADJUSTCONTEXTKEY(L_CY_REC.CY, L_CONVERTED_CH_CONTEXT_KEY, L_DATAPOINT_LINK);
            DBMS_SQL.PARSE(L_PACH_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
            DBMS_SQL.BIND_VARIABLE(L_PACH_CURSOR, ':a_cy',                    L_CY_REC.CY);         
            DBMS_SQL.BIND_VARIABLE(L_PACH_CURSOR, ':a_ch_context_key',        L_CONVERTED_CH_CONTEXT_KEY);         
            DBMS_SQL.DEFINE_COLUMN(L_PACH_CURSOR,  1,   L_CH               ,  20);
            DBMS_SQL.DEFINE_COLUMN(L_PACH_CURSOR,  2,   L_CY               ,  20);
            DBMS_SQL.DEFINE_COLUMN(L_PACH_CURSOR,  3,   L_CY_VERSION       ,  20);
            DBMS_SQL.DEFINE_COLUMN(L_PACH_CURSOR,  4,   L_DESCRIPTION      ,  40);
            DBMS_SQL.DEFINE_COLUMN(L_PACH_CURSOR,  5,   L_CREATION_DATE         );
            DBMS_SQL.DEFINE_COLUMN(L_PACH_CURSOR,  6,   L_CH_CONTEXT_KEY   , 255);
            DBMS_SQL.DEFINE_COLUMN(L_PACH_CURSOR,  7,   L_VISUAL_CF        , 255);
            DBMS_SQL.DEFINE_COLUMN(L_PACH_CURSOR,  8,   L_SS               ,  2 );

            L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_PACH_CURSOR);

            LOOP
               EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;
               DBMS_SQL.COLUMN_VALUE(L_PACH_CURSOR, 1   , L_CH             );
               DBMS_SQL.COLUMN_VALUE(L_PACH_CURSOR, 2   , L_CY             );
               DBMS_SQL.COLUMN_VALUE(L_PACH_CURSOR, 3   , L_CY_VERSION     );
               DBMS_SQL.COLUMN_VALUE(L_PACH_CURSOR, 4   , L_DESCRIPTION    );
               DBMS_SQL.COLUMN_VALUE(L_PACH_CURSOR, 5   , L_CREATION_DATE  );
               DBMS_SQL.COLUMN_VALUE(L_PACH_CURSOR, 6   , L_CH_CONTEXT_KEY );
               DBMS_SQL.COLUMN_VALUE(L_PACH_CURSOR, 7   , L_VISUAL_CF      );
               DBMS_SQL.COLUMN_VALUE(L_PACH_CURSOR, 8   , L_SS             );

               L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

               A_CH             (L_FETCHED_ROWS) := L_CH               ;
               A_CY             (L_FETCHED_ROWS) := L_CY               ;
               A_CY_VERSION     (L_FETCHED_ROWS) := L_CY_VERSION       ;
               A_DESCRIPTION    (L_FETCHED_ROWS) := L_DESCRIPTION      ;
               A_CREATION_DATE  (L_FETCHED_ROWS) := L_CREATION_DATE    ;
               A_CH_CONTEXT_KEY (L_FETCHED_ROWS) := L_CH_CONTEXT_KEY   ;
               A_VISUAL_CF      (L_FETCHED_ROWS) := L_VISUAL_CF        ;
               A_SS             (L_FETCHED_ROWS) := L_SS               ;

               IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
                  L_RESULT := DBMS_SQL.FETCH_ROWS(L_PACH_CURSOR);
               END IF;
            END LOOP;
         END LOOP;
      END IF;
   END IF;
      
   DBMS_SQL.CLOSE_CURSOR(L_PACH_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
              'GetScPaChartList', L_SQLERRM);
      COMMIT;
      IF DBMS_SQL.IS_OPEN(L_PACH_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(L_PACH_CURSOR);
      END IF;
      IF L_SCPG_CURSOR%ISOPEN THEN
         CLOSE L_SCPG_CURSOR;
      END IF;
      IF C_ST%ISOPEN THEN
         CLOSE C_ST;
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETSCPACHARTLIST;

FUNCTION COPYAVAILABLEPARESULT                 
(A_SC               IN   VARCHAR2,             
 A_PG               IN   VARCHAR2,             
 A_PGNODE           IN   NUMBER,               
 A_PA               IN   VARCHAR2,             
 A_PANODE           IN   NUMBER)               
RETURN NUMBER IS

BEGIN
   RETURN(UNAPIPA2.COPYAVAILABLEPARESULT(A_SC, A_PG, A_PGNODE, A_PA, A_PANODE));
END COPYAVAILABLEPARESULT;

END UNAPIPA;
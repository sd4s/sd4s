PACKAGE BODY unapifi AS

L_SQLERRM         VARCHAR2(255);
L_SQL_STRING      VARCHAR2(4000);
L_WHERE_CLAUSE    VARCHAR2(1000);
L_EVENT_TP        UTEV.EV_TP%TYPE;
L_EV_DETAILS      VARCHAR2(255);
L_RET_CODE        NUMBER;
L_RESULT          NUMBER;
L_FETCHED_ROWS    NUMBER;
L_EV_SEQ_NR       NUMBER;
STPERROR          EXCEPTION;

P_FI_CURSOR    INTEGER;

FUNCTION GETVERSION
   RETURN VARCHAR2
IS
BEGIN
   RETURN('06.07.00.00_00.13');
EXCEPTION
   WHEN OTHERS THEN
      RETURN (NULL);
END GETVERSION;

FUNCTION GETBLOB
(A_ID              IN       VARCHAR2,
 A_DESCRIPTION     OUT      VARCHAR2,
 A_OBJECT_LINK     OUT      VARCHAR2,
 A_KEY_1           OUT      VARCHAR2,
 A_KEY_2           OUT      VARCHAR2,
 A_KEY_3           OUT      VARCHAR2,
 A_KEY_4           OUT      VARCHAR2,
 A_KEY_5           OUT      VARCHAR2,   
 A_URL             OUT      VARCHAR2,
 A_DATA            OUT      BLOB) 
RETURN NUMBER IS
BEGIN
   IF NVL(A_ID, ' ') = ' ' THEN
      RETURN(UNAPIGEN.DBERR_NOOBJID);
   END IF;

   L_SQL_STRING :=   'SELECT description, object_link, key1, key2, key3, key4, key5, url, data '
                   ||'FROM dd'||UNAPIGEN.P_DD||'.uvblob '
                   ||'WHERE id = :a_id';
   BEGIN
      EXECUTE IMMEDIATE L_SQL_STRING
      INTO A_DESCRIPTION, A_OBJECT_LINK, A_KEY_1, A_KEY_2, A_KEY_3, A_KEY_4, A_KEY_5, A_URL, A_DATA
      USING A_ID;
   EXCEPTION
      WHEN NO_DATA_FOUND THEN
         
         NULL;
   END;
   
   IF NOT SQL%FOUND THEN
      RETURN(UNAPIGEN.DBERR_NOOBJECT);
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS); 
EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetBlob', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETBLOB;

FUNCTION SAVEBLOB
(A_ID              IN       VARCHAR2,
 A_DESCRIPTION     IN       VARCHAR2,
 A_OBJECT_LINK     IN       VARCHAR2,
 A_KEY_1           IN       VARCHAR2,
 A_KEY_2           IN       VARCHAR2,
 A_KEY_3           IN       VARCHAR2,
 A_KEY_4           IN       VARCHAR2,
 A_KEY_5           IN       VARCHAR2,   
 A_URL             IN       VARCHAR2,
 A_DATA            IN       BLOB,
 A_MODIFY_REASON   IN       VARCHAR2)
RETURN NUMBER IS

CURSOR L_BLOB_CURSOR IS
   SELECT COUNT(*) NR
     FROM UTBLOB 
    WHERE ID = A_ID;
L_COUNT      INTEGER;

CURSOR L_HS_CURSOR IS
   SELECT LOG_HS
     FROM UTOBJECTS
    WHERE OBJECT = 'blob';
L_LOG_HS     CHAR(1);

BEGIN
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_ID, ' ')= ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR ;
   END IF;

   L_COUNT := 0;
   FOR L_BLOB_REC IN L_BLOB_CURSOR LOOP
      L_COUNT := L_BLOB_REC.NR;
   END LOOP;

   IF L_COUNT > 0 THEN                        
      UPDATE UTBLOB 
      SET DESCRIPTION  = A_DESCRIPTION,
          OBJECT_LINK  = A_OBJECT_LINK,
          KEY1         = A_KEY_1,
          KEY2         = A_KEY_2,
          KEY3         = A_KEY_3,
          KEY4         = A_KEY_4,
          KEY5         = A_KEY_5,
          URL          = A_URL,
          DATA         = A_DATA
      WHERE ID = A_ID;
      L_EVENT_TP := 'ObjectUpdated';
   ELSE                                       
      INSERT INTO UTBLOB(ID, DESCRIPTION, OBJECT_LINK, KEY1, KEY2, KEY3, 
                         KEY4, KEY5, URL, DATA)
      VALUES(A_ID, A_DESCRIPTION, A_OBJECT_LINK, A_KEY_1, A_KEY_2, A_KEY_3, 
             A_KEY_4, A_KEY_5, A_URL, A_DATA);
      L_EVENT_TP := 'ObjectCreated';
   END IF;
     
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT('SaveBlob', UNAPIGEN.P_EVMGR_NAME, 'blob', A_ID, '', '', '', 
                                   L_EVENT_TP, '', L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;
   
   FOR L_HS_REC IN L_HS_CURSOR LOOP
      L_LOG_HS := L_HS_REC.LOG_HS;
   END LOOP;

   IF NVL(L_LOG_HS,' ') = '1' THEN
      INSERT INTO UTBLOBHS(ID, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES(A_ID, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 'History switched ON', 
             'Audit trail is turned on.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   ELSE
      INSERT INTO UTBLOBHS(ID, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES(A_ID, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 'History switched OFF', 
             'Audit trail is turned off.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   IF NVL(L_LOG_HS,' ') = '1' THEN
      IF L_EVENT_TP = 'ObjectCreated' THEN
         INSERT INTO UTBLOBHS(ID, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES(A_ID, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                'blob "'||A_ID||'" is created.', 
                CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      ELSE
         INSERT INTO UTBLOBHS(ID, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES(A_ID, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                'blob "'||A_ID||'" is updated.', 
                CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE <> 1 THEN
           UNAPIGEN.LOGERROR('SaveBlob', SQLERRM);
      END IF;
      RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveBlob'));
END SAVEBLOB;

FUNCTION DELETEDOCUMENT
(A_ID              IN       VARCHAR2,    
 A_MODIFY_REASON   IN       VARCHAR2)    
RETURN NUMBER IS
BEGIN
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_ID, ' ')= ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR ;
   END IF;











   IF INSTR(A_ID, '#BLB')<>0 THEN
      DELETE FROM UTBLOBHS
      WHERE ID = A_ID;

      DELETE FROM UTBLOB
      WHERE ID = A_ID;
   ELSE
      DELETE FROM UTLONGTEXT
      WHERE DOC_NAME = A_ID;
   END IF;   

   L_EVENT_TP := 'ObjectDeleted';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT('DeleteDocument', UNAPIGEN.P_EVMGR_NAME, 'blob', A_ID, '', '', '', 
                                   L_EVENT_TP, '', L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE <> 1 THEN
         UNAPIGEN.LOGERROR('DeleteDocument',SQLERRM);
      END IF ;
      RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'DeleteDocument'));
END DELETEDOCUMENT;

FUNCTION COPYDOCUMENT
(A_ORIGINAL_ID     IN       VARCHAR2,    
 A_NEW_ID          IN       VARCHAR2,    
 A_MODIFY_REASON   IN       VARCHAR2)    
RETURN NUMBER IS

CURSOR L_HS_CURSOR IS
   SELECT LOG_HS
     FROM UTOBJECTS
    WHERE OBJECT = 'blob';
L_LOG_HS     CHAR(1);

BEGIN
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_ORIGINAL_ID, ' ')= ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR ;
   END IF;
   IF NVL(A_NEW_ID, ' ')= ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR ;
   END IF;

   IF INSTR(A_ORIGINAL_ID, '#BLB')<>0 THEN
      INSERT INTO UTBLOB 
      (       ID      , DESCRIPTION, OBJECT_LINK, KEY1, KEY2, KEY3,KEY4,KEY5, URL, DATA)
      SELECT  A_NEW_ID, DESCRIPTION, OBJECT_LINK, KEY1, KEY2, KEY3,KEY4,KEY5, URL, DATA 
      FROM UTBLOB 
      WHERE ID = A_ORIGINAL_ID;
   ELSE
      INSERT INTO UTLONGTEXT 
      (         OBJ_ID, OBJ_TP, OBJ_VERSION,   DOC_ID, DOC_TP, DOC_NAME, LINE_NBR, TEXT_LINE)
      SELECT    OBJ_ID, OBJ_TP, OBJ_VERSION, A_NEW_ID, DOC_TP, A_NEW_ID, LINE_NBR, TEXT_LINE
      FROM UTLONGTEXT
      WHERE DOC_NAME = A_ORIGINAL_ID;
   END IF;
   L_EVENT_TP := 'ObjectCopied';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT('CopyDocument', UNAPIGEN.P_EVMGR_NAME, 'blob', A_NEW_ID, '', '', '', 
                                   L_EVENT_TP, 'original_id="' || A_ORIGINAL_ID||'"', L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF INSTR(A_ORIGINAL_ID, '#BLB')<>0 THEN
      OPEN L_HS_CURSOR;
      FETCH L_HS_CURSOR
      INTO L_LOG_HS;
      IF L_HS_CURSOR%NOTFOUND THEN
         L_LOG_HS := '1';
      END IF;
      CLOSE L_HS_CURSOR;
      
      IF NVL(L_LOG_HS,' ') = '1' THEN
        INSERT INTO UTBLOBHS(ID, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
        VALUES(A_NEW_ID, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
               'document "'||A_NEW_ID||'" is created as copy from "'||A_ORIGINAL_ID||'".', 
               CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   END IF;
   
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('CopyDocument',SQLERRM);
   END IF ;
   IF L_HS_CURSOR%ISOPEN THEN
      CLOSE L_HS_CURSOR;
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'CopyDocument'));
END COPYDOCUMENT;

FUNCTION GETFILELIST
(A_FI                      OUT      UNAPIGEN.VC20_TABLE_TYPE,  
 A_VERSION                 OUT      UNAPIGEN.VC20_TABLE_TYPE,  
 A_VERSION_IS_CURRENT      OUT      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_EFFECTIVE_FROM          OUT      UNAPIGEN.DATE_TABLE_TYPE,  
 A_EFFECTIVE_TILL          OUT      UNAPIGEN.DATE_TABLE_TYPE,  
 A_SS                      OUT      UNAPIGEN.VC2_TABLE_TYPE,   
 A_NR_OF_ROWS              IN OUT   NUMBER,                    
 A_WHERE_CLAUSE            IN       VARCHAR2,                  
 A_NEXT_ROWS               IN       NUMBER)                    
RETURN NUMBER IS

L_FI                  VARCHAR2(20);
L_VERSION             VARCHAR2(20);
L_VERSION_IS_CURRENT  CHAR(1);
L_EFFECTIVE_FROM      TIMESTAMP WITH TIME ZONE;
L_EFFECTIVE_TILL      TIMESTAMP WITH TIME ZONE;
L_SS                  VARCHAR2(2);

BEGIN
   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_FI_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_FI_CURSOR);
         P_FI_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_FI_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      IF P_FI_CURSOR IS NULL THEN
         P_FI_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;

      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
         L_WHERE_CLAUSE := 'WHERE active = ''1'' ORDER BY fi, version'; 
      ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
         L_WHERE_CLAUSE := 'WHERE version_is_current = ''1'' '||
                           'AND fi = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                           ''' ORDER BY fi, version';
      ELSE
         L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
      END IF;

      L_SQL_STRING := 'SELECT fi, version, version_is_current, ' ||
                      'effective_from, effective_till, ss ' ||
                      'FROM dd' || UNAPIGEN.P_DD || '.uvfi ' || L_WHERE_CLAUSE;

      DBMS_SQL.PARSE(P_FI_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

      DBMS_SQL.DEFINE_COLUMN     (P_FI_CURSOR, 1, L_FI,                 20);
      DBMS_SQL.DEFINE_COLUMN     (P_FI_CURSOR, 2, L_VERSION,            20);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_FI_CURSOR, 3, L_VERSION_IS_CURRENT,  1);   
      DBMS_SQL.DEFINE_COLUMN     (P_FI_CURSOR, 4, L_EFFECTIVE_FROM        );
      DBMS_SQL.DEFINE_COLUMN     (P_FI_CURSOR, 5, L_EFFECTIVE_TILL        );
      DBMS_SQL.DEFINE_COLUMN     (P_FI_CURSOR, 6, L_SS,                  2);
      L_RESULT := DBMS_SQL.EXECUTE(P_FI_CURSOR);
   END IF;
   
   L_RESULT := DBMS_SQL.FETCH_ROWS(P_FI_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE     (P_FI_CURSOR, 1, L_FI);
      DBMS_SQL.COLUMN_VALUE     (P_FI_CURSOR, 2, L_VERSION);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_FI_CURSOR, 3, L_VERSION_IS_CURRENT);   
      DBMS_SQL.COLUMN_VALUE     (P_FI_CURSOR, 4, L_EFFECTIVE_FROM);
      DBMS_SQL.COLUMN_VALUE     (P_FI_CURSOR, 5, L_EFFECTIVE_TILL);
      DBMS_SQL.COLUMN_VALUE     (P_FI_CURSOR, 6, L_SS);
   
      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_FI                (L_FETCHED_ROWS) := L_FI;
      A_VERSION           (L_FETCHED_ROWS) := L_VERSION;
      A_VERSION_IS_CURRENT(L_FETCHED_ROWS) := L_VERSION_IS_CURRENT;
      A_EFFECTIVE_FROM    (L_FETCHED_ROWS) := L_EFFECTIVE_FROM;
      A_EFFECTIVE_TILL    (L_FETCHED_ROWS) := L_EFFECTIVE_TILL;
      A_SS                (L_FETCHED_ROWS) := L_SS;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_FI_CURSOR);
      END IF;
   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
      DBMS_SQL.CLOSE_CURSOR(P_FI_CURSOR);
      P_FI_CURSOR := NULL;
      RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_FI_CURSOR);
      P_FI_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF ;

   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
             'GetFileList', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN(P_FI_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(P_FI_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETFILELIST;

FUNCTION GETFILE
(A_FI                  OUT      UNAPIGEN.VC20_TABLE_TYPE,  
 A_VERSION             OUT      UNAPIGEN.VC20_TABLE_TYPE,  
 A_VERSION_IS_CURRENT  OUT      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_EFFECTIVE_FROM      OUT      UNAPIGEN.DATE_TABLE_TYPE,  
 A_EFFECTIVE_TILL      OUT      UNAPIGEN.DATE_TABLE_TYPE,  
 A_CREATION_DATE       OUT      UNAPIGEN.DATE_TABLE_TYPE,  
 A_CREATED_BY          OUT      UNAPIGEN.VC20_TABLE_TYPE,  
 A_DLL_ID              OUT      UNAPIGEN.VC20_TABLE_TYPE,  
 A_DLL_URL             OUT      UNAPIGEN.VC255_TABLE_TYPE, 
 A_CPP_ID              OUT      UNAPIGEN.VC20_TABLE_TYPE,  
 A_CPP_URL             OUT      UNAPIGEN.VC255_TABLE_TYPE, 
 A_LOG_HS              OUT      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LOG_HS_DETAILS      OUT      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ALLOW_MODIFY        OUT      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ACTIVE              OUT      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LC                  OUT      UNAPIGEN.VC2_TABLE_TYPE,   
 A_LC_VERSION          OUT      UNAPIGEN.VC20_TABLE_TYPE,  
 A_SS                  OUT      UNAPIGEN.VC2_TABLE_TYPE,   
 A_NR_OF_ROWS          IN OUT   NUMBER,                    
 A_WHERE_CLAUSE        IN       VARCHAR2)                  
RETURN NUMBER IS

L_FI                  VARCHAR2(20);
L_VERSION             VARCHAR2(20);
L_VERSION_IS_CURRENT  CHAR(1);
L_EFFECTIVE_FROM      TIMESTAMP WITH TIME ZONE;
L_EFFECTIVE_TILL      TIMESTAMP WITH TIME ZONE;
L_CREATION_DATE       TIMESTAMP WITH TIME ZONE;
L_CREATED_BY          VARCHAR2(20);
L_DLL_ID              VARCHAR2(20);
L_DLL_URL             VARCHAR2(255);
L_CPP_ID              VARCHAR2(20);
L_CPP_URL             VARCHAR2(255);
L_LOG_HS              CHAR(1);
L_LOG_HS_DETAILS      CHAR(1);
L_ALLOW_MODIFY        CHAR(1);
L_ACTIVE              CHAR(1);
L_LC                  VARCHAR2(2);
L_LC_VERSION          VARCHAR2(20);
L_SS                  VARCHAR2(2);
L_FI_CURSOR           INTEGER;
L_SQL_STRING2         VARCHAR2(4000);

BEGIN
   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'WHERE active = ''1'' ORDER BY fi, version'; 
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := 'WHERE version_is_current = ''1'' '||
                        'AND fi = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                        ''' ORDER BY fi, version';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_FI_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT fi, version, version_is_current, '  ||
                   'effective_from, effective_till, '||
                   'creation_date, created_by, '||
                   'dll_id, cpp_id, ' ||
                   'log_hs, log_hs_details, allow_modify, active, lc, lc_version, ss ' ||
                   'FROM dd' || UNAPIGEN.P_DD || '.uvfi ' || L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_FI_CURSOR,L_SQL_STRING,DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN     (L_FI_CURSOR,  1, L_FI,                 20);
   DBMS_SQL.DEFINE_COLUMN     (L_FI_CURSOR,  2, L_VERSION,            20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_FI_CURSOR,  3, L_VERSION_IS_CURRENT,  1);   
   DBMS_SQL.DEFINE_COLUMN     (L_FI_CURSOR,  4, L_EFFECTIVE_FROM        );
   DBMS_SQL.DEFINE_COLUMN     (L_FI_CURSOR,  5, L_EFFECTIVE_TILL        );
   DBMS_SQL.DEFINE_COLUMN     (L_FI_CURSOR,  6, L_CREATION_DATE         );     
   DBMS_SQL.DEFINE_COLUMN     (L_FI_CURSOR,  7, L_CREATED_BY,         20);
   DBMS_SQL.DEFINE_COLUMN     (L_FI_CURSOR,  8, L_DLL_ID,             20);
   DBMS_SQL.DEFINE_COLUMN     (L_FI_CURSOR,  9, L_CPP_ID,             20);      
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_FI_CURSOR, 10, L_LOG_HS,              1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_FI_CURSOR, 11, L_LOG_HS_DETAILS,      1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_FI_CURSOR, 12, L_ALLOW_MODIFY,        1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_FI_CURSOR, 13, L_ACTIVE,              1);
   DBMS_SQL.DEFINE_COLUMN     (L_FI_CURSOR, 14, L_LC,                  2);
   DBMS_SQL.DEFINE_COLUMN     (L_FI_CURSOR, 15, L_LC_VERSION,         20);
   DBMS_SQL.DEFINE_COLUMN     (L_FI_CURSOR, 16, L_SS,                  2);

   L_RESULT := DBMS_SQL.EXECUTE(L_FI_CURSOR);
   L_FETCHED_ROWS := 0;
   L_RESULT := DBMS_SQL.FETCH_ROWS(L_FI_CURSOR);

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE     (L_FI_CURSOR,  1, L_FI);
      DBMS_SQL.COLUMN_VALUE     (L_FI_CURSOR,  2, L_VERSION);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_FI_CURSOR,  3, L_VERSION_IS_CURRENT);   
      DBMS_SQL.COLUMN_VALUE     (L_FI_CURSOR,  4, L_EFFECTIVE_FROM);
      DBMS_SQL.COLUMN_VALUE     (L_FI_CURSOR,  5, L_EFFECTIVE_TILL);
      DBMS_SQL.COLUMN_VALUE     (L_FI_CURSOR,  6, L_CREATION_DATE);     
      DBMS_SQL.COLUMN_VALUE     (L_FI_CURSOR,  7, L_CREATED_BY);
      DBMS_SQL.COLUMN_VALUE     (L_FI_CURSOR,  8, L_DLL_ID);
      DBMS_SQL.COLUMN_VALUE     (L_FI_CURSOR,  9, L_CPP_ID);      
      DBMS_SQL.COLUMN_VALUE_CHAR(L_FI_CURSOR, 10, L_LOG_HS);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_FI_CURSOR, 11, L_LOG_HS_DETAILS);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_FI_CURSOR, 12, L_ALLOW_MODIFY);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_FI_CURSOR, 13, L_ACTIVE);
      DBMS_SQL.COLUMN_VALUE     (L_FI_CURSOR, 14, L_LC);
      DBMS_SQL.COLUMN_VALUE     (L_FI_CURSOR, 15, L_LC_VERSION);
      DBMS_SQL.COLUMN_VALUE     (L_FI_CURSOR, 16, L_SS);
   
      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_FI(L_FETCHED_ROWS)                 := L_FI;
      A_VERSION(L_FETCHED_ROWS)            := L_VERSION;
      A_VERSION_IS_CURRENT(L_FETCHED_ROWS) := L_VERSION_IS_CURRENT;
      A_EFFECTIVE_FROM(L_FETCHED_ROWS)     := L_EFFECTIVE_FROM;
      A_EFFECTIVE_TILL(L_FETCHED_ROWS)     := L_EFFECTIVE_TILL;
      A_CREATION_DATE(L_FETCHED_ROWS)      := L_CREATION_DATE;
      A_CREATED_BY(L_FETCHED_ROWS)         := L_CREATED_BY;
      A_DLL_ID(L_FETCHED_ROWS)             := L_DLL_ID;
      A_CPP_ID(L_FETCHED_ROWS)             := L_CPP_ID;      
      A_LOG_HS(L_FETCHED_ROWS)             := L_LOG_HS;
      A_LOG_HS_DETAILS(L_FETCHED_ROWS)     := L_LOG_HS_DETAILS;
      A_ALLOW_MODIFY(L_FETCHED_ROWS)       := L_ALLOW_MODIFY;
      A_ACTIVE(L_FETCHED_ROWS)             := L_ACTIVE;
      A_LC(L_FETCHED_ROWS)                 := L_LC;
      A_LC_VERSION(L_FETCHED_ROWS)         := L_LC_VERSION;
      A_SS(L_FETCHED_ROWS)                 := L_SS;

      
      L_SQL_STRING2 :=    'SELECT url '
                       || 'FROM dd'||UNAPIGEN.P_DD||'.uvblob '
                       || 'WHERE id = :l_id';
      
      BEGIN
         EXECUTE IMMEDIATE L_SQL_STRING2
         INTO L_DLL_URL
         USING L_DLL_ID;
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            DBMS_SQL.CLOSE_CURSOR(L_FI_CURSOR);
            RETURN(UNAPIGEN.DBERR_NOTFOUND);
      END;
      IF SQL%FOUND THEN
         A_DLL_URL(L_FETCHED_ROWS) := L_DLL_URL;
      END IF;
      
      BEGIN
         EXECUTE IMMEDIATE L_SQL_STRING2
         INTO L_CPP_URL
         USING L_CPP_ID;
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            DBMS_SQL.CLOSE_CURSOR(L_FI_CURSOR);
            RETURN(UNAPIGEN.DBERR_NOTFOUND);
      END;
      IF SQL%FOUND THEN
         A_CPP_URL(L_FETCHED_ROWS) := L_CPP_URL;
      END IF;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_FI_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_FI_CURSOR);

   
   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF ;

   RETURN(L_RET_CODE);
EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
             'GetFile', L_SQLERRM);
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
             'GetFile', 'SQL(1)='||SUBSTR(L_SQL_STRING,1,240));
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN(L_FI_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(L_FI_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETFILE;

FUNCTION SAVEFILE
(A_FI                      IN    VARCHAR2,        
 A_VERSION                 IN    VARCHAR2,        
 A_VERSION_IS_CURRENT      IN    CHAR,            
 A_EFFECTIVE_FROM          IN    DATE,            
 A_EFFECTIVE_TILL          IN    DATE,            
 A_CREATION_DATE           IN    DATE,            
 A_CREATED_BY              IN    VARCHAR2,        
 A_DLL_ID                  IN    VARCHAR2,        
 A_CPP_ID                  IN    VARCHAR2,        
 A_LOG_HS                  IN    CHAR,            
 A_LOG_HS_DETAILS          IN    CHAR,            
 A_LC                      IN    VARCHAR2,        
 A_LC_VERSION              IN    VARCHAR2,        
 A_MODIFY_REASON           IN    VARCHAR2)        
RETURN NUMBER IS

L_LC                   VARCHAR2(2);
L_LC_VERSION           VARCHAR2(20);
L_SS                   VARCHAR2(2);
L_LOG_HS               CHAR(1);
L_ALLOW_MODIFY         CHAR(1);
L_ACTIVE               CHAR(1);
L_INSERT               BOOLEAN;
L_HS_DETAILS_SEQ_NR    INTEGER;

BEGIN
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_FI, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VERSION,' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;
   
   IF NVL(A_DLL_ID, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_LOG_HS, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_LOGHS;
      RAISE STPERROR;
   END IF;

   IF NVL(A_LOG_HS_DETAILS, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_LOGHSDETAILS;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('fi', A_FI, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE = UNAPIGEN.DBERR_NOOBJECT THEN
      L_INSERT := TRUE;
   ELSIF L_RET_CODE = UNAPIGEN.DBERR_SUCCESS THEN
      L_INSERT := FALSE;
   ELSE
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   IF L_INSERT THEN                
      IF NVL(A_LC, ' ') <> ' ' THEN
         L_LC := A_LC;
      END IF;
      IF NVL(A_LC_VERSION, ' ') <> ' ' THEN
         L_LC_VERSION := A_LC_VERSION;
      END IF;
      INSERT INTO UTFI(FI, VERSION, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ, CREATION_DATE, CREATION_DATE_TZ, CREATED_BY,
                          DLL_ID, CPP_ID, LOG_HS, LOG_HS_DETAILS, LC, LC_VERSION, ALLOW_MODIFY, ACTIVE)
      VALUES(A_FI, A_VERSION, A_EFFECTIVE_FROM, A_EFFECTIVE_FROM, NVL(A_CREATION_DATE, CURRENT_TIMESTAMP),  
             NVL(A_CREATION_DATE, CURRENT_TIMESTAMP), NVL(A_CREATED_BY,UNAPIGEN.P_USER),
             A_DLL_ID, A_CPP_ID, A_LOG_HS, A_LOG_HS_DETAILS, L_LC, L_LC_VERSION, '#', '0');
      L_EVENT_TP := 'ObjectCreated';

   ELSE
      UPDATE UTFI
      SET EFFECTIVE_FROM   = DECODE(EFFECTIVE_TILL, NULL, A_EFFECTIVE_FROM, EFFECTIVE_FROM),
          EFFECTIVE_FROM_TZ = DECODE(EFFECTIVE_TILL, NULL,  DECODE(A_EFFECTIVE_FROM, EFFECTIVE_FROM_TZ, EFFECTIVE_FROM_TZ, A_EFFECTIVE_FROM), EFFECTIVE_FROM_TZ),
          DLL_ID           = A_DLL_ID,
          CPP_ID           = A_CPP_ID,
          LOG_HS           = A_LOG_HS,
          LOG_HS_DETAILS   = A_LOG_HS_DETAILS,
          LC               = L_LC,
          LC_VERSION       = L_LC_VERSION,
          ALLOW_MODIFY     = '#'
      WHERE FI = A_FI
      AND VERSION = A_VERSION;
      L_EVENT_TP := 'ObjectUpdated';
   END IF;

   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT('SaveFile',UNAPIGEN.P_EVMGR_NAME, 'fi', A_FI,
                                   L_LC, L_LC_VERSION, L_SS, L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   
   IF NVL(L_LOG_HS, ' ') <> A_LOG_HS THEN
      IF A_LOG_HS = '1' THEN
         INSERT INTO UTFIHS(FI, VERSION, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES(A_FI, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 'History switched ON', 
                'Audit trail is turned on.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      ELSE
         INSERT INTO UTFIHS(FI, VERSION, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES(A_FI, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 'History switched OFF', 
                'Audit trail is turned off.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   END IF;

   
   IF NVL(L_LOG_HS, ' ') = '1' THEN
      IF L_EVENT_TP = 'ObjectCreated' THEN
         INSERT INTO UTFIHS(FI, VERSION, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES(A_FI, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                'file "'||A_FI||'" is created.', 
                CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      ELSE
         INSERT INTO UTFIHS(FI, VERSION, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES(A_FI, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                'file "'||A_FI||'" is updated.', 
                CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   ELSE
      
      
      IF L_EVENT_TP = 'ObjectCreated' THEN
         INSERT INTO UTFIHS(FI, VERSION, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES(A_FI, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                'file "'||A_FI||'" is created.', 
                CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE <> 1 THEN
         UNAPIGEN.LOGERROR('SaveFile', SQLERRM);
      END IF ;
      RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveFile'));
END SAVEFILE;

FUNCTION DELETEFILE
(A_FI                  IN       VARCHAR2,          
 A_VERSION             IN       VARCHAR2,          
 A_MODIFY_REASON       IN       VARCHAR2)          
RETURN NUMBER IS

L_ALLOW_MODIFY CHAR(1);
L_ACTIVE       CHAR(1);
L_LC           CHAR(2);
L_LC_VERSION   CHAR(20);
L_SS           VARCHAR2(2);
L_LOG_HS       CHAR(1);

BEGIN
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_FI, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('fi', A_FI, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   
   IF UNAPIGEN.ISSYSTEM21CFR11COMPLIANT = UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTALLOWEDIN21CFR11;
      RAISE STPERROR;
   END IF;

   DELETE FROM UTFIHS
   WHERE FI = A_FI
   AND VERSION = A_VERSION;

   DELETE FROM UTFIHSDETAILS
   WHERE FI = A_FI
   AND VERSION = A_VERSION;

   DELETE FROM UTFI
   WHERE FI = A_FI
   AND VERSION = A_VERSION;

   L_EVENT_TP := 'ObjectDeleted';
   L_EV_SEQ_NR := -1;
   L_RET_CODE := UNAPIEV.INSERTEVENT('DeleteFile', UNAPIGEN.P_EVMGR_NAME, 'fi', A_FI, 
                                     L_LC, L_LC_VERSION, L_SS, L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE <> 1 THEN
         UNAPIGEN.LOGERROR('DeleteFile',SQLERRM);
      END IF;
      RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'DeleteFile'));
END DELETEFILE;

END UNAPIFI;
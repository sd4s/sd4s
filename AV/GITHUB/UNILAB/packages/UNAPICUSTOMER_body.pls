PACKAGE BODY unapicustomer AS

L_SQLERRM         VARCHAR2(255);
L_SQL_STRING      VARCHAR2(10000);
L_WHERE_CLAUSE    VARCHAR2(1000);
L_EVENT_TP        UTEV.EV_TP%TYPE;
L_TIMED_EVENT_TP  UTEVTIMED.EV_TP%TYPE;
L_RET_CODE        NUMBER;
L_RETCODE         NUMBER;
L_RESULT          NUMBER;
L_FETCHED_ROWS    NUMBER;
L_EV_SEQ_NR       NUMBER;
L_EV_DETAILS      VARCHAR2(255);
L_ERRM            VARCHAR2(255);
STPERROR          EXCEPTION;

FUNCTION GETVERSION
   RETURN VARCHAR2
IS
BEGIN
   RETURN('06.07.00.00_00.13');
EXCEPTION
   WHEN OTHERS THEN
      RETURN (NULL);
END GETVERSION;

FUNCTION GETCUSTOMERRESULT
(A_SC            IN VARCHAR2, 
 A_CUSTOMER      IN VARCHAR2,
 A_PROPERTY      IN VARCHAR2)
 RETURN CHAR IS
 L_RETURN_VALUE CHAR(1);
 L_CUST_CURSOR    INTEGER;
 L_PR    VARCHAR2(20);
 L_RESULTS_AVAILABLE BOOLEAN;
 L_NOT_ALL_RESULTS_AVAILABLE BOOLEAN;
 
 CURSOR L_RESULT_CURSOR IS
 SELECT PR FROM  UTCOMPARECUSTOMER
 WHERE SC = A_SC
   AND CUSTOMER = A_CUSTOMER
   AND NOT (VALUE_F IS NULL);

 CURSOR L_ALL_RESULTS_CURSOR IS
 SELECT PR FROM  UTCOMPARECUSTOMER
 WHERE SC = A_SC
   AND CUSTOMER = A_CUSTOMER
   AND VALUE_F IS NULL
   AND NOT(PR IS NULL);
 
 BEGIN
    L_RETURN_VALUE := NULL;
 L_RESULTS_AVAILABLE := TRUE;
 
 OPEN L_RESULT_CURSOR;
 FETCH L_RESULT_CURSOR INTO L_PR;
 IF L_RESULT_CURSOR%NOTFOUND THEN
    L_RESULTS_AVAILABLE := FALSE ;   
 END IF;
 CLOSE L_RESULT_CURSOR;
 IF L_RESULTS_AVAILABLE = FALSE THEN 
    RETURN L_RETURN_VALUE;
 END IF;
 
    L_CUST_CURSOR := DBMS_SQL.OPEN_CURSOR;
    L_SQL_STRING := 'SELECT ''0'' FROM UTCOMPARECUSTOMER '||
    ' WHERE '|| A_PROPERTY ||' = ''0''' ||
    ' AND sc='''||REPLACE(A_SC, '''', '''''')||''' '||
    ' AND customer='''||REPLACE(A_CUSTOMER, '''', '''''') ||''' ';
    DBMS_SQL.PARSE(L_CUST_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
    DBMS_SQL.DEFINE_COLUMN_CHAR(L_CUST_CURSOR, 1, L_RETURN_VALUE, 1);

    L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_CUST_CURSOR);
    DBMS_SQL.CLOSE_CURSOR(L_CUST_CURSOR);
    IF  L_RESULT <> 0 THEN
        RETURN '0';
    END IF;
 
    L_NOT_ALL_RESULTS_AVAILABLE := TRUE;
 OPEN L_ALL_RESULTS_CURSOR;
 FETCH L_ALL_RESULTS_CURSOR INTO L_PR;
 IF L_ALL_RESULTS_CURSOR%NOTFOUND THEN
    L_NOT_ALL_RESULTS_AVAILABLE  := FALSE ;   
 END IF;
 CLOSE L_ALL_RESULTS_CURSOR;

     L_SQL_STRING := 'SELECT ''1'' FROM UTCOMPARECUSTOMER '||
     ' WHERE '|| A_PROPERTY ||' = ''1'''||
    ' AND sc='''||REPLACE(A_SC, '''', '''''') ||''' '||
    ' AND customer='''||REPLACE(A_CUSTOMER, '''', '''''') ||''' ';
     L_CUST_CURSOR := DBMS_SQL.OPEN_CURSOR;

     DBMS_SQL.PARSE(L_CUST_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
     DBMS_SQL.DEFINE_COLUMN_CHAR(L_CUST_CURSOR, 1, L_RETURN_VALUE, 1);
 
     L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_CUST_CURSOR);
     DBMS_SQL.CLOSE_CURSOR(L_CUST_CURSOR);
     IF  L_RESULT <> 0 THEN
    IF L_NOT_ALL_RESULTS_AVAILABLE = FALSE THEN
          RETURN '1';
   ELSE
     RETURN '2';
   END IF;
     END IF;

    RETURN  L_RETURN_VALUE; 
 EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
              'GetCustomerResult', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN(L_CUST_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(L_CUST_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETCUSTOMERRESULT;

FUNCTION COMPARECUSTOMER
(A_SC                  IN VARCHAR2,
 A_CUSTOMER            OUT UNAPIGEN.VC20_TABLE_TYPE,     
 A_LIMIT_A_COMPLIANT   OUT UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_SPEC_A_COMPLIANT    OUT UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_TARGET_A_COMPLIANT  OUT UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_LIMIT_B_COMPLIANT   OUT UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_SPEC_B_COMPLIANT    OUT UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_TARGET_B_COMPLIANT  OUT UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_LIMIT_C_COMPLIANT   OUT UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_SPEC_C_COMPLIANT    OUT UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_TARGET_C_COMPLIANT  OUT UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_ALL_COMPLIANT       OUT UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_NR_OF_ROWS          IN OUT  NUMBER                    
)
RETURN NUMBER IS

CURSOR CHILDPP_CURSOR(C_PP VARCHAR2, C_VERSION VARCHAR2, C_PP_KEY1 VARCHAR2, C_PP_KEY2 VARCHAR2, C_PP_KEY3 VARCHAR2, C_PP_KEY4 VARCHAR2, C_PP_KEY5 VARCHAR2) IS
    SELECT PP, VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, DESCRIPTION
    FROM UTPP 
    WHERE  PP=C_PP
    AND PP_KEY1 = DECODE(C_PP_KEY1, ' ', PP_KEY1, C_PP_KEY1)
    AND PP_KEY2 = DECODE(C_PP_KEY2, ' ', PP_KEY2, C_PP_KEY2)
    AND PP_KEY3 = DECODE(C_PP_KEY3, ' ', PP_KEY3, C_PP_KEY3)
    AND PP_KEY4 = DECODE(C_PP_KEY4, ' ', PP_KEY4, C_PP_KEY4)
    AND PP_KEY5 = DECODE(C_PP_KEY5, ' ', PP_KEY5, C_PP_KEY5)
    AND  DECODE(PP_KEY1, ' ', 0, 1)+ DECODE(PP_KEY2, ' ', 0, 1) + DECODE(PP_KEY3, ' ', 0, 1) +  DECODE(PP_KEY4, ' ', 0, 1) +  DECODE(PP_KEY5, ' ', 0, 1) =
    DECODE(C_PP_KEY1, ' ', 0, 1)+ DECODE(C_PP_KEY2, ' ', 0, 1) + DECODE(C_PP_KEY3, ' ', 0, 1) +  DECODE(C_PP_KEY4, ' ', 0, 1) +  DECODE(C_PP_KEY5, ' ', 0, 1) + 1 
    AND VERSION_IS_CURRENT = '1'; 

CURSOR UTSTPP_CURSOR(C_ST VARCHAR2, C_ST_VERSION VARCHAR2) IS
    SELECT DISTINCT PP, PP_VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5
    FROM UTSTPP 
    WHERE  ST =C_ST
    AND VERSION = C_ST_VERSION
    AND (PP, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5) NOT IN 
    (SELECT PP, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5 FROM UTCOMPARECUSTOMER WHERE SC = A_SC)
    ORDER BY PP, PP_KEY1 DESC, PP_KEY2 DESC, PP_KEY3 DESC, PP_KEY4 DESC, PP_KEY5 DESC;

CURSOR PP_DESCRIPTION_CURSOR(C_PP VARCHAR2, C_VERSION VARCHAR2, C_PP_KEY1 VARCHAR2, C_PP_KEY2 VARCHAR2, C_PP_KEY3 VARCHAR2, C_PP_KEY4 VARCHAR2, C_PP_KEY5 VARCHAR2) IS
SELECT DESCRIPTION 
FROM UTPP
WHERE PP=C_PP
    AND PP_KEY1 = C_PP_KEY1
    AND PP_KEY2 = C_PP_KEY2
    AND PP_KEY3 = C_PP_KEY3
    AND PP_KEY4 = C_PP_KEY4
    AND PP_KEY5 = C_PP_KEY5
 AND VERSION = UNAPIGEN.USEPPVERSION(C_PP, C_VERSION, C_PP_KEY1, C_PP_KEY2, C_PP_KEY3, C_PP_KEY4, C_PP_KEY5); 
 

CURSOR ST_CURSOR IS
SELECT ST, ST_VERSION
FROM UTSC 
WHERE SC = A_SC;

CURSOR EXISTING_PP_CURSOR IS
SELECT PG PP, DESCRIPTION, PGNODE, PP_VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5 
FROM UTSCPG
WHERE SC = A_SC
ORDER BY PGNODE;

CURSOR  PPPR_CURSOR(C_PP VARCHAR2, C_VERSION VARCHAR2, C_PP_KEY1 VARCHAR2, C_PP_KEY2 VARCHAR2, C_PP_KEY3 VARCHAR2, C_PP_KEY4 VARCHAR2, C_PP_KEY5 VARCHAR2) IS
SELECT PR, PR_VERSION, UNIT
    FROM UTPPPR 
    WHERE  PP=C_PP
    AND PP_KEY1 = C_PP_KEY1
    AND PP_KEY2 = C_PP_KEY2
    AND PP_KEY3 = C_PP_KEY3
    AND PP_KEY4 = C_PP_KEY4
    AND PP_KEY5 = C_PP_KEY5
    AND VERSION = UNAPIGEN.USEPPVERSION(C_PP, C_VERSION, C_PP_KEY1, C_PP_KEY2, C_PP_KEY3, C_PP_KEY4, C_PP_KEY5); 


CURSOR CURRENT_VALUE_CURSOR(C_PA VARCHAR2) IS
SELECT VALUE_F, UNIT
FROM UTSCPA 
WHERE SC = A_SC 
 AND PA = C_PA
 AND NOT(VALUE_F IS NULL) ;

CURSOR PR_CURSOR IS
SELECT PP, PP_SEQ, PR, PR_SEQ, VALUE_F, UNIT 
FROM UTCOMPARECUSTOMER
WHERE SC= A_SC
 AND VALUE_F IS NULL
 AND NOT(PR IS NULL);


CURSOR SPEC_CURSOR(C_PP VARCHAR2, C_VERSION VARCHAR2, C_PP_KEY1 VARCHAR2, C_PP_KEY2 VARCHAR2, C_PP_KEY3 VARCHAR2, C_PP_KEY4 VARCHAR2, C_PP_KEY5 VARCHAR2) IS
SELECT PR, UNAPIGEN.VALIDATEVERSION('pr', PR, PR_VERSION) PR_VERSION,
                          LOW_LIMIT, HIGH_LIMIT, 
                          LOW_SPEC, HIGH_SPEC, 
                          LOW_DEV, REL_LOW_DEV, TARGET,
                          REL_HIGH_DEV FROM UTPPSPA 
                          WHERE PP = C_PP 
                          AND VERSION = C_VERSION  
                          AND PP_KEY1 = C_PP_KEY1  
                          AND PP_KEY2 = C_PP_KEY2  
                          AND PP_KEY3 = C_PP_KEY3  
                          AND PP_KEY4 = C_PP_KEY4  
                          AND PP_KEY5 = C_PP_KEY5; 

CURSOR L_SCGK_CURSOR(C_GK VARCHAR2, C_GK_VALUE VARCHAR2)  IS
SELECT VALUE 
FROM UTSCGK 
WHERE SC= A_SC
AND GK = C_GK
AND VALUE = C_GK_VALUE;

CURSOR L_BETTERMATCHING_CURSOR(C_PP VARCHAR2, C_CUSTOMER VARCHAR2) IS
SELECT PP FROM  UTCOMPARECUSTOMER
WHERE SC = A_SC
    AND PP = C_PP
    AND CUSTOMER = C_CUSTOMER;

L_PP_KEY4CUSTOMER   NUMBER;
L_PP_KEY        UNAPIGEN.VC20_TABLE_TYPE;
L_PP            VARCHAR2(20);
L_PP_VERSION    VARCHAR2(20);
L_PP_DESCRIPTION VARCHAR2(40);
L_PR_DESCRIPTION VARCHAR2(40);
L_PP_SEQ        NUMBER;
L_PR_SEQ        NUMBER;
L_ST            VARCHAR2(20);
L_ST_VERSION    VARCHAR2(20);
L_CUSTOMER      VARCHAR2(20);
L_UNIT          VARCHAR2(20);
L_VALUE_F       NUMBER;
L_FOUND         BOOLEAN;
L_FORMAT_IN     VARCHAR2(40);
L_FORMAT_OUT    VARCHAR2(40);
L_VALUE_S_OUT   VARCHAR2(40);
L_VALUE_F_OUT   NUMBER;
L_PP_ASSIGN     BOOLEAN;
L_GK            VARCHAR2(20);
L_GK_VALUE      VARCHAR2(40);
BEGIN
   IF NVL(A_NR_OF_ROWS, 0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;
   L_PP_KEY4CUSTOMER := UNAPIGEN.P_PP_KEY4CUSTOMER;
   IF L_PP_KEY4CUSTOMER  = 0 THEN
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;
   DELETE FROM UTCOMPARECUSTOMER;
   L_PP_SEQ := 0;
   OPEN  ST_CURSOR;
   FETCH ST_CURSOR INTO L_ST, L_ST_VERSION;
   CLOSE   ST_CURSOR;
   FOR PP_REC IN EXISTING_PP_CURSOR LOOP
      L_PP_KEY(1)  :=PP_REC.PP_KEY1;
      L_PP_KEY(2)  :=PP_REC.PP_KEY2;
      L_PP_KEY(3)  :=PP_REC.PP_KEY3;
      L_PP_KEY(4)  :=PP_REC.PP_KEY4;
      L_PP_KEY(5)  :=PP_REC.PP_KEY5;
      IF (L_PP_KEY(L_PP_KEY4CUSTOMER) = ' ') THEN
         FOR PP_CHILD_REC IN CHILDPP_CURSOR(PP_REC.PP,  PP_REC.PP_VERSION, PP_REC.PP_KEY1, PP_REC.PP_KEY2, PP_REC.PP_KEY3, PP_REC.PP_KEY4, PP_REC.PP_KEY5) LOOP
            L_PP         := PP_CHILD_REC.PP;
            L_PP_VERSION := PP_CHILD_REC.VERSION;
            L_PP_KEY(1)  := PP_CHILD_REC.PP_KEY1;
            L_PP_KEY(2)  := PP_CHILD_REC.PP_KEY2;
            L_PP_KEY(3)  := PP_CHILD_REC.PP_KEY3;
            L_PP_KEY(4)  := PP_CHILD_REC.PP_KEY4;
            L_PP_KEY(5)  := PP_CHILD_REC.PP_KEY5;
            L_PP_DESCRIPTION := PP_CHILD_REC.DESCRIPTION;
            IF (L_PP_KEY(L_PP_KEY4CUSTOMER) <> ' ') THEN   
               L_PP_SEQ :=  L_PP_SEQ +1;
               INSERT INTO UTCOMPARECUSTOMER(SC, CUSTOMER, PP, PP_VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, PP_DESCRIPTION, PP_SEQ)
               VALUES(A_SC,L_PP_KEY(L_PP_KEY4CUSTOMER), L_PP,L_PP_VERSION, L_PP_KEY(1), L_PP_KEY(2), L_PP_KEY(3), L_PP_KEY(4), L_PP_KEY(5), L_PP_DESCRIPTION, L_PP_SEQ) ;
               L_PR_SEQ := 0;
               FOR L_PPPR_REC IN   PPPR_CURSOR(L_PP,L_PP_VERSION, L_PP_KEY(1), L_PP_KEY(2), L_PP_KEY(3), L_PP_KEY(4), L_PP_KEY(5)) LOOP
                  L_PR_SEQ := L_PR_SEQ +1;
                  INSERT INTO UTCOMPARECUSTOMER(SC, CUSTOMER, PP, PP_VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, PP_DESCRIPTION, PP_SEQ, PR, PR_VERSION, UNIT, PR_SEQ)
                  VALUES(A_SC,L_PP_KEY(L_PP_KEY4CUSTOMER), L_PP,L_PP_VERSION, L_PP_KEY(1), L_PP_KEY(2), L_PP_KEY(3), L_PP_KEY(4), L_PP_KEY(5), L_PP_DESCRIPTION,L_PP_SEQ, L_PPPR_REC.PR, L_PPPR_REC.PR_VERSION, L_PPPR_REC.UNIT, L_PR_SEQ) ;
               END LOOP;
            END IF;
         END LOOP;
      ELSE
         
         L_PP_SEQ :=  L_PP_SEQ +1;
         L_PP := PP_REC.PP;
         L_PP_VERSION := PP_REC.PP_VERSION;
         L_PP_DESCRIPTION := PP_REC.DESCRIPTION;
         INSERT INTO UTCOMPARECUSTOMER(SC, CUSTOMER, PP, PP_VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, PP_DESCRIPTION, PP_SEQ)
         VALUES(A_SC,L_PP_KEY(L_PP_KEY4CUSTOMER), L_PP,L_PP_VERSION, L_PP_KEY(1), L_PP_KEY(2), L_PP_KEY(3), L_PP_KEY(4), L_PP_KEY(5), L_PP_DESCRIPTION, L_PP_SEQ) ;
         L_PR_SEQ := 0;
         FOR L_PPPR_CH_REC IN PPPR_CURSOR(L_PP,L_PP_VERSION, L_PP_KEY(1), L_PP_KEY(2), L_PP_KEY(3), L_PP_KEY(4), L_PP_KEY(5)) LOOP
            L_PR_SEQ := L_PR_SEQ +1;
            INSERT INTO UTCOMPARECUSTOMER(SC, CUSTOMER, PP, PP_VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, PP_DESCRIPTION, PP_SEQ, PR, PR_VERSION, UNIT,  PR_SEQ)
            VALUES(A_SC,L_PP_KEY(L_PP_KEY4CUSTOMER), L_PP,L_PP_VERSION, L_PP_KEY(1), L_PP_KEY(2), L_PP_KEY(3), L_PP_KEY(4), L_PP_KEY(5), L_PP_DESCRIPTION,L_PP_SEQ, L_PPPR_CH_REC.PR, L_PPPR_CH_REC.PR_VERSION, L_PPPR_CH_REC.UNIT, L_PR_SEQ) ;
         END LOOP;
      END IF;
   END LOOP;
   FOR PP_REC IN UTSTPP_CURSOR(L_ST, L_ST_VERSION) LOOP
      L_PP         := PP_REC.PP;
      L_PP_VERSION := PP_REC.PP_VERSION;
      L_PP_KEY(1)  := PP_REC.PP_KEY1;
      L_PP_KEY(2)  := PP_REC.PP_KEY2;
      L_PP_KEY(3)  := PP_REC.PP_KEY3;
      L_PP_KEY(4)  := PP_REC.PP_KEY4;
      L_PP_KEY(5)  := PP_REC.PP_KEY5;
      OPEN PP_DESCRIPTION_CURSOR(L_PP,L_PP_VERSION,L_PP_KEY(1), L_PP_KEY(2), L_PP_KEY(3), L_PP_KEY(4),L_PP_KEY(5)  );
      FETCH PP_DESCRIPTION_CURSOR INTO L_PP_DESCRIPTION;
      CLOSE PP_DESCRIPTION_CURSOR;

      IF (L_PP_KEY(L_PP_KEY4CUSTOMER) != ' ') THEN
         
         L_PP_ASSIGN :=  TRUE;
         
         FOR L_X IN 1..UNAPIGEN.P_PP_KEY_NR_OF_ROWS LOOP
            IF L_PP_KEY(L_X) <> ' ' THEN
               IF (UNAPIGEN.P_PP_KEY_TP_TAB(L_X)  IN ('gk', 'supplier')) THEN
                  
                  L_GK := SUBSTR(UNAPIGEN.P_PP_KEY_NAME_TAB(L_X),4);
                  OPEN L_SCGK_CURSOR(L_GK, L_PP_KEY(L_X));
                  FETCH L_SCGK_CURSOR INTO L_GK_VALUE;
                  IF L_SCGK_CURSOR%NOTFOUND THEN
                     L_PP_ASSIGN := FALSE;
                  END IF;
                  CLOSE  L_SCGK_CURSOR;
               END IF;
            END IF;
         END LOOP;
         
         OPEN L_BETTERMATCHING_CURSOR(L_PP, L_PP_KEY(L_PP_KEY4CUSTOMER));
         FETCH L_BETTERMATCHING_CURSOR INTO L_GK_VALUE;
         IF NOT(L_BETTERMATCHING_CURSOR%NOTFOUND) THEN
            L_PP_ASSIGN := FALSE;
         END IF;
         CLOSE L_BETTERMATCHING_CURSOR;

         IF L_PP_ASSIGN = TRUE THEN
            L_PP_SEQ :=  L_PP_SEQ +1;
            INSERT INTO UTCOMPARECUSTOMER(SC, CUSTOMER, PP, PP_VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, PP_DESCRIPTION, PP_SEQ)
            VALUES(A_SC,L_PP_KEY(L_PP_KEY4CUSTOMER), L_PP, L_PP_VERSION, L_PP_KEY(1), L_PP_KEY(2), L_PP_KEY(3), L_PP_KEY(4), L_PP_KEY(5), L_PP_DESCRIPTION,L_PP_SEQ) ;
            L_PR_SEQ := 0;
            FOR L_PPPR_REC IN PPPR_CURSOR(L_PP,L_PP_VERSION, L_PP_KEY(1), L_PP_KEY(2), L_PP_KEY(3), L_PP_KEY(4), L_PP_KEY(5)) LOOP
               L_PR_SEQ := L_PR_SEQ +1;
               INSERT INTO UTCOMPARECUSTOMER(SC, CUSTOMER, PP, PP_VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, PP_DESCRIPTION, PP_SEQ, PR, PR_VERSION, UNIT, PR_SEQ)
               VALUES(A_SC,L_PP_KEY(L_PP_KEY4CUSTOMER), L_PP,L_PP_VERSION, L_PP_KEY(1), L_PP_KEY(2), L_PP_KEY(3), L_PP_KEY(4), L_PP_KEY(5), L_PP_DESCRIPTION,L_PP_SEQ, L_PPPR_REC.PR, L_PPPR_REC.PR_VERSION, L_PPPR_REC.UNIT, L_PR_SEQ) ;
            END LOOP;
         END IF;
      END IF;
   END LOOP;
  
   UPDATE UTCOMPARECUSTOMER A
   SET PR_DESCRIPTION = (SELECT B.DESCRIPTION
                         FROM UTPR B
                         WHERE B.PR = A.PR
                         AND B.VERSION = UNAPIGEN.USEVERSION('pr', A.PR, A.PR_VERSION)) 
   WHERE NOT(A.PR IS NULL);
   
   
   UPDATE UTCOMPARECUSTOMER A
   SET A.UNIT = (SELECT B.UNIT 
                 FROM UTPR B
                 WHERE B.PR = A.PR
                 AND B.VERSION = UNAPIGEN.USEVERSION('pr', B.PR, A.PR_VERSION)) 
   WHERE A.UNIT IS NULL
   AND NOT (A.PR IS NULL); 

   
   FOR L_PR_REC IN  PR_CURSOR LOOP
      L_FOUND := TRUE;
      OPEN  CURRENT_VALUE_CURSOR(L_PR_REC.PR);
      FETCH  CURRENT_VALUE_CURSOR INTO L_VALUE_F, L_UNIT;
      IF CURRENT_VALUE_CURSOR%NOTFOUND THEN  
         L_FOUND := FALSE;
      END IF;
      CLOSE  CURRENT_VALUE_CURSOR;
      IF L_FOUND = TRUE THEN
         
         IF  (NVL(L_PR_REC.UNIT, ' ') <> ' ') AND
              (L_PR_REC.UNIT <> L_UNIT) AND
               (NVL(L_UNIT, ' ') <> ' ')  THEN
            L_RET_CODE := UNAPIGEN.TRANSFORMRESULT
                            ('',
                             L_VALUE_F ,
                             L_UNIT ,
                             L_FORMAT_IN,
                             L_VALUE_S_OUT ,
                             L_VALUE_F_OUT ,
                             L_PR_REC.UNIT ,
                             L_FORMAT_OUT  );
         ELSE
            L_VALUE_F_OUT :=  L_VALUE_F;
         END IF;
         UPDATE UTCOMPARECUSTOMER A
         SET VALUE_F = L_VALUE_F_OUT
         WHERE SC = A_SC
         AND PR =  L_PR_REC.PR
         AND NVL(UNIT, ' ') =   NVL(L_PR_REC.UNIT, ' ') ;
      END IF;
   END LOOP;
   

   UPDATE UTCOMPARECUSTOMER A
   SET (A.LOW_LIMIT_A, A.HIGH_LIMIT_A, A.LOW_SPEC_A, A.HIGH_SPEC_A, A.LOW_DEV_A, A.REL_LOW_DEV_A, A.TARGET_A, A.HIGH_DEV_A, A.REL_HIGH_DEV_A) = 
       (SELECT B.LOW_LIMIT, B.HIGH_LIMIT, B.LOW_SPEC, B.HIGH_SPEC, B.LOW_DEV, B.REL_LOW_DEV, B.TARGET, B.HIGH_DEV, B.REL_HIGH_DEV
        FROM UTPPSPA B 
        WHERE B.PP = A.PP 
        AND B.VERSION = UNAPIGEN.USEPPVERSION(A.PP, A.PP_VERSION, A.PP_KEY1, A.PP_KEY2, A.PP_KEY3, A.PP_KEY4, A.PP_KEY5) 
        AND B.PP_KEY1 = A.PP_KEY1
        AND B.PP_KEY2 = A.PP_KEY2
        AND B.PP_KEY3 = A.PP_KEY3
        AND B.PP_KEY4 = A.PP_KEY4
        AND B.PP_KEY5 = A.PP_KEY5
        AND B.PR = A.PR
        AND B.PR_VERSION = A.PR_VERSION
        AND B.SEQ = A.PR_SEQ)
   WHERE SC=A_SC;
 
   UPDATE UTCOMPARECUSTOMER A
   SET (A.LOW_LIMIT_B, A.HIGH_LIMIT_B, A.LOW_SPEC_B, A.HIGH_SPEC_B, A.LOW_DEV_B, A.REL_LOW_DEV_B, A.TARGET_B, A.HIGH_DEV_B, A.REL_HIGH_DEV_B) = 
       (SELECT B.LOW_LIMIT, B.HIGH_LIMIT, B.LOW_SPEC, B.HIGH_SPEC, B.LOW_DEV, B.REL_LOW_DEV, B.TARGET, B.HIGH_DEV, B.REL_HIGH_DEV 
        FROM UTPPSPB B 
        WHERE B.PP = A.PP 
        AND B.VERSION = UNAPIGEN.USEPPVERSION(A.PP, A.PP_VERSION, A.PP_KEY1, A.PP_KEY2, A.PP_KEY3, A.PP_KEY4, A.PP_KEY5) 
        AND B.PP_KEY1 = A.PP_KEY1
        AND B.PP_KEY2 = A.PP_KEY2
        AND B.PP_KEY3 = A.PP_KEY3
        AND B.PP_KEY4 = A.PP_KEY4
        AND B.PP_KEY5 = A.PP_KEY5
        AND B.PR = A.PR
        AND B.PR_VERSION = A.PR_VERSION
        AND B.SEQ = A.PR_SEQ)
   WHERE SC=A_SC;

   UPDATE UTCOMPARECUSTOMER A
   SET (A.LOW_LIMIT_C, A.HIGH_LIMIT_C, A.LOW_SPEC_C, A.HIGH_SPEC_C, A.LOW_DEV_C, A.REL_LOW_DEV_C, A.TARGET_C, A.HIGH_DEV_C, A.REL_HIGH_DEV_C) = 
       (SELECT B.LOW_LIMIT, B.HIGH_LIMIT, B.LOW_SPEC, B.HIGH_SPEC, B.LOW_DEV, B.REL_LOW_DEV, B.TARGET, B.HIGH_DEV, B.REL_HIGH_DEV 
        FROM UTPPSPC B 
        WHERE B.PP = A.PP 
        AND B.VERSION = UNAPIGEN.USEPPVERSION(A.PP, A.PP_VERSION, A.PP_KEY1, A.PP_KEY2, A.PP_KEY3, A.PP_KEY4, A.PP_KEY5) 
        AND B.PP_KEY1 = A.PP_KEY1
        AND B.PP_KEY2 = A.PP_KEY2
        AND B.PP_KEY3 = A.PP_KEY3
        AND B.PP_KEY4 = A.PP_KEY4
        AND B.PP_KEY5 = A.PP_KEY5
        AND B.PR = A.PR
        AND B.PR_VERSION = A.PR_VERSION
        AND B.SEQ = A.PR_SEQ)
   WHERE SC=A_SC;

   UPDATE UTCOMPARECUSTOMER 
   SET LIMIT_A_COMPLIANT = '0'
   WHERE SC = A_SC
   AND ((VALUE_F > HIGH_LIMIT_A) OR (VALUE_F < LOW_LIMIT_A));

   UPDATE UTCOMPARECUSTOMER 
   SET LIMIT_A_COMPLIANT = '1'
   WHERE SC = A_SC
   AND NOT(VALUE_F IS NULL )
   AND NOT((HIGH_LIMIT_A IS NULL) 
           AND
           (LOW_LIMIT_A IS NULL))
   AND VALUE_F < NVL(HIGH_LIMIT_A, VALUE_F + 1)
   AND VALUE_F > NVL(LOW_LIMIT_A, VALUE_F - 1);
 
   UPDATE UTCOMPARECUSTOMER 
   SET LIMIT_B_COMPLIANT = '0'
   WHERE SC = A_SC
   AND ((VALUE_F > HIGH_LIMIT_B)
        OR
        (VALUE_F < LOW_LIMIT_B));

   UPDATE UTCOMPARECUSTOMER 
   SET LIMIT_B_COMPLIANT = '1'
   WHERE SC = A_SC
     AND NOT(VALUE_F IS NULL )
     AND NOT((HIGH_LIMIT_B IS NULL) AND (LOW_LIMIT_B IS NULL))
     AND VALUE_F < NVL(HIGH_LIMIT_B, VALUE_F + 1)
     AND VALUE_F > NVL(LOW_LIMIT_B, VALUE_F - 1);

    UPDATE UTCOMPARECUSTOMER 
    SET LIMIT_C_COMPLIANT = '0'
    WHERE SC = A_SC
      AND ((VALUE_F > HIGH_LIMIT_C)
           OR
           (VALUE_F < LOW_LIMIT_C));
 
    UPDATE UTCOMPARECUSTOMER 
    SET LIMIT_C_COMPLIANT = '1'
    WHERE SC = A_SC
    AND NOT(VALUE_F IS NULL)
    AND NOT((HIGH_LIMIT_C IS NULL) 
            AND
            (LOW_LIMIT_C IS NULL))
    AND VALUE_F < NVL(HIGH_LIMIT_C, VALUE_F + 1)
    AND VALUE_F > NVL(LOW_LIMIT_C, VALUE_F - 1);

   UPDATE UTCOMPARECUSTOMER 
   SET SPEC_A_COMPLIANT = '0'
   WHERE SC = A_SC
   AND ((VALUE_F > HIGH_SPEC_A)
        OR
        (VALUE_F < LOW_SPEC_A));

   UPDATE UTCOMPARECUSTOMER 
   SET SPEC_A_COMPLIANT = '1'
   WHERE SC = A_SC
   AND NOT(VALUE_F IS NULL )
   AND NOT((HIGH_SPEC_A IS NULL) AND (LOW_SPEC_A IS NULL))
   AND VALUE_F < NVL(HIGH_SPEC_A, VALUE_F + 1)
   AND VALUE_F > NVL(LOW_SPEC_A, VALUE_F - 1);

   UPDATE UTCOMPARECUSTOMER 
   SET SPEC_B_COMPLIANT = '0'
   WHERE SC = A_SC
   AND ((VALUE_F > HIGH_SPEC_B)
        OR
        (VALUE_F < LOW_SPEC_B));

   UPDATE UTCOMPARECUSTOMER 
   SET SPEC_B_COMPLIANT = '1'
   WHERE SC = A_SC
   AND NOT(VALUE_F IS NULL)
   AND NOT((HIGH_SPEC_B IS NULL) AND (LOW_SPEC_B IS NULL))
   AND VALUE_F < NVL(HIGH_SPEC_B, VALUE_F + 1)
   AND VALUE_F > NVL(LOW_SPEC_B, VALUE_F - 1);

   UPDATE UTCOMPARECUSTOMER 
   SET SPEC_C_COMPLIANT = '0'
   WHERE SC = A_SC
     AND ((VALUE_F > HIGH_SPEC_C)
          OR 
          (VALUE_F < LOW_SPEC_C ));
 
   UPDATE UTCOMPARECUSTOMER
   SET SPEC_C_COMPLIANT = '1'
   WHERE SC = A_SC
   AND NOT(VALUE_F IS NULL )
   AND NOT((HIGH_SPEC_C IS NULL) AND (LOW_SPEC_C IS NULL))
   AND  VALUE_F < NVL(HIGH_SPEC_C, VALUE_F + 1)
   AND  VALUE_F > NVL(LOW_SPEC_C, VALUE_F - 1);

   UPDATE UTCOMPARECUSTOMER 
   SET TARGET_A_COMPLIANT = '0'
   WHERE SC = A_SC
   AND REL_LOW_DEV_A = '0'
   AND VALUE_F < (TARGET_A - LOW_DEV_A) ;

   UPDATE UTCOMPARECUSTOMER 
   SET TARGET_A_COMPLIANT = '0'
   WHERE SC = A_SC
   AND REL_LOW_DEV_A = '1'
   AND VALUE_F < (1 -(LOW_DEV_A/100) ) * TARGET_A;

   UPDATE UTCOMPARECUSTOMER 
   SET TARGET_A_COMPLIANT = '0'
   WHERE SC = A_SC
   AND REL_HIGH_DEV_A = '0'
   AND VALUE_F > (TARGET_A + HIGH_DEV_A);

   UPDATE UTCOMPARECUSTOMER 
   SET TARGET_A_COMPLIANT = '0'
   WHERE SC = A_SC
   AND REL_HIGH_DEV_A = '1'
   AND VALUE_F > (1 + (HIGH_DEV_A/100)) * TARGET_A;

   UPDATE UTCOMPARECUSTOMER 
   SET TARGET_A_COMPLIANT = '1'
   WHERE SC = A_SC
   AND NOT(VALUE_F IS NULL )
   AND TARGET_A_COMPLIANT IS NULL
   AND NOT (TARGET_A IS NULL) 
   AND NOT ((HIGH_DEV_A IS NULL) AND (LOW_DEV_A IS NULL));

   UPDATE UTCOMPARECUSTOMER 
   SET LIMIT_A_COMPLIANT = '0'
   WHERE SC = A_SC
   AND ((VALUE_F > HIGH_LIMIT_A)
        OR 
        (VALUE_F < LOW_LIMIT_A));

   UPDATE UTCOMPARECUSTOMER 
   SET LIMIT_A_COMPLIANT = '1'
   WHERE SC = A_SC
   AND NOT(VALUE_F IS NULL )
   AND NOT((HIGH_LIMIT_A IS NULL) AND (LOW_LIMIT_A IS NULL))
   AND VALUE_F < NVL(HIGH_LIMIT_A, VALUE_F + 1)
   AND VALUE_F > NVL(LOW_LIMIT_A, VALUE_F - 1);

 
    UPDATE UTCOMPARECUSTOMER 
    SET LIMIT_B_COMPLIANT = '0'
    WHERE SC = A_SC
    AND ((VALUE_F > HIGH_LIMIT_B)
         OR
         (VALUE_F < LOW_LIMIT_B));
 
    UPDATE UTCOMPARECUSTOMER 
    SET LIMIT_B_COMPLIANT = '1'
    WHERE SC = A_SC
    AND NOT(VALUE_F IS NULL )
    AND NOT((HIGH_LIMIT_B IS NULL) AND (LOW_LIMIT_B IS NULL))
    AND  VALUE_F < NVL(HIGH_LIMIT_B, VALUE_F + 1)
    AND  VALUE_F > NVL(LOW_LIMIT_B, VALUE_F - 1);

    UPDATE UTCOMPARECUSTOMER 
    SET LIMIT_C_COMPLIANT = '0'
    WHERE SC = A_SC
    AND ((VALUE_F > HIGH_LIMIT_C)
         OR
         (VALUE_F < LOW_LIMIT_C));
 
    UPDATE UTCOMPARECUSTOMER 
    SET LIMIT_C_COMPLIANT = '1'
    WHERE SC = A_SC
    AND NOT(VALUE_F IS NULL )
    AND NOT((HIGH_LIMIT_C IS NULL) AND (LOW_LIMIT_C IS NULL))
    AND  VALUE_F < NVL(HIGH_LIMIT_C, VALUE_F + 1)
    AND  VALUE_F > NVL(LOW_LIMIT_C, VALUE_F - 1);

   UPDATE UTCOMPARECUSTOMER 
   SET SPEC_A_COMPLIANT = '0'
   WHERE SC = A_SC
   AND ((VALUE_F > HIGH_SPEC_A)
        OR
        (VALUE_F < LOW_SPEC_A));

   UPDATE UTCOMPARECUSTOMER 
   SET SPEC_A_COMPLIANT = '1'
   WHERE SC = A_SC
   AND NOT(VALUE_F IS NULL )
   AND NOT((HIGH_SPEC_A IS NULL) AND (LOW_SPEC_A IS NULL))
   AND VALUE_F < NVL(HIGH_SPEC_A, VALUE_F + 1)
   AND VALUE_F > NVL(LOW_SPEC_A, VALUE_F - 1);

 
   UPDATE UTCOMPARECUSTOMER 
   SET SPEC_B_COMPLIANT = '0'
   WHERE SC = A_SC
   AND ((VALUE_F > HIGH_SPEC_B)
        OR
        (VALUE_F < LOW_SPEC_B));
 
   UPDATE UTCOMPARECUSTOMER 
   SET SPEC_B_COMPLIANT = '1'
   WHERE SC = A_SC
   AND NOT(VALUE_F IS NULL )
   AND NOT((HIGH_SPEC_B IS NULL) AND (LOW_SPEC_B IS NULL))
   AND VALUE_F < NVL(HIGH_SPEC_B, VALUE_F + 1)
   AND VALUE_F > NVL(LOW_SPEC_B, VALUE_F - 1);

   UPDATE UTCOMPARECUSTOMER 
   SET SPEC_C_COMPLIANT = '0'
   WHERE SC = A_SC
   AND ((VALUE_F > HIGH_SPEC_C)
        OR
        (VALUE_F < LOW_SPEC_C));
  
   UPDATE UTCOMPARECUSTOMER 
   SET SPEC_C_COMPLIANT = '1'
   WHERE SC = A_SC
   AND NOT(VALUE_F IS NULL )
   AND NOT((HIGH_SPEC_C IS NULL) AND (LOW_SPEC_C IS NULL))
   AND VALUE_F < NVL(HIGH_SPEC_C, VALUE_F + 1)
   AND VALUE_F > NVL(LOW_SPEC_C, VALUE_F - 1);

   UPDATE UTCOMPARECUSTOMER 
   SET TARGET_A_COMPLIANT = '0'
   WHERE SC = A_SC
   AND ((VALUE_F < DECODE(REL_LOW_DEV_A , '0' ,TARGET_A - LOW_DEV_A  , '1', (1 - (LOW_DEV_A/100)) * TARGET_A))
        OR
        (VALUE_F > DECODE(REL_HIGH_DEV_A, '0' ,TARGET_A + HIGH_DEV_A , '1', (1 + (HIGH_DEV_A/100)) * TARGET_A)));

   UPDATE UTCOMPARECUSTOMER 
   SET TARGET_A_COMPLIANT = '1'
   WHERE SC = A_SC
   AND NOT(VALUE_F IS NULL)
   AND TARGET_A_COMPLIANT IS NULL
   AND NOT (TARGET_A IS NULL) 
   AND NOT ((HIGH_DEV_A IS NULL) AND (LOW_DEV_A IS NULL));

   UPDATE UTCOMPARECUSTOMER 
   SET TARGET_B_COMPLIANT = '0'
   WHERE SC = A_SC
   AND ((VALUE_F < DECODE(REL_LOW_DEV_B , '0' ,TARGET_B - LOW_DEV_B , '1', (1 - (LOW_DEV_B/100)) * TARGET_B) )
        OR
        (VALUE_F > DECODE(REL_HIGH_DEV_B, '0' ,TARGET_B + HIGH_DEV_B, '1', (1 + (HIGH_DEV_B/100)) * TARGET_B)));

   UPDATE UTCOMPARECUSTOMER 
   SET TARGET_B_COMPLIANT = '1'
   WHERE SC = A_SC
   AND NOT(VALUE_F IS NULL )
   AND TARGET_B_COMPLIANT IS NULL
   AND NOT (TARGET_B IS NULL) 
   AND NOT ((HIGH_DEV_B IS NULL) AND (LOW_DEV_B IS NULL));

   UPDATE UTCOMPARECUSTOMER 
   SET TARGET_C_COMPLIANT = '0'
   WHERE SC = A_SC
   AND ((VALUE_F < DECODE(REL_LOW_DEV_C,  '0' ,TARGET_C - LOW_DEV_C,  '1', (1 - (LOW_DEV_C/100)) * TARGET_C) )
        OR
        (VALUE_F > DECODE(REL_HIGH_DEV_C, '0' ,TARGET_C + HIGH_DEV_C, '1', (1 + (HIGH_DEV_C/100)) * TARGET_C)));


   UPDATE UTCOMPARECUSTOMER 
   SET TARGET_C_COMPLIANT = '1'
   WHERE SC = A_SC
   AND NOT(VALUE_F IS NULL )
   AND TARGET_C_COMPLIANT IS NULL
   AND NOT (TARGET_C IS NULL) 
   AND NOT ((HIGH_DEV_C IS NULL) AND (LOW_DEV_C IS NULL));

   UPDATE UTCOMPARECUSTOMER
   SET ALL_COMPLIANT = '0'
   WHERE SC = A_SC
   AND 
   (    LIMIT_A_COMPLIANT  ='0'
     OR LIMIT_B_COMPLIANT  ='0'
     OR LIMIT_C_COMPLIANT  ='0'
     OR SPEC_A_COMPLIANT   ='0'
     OR SPEC_B_COMPLIANT   ='0'
     OR SPEC_C_COMPLIANT   ='0'
     OR TARGET_A_COMPLIANT ='0'
     OR TARGET_B_COMPLIANT ='0'
     OR TARGET_C_COMPLIANT ='0' );

   UPDATE UTCOMPARECUSTOMER
   SET ALL_COMPLIANT = '1'
   WHERE SC = A_SC
   AND NVL(ALL_COMPLIANT, '1') <> '0'
   AND 
   (    LIMIT_A_COMPLIANT  ='1'
     OR LIMIT_B_COMPLIANT  ='1'
     OR LIMIT_C_COMPLIANT  ='1'
     OR SPEC_A_COMPLIANT   ='1'
     OR SPEC_B_COMPLIANT   ='1'
     OR SPEC_C_COMPLIANT   ='1'
     OR TARGET_A_COMPLIANT ='1'
     OR TARGET_B_COMPLIANT ='1'
     OR TARGET_C_COMPLIANT ='1' );

   
   UPDATE UTCOMPARECUSTOMER A
   SET ALL_COMPLIANT = '0'
   WHERE SC = A_SC
   AND PR IS NULL
   AND EXISTS (SELECT B.PR FROM UTCOMPARECUSTOMER B
               WHERE B.SC = A.SC
   AND B.CUSTOMER = A.CUSTOMER
   AND B.PP = A.PP
   AND B.PP_KEY1 = A.PP_KEY1
   AND B.PP_KEY2 = A.PP_KEY2
   AND B.PP_KEY3 = A.PP_KEY3
   AND B.PP_KEY4 = A.PP_KEY4
   AND B.PP_KEY5 = A.PP_KEY5
   AND NOT(B.PR IS NULL)
   AND B.ALL_COMPLIANT = '0');

   UPDATE UTCOMPARECUSTOMER A
   SET ALL_COMPLIANT = '1'
   WHERE SC = A_SC
   AND PR IS NULL
   AND NVL(ALL_COMPLIANT, '1') <> '0'
   AND EXISTS (SELECT B.PR FROM UTCOMPARECUSTOMER B
               WHERE B.SC = A.SC
   AND B.CUSTOMER = A.CUSTOMER
   AND B.PP = A.PP
   AND B.PP_KEY1 = A.PP_KEY1
   AND B.PP_KEY2 = A.PP_KEY2
   AND B.PP_KEY3 = A.PP_KEY3
   AND B.PP_KEY4 = A.PP_KEY4
   AND B.PP_KEY5 = A.PP_KEY5
   AND NOT(B.PR IS NULL)
   AND B.ALL_COMPLIANT = '1');

   
   UPDATE UTCOMPARECUSTOMER A
   SET ALL_COMPLIANT = '2'
   WHERE SC = A_SC
   AND PR IS NULL
   AND ALL_COMPLIANT = '1'
   AND EXISTS (SELECT B.PR FROM UTCOMPARECUSTOMER B
               WHERE B.SC = A.SC
   AND B.CUSTOMER = A.CUSTOMER
   AND B.PP = A.PP
   AND B.PP_KEY1 = A.PP_KEY1
   AND B.PP_KEY2 = A.PP_KEY2
   AND B.PP_KEY3 = A.PP_KEY3
   AND B.PP_KEY4 = A.PP_KEY4
   AND B.PP_KEY5 = A.PP_KEY5
   AND NOT(B.PR IS NULL)
   AND B.VALUE_F IS NULL);
   
   L_RETCODE := UNCOMPARECUSTOMER.GETCUSTOMERLIST(A_SC, L_ST, L_ST_VERSION, A_CUSTOMER, A_NR_OF_ROWS);
   FOR L_I IN 1 ..  A_NR_OF_ROWS LOOP
      L_CUSTOMER :=   A_CUSTOMER(L_I);
      A_LIMIT_A_COMPLIANT (L_I) := GETCUSTOMERRESULT(A_SC, L_CUSTOMER, 'limit_a_compliant') ;
      A_LIMIT_B_COMPLIANT (L_I) := GETCUSTOMERRESULT(A_SC, L_CUSTOMER, 'limit_b_compliant') ;
      A_LIMIT_C_COMPLIANT (L_I) := GETCUSTOMERRESULT(A_SC, L_CUSTOMER, 'limit_c_compliant') ;
      A_SPEC_A_COMPLIANT  (L_I) := GETCUSTOMERRESULT(A_SC, L_CUSTOMER, 'spec_a_compliant') ;
      A_SPEC_B_COMPLIANT  (L_I) := GETCUSTOMERRESULT(A_SC, L_CUSTOMER, 'spec_b_compliant') ;
      A_SPEC_C_COMPLIANT  (L_I) := GETCUSTOMERRESULT(A_SC, L_CUSTOMER, 'spec_c_compliant') ;
      A_TARGET_A_COMPLIANT(L_I) := GETCUSTOMERRESULT(A_SC, L_CUSTOMER, 'target_a_compliant') ;
      A_TARGET_B_COMPLIANT(L_I) := GETCUSTOMERRESULT(A_SC, L_CUSTOMER, 'target_b_compliant') ;
      A_TARGET_C_COMPLIANT(L_I) := GETCUSTOMERRESULT(A_SC, L_CUSTOMER, 'target_c_compliant') ;
      A_ALL_COMPLIANT     (L_I) := GETCUSTOMERRESULT(A_SC, L_CUSTOMER, 'all_compliant') ;
   END LOOP;
   RETURN(L_RETCODE);
EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
              'CompareCustomer', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END COMPARECUSTOMER;

 FUNCTION GETCUSTOMERDETAILS
 (A_SC                   IN VARCHAR2,                    
  A_CUSTOMER             IN VARCHAR2,                    
  A_PP                   OUT UNAPIGEN.VC20_TABLE_TYPE,   
  A_PP_VERSION           OUT UNAPIGEN.VC20_TABLE_TYPE,   
  A_PP_KEY1              OUT UNAPIGEN.VC20_TABLE_TYPE,   
  A_PP_KEY2              OUT UNAPIGEN.VC20_TABLE_TYPE,   
  A_PP_KEY3              OUT UNAPIGEN.VC20_TABLE_TYPE,   
  A_PP_KEY4              OUT UNAPIGEN.VC20_TABLE_TYPE,   
  A_PP_KEY5              OUT UNAPIGEN.VC20_TABLE_TYPE,   
  A_PP_DESCRIPTION       OUT UNAPIGEN.VC40_TABLE_TYPE,   
  A_PP_SEQ               OUT UNAPIGEN.NUM_TABLE_TYPE,    
  A_PR                   OUT UNAPIGEN.VC20_TABLE_TYPE,   
  A_PR_VERSION           OUT UNAPIGEN.VC20_TABLE_TYPE,   
  A_PR_DESCRIPTION       OUT UNAPIGEN.VC40_TABLE_TYPE,   
  A_PR_SEQ               OUT UNAPIGEN.NUM_TABLE_TYPE,    
  A_VALUE_F              OUT UNAPIGEN.FLOAT_TABLE_TYPE,  
  A_UNIT                 OUT UNAPIGEN.VC20_TABLE_TYPE,   
  A_LOW_LIMIT_A          OUT UNAPIGEN.FLOAT_TABLE_TYPE,  
  A_HIGH_LIMIT_A         OUT UNAPIGEN.FLOAT_TABLE_TYPE,  
  A_LOW_SPEC_A           OUT UNAPIGEN.FLOAT_TABLE_TYPE,  
  A_HIGH_SPEC_A          OUT UNAPIGEN.FLOAT_TABLE_TYPE,  
  A_LOW_DEV_A            OUT UNAPIGEN.FLOAT_TABLE_TYPE,  
  A_REL_LOW_DEV_A        OUT UNAPIGEN.CHAR1_TABLE_TYPE,  
  A_TARGET_A             OUT UNAPIGEN.FLOAT_TABLE_TYPE,  
  A_HIGH_DEV_A           OUT UNAPIGEN.FLOAT_TABLE_TYPE,  
  A_REL_HIGH_DEV_A       OUT UNAPIGEN.CHAR1_TABLE_TYPE,  
  A_LOW_LIMIT_B          OUT UNAPIGEN.FLOAT_TABLE_TYPE,  
  A_HIGH_LIMIT_B         OUT UNAPIGEN.FLOAT_TABLE_TYPE,  
  A_LOW_SPEC_B           OUT UNAPIGEN.FLOAT_TABLE_TYPE,  
  A_HIGH_SPEC_B          OUT UNAPIGEN.FLOAT_TABLE_TYPE,  
  A_LOW_DEV_B            OUT UNAPIGEN.FLOAT_TABLE_TYPE,  
  A_REL_LOW_DEV_B        OUT UNAPIGEN.CHAR1_TABLE_TYPE,  
  A_TARGET_B             OUT UNAPIGEN.FLOAT_TABLE_TYPE,  
  A_HIGH_DEV_B           OUT UNAPIGEN.FLOAT_TABLE_TYPE,  
  A_REL_HIGH_DEV_B       OUT UNAPIGEN.CHAR1_TABLE_TYPE,  
  A_LOW_LIMIT_C          OUT UNAPIGEN.FLOAT_TABLE_TYPE,  
  A_HIGH_LIMIT_C         OUT UNAPIGEN.FLOAT_TABLE_TYPE,  
  A_LOW_SPEC_C           OUT UNAPIGEN.FLOAT_TABLE_TYPE,  
  A_HIGH_SPEC_C          OUT UNAPIGEN.FLOAT_TABLE_TYPE,  
  A_LOW_DEV_C            OUT UNAPIGEN.FLOAT_TABLE_TYPE,  
  A_REL_LOW_DEV_C        OUT UNAPIGEN.CHAR1_TABLE_TYPE,  
  A_TARGET_C             OUT UNAPIGEN.FLOAT_TABLE_TYPE,  
  A_HIGH_DEV_C           OUT UNAPIGEN.FLOAT_TABLE_TYPE,  
  A_REL_HIGH_DEV_C       OUT UNAPIGEN.CHAR1_TABLE_TYPE,  
  A_LIMIT_A_COMPLIANT    OUT UNAPIGEN.CHAR1_TABLE_TYPE,  
  A_SPEC_A_COMPLIANT     OUT UNAPIGEN.CHAR1_TABLE_TYPE,  
  A_TARGET_A_COMPLIANT   OUT UNAPIGEN.CHAR1_TABLE_TYPE,  
  A_LIMIT_B_COMPLIANT    OUT UNAPIGEN.CHAR1_TABLE_TYPE,  
  A_SPEC_B_COMPLIANT     OUT UNAPIGEN.CHAR1_TABLE_TYPE,  
  A_TARGET_B_COMPLIANT   OUT UNAPIGEN.CHAR1_TABLE_TYPE,  
  A_LIMIT_C_COMPLIANT    OUT UNAPIGEN.CHAR1_TABLE_TYPE,  
  A_SPEC_C_COMPLIANT     OUT UNAPIGEN.CHAR1_TABLE_TYPE,  
  A_TARGET_C_COMPLIANT   OUT UNAPIGEN.CHAR1_TABLE_TYPE,  
  A_ALL_COMPLIANT        OUT UNAPIGEN.CHAR1_TABLE_TYPE,  
  A_NR_OF_ROWS           IN OUT  NUMBER )                
 RETURN NUMBER IS
L_PP                      VARCHAR2(20);
L_PP_VERSION              VARCHAR2(20);
L_PP_KEY1                 VARCHAR2(20);
L_PP_KEY2                 VARCHAR2(20);
L_PP_KEY3                 VARCHAR2(20);
L_PP_KEY4                 VARCHAR2(20);
L_PP_KEY5                 VARCHAR2(20);
L_PP_DESCRIPTION          VARCHAR2(40);
L_PR_DESCRIPTION          VARCHAR2(40);
L_PP_SEQ                  NUMBER      ;
L_PR                      VARCHAR2(20);
L_PR_VERSION              VARCHAR2(20);
L_PR_SEQ                  NUMBER      ;
L_MT                      VARCHAR2(20);
L_MT_VERSION              VARCHAR2(20);
L_MT_SEQ                  NUMBER      ;
L_IS_PP_IN_PP             CHAR(1)     ;
L_VALUE_F                 FLOAT       ;
L_UNIT                    VARCHAR2(20);
L_LOW_LIMIT_A             FLOAT       ;
L_HIGH_LIMIT_A            FLOAT       ;
L_LOW_SPEC_A              FLOAT       ;
L_HIGH_SPEC_A             FLOAT       ;
L_LOW_DEV_A               FLOAT       ;
L_REL_LOW_DEV_A           CHAR(1)     ;
L_TARGET_A                FLOAT       ;
L_HIGH_DEV_A              FLOAT       ;
L_REL_HIGH_DEV_A          CHAR(1)     ;
L_LOW_LIMIT_B             FLOAT       ;
L_HIGH_LIMIT_B            FLOAT       ;
L_LOW_SPEC_B              FLOAT       ;
L_HIGH_SPEC_B             FLOAT       ;
L_LOW_DEV_B               FLOAT       ;
L_REL_LOW_DEV_B           CHAR(1)     ;
L_TARGET_B                FLOAT       ;
L_HIGH_DEV_B              FLOAT       ;
L_REL_HIGH_DEV_B          CHAR(1)     ;
L_LOW_LIMIT_C             FLOAT       ;
L_HIGH_LIMIT_C            FLOAT       ;
L_LOW_SPEC_C              FLOAT       ;
L_HIGH_SPEC_C             FLOAT       ;
L_LOW_DEV_C               FLOAT       ;
L_REL_LOW_DEV_C           CHAR(1)     ;
L_TARGET_C                FLOAT       ;
L_HIGH_DEV_C              FLOAT       ;
L_REL_HIGH_DEV_C          CHAR(1)     ;
L_LIMIT_A_COMPLIANT       CHAR(1)     ;
L_SPEC_A_COMPLIANT        CHAR(1)     ;
L_TARGET_A_COMPLIANT      CHAR(1)     ;
L_LIMIT_B_COMPLIANT       CHAR(1)     ;
L_SPEC_B_COMPLIANT        CHAR(1)     ;
L_TARGET_B_COMPLIANT      CHAR(1)     ;
L_LIMIT_C_COMPLIANT       CHAR(1)     ;
L_SPEC_C_COMPLIANT        CHAR(1)     ;
L_TARGET_C_COMPLIANT      CHAR(1)     ;
L_ALL_COMPLIANT           CHAR(1)     ;

 L_CUST_CURSOR INTEGER;
 BEGIN
 
   IF NVL(A_NR_OF_ROWS, 0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;
    L_CUST_CURSOR := DBMS_SQL.OPEN_CURSOR;
    L_SQL_STRING := 'SELECT pp, pp_version, pp_key1, pp_key2, pp_key3, pp_key4, pp_key5, pp_description, pp_seq, pr, pr_version,' ||
                    'pr_description, pr_seq,  value_f, unit, low_limit_a, high_limit_a, low_spec_a, high_spec_a, low_dev_a,' ||
                    'rel_low_dev_a, target_a, high_dev_a, rel_high_dev_a, low_limit_b, high_limit_b, low_spec_b,' ||
                    'high_spec_b, low_dev_b, rel_low_dev_b, target_b, high_dev_b, rel_high_dev_b, low_limit_c,' ||
                    'high_limit_c, low_spec_c, high_spec_c, low_dev_c, rel_low_dev_c, target_c, high_dev_c,' || 
                    'rel_high_dev_c, limit_a_compliant, spec_a_compliant, target_a_compliant, limit_b_compliant,' ||
                    'spec_b_compliant, target_b_compliant, limit_c_compliant, spec_c_compliant, target_c_compliant,' ||
                    'all_compliant FROM dd'||UNAPIGEN.P_DD||'.uvcomparecustomer where sc=''' || A_SC|| ''' and customer = ''' || A_CUSTOMER||'''' ;
 
    DBMS_SQL.PARSE(L_CUST_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

    DBMS_SQL.DEFINE_COLUMN       (L_CUST_CURSOR,  1,   L_PP                 , 20 );
    DBMS_SQL.DEFINE_COLUMN       (L_CUST_CURSOR,  2,   L_PP_VERSION         , 20 );
    DBMS_SQL.DEFINE_COLUMN       (L_CUST_CURSOR,  3,   L_PP_KEY1            , 20 );
    DBMS_SQL.DEFINE_COLUMN       (L_CUST_CURSOR,  4,   L_PP_KEY2            , 20 );
    DBMS_SQL.DEFINE_COLUMN       (L_CUST_CURSOR,  5,   L_PP_KEY3            , 20 );
    DBMS_SQL.DEFINE_COLUMN       (L_CUST_CURSOR,  6,   L_PP_KEY4            , 20 );
    DBMS_SQL.DEFINE_COLUMN       (L_CUST_CURSOR,  7,   L_PP_KEY5            , 20 );
    DBMS_SQL.DEFINE_COLUMN       (L_CUST_CURSOR,  8,   L_PP_DESCRIPTION     , 40 );
    DBMS_SQL.DEFINE_COLUMN       (L_CUST_CURSOR,  9,   L_PP_SEQ                  );
    DBMS_SQL.DEFINE_COLUMN       (L_CUST_CURSOR,  10,  L_PR                 , 20 );
    DBMS_SQL.DEFINE_COLUMN       (L_CUST_CURSOR,  11,  L_PR_VERSION         , 20 );
    DBMS_SQL.DEFINE_COLUMN       (L_CUST_CURSOR,  12,  L_PR_DESCRIPTION     , 40 );
    DBMS_SQL.DEFINE_COLUMN       (L_CUST_CURSOR,  13,  L_PR_SEQ                  );
    DBMS_SQL.DEFINE_COLUMN       (L_CUST_CURSOR,  14,  L_VALUE_F                 );
    DBMS_SQL.DEFINE_COLUMN       (L_CUST_CURSOR,  15,  L_UNIT               , 20 );
    DBMS_SQL.DEFINE_COLUMN       (L_CUST_CURSOR,  16,  L_LOW_LIMIT_A             );
    DBMS_SQL.DEFINE_COLUMN       (L_CUST_CURSOR,  17,  L_HIGH_LIMIT_A            );
    DBMS_SQL.DEFINE_COLUMN       (L_CUST_CURSOR,  18,  L_LOW_SPEC_A              );
    DBMS_SQL.DEFINE_COLUMN       (L_CUST_CURSOR,  19,  L_HIGH_SPEC_A             );
    DBMS_SQL.DEFINE_COLUMN       (L_CUST_CURSOR,  20,  L_LOW_DEV_A               );
    DBMS_SQL.DEFINE_COLUMN_CHAR  (L_CUST_CURSOR,  21,  L_REL_LOW_DEV_A     ,  1  );
    DBMS_SQL.DEFINE_COLUMN       (L_CUST_CURSOR,  22,  L_TARGET_A                );
    DBMS_SQL.DEFINE_COLUMN       (L_CUST_CURSOR,  23,  L_HIGH_DEV_A              );
    DBMS_SQL.DEFINE_COLUMN_CHAR  (L_CUST_CURSOR,  24,  L_REL_HIGH_DEV_A    ,  1  );
    DBMS_SQL.DEFINE_COLUMN       (L_CUST_CURSOR,  25,  L_LOW_LIMIT_B             );
    DBMS_SQL.DEFINE_COLUMN       (L_CUST_CURSOR,  26,  L_HIGH_LIMIT_B            );
    DBMS_SQL.DEFINE_COLUMN       (L_CUST_CURSOR,  27,  L_LOW_SPEC_B              );
    DBMS_SQL.DEFINE_COLUMN       (L_CUST_CURSOR,  28,  L_HIGH_SPEC_B             );
    DBMS_SQL.DEFINE_COLUMN       (L_CUST_CURSOR,  29,  L_LOW_DEV_B               );
    DBMS_SQL.DEFINE_COLUMN_CHAR  (L_CUST_CURSOR,  30,  L_REL_LOW_DEV_B      , 1  );
    DBMS_SQL.DEFINE_COLUMN       (L_CUST_CURSOR,  31,  L_TARGET_B                );
    DBMS_SQL.DEFINE_COLUMN       (L_CUST_CURSOR,  32,  L_HIGH_DEV_B              );
    DBMS_SQL.DEFINE_COLUMN_CHAR  (L_CUST_CURSOR,  33,  L_REL_HIGH_DEV_B    ,  1  );
    DBMS_SQL.DEFINE_COLUMN       (L_CUST_CURSOR,  34,  L_LOW_LIMIT_C             );
    DBMS_SQL.DEFINE_COLUMN       (L_CUST_CURSOR,  35,  L_HIGH_LIMIT_C            );
    DBMS_SQL.DEFINE_COLUMN       (L_CUST_CURSOR,  36,  L_LOW_SPEC_C              );
    DBMS_SQL.DEFINE_COLUMN       (L_CUST_CURSOR,  37,  L_HIGH_SPEC_C             );
    DBMS_SQL.DEFINE_COLUMN       (L_CUST_CURSOR,  38,  L_LOW_DEV_C               );
    DBMS_SQL.DEFINE_COLUMN_CHAR  (L_CUST_CURSOR,  39,  L_REL_LOW_DEV_C      , 1  );
    DBMS_SQL.DEFINE_COLUMN       (L_CUST_CURSOR,  40,  L_TARGET_C                );
    DBMS_SQL.DEFINE_COLUMN       (L_CUST_CURSOR,  41,  L_HIGH_DEV_C              );
    DBMS_SQL.DEFINE_COLUMN_CHAR  (L_CUST_CURSOR,  42,  L_REL_HIGH_DEV_C     , 1  );
    DBMS_SQL.DEFINE_COLUMN_CHAR  (L_CUST_CURSOR,  43,  L_LIMIT_A_COMPLIANT  , 1  );
    DBMS_SQL.DEFINE_COLUMN_CHAR  (L_CUST_CURSOR,  44,  L_SPEC_A_COMPLIANT   , 1  );
    DBMS_SQL.DEFINE_COLUMN_CHAR  (L_CUST_CURSOR,  45,  L_TARGET_A_COMPLIANT , 1  );
    DBMS_SQL.DEFINE_COLUMN_CHAR  (L_CUST_CURSOR,  46,  L_LIMIT_B_COMPLIANT  , 1  );
    DBMS_SQL.DEFINE_COLUMN_CHAR  (L_CUST_CURSOR,  47,  L_SPEC_B_COMPLIANT   , 1  );
    DBMS_SQL.DEFINE_COLUMN_CHAR  (L_CUST_CURSOR,  48,  L_TARGET_B_COMPLIANT , 1  );
    DBMS_SQL.DEFINE_COLUMN_CHAR  (L_CUST_CURSOR,  49,  L_LIMIT_C_COMPLIANT  , 1  );
    DBMS_SQL.DEFINE_COLUMN_CHAR  (L_CUST_CURSOR,  50,  L_SPEC_C_COMPLIANT   , 1  );   
    DBMS_SQL.DEFINE_COLUMN_CHAR  (L_CUST_CURSOR,  51,  L_TARGET_C_COMPLIANT , 1  );
    DBMS_SQL.DEFINE_COLUMN_CHAR  (L_CUST_CURSOR,  52,  L_ALL_COMPLIANT      , 1  );

                                                                          
    L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_CUST_CURSOR);
    L_FETCHED_ROWS := 0;
 
    LOOP
       EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;
       DBMS_SQL.COLUMN_VALUE        (L_CUST_CURSOR,  1 ,  L_PP                 );
       DBMS_SQL.COLUMN_VALUE        (L_CUST_CURSOR,  2 ,  L_PP_VERSION         );
       DBMS_SQL.COLUMN_VALUE        (L_CUST_CURSOR,  3 ,  L_PP_KEY1            );
       DBMS_SQL.COLUMN_VALUE        (L_CUST_CURSOR,  4 ,  L_PP_KEY2            );
       DBMS_SQL.COLUMN_VALUE        (L_CUST_CURSOR,  5 ,  L_PP_KEY3            );
       DBMS_SQL.COLUMN_VALUE        (L_CUST_CURSOR,  6 ,  L_PP_KEY4            );
       DBMS_SQL.COLUMN_VALUE        (L_CUST_CURSOR,  7 ,  L_PP_KEY5            );
       DBMS_SQL.COLUMN_VALUE        (L_CUST_CURSOR,  8 ,  L_PP_DESCRIPTION     );
       DBMS_SQL.COLUMN_VALUE        (L_CUST_CURSOR,  9 ,  L_PP_SEQ             );
       DBMS_SQL.COLUMN_VALUE        (L_CUST_CURSOR,  10 , L_PR                 );
       DBMS_SQL.COLUMN_VALUE        (L_CUST_CURSOR,  11,  L_PR_VERSION         );
       DBMS_SQL.COLUMN_VALUE        (L_CUST_CURSOR,  12,  L_PR_DESCRIPTION     );
       DBMS_SQL.COLUMN_VALUE        (L_CUST_CURSOR,  13,  L_PR_SEQ             );
       DBMS_SQL.COLUMN_VALUE        (L_CUST_CURSOR,  14,  L_VALUE_F            );
       DBMS_SQL.COLUMN_VALUE        (L_CUST_CURSOR,  15,  L_UNIT               );
       DBMS_SQL.COLUMN_VALUE        (L_CUST_CURSOR,  16,  L_LOW_LIMIT_A        );
       DBMS_SQL.COLUMN_VALUE        (L_CUST_CURSOR,  17,  L_HIGH_LIMIT_A       );
       DBMS_SQL.COLUMN_VALUE        (L_CUST_CURSOR,  18,  L_LOW_SPEC_A         );
       DBMS_SQL.COLUMN_VALUE        (L_CUST_CURSOR,  19,  L_HIGH_SPEC_A        );
       DBMS_SQL.COLUMN_VALUE        (L_CUST_CURSOR,  20,  L_LOW_DEV_A          );
       DBMS_SQL.COLUMN_VALUE_CHAR   (L_CUST_CURSOR,  21,  L_REL_LOW_DEV_A      );
       DBMS_SQL.COLUMN_VALUE        (L_CUST_CURSOR,  22,  L_TARGET_A           );
       DBMS_SQL.COLUMN_VALUE        (L_CUST_CURSOR,  23,  L_HIGH_DEV_A         );
       DBMS_SQL.COLUMN_VALUE_CHAR   (L_CUST_CURSOR,  24,  L_REL_HIGH_DEV_A     );
       DBMS_SQL.COLUMN_VALUE        (L_CUST_CURSOR,  25,  L_LOW_LIMIT_B        );
       DBMS_SQL.COLUMN_VALUE        (L_CUST_CURSOR,  26,  L_HIGH_LIMIT_B       );
       DBMS_SQL.COLUMN_VALUE        (L_CUST_CURSOR,  27,  L_LOW_SPEC_B         );
       DBMS_SQL.COLUMN_VALUE        (L_CUST_CURSOR,  28,  L_HIGH_SPEC_B        );
       DBMS_SQL.COLUMN_VALUE        (L_CUST_CURSOR,  29,  L_LOW_DEV_B          );
       DBMS_SQL.COLUMN_VALUE_CHAR   (L_CUST_CURSOR,  30,  L_REL_LOW_DEV_B      );
       DBMS_SQL.COLUMN_VALUE        (L_CUST_CURSOR,  31,  L_TARGET_B           );
       DBMS_SQL.COLUMN_VALUE        (L_CUST_CURSOR,  32,  L_HIGH_DEV_B         );
       DBMS_SQL.COLUMN_VALUE_CHAR   (L_CUST_CURSOR,  33,  L_REL_HIGH_DEV_B     );
       DBMS_SQL.COLUMN_VALUE        (L_CUST_CURSOR,  34,  L_LOW_LIMIT_C        );
       DBMS_SQL.COLUMN_VALUE        (L_CUST_CURSOR,  35,  L_HIGH_LIMIT_C       );
       DBMS_SQL.COLUMN_VALUE        (L_CUST_CURSOR,  36,  L_LOW_SPEC_C         );
       DBMS_SQL.COLUMN_VALUE        (L_CUST_CURSOR,  37,  L_HIGH_SPEC_C        );
       DBMS_SQL.COLUMN_VALUE        (L_CUST_CURSOR,  38,  L_LOW_DEV_C          );
       DBMS_SQL.COLUMN_VALUE_CHAR   (L_CUST_CURSOR,  39,  L_REL_LOW_DEV_C      );
       DBMS_SQL.COLUMN_VALUE        (L_CUST_CURSOR,  40,  L_TARGET_C           );
       DBMS_SQL.COLUMN_VALUE        (L_CUST_CURSOR,  41,  L_HIGH_DEV_C         );
       DBMS_SQL.COLUMN_VALUE_CHAR   (L_CUST_CURSOR,  42,  L_REL_HIGH_DEV_C     );
       DBMS_SQL.COLUMN_VALUE_CHAR   (L_CUST_CURSOR,  43,  L_LIMIT_A_COMPLIANT  );
       DBMS_SQL.COLUMN_VALUE_CHAR   (L_CUST_CURSOR,  44,  L_SPEC_A_COMPLIANT   );
       DBMS_SQL.COLUMN_VALUE_CHAR   (L_CUST_CURSOR,  45,  L_TARGET_A_COMPLIANT );
       DBMS_SQL.COLUMN_VALUE_CHAR   (L_CUST_CURSOR,  46,  L_LIMIT_B_COMPLIANT  );
       DBMS_SQL.COLUMN_VALUE_CHAR   (L_CUST_CURSOR,  47,  L_SPEC_B_COMPLIANT   );
       DBMS_SQL.COLUMN_VALUE_CHAR   (L_CUST_CURSOR,  48,  L_TARGET_B_COMPLIANT );
       DBMS_SQL.COLUMN_VALUE_CHAR   (L_CUST_CURSOR,  49,  L_LIMIT_C_COMPLIANT  );
       DBMS_SQL.COLUMN_VALUE_CHAR   (L_CUST_CURSOR,  50,  L_SPEC_C_COMPLIANT   );
       DBMS_SQL.COLUMN_VALUE_CHAR   (L_CUST_CURSOR,  51,  L_TARGET_C_COMPLIANT );
       DBMS_SQL.COLUMN_VALUE_CHAR   (L_CUST_CURSOR,  52,  L_ALL_COMPLIANT      );

       L_FETCHED_ROWS :=   L_FETCHED_ROWS  + 1;
       A_PP                    (L_FETCHED_ROWS)    :=   L_PP                ; 
       A_PP_VERSION            (L_FETCHED_ROWS)    :=   L_PP_VERSION        ;
       A_PP_KEY1               (L_FETCHED_ROWS)    :=   L_PP_KEY1           ;
       A_PP_KEY2               (L_FETCHED_ROWS)    :=   L_PP_KEY2           ;
       A_PP_KEY3               (L_FETCHED_ROWS)    :=   L_PP_KEY3           ;
       A_PP_KEY4               (L_FETCHED_ROWS)    :=   L_PP_KEY4           ;
       A_PP_KEY5               (L_FETCHED_ROWS)    :=   L_PP_KEY5           ;
       A_PP_DESCRIPTION        (L_FETCHED_ROWS)    :=   L_PP_DESCRIPTION    ;
       A_PP_SEQ                (L_FETCHED_ROWS)    :=   L_PP_SEQ            ;
       A_PR                    (L_FETCHED_ROWS)    :=   L_PR                ;
       A_PR_VERSION            (L_FETCHED_ROWS)    :=   L_PR_VERSION        ;
       A_PR_DESCRIPTION        (L_FETCHED_ROWS)    :=   L_PR_DESCRIPTION    ;
       A_PR_SEQ                (L_FETCHED_ROWS)    :=   L_PR_SEQ            ;
       A_VALUE_F               (L_FETCHED_ROWS)    :=   L_VALUE_F           ;
       A_UNIT                  (L_FETCHED_ROWS)    :=   L_UNIT              ;
       A_LOW_LIMIT_A           (L_FETCHED_ROWS)    :=   L_LOW_LIMIT_A       ;
       A_HIGH_LIMIT_A          (L_FETCHED_ROWS)    :=   L_HIGH_LIMIT_A      ;
       A_LOW_SPEC_A            (L_FETCHED_ROWS)    :=   L_LOW_SPEC_A        ;
       A_HIGH_SPEC_A           (L_FETCHED_ROWS)    :=   L_HIGH_SPEC_A       ;
       A_LOW_DEV_A             (L_FETCHED_ROWS)    :=   L_LOW_DEV_A         ;
       A_REL_LOW_DEV_A         (L_FETCHED_ROWS)    :=   L_REL_LOW_DEV_A     ;
       A_TARGET_A              (L_FETCHED_ROWS)    :=   L_TARGET_A          ;
       A_HIGH_DEV_A            (L_FETCHED_ROWS)    :=   L_HIGH_DEV_A        ;
       A_REL_HIGH_DEV_A        (L_FETCHED_ROWS)    :=   L_REL_HIGH_DEV_A    ;
       A_LOW_LIMIT_B           (L_FETCHED_ROWS)    :=   L_LOW_LIMIT_B       ;
       A_HIGH_LIMIT_B          (L_FETCHED_ROWS)    :=   L_HIGH_LIMIT_B      ;
       A_LOW_SPEC_B            (L_FETCHED_ROWS)    :=   L_LOW_SPEC_B        ;
       A_HIGH_SPEC_B           (L_FETCHED_ROWS)    :=   L_HIGH_SPEC_B       ;
       A_LOW_DEV_B             (L_FETCHED_ROWS)    :=   L_LOW_DEV_B         ;
       A_REL_LOW_DEV_B         (L_FETCHED_ROWS)    :=   L_REL_LOW_DEV_B     ;
       A_TARGET_B              (L_FETCHED_ROWS)    :=   L_TARGET_B          ;
       A_HIGH_DEV_B            (L_FETCHED_ROWS)    :=   L_HIGH_DEV_B        ;
       A_REL_HIGH_DEV_B        (L_FETCHED_ROWS)    :=   L_REL_HIGH_DEV_B    ;
       A_LOW_LIMIT_C           (L_FETCHED_ROWS)    :=   L_LOW_LIMIT_C       ;
       A_HIGH_LIMIT_C          (L_FETCHED_ROWS)    :=   L_HIGH_LIMIT_C      ;
       A_LOW_SPEC_C            (L_FETCHED_ROWS)    :=   L_LOW_SPEC_C        ;
       A_HIGH_SPEC_C           (L_FETCHED_ROWS)    :=   L_HIGH_SPEC_C       ;
       A_LOW_DEV_C             (L_FETCHED_ROWS)    :=   L_LOW_DEV_C         ;
       A_REL_LOW_DEV_C         (L_FETCHED_ROWS)    :=   L_REL_LOW_DEV_C     ;
       A_TARGET_C              (L_FETCHED_ROWS)    :=   L_TARGET_C          ;
       A_HIGH_DEV_C            (L_FETCHED_ROWS)    :=   L_HIGH_DEV_C        ;
       A_REL_HIGH_DEV_C        (L_FETCHED_ROWS)    :=   L_REL_HIGH_DEV_C    ;
       A_LIMIT_A_COMPLIANT     (L_FETCHED_ROWS)    :=   L_LIMIT_A_COMPLIANT ;
       A_SPEC_A_COMPLIANT      (L_FETCHED_ROWS)    :=   L_SPEC_A_COMPLIANT  ;
       A_TARGET_A_COMPLIANT    (L_FETCHED_ROWS)    :=   L_TARGET_A_COMPLIANT;
       A_LIMIT_B_COMPLIANT     (L_FETCHED_ROWS)    :=   L_LIMIT_B_COMPLIANT ;
       A_SPEC_B_COMPLIANT      (L_FETCHED_ROWS)    :=   L_SPEC_B_COMPLIANT  ;
       A_TARGET_B_COMPLIANT    (L_FETCHED_ROWS)    :=   L_TARGET_B_COMPLIANT;
       A_LIMIT_C_COMPLIANT     (L_FETCHED_ROWS)    :=   L_LIMIT_C_COMPLIANT ;
       A_SPEC_C_COMPLIANT      (L_FETCHED_ROWS)    :=   L_SPEC_C_COMPLIANT  ;
       A_TARGET_C_COMPLIANT    (L_FETCHED_ROWS)    :=   L_TARGET_C_COMPLIANT;
       A_ALL_COMPLIANT         (L_FETCHED_ROWS)    :=   L_ALL_COMPLIANT     ;

       IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
          L_RESULT := DBMS_SQL.FETCH_ROWS(L_CUST_CURSOR);
       END IF;
    END LOOP;

    DBMS_SQL.CLOSE_CURSOR(L_CUST_CURSOR);
 
    IF L_FETCHED_ROWS = 0 THEN
       L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
    ELSE
       A_NR_OF_ROWS := L_FETCHED_ROWS;
       L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
    END IF;
 
    RETURN(L_RET_CODE);
 
EXCEPTION
    WHEN OTHERS THEN
       L_SQLERRM := SQLERRM;
       UNAPIGEN.U4ROLLBACK;
       INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
       VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
               'GetCustomerDetails', L_SQLERRM);
       UNAPIGEN.U4COMMIT;
       IF DBMS_SQL.IS_OPEN(L_CUST_CURSOR) THEN
          DBMS_SQL.CLOSE_CURSOR(L_CUST_CURSOR);
       END IF;
       RETURN(UNAPIGEN.DBERR_GENFAIL);

END GETCUSTOMERDETAILS;

FUNCTION CREATECUSTOMERDETAILS
(A_SC                  IN VARCHAR2,                    
 A_CUSTOMER        IN UNAPIGEN.VC20_TABLE_TYPE,    
 A_NR_OF_ROWS          IN NUMBER )                     
RETURN NUMBER IS
L_PP          UNAPIGEN.VC20_TABLE_TYPE;  
L_PP_VERSION  UNAPIGEN.VC20_TABLE_TYPE;  
L_PP_KEY1     UNAPIGEN.VC20_TABLE_TYPE;  
L_PP_KEY2     UNAPIGEN.VC20_TABLE_TYPE;  
L_PP_KEY3     UNAPIGEN.VC20_TABLE_TYPE;  
L_PP_KEY4     UNAPIGEN.VC20_TABLE_TYPE;  
L_PP_KEY5     UNAPIGEN.VC20_TABLE_TYPE; 
L_CUSTOMER    VARCHAR2(20);  
L_I           NUMBER;
L_SEQ         NUMBER;
L_ST          VARCHAR2(20);  
L_ST_VERSION  VARCHAR2(20);  
L_MODIFY_REASON VARCHAR2(255);
L_SC_TEMP  VARCHAR2(20);

L_CUSTOMER_TAB         UNAPIGEN.VC20_TABLE_TYPE;    
L_LIMIT_A_COMPLIANT    UNAPIGEN.CHAR1_TABLE_TYPE;   
L_SPEC_A_COMPLIANT     UNAPIGEN.CHAR1_TABLE_TYPE;   
L_TARGET_A_COMPLIANT   UNAPIGEN.CHAR1_TABLE_TYPE;   
L_LIMIT_B_COMPLIANT    UNAPIGEN.CHAR1_TABLE_TYPE;   
L_SPEC_B_COMPLIANT     UNAPIGEN.CHAR1_TABLE_TYPE;   
L_TARGET_B_COMPLIANT   UNAPIGEN.CHAR1_TABLE_TYPE;   
L_LIMIT_C_COMPLIANT    UNAPIGEN.CHAR1_TABLE_TYPE;   
L_SPEC_C_COMPLIANT     UNAPIGEN.CHAR1_TABLE_TYPE;   
L_TARGET_C_COMPLIANT   UNAPIGEN.CHAR1_TABLE_TYPE;   
L_ALL_COMPLIANT        UNAPIGEN.CHAR1_TABLE_TYPE; 
L_NR_OF_ROWS     NUMBER;

L_GK                   VARCHAR2(20);
L_GK_VERSION           VARCHAR2(20);
L_VALUE                UNAPIGEN.VC40_TABLE_TYPE;

CURSOR L_ST_CURSOR IS
SELECT ST, ST_VERSION 
FROM UTSC
WHERE SC= A_SC;

CURSOR L_COMPARECUSTOMER_CURSOR IS
SELECT SC FROM UTCOMPARECUSTOMER
WHERE SC = A_SC;

CURSOR L_CUSTOMER_PP_CURSOR(C_CUSTOMER VARCHAR2) IS
SELECT PP, PP_VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5
FROM UTCOMPARECUSTOMER
WHERE      SC = A_SC
 AND CUSTOMER = C_CUSTOMER
 AND PR IS NULL
 AND (PP, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5) NOT IN
    (SELECT PG, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5 FROM UTSCPG WHERE SC = A_SC);

BEGIN

    L_SQLERRM := NULL;
    IF UNAPIGEN.P_PP_KEY4CUSTOMER <1 THEN
    
        RETURN(UNAPIGEN.DBERR_SUCCESS);
    END IF;

    IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
        RAISE STPERROR;
    END IF;
    L_SEQ := 0;
    OPEN L_ST_CURSOR;
    FETCH L_ST_CURSOR INTO L_ST, L_ST_VERSION;
    CLOSE L_ST_CURSOR;


 OPEN L_COMPARECUSTOMER_CURSOR;
 FETCH L_COMPARECUSTOMER_CURSOR INTO L_SC_TEMP;
 IF L_COMPARECUSTOMER_CURSOR%NOTFOUND THEN
    L_NR_OF_ROWS:= 100;
       L_RET_CODE := COMPARECUSTOMER
       (A_SC                   ,
        L_CUSTOMER_TAB          ,    
        L_LIMIT_A_COMPLIANT    ,   
        L_SPEC_A_COMPLIANT     ,   
        L_TARGET_A_COMPLIANT   ,   
        L_LIMIT_B_COMPLIANT    ,   
        L_SPEC_B_COMPLIANT     ,   
        L_TARGET_B_COMPLIANT   ,   
        L_LIMIT_C_COMPLIANT    ,   
        L_SPEC_C_COMPLIANT     ,   
        L_TARGET_C_COMPLIANT   ,   
        L_ALL_COMPLIANT        ,   
        L_NR_OF_ROWS) ;
        IF L_RET_CODE<> UNAPIGEN.DBERR_SUCCESS THEN
           UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
           L_SQLERRM := 'CompareCustomer ret_code='|| L_RET_CODE || '#sc='|| A_SC ||'#nr_of_rows='|| L_NR_OF_ROWS;
           RAISE STPERROR;
        END IF;
 END IF;
 CLOSE L_COMPARECUSTOMER_CURSOR;
 
 FOR L_ROW IN 1..A_NR_OF_ROWS LOOP
    L_CUSTOMER := A_CUSTOMER(L_ROW);
    L_MODIFY_REASON := 'Customer "' || L_CUSTOMER || '" is assigned.';
    FOR L_CUSTPP_REC IN  L_CUSTOMER_PP_CURSOR(L_CUSTOMER) LOOP
       L_RET_CODE := UNAPISC.ADDSCANALYSESDETAILS
                        (A_SC         ,               
                         L_ST         ,      
                         L_ST_VERSION ,      
                         L_CUSTPP_REC.PP         ,      
                         L_CUSTPP_REC.PP_VERSION ,      
                         L_CUSTPP_REC.PP_KEY1    ,      
                         L_CUSTPP_REC.PP_KEY2    ,      
                         L_CUSTPP_REC.PP_KEY3    ,      
                         L_CUSTPP_REC.PP_KEY4    ,      
                         L_CUSTPP_REC.PP_KEY5    ,      
                         L_SEQ        ,  
                         L_MODIFY_REASON ) ;
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
         L_SQLERRM := SUBSTR('AddScAnalysesDetails ret_code='|| L_RET_CODE || '#sc='|| A_SC ||'#st='|| L_ST||'#st_version='|| L_ST_VERSION||
                      'pp='||L_CUSTPP_REC.PP||'pp_version='||L_CUSTPP_REC.PP_VERSION||
                      'pp_key1='||L_CUSTPP_REC.PP_KEY1||
                      'pp_key2='||L_CUSTPP_REC.PP_KEY2||
                      'pp_key3='||L_CUSTPP_REC.PP_KEY3||
                      'pp_key4='||L_CUSTPP_REC.PP_KEY4||
                      'pp_key5='||L_CUSTPP_REC.PP_KEY5,1,255);
         RAISE STPERROR;
   END IF;

        END LOOP;
    END LOOP;

    
   L_GK := SUBSTR(UNAPIGEN.P_PP_KEY_NAME_TAB(UNAPIGEN.P_PP_KEY4CUSTOMER),4);  
   L_GK_VERSION := UNVERSION.P_NO_VERSION;
   L_NR_OF_ROWS := A_NR_OF_ROWS;
   L_MODIFY_REASON := 'CreateCustomerDetails';
   FOR L_I IN 1..L_NR_OF_ROWS LOOP
    L_VALUE(L_I) :=   A_CUSTOMER(L_I);
   END LOOP;
   L_RET_CODE := UNAPISCP.SAVE1SCGROUPKEY(
                    A_SC, 
                    L_GK, 
                    L_GK_VERSION, 
                    L_VALUE, 
                    L_NR_OF_ROWS, 
                    L_MODIFY_REASON);
    IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
       UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
       L_SQLERRM := SUBSTR('Save1ScGroupKey ret_code='|| L_RET_CODE || '#sc='|| A_SC ||'#gk='|| L_GK||'#nr_of_rows='|| L_NR_OF_ROWS,1,255);
       RAISE STPERROR;
    END IF;
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);
 
EXCEPTION
WHEN OTHERS THEN
   IF L_SQLERRM IS NULL THEN   
      L_SQLERRM := SQLERRM;
   END IF;
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveScParameterGroup',SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN   
      UNAPIGEN.LOGERROR('SaveScParameterGroup',L_SQLERRM);   
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveScParameterGroup'));
END CREATECUSTOMERDETAILS;

END UNAPICUSTOMER;
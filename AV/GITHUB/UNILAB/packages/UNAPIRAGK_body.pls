PACKAGE BODY unapiragk AS






STPERROR      EXCEPTION;
L_RET_CODE    INTEGER;
L_SQLERRM     VARCHAR2(255);
L_SQL_STRING  VARCHAR2(2000);
L_SEP         CHAR(1);

FUNCTION GETVERSION
   RETURN VARCHAR2
IS
BEGIN
   RETURN('06.07.00.00_00.13');
EXCEPTION
   WHEN OTHERS THEN
   RETURN (NULL);
END GETVERSION;




PROCEDURE LOGERROR
(A_API IN VARCHAR2, A_ERROR_MSG IN VARCHAR2)
IS
BEGIN
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
           A_API, A_ERROR_MSG);
END LOGERROR;




FUNCTION REMOVEGKFROMARCHIVE
(A_GK IN VARCHAR2, A_GK_TP IN VARCHAR2)
RETURN NUMBER IS
BEGIN
   IF A_GK_TP = 'me' THEN

      DELETE FROM UAUTGKME
      WHERE GK = A_GK;

      DELETE FROM UAUTGKMEHS
      WHERE GK = A_GK;

      DELETE FROM UAUTGKMEHSDETAILS
      WHERE GK = A_GK;

      DELETE FROM UAUTGKMELIST
      WHERE GK = A_GK;

      DELETE FROM UAUTGKMESQL
      WHERE GK = A_GK;
   END IF;
   IF A_GK_TP = 'ws' THEN

      DELETE FROM UAUTGKWS
      WHERE GK = A_GK;

      DELETE FROM UAUTGKWSHS
      WHERE GK = A_GK;

      DELETE FROM UAUTGKWSHSDETAILS
      WHERE GK = A_GK;

      DELETE FROM UAUTGKWSLIST
      WHERE GK = A_GK;

      DELETE FROM UAUTGKWSSQL
      WHERE GK = A_GK;
   END IF;
   IF A_GK_TP = 'rq' THEN

      DELETE FROM UAUTGKRQ
      WHERE GK = A_GK;

      DELETE FROM UAUTGKRQHS
      WHERE GK = A_GK;

      DELETE FROM UAUTGKRQHSDETAILS
      WHERE GK = A_GK;

      DELETE FROM UAUTGKRQLIST
      WHERE GK = A_GK;

      DELETE FROM UAUTGKRQSQL
      WHERE GK = A_GK;
   END IF;
   IF A_GK_TP = 'rt' THEN

      DELETE FROM UAUTGKRT
      WHERE GK = A_GK;

      DELETE FROM UAUTGKRTHS
      WHERE GK = A_GK;

      DELETE FROM UAUTGKRTHSDETAILS
      WHERE GK = A_GK;

      DELETE FROM UAUTGKRTLIST
      WHERE GK = A_GK;

      DELETE FROM UAUTGKRTSQL
      WHERE GK = A_GK;
   END IF;
   IF A_GK_TP = 'sc' THEN

      DELETE FROM UAUTGKSC
      WHERE GK = A_GK;

      DELETE FROM UAUTGKSCHS
      WHERE GK = A_GK;

      DELETE FROM UAUTGKSCHSDETAILS
      WHERE GK = A_GK;

      DELETE FROM UAUTGKSCLIST
      WHERE GK = A_GK;

      DELETE FROM UAUTGKSCSQL
      WHERE GK = A_GK;
   END IF;
   IF A_GK_TP = 'st' THEN

      DELETE FROM UAUTGKST
      WHERE GK = A_GK;

      DELETE FROM UAUTGKSTHS
      WHERE GK = A_GK;

      DELETE FROM UAUTGKSTHSDETAILS
      WHERE GK = A_GK;

      DELETE FROM UAUTGKSTLIST
      WHERE GK = A_GK;

      DELETE FROM UAUTGKSTSQL
      WHERE GK = A_GK;
   END IF;
   IF A_GK_TP = 'sd' THEN

      DELETE FROM UAUTGKSD
      WHERE GK = A_GK;

      DELETE FROM UAUTGKSDHS
      WHERE GK = A_GK;

      DELETE FROM UAUTGKSDHSDETAILS
      WHERE GK = A_GK;

      DELETE FROM UAUTGKSDLIST
      WHERE GK = A_GK;

      DELETE FROM UAUTGKSDSQL
      WHERE GK = A_GK;
   END IF;
   IF A_GK_TP = 'pt' THEN

      DELETE FROM UAUTGKPT
      WHERE GK = A_GK;

      DELETE FROM UAUTGKPTHS
      WHERE GK = A_GK;

      DELETE FROM UAUTGKPTHSDETAILS
      WHERE GK = A_GK;

      DELETE FROM UAUTGKPTLIST
      WHERE GK = A_GK;

      DELETE FROM UAUTGKPTSQL
      WHERE GK = A_GK;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);
END REMOVEGKFROMARCHIVE;




FUNCTION COPYGKTOARCHDB(A_GK IN VARCHAR2, A_GK_TP IN VARCHAR2, A_IGNORE_DUP_VAL_ON_INDEX BOOLEAN) RETURN NUMBER IS
BEGIN
   
   IF A_GK_TP='me' THEN

      INSERT INTO UAUTGKME
         (GK, VERSION, VERSION_IS_CURRENT, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ,
         EFFECTIVE_TILL, EFFECTIVE_TILL_TZ, DESCRIPTION, IS_PROTECTED, VALUE_UNIQUE,
         SINGLE_VALUED, NEW_VAL_ALLOWED, MANDATORY, STRUCT_CREATED, INHERIT_GK,
         VALUE_LIST_TP, DEFAULT_VALUE, DSP_ROWS, VAL_LENGTH, VAL_START, ASSIGN_TP,
         ASSIGN_ID, Q_TP, Q_ID, Q_CHECK_AU, Q_AU, LAST_COMMENT, GK_CLASS, LOG_HS,
         LOG_HS_DETAILS, ALLOW_MODIFY, ACTIVE, LC, LC_VERSION, SS)
      SELECT  GK, VERSION, VERSION_IS_CURRENT, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ,
         EFFECTIVE_TILL, EFFECTIVE_TILL_TZ, DESCRIPTION, IS_PROTECTED, VALUE_UNIQUE,
         SINGLE_VALUED, NEW_VAL_ALLOWED, MANDATORY, STRUCT_CREATED, INHERIT_GK,
         VALUE_LIST_TP, DEFAULT_VALUE, DSP_ROWS, VAL_LENGTH, VAL_START, ASSIGN_TP,
         ASSIGN_ID, Q_TP, Q_ID, Q_CHECK_AU, Q_AU, LAST_COMMENT, GK_CLASS, LOG_HS,
         LOG_HS_DETAILS, ALLOW_MODIFY, ACTIVE, LC, LC_VERSION, SS
      FROM UTGKME
      WHERE GK = A_GK;

      INSERT INTO UAUTGKMEHS
         (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE,
         LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      SELECT  GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE,
         LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ
      FROM UTGKMEHS
      WHERE GK = A_GK;

      INSERT INTO UAUTGKMEHSDETAILS
         (GK, VERSION, TR_SEQ, EV_SEQ, SEQ, DETAILS)
      SELECT           GK, VERSION, TR_SEQ, EV_SEQ, SEQ, DETAILS
      FROM UTGKMEHSDETAILS
      WHERE GK = A_GK;

      INSERT INTO UAUTGKMELIST
         (GK, VERSION, SEQ, VALUE)
      SELECT           GK, VERSION, SEQ, VALUE
      FROM UTGKMELIST
      WHERE GK = A_GK;

      INSERT INTO UAUTGKMESQL
         (GK, VERSION, SEQ, SQLTEXT)
      SELECT           GK, VERSION, SEQ, SQLTEXT
      FROM UTGKMESQL
      WHERE GK = A_GK;
   END IF;

   IF A_GK_TP='ws' THEN

      INSERT INTO UAUTGKWS
         (GK, VERSION, VERSION_IS_CURRENT, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ,
         EFFECTIVE_TILL, EFFECTIVE_TILL_TZ, DESCRIPTION, IS_PROTECTED, VALUE_UNIQUE,
         SINGLE_VALUED, NEW_VAL_ALLOWED, MANDATORY, STRUCT_CREATED, INHERIT_GK,
         VALUE_LIST_TP, DEFAULT_VALUE, DSP_ROWS, VAL_LENGTH, VAL_START, ASSIGN_TP,
         ASSIGN_ID, Q_TP, Q_ID, Q_CHECK_AU, Q_AU, LAST_COMMENT, GK_CLASS, LOG_HS,
         LOG_HS_DETAILS, ALLOW_MODIFY, ACTIVE, LC, LC_VERSION, SS)
      SELECT  GK, VERSION, VERSION_IS_CURRENT, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ,
         EFFECTIVE_TILL, EFFECTIVE_TILL_TZ, DESCRIPTION, IS_PROTECTED, VALUE_UNIQUE,
         SINGLE_VALUED, NEW_VAL_ALLOWED, MANDATORY, STRUCT_CREATED, INHERIT_GK,
         VALUE_LIST_TP, DEFAULT_VALUE, DSP_ROWS, VAL_LENGTH, VAL_START, ASSIGN_TP,
         ASSIGN_ID, Q_TP, Q_ID, Q_CHECK_AU, Q_AU, LAST_COMMENT, GK_CLASS, LOG_HS,
         LOG_HS_DETAILS, ALLOW_MODIFY, ACTIVE, LC, LC_VERSION, SS
      FROM UTGKWS
      WHERE GK = A_GK;

      INSERT INTO UAUTGKWSHS
         (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE,
         LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      SELECT  GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE,
         LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ
      FROM UTGKWSHS
      WHERE GK = A_GK;

      INSERT INTO UAUTGKWSHSDETAILS
         (GK, VERSION, TR_SEQ, EV_SEQ, SEQ, DETAILS)
      SELECT           GK, VERSION, TR_SEQ, EV_SEQ, SEQ, DETAILS
      FROM UTGKWSHSDETAILS
      WHERE GK = A_GK;

      INSERT INTO UAUTGKWSLIST
         (GK, VERSION, SEQ, VALUE)
      SELECT           GK, VERSION, SEQ, VALUE
      FROM UTGKWSLIST
      WHERE GK = A_GK;

      INSERT INTO UAUTGKWSSQL
         (GK, VERSION, SEQ, SQLTEXT)
      SELECT           GK, VERSION, SEQ, SQLTEXT
      FROM UTGKWSSQL
      WHERE GK = A_GK;
   END IF;

   IF A_GK_TP='rq' THEN

      INSERT INTO UAUTGKRQ
         (GK, VERSION, VERSION_IS_CURRENT, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ,
         EFFECTIVE_TILL, EFFECTIVE_TILL_TZ, DESCRIPTION, IS_PROTECTED, VALUE_UNIQUE,
         SINGLE_VALUED, NEW_VAL_ALLOWED, MANDATORY, STRUCT_CREATED, INHERIT_GK,
         VALUE_LIST_TP, DEFAULT_VALUE, DSP_ROWS, VAL_LENGTH, VAL_START, ASSIGN_TP,
         ASSIGN_ID, Q_TP, Q_ID, Q_CHECK_AU, Q_AU, LAST_COMMENT, GK_CLASS, LOG_HS,
         LOG_HS_DETAILS, ALLOW_MODIFY, ACTIVE, LC, LC_VERSION, SS)
      SELECT  GK, VERSION, VERSION_IS_CURRENT, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ,
         EFFECTIVE_TILL, EFFECTIVE_TILL_TZ, DESCRIPTION, IS_PROTECTED, VALUE_UNIQUE,
         SINGLE_VALUED, NEW_VAL_ALLOWED, MANDATORY, STRUCT_CREATED, INHERIT_GK,
         VALUE_LIST_TP, DEFAULT_VALUE, DSP_ROWS, VAL_LENGTH, VAL_START, ASSIGN_TP,
         ASSIGN_ID, Q_TP, Q_ID, Q_CHECK_AU, Q_AU, LAST_COMMENT, GK_CLASS, LOG_HS,
         LOG_HS_DETAILS, ALLOW_MODIFY, ACTIVE, LC, LC_VERSION, SS
      FROM UTGKRQ
      WHERE GK = A_GK;

      INSERT INTO UAUTGKRQHS
         (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE,
         LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      SELECT  GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE,
         LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ
      FROM UTGKRQHS
      WHERE GK = A_GK;

      INSERT INTO UAUTGKRQHSDETAILS
         (GK, VERSION, TR_SEQ, EV_SEQ, SEQ, DETAILS)
      SELECT           GK, VERSION, TR_SEQ, EV_SEQ, SEQ, DETAILS
      FROM UTGKRQHSDETAILS
      WHERE GK = A_GK;

      INSERT INTO UAUTGKRQLIST
         (GK, VERSION, SEQ, VALUE)
      SELECT           GK, VERSION, SEQ, VALUE
      FROM UTGKRQLIST
      WHERE GK = A_GK;

      INSERT INTO UAUTGKRQSQL
         (GK, VERSION, SEQ, SQLTEXT)
      SELECT           GK, VERSION, SEQ, SQLTEXT
      FROM UTGKRQSQL
      WHERE GK = A_GK;
   END IF;

   IF A_GK_TP='rt' THEN

      INSERT INTO UAUTGKRT
         (GK, VERSION, VERSION_IS_CURRENT, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ,
         EFFECTIVE_TILL, EFFECTIVE_TILL_TZ, DESCRIPTION, IS_PROTECTED, VALUE_UNIQUE,
         SINGLE_VALUED, NEW_VAL_ALLOWED, MANDATORY, STRUCT_CREATED, INHERIT_GK,
         VALUE_LIST_TP, DEFAULT_VALUE, DSP_ROWS, VAL_LENGTH, VAL_START, ASSIGN_TP,
         ASSIGN_ID, Q_TP, Q_ID, Q_CHECK_AU, Q_AU, LAST_COMMENT, GK_CLASS, LOG_HS,
         LOG_HS_DETAILS, ALLOW_MODIFY, ACTIVE, LC, LC_VERSION, SS)
      SELECT  GK, VERSION, VERSION_IS_CURRENT, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ,
         EFFECTIVE_TILL, EFFECTIVE_TILL_TZ, DESCRIPTION, IS_PROTECTED, VALUE_UNIQUE,
         SINGLE_VALUED, NEW_VAL_ALLOWED, MANDATORY, STRUCT_CREATED, INHERIT_GK,
         VALUE_LIST_TP, DEFAULT_VALUE, DSP_ROWS, VAL_LENGTH, VAL_START, ASSIGN_TP,
         ASSIGN_ID, Q_TP, Q_ID, Q_CHECK_AU, Q_AU, LAST_COMMENT, GK_CLASS, LOG_HS,
         LOG_HS_DETAILS, ALLOW_MODIFY, ACTIVE, LC, LC_VERSION, SS
      FROM UTGKRT
      WHERE GK = A_GK;

      INSERT INTO UAUTGKRTHS
         (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE,
         LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      SELECT  GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE,
         LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ
      FROM UTGKRTHS
      WHERE GK = A_GK;

      INSERT INTO UAUTGKRTHSDETAILS
         (GK, VERSION, TR_SEQ, EV_SEQ, SEQ, DETAILS)
      SELECT           GK, VERSION, TR_SEQ, EV_SEQ, SEQ, DETAILS
      FROM UTGKRTHSDETAILS
      WHERE GK = A_GK;

      INSERT INTO UAUTGKRTLIST
         (GK, VERSION, SEQ, VALUE)
      SELECT           GK, VERSION, SEQ, VALUE
      FROM UTGKRTLIST
      WHERE GK = A_GK;

      INSERT INTO UAUTGKRTSQL
         (GK, VERSION, SEQ, SQLTEXT)
      SELECT           GK, VERSION, SEQ, SQLTEXT
      FROM UTGKRTSQL
      WHERE GK = A_GK;
   END IF;

   IF A_GK_TP='sc' THEN

      INSERT INTO UAUTGKSC
         (GK, VERSION, VERSION_IS_CURRENT, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ,
         EFFECTIVE_TILL, EFFECTIVE_TILL_TZ, DESCRIPTION, IS_PROTECTED, VALUE_UNIQUE,
         SINGLE_VALUED, NEW_VAL_ALLOWED, MANDATORY, STRUCT_CREATED, INHERIT_GK,
         VALUE_LIST_TP, DEFAULT_VALUE, DSP_ROWS, VAL_LENGTH, VAL_START, ASSIGN_TP,
         ASSIGN_ID, Q_TP, Q_ID, Q_CHECK_AU, Q_AU, LAST_COMMENT, GK_CLASS, LOG_HS,
         LOG_HS_DETAILS, ALLOW_MODIFY, ACTIVE, LC, LC_VERSION, SS)
      SELECT  GK, VERSION, VERSION_IS_CURRENT, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ,
         EFFECTIVE_TILL, EFFECTIVE_TILL_TZ, DESCRIPTION, IS_PROTECTED, VALUE_UNIQUE,
         SINGLE_VALUED, NEW_VAL_ALLOWED, MANDATORY, STRUCT_CREATED, INHERIT_GK,
         VALUE_LIST_TP, DEFAULT_VALUE, DSP_ROWS, VAL_LENGTH, VAL_START, ASSIGN_TP,
         ASSIGN_ID, Q_TP, Q_ID, Q_CHECK_AU, Q_AU, LAST_COMMENT, GK_CLASS, LOG_HS,
         LOG_HS_DETAILS, ALLOW_MODIFY, ACTIVE, LC, LC_VERSION, SS
      FROM UTGKSC
      WHERE GK = A_GK;

      INSERT INTO UAUTGKSCHS
         (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE,
         LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      SELECT  GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE,
         LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ
      FROM UTGKSCHS
      WHERE GK = A_GK;

      INSERT INTO UAUTGKSCHSDETAILS
         (GK, VERSION, TR_SEQ, EV_SEQ, SEQ, DETAILS)
      SELECT           GK, VERSION, TR_SEQ, EV_SEQ, SEQ, DETAILS
      FROM UTGKSCHSDETAILS
      WHERE GK = A_GK;

      INSERT INTO UAUTGKSCLIST
         (GK, VERSION, SEQ, VALUE)
      SELECT           GK, VERSION, SEQ, VALUE
      FROM UTGKSCLIST
      WHERE GK = A_GK;

      INSERT INTO UAUTGKSCSQL
         (GK, VERSION, SEQ, SQLTEXT)
      SELECT           GK, VERSION, SEQ, SQLTEXT
      FROM UTGKSCSQL
      WHERE GK = A_GK;
   END IF;

   IF A_GK_TP='st' THEN

      INSERT INTO UAUTGKST
         (GK, VERSION, VERSION_IS_CURRENT, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ,
         EFFECTIVE_TILL, EFFECTIVE_TILL_TZ, DESCRIPTION, IS_PROTECTED, VALUE_UNIQUE,
         SINGLE_VALUED, NEW_VAL_ALLOWED, MANDATORY, STRUCT_CREATED, INHERIT_GK,
         VALUE_LIST_TP, DEFAULT_VALUE, DSP_ROWS, VAL_LENGTH, VAL_START, ASSIGN_TP,
         ASSIGN_ID, Q_TP, Q_ID, Q_CHECK_AU, Q_AU, LAST_COMMENT, GK_CLASS, LOG_HS,
         LOG_HS_DETAILS, ALLOW_MODIFY, ACTIVE, LC, LC_VERSION, SS)
      SELECT  GK, VERSION, VERSION_IS_CURRENT, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ,
         EFFECTIVE_TILL, EFFECTIVE_TILL_TZ, DESCRIPTION, IS_PROTECTED, VALUE_UNIQUE,
         SINGLE_VALUED, NEW_VAL_ALLOWED, MANDATORY, STRUCT_CREATED, INHERIT_GK,
         VALUE_LIST_TP, DEFAULT_VALUE, DSP_ROWS, VAL_LENGTH, VAL_START, ASSIGN_TP,
         ASSIGN_ID, Q_TP, Q_ID, Q_CHECK_AU, Q_AU, LAST_COMMENT, GK_CLASS, LOG_HS,
         LOG_HS_DETAILS, ALLOW_MODIFY, ACTIVE, LC, LC_VERSION, SS
      FROM UTGKST
      WHERE GK = A_GK;

      INSERT INTO UAUTGKSTHS
         (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE,
         LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      SELECT  GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE,
         LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ
      FROM UTGKSTHS
      WHERE GK = A_GK;

      INSERT INTO UAUTGKSTHSDETAILS
         (GK, VERSION, TR_SEQ, EV_SEQ, SEQ, DETAILS)
      SELECT           GK, VERSION, TR_SEQ, EV_SEQ, SEQ, DETAILS
      FROM UTGKSTHSDETAILS
      WHERE GK = A_GK;

      INSERT INTO UAUTGKSTLIST
         (GK, VERSION, SEQ, VALUE)
      SELECT           GK, VERSION, SEQ, VALUE
      FROM UTGKSTLIST
      WHERE GK = A_GK;

      INSERT INTO UAUTGKSTSQL
         (GK, VERSION, SEQ, SQLTEXT)
      SELECT           GK, VERSION, SEQ, SQLTEXT
      FROM UTGKSTSQL
      WHERE GK = A_GK;
   END IF;

   IF A_GK_TP='sd' THEN

      INSERT INTO UAUTGKSD
         (GK, VERSION, VERSION_IS_CURRENT, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ,
         EFFECTIVE_TILL, EFFECTIVE_TILL_TZ, DESCRIPTION, IS_PROTECTED, VALUE_UNIQUE,
         SINGLE_VALUED, NEW_VAL_ALLOWED, MANDATORY, STRUCT_CREATED, INHERIT_GK,
         VALUE_LIST_TP, DEFAULT_VALUE, DSP_ROWS, VAL_LENGTH, VAL_START, ASSIGN_TP,
         ASSIGN_ID, Q_TP, Q_ID, Q_CHECK_AU, Q_AU, LAST_COMMENT, GK_CLASS, LOG_HS,
         LOG_HS_DETAILS, ALLOW_MODIFY, ACTIVE, LC, LC_VERSION, SS)
      SELECT  GK, VERSION, VERSION_IS_CURRENT, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ,
         EFFECTIVE_TILL, EFFECTIVE_TILL_TZ, DESCRIPTION, IS_PROTECTED, VALUE_UNIQUE,
         SINGLE_VALUED, NEW_VAL_ALLOWED, MANDATORY, STRUCT_CREATED, INHERIT_GK,
         VALUE_LIST_TP, DEFAULT_VALUE, DSP_ROWS, VAL_LENGTH, VAL_START, ASSIGN_TP,
         ASSIGN_ID, Q_TP, Q_ID, Q_CHECK_AU, Q_AU, LAST_COMMENT, GK_CLASS, LOG_HS,
         LOG_HS_DETAILS, ALLOW_MODIFY, ACTIVE, LC, LC_VERSION, SS
      FROM UTGKSD
      WHERE GK = A_GK;

      INSERT INTO UAUTGKSDHS
         (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE,
         LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      SELECT  GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE,
         LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ
      FROM UTGKSDHS
      WHERE GK = A_GK;

      INSERT INTO UAUTGKSDHSDETAILS
         (GK, VERSION, TR_SEQ, EV_SEQ, SEQ, DETAILS)
      SELECT           GK, VERSION, TR_SEQ, EV_SEQ, SEQ, DETAILS
      FROM UTGKSDHSDETAILS
      WHERE GK = A_GK;

      INSERT INTO UAUTGKSDLIST
         (GK, VERSION, SEQ, VALUE)
      SELECT           GK, VERSION, SEQ, VALUE
      FROM UTGKSDLIST
      WHERE GK = A_GK;

      INSERT INTO UAUTGKSDSQL
         (GK, VERSION, SEQ, SQLTEXT)
      SELECT           GK, VERSION, SEQ, SQLTEXT
      FROM UTGKSDSQL
      WHERE GK = A_GK;
   END IF;

   IF A_GK_TP='pt' THEN

      INSERT INTO UAUTGKPT
         (GK, VERSION, VERSION_IS_CURRENT, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ,
         EFFECTIVE_TILL, EFFECTIVE_TILL_TZ, DESCRIPTION, IS_PROTECTED, VALUE_UNIQUE,
         SINGLE_VALUED, NEW_VAL_ALLOWED, MANDATORY, STRUCT_CREATED, INHERIT_GK,
         VALUE_LIST_TP, DEFAULT_VALUE, DSP_ROWS, VAL_LENGTH, VAL_START, ASSIGN_TP,
         ASSIGN_ID, Q_TP, Q_ID, Q_CHECK_AU, Q_AU, LAST_COMMENT, GK_CLASS, LOG_HS,
         LOG_HS_DETAILS, ALLOW_MODIFY, ACTIVE, LC, LC_VERSION, SS)
      SELECT  GK, VERSION, VERSION_IS_CURRENT, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ,
         EFFECTIVE_TILL, EFFECTIVE_TILL_TZ, DESCRIPTION, IS_PROTECTED, VALUE_UNIQUE,
         SINGLE_VALUED, NEW_VAL_ALLOWED, MANDATORY, STRUCT_CREATED, INHERIT_GK,
         VALUE_LIST_TP, DEFAULT_VALUE, DSP_ROWS, VAL_LENGTH, VAL_START, ASSIGN_TP,
         ASSIGN_ID, Q_TP, Q_ID, Q_CHECK_AU, Q_AU, LAST_COMMENT, GK_CLASS, LOG_HS,
         LOG_HS_DETAILS, ALLOW_MODIFY, ACTIVE, LC, LC_VERSION, SS
      FROM UTGKPT
      WHERE GK = A_GK;

      INSERT INTO UAUTGKPTHS
         (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE,
         LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      SELECT  GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE,
         LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ
      FROM UTGKPTHS
      WHERE GK = A_GK;

      INSERT INTO UAUTGKPTHSDETAILS
         (GK, VERSION, TR_SEQ, EV_SEQ, SEQ, DETAILS)
      SELECT           GK, VERSION, TR_SEQ, EV_SEQ, SEQ, DETAILS
      FROM UTGKPTHSDETAILS
      WHERE GK = A_GK;

      INSERT INTO UAUTGKPTLIST
         (GK, VERSION, SEQ, VALUE)
      SELECT           GK, VERSION, SEQ, VALUE
      FROM UTGKPTLIST
      WHERE GK = A_GK;

      INSERT INTO UAUTGKPTSQL
         (GK, VERSION, SEQ, SQLTEXT)
      SELECT           GK, VERSION, SEQ, SQLTEXT
      FROM UTGKPTSQL
      WHERE GK = A_GK;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
   IF A_IGNORE_DUP_VAL_ON_INDEX THEN
      L_RET_CODE := REMOVEGKFROMARCHIVE(A_GK, A_GK_TP);
   END IF;
   RETURN(UNAPIGEN.DBERR_NORECORDS);
END COPYGKTOARCHDB;

FUNCTION ARCHIVEGKTODB
(A_GK IN VARCHAR2, A_GK_TP IN VARCHAR2)
RETURN NUMBER IS
BEGIN
   L_RET_CODE := COPYGKTOARCHDB(A_GK, A_GK_TP, TRUE);
   IF L_RET_CODE = UNAPIGEN.DBERR_NORECORDS THEN
      L_RET_CODE := COPYGKTOARCHDB(A_GK, A_GK_TP, FALSE);
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         L_SQLERRM := 'CopyGkToArchDB#return='||TO_CHAR(L_RET_CODE)||' for gk='||A_GK||'#gk_tp='||A_GK_TP;
         RAISE STPERROR;
      END IF;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      L_SQLERRM := SUBSTR(SQLERRM,1,200);
   END IF;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
          'ArchiveGkToDB', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END ARCHIVEGKTODB;

FUNCTION COPYGKFROMARCHDB(A_GK IN VARCHAR2, A_GK_TP IN VARCHAR2, A_IGNORE_DUP_VAL_ON_INDEX BOOLEAN) RETURN NUMBER IS
BEGIN
   
   IF A_GK_TP='me' THEN

      INSERT INTO UTGKME
            (GK, VERSION, VERSION_IS_CURRENT, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ,
            EFFECTIVE_TILL, EFFECTIVE_TILL_TZ, DESCRIPTION, IS_PROTECTED, VALUE_UNIQUE,
            SINGLE_VALUED, NEW_VAL_ALLOWED, MANDATORY, STRUCT_CREATED, INHERIT_GK,
            VALUE_LIST_TP, DEFAULT_VALUE, DSP_ROWS, VAL_LENGTH, VAL_START, ASSIGN_TP,
            ASSIGN_ID, Q_TP, Q_ID, Q_CHECK_AU, Q_AU, LAST_COMMENT, GK_CLASS, LOG_HS,
            LOG_HS_DETAILS, ALLOW_MODIFY, ACTIVE, LC, LC_VERSION, SS)
      SELECT  GK, VERSION, VERSION_IS_CURRENT, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ,
            EFFECTIVE_TILL, EFFECTIVE_TILL_TZ, DESCRIPTION, IS_PROTECTED, VALUE_UNIQUE,
            SINGLE_VALUED, NEW_VAL_ALLOWED, MANDATORY, STRUCT_CREATED, INHERIT_GK,
            VALUE_LIST_TP, DEFAULT_VALUE, DSP_ROWS, VAL_LENGTH, VAL_START, ASSIGN_TP,
            ASSIGN_ID, Q_TP, Q_ID, Q_CHECK_AU, Q_AU, LAST_COMMENT, GK_CLASS, LOG_HS,
            LOG_HS_DETAILS, ALLOW_MODIFY, ACTIVE, LC, LC_VERSION, SS
      FROM UAUTGKME
      WHERE GK = A_GK;

      INSERT INTO UTGKMEHS
            (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE,
            LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      SELECT  GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE,
            LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ
      FROM UAUTGKMEHS
      WHERE GK = A_GK;

      INSERT INTO UTGKMEHSDETAILS
            (GK, VERSION, TR_SEQ, EV_SEQ, SEQ, DETAILS)
      SELECT              GK, VERSION, TR_SEQ, EV_SEQ, SEQ, DETAILS
      FROM UAUTGKMEHSDETAILS
      WHERE GK = A_GK;

      INSERT INTO UTGKMELIST
            (GK, VERSION, SEQ, VALUE)
      SELECT              GK, VERSION, SEQ, VALUE
      FROM UAUTGKMELIST
      WHERE GK = A_GK;

      INSERT INTO UTGKMESQL
            (GK, VERSION, SEQ, SQLTEXT)
      SELECT              GK, VERSION, SEQ, SQLTEXT
      FROM UAUTGKMESQL
      WHERE GK = A_GK;
   END IF;

   IF A_GK_TP='ws' THEN

      INSERT INTO UTGKWS
            (GK, VERSION, VERSION_IS_CURRENT, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ,
            EFFECTIVE_TILL, EFFECTIVE_TILL_TZ, DESCRIPTION, IS_PROTECTED, VALUE_UNIQUE,
            SINGLE_VALUED, NEW_VAL_ALLOWED, MANDATORY, STRUCT_CREATED, INHERIT_GK,
            VALUE_LIST_TP, DEFAULT_VALUE, DSP_ROWS, VAL_LENGTH, VAL_START, ASSIGN_TP,
            ASSIGN_ID, Q_TP, Q_ID, Q_CHECK_AU, Q_AU, LAST_COMMENT, GK_CLASS, LOG_HS,
            LOG_HS_DETAILS, ALLOW_MODIFY, ACTIVE, LC, LC_VERSION, SS)
      SELECT  GK, VERSION, VERSION_IS_CURRENT, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ,
            EFFECTIVE_TILL, EFFECTIVE_TILL_TZ, DESCRIPTION, IS_PROTECTED, VALUE_UNIQUE,
            SINGLE_VALUED, NEW_VAL_ALLOWED, MANDATORY, STRUCT_CREATED, INHERIT_GK,
            VALUE_LIST_TP, DEFAULT_VALUE, DSP_ROWS, VAL_LENGTH, VAL_START, ASSIGN_TP,
            ASSIGN_ID, Q_TP, Q_ID, Q_CHECK_AU, Q_AU, LAST_COMMENT, GK_CLASS, LOG_HS,
            LOG_HS_DETAILS, ALLOW_MODIFY, ACTIVE, LC, LC_VERSION, SS
      FROM UAUTGKWS
      WHERE GK = A_GK;

      INSERT INTO UTGKWSHS
            (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE,
            LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      SELECT  GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE,
            LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ
      FROM UAUTGKWSHS
      WHERE GK = A_GK;

      INSERT INTO UTGKWSHSDETAILS
            (GK, VERSION, TR_SEQ, EV_SEQ, SEQ, DETAILS)
      SELECT              GK, VERSION, TR_SEQ, EV_SEQ, SEQ, DETAILS
      FROM UAUTGKWSHSDETAILS
      WHERE GK = A_GK;

      INSERT INTO UTGKWSLIST
            (GK, VERSION, SEQ, VALUE)
      SELECT              GK, VERSION, SEQ, VALUE
      FROM UAUTGKWSLIST
      WHERE GK = A_GK;

      INSERT INTO UTGKWSSQL
            (GK, VERSION, SEQ, SQLTEXT)
      SELECT              GK, VERSION, SEQ, SQLTEXT
      FROM UAUTGKWSSQL
      WHERE GK = A_GK;
   END IF;

   IF A_GK_TP='rq' THEN

      INSERT INTO UTGKRQ
            (GK, VERSION, VERSION_IS_CURRENT, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ,
            EFFECTIVE_TILL, EFFECTIVE_TILL_TZ, DESCRIPTION, IS_PROTECTED, VALUE_UNIQUE,
            SINGLE_VALUED, NEW_VAL_ALLOWED, MANDATORY, STRUCT_CREATED, INHERIT_GK,
            VALUE_LIST_TP, DEFAULT_VALUE, DSP_ROWS, VAL_LENGTH, VAL_START, ASSIGN_TP,
            ASSIGN_ID, Q_TP, Q_ID, Q_CHECK_AU, Q_AU, LAST_COMMENT, GK_CLASS, LOG_HS,
            LOG_HS_DETAILS, ALLOW_MODIFY, ACTIVE, LC, LC_VERSION, SS)
      SELECT  GK, VERSION, VERSION_IS_CURRENT, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ,
            EFFECTIVE_TILL, EFFECTIVE_TILL_TZ, DESCRIPTION, IS_PROTECTED, VALUE_UNIQUE,
            SINGLE_VALUED, NEW_VAL_ALLOWED, MANDATORY, STRUCT_CREATED, INHERIT_GK,
            VALUE_LIST_TP, DEFAULT_VALUE, DSP_ROWS, VAL_LENGTH, VAL_START, ASSIGN_TP,
            ASSIGN_ID, Q_TP, Q_ID, Q_CHECK_AU, Q_AU, LAST_COMMENT, GK_CLASS, LOG_HS,
            LOG_HS_DETAILS, ALLOW_MODIFY, ACTIVE, LC, LC_VERSION, SS
      FROM UAUTGKRQ
      WHERE GK = A_GK;

      INSERT INTO UTGKRQHS
            (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE,
            LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      SELECT  GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE,
            LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ
      FROM UAUTGKRQHS
      WHERE GK = A_GK;

      INSERT INTO UTGKRQHSDETAILS
            (GK, VERSION, TR_SEQ, EV_SEQ, SEQ, DETAILS)
      SELECT              GK, VERSION, TR_SEQ, EV_SEQ, SEQ, DETAILS
      FROM UAUTGKRQHSDETAILS
      WHERE GK = A_GK;

      INSERT INTO UTGKRQLIST
            (GK, VERSION, SEQ, VALUE)
      SELECT              GK, VERSION, SEQ, VALUE
      FROM UAUTGKRQLIST
      WHERE GK = A_GK;

      INSERT INTO UTGKRQSQL
            (GK, VERSION, SEQ, SQLTEXT)
      SELECT              GK, VERSION, SEQ, SQLTEXT
      FROM UAUTGKRQSQL
      WHERE GK = A_GK;
   END IF;

   IF A_GK_TP='rt' THEN

      INSERT INTO UTGKRT
            (GK, VERSION, VERSION_IS_CURRENT, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ,
            EFFECTIVE_TILL, EFFECTIVE_TILL_TZ, DESCRIPTION, IS_PROTECTED, VALUE_UNIQUE,
            SINGLE_VALUED, NEW_VAL_ALLOWED, MANDATORY, STRUCT_CREATED, INHERIT_GK,
            VALUE_LIST_TP, DEFAULT_VALUE, DSP_ROWS, VAL_LENGTH, VAL_START, ASSIGN_TP,
            ASSIGN_ID, Q_TP, Q_ID, Q_CHECK_AU, Q_AU, LAST_COMMENT, GK_CLASS, LOG_HS,
            LOG_HS_DETAILS, ALLOW_MODIFY, ACTIVE, LC, LC_VERSION, SS)
      SELECT  GK, VERSION, VERSION_IS_CURRENT, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ,
            EFFECTIVE_TILL, EFFECTIVE_TILL_TZ, DESCRIPTION, IS_PROTECTED, VALUE_UNIQUE,
            SINGLE_VALUED, NEW_VAL_ALLOWED, MANDATORY, STRUCT_CREATED, INHERIT_GK,
            VALUE_LIST_TP, DEFAULT_VALUE, DSP_ROWS, VAL_LENGTH, VAL_START, ASSIGN_TP,
            ASSIGN_ID, Q_TP, Q_ID, Q_CHECK_AU, Q_AU, LAST_COMMENT, GK_CLASS, LOG_HS,
            LOG_HS_DETAILS, ALLOW_MODIFY, ACTIVE, LC, LC_VERSION, SS
      FROM UAUTGKRT
      WHERE GK = A_GK;

      INSERT INTO UTGKRTHS
            (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE,
            LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      SELECT  GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE,
            LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ
      FROM UAUTGKRTHS
      WHERE GK = A_GK;

      INSERT INTO UTGKRTHSDETAILS
            (GK, VERSION, TR_SEQ, EV_SEQ, SEQ, DETAILS)
      SELECT              GK, VERSION, TR_SEQ, EV_SEQ, SEQ, DETAILS
      FROM UAUTGKRTHSDETAILS
      WHERE GK = A_GK;

      INSERT INTO UTGKRTLIST
            (GK, VERSION, SEQ, VALUE)
      SELECT              GK, VERSION, SEQ, VALUE
      FROM UAUTGKRTLIST
      WHERE GK = A_GK;

      INSERT INTO UTGKRTSQL
            (GK, VERSION, SEQ, SQLTEXT)
      SELECT              GK, VERSION, SEQ, SQLTEXT
      FROM UAUTGKRTSQL
      WHERE GK = A_GK;
   END IF;

   IF A_GK_TP='sc' THEN

      INSERT INTO UTGKSC
            (GK, VERSION, VERSION_IS_CURRENT, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ,
            EFFECTIVE_TILL, EFFECTIVE_TILL_TZ, DESCRIPTION, IS_PROTECTED, VALUE_UNIQUE,
            SINGLE_VALUED, NEW_VAL_ALLOWED, MANDATORY, STRUCT_CREATED, INHERIT_GK,
            VALUE_LIST_TP, DEFAULT_VALUE, DSP_ROWS, VAL_LENGTH, VAL_START, ASSIGN_TP,
            ASSIGN_ID, Q_TP, Q_ID, Q_CHECK_AU, Q_AU, LAST_COMMENT, GK_CLASS, LOG_HS,
            LOG_HS_DETAILS, ALLOW_MODIFY, ACTIVE, LC, LC_VERSION, SS)
      SELECT  GK, VERSION, VERSION_IS_CURRENT, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ,
            EFFECTIVE_TILL, EFFECTIVE_TILL_TZ, DESCRIPTION, IS_PROTECTED, VALUE_UNIQUE,
            SINGLE_VALUED, NEW_VAL_ALLOWED, MANDATORY, STRUCT_CREATED, INHERIT_GK,
            VALUE_LIST_TP, DEFAULT_VALUE, DSP_ROWS, VAL_LENGTH, VAL_START, ASSIGN_TP,
            ASSIGN_ID, Q_TP, Q_ID, Q_CHECK_AU, Q_AU, LAST_COMMENT, GK_CLASS, LOG_HS,
            LOG_HS_DETAILS, ALLOW_MODIFY, ACTIVE, LC, LC_VERSION, SS
      FROM UAUTGKSC
      WHERE GK = A_GK;

      INSERT INTO UTGKSCHS
            (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE,
            LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      SELECT  GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE,
            LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ
      FROM UAUTGKSCHS
      WHERE GK = A_GK;

      INSERT INTO UTGKSCHSDETAILS
            (GK, VERSION, TR_SEQ, EV_SEQ, SEQ, DETAILS)
      SELECT              GK, VERSION, TR_SEQ, EV_SEQ, SEQ, DETAILS
      FROM UAUTGKSCHSDETAILS
      WHERE GK = A_GK;

      INSERT INTO UTGKSCLIST
            (GK, VERSION, SEQ, VALUE)
      SELECT              GK, VERSION, SEQ, VALUE
      FROM UAUTGKSCLIST
      WHERE GK = A_GK;

      INSERT INTO UTGKSCSQL
            (GK, VERSION, SEQ, SQLTEXT)
      SELECT              GK, VERSION, SEQ, SQLTEXT
      FROM UAUTGKSCSQL
      WHERE GK = A_GK;
   END IF;

   IF A_GK_TP='st' THEN

      INSERT INTO UTGKST
            (GK, VERSION, VERSION_IS_CURRENT, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ,
            EFFECTIVE_TILL, EFFECTIVE_TILL_TZ, DESCRIPTION, IS_PROTECTED, VALUE_UNIQUE,
            SINGLE_VALUED, NEW_VAL_ALLOWED, MANDATORY, STRUCT_CREATED, INHERIT_GK,
            VALUE_LIST_TP, DEFAULT_VALUE, DSP_ROWS, VAL_LENGTH, VAL_START, ASSIGN_TP,
            ASSIGN_ID, Q_TP, Q_ID, Q_CHECK_AU, Q_AU, LAST_COMMENT, GK_CLASS, LOG_HS,
            LOG_HS_DETAILS, ALLOW_MODIFY, ACTIVE, LC, LC_VERSION, SS)
      SELECT  GK, VERSION, VERSION_IS_CURRENT, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ,
            EFFECTIVE_TILL, EFFECTIVE_TILL_TZ, DESCRIPTION, IS_PROTECTED, VALUE_UNIQUE,
            SINGLE_VALUED, NEW_VAL_ALLOWED, MANDATORY, STRUCT_CREATED, INHERIT_GK,
            VALUE_LIST_TP, DEFAULT_VALUE, DSP_ROWS, VAL_LENGTH, VAL_START, ASSIGN_TP,
            ASSIGN_ID, Q_TP, Q_ID, Q_CHECK_AU, Q_AU, LAST_COMMENT, GK_CLASS, LOG_HS,
            LOG_HS_DETAILS, ALLOW_MODIFY, ACTIVE, LC, LC_VERSION, SS
      FROM UAUTGKST
      WHERE GK = A_GK;

      INSERT INTO UTGKSTHS
            (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE,
            LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      SELECT  GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE,
            LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ
      FROM UAUTGKSTHS
      WHERE GK = A_GK;

      INSERT INTO UTGKSTHSDETAILS
            (GK, VERSION, TR_SEQ, EV_SEQ, SEQ, DETAILS)
      SELECT              GK, VERSION, TR_SEQ, EV_SEQ, SEQ, DETAILS
      FROM UAUTGKSTHSDETAILS
      WHERE GK = A_GK;

      INSERT INTO UTGKSTLIST
            (GK, VERSION, SEQ, VALUE)
      SELECT              GK, VERSION, SEQ, VALUE
      FROM UAUTGKSTLIST
      WHERE GK = A_GK;

      INSERT INTO UTGKSTSQL
            (GK, VERSION, SEQ, SQLTEXT)
      SELECT              GK, VERSION, SEQ, SQLTEXT
      FROM UAUTGKSTSQL
      WHERE GK = A_GK;
   END IF;

   IF A_GK_TP='sd' THEN

      INSERT INTO UTGKSD
            (GK, VERSION, VERSION_IS_CURRENT, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ,
            EFFECTIVE_TILL, EFFECTIVE_TILL_TZ, DESCRIPTION, IS_PROTECTED, VALUE_UNIQUE,
            SINGLE_VALUED, NEW_VAL_ALLOWED, MANDATORY, STRUCT_CREATED, INHERIT_GK,
            VALUE_LIST_TP, DEFAULT_VALUE, DSP_ROWS, VAL_LENGTH, VAL_START, ASSIGN_TP,
            ASSIGN_ID, Q_TP, Q_ID, Q_CHECK_AU, Q_AU, LAST_COMMENT, GK_CLASS, LOG_HS,
            LOG_HS_DETAILS, ALLOW_MODIFY, ACTIVE, LC, LC_VERSION, SS)
      SELECT  GK, VERSION, VERSION_IS_CURRENT, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ,
            EFFECTIVE_TILL, EFFECTIVE_TILL_TZ, DESCRIPTION, IS_PROTECTED, VALUE_UNIQUE,
            SINGLE_VALUED, NEW_VAL_ALLOWED, MANDATORY, STRUCT_CREATED, INHERIT_GK,
            VALUE_LIST_TP, DEFAULT_VALUE, DSP_ROWS, VAL_LENGTH, VAL_START, ASSIGN_TP,
            ASSIGN_ID, Q_TP, Q_ID, Q_CHECK_AU, Q_AU, LAST_COMMENT, GK_CLASS, LOG_HS,
            LOG_HS_DETAILS, ALLOW_MODIFY, ACTIVE, LC, LC_VERSION, SS
      FROM UAUTGKSD
      WHERE GK = A_GK;

      INSERT INTO UTGKSDHS
            (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE,
            LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      SELECT  GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE,
            LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ
      FROM UAUTGKSDHS
      WHERE GK = A_GK;

      INSERT INTO UTGKSDHSDETAILS
            (GK, VERSION, TR_SEQ, EV_SEQ, SEQ, DETAILS)
      SELECT              GK, VERSION, TR_SEQ, EV_SEQ, SEQ, DETAILS
      FROM UAUTGKSDHSDETAILS
      WHERE GK = A_GK;

      INSERT INTO UTGKSDLIST
            (GK, VERSION, SEQ, VALUE)
      SELECT              GK, VERSION, SEQ, VALUE
      FROM UAUTGKSDLIST
      WHERE GK = A_GK;

      INSERT INTO UTGKSDSQL
            (GK, VERSION, SEQ, SQLTEXT)
      SELECT              GK, VERSION, SEQ, SQLTEXT
      FROM UAUTGKSDSQL
      WHERE GK = A_GK;
   END IF;

   IF A_GK_TP='pt' THEN

      INSERT INTO UTGKPT
            (GK, VERSION, VERSION_IS_CURRENT, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ,
            EFFECTIVE_TILL, EFFECTIVE_TILL_TZ, DESCRIPTION, IS_PROTECTED, VALUE_UNIQUE,
            SINGLE_VALUED, NEW_VAL_ALLOWED, MANDATORY, STRUCT_CREATED, INHERIT_GK,
            VALUE_LIST_TP, DEFAULT_VALUE, DSP_ROWS, VAL_LENGTH, VAL_START, ASSIGN_TP,
            ASSIGN_ID, Q_TP, Q_ID, Q_CHECK_AU, Q_AU, LAST_COMMENT, GK_CLASS, LOG_HS,
            LOG_HS_DETAILS, ALLOW_MODIFY, ACTIVE, LC, LC_VERSION, SS)
      SELECT  GK, VERSION, VERSION_IS_CURRENT, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ,
            EFFECTIVE_TILL, EFFECTIVE_TILL_TZ, DESCRIPTION, IS_PROTECTED, VALUE_UNIQUE,
            SINGLE_VALUED, NEW_VAL_ALLOWED, MANDATORY, STRUCT_CREATED, INHERIT_GK,
            VALUE_LIST_TP, DEFAULT_VALUE, DSP_ROWS, VAL_LENGTH, VAL_START, ASSIGN_TP,
            ASSIGN_ID, Q_TP, Q_ID, Q_CHECK_AU, Q_AU, LAST_COMMENT, GK_CLASS, LOG_HS,
            LOG_HS_DETAILS, ALLOW_MODIFY, ACTIVE, LC, LC_VERSION, SS
      FROM UAUTGKPT
      WHERE GK = A_GK;

      INSERT INTO UTGKPTHS
            (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE,
            LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      SELECT  GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE,
            LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ
      FROM UAUTGKPTHS
      WHERE GK = A_GK;

      INSERT INTO UTGKPTHSDETAILS
            (GK, VERSION, TR_SEQ, EV_SEQ, SEQ, DETAILS)
      SELECT              GK, VERSION, TR_SEQ, EV_SEQ, SEQ, DETAILS
      FROM UAUTGKPTHSDETAILS
      WHERE GK = A_GK;

      INSERT INTO UTGKPTLIST
            (GK, VERSION, SEQ, VALUE)
      SELECT              GK, VERSION, SEQ, VALUE
      FROM UAUTGKPTLIST
      WHERE GK = A_GK;

      INSERT INTO UTGKPTSQL
            (GK, VERSION, SEQ, SQLTEXT)
      SELECT              GK, VERSION, SEQ, SQLTEXT
      FROM UAUTGKPTSQL
      WHERE GK = A_GK;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
   IF A_IGNORE_DUP_VAL_ON_INDEX THEN
      L_RET_CODE := REMOVEGKFROMDB(A_GK, A_GK_TP);
   END IF;
   RETURN(UNAPIGEN.DBERR_NORECORDS);
END COPYGKFROMARCHDB;

FUNCTION RESTOREGKFROMDB
(A_GK IN VARCHAR2, A_GK_TP IN VARCHAR2)
RETURN NUMBER IS
BEGIN
   L_RET_CODE := COPYGKFROMARCHDB(A_GK, A_GK_TP, TRUE);
   IF L_RET_CODE = UNAPIGEN.DBERR_NORECORDS THEN
      L_RET_CODE := COPYGKFROMARCHDB(A_GK, A_GK_TP, FALSE);
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         L_SQLERRM := 'CopyGkFromArchDB#return='||TO_CHAR(L_RET_CODE)||' for gk='||A_GK||'gk_tp='||A_GK_TP;
         RAISE STPERROR;
      END IF;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      L_SQLERRM := SUBSTR(SQLERRM,1,200);
   END IF;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
          'RestoreGkFromDB', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END RESTOREGKFROMDB;

FUNCTION REMOVEGKFROMDB
(A_GK IN VARCHAR2, A_GK_TP IN VARCHAR2)
RETURN NUMBER IS
BEGIN
   
   IF A_GK_TP = 'me' THEN

      DELETE FROM UTGKME
      WHERE GK = A_GK;

      DELETE FROM UTGKMEHS
      WHERE GK = A_GK;

      DELETE FROM UTGKMEHSDETAILS
      WHERE GK = A_GK;

      DELETE FROM UTGKMELIST
      WHERE GK = A_GK;

      DELETE FROM UTGKMESQL
      WHERE GK = A_GK;
   END IF;
   IF A_GK_TP = 'ws' THEN

      DELETE FROM UTGKWS
      WHERE GK = A_GK;

      DELETE FROM UTGKWSHS
      WHERE GK = A_GK;

      DELETE FROM UTGKWSHSDETAILS
      WHERE GK = A_GK;

      DELETE FROM UTGKWSLIST
      WHERE GK = A_GK;

      DELETE FROM UTGKWSSQL
      WHERE GK = A_GK;
   END IF;
   IF A_GK_TP = 'rq' THEN

      DELETE FROM UTGKRQ
      WHERE GK = A_GK;

      DELETE FROM UTGKRQHS
      WHERE GK = A_GK;

      DELETE FROM UTGKRQHSDETAILS
      WHERE GK = A_GK;

      DELETE FROM UTGKRQLIST
      WHERE GK = A_GK;

      DELETE FROM UTGKRQSQL
      WHERE GK = A_GK;
   END IF;
   IF A_GK_TP = 'rt' THEN

      DELETE FROM UTGKRT
      WHERE GK = A_GK;

      DELETE FROM UTGKRTHS
      WHERE GK = A_GK;

      DELETE FROM UTGKRTHSDETAILS
      WHERE GK = A_GK;

      DELETE FROM UTGKRTLIST
      WHERE GK = A_GK;

      DELETE FROM UTGKRTSQL
      WHERE GK = A_GK;
   END IF;
   IF A_GK_TP = 'sc' THEN

      DELETE FROM UTGKSC
      WHERE GK = A_GK;

      DELETE FROM UTGKSCHS
      WHERE GK = A_GK;

      DELETE FROM UTGKSCHSDETAILS
      WHERE GK = A_GK;

      DELETE FROM UTGKSCLIST
      WHERE GK = A_GK;

      DELETE FROM UTGKSCSQL
      WHERE GK = A_GK;
   END IF;
   IF A_GK_TP = 'st' THEN

      DELETE FROM UTGKST
      WHERE GK = A_GK;

      DELETE FROM UTGKSTHS
      WHERE GK = A_GK;

      DELETE FROM UTGKSTHSDETAILS
      WHERE GK = A_GK;

      DELETE FROM UTGKSTLIST
      WHERE GK = A_GK;

      DELETE FROM UTGKSTSQL
      WHERE GK = A_GK;
   END IF;
   IF A_GK_TP = 'sd' THEN

      DELETE FROM UTGKSD
      WHERE GK = A_GK;

      DELETE FROM UTGKSDHS
      WHERE GK = A_GK;

      DELETE FROM UTGKSDHSDETAILS
      WHERE GK = A_GK;

      DELETE FROM UTGKSDLIST
      WHERE GK = A_GK;

      DELETE FROM UTGKSDSQL
      WHERE GK = A_GK;
   END IF;
   IF A_GK_TP = 'pt' THEN

      DELETE FROM UTGKPT
      WHERE GK = A_GK;

      DELETE FROM UTGKPTHS
      WHERE GK = A_GK;

      DELETE FROM UTGKPTHSDETAILS
      WHERE GK = A_GK;

      DELETE FROM UTGKPTLIST
      WHERE GK = A_GK;

      DELETE FROM UTGKPTSQL
      WHERE GK = A_GK;
   END IF;
   RETURN(UNAPIGEN.DBERR_SUCCESS);

END REMOVEGKFROMDB;

FUNCTION ARCHIVEGKTOFILE
(A_GK            IN VARCHAR2, A_GK_TP IN VARCHAR2)
RETURN NUMBER IS

CURSOR L_UTGKME_CURSOR (A_GK IN VARCHAR2) IS
   SELECT * FROM UTGKME WHERE GK=A_GK;

CURSOR L_UTGKMEHS_CURSOR (A_GK IN VARCHAR2) IS
   SELECT * FROM UTGKMEHS WHERE GK=A_GK;

CURSOR L_UTGKMEHSDETAILS_CURSOR (A_GK IN VARCHAR2) IS
   SELECT * FROM UTGKMEHSDETAILS WHERE GK=A_GK;

CURSOR L_UTGKMELIST_CURSOR (A_GK IN VARCHAR2) IS
   SELECT * FROM UTGKMELIST WHERE GK=A_GK;

CURSOR L_UTGKMESQL_CURSOR (A_GK IN VARCHAR2) IS
   SELECT * FROM UTGKMESQL WHERE GK=A_GK;

CURSOR L_UTGKWS_CURSOR (A_GK IN VARCHAR2) IS
   SELECT * FROM UTGKWS WHERE GK=A_GK;

CURSOR L_UTGKWSHS_CURSOR (A_GK IN VARCHAR2) IS
   SELECT * FROM UTGKWSHS WHERE GK=A_GK;

CURSOR L_UTGKWSHSDETAILS_CURSOR (A_GK IN VARCHAR2) IS
   SELECT * FROM UTGKWSHSDETAILS WHERE GK=A_GK;

CURSOR L_UTGKWSLIST_CURSOR (A_GK IN VARCHAR2) IS
   SELECT * FROM UTGKWSLIST WHERE GK=A_GK;

CURSOR L_UTGKWSSQL_CURSOR (A_GK IN VARCHAR2) IS
   SELECT * FROM UTGKWSSQL WHERE GK=A_GK;

CURSOR L_UTGKRQ_CURSOR (A_GK IN VARCHAR2) IS
   SELECT * FROM UTGKRQ WHERE GK=A_GK;

CURSOR L_UTGKRQHS_CURSOR (A_GK IN VARCHAR2) IS
   SELECT * FROM UTGKRQHS WHERE GK=A_GK;

CURSOR L_UTGKRQHSDETAILS_CURSOR (A_GK IN VARCHAR2) IS
   SELECT * FROM UTGKRQHSDETAILS WHERE GK=A_GK;

CURSOR L_UTGKRQLIST_CURSOR (A_GK IN VARCHAR2) IS
   SELECT * FROM UTGKRQLIST WHERE GK=A_GK;

CURSOR L_UTGKRQSQL_CURSOR (A_GK IN VARCHAR2) IS
   SELECT * FROM UTGKRQSQL WHERE GK=A_GK;

CURSOR L_UTGKRT_CURSOR (A_GK IN VARCHAR2) IS
   SELECT * FROM UTGKRT WHERE GK=A_GK;

CURSOR L_UTGKRTHS_CURSOR (A_GK IN VARCHAR2) IS
   SELECT * FROM UTGKRTHS WHERE GK=A_GK;

CURSOR L_UTGKRTHSDETAILS_CURSOR (A_GK IN VARCHAR2) IS
   SELECT * FROM UTGKRTHSDETAILS WHERE GK=A_GK;

CURSOR L_UTGKRTLIST_CURSOR (A_GK IN VARCHAR2) IS
   SELECT * FROM UTGKRTLIST WHERE GK=A_GK;

CURSOR L_UTGKRTSQL_CURSOR (A_GK IN VARCHAR2) IS
   SELECT * FROM UTGKRTSQL WHERE GK=A_GK;

CURSOR L_UTGKSC_CURSOR (A_GK IN VARCHAR2) IS
   SELECT * FROM UTGKSC WHERE GK=A_GK;

CURSOR L_UTGKSCHS_CURSOR (A_GK IN VARCHAR2) IS
   SELECT * FROM UTGKSCHS WHERE GK=A_GK;

CURSOR L_UTGKSCHSDETAILS_CURSOR (A_GK IN VARCHAR2) IS
   SELECT * FROM UTGKSCHSDETAILS WHERE GK=A_GK;

CURSOR L_UTGKSCLIST_CURSOR (A_GK IN VARCHAR2) IS
   SELECT * FROM UTGKSCLIST WHERE GK=A_GK;

CURSOR L_UTGKSCSQL_CURSOR (A_GK IN VARCHAR2) IS
   SELECT * FROM UTGKSCSQL WHERE GK=A_GK;

CURSOR L_UTGKST_CURSOR (A_GK IN VARCHAR2) IS
   SELECT * FROM UTGKST WHERE GK=A_GK;

CURSOR L_UTGKSTHS_CURSOR (A_GK IN VARCHAR2) IS
   SELECT * FROM UTGKSTHS WHERE GK=A_GK;

CURSOR L_UTGKSTHSDETAILS_CURSOR (A_GK IN VARCHAR2) IS
   SELECT * FROM UTGKSTHSDETAILS WHERE GK=A_GK;

CURSOR L_UTGKSTLIST_CURSOR (A_GK IN VARCHAR2) IS
   SELECT * FROM UTGKSTLIST WHERE GK=A_GK;

CURSOR L_UTGKSTSQL_CURSOR (A_GK IN VARCHAR2) IS
   SELECT * FROM UTGKSTSQL WHERE GK=A_GK;

CURSOR L_UTGKSD_CURSOR (A_GK IN VARCHAR2) IS
   SELECT * FROM UTGKSD WHERE GK=A_GK;

CURSOR L_UTGKSDHS_CURSOR (A_GK IN VARCHAR2) IS
   SELECT * FROM UTGKSDHS WHERE GK=A_GK;

CURSOR L_UTGKSDHSDETAILS_CURSOR (A_GK IN VARCHAR2) IS
   SELECT * FROM UTGKSDHSDETAILS WHERE GK=A_GK;

CURSOR L_UTGKSDLIST_CURSOR (A_GK IN VARCHAR2) IS
   SELECT * FROM UTGKSDLIST WHERE GK=A_GK;

CURSOR L_UTGKSDSQL_CURSOR (A_GK IN VARCHAR2) IS
   SELECT * FROM UTGKSDSQL WHERE GK=A_GK;

CURSOR L_UTGKPT_CURSOR (A_GK IN VARCHAR2) IS
   SELECT * FROM UTGKPT WHERE GK=A_GK;

CURSOR L_UTGKPTHS_CURSOR (A_GK IN VARCHAR2) IS
   SELECT * FROM UTGKPTHS WHERE GK=A_GK;

CURSOR L_UTGKPTHSDETAILS_CURSOR (A_GK IN VARCHAR2) IS
   SELECT * FROM UTGKPTHSDETAILS WHERE GK=A_GK;

CURSOR L_UTGKPTLIST_CURSOR (A_GK IN VARCHAR2) IS
   SELECT * FROM UTGKPTLIST WHERE GK=A_GK;

CURSOR L_UTGKPTSQL_CURSOR (A_GK IN VARCHAR2) IS
   SELECT * FROM UTGKPTSQL WHERE GK=A_GK;

BEGIN
   L_SQLERRM:=NULL;
   IF A_GK_TP = 'me' THEN
      UNAPIRA.L_EXCEPTION_STEP :='utgkme' ||'gk='||A_GK;
      FOR L_REC IN L_UTGKME_CURSOR(A_GK) LOOP
         UNAPIRA3.L_PUTTEXT := 'utgkme' || L_SEP ||
         L_REC.GK || L_SEP || L_REC.VERSION || L_SEP ||
         L_REC.VERSION_IS_CURRENT || L_SEP ||
         TO_CHAR(L_REC.EFFECTIVE_FROM,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
         TO_CHAR(L_REC.EFFECTIVE_FROM_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
         TO_CHAR(L_REC.EFFECTIVE_TILL,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
         TO_CHAR(L_REC.EFFECTIVE_TILL_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
         L_REC.DESCRIPTION || L_SEP || L_REC.IS_PROTECTED || L_SEP ||
         L_REC.VALUE_UNIQUE || L_SEP || L_REC.SINGLE_VALUED || L_SEP ||
         L_REC.NEW_VAL_ALLOWED || L_SEP || L_REC.MANDATORY || L_SEP ||
         L_REC.STRUCT_CREATED || L_SEP || L_REC.INHERIT_GK || L_SEP ||
         L_REC.VALUE_LIST_TP || L_SEP || L_REC.DEFAULT_VALUE || L_SEP ||
         L_REC.DSP_ROWS || L_SEP || L_REC.VAL_LENGTH || L_SEP ||
         L_REC.VAL_START || L_SEP || L_REC.ASSIGN_TP || L_SEP ||
         L_REC.ASSIGN_ID || L_SEP || L_REC.Q_TP || L_SEP || L_REC.Q_ID || L_SEP ||
         L_REC.Q_CHECK_AU || L_SEP || L_REC.Q_AU || L_SEP ||
         L_REC.LAST_COMMENT || L_SEP || L_REC.GK_CLASS || L_SEP ||
         L_REC.LOG_HS || L_SEP || L_REC.LOG_HS_DETAILS || L_SEP ||
         L_REC.ALLOW_MODIFY || L_SEP || L_REC.ACTIVE || L_SEP || L_REC.LC || L_SEP ||
         L_REC.LC_VERSION || L_SEP || L_REC.SS;
         UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
      END LOOP;

      UNAPIRA.L_EXCEPTION_STEP :='utgkmehs' ||'gk='||A_GK;
      FOR L_REC IN L_UTGKMEHS_CURSOR(A_GK) LOOP
         UNAPIRA3.L_PUTTEXT := 'utgkmehs' || L_SEP ||
         L_REC.GK || L_SEP || L_REC.VERSION || L_SEP || L_REC.WHO || L_SEP ||
         L_REC.WHO_DESCRIPTION || L_SEP || L_REC.WHAT || L_SEP ||
         L_REC.WHAT_DESCRIPTION || L_SEP ||
         TO_CHAR(L_REC.LOGDATE,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
         TO_CHAR(L_REC.LOGDATE_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
         L_REC.WHY || L_SEP || L_REC.TR_SEQ || L_SEP || L_REC.EV_SEQ;
         UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
      END LOOP;

      UNAPIRA.L_EXCEPTION_STEP :='utgkmehsdetails' ||'gk='||A_GK;
      FOR L_REC IN L_UTGKMEHSDETAILS_CURSOR(A_GK) LOOP
         UNAPIRA3.L_PUTTEXT := 'utgkmehsdetails' || L_SEP ||
         L_REC.GK || L_SEP || L_REC.VERSION || L_SEP || L_REC.TR_SEQ || L_SEP ||
         L_REC.EV_SEQ || L_SEP || L_REC.SEQ || L_SEP || L_REC.DETAILS;
         UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
      END LOOP;

      UNAPIRA.L_EXCEPTION_STEP :='utgkmelist' ||'gk='||A_GK;
      FOR L_REC IN L_UTGKMELIST_CURSOR(A_GK) LOOP
         UNAPIRA3.L_PUTTEXT := 'utgkmelist' || L_SEP ||
         L_REC.GK || L_SEP || L_REC.VERSION || L_SEP || L_REC.SEQ || L_SEP ||
         L_REC.VALUE;
         UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
      END LOOP;

      UNAPIRA.L_EXCEPTION_STEP :='utgkmesql' ||'gk='||A_GK;
      FOR L_REC IN L_UTGKMESQL_CURSOR(A_GK) LOOP
         UNAPIRA3.L_PUTTEXT := 'utgkmesql' || L_SEP ||
         L_REC.GK || L_SEP || L_REC.VERSION || L_SEP || L_REC.SEQ || L_SEP ||
         L_REC.SQLTEXT;
         UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
      END LOOP;

   END IF;
   IF A_GK_TP = 'ws' THEN
      UNAPIRA.L_EXCEPTION_STEP :='utgkws' ||'gk='||A_GK;
      FOR L_REC IN L_UTGKWS_CURSOR(A_GK) LOOP
         UNAPIRA3.L_PUTTEXT := 'utgkws' || L_SEP ||
         L_REC.GK || L_SEP || L_REC.VERSION || L_SEP ||
         L_REC.VERSION_IS_CURRENT || L_SEP ||
         TO_CHAR(L_REC.EFFECTIVE_FROM,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
         TO_CHAR(L_REC.EFFECTIVE_FROM_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
         TO_CHAR(L_REC.EFFECTIVE_TILL,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
         TO_CHAR(L_REC.EFFECTIVE_TILL_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
         L_REC.DESCRIPTION || L_SEP || L_REC.IS_PROTECTED || L_SEP ||
         L_REC.VALUE_UNIQUE || L_SEP || L_REC.SINGLE_VALUED || L_SEP ||
         L_REC.NEW_VAL_ALLOWED || L_SEP || L_REC.MANDATORY || L_SEP ||
         L_REC.STRUCT_CREATED || L_SEP || L_REC.INHERIT_GK || L_SEP ||
         L_REC.VALUE_LIST_TP || L_SEP || L_REC.DEFAULT_VALUE || L_SEP ||
         L_REC.DSP_ROWS || L_SEP || L_REC.VAL_LENGTH || L_SEP ||
         L_REC.VAL_START || L_SEP || L_REC.ASSIGN_TP || L_SEP ||
         L_REC.ASSIGN_ID || L_SEP || L_REC.Q_TP || L_SEP || L_REC.Q_ID || L_SEP ||
         L_REC.Q_CHECK_AU || L_SEP || L_REC.Q_AU || L_SEP ||
         L_REC.LAST_COMMENT || L_SEP || L_REC.GK_CLASS || L_SEP ||
         L_REC.LOG_HS || L_SEP || L_REC.LOG_HS_DETAILS || L_SEP ||
         L_REC.ALLOW_MODIFY || L_SEP || L_REC.ACTIVE || L_SEP || L_REC.LC || L_SEP ||
         L_REC.LC_VERSION || L_SEP || L_REC.SS;
         UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
      END LOOP;

      UNAPIRA.L_EXCEPTION_STEP :='utgkwshs' ||'gk='||A_GK;
      FOR L_REC IN L_UTGKWSHS_CURSOR(A_GK) LOOP
         UNAPIRA3.L_PUTTEXT := 'utgkwshs' || L_SEP ||
         L_REC.GK || L_SEP || L_REC.VERSION || L_SEP || L_REC.WHO || L_SEP ||
         L_REC.WHO_DESCRIPTION || L_SEP || L_REC.WHAT || L_SEP ||
         L_REC.WHAT_DESCRIPTION || L_SEP ||
         TO_CHAR(L_REC.LOGDATE,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
         TO_CHAR(L_REC.LOGDATE_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
         L_REC.WHY || L_SEP || L_REC.TR_SEQ || L_SEP || L_REC.EV_SEQ;
         UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
      END LOOP;

      UNAPIRA.L_EXCEPTION_STEP :='utgkwshsdetails' ||'gk='||A_GK;
      FOR L_REC IN L_UTGKWSHSDETAILS_CURSOR(A_GK) LOOP
         UNAPIRA3.L_PUTTEXT := 'utgkwshsdetails' || L_SEP ||
         L_REC.GK || L_SEP || L_REC.VERSION || L_SEP || L_REC.TR_SEQ || L_SEP ||
         L_REC.EV_SEQ || L_SEP || L_REC.SEQ || L_SEP || L_REC.DETAILS;
         UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
      END LOOP;

      UNAPIRA.L_EXCEPTION_STEP :='utgkwslist' ||'gk='||A_GK;
      FOR L_REC IN L_UTGKWSLIST_CURSOR(A_GK) LOOP
         UNAPIRA3.L_PUTTEXT := 'utgkwslist' || L_SEP ||
         L_REC.GK || L_SEP || L_REC.VERSION || L_SEP || L_REC.SEQ || L_SEP ||
         L_REC.VALUE;
         UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
      END LOOP;

      UNAPIRA.L_EXCEPTION_STEP :='utgkwssql' ||'gk='||A_GK;
      FOR L_REC IN L_UTGKWSSQL_CURSOR(A_GK) LOOP
         UNAPIRA3.L_PUTTEXT := 'utgkwssql' || L_SEP ||
         L_REC.GK || L_SEP || L_REC.VERSION || L_SEP || L_REC.SEQ || L_SEP ||
         L_REC.SQLTEXT;
         UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
      END LOOP;

   END IF;
   IF A_GK_TP = 'sc' THEN
      UNAPIRA.L_EXCEPTION_STEP :='utgksc' ||'gk='||A_GK;
      FOR L_REC IN L_UTGKSC_CURSOR(A_GK) LOOP
         UNAPIRA3.L_PUTTEXT := 'utgksc' || L_SEP ||
         L_REC.GK || L_SEP || L_REC.VERSION || L_SEP ||
         L_REC.VERSION_IS_CURRENT || L_SEP ||
         TO_CHAR(L_REC.EFFECTIVE_FROM,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
         TO_CHAR(L_REC.EFFECTIVE_FROM_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
         TO_CHAR(L_REC.EFFECTIVE_TILL,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
         TO_CHAR(L_REC.EFFECTIVE_TILL_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
         L_REC.DESCRIPTION || L_SEP || L_REC.IS_PROTECTED || L_SEP ||
         L_REC.VALUE_UNIQUE || L_SEP || L_REC.SINGLE_VALUED || L_SEP ||
         L_REC.NEW_VAL_ALLOWED || L_SEP || L_REC.MANDATORY || L_SEP ||
         L_REC.STRUCT_CREATED || L_SEP || L_REC.INHERIT_GK || L_SEP ||
         L_REC.VALUE_LIST_TP || L_SEP || L_REC.DEFAULT_VALUE || L_SEP ||
         L_REC.DSP_ROWS || L_SEP || L_REC.VAL_LENGTH || L_SEP ||
         L_REC.VAL_START || L_SEP || L_REC.ASSIGN_TP || L_SEP ||
         L_REC.ASSIGN_ID || L_SEP || L_REC.Q_TP || L_SEP || L_REC.Q_ID || L_SEP ||
         L_REC.Q_CHECK_AU || L_SEP || L_REC.Q_AU || L_SEP ||
         L_REC.LAST_COMMENT || L_SEP || L_REC.GK_CLASS || L_SEP ||
         L_REC.LOG_HS || L_SEP || L_REC.LOG_HS_DETAILS || L_SEP ||
         L_REC.ALLOW_MODIFY || L_SEP || L_REC.ACTIVE || L_SEP || L_REC.LC || L_SEP ||
         L_REC.LC_VERSION || L_SEP || L_REC.SS;
         UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
      END LOOP;

      UNAPIRA.L_EXCEPTION_STEP :='utgkschs' ||'gk='||A_GK;
      FOR L_REC IN L_UTGKSCHS_CURSOR(A_GK) LOOP
         UNAPIRA3.L_PUTTEXT := 'utgkschs' || L_SEP ||
         L_REC.GK || L_SEP || L_REC.VERSION || L_SEP || L_REC.WHO || L_SEP ||
         L_REC.WHO_DESCRIPTION || L_SEP || L_REC.WHAT || L_SEP ||
         L_REC.WHAT_DESCRIPTION || L_SEP ||
         TO_CHAR(L_REC.LOGDATE,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
         TO_CHAR(L_REC.LOGDATE_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
         L_REC.WHY || L_SEP || L_REC.TR_SEQ || L_SEP || L_REC.EV_SEQ;
         UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
      END LOOP;

      UNAPIRA.L_EXCEPTION_STEP :='utgkschsdetails' ||'gk='||A_GK;
      FOR L_REC IN L_UTGKSCHSDETAILS_CURSOR(A_GK) LOOP
         UNAPIRA3.L_PUTTEXT := 'utgkschsdetails' || L_SEP ||
         L_REC.GK || L_SEP || L_REC.VERSION || L_SEP || L_REC.TR_SEQ || L_SEP ||
         L_REC.EV_SEQ || L_SEP || L_REC.SEQ || L_SEP || L_REC.DETAILS;
         UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
      END LOOP;

      UNAPIRA.L_EXCEPTION_STEP :='utgksclist' ||'gk='||A_GK;
      FOR L_REC IN L_UTGKSCLIST_CURSOR(A_GK) LOOP
         UNAPIRA3.L_PUTTEXT := 'utgksclist' || L_SEP ||
         L_REC.GK || L_SEP || L_REC.VERSION || L_SEP || L_REC.SEQ || L_SEP ||
         L_REC.VALUE;
         UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
      END LOOP;

      UNAPIRA.L_EXCEPTION_STEP :='utgkscsql' ||'gk='||A_GK;
      FOR L_REC IN L_UTGKSCSQL_CURSOR(A_GK) LOOP
         UNAPIRA3.L_PUTTEXT := 'utgkscsql' || L_SEP ||
         L_REC.GK || L_SEP || L_REC.VERSION || L_SEP || L_REC.SEQ || L_SEP ||
         L_REC.SQLTEXT;
         UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
      END LOOP;

   END IF;
   IF A_GK_TP = 'st' THEN
      UNAPIRA.L_EXCEPTION_STEP :='utgkst' ||'gk='||A_GK;
      FOR L_REC IN L_UTGKST_CURSOR(A_GK) LOOP
         UNAPIRA3.L_PUTTEXT := 'utgkst' || L_SEP ||
         L_REC.GK || L_SEP || L_REC.VERSION || L_SEP ||
         L_REC.VERSION_IS_CURRENT || L_SEP ||
         TO_CHAR(L_REC.EFFECTIVE_FROM,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
         TO_CHAR(L_REC.EFFECTIVE_FROM_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
         TO_CHAR(L_REC.EFFECTIVE_TILL,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
         TO_CHAR(L_REC.EFFECTIVE_TILL_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
         L_REC.DESCRIPTION || L_SEP || L_REC.IS_PROTECTED || L_SEP ||
         L_REC.VALUE_UNIQUE || L_SEP || L_REC.SINGLE_VALUED || L_SEP ||
         L_REC.NEW_VAL_ALLOWED || L_SEP || L_REC.MANDATORY || L_SEP ||
         L_REC.STRUCT_CREATED || L_SEP || L_REC.INHERIT_GK || L_SEP ||
         L_REC.VALUE_LIST_TP || L_SEP || L_REC.DEFAULT_VALUE || L_SEP ||
         L_REC.DSP_ROWS || L_SEP || L_REC.VAL_LENGTH || L_SEP ||
         L_REC.VAL_START || L_SEP || L_REC.ASSIGN_TP || L_SEP ||
         L_REC.ASSIGN_ID || L_SEP || L_REC.Q_TP || L_SEP || L_REC.Q_ID || L_SEP ||
         L_REC.Q_CHECK_AU || L_SEP || L_REC.Q_AU || L_SEP ||
         L_REC.LAST_COMMENT || L_SEP || L_REC.GK_CLASS || L_SEP ||
         L_REC.LOG_HS || L_SEP || L_REC.LOG_HS_DETAILS || L_SEP ||
         L_REC.ALLOW_MODIFY || L_SEP || L_REC.ACTIVE || L_SEP || L_REC.LC || L_SEP ||
         L_REC.LC_VERSION || L_SEP || L_REC.SS;
         UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
      END LOOP;

      UNAPIRA.L_EXCEPTION_STEP :='utgksths' ||'gk='||A_GK;
      FOR L_REC IN L_UTGKSTHS_CURSOR(A_GK) LOOP
         UNAPIRA3.L_PUTTEXT := 'utgksths' || L_SEP ||
         L_REC.GK || L_SEP || L_REC.VERSION || L_SEP || L_REC.WHO || L_SEP ||
         L_REC.WHO_DESCRIPTION || L_SEP || L_REC.WHAT || L_SEP ||
         L_REC.WHAT_DESCRIPTION || L_SEP ||
         TO_CHAR(L_REC.LOGDATE,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
         TO_CHAR(L_REC.LOGDATE_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
         L_REC.WHY || L_SEP || L_REC.TR_SEQ || L_SEP || L_REC.EV_SEQ;
         UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
      END LOOP;

      UNAPIRA.L_EXCEPTION_STEP :='utgksthsdetails' ||'gk='||A_GK;
      FOR L_REC IN L_UTGKSTHSDETAILS_CURSOR(A_GK) LOOP
         UNAPIRA3.L_PUTTEXT := 'utgksthsdetails' || L_SEP ||
         L_REC.GK || L_SEP || L_REC.VERSION || L_SEP || L_REC.TR_SEQ || L_SEP ||
         L_REC.EV_SEQ || L_SEP || L_REC.SEQ || L_SEP || L_REC.DETAILS;
         UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
      END LOOP;

      UNAPIRA.L_EXCEPTION_STEP :='utgkstlist' ||'gk='||A_GK;
      FOR L_REC IN L_UTGKSTLIST_CURSOR(A_GK) LOOP
         UNAPIRA3.L_PUTTEXT := 'utgkstlist' || L_SEP ||
         L_REC.GK || L_SEP || L_REC.VERSION || L_SEP || L_REC.SEQ || L_SEP ||
         L_REC.VALUE;
         UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
      END LOOP;

      UNAPIRA.L_EXCEPTION_STEP :='utgkstsql' ||'gk='||A_GK;
      FOR L_REC IN L_UTGKSTSQL_CURSOR(A_GK) LOOP
         UNAPIRA3.L_PUTTEXT := 'utgkstsql' || L_SEP ||
         L_REC.GK || L_SEP || L_REC.VERSION || L_SEP || L_REC.SEQ || L_SEP ||
         L_REC.SQLTEXT;
         UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
      END LOOP;

   END IF;
   IF A_GK_TP = 'rq' THEN
      UNAPIRA.L_EXCEPTION_STEP :='utgkrq' ||'gk='||A_GK;
      FOR L_REC IN L_UTGKRQ_CURSOR(A_GK) LOOP
         UNAPIRA3.L_PUTTEXT := 'utgkrq' || L_SEP ||
         L_REC.GK || L_SEP || L_REC.VERSION || L_SEP ||
         L_REC.VERSION_IS_CURRENT || L_SEP ||
         TO_CHAR(L_REC.EFFECTIVE_FROM,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
         TO_CHAR(L_REC.EFFECTIVE_FROM_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
         TO_CHAR(L_REC.EFFECTIVE_TILL,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
         TO_CHAR(L_REC.EFFECTIVE_TILL_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
         L_REC.DESCRIPTION || L_SEP || L_REC.IS_PROTECTED || L_SEP ||
         L_REC.VALUE_UNIQUE || L_SEP || L_REC.SINGLE_VALUED || L_SEP ||
         L_REC.NEW_VAL_ALLOWED || L_SEP || L_REC.MANDATORY || L_SEP ||
         L_REC.STRUCT_CREATED || L_SEP || L_REC.INHERIT_GK || L_SEP ||
         L_REC.VALUE_LIST_TP || L_SEP || L_REC.DEFAULT_VALUE || L_SEP ||
         L_REC.DSP_ROWS || L_SEP || L_REC.VAL_LENGTH || L_SEP ||
         L_REC.VAL_START || L_SEP || L_REC.ASSIGN_TP || L_SEP ||
         L_REC.ASSIGN_ID || L_SEP || L_REC.Q_TP || L_SEP || L_REC.Q_ID || L_SEP ||
         L_REC.Q_CHECK_AU || L_SEP || L_REC.Q_AU || L_SEP ||
         L_REC.LAST_COMMENT || L_SEP || L_REC.GK_CLASS || L_SEP ||
         L_REC.LOG_HS || L_SEP || L_REC.LOG_HS_DETAILS || L_SEP ||
         L_REC.ALLOW_MODIFY || L_SEP || L_REC.ACTIVE || L_SEP || L_REC.LC || L_SEP ||
         L_REC.LC_VERSION || L_SEP || L_REC.SS;
         UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
      END LOOP;

      UNAPIRA.L_EXCEPTION_STEP :='utgkrqhs' ||'gk='||A_GK;
      FOR L_REC IN L_UTGKRQHS_CURSOR(A_GK) LOOP
         UNAPIRA3.L_PUTTEXT := 'utgkrqhs' || L_SEP ||
         L_REC.GK || L_SEP || L_REC.VERSION || L_SEP || L_REC.WHO || L_SEP ||
         L_REC.WHO_DESCRIPTION || L_SEP || L_REC.WHAT || L_SEP ||
         L_REC.WHAT_DESCRIPTION || L_SEP ||
         TO_CHAR(L_REC.LOGDATE,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
         TO_CHAR(L_REC.LOGDATE_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
         L_REC.WHY || L_SEP || L_REC.TR_SEQ || L_SEP || L_REC.EV_SEQ;
         UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
      END LOOP;

      UNAPIRA.L_EXCEPTION_STEP :='utgkrqhsdetails' ||'gk='||A_GK;
      FOR L_REC IN L_UTGKRQHSDETAILS_CURSOR(A_GK) LOOP
         UNAPIRA3.L_PUTTEXT := 'utgkrqhsdetails' || L_SEP ||
         L_REC.GK || L_SEP || L_REC.VERSION || L_SEP || L_REC.TR_SEQ || L_SEP ||
         L_REC.EV_SEQ || L_SEP || L_REC.SEQ || L_SEP || L_REC.DETAILS;
         UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
      END LOOP;

      UNAPIRA.L_EXCEPTION_STEP :='utgkrqlist' ||'gk='||A_GK;
      FOR L_REC IN L_UTGKRQLIST_CURSOR(A_GK) LOOP
         UNAPIRA3.L_PUTTEXT := 'utgkrqlist' || L_SEP ||
         L_REC.GK || L_SEP || L_REC.VERSION || L_SEP || L_REC.SEQ || L_SEP ||
         L_REC.VALUE;
         UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
      END LOOP;

      UNAPIRA.L_EXCEPTION_STEP :='utgkrqsql' ||'gk='||A_GK;
      FOR L_REC IN L_UTGKRQSQL_CURSOR(A_GK) LOOP
         UNAPIRA3.L_PUTTEXT := 'utgkrqsql' || L_SEP ||
         L_REC.GK || L_SEP || L_REC.VERSION || L_SEP || L_REC.SEQ || L_SEP ||
         L_REC.SQLTEXT;
         UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
      END LOOP;

   END IF;
   IF A_GK_TP = 'rt' THEN
      UNAPIRA.L_EXCEPTION_STEP :='utgkrt' ||'gk='||A_GK;
      FOR L_REC IN L_UTGKRT_CURSOR(A_GK) LOOP
         UNAPIRA3.L_PUTTEXT := 'utgkrt' || L_SEP ||
         L_REC.GK || L_SEP || L_REC.VERSION || L_SEP ||
         L_REC.VERSION_IS_CURRENT || L_SEP ||
         TO_CHAR(L_REC.EFFECTIVE_FROM,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
         TO_CHAR(L_REC.EFFECTIVE_FROM_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
         TO_CHAR(L_REC.EFFECTIVE_TILL,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
         TO_CHAR(L_REC.EFFECTIVE_TILL_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
         L_REC.DESCRIPTION || L_SEP || L_REC.IS_PROTECTED || L_SEP ||
         L_REC.VALUE_UNIQUE || L_SEP || L_REC.SINGLE_VALUED || L_SEP ||
         L_REC.NEW_VAL_ALLOWED || L_SEP || L_REC.MANDATORY || L_SEP ||
         L_REC.STRUCT_CREATED || L_SEP || L_REC.INHERIT_GK || L_SEP ||
         L_REC.VALUE_LIST_TP || L_SEP || L_REC.DEFAULT_VALUE || L_SEP ||
         L_REC.DSP_ROWS || L_SEP || L_REC.VAL_LENGTH || L_SEP ||
         L_REC.VAL_START || L_SEP || L_REC.ASSIGN_TP || L_SEP ||
         L_REC.ASSIGN_ID || L_SEP || L_REC.Q_TP || L_SEP || L_REC.Q_ID || L_SEP ||
         L_REC.Q_CHECK_AU || L_SEP || L_REC.Q_AU || L_SEP ||
         L_REC.LAST_COMMENT || L_SEP || L_REC.GK_CLASS || L_SEP ||
         L_REC.LOG_HS || L_SEP || L_REC.LOG_HS_DETAILS || L_SEP ||
         L_REC.ALLOW_MODIFY || L_SEP || L_REC.ACTIVE || L_SEP || L_REC.LC || L_SEP ||
         L_REC.LC_VERSION || L_SEP || L_REC.SS;
         UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
      END LOOP;

      UNAPIRA.L_EXCEPTION_STEP :='utgkrths' ||'gk='||A_GK;
      FOR L_REC IN L_UTGKRTHS_CURSOR(A_GK) LOOP
         UNAPIRA3.L_PUTTEXT := 'utgkrths' || L_SEP ||
         L_REC.GK || L_SEP || L_REC.VERSION || L_SEP || L_REC.WHO || L_SEP ||
         L_REC.WHO_DESCRIPTION || L_SEP || L_REC.WHAT || L_SEP ||
         L_REC.WHAT_DESCRIPTION || L_SEP ||
         TO_CHAR(L_REC.LOGDATE,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
         TO_CHAR(L_REC.LOGDATE_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
         L_REC.WHY || L_SEP || L_REC.TR_SEQ || L_SEP || L_REC.EV_SEQ;
         UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
      END LOOP;

      UNAPIRA.L_EXCEPTION_STEP :='utgkrthsdetails' ||'gk='||A_GK;
      FOR L_REC IN L_UTGKRTHSDETAILS_CURSOR(A_GK) LOOP
         UNAPIRA3.L_PUTTEXT := 'utgkrthsdetails' || L_SEP ||
         L_REC.GK || L_SEP || L_REC.VERSION || L_SEP || L_REC.TR_SEQ || L_SEP ||
         L_REC.EV_SEQ || L_SEP || L_REC.SEQ || L_SEP || L_REC.DETAILS;
         UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
      END LOOP;

      UNAPIRA.L_EXCEPTION_STEP :='utgkrtlist' ||'gk='||A_GK;
      FOR L_REC IN L_UTGKRTLIST_CURSOR(A_GK) LOOP
         UNAPIRA3.L_PUTTEXT := 'utgkrtlist' || L_SEP ||
         L_REC.GK || L_SEP || L_REC.VERSION || L_SEP || L_REC.SEQ || L_SEP ||
         L_REC.VALUE;
         UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
      END LOOP;

      UNAPIRA.L_EXCEPTION_STEP :='utgkrtsql' ||'gk='||A_GK;
      FOR L_REC IN L_UTGKRTSQL_CURSOR(A_GK) LOOP
         UNAPIRA3.L_PUTTEXT := 'utgkrtsql' || L_SEP ||
         L_REC.GK || L_SEP || L_REC.VERSION || L_SEP || L_REC.SEQ || L_SEP ||
         L_REC.SQLTEXT;
         UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
      END LOOP;

   END IF;
   IF A_GK_TP = 'sd' THEN
      UNAPIRA.L_EXCEPTION_STEP :='utgksd' ||'gk='||A_GK;
      FOR L_REC IN L_UTGKSD_CURSOR(A_GK) LOOP
         UNAPIRA3.L_PUTTEXT := 'utgksd' || L_SEP ||
         L_REC.GK || L_SEP || L_REC.VERSION || L_SEP ||
         L_REC.VERSION_IS_CURRENT || L_SEP ||
         TO_CHAR(L_REC.EFFECTIVE_FROM,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
         TO_CHAR(L_REC.EFFECTIVE_FROM_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
         TO_CHAR(L_REC.EFFECTIVE_TILL,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
         TO_CHAR(L_REC.EFFECTIVE_TILL_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
         L_REC.DESCRIPTION || L_SEP || L_REC.IS_PROTECTED || L_SEP ||
         L_REC.VALUE_UNIQUE || L_SEP || L_REC.SINGLE_VALUED || L_SEP ||
         L_REC.NEW_VAL_ALLOWED || L_SEP || L_REC.MANDATORY || L_SEP ||
         L_REC.STRUCT_CREATED || L_SEP || L_REC.INHERIT_GK || L_SEP ||
         L_REC.VALUE_LIST_TP || L_SEP || L_REC.DEFAULT_VALUE || L_SEP ||
         L_REC.DSP_ROWS || L_SEP || L_REC.VAL_LENGTH || L_SEP ||
         L_REC.VAL_START || L_SEP || L_REC.ASSIGN_TP || L_SEP ||
         L_REC.ASSIGN_ID || L_SEP || L_REC.Q_TP || L_SEP || L_REC.Q_ID || L_SEP ||
         L_REC.Q_CHECK_AU || L_SEP || L_REC.Q_AU || L_SEP ||
         L_REC.LAST_COMMENT || L_SEP || L_REC.GK_CLASS || L_SEP ||
         L_REC.LOG_HS || L_SEP || L_REC.LOG_HS_DETAILS || L_SEP ||
         L_REC.ALLOW_MODIFY || L_SEP || L_REC.ACTIVE || L_SEP || L_REC.LC || L_SEP ||
         L_REC.LC_VERSION || L_SEP || L_REC.SS;
         UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
      END LOOP;

      UNAPIRA.L_EXCEPTION_STEP :='utgksdhs' ||'gk='||A_GK;
      FOR L_REC IN L_UTGKSDHS_CURSOR(A_GK) LOOP
         UNAPIRA3.L_PUTTEXT := 'utgksdhs' || L_SEP ||
         L_REC.GK || L_SEP || L_REC.VERSION || L_SEP || L_REC.WHO || L_SEP ||
         L_REC.WHO_DESCRIPTION || L_SEP || L_REC.WHAT || L_SEP ||
         L_REC.WHAT_DESCRIPTION || L_SEP ||
         TO_CHAR(L_REC.LOGDATE,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
         TO_CHAR(L_REC.LOGDATE_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
         L_REC.WHY || L_SEP || L_REC.TR_SEQ || L_SEP || L_REC.EV_SEQ;
         UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
      END LOOP;

      UNAPIRA.L_EXCEPTION_STEP :='utgksdhsdetails' ||'gk='||A_GK;
      FOR L_REC IN L_UTGKSDHSDETAILS_CURSOR(A_GK) LOOP
         UNAPIRA3.L_PUTTEXT := 'utgksdhsdetails' || L_SEP ||
         L_REC.GK || L_SEP || L_REC.VERSION || L_SEP || L_REC.TR_SEQ || L_SEP ||
         L_REC.EV_SEQ || L_SEP || L_REC.SEQ || L_SEP || L_REC.DETAILS;
         UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
      END LOOP;

      UNAPIRA.L_EXCEPTION_STEP :='utgksdlist' ||'gk='||A_GK;
      FOR L_REC IN L_UTGKSDLIST_CURSOR(A_GK) LOOP
         UNAPIRA3.L_PUTTEXT := 'utgksdlist' || L_SEP ||
         L_REC.GK || L_SEP || L_REC.VERSION || L_SEP || L_REC.SEQ || L_SEP ||
         L_REC.VALUE;
         UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
      END LOOP;

      UNAPIRA.L_EXCEPTION_STEP :='utgksdsql' ||'gk='||A_GK;
      FOR L_REC IN L_UTGKSDSQL_CURSOR(A_GK) LOOP
         UNAPIRA3.L_PUTTEXT := 'utgksdsql' || L_SEP ||
         L_REC.GK || L_SEP || L_REC.VERSION || L_SEP || L_REC.SEQ || L_SEP ||
         L_REC.SQLTEXT;
         UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
      END LOOP;

   END IF;
   IF A_GK_TP = 'pt' THEN
      UNAPIRA.L_EXCEPTION_STEP :='utgkpt' ||'gk='||A_GK;
      FOR L_REC IN L_UTGKPT_CURSOR(A_GK) LOOP
         UNAPIRA3.L_PUTTEXT := 'utgkpt' || L_SEP ||
         L_REC.GK || L_SEP || L_REC.VERSION || L_SEP ||
         L_REC.VERSION_IS_CURRENT || L_SEP ||
         TO_CHAR(L_REC.EFFECTIVE_FROM,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
         TO_CHAR(L_REC.EFFECTIVE_FROM_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
         TO_CHAR(L_REC.EFFECTIVE_TILL,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
         TO_CHAR(L_REC.EFFECTIVE_TILL_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
         L_REC.DESCRIPTION || L_SEP || L_REC.IS_PROTECTED || L_SEP ||
         L_REC.VALUE_UNIQUE || L_SEP || L_REC.SINGLE_VALUED || L_SEP ||
         L_REC.NEW_VAL_ALLOWED || L_SEP || L_REC.MANDATORY || L_SEP ||
         L_REC.STRUCT_CREATED || L_SEP || L_REC.INHERIT_GK || L_SEP ||
         L_REC.VALUE_LIST_TP || L_SEP || L_REC.DEFAULT_VALUE || L_SEP ||
         L_REC.DSP_ROWS || L_SEP || L_REC.VAL_LENGTH || L_SEP ||
         L_REC.VAL_START || L_SEP || L_REC.ASSIGN_TP || L_SEP ||
         L_REC.ASSIGN_ID || L_SEP || L_REC.Q_TP || L_SEP || L_REC.Q_ID || L_SEP ||
         L_REC.Q_CHECK_AU || L_SEP || L_REC.Q_AU || L_SEP ||
         L_REC.LAST_COMMENT || L_SEP || L_REC.GK_CLASS || L_SEP ||
         L_REC.LOG_HS || L_SEP || L_REC.LOG_HS_DETAILS || L_SEP ||
         L_REC.ALLOW_MODIFY || L_SEP || L_REC.ACTIVE || L_SEP || L_REC.LC || L_SEP ||
         L_REC.LC_VERSION || L_SEP || L_REC.SS;
         UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
      END LOOP;

      UNAPIRA.L_EXCEPTION_STEP :='utgkpths' ||'gk='||A_GK;
      FOR L_REC IN L_UTGKPTHS_CURSOR(A_GK) LOOP
         UNAPIRA3.L_PUTTEXT := 'utgkpths' || L_SEP ||
         L_REC.GK || L_SEP || L_REC.VERSION || L_SEP || L_REC.WHO || L_SEP ||
         L_REC.WHO_DESCRIPTION || L_SEP || L_REC.WHAT || L_SEP ||
         L_REC.WHAT_DESCRIPTION || L_SEP ||
         TO_CHAR(L_REC.LOGDATE,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
         TO_CHAR(L_REC.LOGDATE_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
         L_REC.WHY || L_SEP || L_REC.TR_SEQ || L_SEP || L_REC.EV_SEQ;
         UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
      END LOOP;

      UNAPIRA.L_EXCEPTION_STEP :='utgkpthsdetails' ||'gk='||A_GK;
      FOR L_REC IN L_UTGKPTHSDETAILS_CURSOR(A_GK) LOOP
         UNAPIRA3.L_PUTTEXT := 'utgkpthsdetails' || L_SEP ||
         L_REC.GK || L_SEP || L_REC.VERSION || L_SEP || L_REC.TR_SEQ || L_SEP ||
         L_REC.EV_SEQ || L_SEP || L_REC.SEQ || L_SEP || L_REC.DETAILS;
         UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
      END LOOP;

      UNAPIRA.L_EXCEPTION_STEP :='utgkptlist' ||'gk='||A_GK;
      FOR L_REC IN L_UTGKPTLIST_CURSOR(A_GK) LOOP
         UNAPIRA3.L_PUTTEXT := 'utgkptlist' || L_SEP ||
         L_REC.GK || L_SEP || L_REC.VERSION || L_SEP || L_REC.SEQ || L_SEP ||
         L_REC.VALUE;
         UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
      END LOOP;

      UNAPIRA.L_EXCEPTION_STEP :='utgkptsql' ||'gk='||A_GK;
      FOR L_REC IN L_UTGKPTSQL_CURSOR(A_GK) LOOP
         UNAPIRA3.L_PUTTEXT := 'utgkptsql' || L_SEP ||
         L_REC.GK || L_SEP || L_REC.VERSION || L_SEP || L_REC.SEQ || L_SEP ||
         L_REC.SQLTEXT;
         UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
      END LOOP;

   END IF;

   UNAPIRA3.U4DATAPUTLINE( ' ');

   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN UTL_FILE.INVALID_PATH THEN
   L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Invalid path';
   UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveGkToFile', L_SQLERRM, 'UTL_FILE.INVALID_PATH',UNAPIRA.P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_NOOBJECT);

WHEN UTL_FILE.INVALID_MODE THEN
   L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Invalid mode';
   UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveGkToFile', L_SQLERRM, 'UTL_FILE.INVALID_MODE',UNAPIRA.P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_GENFAIL);

WHEN UTL_FILE.INVALID_FILEHANDLE THEN
   L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Invalid filehandle';
   UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveGkToFile', L_SQLERRM, 'UTL_FILE.INVALID_FILEHANDLE',UNAPIRA.P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_GENFAIL);

WHEN UTL_FILE.INVALID_OPERATION THEN
   
   L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Invalid operation';
   UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveGkToFile', L_SQLERRM, 'UTL_FILE.INVALID_OPERATION',UNAPIRA.P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_NOOBJECT);

WHEN UTL_FILE.READ_ERROR THEN
   L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Read error';
   UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveGkToFile', L_SQLERRM, 'UTL_FILE.READ_ERROR',UNAPIRA.P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_GENFAIL);

WHEN UTL_FILE.WRITE_ERROR THEN
   L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Write error';
   UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveGkToFile', L_SQLERRM, 'UTL_FILE.WRITE_ERROR',UNAPIRA.P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_GENFAIL);

WHEN UTL_FILE.INTERNAL_ERROR THEN
   L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Internal error';
   UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveGkToFile', L_SQLERRM, 'UTL_FILE.INTERNAL_ERROR',UNAPIRA.P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_GENFAIL);

WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      L_SQLERRM := SQLERRM;
      UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveGkToFile', L_SQLERRM, 'UTL_FILE.INTERNAL_ERROR',UNAPIRA.P_CLOSE_CURSOR);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveGkToFile', L_SQLERRM, 'UTL_FILE.INTERNAL_ERROR',UNAPIRA.P_CLOSE_CURSOR);
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END ARCHIVEGKTOFILE;

BEGIN
   L_SEP:=UNAPIRA.P_INTERNAL_SEP;
END UNAPIRAGK;
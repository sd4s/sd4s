PACKAGE BODY unapiie AS

L_SQLERRM         VARCHAR2(255);
L_SQL_STRING      VARCHAR2(2000);
L_WHERE_CLAUSE    VARCHAR2(1000);
L_EVENT_TP        UTEV.EV_TP%TYPE;
L_RET_CODE        NUMBER;
L_RESULT          NUMBER;
L_FETCHED_ROWS    NUMBER;
L_EV_SEQ_NR       NUMBER;
STPERROR          EXCEPTION;

FUNCTION GETVERSION
   RETURN VARCHAR2
IS
BEGIN
   RETURN('06.07.00.00_00.13');
EXCEPTION
   WHEN OTHERS THEN
      RETURN (NULL);
END GETVERSION;

FUNCTION GETINFOFIELDLIST
(A_IE                  OUT  UNAPIGEN.VC20_TABLE_TYPE,   
 A_VERSION             OUT  UNAPIGEN.VC20_TABLE_TYPE,   
 A_VERSION_IS_CURRENT  OUT  UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_EFFECTIVE_FROM      OUT  UNAPIGEN.DATE_TABLE_TYPE,   
 A_EFFECTIVE_TILL      OUT  UNAPIGEN.DATE_TABLE_TYPE,   
 A_DESCRIPTION         OUT  UNAPIGEN.VC40_TABLE_TYPE,   
 A_DSP_TP              OUT  UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_SS                  OUT  UNAPIGEN.VC2_TABLE_TYPE,    
 A_NR_OF_ROWS          IN OUT  NUMBER,                  
 A_WHERE_CLAUSE        IN   VARCHAR2,                   
 A_NEXT_ROWS           IN   NUMBER)                     
RETURN NUMBER IS

L_IE                      VARCHAR2(20);
L_VERSION                 VARCHAR2(20);
L_VERSION_IS_CURRENT      CHAR(1);
L_EFFECTIVE_FROM          TIMESTAMP WITH TIME ZONE;
L_EFFECTIVE_TILL          TIMESTAMP WITH TIME ZONE;
L_DESCRIPTION             VARCHAR2(40);
L_DSP_TP                  CHAR(1);
L_SS                      VARCHAR2(2);

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_IE_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_IE_CURSOR);
         P_IE_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_IE_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
         L_WHERE_CLAUSE := 'WHERE active = ''1'' ORDER BY ie, version'; 
      ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
         L_WHERE_CLAUSE := 'WHERE version_is_current = ''1'' '||
                           'AND ie = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                           ''' ORDER BY ie, version';
      ELSE
         L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
      END IF;

      IF P_IE_CURSOR IS NULL THEN
         P_IE_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;

      L_SQL_STRING:= 'SELECT ie, version, nvl(version_is_current,''0''), effective_from, effective_till, '||
                     'dsp_title, dsp_tp, ss FROM dd' ||
                     UNAPIGEN.P_DD || '.uvie ' || L_WHERE_CLAUSE;
      DBMS_SQL.PARSE(P_IE_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

      DBMS_SQL.DEFINE_COLUMN(P_IE_CURSOR, 1, L_IE, 20);
      DBMS_SQL.DEFINE_COLUMN(P_IE_CURSOR, 2, L_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_IE_CURSOR, 3, L_VERSION_IS_CURRENT, 1);
      DBMS_SQL.DEFINE_COLUMN(P_IE_CURSOR, 4, L_EFFECTIVE_FROM);
      DBMS_SQL.DEFINE_COLUMN(P_IE_CURSOR, 5, L_EFFECTIVE_TILL);
      DBMS_SQL.DEFINE_COLUMN(P_IE_CURSOR, 6, L_DESCRIPTION, 40);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_IE_CURSOR, 7, L_DSP_TP, 1);
      DBMS_SQL.DEFINE_COLUMN(P_IE_CURSOR, 8, L_SS, 2);
      L_RESULT := DBMS_SQL.EXECUTE(P_IE_CURSOR);
   END IF;

   L_RESULT := DBMS_SQL.FETCH_ROWS(P_IE_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_IE_CURSOR, 1, L_IE);
      DBMS_SQL.COLUMN_VALUE(P_IE_CURSOR, 2, L_VERSION);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_IE_CURSOR, 3, L_VERSION_IS_CURRENT);
      DBMS_SQL.COLUMN_VALUE(P_IE_CURSOR, 4, L_EFFECTIVE_FROM);
      DBMS_SQL.COLUMN_VALUE(P_IE_CURSOR, 5, L_EFFECTIVE_TILL);
      DBMS_SQL.COLUMN_VALUE(P_IE_CURSOR, 6, L_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_IE_CURSOR, 7, L_DSP_TP);
      DBMS_SQL.COLUMN_VALUE(P_IE_CURSOR, 8, L_SS);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_IE(L_FETCHED_ROWS) := L_IE;
      A_VERSION(L_FETCHED_ROWS) := L_VERSION;
      A_VERSION_IS_CURRENT(L_FETCHED_ROWS) := L_VERSION_IS_CURRENT;
      A_EFFECTIVE_FROM(L_FETCHED_ROWS) := L_EFFECTIVE_FROM;
      A_EFFECTIVE_TILL(L_FETCHED_ROWS) := L_EFFECTIVE_TILL;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;
      A_DSP_TP(L_FETCHED_ROWS) := L_DSP_TP;
      A_SS(L_FETCHED_ROWS) := L_SS;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_IE_CURSOR);
      END IF;
   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_IE_CURSOR);
       P_IE_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   END IF;

   IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_IE_CURSOR);
      P_IE_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetInfoFieldList', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN(P_IE_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(P_IE_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETINFOFIELDLIST;

FUNCTION GETINFOFIELD
(A_IE                   OUT  UNAPIGEN.VC20_TABLE_TYPE,   
 A_VERSION              OUT  UNAPIGEN.VC20_TABLE_TYPE,   
 A_VERSION_IS_CURRENT   OUT  UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_EFFECTIVE_FROM       OUT  UNAPIGEN.DATE_TABLE_TYPE,   
 A_EFFECTIVE_TILL       OUT  UNAPIGEN.DATE_TABLE_TYPE,   
 A_IS_PROTECTED         OUT  UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_MANDATORY            OUT  UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_HIDDEN               OUT  UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_DATA_TP              OUT  UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_FORMAT               OUT  UNAPIGEN.VC40_TABLE_TYPE,   
 A_VALID_CF             OUT  UNAPIGEN.VC20_TABLE_TYPE,   
 A_DEF_VAL_TP           OUT  UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_DEF_AU_LEVEL         OUT  UNAPIGEN.VC4_TABLE_TYPE,    
 A_IEVALUE              OUT  UNAPIGEN.VC2000_TABLE_TYPE, 
 A_ALIGN                OUT  UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_DSP_TITLE            OUT  UNAPIGEN.VC40_TABLE_TYPE,   
 A_DSP_TITLE2           OUT  UNAPIGEN.VC40_TABLE_TYPE,   
 A_DSP_LEN              OUT  UNAPIGEN.NUM_TABLE_TYPE,    
 A_DSP_TP               OUT  UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_DSP_ROWS             OUT  UNAPIGEN.NUM_TABLE_TYPE,    
 A_LOOK_UP_PTR          OUT  UNAPIGEN.VC40_TABLE_TYPE,   
 A_IS_TEMPLATE          OUT  UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_MULTI_SELECT         OUT  UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_SC_LC                OUT  UNAPIGEN.VC2_TABLE_TYPE,    
 A_SC_LC_VERSION        OUT  UNAPIGEN.VC20_TABLE_TYPE,   
 A_INHERIT_AU           OUT  UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_IE_CLASS             OUT  UNAPIGEN.VC2_TABLE_TYPE,    
 A_LOG_HS               OUT  UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_ALLOW_MODIFY         OUT  UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_ACTIVE               OUT  UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_LC                   OUT  UNAPIGEN.VC2_TABLE_TYPE,    
 A_LC_VERSION           OUT  UNAPIGEN.VC20_TABLE_TYPE,   
 A_SS                   OUT  UNAPIGEN.VC2_TABLE_TYPE,    
 A_NR_OF_ROWS           IN OUT  NUMBER,                  
 A_WHERE_CLAUSE         IN   VARCHAR2)                   
RETURN NUMBER IS

L_IE                         VARCHAR2(20);
L_VERSION                    VARCHAR2(20);
L_VERSION_IS_CURRENT         CHAR(1);
L_EFFECTIVE_FROM             TIMESTAMP WITH TIME ZONE;
L_EFFECTIVE_TILL             TIMESTAMP WITH TIME ZONE;
L_IS_PROTECTED               CHAR(1);
L_MANDATORY                  CHAR(1);
L_HIDDEN                     CHAR(1);
L_DATA_TP                    CHAR(1);
L_FORMAT                     VARCHAR2(40);
L_VALID_CF                   VARCHAR2(20);
L_DEF_VAL_TP                 CHAR(1);
L_DEF_AU_LEVEL               VARCHAR2(4);
L_IEVALUE                    VARCHAR2(2000);
L_ALIGN                      CHAR(1);
L_DSP_TITLE                  VARCHAR2(40);
L_DSP_TITLE2                 VARCHAR2(40);
L_DSP_LEN                    NUMBER;
L_DSP_TP                     CHAR(1);
L_DSP_ROWS                   NUMBER;
L_LOOK_UP_PTR                VARCHAR2(40);
L_IS_TEMPLATE                CHAR(1);
L_MULTI_SELECT               CHAR(1);
L_SC_LC                      VARCHAR2(2);
L_SC_LC_VERSION              VARCHAR2(20);
L_INHERIT_AU                 CHAR(1);
L_IE_CLASS                   VARCHAR2(2);
L_LOG_HS                     CHAR(1);
L_ALLOW_MODIFY               CHAR(1);
L_ACTIVE                     CHAR(1);
L_LC                         VARCHAR2(2);
L_LC_VERSION                 VARCHAR2(20);
L_SS                         VARCHAR2(2);
L_IE_CURSOR                  INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'WHERE active = ''1'' ORDER BY ie, version'; 
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := 'WHERE version_is_current = ''1'' '||
                        'AND ie = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                        ''' ORDER BY ie, version';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_IE_CURSOR := DBMS_SQL.OPEN_CURSOR;

   L_SQL_STRING := 'SELECT ie, version, nvl(version_is_current,''0''), effective_from, effective_till, '||
                   'is_protected, mandatory, hidden, data_tp, format, valid_cf, def_val_tp, ' ||
                   'def_au_level, ievalue, align, dsp_title, dsp_title2, dsp_len, dsp_tp, dsp_rows, ' ||
                   'look_up_ptr, is_template, multi_select, sc_lc, sc_lc_version, inherit_au, '||
                   'ie_class, log_hs, allow_modify, active, lc, lc_version, ss FROM dd' || 
                   UNAPIGEN.P_DD ||'.uvie ' || L_WHERE_CLAUSE;
   DBMS_SQL.PARSE(L_IE_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_IE_CURSOR, 1, L_IE, 20);
   DBMS_SQL.DEFINE_COLUMN(L_IE_CURSOR, 2, L_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_IE_CURSOR, 3, L_VERSION_IS_CURRENT, 1);
   DBMS_SQL.DEFINE_COLUMN(L_IE_CURSOR, 4, L_EFFECTIVE_FROM);
   DBMS_SQL.DEFINE_COLUMN(L_IE_CURSOR, 5, L_EFFECTIVE_TILL);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_IE_CURSOR, 6, L_IS_PROTECTED, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_IE_CURSOR, 7, L_MANDATORY, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_IE_CURSOR, 8, L_HIDDEN, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_IE_CURSOR, 9, L_DATA_TP, 1);
   DBMS_SQL.DEFINE_COLUMN(L_IE_CURSOR, 10, L_FORMAT, 40);
   DBMS_SQL.DEFINE_COLUMN(L_IE_CURSOR, 11, L_VALID_CF, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_IE_CURSOR, 12, L_DEF_VAL_TP, 1);
   DBMS_SQL.DEFINE_COLUMN(L_IE_CURSOR, 13, L_DEF_AU_LEVEL, 4);
   DBMS_SQL.DEFINE_COLUMN(L_IE_CURSOR, 14, L_IEVALUE, 2000);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_IE_CURSOR, 15, L_ALIGN, 1);
   DBMS_SQL.DEFINE_COLUMN(L_IE_CURSOR, 16, L_DSP_TITLE, 40);
   DBMS_SQL.DEFINE_COLUMN(L_IE_CURSOR, 17, L_DSP_TITLE2, 40);
   DBMS_SQL.DEFINE_COLUMN(L_IE_CURSOR, 18, L_DSP_LEN);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_IE_CURSOR, 19, L_DSP_TP, 1);
   DBMS_SQL.DEFINE_COLUMN(L_IE_CURSOR, 20, L_DSP_ROWS);
   DBMS_SQL.DEFINE_COLUMN(L_IE_CURSOR, 21, L_LOOK_UP_PTR, 40);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_IE_CURSOR, 22, L_IS_TEMPLATE, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_IE_CURSOR, 23, L_MULTI_SELECT, 1);
   DBMS_SQL.DEFINE_COLUMN(L_IE_CURSOR, 24, L_SC_LC, 2);
   DBMS_SQL.DEFINE_COLUMN(L_IE_CURSOR, 25, L_SC_LC_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_IE_CURSOR, 26, L_INHERIT_AU, 1);
   DBMS_SQL.DEFINE_COLUMN(L_IE_CURSOR, 27, L_IE_CLASS, 2);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_IE_CURSOR, 28, L_LOG_HS, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_IE_CURSOR, 29, L_ALLOW_MODIFY, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_IE_CURSOR, 30, L_ACTIVE, 1);
   DBMS_SQL.DEFINE_COLUMN(L_IE_CURSOR, 31, L_LC, 2);
   DBMS_SQL.DEFINE_COLUMN(L_IE_CURSOR, 32, L_LC_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN(L_IE_CURSOR, 33, L_SS, 2);
   L_RESULT := DBMS_SQL.EXECUTE(L_IE_CURSOR);

   L_RESULT := DBMS_SQL.FETCH_ROWS(L_IE_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_IE_CURSOR, 1, L_IE);
      DBMS_SQL.COLUMN_VALUE(L_IE_CURSOR, 2, L_VERSION);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_IE_CURSOR, 3, L_VERSION_IS_CURRENT);
      DBMS_SQL.COLUMN_VALUE(L_IE_CURSOR, 4, L_EFFECTIVE_FROM);
      DBMS_SQL.COLUMN_VALUE(L_IE_CURSOR, 5, L_EFFECTIVE_TILL);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_IE_CURSOR, 6, L_IS_PROTECTED);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_IE_CURSOR, 7, L_MANDATORY);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_IE_CURSOR, 8, L_HIDDEN);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_IE_CURSOR, 9, L_DATA_TP);
      DBMS_SQL.COLUMN_VALUE(L_IE_CURSOR, 10, L_FORMAT);
      DBMS_SQL.COLUMN_VALUE(L_IE_CURSOR, 11, L_VALID_CF);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_IE_CURSOR, 12, L_DEF_VAL_TP);
      DBMS_SQL.COLUMN_VALUE(L_IE_CURSOR, 13, L_DEF_AU_LEVEL);
      DBMS_SQL.COLUMN_VALUE(L_IE_CURSOR, 14, L_IEVALUE);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_IE_CURSOR, 15, L_ALIGN);
      DBMS_SQL.COLUMN_VALUE(L_IE_CURSOR, 16, L_DSP_TITLE);
      DBMS_SQL.COLUMN_VALUE(L_IE_CURSOR, 17, L_DSP_TITLE2);
      DBMS_SQL.COLUMN_VALUE(L_IE_CURSOR, 18, L_DSP_LEN);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_IE_CURSOR, 19, L_DSP_TP);
      DBMS_SQL.COLUMN_VALUE(L_IE_CURSOR, 20, L_DSP_ROWS);
      DBMS_SQL.COLUMN_VALUE(L_IE_CURSOR, 21, L_LOOK_UP_PTR);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_IE_CURSOR, 22, L_IS_TEMPLATE);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_IE_CURSOR, 23, L_MULTI_SELECT);
      DBMS_SQL.COLUMN_VALUE(L_IE_CURSOR, 24, L_SC_LC);
      DBMS_SQL.COLUMN_VALUE(L_IE_CURSOR, 25, L_SC_LC_VERSION);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_IE_CURSOR, 26, L_INHERIT_AU);
      DBMS_SQL.COLUMN_VALUE(L_IE_CURSOR, 27, L_IE_CLASS);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_IE_CURSOR, 28, L_LOG_HS);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_IE_CURSOR, 29, L_ALLOW_MODIFY);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_IE_CURSOR, 30, L_ACTIVE);
      DBMS_SQL.COLUMN_VALUE(L_IE_CURSOR, 31, L_LC);
      DBMS_SQL.COLUMN_VALUE(L_IE_CURSOR, 32, L_LC_VERSION);
      DBMS_SQL.COLUMN_VALUE(L_IE_CURSOR, 33, L_SS);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_IE(L_FETCHED_ROWS) := L_IE;
      A_VERSION(L_FETCHED_ROWS) := L_VERSION;
      A_VERSION_IS_CURRENT(L_FETCHED_ROWS) := L_VERSION_IS_CURRENT;
      A_EFFECTIVE_FROM(L_FETCHED_ROWS) := L_EFFECTIVE_FROM;
      A_EFFECTIVE_TILL(L_FETCHED_ROWS) := L_EFFECTIVE_TILL;
      A_IS_PROTECTED(L_FETCHED_ROWS) := L_IS_PROTECTED;
      A_MANDATORY(L_FETCHED_ROWS) := L_MANDATORY;
      A_HIDDEN(L_FETCHED_ROWS) := L_HIDDEN;
      A_DATA_TP(L_FETCHED_ROWS) := L_DATA_TP;
      A_FORMAT(L_FETCHED_ROWS) := L_FORMAT;
      A_VALID_CF(L_FETCHED_ROWS) := L_VALID_CF;
      A_DEF_VAL_TP(L_FETCHED_ROWS) := L_DEF_VAL_TP;
      A_DEF_AU_LEVEL(L_FETCHED_ROWS) := L_DEF_AU_LEVEL;
      A_IEVALUE(L_FETCHED_ROWS) := L_IEVALUE;
      A_ALIGN(L_FETCHED_ROWS) := L_ALIGN;
      A_DSP_TITLE(L_FETCHED_ROWS) := L_DSP_TITLE;
      A_DSP_TITLE2(L_FETCHED_ROWS) := L_DSP_TITLE2;
      A_DSP_LEN(L_FETCHED_ROWS) := L_DSP_LEN;
      A_DSP_TP(L_FETCHED_ROWS) := L_DSP_TP;
      A_DSP_ROWS(L_FETCHED_ROWS) := L_DSP_ROWS;
      A_LOOK_UP_PTR(L_FETCHED_ROWS) := L_LOOK_UP_PTR;
      A_IS_TEMPLATE(L_FETCHED_ROWS) := L_IS_TEMPLATE;
      A_MULTI_SELECT(L_FETCHED_ROWS) := L_MULTI_SELECT;
      A_SC_LC(L_FETCHED_ROWS) := L_SC_LC;
      A_SC_LC_VERSION(L_FETCHED_ROWS) := L_SC_LC_VERSION;
      A_INHERIT_AU(L_FETCHED_ROWS) := L_INHERIT_AU;
      A_IE_CLASS(L_FETCHED_ROWS) := L_IE_CLASS;
      A_LOG_HS(L_FETCHED_ROWS) := L_LOG_HS;
      A_ALLOW_MODIFY(L_FETCHED_ROWS) := L_ALLOW_MODIFY;
      A_ACTIVE(L_FETCHED_ROWS) := L_ACTIVE;
      A_LC(L_FETCHED_ROWS) := L_LC;
      A_LC_VERSION(L_FETCHED_ROWS) := L_LC_VERSION;
      A_SS(L_FETCHED_ROWS) := L_SS;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_IE_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_IE_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetInfoField', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN(L_IE_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(L_IE_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETINFOFIELD;

FUNCTION GETINFOFIELDSPIN
(A_IE              OUT  UNAPIGEN.VC20_TABLE_TYPE,   
 A_VERSION         OUT  UNAPIGEN.VC20_TABLE_TYPE,   
 A_CIRCULAR        OUT  UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_INCR            OUT  UNAPIGEN.NUM_TABLE_TYPE,    
 A_LOW_VAL_TP      OUT  UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_LOW_AU_LEVEL    OUT  UNAPIGEN.VC4_TABLE_TYPE,    
 A_LOW_VAL         OUT  UNAPIGEN.VC40_TABLE_TYPE,   
 A_HIGH_VAL_TP     OUT  UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_HIGH_AU_LEVEL   OUT  UNAPIGEN.VC4_TABLE_TYPE,    
 A_HIGH_VAL        OUT  UNAPIGEN.VC40_TABLE_TYPE,   
 A_NR_OF_ROWS      IN OUT  NUMBER,                  
 A_WHERE_CLAUSE    IN  VARCHAR2)                    
RETURN NUMBER IS

L_IE              VARCHAR2(20);
L_VERSION         VARCHAR2(20);
L_CIRCULAR        CHAR(1);
L_INCR            NUMBER(3);
L_LOW_VAL_TP      CHAR(1);
L_LOW_AU_LEVEL    VARCHAR2(4);
L_LOW_VAL         VARCHAR2(40);
L_HIGH_VAL_TP     CHAR(1);
L_HIGH_AU_LEVEL   VARCHAR2(4);
L_HIGH_VAL        VARCHAR2(40);
L_IE_CURSOR       INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := ' ORDER BY ie, version'; 
   ELSIF
      UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := ', dd'||UNAPIGEN.P_DD||'.uvie ie WHERE ie.version_is_current = ''1'' '||
                        'AND iespin.version = ie.version '||
                        'AND iespin.ie = ie.ie '||
                        'AND iespin.ie = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                        ''' ORDER BY iespin.ie, iespin.version';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   
   L_IE_CURSOR := DBMS_SQL.OPEN_CURSOR;

   L_SQL_STRING := 'SELECT iespin.ie, iespin.version, iespin.circular, iespin.incr, iespin.low_val_tp, iespin.low_au_level, ' ||
                   'iespin.low_val, iespin.high_val_tp, iespin.high_au_level, iespin.high_val ' ||
                   ' FROM dd' || UNAPIGEN.P_DD || '.uviespin iespin ' || L_WHERE_CLAUSE;
   DBMS_SQL.PARSE(L_IE_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_IE_CURSOR, 1, L_IE, 20);
   DBMS_SQL.DEFINE_COLUMN(L_IE_CURSOR, 2, L_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_IE_CURSOR, 3, L_CIRCULAR, 1);
   DBMS_SQL.DEFINE_COLUMN(L_IE_CURSOR, 4, L_INCR);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_IE_CURSOR, 5, L_LOW_VAL_TP, 1);
   DBMS_SQL.DEFINE_COLUMN(L_IE_CURSOR, 6, L_LOW_AU_LEVEL, 4);
   DBMS_SQL.DEFINE_COLUMN(L_IE_CURSOR, 7, L_LOW_VAL, 40);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_IE_CURSOR, 8, L_HIGH_VAL_TP, 1);
   DBMS_SQL.DEFINE_COLUMN(L_IE_CURSOR, 9, L_HIGH_AU_LEVEL, 4);
   DBMS_SQL.DEFINE_COLUMN(L_IE_CURSOR, 10, L_HIGH_VAL, 40);
   L_RESULT := DBMS_SQL.EXECUTE(L_IE_CURSOR);

   L_RESULT := DBMS_SQL.FETCH_ROWS(L_IE_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      DBMS_SQL.COLUMN_VALUE(L_IE_CURSOR, 1, L_IE);
      DBMS_SQL.COLUMN_VALUE(L_IE_CURSOR, 2, L_VERSION);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_IE_CURSOR, 3, L_CIRCULAR);
      DBMS_SQL.COLUMN_VALUE(L_IE_CURSOR, 4, L_INCR);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_IE_CURSOR, 5, L_LOW_VAL_TP);
      DBMS_SQL.COLUMN_VALUE(L_IE_CURSOR, 6, L_LOW_AU_LEVEL);
      DBMS_SQL.COLUMN_VALUE(L_IE_CURSOR, 7, L_LOW_VAL);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_IE_CURSOR, 8, L_HIGH_VAL_TP);
      DBMS_SQL.COLUMN_VALUE(L_IE_CURSOR, 9, L_HIGH_AU_LEVEL);
      DBMS_SQL.COLUMN_VALUE(L_IE_CURSOR, 10, L_HIGH_VAL);

      A_IE(L_FETCHED_ROWS) :=  L_IE;
      A_VERSION(L_FETCHED_ROWS) :=  L_VERSION;
      A_CIRCULAR(L_FETCHED_ROWS) :=  L_CIRCULAR;
      A_INCR(L_FETCHED_ROWS) :=  L_INCR;
      A_LOW_VAL_TP(L_FETCHED_ROWS) :=  L_LOW_VAL_TP;
      A_LOW_AU_LEVEL(L_FETCHED_ROWS) :=  L_LOW_AU_LEVEL;
      A_LOW_VAL(L_FETCHED_ROWS) :=  L_LOW_VAL;
      A_HIGH_VAL_TP(L_FETCHED_ROWS) :=  L_HIGH_VAL_TP;
      A_HIGH_AU_LEVEL(L_FETCHED_ROWS) :=  L_HIGH_AU_LEVEL;
      A_HIGH_VAL(L_FETCHED_ROWS) :=  L_HIGH_VAL;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_IE_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_IE_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   L_SQLERRM := SQLERRM;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
           'GetInfoFieldSpin', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   IF DBMS_SQL.IS_OPEN(L_IE_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_IE_CURSOR);
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETINFOFIELDSPIN;

FUNCTION GETINFOFIELDSQL
(A_IE            OUT   UNAPIGEN.VC20_TABLE_TYPE,  
 A_VERSION       OUT   UNAPIGEN.VC20_TABLE_TYPE,  
 A_SQLTEXT       OUT   UNAPIGEN.VC255_TABLE_TYPE, 
 A_NR_OF_ROWS    IN OUT   NUMBER,                 
 A_WHERE_CLAUSE  IN   VARCHAR2)                   
RETURN NUMBER IS

L_IE              VARCHAR2(20);
L_VERSION         VARCHAR2(20);
L_SQLTEXT         VARCHAR2(255);
L_IE_CURSOR       INTEGER;

BEGIN

    IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := ' ORDER BY seq'; 
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := ', dd'||UNAPIGEN.P_DD||'.uvie ie WHERE ie.version_is_current = ''1'' '||
                        'AND iesql.version = ie.version '||
                        'AND iesql.ie = ie.ie '||
                        'AND iesql.ie = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                        ''' ORDER BY iesql.seq';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_IE_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT iesql.ie, iesql.version, iesql.sqltext FROM dd' ||
                    UNAPIGEN.P_DD || '.uviesql iesql ' || L_WHERE_CLAUSE;
   DBMS_SQL.PARSE(L_IE_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_IE_CURSOR, 1, L_IE, 20);
   DBMS_SQL.DEFINE_COLUMN(L_IE_CURSOR, 2, L_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN(L_IE_CURSOR, 3, L_SQLTEXT, 255);
   L_RESULT := DBMS_SQL.EXECUTE(L_IE_CURSOR);

   L_RESULT := DBMS_SQL.FETCH_ROWS(L_IE_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_IE_CURSOR, 1, L_IE);
      DBMS_SQL.COLUMN_VALUE(L_IE_CURSOR, 2, L_VERSION);
      DBMS_SQL.COLUMN_VALUE(L_IE_CURSOR, 3, L_SQLTEXT);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_IE(L_FETCHED_ROWS) := L_IE;
      A_VERSION(L_FETCHED_ROWS) := L_VERSION;
      A_SQLTEXT(L_FETCHED_ROWS) := L_SQLTEXT;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_IE_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_IE_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      
      
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   L_SQLERRM := SQLERRM;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
           'GetInfoFieldSql', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   IF DBMS_SQL.IS_OPEN(L_IE_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_IE_CURSOR);
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETINFOFIELDSQL;

FUNCTION GETINFOFIELDVALUE
(A_IE              OUT   UNAPIGEN.VC20_TABLE_TYPE,  
 A_VERSION         OUT   UNAPIGEN.VC20_TABLE_TYPE,  
 A_VALUE           OUT   UNAPIGEN.VC40_TABLE_TYPE,  
 A_NR_OF_ROWS      IN OUT   NUMBER,                 
 A_WHERE_CLAUSE    IN   VARCHAR2)                   
RETURN NUMBER IS

L_IE              VARCHAR2(20);
L_VERSION         VARCHAR2(20);
L_VALUE           VARCHAR2(40);
L_IE_CURSOR       INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := ' ORDER BY seq'; 
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := ', dd'||UNAPIGEN.P_DD||'.uvie ie WHERE ie.version_is_current = ''1'' '||
                        'AND ielist.version = ie.version '||
                        'AND ielist.ie = ie.ie '||
                        'AND ielist.ie = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                        ''' ORDER BY ielist.seq';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_IE_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT ielist.ie, ielist.version, ielist.value FROM dd' ||
                   UNAPIGEN.P_DD || '.uvielist ielist ' || L_WHERE_CLAUSE;
   DBMS_SQL.PARSE(L_IE_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_IE_CURSOR, 1, L_IE, 20);
   DBMS_SQL.DEFINE_COLUMN(L_IE_CURSOR, 2, L_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN(L_IE_CURSOR, 3, L_VALUE, 40);
   L_RESULT := DBMS_SQL.EXECUTE(L_IE_CURSOR);

   L_RESULT := DBMS_SQL.FETCH_ROWS(L_IE_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_IE_CURSOR, 1, L_IE);
      DBMS_SQL.COLUMN_VALUE(L_IE_CURSOR, 2, L_VERSION);
      DBMS_SQL.COLUMN_VALUE(L_IE_CURSOR, 3, L_VALUE);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_IE(L_FETCHED_ROWS) := L_IE;
      A_VERSION(L_FETCHED_ROWS) := L_VERSION;
      A_VALUE(L_FETCHED_ROWS) := L_VALUE;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_IE_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_IE_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      
      
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   L_SQLERRM := SQLERRM;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
           'GetInfoFieldValue', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   IF DBMS_SQL.IS_OPEN(L_IE_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_IE_CURSOR);
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETINFOFIELDVALUE;

FUNCTION DELETEINFOFIELD
(A_IE             IN   VARCHAR2,                   
 A_VERSION        IN   VARCHAR2,                   
 A_MODIFY_REASON  IN   VARCHAR2)                   
RETURN NUMBER IS

L_ALLOW_MODIFY CHAR(1);
L_ACTIVE       CHAR(1);
L_LOG_HS       CHAR(1);
L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);

CURSOR L_IPIE_CURSOR (C_IE VARCHAR2, C_VERSION VARCHAR2) IS
   SELECT UTIPIE.IP, UTIPIE.VERSION, UTIP.LC, UTIP.LC_VERSION, UTIP.SS, UTIP.LOG_HS
   FROM UTIP, UTIPIE
   WHERE UNAPIGEN.USEVERSION('ie',UTIPIE.IE,UTIPIE.IE_VERSION) = C_VERSION
     AND UTIPIE.IE = C_IE
     AND UTIP.VERSION = UTIPIE.VERSION
     AND UTIP.IP = UTIPIE.IP;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL (A_IE, ' ')= ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL (A_VERSION, ' ')= ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('ie', A_IE, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                            L_ALLOW_MODIFY, L_ACTIVE,L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS   THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   
   IF UNAPIGEN.ISSYSTEM21CFR11COMPLIANT = UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTALLOWEDIN21CFR11;
      RAISE STPERROR;
   END IF;

   DELETE FROM UTIESQL
   WHERE IE = A_IE
     AND VERSION = A_VERSION;

   DELETE FROM UTIEAU
   WHERE IE = A_IE
     AND VERSION = A_VERSION;

   DELETE FROM UTIESPIN
   WHERE IE = A_IE
     AND VERSION = A_VERSION;

   DELETE FROM UTIELIST
   WHERE IE = A_IE
     AND VERSION = A_VERSION;

   L_EVENT_TP := 'UsedObjectDeleted';

   FOR IP_REC IN L_IPIE_CURSOR(A_IE, A_VERSION)
   LOOP

      DELETE FROM UTIPIE
      WHERE IE = A_IE
        AND UNAPIGEN.USEVERSION('ie',IE,IE_VERSION) = A_VERSION
        AND IP = IP_REC.IP
        AND VERSION = IP_REC.VERSION;

      DELETE FROM UTIPIEAU
      WHERE IE = A_IE
        AND UNAPIGEN.USEVERSION('ie',IE,IE_VERSION) = A_VERSION
        AND IP = IP_REC.IP
        AND VERSION = IP_REC.VERSION;

      L_EV_SEQ_NR := -1;
      L_RESULT := UNAPIEV.INSERTEVENT('DeleteInfoField',
                                      UNAPIGEN.P_EVMGR_NAME, 'ip', IP_REC.IP, IP_REC.LC, 
                                      IP_REC.LC_VERSION, IP_REC.SS, L_EVENT_TP, 'version='||IP_REC.VERSION,
                                      L_EV_SEQ_NR);
      IF L_RESULT <> 0 THEN
         UNAPIGEN.P_TXN_ERROR := L_RESULT;
         RAISE STPERROR;
      END IF;

      IF IP_REC.LOG_HS = '1' THEN
          INSERT INTO UTIPHS(IP, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
          VALUES  (IP_REC.IP, IP_REC.VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 
                   L_EVENT_TP||' '||A_IE||' '||A_VERSION,
                   'info field "'||A_IE||'" is deleted and removed from info profile <<'||IP_REC.IP||'>>', 
                   CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   END LOOP;

   DELETE FROM UTEVTIMED
   WHERE (OBJECT_TP='ie' AND OBJECT_ID=A_IE AND INSTR(EV_DETAILS,'version='||A_VERSION)<>0);

   DELETE FROM UTEVRULESDELAYED
   WHERE (OBJECT_TP='ie' AND OBJECT_ID=A_IE AND INSTR(EV_DETAILS,'version='||A_VERSION)<>0);

   DELETE FROM UTIE
   WHERE IE = A_IE
     AND VERSION = A_VERSION;

   DELETE FROM UTIEHS
   WHERE IE = A_IE
     AND VERSION = A_VERSION;

   L_EVENT_TP := 'ObjectDeleted';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT('DeleteInfoField', UNAPIGEN.P_EVMGR_NAME, 'ip', A_IE, 
                                   L_LC, L_LC_VERSION, L_SS, L_EVENT_TP,
                                   'version='||A_VERSION, L_EV_SEQ_NR);

   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN ( UNAPIGEN.DBERR_SUCCESS );
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('DeleteInfoField',SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'DeleteInfoField'));
END DELETEINFOFIELD;

FUNCTION SAVEINFOFIELD
(A_IE                   IN   VARCHAR2,                   
 A_VERSION              IN   VARCHAR2,                   
 A_VERSION_IS_CURRENT   IN   CHAR,                       
 A_EFFECTIVE_FROM       IN   DATE,                       
 A_EFFECTIVE_TILL       IN   DATE,                       
 A_IS_PROTECTED         IN   CHAR,                       
 A_MANDATORY            IN   CHAR,                       
 A_HIDDEN               IN   CHAR,                       
 A_DATA_TP              IN   CHAR,                       
 A_FORMAT               IN   VARCHAR2,                   
 A_VALID_CF             IN   VARCHAR2,                   
 A_DEF_VAL_TP           IN   CHAR,                       
 A_DEF_AU_LEVEL         IN   VARCHAR2,                   
 A_IEVALUE              IN   VARCHAR2,                   
 A_ALIGN                IN   CHAR,                       
 A_DSP_TITLE            IN   VARCHAR2,                   
 A_DSP_TITLE2           IN   VARCHAR2,                   
 A_DSP_LEN              IN   NUMBER,                     
 A_DSP_TP               IN   CHAR,                       
 A_DSP_ROWS             IN   NUMBER,                     
 A_LOOK_UP_PTR          IN   VARCHAR2,                   
 A_IS_TEMPLATE          IN   CHAR,                       
 A_MULTI_SELECT         IN   CHAR,                        
 A_SC_LC                IN   VARCHAR2,                   
 A_SC_LC_VERSION        IN   VARCHAR2,                   
 A_INHERIT_AU           IN   CHAR,                       
 A_IE_CLASS             IN   VARCHAR2,                   
 A_LOG_HS               IN   CHAR,                       
 A_LC                   IN   VARCHAR2,                   
 A_LC_VERSION           IN   VARCHAR2,                   
 A_MODIFY_REASON        IN   VARCHAR2)                   
RETURN NUMBER IS

L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);
L_LOG_HS       CHAR(1);
L_ALLOW_MODIFY CHAR(1);
L_ACTIVE       CHAR(1);
L_INSERT       BOOLEAN;
L_SEQ_NO       NUMBER;
L_DSP_TP       CHAR(1);
L_LOOK_UP_PTR  VARCHAR2(40);
L_DEF_AU_LEVEL VARCHAR2(4);

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_IE, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   IF NVL(A_HIDDEN, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_HIDDEN;
      RAISE STPERROR;
   END IF;

   IF NVL(A_MANDATORY, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_MANDATORY;
      RAISE STPERROR;
   END IF;

   IF NVL(A_LOG_HS, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_LOGHS;
      RAISE STPERROR;
   END IF;

   IF NVL(A_INHERIT_AU, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INHERITAU;
      RAISE STPERROR;
   END IF;

   IF NVL(A_IS_PROTECTED, ' ') NOT IN ('1','0') AND 
   	NOT (UNAPIGEN.P_RNDSUITESESSION = '1' AND NVL(A_IS_PROTECTED, ' ') IN ('0', '1', '4', '5')) THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_PROTECTED;
      RAISE STPERROR;
   END IF;

   
   IF UNAPIGEN.P_RNDSUITESESSION = '0' THEN
      IF NVL(A_DATA_TP, ' ') NOT IN ('A','D','F','I','P','T','M') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_DATATP;
         RAISE STPERROR;
      END IF;
   END IF;

   IF NVL(A_DEF_VAL_TP, ' ') NOT IN ('F','S','A') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_DEFVALUETP;
      RAISE STPERROR;
   ELSIF A_DEF_VAL_TP = 'A' THEN
      IF NVL(A_DEF_AU_LEVEL, ' ') NOT IN ('st', 'sc', 'rq', 'rt', 'pt', 'sd') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_AULEVEL;
         RAISE STPERROR;
      END IF;
   ELSIF A_DEF_VAL_TP = 'S' THEN
      IF A_IEVALUE IS NULL THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NODEFVALUE;
         RAISE STPERROR;
      END IF;
   END IF;

   IF NVL(A_ALIGN, ' ') NOT IN ('L','R','C') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_ALIGN;
      RAISE STPERROR;
   END IF;

   
   
   
   IF UNAPIGEN.P_RNDSUITESESSION = '0' THEN
      IF NVL(A_DSP_TP, ' ') NOT IN ('I','L','D','C','F','G','M','P','R','H','A','S','B') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_DSPTP;
         RAISE STPERROR;
      END IF;
   END IF;

   IF NVL(A_DSP_TP, ' ') IN ('C','D','L') THEN
      IF RTRIM(A_LOOK_UP_PTR) <> 'utielist' AND
         RTRIM(A_LOOK_UP_PTR) <> 'utiesql' THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_LU;
         RAISE STPERROR;
      END IF;
   END IF;

   IF NVL(A_DSP_TP, ' ') = 'S' THEN
      IF RTRIM(A_LOOK_UP_PTR) <> 'utiespin' THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_LU;
         RAISE STPERROR;
      END IF;
   END IF;    

   IF NVL(A_IS_TEMPLATE, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_TEMPLATE;
      RAISE STPERROR;
   END IF;

   IF NVL(A_MULTI_SELECT, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_MULTISELECT;
      RAISE STPERROR;
   END IF;

   IF NVL(A_INHERIT_AU, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INHERITAU;
      RAISE STPERROR;
   END IF;
      
   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('ie', A_IE, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE = UNAPIGEN.DBERR_NOOBJECT THEN
      L_INSERT := TRUE;
   ELSIF L_RET_CODE = UNAPIGEN.DBERR_SUCCESS THEN
      L_INSERT := FALSE;
   ELSE
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   IF A_DEF_VAL_TP IN ('F','S') THEN
      L_DEF_AU_LEVEL := NULL;
   ELSE
      L_DEF_AU_LEVEL := A_DEF_AU_LEVEL;
   END IF;

   IF L_INSERT THEN           
      IF NVL(A_LC, ' ') <> ' ' THEN
          L_LC := A_LC;
      END IF;
      IF NVL(A_LC_VERSION, ' ') <> ' ' THEN
          L_LC_VERSION := A_LC_VERSION;
      END IF;

      DELETE UTIESPIN
      WHERE IE = A_IE
        AND VERSION = A_VERSION;

      DELETE UTIELIST
      WHERE IE = A_IE
        AND VERSION = A_VERSION;

      DELETE UTIESQL
      WHERE IE = A_IE
        AND VERSION = A_VERSION;
       
      INSERT INTO UTIE(IE, VERSION, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ, IS_PROTECTED, MANDATORY, HIDDEN, DATA_TP, 
                       FORMAT,
                       VALID_CF, DEF_VAL_TP, DEF_AU_LEVEL, IEVALUE, ALIGN, DSP_TITLE, DSP_TITLE2, 
                       DSP_LEN, DSP_TP, DSP_ROWS, LOOK_UP_PTR, IS_TEMPLATE, MULTI_SELECT, SC_LC, 
                       SC_LC_VERSION, INHERIT_AU, IE_CLASS, LOG_HS, ALLOW_MODIFY, ACTIVE, LC, LC_VERSION)
      VALUES(A_IE, A_VERSION, A_EFFECTIVE_FROM, A_EFFECTIVE_FROM, A_IS_PROTECTED, A_MANDATORY, A_HIDDEN, A_DATA_TP,
             DECODE(A_FORMAT, 
                    NULL,DECODE(A_DATA_TP,
                                'D','D'||UNAPIGEN.P_DATEFORMAT,
                                'M','D'||UNAPIGEN.P_TIMEFORMAT, NULL),
                    '<Default>',DECODE(A_DATA_TP,
                                'D','D'||UNAPIGEN.P_DATEFORMAT,
                                'M','D'||UNAPIGEN.P_TIMEFORMAT, NULL)
                    ,A_FORMAT),
             A_VALID_CF, A_DEF_VAL_TP, L_DEF_AU_LEVEL, A_IEVALUE, A_ALIGN, A_DSP_TITLE, A_DSP_TITLE2, 
             A_DSP_LEN, A_DSP_TP, A_DSP_ROWS, A_LOOK_UP_PTR, A_IS_TEMPLATE, A_MULTI_SELECT, A_SC_LC, 
             A_SC_LC_VERSION, A_INHERIT_AU, A_IE_CLASS, A_LOG_HS, '#', '0', L_LC, L_LC_VERSION);
      L_EVENT_TP := 'ObjectCreated';
      L_EV_SEQ_NR := -1;
      L_RESULT := UNAPIEV.INSERTEVENT('SaveInfoField', UNAPIGEN.P_EVMGR_NAME, 'ie', A_IE, L_LC, L_LC_VERSION, 
                                      L_SS, L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);

      IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
         UNAPIGEN.P_TXN_ERROR := L_RESULT;
         RAISE STPERROR;
      END IF;

   ELSE                       
      
      UPDATE UTIE
      SET EFFECTIVE_FROM       = DECODE(EFFECTIVE_TILL, NULL, A_EFFECTIVE_FROM, EFFECTIVE_FROM),
          EFFECTIVE_FROM_TZ    = DECODE(EFFECTIVE_TILL, NULL,  DECODE(A_EFFECTIVE_FROM, EFFECTIVE_FROM_TZ, EFFECTIVE_FROM_TZ, A_EFFECTIVE_FROM), EFFECTIVE_FROM_TZ),
          IS_PROTECTED   = A_IS_PROTECTED,
          MANDATORY      = A_MANDATORY,
          HIDDEN         = A_HIDDEN,
          DATA_TP        = A_DATA_TP,
          FORMAT         = DECODE(A_FORMAT, 
                                  NULL,DECODE(A_DATA_TP,
                                       'D','D'||UNAPIGEN.P_DATEFORMAT,
                                       'M','D'||UNAPIGEN.P_TIMEFORMAT, NULL),
                                '<Default>',DECODE(A_DATA_TP,
                                       'D','D'||UNAPIGEN.P_DATEFORMAT,
                                       'M','D'||UNAPIGEN.P_TIMEFORMAT, A_FORMAT)
                                ,A_FORMAT),
          VALID_CF       = A_VALID_CF,
          DEF_VAL_TP     = A_DEF_VAL_TP,
          DEF_AU_LEVEL   = L_DEF_AU_LEVEL,
          IEVALUE        = A_IEVALUE,
          ALIGN          = A_ALIGN,
          DSP_TITLE      = A_DSP_TITLE,
          DSP_TITLE2     = A_DSP_TITLE2,
          DSP_LEN        = A_DSP_LEN,
          DSP_TP         = A_DSP_TP,
          DSP_ROWS       = A_DSP_ROWS,
          LOOK_UP_PTR    = A_LOOK_UP_PTR,
          IS_TEMPLATE    = A_IS_TEMPLATE,
          MULTI_SELECT   = A_MULTI_SELECT,
          SC_LC          = A_SC_LC,
          SC_LC_VERSION  = A_SC_LC_VERSION,
          INHERIT_AU     = A_INHERIT_AU,
          IE_CLASS       = A_IE_CLASS,
          LOG_HS         = A_LOG_HS,
          ALLOW_MODIFY   = '#'
      WHERE IE = A_IE
        AND VERSION = A_VERSION;
      L_EVENT_TP := 'ObjectUpdated';

      L_EV_SEQ_NR := -1;
      L_RESULT := UNAPIEV.INSERTEVENT('SaveInfoField', UNAPIGEN.P_EVMGR_NAME, 'ie', A_IE, L_LC, L_LC_VERSION, 
                                      L_SS, L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);

      IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
         UNAPIGEN.P_TXN_ERROR := L_RESULT;
         RAISE STPERROR;
      END IF;

      IF NVL(A_DSP_TP, ' ') = 'S' THEN
         DELETE UTIESPIN
         WHERE IE = A_IE
           AND VERSION = A_VERSION;
      END IF;
      
      IF NVL(A_DSP_TP, ' ') NOT IN ('C','D','L')
      OR NVL(RTRIM(A_LOOK_UP_PTR),' ') <> 'utielist' THEN
         DELETE UTIELIST
         WHERE IE = A_IE
           AND VERSION = A_VERSION;
           
         IF SQL%ROWCOUNT > 0 THEN
            INSERT INTO UTIEHS (IE, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                                WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
            VALUES (A_IE, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                    'info field "'||A_IE||'" list of values is deleted.', 
                    CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
         END IF;           
      END IF;
      
      IF NVL(A_DSP_TP, ' ') NOT IN ('C','D','L')
      OR NVL(RTRIM(A_LOOK_UP_PTR),' ') <> 'utiesql' THEN
         DELETE UTIESQL
         WHERE IE = A_IE
           AND VERSION = A_VERSION;
         IF SQL%ROWCOUNT > 0 THEN
            INSERT INTO UTIEHS (IE, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                                WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
            VALUES (A_IE, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                    'info field "'||A_IE||'" SQL statement for list of values is deleted.', 
                    CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
         END IF;           
      END IF;

   END IF;

   IF NVL(L_LOG_HS, ' ') <> A_LOG_HS THEN
     IF A_LOG_HS = '1' THEN
        INSERT INTO UTIEHS (IE, VERSION, WHO, WHO_DESCRIPTION, WHAT,  
                            WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
        VALUES (A_IE, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 'History switched ON', 
                'Audit trail is turned on.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
     ELSE
        INSERT INTO UTIEHS (IE, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                            WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
        VALUES (A_IE, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 'History switched OFF', 
                'Audit trail is turned off.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
     END IF;
   END IF;

   IF NVL(L_LOG_HS, ' ') = '1' THEN
      IF L_EVENT_TP = 'ObjectCreated' THEN
         INSERT INTO UTIEHS (IE, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_IE, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'info field "'||A_IE||'" is created.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                 L_EV_SEQ_NR);
      ELSE           
         INSERT INTO UTIEHS (IE, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_IE, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'info field "'||A_IE||'" is updated.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                 L_EV_SEQ_NR);
      END IF;      
   ELSE
      
      
      IF L_EVENT_TP = 'ObjectCreated' THEN
         INSERT INTO UTIEHS (IE, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_IE, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'info field "'||A_IE||'" is created.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                 L_EV_SEQ_NR);
      END IF;      
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveInfoField',SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveInfoField'));
END SAVEINFOFIELD;

FUNCTION SAVEINFOFIELDSPIN
(A_IE               IN   VARCHAR2,                   
 A_VERSION          IN   VARCHAR2,                   
 A_CIRCULAR         IN   CHAR,                       
 A_INCR             IN   NUMBER,                     
 A_LOW_VAL_TP       IN   CHAR,                       
 A_LOW_AU_LEVEL     IN   VARCHAR2,                   
 A_LOW_VAL          IN   VARCHAR2,                   
 A_HIGH_VAL_TP      IN   CHAR,                       
 A_HIGH_AU_LEVEL    IN   VARCHAR2,                   
 A_HIGH_VAL         IN   VARCHAR2,                   
 A_MODIFY_REASON    IN   VARCHAR2)                   
RETURN NUMBER IS

L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);
L_LOG_HS       CHAR(1);
L_ALLOW_MODIFY CHAR(1);
L_ACTIVE       CHAR(1);

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_IE, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('ie', A_IE, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   
   UPDATE UTIE
   SET ALLOW_MODIFY   = '#'
   WHERE IE = A_IE
     AND VERSION = A_VERSION;

   DELETE UTIESPIN
   WHERE IE = A_IE
     AND VERSION = A_VERSION;

   L_EVENT_TP := 'ObjectUpdated';

   INSERT INTO UTIESPIN(IE, VERSION, CIRCULAR, INCR, LOW_VAL_TP, LOW_AU_LEVEL,
                        LOW_VAL, HIGH_VAL_TP, HIGH_AU_LEVEL, HIGH_VAL)
   VALUES (A_IE, A_VERSION, A_CIRCULAR, A_INCR, A_LOW_VAL_TP, A_LOW_AU_LEVEL,
           A_LOW_VAL, A_HIGH_VAL_TP, A_HIGH_AU_LEVEL, A_HIGH_VAL);

   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT('SaveInfoFieldSpin', UNAPIGEN.P_EVMGR_NAME, 'ie', A_IE, L_LC, 
                                   L_LC_VERSION, L_SS, L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF NVL(L_LOG_HS, ' ') = '1' THEN
      INSERT INTO UTIEHS (IE, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                          WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES (A_IE, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
              'info field "'||A_IE||'" spinbox properties is updated.', 
              CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveInfoFieldSpin',SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveInfoFieldSpin'));
END SAVEINFOFIELDSPIN;

FUNCTION SAVEINFOFIELDSQL
(A_IE               IN   VARCHAR2,                   
 A_VERSION          IN   VARCHAR2,                   
 A_SQLTEXT          IN   UNAPIGEN.VC255_TABLE_TYPE,  
 A_NR_OF_ROWS       IN   NUMBER,                     
 A_MODIFY_REASON    IN   VARCHAR2)                   
RETURN NUMBER IS

L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);
L_LOG_HS       CHAR(1);
L_ALLOW_MODIFY CHAR(1);
L_ACTIVE       CHAR(1);
L_SEQ_NO       NUMBER;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_IE, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('ie', A_IE, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTIE
   SET ALLOW_MODIFY   = '#'
   WHERE IE = A_IE
     AND VERSION = A_VERSION;

   DELETE UTIESQL
   WHERE IE = A_IE
     AND VERSION = A_VERSION;
    
   L_EVENT_TP := 'ObjectUpdated';

   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      IF NVL(A_SQLTEXT(L_SEQ_NO), ' ') <> ' ' THEN
         INSERT INTO UTIESQL (IE, VERSION, SEQ, SQLTEXT)
         VALUES (A_IE, A_VERSION, L_SEQ_NO, A_SQLTEXT(L_SEQ_NO));
      END IF;
   END LOOP;

   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT('SaveInfoFieldSql', UNAPIGEN.P_EVMGR_NAME,'ie', A_IE, L_LC, 
                                   L_LC_VERSION, L_SS, L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF NVL(L_LOG_HS, ' ') = '1' THEN
      INSERT INTO UTIEHS (IE, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                          WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES (A_IE, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
              'info field "'||A_IE||'" SQL statement for list of values is updated.', 
              CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveInfoFieldSql',SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveInfoFieldSql'));
END SAVEINFOFIELDSQL;

FUNCTION SAVEINFOFIELDVALUE
(A_IE               IN   VARCHAR2,                   
 A_VERSION          IN   VARCHAR2,                   
 A_VALUE            IN   UNAPIGEN.VC40_TABLE_TYPE,   
 A_NR_OF_ROWS       IN   NUMBER,                     
 A_MODIFY_REASON    IN   VARCHAR2)                   
RETURN NUMBER IS

L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);
L_LOG_HS       CHAR(1);
L_ALLOW_MODIFY CHAR(1);
L_ACTIVE       CHAR(1);
L_SEQ_NO       NUMBER;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_IE, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('ie', A_IE, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTIE
   SET ALLOW_MODIFY   = '#'
   WHERE IE = A_IE
     AND VERSION = A_VERSION;

   DELETE UTIELIST
   WHERE IE = A_IE
     AND VERSION = A_VERSION;

   L_EVENT_TP := 'ObjectUpdated';

   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
     INSERT INTO UTIELIST (IE, VERSION, SEQ, VALUE)
     VALUES (A_IE, A_VERSION, L_SEQ_NO, A_VALUE(L_SEQ_NO));
   END LOOP;

   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT('SaveInfoFieldValue', UNAPIGEN.P_EVMGR_NAME,'ie', A_IE, L_LC, 
                                   L_LC_VERSION, L_SS, L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF NVL(L_LOG_HS, ' ') = '1' THEN
      INSERT INTO UTIEHS (IE, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                          WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES (A_IE, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
              'info field "'||A_IE||'" list of values is updated.', 
              CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveInfoFieldValue',SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveInfoFieldValue'));
END SAVEINFOFIELDVALUE;




BEGIN
   P_IE_CURSOR := NULL;
END UNAPIIE;
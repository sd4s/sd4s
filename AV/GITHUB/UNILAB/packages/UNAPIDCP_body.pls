PACKAGE BODY unapidcp AS

L_SQLERRM         VARCHAR2(255);
L_SQL_STRING      VARCHAR2(4000);
L_SQL_STRING_TAB  DBMS_SQL.VARCHAR2A;
L_WHERE_CLAUSE    VARCHAR2(1000);
L_EVENT_TP        UTEV.EV_TP%TYPE;
L_RET_CODE        NUMBER;
L_RESULT          NUMBER;
L_FETCHED_ROWS    NUMBER;
L_EV_SEQ_NR       NUMBER;

STPERROR          EXCEPTION;

TYPE BOOLEAN_TABLE_TYPE IS TABLE OF BOOLEAN INDEX BY BINARY_INTEGER;

L_AU_CURSOR                 INTEGER;
P_HS_CURSOR                 INTEGER;
P_DCGK_CURSOR               INTEGER;

FUNCTION GETVERSION
   RETURN VARCHAR2
IS
BEGIN
   RETURN('06.07.00.00_00.13');
EXCEPTION
   WHEN OTHERS THEN
      RETURN (NULL);
END GETVERSION;

FUNCTION GETDCATTRIBUTE
(A_DC                     OUT   UNAPIGEN.VC40_TABLE_TYPE,  
 A_VERSION                OUT   UNAPIGEN.VC20_TABLE_TYPE,  
 A_AU                     OUT   UNAPIGEN.VC20_TABLE_TYPE,  
 A_AU_VERSION             OUT   UNAPIGEN.VC20_TABLE_TYPE,  
 A_VALUE                  OUT   UNAPIGEN.VC40_TABLE_TYPE,  
 A_DESCRIPTION            OUT   UNAPIGEN.VC40_TABLE_TYPE,  
 A_IS_PROTECTED           OUT   UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_SINGLE_VALUED          OUT   UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NEW_VAL_ALLOWED        OUT   UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_STORE_DB               OUT   UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_VALUE_LIST_TP          OUT   UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_RUN_MODE               OUT   UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_SERVICE                OUT   UNAPIGEN.VC255_TABLE_TYPE, 
 A_CF_VALUE               OUT   UNAPIGEN.VC20_TABLE_TYPE,  
 A_NR_OF_ROWS             IN OUT NUMBER,                   
 A_WHERE_CLAUSE           IN     VARCHAR2)                 
RETURN NUMBER IS

L_AU                             VARCHAR2(20);
L_AU_VERSION                     VARCHAR2(20);
L_DC                             VARCHAR2(40);
L_VERSION                        VARCHAR2(20);
L_VALUE                          VARCHAR2(40);
L_DESCRIPTION                    VARCHAR2(40);
L_IS_PROTECTED                   CHAR(1);
L_SINGLE_VALUED                  CHAR(1);
L_NEW_VAL_ALLOWED                CHAR(1);
L_STORE_DB                       CHAR(1);
L_VALUE_LIST_TP                  CHAR(1);
L_RUN_MODE                       CHAR(1);
L_SERVICE                        VARCHAR2(255);
L_CF_VALUE                       VARCHAR2(20);
L_BIND_DC_SELECTION              BOOLEAN;
L_BIND_FIXED_DC_FLAG             BOOLEAN;

BEGIN
   L_BIND_DC_SELECTION := FALSE;
   L_BIND_FIXED_DC_FLAG := FALSE;
   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      RETURN(UNAPIGEN.DBERR_WHERECLAUSE);
   ELSIF A_WHERE_CLAUSE = 'SELECTION' THEN
      IF UNAPIDC.P_SELECTION_CLAUSE IS NOT NULL THEN
         IF INSTR(UPPER(UNAPIDC.P_SELECTION_CLAUSE), ' WHERE ') <> 0 THEN       
            L_WHERE_CLAUSE := ','||UNAPIDC.P_SELECTION_CLAUSE|| 
                              ' AND a.dc = au.dc AND a.version = au.version ORDER BY au.dc, au.version, au.auseq'; 
         ELSE
            L_WHERE_CLAUSE := ','||UNAPIDC.P_SELECTION_CLAUSE|| 
                              ' WHERE a.dc = au.dc AND a.version = au.version ORDER BY au.dc, au.version, au.auseq'; 
         END IF;
         L_BIND_DC_SELECTION := TRUE;
      ELSE
         L_WHERE_CLAUSE := 'ORDER BY au.dc, au.version, au.auseq'; 
      END IF;
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_BIND_FIXED_DC_FLAG := TRUE;
      L_WHERE_CLAUSE := ', dd'||UNAPIGEN.P_DD||'.uvdc x '||
                     'WHERE au.version = x.version '||
                     'AND au.dc = x.dc '||
                     'AND au.dc = :dc_val ' || 
                     'AND x.version_is_current = ''1'' '||
                     'ORDER BY au.auseq';      
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_SQL_STRING := 'SELECT au.dc, au.version, au.au, au.au_version, au.value FROM dd' ||
                    UNAPIGEN.P_DD || '.uvdcau au '
                    || L_WHERE_CLAUSE;

   IF NOT DBMS_SQL.IS_OPEN(L_AU_CURSOR) THEN
      L_AU_CURSOR := DBMS_SQL.OPEN_CURSOR;
      DBMS_SQL.PARSE(L_AU_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      IF L_BIND_DC_SELECTION THEN
         FOR L_X IN 1..UNAPIDC.P_SELECTION_VAL_TAB.COUNT() LOOP
            DBMS_SQL.BIND_VARIABLE(L_AU_CURSOR, ':col_val'||L_X , UNAPIDC.P_SELECTION_VAL_TAB(L_X)); 
         END LOOP;
      ELSIF L_BIND_FIXED_DC_FLAG THEN
         DBMS_SQL.BIND_VARIABLE(L_AU_CURSOR, ':dc_val' , A_WHERE_CLAUSE); 
      END IF;

      DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 1, L_DC, 40);
      DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 2, L_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 3, L_AU, 20);
      DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 4, L_AU_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 5, L_VALUE, 40);

      L_RESULT := DBMS_SQL.EXECUTE(L_AU_CURSOR);
   END IF;

   L_RESULT := DBMS_SQL.FETCH_ROWS(L_AU_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 1, L_DC);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 2, L_VERSION);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 3, L_AU);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 4, L_AU_VERSION);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 5, L_VALUE);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_DC(L_FETCHED_ROWS) := L_DC;
      A_VERSION(L_FETCHED_ROWS) := L_VERSION;
      A_AU(L_FETCHED_ROWS) := L_AU;
      A_AU_VERSION(L_FETCHED_ROWS) := L_AU_VERSION;
      A_VALUE(L_FETCHED_ROWS) := L_VALUE;

      OPEN UNAPIGEN.L_AUDET_CURSOR(L_AU, L_AU_VERSION);
      FETCH UNAPIGEN.L_AUDET_CURSOR
      INTO L_DESCRIPTION, L_IS_PROTECTED, L_SINGLE_VALUED,
           L_NEW_VAL_ALLOWED, L_STORE_DB, L_VALUE_LIST_TP, L_RUN_MODE,
           L_SERVICE, L_CF_VALUE;
      IF UNAPIGEN.L_AUDET_CURSOR%NOTFOUND THEN
         
         
         
         A_DESCRIPTION(L_FETCHED_ROWS)     := L_AU;
         A_IS_PROTECTED(L_FETCHED_ROWS)    := '1';
         A_SINGLE_VALUED(L_FETCHED_ROWS)   := '1';
         A_NEW_VAL_ALLOWED(L_FETCHED_ROWS) := '0';
         A_STORE_DB(L_FETCHED_ROWS)        := '0';
         A_VALUE_LIST_TP(L_FETCHED_ROWS)   := 'E';
         A_RUN_MODE(L_FETCHED_ROWS)        := 'H';
         A_SERVICE(L_FETCHED_ROWS)         := NULL;
         A_CF_VALUE(L_FETCHED_ROWS)        := NULL;
      ELSE
         A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;
         A_IS_PROTECTED (L_FETCHED_ROWS) := L_IS_PROTECTED;
         A_SINGLE_VALUED (L_FETCHED_ROWS) := L_SINGLE_VALUED;
         A_NEW_VAL_ALLOWED(L_FETCHED_ROWS) := L_NEW_VAL_ALLOWED;
         A_STORE_DB(L_FETCHED_ROWS) := L_STORE_DB;
         A_VALUE_LIST_TP(L_FETCHED_ROWS) := L_VALUE_LIST_TP;
         A_RUN_MODE(L_FETCHED_ROWS) := L_RUN_MODE;
         A_SERVICE(L_FETCHED_ROWS) := L_SERVICE;
         A_CF_VALUE(L_FETCHED_ROWS) := L_CF_VALUE;
      END IF;
      CLOSE UNAPIGEN.L_AUDET_CURSOR;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_AU_CURSOR);
      END IF;
   END LOOP;

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
      DBMS_SQL.CLOSE_CURSOR(L_AU_CURSOR);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      DBMS_SQL.CLOSE_CURSOR(L_AU_CURSOR);
   ELSE   
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   IF A_WHERE_CLAUSE <> 'SELECTION' AND
      DBMS_SQL.IS_OPEN(L_AU_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_AU_CURSOR);
   END IF;
   RETURN(L_RET_CODE);

EXCEPTION
  WHEN OTHERS THEN
     L_SQLERRM := SQLERRM;
     UNAPIGEN.U4ROLLBACK;
     INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, API_NAME, ERROR_MSG)
     VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, SYSDATE,
             'GetDcAttribute', L_SQLERRM);
     INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, API_NAME, ERROR_MSG)
     VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, SYSDATE,
             'GetDcAttribute', SUBSTR(L_SQL_STRING,1,200));
     IF LENGTH(L_SQL_STRING)>200 THEN
        INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, API_NAME, ERROR_MSG)
        VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, SYSDATE,
                'GetDcAttribute', SUBSTR(L_SQL_STRING,201,200));
     END IF;
     UNAPIGEN.U4COMMIT;
     IF DBMS_SQL.IS_OPEN (L_AU_CURSOR) THEN
        DBMS_SQL.CLOSE_CURSOR (L_AU_CURSOR);
     END IF;
     IF UNAPIGEN.L_AUDET_CURSOR%ISOPEN THEN
        CLOSE UNAPIGEN.L_AUDET_CURSOR;
     END IF;
     RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETDCATTRIBUTE;

FUNCTION SAVEDCATTRIBUTE
(A_DC                       IN        VARCHAR2,                 
 A_VERSION                  IN        VARCHAR2,                 
 A_AU                       IN        UNAPIGEN.VC20_TABLE_TYPE, 
 A_AU_VERSION               IN OUT    UNAPIGEN.VC20_TABLE_TYPE, 
 A_VALUE                    IN        UNAPIGEN.VC40_TABLE_TYPE, 
 A_NR_OF_ROWS               IN        NUMBER,                   
 A_MODIFY_REASON            IN        VARCHAR2)                 
RETURN NUMBER IS

L_AU           VARCHAR2(20);
L_AU_VERSION   VARCHAR2(20);
L_VALUE        VARCHAR2(40);
L_ALLOW_MODIFY CHAR(1);
L_AUSEQ        NUMBER;
L_LOG_HS       CHAR(1);
L_ACTIVE       CHAR(1);
L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);
L_DC           VARCHAR2(40);

BEGIN
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_DC, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('dc', A_DC, A_VERSION, L_LC, L_LC_VERSION, L_SS, 
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTDC
   SET ALLOW_MODIFY = '#'
   WHERE DC = A_DC
   AND VERSION = A_VERSION;
   
   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR;
   END IF;

   DELETE FROM UTDCAU
   WHERE DC = A_DC
   AND VERSION = A_VERSION;
   
   FOR I IN 1..A_NR_OF_ROWS LOOP
      L_AU := A_AU(I);
      
      L_AU_VERSION := NULL;
      L_VALUE := A_VALUE(I);

      INSERT INTO UTDCAU(DC, VERSION, AU, AU_VERSION, AUSEQ, VALUE)
      VALUES(A_DC, A_VERSION, L_AU, L_AU_VERSION, I, L_VALUE);
   END LOOP;

   L_EVENT_TP := 'AttributesUpdated';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT ('SaveDcAttribute',
               UNAPIGEN.P_EVMGR_NAME, 'dc', A_DC, L_LC, L_LC_VERSION, L_SS,
               L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF (L_LOG_HS = '1') THEN
       INSERT INTO UTDCHS(DC, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                          WHAT_DESCRIPTION, LOGDATE, WHY, TR_SEQ, EV_SEQ)
       VALUES(A_DC, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
              'attributes for document "'||A_DC||'" are updated',
              SYSDATE, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR); 
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveDcAttribute', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveDcAttribute'));
END SAVEDCATTRIBUTE;

FUNCTION SAVE1DCATTRIBUTE
(A_DC                       IN        VARCHAR2,                 
 A_VERSION                  IN        VARCHAR2,                 
 A_AU                       IN        VARCHAR2,                 
 A_AU_VERSION               IN OUT    VARCHAR2,                 
 A_VALUE                    IN        UNAPIGEN.VC40_TABLE_TYPE, 
 A_NR_OF_ROWS               IN        NUMBER,                   
 A_MODIFY_REASON            IN        VARCHAR2)                 
RETURN NUMBER IS

L_AU           VARCHAR2(20);
L_AU_VERSION   VARCHAR2(20);
L_VALUE        VARCHAR2(40);
L_ALLOW_MODIFY CHAR(1);
L_AUSEQ        NUMBER;
L_LOG_HS       CHAR(1);
L_ACTIVE       CHAR(1);
L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);
L_DC           VARCHAR2(40);

BEGIN
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_DC, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   IF NVL(A_AU, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('dc', A_DC, A_VERSION, L_LC, L_LC_VERSION, L_SS, 
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTDC
   SET ALLOW_MODIFY = '#'
   WHERE DC = A_DC
   AND VERSION = A_VERSION;

   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR;
   END IF;

   DELETE FROM UTDCAU
   WHERE DC = A_DC
   AND VERSION = A_VERSION
   AND AU = A_AU;

   FOR I IN 1..A_NR_OF_ROWS LOOP
      L_AU := A_AU;
      
      L_AU_VERSION := NULL;
      L_VALUE := A_VALUE(I);

      INSERT INTO UTDCAU(DC, VERSION, AU, AU_VERSION, AUSEQ, VALUE)
      VALUES(A_DC, A_VERSION, L_AU, L_AU_VERSION, I, L_VALUE);
   END LOOP;

   L_EVENT_TP := 'AttributesUpdated';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT('Save1DcAttribute', UNAPIGEN.P_EVMGR_NAME, 'dc', A_DC, 
                                   L_LC, L_LC_VERSION, L_SS, L_EVENT_TP, 
                                   'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF (L_LOG_HS = '1') THEN
      INSERT INTO UTDCHS(DC, VERSION, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, 
                           LOGDATE, WHY, TR_SEQ, EV_SEQ)
      VALUES(A_DC, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
             'attributes for document "'||A_DC||'" are updated', 
             SYSDATE, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR); 
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('Save1DcAttribute', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'Save1DcAttribute'));
END SAVE1DCATTRIBUTE;

FUNCTION GETDCHISTORY
(A_DC               OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_VERSION          OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_WHO              OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_WHO_DESCRIPTION  OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_WHAT             OUT     UNAPIGEN.VC60_TABLE_TYPE,  
 A_WHAT_DESCRIPTION OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_LOGDATE          OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_WHY              OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_TR_SEQ           OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_EV_SEQ           OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_NR_OF_ROWS       IN OUT  NUMBER,                    
 A_WHERE_CLAUSE     IN      VARCHAR2)                  
RETURN NUMBER IS

L_NR_OF_ROWS_IN               INTEGER;
L_NR_OF_ROWS_OUT              INTEGER;


L_DC_TAB                      UNAPIGEN.VC40_TABLE_TYPE;
L_VERSION_TAB                 UNAPIGEN.VC20_TABLE_TYPE;
L_WHO_TAB                     UNAPIGEN.VC20_TABLE_TYPE;
L_WHO_DESCRIPTION_TAB         UNAPIGEN.VC40_TABLE_TYPE;
L_WHAT_TAB                    UNAPIGEN.VC60_TABLE_TYPE;
L_WHAT_DESCRIPTION_TAB        UNAPIGEN.VC255_TABLE_TYPE;
L_LOGDATE_TAB                 UNAPIGEN.DATE_TABLE_TYPE;
L_WHY_TAB                     UNAPIGEN.VC255_TABLE_TYPE;
L_TR_SEQ_TAB                  UNAPIGEN.NUM_TABLE_TYPE;
L_EV_SEQ_TAB                  UNAPIGEN.NUM_TABLE_TYPE;

BEGIN
   L_NR_OF_ROWS_IN := A_NR_OF_ROWS;
   L_NR_OF_ROWS_OUT := L_NR_OF_ROWS_IN;
   L_RET_CODE := GETDCHISTORY(A_DC,
                              A_VERSION,
                              A_WHO,             
                              A_WHO_DESCRIPTION,
                              A_WHAT,            
                              A_WHAT_DESCRIPTION,
                              A_LOGDATE,         
                              A_WHY,             
                              A_TR_SEQ,          
                              A_EV_SEQ,          
                              L_NR_OF_ROWS_OUT,      
                              A_WHERE_CLAUSE,
                              0);
    IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
       RETURN(L_RET_CODE);
    ELSE
       A_NR_OF_ROWS := L_NR_OF_ROWS_OUT;
       IF L_NR_OF_ROWS_OUT = L_NR_OF_ROWS_IN THEN
          
          L_RET_CODE := GETDCHISTORY(L_DC_TAB,
                                     L_VERSION_TAB,
                                     L_WHO_TAB,
                                     L_WHO_DESCRIPTION_TAB,
                                     L_WHAT_TAB,
                                     L_WHAT_DESCRIPTION_TAB,
                                     L_LOGDATE_TAB,
                                     L_WHY_TAB,
                                     L_TR_SEQ_TAB,
                                     L_EV_SEQ_TAB,
                                     L_NR_OF_ROWS_OUT,      
                                     A_WHERE_CLAUSE,
                                     -1);
          IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
             RETURN(L_RET_CODE);
          END IF;
       END IF;
    END IF;
    RETURN(L_RET_CODE);
EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, SYSDATE,
              'GetDcHistory', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETDCHISTORY;

FUNCTION GETDCHISTORY
(A_DC               OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_VERSION          OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_WHO              OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_WHO_DESCRIPTION  OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_WHAT             OUT     UNAPIGEN.VC60_TABLE_TYPE,  
 A_WHAT_DESCRIPTION OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_LOGDATE          OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_WHY              OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_TR_SEQ           OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_EV_SEQ           OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_NR_OF_ROWS       IN OUT  NUMBER,                    
 A_WHERE_CLAUSE     IN      VARCHAR2,                  
 A_NEXT_ROWS        IN      NUMBER)                    
RETURN NUMBER IS

L_DC                      VARCHAR2(40);
L_VERSION                 VARCHAR2(20);
L_WHO                     VARCHAR2(20);
L_WHO_DESCRIPTION         VARCHAR2(40);
L_WHAT                    VARCHAR2(60);
L_WHAT_DESCRIPTION        VARCHAR2(255);
L_LOGDATE                 DATE;
L_WHY                     VARCHAR2(255);
L_TR_SEQ                  NUMBER;
L_EV_SEQ                  NUMBER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF DBMS_SQL.IS_OPEN(P_HS_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(P_HS_CURSOR);
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_HS_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      
      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
         RETURN(UNAPIGEN.DBERR_WHERECLAUSE);
      ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
            L_WHERE_CLAUSE := ', dd'||UNAPIGEN.P_DD||'.uvdc x WHERE x.version_is_current = ''1'' '||
                              'AND hs.version = x.version '||  
                              'AND hs.dc = x.dc '||
                              'AND hs.dc =''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                              ''' ORDER BY hs.logdate DESC'; 
      ELSE
         L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
      END IF;

      
      L_WHERE_CLAUSE := REPLACE(REPLACE(L_WHERE_CLAUSE, 
                                        'logdate DESC', 
                                        'logdate DESC'),
                                'LOGDATE DESC', 
                                'LOGDATE DESC');

      IF DBMS_SQL.IS_OPEN(P_HS_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(P_HS_CURSOR);
      END IF;
      P_HS_CURSOR := DBMS_SQL.OPEN_CURSOR;
      L_SQL_STRING := 'SELECT hs.dc, hs.version, hs.who, hs.who_description, '||
                      'hs.what, hs.what_description, hs.logdate, hs.why, hs.tr_seq, hs.ev_seq '||
                      'FROM dd' || UNAPIGEN.P_DD || '.uvdchs hs '
                       || L_WHERE_CLAUSE;
      DBMS_SQL.PARSE(P_HS_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

      DBMS_SQL.DEFINE_COLUMN(P_HS_CURSOR, 1, L_DC, 40);
      DBMS_SQL.DEFINE_COLUMN(P_HS_CURSOR, 2, L_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(P_HS_CURSOR, 3, L_WHO, 20);
      DBMS_SQL.DEFINE_COLUMN(P_HS_CURSOR, 4, L_WHO_DESCRIPTION, 40);
      DBMS_SQL.DEFINE_COLUMN(P_HS_CURSOR, 5, L_WHAT, 60);
      DBMS_SQL.DEFINE_COLUMN(P_HS_CURSOR, 6, L_WHAT_DESCRIPTION, 255);
      DBMS_SQL.DEFINE_COLUMN(P_HS_CURSOR, 7, L_LOGDATE);
      DBMS_SQL.DEFINE_COLUMN(P_HS_CURSOR, 8, L_WHY, 255);
      DBMS_SQL.DEFINE_COLUMN(P_HS_CURSOR, 9, L_TR_SEQ);
      DBMS_SQL.DEFINE_COLUMN(P_HS_CURSOR, 10, L_EV_SEQ);
      L_RESULT := DBMS_SQL.EXECUTE(P_HS_CURSOR);
   END IF;

   L_RESULT := DBMS_SQL.FETCH_ROWS(P_HS_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;
      DBMS_SQL.COLUMN_VALUE(P_HS_CURSOR, 1, L_DC);
      DBMS_SQL.COLUMN_VALUE(P_HS_CURSOR, 2, L_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_HS_CURSOR, 3, L_WHO);
      DBMS_SQL.COLUMN_VALUE(P_HS_CURSOR, 4, L_WHO_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE(P_HS_CURSOR, 5, L_WHAT);
      DBMS_SQL.COLUMN_VALUE(P_HS_CURSOR, 6, L_WHAT_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE(P_HS_CURSOR, 7, L_LOGDATE);
      DBMS_SQL.COLUMN_VALUE(P_HS_CURSOR, 8, L_WHY);
      DBMS_SQL.COLUMN_VALUE(P_HS_CURSOR, 9, L_TR_SEQ);
      DBMS_SQL.COLUMN_VALUE(P_HS_CURSOR, 10, L_EV_SEQ);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_DC(L_FETCHED_ROWS) := L_DC;
      A_VERSION(L_FETCHED_ROWS) := L_VERSION;
      A_WHO(L_FETCHED_ROWS) := L_WHO;
      A_WHO_DESCRIPTION(L_FETCHED_ROWS) := L_WHO_DESCRIPTION;
      A_WHAT(L_FETCHED_ROWS) := L_WHAT;
      A_WHAT_DESCRIPTION(L_FETCHED_ROWS) := L_WHAT_DESCRIPTION;
      A_LOGDATE(L_FETCHED_ROWS) := TO_CHAR(L_LOGDATE);
      A_WHY(L_FETCHED_ROWS) := L_WHY;
      A_TR_SEQ(L_FETCHED_ROWS) := L_TR_SEQ;
      A_EV_SEQ(L_FETCHED_ROWS) := L_EV_SEQ;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_HS_CURSOR);
      END IF;
   END LOOP;

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
      DBMS_SQL.CLOSE_CURSOR(P_HS_CURSOR);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
      DBMS_SQL.CLOSE_CURSOR(P_HS_CURSOR);
   ELSE
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;
   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, SYSDATE,
              'GetDcHistory', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (P_HS_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (P_HS_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETDCHISTORY;

FUNCTION SAVEDCHISTORY
(A_DC                IN        VARCHAR2,                   
 A_VERSION           IN        VARCHAR2,                   
 A_WHO               IN        UNAPIGEN.VC20_TABLE_TYPE,   
 A_WHO_DESCRIPTION   IN        UNAPIGEN.VC40_TABLE_TYPE,   
 A_WHAT              IN        UNAPIGEN.VC60_TABLE_TYPE,   
 A_WHAT_DESCRIPTION  IN        UNAPIGEN.VC255_TABLE_TYPE,  
 A_LOGDATE           IN        UNAPIGEN.DATE_TABLE_TYPE,   
 A_WHY               IN        UNAPIGEN.VC255_TABLE_TYPE,  
 A_TR_SEQ            IN        UNAPIGEN.NUM_TABLE_TYPE,    
 A_EV_SEQ            IN        UNAPIGEN.NUM_TABLE_TYPE,    
 A_NR_OF_ROWS        IN        NUMBER)                     
RETURN NUMBER IS

L_VALUE            VARCHAR2(40);
L_HS_CURSOR        INTEGER;
L_ALLOW_MODIFY     CHAR(1);
L_LOG_HS           CHAR(1);
L_LC               VARCHAR2(2);
L_LC_VERSION       VARCHAR2(20);
L_SS               VARCHAR2(2);
L_ACTIVE           CHAR(1);

BEGIN
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_DC, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('dc', A_DC, A_VERSION, L_LC, L_LC_VERSION, L_SS, 
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   FOR I IN 1..A_NR_OF_ROWS LOOP
      UPDATE UTDCHS
      SET WHY = A_WHY(I)
      WHERE DC = A_DC
      AND VERSION = A_VERSION
      AND WHO = A_WHO(I)
      AND WHO_DESCRIPTION = A_WHO_DESCRIPTION(I)
      AND TO_CHAR(LOGDATE) = A_LOGDATE(I)
      AND WHAT = A_WHAT(I)
      AND WHAT_DESCRIPTION = A_WHAT_DESCRIPTION(I)
      AND TR_SEQ = A_TR_SEQ(I)
      AND EV_SEQ = A_EV_SEQ(I);

      IF SQL%ROWCOUNT = 0 THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
         RAISE STPERROR;
      END IF;
   END LOOP;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveDcHistory', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveDcHistory'));
END SAVEDCHISTORY;

FUNCTION GETDCACCESS
(A_DC                IN      VARCHAR2,                  
 A_VERSION           IN      VARCHAR2,                  
 A_DD                OUT     UNAPIGEN.VC3_TABLE_TYPE,    
 A_DATA_DOMAIN       OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_ACCESS_RIGHTS     OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NR_OF_ROWS        IN OUT  NUMBER)                    
RETURN NUMBER IS

L_DD_DESCRIPTION VARCHAR2(40);
L_AR             UNAPIGEN.CHAR1_TABLE_TYPE; 
L_DD             VARCHAR2(3);
L_DESCRIPTION    UNAPIGEN.VC40_TABLE_TYPE;
L_ROW            INTEGER;

L_DD_CURSOR  UNAPIGEN.CURSOR_REF_TYPE;
L_AR_CURSOR  UNAPIGEN.CURSOR_REF_TYPE;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_DC, ' ') = ' ' THEN
      RETURN (UNAPIGEN.DBERR_NOOBJID);
   END IF;

   IF NVL(A_VERSION, ' ') = ' ' THEN
      RETURN (UNAPIGEN.DBERR_NOOBJVERSION);
   END IF;

   
   
   
   L_SQL_STRING:= 'SELECT dd, description FROM dd'||UNAPIGEN.P_DD||'.uvdd ORDER BY dd';
   OPEN L_DD_CURSOR FOR L_SQL_STRING;
   FOR I IN 1..UNAPIGEN.P_DATADOMAINS LOOP
      FETCH L_DD_CURSOR INTO L_DD, L_DD_DESCRIPTION;
      L_DESCRIPTION(L_DD) := L_DD_DESCRIPTION;
   END LOOP;
   CLOSE L_DD_CURSOR;

   L_SQL_STRING:= 
      'SELECT ar1, ar2, ar3, ar4, ar5, ar6, ar7, ar8, ar9, ar10, ar11, ar12, ar13, ar14, ar15, ar16, ' ||
      'ar17, ar18, ar19, ar20, ar21, ar22, ar23, ar24, ar25, ar26, ar27, ar28, ar29, ar30, ar31, ' ||
      'ar32, ar33, ar34, ar35, ar36, ar37, ar38, ar39, ar40, ar41, ar42, ar43, ar44, ar45, ar46, ' ||
      'ar47, ar48, ar49, ar50, ar51, ar52, ar53, ar54, ar55, ar56, ar57, ar58, ar59, ar60, ar61, ' ||
      'ar62, ar63, ar64, ar65, ar66, ar67, ar68, ar69, ar70, ar71, ar72, ar73, ar74, ar75, ar76, ' ||
      'ar77, ar78, ar79, ar80, ar81, ar82, ar83, ar84, ar85, ar86, ar87, ar88, ar89, ar90, ar91, ' ||
      'ar92, ar93, ar94, ar95, ar96, ar97, ar98, ar99, ar100, ar101, ar102, ar103, ar104, ar105, ' ||
      'ar106, ar107, ar108, ar109, ar110, ar111, ar112, ar113, ar114, ar115, ar116, ar117, ar118, ' ||
      'ar119, ar120, ar121, ar122, ar123, ar124, ar125, ar126, ar127, ar128 ' ||
      'FROM uddc' || 
      ' WHERE dc = ''' || REPLACE(A_DC, '''', '''''') || ''''|| 
      ' AND version = ''' || REPLACE(A_VERSION, '''', '''''') || '''';             
   L_FETCHED_ROWS := 0;
   OPEN L_AR_CURSOR FOR L_SQL_STRING;
   LOOP
      FETCH L_AR_CURSOR INTO L_AR(1),L_AR(2),L_AR(3),L_AR(4),L_AR(5),L_AR(6),L_AR(7),L_AR(8),L_AR(9),
      L_AR(10),L_AR(11),L_AR(12),L_AR(13),L_AR(14),L_AR(15),L_AR(16),L_AR(17),L_AR(18),L_AR(19),
      L_AR(20),L_AR(21),L_AR(22),L_AR(23),L_AR(24),L_AR(25),L_AR(26),L_AR(27),L_AR(28),L_AR(29),
      L_AR(30),L_AR(31),L_AR(32),L_AR(33),L_AR(34),L_AR(35),L_AR(36),L_AR(37),L_AR(38),L_AR(39),
      L_AR(40),L_AR(41),L_AR(42),L_AR(43),L_AR(44),L_AR(45),L_AR(46),L_AR(47),L_AR(48),L_AR(49),
      L_AR(50),L_AR(51),L_AR(52),L_AR(53),L_AR(54),L_AR(55),L_AR(56),L_AR(57),L_AR(58),L_AR(59),
      L_AR(60),L_AR(61),L_AR(62),L_AR(63),L_AR(64),L_AR(65),L_AR(66),L_AR(67),L_AR(68),L_AR(69),
      L_AR(70),L_AR(71),L_AR(72),L_AR(73),L_AR(74),L_AR(75),L_AR(76),L_AR(77),L_AR(78),L_AR(79),
      L_AR(80),L_AR(81),L_AR(82),L_AR(83),L_AR(84),L_AR(85),L_AR(86),L_AR(87),L_AR(88),L_AR(89),
      L_AR(90),L_AR(91),L_AR(92),L_AR(93),L_AR(94),L_AR(95),L_AR(96),L_AR(97),L_AR(98),L_AR(99),
      L_AR(100),L_AR(101),L_AR(102),L_AR(103),L_AR(104),L_AR(105),L_AR(106),L_AR(107),L_AR(108),
      L_AR(109),L_AR(110),L_AR(111),L_AR(112),L_AR(113),L_AR(114),L_AR(115),L_AR(116),L_AR(117),
      L_AR(118),L_AR(119),L_AR(120),L_AR(121),L_AR(122),L_AR(123),L_AR(124),L_AR(125),L_AR(126),
      L_AR(127),L_AR(128);
      EXIT WHEN L_AR_CURSOR%NOTFOUND;
      
      FOR L_ROW IN 1..UNAPIGEN.P_DATADOMAINS LOOP
          L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
          A_DD(L_FETCHED_ROWS) := TO_CHAR(L_ROW);
          A_DATA_DOMAIN(L_FETCHED_ROWS) := L_DESCRIPTION(L_ROW);
          A_ACCESS_RIGHTS(L_FETCHED_ROWS) := L_AR(L_ROW);
          IF L_FETCHED_ROWS >= A_NR_OF_ROWS THEN
             EXIT;
          END IF;
      END LOOP;
      IF L_FETCHED_ROWS >= A_NR_OF_ROWS THEN
         EXIT;
      END IF;
   END LOOP;
   CLOSE L_AR_CURSOR;

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;
    
   RETURN(L_RET_CODE);

EXCEPTION
WHEN NO_DATA_FOUND THEN
   IF L_DD_CURSOR%ISOPEN THEN
      CLOSE L_DD_CURSOR;
   END IF;
   IF L_AR_CURSOR%ISOPEN THEN
      CLOSE L_AR_CURSOR;
   END IF;
   RETURN(UNAPIGEN.DBERR_SYSDEFAULTS);
WHEN OTHERS THEN
   L_SQLERRM := SQLERRM;
   IF L_DD_CURSOR%ISOPEN THEN
      CLOSE L_DD_CURSOR;
   END IF;
   IF L_AR_CURSOR%ISOPEN THEN
      CLOSE L_AR_CURSOR;
   END IF;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, API_NAME, ERROR_MSG)
   VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, SYSDATE,
          'GetDcAccess', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETDCACCESS;

FUNCTION GETDCACCESS
(A_DC             OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_VERSION        OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_DD             OUT     UNAPIGEN.VC3_TABLE_TYPE,   
 A_DATA_DOMAIN    OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_ACCESS_RIGHTS  OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NR_OF_ROWS     IN OUT  NUMBER,                    
 A_WHERE_CLAUSE   IN      VARCHAR2)                  
RETURN NUMBER IS

L_DC             VARCHAR2(40);
L_VERSION        VARCHAR2(20);
L_DD_DESCRIPTION VARCHAR2(40);
L_AR             UNAPIGEN.CHAR1_TABLE_TYPE; 
L_DD             VARCHAR2(3);
L_DESCRIPTION    UNAPIGEN.VC40_TABLE_TYPE;
L_ROW            INTEGER;
L_DD_CURSOR      UNAPIGEN.CURSOR_REF_TYPE;
L_AR_CURSOR      UNAPIGEN.CURSOR_REF_TYPE;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      RETURN(UNAPIGEN.DBERR_WHERECLAUSE);
   ELSIF
      UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := 'WHERE dc = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') ||''''; 
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   
   
   
   L_SQL_STRING:= 'SELECT dd, description FROM dd'||UNAPIGEN.P_DD||'.uvdd ORDER BY dd';
   OPEN L_DD_CURSOR FOR L_SQL_STRING;
   FOR I IN 1..UNAPIGEN.P_DATADOMAINS LOOP
      FETCH L_DD_CURSOR INTO L_DD, L_DD_DESCRIPTION;
      L_DESCRIPTION(L_DD) := L_DD_DESCRIPTION;
   END LOOP;
   CLOSE L_DD_CURSOR;

   L_SQL_STRING:= 
      'SELECT ar1, ar2, ar3, ar4, ar5, ar6, ar7, ar8, ar9, ar10, ar11, ar12, ar13, ar14, ar15, ar16, ' ||
      'ar17, ar18, ar19, ar20, ar21, ar22, ar23, ar24, ar25, ar26, ar27, ar28, ar29, ar30, ar31, ' ||
      'ar32, ar33, ar34, ar35, ar36, ar37, ar38, ar39, ar40, ar41, ar42, ar43, ar44, ar45, ar46, ' ||
      'ar47, ar48, ar49, ar50, ar51, ar52, ar53, ar54, ar55, ar56, ar57, ar58, ar59, ar60, ar61, ' ||
      'ar62, ar63, ar64, ar65, ar66, ar67, ar68, ar69, ar70, ar71, ar72, ar73, ar74, ar75, ar76, ' ||
      'ar77, ar78, ar79, ar80, ar81, ar82, ar83, ar84, ar85, ar86, ar87, ar88, ar89, ar90, ar91, ' ||
      'ar92, ar93, ar94, ar95, ar96, ar97, ar98, ar99, ar100, ar101, ar102, ar103, ar104, ar105, ' ||
      'ar106, ar107, ar108, ar109, ar110, ar111, ar112, ar113, ar114, ar115, ar116, ar117, ar118, ' ||
      'ar119, ar120, ar121, ar122, ar123, ar124, ar125, ar126, ar127, ar128, dc, version FROM uddc ' || 
       L_WHERE_CLAUSE;
   L_FETCHED_ROWS := 0;
   OPEN L_AR_CURSOR FOR L_SQL_STRING;
   LOOP
      FETCH L_AR_CURSOR INTO L_AR(1),L_AR(2),L_AR(3),L_AR(4),L_AR(5),L_AR(6),L_AR(7),L_AR(8),L_AR(9),
      L_AR(10),L_AR(11),L_AR(12),L_AR(13),L_AR(14),L_AR(15),L_AR(16),L_AR(17),L_AR(18),L_AR(19),
      L_AR(20),L_AR(21),L_AR(22),L_AR(23),L_AR(24),L_AR(25),L_AR(26),L_AR(27),L_AR(28),L_AR(29),
      L_AR(30),L_AR(31),L_AR(32),L_AR(33),L_AR(34),L_AR(35),L_AR(36),L_AR(37),L_AR(38),L_AR(39),
      L_AR(40),L_AR(41),L_AR(42),L_AR(43),L_AR(44),L_AR(45),L_AR(46),L_AR(47),L_AR(48),L_AR(49),
      L_AR(50),L_AR(51),L_AR(52),L_AR(53),L_AR(54),L_AR(55),L_AR(56),L_AR(57),L_AR(58),L_AR(59),
      L_AR(60),L_AR(61),L_AR(62),L_AR(63),L_AR(64),L_AR(65),L_AR(66),L_AR(67),L_AR(68),L_AR(69),
      L_AR(70),L_AR(71),L_AR(72),L_AR(73),L_AR(74),L_AR(75),L_AR(76),L_AR(77),L_AR(78),L_AR(79),
      L_AR(80),L_AR(81),L_AR(82),L_AR(83),L_AR(84),L_AR(85),L_AR(86),L_AR(87),L_AR(88),L_AR(89),
      L_AR(90),L_AR(91),L_AR(92),L_AR(93),L_AR(94),L_AR(95),L_AR(96),L_AR(97),L_AR(98),L_AR(99),
      L_AR(100),L_AR(101),L_AR(102),L_AR(103),L_AR(104),L_AR(105),L_AR(106),L_AR(107),L_AR(108),
      L_AR(109),L_AR(110),L_AR(111),L_AR(112),L_AR(113),L_AR(114),L_AR(115),L_AR(116),L_AR(117),
      L_AR(118),L_AR(119),L_AR(120),L_AR(121),L_AR(122),L_AR(123),L_AR(124),L_AR(125),L_AR(126),
      L_AR(127),L_AR(128), L_DC, L_VERSION;
      EXIT WHEN L_AR_CURSOR%NOTFOUND;
      
      FOR L_ROW IN 1..UNAPIGEN.P_DATADOMAINS LOOP
          L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
          A_DC(L_FETCHED_ROWS) := L_DC;
          A_VERSION(L_FETCHED_ROWS) := L_VERSION;
          A_DD(L_FETCHED_ROWS) := TO_CHAR(L_ROW);
          A_DATA_DOMAIN(L_FETCHED_ROWS) := L_DESCRIPTION(L_ROW);
          A_ACCESS_RIGHTS(L_FETCHED_ROWS) := L_AR(L_ROW);
          IF L_FETCHED_ROWS >= A_NR_OF_ROWS THEN
             EXIT;
          END IF;
      END LOOP;
      IF L_FETCHED_ROWS >= A_NR_OF_ROWS THEN
         EXIT;
      END IF;
   END LOOP;
   CLOSE L_AR_CURSOR;

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
WHEN NO_DATA_FOUND THEN
   IF L_DD_CURSOR%ISOPEN THEN
      CLOSE L_DD_CURSOR;
   END IF;
   IF L_AR_CURSOR%ISOPEN THEN
      CLOSE L_AR_CURSOR;
   END IF;
   RETURN(UNAPIGEN.DBERR_SYSDEFAULTS);
WHEN OTHERS THEN
   L_SQLERRM := SQLERRM;
   IF L_DD_CURSOR%ISOPEN THEN
      CLOSE L_DD_CURSOR;
   END IF;
   IF L_AR_CURSOR%ISOPEN THEN
      CLOSE L_AR_CURSOR;
   END IF;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
           'GetDcAccess', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETDCACCESS;

FUNCTION SAVEDCACCESS
(A_DC                 IN     VARCHAR2,                  
 A_VERSION            IN     VARCHAR2,                  
 A_DD                 IN     UNAPIGEN.VC3_TABLE_TYPE,   
 A_ACCESS_RIGHTS      IN     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NR_OF_ROWS         IN     NUMBER,                    
 A_MODIFY_REASON      IN     VARCHAR2)                  
RETURN NUMBER IS

L_ALLOW_MODIFY   CHAR(1);
L_LOG_HS         CHAR(1);
L_ACTIVE         CHAR(1);
L_LC             VARCHAR2(2);
L_LC_VERSION     VARCHAR2(20);
L_SS             VARCHAR2(2);
L_WRITE_FOUND    BOOLEAN;
L_OBJECT_CURSOR  INTEGER;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_DC, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   IF NVL(A_NR_OF_ROWS, -1) < 0 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NROFROWS;
      RAISE STPERROR;
   END IF;

   
   
   
   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('dc', A_DC, A_VERSION, L_LC, L_LC_VERSION, L_SS, 
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTDC
   SET ALLOW_MODIFY = '#'
   WHERE DC = A_DC
   AND VERSION = A_VERSION;

   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR;
   END IF;

   
   
   
   
   L_SQL_STRING := '';
   L_WRITE_FOUND := FALSE;
   FOR L_CTR IN 1..A_NR_OF_ROWS LOOP

      IF NVL(A_ACCESS_RIGHTS(L_CTR), 'N') NOT IN ('R','W','N') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_AR;
         RAISE STPERROR;
      END IF;

      IF NVL(A_ACCESS_RIGHTS(L_CTR), 'N') = 'W' THEN
         L_WRITE_FOUND := TRUE;
      END IF;

      IF (NVL(TO_NUMBER(A_DD(L_CTR)), -1) < 0) OR (NVL(TO_NUMBER(A_DD(L_CTR)), -1) > UNAPIGEN.P_DATADOMAINS) THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_DD;
         RAISE STPERROR;
      END IF;

      L_SQL_STRING := L_SQL_STRING || ' ar' || A_DD(L_CTR) ||
                   '= ''' || NVL(A_ACCESS_RIGHTS(L_CTR), 'N') || '''';
      IF L_CTR <> A_NR_OF_ROWS THEN
        L_SQL_STRING :=  L_SQL_STRING || ',';
      END IF;
   END LOOP;

   
   IF NOT L_WRITE_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOWRITEACCESS;
      RAISE STPERROR;
   END IF;

   IF NVL(L_SQL_STRING, ' ')  = ' ' THEN
      
      
      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NROFROWS;
      RAISE STPERROR;
   ELSE
      L_OBJECT_CURSOR := DBMS_SQL.OPEN_CURSOR;
      L_SQL_STRING := 'UPDATE utdc' || 
                      ' SET ' || L_SQL_STRING ||
                      ' WHERE dc = ''' || REPLACE(A_DC, '''', '''''') || 
                      ''' AND version = ''' || REPLACE(A_VERSION, '''', '''''') || 
                      ''''; 
      
      
      
      DBMS_SQL.PARSE(L_OBJECT_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      L_RESULT := DBMS_SQL.EXECUTE(L_OBJECT_CURSOR);
      IF L_RESULT = 0 THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
         RAISE STPERROR;
      END IF;
      DBMS_SQL.CLOSE_CURSOR(L_OBJECT_CURSOR);

      
      
      
      L_EVENT_TP := 'AccessRightsUpdated';
      L_EV_SEQ_NR := -1;
      L_RESULT := UNAPIEV.INSERTEVENT('SaveDcAccess', UNAPIGEN.P_EVMGR_NAME, 'dc', A_DC, 
                                      L_LC, L_LC_VERSION, L_SS, L_EVENT_TP, 
                                      'version='||A_VERSION, L_EV_SEQ_NR);
      IF L_RESULT <>UNAPIGEN.DBERR_SUCCESS THEN
         UNAPIGEN.P_TXN_ERROR := L_RESULT;
         RAISE STPERROR;
      END IF;

      IF L_LOG_HS = '1' THEN
         INSERT INTO UTDCHS(DC, VERSION, WHO, WHO_DESCRIPTION, WHAT,
                              WHAT_DESCRIPTION, LOGDATE, WHY, TR_SEQ, EV_SEQ)
         VALUES(A_DC, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                'access rights for document "'||A_DC||'" are updated', 
                SYSDATE, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveDcAccess', SQLERRM);
   END IF;
   IF DBMS_SQL.IS_OPEN(L_OBJECT_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_OBJECT_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveDcAccess'));
END SAVEDCACCESS;

FUNCTION DCTRANSITIONAUTHORISED
(A_DC                 IN        VARCHAR2,     
 A_VERSION            IN        VARCHAR2,     
 A_LC                 IN OUT    VARCHAR2,     
 A_OLD_SS             IN OUT    VARCHAR2,     
 A_NEW_SS             IN        VARCHAR2,     
 A_AUTHORISED_BY      IN        VARCHAR2,     
 A_LC_SS_FROM         OUT       VARCHAR2,     
 A_TR_NO              OUT       NUMBER,       
 A_ALLOW_MODIFY       OUT       CHAR,         
 A_ACTIVE             OUT       CHAR,         
 A_LOG_HS             OUT       CHAR)         
RETURN NUMBER IS

L_LC                  VARCHAR2(2);
L_LC_VERSION          VARCHAR2(20);
L_SS                  VARCHAR2(2);
L_OLD_ACTIVE          CHAR(1);
L_OLD_ALLOW_MODIFY    CHAR(1);
L_TR_OK               BOOLEAN;
L_RQ                  VARCHAR2(20);
L_LOCK_DC             VARCHAR2(40);

CURSOR L_COS_CURSOR(A_LC VARCHAR2, A_LC_VERSION VARCHAR2, 
                    A_SS_FROM VARCHAR2, A_SS_TO VARCHAR2, A_UP NUMBER, A_USER VARCHAR2) IS
   SELECT SS_FROM, TR_NO
   FROM  UTLCUS
   WHERE LC  = A_LC
     AND VERSION = A_LC_VERSION
     AND SS_FROM IN (A_SS_FROM, '@@')
     AND SS_TO   = A_SS_TO
     AND US IN (A_USER, '~ANY~',  'UP'||TO_CHAR(A_UP))
   ORDER BY SS_FROM DESC, TR_NO;

CURSOR L_TR_CURSOR(A_LC VARCHAR2, A_LC_VERSION VARCHAR2, A_SS_FROM VARCHAR2, A_SS_TO VARCHAR2) IS
   SELECT SS_FROM, TR_NO
   FROM  UTLCTR
   WHERE LC  = A_LC
     AND VERSION = A_LC_VERSION
     AND SS_FROM IN (A_SS_FROM, '@@')
     AND SS_TO   = A_SS_TO
   ORDER BY SS_FROM DESC, TR_NO;

CURSOR L_TRDYN_CURSOR(A_LC VARCHAR2, A_LC_VERSION VARCHAR2, A_SS_FROM VARCHAR2, A_SS_TO VARCHAR2) IS
   SELECT *
   FROM  UTLCUS
   WHERE LC  = A_LC
     AND VERSION = A_LC_VERSION
     AND SS_FROM IN (A_SS_FROM, '@@')
     AND SS_TO   = A_SS_TO
     AND US = '~DYNAMIC~'
   ORDER BY SS_FROM DESC, TR_NO;

BEGIN
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_DC, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   
   SELECT DC 
   INTO L_LOCK_DC
   FROM UTDC
   WHERE DC = A_DC
   AND VERSION = A_VERSION
   FOR UPDATE;
   
   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('dc', A_DC, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                    L_OLD_ALLOW_MODIFY, L_OLD_ACTIVE, A_LOG_HS);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS AND
      L_RET_CODE <> UNAPIGEN.DBERR_NOTMODIFIABLE THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;
   
   L_SS := NVL(L_SS, '@~');
   
   IF A_LC IS NULL THEN
      
      IF L_LC IS NULL THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OBJECTLCMATCH;
         RAISE STPERROR;
      END IF;
      A_LC := L_LC;
   ELSE
      
      IF A_LC <> NVL(L_LC, '####') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OBJECTLCMATCH;
         RAISE STPERROR;
      END IF;
   END IF;

   IF NVL(A_OLD_SS, ' ') = ' ' THEN
      
      A_OLD_SS := L_SS;
   ELSE
      
      IF A_OLD_SS <> L_SS THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OBJECTSSMATCH;
         RAISE STPERROR;
      END IF;
   END IF;

   BEGIN
      SELECT ALLOW_MODIFY, ACTIVE
      INTO A_ALLOW_MODIFY, A_ACTIVE
      FROM UTSS
      WHERE SS = A_NEW_SS;
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOSS;
      RAISE STPERROR;
   END;

   
   
   
   L_TR_OK := FALSE;
   OPEN L_COS_CURSOR (L_LC, L_LC_VERSION, L_SS, A_NEW_SS, UNAPIGEN.P_CURRENT_UP, NVL(A_AUTHORISED_BY, UNAPIGEN.P_USER))  ;
   FETCH L_COS_CURSOR INTO  A_LC_SS_FROM, A_TR_NO;

   IF L_COS_CURSOR%FOUND THEN
      L_TR_OK := TRUE;
   ELSE
      
      
      OPEN L_TR_CURSOR (L_LC, L_LC_VERSION, L_SS, A_NEW_SS);
      FETCH L_TR_CURSOR INTO  A_LC_SS_FROM, A_TR_NO;
      IF L_TR_CURSOR%NOTFOUND THEN
         L_TR_OK := FALSE;
      ELSE
      
         
         
         IF NVL(A_AUTHORISED_BY, UNAPIGEN.P_USER) = UNAPIGEN.P_DBA_NAME THEN
            L_TR_OK := TRUE;
         ELSE
            
            
            
            
            
            
            
            OPEN L_TRDYN_CURSOR (L_LC, L_LC_VERSION, L_SS, A_NEW_SS);
            LOOP
               FETCH L_TRDYN_CURSOR INTO  UNAPIAUT.P_LCTRUS_REC;
               IF L_TRDYN_CURSOR%NOTFOUND THEN
                  L_TR_OK := FALSE;
                  EXIT;
               ELSE
                  UNAPIAUT.P_OBJECT_TP      := 'dc';
                  UNAPIAUT.P_OBJECT_ID      := A_DC;
                  UNAPIAUT.P_OBJECT_VERSION := A_VERSION;
                  UNAPIAUT.P_LC             := L_LC;
                  UNAPIAUT.P_SS_FROM        := L_SS;
                  UNAPIAUT.P_LC_SS_FROM     := UNAPIAUT.P_LCTRUS_REC.SS_FROM;
                  UNAPIAUT.P_SS_TO          := A_NEW_SS;
                  UNAPIAUT.P_TR_NO          := UNAPIAUT.P_LCTRUS_REC.TR_NO;
                  UNAPIAUT.P_RQ             := NULL;
                  UNAPIAUT.P_CH             := NULL;
                  UNAPIAUT.P_SD             := NULL;
                  UNAPIAUT.P_SC             := NULL;
                  UNAPIAUT.P_WS             := NULL;
                  UNAPIAUT.P_PG             := NULL;    UNAPIAUT.P_PGNODE := NULL;
                  UNAPIAUT.P_PA             := NULL;    UNAPIAUT.P_PANODE := NULL;
                  UNAPIAUT.P_ME             := NULL;    UNAPIAUT.P_MENODE := NULL;
                  UNAPIAUT.P_IC             := NULL;    UNAPIAUT.P_ICNODE := NULL;
                  UNAPIAUT.P_II             := NULL;    UNAPIAUT.P_IINODE := NULL;
                  UNAPIAUT.P_PP_KEY1        := NULL;                  
                  UNAPIAUT.P_PP_KEY2        := NULL;                  
                  UNAPIAUT.P_PP_KEY3        := NULL;                  
                  UNAPIAUT.P_PP_KEY4        := NULL;                  
                  UNAPIAUT.P_PP_KEY5        := NULL;                  
                  UNAPIAUT.P_LAB            := NULL;
                  A_LC_SS_FROM := UNAPIAUT.P_LCTRUS_REC.SS_FROM;
                  A_TR_NO := UNAPIAUT.P_LCTRUS_REC.TR_NO;
                  L_TR_OK := UNACCESS.TRANSITIONAUTHORISED;
                  IF L_TR_OK THEN
                     EXIT;
                  END IF;
               END IF;
            END LOOP;
            CLOSE L_TRDYN_CURSOR;
         END IF;
      END IF;
      CLOSE L_TR_CURSOR;
   END IF;
   CLOSE L_COS_CURSOR;
   
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NOT L_TR_OK THEN
      RETURN(UNAPIGEN.DBERR_NOTAUTHORISED);
   ELSE
      RETURN(UNAPIGEN.DBERR_SUCCESS);
   END IF;

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('DcTransitionAuthorised', SQLERRM);
   END IF;
   IF L_COS_CURSOR%ISOPEN THEN
      CLOSE L_COS_CURSOR;
   END IF;
   IF L_TR_CURSOR%ISOPEN THEN
      CLOSE L_TR_CURSOR;
   END IF;
   IF L_TRDYN_CURSOR%ISOPEN THEN
      CLOSE L_TRDYN_CURSOR;
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'DcTransitionAuthorised'));
END DCTRANSITIONAUTHORISED;

FUNCTION CHANGEDCSTATUS
(A_DC                 IN        VARCHAR2, 
 A_VERSION            IN        VARCHAR2, 
 A_OLD_SS             IN        VARCHAR2, 
 A_NEW_SS             IN        VARCHAR2, 
 A_OBJECT_LC          IN        VARCHAR2, 
 A_OBJECT_LC_VERSION  IN        VARCHAR2, 
 A_MODIFY_REASON      IN        VARCHAR2) 
RETURN NUMBER IS

L_LC                     VARCHAR2(2);
L_LC_VERSION             VARCHAR2(20);
L_OLD_SS                 VARCHAR2(2);
L_ALLOW_MODIFY           CHAR(1);
L_ACTIVE                 CHAR(1);
L_LOG_HS                 CHAR(1);
L_LC_SS_FROM             VARCHAR2(2);
L_TR_NO                  NUMBER(3);
L_LC_VERSION_CURSOR      INTEGER;

BEGIN

   
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_DC, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   L_LC_VERSION_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT nvl(lc_version,'''') ' ||
                   'FROM dd' || UNAPIGEN.P_DD || '.uvdc'|| 
                   ' WHERE dc = ''' || REPLACE(A_DC, '''', '''''') || '''' || 
                   ' AND version = ''' || REPLACE(A_VERSION, '''', '''''') || ''''; 
   DBMS_SQL.PARSE(L_LC_VERSION_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   DBMS_SQL.DEFINE_COLUMN(L_LC_VERSION_CURSOR, 1, L_LC_VERSION, 20);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_LC_VERSION_CURSOR);
   IF L_RESULT <> 0 THEN
      DBMS_SQL.COLUMN_VALUE(L_LC_VERSION_CURSOR, 1, L_LC_VERSION);
   END IF;
   DBMS_SQL.CLOSE_CURSOR(L_LC_VERSION_CURSOR);

   L_LC := A_OBJECT_LC;
   L_OLD_SS := A_OLD_SS; 
   L_RET_CODE := UNAPIDCP.DCTRANSITIONAUTHORISED
                 (A_DC, A_VERSION, L_LC, L_OLD_SS, A_NEW_SS, UNAPIGEN.P_USER, 
                  L_LC_SS_FROM, L_TR_NO, L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);
   IF (L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS AND
       L_RET_CODE <> UNAPIGEN.DBERR_NOTMODIFIABLE) THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;
   
   IF L_RET_CODE = UNAPIGEN.DBERR_SUCCESS THEN
      UPDATE UTDC
      SET SS = A_NEW_SS, 
          ALLOW_MODIFY = '#', 
          ACTIVE = L_ACTIVE
      WHERE DC = A_DC
      AND VERSION = A_VERSION;

      IF SQL%ROWCOUNT = 0 THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
         RAISE STPERROR;
      END IF;
   
      L_EVENT_TP := 'ObjectStatusChanged';
      L_EV_SEQ_NR := -1;
      L_RESULT := UNAPIEV.INSERTEVENT('ChangeDcStatus',
                                      UNAPIGEN.P_EVMGR_NAME, 'dc',
                                      A_DC, L_LC, L_LC_VERSION, A_NEW_SS, L_EVENT_TP,
                                      'version='||A_VERSION||'#tr_no='||L_TR_NO||
                                      '#ss_from='||L_OLD_SS||'#lc_ss_from='||L_LC_SS_FROM,
                                      L_EV_SEQ_NR);
      IF L_RESULT <>0 THEN
         UNAPIGEN.P_TXN_ERROR := L_RESULT;
      END IF;
   
      IF L_LOG_HS = '1' THEN
         INSERT INTO UTDCHS(DC, VERSION, WHO, WHO_DESCRIPTION, WHAT,
                              WHAT_DESCRIPTION, LOGDATE, WHY, TR_SEQ, EV_SEQ)
         VALUES(A_DC, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                'status of document "'||A_DC||'", version "'|| A_VERSION||'", is changed from "'||
                   UNAPIGEN.SQLSSNAME(L_OLD_SS)||'" ['||L_OLD_SS||'] to "'||
                   UNAPIGEN.SQLSSNAME(A_NEW_SS)||'" ['||A_NEW_SS||'].',
                SYSDATE, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR); 
      END IF;
   END IF;
   
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
   UNAPIAUT.UPDATEAUTHORISATIONBUFFER('dc', A_DC, A_VERSION, A_NEW_SS);

   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN 
      UNAPIGEN.LOGERROR('ChangeDcStatus', SQLERRM);
   END IF;
   IF DBMS_SQL.IS_OPEN(L_LC_VERSION_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_LC_VERSION_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'ChangeDcStatus'));
END CHANGEDCSTATUS;

FUNCTION INTERNALCHANGEDCSTATUS       
(A_DC                 IN        VARCHAR2, 
 A_VERSION            IN        VARCHAR2, 
 A_NEW_SS             IN        VARCHAR2, 
 A_MODIFY_REASON      IN        VARCHAR2) 
RETURN NUMBER IS
L_RET_CODE                    INTEGER;

L_OLD_SS                      VARCHAR2(2);
L_LC                          VARCHAR2(2);
L_LC_VERSION                  VARCHAR2(20);


L_SEQ_NR                      NUMBER;


L_TMP_RETRIESWHENINTRANSITION  INTEGER;
L_TMP_INTERVALWHENINTRANSITION NUMBER;
L_TMP_REMOTE_MODE              INTEGER;

BEGIN 

   L_TMP_REMOTE_MODE := UNAPIGEN.P_REMOTE;
   UNAPIGEN.P_REMOTE := '1'; 
   
   L_OLD_SS := NULL;
   L_LC := NULL;
   L_LC_VERSION := NULL;
   L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_DC, ' ') = ' ' OR NVL(A_NEW_SS, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIPRP.CHECKELECSIGNATURE(A_NEW_SS);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
     UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
     L_SQLERRM := 'Status '||A_NEW_SS ||' does not exist or must be signed electronically !';
     RAISE STPERROR;
   END IF;   

   
   L_TMP_RETRIESWHENINTRANSITION := UNAPIEV.P_RETRIESWHENINTRANSITION;
   L_TMP_INTERVALWHENINTRANSITION := UNAPIEV.P_INTERVALWHENINTRANSITION;
   UNAPIEV.P_RETRIESWHENINTRANSITION  := 1;
   UNAPIEV.P_INTERVALWHENINTRANSITION := 0.2;   

   
   
   IF A_NEW_SS <> '@C' THEN
      L_RET_CODE := UNAPIDCP.CHANGEDCSTATUS(A_DC, A_VERSION, L_OLD_SS, A_NEW_SS, L_LC, L_LC_VERSION, A_MODIFY_REASON);
   ELSIF A_NEW_SS = '@C' THEN
      L_RET_CODE := UNAPIDCP.CANCELDC(A_DC, A_VERSION, A_MODIFY_REASON);      
   END IF;
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SUCCESS; 
      
      L_SEQ_NR := NULL;
      L_RET_CODE := UNAPIEV.INSERTEVENT
                      (A_API_NAME          => 'InternalChangeDcStatus',
                       A_EVMGR_NAME        => UNAPIGEN.P_EVMGR_NAME,
                       A_OBJECT_TP         => 'dc',
                       A_OBJECT_ID         => A_DC,
                       A_OBJECT_LC         => NULL,
                       A_OBJECT_LC_VERSION => NULL,
                       A_OBJECT_SS         => NULL,
                       A_EV_TP             => 'ObjectUpdated',
                       A_EV_DETAILS        => 'version='||A_VERSION||'#ss_to='||A_NEW_SS,
                       A_SEQ_NR            => L_SEQ_NR);
   END IF;
   
   UNAPIEV.P_RETRIESWHENINTRANSITION  := L_TMP_RETRIESWHENINTRANSITION;
   UNAPIEV.P_INTERVALWHENINTRANSITION := L_TMP_INTERVALWHENINTRANSITION;      

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
   UNAPIAUT.UPDATEAUTHORISATIONBUFFER('dc', A_DC, A_VERSION, A_NEW_SS);

   UNAPIGEN.P_REMOTE := L_TMP_REMOTE_MODE;
   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   
   UNAPIGEN.P_REMOTE := L_TMP_REMOTE_MODE;
   IF L_TMP_RETRIESWHENINTRANSITION IS NOT NULL THEN
      UNAPIEV.P_RETRIESWHENINTRANSITION  := L_TMP_RETRIESWHENINTRANSITION;
      UNAPIEV.P_INTERVALWHENINTRANSITION := L_TMP_INTERVALWHENINTRANSITION;   
   END IF;
   IF SQLCODE <> 1 THEN 
      UNAPIGEN.LOGERROR('InternalChangeDcStatus', SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('InternalChangeDcStatus', L_SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'InternalChangeDcStatus'));
END INTERNALCHANGEDCSTATUS;

FUNCTION CANCELDC
(A_DC                 IN        VARCHAR2, 
 A_VERSION            IN        VARCHAR2, 
 A_MODIFY_REASON      IN        VARCHAR2) 
RETURN NUMBER IS

L_LC                          VARCHAR2(2);
L_LC_VERSION                  VARCHAR2(20);
L_OLD_SS                      VARCHAR2(2);
L_NEW_SS                      VARCHAR2(2);
L_ALLOW_MODIFY                CHAR(1);
L_ACTIVE                      CHAR(1);
L_LOG_HS                      CHAR(1);
L_LC_SS_FROM                  VARCHAR2(2);
L_TR_NO                       NUMBER(3);
L_SYSDATE                     VARCHAR2(40);
L_LC_VERSION_CURSOR           INTEGER;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
   
   L_LC_VERSION_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT nvl(lc_version,'''') ' ||
                   'FROM dd' || UNAPIGEN.P_DD || '.uvdc'|| 
                   ' WHERE dc = ''' || REPLACE(A_DC, '''', '''''') || '''' || 
                   ' AND version = ''' || REPLACE(A_VERSION, '''', '''''') || ''''; 
   DBMS_SQL.PARSE(L_LC_VERSION_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   DBMS_SQL.DEFINE_COLUMN(L_LC_VERSION_CURSOR, 1, L_LC_VERSION, 20);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_LC_VERSION_CURSOR);
   IF L_RESULT <> 0 THEN
      DBMS_SQL.COLUMN_VALUE(L_LC_VERSION_CURSOR, 1, L_LC_VERSION);
   END IF;
   DBMS_SQL.CLOSE_CURSOR(L_LC_VERSION_CURSOR);

   L_SYSDATE := SYSDATE;
   L_LC := NULL;
   L_OLD_SS := NULL; 
   L_NEW_SS := '@C';
   L_RET_CODE := UNAPIDCP.DCTRANSITIONAUTHORISED(A_DC, A_VERSION, L_LC, L_OLD_SS, L_NEW_SS,
                                                  UNAPIGEN.P_USER, L_LC_SS_FROM, L_TR_NO, 
                                                  L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);
                     
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS AND
      L_RET_CODE <> UNAPIGEN.DBERR_NOTAUTHORISED THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   IF L_RET_CODE = UNAPIGEN.DBERR_SUCCESS THEN
      UPDATE UTDC
      SET SS = L_NEW_SS, 
          ALLOW_MODIFY = '#', 
          ACTIVE = L_ACTIVE
      WHERE DC = A_DC
      AND VERSION = A_VERSION;
   
      IF SQL%ROWCOUNT = 0 THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
         RAISE STPERROR;
      END IF;
   
      L_EVENT_TP := 'ObjectCanceled';
      L_EV_SEQ_NR := -1;
      L_RESULT := UNAPIEV.INSERTEVENT('CancelDc', UNAPIGEN.P_EVMGR_NAME, 'dc', A_DC, L_LC, 
                                      L_LC_VERSION, L_NEW_SS, L_EVENT_TP,
                                      'version='||A_VERSION||'#tr_no='||L_TR_NO||
                                      '#ss_from='||L_OLD_SS||'#lc_ss_from='||L_LC_SS_FROM,
                                      L_EV_SEQ_NR);
      IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
         UNAPIGEN.P_TXN_ERROR := L_RESULT;
         RAISE STPERROR;
      END IF;
   
      IF L_LOG_HS = '1' THEN
         INSERT INTO UTDCHS(DC, VERSION, WHO, WHO_DESCRIPTION, WHAT,
                            WHAT_DESCRIPTION, LOGDATE, WHY, TR_SEQ, EV_SEQ)
         VALUES(A_DC, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                'Document "'||A_DC||'" , version "'|| A_VERSION||'", canceled, status is changed from "'||
                    UNAPIGEN.SQLSSNAME(L_OLD_SS)||'" ['||L_OLD_SS||'] to "'||
                    UNAPIGEN.SQLSSNAME(L_NEW_SS)||'" ['||L_NEW_SS||'].',
                SYSDATE, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR); 
      END IF;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
   UNAPIAUT.UPDATEAUTHORISATIONBUFFER('dc', A_DC, A_VERSION, '@C');
   
   RETURN(L_RET_CODE);
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN 
      UNAPIGEN.LOGERROR('CancelDc', SQLERRM);
   END IF;
   IF DBMS_SQL.IS_OPEN(L_LC_VERSION_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_LC_VERSION_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'CancelDc'));
END CANCELDC;

FUNCTION CHECKOUTDC
(A_DC                 IN        VARCHAR2, 
 A_VERSION            IN        VARCHAR2, 
 A_URL                IN        VARCHAR2, 
 A_MODIFY_REASON      IN        VARCHAR2) 
RETURN NUMBER IS

L_ALLOW_MODIFY                CHAR(1);
L_ACTIVE                      CHAR(1);
L_LOG_HS                      CHAR(1);
L_LC_SS_FROM                  VARCHAR2(2);
L_TR_NO                       NUMBER(3);
L_SYSDATE                     VARCHAR2(40);
L_LC_VERSION_CURSOR           INTEGER;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
 
   L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   IF L_RET_CODE = UNAPIGEN.DBERR_SUCCESS THEN
      UPDATE UTDC
      SET LAST_CHECKOUT_URL = A_URL, 
          LAST_CHECKOUT_BY = UNAPIGEN.P_USER, 
          CHECKED_OUT = '1',
          SS='@>', 
          (ALLOW_MODIFY,ACTIVE) = (SELECT ALLOW_MODIFY,ACTIVE FROM UTSS WHERE SS='@>')
      WHERE DC = A_DC
      AND VERSION = A_VERSION
      AND NVL(CHECKED_OUT,'0')='0';
      IF SQL%ROWCOUNT = 0 THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_ALREADYCHECKEDOUT;
         RAISE STPERROR;
      END IF;
   END IF;

   L_EVENT_TP := 'DocumentCheckedOut';
   L_EV_SEQ_NR := 0;
   INSERT INTO UTDCHS(DC, VERSION, WHO, WHO_DESCRIPTION, WHAT,
                      WHAT_DESCRIPTION, LOGDATE, WHY, TR_SEQ, EV_SEQ)
   VALUES(A_DC, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
          'Document "'||A_DC||'" , version "'|| A_VERSION||'", checked out.',
          SYSDATE, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR); 
  
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
   
   RETURN(L_RET_CODE);
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN 
      UNAPIGEN.LOGERROR('CheckoutDc', SQLERRM);
   END IF;
   IF DBMS_SQL.IS_OPEN(L_LC_VERSION_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_LC_VERSION_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'CheckoutDc'));
END CHECKOUTDC;

FUNCTION CHECKINDC
(A_DC                   IN    VARCHAR2, 
 A_VERSION              IN OUT   VARCHAR2, 
 A_NEW_MINOR_VERSION    IN    CHAR,     
 A_MODIFY_REASON        IN    VARCHAR2) 
RETURN NUMBER IS

L_LC                          VARCHAR2(2);
L_LC_VERSION                  VARCHAR2(20);
L_OLD_SS                      VARCHAR2(2);
L_NEW_SS                      VARCHAR2(2);
L_ALLOW_MODIFY                CHAR(1);
L_ACTIVE                      CHAR(1);
L_LOG_HS                      CHAR(1);
L_LC_SS_FROM                  VARCHAR2(2);
L_TR_NO                       NUMBER(3);
L_SYSDATE                     VARCHAR2(40);
L_LC_VERSION_CURSOR           INTEGER;
L_HIGHEST_VERSION             VARCHAR2(20);
L_NEW_VERSION                 VARCHAR2(20);
BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
   
   L_LC_VERSION_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT nvl(lc_version,'''') ' ||
                   'FROM dd' || UNAPIGEN.P_DD || '.uvdc'|| 
                   ' WHERE dc = ''' || REPLACE(A_DC, '''', '''''') || '''' || 
                   ' AND version = ''' || REPLACE(A_VERSION, '''', '''''') || ''''; 
   DBMS_SQL.PARSE(L_LC_VERSION_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   DBMS_SQL.DEFINE_COLUMN(L_LC_VERSION_CURSOR, 1, L_LC_VERSION, 20);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_LC_VERSION_CURSOR);
   IF L_RESULT <> 0 THEN
      DBMS_SQL.COLUMN_VALUE(L_LC_VERSION_CURSOR, 1, L_LC_VERSION);
   END IF;
   DBMS_SQL.CLOSE_CURSOR(L_LC_VERSION_CURSOR);

   L_SYSDATE := SYSDATE;
   L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
    







                     
 







      L_SQL_STRING := 'SELECT MAX(version) FROM utdc WHERE dc = :1 ' ;
      EXECUTE IMMEDIATE L_SQL_STRING INTO L_HIGHEST_VERSION USING A_DC;
      L_NEW_VERSION := L_HIGHEST_VERSION;
      IF NVL(A_NEW_MINOR_VERSION, '1') = '1' THEN
         L_RET_CODE := UNVERSION.GETNEXTMINORVERSION(L_NEW_VERSION);
      ELSE
         L_RET_CODE := UNVERSION.GETNEXTMAJORVERSION(L_NEW_VERSION);
      END IF;

   IF L_RET_CODE = UNAPIGEN.DBERR_SUCCESS THEN
      UPDATE UTDC
      SET CHECKED_OUT = '0', 
          SS='@<',
          (ALLOW_MODIFY,ACTIVE) = (SELECT ALLOW_MODIFY,ACTIVE FROM UTSS WHERE SS='@<')
      WHERE DC = A_DC
      AND VERSION = A_VERSION
      AND NVL(CHECKED_OUT,'0')='1';
      
      
      
      
      
   END IF;
   

 

























   L_EVENT_TP := 'DocumentCheckedIn';
   L_EV_SEQ_NR := 0;
   
         INSERT INTO UTDCHS(DC, VERSION, WHO, WHO_DESCRIPTION, WHAT,
                            WHAT_DESCRIPTION, LOGDATE, WHY, TR_SEQ, EV_SEQ)
         VALUES(A_DC, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                'Document "'||A_DC||'" , version "'|| A_VERSION||'", checked in.',
                SYSDATE, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR); 
    
   A_VERSION := L_NEW_VERSION;


   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
   UNAPIAUT.UPDATEAUTHORISATIONBUFFER('dc', A_DC, A_VERSION, '@C');
   
   RETURN(L_RET_CODE);
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN 
      UNAPIGEN.LOGERROR('CheckinDc', SQLERRM);
   END IF;
   IF DBMS_SQL.IS_OPEN(L_LC_VERSION_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_LC_VERSION_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'CheckinDc'));
END CHECKINDC;


FUNCTION CHANGEDCLIFECYCLE
(A_DC                 IN        VARCHAR2, 
 A_VERSION            IN        VARCHAR2, 
 A_OLD_LC             IN        VARCHAR2, 
 A_OLD_LC_VERSION     IN        VARCHAR2, 
 A_NEW_LC             IN        VARCHAR2, 
 A_NEW_LC_VERSION     IN        VARCHAR2, 
 A_MODIFY_REASON      IN        VARCHAR2) 
RETURN NUMBER IS

L_LC_VERSION_CURSOR      INTEGER;
L_COUNT_US               NUMBER;
L_COUNT_LC               NUMBER;
L_ALLOW_MODIFY           CHAR(1);
L_LOG_HS                 CHAR(1);
L_LC                     VARCHAR2(2);
L_LC_VERSION             VARCHAR2(20);
L_SS                     VARCHAR2(2);
L_ACTIVE                 CHAR(1);
L_LOCK_DC                VARCHAR2(20);

BEGIN
   
   
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_DC, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   
   SELECT DC 
   INTO L_LOCK_DC
   FROM UTDC
   WHERE DC = A_DC
   AND VERSION = A_VERSION
   FOR UPDATE;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('dc', A_DC, A_VERSION, L_LC, L_LC_VERSION, L_SS, 
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);
   IF (L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS AND
       L_RET_CODE <> UNAPIGEN.DBERR_NOTMODIFIABLE) THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;
   
   L_SS := NVL(L_SS, '@~');
   
   IF NVL(A_OLD_LC, ' ') = ' ' THEN
      
      NULL;
   ELSE
      IF A_OLD_LC <> L_LC THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OBJECTLCMATCH;
         RAISE STPERROR;
      END IF;
      
      
      
   END IF;

   SELECT COUNT(*)
   INTO L_COUNT_LC
   FROM UTLC
   WHERE VERSION = UNVERSION.P_NO_VERSION    
     AND LC = A_NEW_LC;

   IF L_COUNT_LC = 0 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOLC;
      RAISE STPERROR;
   END IF;

   IF (NVL(L_LC, ' ') <> ' ') AND (NVL(L_LC_VERSION, ' ') <> ' ') THEN 
      
      SELECT COUNT(*)
      INTO L_COUNT_US
      FROM UTLCUS
      WHERE LC = L_LC
        AND VERSION = L_LC_VERSION
        AND SS_FROM = L_SS
        AND US IN (UNAPIGEN.P_USER, '~ANY~', 'UP'||TO_CHAR(UNAPIGEN.P_CURRENT_UP));

      IF L_COUNT_US = 0 THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTAUTHORISED;
         RAISE STPERROR;
      END IF;
   END IF;

   IF UNAPIGEN.P_TXN_ERROR = UNAPIGEN.DBERR_SUCCESS THEN
      UPDATE UTDC 
      SET LC = A_NEW_LC, 
          LC_VERSION = UNVERSION.P_NO_VERSION, 
          ALLOW_MODIFY = '#', 
          SS = '' 
      WHERE DC = A_DC
      AND VERSION = A_VERSION;

      IF SQL%ROWCOUNT = 0 THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
         RAISE STPERROR;
      END IF;
   END IF;

   L_EV_SEQ_NR := -1;
   L_EVENT_TP := 'ObjectLifeCycleChanged';
   L_RESULT := UNAPIEV.INSERTEVENT('ChangeDcLifeCycle', UNAPIGEN.P_EVMGR_NAME, 'dc', A_DC, 
                                   A_NEW_LC, UNVERSION.P_NO_VERSION, '', L_EVENT_TP,    
                                   'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;
 
   IF L_LOG_HS = '1' OR A_MODIFY_REASON IS NOT NULL THEN
      INSERT INTO UTDCHS(DC, VERSION, WHO, WHO_DESCRIPTION, WHAT,
                           WHAT_DESCRIPTION, LOGDATE, WHY, TR_SEQ, EV_SEQ)
      VALUES(A_DC, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP,
             'life cycle of document "'||A_DC||'" , version "'|| A_VERSION||'", is changed from "'||
                 UNAPIGEN.SQLLCNAME(A_OLD_LC)||'" ['||A_OLD_LC||'] to "'||
                 UNAPIGEN.SQLLCNAME(A_NEW_LC)||'" ['||A_NEW_LC||'].',
             SYSDATE, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR); 
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;








   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN NO_DATA_FOUND THEN
   
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.DBERR_SUCCESS,'ChangeDcLifeCycle'));
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('ChangeDcLifeCycle',SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'ChangeDcLifeCycle'));
END CHANGEDCLIFECYCLE;

FUNCTION DCELECTRONICSIGNATURE
(A_DC                 IN        VARCHAR2, 
 A_VERSION            IN        VARCHAR2, 
 A_AUTHORISED_BY      IN        VARCHAR2, 
 A_MODIFY_REASON      IN        VARCHAR2) 
RETURN NUMBER IS

L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);
L_ALLOW_MODIFY CHAR(1);
L_ACTIVE       CHAR(1);
L_LOG_HS       CHAR(1);

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
   
   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('dc', A_DC, A_VERSION, L_LC, L_LC_VERSION, L_SS, 
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS AND
      L_RET_CODE <> UNAPIGEN.DBERR_NOTMODIFIABLE THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   IF A_AUTHORISED_BY IS NOT NULL THEN
      L_RET_CODE := UNAPIGEN.GETNEXTEVENTSEQNR(L_EV_SEQ_NR);
 
      INSERT INTO UTDCHS(DC, VERSION, WHO, WHO_DESCRIPTION, WHAT,
                           WHAT_DESCRIPTION, LOGDATE, WHY, TR_SEQ, EV_SEQ)
      VALUES(A_DC, A_VERSION, A_AUTHORISED_BY, UNAPIGEN.SQLUSERDESCRIPTION(A_AUTHORISED_BY), 
             'ElectronicSignature',
             'Last action of document "'||A_DC||'" is signed electronically.',
             SYSDATE, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR); 
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
   
   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN 
      UNAPIGEN.LOGERROR('DcElectronicSignature', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'DcElectronicSignature'));
END DCELECTRONICSIGNATURE;

FUNCTION UPDATEDCWHATDESCRIPTION
(A_DC                IN        VARCHAR2,                   
 A_VERSION           IN        VARCHAR2,                   
 A_WHAT              IN        VARCHAR2,                   
 A_WHAT_DESCRIPTION  IN        VARCHAR2,                   
 A_TR_SEQ            IN        NUMBER,                     
 A_EV_SEQ            IN        NUMBER)                     
RETURN NUMBER IS

L_LC                VARCHAR2(2);
L_LC_VERSION        VARCHAR2(20);
L_SS                VARCHAR2(2);
L_ALLOW_MODIFY      CHAR(1);
L_ACTIVE            CHAR(1);
L_LOG_HS            CHAR(1);

BEGIN








   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.P_TXN_ERROR THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_DC, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   IF NVL(A_TR_SEQ, 0) = 0 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_TRSEQ;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('dc', A_DC, A_VERSION, L_LC, L_LC_VERSION, L_SS, 
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);
   IF L_RET_CODE <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   
   UPDATE UTDCHS
   SET WHAT_DESCRIPTION = A_WHAT_DESCRIPTION
   WHERE DC = A_DC
   AND VERSION = A_VERSION
   AND TR_SEQ = A_TR_SEQ;
        
   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('UpdateDcWhatDescription', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'UpdateDcWhatDescription'));
END UPDATEDCWHATDESCRIPTION;

FUNCTION GETDCGROUPKEY
(A_DC                 OUT    UNAPIGEN.VC40_TABLE_TYPE,   
 A_VERSION            OUT    UNAPIGEN.VC20_TABLE_TYPE,   
 A_GK                 OUT    UNAPIGEN.VC20_TABLE_TYPE,   
 A_GK_VERSION         OUT    UNAPIGEN.VC20_TABLE_TYPE,   
 A_VALUE              OUT    UNAPIGEN.VC40_TABLE_TYPE,   
 A_DESCRIPTION        OUT    UNAPIGEN.VC40_TABLE_TYPE,   
 A_IS_PROTECTED       OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_VALUE_UNIQUE       OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_SINGLE_VALUED      OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_NEW_VAL_ALLOWED    OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_MANDATORY          OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_VALUE_LIST_TP      OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_DSP_ROWS           OUT    UNAPIGEN.NUM_TABLE_TYPE,    
 A_NR_OF_ROWS         IN OUT NUMBER,                     
 A_WHERE_CLAUSE       IN     VARCHAR2)                   
RETURN NUMBER IS

L_DC                             VARCHAR2(40);
L_VERSION                        VARCHAR2(20);
L_GK                             VARCHAR2(20);
L_GK_VERSION                     VARCHAR2(20);
L_VALUE                          VARCHAR2(40);
L_DESCRIPTION                    VARCHAR2(40);
L_IS_PROTECTED                   CHAR(1);
L_VALUE_UNIQUE                   CHAR(1);
L_SINGLE_VALUED                  CHAR(1);
L_NEW_VAL_ALLOWED                CHAR(1);
L_MANDATORY                      CHAR(1);
L_VALUE_LIST_TP                  CHAR(1);
L_DSP_ROWS                       NUMBER(3);
L_BIND_DC_SELECTION              BOOLEAN;
L_BIND_FIXED_DC_FLAG             BOOLEAN;
L_LENGTH                         INTEGER;
L_GKDEF_REC                      UNAPIGK.GKDEFINITIONREC;
L_TEMP_RET_CODE                  INTEGER;

BEGIN
   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;
 
   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'ORDER BY gk.dc, gk.version, gk.gkseq';
   ELSIF A_WHERE_CLAUSE = 'SELECTION' THEN
      IF UNAPIDC.P_SELECTION_CLAUSE IS NOT NULL THEN 
         IF INSTR(UPPER(UNAPIDC.P_SELECTION_CLAUSE), 'WHERE') <> 0 THEN       
            L_WHERE_CLAUSE := ','||UNAPIDC.P_SELECTION_CLAUSE|| 
                              ' AND a.version = gk.version AND a.dc = gk.dc ORDER BY gk.dc, gk.version, gk.gkseq'; 
         ELSE
            L_WHERE_CLAUSE := ','||UNAPIDC.P_SELECTION_CLAUSE|| 
                              ' WHERE a.version = gk.version AND a.dc = gk.dc ORDER BY gk.dc, gk.version, gk.gkseq'; 
         END IF;
         L_BIND_DC_SELECTION := TRUE;
      ELSE
         L_WHERE_CLAUSE := 'ORDER BY gk.dc, gk.version, gk.gkseq'; 
      END IF;      
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_BIND_FIXED_DC_FLAG := TRUE;
      L_WHERE_CLAUSE := ', dd'||UNAPIGEN.P_DD||'.uvdc dc WHERE dc.version_is_current = ''1'' '||
                        'AND dc.version = gk.version '||
                        'AND dc.dc = gk.dc '||
                        'AND gk.dc = :dc_val ORDER BY gk.gkseq';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;
 
   IF NOT DBMS_SQL.IS_OPEN(P_DCGK_CURSOR) THEN
      
      L_TEMP_RET_CODE := UNAPIGK.INITGROUPKEYDEFBUFFER('dc');
      IF L_TEMP_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         RAISE_APPLICATION_ERROR(-20000, 'InitGroupKeyDefBuffer failed with ret_code='||L_TEMP_RET_CODE||' for a_gk_tp=dc');   
      END IF;
      P_DCGK_CURSOR := DBMS_SQL.OPEN_CURSOR;
      L_SQL_STRING := 'SELECT gk.dc, gk.version, gk.gk, gk.gk_version, gk.value ' ||
                      'FROM dd'|| UNAPIGEN.P_DD ||'.uvdcgk gk '|| L_WHERE_CLAUSE;
 
      DBMS_SQL.PARSE(P_DCGK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      IF L_BIND_DC_SELECTION THEN
         FOR L_X IN 1..UNAPIDC.P_SELECTION_VAL_TAB.COUNT() LOOP
            DBMS_SQL.BIND_VARIABLE(P_DCGK_CURSOR, ':col_val'||L_X , UNAPIDC.P_SELECTION_VAL_TAB(L_X)); 
         END LOOP;
      ELSIF L_BIND_FIXED_DC_FLAG THEN
         DBMS_SQL.BIND_VARIABLE(P_DCGK_CURSOR, ':dc_val' , A_WHERE_CLAUSE); 
      END IF;
      DBMS_SQL.DEFINE_COLUMN(P_DCGK_CURSOR, 1, L_DC, 40);
      DBMS_SQL.DEFINE_COLUMN(P_DCGK_CURSOR, 2, L_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(P_DCGK_CURSOR, 3, L_GK, 20);
      DBMS_SQL.DEFINE_COLUMN(P_DCGK_CURSOR, 4, L_GK_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(P_DCGK_CURSOR, 5, L_VALUE, 40);
      L_RESULT := DBMS_SQL.EXECUTE(P_DCGK_CURSOR);
   END IF;
   
   L_RESULT := DBMS_SQL.FETCH_ROWS(P_DCGK_CURSOR);
   L_FETCHED_ROWS := 0;
 
   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;
 
      DBMS_SQL.COLUMN_VALUE(P_DCGK_CURSOR, 1, L_DC);
      DBMS_SQL.COLUMN_VALUE(P_DCGK_CURSOR, 2, L_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_DCGK_CURSOR, 3, L_GK);
      DBMS_SQL.COLUMN_VALUE(P_DCGK_CURSOR, 4, L_GK_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_DCGK_CURSOR, 5, L_VALUE);
 
      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
 
      A_DC(L_FETCHED_ROWS) := L_DC;
      A_VERSION(L_FETCHED_ROWS) := L_VERSION;
      A_GK(L_FETCHED_ROWS) := L_GK;
      A_GK_VERSION(L_FETCHED_ROWS) := L_GK_VERSION;
      A_VALUE(L_FETCHED_ROWS) := L_VALUE;
  
      
      BEGIN
         L_GKDEF_REC := UNAPIGK.P_GK_DEF_BUFFER(L_GK);
         A_DESCRIPTION(L_FETCHED_ROWS) := L_GKDEF_REC.DESCRIPTION;
         A_IS_PROTECTED(L_FETCHED_ROWS) := L_GKDEF_REC.IS_PROTECTED;
         A_VALUE_UNIQUE(L_FETCHED_ROWS) := L_GKDEF_REC.VALUE_UNIQUE;
         A_SINGLE_VALUED(L_FETCHED_ROWS) := L_GKDEF_REC.SINGLE_VALUED;
         A_NEW_VAL_ALLOWED(L_FETCHED_ROWS) := L_GKDEF_REC.NEW_VAL_ALLOWED;
         A_MANDATORY(L_FETCHED_ROWS) := L_GKDEF_REC.MANDATORY;
         A_VALUE_LIST_TP(L_FETCHED_ROWS) := L_GKDEF_REC.VALUE_LIST_TP;
         A_DSP_ROWS(L_FETCHED_ROWS) := L_GKDEF_REC.DSP_ROWS;
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
         
         
         
         A_DESCRIPTION(L_FETCHED_ROWS)     := L_GK;
         A_IS_PROTECTED(L_FETCHED_ROWS)    := '1';
         A_VALUE_UNIQUE(L_FETCHED_ROWS)    := '0';
         A_SINGLE_VALUED(L_FETCHED_ROWS)   := '1';
         A_NEW_VAL_ALLOWED(L_FETCHED_ROWS) := '1';
         A_MANDATORY(L_FETCHED_ROWS)       := '0';
         A_VALUE_LIST_TP(L_FETCHED_ROWS)   := 'F';
         A_DSP_ROWS(L_FETCHED_ROWS)        := 10;      
      END;
      
      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_DCGK_CURSOR);
      END IF;
   END LOOP;
 
   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
      DBMS_SQL.CLOSE_CURSOR(P_DCGK_CURSOR);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      DBMS_SQL.CLOSE_CURSOR(P_DCGK_CURSOR);
   ELSE   
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;
 
   IF A_WHERE_CLAUSE <> 'SELECTION' AND DBMS_SQL.IS_OPEN(P_DCGK_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(P_DCGK_CURSOR);
   END IF;

   IF NOT DBMS_SQL.IS_OPEN(P_DCGK_CURSOR) THEN
      L_TEMP_RET_CODE := UNAPIGK.CLOSEGROUPKEYDEFBUFFER('dc');
      IF L_TEMP_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         RAISE_APPLICATION_ERROR(-20000, 'CloseGroupKeyDefBuffer failed with ret_code='||L_TEMP_RET_CODE||' for a_gk_tp=dc');   
      END IF;
   END IF;
 
   RETURN(L_RET_CODE);

EXCEPTION
  WHEN OTHERS THEN
     L_SQLERRM := SQLERRM;
     UNAPIGEN.U4ROLLBACK;
     INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, API_NAME, ERROR_MSG)
     VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, SYSDATE,
             'GetDcGroupKey', L_SQLERRM);
     UNAPIGEN.U4COMMIT;
      L_LENGTH := 200;
      FOR L_X IN 1..10 LOOP
         IF ( LENGTH(L_SQL_STRING) > ((L_LENGTH*(L_X-1))+1) ) THEN
            INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
            VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                   'SelectDocument', '(SQL)'||SUBSTR(L_SQL_STRING, (L_LENGTH*(L_X-1))+1, L_LENGTH));             
         ELSE
            EXIT;
         END IF;
      END LOOP;            
      UNAPIGEN.U4COMMIT;
     IF DBMS_SQL.IS_OPEN (P_DCGK_CURSOR) THEN
        DBMS_SQL.CLOSE_CURSOR (P_DCGK_CURSOR);
     END IF;
      L_RET_CODE := UNAPIGK.CLOSEGROUPKEYDEFBUFFER('dc');
      
     RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETDCGROUPKEY;

FUNCTION SAVEDCGROUPKEY
(A_DC                 IN       VARCHAR2,                   
 A_VERSION            IN       VARCHAR2,                   
 A_GK                 IN       UNAPIGEN.VC20_TABLE_TYPE,   
 A_GK_VERSION         IN OUT   UNAPIGEN.VC20_TABLE_TYPE,   
 A_VALUE              IN       UNAPIGEN.VC40_TABLE_TYPE,   
 A_NR_OF_ROWS         IN       NUMBER,                     
 A_MODIFY_REASON      IN       VARCHAR2)                   
RETURN NUMBER IS

L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);
L_LOG_HS       CHAR(1);
L_ALLOW_MODIFY CHAR(1);
L_ACTIVE       CHAR(1);
L_DC_CURSOR    NUMBER;
L_LAST_SEQ     INTEGER;
L_GK_HANDLE    BOOLEAN_TABLE_TYPE;
L_GK_FOUND     BOOLEAN;

TABLE_DOES_NOT_EXIST EXCEPTION;
PRAGMA EXCEPTION_INIT (TABLE_DOES_NOT_EXIST, -942);


CURSOR L_GK_CURSOR IS
   SELECT GK, GK_VERSION, VALUE, GKSEQ
   FROM UTDCGK
   WHERE DC = A_DC
     AND VERSION = A_VERSION
   ORDER BY GKSEQ;

BEGIN
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_DC, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      IF NVL(A_GK(L_SEQ_NO), ' ') = ' ' THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
      END IF;
      L_GK_HANDLE(L_SEQ_NO) := TRUE;
   END LOOP;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('dc', A_DC, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTDC
   SET ALLOW_MODIFY = '#'
   WHERE DC = A_DC
     AND VERSION = A_VERSION;

   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR ;
   END IF;

   L_LAST_SEQ := 499;
   L_DC_CURSOR := DBMS_SQL.OPEN_CURSOR;
   FOR L_DCGK IN L_GK_CURSOR LOOP
      L_GK_FOUND := FALSE;
      FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
         
         IF L_DCGK.GK = A_GK(L_SEQ_NO) AND
            ( (L_DCGK.VALUE = A_VALUE(L_SEQ_NO)) OR
              (L_DCGK.VALUE IS NULL AND A_VALUE(L_SEQ_NO) IS NULL)) THEN
            L_GK_HANDLE(L_SEQ_NO) := FALSE;
            L_GK_FOUND := TRUE;
            EXIT;
         END IF;
      END LOOP;

      IF NOT L_GK_FOUND THEN
         
         DELETE FROM UTDCGK
         WHERE DC = A_DC
           AND VERSION = A_VERSION
           AND GK = L_DCGK.GK
           AND VALUE = L_DCGK.VALUE;

         
         IF L_DCGK.VALUE IS NULL THEN
            DELETE FROM UTDCGK
            WHERE DC = A_DC
              AND VERSION = A_VERSION
              AND GK = L_DCGK.GK
              AND VALUE IS NULL;
         END IF;            

         L_SQL_STRING := 'DELETE FROM utdcgk' || L_DCGK.GK ||
                         ' WHERE dc = ''' || REPLACE(A_DC, '''', '''''') || ''' AND ' || 
                         ' version = ''' || REPLACE(A_VERSION, '''', '''''') || ''' AND ' || 
                         L_DCGK.GK || '='''|| REPLACE(L_DCGK.VALUE, '''', '''''') ||''''; 
         BEGIN
            DBMS_SQL.PARSE(L_DC_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
            L_RESULT := DBMS_SQL.EXECUTE(L_DC_CURSOR);
         EXCEPTION
         WHEN TABLE_DOES_NOT_EXIST THEN
            
            
            NULL;
         END;
      ELSE
         L_LAST_SEQ := L_DCGK.GKSEQ;
      END IF;
   END LOOP;

   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      IF L_GK_HANDLE(L_SEQ_NO) THEN
         IF NVL(A_VALUE(L_SEQ_NO), ' ') <> ' ' THEN
            L_SQL_STRING := 'INSERT INTO utdcgk' || A_GK(L_SEQ_NO) ||
                            '('||A_GK(L_SEQ_NO)||', dc, version)'||
                            ' VALUES(''' || REPLACE(A_VALUE(L_SEQ_NO), '''', '''''') || 
                            ''',''' || REPLACE(A_DC, '''', '''''') ||  
                            ''',''' || REPLACE(A_VERSION, '''', '''''') || ''')'; 
            BEGIN
               DBMS_SQL.PARSE(L_DC_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
               L_RESULT := DBMS_SQL.EXECUTE(L_DC_CURSOR);
            EXCEPTION
            WHEN TABLE_DOES_NOT_EXIST THEN
               
               
               NULL;
            END;
         END IF;
         
         L_LAST_SEQ := L_LAST_SEQ + 1;

         
         INSERT INTO UTDCGK (DC, VERSION, GK, GK_VERSION, GKSEQ, VALUE)
         VALUES(A_DC, A_VERSION, A_GK(L_SEQ_NO), NULL, L_LAST_SEQ, A_VALUE(L_SEQ_NO));
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_DC_CURSOR);

   L_EV_SEQ_NR := -1;
   L_EVENT_TP := 'UsedObjectsUpdated';
   L_RESULT := UNAPIEV.INSERTEVENT('SaveDcGroupKey', UNAPIGEN.P_EVMGR_NAME, 'dc', A_DC,
                                   L_LC, L_LC_VERSION, L_SS, L_EVENT_TP, 'version='||A_VERSION,
                                   L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF L_LOG_HS = '1' THEN
      INSERT INTO UTDCHS (DC, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                          WHAT_DESCRIPTION, LOGDATE, WHY, TR_SEQ, EV_SEQ)
      VALUES (A_DC, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
              'document "'||A_DC||'", version "'|| A_VERSION||'", group keys are updated.', SYSDATE, A_MODIFY_REASON, 
              UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
   IF DBMS_SQL.IS_OPEN (L_DC_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_DC_CURSOR);
   END IF;
   UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UNIQUEGK;
   
   
   L_RESULT := UNAPIGEN.ENDTXN; 
   RETURN(UNAPIGEN.P_TXN_ERROR);
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveDcGroupKey', SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('SaveDcGroupKey', L_SQLERRM);
   END IF;
   IF DBMS_SQL.IS_OPEN (L_DC_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_DC_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveDcGroupKey'));
END SAVEDCGROUPKEY;

FUNCTION SAVE1DCGROUPKEY
(A_DC                 IN       VARCHAR2,                   
 A_VERSION            IN       VARCHAR2,                   
 A_GK                 IN       VARCHAR2,                   
 A_GK_VERSION         IN OUT   VARCHAR2,                   
 A_VALUE              IN       UNAPIGEN.VC40_TABLE_TYPE,   
 A_NR_OF_ROWS         IN       NUMBER,                     
 A_MODIFY_REASON      IN       VARCHAR2)                   
RETURN NUMBER IS

L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);
L_LOG_HS       CHAR(1);
L_ALLOW_MODIFY CHAR(1);
L_ACTIVE       CHAR(1);
L_DC_CURSOR    NUMBER;
L_LAST_SEQ     INTEGER;
L_GK_HANDLE    BOOLEAN_TABLE_TYPE;
L_GK_FOUND     BOOLEAN;

TABLE_DOES_NOT_EXIST EXCEPTION;
PRAGMA EXCEPTION_INIT (TABLE_DOES_NOT_EXIST, -942);


CURSOR L_GK_CURSOR IS
   SELECT VALUE, GKSEQ
   FROM UTDCGK
   WHERE DC = A_DC
     AND VERSION = A_VERSION
     AND GK = A_GK
   ORDER BY GKSEQ;

BEGIN
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_DC, ' ') = ' ' OR NVL(A_GK, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      L_GK_HANDLE(L_SEQ_NO) := TRUE;
   END LOOP;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('dc', A_DC, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTDC
   SET ALLOW_MODIFY = '#'
   WHERE DC = A_DC
     AND VERSION = A_VERSION;

   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR ;
   END IF;

   L_LAST_SEQ := 499;
   L_DC_CURSOR := DBMS_SQL.OPEN_CURSOR;
   FOR L_DCGK IN L_GK_CURSOR LOOP
      L_GK_FOUND := FALSE;
      FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
         IF L_DCGK.VALUE = A_VALUE(L_SEQ_NO) OR
            (L_DCGK.VALUE IS NULL AND A_VALUE(L_SEQ_NO) IS NULL) THEN
            L_GK_HANDLE(L_SEQ_NO) := FALSE;
            L_GK_FOUND := TRUE;
            EXIT;
         END IF;
      END LOOP;

      IF NOT L_GK_FOUND THEN
         DELETE FROM UTDCGK
         WHERE DC = A_DC
           AND VERSION = A_VERSION
           AND GK = A_GK
           AND VALUE = L_DCGK.VALUE;

         IF L_DCGK.VALUE IS NULL THEN
            DELETE FROM UTDCGK
            WHERE DC = A_DC
              AND VERSION = A_VERSION
              AND GK = A_GK
              AND VALUE IS NULL;
         END IF;            

         L_SQL_STRING := 'DELETE FROM utdcgk' || A_GK ||
                         ' WHERE dc = ''' || REPLACE(A_DC, '''', '''''') || ''' AND ' || 
                         ' version = ''' || REPLACE(A_VERSION, '''', '''''') || ''' AND ' || 
                         A_GK || '='''|| REPLACE(L_DCGK.VALUE, '''', '''''') ||''''; 
         BEGIN
            DBMS_SQL.PARSE(L_DC_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
            L_RESULT := DBMS_SQL.EXECUTE(L_DC_CURSOR);
         EXCEPTION
         WHEN TABLE_DOES_NOT_EXIST THEN
            
            
            NULL;
         END;
      ELSE      
         L_LAST_SEQ := L_DCGK.GKSEQ;
      END IF;
   END LOOP;

   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      IF L_GK_HANDLE(L_SEQ_NO) THEN
         IF NVL(A_VALUE(L_SEQ_NO), ' ') <> ' ' THEN
            L_SQL_STRING := 'INSERT INTO utdcgk' || A_GK ||
                            '('||A_GK||', dc, version)'||
                            ' VALUES(''' || REPLACE(A_VALUE(L_SEQ_NO), '''', '''''') || 
                            ''',''' || REPLACE(A_DC, '''', '''''') ||  
                            ''',''' || REPLACE(A_VERSION, '''', '''''') || ''')'; 
            BEGIN
               DBMS_SQL.PARSE(L_DC_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
               L_RESULT := DBMS_SQL.EXECUTE(L_DC_CURSOR);
            EXCEPTION
            WHEN TABLE_DOES_NOT_EXIST THEN
               
               
               NULL;
            END;
         END IF;

         L_LAST_SEQ := L_LAST_SEQ+1;

         INSERT INTO UTDCGK (DC, VERSION, GK, GK_VERSION, GKSEQ, VALUE)
         VALUES(A_DC, A_VERSION, A_GK, NULL, L_LAST_SEQ, A_VALUE(L_SEQ_NO));
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_DC_CURSOR);

   L_EV_SEQ_NR := -1;
   L_EVENT_TP := 'DcGroupKeyUpdated';
   L_RESULT := UNAPIEV.INSERTEVENT('Save1DcGroupKey', UNAPIGEN.P_EVMGR_NAME, 'dc', A_DC,
                                   L_LC, L_LC_VERSION, L_SS, L_EVENT_TP, 
                                   'version='||A_VERSION||'#gk='||A_GK||'#gk_version='||A_GK_VERSION,
                                   L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF L_LOG_HS = '1' THEN
      INSERT INTO UTDCHS (DC, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                          WHAT_DESCRIPTION, LOGDATE, WHY, TR_SEQ, EV_SEQ)
      VALUES (A_DC, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
              'document "'||A_DC||'", version "'|| A_VERSION||'", group key "'||A_GK||'" is created or updated.', SYSDATE, 
              A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
   IF DBMS_SQL.IS_OPEN (L_DC_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_DC_CURSOR);
   END IF;
   UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UNIQUEGK;
   
    UPDATE UTDC
      SET ALLOW_MODIFY = '1' 
    WHERE DC = A_DC
    AND VERSION = A_VERSION;
   
   
   L_RESULT := UNAPIGEN.ENDTXN; 
   RETURN(UNAPIGEN.P_TXN_ERROR);
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('Save1DcGroupKey', SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('Save1DcGroupKey', L_SQLERRM);
   END IF;
   IF DBMS_SQL.IS_OPEN (L_DC_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_DC_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'Save1DcGroupKey'));
END SAVE1DCGROUPKEY;

FUNCTION CHECKINDC
(A_DC                 IN       VARCHAR2,                  
 A_VERSION            OUT      VARCHAR2,                  
 A_VERSION_IS_CURRENT IN       CHAR,                      
 A_EFFECTIVE_FROM     IN       DATE,                      
 A_EFFECTIVE_TILL     IN       DATE,                      
 A_DESCRIPTION        IN       VARCHAR2,                  
 A_CREATION_DATE      IN       VARCHAR2,                  
 A_CREATED_BY         IN       VARCHAR2,                  
 A_TOOLTIP            IN       VARCHAR2,                  
 A_URL                IN       VARCHAR2,                  
 A_DATA               IN       BLOB,                      
 A_LAST_CHECKOUT_BY   IN       VARCHAR2,                  
 A_LAST_CHECKOUT_URL  IN       VARCHAR2,                  
 A_CHECKED_OUT        OUT      VARCHAR2,                  
 A_DC_CLASS           IN       VARCHAR2,                  
 A_LOG_HS             IN OUT   CHAR,                      
 A_LC                 IN OUT   VARCHAR2,                  
 A_LC_VERSION         IN OUT   VARCHAR2,                  
 A_NEW_MINOR_VERSION  IN       CHAR,                      
 A_MODIFY_REASON      IN       VARCHAR2)                  
RETURN NUMBER IS
L_DC_CURSOR   NUMBER;
L_RESULT      NUMBER;
L_VERSION     VARCHAR2(20);
L_CHECKED_OUT VARCHAR2(1);
L_NR_OF_ROWS  NUMBER;



BEGIN
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
   
   L_DC_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT NVL(MAX(version), '||UNVERSION.P_INITIAL_VERSION||') ' ||
                   'FROM dd' || UNAPIGEN.P_DD || '.uvdc'|| 
                   ' WHERE dc = :dc_val'; 
   DBMS_SQL.PARSE(L_DC_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   DBMS_SQL.DEFINE_COLUMN(L_DC_CURSOR, 1, L_VERSION, 20);
   DBMS_SQL.BIND_VARIABLE(L_DC_CURSOR,  ':dc_val' , A_DC);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_DC_CURSOR);
   DBMS_SQL.COLUMN_VALUE(L_DC_CURSOR, 1, L_VERSION);

   L_RET_CODE := CHECKINDC(A_DC,L_VERSION,A_NEW_MINOR_VERSION,A_MODIFY_REASON);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;
   
   L_CHECKED_OUT:= '0';
   
   
   L_RET_CODE := UNAPIDC.SAVEDOCUMENT(A_DC, L_VERSION, A_VERSION_IS_CURRENT, A_EFFECTIVE_FROM, A_EFFECTIVE_TILL, A_DESCRIPTION,
                                      A_CREATION_DATE, A_CREATED_BY, A_TOOLTIP, A_URL, A_DATA, A_LAST_CHECKOUT_BY, A_LAST_CHECKOUT_URL,
                                      L_CHECKED_OUT, A_DC_CLASS, A_LOG_HS, A_LC, A_LC_VERSION, A_MODIFY_REASON);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   A_CHECKED_OUT := L_CHECKED_OUT;
   A_VERSION := L_VERSION;
   
   L_NR_OF_ROWS := 1;
   L_SQL_STRING := 'UPDATE utdc SET ss=''@/'', (allow_modify, active)=(SELECT allow_modify,active FROM utss WHERE ss=''@/''), ';
   FOR I IN 1..UNAPIGEN.P_DATADOMAINS LOOP
      IF I <> UNAPIGEN.P_DATADOMAINS THEN
         L_SQL_STRING := L_SQL_STRING || 'ar'||I||'=DECODE(ar'||I||',''W'',''R'',ar'||I||'),';
      ELSE
         L_SQL_STRING := L_SQL_STRING || 'ar'||I||'=DECODE(ar'||I||',''W'',''R'',ar'||I||') ';
      END IF;

      
      
      IF LENGTH(L_SQL_STRING) > 3000 THEN
         L_SQL_STRING_TAB(L_NR_OF_ROWS) := L_SQL_STRING;
         L_NR_OF_ROWS := L_NR_OF_ROWS + 1;
         L_SQL_STRING := ' ';
      END IF;


   END LOOP;
   L_SQL_STRING := L_SQL_STRING || ' WHERE dc = :dc_val AND version <> :version_val ';
   L_SQL_STRING_TAB(L_NR_OF_ROWS) := L_SQL_STRING;
   DBMS_SQL.PARSE(L_DC_CURSOR, L_SQL_STRING_TAB, 1, L_NR_OF_ROWS, FALSE, DBMS_SQL.V7); 
   DBMS_SQL.BIND_VARIABLE(L_DC_CURSOR, ':dc_val' , A_DC);
   DBMS_SQL.BIND_VARIABLE(L_DC_CURSOR, ':version_val' , A_VERSION);
   L_RESULT := DBMS_SQL.EXECUTE(L_DC_CURSOR);
   DBMS_SQL.CLOSE_CURSOR(L_DC_CURSOR);

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
        UNAPIGEN.LOGERROR('CheckinDc', SQLERRM);
   END IF;
   IF DBMS_SQL.IS_OPEN(L_DC_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_DC_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'CheckinDc'));
END CHECKINDC;

FUNCTION UNDOCHECKOUTDC
(A_DC                   IN    VARCHAR2) 
RETURN NUMBER IS

L_LAST_CHECKOUT_BY            VARCHAR2(20);
L_DC_CURSOR                   INTEGER;
L_CHECKED_OUT                 CHAR(1);
L_VERSION                     VARCHAR2(20);

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
   
   L_DC_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT version, nvl(checked_out,''2''), last_checkout_by' ||
                   ' FROM dd' || UNAPIGEN.P_DD || '.uvdc'|| 
                   ' WHERE dc = ''' || REPLACE(A_DC, '''', '''''') || '''' || 
                   ' AND version in (SELECT MAX(version)'|| 
                   ' FROM dd' || UNAPIGEN.P_DD || '.uvdc'|| 
                   ' WHERE dc = ''' || REPLACE(A_DC, '''', '''''') || ''')'; 
   DBMS_SQL.PARSE(L_DC_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   DBMS_SQL.DEFINE_COLUMN(L_DC_CURSOR, 1, L_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN(L_DC_CURSOR, 2, L_CHECKED_OUT, 1);
   DBMS_SQL.DEFINE_COLUMN(L_DC_CURSOR, 3, L_LAST_CHECKOUT_BY, 20);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_DC_CURSOR);
   IF L_RESULT <> 0 THEN
      DBMS_SQL.COLUMN_VALUE(L_DC_CURSOR, 1, L_VERSION);
      DBMS_SQL.COLUMN_VALUE(L_DC_CURSOR, 2, L_CHECKED_OUT);
      DBMS_SQL.COLUMN_VALUE(L_DC_CURSOR, 3, L_LAST_CHECKOUT_BY);
   ELSE
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;
   DBMS_SQL.CLOSE_CURSOR(L_DC_CURSOR);


   IF L_LAST_CHECKOUT_BY = UNAPIGEN.P_USER THEN
      UPDATE UTDC
      SET CHECKED_OUT = '0',
          SS='@<',
          (ALLOW_MODIFY,ACTIVE) = (SELECT ALLOW_MODIFY,ACTIVE FROM UTSS WHERE SS='@<')
      WHERE DC = A_DC
      AND VERSION = L_VERSION
      AND NVL(CHECKED_OUT, '0') = '1';
      IF SQL%ROWCOUNT = 0 THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTCHECKEDOUT;
         RAISE STPERROR;      
      END IF;
   ELSE
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTAUTHORISED;
      RAISE STPERROR;
   END IF;
   
   L_EVENT_TP := 'UndoCheckOutDc';
   L_EV_SEQ_NR := 0;
   
         INSERT INTO UTDCHS(DC, VERSION, WHO, WHO_DESCRIPTION, WHAT,
                            WHAT_DESCRIPTION, LOGDATE, WHY, TR_SEQ, EV_SEQ)
         VALUES(A_DC, L_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                'Document "'||A_DC||'" , version "'||L_VERSION||'", undo checked out.',
                SYSDATE, 'undo checked out', UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR); 
    

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
   UNAPIAUT.UPDATEAUTHORISATIONBUFFER('dc', A_DC, L_VERSION, '@C');
   
   RETURN (UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN 
      UNAPIGEN.LOGERROR('UndoCheckOutDc', SQLERRM);
   END IF;
   IF DBMS_SQL.IS_OPEN(L_DC_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_DC_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'UndoCheckOutDc'));
END UNDOCHECKOUTDC;

FUNCTION CHECKOUTDC
(A_DC                      IN   VARCHAR2,     
 A_VERSION                 OUT  VARCHAR2,     
 A_VERSION_IS_CURRENT      OUT  CHAR,         
 A_EFFECTIVE_FROM          OUT  DATE,         
 A_EFFECTIVE_TILL          OUT  DATE,         
 A_DESCRIPTION             OUT  VARCHAR2,     
 A_CREATION_DATE           OUT  DATE,         
 A_CREATED_BY              OUT  VARCHAR2,     
 A_TOOLTIP                 OUT  VARCHAR2,     
 A_URL                     OUT  VARCHAR2,     
 A_DATA                    OUT  BLOB,         
 A_LAST_CHECKOUT_BY        OUT  VARCHAR2,     
 A_LAST_CHECKOUT_URL       IN   VARCHAR2,     
 A_CHECKED_OUT             OUT  CHAR,         
 A_DC_CLASS                OUT  VARCHAR2,     
 A_LOG_HS                  OUT  CHAR,         
 A_ALLOW_MODIFY            OUT  CHAR,         
 A_ACTIVE                  OUT  CHAR,         
 A_LC                      OUT  VARCHAR2,     
 A_LC_VERSION              OUT  VARCHAR2,     
 A_SS                      OUT  VARCHAR2,     
 A_MODIFY_REASON           IN   VARCHAR2)     
RETURN NUMBER IS

L_VERSION                  VARCHAR2(20);
L_LAST_CHECKOUT_URL        VARCHAR2(512);
BEGIN
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   
   L_SQL_STRING := 'SELECT MAX(version) FROM dd'||UNAPIGEN.P_DD||'.uvdc a where dc = '''||REPLACE(A_DC, '''', '''''')||'''';
               
   BEGIN
      EXECUTE IMMEDIATE L_SQL_STRING
      INTO L_VERSION;
   EXCEPTION
      WHEN NO_DATA_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR;
   END;
   
   L_RET_CODE := CHECKOUTDC(A_DC,L_VERSION,A_LAST_CHECKOUT_URL,A_MODIFY_REASON);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;
   
   
   L_RET_CODE := UNAPIDC.GETDOCUMENT(A_DC, L_VERSION, A_VERSION_IS_CURRENT, A_EFFECTIVE_FROM, A_EFFECTIVE_TILL, A_DESCRIPTION,
                                      A_CREATION_DATE, A_CREATED_BY, A_TOOLTIP, A_URL, A_DATA, A_LAST_CHECKOUT_BY, L_LAST_CHECKOUT_URL,
                                      A_CHECKED_OUT, A_DC_CLASS, A_LOG_HS, A_ALLOW_MODIFY, A_ACTIVE, A_LC, A_LC_VERSION, A_SS);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   A_VERSION := L_VERSION;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
        UNAPIGEN.LOGERROR('CheckoutDc', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'CheckoutDc'));
END CHECKOUTDC;
 
FUNCTION CHECKOUTDC
(A_DC                      IN   VARCHAR2,     
 A_VERSION                 OUT  VARCHAR2,     
 A_VERSION_IS_CURRENT      OUT  CHAR,         
 A_EFFECTIVE_FROM          OUT  DATE,         
 A_EFFECTIVE_TILL          OUT  DATE,         
 A_DESCRIPTION             OUT  VARCHAR2,     
 A_CREATION_DATE           OUT  DATE,         
 A_CREATED_BY              OUT  VARCHAR2,     
 A_TOOLTIP                 OUT  VARCHAR2,     
 A_URL                     OUT  VARCHAR2,     
 A_LAST_CHECKOUT_BY        OUT  VARCHAR2,     
 A_LAST_CHECKOUT_URL       IN   VARCHAR2,     
 A_CHECKED_OUT             OUT  CHAR,         
 A_DC_CLASS                OUT  VARCHAR2,     
 A_LOG_HS                  OUT  CHAR,         
 A_ALLOW_MODIFY            OUT  CHAR,         
 A_ACTIVE                  OUT  CHAR,         
 A_LC                      OUT  VARCHAR2,     
 A_LC_VERSION              OUT  VARCHAR2,     
 A_SS                      OUT  VARCHAR2,     
 A_MODIFY_REASON           IN   VARCHAR2)     
RETURN NUMBER IS



L_DATA                     BLOB;
BEGIN

   RETURN(CHECKOUTDC(A_DC, A_VERSION, A_VERSION_IS_CURRENT, A_EFFECTIVE_FROM, A_EFFECTIVE_TILL, A_DESCRIPTION,
          A_CREATION_DATE, A_CREATED_BY, A_TOOLTIP, A_URL, L_DATA, A_LAST_CHECKOUT_BY, A_LAST_CHECKOUT_URL,
          A_CHECKED_OUT, A_DC_CLASS, A_LOG_HS, A_ALLOW_MODIFY, A_ACTIVE, A_LC, A_LC_VERSION, A_SS, A_MODIFY_REASON));
END CHECKOUTDC;

END UNAPIDCP;
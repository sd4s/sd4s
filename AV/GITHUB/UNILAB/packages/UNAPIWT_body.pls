PACKAGE BODY unapiwt AS

L_SQLERRM         VARCHAR2(255);
L_SQL_STRING      VARCHAR2(2000);
L_WHERE_CLAUSE    VARCHAR2(1000);
L_EVENT_TP        UTEV.EV_TP%TYPE;
L_RET_CODE        NUMBER;
L_RESULT          NUMBER;
L_FETCHED_ROWS    NUMBER;
L_EV_SEQ_NR       NUMBER;
STPERROR          EXCEPTION;


P_WT_CURSOR            INTEGER;
P_WTROWS_CURSOR        INTEGER;
P_SELECTWT_CURSOR      INTEGER;
P_SAVEWTRW_CALLS       INTEGER; 
P_SAVEWTRW_TR_SEQ      INTEGER;
P_SELECTWTPROP_CURSOR  INTEGER;

FUNCTION GETVERSION
   RETURN VARCHAR2
IS
BEGIN
   RETURN('06.07.00.00_00.13');
EXCEPTION
   WHEN OTHERS THEN
      RETURN (NULL);
END GETVERSION;

FUNCTION GETWORKSHEETTYPELIST
(A_WT                      OUT      UNAPIGEN.VC20_TABLE_TYPE,  
 A_VERSION                 OUT      UNAPIGEN.VC20_TABLE_TYPE,  
 A_VERSION_IS_CURRENT      OUT      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_EFFECTIVE_FROM          OUT      UNAPIGEN.DATE_TABLE_TYPE,  
 A_EFFECTIVE_TILL          OUT      UNAPIGEN.DATE_TABLE_TYPE,  
 A_DESCRIPTION             OUT      UNAPIGEN.VC40_TABLE_TYPE,  
 A_SS                      OUT      UNAPIGEN.VC2_TABLE_TYPE,   
 A_NR_OF_ROWS              IN OUT   NUMBER,                    
 A_WHERE_CLAUSE            IN       VARCHAR2,                  
 A_NEXT_ROWS               IN       NUMBER)                    
RETURN NUMBER IS

L_WT                  VARCHAR2(20);
L_VERSION             VARCHAR2(20);
L_VERSION_IS_CURRENT  CHAR(1);
L_EFFECTIVE_FROM      TIMESTAMP WITH TIME ZONE;
L_EFFECTIVE_TILL      TIMESTAMP WITH TIME ZONE;
L_DESCRIPTION         VARCHAR2(40);
L_SS                  VARCHAR2(2);

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_WT_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_WT_CURSOR);
         P_WT_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_WT_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      IF P_WT_CURSOR IS NULL THEN
         P_WT_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;

      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
         L_WHERE_CLAUSE := 'WHERE active = ''1'' ORDER BY wt, version'; 
      ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
         L_WHERE_CLAUSE := 'WHERE version_is_current = ''1'' '||
                           'AND wt = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                           ''' ORDER BY wt, version';
      ELSE
         L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
      END IF;

      L_SQL_STRING := 'SELECT wt, version, nvl(version_is_current,''0''), effective_from, effective_till, '||
                      'description, ss FROM dd' ||
                      UNAPIGEN.P_DD || '.uvwt ' || L_WHERE_CLAUSE;

      DBMS_SQL.PARSE(P_WT_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

      DBMS_SQL.DEFINE_COLUMN(P_WT_CURSOR, 1, L_WT, 20);
      DBMS_SQL.DEFINE_COLUMN(P_WT_CURSOR, 2, L_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_WT_CURSOR, 3, L_VERSION_IS_CURRENT, 1);
      DBMS_SQL.DEFINE_COLUMN(P_WT_CURSOR, 4, L_EFFECTIVE_FROM);
      DBMS_SQL.DEFINE_COLUMN(P_WT_CURSOR, 5, L_EFFECTIVE_TILL);
      DBMS_SQL.DEFINE_COLUMN(P_WT_CURSOR, 6, L_DESCRIPTION, 40);
      DBMS_SQL.DEFINE_COLUMN(P_WT_CURSOR, 7, L_SS, 2);
      L_RESULT := DBMS_SQL.EXECUTE(P_WT_CURSOR);
   END IF;

   L_RESULT := DBMS_SQL.FETCH_ROWS(P_WT_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_WT_CURSOR, 1, L_WT);
      DBMS_SQL.COLUMN_VALUE(P_WT_CURSOR, 2, L_VERSION);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_WT_CURSOR, 3, L_VERSION_IS_CURRENT);
      DBMS_SQL.COLUMN_VALUE(P_WT_CURSOR, 4, L_EFFECTIVE_FROM);
      DBMS_SQL.COLUMN_VALUE(P_WT_CURSOR, 5, L_EFFECTIVE_TILL);
      DBMS_SQL.COLUMN_VALUE(P_WT_CURSOR, 6, L_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE(P_WT_CURSOR, 7, L_SS);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_WT(L_FETCHED_ROWS) := L_WT;
      A_VERSION(L_FETCHED_ROWS) := L_VERSION;
      A_VERSION_IS_CURRENT(L_FETCHED_ROWS) := L_VERSION_IS_CURRENT;
      A_EFFECTIVE_FROM(L_FETCHED_ROWS) := L_EFFECTIVE_FROM;
      A_EFFECTIVE_TILL(L_FETCHED_ROWS) := L_EFFECTIVE_TILL;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;
      A_SS(L_FETCHED_ROWS) := L_SS;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_WT_CURSOR);
      END IF;
   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_WT_CURSOR);
       P_WT_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_WT_CURSOR);
      P_WT_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME,
                          ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetWorksheetTypeList', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (P_WT_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (P_WT_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETWORKSHEETTYPELIST;

FUNCTION GETWORKSHEETTYPE
(A_WT                      OUT     UNAPIGEN.VC20_TABLE_TYPE,        
 A_VERSION                 OUT     UNAPIGEN.VC20_TABLE_TYPE,        
 A_VERSION_IS_CURRENT      OUT     UNAPIGEN.CHAR1_TABLE_TYPE,       
 A_EFFECTIVE_FROM          OUT     UNAPIGEN.DATE_TABLE_TYPE,        
 A_EFFECTIVE_TILL          OUT     UNAPIGEN.DATE_TABLE_TYPE,        
 A_DESCRIPTION             OUT     UNAPIGEN.VC40_TABLE_TYPE,        
 A_DESCRIPTION2            OUT     UNAPIGEN.VC40_TABLE_TYPE,        
 A_MIN_ROWS                OUT     UNAPIGEN.NUM_TABLE_TYPE,         
 A_MAX_ROWS                OUT     UNAPIGEN.NUM_TABLE_TYPE,         
 A_VALID_CF                OUT     UNAPIGEN.VC20_TABLE_TYPE,        
 A_DESCR_DOC               OUT     UNAPIGEN.VC40_TABLE_TYPE,        
 A_DESCR_DOC_VERSION       OUT     UNAPIGEN.VC20_TABLE_TYPE,        
 A_WS_LY                   OUT     UNAPIGEN.VC20_TABLE_TYPE,        
 A_WS_UC                   OUT     UNAPIGEN.VC20_TABLE_TYPE,        
 A_WS_UC_VERSION           OUT     UNAPIGEN.VC20_TABLE_TYPE,        
 A_WS_LC                   OUT     UNAPIGEN.VC2_TABLE_TYPE,         
 A_WS_LC_VERSION           OUT     UNAPIGEN.VC20_TABLE_TYPE,        
 A_INHERIT_AU              OUT     UNAPIGEN.CHAR1_TABLE_TYPE,       
 A_WT_CLASS                OUT     UNAPIGEN.VC2_TABLE_TYPE,         
 A_LOG_HS                  OUT     UNAPIGEN.CHAR1_TABLE_TYPE,       
 A_ALLOW_MODIFY            OUT     UNAPIGEN.CHAR1_TABLE_TYPE,       
 A_ACTIVE                  OUT     UNAPIGEN.CHAR1_TABLE_TYPE,       
 A_LC                      OUT     UNAPIGEN.VC2_TABLE_TYPE,         
 A_LC_VERSION              OUT     UNAPIGEN.VC20_TABLE_TYPE,        
 A_SS                      OUT     UNAPIGEN.VC2_TABLE_TYPE,         
 A_NR_OF_ROWS              IN OUT  NUMBER,                          
 A_WHERE_CLAUSE            IN      VARCHAR2)                        
RETURN NUMBER IS

L_WT                 VARCHAR2(20);
L_VERSION            VARCHAR2(20);
L_VERSION_IS_CURRENT CHAR(1);
L_EFFECTIVE_FROM     TIMESTAMP WITH TIME ZONE;
L_EFFECTIVE_TILL     TIMESTAMP WITH TIME ZONE;
L_DESCRIPTION        VARCHAR2(40);
L_DESCRIPTION2       VARCHAR2(40);
L_MIN_ROWS           NUMBER(4);
L_MAX_ROWS           NUMBER(4);
L_VALID_CF           VARCHAR2(20);
L_DESCR_DOC          VARCHAR2(40);
L_DESCR_DOC_VERSION  VARCHAR2(20);
L_WS_LY              VARCHAR2(20);
L_WS_UC              VARCHAR2(20);
L_WS_UC_VERSION      VARCHAR2(20);
L_WS_LC              VARCHAR2(2);
L_WS_LC_VERSION      VARCHAR2(20);
L_INHERIT_AU         CHAR(1);
L_WT_CLASS           VARCHAR2(2);
L_LOG_HS             CHAR(1);
L_ALLOW_MODIFY       CHAR(1);
L_ACTIVE             CHAR(1);
L_LC                 VARCHAR2(2);
L_LC_VERSION         VARCHAR2(20);
L_SS                 VARCHAR2(2);
L_WT_CURSOR          INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'ORDER BY wt, version'; 
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := 'WHERE version_is_current = ''1'' '||
                        'AND wt = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                        ''' ORDER BY wt, version';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_WT_CURSOR := DBMS_SQL.OPEN_CURSOR;

   L_SQL_STRING := 'SELECT wt, version, nvl(version_is_current,''0''), effective_from, effective_till, '||
                   'description, description2, min_rows, max_rows, valid_cf, descr_doc, ' ||
                   'descr_doc_version, ws_ly, ws_uc, ws_uc_version, ws_lc, ws_lc_version, inherit_au, '||
                   'wt_class, log_hs, allow_modify, active, lc, lc_version, ss ' ||
                   'FROM dd' || UNAPIGEN.P_DD || '.uvwt ' || L_WHERE_CLAUSE;
   DBMS_SQL.PARSE(L_WT_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_WT_CURSOR, 1, L_WT, 20);
   DBMS_SQL.DEFINE_COLUMN(L_WT_CURSOR, 2, L_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_WT_CURSOR, 3, L_VERSION_IS_CURRENT, 1);
   DBMS_SQL.DEFINE_COLUMN(L_WT_CURSOR, 4, L_EFFECTIVE_FROM);
   DBMS_SQL.DEFINE_COLUMN(L_WT_CURSOR, 5, L_EFFECTIVE_TILL);
   DBMS_SQL.DEFINE_COLUMN(L_WT_CURSOR, 6, L_DESCRIPTION, 40);
   DBMS_SQL.DEFINE_COLUMN(L_WT_CURSOR, 7, L_DESCRIPTION2, 40);
   DBMS_SQL.DEFINE_COLUMN(L_WT_CURSOR, 8, L_MIN_ROWS);
   DBMS_SQL.DEFINE_COLUMN(L_WT_CURSOR, 9, L_MAX_ROWS);
   DBMS_SQL.DEFINE_COLUMN(L_WT_CURSOR, 10, L_VALID_CF, 20);
   DBMS_SQL.DEFINE_COLUMN(L_WT_CURSOR, 11, L_DESCR_DOC, 40);
   DBMS_SQL.DEFINE_COLUMN(L_WT_CURSOR, 12, L_DESCR_DOC_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN(L_WT_CURSOR, 13, L_WS_LY, 20);
   DBMS_SQL.DEFINE_COLUMN(L_WT_CURSOR, 14, L_WS_UC, 20);
   DBMS_SQL.DEFINE_COLUMN(L_WT_CURSOR, 15, L_WS_UC_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN(L_WT_CURSOR, 16, L_WS_LC, 2);
   DBMS_SQL.DEFINE_COLUMN(L_WT_CURSOR, 17, L_WS_LC_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_WT_CURSOR, 18, L_INHERIT_AU, 1);
   DBMS_SQL.DEFINE_COLUMN(L_WT_CURSOR, 19, L_WT_CLASS, 2);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_WT_CURSOR, 20, L_LOG_HS, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_WT_CURSOR, 21, L_ALLOW_MODIFY, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_WT_CURSOR, 22, L_ACTIVE, 1);
   DBMS_SQL.DEFINE_COLUMN(L_WT_CURSOR, 23, L_LC, 2);
   DBMS_SQL.DEFINE_COLUMN(L_WT_CURSOR, 24, L_LC_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN(L_WT_CURSOR, 25, L_SS, 2);

   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_WT_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_WT_CURSOR, 1, L_WT);
      DBMS_SQL.COLUMN_VALUE(L_WT_CURSOR, 2, L_VERSION);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_WT_CURSOR, 3, L_VERSION_IS_CURRENT);
      DBMS_SQL.COLUMN_VALUE(L_WT_CURSOR, 4, L_EFFECTIVE_FROM);
      DBMS_SQL.COLUMN_VALUE(L_WT_CURSOR, 5, L_EFFECTIVE_TILL);
      DBMS_SQL.COLUMN_VALUE(L_WT_CURSOR, 6, L_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE(L_WT_CURSOR, 7, L_DESCRIPTION2);
      DBMS_SQL.COLUMN_VALUE(L_WT_CURSOR, 8, L_MIN_ROWS);
      DBMS_SQL.COLUMN_VALUE(L_WT_CURSOR, 9, L_MAX_ROWS);
      DBMS_SQL.COLUMN_VALUE(L_WT_CURSOR, 10, L_VALID_CF);
      DBMS_SQL.COLUMN_VALUE(L_WT_CURSOR, 11, L_DESCR_DOC);
      DBMS_SQL.COLUMN_VALUE(L_WT_CURSOR, 12, L_DESCR_DOC_VERSION);
      DBMS_SQL.COLUMN_VALUE(L_WT_CURSOR, 13, L_WS_LY);
      DBMS_SQL.COLUMN_VALUE(L_WT_CURSOR, 14, L_WS_UC);
      DBMS_SQL.COLUMN_VALUE(L_WT_CURSOR, 15, L_WS_UC_VERSION);
      DBMS_SQL.COLUMN_VALUE(L_WT_CURSOR, 16, L_WS_LC);
      DBMS_SQL.COLUMN_VALUE(L_WT_CURSOR, 17, L_WS_LC_VERSION);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_WT_CURSOR, 18, L_INHERIT_AU);
      DBMS_SQL.COLUMN_VALUE(L_WT_CURSOR, 19, L_WT_CLASS);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_WT_CURSOR, 20, L_LOG_HS);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_WT_CURSOR, 21, L_ALLOW_MODIFY);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_WT_CURSOR, 22, L_ACTIVE);
      DBMS_SQL.COLUMN_VALUE(L_WT_CURSOR, 23, L_LC);
      DBMS_SQL.COLUMN_VALUE(L_WT_CURSOR, 24, L_LC_VERSION);
      DBMS_SQL.COLUMN_VALUE(L_WT_CURSOR, 25, L_SS);
   
      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_WT(L_FETCHED_ROWS) := L_WT;
      A_VERSION(L_FETCHED_ROWS) := L_VERSION;
      A_VERSION_IS_CURRENT(L_FETCHED_ROWS) := L_VERSION_IS_CURRENT;
      A_EFFECTIVE_FROM(L_FETCHED_ROWS) := L_EFFECTIVE_FROM;
      A_EFFECTIVE_TILL(L_FETCHED_ROWS) := L_EFFECTIVE_TILL;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;
      A_DESCRIPTION2(L_FETCHED_ROWS) := L_DESCRIPTION2;
      A_MIN_ROWS(L_FETCHED_ROWS) := L_MIN_ROWS;
      A_MAX_ROWS(L_FETCHED_ROWS) := L_MAX_ROWS;
      A_VALID_CF(L_FETCHED_ROWS) := L_VALID_CF;
      A_DESCR_DOC(L_FETCHED_ROWS) := L_DESCR_DOC;
      A_DESCR_DOC_VERSION(L_FETCHED_ROWS) := L_DESCR_DOC_VERSION;
      A_WS_LY(L_FETCHED_ROWS) := L_WS_LY;
      A_WS_UC(L_FETCHED_ROWS) := L_WS_UC;
      A_WS_UC_VERSION(L_FETCHED_ROWS) := L_WS_UC_VERSION;
      A_WS_LC(L_FETCHED_ROWS) := L_WS_LC;
      A_WS_LC_VERSION(L_FETCHED_ROWS) := L_WS_LC_VERSION;
      A_INHERIT_AU(L_FETCHED_ROWS) := L_INHERIT_AU;
      A_WT_CLASS(L_FETCHED_ROWS) := L_WT_CLASS;
      A_LOG_HS(L_FETCHED_ROWS) := L_LOG_HS;
      A_ALLOW_MODIFY(L_FETCHED_ROWS) := L_ALLOW_MODIFY;
      A_ACTIVE(L_FETCHED_ROWS) := L_ACTIVE;
      A_LC(L_FETCHED_ROWS) := L_LC;
      A_LC_VERSION(L_FETCHED_ROWS) := L_LC_VERSION;
      A_SS(L_FETCHED_ROWS) := L_SS;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_WT_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_WT_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetWorksheetType', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (L_WT_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_WT_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETWORKSHEETTYPE;

FUNCTION SELECTWORKSHEETTYPE
(A_COL_ID                  IN       UNAPIGEN.VC40_TABLE_TYPE,     
 A_COL_TP                  IN       UNAPIGEN.VC40_TABLE_TYPE,     
 A_COL_VALUE               IN       UNAPIGEN.VC40_TABLE_TYPE,     
 A_COL_NR_OF_ROWS          IN       NUMBER,                       
 A_WT                      OUT      UNAPIGEN.VC20_TABLE_TYPE,     
 A_VERSION                 OUT      UNAPIGEN.VC20_TABLE_TYPE,     
 A_VERSION_IS_CURRENT      OUT      UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_EFFECTIVE_FROM          OUT      UNAPIGEN.DATE_TABLE_TYPE,     
 A_EFFECTIVE_TILL          OUT      UNAPIGEN.DATE_TABLE_TYPE,     
 A_DESCRIPTION             OUT      UNAPIGEN.VC40_TABLE_TYPE,     
 A_DESCRIPTION2            OUT      UNAPIGEN.VC40_TABLE_TYPE,     
 A_MIN_ROWS                OUT      UNAPIGEN.NUM_TABLE_TYPE,      
 A_MAX_ROWS                OUT      UNAPIGEN.NUM_TABLE_TYPE,      
 A_VALID_CF                OUT      UNAPIGEN.VC20_TABLE_TYPE,     
 A_DESCR_DOC               OUT      UNAPIGEN.VC40_TABLE_TYPE,     
 A_DESCR_DOC_VERSION       OUT      UNAPIGEN.VC20_TABLE_TYPE,     
 A_WS_LY                   OUT      UNAPIGEN.VC20_TABLE_TYPE,     
 A_WS_UC                   OUT      UNAPIGEN.VC20_TABLE_TYPE,     
 A_WS_UC_VERSION           OUT      UNAPIGEN.VC20_TABLE_TYPE,     
 A_WS_LC                   OUT      UNAPIGEN.VC2_TABLE_TYPE,      
 A_WS_LC_VERSION           OUT      UNAPIGEN.VC20_TABLE_TYPE,     
 A_INHERIT_AU              OUT      UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_WT_CLASS                OUT      UNAPIGEN.VC2_TABLE_TYPE,      
 A_LOG_HS                  OUT      UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_ALLOW_MODIFY            OUT      UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_ACTIVE                  OUT      UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_LC                      OUT      UNAPIGEN.VC2_TABLE_TYPE,      
 A_LC_VERSION              OUT      UNAPIGEN.VC20_TABLE_TYPE,     
 A_SS                      OUT      UNAPIGEN.VC2_TABLE_TYPE,      
 A_NR_OF_ROWS              IN OUT   NUMBER,                       
 A_ORDER_BY_CLAUSE         IN       VARCHAR2,                     
 A_NEXT_ROWS               IN       NUMBER)                       
RETURN NUMBER IS

L_COL_OPERATOR           UNAPIGEN.VC20_TABLE_TYPE;
L_COL_ANDOR              UNAPIGEN.VC3_TABLE_TYPE;

BEGIN

   FOR L_X IN 1..A_COL_NR_OF_ROWS LOOP
       L_COL_OPERATOR(L_X) := '=';
       L_COL_ANDOR(L_X) := 'AND';
   END LOOP;

   RETURN( UNAPIWT.SELECTWORKSHEETTYPE(A_COL_ID,
                                       A_COL_TP,
                                       A_COL_VALUE,
                                       L_COL_OPERATOR,
                                       L_COL_ANDOR,
                                       A_COL_NR_OF_ROWS,
                                       A_WT,
                                       A_VERSION,
                                       A_VERSION_IS_CURRENT,
                                       A_EFFECTIVE_FROM,
                                       A_EFFECTIVE_TILL,
                                       A_DESCRIPTION,
                                       A_DESCRIPTION2,
                                       A_MIN_ROWS,
                                       A_MAX_ROWS,
                                       A_VALID_CF,
                                       A_DESCR_DOC,
                                       A_DESCR_DOC_VERSION,
                                       A_WS_LY,
                                       A_WS_UC,
                                       A_WS_UC_VERSION,
                                       A_WS_LC,
                                       A_WS_LC_VERSION,
                                       A_INHERIT_AU,
                                       A_WT_CLASS,
                                       A_LOG_HS,
                                       A_ALLOW_MODIFY,
                                       A_ACTIVE,
                                       A_LC,
                                       A_LC_VERSION,
                                       A_SS,
                                       A_NR_OF_ROWS,
                                       A_ORDER_BY_CLAUSE,
                                       A_NEXT_ROWS));              
END SELECTWORKSHEETTYPE;      

FUNCTION SELECTWORKSHEETTYPE
(A_COL_ID                  IN       UNAPIGEN.VC40_TABLE_TYPE,     
 A_COL_TP                  IN       UNAPIGEN.VC40_TABLE_TYPE,     
 A_COL_VALUE               IN       UNAPIGEN.VC40_TABLE_TYPE,     
 A_COL_OPERATOR            IN       UNAPIGEN.VC20_TABLE_TYPE,     
 A_COL_ANDOR               IN       UNAPIGEN.VC3_TABLE_TYPE,      
 A_COL_NR_OF_ROWS          IN       NUMBER,                       
 A_WT                      OUT      UNAPIGEN.VC20_TABLE_TYPE,     
 A_VERSION                 OUT      UNAPIGEN.VC20_TABLE_TYPE,     
 A_VERSION_IS_CURRENT      OUT      UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_EFFECTIVE_FROM          OUT      UNAPIGEN.DATE_TABLE_TYPE,     
 A_EFFECTIVE_TILL          OUT      UNAPIGEN.DATE_TABLE_TYPE,     
 A_DESCRIPTION             OUT      UNAPIGEN.VC40_TABLE_TYPE,     
 A_DESCRIPTION2            OUT      UNAPIGEN.VC40_TABLE_TYPE,     
 A_MIN_ROWS                OUT      UNAPIGEN.NUM_TABLE_TYPE,      
 A_MAX_ROWS                OUT      UNAPIGEN.NUM_TABLE_TYPE,      
 A_VALID_CF                OUT      UNAPIGEN.VC20_TABLE_TYPE,     
 A_DESCR_DOC               OUT      UNAPIGEN.VC40_TABLE_TYPE,     
 A_DESCR_DOC_VERSION       OUT      UNAPIGEN.VC20_TABLE_TYPE,     
 A_WS_LY                   OUT      UNAPIGEN.VC20_TABLE_TYPE,     
 A_WS_UC                   OUT      UNAPIGEN.VC20_TABLE_TYPE,     
 A_WS_UC_VERSION           OUT      UNAPIGEN.VC20_TABLE_TYPE,     
 A_WS_LC                   OUT      UNAPIGEN.VC2_TABLE_TYPE,      
 A_WS_LC_VERSION           OUT      UNAPIGEN.VC20_TABLE_TYPE,     
 A_INHERIT_AU              OUT      UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_WT_CLASS                OUT      UNAPIGEN.VC2_TABLE_TYPE,      
 A_LOG_HS                  OUT      UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_ALLOW_MODIFY            OUT      UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_ACTIVE                  OUT      UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_LC                      OUT      UNAPIGEN.VC2_TABLE_TYPE,      
 A_LC_VERSION              OUT      UNAPIGEN.VC20_TABLE_TYPE,     
 A_SS                      OUT      UNAPIGEN.VC2_TABLE_TYPE,      
 A_NR_OF_ROWS              IN OUT   NUMBER,                       
 A_ORDER_BY_CLAUSE         IN       VARCHAR2,                     
 A_NEXT_ROWS               IN       NUMBER)                       
RETURN NUMBER IS
L_WT                 VARCHAR2(20);
L_VERSION            VARCHAR2(20);
L_VERSION_IS_CURRENT CHAR(1);
L_EFFECTIVE_FROM     TIMESTAMP WITH TIME ZONE;
L_EFFECTIVE_TILL     TIMESTAMP WITH TIME ZONE;
L_DESCRIPTION        VARCHAR2(40);
L_DESCRIPTION2       VARCHAR2(40);
L_MIN_ROWS           NUMBER(4);
L_MAX_ROWS           NUMBER(4);
L_VALID_CF           VARCHAR2(20);
L_DESCR_DOC          VARCHAR2(40);
L_DESCR_DOC_VERSION  VARCHAR2(20);
L_WS_LY              VARCHAR2(20);
L_WS_UC              VARCHAR2(20);
L_WS_UC_VERSION      VARCHAR2(20);
L_WS_LC              VARCHAR2(2);
L_WS_LC_VERSION      VARCHAR2(20);
L_INHERIT_AU         CHAR(1);
L_WT_CLASS           VARCHAR2(2);
L_LOG_HS             CHAR(1);
L_ALLOW_MODIFY       CHAR(1);
L_ACTIVE             CHAR(1);
L_LC                 VARCHAR2(2);
L_LC_VERSION         VARCHAR2(20);
L_SS                 VARCHAR2(2);
L_ORDER_BY_CLAUSE     VARCHAR2(255);
L_FROM_CLAUSE         VARCHAR2(255);
L_LENGTH             INTEGER;



BEGIN
   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_SELECTWT_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_SELECTWT_CURSOR);
         P_SELECTWT_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;
   
   
   IF A_NEXT_ROWS = 1 THEN
      IF P_SELECTWT_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;
   
   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      L_SQL_STRING := 'SELECT wt, version, nvl(version_is_current,''0''), effective_from, effective_till, '||
                   'description, description2, min_rows, max_rows, valid_cf, descr_doc, ' ||
                   'descr_doc_version, ws_ly, ws_uc, ws_uc_version, ws_lc, ws_lc_version, inherit_au, '||
                   'wt_class, log_hs, allow_modify, active, lc, lc_version, ss FROM ';
      L_FROM_CLAUSE := 'dd' || UNAPIGEN.P_DD || '.uvwt a ' ;
                  
      L_WHERE_CLAUSE := ' WHERE ';
      
      FOR I IN REVERSE 1..A_COL_NR_OF_ROWS LOOP
          IF (LOWER(NVL(A_COL_ID(I),' ')) = 'version') AND (NVL(A_COL_VALUE(I),' ') = 'MAX') THEN
            L_WHERE_CLAUSE := L_WHERE_CLAUSE || '(a.wt, a.' || A_COL_ID(I) || ') ' ||
                              'IN (SELECT wt, MAX(' || A_COL_ID(I) || ') '|| 
                                  'FROM dd'|| UNAPIGEN.P_DD ||'.uvwt GROUP BY wt) '||
                              'AND ';
         ELSE
            L_WHERE_CLAUSE := L_WHERE_CLAUSE || 'a.' || A_COL_ID(I) ||
                              ' = ''' || REPLACE(A_COL_VALUE(I), '''', '''''') || ''' AND '; 
         END IF;
      END LOOP;
      IF SUBSTR(L_WHERE_CLAUSE, -4) = 'AND ' THEN
         L_WHERE_CLAUSE := SUBSTR(L_WHERE_CLAUSE, 1,
                                  LENGTH(L_WHERE_CLAUSE)-4);
      END IF;
   
      L_SQL_STRING := L_SQL_STRING || L_FROM_CLAUSE || ' ' || L_WHERE_CLAUSE ;
      P_SELECTION_CLAUSE := L_FROM_CLAUSE || ' ' || L_WHERE_CLAUSE ;

      IF NVL(A_ORDER_BY_CLAUSE, ' ') = ' ' THEN
         L_ORDER_BY_CLAUSE := ' ORDER BY a.wt, a.version';
      ELSE
         L_ORDER_BY_CLAUSE := A_ORDER_BY_CLAUSE; 
      END IF;

      L_SQL_STRING := L_SQL_STRING || L_ORDER_BY_CLAUSE;

      IF P_SELECTWT_CURSOR IS NULL THEN
         P_SELECTWT_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;
      UNAPIAUT.ADDORACLECBOHINT (L_SQL_STRING) ;
      
      DBMS_SQL.PARSE(P_SELECTWT_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

      DBMS_SQL.DEFINE_COLUMN(P_SELECTWT_CURSOR, 1, L_WT, 20);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTWT_CURSOR, 2, L_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTWT_CURSOR, 3, L_VERSION_IS_CURRENT, 1);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTWT_CURSOR, 4, L_EFFECTIVE_FROM);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTWT_CURSOR, 5, L_EFFECTIVE_TILL);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTWT_CURSOR, 6, L_DESCRIPTION, 40);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTWT_CURSOR, 7, L_DESCRIPTION2, 40);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTWT_CURSOR, 8, L_MIN_ROWS);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTWT_CURSOR, 9, L_MAX_ROWS);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTWT_CURSOR, 10, L_VALID_CF, 20);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTWT_CURSOR, 11, L_DESCR_DOC, 40);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTWT_CURSOR, 12, L_DESCR_DOC_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTWT_CURSOR, 13, L_WS_LY, 20);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTWT_CURSOR, 14, L_WS_UC, 20);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTWT_CURSOR, 15, L_WS_UC_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTWT_CURSOR, 16, L_WS_LC, 2);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTWT_CURSOR, 17, L_WS_LC_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTWT_CURSOR, 18, L_INHERIT_AU, 1);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTWT_CURSOR, 19, L_WT_CLASS, 2);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTWT_CURSOR, 20, L_LOG_HS, 1);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTWT_CURSOR, 21, L_ALLOW_MODIFY, 1);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTWT_CURSOR, 22, L_ACTIVE, 1);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTWT_CURSOR, 23, L_LC, 2);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTWT_CURSOR, 24, L_LC_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTWT_CURSOR, 25, L_SS, 2);

      L_RESULT := DBMS_SQL.EXECUTE(P_SELECTWT_CURSOR);
   END IF;
   
   L_RESULT := DBMS_SQL.FETCH_ROWS(P_SELECTWT_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;
      
      DBMS_SQL.COLUMN_VALUE(P_SELECTWT_CURSOR, 1, L_WT);
      DBMS_SQL.COLUMN_VALUE(P_SELECTWT_CURSOR, 2, L_VERSION);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTWT_CURSOR, 3, L_VERSION_IS_CURRENT);
      DBMS_SQL.COLUMN_VALUE(P_SELECTWT_CURSOR, 4, L_EFFECTIVE_FROM);
      DBMS_SQL.COLUMN_VALUE(P_SELECTWT_CURSOR, 5, L_EFFECTIVE_TILL);
      DBMS_SQL.COLUMN_VALUE(P_SELECTWT_CURSOR, 6, L_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE(P_SELECTWT_CURSOR, 7, L_DESCRIPTION2);
      DBMS_SQL.COLUMN_VALUE(P_SELECTWT_CURSOR, 8, L_MIN_ROWS);
      DBMS_SQL.COLUMN_VALUE(P_SELECTWT_CURSOR, 9, L_MAX_ROWS);
      DBMS_SQL.COLUMN_VALUE(P_SELECTWT_CURSOR, 10, L_VALID_CF);
      DBMS_SQL.COLUMN_VALUE(P_SELECTWT_CURSOR, 11, L_DESCR_DOC);
      DBMS_SQL.COLUMN_VALUE(P_SELECTWT_CURSOR, 12, L_DESCR_DOC_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_SELECTWT_CURSOR, 13, L_WS_LY);
      DBMS_SQL.COLUMN_VALUE(P_SELECTWT_CURSOR, 14, L_WS_UC);
      DBMS_SQL.COLUMN_VALUE(P_SELECTWT_CURSOR, 15, L_WS_UC_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_SELECTWT_CURSOR, 16, L_WS_LC);
      DBMS_SQL.COLUMN_VALUE(P_SELECTWT_CURSOR, 17, L_WS_LC_VERSION);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTWT_CURSOR, 18, L_INHERIT_AU);
      DBMS_SQL.COLUMN_VALUE(P_SELECTWT_CURSOR, 19, L_WT_CLASS);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTWT_CURSOR, 20, L_LOG_HS);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTWT_CURSOR, 21, L_ALLOW_MODIFY);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTWT_CURSOR, 22, L_ACTIVE);
      DBMS_SQL.COLUMN_VALUE(P_SELECTWT_CURSOR, 23, L_LC);
      DBMS_SQL.COLUMN_VALUE(P_SELECTWT_CURSOR, 24, L_LC_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_SELECTWT_CURSOR, 25, L_SS);
   
      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_WT(L_FETCHED_ROWS) := L_WT;
      A_VERSION(L_FETCHED_ROWS) := L_VERSION;
      A_VERSION_IS_CURRENT(L_FETCHED_ROWS) := L_VERSION_IS_CURRENT;
      A_EFFECTIVE_FROM(L_FETCHED_ROWS) := L_EFFECTIVE_FROM;
      A_EFFECTIVE_TILL(L_FETCHED_ROWS) := L_EFFECTIVE_TILL;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;
      A_DESCRIPTION2(L_FETCHED_ROWS) := L_DESCRIPTION2;
      A_MIN_ROWS(L_FETCHED_ROWS) := L_MIN_ROWS;
      A_MAX_ROWS(L_FETCHED_ROWS) := L_MAX_ROWS;
      A_VALID_CF(L_FETCHED_ROWS) := L_VALID_CF;
      A_DESCR_DOC(L_FETCHED_ROWS) := L_DESCR_DOC;
      A_DESCR_DOC_VERSION(L_FETCHED_ROWS) := L_DESCR_DOC_VERSION;
      A_WS_LY(L_FETCHED_ROWS) := L_WS_LY;
      A_WS_UC(L_FETCHED_ROWS) := L_WS_UC;
      A_WS_UC_VERSION(L_FETCHED_ROWS) := L_WS_UC_VERSION;
      A_WS_LC(L_FETCHED_ROWS) := L_WS_LC;
      A_WS_LC_VERSION(L_FETCHED_ROWS) := L_WS_LC_VERSION;
      A_INHERIT_AU(L_FETCHED_ROWS) := L_INHERIT_AU;
      A_WT_CLASS(L_FETCHED_ROWS) := L_WT_CLASS;
      A_LOG_HS(L_FETCHED_ROWS) := L_LOG_HS;
      A_ALLOW_MODIFY(L_FETCHED_ROWS) := L_ALLOW_MODIFY;
      A_ACTIVE(L_FETCHED_ROWS) := L_ACTIVE;
      A_LC(L_FETCHED_ROWS) := L_LC;
      A_LC_VERSION(L_FETCHED_ROWS) := L_LC_VERSION;
      A_SS(L_FETCHED_ROWS) := L_SS;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_SELECTWT_CURSOR);
      END IF;
   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_SELECTWT_CURSOR);
       P_SELECTWT_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_SELECTWT_CURSOR);
      P_SELECTWT_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;


   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'SelectWorksheetType', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (P_SELECTWT_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (P_SELECTWT_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END SELECTWORKSHEETTYPE;      

FUNCTION GETWTROWS
(A_WT               OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_VERSION          OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_ROWNR            OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_ST               OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_ST_VERSION       OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_SC               OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_SC_CREATE        OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_NR_OF_ROWS       IN OUT NUMBER,                      
 A_WHERE_CLAUSE     IN     VARCHAR2,                    
 A_NEXT_ROWS        IN     NUMBER)                       
RETURN NUMBER IS

L_WT                 VARCHAR2(20);
L_VERSION            VARCHAR2(20);
L_ROWNR              NUMBER(4);
L_ST                 VARCHAR2(20);
L_ST_VERSION         VARCHAR2(20);
L_SC                 VARCHAR2(20);
L_SC_CREATE          CHAR(1);

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;
   
   
   IF A_NEXT_ROWS = -1 THEN
      IF P_WTROWS_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_WTROWS_CURSOR);
         P_WTROWS_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_WTROWS_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN

      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
        L_WHERE_CLAUSE := 'ORDER BY wtrows.wt, wtrows.version, wtrows.rownr'; 
      ELSIF UPPER (SUBSTR(A_WHERE_CLAUSE, 1, 6)) <> 'WHERE ' THEN
         L_WHERE_CLAUSE := ', dd'||UNAPIGEN.P_DD||'.uvwt wt WHERE wt.version_is_current = ''1'' '||
                           'AND wtrows.version = wt.version '|| 
                           'AND wtrows.wt = wt.wt '|| 
                           'AND wtrows.wt = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                           ''' ORDER BY wtrows.rownr';
      ELSE
          L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
      END IF;

      L_SQL_STRING := 'SELECT wtrows.wt, wtrows.version, wtrows.rownr, wtrows.st, wtrows.st_version, '||
                      'wtrows.sc, wtrows.sc_create ' ||
                      'FROM dd' || UNAPIGEN.P_DD || '.uvwtrows wtrows ' || L_WHERE_CLAUSE;
   
      IF P_WTROWS_CURSOR IS NULL THEN
         P_WTROWS_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;
      DBMS_SQL.PARSE(P_WTROWS_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   
      DBMS_SQL.DEFINE_COLUMN(P_WTROWS_CURSOR, 1, L_WT, 20);
      DBMS_SQL.DEFINE_COLUMN(P_WTROWS_CURSOR, 2, L_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(P_WTROWS_CURSOR, 3, L_ROWNR);
      DBMS_SQL.DEFINE_COLUMN(P_WTROWS_CURSOR, 4, L_ST, 20);
      DBMS_SQL.DEFINE_COLUMN(P_WTROWS_CURSOR, 5, L_ST_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(P_WTROWS_CURSOR, 6, L_SC, 20);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_WTROWS_CURSOR, 7, L_SC_CREATE, 1);
     
      L_RESULT := DBMS_SQL.EXECUTE(P_WTROWS_CURSOR);
   END IF;
   
   L_RESULT := DBMS_SQL.FETCH_ROWS(P_WTROWS_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_WTROWS_CURSOR, 1, L_WT);
      DBMS_SQL.COLUMN_VALUE(P_WTROWS_CURSOR, 2, L_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_WTROWS_CURSOR, 3, L_ROWNR);
      DBMS_SQL.COLUMN_VALUE(P_WTROWS_CURSOR, 4, L_ST);
      DBMS_SQL.COLUMN_VALUE(P_WTROWS_CURSOR, 5, L_ST_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_WTROWS_CURSOR, 6, L_SC);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_WTROWS_CURSOR, 7, L_SC_CREATE);
     
      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      
      A_WT(L_FETCHED_ROWS) := L_WT;
      A_VERSION(L_FETCHED_ROWS) := L_VERSION;
      A_ROWNR(L_FETCHED_ROWS) := L_ROWNR;
      A_ST(L_FETCHED_ROWS) := L_ST;
      A_ST_VERSION(L_FETCHED_ROWS) := L_ST_VERSION;
      A_SC(L_FETCHED_ROWS) := L_SC;
      A_SC_CREATE(L_FETCHED_ROWS) := L_SC_CREATE;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_WTROWS_CURSOR);
      END IF;
   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_WTROWS_CURSOR);
       P_WTROWS_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_WTROWS_CURSOR);
      P_WTROWS_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;
   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetWtRows', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (P_WTROWS_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (P_WTROWS_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETWTROWS;

FUNCTION SAVEWORKSHEETTYPE
(A_WT                 IN  VARCHAR2,                       
 A_VERSION            IN  VARCHAR2,                       
 A_VERSION_IS_CURRENT IN  CHAR,                           
 A_EFFECTIVE_FROM     IN  DATE,                           
 A_EFFECTIVE_TILL     IN  DATE,                           
 A_DESCRIPTION        IN  VARCHAR2,                       
 A_DESCRIPTION2       IN  VARCHAR2,                       
 A_MIN_ROWS           IN  NUMBER,                         
 A_MAX_ROWS           IN  NUMBER,                         
 A_VALID_CF           IN  VARCHAR2,                       
 A_DESCR_DOC          IN  VARCHAR2,                       
 A_DESCR_DOC_VERSION  IN  VARCHAR2,                       
 A_WS_LY              IN  VARCHAR2,                       
 A_WS_UC              IN  VARCHAR2,                       
 A_WS_UC_VERSION      IN  VARCHAR2,                       
 A_WS_LC              IN  VARCHAR2,                       
 A_WS_LC_VERSION      IN  VARCHAR2,                       
 A_INHERIT_AU         IN  CHAR,                           
 A_WT_CLASS           IN  VARCHAR2,                       
 A_LOG_HS             IN  CHAR,                           
 A_LC                 IN  VARCHAR2,                       
 A_LC_VERSION         IN  VARCHAR2,                       
 A_MODIFY_REASON      IN  VARCHAR2)                       
RETURN NUMBER IS

L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);
L_LOG_HS       CHAR(1);
L_ALLOW_MODIFY CHAR(1);
L_ACTIVE       CHAR(1);
L_INSERT       BOOLEAN;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_WT, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;
   
   IF NVL(A_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   IF NVL(A_MIN_ROWS, 0) <= 0 THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_MIN_ROWS;
         RAISE STPERROR;
   END IF;
   
   IF NVL(A_MAX_ROWS, 0) <= 0 OR NVL(A_MAX_ROWS, 0) < NVL(A_MIN_ROWS, 0) THEN 
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_MAX_ROWS;
         RAISE STPERROR;
   END IF;
   
   IF NVL(A_WS_LY, ' ') = ' '  THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_WSLY;
         RAISE STPERROR;
      END IF;

   IF NVL(A_INHERIT_AU, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INHERITAU;
      RAISE STPERROR;
   END IF;

   IF NVL(A_LOG_HS, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_LOGHS;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('wt', A_WT, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE = UNAPIGEN.DBERR_NOOBJECT THEN
      L_INSERT := TRUE;
   ELSIF L_RET_CODE = UNAPIGEN.DBERR_SUCCESS THEN
      L_INSERT := FALSE;
   ELSE
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   IF L_INSERT THEN                
      IF NVL(A_LC, ' ') <> ' ' THEN
         L_LC := A_LC;
      END IF;
      IF NVL(A_LC_VERSION, ' ') <> ' ' THEN
         L_LC_VERSION := A_LC_VERSION;
      END IF;
      INSERT INTO UTWT(WT, VERSION, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ, DESCRIPTION, DESCRIPTION2, MIN_ROWS, MAX_ROWS,
                       VALID_CF, DESCR_DOC, DESCR_DOC_VERSION, WS_LY, WS_UC, WS_UC_VERSION, WS_LC, 
                       WS_LC_VERSION, INHERIT_AU, WT_CLASS, LOG_HS, ALLOW_MODIFY, 
                       ACTIVE, LC, LC_VERSION)
      VALUES(A_WT, A_VERSION, A_EFFECTIVE_FROM, A_EFFECTIVE_FROM, A_DESCRIPTION, A_DESCRIPTION2, A_MIN_ROWS, A_MAX_ROWS,
             A_VALID_CF, A_DESCR_DOC, A_DESCR_DOC_VERSION, A_WS_LY, A_WS_UC, A_WS_UC_VERSION, A_WS_LC,
             A_WS_LC_VERSION, A_INHERIT_AU, A_WT_CLASS, A_LOG_HS, '#', 
             '0', L_LC, L_LC_VERSION);
      L_EVENT_TP := 'ObjectCreated';
   ELSE                             
      UPDATE UTWT
      SET EFFECTIVE_FROM     = DECODE(EFFECTIVE_TILL, NULL, A_EFFECTIVE_FROM, EFFECTIVE_FROM),
          EFFECTIVE_FROM_TZ  = DECODE(EFFECTIVE_TILL, NULL,  DECODE(A_EFFECTIVE_FROM, EFFECTIVE_FROM_TZ, EFFECTIVE_FROM_TZ, A_EFFECTIVE_FROM), EFFECTIVE_FROM),
          DESCRIPTION        = A_DESCRIPTION,
          DESCRIPTION2       = A_DESCRIPTION2,
          MIN_ROWS           = A_MIN_ROWS,
          MAX_ROWS           = A_MAX_ROWS,
          VALID_CF           = A_VALID_CF,
          DESCR_DOC          = A_DESCR_DOC,
          DESCR_DOC_VERSION  = A_DESCR_DOC_VERSION,
          WS_LY              = A_WS_LY,
          WS_UC              = A_WS_UC,
          WS_UC_VERSION      = A_WS_UC_VERSION,
          WS_LC              = A_WS_LC,
          WS_LC_VERSION      = A_WS_LC_VERSION,
          INHERIT_AU         = A_INHERIT_AU,
          WT_CLASS           = A_WT_CLASS,
          LOG_HS             = A_LOG_HS,
          ALLOW_MODIFY       = '#'
      WHERE VERSION = A_VERSION
        AND WT = A_WT;
      L_EVENT_TP := 'ObjectUpdated';
   END IF;

   L_EV_SEQ_NR := -1;
   L_RESULT :=
         UNAPIEV.INSERTEVENT('SaveWorksheetType', UNAPIGEN.P_EVMGR_NAME, 'wt', A_WT, L_LC, L_LC_VERSION, 
                             L_SS, L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF NVL(L_LOG_HS, ' ') <> A_LOG_HS THEN
      IF A_LOG_HS = '1' THEN
         INSERT INTO UTWTHS (WT, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_WT, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 'History switched ON', 
                 'Audit trail is turned on.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      ELSE
         INSERT INTO UTWTHS (WT, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_WT, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 'History switched OFF', 
                 'Audit trail is turned off.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   END IF;

   IF NVL(L_LOG_HS, ' ') = '1' THEN
      IF L_EVENT_TP = 'ObjectCreated' THEN
         INSERT INTO UTWTHS (WT, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_WT, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'worksheet type "'||A_WT||'" is created.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, 
                 UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      ELSE
         INSERT INTO UTWTHS (WT, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_WT, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'worksheet type "'||A_WT||'" is updated.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, 
                 UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   ELSE
      
      
      IF L_EVENT_TP = 'ObjectCreated' THEN
         INSERT INTO UTWTHS (WT, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_WT, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'worksheet type "'||A_WT||'" is created.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, 
                 UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;   
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
        UNAPIGEN.LOGERROR('SaveWorksheetType', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveWorksheetType')); 
END SAVEWORKSHEETTYPE;

FUNCTION DELETEWORKSHEETTYPE
(A_WT            IN  VARCHAR2,                          
 A_VERSION       IN  VARCHAR2,                          
 A_MODIFY_REASON IN  VARCHAR2)                          
RETURN NUMBER IS

L_ALLOW_MODIFY CHAR(1);
L_ACTIVE       CHAR(1);
L_LC           CHAR(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);
L_LOG_HS       CHAR(1);

BEGIN 

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_WT, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VERSION, ' ')= ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('wt', A_WT, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   
   IF UNAPIGEN.ISSYSTEM21CFR11COMPLIANT = UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTALLOWEDIN21CFR11;
      RAISE STPERROR;
   END IF;

   DELETE FROM UTWTROWS
   WHERE VERSION = A_VERSION
     AND WT = A_WT;
   
   DELETE FROM UTWTAU
   WHERE VERSION = A_VERSION
     AND WT = A_WT;

   DELETE FROM UTWTHS
   WHERE VERSION = A_VERSION
     AND WT = A_WT;

   DELETE FROM UTEVTIMED
   WHERE (OBJECT_TP='wt' AND OBJECT_ID=A_WT AND INSTR(EV_DETAILS,'version='||A_VERSION)<>0);

   DELETE FROM UTEVRULESDELAYED
   WHERE (OBJECT_TP='wt' AND OBJECT_ID=A_WT AND INSTR(EV_DETAILS,'version='||A_VERSION)<>0);

   DELETE FROM UTWT
   WHERE VERSION = A_VERSION
     AND WT = A_WT;

   L_EVENT_TP := 'ObjectDeleted';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT('DeleteWorksheetType',UNAPIGEN.P_EVMGR_NAME, 'wt', A_WT, L_LC, 
                                   L_LC_VERSION, L_SS, L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   
   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE <> 1 THEN
        UNAPIGEN.LOGERROR('DeleteWorksheetType', SQLERRM);
      END IF;
      RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'DeleteWorksheetType')); 
END DELETEWORKSHEETTYPE;

FUNCTION SAVEWTROWS
(A_WT               IN    VARCHAR2,                   
 A_VERSION          IN    VARCHAR2,                   
 A_ROWNR            IN    UNAPIGEN.NUM_TABLE_TYPE,    
 A_ST               IN    UNAPIGEN.VC20_TABLE_TYPE,   
 A_ST_VERSION       IN    UNAPIGEN.VC20_TABLE_TYPE,   
 A_SC               IN    UNAPIGEN.VC20_TABLE_TYPE,   
 A_SC_CREATE        IN    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_NR_OF_ROWS       IN    NUMBER,                     
 A_NEXT_ROWS        IN    NUMBER,                      
 A_MODIFY_REASON    IN    VARCHAR2)                   
RETURN NUMBER IS

L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);
L_LOG_HS       CHAR(1);
L_ALLOW_MODIFY CHAR(1);
L_ACTIVE       CHAR(1);
L_INSERT       BOOLEAN;
L_ROW_NO       NUMBER;
L_MAX_ROWS     NUMBER;

BEGIN 

   L_SQLERRM := NULL;
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_WT, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VERSION, ' ')= ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   IF NVL(A_NEXT_ROWS, 0) = 0 THEN
      IF NVL(P_SAVEWTRW_CALLS, 0) <> 0 THEN
         L_SQLERRM := 'SaveWtRows termination call never called for previous worksheet ! (a_next_rows=-1) a_next_rows='||
                      TO_CHAR(A_NEXT_ROWS);
         RAISE STPERROR;
      END IF;
      P_SAVEWTRW_CALLS := 1;
   ELSIF NVL(A_NEXT_ROWS, 0) = -1 THEN
      P_SAVEWTRW_CALLS := NVL(P_SAVEWTRW_CALLS, 0) + 1;      
   ELSIF NVL(A_NEXT_ROWS, 0) = 1 THEN
      IF NVL(P_SAVEWTRW_CALLS, 0) = 0 THEN   
         L_SQLERRM := 'SaveWtRows startup call never called ! (a_next_rows=0)';
         RAISE STPERROR;   
      END IF;
      IF NVL(UNAPIGEN.P_TXN_LEVEL, 0) <= 1 THEN   
         L_SQLERRM := 'SaveWtRows called with a_next_rows=1 in a non MST transaction !';
         RAISE STPERROR;   
      END IF;
      P_SAVEWTRW_CALLS := NVL(P_SAVEWTRW_CALLS, 0) + 1;      
   ELSE
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NEXTROWS;
      RAISE STPERROR;
   END IF;         
   IF P_SAVEWTRW_CALLS = 1 THEN
      P_SAVEWTRW_TR_SEQ := UNAPIGEN.P_TR_SEQ;
   ELSE
      IF UNAPIGEN.P_TR_SEQ <> P_SAVEWTRW_TR_SEQ THEN
         L_SQLERRM := 'Successive calls of SaveWtRows not in the same transaction !';
         RAISE STPERROR;   
      END IF;
   END IF;
   
   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('wt', A_WT, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTWT
   SET ALLOW_MODIFY = '#'
   WHERE VERSION = A_VERSION
     AND WT = A_WT;
   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR;
   END IF;

   
   IF NVL(P_SAVEWTRW_CALLS, 0) = 1 THEN
      DELETE UTWTROWS
      WHERE VERSION = A_VERSION
        AND WT = A_WT; 
   END IF;
   
   SELECT MAX_ROWS INTO L_MAX_ROWS
   FROM UTWT
   WHERE VERSION = A_VERSION
     AND WT = A_WT;
   
   IF SQL%ROWCOUNT < 1  THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR;
   END IF;

   FOR L_ROW_NO IN 1..A_NR_OF_ROWS LOOP
      IF NVL(A_ROWNR(L_ROW_NO), -1) = -1 THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INVALIDROWNR;
         RAISE STPERROR;
      END IF;

      IF NVL(A_ROWNR(L_ROW_NO), -1) > L_MAX_ROWS THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_MAXROWSOVERFLOW;
         RAISE STPERROR;
      END IF;

      IF NVL(A_SC_CREATE(L_ROW_NO), ' ') NOT IN ('1','0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SC_CREATE;
         RAISE STPERROR;
      END IF;

      INSERT INTO UTWTROWS(WT, VERSION, ROWNR, ST, ST_VERSION, SC, SC_CREATE)
      VALUES  (A_WT, A_VERSION, A_ROWNR(L_ROW_NO), A_ST(L_ROW_NO), A_ST_VERSION(L_ROW_NO),
               A_SC(L_ROW_NO), A_SC_CREATE(L_ROW_NO));
      END LOOP;

   
   IF NVL(A_NEXT_ROWS, 0) = -1 THEN 
      L_EVENT_TP := 'UsedObjectsUpdated';
      L_EV_SEQ_NR := -1;
      L_RET_CODE := UNAPIEV.INSERTEVENT('SaveWtRows', UNAPIGEN.P_EVMGR_NAME, 'wt', A_WT, L_LC, L_LC_VERSION,
                                        L_SS, L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
         RAISE STPERROR;
      END IF;

      IF L_LOG_HS = '1' THEN
         INSERT INTO UTWTHS (WT, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_WT, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'worksheet type "'||A_WT||'" rows are updated.', 
                 CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS, 0) = -1 THEN
      
      P_SAVEWTRW_CALLS := 0;
   END IF;
   
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveWtRows',SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('SaveWtRows',L_SQLERRM);   
   END IF;
   
   P_SAVEWTRW_CALLS := 0;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveWtRows'));
END SAVEWTROWS;

END UNAPIWT;
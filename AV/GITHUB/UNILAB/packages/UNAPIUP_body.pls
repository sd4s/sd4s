PACKAGE BODY unapiup AS

L_SQLERRM         VARCHAR2(255);
L_SQL_STRING      VARCHAR2(2000);
L_WHERE_CLAUSE    VARCHAR2(1000);
L_RET_CODE        NUMBER;
L_RESULT          NUMBER;
L_FETCHED_ROWS    NUMBER;
L_EVENT_TP        UTEV.EV_TP%TYPE;
L_EV_DETAILS      VARCHAR2(255);
L_EV_SEQ_NR       NUMBER;
L_ROW_NR      NUMBER;

P_UP_CURSOR    INTEGER;

STPERROR          EXCEPTION;

FUNCTION GETVERSION
   RETURN VARCHAR2
IS
BEGIN
   RETURN('06.07.00.00_00.13');
EXCEPTION
   WHEN OTHERS THEN
      RETURN (NULL);
END GETVERSION;

FUNCTION GETUSERPROFILE
(A_UP                  OUT    UNAPIGEN.LONG_TABLE_TYPE,  
 A_DESCRIPTION         OUT    UNAPIGEN.VC40_TABLE_TYPE,  
 A_DD                  OUT    UNAPIGEN.VC3_TABLE_TYPE,   
 A_DESCR_DOC           OUT    UNAPIGEN.VC40_TABLE_TYPE,  
 A_CHG_PWD             OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_DEFINE_MENU         OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_CONFIRM_CHG_SS      OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LANGUAGE            OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_UP_CLASS            OUT    UNAPIGEN.VC2_TABLE_TYPE,  
 A_LOG_HS              OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ALLOW_MODIFY        OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ACTIVE              OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LC                  OUT    UNAPIGEN.VC2_TABLE_TYPE,   
 A_SS                  OUT    UNAPIGEN.VC2_TABLE_TYPE,   
 A_NR_OF_ROWS          IN OUT NUMBER,                    
 A_WHERE_CLAUSE        IN     VARCHAR2)                  
RETURN NUMBER IS

L_UP                    NUMBER(5);
L_DESCRIPTION           VARCHAR2(40);
L_DD                    VARCHAR2(3);
L_DESCR_DOC             VARCHAR2(40);
L_CHG_PWD               CHAR(1);
L_DEFINE_MENU           CHAR(1);
L_CONFIRM_CHG_SS        CHAR(1);
L_LANGUAGE              VARCHAR2(20);
L_LOG_HS                CHAR(1);
L_ALLOW_MODIFY          CHAR(1);
L_ACTIVE                CHAR(1);
L_LC                    VARCHAR2(2);
L_SS                    VARCHAR2(2);
L_UP_CLASS              VARCHAR2(2);
L_UP_CURSOR             INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'WHERE active = ''1'' ORDER BY up, version'; 
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := 'WHERE version_is_current = ''1'' '||
                        'AND up = ' || A_WHERE_CLAUSE || ' ORDER BY up, version'; 
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_UP_CURSOR := DBMS_SQL.OPEN_CURSOR;

   L_SQL_STRING := 'SELECT up, description, dd, descr_doc, chg_pwd, '||
                   'define_menu, confirm_chg_ss, language, up_class, log_hs, '||
                   'allow_modify, active, lc, ss FROM dd'||
                   UNAPIGEN.P_DD|| '.uvup ' || L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_UP_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_UP_CURSOR, 1, L_UP);
   DBMS_SQL.DEFINE_COLUMN(L_UP_CURSOR, 2, L_DESCRIPTION, 40);
   DBMS_SQL.DEFINE_COLUMN(L_UP_CURSOR, 3, L_DD, 3);
   DBMS_SQL.DEFINE_COLUMN(L_UP_CURSOR, 4, L_DESCR_DOC, 40);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_UP_CURSOR, 5, L_CHG_PWD, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_UP_CURSOR, 6, L_DEFINE_MENU, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_UP_CURSOR, 7, L_CONFIRM_CHG_SS, 1);
   DBMS_SQL.DEFINE_COLUMN(L_UP_CURSOR, 8, L_LANGUAGE, 20);
   DBMS_SQL.DEFINE_COLUMN(L_UP_CURSOR, 9, L_UP_CLASS, 2);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_UP_CURSOR, 10, L_LOG_HS, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_UP_CURSOR, 11, L_ALLOW_MODIFY, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_UP_CURSOR, 12, L_ACTIVE, 1);
   DBMS_SQL.DEFINE_COLUMN(L_UP_CURSOR, 13, L_LC, 2);
   DBMS_SQL.DEFINE_COLUMN(L_UP_CURSOR, 14, L_SS, 2);

   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_UP_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_UP_CURSOR, 1, L_UP);
      DBMS_SQL.COLUMN_VALUE(L_UP_CURSOR, 2, L_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE(L_UP_CURSOR, 3, L_DD);
      DBMS_SQL.COLUMN_VALUE(L_UP_CURSOR, 4, L_DESCR_DOC);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_UP_CURSOR, 5, L_CHG_PWD);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_UP_CURSOR, 6, L_DEFINE_MENU);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_UP_CURSOR, 7, L_CONFIRM_CHG_SS);
      DBMS_SQL.COLUMN_VALUE(L_UP_CURSOR, 8, L_LANGUAGE);
      DBMS_SQL.COLUMN_VALUE(L_UP_CURSOR, 9, L_UP_CLASS);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_UP_CURSOR, 10, L_LOG_HS);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_UP_CURSOR, 11, L_ALLOW_MODIFY);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_UP_CURSOR, 12, L_ACTIVE);
      DBMS_SQL.COLUMN_VALUE(L_UP_CURSOR, 13, L_LC);
      DBMS_SQL.COLUMN_VALUE(L_UP_CURSOR, 14, L_SS);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_UP(L_FETCHED_ROWS) := L_UP;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;
      A_DD(L_FETCHED_ROWS) := L_DD;
      A_DESCR_DOC(L_FETCHED_ROWS) := L_DESCR_DOC;
      A_CHG_PWD(L_FETCHED_ROWS) := L_CHG_PWD;
      A_DEFINE_MENU(L_FETCHED_ROWS) := L_DEFINE_MENU;
      A_CONFIRM_CHG_SS(L_FETCHED_ROWS) := L_CONFIRM_CHG_SS;
      A_LANGUAGE(L_FETCHED_ROWS) := L_LANGUAGE;
      A_UP_CLASS(L_FETCHED_ROWS) := L_UP_CLASS;
      A_LOG_HS(L_FETCHED_ROWS) := L_LOG_HS;
      A_ALLOW_MODIFY(L_FETCHED_ROWS) := L_ALLOW_MODIFY;
      A_ACTIVE(L_FETCHED_ROWS) := L_ACTIVE;
      A_LC(L_FETCHED_ROWS) := L_LC;
      A_SS(L_FETCHED_ROWS) := L_SS;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_UP_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_UP_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
              'GetUserProfile', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (L_UP_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_UP_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETUSERPROFILE;

FUNCTION GETUPUSER
(A_UP              OUT      UNAPIGEN.LONG_TABLE_TYPE,  
 A_US              OUT      UNAPIGEN.VC20_TABLE_TYPE,  
 A_PERSON          OUT      UNAPIGEN.VC40_TABLE_TYPE,  
 A_IS_DEFAULT      OUT      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NR_OF_ROWS      IN OUT   NUMBER,                    
 A_WHERE_CLAUSE    IN       VARCHAR2)                  
RETURN NUMBER IS

L_UP                   NUMBER(5);
L_US                   VARCHAR2(20);
A_US_VERSION           VARCHAR2(20);
L_AD                   VARCHAR2(20);
L_PERSON               VARCHAR2(40);
L_DEF_UP               NUMBER(5);
L_VERSION_IS_CURRENT   CHAR(1);
L_UPUS_CURSOR          INTEGER;

CURSOR L_AD_CURSOR(C_US IN VARCHAR2, C_US_VERSION IN VARCHAR2) IS
   SELECT AD, PERSON, DEF_UP, VERSION_IS_CURRENT
   FROM UTAD
   WHERE VERSION = C_US_VERSION
     AND AD = C_US;

BEGIN

   
   A_US_VERSION := UNVERSION.P_NO_VERSION;
   IF A_US_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'ORDER BY upus.up, upus.version'; 
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := ', dd'||UNAPIGEN.P_DD||'.uvup up WHERE up.version_is_current = ''1'' '||
                        'AND upus.version = up.version '||
                        'AND upus.up = up.up '||
                        'AND upus.up = ' || A_WHERE_CLAUSE || ' ORDER BY upus.up, upus.version'; 
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_UPUS_CURSOR  := DBMS_SQL.OPEN_CURSOR;

   L_SQL_STRING := 'SELECT upus.up, upus.us FROM dd' || UNAPIGEN.P_DD ||
                   '.uvupus upus ' || L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_UPUS_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_UPUS_CURSOR, 1, L_UP);
   DBMS_SQL.DEFINE_COLUMN(L_UPUS_CURSOR, 2, L_US, 20);

   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_UPUS_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_UPUS_CURSOR, 1, L_UP);
      DBMS_SQL.COLUMN_VALUE(L_UPUS_CURSOR, 2, L_US);
      L_PERSON := NULL;

      OPEN L_AD_CURSOR(L_US, A_US_VERSION);
      FETCH L_AD_CURSOR INTO L_AD, L_PERSON, L_DEF_UP, L_VERSION_IS_CURRENT;
      IF L_AD_CURSOR%NOTFOUND THEN
         
         L_AD := 'ERROR';
         L_PERSON := 'NO DATA FOUND';
         L_DEF_UP := '';
         L_VERSION_IS_CURRENT := '';
      END IF;
      CLOSE L_AD_CURSOR;

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_UP(L_FETCHED_ROWS) := L_UP;
      A_US(L_FETCHED_ROWS) := L_AD;
      A_PERSON(L_FETCHED_ROWS) := L_PERSON;
      IF (NVL(L_DEF_UP, -1) = L_UP) AND (NVL(L_VERSION_IS_CURRENT, '0') = '1') THEN
         A_IS_DEFAULT(L_FETCHED_ROWS) := '1';
      ELSE
         A_IS_DEFAULT(L_FETCHED_ROWS) := '0';
      END IF;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT:= DBMS_SQL.FETCH_ROWS(L_UPUS_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_UPUS_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   UNAPIGEN.LOGERROR('GetUpUser', SQLERRM);
   IF DBMS_SQL.IS_OPEN (L_UPUS_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_UPUS_CURSOR);
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETUPUSER;

FUNCTION GETUSERPROFILELIST
(A_UP                  OUT      UNAPIGEN.LONG_TABLE_TYPE,   
 A_DESCRIPTION         OUT      UNAPIGEN.VC40_TABLE_TYPE,   
 A_SS                  OUT      UNAPIGEN.VC2_TABLE_TYPE,    
 A_NR_OF_ROWS          IN OUT   NUMBER,                     
 A_WHERE_CLAUSE        IN       VARCHAR2,                   
 A_NEXT_ROWS           IN       NUMBER)                     
RETURN NUMBER IS

L_UP           NUMBER(5);
L_DESCRIPTION  VARCHAR2(40);
L_SS           VARCHAR2(2);

BEGIN
   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_UP_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_UP_CURSOR);
         P_UP_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;
   
   
   IF A_NEXT_ROWS = 1 THEN
      IF P_UP_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;
   
   
   IF NVL(A_NEXT_ROWS, 0) = 0 THEN
      IF P_UP_CURSOR IS NULL THEN
         P_UP_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;

      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
         L_WHERE_CLAUSE := 'WHERE active = ''1'' ORDER BY up, version'; 
      ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
         L_WHERE_CLAUSE := 'WHERE version_is_current = ''1'' '||
                           'AND up = ' || A_WHERE_CLAUSE || 
                           ' ORDER BY up, version';
      ELSE
         L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
      END IF;

      L_SQL_STRING := 'SELECT up, description, ss FROM dd' ||
                      UNAPIGEN.P_DD || '.uvup ' || L_WHERE_CLAUSE;

      DBMS_SQL.PARSE(P_UP_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

      DBMS_SQL.DEFINE_COLUMN(P_UP_CURSOR, 1, L_UP);
      DBMS_SQL.DEFINE_COLUMN(P_UP_CURSOR, 2, L_DESCRIPTION, 40);
      DBMS_SQL.DEFINE_COLUMN(P_UP_CURSOR, 3, L_SS, 2);

      L_RESULT := DBMS_SQL.EXECUTE(P_UP_CURSOR);
   END IF;

   L_RESULT := DBMS_SQL.FETCH_ROWS(P_UP_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_UP_CURSOR, 1, L_UP);
      DBMS_SQL.COLUMN_VALUE(P_UP_CURSOR, 2, L_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE(P_UP_CURSOR, 3, L_SS);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_UP(L_FETCHED_ROWS) := L_UP;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;
      A_SS(L_FETCHED_ROWS) := L_SS;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_UP_CURSOR);
      END IF;
   END LOOP;

  
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_UP_CURSOR);
       P_UP_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_UP_CURSOR);
      P_UP_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetUserProfileList', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (P_UP_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (P_UP_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETUSERPROFILELIST;

FUNCTION SAVEUSERPROFILE
(A_UP                     IN     NUMBER,            
 A_DESCRIPTION            IN     VARCHAR2,          
 A_DD                     IN     VARCHAR2,          
 A_DESCR_DOC              IN     VARCHAR2,          
 A_CHG_PWD                IN     CHAR,              
 A_DEFINE_MENU            IN     CHAR,              
 A_CONFIRM_CHG_SS         IN     CHAR,              
 A_LANGUAGE               IN     VARCHAR2,          
 A_UP_CLASS               IN     VARCHAR2,          
 A_LOG_HS                 IN     CHAR,              
 A_LC                     IN     VARCHAR2,          
 A_MODIFY_REASON          IN     VARCHAR2)          
RETURN NUMBER IS

A_VERSION      VARCHAR2(20);
L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);
L_LOG_HS       CHAR(1);
L_ALLOW_MODIFY CHAR(1);
L_ACTIVE       CHAR(1);
L_INSERT       BOOLEAN;
L_DESCRIPTION  VARCHAR2(40);
L_ACTUAL_DD    VARCHAR2(3);
L_NEW_DD       BOOLEAN;
L_NR_CONNECTED NUMBER;

CURSOR L_DD_CURSOR(C_UP NUMBER, C_VERSION VARCHAR2) IS
   SELECT DD
   FROM UTUP
   WHERE VERSION = C_VERSION
     AND UP = C_UP;

CURSOR L_UPUS_CURSOR(C_UP NUMBER, C_VERSION VARCHAR2) IS
   SELECT A.AD US, A.DEF_UP
   FROM UTAD A, UTUPUS B
   WHERE A.VERSION_IS_CURRENT = '1'
     AND A.DEF_UP = B.UP
     AND B.VERSION = C_VERSION
     AND B.UP = C_UP;
   
CURSOR L_CONNECTED_CURSOR(C_US VARCHAR2) IS
   SELECT COUNT(*)
   FROM V$SESSION
   WHERE TYPE='USER'
   AND UPPER(USERNAME) = UPPER(C_US);

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   L_NEW_DD := FALSE;
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_UP, -1) = -1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF (TRUNC(NVL(A_UP, -1)) - NVL(A_UP, 0)) <> 0 OR
      (NVL(A_UP, -1)) <= 0  THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UP;
      RAISE STPERROR;
   END IF;

    IF NVL(TO_NUMBER(A_DD) , -1) < 1 OR
         NVL(TO_NUMBER(A_DD) , -1) > 128 THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_DD;
         RAISE STPERROR;
   END IF;

   IF NVL(A_CHG_PWD, ' ') NOT IN ('1', '0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_CHGPWD;
      RAISE STPERROR;
   END IF;

   IF NVL(A_DEFINE_MENU, ' ') NOT IN ('1', '0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_DEFINEMENU;
      RAISE STPERROR;
   END IF;

   IF NVL(A_CONFIRM_CHG_SS, ' ') NOT IN ('1', '0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_CONFIRMCHGSS;
      RAISE STPERROR;
   END IF;

   IF NVL(A_LOG_HS, ' ') NOT IN ('1', '0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_LOGHS;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('up', A_UP, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE = UNAPIGEN.DBERR_NOOBJECT THEN
      L_INSERT := TRUE;
   ELSIF L_RET_CODE = UNAPIGEN.DBERR_SUCCESS THEN
      L_INSERT := FALSE;
   ELSIF L_RET_CODE = UNAPIGEN.DBERR_NOTMODIFIABLE THEN
      
      SELECT DESCRIPTION
      INTO L_DESCRIPTION
      FROM UTUP
      WHERE VERSION = A_VERSION
        AND UP = A_UP;
      IF L_DESCRIPTION IS NOT NULL THEN
         
         UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
         RAISE STPERROR;
      ELSE
         
         L_INSERT := FALSE;
         L_LOG_HS := '1';
      END IF;
   ELSE
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   OPEN L_DD_CURSOR(A_UP, A_VERSION);
   FETCH L_DD_CURSOR
   INTO L_ACTUAL_DD;
   CLOSE L_DD_CURSOR;

   IF L_INSERT THEN               
      IF NVL(A_LC, ' ') <> ' ' THEN
         L_LC := A_LC;
      END IF;

      INSERT INTO UTUP (UP, VERSION, VERSION_IS_CURRENT, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ,
                        EFFECTIVE_TILL, EFFECTIVE_TILL_TZ, DESCRIPTION, DD, 
                        DESCR_DOC, CHG_PWD, DEFINE_MENU, CONFIRM_CHG_SS, 
                        LANGUAGE, UP_CLASS, LOG_HS, ALLOW_MODIFY, ACTIVE, LC, LC_VERSION)
      VALUES (A_UP, A_VERSION, '1', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, NULL, A_DESCRIPTION, A_DD, 
              A_DESCR_DOC, A_CHG_PWD, A_DEFINE_MENU, A_CONFIRM_CHG_SS, 
              A_LANGUAGE, A_UP_CLASS, A_LOG_HS, '#', '0', L_LC, L_LC_VERSION);
      L_EVENT_TP := 'ObjectCreated';
   ELSE            
      UPDATE UTUP
      SET DESCRIPTION         = A_DESCRIPTION,
          DD                  = A_DD,
          DESCR_DOC           = A_DESCR_DOC,
          CHG_PWD             = A_CHG_PWD,
          DEFINE_MENU         = A_DEFINE_MENU,
          CONFIRM_CHG_SS      = A_CONFIRM_CHG_SS,
          LANGUAGE            = A_LANGUAGE,
          UP_CLASS            = A_UP_CLASS,
          LOG_HS              = A_LOG_HS,
          ALLOW_MODIFY        = '#'
      WHERE VERSION = A_VERSION
        AND UP = A_UP;
      L_EVENT_TP := 'ObjectUpdated';
      IF NVL(L_ACTUAL_DD,' ') <> A_DD THEN
         L_NEW_DD := TRUE;
      END IF;
   END IF;

   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT('SaveUserProfile', UNAPIGEN.P_EVMGR_NAME, 'up', A_UP, L_LC, 
                                   L_LC_VERSION, L_SS, L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF NVL(L_LOG_HS, ' ') <> A_LOG_HS THEN
      IF A_LOG_HS = '1' THEN
         INSERT INTO UTUPHS (UP, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_UP, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 'History switched ON', 
                 'Audit trail is turned on.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      ELSE
         INSERT INTO UTUPHS (UP, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_UP, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 'History switched OFF', 
                 'Audit trail is turned off.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   END IF;

   IF NVL(L_LOG_HS, ' ') = '1' THEN
      IF L_EVENT_TP = 'ObjectCreated' THEN
         INSERT INTO UTUPHS (UP, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_UP, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'user profile "'||A_UP||'" is created.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, 
                 UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      ELSE
         INSERT INTO UTUPHS (UP, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_UP, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'user profile "'||A_UP||'" is updated.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, 
                 UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   ELSE
      
      
      IF L_EVENT_TP = 'ObjectCreated' THEN
         INSERT INTO UTUPHS (UP, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_UP, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'user profile "'||A_UP||'" is created.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, 
                 UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;   
   END IF;

   IF L_NEW_DD THEN
      
      FOR L_UPUS_REC IN L_UPUS_CURSOR(A_UP, A_VERSION) LOOP
         OPEN L_CONNECTED_CURSOR(L_UPUS_REC.US);
         FETCH L_CONNECTED_CURSOR INTO L_NR_CONNECTED;
         CLOSE L_CONNECTED_CURSOR;
         IF L_NR_CONNECTED > 0 THEN
            EXIT;
         END IF;
      END LOOP;
      IF L_NR_CONNECTED > 0 THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_USINUPCONNECTED;
         RAISE STPERROR;
      END IF;
      
      
      
      
      FOR L_UPUS_REC IN L_UPUS_CURSOR(A_UP, A_VERSION) LOOP
         L_RET_CODE := UNAPIUS.NEWDATADOMAIN(L_UPUS_REC.US, L_UPUS_REC.DEF_UP);
         IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
            UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
            RAISE STPERROR;
         END IF;
      END LOOP;    
      
      
      L_RET_CODE := UNAPIUS.NEWSHAREDUSER4UP(UNAPIGEN.P_ENTERPRISE_USER_PREFIX||A_UP, A_UP);
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         L_SQLERRM := 'NewSharedUser4up failed ret_code='||L_RET_CODE||'#us='||UNAPIGEN.P_ENTERPRISE_USER_PREFIX||A_UP||'#up='||A_UP;
         UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
         RAISE STPERROR;
      END IF;      
      
   END IF;
   
   IF L_EVENT_TP = 'ObjectCreated' THEN
      L_RET_CODE := UNAPIUS.CREATESHAREDUSER4UP(UNAPIGEN.P_ENTERPRISE_USER_PREFIX||A_UP, A_UP);
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         L_SQLERRM := 'CreateShared user failed ret_code='||L_RET_CODE||'#us='||UNAPIGEN.P_ENTERPRISE_USER_PREFIX||A_UP||'#up='||A_UP;
         UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
         RAISE STPERROR;
      END IF;
   END IF;
   
   
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveUserProfile', SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('SaveUserProfile', L_SQLERRM);   
   END IF;
   IF L_DD_CURSOR%ISOPEN THEN
      CLOSE L_DD_CURSOR;
   END IF;
   IF L_CONNECTED_CURSOR%ISOPEN THEN
      CLOSE L_CONNECTED_CURSOR;
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveUserProfile'));
END SAVEUSERPROFILE;

FUNCTION DELETEUSERPROFILE
(A_UP            IN  NUMBER,            
 A_MODIFY_REASON IN  VARCHAR2)          
RETURN NUMBER IS

A_VERSION      VARCHAR2(20);
L_ALLOW_MODIFY CHAR(1);
L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);
L_ACTIVE       CHAR(1);
L_LOG_HS       CHAR(1);

CURSOR L_US_CURSOR IS
   SELECT AD
   FROM UTAD
   WHERE VERSION_IS_CURRENT = '1'
     AND DEF_UP = A_UP;

L_COUNT L_US_CURSOR%ROWTYPE;

CURSOR L_UPTK_CURSOR(C_UP VARCHAR2, C_VERSION VARCHAR2) IS
   SELECT DISTINCT B.TK_TP, B.TK, A.US
   FROM UTUPTK B, UTUPUS A
   WHERE A.VERSION = C_VERSION
     AND A.UP = C_UP
     AND A.VERSION = B.VERSION
     AND A.UP = B.UP;

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   
   IF UNAPIGEN.ISSYSTEM21CFR11COMPLIANT = UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTALLOWEDIN21CFR11;
      RAISE STPERROR;
   END IF;

   
   
   
   FOR L_UPTK_REC IN L_UPTK_CURSOR(A_UP, A_VERSION) LOOP
      DELETE FROM UTUPUSTKVALUELISTS
      WHERE TK_TP = L_UPTK_REC.TK_TP
        AND TK = L_UPTK_REC.TK
        AND US = L_UPTK_REC.US
        AND UP = A_UP;
      UNAPIGEN.U4COMMIT;
   END LOOP;

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_UP, -1) = 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UPONE;      
      RAISE STPERROR;
   END IF;

   IF NVL(A_UP, -1) = -1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF (TRUNC(NVL(A_UP, -1)) - NVL(A_UP, 0)) <> 0 OR
      (NVL(A_UP, -1)) <= 0  THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UP;
      RAISE STPERROR;
   END IF;

   OPEN L_US_CURSOR;
   FETCH L_US_CURSOR INTO L_COUNT;
   IF L_US_CURSOR%FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UPINUSE;    
      RAISE STPERROR;
   END IF;
   CLOSE L_US_CURSOR;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('up', A_UP, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   DELETE FROM UTUP
   WHERE VERSION = A_VERSION
     AND UP = A_UP;

   DELETE FROM UTUPPREF
   WHERE VERSION = A_VERSION
     AND UP = A_UP;

   DELETE FROM UTUPFA
   WHERE VERSION = A_VERSION
     AND UP = A_UP;

   DELETE FROM UTUPTK
   WHERE VERSION = A_VERSION
     AND UP = A_UP;

   DELETE FROM UTUPAU
   WHERE VERSION = A_VERSION
     AND UP = A_UP;

   DELETE FROM UTUPHS
   WHERE VERSION = A_VERSION
     AND UP = A_UP;

   DELETE FROM UTUPUS
   WHERE VERSION = A_VERSION
     AND UP = A_UP;

   DELETE FROM UTUPUSEL
   WHERE VERSION = A_VERSION
     AND UP = A_UP;

   DELETE FROM UTUPUSFA
   WHERE VERSION = A_VERSION
     AND UP = A_UP;

   DELETE FROM UTUPUSPREF
   WHERE VERSION = A_VERSION
     AND UP = A_UP;

   DELETE FROM UTUPUSTK
   WHERE VERSION = A_VERSION
     AND UP = A_UP;

   DELETE FROM UTUPUSTKDETAILS
   WHERE VERSION = A_VERSION
     AND UP = A_UP;

   DELETE FROM UTUPUSOUTLOOKPAGES
   WHERE UP = A_UP;

   DELETE FROM UTUPUSOUTLOOKTASKS
   WHERE UP = A_UP;
   
   L_EVENT_TP := 'ObjectDeleted';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT('DeleteUserProfile', UNAPIGEN.P_EVMGR_NAME, 'up', A_UP, L_LC, 
                                   L_LC_VERSION, L_SS, L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);

   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE <> 1 THEN
         UNAPIGEN.LOGERROR('DeleteUserProfile', SQLERRM);
      END IF;
      IF L_UPTK_CURSOR%ISOPEN THEN
         CLOSE L_UPTK_CURSOR;
      END IF;
      RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'DeleteUserProfile'));
END DELETEUSERPROFILE;

FUNCTION SAVEUPUSER
(A_UP                 IN     NUMBER,                   
 A_US                 IN     UNAPIGEN.VC20_TABLE_TYPE, 
 A_NR_OF_ROWS         IN     NUMBER,                   
 A_MODIFY_REASON      IN     VARCHAR2)                 
RETURN NUMBER IS

A_VERSION      VARCHAR2(20);
A_US_VERSION   VARCHAR2(20);
L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);
L_LOG_HS       CHAR(1);
L_ALLOW_MODIFY CHAR(1);
L_ACTIVE       CHAR(1);

CURSOR C_CHECKDEF_UP_CURSOR(C_UP NUMBER) IS
   SELECT COUNT(A.AD)
   FROM UTAD A
   WHERE A.VERSION_IS_CURRENT = '1'
     AND A.DEF_UP = C_UP
     AND A.STRUCT_CREATED = '1'
     AND NOT EXISTS (SELECT B.UP 
                     FROM UTUPUS B 
                     WHERE A.VERSION = B.US_VERSION
                       AND A.AD = B.US 
                       AND A.VERSION_IS_CURRENT = '1' 
                       AND B.UP = A.DEF_UP);
L_CHECK        INTEGER;

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;

   A_US_VERSION := UNVERSION.P_NO_VERSION;
   IF A_US_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_UP, -1) = -1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF (TRUNC(NVL(A_UP, -1)) - NVL(A_UP, 0)) <> 0 OR
      (NVL(A_UP, -1)) <= 0  THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UP;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('up', A_UP, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTUP
   SET ALLOW_MODIFY = '#'
   WHERE VERSION = A_VERSION
     AND UP = A_UP;

   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR ;
   END IF;

   DELETE FROM UTUPUS
   WHERE VERSION = A_VERSION
     AND UP = A_UP;

   FOR L_SEQ IN 1..A_NR_OF_ROWS LOOP
      IF NVL(A_US(L_SEQ), ' ') <> ' ' THEN
         INSERT INTO UTUPUS (US, US_VERSION, UP, VERSION)
         VALUES (A_US(L_SEQ), A_US_VERSION, A_UP, A_VERSION);
      END IF;
   END LOOP;

   
   L_SQLERRM := NULL;
   OPEN C_CHECKDEF_UP_CURSOR(A_UP);
   FETCH C_CHECKDEF_UP_CURSOR
   INTO L_CHECK;
   CLOSE C_CHECKDEF_UP_CURSOR;
   IF L_CHECK <> 0 THEN
      L_SQLERRM := 'User profile '||TO_CHAR(A_UP)||' is used as def_up but there are no corresponding entries in utupus';
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;

   L_EVENT_TP := 'UsedObjectsUpdated';
   L_EV_SEQ_NR := -1;
   L_RESULT :=
         UNAPIEV.INSERTEVENT('SaveUpUser', UNAPIGEN.P_EVMGR_NAME, 'up', A_UP, L_LC, 
                             L_LC_VERSION, L_SS, L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF L_LOG_HS = '1' THEN
      INSERT INTO UTUPHS (UP, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                          WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES (A_UP, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
              'user profile "'||A_UP||'" users are updated.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, 
              UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE <> 1 THEN
         UNAPIGEN.LOGERROR('SaveUpUser', SQLERRM);
      ELSIF L_SQLERRM IS NOT NULL THEN
         UNAPIGEN.LOGERROR('SaveUpUser', L_SQLERRM);
      END IF;
      IF C_CHECKDEF_UP_CURSOR%ISOPEN THEN
         CLOSE C_CHECKDEF_UP_CURSOR;
      END IF;
      RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveUpUser'));
END SAVEUPUSER;

FUNCTION ADDONEENTERPRISEUSER
(A_UP               IN      NUMBER,                     
 A_US               IN      VARCHAR2,                   
 A_DESCRIPTION      IN      VARCHAR2)                   
RETURN NUMBER IS

L_LC                             VARCHAR2(20);
L_LOG_HS                         CHAR(1);
L_LC_VERSION                     VARCHAR2(20);
L_UP_VERSION                     VARCHAR2(20);
L_US_VERSION                     VARCHAR2(20);
L_SS                             VARCHAR2(2);
L_SS_APPROVED_ALLOW_MODIFY       CHAR(1);
L_SS_APPROVED_ACTIVE             CHAR(1);
L_OLD_DEF_UP                     NUMBER;

BEGIN
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.P_TXN_ERROR THEN
      RAISE STPERROR;
   END IF;
   
   BEGIN
      SELECT DEF_UP
      INTO L_OLD_DEF_UP
      FROM UTAD
      WHERE AD=A_US;
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      NULL;
   END;

   IF L_OLD_DEF_UP IS NOT NULL THEN
      L_RET_CODE := UNAPIUP.CHANGEDEFUP4ENTERPRISEUSER(L_OLD_DEF_UP, A_UP, A_US);
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         L_SQLERRM := 'ChangeDefUp4EnterpriseUser failed. ret_code='||L_RET_CODE||'old_up='||L_OLD_DEF_UP||'#up='||A_UP||'#us='||A_US;
         RAISE STPERROR;
      END IF;
   ELSE
      L_LC_VERSION := UNVERSION.P_NO_VERSION;
      L_UP_VERSION := UNVERSION.P_NO_VERSION;
      L_US_VERSION := UNVERSION.P_NO_VERSION;
      BEGIN
         SELECT DEF_LC, LOG_HS
         INTO L_LC, L_LOG_HS
         FROM UTOBJECTS
         WHERE OBJECT='ad';
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
         L_LC := '@L';
         L_LOG_HS := '1';
      END;

      BEGIN
         SELECT ALLOW_MODIFY, ACTIVE
         INTO L_SS_APPROVED_ALLOW_MODIFY, L_SS_APPROVED_ACTIVE
         FROM UTSS
         WHERE SS=P_ENT_USER_SS_APPROVED;
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
         L_SS_APPROVED_ALLOW_MODIFY := '0';
         L_SS_APPROVED_ACTIVE := '1';
      END;

      BEGIN
         INSERT INTO UTAD (AD, VERSION, VERSION_IS_CURRENT, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ, EFFECTIVE_TILL, EFFECTIVE_TILL_TZ, 
                           IS_TEMPLATE, IS_USER, 
                           STRUCT_CREATED, AD_TP, PERSON, TITLE, FUNCTION_NAME, DEF_UP, COMPANY, 
                           STREET, CITY, STATE, COUNTRY, AD_NR, PO_BOX, ZIP_CODE, PHONE_NR,
                           EXT_NR, FAX_NR, EMAIL, AD_CLASS, LOG_HS, LC, LC_VERSION, ALLOW_MODIFY, ACTIVE, SS)
         VALUES (A_US, L_US_VERSION, '1', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, NULL, 
                 '0', '2', 
                 '1', NULL, A_US, NULL, NULL, A_UP, NULL, 
                 NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                 NULL, NULL, NULL, NULL, L_LOG_HS, L_LC, UNVERSION.P_NO_VERSION, L_SS_APPROVED_ALLOW_MODIFY, L_SS_APPROVED_ACTIVE, P_ENT_USER_SS_APPROVED);
         L_EVENT_TP := 'ObjectCreated';
      EXCEPTION
      WHEN DUP_VAL_ON_INDEX THEN
         UPDATE UTAD
         SET DEF_UP = A_UP, IS_USER='2'
         WHERE AD=A_US;
         L_EVENT_TP := 'ObjectUpdated';
      END;

      INSERT INTO UTUPUS
      (UP, VERSION, US, US_VERSION)
      VALUES
      (A_UP, UNVERSION.P_NO_VERSION, A_US, UNVERSION.P_NO_VERSION);

      L_EV_SEQ_NR := -1;
      L_RESULT :=
            UNAPIEV.INSERTEVENT('AddOneEnterpriseUser', UNAPIGEN.P_EVMGR_NAME, 'ad', A_US, L_LC, 
                                L_LC_VERSION, L_SS, L_EVENT_TP, 'version='||L_US_VERSION, L_EV_SEQ_NR);
      IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS  THEN
         UNAPIGEN.P_TXN_ERROR := L_RESULT;
         RAISE STPERROR;
      END IF;
      INSERT INTO UTADHS(AD, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                         WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES (A_US, L_US_VERSION, A_US, A_DESCRIPTION, L_EVENT_TP, 
              'address "'||A_US||'" is created.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, '', UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);


      L_EVENT_TP := 'EnterprUs1StConnect';
      L_EV_SEQ_NR := -1;
      L_RESULT :=
            UNAPIEV.INSERTEVENT('AddOneEnterpriseUser', UNAPIGEN.P_EVMGR_NAME, 'up', A_UP, L_LC, 
                                L_LC_VERSION, L_SS, L_EVENT_TP, 'version='||L_UP_VERSION, L_EV_SEQ_NR);
      IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS  THEN
         UNAPIGEN.P_TXN_ERROR := L_RESULT;
         RAISE STPERROR;
      END IF;

      INSERT INTO UTUPHS (UP, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                          WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES (A_UP, L_UP_VERSION, A_US, A_DESCRIPTION, L_EVENT_TP,
              'Enterprise user "'||UNAPIGEN.P_USER||'" added by first connection', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'EnterpriseUsConnect', 
              UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);

      IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
         RAISE STPERROR;
      END IF;
   END IF;   
   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN OTHERS THEN
   UNAPIGEN.LOGERROR('AddOneEnterpriseUser', 'Error occured when attempting to add enterprise user '||A_US||' to its user profile');
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('AddOneEnterpriseUser', SQLERRM);
   END IF;
   IF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('AddOneEnterpriseUser', L_SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'AddOneEnterpriseUser'));
END ADDONEENTERPRISEUSER;

FUNCTION CHANGEDEFUP4ENTERPRISEUSER
(A_OLD_UP           IN      NUMBER,                     
 A_NEW_UP           IN      NUMBER,                     
 A_US               IN      VARCHAR2)                   
RETURN NUMBER IS

L_LC                             VARCHAR2(20);
L_LOG_HS                         CHAR(1);
L_LC_VERSION                     VARCHAR2(20);
L_UP_VERSION                     VARCHAR2(20);
L_US_VERSION                     VARCHAR2(20);
L_SS                             VARCHAR2(2);
L_SS_APPROVED_ALLOW_MODIFY       CHAR(1);
L_SS_APPROVED_ACTIVE             CHAR(1);
L_DESCRIPTION                    VARCHAR2(40);

BEGIN
   
   
   
   
   
   
   
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.P_TXN_ERROR THEN
      RAISE STPERROR;
   END IF;
   
   L_LC_VERSION := UNVERSION.P_NO_VERSION;
   L_UP_VERSION := UNVERSION.P_NO_VERSION;
   L_US_VERSION := UNVERSION.P_NO_VERSION;
   UPDATE UTAD
   SET DEF_UP = A_NEW_UP, IS_USER='2'
   WHERE AD=A_US
   RETURNING LC, LC_VERSION, SS, PERSON
   INTO L_LC, L_LC_VERSION, L_SS, L_DESCRIPTION;
   
   BEGIN
      INSERT INTO UTUPUS
      (UP, VERSION, US, US_VERSION)
      VALUES
      (A_NEW_UP, UNVERSION.P_NO_VERSION, A_US, UNVERSION.P_NO_VERSION);
   EXCEPTION
   WHEN DUP_VAL_ON_INDEX THEN
      NULL;
   END;
      
   L_EVENT_TP := 'ObjectUpdated';
   L_EV_SEQ_NR := -1;
   L_RESULT :=
         UNAPIEV.INSERTEVENT('ChangeDefUp4EnterpriseUser', UNAPIGEN.P_EVMGR_NAME, 'ad', A_US, L_LC, 
                             L_LC_VERSION, L_SS, L_EVENT_TP, 'version='||L_US_VERSION||
                             '#old_def_up='||A_OLD_UP||'#new_def_up='||A_NEW_UP,
                             L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;
   INSERT INTO UTADHS(AD, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                      WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
   VALUES (A_US, L_US_VERSION, A_US, L_DESCRIPTION, L_EVENT_TP, 
           'address "'||A_US||'" is updated.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, '', UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN OTHERS THEN
   UNAPIGEN.LOGERROR('ChangeDefUp4EnterpriseUser', 'Error occured when attempting to add enterprise user '||A_US||' to its user profile');
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('ChangeDefUp4EnterpriseUser', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'ChangeDefUp4EnterpriseUser'));
END CHANGEDEFUP4ENTERPRISEUSER;

FUNCTION GETSYSTEMDEFAULT
(A_SETTING_NAME     OUT    UNAPIGEN.VC20_TABLE_TYPE,   
 A_SETTING_VALUE    OUT    UNAPIGEN.VC255_TABLE_TYPE,  
 A_NR_OF_ROWS       IN OUT NUMBER,                     
 A_WHERE_CLAUSE     IN     VARCHAR2)                   
RETURN NUMBER IS
   
   L_ROW_VALUES     UNAPIGEN.VC4000_TABLE_TYPE;
   L_TABLE_NAME     VARCHAR2(40)                       := 'UTSYSTEM';
   L_NEXT_ROWS      NUMBER;
   
   L_CHR9_POS       NUMBER;
BEGIN
   
   L_NEXT_ROWS       := '0';
   
   
   
   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'ORDER BY setting_name'; 
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := 'WHERE setting_name = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                        ''' ORDER BY setting_name';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;
   
   
   
   L_RET_CODE := UNAPIEDITTABLE.GETTABLEDATA
                   (L_ROW_VALUES,
                    A_NR_OF_ROWS,
                    L_TABLE_NAME,
                    L_WHERE_CLAUSE,
                    L_NEXT_ROWS);
   
   
   IF L_RET_CODE = UNAPIGEN.DBERR_SUCCESS THEN
      FOR I IN 1..A_NR_OF_ROWS LOOP
         
         L_CHR9_POS := INSTR(L_ROW_VALUES(I), CHR(9), 1, 1);
         A_SETTING_NAME(I)  := SUBSTR(L_ROW_VALUES(I), 1           , L_CHR9_POS-1);
         A_SETTING_VALUE(I) := SUBSTR(L_ROW_VALUES(I), L_CHR9_POS+1);
      END LOOP;
   END IF;

   RETURN(L_RET_CODE);
EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetSystemDefault', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETSYSTEMDEFAULT;

FUNCTION SAVESYSTEMDEFAULT
(A_SETTING_NAME     IN    UNAPIGEN.VC20_TABLE_TYPE,     
 A_SETTING_VALUE    IN    UNAPIGEN.VC255_TABLE_TYPE,    
 A_NR_OF_ROWS       IN    NUMBER,                       
 A_MODIFY_REASON    IN    VARCHAR2)                     
RETURN NUMBER IS
   
   L_TABLE_NAME           VARCHAR2(40)                  := 'UTSYSTEM';                   
   L_WHERE_CLAUSE         VARCHAR2(511);
   L_NEXT_ROWS            NUMBER;
   L_ROW_VALUES           UNAPIGEN.VC4000_TABLE_TYPE;
   
   L_SYS_NR_OF_ROWS       NUMBER;
   
   
   CURSOR L_SYS_COUNT_CURSOR IS
      SELECT COUNT(*) NR
      FROM UTSYSTEM;
BEGIN
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   
   L_NEXT_ROWS       := '-1';

   FOR I IN 1..A_NR_OF_ROWS LOOP
      L_ROW_VALUES(I)   := A_SETTING_NAME(I)||CHR(9)||A_SETTING_VALUE(I);
   END LOOP;
   
   
   OPEN L_SYS_COUNT_CURSOR;
   FETCH L_SYS_COUNT_CURSOR INTO L_SYS_NR_OF_ROWS;
   CLOSE L_SYS_COUNT_CURSOR;
   
   IF L_SYS_NR_OF_ROWS = A_NR_OF_ROWS THEN
      
      L_WHERE_CLAUSE := NULL;
   ELSE
      L_WHERE_CLAUSE    := 'WHERE setting_name IN (';
      FOR I IN 1..A_NR_OF_ROWS LOOP
         L_WHERE_CLAUSE := L_WHERE_CLAUSE||''''||A_SETTING_NAME(I)||''',';
      END LOOP;
      
      L_WHERE_CLAUSE := SUBSTR(L_WHERE_CLAUSE, 1, LENGTH(L_WHERE_CLAUSE)-1);
      
      L_WHERE_CLAUSE := L_WHERE_CLAUSE||')';
   END IF;
      
   
   
   L_RET_CODE := UNAPIEDITTABLE.SAVETABLEDATA
                   (L_ROW_VALUES,
                    A_NR_OF_ROWS,
                    L_TABLE_NAME,
                    L_WHERE_CLAUSE,
                    L_NEXT_ROWS,
                    A_MODIFY_REASON);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
        UNAPIGEN.LOGERROR('SaveSystemDefault', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveSystemDefault'));
END SAVESYSTEMDEFAULT;

END UNAPIUP;
PACKAGE BODY unapigk AS

L_SQLERRM         VARCHAR2(255);
L_SQL_STRING      VARCHAR2(2000);
L_WHERE_CLAUSE    VARCHAR2(1000);
L_EVENT_TP        UTEV.EV_TP%TYPE;
L_RET_CODE        NUMBER;
L_RESULT          NUMBER;
L_FETCHED_ROWS    NUMBER;
L_EV_SEQ_NR       NUMBER;
STPERROR          EXCEPTION;

TABLE_DOES_NOT_EXIST EXCEPTION;
PRAGMA EXCEPTION_INIT (TABLE_DOES_NOT_EXIST, -942);


P_GK_CURSOR      INTEGER;

CURSOR L_TABLESPACE_CURSOR (L_TABLE_NAME VARCHAR2) IS
  SELECT TABLESPACE_NAME 
  FROM ALL_TABLES
  WHERE TABLE_NAME = L_TABLE_NAME
  AND OWNER = (SELECT SETTING_VALUE
               FROM UTSYSTEM 
               WHERE SETTING_NAME = 'DBA_NAME') ;

CURSOR L_INDEX_TABLESPACE_CURSOR (L_INDEX_NAME VARCHAR2) IS
  SELECT TABLESPACE_NAME 
  FROM ALL_INDEXES
  WHERE INDEX_NAME = L_INDEX_NAME
  AND OWNER = (SELECT SETTING_VALUE
               FROM UTSYSTEM 
               WHERE SETTING_NAME = 'DBA_NAME') ;



FUNCTION GETVERSION
   RETURN VARCHAR2
IS
BEGIN
   RETURN('06.07.00.00_00.13');
EXCEPTION
   WHEN OTHERS THEN
      RETURN (NULL);
END GETVERSION;

PROCEDURE DELETEGROUPKEYFROMTASK                           
(A_GK_TP               IN      VARCHAR2,                         
 A_GK                  IN      VARCHAR2)                   
IS

L_SEQ    INTEGER;

CURSOR L_TK_CURSOR (C_GK_TP VARCHAR2, C_GK VARCHAR2) IS
   SELECT DISTINCT TK_TP, TK, VERSION
   FROM UTTK
   WHERE COL_TP = C_GK_TP
     AND COL_ID = C_GK;

CURSOR L_TK_SEQ_CURSOR (C_TK_TP VARCHAR2, C_TK VARCHAR2, C_VERSION VARCHAR2) IS
   SELECT COL_ID
   FROM UTTK
   WHERE TK_TP = C_TK_TP
     AND VERSION = C_VERSION
     AND TK = C_TK
   ORDER BY SEQ;

CURSOR L_UPUS_CURSOR IS
   SELECT DISTINCT UP, US
   FROM UTUPUS;

BEGIN
   
   
   FOR L_TK_REC IN L_TK_CURSOR(A_GK_TP, A_GK) LOOP
      DELETE FROM UTTK
      WHERE COL_TP = A_GK_TP
        AND COL_ID = A_GK
        AND TK = L_TK_REC.TK
        AND TK_TP = L_TK_REC.TK_TP
        AND VERSION = L_TK_REC.VERSION;
      
      IF SQL%ROWCOUNT>0 THEN
         
         DELETE FROM UTUPTKDETAILS
         WHERE COL_TP = A_GK_TP
           AND COL_ID = A_GK
           AND TK = L_TK_REC.TK
           AND TK_TP = L_TK_REC.TK_TP;

         DELETE FROM UTUPUSTKDETAILS
         WHERE COL_TP = A_GK_TP
           AND COL_ID = A_GK
           AND TK = L_TK_REC.TK
           AND TK_TP = L_TK_REC.TK_TP;
           
         DELETE FROM UTTKSQL
         WHERE COL_TP = A_GK_TP
           AND COL_ID = A_GK
           AND TK = L_TK_REC.TK
           AND TK_TP = L_TK_REC.TK_TP
           AND VERSION = L_TK_REC.VERSION;

         
         
         
         UNAPIGEN.U4COMMIT;
         FOR L_UPUS_REC IN L_UPUS_CURSOR LOOP
            DELETE FROM UTUPUSTKVALUELISTS
            WHERE UP = L_UPUS_REC.UP
              AND US = L_UPUS_REC.US
              AND TK_TP = L_TK_REC.TK_TP
              AND TK = L_TK_REC.TK
              AND COL_ID = A_GK
              AND COL_TP = A_GK_TP;
            UNAPIGEN.U4COMMIT;
         END LOOP;

         
         L_SEQ := 0;
         FOR L_TK_SEQ_REC IN L_TK_SEQ_CURSOR(L_TK_REC.TK_TP, L_TK_REC.TK, L_TK_REC.VERSION) LOOP
            L_SEQ := L_SEQ+1;
            
            UPDATE UTTK
            SET SEQ = L_SEQ
            WHERE TK_TP = L_TK_REC.TK_TP
              AND TK = L_TK_REC.TK
              AND VERSION = L_TK_REC.VERSION
              AND COL_ID = L_TK_SEQ_REC.COL_ID;

            UPDATE UTUPTKDETAILS A
            SET A.SEQ = L_SEQ
            WHERE TK_TP = L_TK_REC.TK_TP
              AND TK = L_TK_REC.TK
              AND COL_ID = L_TK_SEQ_REC.COL_ID;

            UPDATE UTUPUSTKDETAILS A
            SET A.SEQ = L_SEQ
            WHERE TK_TP = L_TK_REC.TK_TP
              AND TK = L_TK_REC.TK
              AND COL_ID = L_TK_SEQ_REC.COL_ID;
            
            UNAPIGEN.U4COMMIT;
            FOR L_UPUS_REC IN L_UPUS_CURSOR LOOP
               UPDATE UTUPUSTKVALUELISTS
               SET SEQ = L_SEQ-1
               WHERE UP = L_UPUS_REC.UP
                 AND US = L_UPUS_REC.US
                 AND TK_TP = L_TK_REC.TK_TP
                 AND TK = L_TK_REC.TK
                 AND COL_ID = L_TK_SEQ_REC.COL_ID;
               UNAPIGEN.U4COMMIT;
            END LOOP;
         END LOOP;
      END IF;
   END LOOP;   
END DELETEGROUPKEYFROMTASK;



FUNCTION GETGROUPKEYSTLIST
(A_GK                  OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_DESCRIPTION         OUT     UNAPIGEN.VC40_TABLE_TYPE,   
 A_NR_OF_ROWS          IN OUT  NUMBER,                     
 A_WHERE_CLAUSE        IN      VARCHAR2,                   
 A_NEXT_ROWS           IN      NUMBER)                     
RETURN NUMBER IS

L_GK           VARCHAR2(20);
L_DESCRIPTION  VARCHAR2(40);

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_GK_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_GK_CURSOR);
         P_GK_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_GK_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
         L_WHERE_CLAUSE := 'ORDER BY gk, version';
      ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
         L_WHERE_CLAUSE := 'WHERE version_is_current = ''1'' '||
                           'AND gk = ''' || A_WHERE_CLAUSE ||
                           ''' ORDER BY gk, version';
      ELSE
         L_WHERE_CLAUSE := A_WHERE_CLAUSE;
      END IF;

      IF P_GK_CURSOR IS NULL THEN
         P_GK_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;

      L_SQL_STRING:= 'SELECT gk, description FROM dd'||UNAPIGEN.P_DD||'.uvgkst ' ||
                      L_WHERE_CLAUSE;
      DBMS_SQL.PARSE(P_GK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

      DBMS_SQL.DEFINE_COLUMN(P_GK_CURSOR, 1, L_GK, 20);
      DBMS_SQL.DEFINE_COLUMN(P_GK_CURSOR, 2, L_DESCRIPTION, 40);
      L_RESULT := DBMS_SQL.EXECUTE(P_GK_CURSOR);
   END IF;

   L_RESULT := DBMS_SQL.FETCH_ROWS(P_GK_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_GK_CURSOR, 1, L_GK);
      DBMS_SQL.COLUMN_VALUE(P_GK_CURSOR, 2, L_DESCRIPTION);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_GK(L_FETCHED_ROWS) := L_GK;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_GK_CURSOR);
      END IF;
   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_GK_CURSOR);
       P_GK_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   END IF;

   IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_GK_CURSOR);
      P_GK_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetGroupKeyStList', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (P_GK_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (P_GK_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETGROUPKEYSTLIST;



FUNCTION GETGROUPKEYST
(A_GK               OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_DESCRIPTION      OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_IS_PROTECTED     OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_VALUE_UNIQUE     OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_SINGLE_VALUED    OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_NEW_VAL_ALLOWED  OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_MANDATORY        OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_STRUCT_CREATED   OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_INHERIT_GK       OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_VALUE_LIST_TP    OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_DEFAULT_VALUE    OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_DSP_ROWS         OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_VAL_LENGTH       OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_VAL_START        OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_ASSIGN_TP        OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_ASSIGN_ID        OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_Q_TP             OUT    UNAPIGEN.CHAR2_TABLE_TYPE,   
 A_Q_ID             OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_Q_CHECK_AU       OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_Q_AU             OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_NR_OF_ROWS       IN OUT NUMBER,                      
 A_WHERE_CLAUSE     IN     VARCHAR2)                    
RETURN NUMBER IS

L_GK                VARCHAR2(20);
L_DESCRIPTION       VARCHAR2(40);
L_IS_PROTECTED      CHAR(1);
L_VALUE_UNIQUE      CHAR(1);
L_SINGLE_VALUED     CHAR(1);
L_NEW_VAL_ALLOWED   CHAR(1);
L_MANDATORY         CHAR(1);
L_STRUCT_CREATED    CHAR(1);
L_INHERIT_GK        CHAR(1);
L_VALUE_LIST_TP     CHAR(1);
L_DEFAULT_VALUE     VARCHAR2(40);
L_DSP_ROWS          NUMBER(3);
L_VAL_LENGTH        NUMBER(3);
L_VAL_START         NUMBER(3);
L_ASSIGN_TP         CHAR(1);
L_ASSIGN_ID         VARCHAR2(20);
L_Q_TP              CHAR(2);
L_Q_ID              VARCHAR2(20);
L_Q_CHECK_AU        CHAR(1);
L_Q_AU              VARCHAR2(20);
L_GK_CURSOR         INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'ORDER BY gk, version'; 
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := 'WHERE version_is_current = ''1'' '||
                        'AND gk = ''' || A_WHERE_CLAUSE || 
                        ''' ORDER BY gk, version';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_GK_CURSOR := DBMS_SQL.OPEN_CURSOR;

   L_SQL_STRING := 'SELECT gk, description, is_protected, value_unique, ' ||
                   'single_valued, new_val_allowed, mandatory, struct_created, inherit_gk,' ||
                   'value_list_tp, default_value, dsp_rows, val_length, val_start, ' ||
                   'assign_tp, assign_id, q_tp, q_id, q_check_au, q_au ' ||
                   'FROM dd' || UNAPIGEN.P_DD || '.uvgkst ' || L_WHERE_CLAUSE;
   DBMS_SQL.PARSE(L_GK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 1, L_GK, 20);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 2, L_DESCRIPTION, 40);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 3, L_IS_PROTECTED, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 4, L_VALUE_UNIQUE, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 5, L_SINGLE_VALUED, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 6, L_NEW_VAL_ALLOWED, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 7, L_MANDATORY, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 8, L_STRUCT_CREATED, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 9, L_INHERIT_GK, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 10, L_VALUE_LIST_TP, 1);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 11, L_DEFAULT_VALUE, 40);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 12, L_DSP_ROWS);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 13, L_VAL_LENGTH);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 14, L_VAL_START);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 15, L_ASSIGN_TP, 1);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 16, L_ASSIGN_ID, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 17, L_Q_TP, 2);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 18, L_Q_ID, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 19, L_Q_CHECK_AU, 1);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 20, L_Q_AU, 20);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_GK_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 1, L_GK);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 2, L_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 3, L_IS_PROTECTED);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 4, L_VALUE_UNIQUE);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 5, L_SINGLE_VALUED);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 6, L_NEW_VAL_ALLOWED);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 7, L_MANDATORY);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 8, L_STRUCT_CREATED);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 9, L_INHERIT_GK);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 10, L_VALUE_LIST_TP);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 11, L_DEFAULT_VALUE);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 12, L_DSP_ROWS);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 13, L_VAL_LENGTH);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 14, L_VAL_START);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 15, L_ASSIGN_TP);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 16, L_ASSIGN_ID);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 17, L_Q_TP);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 18, L_Q_ID);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 19, L_Q_CHECK_AU);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 20, L_Q_AU);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_GK (L_FETCHED_ROWS) := L_GK;
      A_DESCRIPTION (L_FETCHED_ROWS) := L_DESCRIPTION;
      A_IS_PROTECTED (L_FETCHED_ROWS) := L_IS_PROTECTED;
      A_VALUE_UNIQUE (L_FETCHED_ROWS) := L_VALUE_UNIQUE;
      A_SINGLE_VALUED (L_FETCHED_ROWS) := L_SINGLE_VALUED;
      A_NEW_VAL_ALLOWED (L_FETCHED_ROWS) := L_NEW_VAL_ALLOWED;
      A_MANDATORY (L_FETCHED_ROWS) := L_MANDATORY;
      A_STRUCT_CREATED (L_FETCHED_ROWS) := L_STRUCT_CREATED;
      A_INHERIT_GK (L_FETCHED_ROWS) := L_INHERIT_GK;
      A_VALUE_LIST_TP (L_FETCHED_ROWS) := L_VALUE_LIST_TP;
      A_DEFAULT_VALUE (L_FETCHED_ROWS) := L_DEFAULT_VALUE;
      A_DSP_ROWS(L_FETCHED_ROWS) := L_DSP_ROWS;
      A_VAL_LENGTH(L_FETCHED_ROWS) := L_VAL_LENGTH;
      A_VAL_START(L_FETCHED_ROWS) := L_VAL_START;
      A_ASSIGN_TP(L_FETCHED_ROWS) := L_ASSIGN_TP;
      A_ASSIGN_ID(L_FETCHED_ROWS) := L_ASSIGN_ID;
      A_Q_TP(L_FETCHED_ROWS) := L_Q_TP;
      A_Q_ID(L_FETCHED_ROWS) := L_Q_ID;
      A_Q_CHECK_AU(L_FETCHED_ROWS) := L_Q_CHECK_AU;
      A_Q_AU(L_FETCHED_ROWS) := L_Q_AU;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_GK_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_GK_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetGroupKeySt', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
     IF DBMS_SQL.IS_OPEN (L_GK_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_GK_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETGROUPKEYST;



FUNCTION GETGROUPKEYSTVALUE
(A_GK               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_VALUE            OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_NR_OF_ROWS       IN OUT  NUMBER,                    
 A_WHERE_CLAUSE     IN      VARCHAR2)                  
RETURN NUMBER IS

L_GK              VARCHAR2(20);
L_VALUE           VARCHAR2(40);
L_GK_CURSOR       INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'ORDER BY list.gk, list.version, list.seq'; 
   ELSIF
      UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := ', dd'||UNAPIGEN.P_DD||'.uvgkst st WHERE st.version_is_current = ''1'' '||
                        'AND list.version = st.version '||
                        'AND list.gk = st.gk '||
                        'AND list.gk = ''' || A_WHERE_CLAUSE || 
                        ''' ORDER BY list.seq';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_GK_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT list.gk, list.value FROM dd'||UNAPIGEN.P_DD||'.uvgkstlist list ' || L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_GK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 1, L_GK, 20);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 2, L_VALUE, 40);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_GK_CURSOR);

   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 1, L_GK);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 2, L_VALUE);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_GK(L_FETCHED_ROWS) := L_GK;
      A_VALUE(L_FETCHED_ROWS) := L_VALUE;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_GK_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_GK_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;
   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetGroupKeyStValue', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (L_GK_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_GK_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETGROUPKEYSTVALUE;



FUNCTION GETGROUPKEYSTSQL
(A_GK              OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_SQLTEXT         OUT     UNAPIGEN.VC255_TABLE_TYPE,  
 A_NR_OF_ROWS      IN OUT  NUMBER,                     
 A_WHERE_CLAUSE    IN      VARCHAR2)                   
RETURN NUMBER IS

L_GK              VARCHAR2(20);
L_SQLTEXT         VARCHAR2(255);
L_GK_CURSOR       INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'ORDER BY sql.gk, sql.version, sql.seq'; 
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := ', dd'||UNAPIGEN.P_DD||'.uvgkst st WHERE st.version_is_current = ''1'' '||
                        'AND sql.version = st.version '||
                        'AND sql.gk = st.gk '||
                        'AND sql.gk = ''' || A_WHERE_CLAUSE || 
                        ''' ORDER BY sql.seq';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_GK_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT sql.gk, sql.sqltext FROM dd'||UNAPIGEN.P_DD||'.uvgkstsql sql ' || L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_GK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 1, L_GK, 20);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 2, L_SQLTEXT, 255);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_GK_CURSOR);

   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 1, L_GK);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 2, L_SQLTEXT);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_GK(L_FETCHED_ROWS) := L_GK;
      A_SQLTEXT(L_FETCHED_ROWS) := L_SQLTEXT;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_GK_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_GK_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetGroupKeyStSql', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (L_GK_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_GK_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETGROUPKEYSTSQL;



FUNCTION SAVEGROUPKEYST
(A_GK               IN   VARCHAR2,                    
 A_DESCRIPTION      IN   VARCHAR2,                    
 A_IS_PROTECTED     IN   CHAR,                        
 A_VALUE_UNIQUE     IN   CHAR,                        
 A_SINGLE_VALUED    IN   CHAR,                        
 A_NEW_VAL_ALLOWED  IN   CHAR,                        
 A_MANDATORY        IN   CHAR,                        
 A_STRUCT_CREATED   IN   CHAR,                        
 A_INHERIT_GK       IN   CHAR,                        
 A_VALUE_LIST_TP    IN   CHAR,                        
 A_DEFAULT_VALUE    IN   VARCHAR2,                    
 A_DSP_ROWS         IN   NUMBER,                      
 A_VAL_LENGTH       IN   NUMBER,                      
 A_VAL_START        IN   NUMBER,                      
 A_ASSIGN_TP        IN   CHAR,                        
 A_ASSIGN_ID        IN   VARCHAR2,                    
 A_Q_TP             IN   CHAR,                        
 A_Q_ID             IN   VARCHAR2,                    
 A_Q_CHECK_AU       IN   CHAR,                        
 A_Q_AU             IN   VARCHAR2,                    
 A_VALUE            IN   UNAPIGEN.VC40_TABLE_TYPE,    
 A_SQLTEXT          IN   UNAPIGEN.VC255_TABLE_TYPE,   
 A_NR_OF_ROWS       IN   NUMBER,                      
 A_MODIFY_REASON    IN   VARCHAR2)                    
RETURN NUMBER IS

A_VERSION        VARCHAR2(20);
L_FOUND          BOOLEAN;
L_SEQ_NO         NUMBER;
L_GK             VARCHAR2(20);
L_STRUCT_CREATED CHAR(1);
L_LC             VARCHAR2(2);
L_LC_VERSION     VARCHAR2(20);
L_SS             VARCHAR2(2);
L_LOG_HS         CHAR(1);
L_ALLOW_MODIFY   CHAR(1);
L_ACTIVE         CHAR(1);
L_RULE_NR        NUMBER(5);

CURSOR L_GK_CURSOR IS
   SELECT GK
   FROM UTGKST
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_GK, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_IS_PROTECTED, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_PROTECTED;
      RAISE STPERROR;
   END IF;

   IF NVL(A_SINGLE_VALUED, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SINGLEVALUED;
      RAISE STPERROR;
   END IF;

   IF NVL(A_NEW_VAL_ALLOWED, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NEWVALALLOWED;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VALUE_UNIQUE, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UNIQUEGK;
      RAISE STPERROR;
   END IF;

   IF NVL(A_MANDATORY, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_MANDATORY;
      RAISE STPERROR;
   END IF;

   IF NVL(A_INHERIT_GK, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INHERITGK;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VALUE_LIST_TP, ' ') NOT IN ('F', 'Q') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_VALUELISTTP;
      RAISE STPERROR;
   END IF;

   IF NVL(A_ASSIGN_TP, ' ') = 'F' AND
      NVL(A_ASSIGN_ID, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   
   
   
   
   L_LC := '@L';
   L_SS := '@A';

   BEGIN
      SELECT VERSION
      INTO L_LC_VERSION
      FROM UTLC
      WHERE LC = '@L'
      AND VERSION_IS_CURRENT = '1';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOCURRENTLCVERSION;
      RAISE STPERROR;
   END;

   BEGIN
      SELECT ALLOW_MODIFY, ACTIVE
      INTO L_ALLOW_MODIFY, L_ACTIVE
      FROM UTSS
      WHERE SS = '@A';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR;
   END;
   
   BEGIN
      SELECT LOG_HS
      INTO L_LOG_HS
      FROM UTOBJECTS 
      WHERE OBJECT = 'gkst';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      
      
      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OBJTP;
      RAISE STPERROR;
   END;
   

   OPEN L_GK_CURSOR;
   FETCH L_GK_CURSOR
   INTO L_GK;
   IF L_GK_CURSOR%FOUND THEN
      L_FOUND := TRUE;
   ELSE
      L_FOUND := FALSE;
   END IF;
   CLOSE L_GK_CURSOR;

   IF L_FOUND THEN
      DELETE FROM UTGKST
      WHERE VERSION = A_VERSION
        AND GK = A_GK;

      DELETE FROM UTGKSTLIST
      WHERE VERSION = A_VERSION
        AND GK = A_GK;

      DELETE FROM UTGKSTSQL
      WHERE VERSION = A_VERSION
        AND GK = A_GK;
        
      L_EVENT_TP := 'GroupKeyUpdated';
   ELSE
      L_EVENT_TP := 'GroupKeyCreated';
   END IF;

   OPEN UNAPIGK.L_DBA_OBJECTS_CURSOR ('UTSTGK'||A_GK);
   FETCH UNAPIGK.L_DBA_OBJECTS_CURSOR INTO L_STRUCT_CREATED;
   CLOSE UNAPIGK.L_DBA_OBJECTS_CURSOR;
      
   INSERT INTO UTGKST (GK, VERSION, VERSION_IS_CURRENT, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ, EFFECTIVE_TILL, EFFECTIVE_TILL_TZ, DESCRIPTION, 
                       IS_PROTECTED, VALUE_UNIQUE, SINGLE_VALUED, NEW_VAL_ALLOWED, MANDATORY,
                       STRUCT_CREATED, INHERIT_GK, VALUE_LIST_TP, DEFAULT_VALUE, DSP_ROWS, VAL_LENGTH, 
                       VAL_START, ASSIGN_TP, ASSIGN_ID, Q_TP, Q_ID, Q_CHECK_AU, Q_AU,
                       LOG_HS, ALLOW_MODIFY, ACTIVE, LC, LC_VERSION, SS)
   VALUES (A_GK, A_VERSION, '1', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, NULL, A_DESCRIPTION, 
           A_IS_PROTECTED, A_VALUE_UNIQUE, A_SINGLE_VALUED, A_NEW_VAL_ALLOWED, A_MANDATORY, 
           L_STRUCT_CREATED, A_INHERIT_GK, A_VALUE_LIST_TP, A_DEFAULT_VALUE, A_DSP_ROWS, A_VAL_LENGTH, 
           A_VAL_START, A_ASSIGN_TP, A_ASSIGN_ID, A_Q_TP, A_Q_ID, A_Q_CHECK_AU, A_Q_AU, 
           L_LOG_HS, L_ALLOW_MODIFY, L_ACTIVE, L_LC, L_LC_VERSION, L_SS);

   IF A_VALUE_LIST_TP = 'Q' THEN
      FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
         IF NVL(A_SQLTEXT(L_SEQ_NO), ' ') <> ' ' THEN
            INSERT INTO UTGKSTSQL(GK, VERSION, SEQ, SQLTEXT)
            VALUES (A_GK, A_VERSION, L_SEQ_NO, A_SQLTEXT(L_SEQ_NO));
         END IF;
      END LOOP;
   ELSIF A_VALUE_LIST_TP = 'F' THEN
      FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
         IF NVL(A_VALUE(L_SEQ_NO), ' ') <> ' ' THEN
            INSERT INTO UTGKSTLIST(GK, VERSION, SEQ, VALUE)
            VALUES (A_GK, A_VERSION, L_SEQ_NO, A_VALUE(L_SEQ_NO));
         END IF;
      END LOOP;
   END IF;

   
   
   
   
   DELETE FROM UTEVRULES
   WHERE CUSTOM = '0'
     AND OBJECT_TP = 'st'
     AND EV_TP IN ('ObjectCreated', 'ObjectUpdated')
     AND AF LIKE '%''stgk''%'                             
     AND AF LIKE '%'''||A_GK||'''%';
   
   DELETE FROM UTEVRULES
   WHERE CUSTOM = '0'
     AND OBJECT_TP = 'st'
     AND EV_TP IN ('ObjectCreated', 'ObjectUpdated')
     AND AF LIKE 'UNGKASSIGN%'                             
     AND AF LIKE '%'''||A_GK||'''%';

   
   SELECT NVL(MAX(RULE_NR),0)+1
   INTO L_RULE_NR
   FROM UTEVRULES;
   
   IF A_ASSIGN_TP = 'T' THEN
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR, 'st', 'ObjectCreated', 
             'AssignGroupKey(''stgk'', '''||A_GK||''', ''~st@st~'', '||A_VAL_START||', '||A_VAL_LENGTH||')', 
             '0');
   ELSIF A_ASSIGN_TP = 'F' THEN
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR, 'st', 'ObjectCreated', 
             'UNGKASSIGN.'||A_ASSIGN_ID||'('''||A_GK||''')', '0');
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR+1, 'st', 'ObjectUpdated', 
             'UNGKASSIGN.'||A_ASSIGN_ID||'('''||A_GK||''')', '0');
   END IF;

   
   L_RULE_NR := 0;
   FOR C_EVRULE_REC IN (SELECT *
                        FROM UTEVRULES
                        ORDER BY RULE_NR) LOOP
      L_RULE_NR := L_RULE_NR + 1;
      IF C_EVRULE_REC.RULE_NR <> L_RULE_NR THEN
         UPDATE UTEVRULES
         SET RULE_NR = L_RULE_NR
         WHERE RULE_NR = C_EVRULE_REC.RULE_NR;
      END IF;
   END LOOP;

   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT ('SaveGroupKeySt', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                    '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;
   
















   IF NVL(L_LOG_HS, ' ') = '1' THEN
      IF L_EVENT_TP = 'GroupKeyCreated' THEN
         INSERT INTO UTGKSTHS (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                               WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_GK, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'group key "'||A_GK||'" is created.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                 L_EV_SEQ_NR);
      ELSE
         INSERT INTO UTGKSTHS (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                               WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_GK, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'group key "'||A_GK||'" is updated.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                 L_EV_SEQ_NR);
      END IF;
   ELSE
      
      
      IF L_EVENT_TP = 'GroupKeyCreated' THEN
         INSERT INTO UTGKSTHS (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                               WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_GK, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'group key "'||A_GK||'" is created.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                 L_EV_SEQ_NR);
      END IF;
   END IF;

   
   
   
   L_EV_SEQ_NR := -1;
   L_EVENT_TP := 'LoadEvRules';
   L_RESULT := UNAPIEV.BROADCASTEVENT ('SaveGroupKeySt', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                       '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;
   
   
   UNAPIGEN.NOTIFYTASKGKTODBA('ST', 
                               A_GK, 
                               A_VERSION, 
                               A_VALUE_UNIQUE );

   
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveGroupKeySt',SQLERRM);
   END IF;
   IF UNAPIGK.L_DBA_OBJECTS_CURSOR%ISOPEN THEN
      CLOSE UNAPIGK.L_DBA_OBJECTS_CURSOR;
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveGroupKeySt'));
END SAVEGROUPKEYST;



FUNCTION DELETEGROUPKEYST
(A_GK               IN     VARCHAR2,                   
 A_MODIFY_REASON    IN     VARCHAR2)                   
RETURN NUMBER IS

A_VERSION          VARCHAR2(20);

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_GK, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   
   IF UNAPIGEN.ISSYSTEM21CFR11COMPLIANT = UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTALLOWEDIN21CFR11;
      RAISE STPERROR;
   END IF;

   
   L_RESULT := DELETEGROUPKEYSTSTRUCTURES(A_GK);
   IF L_RESULT <> 0 AND
      L_RESULT <> UNAPIGEN.DBERR_STRUCTCREATED THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   ELSE
      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   DELETE FROM UTGKSTLIST
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   DELETE FROM UTGKSTSQL
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   DELETE FROM UTGKST
   WHERE VERSION = A_VERSION
     AND GK = A_GK;
     
   DELETE FROM UTGKSTHS
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   
   
   DELETE FROM UTEVRULES
   WHERE CUSTOM = '0'
     AND OBJECT_TP = 'st'
     AND EV_TP IN ('ObjectCreated', 'ObjectUpdated')
     AND AF LIKE '%''stgk''%'                             
     AND AF LIKE '%'''||A_GK||'''%';
   
   DELETE FROM UTEVRULES
   WHERE CUSTOM = '0'
     AND OBJECT_TP = 'st'
     AND EV_TP IN ('ObjectCreated', 'ObjectUpdated')
     AND AF LIKE 'UNGKASSIGN%'                             
     AND AF LIKE '%'''||A_GK||'''%';


   L_EVENT_TP := 'ObjectDeleted';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT('DeleteGroupKeySt', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                   '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);

   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   
   
   
   L_EV_SEQ_NR := -1;
   L_EVENT_TP := 'LoadEvRules';
   L_RESULT := UNAPIEV.BROADCASTEVENT ('DeleteGroupKeySt', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                       '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('DeleteGroupKeySt', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'DeleteGroupKeySt'));
END DELETEGROUPKEYST;



FUNCTION CREATEGROUPKEYSTSTRUCTURES
(A_GK                IN    VARCHAR2,               
 A_STOR_INITIAL      IN    VARCHAR2,               
 A_STOR_NEXT         IN    VARCHAR2,               
 A_STOR_MIN_EXTENTS  IN    NUMBER,                 
 A_STOR_PCT_INCREASE IN    NUMBER,                 
 A_STOR_PCT_FREE     IN    NUMBER,                 
 A_STOR_PCT_USED     IN    NUMBER                  
)
RETURN NUMBER IS

A_VERSION            VARCHAR2(20);
L_GKST_CURSOR        INTEGER;
L_GK_FOUND           BOOLEAN;
L_LOG_HS             CHAR(1);
L_STOR_INITIAL       VARCHAR2(20);
L_STOR_NEXT          VARCHAR2(20);
L_STOR_PCT_INCREASE  NUMBER;
L_STOR_PCT_FREE      NUMBER;
L_STOR_PCT_USED      NUMBER;
L_STOR_MIN_EXTENTS   NUMBER; 

L_TABLE_CREATED      BOOLEAN;
L_TABLESPACE         VARCHAR2(40);
L_INDEX_TABLESPACE   VARCHAR2(40);

CURSOR L_GK_CURSOR IS
SELECT *
FROM UTGKST
WHERE VERSION = A_VERSION
  AND GK = A_GK;

L_GK_REC       L_GK_CURSOR%ROWTYPE;

BEGIN

   L_SQLERRM := NULL;
   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   L_TABLE_CREATED := FALSE;
   
   OPEN L_GK_CURSOR;
   FETCH L_GK_CURSOR
   INTO L_GK_REC;
   L_GK_FOUND := L_GK_CURSOR%FOUND;
   CLOSE L_GK_CURSOR;

   IF NOT L_GK_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
      RAISE STPERROR;
   END IF;

   IF NVL(L_GK_REC.STRUCT_CREATED, '0') = '1' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_STRUCTCREATED;
      RAISE STPERROR;
   END IF;
   
   OPEN L_TABLESPACE_CURSOR ('UTST');
   FETCH L_TABLESPACE_CURSOR 
      INTO L_TABLESPACE;
   CLOSE L_TABLESPACE_CURSOR;

   OPEN L_INDEX_TABLESPACE_CURSOR ('UKST');
   FETCH L_INDEX_TABLESPACE_CURSOR 
      INTO L_INDEX_TABLESPACE;
   CLOSE L_INDEX_TABLESPACE_CURSOR;
   
   IF ( A_STOR_INITIAL IS NULL ) THEN
      L_RET_CODE := INITGROUPKEYDEFSTORAGE('ST', 
                             L_STOR_INITIAL, 
                             L_STOR_NEXT, 
                             L_STOR_MIN_EXTENTS, 
                             L_STOR_PCT_INCREASE, 
                             L_STOR_PCT_FREE, 
                             L_STOR_PCT_USED);
   ELSE
      L_STOR_INITIAL      := A_STOR_INITIAL;
      L_STOR_NEXT         := A_STOR_NEXT;
      L_STOR_MIN_EXTENTS  := A_STOR_MIN_EXTENTS;
      L_STOR_PCT_INCREASE := A_STOR_PCT_INCREASE;
      L_STOR_PCT_FREE     := A_STOR_PCT_FREE;
      L_STOR_PCT_USED     := A_STOR_PCT_USED;
   END IF;

    
    
   
   
   

   
   
   
   
   
   
   
   
   
   L_GKST_CURSOR := DBMS_SQL.OPEN_CURSOR;
   
   L_SQL_STRING := 'CREATE TABLE utstgk' || A_GK ||
                   '(' || A_GK || ' VARCHAR2(40),'||
                   'st VARCHAR2(20),' ||
                   'version VARCHAR2(20),' ||
                   'CONSTRAINT ukstgk' || A_GK ||
                   ' PRIMARY KEY(' || A_GK ||',st, version)' ||
                   ' USING INDEX TABLESPACE '|| L_INDEX_TABLESPACE ||
                   ' STORAGE (INITIAL '      || L_STOR_INITIAL || 
                             ' NEXT '        || L_STOR_NEXT ||
                             ' PCTINCREASE ' || TO_CHAR(L_STOR_PCT_INCREASE) || ') ' ||
                   ' PCTFREE ' || TO_CHAR(L_STOR_PCT_FREE) ;

   IF L_GK_REC.VALUE_UNIQUE = '1' THEN
      L_SQL_STRING :=  L_SQL_STRING || ',CONSTRAINT ucstgk' || A_GK ||
                     ' UNIQUE(' || A_GK || ')'||
                     ' USING INDEX TABLESPACE '|| L_INDEX_TABLESPACE || 
                     ' STORAGE (INITIAL '      || L_STOR_INITIAL || 
                               ' NEXT '        || L_STOR_NEXT ||
                               ' PCTINCREASE ' || TO_CHAR(L_STOR_PCT_INCREASE) || ') ' ||
                     ' PCTFREE ' || TO_CHAR(L_STOR_PCT_FREE) ;
   END IF;
   
   L_SQL_STRING := L_SQL_STRING || ') TABLESPACE '          || L_TABLESPACE || 
                                    ' STORAGE (INITIAL '    || L_STOR_INITIAL || 
                                             ' NEXT '       || L_STOR_NEXT || 
                                             ' PCTINCREASE '|| TO_CHAR(L_STOR_PCT_INCREASE)|| 
                                             ' MINEXTENTS ' || TO_CHAR(L_STOR_MIN_EXTENTS)|| 
                                              ')'           ||
                                    ' PCTFREE ' || TO_CHAR(L_STOR_PCT_FREE) ||
                                    ' PCTUSED ' || TO_CHAR(L_STOR_PCT_USED) ;

   DBMS_SQL.PARSE(L_GKST_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   L_RESULT := DBMS_SQL.EXECUTE(L_GKST_CURSOR);
   L_TABLE_CREATED := TRUE;
   
   
   
   
   
   
   
   L_SQL_STRING := 'CREATE INDEX uistgk'|| A_GK ||
                   ' ON utstgk' || A_GK || '(st, version) ' ||
                   ' STORAGE (INITIAL '    || L_STOR_INITIAL || 
                            ' NEXT '       || L_STOR_NEXT || 
                            ' PCTINCREASE '|| TO_CHAR(L_STOR_PCT_INCREASE)|| 
                            ' MINEXTENTS ' || TO_CHAR(L_STOR_MIN_EXTENTS)|| 
                            ')'           ||
                   ' PCTFREE ' || TO_CHAR(L_STOR_PCT_FREE) ||
                   ' TABLESPACE ' || L_INDEX_TABLESPACE;
   DBMS_SQL.PARSE(L_GKST_CURSOR, L_SQL_STRING, DBMS_SQL.V7);
   L_RESULT := DBMS_SQL.EXECUTE(L_GKST_CURSOR);

   DBMS_SQL.CLOSE_CURSOR(L_GKST_CURSOR);

   
   UPDATE UTGKST
   SET STRUCT_CREATED = '1'
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   
   
   
   L_RESULT := CREATEGROUPKEYSTENTRIES(A_GK);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      L_SQLERRM := 'CreateGroupKeyStEntries returned '||L_RESULT||' for gk='||A_GK;
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;

   
   L_RESULT := UNAPIGK.CREATEUSERSTRUCTSFORGROUPKEY('ST', A_GK);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      L_SQLERRM := 'CreateUserStructsForGroupKey returned '||L_RESULT||' for gk_tp=ST#gk='||A_GK;
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   
   L_EVENT_TP := 'GroupKeyStructuresCreated';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT ('CreateGroupKeyStStructures', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                    '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;
   
   BEGIN
      SELECT LOG_HS
      INTO L_LOG_HS
      FROM UTOBJECTS 
      WHERE OBJECT = 'gkst';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      
      
      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OBJTP;
      RAISE STPERROR;
   END;
   
   IF NVL(L_LOG_HS, ' ') = '1' THEN
      INSERT INTO UTGKSTHS (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                            WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES (A_GK, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
              'Database objects for group key "'||A_GK||'" are created.', 
              CURRENT_TIMESTAMP,CURRENT_TIMESTAMP, NULL, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('CreateGroupKeyStStructures', SQLERRM);
      UNAPIGEN.LOGERROR('CreateGroupKeyStStructures', 'HELP for DBA:'||SUBSTR(L_SQL_STRING,1,235));
      IF (LENGTH(L_SQL_STRING)>235) THEN
         UNAPIGEN.LOGERROR('CreateGroupKeyStStructures', 'HELP for DBA:'||SUBSTR(L_SQL_STRING,236,235));
      END IF;
   END IF;
   IF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('CreateGroupKeyStStructures', SUBSTR(L_SQLERRM,1,235));
   END IF;
   IF L_GK_CURSOR%ISOPEN THEN
      CLOSE L_GK_CURSOR;
   END IF;
   IF L_TABLE_CREATED THEN
      
      BEGIN
         L_SQL_STRING := 'DROP TABLE utstgk' || A_GK;
         DBMS_SQL.PARSE(L_GKST_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         L_RESULT := DBMS_SQL.EXECUTE(L_GKST_CURSOR);
      EXCEPTION
      WHEN OTHERS THEN
         NULL;
      END;
   END IF;
   IF DBMS_SQL.IS_OPEN (L_GKST_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_GKST_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'CreateGroupKeyStStructures'));
END CREATEGROUPKEYSTSTRUCTURES;



FUNCTION DELETEGROUPKEYSTSTRUCTURES
(A_GK    IN    VARCHAR2)                         
RETURN NUMBER IS

A_VERSION         VARCHAR2(20);
L_GKST_CURSOR     INTEGER;
L_STRUCT_CREATED  CHAR(1);
L_GK_FOUND        BOOLEAN;
L_LOG_HS          CHAR(1);

CURSOR L_GK_CURSOR IS
SELECT NVL(STRUCT_CREATED, '0')
FROM UTGKST
WHERE VERSION = A_VERSION
  AND GK = A_GK;

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   OPEN L_GK_CURSOR;
   FETCH L_GK_CURSOR
   INTO L_STRUCT_CREATED;
   L_GK_FOUND := L_GK_CURSOR%FOUND;
   CLOSE L_GK_CURSOR;

   IF NOT L_GK_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
      RAISE STPERROR;
   END IF;

   IF NVL(L_STRUCT_CREATED, '0') = '0' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_STRUCTCREATED;
      RAISE STPERROR;
   END IF;

   
   IF UNAPIGEN.ISSYSTEM21CFR11COMPLIANT = UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTALLOWEDIN21CFR11;
      RAISE STPERROR;
   END IF;

      
   L_RESULT := UNAPIGK.DELETEUSERSTRUCTSFORGROUPKEY('ST', A_GK);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      L_SQLERRM := 'DeleteUserStructsForGroupKey returned '||L_RESULT||' for gk_tp=ST#gk='||A_GK;
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   
   DELETE FROM UTSTGK
   WHERE GK = A_GK;
   
   BEGIN
      L_GKST_CURSOR := DBMS_SQL.OPEN_CURSOR;
      L_SQL_STRING := 'DROP TABLE utstgk' || A_GK ;
      DBMS_SQL.PARSE(L_GKST_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      L_RESULT := DBMS_SQL.EXECUTE(L_GKST_CURSOR);
      DBMS_SQL.CLOSE_CURSOR(L_GKST_CURSOR);
   EXCEPTION
   WHEN TABLE_DOES_NOT_EXIST THEN
      
      NULL;
   END;

   
   UNAPIGK.DELETEGROUPKEYFROMTASK('stgk', A_GK);
   
   
   UPDATE UTGKST
   SET STRUCT_CREATED = '0'
   WHERE VERSION = A_VERSION
     AND GK = A_GK;
   
   L_EVENT_TP := 'GroupKeyStructuresDeleted';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT ('DeleteGroupKeyStStructures', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                    '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;
   
   BEGIN
      SELECT LOG_HS
      INTO L_LOG_HS
      FROM UTOBJECTS 
      WHERE OBJECT = 'gkst';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      
      
      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OBJTP;
      RAISE STPERROR;
   END;

   IF NVL(L_LOG_HS, ' ') = '1' THEN
      INSERT INTO UTGKSTHS (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                            WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES (A_GK, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
              'Database objects for group key "'||A_GK||'" are deleted.', 
              CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('DeleteGroupKeyStStructures', SQLERRM);
   END IF;
   IF L_GK_CURSOR%ISOPEN THEN
      CLOSE L_GK_CURSOR;
   END IF;
   IF DBMS_SQL.IS_OPEN (L_GKST_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_GKST_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'DeleteGroupKeyStStructures'));
END DELETEGROUPKEYSTSTRUCTURES;



FUNCTION CREATEGROUPKEYSTENTRIES                   
(A_GK    IN    VARCHAR2)                         
RETURN NUMBER IS

A_VERSION      VARCHAR2(20);
L_GKST_CURSOR  INTEGER;
L_GK_FOUND     BOOLEAN;

CURSOR L_GK_CURSOR IS
   SELECT *
   FROM UTGKST
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

L_GK_REC       L_GK_CURSOR%ROWTYPE;

BEGIN
   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   OPEN L_GK_CURSOR;
   FETCH L_GK_CURSOR
   INTO L_GK_REC;
   L_GK_FOUND := L_GK_CURSOR%FOUND;
   CLOSE L_GK_CURSOR;

   IF NOT L_GK_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
      RAISE STPERROR;
   END IF;

   IF NVL(L_GK_REC.STRUCT_CREATED, '0') = '0' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_STRUCTCREATED;
      RAISE STPERROR;
   END IF;

   
   
   
   
   L_GKST_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'INSERT INTO utstgk'||A_GK||'('||A_GK||', st, version) '||
                   'SELECT value, st, version '||
                   'FROM utstgk '||
                   'WHERE gk = '''||A_GK||''' AND value IS NOT NULL';
   DBMS_SQL.PARSE(L_GKST_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   
   BEGIN
      L_RESULT := DBMS_SQL.EXECUTE(L_GKST_CURSOR);
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UNIQUEGK;
         RAISE STPERROR;
   END;
   
   DBMS_SQL.CLOSE_CURSOR(L_GKST_CURSOR);

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('CreateGroupKeyStEntries', SQLERRM);
   END IF;
   IF L_GK_CURSOR%ISOPEN THEN
      CLOSE L_GK_CURSOR;
   END IF;
   IF DBMS_SQL.IS_OPEN (L_GKST_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_GKST_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'CreateGroupKeyStEntries'));
END CREATEGROUPKEYSTENTRIES;



FUNCTION DELETEGROUPKEYSTENTRIES
(A_GK    IN    VARCHAR2)                         
RETURN NUMBER IS

A_VERSION         VARCHAR2(20);
L_GKST_CURSOR     INTEGER;
L_STRUCT_CREATED  CHAR(1);
L_GK_FOUND        BOOLEAN;

CURSOR L_GK_CURSOR IS
SELECT NVL(STRUCT_CREATED, '0')
FROM UTGKST
WHERE VERSION = A_VERSION
  AND GK = A_GK;

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   OPEN L_GK_CURSOR;
   FETCH L_GK_CURSOR
   INTO L_STRUCT_CREATED;
   L_GK_FOUND := L_GK_CURSOR%FOUND;
   CLOSE L_GK_CURSOR;

   IF NOT L_GK_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
      RAISE STPERROR;
   END IF;

   IF NVL(L_STRUCT_CREATED, '0') = '0' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_STRUCTCREATED;
      RAISE STPERROR;
   END IF;

   
   IF UNAPIGEN.ISSYSTEM21CFR11COMPLIANT = UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTALLOWEDIN21CFR11;
      RAISE STPERROR;
   END IF;

   DELETE FROM UTSTGK
   WHERE GK = A_GK;

   L_GKST_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'TRUNCATE TABLE utstgk' || A_GK;
   DBMS_SQL.PARSE(L_GKST_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   L_RESULT := DBMS_SQL.EXECUTE(L_GKST_CURSOR);

   DBMS_SQL.CLOSE_CURSOR(L_GKST_CURSOR);

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('DeleteGroupKeyStEntries', SQLERRM);
   END IF;
   IF L_GK_CURSOR%ISOPEN THEN
      CLOSE L_GK_CURSOR;
   END IF;
   IF DBMS_SQL.IS_OPEN (L_GKST_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_GKST_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'DeleteGroupKeyStEntries'));
END DELETEGROUPKEYSTENTRIES;



FUNCTION GETGROUPKEYSCLIST
(A_GK                  OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_DESCRIPTION         OUT     UNAPIGEN.VC40_TABLE_TYPE,   
 A_NR_OF_ROWS          IN OUT  NUMBER,                     
 A_WHERE_CLAUSE        IN      VARCHAR2,                   
 A_NEXT_ROWS           IN      NUMBER)                     
RETURN NUMBER IS

L_GK           VARCHAR2(20);
L_DESCRIPTION  VARCHAR2(40);

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_GK_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_GK_CURSOR);
         P_GK_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_GK_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
         L_WHERE_CLAUSE := 'ORDER BY gk, version'; 
      ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
         L_WHERE_CLAUSE := 'WHERE version_is_current = ''1'' '||
                           'AND gk = ''' || A_WHERE_CLAUSE || 
                           ''' ORDER BY gk, version';
      ELSE
         L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
      END IF;

      IF P_GK_CURSOR IS NULL THEN
         P_GK_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;

      L_SQL_STRING:= 'SELECT gk, description FROM dd'||UNAPIGEN.P_DD||'.uvgksc ' ||
                      L_WHERE_CLAUSE;
      DBMS_SQL.PARSE(P_GK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

      DBMS_SQL.DEFINE_COLUMN(P_GK_CURSOR, 1, L_GK, 20);
      DBMS_SQL.DEFINE_COLUMN(P_GK_CURSOR, 2, L_DESCRIPTION, 40);
      L_RESULT := DBMS_SQL.EXECUTE(P_GK_CURSOR);
   END IF;

   L_RESULT := DBMS_SQL.FETCH_ROWS(P_GK_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_GK_CURSOR, 1, L_GK);
      DBMS_SQL.COLUMN_VALUE(P_GK_CURSOR, 2, L_DESCRIPTION);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_GK(L_FETCHED_ROWS) := L_GK;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_GK_CURSOR);
      END IF;
   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_GK_CURSOR);
       P_GK_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   END IF;

   IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_GK_CURSOR);
      P_GK_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetGroupKeyScList', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (P_GK_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (P_GK_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETGROUPKEYSCLIST;



FUNCTION GETGROUPKEYSC
(A_GK               OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_DESCRIPTION      OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_IS_PROTECTED     OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_VALUE_UNIQUE     OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_SINGLE_VALUED    OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_NEW_VAL_ALLOWED  OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_MANDATORY        OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_STRUCT_CREATED   OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_INHERIT_GK       OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_VALUE_LIST_TP    OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_DEFAULT_VALUE    OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_DSP_ROWS         OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_VAL_LENGTH       OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_VAL_START        OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_ASSIGN_TP        OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_ASSIGN_ID        OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_Q_TP             OUT    UNAPIGEN.CHAR2_TABLE_TYPE,   
 A_Q_ID             OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_Q_CHECK_AU       OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_Q_AU             OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_NR_OF_ROWS       IN OUT NUMBER,                      
 A_WHERE_CLAUSE     IN     VARCHAR2)                    
RETURN NUMBER IS

L_GK                VARCHAR2(20);
L_DESCRIPTION       VARCHAR2(40);
L_IS_PROTECTED      CHAR(1);
L_VALUE_UNIQUE      CHAR(1);
L_SINGLE_VALUED     CHAR(1);
L_NEW_VAL_ALLOWED   CHAR(1);
L_MANDATORY         CHAR(1);
L_STRUCT_CREATED    CHAR(1);
L_INHERIT_GK        CHAR(1);
L_VALUE_LIST_TP     CHAR(1);
L_DEFAULT_VALUE     VARCHAR2(40);
L_DSP_ROWS          NUMBER(3);
L_VAL_LENGTH        NUMBER(3);
L_VAL_START         NUMBER(3);
L_ASSIGN_TP         CHAR(1);
L_ASSIGN_ID         VARCHAR2(20);
L_Q_TP              CHAR(2);
L_Q_ID              VARCHAR2(20);
L_Q_CHECK_AU        CHAR(1);
L_Q_AU              VARCHAR2(20);
L_GK_CURSOR         INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'ORDER BY gk, version'; 
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := 'WHERE version_is_current = ''1'' '||
                        'AND gk = ''' || A_WHERE_CLAUSE || 
                        ''' ORDER BY gk, version';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_GK_CURSOR := DBMS_SQL.OPEN_CURSOR;

   L_SQL_STRING := 'SELECT gk, description, is_protected, value_unique, ' ||
                   'single_valued, new_val_allowed, mandatory, struct_created, inherit_gk,' ||
                   'value_list_tp, default_value, dsp_rows, val_length, val_start, ' ||
                   'assign_tp, assign_id, q_tp, q_id, q_check_au, q_au ' ||
                   'FROM dd' || UNAPIGEN.P_DD || '.uvgksc ' || L_WHERE_CLAUSE;
   DBMS_SQL.PARSE(L_GK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 1, L_GK, 20);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 2, L_DESCRIPTION, 40);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 3, L_IS_PROTECTED, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 4, L_VALUE_UNIQUE, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 5, L_SINGLE_VALUED, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 6, L_NEW_VAL_ALLOWED, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 7, L_MANDATORY, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 8, L_STRUCT_CREATED, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 9, L_INHERIT_GK, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 10, L_VALUE_LIST_TP, 1);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 11, L_DEFAULT_VALUE, 40);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 12, L_DSP_ROWS);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 13, L_VAL_LENGTH);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 14, L_VAL_START);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 15, L_ASSIGN_TP, 1);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 16, L_ASSIGN_ID, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 17, L_Q_TP, 2);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 18, L_Q_ID, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 19, L_Q_CHECK_AU, 1);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 20, L_Q_AU, 20);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_GK_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 1, L_GK);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 2, L_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 3, L_IS_PROTECTED);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 4, L_VALUE_UNIQUE);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 5, L_SINGLE_VALUED);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 6, L_NEW_VAL_ALLOWED);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 7, L_MANDATORY);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 8, L_STRUCT_CREATED);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 9, L_INHERIT_GK);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 10, L_VALUE_LIST_TP);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 11, L_DEFAULT_VALUE);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 12, L_DSP_ROWS);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 13, L_VAL_LENGTH);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 14, L_VAL_START);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 15, L_ASSIGN_TP);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 16, L_ASSIGN_ID);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 17, L_Q_TP);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 18, L_Q_ID);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 19, L_Q_CHECK_AU);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 20, L_Q_AU);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_GK (L_FETCHED_ROWS) := L_GK;
      A_DESCRIPTION (L_FETCHED_ROWS) := L_DESCRIPTION;
      A_IS_PROTECTED (L_FETCHED_ROWS) := L_IS_PROTECTED;
      A_VALUE_UNIQUE (L_FETCHED_ROWS) := L_VALUE_UNIQUE;
      A_SINGLE_VALUED (L_FETCHED_ROWS) := L_SINGLE_VALUED;
      A_NEW_VAL_ALLOWED (L_FETCHED_ROWS) := L_NEW_VAL_ALLOWED;
      A_MANDATORY (L_FETCHED_ROWS) := L_MANDATORY;
      A_STRUCT_CREATED (L_FETCHED_ROWS) := L_STRUCT_CREATED;
      A_INHERIT_GK (L_FETCHED_ROWS) := L_INHERIT_GK;
      A_VALUE_LIST_TP (L_FETCHED_ROWS) := L_VALUE_LIST_TP;
      A_DEFAULT_VALUE (L_FETCHED_ROWS) := L_DEFAULT_VALUE;
      A_DSP_ROWS(L_FETCHED_ROWS) := L_DSP_ROWS;
      A_VAL_LENGTH(L_FETCHED_ROWS) := L_VAL_LENGTH;
      A_VAL_START(L_FETCHED_ROWS) := L_VAL_START;
      A_ASSIGN_TP(L_FETCHED_ROWS) := L_ASSIGN_TP;
      A_ASSIGN_ID(L_FETCHED_ROWS) := L_ASSIGN_ID;
      A_Q_TP(L_FETCHED_ROWS) := L_Q_TP;
      A_Q_ID(L_FETCHED_ROWS) := L_Q_ID;
      A_Q_CHECK_AU(L_FETCHED_ROWS) := L_Q_CHECK_AU;
      A_Q_AU(L_FETCHED_ROWS) := L_Q_AU;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_GK_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_GK_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetGroupKeySc', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
     IF DBMS_SQL.IS_OPEN (L_GK_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_GK_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETGROUPKEYSC;



FUNCTION GETGROUPKEYSCVALUE
(A_GK               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_VALUE            OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_NR_OF_ROWS       IN OUT  NUMBER,                    
 A_WHERE_CLAUSE     IN      VARCHAR2)                  
RETURN NUMBER IS

L_GK              VARCHAR2(20);
L_VALUE           VARCHAR2(40);
L_GK_CURSOR       INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'ORDER BY list.gk, list.version, list.seq'; 
   ELSIF
      UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := ', dd'||UNAPIGEN.P_DD||'.uvgksc sc WHERE sc.version_is_current = ''1'' '||
                        'AND list.version = sc.version '||
                        'AND list.gk = sc.gk '||
                        'AND list.gk = ''' || A_WHERE_CLAUSE || 
                        ''' ORDER BY list.seq';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_GK_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT list.gk, list.value FROM dd'||UNAPIGEN.P_DD||'.uvgksclist list ' || L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_GK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 1, L_GK, 20);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 2, L_VALUE, 40);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_GK_CURSOR);

   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 1, L_GK);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 2, L_VALUE);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_GK(L_FETCHED_ROWS) := L_GK;
      A_VALUE(L_FETCHED_ROWS) := L_VALUE;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_GK_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_GK_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;
   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetGroupKeyScValue', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (L_GK_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_GK_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETGROUPKEYSCVALUE;



FUNCTION GETGROUPKEYSCSQL
(A_GK              OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_SQLTEXT         OUT     UNAPIGEN.VC255_TABLE_TYPE,  
 A_NR_OF_ROWS      IN OUT  NUMBER,                     
 A_WHERE_CLAUSE    IN      VARCHAR2)                   
RETURN NUMBER IS

L_GK              VARCHAR2(20);
L_SQLTEXT         VARCHAR2(255);
L_GK_CURSOR       INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'ORDER BY sql.gk, sql.version, sql.seq'; 
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := ', dd'||UNAPIGEN.P_DD||'.uvgksc sc WHERE sc.version_is_current = ''1'' '||
                        'AND sql.version = sc.version '||
                        'AND sql.gk = sc.gk '||
                        'AND sql.gk = ''' || A_WHERE_CLAUSE || 
                        ''' ORDER BY sql.seq';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_GK_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT sql.gk, sql.sqltext FROM dd'||UNAPIGEN.P_DD||'.uvgkscsql sql ' || L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_GK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 1, L_GK, 20);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 2, L_SQLTEXT, 255);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_GK_CURSOR);

   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 1, L_GK);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 2, L_SQLTEXT);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_GK(L_FETCHED_ROWS) := L_GK;
      A_SQLTEXT(L_FETCHED_ROWS) := L_SQLTEXT;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_GK_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_GK_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetGroupKeyScSql', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (L_GK_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_GK_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETGROUPKEYSCSQL;



FUNCTION SAVEGROUPKEYSC
(A_GK               IN   VARCHAR2,                    
 A_DESCRIPTION      IN   VARCHAR2,                    
 A_IS_PROTECTED     IN   CHAR,                        
 A_VALUE_UNIQUE     IN   CHAR,                        
 A_SINGLE_VALUED    IN   CHAR,                        
 A_NEW_VAL_ALLOWED  IN   CHAR,                        
 A_MANDATORY        IN   CHAR,                        
 A_STRUCT_CREATED   IN   CHAR,                        
 A_INHERIT_GK       IN   CHAR,                        
 A_VALUE_LIST_TP    IN   CHAR,                        
 A_DEFAULT_VALUE    IN   VARCHAR2,                    
 A_DSP_ROWS         IN   NUMBER,                      
 A_VAL_LENGTH       IN   NUMBER,                      
 A_VAL_START        IN   NUMBER,                      
 A_ASSIGN_TP        IN   CHAR,                        
 A_ASSIGN_ID        IN   VARCHAR2,                    
 A_Q_TP             IN   CHAR,                        
 A_Q_ID             IN   VARCHAR2,                    
 A_Q_CHECK_AU       IN   CHAR,                        
 A_Q_AU             IN   VARCHAR2,                    
 A_VALUE            IN   UNAPIGEN.VC40_TABLE_TYPE,    
 A_SQLTEXT          IN   UNAPIGEN.VC255_TABLE_TYPE,   
 A_NR_OF_ROWS       IN   NUMBER,                      
 A_MODIFY_REASON    IN   VARCHAR2)                    
RETURN NUMBER IS

A_VERSION        VARCHAR2(20);
L_FOUND          BOOLEAN;
L_SEQ_NO         NUMBER;
L_GK             VARCHAR2(20);
L_STRUCT_CREATED CHAR(1);
L_LC             VARCHAR2(2);
L_LC_VERSION     VARCHAR2(20);
L_SS             VARCHAR2(2);
L_LOG_HS         CHAR(1);
L_ALLOW_MODIFY   CHAR(1);
L_ACTIVE         CHAR(1);
L_RULE_NR        NUMBER(5);

CURSOR L_GK_CURSOR IS
SELECT GK 
FROM UTGKSC
WHERE VERSION = A_VERSION
  AND GK = A_GK;

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_GK, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_IS_PROTECTED, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_PROTECTED;
      RAISE STPERROR;
   END IF;

   IF NVL(A_SINGLE_VALUED, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SINGLEVALUED;
      RAISE STPERROR;
   END IF;

   IF NVL(A_NEW_VAL_ALLOWED, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NEWVALALLOWED;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VALUE_UNIQUE, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UNIQUEGK;
      RAISE STPERROR;
   END IF;

   IF NVL(A_MANDATORY, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_MANDATORY;
      RAISE STPERROR;
   END IF;

   IF NVL(A_INHERIT_GK, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INHERITGK;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VALUE_LIST_TP, ' ') NOT IN ('F', 'Q') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_VALUELISTTP;
      RAISE STPERROR;
   END IF;

   IF NVL(A_ASSIGN_TP, ' ') IN ('F', 'I') AND
      NVL(A_ASSIGN_ID, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   
   
   
   
   L_LC := '@L';
   L_SS := '@A';

   BEGIN
      SELECT VERSION
      INTO L_LC_VERSION
      FROM UTLC
      WHERE LC = '@L'
      AND VERSION_IS_CURRENT = '1';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOCURRENTLCVERSION;
      RAISE STPERROR;
   END;

   BEGIN
      SELECT ALLOW_MODIFY, ACTIVE
      INTO L_ALLOW_MODIFY, L_ACTIVE
      FROM UTSS
      WHERE SS = '@A';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR;
   END;
   
   BEGIN
      SELECT LOG_HS
      INTO L_LOG_HS
      FROM UTOBJECTS 
      WHERE OBJECT = 'gksc';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      
      
      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OBJTP;
      RAISE STPERROR;
   END;
   

   OPEN L_GK_CURSOR;
   FETCH L_GK_CURSOR
   INTO L_GK;
   IF L_GK_CURSOR%FOUND THEN
      L_FOUND := TRUE;
   ELSE
      L_FOUND := FALSE;
   END IF;
   CLOSE L_GK_CURSOR;

   IF L_FOUND THEN
      DELETE FROM UTGKSC
      WHERE VERSION = A_VERSION
        AND GK = A_GK;

      DELETE FROM UTGKSCLIST
      WHERE VERSION = A_VERSION
        AND GK = A_GK;

      DELETE FROM UTGKSCSQL
      WHERE VERSION = A_VERSION
        AND GK = A_GK;
        
      L_EVENT_TP := 'GroupKeyUpdated';
   ELSE
      L_EVENT_TP := 'GroupKeyCreated';
   END IF;
   
   OPEN UNAPIGK.L_DBA_OBJECTS_CURSOR ('UTSCGK'||A_GK);
   FETCH UNAPIGK.L_DBA_OBJECTS_CURSOR INTO L_STRUCT_CREATED;
   CLOSE UNAPIGK.L_DBA_OBJECTS_CURSOR;

   INSERT INTO UTGKSC (GK, VERSION, VERSION_IS_CURRENT, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ, EFFECTIVE_TILL, EFFECTIVE_TILL_TZ, 
                       DESCRIPTION, IS_PROTECTED, VALUE_UNIQUE, SINGLE_VALUED, NEW_VAL_ALLOWED, MANDATORY,
                       STRUCT_CREATED, INHERIT_GK, VALUE_LIST_TP, DEFAULT_VALUE, DSP_ROWS, VAL_LENGTH, 
                       VAL_START, ASSIGN_TP, ASSIGN_ID, Q_TP, Q_ID, Q_CHECK_AU, Q_AU, 
                       LOG_HS, ALLOW_MODIFY, ACTIVE, LC, LC_VERSION, SS)
   VALUES (A_GK, A_VERSION, '1', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, NULL, A_DESCRIPTION, 
           A_IS_PROTECTED, A_VALUE_UNIQUE, A_SINGLE_VALUED, A_NEW_VAL_ALLOWED, A_MANDATORY, 
           L_STRUCT_CREATED, A_INHERIT_GK, A_VALUE_LIST_TP, A_DEFAULT_VALUE, A_DSP_ROWS, A_VAL_LENGTH, 
           A_VAL_START, A_ASSIGN_TP, A_ASSIGN_ID, A_Q_TP, A_Q_ID, A_Q_CHECK_AU, A_Q_AU, 
           L_LOG_HS, L_ALLOW_MODIFY, L_ACTIVE, L_LC, L_LC_VERSION, L_SS);

   IF A_VALUE_LIST_TP = 'Q' THEN
      FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
         IF NVL(A_SQLTEXT(L_SEQ_NO), ' ') <> ' ' THEN
            INSERT INTO UTGKSCSQL(GK, VERSION, SEQ, SQLTEXT)
            VALUES (A_GK, A_VERSION, L_SEQ_NO, A_SQLTEXT(L_SEQ_NO));
         END IF;
      END LOOP;
   ELSIF A_VALUE_LIST_TP = 'F' THEN
      FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
         IF NVL(A_VALUE(L_SEQ_NO), ' ') <> ' ' THEN
            INSERT INTO UTGKSCLIST(GK, VERSION, SEQ, VALUE)
            VALUES (A_GK, A_VERSION, L_SEQ_NO, A_VALUE(L_SEQ_NO));
         END IF;
      END LOOP;
   END IF;

   
   
   
   
   DELETE FROM UTEVRULES
   WHERE CUSTOM = '0'
     AND EV_TP IN ('SampleCreated', 'ScSampleTypeChanged', 'InfoFieldCreated',
                   'InfoFieldValueChanged', 'InfoFieldDeleted', 'SampleUpdated', 'SamplePlanned')
     AND AF LIKE '%''scgk''%'                             
     AND AF LIKE '%'''||A_GK||'''%';
   
   DELETE FROM UTEVRULES
   WHERE CUSTOM = '0'
     AND EV_TP IN ('SampleCreated', 'ScSampleTypeChanged', 'InfoFieldCreated',
                   'InfoFieldValueChanged', 'InfoFieldDeleted', 'SampleUpdated', 'SamplePlanned')
     AND AF LIKE 'UNGKASSIGN%'                             
     AND AF LIKE '%'''||A_GK||'''%';

   
   SELECT NVL(MAX(RULE_NR),0)+1
   INTO L_RULE_NR
   FROM UTEVRULES;

   IF A_ASSIGN_TP = 'T' THEN
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR, 'sc', 'SampleCreated', 
             'AssignGroupKey(''scgk'', '''||A_GK||''', ''~sc@st~'', '||A_VAL_START||', '||A_VAL_LENGTH||')', 
             '0');
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR+1, 'sc', 'SamplePlanned', 
             'AssignGroupKey(''scgk'', '''||A_GK||''', ''~sc@st~'', '||A_VAL_START||', '||A_VAL_LENGTH||')', 
             '0');
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR+2, 'sc', 'ScSampleTypeChanged', 
             'AssignGroupKey(''scgk'', '''||A_GK||''', ''~sc@st~'', '||A_VAL_START||', '||A_VAL_LENGTH||')', 
             '0');
   ELSIF A_ASSIGN_TP = 'C' THEN
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR, 'sc', 'SampleCreated', 
             'AssignGroupKey(''scgk'', '''||A_GK||''', ''~sc@sc~'', '||A_VAL_START||', '||A_VAL_LENGTH||')', 
             '0');
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR+1, 'sc', 'SamplePlanned', 
             'AssignGroupKey(''scgk'', '''||A_GK||''', ''~sc@sc~'', '||A_VAL_START||', '||A_VAL_LENGTH||')', 
             '0');
   ELSIF A_ASSIGN_TP = 'I' THEN
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, OBJECT_ID, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR, 'ii', A_ASSIGN_ID, 'InfoFieldCreated', 
             'AssignGroupKey(''scgk'', '''||A_GK||''', ''~scii@'||A_ASSIGN_ID||'~'', '||A_VAL_START||', '||A_VAL_LENGTH||')', 
             '0');
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, OBJECT_ID, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR+1, 'ii', A_ASSIGN_ID, 'InfoFieldValueChanged', 
             'AssignGroupKey(''scgk'', '''||A_GK||''', ''~scii@'||A_ASSIGN_ID||'~'', '||A_VAL_START||', '||A_VAL_LENGTH||')', 
             '0');
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, OBJECT_ID, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR+2, 'ii', A_ASSIGN_ID, 'InfoFieldDeleted', 
             'DeAssignGroupKey(''scgk'', '''||A_GK||''')', 
             '0');
   ELSIF A_ASSIGN_TP = 'F' THEN
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR, 'sc', 'SampleCreated', 
             'UNGKASSIGN.'||A_ASSIGN_ID||'('''||A_GK||''')', '0');
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR+1, 'sc', 'SamplePlanned', 
             'UNGKASSIGN.'||A_ASSIGN_ID||'('''||A_GK||''')', '0');
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR+2, 'sc', 'SampleUpdated', 
             'UNGKASSIGN.'||A_ASSIGN_ID||'('''||A_GK||''')', '0');
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR+3, 'ii', 'InfoFieldCreated', 
             'UNGKASSIGN.'||A_ASSIGN_ID||'('''||A_GK||''')', '0');
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR+4, 'ii', 'InfoFieldValueChanged', 
             'UNGKASSIGN.'||A_ASSIGN_ID||'('''||A_GK||''')', '0');
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR+5, 'ii', 'InfoFieldDeleted', 
             'UNGKASSIGN.'||A_ASSIGN_ID||'('''||A_GK||''')', '0');
   END IF;

   
   L_RULE_NR := 0;
   FOR C_EVRULE_REC IN (SELECT *
                        FROM UTEVRULES
                        ORDER BY RULE_NR) LOOP
      L_RULE_NR := L_RULE_NR + 1;
      IF C_EVRULE_REC.RULE_NR <> L_RULE_NR THEN
         UPDATE UTEVRULES
         SET RULE_NR = L_RULE_NR
         WHERE RULE_NR = C_EVRULE_REC.RULE_NR;
      END IF;
   END LOOP;

   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT ('SaveGroupKeySc', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                    '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

















   IF NVL(L_LOG_HS, ' ') = '1' THEN
      IF L_EVENT_TP = 'GroupKeyCreated' THEN
         INSERT INTO UTGKSCHS (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                               WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_GK, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'group key "'||A_GK||'" is created.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                 L_EV_SEQ_NR);
      ELSE
         INSERT INTO UTGKSCHS (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                               WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_GK, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'group key "'||A_GK||'" is updated.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                 L_EV_SEQ_NR);
      END IF;
   ELSE
      
      
      IF L_EVENT_TP = 'GroupKeyCreated' THEN
         INSERT INTO UTGKSCHS (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                               WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_GK, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'group key "'||A_GK||'" is created.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                 L_EV_SEQ_NR);
      END IF;
   END IF;

   
   
   
   L_EV_SEQ_NR := -1;
   L_EVENT_TP := 'LoadEvRules';
   L_RESULT := UNAPIEV.BROADCASTEVENT ('SaveGroupKeySc', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                       '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   
   UNAPIGEN.NOTIFYTASKGKTODBA('SC',
                               A_GK,
                               A_VERSION,
                               A_VALUE_UNIQUE);


   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveGroupKeySc',SQLERRM);
   END IF;
   IF UNAPIGK.L_DBA_OBJECTS_CURSOR%ISOPEN THEN
      CLOSE UNAPIGK.L_DBA_OBJECTS_CURSOR;
   END IF;   
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveGroupKeySc'));
END SAVEGROUPKEYSC;



FUNCTION DELETEGROUPKEYSC
(A_GK               IN     VARCHAR2,                   
 A_MODIFY_REASON    IN     VARCHAR2)                   
RETURN NUMBER IS

A_VERSION          VARCHAR2(20);

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_GK, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   
   IF UNAPIGEN.ISSYSTEM21CFR11COMPLIANT = UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTALLOWEDIN21CFR11;
      RAISE STPERROR;
   END IF;

   
   L_RESULT := DELETEGROUPKEYSCSTRUCTURES(A_GK);
   IF L_RESULT <> 0 AND
      L_RESULT <> UNAPIGEN.DBERR_STRUCTCREATED THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   ELSE
      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   DELETE FROM UTGKSCLIST
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   DELETE FROM UTGKSCSQL
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   DELETE FROM UTGKSC
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   DELETE FROM UTGKSCHS
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   
   
   DELETE FROM UTEVRULES
   WHERE CUSTOM = '0'
     AND EV_TP IN ('SampleCreated', 'ScSampleTypeChanged', 'InfoFieldCreated',
                   'InfoFieldValueChanged', 'InfoFieldDeleted', 'SampleUpdated', 'SamplePlanned')
     AND AF LIKE '%''scgk''%'                             
     AND AF LIKE '%'''||A_GK||'''%';
   
   DELETE FROM UTEVRULES
   WHERE CUSTOM = '0'
     AND EV_TP IN ('SampleCreated', 'ScSampleTypeChanged', 'InfoFieldCreated',
                   'InfoFieldValueChanged', 'InfoFieldDeleted', 'SampleUpdated', 'SamplePlanned')
     AND AF LIKE 'UNGKASSIGN%'                             
     AND AF LIKE '%'''||A_GK||'''%';

   L_EVENT_TP := 'ObjectDeleted';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT('DeleteGroupKeySc', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                   '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);

   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   
   
   
   L_EV_SEQ_NR := -1;
   L_EVENT_TP := 'LoadEvRules';
   L_RESULT := UNAPIEV.BROADCASTEVENT ('DeleteGroupKeySc', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                       '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('DeleteGroupKeySc', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'DeleteGroupKeySc'));
END DELETEGROUPKEYSC;



FUNCTION CREATEGROUPKEYSCSTRUCTURES
(A_GK                IN    VARCHAR2,               
 A_STOR_INITIAL      IN    VARCHAR2,               
 A_STOR_NEXT         IN    VARCHAR2,               
 A_STOR_MIN_EXTENTS  IN    NUMBER,                 
 A_STOR_PCT_INCREASE IN    NUMBER,                 
 A_STOR_PCT_FREE     IN    NUMBER,                 
 A_STOR_PCT_USED     IN    NUMBER                  
)
RETURN NUMBER IS

A_VERSION            VARCHAR2(20);
L_GKSC_CURSOR        INTEGER;
L_GK_FOUND           BOOLEAN;
L_LOG_HS             CHAR(1);
L_STOR_INITIAL       VARCHAR2(20);
L_STOR_NEXT          VARCHAR2(20);
L_STOR_PCT_INCREASE  NUMBER;
L_STOR_PCT_FREE      NUMBER;
L_STOR_PCT_USED      NUMBER;
L_STOR_MIN_EXTENTS   NUMBER; 

L_TABLE_CREATED      BOOLEAN;
L_TABLESPACE         VARCHAR2(40);
L_INDEX_TABLESPACE   VARCHAR2(40); 

CURSOR L_GK_CURSOR IS
SELECT *
FROM UTGKSC
WHERE VERSION = A_VERSION
  AND GK = A_GK;

L_GK_REC       L_GK_CURSOR%ROWTYPE;

BEGIN
   L_SQLERRM := NULL;
   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
   
   L_TABLE_CREATED := FALSE;
   
   IF ( A_STOR_INITIAL IS NULL ) THEN
      L_RET_CODE := INITGROUPKEYDEFSTORAGE('SC', 
                       L_STOR_INITIAL, 
                       L_STOR_NEXT, 
                       L_STOR_MIN_EXTENTS, 
                       L_STOR_PCT_INCREASE, 
                       L_STOR_PCT_FREE, 
                       L_STOR_PCT_USED);
   ELSE
      L_STOR_INITIAL      := A_STOR_INITIAL;
      L_STOR_NEXT         := A_STOR_NEXT;
      L_STOR_MIN_EXTENTS  := A_STOR_MIN_EXTENTS;
      L_STOR_PCT_INCREASE := A_STOR_PCT_INCREASE;
      L_STOR_PCT_FREE     := A_STOR_PCT_FREE;
      L_STOR_PCT_USED     := A_STOR_PCT_USED;
   END IF;
   
   OPEN L_GK_CURSOR;
   FETCH L_GK_CURSOR
   INTO L_GK_REC;
   L_GK_FOUND := L_GK_CURSOR%FOUND;
   CLOSE L_GK_CURSOR;

   IF NOT L_GK_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
      RAISE STPERROR;
   END IF;

   IF NVL(L_GK_REC.STRUCT_CREATED, '0') = '1' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_STRUCTCREATED;
      RAISE STPERROR;
   END IF;

   OPEN L_TABLESPACE_CURSOR ('UTSC');
   FETCH L_TABLESPACE_CURSOR 
      INTO L_TABLESPACE;
   CLOSE L_TABLESPACE_CURSOR;

   OPEN L_INDEX_TABLESPACE_CURSOR ('UKSC');
   FETCH L_INDEX_TABLESPACE_CURSOR 
      INTO L_INDEX_TABLESPACE;
   CLOSE L_INDEX_TABLESPACE_CURSOR;
    
    
   
   
   

   
   
   
   
   
   
   
   
   L_GKSC_CURSOR := DBMS_SQL.OPEN_CURSOR;
   
   L_SQL_STRING := 'CREATE TABLE utscgk' || A_GK ||
                   '(' || A_GK || ' VARCHAR2(40),'||
                   'sc VARCHAR2(20),' ||
                   'CONSTRAINT ukscgk' || A_GK ||
                   ' PRIMARY KEY(' || A_GK ||',sc)' ||
                   ' USING INDEX TABLESPACE '|| L_INDEX_TABLESPACE ||
                   ' STORAGE (INITIAL '      || L_STOR_INITIAL || 
                             ' NEXT '        || L_STOR_NEXT ||
                             ' PCTINCREASE ' || TO_CHAR(L_STOR_PCT_INCREASE) || ') ' ||
                   ' PCTFREE ' || TO_CHAR(L_STOR_PCT_FREE) ;

   IF L_GK_REC.VALUE_UNIQUE = '1' THEN
      L_SQL_STRING :=  L_SQL_STRING || ',CONSTRAINT ucscgk' || A_GK ||
                     ' UNIQUE(' || A_GK || ')'||
                     ' USING INDEX TABLESPACE '|| L_INDEX_TABLESPACE ||
                     ' STORAGE (INITIAL '      || L_STOR_INITIAL || 
                               ' NEXT '        || L_STOR_NEXT ||
                               ' PCTINCREASE ' || TO_CHAR(L_STOR_PCT_INCREASE) || ') ' ||
                     ' PCTFREE ' || TO_CHAR(L_STOR_PCT_FREE) ;
   END IF;
   
   L_SQL_STRING := L_SQL_STRING || ') TABLESPACE '          || L_TABLESPACE || 
                                    ' STORAGE (INITIAL '    || L_STOR_INITIAL || 
                                             ' NEXT '       || L_STOR_NEXT || 
                                             ' PCTINCREASE '|| TO_CHAR(L_STOR_PCT_INCREASE)|| 
                                             ' MINEXTENTS ' || TO_CHAR(L_STOR_MIN_EXTENTS)|| 
                                              ')'           ||
                                    ' PCTFREE ' || TO_CHAR(L_STOR_PCT_FREE) ||
                                    ' PCTUSED ' || TO_CHAR(L_STOR_PCT_USED) ;

   DBMS_SQL.PARSE(L_GKSC_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   L_RESULT := DBMS_SQL.EXECUTE(L_GKSC_CURSOR);
   L_TABLE_CREATED := TRUE;

   
   
   
   
   
   

   L_SQL_STRING := 'CREATE INDEX uiscgk'|| A_GK ||
                   ' ON utscgk' || A_GK || '(sc) ' ||
                   ' STORAGE (INITIAL '    || L_STOR_INITIAL || 
                            ' NEXT '       || L_STOR_NEXT || 
                            ' PCTINCREASE '|| TO_CHAR(L_STOR_PCT_INCREASE)|| 
                            ' MINEXTENTS ' || TO_CHAR(L_STOR_MIN_EXTENTS)|| 
                   ' ) PCTFREE ' || TO_CHAR(L_STOR_PCT_FREE) ||
                   ' TABLESPACE ' || L_INDEX_TABLESPACE;
   DBMS_SQL.PARSE(L_GKSC_CURSOR, L_SQL_STRING, DBMS_SQL.V7);
   L_RESULT := DBMS_SQL.EXECUTE(L_GKSC_CURSOR);
   
   DBMS_SQL.CLOSE_CURSOR(L_GKSC_CURSOR);

   
   UPDATE UTGKSC
   SET STRUCT_CREATED = '1'
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   
   
   
   L_RESULT := CREATEGROUPKEYSCENTRIES(A_GK);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      L_SQLERRM := 'CreateGroupKeyScEntries returned '||L_RESULT||' for gk='||A_GK;
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;

   
   L_RESULT := UNAPIGK.CREATEUSERSTRUCTSFORGROUPKEY('SC', A_GK);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      L_SQLERRM := 'CreateUserStructsForGroupKey returned '||L_RESULT||' for gk_tp=SC#gk='||A_GK;
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   
   L_EVENT_TP := 'GroupKeyStructuresCreated';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT ('CreateGroupKeyScStructures', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                    '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;
   
   BEGIN
      SELECT LOG_HS
      INTO L_LOG_HS
      FROM UTOBJECTS 
      WHERE OBJECT = 'gksc';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      
      
      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OBJTP;
      RAISE STPERROR;
   END;

   IF NVL(L_LOG_HS, ' ') = '1' THEN
      INSERT INTO UTGKSCHS (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                            WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES (A_GK, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
              'Database objects for group key "'||A_GK||'" are created.', 
              CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
         UNAPIGEN.LOGERROR('CreateGroupKeyScStructures', SQLERRM);
         UNAPIGEN.LOGERROR('CreateGroupKeyScStructures', 'HELP for DBA:'||SUBSTR(L_SQL_STRING,1,235));
         IF (LENGTH(L_SQL_STRING)>235) THEN
            UNAPIGEN.LOGERROR('CreateGroupKeyScStructures', 'HELP for DBA:'||SUBSTR(L_SQL_STRING,236,235));
         END IF;
   END IF;
   IF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('CreateGroupKeyScScructures', SUBSTR(L_SQLERRM,1,235));
   END IF;
   IF L_GK_CURSOR%ISOPEN THEN
      CLOSE L_GK_CURSOR;
   END IF;
   IF L_TABLE_CREATED THEN
      
      BEGIN
         L_SQL_STRING := 'DROP TABLE utscgk' || A_GK;
         DBMS_SQL.PARSE(L_GKSC_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         L_RESULT := DBMS_SQL.EXECUTE(L_GKSC_CURSOR);
      EXCEPTION
      WHEN OTHERS THEN
         NULL;
      END;
   END IF;
   IF DBMS_SQL.IS_OPEN(L_GKSC_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_GKSC_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'CreateGroupKeyScStructures'));
END CREATEGROUPKEYSCSTRUCTURES;



FUNCTION DELETEGROUPKEYSCSTRUCTURES
(A_GK    IN    VARCHAR2)                         
RETURN NUMBER IS

A_VERSION         VARCHAR2(20);
L_GKSC_CURSOR     INTEGER;
L_STRUCT_CREATED  CHAR(1);
L_GK_FOUND        BOOLEAN;
L_LOG_HS          CHAR(1);

CURSOR L_GK_CURSOR IS
SELECT NVL(STRUCT_CREATED, '0')
FROM UTGKSC
WHERE VERSION = A_VERSION
  AND GK = A_GK;

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   OPEN L_GK_CURSOR;
   FETCH L_GK_CURSOR
   INTO L_STRUCT_CREATED;
   L_GK_FOUND := L_GK_CURSOR%FOUND;
   CLOSE L_GK_CURSOR;

   IF NOT L_GK_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
      RAISE STPERROR;
   END IF;

   IF NVL(L_STRUCT_CREATED, '0') = '0' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_STRUCTCREATED;
      RAISE STPERROR;
   END IF;

   
   IF UNAPIGEN.ISSYSTEM21CFR11COMPLIANT = UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTALLOWEDIN21CFR11;
      RAISE STPERROR;
   END IF;

      
   L_RESULT := UNAPIGK.DELETEUSERSTRUCTSFORGROUPKEY('SC', A_GK);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      L_SQLERRM := 'DeleteUserStructsForGroupKey returned '||L_RESULT||' for gk_tp=ST#gk='||A_GK;
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;

   DELETE FROM UTSCGK
   WHERE GK = A_GK;

   BEGIN
      L_GKSC_CURSOR := DBMS_SQL.OPEN_CURSOR;
      L_SQL_STRING := 'DROP TABLE utscgk' || A_GK ;
      DBMS_SQL.PARSE(L_GKSC_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      L_RESULT := DBMS_SQL.EXECUTE(L_GKSC_CURSOR);
      DBMS_SQL.CLOSE_CURSOR(L_GKSC_CURSOR);
   EXCEPTION
   WHEN TABLE_DOES_NOT_EXIST THEN
      
      NULL;
   END;

   
   UNAPIGK.DELETEGROUPKEYFROMTASK('scgk', A_GK);

   
   UPDATE UTGKSC
   SET STRUCT_CREATED = '0'
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   L_EVENT_TP := 'GroupKeyStructuresDeleted';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT ('DeleteGroupKeyScStructures', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                    '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;
   
   BEGIN
      SELECT LOG_HS
      INTO L_LOG_HS
      FROM UTOBJECTS 
      WHERE OBJECT = 'gksc';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      
      
      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OBJTP;
      RAISE STPERROR;
   END;

   IF NVL(L_LOG_HS, ' ') = '1' THEN
      INSERT INTO UTGKSCHS (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                            WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES (A_GK, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
              'Database objects for group key "'||A_GK||'" are deleted.', 
              CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('DeleteGroupKeyScStructures', SQLERRM);
   END IF;
   IF L_GK_CURSOR%ISOPEN THEN
      CLOSE L_GK_CURSOR;
   END IF;
   IF DBMS_SQL.IS_OPEN(L_GKSC_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_GKSC_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'DeleteGroupKeyScStructures'));
END DELETEGROUPKEYSCSTRUCTURES;



FUNCTION CREATEGROUPKEYSCENTRIES                   
(A_GK    IN    VARCHAR2)                         
RETURN NUMBER IS

A_VERSION      VARCHAR2(20);
L_GKSC_CURSOR  INTEGER;
L_GK_FOUND     BOOLEAN;

CURSOR L_GK_CURSOR IS
SELECT *
FROM UTGKSC
WHERE VERSION = A_VERSION
  AND GK = A_GK;

L_GK_REC       L_GK_CURSOR%ROWTYPE;

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   OPEN L_GK_CURSOR;
   FETCH L_GK_CURSOR
   INTO L_GK_REC;
   L_GK_FOUND := L_GK_CURSOR%FOUND;
   CLOSE L_GK_CURSOR;

   IF NOT L_GK_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
      RAISE STPERROR;
   END IF;

   IF NVL(L_GK_REC.STRUCT_CREATED, '0') = '0' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_STRUCTCREATED;
      RAISE STPERROR;
   END IF;

   
   
   
   

   L_GKSC_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'INSERT INTO utscgk'||A_GK||'('||A_GK||', sc) '||
                   'SELECT value, sc '||
                   'FROM utscgk '||
                   'WHERE gk = '''||A_GK||''' AND value IS NOT NULL';
   DBMS_SQL.PARSE(L_GKSC_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   
   BEGIN
      L_RESULT := DBMS_SQL.EXECUTE(L_GKSC_CURSOR);
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UNIQUEGK;
         RAISE STPERROR;
   END;
   
   DBMS_SQL.CLOSE_CURSOR(L_GKSC_CURSOR);

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('CreateGroupKeyScEntries', SQLERRM);
   END IF;
   IF L_GK_CURSOR%ISOPEN THEN
      CLOSE L_GK_CURSOR;
   END IF;
   IF DBMS_SQL.IS_OPEN (L_GKSC_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_GKSC_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'CreateGroupKeyScEntries'));
END CREATEGROUPKEYSCENTRIES;



FUNCTION DELETEGROUPKEYSCENTRIES
(A_GK    IN    VARCHAR2)                         
RETURN NUMBER IS

A_VERSION         VARCHAR2(20);
L_GKSC_CURSOR     INTEGER;
L_STRUCT_CREATED  CHAR(1);
L_GK_FOUND        BOOLEAN;

CURSOR L_GK_CURSOR IS
SELECT NVL(STRUCT_CREATED, '0')
FROM UTGKSC
WHERE VERSION = A_VERSION
  AND GK = A_GK;

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   OPEN L_GK_CURSOR;
   FETCH L_GK_CURSOR
   INTO L_STRUCT_CREATED;
   L_GK_FOUND := L_GK_CURSOR%FOUND;
   CLOSE L_GK_CURSOR;

   IF NOT L_GK_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
      RAISE STPERROR;
   END IF;

   IF NVL(L_STRUCT_CREATED,'0') = '0' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_STRUCTCREATED;
      RAISE STPERROR;
   END IF;

   
   IF UNAPIGEN.ISSYSTEM21CFR11COMPLIANT = UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTALLOWEDIN21CFR11;
      RAISE STPERROR;
   END IF;

   DELETE FROM UTSCGK
   WHERE GK = A_GK;

   L_GKSC_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'TRUNCATE TABLE utscgk' || A_GK;
   DBMS_SQL.PARSE(L_GKSC_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   L_RESULT := DBMS_SQL.EXECUTE(L_GKSC_CURSOR);

   DBMS_SQL.CLOSE_CURSOR(L_GKSC_CURSOR);

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('DeleteGroupKeyScEntries', SQLERRM);
   END IF;
   IF L_GK_CURSOR%ISOPEN THEN
      CLOSE L_GK_CURSOR;
   END IF;
   IF DBMS_SQL.IS_OPEN(L_GKSC_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_GKSC_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'DeleteGroupKeyScEntries'));
END DELETEGROUPKEYSCENTRIES;



FUNCTION GETGROUPKEYMELIST
(A_GK                  OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_DESCRIPTION         OUT     UNAPIGEN.VC40_TABLE_TYPE,   
 A_NR_OF_ROWS          IN OUT  NUMBER,                     
 A_WHERE_CLAUSE        IN      VARCHAR2,                   
 A_NEXT_ROWS           IN      NUMBER)                     
RETURN NUMBER IS

L_GK           VARCHAR2(20);
L_DESCRIPTION  VARCHAR2(40);

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_GK_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_GK_CURSOR);
         P_GK_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_GK_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
         L_WHERE_CLAUSE := 'ORDER BY gk, version'; 
      ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
         L_WHERE_CLAUSE := 'WHERE version_is_current = ''1'' '||
                           'AND gk = ''' || A_WHERE_CLAUSE || 
                           ''' ORDER BY gk, version';
      ELSE
         L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
      END IF;

      IF P_GK_CURSOR IS NULL THEN
         P_GK_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;

      L_SQL_STRING:= 'SELECT gk, description FROM dd'||UNAPIGEN.P_DD||'.uvgkme ' ||
                      L_WHERE_CLAUSE;
      DBMS_SQL.PARSE(P_GK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

      DBMS_SQL.DEFINE_COLUMN(P_GK_CURSOR, 1, L_GK, 20);
      DBMS_SQL.DEFINE_COLUMN(P_GK_CURSOR, 2, L_DESCRIPTION, 40);
      L_RESULT := DBMS_SQL.EXECUTE(P_GK_CURSOR);
   END IF;

   L_RESULT := DBMS_SQL.FETCH_ROWS(P_GK_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_GK_CURSOR, 1, L_GK);
      DBMS_SQL.COLUMN_VALUE(P_GK_CURSOR, 2, L_DESCRIPTION);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_GK(L_FETCHED_ROWS) := L_GK;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_GK_CURSOR);
      END IF;
   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_GK_CURSOR);
       P_GK_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   END IF;

   IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_GK_CURSOR);
      P_GK_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetGroupKeyMeList', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (P_GK_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (P_GK_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETGROUPKEYMELIST;



FUNCTION GETGROUPKEYME
(A_GK               OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_DESCRIPTION      OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_IS_PROTECTED     OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_VALUE_UNIQUE     OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_SINGLE_VALUED    OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_NEW_VAL_ALLOWED  OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_MANDATORY        OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_STRUCT_CREATED   OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_INHERIT_GK       OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_VALUE_LIST_TP    OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_DEFAULT_VALUE    OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_DSP_ROWS         OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_VAL_LENGTH       OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_VAL_START        OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_ASSIGN_TP        OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_ASSIGN_ID        OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_Q_TP             OUT    UNAPIGEN.CHAR2_TABLE_TYPE,   
 A_Q_ID             OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_Q_CHECK_AU       OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_Q_AU             OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_NR_OF_ROWS       IN OUT NUMBER,                      
 A_WHERE_CLAUSE     IN     VARCHAR2)                    
RETURN NUMBER IS

L_GK                VARCHAR2(20);
L_DESCRIPTION       VARCHAR2(40);
L_IS_PROTECTED      CHAR(1);
L_VALUE_UNIQUE      CHAR(1);
L_SINGLE_VALUED     CHAR(1);
L_NEW_VAL_ALLOWED   CHAR(1);
L_MANDATORY         CHAR(1);
L_STRUCT_CREATED    CHAR(1);
L_INHERIT_GK        CHAR(1);
L_VALUE_LIST_TP     CHAR(1);
L_DEFAULT_VALUE     VARCHAR2(40);
L_DSP_ROWS          NUMBER(3);
L_VAL_LENGTH        NUMBER(3);
L_VAL_START         NUMBER(3);
L_ASSIGN_TP         CHAR(1);
L_ASSIGN_ID         VARCHAR2(20);
L_Q_TP              CHAR(2);
L_Q_ID              VARCHAR2(20);
L_Q_CHECK_AU        CHAR(1);
L_Q_AU              VARCHAR2(20);
L_GK_CURSOR         INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'ORDER BY gk, version'; 
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := 'WHERE version_is_current = ''1'' '||
                        'AND gk = ''' || A_WHERE_CLAUSE || 
                        ''' ORDER BY gk, version';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_GK_CURSOR := DBMS_SQL.OPEN_CURSOR;

   L_SQL_STRING := 'SELECT gk, description, is_protected, value_unique, ' ||
                   'single_valued, new_val_allowed, mandatory, struct_created, inherit_gk,' ||
                   'value_list_tp, default_value, dsp_rows, val_length, val_start, ' ||
                   'assign_tp, assign_id, q_tp, q_id, q_check_au, q_au ' ||
                   'FROM dd' || UNAPIGEN.P_DD || '.uvgkme ' || L_WHERE_CLAUSE;
   DBMS_SQL.PARSE(L_GK_CURSOR, L_SQL_STRING, DBMS_SQL.V7);  

   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 1, L_GK, 20);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 2, L_DESCRIPTION, 40);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 3, L_IS_PROTECTED, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 4, L_VALUE_UNIQUE, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 5, L_SINGLE_VALUED, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 6, L_NEW_VAL_ALLOWED, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 7, L_MANDATORY, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 8, L_STRUCT_CREATED, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 9, L_INHERIT_GK, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 10, L_VALUE_LIST_TP, 1);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 11, L_DEFAULT_VALUE, 40);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 12, L_DSP_ROWS);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 13, L_VAL_LENGTH);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 14, L_VAL_START);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 15, L_ASSIGN_TP, 1);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 16, L_ASSIGN_ID, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 17, L_Q_TP, 2);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 18, L_Q_ID, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_GK_CURSOR, 19, L_Q_CHECK_AU, 1);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 20, L_Q_AU, 20);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_GK_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 1, L_GK);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 2, L_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 3, L_IS_PROTECTED);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 4, L_VALUE_UNIQUE);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 5, L_SINGLE_VALUED);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 6, L_NEW_VAL_ALLOWED);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 7, L_MANDATORY);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 8, L_STRUCT_CREATED);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 9, L_INHERIT_GK);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 10, L_VALUE_LIST_TP);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 11, L_DEFAULT_VALUE);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 12, L_DSP_ROWS);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 13, L_VAL_LENGTH);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 14, L_VAL_START);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 15, L_ASSIGN_TP);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 16, L_ASSIGN_ID);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 17, L_Q_TP);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 18, L_Q_ID);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_GK_CURSOR, 19, L_Q_CHECK_AU);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 20, L_Q_AU);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_GK (L_FETCHED_ROWS) := L_GK;
      A_DESCRIPTION (L_FETCHED_ROWS) := L_DESCRIPTION;
      A_IS_PROTECTED (L_FETCHED_ROWS) := L_IS_PROTECTED;
      A_VALUE_UNIQUE (L_FETCHED_ROWS) := L_VALUE_UNIQUE;
      A_SINGLE_VALUED (L_FETCHED_ROWS) := L_SINGLE_VALUED;
      A_NEW_VAL_ALLOWED (L_FETCHED_ROWS) := L_NEW_VAL_ALLOWED;
      A_MANDATORY (L_FETCHED_ROWS) := L_MANDATORY;
      A_STRUCT_CREATED (L_FETCHED_ROWS) := L_STRUCT_CREATED;
      A_INHERIT_GK (L_FETCHED_ROWS) := L_INHERIT_GK;
      A_VALUE_LIST_TP (L_FETCHED_ROWS) := L_VALUE_LIST_TP;
      A_DEFAULT_VALUE (L_FETCHED_ROWS) := L_DEFAULT_VALUE;
      A_DSP_ROWS(L_FETCHED_ROWS) := L_DSP_ROWS;
      A_VAL_LENGTH(L_FETCHED_ROWS) := L_VAL_LENGTH;
      A_VAL_START(L_FETCHED_ROWS) := L_VAL_START;
      A_ASSIGN_TP(L_FETCHED_ROWS) := L_ASSIGN_TP;
      A_ASSIGN_ID(L_FETCHED_ROWS) := L_ASSIGN_ID;
      A_Q_TP(L_FETCHED_ROWS) := L_Q_TP;
      A_Q_ID(L_FETCHED_ROWS) := L_Q_ID;
      A_Q_CHECK_AU(L_FETCHED_ROWS) := L_Q_CHECK_AU;
      A_Q_AU(L_FETCHED_ROWS) := L_Q_AU;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_GK_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_GK_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetGroupKeyMe', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
     IF DBMS_SQL.IS_OPEN (L_GK_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_GK_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETGROUPKEYME;



FUNCTION GETGROUPKEYMEVALUE
(A_GK               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_VALUE            OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_NR_OF_ROWS       IN OUT  NUMBER,                    
 A_WHERE_CLAUSE     IN      VARCHAR2)                  
RETURN NUMBER IS

L_GK              VARCHAR2(20);
L_VALUE           VARCHAR2(40);
L_GK_CURSOR       INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'ORDER BY list.gk, list.version, list.seq'; 
   ELSIF
      UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := ', dd'||UNAPIGEN.P_DD||'.uvgkme me WHERE me.version_is_current = ''1'' '||
                        'AND list.version = me.version '||
                        'AND list.gk = me.gk '||
                        'AND list.gk = ''' || A_WHERE_CLAUSE || 
                        ''' ORDER BY list.seq';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_GK_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT list.gk, list.value FROM dd'||UNAPIGEN.P_DD||'.uvgkmelist list ' || L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_GK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 1, L_GK, 20);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 2, L_VALUE, 40);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_GK_CURSOR);

   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 1, L_GK);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 2, L_VALUE);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_GK(L_FETCHED_ROWS) := L_GK;
      A_VALUE(L_FETCHED_ROWS) := L_VALUE;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_GK_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_GK_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;
   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetGroupKeyMeValue', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (L_GK_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_GK_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETGROUPKEYMEVALUE;



FUNCTION GETGROUPKEYMESQL
(A_GK              OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_SQLTEXT         OUT     UNAPIGEN.VC255_TABLE_TYPE,  
 A_NR_OF_ROWS      IN OUT  NUMBER,                     
 A_WHERE_CLAUSE    IN      VARCHAR2)                   
RETURN NUMBER IS

L_GK              VARCHAR2(20);
L_SQLTEXT         VARCHAR2(255);
L_GK_CURSOR       INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'ORDER BY sql.gk, sql.version, sql.seq'; 
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := ', dd'||UNAPIGEN.P_DD||'.uvgkme me WHERE me.version_is_current = ''1'' '||
                        'AND sql.version = me.version '||
                        'AND sql.gk = me.gk '||
                        'AND sql.gk = ''' || A_WHERE_CLAUSE || 
                        ''' ORDER BY sql.seq';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_GK_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT sql.gk, sql.sqltext FROM dd'||UNAPIGEN.P_DD||'.uvgkmesql sql ' || L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_GK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 1, L_GK, 20);
   DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 2, L_SQLTEXT, 255);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_GK_CURSOR);

   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 1, L_GK);
      DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 2, L_SQLTEXT);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_GK(L_FETCHED_ROWS) := L_GK;
      A_SQLTEXT(L_FETCHED_ROWS) := L_SQLTEXT;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_GK_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_GK_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
              'GetGroupKeyMeSql', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (L_GK_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_GK_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETGROUPKEYMESQL;



FUNCTION SAVEGROUPKEYME
(A_GK               IN   VARCHAR2,                    
 A_DESCRIPTION      IN   VARCHAR2,                    
 A_IS_PROTECTED     IN   CHAR,                        
 A_VALUE_UNIQUE     IN   CHAR,                        
 A_SINGLE_VALUED    IN   CHAR,                        
 A_NEW_VAL_ALLOWED  IN   CHAR,                        
 A_MANDATORY        IN   CHAR,                        
 A_STRUCT_CREATED   IN   CHAR,                        
 A_INHERIT_GK       IN   CHAR,                        
 A_VALUE_LIST_TP    IN   CHAR,                        
 A_DEFAULT_VALUE    IN   VARCHAR2,                    
 A_DSP_ROWS         IN   NUMBER,                      
 A_VAL_LENGTH       IN   NUMBER,                      
 A_VAL_START        IN   NUMBER,                      
 A_ASSIGN_TP        IN   CHAR,                        
 A_ASSIGN_ID        IN   VARCHAR2,                    
 A_Q_TP             IN   CHAR,                        
 A_Q_ID             IN   VARCHAR2,                    
 A_Q_CHECK_AU       IN   CHAR,                        
 A_Q_AU             IN   VARCHAR2,                    
 A_VALUE            IN   UNAPIGEN.VC40_TABLE_TYPE,    
 A_SQLTEXT          IN   UNAPIGEN.VC255_TABLE_TYPE,   
 A_NR_OF_ROWS       IN   NUMBER,                      
 A_MODIFY_REASON    IN   VARCHAR2)                    
RETURN NUMBER IS

A_VERSION        VARCHAR2(20);
L_FOUND          BOOLEAN;
L_SEQ_NO         NUMBER;
L_GK             VARCHAR2(20);
L_STRUCT_CREATED CHAR(1);
L_LC             VARCHAR2(2);
L_LC_VERSION     VARCHAR2(20);
L_SS             VARCHAR2(2);
L_LOG_HS         CHAR(1);
L_ALLOW_MODIFY   CHAR(1);
L_ACTIVE         CHAR(1);
L_RULE_NR        NUMBER(5);

CURSOR L_GK_CURSOR IS
SELECT GK 
FROM UTGKME
WHERE VERSION = A_VERSION
  AND GK = A_GK;

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_GK, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_IS_PROTECTED, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_PROTECTED;
      RAISE STPERROR;
   END IF;

   IF NVL(A_SINGLE_VALUED, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SINGLEVALUED;
      RAISE STPERROR;
   END IF;

   IF NVL(A_NEW_VAL_ALLOWED, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NEWVALALLOWED;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VALUE_UNIQUE, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UNIQUEGK;
      RAISE STPERROR;
   END IF;

   IF NVL(A_MANDATORY, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_MANDATORY;
      RAISE STPERROR;
   END IF;

   IF NVL(A_INHERIT_GK, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INHERITGK;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VALUE_LIST_TP, ' ') NOT IN ('F', 'Q') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_VALUELISTTP;
      RAISE STPERROR;
   END IF;

   IF NVL(A_ASSIGN_TP, ' ') IN ('F', 'I') AND
      NVL(A_ASSIGN_ID, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   
   
   
   
   L_LC := '@L';
   L_SS := '@A';

   BEGIN
      SELECT VERSION
      INTO L_LC_VERSION
      FROM UTLC
      WHERE LC = '@L'
      AND VERSION_IS_CURRENT = '1';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOCURRENTLCVERSION;
      RAISE STPERROR;
   END;

   BEGIN
      SELECT ALLOW_MODIFY, ACTIVE
      INTO L_ALLOW_MODIFY, L_ACTIVE
      FROM UTSS
      WHERE SS = '@A';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR;
   END;
   
   BEGIN
      SELECT LOG_HS
      INTO L_LOG_HS
      FROM UTOBJECTS 
      WHERE OBJECT = 'gkme';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      
      
      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OBJTP;
      RAISE STPERROR;
   END;
   

   OPEN L_GK_CURSOR;
   FETCH L_GK_CURSOR
   INTO L_GK;
   IF L_GK_CURSOR%FOUND THEN
      L_FOUND := TRUE;
   ELSE
      L_FOUND := FALSE;
   END IF;
   CLOSE L_GK_CURSOR;

   IF L_FOUND THEN
      DELETE FROM UTGKME
      WHERE VERSION = A_VERSION
        AND GK = A_GK;

      DELETE FROM UTGKMELIST
      WHERE VERSION = A_VERSION
        AND GK = A_GK;

      DELETE FROM UTGKMESQL
      WHERE VERSION = A_VERSION
        AND GK = A_GK;
        
      L_EVENT_TP := 'GroupKeyUpdated';
   ELSE
      L_EVENT_TP := 'GroupKeyCreated';
   END IF;

   OPEN UNAPIGK.L_DBA_OBJECTS_CURSOR ('UTSCMEGK'||A_GK);
   FETCH UNAPIGK.L_DBA_OBJECTS_CURSOR INTO L_STRUCT_CREATED;
   CLOSE UNAPIGK.L_DBA_OBJECTS_CURSOR;

   INSERT INTO UTGKME (GK, VERSION, VERSION_IS_CURRENT, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ, EFFECTIVE_TILL, EFFECTIVE_TILL_TZ, DESCRIPTION, 
                       IS_PROTECTED, VALUE_UNIQUE, SINGLE_VALUED, NEW_VAL_ALLOWED, MANDATORY,
                       STRUCT_CREATED, INHERIT_GK, VALUE_LIST_TP, DEFAULT_VALUE, DSP_ROWS, VAL_LENGTH, 
                       VAL_START, ASSIGN_TP, ASSIGN_ID, Q_TP, Q_ID, Q_CHECK_AU, Q_AU, 
                       LOG_HS, ALLOW_MODIFY, ACTIVE, LC, LC_VERSION, SS)
   VALUES (A_GK, A_VERSION, '1', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, NULL, A_DESCRIPTION, 
           A_IS_PROTECTED, A_VALUE_UNIQUE, A_SINGLE_VALUED, A_NEW_VAL_ALLOWED, A_MANDATORY, 
           L_STRUCT_CREATED, A_INHERIT_GK, A_VALUE_LIST_TP, A_DEFAULT_VALUE, A_DSP_ROWS, A_VAL_LENGTH, 
           A_VAL_START, A_ASSIGN_TP, A_ASSIGN_ID, A_Q_TP, A_Q_ID, A_Q_CHECK_AU, A_Q_AU, 
           L_LOG_HS, L_ALLOW_MODIFY, L_ACTIVE, L_LC, L_LC_VERSION, L_SS);

   IF A_VALUE_LIST_TP = 'Q' THEN
      FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
         IF NVL(A_SQLTEXT(L_SEQ_NO), ' ') <> ' ' THEN
            INSERT INTO UTGKMESQL(GK, VERSION, SEQ, SQLTEXT)
            VALUES (A_GK, A_VERSION, L_SEQ_NO, A_SQLTEXT(L_SEQ_NO));
         END IF;
      END LOOP;
   ELSIF A_VALUE_LIST_TP = 'F' THEN
      FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
         IF NVL(A_VALUE(L_SEQ_NO), ' ') <> ' ' THEN
            INSERT INTO UTGKMELIST(GK, VERSION, SEQ, VALUE)
            VALUES (A_GK, A_VERSION, L_SEQ_NO, A_VALUE(L_SEQ_NO));
         END IF;
      END LOOP;
   END IF;

   
   
   
   
   DELETE FROM UTEVRULES
   WHERE CUSTOM = '0'
     AND EV_TP IN ('MethodCreated', 'ScSampleTypeChanged', 'MethodUpdated', 
                   'InfoFieldCreated', 'InfoFieldValueChanged', 'InfoFieldDeleted')
     AND AF LIKE '%''megk''%'                             
     AND AF LIKE '%'''||A_GK||'''%';
   
   DELETE FROM UTEVRULES
   WHERE CUSTOM = '0'
     AND EV_TP IN ('MethodCreated', 'ScSampleTypeChanged', 'MethodUpdated', 
                   'InfoFieldCreated', 'InfoFieldValueChanged', 'InfoFieldDeleted')
     AND AF LIKE 'UNGKASSIGN%'                             
     AND AF LIKE '%'''||A_GK||'''%';

   
   SELECT NVL(MAX(RULE_NR),0)+1
   INTO L_RULE_NR
   FROM UTEVRULES;
   
   IF A_ASSIGN_TP = 'T' THEN
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR, 'me', 'MethodCreated', 
             'AssignGroupKey(''megk'', '''||A_GK||''', ''~sc@st~'', '||A_VAL_START||', '||A_VAL_LENGTH||')', 
             '0');
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR+1, 'sc', 'ScSampleTypeChanged', 
             'AssignGroupKey(''megk'', '''||A_GK||''', ''~sc@st~'', '||A_VAL_START||', '||A_VAL_LENGTH||')', 
             '0');
   ELSIF A_ASSIGN_TP = 'C' THEN
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR, 'me', 'MethodCreated', 
             'AssignGroupKey(''megk'', '''||A_GK||''', ''~me@sc~'', '||A_VAL_START||', '||A_VAL_LENGTH||')', 
             '0');
   ELSIF A_ASSIGN_TP = 'I' THEN
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, OBJECT_ID, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR, 'ii', A_ASSIGN_ID, 'InfoFieldCreated', 
             'AssignGroupKey(''megk'', '''||A_GK||''', ''~scii@'||A_ASSIGN_ID||'~'', '||A_VAL_START||', '||A_VAL_LENGTH||')', 
             '0');
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, OBJECT_ID, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR+1, 'ii', A_ASSIGN_ID, 'InfoFieldValueChanged', 
             'AssignGroupKey(''megk'', '''||A_GK||''', ''~scii@'||A_ASSIGN_ID||'~'', '||A_VAL_START||', '||A_VAL_LENGTH||')', 
             '0');
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, OBJECT_ID, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR+2, 'ii', A_ASSIGN_ID, 'InfoFieldDeleted', 
             'DeAssignGroupKey(''megk'', '''||A_GK||''')', 
             '0');
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR+3, 'me', 'MethodCreated', 
             'AssignGroupKey(''megk'', '''||A_GK||''', ''~scii@'||A_ASSIGN_ID||'~'', '||A_VAL_START||', '||A_VAL_LENGTH||')', 
             '0');
   ELSIF A_ASSIGN_TP = 'F' THEN
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR, 'me', 'MethodCreated', 
             'UNGKASSIGN.'||A_ASSIGN_ID||'('''||A_GK||''')', '0');
      INSERT INTO UTEVRULES(RULE_NR, OBJECT_TP, EV_TP, AF, CUSTOM)
      VALUES(L_RULE_NR+1, 'me', 'MethodUpdated', 
             'UNGKASSIGN.'||A_ASSIGN_ID||'('''||A_GK||''')', '0');
   END IF;

   
   L_RULE_NR := 0;
   FOR C_EVRULE_REC IN (SELECT *
                        FROM UTEVRULES
                        ORDER BY RULE_NR) LOOP
      L_RULE_NR := L_RULE_NR + 1;
      IF C_EVRULE_REC.RULE_NR <> L_RULE_NR THEN
         UPDATE UTEVRULES
         SET RULE_NR = L_RULE_NR
         WHERE RULE_NR = C_EVRULE_REC.RULE_NR;
      END IF;
   END LOOP;

   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT ('SaveGroupKeyMe', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                    '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

















   IF NVL(L_LOG_HS, ' ') = '1' THEN
      IF L_EVENT_TP = 'GroupKeyCreated' THEN
         INSERT INTO UTGKMEHS (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                               WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_GK, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'group key "'||A_GK||'" is created.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                 L_EV_SEQ_NR);
      ELSE
         INSERT INTO UTGKMEHS (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                               WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_GK, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'group key "'||A_GK||'" is updated.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                 L_EV_SEQ_NR);
      END IF;
   ELSE
      
      
      IF L_EVENT_TP = 'GroupKeyCreated' THEN
         INSERT INTO UTGKMEHS (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                               WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_GK, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'group key "'||A_GK||'" is created.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                 L_EV_SEQ_NR);
      END IF;
   END IF;

   
   
   
   L_EV_SEQ_NR := -1;
   L_EVENT_TP := 'LoadEvRules';
   L_RESULT := UNAPIEV.BROADCASTEVENT ('SaveGroupKeyMe', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                       '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   
   UNAPIGEN.NOTIFYTASKGKTODBA('ME',
                               A_GK,
                               A_VERSION,
                               A_VALUE_UNIQUE);


   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveGroupKeyMe',SQLERRM);
   END IF;
   IF UNAPIGK.L_DBA_OBJECTS_CURSOR%ISOPEN THEN
      CLOSE UNAPIGK.L_DBA_OBJECTS_CURSOR;
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveGroupKeyMe'));
END SAVEGROUPKEYME;



FUNCTION DELETEGROUPKEYME
(A_GK               IN     VARCHAR2,                   
 A_MODIFY_REASON    IN     VARCHAR2)                   
RETURN NUMBER IS

A_VERSION          VARCHAR2(20);

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_GK, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   
   IF UNAPIGEN.ISSYSTEM21CFR11COMPLIANT = UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTALLOWEDIN21CFR11;
      RAISE STPERROR;
   END IF;

   
   L_RESULT := DELETEGROUPKEYMESTRUCTURES(A_GK);
   IF L_RESULT <> 0 AND
      L_RESULT <> UNAPIGEN.DBERR_STRUCTCREATED THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   ELSE
      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   DELETE FROM UTGKMELIST
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   DELETE FROM UTGKMESQL
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   DELETE FROM UTGKME
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   DELETE FROM UTGKMEHS
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   
   
   DELETE FROM UTEVRULES
   WHERE CUSTOM = '0'
     AND EV_TP IN ('MethodCreated', 'ScSampleTypeChanged', 'MethodUpdated', 
                   'InfoFieldCreated', 'InfoFieldValueChanged', 'InfoFieldDeleted')
     AND AF LIKE '%''megk''%'                             
     AND AF LIKE '%'''||A_GK||'''%';
   
   DELETE FROM UTEVRULES
   WHERE CUSTOM = '0'
     AND EV_TP IN ('MethodCreated', 'ScSampleTypeChanged', 'MethodUpdated', 
                   'InfoFieldCreated', 'InfoFieldValueChanged', 'InfoFieldDeleted')
     AND AF LIKE 'UNGKASSIGN%'                             
     AND AF LIKE '%'''||A_GK||'''%';
     
   L_EVENT_TP := 'ObjectDeleted';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT('DeleteGroupKeyMe', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                   '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);

   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   
   
   
   L_EV_SEQ_NR := -1;
   L_EVENT_TP := 'LoadEvRules';
   L_RESULT := UNAPIEV.BROADCASTEVENT ('DeleteGroupKeyMe', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                       '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('DeleteGroupKeyMe', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'DeleteGroupKeyMe'));
END DELETEGROUPKEYME;



FUNCTION CREATEGROUPKEYMESTRUCTURES
(A_GK                IN    VARCHAR2,               
 A_STOR_INITIAL      IN    VARCHAR2,               
 A_STOR_NEXT         IN    VARCHAR2,               
 A_STOR_MIN_EXTENTS  IN    NUMBER,                 
 A_STOR_PCT_INCREASE IN    NUMBER,                 
 A_STOR_PCT_FREE     IN    NUMBER,                 
 A_STOR_PCT_USED     IN    NUMBER                  
)
RETURN NUMBER IS

A_VERSION               VARCHAR2(20);
L_GKME_CURSOR           INTEGER;
L_GK_FOUND              BOOLEAN;
L_LOG_HS                CHAR(1);
L_STOR_INITIAL          VARCHAR2(20);
L_STOR_NEXT             VARCHAR2(20);
L_STOR_PCT_INCREASE     NUMBER;
L_STOR_PCT_FREE         NUMBER;
L_STOR_PCT_USED         NUMBER;
L_STOR_MIN_EXTENTS      NUMBER; 

L_TABLE_CREATED         BOOLEAN;
L_TABLESPACE            VARCHAR2(40);
L_INDEX_TABLESPACE      VARCHAR2(40); 

CURSOR L_GK_CURSOR IS
SELECT *
FROM UTGKME
WHERE VERSION = A_VERSION
  AND GK = A_GK;

L_GK_REC       L_GK_CURSOR%ROWTYPE;

BEGIN

   L_SQLERRM := NULL;
   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF ( A_STOR_INITIAL IS NULL ) THEN
      L_RET_CODE := INITGROUPKEYDEFSTORAGE('ME', 
                             L_STOR_INITIAL, 
                             L_STOR_NEXT, 
                             L_STOR_MIN_EXTENTS, 
                             L_STOR_PCT_INCREASE, 
                             L_STOR_PCT_FREE, 
                             L_STOR_PCT_USED);
   ELSE
      L_STOR_INITIAL      := A_STOR_INITIAL;
      L_STOR_NEXT         := A_STOR_NEXT;
      L_STOR_MIN_EXTENTS  := A_STOR_MIN_EXTENTS;
      L_STOR_PCT_INCREASE := A_STOR_PCT_INCREASE;
      L_STOR_PCT_FREE     := A_STOR_PCT_FREE;
      L_STOR_PCT_USED     := A_STOR_PCT_USED;
   END IF;

   L_TABLE_CREATED := FALSE;

   OPEN L_GK_CURSOR;
   FETCH L_GK_CURSOR
   INTO L_GK_REC;
   L_GK_FOUND := L_GK_CURSOR%FOUND;
   CLOSE L_GK_CURSOR;

   IF NOT L_GK_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
      RAISE STPERROR;
   END IF;

   IF NVL(L_GK_REC.STRUCT_CREATED, '0') = '1' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_STRUCTCREATED;
      RAISE STPERROR;
   END IF;

   OPEN L_TABLESPACE_CURSOR ('UTSCME');
   FETCH L_TABLESPACE_CURSOR 
      INTO L_TABLESPACE;
   CLOSE L_TABLESPACE_CURSOR;

   OPEN L_INDEX_TABLESPACE_CURSOR ('UKSCME');
   FETCH L_INDEX_TABLESPACE_CURSOR 
      INTO L_INDEX_TABLESPACE;
   CLOSE L_INDEX_TABLESPACE_CURSOR;
    
    
   
   
   

   
   
   
   
   
   
   
   
   L_GKME_CURSOR := DBMS_SQL.OPEN_CURSOR;
   
   L_SQL_STRING := 'CREATE TABLE utscmegk' || A_GK ||
                   '(' || A_GK || ' VARCHAR2(40),'||
                   'sc VARCHAR2(20),'  ||
                   'pg VARCHAR2(20),'  ||
                   'pgnode NUMBER(9),' ||
                   'pa VARCHAR2(20),'  ||
                   'panode NUMBER(9),' ||
                   'me VARCHAR2(20),'  ||
                   'menode NUMBER(9),' ||
                   'CONSTRAINT ukscmegk' || A_GK ||
                   ' PRIMARY KEY(' || A_GK ||', sc, pg, pgnode, pa, panode, me, menode)'||                   
                   ' USING INDEX TABLESPACE '|| L_INDEX_TABLESPACE ||
                   ' STORAGE (INITIAL '      || L_STOR_INITIAL || 
                             ' NEXT '        || L_STOR_NEXT ||
                             ' PCTINCREASE ' || TO_CHAR(L_STOR_PCT_INCREASE) || ') ' ||
                   ' PCTFREE ' || TO_CHAR(L_STOR_PCT_FREE) ;

   IF L_GK_REC.VALUE_UNIQUE = '1' THEN
      L_SQL_STRING :=  L_SQL_STRING || ',CONSTRAINT ucscmegk' || A_GK ||
                     ' UNIQUE(' || A_GK || ')'||
                     ' USING INDEX TABLESPACE '|| L_INDEX_TABLESPACE ||
                     ' STORAGE (INITIAL '      || L_STOR_INITIAL || 
                               ' NEXT '        || L_STOR_NEXT ||
                               ' PCTINCREASE ' || TO_CHAR(L_STOR_PCT_INCREASE) || ') ' ||
                     ' PCTFREE ' || TO_CHAR(L_STOR_PCT_FREE) ;
   END IF;
   
   L_SQL_STRING := L_SQL_STRING || ') TABLESPACE '          || L_TABLESPACE || 
                                    ' STORAGE (INITIAL '    || L_STOR_INITIAL || 
                                             ' NEXT '       || L_STOR_NEXT || 
                                             ' PCTINCREASE '|| TO_CHAR(L_STOR_PCT_INCREASE)|| 
                                             ' MINEXTENTS ' || TO_CHAR(L_STOR_MIN_EXTENTS)|| 
                                              ')'           ||
                                    ' PCTFREE ' || TO_CHAR(L_STOR_PCT_FREE) ||
                                    ' PCTUSED ' || TO_CHAR(L_STOR_PCT_USED) ;

   DBMS_SQL.PARSE(L_GKME_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   L_RESULT := DBMS_SQL.EXECUTE(L_GKME_CURSOR);
   L_TABLE_CREATED := TRUE;

   
   
   
   
   
   
   
   L_SQL_STRING := 'CREATE INDEX uiscmegk'|| A_GK ||
                   ' ON utscmegk' || A_GK || '(sc, pg, pgnode, pa, panode, me, menode) ' ||
                   ' STORAGE (INITIAL '    || L_STOR_INITIAL || 
                            ' NEXT '       || L_STOR_NEXT || 
                            ' PCTINCREASE '|| TO_CHAR(L_STOR_PCT_INCREASE)|| 
                            ' MINEXTENTS ' || TO_CHAR(L_STOR_MIN_EXTENTS)|| 
                   ' ) PCTFREE ' || TO_CHAR(L_STOR_PCT_FREE) ||
                   ' TABLESPACE '|| L_INDEX_TABLESPACE;
   DBMS_SQL.PARSE(L_GKME_CURSOR, L_SQL_STRING, DBMS_SQL.V7);
   L_RESULT := DBMS_SQL.EXECUTE(L_GKME_CURSOR);
   
   DBMS_SQL.CLOSE_CURSOR(L_GKME_CURSOR);

   
   UPDATE UTGKME
   SET STRUCT_CREATED = '1'
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   
   
   
   L_RESULT := CREATEGROUPKEYMEENTRIES(A_GK);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      L_SQLERRM := 'CreateGroupKeyMeEntries returned '||L_RESULT||' for gk='||A_GK;
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;

   
   L_RESULT := UNAPIGK.CREATEUSERSTRUCTSFORGROUPKEY('ME', A_GK);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      L_SQLERRM := 'CreateUserStructsForGroupKey returned '||L_RESULT||' for gk_tp=ME#gk='||A_GK;
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;

   L_EVENT_TP := 'GroupKeyStructuresCreated';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT ('CreateGroupKeyMeStructures', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                    '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;
   
   BEGIN
      SELECT LOG_HS
      INTO L_LOG_HS
      FROM UTOBJECTS 
      WHERE OBJECT = 'gkme';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      
      
      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OBJTP;
      RAISE STPERROR;
   END;

   IF NVL(L_LOG_HS, ' ') = '1' THEN
      INSERT INTO UTGKMEHS (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                            WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES (A_GK, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
              'Database objects for group key "'||A_GK||'" are created.', 
              CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('CreateGroupKeyMeStructures', SQLERRM);
      UNAPIGEN.LOGERROR('CreateGroupKeyMeStructures', 'HELP for DBA:'||SUBSTR(L_SQL_STRING,1,235));
      IF (LENGTH(L_SQL_STRING)>235) THEN
         UNAPIGEN.LOGERROR('CreateGroupKeyMeStructures', 'HELP for DBA:'||SUBSTR(L_SQL_STRING,236,235));
      END IF;
   END IF;
   IF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('CreateGroupKeyMeStructures', SUBSTR(L_SQLERRM,1,235));
   END IF;
   IF L_GK_CURSOR%ISOPEN THEN
      CLOSE L_GK_CURSOR;
   END IF;
   IF L_TABLE_CREATED THEN
      
      BEGIN
         L_SQL_STRING := 'DROP TABLE utscmegk' || A_GK;
         DBMS_SQL.PARSE(L_GKME_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         L_RESULT := DBMS_SQL.EXECUTE(L_GKME_CURSOR);
      EXCEPTION
      WHEN OTHERS THEN
         NULL;
      END;
   END IF;
   IF DBMS_SQL.IS_OPEN (L_GKME_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_GKME_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'CreateGroupKeyMeStructures'));
END CREATEGROUPKEYMESTRUCTURES;



FUNCTION DELETEGROUPKEYMESTRUCTURES
(A_GK    IN    VARCHAR2)                         
RETURN NUMBER IS

A_VERSION         VARCHAR2(20);
L_GKME_CURSOR     INTEGER;
L_STRUCT_CREATED  CHAR(1);
L_GK_FOUND        BOOLEAN;
L_LOG_HS          CHAR(1);

CURSOR L_GK_CURSOR IS
SELECT NVL(STRUCT_CREATED, '0')
FROM UTGKME
WHERE VERSION = A_VERSION
  AND GK = A_GK;

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   OPEN L_GK_CURSOR;
   FETCH L_GK_CURSOR
   INTO L_STRUCT_CREATED;
   L_GK_FOUND := L_GK_CURSOR%FOUND;
   CLOSE L_GK_CURSOR;

   IF NOT L_GK_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
      RAISE STPERROR;
   END IF;

   IF NVL(L_STRUCT_CREATED, '0') = '0' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_STRUCTCREATED;
      RAISE STPERROR;
   END IF;

   
   IF UNAPIGEN.ISSYSTEM21CFR11COMPLIANT = UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTALLOWEDIN21CFR11;
      RAISE STPERROR;
   END IF;

      
   L_RESULT := UNAPIGK.DELETEUSERSTRUCTSFORGROUPKEY('ME', A_GK);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      L_SQLERRM := 'DeleteUserStructsForGroupKey returned '||L_RESULT||' for gk_tp=ST#gk='||A_GK;
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;

   DELETE FROM UTSCMEGK
   WHERE GK = A_GK;

   BEGIN
      L_GKME_CURSOR := DBMS_SQL.OPEN_CURSOR;
      L_SQL_STRING := 'DROP TABLE utscmegk' || A_GK ;
      DBMS_SQL.PARSE(L_GKME_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      L_RESULT := DBMS_SQL.EXECUTE(L_GKME_CURSOR);
      DBMS_SQL.CLOSE_CURSOR(L_GKME_CURSOR);
   EXCEPTION
   WHEN TABLE_DOES_NOT_EXIST THEN
      
      NULL;
   END;

   
   UNAPIGK.DELETEGROUPKEYFROMTASK('megk', A_GK);

   
   UPDATE UTGKME
   SET STRUCT_CREATED = '0'
   WHERE VERSION = A_VERSION
     AND GK = A_GK;

   L_EVENT_TP := 'GroupKeyStructuresDeleted';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT ('DeleteGroupKeyMeStructures', UNAPIGEN.P_EVMGR_NAME, 'gk', A_GK, '', 
                                    '', '', L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   BEGIN
      SELECT LOG_HS
      INTO L_LOG_HS
      FROM UTOBJECTS 
      WHERE OBJECT = 'gkme';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      
      
      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OBJTP;
      RAISE STPERROR;
   END;
   
   IF NVL(L_LOG_HS, ' ') = '1' THEN
      INSERT INTO UTGKMEHS (GK, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                            WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES (A_GK, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
              'Database objects for group key "'||A_GK||'" are deleted.', 
              CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('DeleteGroupKeyMeStructures', SQLERRM);
   END IF;
   IF L_GK_CURSOR%ISOPEN THEN
      CLOSE L_GK_CURSOR;
   END IF;
   IF DBMS_SQL.IS_OPEN(L_GKME_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_GKME_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'DeleteGroupKeyMeStructures'));
END DELETEGROUPKEYMESTRUCTURES;



FUNCTION CREATEGROUPKEYMEENTRIES                   
(A_GK    IN    VARCHAR2)                         
RETURN NUMBER IS

A_VERSION      VARCHAR2(20);
L_GKME_CURSOR  INTEGER;
L_GK_FOUND     BOOLEAN;

CURSOR L_GK_CURSOR IS
SELECT *
FROM UTGKME
WHERE VERSION = A_VERSION
  AND GK = A_GK;

L_GK_REC       L_GK_CURSOR%ROWTYPE;

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   OPEN L_GK_CURSOR;
   FETCH L_GK_CURSOR
   INTO L_GK_REC;
   L_GK_FOUND := L_GK_CURSOR%FOUND;
   CLOSE L_GK_CURSOR;

   IF NOT L_GK_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
      RAISE STPERROR;
   END IF;

   IF NVL(L_GK_REC.STRUCT_CREATED, '0') = '0' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_STRUCTCREATED;
      RAISE STPERROR;
   END IF;

   
   
   
   
   L_GKME_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'INSERT INTO utscmegk'||A_GK||'('||A_GK||', sc, pg, pgnode, pa, panode, me, menode) '||
                   'SELECT value, sc, pg, pgnode, pa, panode, me, menode '||
                   'FROM utscmegk '||
                   'WHERE gk = '''||A_GK||''' AND value IS NOT NULL';
   DBMS_SQL.PARSE(L_GKME_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   
   BEGIN
      L_RESULT := DBMS_SQL.EXECUTE(L_GKME_CURSOR);
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UNIQUEGK;
         RAISE STPERROR;
   END;
   
   DBMS_SQL.CLOSE_CURSOR(L_GKME_CURSOR);

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('CreateGroupKeyMeEntries', SQLERRM);
   END IF;
   IF L_GK_CURSOR%ISOPEN THEN
      CLOSE L_GK_CURSOR;
   END IF;
   IF DBMS_SQL.IS_OPEN (L_GKME_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_GKME_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'CreateGroupKeyMeEntries'));
END CREATEGROUPKEYMEENTRIES;



FUNCTION DELETEGROUPKEYMEENTRIES
(A_GK    IN    VARCHAR2)                         
RETURN NUMBER IS

A_VERSION         VARCHAR2(20);
L_GKME_CURSOR     INTEGER;
L_STRUCT_CREATED  CHAR(1);
L_GK_FOUND        BOOLEAN;

CURSOR L_GK_CURSOR IS
SELECT NVL(STRUCT_CREATED, '0')
FROM UTGKME
WHERE VERSION = A_VERSION
  AND GK = A_GK;

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   OPEN L_GK_CURSOR;
   FETCH L_GK_CURSOR
   INTO L_STRUCT_CREATED;
   L_GK_FOUND := L_GK_CURSOR%FOUND;
   CLOSE L_GK_CURSOR;

   IF NOT L_GK_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
      RAISE STPERROR;
   END IF;

   IF NVL(L_STRUCT_CREATED, '0') = '0' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_STRUCTCREATED;
      RAISE STPERROR;
   END IF;

   
   IF UNAPIGEN.ISSYSTEM21CFR11COMPLIANT = UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTALLOWEDIN21CFR11;
      RAISE STPERROR;
   END IF;

   DELETE FROM UTSCMEGK
   WHERE GK = A_GK;

   L_GKME_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'TRUNCATE TABLE utscmegk' || A_GK;
   DBMS_SQL.PARSE(L_GKME_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   L_RESULT := DBMS_SQL.EXECUTE(L_GKME_CURSOR);

   DBMS_SQL.CLOSE_CURSOR(L_GKME_CURSOR);

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('DeleteGroupKeyMeEntries', SQLERRM);
   END IF;
   IF L_GK_CURSOR%ISOPEN THEN
      CLOSE L_GK_CURSOR;
   END IF;
   IF DBMS_SQL.IS_OPEN (L_GKME_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_GKME_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'DeleteGroupKeyMeEntries'));
END DELETEGROUPKEYMEENTRIES;



FUNCTION GETGROUPKEYRTLIST
(A_GK                  OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_DESCRIPTION         OUT     UNAPIGEN.VC40_TABLE_TYPE,   
 A_NR_OF_ROWS          IN OUT  NUMBER,                     
 A_WHERE_CLAUSE        IN      VARCHAR2,                   
 A_NEXT_ROWS           IN      NUMBER)                     
RETURN NUMBER IS

BEGIN
   
   RETURN(UNAPIGK2.GETGROUPKEYRTLIST
          (A_GK,
           A_DESCRIPTION,
           A_NR_OF_ROWS,
           A_WHERE_CLAUSE,
           A_NEXT_ROWS));
   
END GETGROUPKEYRTLIST;



FUNCTION GETGROUPKEYRT
(A_GK               OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_DESCRIPTION      OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_IS_PROTECTED     OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_VALUE_UNIQUE     OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_SINGLE_VALUED    OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_NEW_VAL_ALLOWED  OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_MANDATORY        OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_STRUCT_CREATED   OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_INHERIT_GK       OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_VALUE_LIST_TP    OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_DEFAULT_VALUE    OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_DSP_ROWS         OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_VAL_LENGTH       OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_VAL_START        OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_ASSIGN_TP        OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_ASSIGN_ID        OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_Q_TP             OUT    UNAPIGEN.CHAR2_TABLE_TYPE,   
 A_Q_ID             OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_Q_CHECK_AU       OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_Q_AU             OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_NR_OF_ROWS       IN OUT NUMBER,                      
 A_WHERE_CLAUSE     IN     VARCHAR2)                    
RETURN NUMBER IS

BEGIN
   
   RETURN(UNAPIGK2.GETGROUPKEYRT
          (A_GK,
           A_DESCRIPTION,
           A_IS_PROTECTED,
           A_VALUE_UNIQUE,
           A_SINGLE_VALUED,
           A_NEW_VAL_ALLOWED,
           A_MANDATORY,
           A_STRUCT_CREATED,
           A_INHERIT_GK,
           A_VALUE_LIST_TP,
           A_DEFAULT_VALUE,
           A_DSP_ROWS,
           A_VAL_LENGTH,
           A_VAL_START,
           A_ASSIGN_TP,
           A_ASSIGN_ID,
           A_Q_TP,
           A_Q_ID,
           A_Q_CHECK_AU,
           A_Q_AU,
           A_NR_OF_ROWS,
           A_WHERE_CLAUSE));
   
END GETGROUPKEYRT;



FUNCTION GETGROUPKEYRTVALUE
(A_GK               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_VALUE            OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_NR_OF_ROWS       IN OUT  NUMBER,                    
 A_WHERE_CLAUSE     IN      VARCHAR2)                  
RETURN NUMBER IS
BEGIN
   
   RETURN(UNAPIGK2.GETGROUPKEYRTVALUE
          (A_GK,
           A_VALUE,
           A_NR_OF_ROWS,
           A_WHERE_CLAUSE));

   
END GETGROUPKEYRTVALUE;



FUNCTION GETGROUPKEYRTSQL
(A_GK              OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_SQLTEXT         OUT     UNAPIGEN.VC255_TABLE_TYPE,  
 A_NR_OF_ROWS      IN OUT  NUMBER,                     
 A_WHERE_CLAUSE    IN      VARCHAR2)                   
RETURN NUMBER IS
BEGIN
   
   RETURN(UNAPIGK2.GETGROUPKEYRTSQL
          (A_GK,
           A_SQLTEXT,
           A_NR_OF_ROWS,
           A_WHERE_CLAUSE));
   
END GETGROUPKEYRTSQL;



FUNCTION SAVEGROUPKEYRT
(A_GK               IN   VARCHAR2,                    
 A_DESCRIPTION      IN   VARCHAR2,                    
 A_IS_PROTECTED     IN   CHAR,                        
 A_VALUE_UNIQUE     IN   CHAR,                        
 A_SINGLE_VALUED    IN   CHAR,                        
 A_NEW_VAL_ALLOWED  IN   CHAR,                        
 A_MANDATORY        IN   CHAR,                        
 A_STRUCT_CREATED   IN   CHAR,                        
 A_INHERIT_GK       IN   CHAR,                        
 A_VALUE_LIST_TP    IN   CHAR,                        
 A_DEFAULT_VALUE    IN   VARCHAR2,                    
 A_DSP_ROWS         IN   NUMBER,                      
 A_VAL_LENGTH       IN   NUMBER,                      
 A_VAL_START        IN   NUMBER,                      
 A_ASSIGN_TP        IN   CHAR,                        
 A_ASSIGN_ID        IN   VARCHAR2,                    
 A_Q_TP             IN   CHAR,                        
 A_Q_ID             IN   VARCHAR2,                    
 A_Q_CHECK_AU       IN   CHAR,                        
 A_Q_AU             IN   VARCHAR2,                    
 A_VALUE            IN   UNAPIGEN.VC40_TABLE_TYPE,    
 A_SQLTEXT          IN   UNAPIGEN.VC255_TABLE_TYPE,   
 A_NR_OF_ROWS       IN   NUMBER,                      
 A_MODIFY_REASON    IN   VARCHAR2)                    
RETURN NUMBER IS
BEGIN
   
   RETURN(UNAPIGK2.SAVEGROUPKEYRT
          (A_GK, A_DESCRIPTION, A_IS_PROTECTED, A_VALUE_UNIQUE, A_SINGLE_VALUED,
           A_NEW_VAL_ALLOWED, A_MANDATORY, A_STRUCT_CREATED, A_INHERIT_GK, A_VALUE_LIST_TP,
           A_DEFAULT_VALUE, A_DSP_ROWS, A_VAL_LENGTH, A_VAL_START, A_ASSIGN_TP, A_ASSIGN_ID,
           A_Q_TP, A_Q_ID, A_Q_CHECK_AU, A_Q_AU, A_VALUE, A_SQLTEXT,
           A_NR_OF_ROWS, A_MODIFY_REASON));
   
END SAVEGROUPKEYRT;



FUNCTION DELETEGROUPKEYRT
(A_GK               IN     VARCHAR2,                   
 A_MODIFY_REASON    IN     VARCHAR2)                   
RETURN NUMBER IS
BEGIN
   
   RETURN(UNAPIGK2.DELETEGROUPKEYRT
          (A_GK, A_MODIFY_REASON));
   
END DELETEGROUPKEYRT;



FUNCTION CREATEGROUPKEYRTSTRUCTURES
(A_GK                IN    VARCHAR2,               
 A_STOR_INITIAL      IN    VARCHAR2,               
 A_STOR_NEXT         IN    VARCHAR2,               
 A_STOR_MIN_EXTENTS  IN    NUMBER,                 
 A_STOR_PCT_INCREASE IN    NUMBER,                 
 A_STOR_PCT_FREE     IN    NUMBER,                 
 A_STOR_PCT_USED     IN    NUMBER                  
)
RETURN NUMBER IS
BEGIN

   RETURN(UNAPIGK2.CREATEGROUPKEYRTSTRUCTURES(A_GK,
                                              A_STOR_INITIAL,
                                              A_STOR_NEXT,
                                              A_STOR_MIN_EXTENTS,
                                              A_STOR_PCT_INCREASE,
                                              A_STOR_PCT_FREE,
                                              A_STOR_PCT_USED));
   
END CREATEGROUPKEYRTSTRUCTURES;



FUNCTION DELETEGROUPKEYRTSTRUCTURES
(A_GK    IN    VARCHAR2)                         
RETURN NUMBER IS
BEGIN
   
   RETURN(UNAPIGK2.DELETEGROUPKEYRTSTRUCTURES(A_GK));
   
END DELETEGROUPKEYRTSTRUCTURES;



FUNCTION CREATEGROUPKEYRTENTRIES
(A_GK    IN    VARCHAR2)                         
RETURN NUMBER IS
BEGIN
   
   RETURN(UNAPIGK2.CREATEGROUPKEYRTENTRIES(A_GK));
   
END CREATEGROUPKEYRTENTRIES;



FUNCTION DELETEGROUPKEYRTENTRIES
(A_GK    IN    VARCHAR2)                         
RETURN NUMBER IS
BEGIN
   
   RETURN(UNAPIGK2.DELETEGROUPKEYRTENTRIES(A_GK));
   
END DELETEGROUPKEYRTENTRIES;



FUNCTION GETGROUPKEYRQLIST
(A_GK                  OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_DESCRIPTION         OUT     UNAPIGEN.VC40_TABLE_TYPE,   
 A_NR_OF_ROWS          IN OUT  NUMBER,                     
 A_WHERE_CLAUSE        IN      VARCHAR2,                   
 A_NEXT_ROWS           IN      NUMBER)                     
RETURN NUMBER IS

BEGIN
   
   RETURN(UNAPIGK2.GETGROUPKEYRQLIST
          (A_GK,
           A_DESCRIPTION,
           A_NR_OF_ROWS,
           A_WHERE_CLAUSE,
           A_NEXT_ROWS));
   
END GETGROUPKEYRQLIST;



FUNCTION GETGROUPKEYRQ
(A_GK               OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_DESCRIPTION      OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_IS_PROTECTED     OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_VALUE_UNIQUE     OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_SINGLE_VALUED    OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_NEW_VAL_ALLOWED  OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_MANDATORY        OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_STRUCT_CREATED   OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_INHERIT_GK       OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_VALUE_LIST_TP    OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_DEFAULT_VALUE    OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_DSP_ROWS         OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_VAL_LENGTH       OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_VAL_START        OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_ASSIGN_TP        OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_ASSIGN_ID        OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_Q_TP             OUT    UNAPIGEN.CHAR2_TABLE_TYPE,   
 A_Q_ID             OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_Q_CHECK_AU       OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_Q_AU             OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_NR_OF_ROWS       IN OUT NUMBER,                      
 A_WHERE_CLAUSE     IN     VARCHAR2)                    
RETURN NUMBER IS

BEGIN
   
   RETURN(UNAPIGK2.GETGROUPKEYRQ
          (A_GK,
           A_DESCRIPTION,
           A_IS_PROTECTED,
           A_VALUE_UNIQUE,
           A_SINGLE_VALUED,
           A_NEW_VAL_ALLOWED,
           A_MANDATORY,
           A_STRUCT_CREATED,
           A_INHERIT_GK,
           A_VALUE_LIST_TP,
           A_DEFAULT_VALUE,
           A_DSP_ROWS,
           A_VAL_LENGTH,
           A_VAL_START,
           A_ASSIGN_TP,
           A_ASSIGN_ID,
           A_Q_TP,
           A_Q_ID,
           A_Q_CHECK_AU,
           A_Q_AU,
           A_NR_OF_ROWS,
           A_WHERE_CLAUSE));
   
END GETGROUPKEYRQ;



FUNCTION GETGROUPKEYRQVALUE
(A_GK               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_VALUE            OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_NR_OF_ROWS       IN OUT  NUMBER,                    
 A_WHERE_CLAUSE     IN      VARCHAR2)                  
RETURN NUMBER IS
BEGIN
   
   RETURN(UNAPIGK2.GETGROUPKEYRQVALUE
          (A_GK,
           A_VALUE,
           A_NR_OF_ROWS,
           A_WHERE_CLAUSE));

   
END GETGROUPKEYRQVALUE;



FUNCTION GETGROUPKEYRQSQL
(A_GK              OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_SQLTEXT         OUT     UNAPIGEN.VC255_TABLE_TYPE,  
 A_NR_OF_ROWS      IN OUT  NUMBER,                     
 A_WHERE_CLAUSE    IN      VARCHAR2)                   
RETURN NUMBER IS
BEGIN
   
   RETURN(UNAPIGK2.GETGROUPKEYRQSQL
          (A_GK,
           A_SQLTEXT,
           A_NR_OF_ROWS,
           A_WHERE_CLAUSE));
   
END GETGROUPKEYRQSQL;



FUNCTION SAVEGROUPKEYRQ
(A_GK               IN   VARCHAR2,                    
 A_DESCRIPTION      IN   VARCHAR2,                    
 A_IS_PROTECTED     IN   CHAR,                        
 A_VALUE_UNIQUE     IN   CHAR,                        
 A_SINGLE_VALUED    IN   CHAR,                        
 A_NEW_VAL_ALLOWED  IN   CHAR,                        
 A_MANDATORY        IN   CHAR,                        
 A_STRUCT_CREATED   IN   CHAR,                        
 A_INHERIT_GK       IN   CHAR,                        
 A_VALUE_LIST_TP    IN   CHAR,                        
 A_DEFAULT_VALUE    IN   VARCHAR2,                    
 A_DSP_ROWS         IN   NUMBER,                      
 A_VAL_LENGTH       IN   NUMBER,                      
 A_VAL_START        IN   NUMBER,                      
 A_ASSIGN_TP        IN   CHAR,                        
 A_ASSIGN_ID        IN   VARCHAR2,                    
 A_Q_TP             IN   CHAR,                        
 A_Q_ID             IN   VARCHAR2,                    
 A_Q_CHECK_AU       IN   CHAR,                        
 A_Q_AU             IN   VARCHAR2,                    
 A_VALUE            IN   UNAPIGEN.VC40_TABLE_TYPE,    
 A_SQLTEXT          IN   UNAPIGEN.VC255_TABLE_TYPE,   
 A_NR_OF_ROWS       IN   NUMBER,                      
 A_MODIFY_REASON    IN   VARCHAR2)                    
RETURN NUMBER IS
BEGIN
   
   RETURN(UNAPIGK2.SAVEGROUPKEYRQ
          (A_GK, A_DESCRIPTION, A_IS_PROTECTED, A_VALUE_UNIQUE, A_SINGLE_VALUED,
           A_NEW_VAL_ALLOWED, A_MANDATORY, A_STRUCT_CREATED, A_INHERIT_GK, A_VALUE_LIST_TP,
           A_DEFAULT_VALUE, A_DSP_ROWS, A_VAL_LENGTH, A_VAL_START, A_ASSIGN_TP, A_ASSIGN_ID,
           A_Q_TP, A_Q_ID, A_Q_CHECK_AU, A_Q_AU, A_VALUE, A_SQLTEXT,
           A_NR_OF_ROWS, A_MODIFY_REASON));
   
END SAVEGROUPKEYRQ;



FUNCTION DELETEGROUPKEYRQ
(A_GK               IN     VARCHAR2,                   
 A_MODIFY_REASON    IN     VARCHAR2)                   
RETURN NUMBER IS
BEGIN
   
   RETURN(UNAPIGK2.DELETEGROUPKEYRQ
          (A_GK, A_MODIFY_REASON));
   
END DELETEGROUPKEYRQ;



FUNCTION CREATEGROUPKEYRQSTRUCTURES
(A_GK                IN    VARCHAR2,               
 A_STOR_INITIAL      IN    VARCHAR2,               
 A_STOR_NEXT         IN    VARCHAR2,               
 A_STOR_MIN_EXTENTS  IN    NUMBER,                 
 A_STOR_PCT_INCREASE IN    NUMBER,                 
 A_STOR_PCT_FREE     IN    NUMBER,                 
 A_STOR_PCT_USED     IN    NUMBER                  
)
RETURN NUMBER IS
BEGIN

   RETURN(UNAPIGK2.CREATEGROUPKEYRQSTRUCTURES(A_GK,
                                              A_STOR_INITIAL,
                                              A_STOR_NEXT,
                                              A_STOR_MIN_EXTENTS,
                                              A_STOR_PCT_INCREASE,
                                              A_STOR_PCT_FREE,
                                              A_STOR_PCT_USED));
   
END CREATEGROUPKEYRQSTRUCTURES;



FUNCTION DELETEGROUPKEYRQSTRUCTURES
(A_GK    IN    VARCHAR2)                         
RETURN NUMBER IS
BEGIN
   
   RETURN(UNAPIGK2.DELETEGROUPKEYRQSTRUCTURES(A_GK));
   
END DELETEGROUPKEYRQSTRUCTURES;



FUNCTION CREATEGROUPKEYRQENTRIES
(A_GK    IN    VARCHAR2)                         
RETURN NUMBER IS
BEGIN
   
   RETURN(UNAPIGK2.CREATEGROUPKEYRQENTRIES(A_GK));
   
END CREATEGROUPKEYRQENTRIES;



FUNCTION DELETEGROUPKEYRQENTRIES
(A_GK    IN    VARCHAR2)                         
RETURN NUMBER IS
BEGIN
   
   RETURN(UNAPIGK2.DELETEGROUPKEYRQENTRIES(A_GK));
   
END DELETEGROUPKEYRQENTRIES;



FUNCTION GETGROUPKEYWSLIST
(A_GK                  OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_DESCRIPTION         OUT     UNAPIGEN.VC40_TABLE_TYPE,   
 A_NR_OF_ROWS          IN OUT  NUMBER,                     
 A_WHERE_CLAUSE        IN      VARCHAR2,                   
 A_NEXT_ROWS           IN      NUMBER)                     
RETURN NUMBER IS

BEGIN
   
   RETURN(UNAPIGK2.GETGROUPKEYWSLIST
          (A_GK,
           A_DESCRIPTION,
           A_NR_OF_ROWS,
           A_WHERE_CLAUSE,
           A_NEXT_ROWS));
   
END GETGROUPKEYWSLIST;



FUNCTION GETGROUPKEYWS
(A_GK               OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_DESCRIPTION      OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_IS_PROTECTED     OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_VALUE_UNIQUE     OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_SINGLE_VALUED    OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_NEW_VAL_ALLOWED  OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_MANDATORY        OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_STRUCT_CREATED   OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_INHERIT_GK       OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_VALUE_LIST_TP    OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_DEFAULT_VALUE    OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_DSP_ROWS         OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_VAL_LENGTH       OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_VAL_START        OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_ASSIGN_TP        OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_ASSIGN_ID        OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_Q_TP             OUT    UNAPIGEN.CHAR2_TABLE_TYPE,   
 A_Q_ID             OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_Q_CHECK_AU       OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_Q_AU             OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_NR_OF_ROWS       IN OUT NUMBER,                      
 A_WHERE_CLAUSE     IN     VARCHAR2)                    
RETURN NUMBER IS

BEGIN
   
   RETURN(UNAPIGK2.GETGROUPKEYWS
          (A_GK,
           A_DESCRIPTION,
           A_IS_PROTECTED,
           A_VALUE_UNIQUE,
           A_SINGLE_VALUED,
           A_NEW_VAL_ALLOWED,
           A_MANDATORY,
           A_STRUCT_CREATED,
           A_INHERIT_GK,
           A_VALUE_LIST_TP,
           A_DEFAULT_VALUE,
           A_DSP_ROWS,
           A_VAL_LENGTH,
           A_VAL_START,
           A_ASSIGN_TP,
           A_ASSIGN_ID,
           A_Q_TP,
           A_Q_ID,
           A_Q_CHECK_AU,
           A_Q_AU,
           A_NR_OF_ROWS,
           A_WHERE_CLAUSE));
   
END GETGROUPKEYWS;



FUNCTION GETGROUPKEYWSVALUE
(A_GK               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_VALUE            OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_NR_OF_ROWS       IN OUT  NUMBER,                    
 A_WHERE_CLAUSE     IN      VARCHAR2)                  
RETURN NUMBER IS
BEGIN
   
   RETURN(UNAPIGK2.GETGROUPKEYWSVALUE
          (A_GK,
           A_VALUE,
           A_NR_OF_ROWS,
           A_WHERE_CLAUSE));

   
END GETGROUPKEYWSVALUE;



FUNCTION GETGROUPKEYWSSQL
(A_GK              OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_SQLTEXT         OUT     UNAPIGEN.VC255_TABLE_TYPE,  
 A_NR_OF_ROWS      IN OUT  NUMBER,                     
 A_WHERE_CLAUSE    IN      VARCHAR2)                   
RETURN NUMBER IS
BEGIN
   
   RETURN(UNAPIGK2.GETGROUPKEYWSSQL
          (A_GK,
           A_SQLTEXT,
           A_NR_OF_ROWS,
           A_WHERE_CLAUSE));
   
END GETGROUPKEYWSSQL;



FUNCTION SAVEGROUPKEYWS
(A_GK               IN   VARCHAR2,                    
 A_DESCRIPTION      IN   VARCHAR2,                    
 A_IS_PROTECTED     IN   CHAR,                        
 A_VALUE_UNIQUE     IN   CHAR,                        
 A_SINGLE_VALUED    IN   CHAR,                        
 A_NEW_VAL_ALLOWED  IN   CHAR,                        
 A_MANDATORY        IN   CHAR,                        
 A_STRUCT_CREATED   IN   CHAR,                        
 A_INHERIT_GK       IN   CHAR,                        
 A_VALUE_LIST_TP    IN   CHAR,                        
 A_DEFAULT_VALUE    IN   VARCHAR2,                    
 A_DSP_ROWS         IN   NUMBER,                      
 A_VAL_LENGTH       IN   NUMBER,                      
 A_VAL_START        IN   NUMBER,                      
 A_ASSIGN_TP        IN   CHAR,                        
 A_ASSIGN_ID        IN   VARCHAR2,                    
 A_Q_TP             IN   CHAR,                        
 A_Q_ID             IN   VARCHAR2,                    
 A_Q_CHECK_AU       IN   CHAR,                        
 A_Q_AU             IN   VARCHAR2,                    
 A_VALUE            IN   UNAPIGEN.VC40_TABLE_TYPE,    
 A_SQLTEXT          IN   UNAPIGEN.VC255_TABLE_TYPE,   
 A_NR_OF_ROWS       IN   NUMBER,                      
 A_MODIFY_REASON    IN   VARCHAR2)                    
RETURN NUMBER IS
BEGIN
   
   RETURN(UNAPIGK2.SAVEGROUPKEYWS
          (A_GK, A_DESCRIPTION, A_IS_PROTECTED, A_VALUE_UNIQUE, A_SINGLE_VALUED,
           A_NEW_VAL_ALLOWED, A_MANDATORY, A_STRUCT_CREATED, A_INHERIT_GK, A_VALUE_LIST_TP,
           A_DEFAULT_VALUE, A_DSP_ROWS, A_VAL_LENGTH, A_VAL_START, A_ASSIGN_TP, A_ASSIGN_ID,
           A_Q_TP, A_Q_ID, A_Q_CHECK_AU, A_Q_AU, A_VALUE, A_SQLTEXT,
           A_NR_OF_ROWS, A_MODIFY_REASON));
   
END SAVEGROUPKEYWS;



FUNCTION DELETEGROUPKEYWS
(A_GK               IN     VARCHAR2,                   
 A_MODIFY_REASON    IN     VARCHAR2)                   
RETURN NUMBER IS
BEGIN
   
   RETURN(UNAPIGK2.DELETEGROUPKEYWS
          (A_GK, A_MODIFY_REASON));
   
END DELETEGROUPKEYWS;



FUNCTION CREATEGROUPKEYWSSTRUCTURES
(A_GK                IN    VARCHAR2,               
 A_STOR_INITIAL      IN    VARCHAR2,               
 A_STOR_NEXT         IN    VARCHAR2,               
 A_STOR_MIN_EXTENTS  IN    NUMBER,                 
 A_STOR_PCT_INCREASE IN    NUMBER,                 
 A_STOR_PCT_FREE     IN    NUMBER,                 
 A_STOR_PCT_USED     IN    NUMBER                  
)
RETURN NUMBER IS
L_STOR_INITIAL       VARCHAR2(20);
L_STOR_NEXT          VARCHAR2(20);
L_STOR_MIN_EXTENTS   NUMBER; 
L_STOR_PCT_INCREASE  NUMBER; 
L_STOR_PCT_FREE      NUMBER; 
L_STOR_PCT_USED      NUMBER;  

BEGIN

   IF ( A_STOR_INITIAL IS NULL ) THEN
      L_RET_CODE := INITGROUPKEYDEFSTORAGE('WS', 
                             L_STOR_INITIAL, 
                             L_STOR_NEXT, 
                             L_STOR_MIN_EXTENTS, 
                             L_STOR_PCT_INCREASE, 
                             L_STOR_PCT_FREE, 
                             L_STOR_PCT_USED);
   ELSE
      L_STOR_INITIAL      := A_STOR_INITIAL;
      L_STOR_NEXT         := A_STOR_NEXT;
      L_STOR_MIN_EXTENTS  := A_STOR_MIN_EXTENTS;
      L_STOR_PCT_INCREASE := A_STOR_PCT_INCREASE;
      L_STOR_PCT_FREE     := A_STOR_PCT_FREE;
      L_STOR_PCT_USED     := A_STOR_PCT_USED;
   END IF;
   
   RETURN(UNAPIGK2.CREATEGROUPKEYWSSTRUCTURES(A_GK,
                                              A_STOR_INITIAL,
                                              A_STOR_NEXT,
                                              A_STOR_MIN_EXTENTS,
                                              A_STOR_PCT_INCREASE,
                                              A_STOR_PCT_FREE,
                                              A_STOR_PCT_USED));
   
END CREATEGROUPKEYWSSTRUCTURES;



FUNCTION DELETEGROUPKEYWSSTRUCTURES
(A_GK    IN    VARCHAR2)                         
RETURN NUMBER IS
BEGIN
   
   RETURN(UNAPIGK2.DELETEGROUPKEYWSSTRUCTURES(A_GK));
   
END DELETEGROUPKEYWSSTRUCTURES;



FUNCTION CREATEGROUPKEYWSENTRIES
(A_GK    IN    VARCHAR2)                         
RETURN NUMBER IS
BEGIN
   
   RETURN(UNAPIGK2.CREATEGROUPKEYWSENTRIES(A_GK));
   
END CREATEGROUPKEYWSENTRIES;



FUNCTION DELETEGROUPKEYWSENTRIES
(A_GK    IN    VARCHAR2)                         
RETURN NUMBER IS
BEGIN
   
   RETURN(UNAPIGK2.DELETEGROUPKEYWSENTRIES(A_GK));
   
END DELETEGROUPKEYWSENTRIES;



FUNCTION GETGROUPKEYPTLIST
(A_GK                  OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_DESCRIPTION         OUT     UNAPIGEN.VC40_TABLE_TYPE,   
 A_NR_OF_ROWS          IN OUT  NUMBER,                     
 A_WHERE_CLAUSE        IN      VARCHAR2,                   
 A_NEXT_ROWS           IN      NUMBER)                     
RETURN NUMBER IS

BEGIN
   
   RETURN(UNAPIGK2.GETGROUPKEYPTLIST
          (A_GK,
           A_DESCRIPTION,
           A_NR_OF_ROWS,
           A_WHERE_CLAUSE,
           A_NEXT_ROWS));
   
END GETGROUPKEYPTLIST;



FUNCTION GETGROUPKEYPT
(A_GK               OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_DESCRIPTION      OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_IS_PROTECTED     OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_VALUE_UNIQUE     OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_SINGLE_VALUED    OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_NEW_VAL_ALLOWED  OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_MANDATORY        OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_STRUCT_CREATED   OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_INHERIT_GK       OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_VALUE_LIST_TP    OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_DEFAULT_VALUE    OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_DSP_ROWS         OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_VAL_LENGTH       OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_VAL_START        OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_ASSIGN_TP        OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_ASSIGN_ID        OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_Q_TP             OUT    UNAPIGEN.CHAR2_TABLE_TYPE,   
 A_Q_ID             OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_Q_CHECK_AU       OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_Q_AU             OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_NR_OF_ROWS       IN OUT NUMBER,                      
 A_WHERE_CLAUSE     IN     VARCHAR2)                    
RETURN NUMBER IS

BEGIN
   
   RETURN(UNAPIGK2.GETGROUPKEYPT
          (A_GK,
           A_DESCRIPTION,
           A_IS_PROTECTED,
           A_VALUE_UNIQUE,
           A_SINGLE_VALUED,
           A_NEW_VAL_ALLOWED,
           A_MANDATORY,
           A_STRUCT_CREATED,
           A_INHERIT_GK,
           A_VALUE_LIST_TP,
           A_DEFAULT_VALUE,
           A_DSP_ROWS,
           A_VAL_LENGTH,
           A_VAL_START,
           A_ASSIGN_TP,
           A_ASSIGN_ID,
           A_Q_TP,
           A_Q_ID,
           A_Q_CHECK_AU,
           A_Q_AU,
           A_NR_OF_ROWS,
           A_WHERE_CLAUSE));
   
END GETGROUPKEYPT;



FUNCTION GETGROUPKEYPTVALUE
(A_GK               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_VALUE            OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_NR_OF_ROWS       IN OUT  NUMBER,                    
 A_WHERE_CLAUSE     IN      VARCHAR2)                  
RETURN NUMBER IS
BEGIN
   
   RETURN(UNAPIGK2.GETGROUPKEYPTVALUE
          (A_GK,
           A_VALUE,
           A_NR_OF_ROWS,
           A_WHERE_CLAUSE));

   
END GETGROUPKEYPTVALUE;



FUNCTION GETGROUPKEYPTSQL
(A_GK              OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_SQLTEXT         OUT     UNAPIGEN.VC255_TABLE_TYPE,  
 A_NR_OF_ROWS      IN OUT  NUMBER,                     
 A_WHERE_CLAUSE    IN      VARCHAR2)                   
RETURN NUMBER IS
BEGIN
   
   RETURN(UNAPIGK2.GETGROUPKEYPTSQL
          (A_GK,
           A_SQLTEXT,
           A_NR_OF_ROWS,
           A_WHERE_CLAUSE));
   
END GETGROUPKEYPTSQL;



FUNCTION SAVEGROUPKEYPT
(A_GK               IN   VARCHAR2,                    
 A_DESCRIPTION      IN   VARCHAR2,                    
 A_IS_PROTECTED     IN   CHAR,                        
 A_VALUE_UNIQUE     IN   CHAR,                        
 A_SINGLE_VALUED    IN   CHAR,                        
 A_NEW_VAL_ALLOWED  IN   CHAR,                        
 A_MANDATORY        IN   CHAR,                        
 A_STRUCT_CREATED   IN   CHAR,                        
 A_INHERIT_GK       IN   CHAR,                        
 A_VALUE_LIST_TP    IN   CHAR,                        
 A_DEFAULT_VALUE    IN   VARCHAR2,                    
 A_DSP_ROWS         IN   NUMBER,                      
 A_VAL_LENGTH       IN   NUMBER,                      
 A_VAL_START        IN   NUMBER,                      
 A_ASSIGN_TP        IN   CHAR,                        
 A_ASSIGN_ID        IN   VARCHAR2,                    
 A_Q_TP             IN   CHAR,                        
 A_Q_ID             IN   VARCHAR2,                    
 A_Q_CHECK_AU       IN   CHAR,                        
 A_Q_AU             IN   VARCHAR2,                    
 A_VALUE            IN   UNAPIGEN.VC40_TABLE_TYPE,    
 A_SQLTEXT          IN   UNAPIGEN.VC255_TABLE_TYPE,   
 A_NR_OF_ROWS       IN   NUMBER,                      
 A_MODIFY_REASON    IN   VARCHAR2)                    
RETURN NUMBER IS
BEGIN
   
   RETURN(UNAPIGK2.SAVEGROUPKEYPT
          (A_GK, A_DESCRIPTION, A_IS_PROTECTED, A_VALUE_UNIQUE, A_SINGLE_VALUED,
           A_NEW_VAL_ALLOWED, A_MANDATORY, A_STRUCT_CREATED, A_INHERIT_GK, A_VALUE_LIST_TP,
           A_DEFAULT_VALUE, A_DSP_ROWS, A_VAL_LENGTH, A_VAL_START, A_ASSIGN_TP, A_ASSIGN_ID,
           A_Q_TP, A_Q_ID, A_Q_CHECK_AU, A_Q_AU, A_VALUE, A_SQLTEXT,
           A_NR_OF_ROWS, A_MODIFY_REASON));
   
END SAVEGROUPKEYPT;



FUNCTION DELETEGROUPKEYPT
(A_GK               IN     VARCHAR2,                   
 A_MODIFY_REASON    IN     VARCHAR2)                   
RETURN NUMBER IS
BEGIN
   
   RETURN(UNAPIGK2.DELETEGROUPKEYPT
          (A_GK, A_MODIFY_REASON));
   
END DELETEGROUPKEYPT;



FUNCTION CREATEGROUPKEYPTSTRUCTURES
(A_GK                IN    VARCHAR2,               
 A_STOR_INITIAL      IN    VARCHAR2,               
 A_STOR_NEXT         IN    VARCHAR2,               
 A_STOR_MIN_EXTENTS  IN    NUMBER,                 
 A_STOR_PCT_INCREASE IN    NUMBER,                 
 A_STOR_PCT_FREE     IN    NUMBER,                 
 A_STOR_PCT_USED     IN    NUMBER                  
)
RETURN NUMBER IS
L_STOR_INITIAL       VARCHAR2(20);
L_STOR_NEXT          VARCHAR2(20);
L_STOR_MIN_EXTENTS   NUMBER; 
L_STOR_PCT_INCREASE  NUMBER; 
L_STOR_PCT_FREE      NUMBER; 
L_STOR_PCT_USED      NUMBER;  

BEGIN

   IF ( A_STOR_INITIAL IS NULL ) THEN
      L_RET_CODE := INITGROUPKEYDEFSTORAGE('PT', 
                             L_STOR_INITIAL, 
                             L_STOR_NEXT, 
                             L_STOR_MIN_EXTENTS, 
                             L_STOR_PCT_INCREASE, 
                             L_STOR_PCT_FREE, 
                             L_STOR_PCT_USED);
   ELSE
      L_STOR_INITIAL      := A_STOR_INITIAL;
      L_STOR_NEXT         := A_STOR_NEXT;
      L_STOR_MIN_EXTENTS  := A_STOR_MIN_EXTENTS;
      L_STOR_PCT_INCREASE := A_STOR_PCT_INCREASE;
      L_STOR_PCT_FREE     := A_STOR_PCT_FREE;
      L_STOR_PCT_USED     := A_STOR_PCT_USED;
   END IF;
   
   RETURN(UNAPIGK2.CREATEGROUPKEYPTSTRUCTURES(A_GK,
                                              A_STOR_INITIAL,
                                              A_STOR_NEXT,
                                              A_STOR_MIN_EXTENTS,
                                              A_STOR_PCT_INCREASE,
                                              A_STOR_PCT_FREE,
                                              A_STOR_PCT_USED));
   
END CREATEGROUPKEYPTSTRUCTURES;



FUNCTION DELETEGROUPKEYPTSTRUCTURES
(A_GK    IN    VARCHAR2)                         
RETURN NUMBER IS
BEGIN
   
   RETURN(UNAPIGK2.DELETEGROUPKEYPTSTRUCTURES(A_GK));
   
END DELETEGROUPKEYPTSTRUCTURES;



FUNCTION CREATEGROUPKEYPTENTRIES
(A_GK    IN    VARCHAR2)                         
RETURN NUMBER IS
BEGIN
   
   RETURN(UNAPIGK2.CREATEGROUPKEYPTENTRIES(A_GK));
   
END CREATEGROUPKEYPTENTRIES;



FUNCTION DELETEGROUPKEYPTENTRIES
(A_GK    IN    VARCHAR2)                         
RETURN NUMBER IS
BEGIN
   
   RETURN(UNAPIGK2.DELETEGROUPKEYPTENTRIES(A_GK));
   
END DELETEGROUPKEYPTENTRIES;



FUNCTION GETGROUPKEYSDLIST
(A_GK                  OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_DESCRIPTION         OUT     UNAPIGEN.VC40_TABLE_TYPE,   
 A_NR_OF_ROWS          IN OUT  NUMBER,                     
 A_WHERE_CLAUSE        IN      VARCHAR2,                   
 A_NEXT_ROWS           IN      NUMBER)                     
RETURN NUMBER IS

BEGIN
   
   RETURN(UNAPIGK2.GETGROUPKEYSDLIST
          (A_GK,
           A_DESCRIPTION,
           A_NR_OF_ROWS,
           A_WHERE_CLAUSE,
           A_NEXT_ROWS));
   
END GETGROUPKEYSDLIST;



FUNCTION GETGROUPKEYSD
(A_GK               OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_DESCRIPTION      OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_IS_PROTECTED     OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_VALUE_UNIQUE     OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_SINGLE_VALUED    OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_NEW_VAL_ALLOWED  OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_MANDATORY        OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_STRUCT_CREATED   OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_INHERIT_GK       OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_VALUE_LIST_TP    OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_DEFAULT_VALUE    OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_DSP_ROWS         OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_VAL_LENGTH       OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_VAL_START        OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_ASSIGN_TP        OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_ASSIGN_ID        OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_Q_TP             OUT    UNAPIGEN.CHAR2_TABLE_TYPE,   
 A_Q_ID             OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_Q_CHECK_AU       OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_Q_AU             OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_NR_OF_ROWS       IN OUT NUMBER,                      
 A_WHERE_CLAUSE     IN     VARCHAR2)                    
RETURN NUMBER IS

BEGIN
   
   RETURN(UNAPIGK2.GETGROUPKEYSD
          (A_GK,
           A_DESCRIPTION,
           A_IS_PROTECTED,
           A_VALUE_UNIQUE,
           A_SINGLE_VALUED,
           A_NEW_VAL_ALLOWED,
           A_MANDATORY,
           A_STRUCT_CREATED,
           A_INHERIT_GK,
           A_VALUE_LIST_TP,
           A_DEFAULT_VALUE,
           A_DSP_ROWS,
           A_VAL_LENGTH,
           A_VAL_START,
           A_ASSIGN_TP,
           A_ASSIGN_ID,
           A_Q_TP,
           A_Q_ID,
           A_Q_CHECK_AU,
           A_Q_AU,
           A_NR_OF_ROWS,
           A_WHERE_CLAUSE));
   
END GETGROUPKEYSD;



FUNCTION GETGROUPKEYSDVALUE
(A_GK               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_VALUE            OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_NR_OF_ROWS       IN OUT  NUMBER,                    
 A_WHERE_CLAUSE     IN      VARCHAR2)                  
RETURN NUMBER IS
BEGIN
   
   RETURN(UNAPIGK2.GETGROUPKEYSDVALUE
          (A_GK,
           A_VALUE,
           A_NR_OF_ROWS,
           A_WHERE_CLAUSE));

   
END GETGROUPKEYSDVALUE;



FUNCTION GETGROUPKEYSDSQL
(A_GK              OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_SQLTEXT         OUT     UNAPIGEN.VC255_TABLE_TYPE,  
 A_NR_OF_ROWS      IN OUT  NUMBER,                     
 A_WHERE_CLAUSE    IN      VARCHAR2)                   
RETURN NUMBER IS
BEGIN
   
   RETURN(UNAPIGK2.GETGROUPKEYSDSQL
          (A_GK,
           A_SQLTEXT,
           A_NR_OF_ROWS,
           A_WHERE_CLAUSE));
   
END GETGROUPKEYSDSQL;



FUNCTION SAVEGROUPKEYSD
(A_GK               IN   VARCHAR2,                    
 A_DESCRIPTION      IN   VARCHAR2,                    
 A_IS_PROTECTED     IN   CHAR,                        
 A_VALUE_UNIQUE     IN   CHAR,                        
 A_SINGLE_VALUED    IN   CHAR,                        
 A_NEW_VAL_ALLOWED  IN   CHAR,                        
 A_MANDATORY        IN   CHAR,                        
 A_STRUCT_CREATED   IN   CHAR,                        
 A_INHERIT_GK       IN   CHAR,                        
 A_VALUE_LIST_TP    IN   CHAR,                        
 A_DEFAULT_VALUE    IN   VARCHAR2,                    
 A_DSP_ROWS         IN   NUMBER,                      
 A_VAL_LENGTH       IN   NUMBER,                      
 A_VAL_START        IN   NUMBER,                      
 A_ASSIGN_TP        IN   CHAR,                        
 A_ASSIGN_ID        IN   VARCHAR2,                    
 A_Q_TP             IN   CHAR,                        
 A_Q_ID             IN   VARCHAR2,                    
 A_Q_CHECK_AU       IN   CHAR,                        
 A_Q_AU             IN   VARCHAR2,                    
 A_VALUE            IN   UNAPIGEN.VC40_TABLE_TYPE,    
 A_SQLTEXT          IN   UNAPIGEN.VC255_TABLE_TYPE,   
 A_NR_OF_ROWS       IN   NUMBER,                      
 A_MODIFY_REASON    IN   VARCHAR2)                    
RETURN NUMBER IS
BEGIN
   
   RETURN(UNAPIGK2.SAVEGROUPKEYSD
          (A_GK, A_DESCRIPTION, A_IS_PROTECTED, A_VALUE_UNIQUE, A_SINGLE_VALUED,
           A_NEW_VAL_ALLOWED, A_MANDATORY, A_STRUCT_CREATED, A_INHERIT_GK, A_VALUE_LIST_TP,
           A_DEFAULT_VALUE, A_DSP_ROWS, A_VAL_LENGTH, A_VAL_START, A_ASSIGN_TP, A_ASSIGN_ID,
           A_Q_TP, A_Q_ID, A_Q_CHECK_AU, A_Q_AU, A_VALUE, A_SQLTEXT,
           A_NR_OF_ROWS, A_MODIFY_REASON));
   
END SAVEGROUPKEYSD;



FUNCTION DELETEGROUPKEYSD
(A_GK               IN     VARCHAR2,                   
 A_MODIFY_REASON    IN     VARCHAR2)                   
RETURN NUMBER IS
BEGIN
   
   RETURN(UNAPIGK2.DELETEGROUPKEYSD
          (A_GK, A_MODIFY_REASON));
   
END DELETEGROUPKEYSD;



FUNCTION CREATEGROUPKEYSDSTRUCTURES
(A_GK                IN    VARCHAR2,               
 A_STOR_INITIAL      IN    VARCHAR2,               
 A_STOR_NEXT         IN    VARCHAR2,               
 A_STOR_MIN_EXTENTS  IN    NUMBER,                 
 A_STOR_PCT_INCREASE IN    NUMBER,                 
 A_STOR_PCT_FREE     IN    NUMBER,                 
 A_STOR_PCT_USED     IN    NUMBER                  
)
RETURN NUMBER IS
L_STOR_INITIAL       VARCHAR2(20);
L_STOR_NEXT          VARCHAR2(20);
L_STOR_MIN_EXTENTS   NUMBER; 
L_STOR_PCT_INCREASE  NUMBER; 
L_STOR_PCT_FREE      NUMBER; 
L_STOR_PCT_USED      NUMBER;  

BEGIN

   IF ( A_STOR_INITIAL IS NULL ) THEN
      L_RET_CODE := INITGROUPKEYDEFSTORAGE('SD', 
                             L_STOR_INITIAL, 
                             L_STOR_NEXT, 
                             L_STOR_MIN_EXTENTS, 
                             L_STOR_PCT_INCREASE, 
                             L_STOR_PCT_FREE, 
                             L_STOR_PCT_USED);
   ELSE
      L_STOR_INITIAL      := A_STOR_INITIAL;
      L_STOR_NEXT         := A_STOR_NEXT;
      L_STOR_MIN_EXTENTS  := A_STOR_MIN_EXTENTS;
      L_STOR_PCT_INCREASE := A_STOR_PCT_INCREASE;
      L_STOR_PCT_FREE     := A_STOR_PCT_FREE;
      L_STOR_PCT_USED     := A_STOR_PCT_USED;
   END IF;
   
   RETURN(UNAPIGK2.CREATEGROUPKEYSDSTRUCTURES(A_GK,
                                              A_STOR_INITIAL,
                                              A_STOR_NEXT,
                                              A_STOR_MIN_EXTENTS,
                                              A_STOR_PCT_INCREASE,
                                              A_STOR_PCT_FREE,
                                              A_STOR_PCT_USED));
   
END CREATEGROUPKEYSDSTRUCTURES;



FUNCTION DELETEGROUPKEYSDSTRUCTURES
(A_GK    IN    VARCHAR2)                         
RETURN NUMBER IS
BEGIN
   
   RETURN(UNAPIGK2.DELETEGROUPKEYSDSTRUCTURES(A_GK));
   
END DELETEGROUPKEYSDSTRUCTURES;



FUNCTION CREATEGROUPKEYSDENTRIES
(A_GK    IN    VARCHAR2)                         
RETURN NUMBER IS
BEGIN
   
   RETURN(UNAPIGK2.CREATEGROUPKEYSDENTRIES(A_GK));
   
END CREATEGROUPKEYSDENTRIES;



FUNCTION DELETEGROUPKEYSDENTRIES
(A_GK    IN    VARCHAR2)                         
RETURN NUMBER IS
BEGIN
   
   RETURN(UNAPIGK2.DELETEGROUPKEYSDENTRIES(A_GK));
   
END DELETEGROUPKEYSDENTRIES;



FUNCTION GETGROUPKEYDCLIST
(A_GK                  OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_DESCRIPTION         OUT     UNAPIGEN.VC40_TABLE_TYPE,   
 A_NR_OF_ROWS          IN OUT  NUMBER,                     
 A_WHERE_CLAUSE        IN      VARCHAR2,                   
 A_NEXT_ROWS           IN      NUMBER)                     
RETURN NUMBER IS

BEGIN
   
   RETURN(UNAPIGK2.GETGROUPKEYDCLIST
          (A_GK,
           A_DESCRIPTION,
           A_NR_OF_ROWS,
           A_WHERE_CLAUSE,
           A_NEXT_ROWS));
   
END GETGROUPKEYDCLIST;



FUNCTION GETGROUPKEYDC
(A_GK               OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_DESCRIPTION      OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_IS_PROTECTED     OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_VALUE_UNIQUE     OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_SINGLE_VALUED    OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_NEW_VAL_ALLOWED  OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_MANDATORY        OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_STRUCT_CREATED   OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_INHERIT_GK       OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_VALUE_LIST_TP    OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_DEFAULT_VALUE    OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_DSP_ROWS         OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_VAL_LENGTH       OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_VAL_START        OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_ASSIGN_TP        OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_ASSIGN_ID        OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_Q_TP             OUT    UNAPIGEN.CHAR2_TABLE_TYPE,   
 A_Q_ID             OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_Q_CHECK_AU       OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_Q_AU             OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_NR_OF_ROWS       IN OUT NUMBER,                      
 A_WHERE_CLAUSE     IN     VARCHAR2)                    
RETURN NUMBER IS

BEGIN
   
   RETURN(UNAPIGK2.GETGROUPKEYDC
          (A_GK,
           A_DESCRIPTION,
           A_IS_PROTECTED,
           A_VALUE_UNIQUE,
           A_SINGLE_VALUED,
           A_NEW_VAL_ALLOWED,
           A_MANDATORY,
           A_STRUCT_CREATED,
           A_INHERIT_GK,
           A_VALUE_LIST_TP,
           A_DEFAULT_VALUE,
           A_DSP_ROWS,
           A_VAL_LENGTH,
           A_VAL_START,
           A_ASSIGN_TP,
           A_ASSIGN_ID,
           A_Q_TP,
           A_Q_ID,
           A_Q_CHECK_AU,
           A_Q_AU,
           A_NR_OF_ROWS,
           A_WHERE_CLAUSE));
   
END GETGROUPKEYDC;



FUNCTION GETGROUPKEYDCVALUE
(A_GK               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_VALUE            OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_NR_OF_ROWS       IN OUT  NUMBER,                    
 A_WHERE_CLAUSE     IN      VARCHAR2)                  
RETURN NUMBER IS
BEGIN
   
   RETURN(UNAPIGK2.GETGROUPKEYDCVALUE
          (A_GK,
           A_VALUE,
           A_NR_OF_ROWS,
           A_WHERE_CLAUSE));

   
END GETGROUPKEYDCVALUE;



FUNCTION GETGROUPKEYDCSQL
(A_GK              OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_SQLTEXT         OUT     UNAPIGEN.VC255_TABLE_TYPE,  
 A_NR_OF_ROWS      IN OUT  NUMBER,                     
 A_WHERE_CLAUSE    IN      VARCHAR2)                   
RETURN NUMBER IS
BEGIN
   
   RETURN(UNAPIGK2.GETGROUPKEYDCSQL
          (A_GK,
           A_SQLTEXT,
           A_NR_OF_ROWS,
           A_WHERE_CLAUSE));
   
END GETGROUPKEYDCSQL;



FUNCTION SAVEGROUPKEYDC
(A_GK               IN   VARCHAR2,                    
 A_DESCRIPTION      IN   VARCHAR2,                    
 A_IS_PROTECTED     IN   CHAR,                        
 A_VALUE_UNIQUE     IN   CHAR,                        
 A_SINGLE_VALUED    IN   CHAR,                        
 A_NEW_VAL_ALLOWED  IN   CHAR,                        
 A_MANDATORY        IN   CHAR,                        
 A_STRUCT_CREATED   IN   CHAR,                        
 A_INHERIT_GK       IN   CHAR,                        
 A_VALUE_LIST_TP    IN   CHAR,                        
 A_DEFAULT_VALUE    IN   VARCHAR2,                    
 A_DSP_ROWS         IN   NUMBER,                      
 A_VAL_LENGTH       IN   NUMBER,                      
 A_VAL_START        IN   NUMBER,                      
 A_ASSIGN_TP        IN   CHAR,                        
 A_ASSIGN_ID        IN   VARCHAR2,                    
 A_Q_TP             IN   CHAR,                        
 A_Q_ID             IN   VARCHAR2,                    
 A_Q_CHECK_AU       IN   CHAR,                        
 A_Q_AU             IN   VARCHAR2,                    
 A_VALUE            IN   UNAPIGEN.VC40_TABLE_TYPE,    
 A_SQLTEXT          IN   UNAPIGEN.VC255_TABLE_TYPE,   
 A_NR_OF_ROWS       IN   NUMBER,                      
 A_MODIFY_REASON    IN   VARCHAR2)                    
RETURN NUMBER IS
BEGIN
   
   RETURN(UNAPIGK2.SAVEGROUPKEYDC
          (A_GK, A_DESCRIPTION, A_IS_PROTECTED, A_VALUE_UNIQUE, A_SINGLE_VALUED,
           A_NEW_VAL_ALLOWED, A_MANDATORY, A_STRUCT_CREATED, A_INHERIT_GK, A_VALUE_LIST_TP,
           A_DEFAULT_VALUE, A_DSP_ROWS, A_VAL_LENGTH, A_VAL_START, A_ASSIGN_TP, A_ASSIGN_ID,
           A_Q_TP, A_Q_ID, A_Q_CHECK_AU, A_Q_AU, A_VALUE, A_SQLTEXT,
           A_NR_OF_ROWS, A_MODIFY_REASON));
   
END SAVEGROUPKEYDC;



FUNCTION DELETEGROUPKEYDC
(A_GK               IN     VARCHAR2,                   
 A_MODIFY_REASON    IN     VARCHAR2)                   
RETURN NUMBER IS
BEGIN
   
   RETURN(UNAPIGK2.DELETEGROUPKEYDC
          (A_GK, A_MODIFY_REASON));
   
END DELETEGROUPKEYDC;



FUNCTION CREATEGROUPKEYDCSTRUCTURES
(A_GK                IN    VARCHAR2,               
 A_STOR_INITIAL      IN    VARCHAR2,               
 A_STOR_NEXT         IN    VARCHAR2,               
 A_STOR_MIN_EXTENTS  IN    NUMBER,                 
 A_STOR_PCT_INCREASE IN    NUMBER,                 
 A_STOR_PCT_FREE     IN    NUMBER,                 
 A_STOR_PCT_USED     IN    NUMBER                  
)
RETURN NUMBER IS
L_STOR_INITIAL       VARCHAR2(20);
L_STOR_NEXT          VARCHAR2(20);
L_STOR_MIN_EXTENTS   NUMBER; 
L_STOR_PCT_INCREASE  NUMBER; 
L_STOR_PCT_FREE      NUMBER; 
L_STOR_PCT_USED      NUMBER;  

BEGIN

   IF ( A_STOR_INITIAL IS NULL ) THEN
      L_RET_CODE := INITGROUPKEYDEFSTORAGE('DC', 
                             L_STOR_INITIAL, 
                             L_STOR_NEXT, 
                             L_STOR_MIN_EXTENTS, 
                             L_STOR_PCT_INCREASE, 
                             L_STOR_PCT_FREE, 
                             L_STOR_PCT_USED);
   ELSE
      L_STOR_INITIAL      := A_STOR_INITIAL;
      L_STOR_NEXT         := A_STOR_NEXT;
      L_STOR_MIN_EXTENTS  := A_STOR_MIN_EXTENTS;
      L_STOR_PCT_INCREASE := A_STOR_PCT_INCREASE;
      L_STOR_PCT_FREE     := A_STOR_PCT_FREE;
      L_STOR_PCT_USED     := A_STOR_PCT_USED;
   END IF;
   
   RETURN(UNAPIGK2.CREATEGROUPKEYDCSTRUCTURES(A_GK,
                                              A_STOR_INITIAL,
                                              A_STOR_NEXT,
                                              A_STOR_MIN_EXTENTS,
                                              A_STOR_PCT_INCREASE,
                                              A_STOR_PCT_FREE,
                                              A_STOR_PCT_USED));
   
END CREATEGROUPKEYDCSTRUCTURES;



FUNCTION DELETEGROUPKEYDCSTRUCTURES
(A_GK    IN    VARCHAR2)                         
RETURN NUMBER IS
BEGIN
   
   RETURN(UNAPIGK2.DELETEGROUPKEYDCSTRUCTURES(A_GK));
   
END DELETEGROUPKEYDCSTRUCTURES;



FUNCTION CREATEGROUPKEYDCENTRIES
(A_GK    IN    VARCHAR2)                         
RETURN NUMBER IS
BEGIN
   
   RETURN(UNAPIGK2.CREATEGROUPKEYDCENTRIES(A_GK));
   
END CREATEGROUPKEYDCENTRIES;



FUNCTION DELETEGROUPKEYDCENTRIES
(A_GK    IN    VARCHAR2)                         
RETURN NUMBER IS
BEGIN
   
   RETURN(UNAPIGK2.DELETEGROUPKEYDCENTRIES(A_GK));
   
END DELETEGROUPKEYDCENTRIES;



FUNCTION GETGROUPKEYCHLIST
(A_GK                  OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_DESCRIPTION         OUT     UNAPIGEN.VC40_TABLE_TYPE,   
 A_NR_OF_ROWS          IN OUT  NUMBER,                     
 A_WHERE_CLAUSE        IN      VARCHAR2,                   
 A_NEXT_ROWS           IN      NUMBER)                     
RETURN NUMBER IS

BEGIN
   
   RETURN(UNAPIGK2.GETGROUPKEYCHLIST
          (A_GK,
           A_DESCRIPTION,
           A_NR_OF_ROWS,
           A_WHERE_CLAUSE,
           A_NEXT_ROWS));
   
END GETGROUPKEYCHLIST;



FUNCTION GETGROUPKEYCH
(A_GK               OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_DESCRIPTION      OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_IS_PROTECTED     OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_VALUE_UNIQUE     OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_SINGLE_VALUED    OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_NEW_VAL_ALLOWED  OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_MANDATORY        OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_STRUCT_CREATED   OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_INHERIT_GK       OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_VALUE_LIST_TP    OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_DEFAULT_VALUE    OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_DSP_ROWS         OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_VAL_LENGTH       OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_VAL_START        OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_ASSIGN_TP        OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_ASSIGN_ID        OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_Q_TP             OUT    UNAPIGEN.CHAR2_TABLE_TYPE,   
 A_Q_ID             OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_Q_CHECK_AU       OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_Q_AU             OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_NR_OF_ROWS       IN OUT NUMBER,                      
 A_WHERE_CLAUSE     IN     VARCHAR2)                    
RETURN NUMBER IS

BEGIN
   
   RETURN(UNAPIGK2.GETGROUPKEYCH
          (A_GK,
           A_DESCRIPTION,
           A_IS_PROTECTED,
           A_VALUE_UNIQUE,
           A_SINGLE_VALUED,
           A_NEW_VAL_ALLOWED,
           A_MANDATORY,
           A_STRUCT_CREATED,
           A_INHERIT_GK,
           A_VALUE_LIST_TP,
           A_DEFAULT_VALUE,
           A_DSP_ROWS,
           A_VAL_LENGTH,
           A_VAL_START,
           A_ASSIGN_TP,
           A_ASSIGN_ID,
           A_Q_TP,
           A_Q_ID,
           A_Q_CHECK_AU,
           A_Q_AU,
           A_NR_OF_ROWS,
           A_WHERE_CLAUSE));
   
END GETGROUPKEYCH;



FUNCTION GETGROUPKEYCHVALUE
(A_GK               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_VALUE            OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_NR_OF_ROWS       IN OUT  NUMBER,                    
 A_WHERE_CLAUSE     IN      VARCHAR2)                  
RETURN NUMBER IS
BEGIN
   
   RETURN(UNAPIGK2.GETGROUPKEYCHVALUE
          (A_GK,
           A_VALUE,
           A_NR_OF_ROWS,
           A_WHERE_CLAUSE));

   
END GETGROUPKEYCHVALUE;



FUNCTION GETGROUPKEYCHSQL
(A_GK              OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_SQLTEXT         OUT     UNAPIGEN.VC255_TABLE_TYPE,  
 A_NR_OF_ROWS      IN OUT  NUMBER,                     
 A_WHERE_CLAUSE    IN      VARCHAR2)                   
RETURN NUMBER IS
BEGIN
   
   RETURN(UNAPIGK2.GETGROUPKEYCHSQL
          (A_GK,
           A_SQLTEXT,
           A_NR_OF_ROWS,
           A_WHERE_CLAUSE));
   
END GETGROUPKEYCHSQL;



FUNCTION SAVEGROUPKEYCH
(A_GK               IN   VARCHAR2,                    
 A_DESCRIPTION      IN   VARCHAR2,                    
 A_IS_PROTECTED     IN   CHAR,                        
 A_VALUE_UNIQUE     IN   CHAR,                        
 A_SINGLE_VALUED    IN   CHAR,                        
 A_NEW_VAL_ALLOWED  IN   CHAR,                        
 A_MANDATORY        IN   CHAR,                        
 A_STRUCT_CREATED   IN   CHAR,                        
 A_INHERIT_GK       IN   CHAR,                        
 A_VALUE_LIST_TP    IN   CHAR,                        
 A_DEFAULT_VALUE    IN   VARCHAR2,                    
 A_DSP_ROWS         IN   NUMBER,                      
 A_VAL_LENGTH       IN   NUMBER,                      
 A_VAL_START        IN   NUMBER,                      
 A_ASSIGN_TP        IN   CHAR,                        
 A_ASSIGN_ID        IN   VARCHAR2,                    
 A_Q_TP             IN   CHAR,                        
 A_Q_ID             IN   VARCHAR2,                    
 A_Q_CHECK_AU       IN   CHAR,                        
 A_Q_AU             IN   VARCHAR2,                    
 A_VALUE            IN   UNAPIGEN.VC40_TABLE_TYPE,    
 A_SQLTEXT          IN   UNAPIGEN.VC255_TABLE_TYPE,   
 A_NR_OF_ROWS       IN   NUMBER,                      
 A_MODIFY_REASON    IN   VARCHAR2)                    
RETURN NUMBER IS
BEGIN
   
   RETURN(UNAPIGK2.SAVEGROUPKEYCH
          (A_GK, A_DESCRIPTION, A_IS_PROTECTED, A_VALUE_UNIQUE, A_SINGLE_VALUED,
           A_NEW_VAL_ALLOWED, A_MANDATORY, A_STRUCT_CREATED, A_INHERIT_GK, A_VALUE_LIST_TP,
           A_DEFAULT_VALUE, A_DSP_ROWS, A_VAL_LENGTH, A_VAL_START, A_ASSIGN_TP, A_ASSIGN_ID,
           A_Q_TP, A_Q_ID, A_Q_CHECK_AU, A_Q_AU, A_VALUE, A_SQLTEXT,
           A_NR_OF_ROWS, A_MODIFY_REASON));
   
END SAVEGROUPKEYCH;



FUNCTION DELETEGROUPKEYCH
(A_GK               IN     VARCHAR2,                   
 A_MODIFY_REASON    IN     VARCHAR2)                   
RETURN NUMBER IS
BEGIN
   
   RETURN(UNAPIGK2.DELETEGROUPKEYCH
          (A_GK, A_MODIFY_REASON));
   
END DELETEGROUPKEYCH;



FUNCTION CREATEGROUPKEYCHSTRUCTURES
(A_GK                IN    VARCHAR2,               
 A_STOR_INITIAL      IN    VARCHAR2,               
 A_STOR_NEXT         IN    VARCHAR2,               
 A_STOR_MIN_EXTENTS  IN    NUMBER,                 
 A_STOR_PCT_INCREASE IN    NUMBER,                 
 A_STOR_PCT_FREE     IN    NUMBER,                 
 A_STOR_PCT_USED     IN    NUMBER                  
)
RETURN NUMBER IS
L_STOR_INITIAL       VARCHAR2(20);
L_STOR_NEXT          VARCHAR2(20);
L_STOR_MIN_EXTENTS   NUMBER; 
L_STOR_PCT_INCREASE  NUMBER; 
L_STOR_PCT_FREE      NUMBER; 
L_STOR_PCT_USED      NUMBER;  

BEGIN

   IF ( A_STOR_INITIAL IS NULL ) THEN
      L_RET_CODE := INITGROUPKEYDEFSTORAGE('CH', 
                             L_STOR_INITIAL, 
                             L_STOR_NEXT, 
                             L_STOR_MIN_EXTENTS, 
                             L_STOR_PCT_INCREASE, 
                             L_STOR_PCT_FREE, 
                             L_STOR_PCT_USED);
   ELSE
      L_STOR_INITIAL      := A_STOR_INITIAL;
      L_STOR_NEXT         := A_STOR_NEXT;
      L_STOR_MIN_EXTENTS  := A_STOR_MIN_EXTENTS;
      L_STOR_PCT_INCREASE := A_STOR_PCT_INCREASE;
      L_STOR_PCT_FREE     := A_STOR_PCT_FREE;
      L_STOR_PCT_USED     := A_STOR_PCT_USED;
   END IF;
   
   RETURN(UNAPIGK2.CREATEGROUPKEYCHSTRUCTURES(A_GK,
                                              A_STOR_INITIAL,
                                              A_STOR_NEXT,
                                              A_STOR_MIN_EXTENTS,
                                              A_STOR_PCT_INCREASE,
                                              A_STOR_PCT_FREE,
                                              A_STOR_PCT_USED));
   
END CREATEGROUPKEYCHSTRUCTURES;



FUNCTION DELETEGROUPKEYCHSTRUCTURES
(A_GK    IN    VARCHAR2)                         
RETURN NUMBER IS
BEGIN
   
   RETURN(UNAPIGK2.DELETEGROUPKEYCHSTRUCTURES(A_GK));
   
END DELETEGROUPKEYCHSTRUCTURES;



FUNCTION CREATEGROUPKEYCHENTRIES
(A_GK    IN    VARCHAR2)                         
RETURN NUMBER IS
BEGIN
   
   RETURN(UNAPIGK2.CREATEGROUPKEYCHENTRIES(A_GK));
   
END CREATEGROUPKEYCHENTRIES;



FUNCTION DELETEGROUPKEYCHENTRIES
(A_GK    IN    VARCHAR2)                         
RETURN NUMBER IS
BEGIN
   
   RETURN(UNAPIGK2.DELETEGROUPKEYCHENTRIES(A_GK));
   
END DELETEGROUPKEYCHENTRIES;



FUNCTION INITGROUPKEYDEFSTORAGE
(A_GK_TP             IN    VARCHAR2,               
 A_STOR_INITIAL      OUT   VARCHAR2,               
 A_STOR_NEXT         OUT   VARCHAR2,               
 A_STOR_MIN_EXTENTS  OUT   NUMBER,                 
 A_STOR_PCT_INCREASE OUT   NUMBER,                 
 A_STOR_PCT_FREE     OUT   NUMBER,                 
 A_STOR_PCT_USED     OUT   NUMBER                  
)                      
RETURN NUMBER IS

L_BASE_ROW_SIZE      INTEGER;
L_GK_ROW_SIZE        INTEGER;
L_ESTIMATED_ROWS     INTEGER;
L_GK_EXTENT_SIZE     INTEGER;
L_BASE_EXTENT_SIZE   INTEGER;
L_BASE_TABLE         VARCHAR2(50);
L_UNIT_MODIFIER      VARCHAR2(2);
L_POWER_OF_2         INTEGER ;
L_MEGA               NUMBER;   
L_MINEXTENT          NUMBER;   
L_CALC               INTEGER;  

CURSOR L_INITIAL_CURSOR (L_TABLE_NAME VARCHAR2) IS
  SELECT INITIAL_EXTENT
  FROM USER_TABLES
  WHERE TABLE_NAME = L_TABLE_NAME ;

BEGIN
   
   
   
   
   IF ( A_GK_TP = 'ST' ) THEN
      L_BASE_ROW_SIZE := 188;
      L_GK_ROW_SIZE := 40;
      L_BASE_TABLE := 'UTST' ;

   ELSIF (A_GK_TP = 'RT') THEN
      L_BASE_ROW_SIZE := 197;
      L_BASE_TABLE := 'UTRT' ;
      L_GK_ROW_SIZE := 40;

   ELSIF (A_GK_TP = 'SC') THEN
      L_BASE_ROW_SIZE := 195;
      L_BASE_TABLE := 'UTSC' ;
      L_GK_ROW_SIZE := 40;

   ELSIF (A_GK_TP = 'RQ') THEN
      L_BASE_ROW_SIZE := 190;
      L_BASE_TABLE := 'UTRQ' ;
      L_GK_ROW_SIZE := 40;

   ELSIF (A_GK_TP = 'ME') THEN
      L_BASE_ROW_SIZE := 432;
      L_BASE_TABLE := 'UTSCME' ;
      L_GK_ROW_SIZE := 80;

   ELSIF (A_GK_TP = 'WS') THEN
      L_BASE_ROW_SIZE := 319;
      L_BASE_TABLE := 'UTWS' ;
      L_GK_ROW_SIZE := 40;

   ELSIF (A_GK_TP = 'PT') THEN
      L_BASE_ROW_SIZE := 319;
      L_BASE_TABLE := 'UTPT' ;
      L_GK_ROW_SIZE := 40;

   ELSIF (A_GK_TP = 'SD') THEN
      L_BASE_ROW_SIZE := 319;
      L_BASE_TABLE := 'UTSD' ;
      L_GK_ROW_SIZE := 40;

   ELSIF ( A_GK_TP = 'DC' ) THEN
      L_BASE_ROW_SIZE := 319;
      L_GK_ROW_SIZE := 40;
      L_BASE_TABLE := 'UTDC' ;

   ELSIF ( A_GK_TP = 'CH' ) THEN
      L_BASE_ROW_SIZE := 319;
      L_GK_ROW_SIZE := 40;
      L_BASE_TABLE := 'UTCH' ;


      
   END IF;

   L_BASE_EXTENT_SIZE := 0 ;   
   
   OPEN L_INITIAL_CURSOR(L_BASE_TABLE);
   FETCH L_INITIAL_CURSOR INTO L_BASE_EXTENT_SIZE;
   CLOSE L_INITIAL_CURSOR;
   
   L_ESTIMATED_ROWS  := L_BASE_EXTENT_SIZE / L_BASE_ROW_SIZE;

   L_GK_EXTENT_SIZE  := TO_CHAR(L_ESTIMATED_ROWS * L_GK_ROW_SIZE);

   

   L_MEGA      := 1024;
   L_MINEXTENT := 8;

   L_GK_EXTENT_SIZE := L_GK_EXTENT_SIZE / L_MEGA ;

   IF L_GK_EXTENT_SIZE < L_MINEXTENT THEN
      A_STOR_INITIAL := '8 K';
   ELSE
      L_CALC := L_GK_EXTENT_SIZE ;
      IF L_CALC <= L_MINEXTENT THEN
         A_STOR_INITIAL := '8 K';

      ELSIF L_CALC >= L_MEGA THEN
         
         L_CALC := ROUND((L_CALC / L_MEGA), 0.5);

         
         A_STOR_INITIAL := TO_CHAR(L_CALC) || ' M';
      ELSE
         
         L_CALC := TRUNC(TRUNC(L_CALC / 8 + 1) * 8);
         A_STOR_INITIAL := TO_CHAR(L_CALC) || ' K';
      END IF;
   END IF;
   
   
   A_STOR_NEXT         := A_STOR_INITIAL;
   A_STOR_MIN_EXTENTS  :=  1;
   A_STOR_PCT_INCREASE :=  0;
   A_STOR_PCT_FREE     := 20;
   A_STOR_PCT_USED     := 40;
   
   RETURN (UNAPIGEN.DBERR_SUCCESS) ;
   
EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'InitGroupKeyDefStorage', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      RETURN(UNAPIGEN.DBERR_GENFAIL);

END INITGROUPKEYDEFSTORAGE;



FUNCTION SAVEEVENTRULES
(A_RULE_NR           IN       UNAPIGEN.NUM_TABLE_TYPE,    
 A_APPLIC            IN       UNAPIGEN.VC8_TABLE_TYPE,    
 A_DBAPI_NAME        IN       UNAPIGEN.VC40_TABLE_TYPE,   
 A_OBJECT_TP         IN       UNAPIGEN.VC4_TABLE_TYPE,    
 A_OBJECT_ID         IN       UNAPIGEN.VC20_TABLE_TYPE,   
 A_OBJECT_LC         IN       UNAPIGEN.VC2_TABLE_TYPE,    
 A_OBJECT_LC_VERSION IN       UNAPIGEN.VC20_TABLE_TYPE,   
 A_OBJECT_SS         IN       UNAPIGEN.VC2_TABLE_TYPE,    
 A_EV_TP             IN       UNAPIGEN.VC60_TABLE_TYPE,   
 A_CONDITION         IN       UNAPIGEN.VC255_TABLE_TYPE,  
 A_AF                IN       UNAPIGEN.VC255_TABLE_TYPE,  
 A_AF_DELAY          IN       UNAPIGEN.NUM_TABLE_TYPE,    
 A_AF_DELAY_UNIT     IN       UNAPIGEN.VC20_TABLE_TYPE,   
 A_CUSTOM            IN       UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_NR_OF_ROWS        IN       NUMBER,                     
 A_MODIFY_REASON     IN       VARCHAR2)                   
RETURN NUMBER IS

L_HS_CURSOR          INTEGER;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_NR_OF_ROWS, -1) < 0 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NROFROWS;
      RAISE STPERROR;
   END IF;

   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      IF NVL(A_RULE_NR(L_SEQ_NO), -1) = -1 THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
      END IF;
      IF NVL(A_AF(L_SEQ_NO), ' ') = ' ' THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
      END IF;
   END LOOP;

   DELETE
   FROM UTEVRULES;

   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      INSERT INTO UTEVRULES (RULE_NR, APPLIC, DBAPI_NAME, 
                             OBJECT_TP, OBJECT_ID, OBJECT_LC, 
                             OBJECT_LC_VERSION, OBJECT_SS, EV_TP, 
                             CONDITION, AF, AF_DELAY, 
                             AF_DELAY_UNIT, CUSTOM)
      VALUES (A_RULE_NR(L_SEQ_NO), A_APPLIC(L_SEQ_NO), A_DBAPI_NAME(L_SEQ_NO), 
              A_OBJECT_TP(L_SEQ_NO), A_OBJECT_ID(L_SEQ_NO), A_OBJECT_LC(L_SEQ_NO), 
              A_OBJECT_LC_VERSION(L_SEQ_NO), A_OBJECT_SS(L_SEQ_NO), A_EV_TP(L_SEQ_NO), 
              A_CONDITION(L_SEQ_NO), A_AF(L_SEQ_NO), A_AF_DELAY(L_SEQ_NO), 
              A_AF_DELAY_UNIT(L_SEQ_NO), A_CUSTOM(L_SEQ_NO));
   END LOOP;

   
   
   
   L_EV_SEQ_NR := -1;
   L_EVENT_TP := 'LoadEvRules';
   L_RESULT := UNAPIEV.BROADCASTEVENT ('SaveEventRules', UNAPIGEN.P_EVMGR_NAME, '', '', 
                                       '', '', '', L_EVENT_TP, '', L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;
   
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveEventRules', SQLERRM);
   END IF;
   IF DBMS_SQL.IS_OPEN(L_HS_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_HS_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveEventRules'));
END SAVEEVENTRULES;



FUNCTION GETEVENTRULES
(A_RULE_NR           OUT      UNAPIGEN.NUM_TABLE_TYPE,    
 A_APPLIC            OUT      UNAPIGEN.VC8_TABLE_TYPE,    
 A_DBAPI_NAME        OUT      UNAPIGEN.VC40_TABLE_TYPE,   
 A_OBJECT_TP         OUT      UNAPIGEN.VC4_TABLE_TYPE,    
 A_OBJECT_ID         OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_OBJECT_LC         OUT      UNAPIGEN.VC2_TABLE_TYPE,    
 A_OBJECT_LC_VERSION OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_OBJECT_SS         OUT      UNAPIGEN.VC2_TABLE_TYPE,    
 A_EV_TP             OUT      UNAPIGEN.VC60_TABLE_TYPE,   
 A_CONDITION         OUT      UNAPIGEN.VC255_TABLE_TYPE,  
 A_AF                OUT      UNAPIGEN.VC255_TABLE_TYPE,  
 A_AF_DELAY          OUT      UNAPIGEN.NUM_TABLE_TYPE,    
 A_AF_DELAY_UNIT     OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_CUSTOM            OUT      UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_NR_OF_ROWS        IN  OUT  NUMBER,                     
 A_ORDER_BY_CLAUSE   IN       VARCHAR2)                   
RETURN NUMBER IS

L_ORDER_BY_CLAUSE      VARCHAR2(1000);
L_EV_CURSOR            INTEGER;

L_RULE_NR              NUMBER(5);
L_APPLIC               VARCHAR2(8);
L_DBAPI_NAME           VARCHAR2(40);
L_OBJECT_TP            VARCHAR2(4);
L_OBJECT_ID            VARCHAR2(20);
L_OBJECT_LC            VARCHAR2(2);
L_OBJECT_LC_VERSION    VARCHAR2(20);
L_OBJECT_SS            VARCHAR2(2);
L_EV_TP                VARCHAR2(60);
L_CONDITION            VARCHAR2(255);
L_AF                   VARCHAR2(255);
L_AF_DELAY             NUMBER(3);
L_AF_DELAY_UNIT        VARCHAR2(20);
L_CUSTOM               CHAR(1);

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_ORDER_BY_CLAUSE, ' ') = ' ' THEN
      L_ORDER_BY_CLAUSE := 'ORDER BY rule_nr';
   ELSIF UPPER(SUBSTR(A_ORDER_BY_CLAUSE,1,9)) <> 'ORDER BY ' THEN
      L_ORDER_BY_CLAUSE := 'ORDER BY '||A_ORDER_BY_CLAUSE;
   ELSE
      L_ORDER_BY_CLAUSE := A_ORDER_BY_CLAUSE;
   END IF;

   L_EV_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT rule_nr, applic, dbapi_name, object_tp, object_id, object_lc, ' ||
                   'object_lc_version, object_ss, ev_tp, condition, af, af_delay, af_delay_unit, ' ||
                   'custom FROM dd' || UNAPIGEN.P_DD || '.uvevrules ' || L_ORDER_BY_CLAUSE;

   DBMS_SQL.PARSE(L_EV_CURSOR, L_SQL_STRING, DBMS_SQL.V7);

   DBMS_SQL.DEFINE_COLUMN(L_EV_CURSOR, 1,  L_RULE_NR               );
   DBMS_SQL.DEFINE_COLUMN(L_EV_CURSOR, 2,  L_APPLIC           , 8  );
   DBMS_SQL.DEFINE_COLUMN(L_EV_CURSOR, 3,  L_DBAPI_NAME       , 40 );
   DBMS_SQL.DEFINE_COLUMN(L_EV_CURSOR, 4,  L_OBJECT_TP        , 4  );
   DBMS_SQL.DEFINE_COLUMN(L_EV_CURSOR, 5,  L_OBJECT_ID        , 20 );
   DBMS_SQL.DEFINE_COLUMN(L_EV_CURSOR, 6,  L_OBJECT_LC        , 2  );
   DBMS_SQL.DEFINE_COLUMN(L_EV_CURSOR, 7,  L_OBJECT_LC_VERSION, 20 );
   DBMS_SQL.DEFINE_COLUMN(L_EV_CURSOR, 8,  L_OBJECT_SS        , 2  );
   DBMS_SQL.DEFINE_COLUMN(L_EV_CURSOR, 9,  L_EV_TP            , 60 );
   DBMS_SQL.DEFINE_COLUMN(L_EV_CURSOR, 10, L_CONDITION        , 255);
   DBMS_SQL.DEFINE_COLUMN(L_EV_CURSOR, 11, L_AF               , 255);
   DBMS_SQL.DEFINE_COLUMN(L_EV_CURSOR, 12, L_AF_DELAY              );
   DBMS_SQL.DEFINE_COLUMN(L_EV_CURSOR, 13, L_AF_DELAY_UNIT    , 20 );
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_EV_CURSOR, 14, L_CUSTOM      , 1  );

   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_EV_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_EV_CURSOR, 1,  L_RULE_NR          );
      DBMS_SQL.COLUMN_VALUE(L_EV_CURSOR, 2,  L_APPLIC           );
      DBMS_SQL.COLUMN_VALUE(L_EV_CURSOR, 3,  L_DBAPI_NAME       );
      DBMS_SQL.COLUMN_VALUE(L_EV_CURSOR, 4,  L_OBJECT_TP        );
      DBMS_SQL.COLUMN_VALUE(L_EV_CURSOR, 5,  L_OBJECT_ID        );
      DBMS_SQL.COLUMN_VALUE(L_EV_CURSOR, 6,  L_OBJECT_LC        );
      DBMS_SQL.COLUMN_VALUE(L_EV_CURSOR, 7,  L_OBJECT_LC_VERSION);
      DBMS_SQL.COLUMN_VALUE(L_EV_CURSOR, 8,  L_OBJECT_SS        );
      DBMS_SQL.COLUMN_VALUE(L_EV_CURSOR, 9,  L_EV_TP            );
      DBMS_SQL.COLUMN_VALUE(L_EV_CURSOR, 10, L_CONDITION        );
      DBMS_SQL.COLUMN_VALUE(L_EV_CURSOR, 11, L_AF               );
      DBMS_SQL.COLUMN_VALUE(L_EV_CURSOR, 12, L_AF_DELAY         );
      DBMS_SQL.COLUMN_VALUE(L_EV_CURSOR, 13, L_AF_DELAY_UNIT    );
      DBMS_SQL.COLUMN_VALUE_CHAR(L_EV_CURSOR, 14, L_CUSTOM      );

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_RULE_NR(L_FETCHED_ROWS)           := L_RULE_NR;
      A_APPLIC(L_FETCHED_ROWS)            := L_APPLIC;
      A_DBAPI_NAME(L_FETCHED_ROWS)        := L_DBAPI_NAME;
      A_OBJECT_TP(L_FETCHED_ROWS)         := L_OBJECT_TP;
      A_OBJECT_ID(L_FETCHED_ROWS)         := L_OBJECT_ID;
      A_OBJECT_LC(L_FETCHED_ROWS)         := L_OBJECT_LC;
      A_OBJECT_LC_VERSION(L_FETCHED_ROWS) := L_OBJECT_LC_VERSION;
      A_OBJECT_SS(L_FETCHED_ROWS)         := L_OBJECT_SS;
      A_EV_TP(L_FETCHED_ROWS)             := L_EV_TP;
      A_CONDITION(L_FETCHED_ROWS)         := L_CONDITION;
      A_AF(L_FETCHED_ROWS)                := L_AF;
      A_AF_DELAY(L_FETCHED_ROWS)          := L_AF_DELAY;
      A_AF_DELAY_UNIT(L_FETCHED_ROWS)     := L_AF_DELAY_UNIT;
      A_CUSTOM(L_FETCHED_ROWS)            := L_CUSTOM;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_EV_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_EV_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   L_SQLERRM := SQLERRM;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
           'GetEventRules', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   IF DBMS_SQL.IS_OPEN (L_EV_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_EV_CURSOR);
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETEVENTRULES;


FUNCTION LISTOFCOLUMNSFORGK 
(A_GK_TP   IN   VARCHAR2,
 A_GK      IN   VARCHAR2)
RETURN VARCHAR2 IS
BEGIN
   IF ( A_GK_TP = 'ST' ) THEN
      RETURN(REPLACE(UNAPIGK.ALLSTGKTABLECOLUMNS, '~gk~', A_GK));
   ELSIF (A_GK_TP = 'RT') THEN
      RETURN(REPLACE(UNAPIGK.ALLRTGKTABLECOLUMNS, '~gk~', A_GK));
   ELSIF (A_GK_TP = 'SC') THEN
      RETURN(REPLACE(UNAPIGK.ALLSCGKTABLECOLUMNS, '~gk~', A_GK));
   ELSIF (A_GK_TP = 'RQ') THEN
      RETURN(REPLACE(UNAPIGK.ALLRQGKTABLECOLUMNS, '~gk~', A_GK));
   ELSIF (A_GK_TP = 'ME') THEN
      RETURN(REPLACE(UNAPIGK.ALLSCMEGKTABLECOLUMNS, '~gk~', A_GK));
   ELSIF (A_GK_TP = 'WS') THEN
      RETURN(REPLACE(UNAPIGK.ALLWSGKTABLECOLUMNS, '~gk~', A_GK));
   ELSIF (A_GK_TP = 'PT') THEN
      RETURN(REPLACE(UNAPIGK.ALLPTGKTABLECOLUMNS, '~gk~', A_GK));
   ELSIF (A_GK_TP = 'SD') THEN
      RETURN(REPLACE(UNAPIGK.ALLSDGKTABLECOLUMNS, '~gk~', A_GK));
   ELSIF (A_GK_TP = 'DC') THEN
      RETURN(REPLACE(UNAPIGK.ALLDCGKTABLECOLUMNS, '~gk~', A_GK));
   ELSE
      
      RETURN('*');
   END IF;
END LISTOFCOLUMNSFORGK;

FUNCTION CREATEUSERSTRUCTSFORGROUPKEY
(A_GK_TP               IN      VARCHAR2,              
 A_GK                  IN      VARCHAR2)              
RETURN NUMBER IS

A_VERSION               VARCHAR2(20);
L_STEP                  VARCHAR2(255);
L_TABLE                 VARCHAR2(30);
L_VIEW                  VARCHAR2(30);

CURSOR L_UNILAB_USERS_CURSOR IS
   SELECT C.AD USERNAME, B.DD DD
   FROM DBA_USERS A, UTUP B, UTAD C
   WHERE A.USERNAME = C.AD
   AND C.DEF_UP = B.UP
   AND A.USERNAME <> (SELECT SETTING_VALUE FROM UTSYSTEM WHERE SETTING_NAME='DBA_NAME');   
BEGIN

   
   
   
   L_STEP := NULL;
   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
   
   IF A_GK_TP = 'ME' THEN
      L_TABLE := 'UTSC'||A_GK_TP||'GK'||A_GK;
      L_VIEW := 'UVSC'||A_GK_TP||'GK'||A_GK;   
   ELSE
      L_TABLE := 'UT'||A_GK_TP||'GK'||A_GK;
      L_VIEW := 'UV'||A_GK_TP||'GK'||A_GK;
   END IF;
   
   
   
   IF UNAPIGEN.P_DBA_NAME IS NULL OR
      UNAPIGEN.P_DATADOMAINS IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SETCONNECTION;
      RAISE STPERROR;
   END IF;

   
   L_STEP := 'Creating a view in the unilab dba schema';
   L_SQL_STRING := 'CREATE OR REPLACE VIEW '||L_VIEW||' AS SELECT * FROM '||L_TABLE;
   EXECUTE IMMEDIATE L_SQL_STRING;
         
   
   
   
   
   
   FOR L_DD IN 1..UNAPIGEN.P_DATADOMAINS LOOP
      L_STEP := 'Granting SELECT on the created group key table to dd.. user';
      L_SQL_STRING := 'GRANT SELECT ON '||L_TABLE||' TO "DD'||L_DD||'" WITH GRANT OPTION';
      EXECUTE IMMEDIATE L_SQL_STRING;

      L_STEP := 'Creating a view in the dd.. schema for the group key table';
      L_SQL_STRING := 'CREATE OR REPLACE VIEW "DD'||L_DD||'".'||L_VIEW||
                      ' AS SELECT '||LISTOFCOLUMNSFORGK(A_GK_TP, A_GK)||
                      ' FROM "'||UNAPIGEN.P_DBA_NAME||'".'||L_TABLE;
      EXECUTE IMMEDIATE L_SQL_STRING;

      L_STEP := 'Granting select on DD..view to the UR..';
      
      L_SQL_STRING := 'BEGIN :l_ret_code := DD'||L_DD||
                      '.UNAPIDD.GrantSelectOnDdTable(:a_dd, :l_view, :a_username); '||
                      'END;';
      EXECUTE IMMEDIATE L_SQL_STRING USING IN OUT L_RET_CODE, IN L_DD, IN L_VIEW, IN 'UR'||L_DD;

      L_STEP := 'Granting select on DD..view to the DBA';
      L_SQL_STRING := 'calling SYS schema package UNAPISYS.GrantSelectOnDdTable for DD='||L_DD||'#view='||L_VIEW||'#dba_name='||UNAPIGEN.P_DBA_NAME;
      
      L_SQL_STRING := 'BEGIN :l_ret_code := DD'||L_DD||
                      '.UNAPIDD.GrantSelectOnDdTable(:a_dd, :l_view, :a_username); '||
                      'END;';
      EXECUTE IMMEDIATE L_SQL_STRING USING IN OUT L_RET_CODE, IN L_DD, IN L_VIEW, IN UNAPIGEN.P_DBA_NAME;
      
   END LOOP;
   
   
   
   
   
   FOR L_USER_REC IN L_UNILAB_USERS_CURSOR LOOP
      L_STEP := 'Granting SELECT on the created DD..view to a user';
      
      L_SQL_STRING := 'BEGIN :l_ret_code := DD'||L_USER_REC.DD||
                      '.UNAPIDD.GrantSelectOnDdTable(:a_dd, :l_view, :a_username); '||
                      'END;';
      EXECUTE IMMEDIATE L_SQL_STRING USING IN OUT L_RET_CODE, IN L_USER_REC.DD, IN L_VIEW, IN L_USER_REC.USERNAME;
      

      BEGIN
         
         L_SQL_STRING := 'DROP SYNONYM "'||L_USER_REC.USERNAME||'".'||L_VIEW;
         EXECUTE IMMEDIATE L_SQL_STRING;
      EXCEPTION 
      WHEN OTHERS THEN
         NULL;        
      END;

      L_STEP := 'Creating user synonym on DD view';
      L_SQL_STRING := 'CREATE SYNONYM "'||L_USER_REC.USERNAME||'".'||L_VIEW||' FOR "DD'||L_USER_REC.DD||'".'||L_VIEW;
      EXECUTE IMMEDIATE L_SQL_STRING;

      L_STEP := NULL;   
   END LOOP;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('CreateUserStructsForGroupKey', SQLERRM);
      UNAPIGEN.LOGERROR('CreateUserStructsForGroupKey', 'HELP for DBA:'||SUBSTR(L_SQL_STRING,1,235));
      IF (LENGTH(L_SQL_STRING)>235) THEN
         UNAPIGEN.LOGERROR('CreateUserStructsForGroupKey', 'HELP for DBA:'||SUBSTR(L_SQL_STRING,236,235));
      END IF;
   END IF;
   IF L_STEP IS NOT NULL THEN
      UNAPIGEN.LOGERROR('CreateUserStructsForGroupKey', L_STEP);
   END IF;   
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'CreateUserStructsForGroupKey'));
END CREATEUSERSTRUCTSFORGROUPKEY;

FUNCTION DELETEUSERSTRUCTSFORGROUPKEY
(A_GK_TP               IN      VARCHAR2,              
 A_GK                  IN      VARCHAR2)              
RETURN NUMBER IS

A_VERSION               VARCHAR2(20);
L_STEP                  VARCHAR2(255);
L_TABLE                 VARCHAR2(30);
L_VIEW                  VARCHAR2(30);

CURSOR L_UNILAB_USERS_CURSOR IS
   SELECT C.AD USERNAME, B.DD DD
   FROM DBA_USERS A, UTUP B, UTAD C
   WHERE A.USERNAME = C.AD
   AND C.DEF_UP = B.UP
   AND A.USERNAME <> (SELECT SETTING_VALUE FROM UTSYSTEM WHERE SETTING_NAME='DBA_NAME');   
BEGIN

   
   
   
   L_STEP := NULL;
   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
   
   IF A_GK_TP = 'ME' THEN
      L_TABLE := 'UTSC'||A_GK_TP||'GK'||A_GK;
      L_VIEW := 'UVSC'||A_GK_TP||'GK'||A_GK;   
   ELSE
      L_TABLE := 'UT'||A_GK_TP||'GK'||A_GK;
      L_VIEW := 'UV'||A_GK_TP||'GK'||A_GK;
   END IF;
   
   
   
   IF UNAPIGEN.P_DBA_NAME IS NULL OR
      UNAPIGEN.P_DATADOMAINS IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SETCONNECTION;
      RAISE STPERROR;
   END IF;
   
   
   
   
   
   FOR L_USER_REC IN L_UNILAB_USERS_CURSOR LOOP

      BEGIN
         
         L_SQL_STRING := 'DROP SYNONYM "'||L_USER_REC.USERNAME||'".'||L_VIEW;
         EXECUTE IMMEDIATE L_SQL_STRING;
      EXCEPTION 
      WHEN OTHERS THEN
         NULL;        
      END;
      L_STEP := 'Revoking SELECT on the created DD..view to a user';
      
      L_SQL_STRING := 'BEGIN :l_ret_code := DD'||L_USER_REC.DD||
                      '.UNAPIDD.RevokeSelectOnDdTable(:a_dd, :l_view, :a_username); '||
                      'END;';
      EXECUTE IMMEDIATE L_SQL_STRING USING IN OUT L_RET_CODE, IN L_USER_REC.DD, IN L_VIEW, IN L_USER_REC.USERNAME;
      

      L_STEP := NULL;   
   END LOOP;
   
   
   
   
   
   FOR L_DD IN 1..UNAPIGEN.P_DATADOMAINS LOOP
      L_STEP := 'Revoking select on DD..view to the DBA';
      
      
      L_SQL_STRING := 'BEGIN :l_ret_code := DD'||L_DD||
                      '.UNAPIDD.RevokeSelectOnDdTable(:a_dd, :l_view, :a_username); '||
                      'END;';
      EXECUTE IMMEDIATE L_SQL_STRING USING IN OUT L_RET_CODE, IN L_DD, IN L_VIEW, IN UNAPIGEN.P_DBA_NAME;
      L_STEP := 'revoking select on DD..view to the UR..';
      
      L_SQL_STRING := 'BEGIN :l_ret_code := DD'||L_DD||
                      '.UNAPIDD.RevokeSelectOnDdTable(:a_dd, :l_view, :a_username); '||
                      'END;';
      EXECUTE IMMEDIATE L_SQL_STRING USING IN OUT L_RET_CODE, IN L_DD, IN L_VIEW, IN 'UR'||L_DD;
       L_STEP := 'Deleting the view in the dd.. schema for the group key table';
      L_SQL_STRING := 'DROP VIEW "DD'||L_DD||'".'||L_VIEW;
      EXECUTE IMMEDIATE L_SQL_STRING;
      L_STEP := 'Revoking SELECT on the deleted group key table to dd.. user';
      L_SQL_STRING := 'REVOKE SELECT ON '||L_TABLE||' FROM "DD'||L_DD||'" ';
      EXECUTE IMMEDIATE L_SQL_STRING;
   END LOOP;
   
   L_STEP := 'Deleting the view in the unilab dba schema';
   L_SQL_STRING := 'DROP VIEW '||L_VIEW;
   EXECUTE IMMEDIATE L_SQL_STRING;
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('DeleteUserStructsForGroupKey', SQLERRM);
      UNAPIGEN.LOGERROR('DeleteUserStructsForGroupKey', 'HELP for DBA:'||SUBSTR(L_SQL_STRING,1,235));
      IF (LENGTH(L_SQL_STRING)>235) THEN
         UNAPIGEN.LOGERROR('DeleteUserStructsForGroupKey', 'HELP for DBA:'||SUBSTR(L_SQL_STRING,236,235));
      END IF;
   END IF;
   IF L_STEP IS NOT NULL THEN
      UNAPIGEN.LOGERROR('DeleteUserStructsForGroupKey', L_STEP);
   END IF;   
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'DeleteUserStructsForGroupKey'));
END DELETEUSERSTRUCTSFORGROUPKEY;

FUNCTION INITGROUPKEYDEFBUFFER
(A_GK_TP               IN      VARCHAR2)              
RETURN NUMBER IS 
BEGIN
   RETURN(UNAPIGK2.INITGROUPKEYDEFBUFFER(A_GK_TP));
END INITGROUPKEYDEFBUFFER;

FUNCTION CLOSEGROUPKEYDEFBUFFER
(A_GK_TP               IN      VARCHAR2)              
RETURN NUMBER IS
BEGIN
   RETURN(UNAPIGK2.CLOSEGROUPKEYDEFBUFFER(A_GK_TP));
END CLOSEGROUPKEYDEFBUFFER;




BEGIN
   P_GK_CURSOR := NULL;
END UNAPIGK;
PACKAGE BODY unapist2 AS

L_SQLERRM         VARCHAR2(255);
L_SQL_STRING      VARCHAR2(4000);
L_WHERE_CLAUSE    VARCHAR2(1000);
L_EVENT_TP        UTEV.EV_TP%TYPE;
L_RET_CODE        NUMBER;
L_RESULT          NUMBER;
L_FETCHED_ROWS    NUMBER;
L_EV_SEQ_NR       NUMBER;
L_EV_DETAILS      VARCHAR2(255);
STPERROR          EXCEPTION;
P_STIP_CURSOR          INTEGER;
P_STPP_CURSOR          INTEGER;
P_STGK_CURSOR          INTEGER;

FUNCTION GETVERSION
   RETURN VARCHAR2
IS
BEGIN
   RETURN('06.07.00.00_00.13');
EXCEPTION
   WHEN OTHERS THEN
      RETURN (NULL);
END GETVERSION;

FUNCTION GETSTCOMMONIPLIST                                      
(A_ST                      IN       UNAPIGEN.VC20_TABLE_TYPE,   
 A_VERSION                 IN       UNAPIGEN.VC20_TABLE_TYPE,   
 A_ST_NR_ROWS              IN       NUMBER,                     
 A_IP                      OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_IP_VERSION              OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_DESCRIPTION             OUT      UNAPIGEN.VC40_TABLE_TYPE,   
 A_IP_CNT                  OUT      UNAPIGEN.NUM_TABLE_TYPE,    
 A_FREQ_TP                 OUT      UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_FREQ_VAL                OUT      UNAPIGEN.NUM_TABLE_TYPE,    
 A_FREQ_UNIT               OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_INVERT_FREQ             OUT      UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_LAST_SCHED              OUT      UNAPIGEN.DATE_TABLE_TYPE,   
 A_LAST_CNT                OUT      UNAPIGEN.NUM_TABLE_TYPE,    
 A_LAST_VAL                OUT      UNAPIGEN.VC40_TABLE_TYPE,   
 A_NR_OF_ROWS              IN OUT   NUMBER,                     
 A_NEXT_ROWS               IN       NUMBER)                     
RETURN NUMBER IS

L_IP             VARCHAR2(20);
L_DESCRIPTION    VARCHAR2(40);
L_FREQ_TP        CHAR(1);
L_FREQ_VAL       NUMBER;
L_FREQ_UNIT      VARCHAR2(20);
L_INVERT_FREQ    CHAR(1);
L_LAST_SCHED     TIMESTAMP WITH TIME ZONE;
L_LAST_CNT       NUMBER(5);
L_LAST_VAL       VARCHAR2(40);
L_IP_CNT         NUMBER;
L_IP_FOUND       BOOLEAN;
CURSOR L_IP_CURSOR (C_IP VARCHAR2) IS
SELECT DESCRIPTION
FROM UTIP
WHERE IP = C_IP;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF (A_ST_NR_ROWS < 1) THEN
       UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_STIP_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_STIP_CURSOR);
         P_STIP_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_STIP_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      IF P_STIP_CURSOR IS NULL THEN
         P_STIP_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;

   L_WHERE_CLAUSE := 'WHERE st IN (';
   FOR CTR IN 1..A_ST_NR_ROWS LOOP
      L_WHERE_CLAUSE := L_WHERE_CLAUSE || '''' || REPLACE(A_ST(CTR), '''', '''''') || ''','; 
   END LOOP;
   L_WHERE_CLAUSE := SUBSTR(L_WHERE_CLAUSE, 1, LENGTH(L_WHERE_CLAUSE)-1) ||
                        ') GROUP BY ip ORDER BY MIN(seq), ip';

      L_SQL_STRING :=
'SELECT ip, COUNT(ip), MAX(freq_tp), MAX(freq_val), MAX(freq_unit), MAX(invert_freq), '||
'MAX(last_sched), MAX(last_cnt), MAX(last_val) ' ||
'FROM dd' || UNAPIGEN.P_DD || '.uvstip ' || L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(P_STIP_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(P_STIP_CURSOR, 1, L_IP, 20);
   DBMS_SQL.DEFINE_COLUMN(P_STIP_CURSOR, 2, L_IP_CNT);
   DBMS_SQL.DEFINE_COLUMN_CHAR(P_STIP_CURSOR, 3, L_FREQ_TP, 1);
   DBMS_SQL.DEFINE_COLUMN(P_STIP_CURSOR, 4, L_FREQ_VAL);
   DBMS_SQL.DEFINE_COLUMN(P_STIP_CURSOR, 5, L_FREQ_UNIT, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(P_STIP_CURSOR, 6, L_INVERT_FREQ, 1);
   DBMS_SQL.DEFINE_COLUMN(P_STIP_CURSOR, 7, L_LAST_SCHED);
   DBMS_SQL.DEFINE_COLUMN(P_STIP_CURSOR, 8, L_LAST_CNT);
   DBMS_SQL.DEFINE_COLUMN(P_STIP_CURSOR, 9, L_LAST_VAL, 40);
   L_RESULT := DBMS_SQL.EXECUTE(P_STIP_CURSOR);
   END IF;

   L_RESULT := DBMS_SQL.FETCH_ROWS(P_STIP_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_STIP_CURSOR, 1, L_IP);
      DBMS_SQL.COLUMN_VALUE(P_STIP_CURSOR, 2, L_IP_CNT);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_STIP_CURSOR, 3, L_FREQ_TP);
      DBMS_SQL.COLUMN_VALUE(P_STIP_CURSOR, 4, L_FREQ_VAL);
      DBMS_SQL.COLUMN_VALUE(P_STIP_CURSOR, 5, L_FREQ_UNIT);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_STIP_CURSOR, 6, L_INVERT_FREQ);
      DBMS_SQL.COLUMN_VALUE(P_STIP_CURSOR, 7, L_LAST_SCHED);
      DBMS_SQL.COLUMN_VALUE(P_STIP_CURSOR, 8, L_LAST_CNT);
      DBMS_SQL.COLUMN_VALUE(P_STIP_CURSOR, 9, L_LAST_VAL);
      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_IP(L_FETCHED_ROWS) := L_IP;
      A_IP_CNT(L_FETCHED_ROWS) := L_IP_CNT;
      A_FREQ_TP (L_FETCHED_ROWS) := L_FREQ_TP;
      A_FREQ_VAL (L_FETCHED_ROWS) := L_FREQ_VAL;
      A_FREQ_UNIT (L_FETCHED_ROWS) := L_FREQ_UNIT;
      A_INVERT_FREQ (L_FETCHED_ROWS) := L_INVERT_FREQ;
      A_LAST_SCHED (L_FETCHED_ROWS) := TO_CHAR(L_LAST_SCHED);
      A_LAST_CNT (L_FETCHED_ROWS) := L_LAST_CNT;
      A_LAST_VAL (L_FETCHED_ROWS) := L_LAST_VAL;

      OPEN L_IP_CURSOR (L_IP);
      L_DESCRIPTION := NULL;
      FETCH L_IP_CURSOR INTO  L_DESCRIPTION;
      L_IP_FOUND := L_IP_CURSOR%FOUND;
      CLOSE L_IP_CURSOR;

      IF NOT L_IP_FOUND  THEN
         L_DESCRIPTION := L_IP;
      END IF;

      A_DESCRIPTION(L_FETCHED_ROWS) :=  L_DESCRIPTION;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_STIP_CURSOR);
      END IF;
   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_STIP_CURSOR);
       P_STIP_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_STIP_CURSOR);
      P_STIP_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetStCommonIpList', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (P_STIP_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (P_STIP_CURSOR);
      END IF;
      IF L_IP_CURSOR%ISOPEN THEN
         CLOSE L_IP_CURSOR;
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETSTCOMMONIPLIST;

FUNCTION GETSTCOMMONPPLIST                                      
(A_ST                      IN     UNAPIGEN.VC20_TABLE_TYPE,     
 A_VERSION                 IN     UNAPIGEN.VC20_TABLE_TYPE,     
 A_ST_NR_ROWS              IN     NUMBER,                       
 A_PP                      OUT    UNAPIGEN.VC20_TABLE_TYPE,     
 A_PP_VERSION              OUT    UNAPIGEN.VC20_TABLE_TYPE,     
 A_PP_KEY1                 OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_PP_KEY2                 OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_PP_KEY3                 OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_PP_KEY4                 OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_PP_KEY5                 OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_DESCRIPTION             OUT    UNAPIGEN.VC40_TABLE_TYPE,     
 A_PP_CNT                  OUT    UNAPIGEN.NUM_TABLE_TYPE,      
 A_FREQ_TP                 OUT    UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_FREQ_VAL                OUT    UNAPIGEN.NUM_TABLE_TYPE,      
 A_FREQ_UNIT               OUT    UNAPIGEN.VC20_TABLE_TYPE,     
 A_INVERT_FREQ             OUT    UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_LAST_SCHED              OUT    UNAPIGEN.DATE_TABLE_TYPE,     
 A_LAST_CNT                OUT    UNAPIGEN.NUM_TABLE_TYPE,      
 A_LAST_VAL                OUT    UNAPIGEN.VC40_TABLE_TYPE,     
 A_INHERIT_AU              OUT    UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_NR_OF_ROWS              IN OUT NUMBER,                       
 A_NEXT_ROWS               IN     NUMBER)                       
RETURN NUMBER IS

L_PP           VARCHAR2(20);
L_DESCRIPTION  VARCHAR2(40);
L_FREQ_TP      CHAR(1);
L_FREQ_VAL     NUMBER;
L_FREQ_UNIT    VARCHAR2(20);
L_INVERT_FREQ  CHAR(1);
L_LAST_SCHED   TIMESTAMP WITH TIME ZONE;
L_LAST_CNT     NUMBER(5);
L_LAST_VAL     VARCHAR2(40);
L_PP_CNT       NUMBER;
L_PP_FOUND     BOOLEAN;
CURSOR L_PP_CURSOR (C_PP VARCHAR2) IS
SELECT DESCRIPTION
FROM UTPP
WHERE PP = C_PP;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF (A_ST_NR_ROWS < 1) THEN
       UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
      END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_STPP_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_STPP_CURSOR);
         P_STPP_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_STPP_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      IF P_STPP_CURSOR IS NULL THEN
         P_STPP_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;

   L_WHERE_CLAUSE := 'WHERE st IN (';
   FOR CTR IN 1..A_ST_NR_ROWS LOOP
      L_WHERE_CLAUSE := L_WHERE_CLAUSE || '''' || REPLACE(A_ST(CTR), '''', '''''')|| ''','; 
   END LOOP;
   L_WHERE_CLAUSE := SUBSTR(L_WHERE_CLAUSE, 1, LENGTH(L_WHERE_CLAUSE)-1) ||
                        ') GROUP BY pp ORDER BY MIN(seq), pp';

   L_SQL_STRING :=
'SELECT pp, COUNT(pp), MAX(freq_tp), MAX(freq_val), MAX(freq_unit), MAX(invert_freq), ' ||
'MAX(last_sched), MAX(last_cnt), MAX(last_val) ' ||
'FROM dd' || UNAPIGEN.P_DD || '.uvstpp ' || L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(P_STPP_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(P_STPP_CURSOR, 1, L_PP, 20);
   DBMS_SQL.DEFINE_COLUMN(P_STPP_CURSOR, 2, L_PP_CNT);
   DBMS_SQL.DEFINE_COLUMN_CHAR(P_STPP_CURSOR, 3, L_FREQ_TP, 1);
   DBMS_SQL.DEFINE_COLUMN(P_STPP_CURSOR, 4, L_FREQ_VAL);
   DBMS_SQL.DEFINE_COLUMN(P_STPP_CURSOR, 5, L_FREQ_UNIT, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(P_STPP_CURSOR, 6, L_INVERT_FREQ, 1);
   DBMS_SQL.DEFINE_COLUMN(P_STPP_CURSOR, 7, L_LAST_SCHED);
   DBMS_SQL.DEFINE_COLUMN(P_STPP_CURSOR, 8, L_LAST_CNT);
   DBMS_SQL.DEFINE_COLUMN(P_STPP_CURSOR, 9, L_LAST_VAL, 40);
   L_RESULT := DBMS_SQL.EXECUTE(P_STPP_CURSOR);
   END IF;

   L_RESULT := DBMS_SQL.FETCH_ROWS(P_STPP_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_STPP_CURSOR, 1, L_PP);
      DBMS_SQL.COLUMN_VALUE(P_STPP_CURSOR, 2, L_PP_CNT);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_STPP_CURSOR, 3, L_FREQ_TP);
      DBMS_SQL.COLUMN_VALUE(P_STPP_CURSOR, 4, L_FREQ_VAL);
      DBMS_SQL.COLUMN_VALUE(P_STPP_CURSOR, 5, L_FREQ_UNIT);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_STPP_CURSOR, 6, L_INVERT_FREQ);
      DBMS_SQL.COLUMN_VALUE(P_STPP_CURSOR, 7, L_LAST_SCHED);
      DBMS_SQL.COLUMN_VALUE(P_STPP_CURSOR, 8, L_LAST_CNT);
      DBMS_SQL.COLUMN_VALUE(P_STPP_CURSOR, 9, L_LAST_VAL);
      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_PP(L_FETCHED_ROWS) := L_PP;
      A_PP_CNT(L_FETCHED_ROWS) := L_PP_CNT;
      A_FREQ_TP (L_FETCHED_ROWS) := L_FREQ_TP;
      A_FREQ_VAL (L_FETCHED_ROWS) := L_FREQ_VAL;
      A_FREQ_UNIT (L_FETCHED_ROWS) := L_FREQ_UNIT;
      A_INVERT_FREQ (L_FETCHED_ROWS) := L_INVERT_FREQ;
      A_LAST_SCHED (L_FETCHED_ROWS) := TO_CHAR(L_LAST_SCHED);
      A_LAST_CNT (L_FETCHED_ROWS) := L_LAST_CNT;
      A_LAST_VAL (L_FETCHED_ROWS) := L_LAST_VAL;

      OPEN L_PP_CURSOR (L_PP);
      L_DESCRIPTION := NULL;
      FETCH L_PP_CURSOR INTO  L_DESCRIPTION;
      L_PP_FOUND := L_PP_CURSOR%FOUND;
      CLOSE L_PP_CURSOR;

      IF NOT L_PP_FOUND  THEN
         L_DESCRIPTION := L_PP;
      END IF;

      A_DESCRIPTION(L_FETCHED_ROWS) :=  L_DESCRIPTION;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_STPP_CURSOR);
      END IF;
   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_STPP_CURSOR);
       P_STPP_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_STPP_CURSOR);
      P_STPP_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetStCommonPpList', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (P_STPP_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (P_STPP_CURSOR);
      END IF;
      IF L_PP_CURSOR%ISOPEN THEN
         CLOSE L_PP_CURSOR;
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETSTCOMMONPPLIST;

FUNCTION GETSTCOMMONGKLIST                              
(A_ST              IN       UNAPIGEN.VC20_TABLE_TYPE,   
 A_VERSION         IN       UNAPIGEN.VC20_TABLE_TYPE,   
 A_ST_NR_ROWS      IN       NUMBER,                     
 A_GK              OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_GK_VERSION      OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_VALUE           OUT      UNAPIGEN.VC40_TABLE_TYPE,   
 A_DESCRIPTION     OUT      UNAPIGEN.VC40_TABLE_TYPE,   
 A_GK_CNT          OUT      UNAPIGEN.NUM_TABLE_TYPE,    
 A_IS_PROTECTED    OUT      UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_VALUE_UNIQUE    OUT      UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_SINGLE_VALUED   OUT      UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_NEW_VAL_ALLOWED OUT      UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_MANDATORY       OUT      UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_VALUE_LIST_TP   OUT      UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_DSP_ROWS        OUT      UNAPIGEN.NUM_TABLE_TYPE,    
 A_NR_OF_ROWS      IN OUT   NUMBER,                     
 A_NEXT_ROWS       IN       NUMBER)                     
RETURN NUMBER IS

L_GK                VARCHAR2(20);
L_VALUE             VARCHAR2(40);
L_DESCRIPTION       VARCHAR2(40);
L_IS_PROTECTED      CHAR(1);
L_VALUE_UNIQUE      CHAR(1);
L_SINGLE_VALUED     CHAR(1);
L_NEW_VAL_ALLOWED   CHAR(1);
L_MANDATORY         CHAR(1);
L_VALUE_LIST_TP     CHAR(1);
L_DSP_ROWS     NUMBER(3);
L_GK_CNT            NUMBER;
L_GK_FOUND          BOOLEAN;
CURSOR L_GK_CURSOR (C_GK VARCHAR2) IS
SELECT DESCRIPTION, IS_PROTECTED, VALUE_UNIQUE, SINGLE_VALUED,
       NEW_VAL_ALLOWED, MANDATORY, VALUE_LIST_TP, DSP_ROWS
FROM UTGKST
WHERE GK = C_GK;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF (A_ST_NR_ROWS < 1) THEN
       UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_STGK_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_STGK_CURSOR);
         P_STGK_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_STGK_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      IF P_STGK_CURSOR IS NULL THEN
         P_STGK_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;

   L_WHERE_CLAUSE := 'WHERE st IN (';
   FOR CTR IN 1..A_ST_NR_ROWS LOOP
      L_WHERE_CLAUSE := L_WHERE_CLAUSE || '''' || REPLACE(A_ST(CTR), '''', '''''')|| ''','; 
   END LOOP;
   L_WHERE_CLAUSE := SUBSTR(L_WHERE_CLAUSE, 1, LENGTH(L_WHERE_CLAUSE)-1) ||
                     ') GROUP BY gk, value ORDER BY MIN(gkseq), gk';

   L_SQL_STRING :='SELECT gk, value, COUNT(DISTINCT st) FROM dd' ||
                   UNAPIGEN.P_DD || '.uvstgk ' || L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(P_STGK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(P_STGK_CURSOR, 1, L_GK, 20);
   DBMS_SQL.DEFINE_COLUMN(P_STGK_CURSOR, 2, L_VALUE, 40);
   DBMS_SQL.DEFINE_COLUMN(P_STGK_CURSOR, 3, L_GK_CNT);
   L_RESULT := DBMS_SQL.EXECUTE(P_STGK_CURSOR);
   END IF;

   L_RESULT := DBMS_SQL.FETCH_ROWS(P_STGK_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_STGK_CURSOR, 1, L_GK);
      DBMS_SQL.COLUMN_VALUE(P_STGK_CURSOR, 2, L_VALUE);
      DBMS_SQL.COLUMN_VALUE(P_STGK_CURSOR, 3, L_GK_CNT);
      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_GK(L_FETCHED_ROWS) := L_GK;
      A_VALUE(L_FETCHED_ROWS) := L_VALUE;
      A_GK_CNT(L_FETCHED_ROWS) := L_GK_CNT;

      OPEN L_GK_CURSOR (L_GK);
      FETCH L_GK_CURSOR
      INTO L_DESCRIPTION, L_IS_PROTECTED, L_VALUE_UNIQUE, L_SINGLE_VALUED,
           L_NEW_VAL_ALLOWED, L_MANDATORY, L_VALUE_LIST_TP, L_DSP_ROWS;
      L_GK_FOUND := L_GK_CURSOR%FOUND;
      CLOSE L_GK_CURSOR;

      IF NOT L_GK_FOUND  THEN
         L_DESCRIPTION     := NULL;
         L_IS_PROTECTED    := '0';
         L_VALUE_UNIQUE    := '0';
         L_SINGLE_VALUED   := '0';
         L_NEW_VAL_ALLOWED := '0';
         L_MANDATORY       := '0';
         
         L_VALUE_LIST_TP   := 'E';
         L_DSP_ROWS   := '5';
      END IF;

      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;
      A_IS_PROTECTED(L_FETCHED_ROWS) := L_IS_PROTECTED;
      A_VALUE_UNIQUE(L_FETCHED_ROWS) := L_VALUE_UNIQUE;
      A_SINGLE_VALUED(L_FETCHED_ROWS) := L_SINGLE_VALUED;
      A_NEW_VAL_ALLOWED(L_FETCHED_ROWS) := L_NEW_VAL_ALLOWED;
      A_MANDATORY(L_FETCHED_ROWS) := L_MANDATORY;
      A_VALUE_LIST_TP(L_FETCHED_ROWS) := L_VALUE_LIST_TP;
      A_DSP_ROWS(L_FETCHED_ROWS) := L_DSP_ROWS;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_STGK_CURSOR);
      END IF;
   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_STGK_CURSOR);
       P_STGK_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_STGK_CURSOR);
      P_STGK_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetStGkList', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (P_STGK_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (P_STGK_CURSOR);
      END IF;
      IF L_GK_CURSOR%ISOPEN THEN
         CLOSE L_GK_CURSOR;
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETSTCOMMONGKLIST;

FUNCTION SAVESTCOMMONIPLIST                                  
(A_ST                    IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_VERSION               IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_ST_NR_ROWS            IN     NUMBER,                      
 A_IP                    IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_IP_VERSION            IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_IP_FLAG               IN     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_IS_PROTECTED          IN     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_HIDDEN                IN     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_FREQ_TP               IN     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_FREQ_VAL              IN     UNAPIGEN.NUM_TABLE_TYPE,     
 A_FREQ_UNIT             IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_INVERT_FREQ           IN     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_LAST_SCHED            IN     UNAPIGEN.DATE_TABLE_TYPE,    
 A_LAST_CNT              IN     UNAPIGEN.NUM_TABLE_TYPE,     
 A_LAST_VAL              IN     UNAPIGEN.VC40_TABLE_TYPE,    
 A_INHERIT_AU            IN     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_NR_OF_ROWS            IN     NUMBER,                      
 A_MODIFY_REASON         IN     VARCHAR2)                    
RETURN NUMBER IS

L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);
L_LOG_HS       CHAR(1);
L_ALLOW_MODIFY CHAR(1);
L_ACTIVE       CHAR(1);
L_IP           VARCHAR2(20);
L_FREQ_TP      CHAR(1);
L_FREQ_VAL     NUMBER;
L_FREQ_UNIT    VARCHAR2(20);
L_INVERT_FREQ  CHAR(1);
L_LAST_SCHED   TIMESTAMP WITH TIME ZONE;
L_LAST_CNT     NUMBER(5);
L_IP_CURSOR    NUMBER;
L_ST_MODIFIED  BOOLEAN;
L_CTR1         NUMBER;
L_CTR2         NUMBER;
BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF (A_ST_NR_ROWS < 1) THEN
       UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
       RAISE STPERROR;
   END IF;

   L_IP_CURSOR := DBMS_SQL.OPEN_CURSOR;
   FOR L_CTR1 IN 1..A_ST_NR_ROWS LOOP
       L_ST_MODIFIED := FALSE;

       IF NVL(A_ST(L_CTR1), ' ') = ' ' THEN
          UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
          RAISE STPERROR;
       END IF;

       L_RET_CODE := UNAPIGEN.GETAUTHORISATION('st', A_ST(L_CTR1), A_VERSION(L_CTR1), L_LC, L_LC_VERSION, 
                                               L_SS, L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
         UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
         RAISE STPERROR;
      END IF;
      
		L_RET_CODE := UNAPIAUT.INITSTIPBUFFER (A_ST(L_CTR1), A_VERSION(L_CTR1)) ;
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
         UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
         RAISE STPERROR;
      END IF;

      FOR L_CTR2 IN 1..A_NR_OF_ROWS LOOP
         IF NVL(A_IP(L_CTR2), ' ') = ' ' THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
            RAISE STPERROR;
         END IF;

         IF NVL(A_FREQ_TP(L_CTR2), ' ') NOT IN ('A','S','T','C','N') THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_FREQTP;
            RAISE STPERROR;
         END IF;

         IF A_FREQ_TP(L_CTR2) IN ('C','T','S') THEN
            IF A_FREQ_UNIT(L_CTR2) IS NULL THEN
               UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_FREQUNIT;
               RAISE STPERROR;         
            ELSIF A_FREQ_TP(L_CTR2) = 'T' AND
               A_FREQ_UNIT(L_CTR2) NOT IN ('MI','HH','DD','WW','MM','YY','MF','YF') THEN
               UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_FREQUNIT;
               RAISE STPERROR;         
            END IF;
         END IF;

         IF NVL(A_INVERT_FREQ(L_CTR2), ' ') NOT IN ('1','0') THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INVERTFREQ;
            RAISE STPERROR;
         END IF;
 
         IF A_IP_FLAG(L_CTR2) = '1' THEN
            L_SQL_STRING := ' SELECT ip, freq_tp, freq_val, freq_unit, ' ||
                            ' invert_freq, last_sched, last_cnt, last_val' ||
                            ' FROM dd'||UNAPIGEN.P_DD||'.uvstip '||
                            ' WHERE st = ''' || REPLACE(A_ST(L_CTR1), '''', '''''') || 
                            ''' AND ip = ''' || REPLACE(A_IP(L_CTR2), '''', '''''')|| ''''; 
            DBMS_SQL.PARSE(L_IP_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
            L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_IP_CURSOR);

            IF L_RESULT > 0 THEN
               UPDATE UTSTIPBUFFER
               SET FREQ_TP        = A_FREQ_TP(L_CTR2),
                   FREQ_VAL       = A_FREQ_VAL(L_CTR2),
                   FREQ_UNIT      = A_FREQ_UNIT(L_CTR2),
                   INVERT_FREQ    = A_INVERT_FREQ(L_CTR2),
                   LAST_SCHED     = TO_TIMESTAMP_TZ(A_LAST_SCHED(L_CTR2)),
                   LAST_SCHED_TZ  = DECODE(TO_TIMESTAMP_TZ(A_LAST_SCHED(L_CTR2)), LAST_SCHED_TZ, LAST_SCHED_TZ, TO_TIMESTAMP_TZ(A_LAST_SCHED(L_CTR2))) ,
                   LAST_CNT       = A_LAST_CNT(L_CTR2),
                   LAST_VAL       = A_LAST_VAL(L_CTR2),
                   HANDLED = 'Y'
               WHERE ST = A_ST(L_CTR1)
                 AND IP = A_IP(L_CTR2);
               IF L_LOG_HS = '1' THEN
                  INSERT INTO UTSTHS (ST, WHO, WHAT, LOGDATE, LOGDATE_TZ, WHY)
                  VALUES(A_ST(L_CTR1), UNAPIGEN.P_USER, 'UsedObjectUpdated', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                         A_IP(L_CTR2));
               END IF;
               L_ST_MODIFIED := TRUE;
            ELSE
               
               INSERT INTO UTSTIP (ST, VERSION, IP, IP_VERSION, SEQ, IS_PROTECTED, HIDDEN, FREQ_TP, FREQ_VAL, FREQ_UNIT, INVERT_FREQ, LAST_SCHED, LAST_SCHED_TZ, LAST_CNT, LAST_VAL, INHERIT_AU)
               SELECT A_ST(L_CTR1), A_VERSION(L_CTR1), A_IP(L_CTR2), A_IP_VERSION(L_CTR1), NVL(MAX(SEQ), 0)+1, '0', '0',
                      A_FREQ_TP(L_CTR2), A_FREQ_VAL(L_CTR2), A_FREQ_UNIT(L_CTR2),
                      A_INVERT_FREQ(L_CTR2), TO_TIMESTAMP_TZ(A_LAST_SCHED(L_CTR2)), TO_TIMESTAMP_TZ(A_LAST_SCHED(L_CTR2)),
                      A_LAST_CNT(L_CTR2), A_LAST_VAL(L_CTR2), '0'
               FROM UTSTIP
               WHERE ST = A_ST(L_CTR1);
               IF L_LOG_HS = '1' THEN
                  INSERT INTO UTSTHS (ST, WHO, WHAT, LOGDATE, LOGDATE_TZ, WHY)
                  VALUES(A_ST(L_CTR1), UNAPIGEN.P_USER, 'UsedObjectCreated', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                         A_IP(L_CTR2));
               END IF;
               L_ST_MODIFIED := TRUE;
            END IF;
         ELSIF A_IP_FLAG(L_CTR2) = '0' THEN
            DELETE FROM UTSTIP
            WHERE ST = A_ST(L_CTR1)
              AND IP = A_IP(L_CTR2);

            IF L_LOG_HS = '1' THEN
               INSERT INTO UTSTHS (ST, WHO, WHAT, LOGDATE, LOGDATE_TZ, WHY)
               VALUES(A_ST(L_CTR1), UNAPIGEN.P_USER, 'UsedObjectDeleted', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                      A_IP(L_CTR2));
            END IF;
            L_ST_MODIFIED := TRUE;
         ELSIF A_IP_FLAG(L_CTR2) = '2' THEN
            BEGIN
               UPDATE UTSTIPBUFFER
               SET FREQ_TP        = A_FREQ_TP(L_CTR2),
                   FREQ_VAL       = A_FREQ_VAL(L_CTR2),
                   FREQ_UNIT      = A_FREQ_UNIT(L_CTR2),
                   INVERT_FREQ    = A_INVERT_FREQ(L_CTR2),
                   LAST_SCHED     = TO_TIMESTAMP_TZ(A_LAST_SCHED(L_CTR2)),
                   LAST_SCHED_TZ  =  DECODE(TO_TIMESTAMP_TZ(A_LAST_SCHED(L_CTR2)), LAST_SCHED_TZ, LAST_SCHED_TZ, TO_TIMESTAMP_TZ(A_LAST_SCHED(L_CTR2))),
                   LAST_CNT       = A_LAST_CNT(L_CTR2),
                   LAST_VAL       = A_LAST_VAL(L_CTR2),
                   HANDLED = 'Y'
               WHERE ST = A_ST(L_CTR1)
                 AND IP = A_IP(L_CTR2);
               IF L_LOG_HS = '1' THEN
                  INSERT INTO UTSTHS (ST, WHO, WHAT, LOGDATE, LOGDATE_TZ, WHY)
                  VALUES(A_ST(L_CTR1), UNAPIGEN.P_USER, 'UsedObjectUpdated', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                         A_IP(L_CTR2));
               END IF;
               L_ST_MODIFIED := TRUE;
            EXCEPTION
               
               WHEN NO_DATA_FOUND THEN
                  NULL;
            END;

         END IF;
      END LOOP;
      IF L_ST_MODIFIED THEN
         UPDATE UTST
         SET ALLOW_MODIFY = '#'
         WHERE ST = A_ST(L_CTR1);

         IF SQL%ROWCOUNT < 1 THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
            RAISE STPERROR ;
         END IF;

         L_EV_SEQ_NR := -1;
         L_RESULT := UNAPIEV.INSERTEVENT('SaveStCommonIpList', UNAPIGEN.P_EVMGR_NAME,
                                        'st', A_ST(L_CTR1), L_LC, L_LC_VERSION, L_SS,
                                        'UsedObjectsUpdated', '', L_EV_SEQ_NR);
      END IF;
      IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS  THEN
         UNAPIGEN.P_TXN_ERROR := L_RESULT;
         RAISE STPERROR;
      END IF;
   END LOOP;
   DBMS_SQL.CLOSE_CURSOR(L_IP_CURSOR);

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE <> 1 THEN
         UNAPIGEN.LOGERROR('SaveStCommonIpList', SQLERRM);
      END IF;
      IF DBMS_SQL.IS_OPEN (L_IP_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_IP_CURSOR);
      END IF;
      RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveStCommonIpList'));
END SAVESTCOMMONIPLIST;

FUNCTION SAVESTCOMMONPPLIST                                  
(A_ST                    IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_VERSION               IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_ST_NR_ROWS            IN     NUMBER,                      
 A_PP                    IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PP_VERSION            IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PP_KEY1               IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PP_KEY2               IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PP_KEY3               IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PP_KEY4               IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PP_KEY5               IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PP_FLAG               IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_FREQ_TP               IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_FREQ_VAL              IN     UNAPIGEN.NUM_TABLE_TYPE,    
 A_FREQ_UNIT             IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_INVERT_FREQ           IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_LAST_SCHED            IN     UNAPIGEN.DATE_TABLE_TYPE,   
 A_LAST_CNT              IN     UNAPIGEN.NUM_TABLE_TYPE,    
 A_LAST_VAL              IN     UNAPIGEN.VC40_TABLE_TYPE,   
 A_INHERIT_AU            IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_NR_OF_ROWS            IN     NUMBER,                      
 A_MODIFY_REASON         IN     VARCHAR2)                    
RETURN NUMBER IS

L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);
L_LOG_HS       CHAR(1);
L_ALLOW_MODIFY CHAR(1);
L_ACTIVE       CHAR(1);
L_PP           VARCHAR2(20);
L_FREQ_TP      CHAR(1);
L_FREQ_VAL     NUMBER;
L_FREQ_UNIT    VARCHAR2(20);
L_INVERT_FREQ  CHAR(1);
L_LAST_SCHED   TIMESTAMP WITH TIME ZONE;
L_LAST_CNT     NUMBER(5);
L_LAST_VAL     VARCHAR2(40);
L_PP_CURSOR    NUMBER;
L_ST_MODIFIED  BOOLEAN;
L_CTR1         NUMBER;
L_CTR2         NUMBER;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF (A_ST_NR_ROWS < 1) THEN
       UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
       RAISE STPERROR;
   END IF;

   L_PP_CURSOR := DBMS_SQL.OPEN_CURSOR;
   FOR L_CTR1 IN 1..A_ST_NR_ROWS LOOP
       L_ST_MODIFIED := FALSE;

       IF NVL(A_ST(L_CTR1), ' ') = ' ' THEN
          UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
          RAISE STPERROR;
       END IF;

       L_RET_CODE := UNAPIGEN.GETAUTHORISATION('st', A_ST(L_CTR1), A_VERSION(L_CTR1), L_LC, L_LC_VERSION, 
                                               L_SS, L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
         UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
         RAISE STPERROR;
      END IF;

      FOR L_CTR2 IN 1..A_NR_OF_ROWS LOOP
         IF NVL(A_PP(L_CTR2), ' ') = ' ' THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
            RAISE STPERROR;
         END IF;

         IF NVL(A_FREQ_TP(L_CTR2), ' ') NOT IN ('A','S','T','C','N') THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_FREQTP;
            RAISE STPERROR;
         END IF;

         IF A_FREQ_TP(L_CTR2) IN ('C','T','S') THEN
            IF A_FREQ_UNIT(L_CTR2) IS NULL THEN
               UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_FREQUNIT;
               RAISE STPERROR;         
            ELSIF A_FREQ_TP(L_CTR2) = 'T' AND
               A_FREQ_UNIT(L_CTR2) NOT IN ('MI','HH','DD','WW','MM','YY','MF','YF') THEN
               UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_FREQUNIT;
               RAISE STPERROR;         
            END IF;
         END IF;

         IF NVL(A_INVERT_FREQ(L_CTR2), ' ') NOT IN ('1','0') THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INVERTFREQ;
            RAISE STPERROR;
         END IF;

         IF A_PP_FLAG(L_CTR2) = '1' THEN
            L_SQL_STRING := ' SELECT pp, freq_tp, freq_val, freq_unit, ' ||
                            ' invert_freq, last_sched, last_cnt, last_val ' ||
                            ' FROM dd' || UNAPIGEN.P_DD || '.uvstpp ' ||
                            ' WHERE st = ''' || REPLACE(A_ST(L_CTR1), '''', '''''') || 
                            ''' AND pp = ''' || REPLACE(A_PP(L_CTR2), '''', '''''') || ''''; 
            DBMS_SQL.PARSE(L_PP_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
            L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_PP_CURSOR);

            IF L_RESULT > 0 THEN
               UPDATE UTSTPP
               SET FREQ_TP        = A_FREQ_TP(L_CTR2),
                   FREQ_VAL       = A_FREQ_VAL(L_CTR2),
                   FREQ_UNIT      = A_FREQ_UNIT(L_CTR2),
                   INVERT_FREQ    = A_INVERT_FREQ(L_CTR2),
                   LAST_SCHED     = TO_TIMESTAMP_TZ(A_LAST_SCHED(L_CTR2)),
                   LAST_SCHED_TZ  =  DECODE(TO_TIMESTAMP_TZ(A_LAST_SCHED(L_CTR2)), LAST_SCHED_TZ, LAST_SCHED_TZ, TO_TIMESTAMP_TZ(A_LAST_SCHED(L_CTR2))),
                   LAST_CNT       = A_LAST_CNT(L_CTR2),
                   LAST_VAL       = A_LAST_VAL(L_CTR2)
               WHERE ST = A_ST(L_CTR1)
                 AND PP = A_PP(L_CTR2);

               IF L_LOG_HS = '1' THEN
                  INSERT INTO UTSTHS (ST, WHO, WHAT, LOGDATE, LOGDATE_TZ, WHY)
                  VALUES(A_ST(L_CTR1), UNAPIGEN.P_USER, 'UsedObjectUpdated', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                         A_PP(L_CTR2));
               END IF;
               L_ST_MODIFIED := TRUE;
            ELSE
               
               INSERT INTO UTSTPP
                (ST, VERSION, PP, PP_VERSION, SEQ, FREQ_TP, FREQ_VAL, FREQ_UNIT, INVERT_FREQ, LAST_SCHED, LAST_SCHED_TZ, LAST_CNT, LAST_VAL,  INHERIT_AU)
                 SELECT A_ST(L_CTR1), A_VERSION(L_CTR1), A_PP(L_CTR2), A_PP_VERSION(L_CTR1), NVL(MAX(SEQ), 0)+1,
                        A_FREQ_TP(L_CTR2), A_FREQ_VAL(L_CTR2),
                        A_FREQ_UNIT(L_CTR2), A_INVERT_FREQ(L_CTR2),
                        TO_TIMESTAMP_TZ(A_LAST_SCHED(L_CTR2)), TO_TIMESTAMP_TZ(A_LAST_SCHED(L_CTR2)), A_LAST_CNT(L_CTR2), 
                        A_LAST_VAL(L_CTR2), '0'
                 FROM UTSTPP
                 WHERE ST = A_ST(L_CTR1);
               IF L_LOG_HS = '1' THEN
                  INSERT INTO UTSTHS (ST, WHO, WHAT, LOGDATE, LOGDATE_TZ, WHY)
                  VALUES(A_ST(L_CTR1), UNAPIGEN.P_USER, 'UsedObjectCreated', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                         A_PP(L_CTR2));
               END IF;
               L_ST_MODIFIED := TRUE;
            END IF;
         ELSIF A_PP_FLAG(L_CTR2) = '0' THEN
             DELETE FROM UTSTPP
             WHERE ST = A_ST(L_CTR1)
             AND PP = A_PP(L_CTR2);
             IF L_LOG_HS = '1' THEN
                INSERT INTO UTSTHS (ST, WHO, WHAT, LOGDATE, LOGDATE_TZ, WHY)
                VALUES(A_ST(L_CTR1), UNAPIGEN.P_USER, 'UsedObjectDeleted', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                       A_PP(L_CTR2));
             END IF;
             L_ST_MODIFIED := TRUE;
         END IF;

         BEGIN
             IF A_PP_FLAG(L_CTR2) = '2' THEN
                UPDATE UTSTPP
                SET FREQ_TP        = A_FREQ_TP(L_CTR2),
                    FREQ_VAL       = A_FREQ_VAL(L_CTR2),
                    FREQ_UNIT      = A_FREQ_UNIT(L_CTR2),
                    INVERT_FREQ    = A_INVERT_FREQ(L_CTR2),
                    LAST_SCHED     = TO_TIMESTAMP_TZ(A_LAST_SCHED(L_CTR2)),
                    LAST_SCHED_TZ  =  DECODE(TO_TIMESTAMP_TZ(A_LAST_SCHED(L_CTR2)), LAST_SCHED_TZ, LAST_SCHED_TZ, TO_TIMESTAMP_TZ(A_LAST_SCHED(L_CTR2))),
                    LAST_CNT       = A_LAST_CNT(L_CTR2),
                    LAST_VAL       = A_LAST_VAL(L_CTR2)
                WHERE ST = A_ST(L_CTR1)
                AND PP = A_PP(L_CTR2);
                IF L_LOG_HS = '1' THEN
                   INSERT INTO UTSTHS (ST, WHO, WHAT, LOGDATE, LOGDATE_TZ, WHY)
                   VALUES(A_ST(L_CTR1), UNAPIGEN.P_USER, 'UsedObjectUpdated', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                          A_PP(L_CTR2));
                END IF;
                L_ST_MODIFIED := TRUE;
             END IF;
         EXCEPTION
            
              WHEN NO_DATA_FOUND THEN
                NULL;
         END;
      END LOOP;
      IF L_ST_MODIFIED THEN
         UPDATE UTST
         SET ALLOW_MODIFY = '#'
         WHERE ST = A_ST(L_CTR1);
      
         IF SQL%ROWCOUNT < 1 THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
            RAISE STPERROR ;
         END IF;

         L_EV_SEQ_NR := -1;
         L_RESULT := UNAPIEV.INSERTEVENT('SaveStCommonPpList', UNAPIGEN.P_EVMGR_NAME,
                                         'st', A_ST(L_CTR1), L_LC, L_LC_VERSION, L_SS,
                                         'UsedObjectsUpdated', '', L_EV_SEQ_NR);
      END IF;

      IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
         UNAPIGEN.P_TXN_ERROR := L_RESULT;
         RAISE STPERROR;
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_PP_CURSOR);

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE <> 1 THEN
         UNAPIGEN.LOGERROR('SaveStCommonPpList', SQLERRM);
      END IF;
     IF DBMS_SQL.IS_OPEN (L_PP_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_PP_CURSOR);
      END IF;
      RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveStCommonPpList'));
END SAVESTCOMMONPPLIST;

FUNCTION SAVESTCOMMONGKLIST                          
(A_ST              IN  UNAPIGEN.VC20_TABLE_TYPE,     
 A_VERSION         IN  UNAPIGEN.VC20_TABLE_TYPE,     
 A_ST_NR_ROWS      IN  NUMBER,                       
 A_GK              IN  UNAPIGEN.VC20_TABLE_TYPE,     
 A_GK_VERSION      IN  UNAPIGEN.VC20_TABLE_TYPE,     
 A_VALUE           IN  UNAPIGEN.VC40_TABLE_TYPE,     
 A_GK_FLAG         IN  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_NR_OF_ROWS      IN  NUMBER,                       
 A_MODIFY_REASON   IN  VARCHAR2)                     
RETURN NUMBER IS

L_LC            VARCHAR2(2);
L_LC_VERSION    VARCHAR2(20);
L_SS            VARCHAR2(2);
L_LOG_HS        CHAR(1);
L_ALLOW_MODIFY  CHAR(1);
L_ACTIVE        CHAR(1);
L_VALUE_UNIQUE  CHAR(1);
L_SINGLE_VALUED CHAR(1);
L_ST_CURSOR     INTEGER;
L_ST_MODIFIED   BOOLEAN;
L_COUNT         NUMBER;
L_CTR1          NUMBER;
L_CTR2          NUMBER;
L_GK            VARCHAR2(20);
L_GK_FOUND      BOOLEAN;
CURSOR L_GK_CURSOR (C_ST VARCHAR2, C_GK VARCHAR2, C_VALUE VARCHAR2) IS
SELECT GK 
FROM UTSTGK
WHERE ST = C_ST
AND GK = C_GK 
AND VALUE = C_VALUE ;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF (A_ST_NR_ROWS < 1) THEN
       UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
       RAISE STPERROR;
   END IF;

   L_ST_CURSOR := DBMS_SQL.OPEN_CURSOR;   
   FOR L_CTR1 IN 1..A_ST_NR_ROWS LOOP
       L_ST_MODIFIED := FALSE;

       IF NVL(A_ST(L_CTR1), ' ') = ' ' THEN
          UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
          RAISE STPERROR;
       END IF;

       L_RET_CODE := UNAPIGEN.GETAUTHORISATION('st', A_ST(L_CTR1), A_VERSION(L_CTR1), L_LC, L_LC_VERSION, 
                                               L_SS, L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
         UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
         RAISE STPERROR;
      END IF;

      FOR L_CTR2 IN 1..A_NR_OF_ROWS LOOP
         IF NVL(A_GK(L_CTR2), ' ') = ' ' THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
            RAISE STPERROR;
         END IF;

         IF A_GK_FLAG(L_CTR2) = '1' THEN
            OPEN L_GK_CURSOR(A_ST(L_CTR1), A_GK(L_CTR2), A_VALUE(L_CTR2));
            FETCH L_GK_CURSOR
            INTO  L_GK;
            L_GK_FOUND := L_GK_CURSOR%FOUND;
            CLOSE L_GK_CURSOR;

            IF NOT L_GK_FOUND THEN
               SELECT VALUE_UNIQUE, SINGLE_VALUED
               INTO L_VALUE_UNIQUE, L_SINGLE_VALUED
               FROM UTGKST
               WHERE GK = A_GK(L_CTR2);

               IF L_VALUE_UNIQUE = '1' THEN
                  IF A_ST_NR_ROWS > 1 THEN
                     UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UNIQUEGK;
                     RAISE STPERROR;
                  ELSE
                     SELECT COUNT(DISTINCT ST)
                     INTO L_COUNT
                     FROM UTSTGK
                     WHERE ST <> A_ST(L_CTR1)
                       AND GK = A_GK(L_CTR2);

                     IF L_COUNT > 0 THEN
                        UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UNIQUEGK;
                        RAISE STPERROR;
                     END IF;
                  END IF;
               END IF;

               IF L_SINGLE_VALUED = '1' THEN
                  DELETE FROM UTSTGK
                  WHERE ST = A_ST(L_CTR1)
                    AND GK = A_GK(L_CTR2);

                  L_SQL_STRING := 'DELETE FROM utstgk' || A_GK(L_CTR2) ||
                                  ' WHERE st = ''' || REPLACE(A_ST(L_CTR1), '''', '''''') || ''''; 
                  DBMS_SQL.PARSE(L_ST_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
                  L_RESULT := DBMS_SQL.EXECUTE(L_ST_CURSOR);
               END IF;

               INSERT INTO UTSTGK(ST, GK, GKSEQ, VALUE)
               SELECT A_ST(L_CTR1), A_GK(L_CTR2), NVL(MAX(GKSEQ), 0)+1,
                      A_VALUE(L_CTR2)
               FROM UTSTGK
               WHERE ST = A_ST(L_CTR1);
               IF NVL(A_VALUE(L_CTR2), ' ') <> ' ' THEN
                  L_SQL_STRING := 'INSERT INTO utstgk' || A_GK(L_CTR2) ||
                                  ' VALUES(''' || REPLACE(A_VALUE(L_CTR2), '''', '''''') || 
                                  ''',''' || REPLACE(A_ST(L_CTR1), '''', '''''') || ''')'; 

                  DBMS_SQL.PARSE(L_ST_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
                  L_RESULT := DBMS_SQL.EXECUTE(L_ST_CURSOR);
               END IF;   

               IF L_LOG_HS = '1' THEN
                  INSERT INTO UTSTHS (ST, WHO, WHAT, LOGDATE, LOGDATE_TZ, WHY)
                  VALUES(A_ST(L_CTR1), UNAPIGEN.P_USER, 'UsedObjectCreated', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                         A_GK(L_CTR2)||'@'||A_VALUE(L_CTR2));
               END IF;
               L_ST_MODIFIED := TRUE;
            END IF;
         ELSIF A_GK_FLAG(L_CTR2) = '0' THEN
            DELETE FROM UTSTGK
            WHERE ST = A_ST(L_CTR1)
            AND GK = A_GK(L_CTR2)
            AND VALUE =A_VALUE(L_CTR2);

            L_SQL_STRING := 'DELETE FROM utstgk' || A_GK(L_CTR2) ||
                            ' WHERE st = ''' || REPLACE(A_ST(L_CTR1), '''', '''''') || 
                            ''' AND ' || A_GK(L_CTR2) ||' = ''' ||
                            REPLACE(A_VALUE(L_CTR2), '''', '''''') || ''''; 
            DBMS_SQL.PARSE(L_ST_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
            L_RESULT := DBMS_SQL.EXECUTE(L_ST_CURSOR);

            IF L_LOG_HS = '1' THEN
               INSERT INTO UTSTHS (ST, WHO, WHAT, LOGDATE, LOGDATE_TZ, WHY)
               VALUES(A_ST(L_CTR1), UNAPIGEN.P_USER, 'UsedObjectDeleted', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                      A_GK(L_CTR2)||'@ '||A_VALUE(L_CTR2));
            END IF;
            L_ST_MODIFIED := TRUE;
         
         
         
         END IF;
      END LOOP;
      L_EV_SEQ_NR := -1;
      IF L_ST_MODIFIED THEN
         UPDATE UTST
         SET ALLOW_MODIFY = '#'
         WHERE ST = A_ST(L_CTR1);
      
         IF SQL%ROWCOUNT < 1 THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
            RAISE STPERROR ;
         END IF;

         L_RESULT := UNAPIEV.INSERTEVENT('SaveStCommonGkList', UNAPIGEN.P_EVMGR_NAME,
                                         'st', A_ST(L_CTR1), L_LC, L_LC_VERSION, L_SS,
                                         'UsedObjectsUpdated', '', L_EV_SEQ_NR);
      END IF;
      
      IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS  THEN
         UNAPIGEN.P_TXN_ERROR := L_RESULT;
         RAISE STPERROR;
      END IF;
      
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_ST_CURSOR);

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE <> 1 THEN
         UNAPIGEN.LOGERROR('SaveStCommonGkList', SQLERRM);
      END IF;
      IF DBMS_SQL.IS_OPEN (L_ST_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_ST_CURSOR);
      END IF;
      RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveStCommonGkList'));
END SAVESTCOMMONGKLIST;

FUNCTION GETSTPRFREQUENCY                                
(A_ST                IN     VARCHAR2,                    
 A_VERSION           IN     VARCHAR2,                    
 A_PP                IN     VARCHAR2,                    
 A_PP_VERSION        IN     VARCHAR2,                    
 A_PP_KEY1           IN     VARCHAR2,                    
 A_PP_KEY2           IN     VARCHAR2,                    
 A_PP_KEY3           IN     VARCHAR2,                    
 A_PP_KEY4           IN     VARCHAR2,                    
 A_PP_KEY5           IN     VARCHAR2,                    
 A_PR                OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_PR_VERSION        OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_FREQ_TP           OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_FREQ_VAL          OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_FREQ_UNIT         OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_INVERT_FREQ       OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_LAST_SCHED        OUT    UNAPIGEN.DATE_TABLE_TYPE,    
 A_LAST_CNT          OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_LAST_VAL          OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_DEF_FREQ_TP       OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_DEF_FREQ_VAL      OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_DEF_FREQ_UNIT     OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_DEF_INVERT_FREQ   OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_DEF_ST_BASED_FREQ OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_DEF_LAST_SCHED    OUT    UNAPIGEN.DATE_TABLE_TYPE,    
 A_DEF_LAST_CNT      OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_DEF_LAST_VAL      OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_NR_OF_ROWS        IN OUT NUMBER)                      
RETURN NUMBER IS

L_PR                 VARCHAR2(20);
L_PR_VERSION         VARCHAR2(20);
L_FREQ_TP            CHAR(1);
L_FREQ_VAL           NUMBER;
L_FREQ_UNIT          VARCHAR2(20);
L_INVERT_FREQ        CHAR(1);
L_LAST_SCHED         TIMESTAMP WITH TIME ZONE;
L_LAST_CNT           NUMBER(5);
L_LAST_VAL           VARCHAR2(40);
L_DEF_FREQ_TP        CHAR(1);
L_DEF_FREQ_VAL       NUMBER;
L_DEF_FREQ_UNIT      VARCHAR2(20);
L_DEF_INVERT_FREQ    CHAR(1);
L_DEF_ST_BASED_FREQ  CHAR(1);
L_DEF_LAST_SCHED     TIMESTAMP WITH TIME ZONE;
L_DEF_LAST_CNT       NUMBER(5);
L_DEF_LAST_VAL       VARCHAR2(40);
L_STPF_CURSOR        INTEGER;
L_STPR_FOUND         BOOLEAN;

CURSOR L_STPRFR_CURSOR(C_PR VARCHAR2, C_PR_VERSION VARCHAR2) IS
SELECT FREQ_TP, FREQ_VAL, FREQ_UNIT, INVERT_FREQ,
       LAST_SCHED, LAST_CNT, LAST_VAL
FROM UTSTPRFREQ
WHERE PP_VERSION = A_PP_VERSION
  AND PP = A_PP
  AND VERSION = A_VERSION
  AND ST = A_ST
  AND PR_VERSION = C_PR_VERSION
  AND PR = C_PR;

BEGIN
   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   L_STPF_CURSOR := DBMS_SQL.OPEN_CURSOR;

   L_SQL_STRING := ' SELECT pr, pr_version, freq_tp, freq_val, freq_unit, invert_freq, ' ||
                   ' st_based_freq, last_sched, last_cnt, last_val ' ||
                   ' FROM dd' || UNAPIGEN.P_DD || '.uvpppr ' ||
                   ' WHERE version = ''' || REPLACE(A_PP_VERSION, '''', '''''')|| '''' || 
                   ' AND pp = ''' || REPLACE(A_PP, '''', '''''')|| ''' ORDER BY seq'; 

   DBMS_SQL.PARSE(L_STPF_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_STPF_CURSOR, 1, L_PR, 20);
   DBMS_SQL.DEFINE_COLUMN(L_STPF_CURSOR, 2, L_PR_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_STPF_CURSOR, 3, L_DEF_FREQ_TP, 1);
   DBMS_SQL.DEFINE_COLUMN(L_STPF_CURSOR, 4, L_DEF_FREQ_VAL);
   DBMS_SQL.DEFINE_COLUMN(L_STPF_CURSOR, 5, L_DEF_FREQ_UNIT, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_STPF_CURSOR, 6, L_DEF_INVERT_FREQ, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_STPF_CURSOR, 7, L_DEF_ST_BASED_FREQ, 1);
   DBMS_SQL.DEFINE_COLUMN(L_STPF_CURSOR, 8, L_DEF_LAST_SCHED);
   DBMS_SQL.DEFINE_COLUMN(L_STPF_CURSOR, 9, L_DEF_LAST_CNT);
   DBMS_SQL.DEFINE_COLUMN(L_STPF_CURSOR, 10, L_DEF_LAST_VAL, 40);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_STPF_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_STPF_CURSOR, 1, L_PR);
      DBMS_SQL.COLUMN_VALUE(L_STPF_CURSOR, 2, L_PR_VERSION);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_STPF_CURSOR, 3, L_DEF_FREQ_TP);
      DBMS_SQL.COLUMN_VALUE(L_STPF_CURSOR, 4, L_DEF_FREQ_VAL);
      DBMS_SQL.COLUMN_VALUE(L_STPF_CURSOR, 5, L_DEF_FREQ_UNIT);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_STPF_CURSOR, 6, L_DEF_INVERT_FREQ);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_STPF_CURSOR, 7, L_DEF_ST_BASED_FREQ);
      DBMS_SQL.COLUMN_VALUE(L_STPF_CURSOR, 8, L_DEF_LAST_SCHED);
      DBMS_SQL.COLUMN_VALUE(L_STPF_CURSOR, 9, L_DEF_LAST_CNT);
      DBMS_SQL.COLUMN_VALUE(L_STPF_CURSOR, 10, L_DEF_LAST_VAL);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_PR(L_FETCHED_ROWS) := L_PR;
      A_PR_VERSION(L_FETCHED_ROWS) := L_PR_VERSION;
      A_DEF_FREQ_TP(L_FETCHED_ROWS) := L_DEF_FREQ_TP;
      A_DEF_FREQ_VAL(L_FETCHED_ROWS) := L_DEF_FREQ_VAL;
      A_DEF_FREQ_UNIT(L_FETCHED_ROWS) := L_DEF_FREQ_UNIT;
      A_DEF_INVERT_FREQ(L_FETCHED_ROWS) := L_DEF_INVERT_FREQ;
      A_DEF_ST_BASED_FREQ(L_FETCHED_ROWS) := L_DEF_ST_BASED_FREQ;
      A_DEF_LAST_SCHED(L_FETCHED_ROWS) := TO_CHAR(L_DEF_LAST_SCHED);
      A_DEF_LAST_CNT(L_FETCHED_ROWS) := L_DEF_LAST_CNT;
      A_DEF_LAST_VAL(L_FETCHED_ROWS) := L_DEF_LAST_VAL;

      OPEN L_STPRFR_CURSOR(L_PR, L_PR_VERSION);
      FETCH L_STPRFR_CURSOR INTO L_FREQ_TP, L_FREQ_VAL, L_FREQ_UNIT, 
            L_INVERT_FREQ, L_LAST_SCHED, L_LAST_CNT, L_LAST_VAL;
      L_STPR_FOUND := L_STPRFR_CURSOR%FOUND;
      CLOSE L_STPRFR_CURSOR;
      
      IF NOT L_STPR_FOUND THEN
         L_FREQ_TP := 'A';
         L_FREQ_VAL := 0;
         L_FREQ_UNIT := '';
         L_INVERT_FREQ := '0';
         L_LAST_SCHED := '';
         L_LAST_CNT := 0;
         L_LAST_VAL := '';
      END IF;

      A_FREQ_TP(L_FETCHED_ROWS):= L_FREQ_TP;
      A_FREQ_VAL(L_FETCHED_ROWS):= L_FREQ_VAL;
      A_FREQ_UNIT(L_FETCHED_ROWS):= L_FREQ_UNIT;
      A_INVERT_FREQ(L_FETCHED_ROWS):= L_INVERT_FREQ;
      A_LAST_SCHED(L_FETCHED_ROWS):= TO_CHAR(L_LAST_SCHED);
      A_LAST_CNT(L_FETCHED_ROWS):= L_LAST_CNT;
      A_LAST_VAL(L_FETCHED_ROWS):= L_LAST_VAL;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_STPF_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_STPF_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetStPrFrequency', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (L_STPF_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_STPF_CURSOR);
      END IF;
      IF L_STPRFR_CURSOR%ISOPEN THEN
         CLOSE L_STPRFR_CURSOR;
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETSTPRFREQUENCY;

FUNCTION GETSTMTFREQUENCY                                
(A_ST                IN     VARCHAR2,                    
 A_VERSION           IN     VARCHAR2,                    
 A_PR                IN     VARCHAR2,                    
 A_PR_VERSION        IN     VARCHAR2,                    
 A_MT                OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_MT_VERSION        OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_FREQ_TP           OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_FREQ_VAL          OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_FREQ_UNIT         OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_INVERT_FREQ       OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_LAST_SCHED        OUT    UNAPIGEN.DATE_TABLE_TYPE,    
 A_LAST_CNT          OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_LAST_VAL          OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_DEF_FREQ_TP       OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_DEF_FREQ_VAL      OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_DEF_FREQ_UNIT     OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_DEF_INVERT_FREQ   OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_DEF_ST_BASED_FREQ OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_DEF_LAST_SCHED    OUT    UNAPIGEN.DATE_TABLE_TYPE,    
 A_DEF_LAST_CNT      OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_DEF_LAST_VAL      OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_NR_OF_ROWS        IN OUT NUMBER)                      
RETURN NUMBER IS

L_MT                 VARCHAR2(20);
L_MT_VERSION         VARCHAR2(20);
L_FREQ_TP            CHAR(1);
L_FREQ_VAL           NUMBER;
L_FREQ_UNIT          VARCHAR2(20);
L_INVERT_FREQ        CHAR(1);
L_LAST_SCHED         TIMESTAMP WITH TIME ZONE;
L_LAST_CNT           NUMBER(5);
L_LAST_VAL           VARCHAR2(40);
L_DEF_FREQ_TP        CHAR(1);
L_DEF_FREQ_VAL       NUMBER;
L_DEF_FREQ_UNIT      VARCHAR2(20);
L_DEF_INVERT_FREQ    CHAR(1);
L_DEF_ST_BASED_FREQ  CHAR(1);
L_DEF_LAST_SCHED     TIMESTAMP WITH TIME ZONE;
L_DEF_LAST_CNT       NUMBER(5);
L_DEF_LAST_VAL       VARCHAR2(40);
L_STMF_CURSOR        INTEGER;
L_STMT_FOUND         BOOLEAN;

CURSOR L_STPRMT_CURSOR(C_MT VARCHAR2, C_MT_VERSION VARCHAR2) IS
SELECT FREQ_TP, FREQ_VAL, FREQ_UNIT, INVERT_FREQ,
       LAST_SCHED, LAST_CNT, LAST_VAL
FROM UTSTMTFREQ
WHERE PR_VERSION = A_PR_VERSION
  AND PR = A_PR
  AND VERSION = A_VERSION
  AND ST = A_ST
  AND MT_VERSION = C_MT_VERSION
  AND MT = C_MT;

BEGIN
   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   L_STMF_CURSOR := DBMS_SQL.OPEN_CURSOR;

   L_SQL_STRING := ' SELECT mt, mt_version, freq_tp, freq_val, freq_unit, invert_freq, ' ||
                   ' st_based_freq, last_sched, last_cnt, last_val ' ||
                   ' FROM dd'||UNAPIGEN.P_DD || '.uvprmt '||
                   ' WHERE version = ''' || REPLACE(A_PR_VERSION, '''', '''''')|| '''' || 
                   ' AND pr = ''' || REPLACE(A_PR, '''', '''''')|| ''' ORDER BY seq'; 

   DBMS_SQL.PARSE(L_STMF_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_STMF_CURSOR, 1, L_MT, 20);
   DBMS_SQL.DEFINE_COLUMN(L_STMF_CURSOR, 2, L_MT_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_STMF_CURSOR, 3, L_DEF_FREQ_TP, 1);
   DBMS_SQL.DEFINE_COLUMN(L_STMF_CURSOR, 4, L_DEF_FREQ_VAL);
   DBMS_SQL.DEFINE_COLUMN(L_STMF_CURSOR, 5, L_DEF_FREQ_UNIT, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_STMF_CURSOR, 6, L_DEF_INVERT_FREQ, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_STMF_CURSOR, 7, L_DEF_ST_BASED_FREQ, 1);
   DBMS_SQL.DEFINE_COLUMN(L_STMF_CURSOR, 8, L_DEF_LAST_SCHED);
   DBMS_SQL.DEFINE_COLUMN(L_STMF_CURSOR, 9, L_DEF_LAST_CNT);
   DBMS_SQL.DEFINE_COLUMN(L_STMF_CURSOR, 10, L_DEF_LAST_VAL, 40);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_STMF_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_STMF_CURSOR, 1, L_MT);
      DBMS_SQL.COLUMN_VALUE(L_STMF_CURSOR, 2, L_MT_VERSION);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_STMF_CURSOR, 3, L_DEF_FREQ_TP);
      DBMS_SQL.COLUMN_VALUE(L_STMF_CURSOR, 4, L_DEF_FREQ_VAL);
      DBMS_SQL.COLUMN_VALUE(L_STMF_CURSOR, 5, L_DEF_FREQ_UNIT);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_STMF_CURSOR, 6, L_DEF_INVERT_FREQ);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_STMF_CURSOR, 7, L_DEF_ST_BASED_FREQ);
      DBMS_SQL.COLUMN_VALUE(L_STMF_CURSOR, 8, L_DEF_LAST_SCHED);
      DBMS_SQL.COLUMN_VALUE(L_STMF_CURSOR, 9, L_DEF_LAST_CNT);
      DBMS_SQL.COLUMN_VALUE(L_STMF_CURSOR, 10, L_DEF_LAST_VAL);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_MT(L_FETCHED_ROWS) := L_MT;
      A_MT_VERSION(L_FETCHED_ROWS) := L_MT_VERSION;
      A_DEF_FREQ_TP(L_FETCHED_ROWS) := L_DEF_FREQ_TP;
      A_DEF_FREQ_VAL(L_FETCHED_ROWS) := L_DEF_FREQ_VAL;
      A_DEF_FREQ_UNIT(L_FETCHED_ROWS) := L_DEF_FREQ_UNIT;
      A_DEF_INVERT_FREQ(L_FETCHED_ROWS) := L_DEF_INVERT_FREQ;
      A_DEF_ST_BASED_FREQ(L_FETCHED_ROWS) := L_DEF_ST_BASED_FREQ;
      A_DEF_LAST_SCHED(L_FETCHED_ROWS) := TO_CHAR(L_DEF_LAST_SCHED);
      A_DEF_LAST_CNT(L_FETCHED_ROWS) := L_DEF_LAST_CNT;
      A_DEF_LAST_VAL(L_FETCHED_ROWS) := L_DEF_LAST_VAL;

      OPEN L_STPRMT_CURSOR(L_MT, L_MT_VERSION);
      FETCH L_STPRMT_CURSOR INTO L_FREQ_TP, L_FREQ_VAL, L_FREQ_UNIT,
            L_INVERT_FREQ, L_LAST_SCHED, L_LAST_CNT, L_LAST_VAL;
      L_STMT_FOUND := L_STPRMT_CURSOR%FOUND;
      CLOSE L_STPRMT_CURSOR;
      
      IF NOT L_STMT_FOUND THEN
         L_FREQ_TP := 'A';
         L_FREQ_VAL := 0;
         L_FREQ_UNIT := '';
         L_INVERT_FREQ := '0';
         L_LAST_SCHED := '';
         L_LAST_CNT := 0;
         L_LAST_VAL := '';
      END IF;

      A_FREQ_TP(L_FETCHED_ROWS):= L_FREQ_TP;
      A_FREQ_VAL(L_FETCHED_ROWS):= L_FREQ_VAL;
      A_FREQ_UNIT(L_FETCHED_ROWS):= L_FREQ_UNIT;
      A_INVERT_FREQ(L_FETCHED_ROWS):= L_INVERT_FREQ;
      A_LAST_SCHED(L_FETCHED_ROWS):= TO_CHAR(L_LAST_SCHED);
      A_LAST_CNT(L_FETCHED_ROWS):= L_LAST_CNT;
      A_LAST_VAL(L_FETCHED_ROWS):= L_LAST_VAL;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_STMF_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_STMF_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetStMtFrequency', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (L_STMF_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_STMF_CURSOR);
      END IF;
      IF L_STPRMT_CURSOR%ISOPEN THEN
         CLOSE L_STPRMT_CURSOR;
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETSTMTFREQUENCY;

FUNCTION SAVESTPRFREQUENCY                               
(A_ST                IN     VARCHAR2,                    
 A_VERSION           IN     VARCHAR2,                    
 A_PP                IN     VARCHAR2,                    
 A_PP_VERSION        IN     VARCHAR2,                    
 A_PP_KEY1           IN     VARCHAR2,                    
 A_PP_KEY2           IN     VARCHAR2,                    
 A_PP_KEY3           IN     VARCHAR2,                    
 A_PP_KEY4           IN     VARCHAR2,                    
 A_PP_KEY5           IN     VARCHAR2,                    
 A_PR                IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_PR_VERSION        IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_FREQ_TP           IN     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_FREQ_VAL          IN     UNAPIGEN.NUM_TABLE_TYPE,     
 A_FREQ_UNIT         IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_INVERT_FREQ       IN     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_LAST_SCHED        IN     UNAPIGEN.DATE_TABLE_TYPE,    
 A_LAST_CNT          IN     UNAPIGEN.NUM_TABLE_TYPE,     
 A_LAST_VAL          IN     UNAPIGEN.VC40_TABLE_TYPE,    
 A_NR_OF_ROWS        IN     NUMBER,                      
 A_MODIFY_REASON     IN     VARCHAR2)                    
RETURN NUMBER IS

L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);
L_LOG_HS       CHAR(1);
L_ALLOW_MODIFY CHAR(1);
L_ACTIVE       CHAR(1);

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_ST, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR ;
   END IF;

   IF NVL(A_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR ;
   END IF;

   IF NVL(A_PP, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR ;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('st', A_ST, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR ;
   END IF;

   UPDATE UTST
   SET ALLOW_MODIFY = '#'
   WHERE VERSION = A_VERSION
     AND ST = A_ST;
   
   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR ;
   END IF;

   DELETE UTSTPRFREQ
   WHERE VERSION = A_VERSION
     AND ST = A_ST
     AND PP_VERSION = A_PP_VERSION
     AND PP = A_PP;

   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
       IF NVL(A_PR(L_SEQ_NO), ' ') = ' ' THEN
          UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
          RAISE STPERROR ;
       END IF;

       IF NVL(A_FREQ_TP(L_SEQ_NO), ' ') NOT IN ('A','S','T','C','N') THEN
          UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_FREQTP;
          RAISE STPERROR ;
       END IF;

      IF A_FREQ_TP(L_SEQ_NO) IN ('C','T','S') THEN
         IF A_FREQ_UNIT(L_SEQ_NO) IS NULL THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_FREQUNIT;
            RAISE STPERROR;         
         ELSIF A_FREQ_TP(L_SEQ_NO) = 'T' AND
            A_FREQ_UNIT(L_SEQ_NO) NOT IN ('MI','HH','DD','WW','MM','YY','MF','YF') THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_FREQUNIT;
            RAISE STPERROR;         
         END IF;
      END IF;

      IF NVL(A_INVERT_FREQ(L_SEQ_NO), ' ') NOT IN ('1','0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INVERTFREQ;
         RAISE STPERROR ;
      END IF;

      INSERT INTO UTSTPRFREQ (ST, VERSION, PP, PP_VERSION, PR, PR_VERSION, FREQ_TP, FREQ_VAL,
                              FREQ_UNIT, INVERT_FREQ, LAST_SCHED, LAST_SCHED_TZ, LAST_CNT, LAST_VAL)
      VALUES (A_ST, A_VERSION, A_PP, A_PP_VERSION, A_PR(L_SEQ_NO), A_PR_VERSION(L_SEQ_NO), 
              A_FREQ_TP(L_SEQ_NO), A_FREQ_VAL(L_SEQ_NO), A_FREQ_UNIT(L_SEQ_NO),
              A_INVERT_FREQ(L_SEQ_NO), TO_TIMESTAMP_TZ(A_LAST_SCHED(L_SEQ_NO)), TO_TIMESTAMP_TZ(A_LAST_SCHED(L_SEQ_NO)),
              A_LAST_CNT(L_SEQ_NO), A_LAST_VAL(L_SEQ_NO));
   END LOOP;

   L_EV_SEQ_NR := -1;
   L_EVENT_TP := 'UsedObjectsUpdated';
   L_RET_CODE := UNAPIEV.INSERTEVENT('SaveStPrFrequency',UNAPIGEN.P_EVMGR_NAME, 'st', A_ST, L_LC, 
                                     L_LC_VERSION, L_SS, L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   IF L_LOG_HS = '1' THEN
      INSERT INTO UTSTHS (ST, VERSION, WHO, WHO_DESCRIPTION, WHAT,
                          WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES (A_ST, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
              'sample type "'||A_ST||'" parameter based assignment frequencies are updated.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
              A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveStPrFrequency',SQLERRM);
   END IF ;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveStPrFrequency'));
END SAVESTPRFREQUENCY;

FUNCTION SAVESTMTFREQUENCY                               
(A_ST                IN     VARCHAR2,                    
 A_VERSION           IN     VARCHAR2,                    
 A_PR                IN     VARCHAR2,                    
 A_PR_VERSION        IN     VARCHAR2,                    
 A_MT                IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_MT_VERSION        IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_FREQ_TP           IN     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_FREQ_VAL          IN     UNAPIGEN.NUM_TABLE_TYPE,     
 A_FREQ_UNIT         IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_INVERT_FREQ       IN     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_LAST_SCHED        IN     UNAPIGEN.DATE_TABLE_TYPE,    
 A_LAST_CNT          IN     UNAPIGEN.NUM_TABLE_TYPE,     
 A_LAST_VAL          IN     UNAPIGEN.VC40_TABLE_TYPE,    
 A_NR_OF_ROWS        IN     NUMBER,                      
 A_MODIFY_REASON     IN     VARCHAR2)                    
RETURN NUMBER IS

L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);
L_LOG_HS       CHAR(1);
L_ALLOW_MODIFY CHAR(1);
L_ACTIVE       CHAR(1);

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_ST, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR ;
   END IF;

   IF NVL(A_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR ;
   END IF;

   IF NVL(A_PR, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR ;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('st', A_ST, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR ;
   END IF;

   UPDATE UTST
   SET ALLOW_MODIFY = '#'
   WHERE VERSION = A_VERSION
     AND ST = A_ST;
   
   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR ;
   END IF;

   DELETE UTSTMTFREQ
   WHERE VERSION = A_VERSION
     AND ST = A_ST
     AND PR_VERSION = A_PR_VERSION
     AND PR = A_PR;

   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      IF NVL(A_MT(L_SEQ_NO), ' ') = ' ' THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
         RAISE STPERROR ;
      END IF;

      IF NVL(A_FREQ_TP(L_SEQ_NO), ' ') NOT IN ('A','S','T','C','N') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_FREQTP;
         RAISE STPERROR ;
      END IF;

      IF A_FREQ_TP(L_SEQ_NO) IN ('C','T','S') THEN
         IF A_FREQ_UNIT(L_SEQ_NO) IS NULL THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_FREQUNIT;
            RAISE STPERROR;         
         ELSIF A_FREQ_TP(L_SEQ_NO) = 'T' AND
            A_FREQ_UNIT(L_SEQ_NO) NOT IN ('MI','HH','DD','WW','MM','YY','MF','YF') THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_FREQUNIT;
            RAISE STPERROR;         
         END IF;
      END IF;

      IF NVL(A_INVERT_FREQ(L_SEQ_NO), ' ') NOT IN ('1','0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INVERTFREQ;
         RAISE STPERROR ;
      END IF;

      INSERT INTO UTSTMTFREQ (ST, VERSION, PR, PR_VERSION, MT, MT_VERSION, FREQ_TP, FREQ_VAL,
                              FREQ_UNIT, INVERT_FREQ, LAST_SCHED, LAST_SCHED_TZ, LAST_CNT, LAST_VAL)
      VALUES (A_ST, A_VERSION, A_PR, A_PR_VERSION, A_MT(L_SEQ_NO), A_MT_VERSION(L_SEQ_NO), 
              A_FREQ_TP(L_SEQ_NO), A_FREQ_VAL(L_SEQ_NO), A_FREQ_UNIT(L_SEQ_NO),
              A_INVERT_FREQ(L_SEQ_NO), TO_TIMESTAMP_TZ(A_LAST_SCHED(L_SEQ_NO)), TO_TIMESTAMP_TZ(A_LAST_SCHED(L_SEQ_NO)),
              A_LAST_CNT(L_SEQ_NO), A_LAST_VAL(L_SEQ_NO));
   END LOOP;

   L_EVENT_TP := 'UsedObjectsUpdated';
   L_EV_SEQ_NR := -1;
   L_RET_CODE := UNAPIEV.INSERTEVENT('SaveStMtFrequency',UNAPIGEN.P_EVMGR_NAME, 'st', A_ST, L_LC, 
                                     L_LC_VERSION, L_SS, L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   IF L_LOG_HS = '1' THEN
      INSERT INTO UTSTHS (ST, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                          WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES (A_ST, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
              'sample type "'||A_ST||'" method based assignment frequencies are updated.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
              A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveStMtFrequency',SQLERRM);
   END IF ;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveStMtFrequency'));
END SAVESTMTFREQUENCY;




BEGIN
   P_STIP_CURSOR := NULL;
   P_STPP_CURSOR := NULL;
   P_STGK_CURSOR := NULL;
END UNAPIST2;
PACKAGE BODY unapisd2 AS

TYPE BOOLEAN_TABLE_TYPE IS TABLE OF BOOLEAN INDEX BY BINARY_INTEGER;
P_SELECTSDSC_CURSOR        INTEGER;

L_SQLERRM         VARCHAR2(255);
L_SQL_STRING      VARCHAR2(2000);
L_WHERE_CLAUSE    VARCHAR2(1000);
L_EVENT_TP        UTEV.EV_TP%TYPE;
L_RET_CODE        NUMBER;
L_RESULT          NUMBER;
L_FETCHED_ROWS    NUMBER;
L_EV_SEQ_NR       NUMBER;
L_EV_DETAILS      VARCHAR2(255);
STPERROR          EXCEPTION;

FUNCTION GETVERSION
   RETURN VARCHAR2
IS
BEGIN
   RETURN('06.07.00.00_00.13');
EXCEPTION
   WHEN OTHERS THEN
      RETURN (NULL);
END GETVERSION;

FUNCTION DELETESTUDY                  
(A_SD            IN  VARCHAR2,          
 A_MODIFY_REASON IN  VARCHAR2)          
RETURN NUMBER IS

L_ALLOW_MODIFY    CHAR(1);
L_ACTIVE          CHAR(1);
L_LC              CHAR(2);
L_LC_VERSION      CHAR(20);
L_SS              VARCHAR2(2);
L_LOG_HS          CHAR(1);
L_LOG_HS_DETAILS  CHAR(1);
L_SD_CURSOR       INTEGER;
L_OBJECT_ID       VARCHAR2(255);
L_SETTING_VALUE   VARCHAR2(40);
L_NEW_MASTERSD    VARCHAR2(20);
L_PT_VERSION      CHAR(20);

CURSOR L_SDGK_CURSOR IS
   SELECT DISTINCT GK
   FROM UTSDGK
   WHERE SD = A_SD;

CURSOR C_SYSTEM (A_SETTING_NAME VARCHAR2) IS
   SELECT SETTING_VALUE
   FROM UTSYSTEM
   WHERE SETTING_NAME = A_SETTING_NAME;
   
CURSOR L_SDSC_CURSOR IS
   SELECT SD,SC
   FROM UTSDSC
   WHERE SD = A_SD;
   
BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_SD, ' ')= ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIAUT.GETSDAUTHORISATION(A_SD, L_PT_VERSION, L_LC, L_LC_VERSION, L_SS,
                                             L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS, L_LOG_HS_DETAILS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   IF L_ACTIVE = '1' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OPACTIVE;
      RAISE STPERROR;
   END IF;

   
   IF UNAPIGEN.ISSYSTEM21CFR11COMPLIANT = UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTALLOWEDIN21CFR11;
      RAISE STPERROR;
   END IF;

   
   DELETE FROM UTSDII
   WHERE SD = A_SD;

   
   DELETE FROM UTSDICAU
   WHERE SD = A_SD;

   DELETE FROM UTSDICHS
   WHERE SD = A_SD;

   DELETE FROM UTSDICHSDETAILS
   WHERE SD = A_SD;

   DELETE FROM UTSDIC
   WHERE SD = A_SD;


   
   DELETE FROM UTSDAU
   WHERE SD = A_SD;

   DELETE FROM UTSDHS
   WHERE SD = A_SD;

   DELETE FROM UTSDHSDETAILS
   WHERE SD = A_SD;

   DELETE FROM UTSDTP
   WHERE SD = A_SD;

   DELETE FROM UTSDCSCN
   WHERE SD = A_SD;
   
   DELETE FROM UTSDCS
   WHERE SD = A_SD;
   


   L_SD_CURSOR := DBMS_SQL.OPEN_CURSOR;
   
   FOR L_SDGKDEL IN L_SDGK_CURSOR LOOP
      BEGIN
         L_SQL_STRING := 'DELETE FROM utsdgk' || L_SDGKDEL.GK ||
                         ' WHERE sd = ''' || REPLACE(A_SD, '''', '''''') || ''''; 
         DBMS_SQL.PARSE(L_SD_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         L_RESULT := DBMS_SQL.EXECUTE(L_SD_CURSOR);
      EXCEPTION
      WHEN OTHERS THEN
         IF SQLCODE = -942 THEN
            NULL; 
         ELSE
            RAISE;
         END IF;
      END;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_SD_CURSOR);

   DELETE FROM UTSDGK
   WHERE SD = A_SD;

   DELETE FROM UTEVTIMED
   WHERE (OBJECT_TP='sd' AND OBJECT_ID=A_SD)
      OR INSTR(EV_DETAILS, 'sd='||A_SD) <> 0;

   DELETE FROM UTEVRULESDELAYED
   WHERE (OBJECT_TP='sd' AND OBJECT_ID=A_SD)
      OR INSTR(EV_DETAILS, 'sd='||A_SD) <> 0;

   DELETE FROM UTSD
   WHERE SD = A_SD;
      
   OPEN C_SYSTEM ('SDDELETECASCADEONSC');
   FETCH C_SYSTEM INTO L_SETTING_VALUE;
   IF C_SYSTEM%NOTFOUND THEN
      L_SETTING_VALUE := 'NO';
   END IF;
   CLOSE C_SYSTEM;
   
   IF L_SETTING_VALUE = 'YES' THEN
      FOR L_SDSC_REC IN L_SDSC_CURSOR LOOP
         L_RET_CODE := UNAPISC.DELETESAMPLE(L_SDSC_REC.SC, A_MODIFY_REASON);
         IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
            UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
            RAISE STPERROR;
         END IF;
      END LOOP;
   END IF;

   DELETE FROM UTSDSC
   WHERE SD = A_SD;
   
   L_EVENT_TP := 'StudyDeleted';
   L_EV_SEQ_NR := -1;
   L_EV_DETAILS := 'pt_version=' || L_PT_VERSION;
   L_RESULT := UNAPIEV.INSERTEVENT('DeleteStudy', UNAPIGEN.P_EVMGR_NAME, 'sd', A_SD, L_LC, 
                                   L_LC_VERSION, L_SS, L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   
   
   
   L_OBJECT_ID := 'sd='|| A_SD;
   FOR L_SEQ_NO IN 1..UNAPIGEN.PA_OBJECT_NR LOOP
      IF SUBSTR(UNAPIGEN.PA_OBJECT_ID(L_SEQ_NO), 1, LENGTH(L_OBJECT_ID)) = L_OBJECT_ID THEN
         UNAPIGEN.PA_OBJECT_ID(L_SEQ_NO) := NULL;
      END IF;
   END LOOP;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('DeleteStudy', SQLERRM);
   END IF;
   IF DBMS_SQL.IS_OPEN(L_SD_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_SD_CURSOR);
   END IF;
   IF C_SYSTEM%ISOPEN THEN
      CLOSE C_SYSTEM;
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'DeleteStudy'));
END DELETESTUDY;


FUNCTION INITSDSAMPLINGDETAILS                         
(A_PT               IN      VARCHAR2,                  
 A_PT_VERSION       IN OUT  VARCHAR2,                  
 A_SD               IN      VARCHAR2,                  
 A_FILTER_FREQ      IN      CHAR,                      
 A_REF_DATE         IN      DATE,                      
 A_ST               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_ST_VERSION       OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_DELAY            OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_DELAY_UNIT       OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_INHERIT_AU       OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NR_PLANNED_SC    OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_NR_OF_ROWS       IN OUT  NUMBER)                    
RETURN NUMBER IS

L_REF_DATE           TIMESTAMP WITH TIME ZONE;
L_ASSIGN             BOOLEAN;
L_ST                 UNAPIGEN.VC20_TABLE_TYPE;
L_DELAY              UNAPIGEN.NUM_TABLE_TYPE;
L_DELAY_UNIT         UNAPIGEN.VC20_TABLE_TYPE;
L_INHERIT_AU         UNAPIGEN.CHAR1_TABLE_TYPE;
L_NR_PLANNED_SC      UNAPIGEN.NUM_TABLE_TYPE;

L_TOT_NR_ROWS        NUMBER;
L_FILTER_FREQ        CHAR(1);
L_DYN_CURSOR         INTEGER;

CURSOR L_PTST_CURSOR IS
   SELECT A.*
   FROM UTPTCELLST A, UTST B
   WHERE A.PT = A_PT
   AND A.VERSION = A_PT_VERSION
   AND A.ST = B.ST
   AND UNAPIGEN.VALIDATEVERSION('st', A.ST, A.ST_VERSION) = B.VERSION
   ORDER BY SEQ;

   
   PROCEDURE ASSIGN(C_ST            IN VARCHAR2,
                    C_ST_VERSION    IN VARCHAR2,
                    C_DELAY         IN NUMBER,
                    C_DELAY_UNIT    IN VARCHAR2,
                    C_INHERIT_AU    IN CHAR,
                    C_NR_PLANNED_SC IN NUMBER) IS


   BEGIN
      
      
      
      A_ST(L_TOT_NR_ROWS + 1) := C_ST;
      A_ST_VERSION(L_TOT_NR_ROWS + 1) := C_ST_VERSION;
      A_DELAY(L_TOT_NR_ROWS + 1) := C_DELAY;
      A_DELAY_UNIT(L_TOT_NR_ROWS + 1) := C_DELAY_UNIT;
      A_INHERIT_AU(L_TOT_NR_ROWS + 1) := C_INHERIT_AU;
      A_NR_PLANNED_SC(L_TOT_NR_ROWS + 1) := C_NR_PLANNED_SC;
   END ASSIGN;

BEGIN




   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_NR_OF_ROWS, 0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NROFROWS;
      RAISE STPERROR;
   END IF;

   
   
   
   
   
   
   
   IF NVL(A_PT, ' ') = ' ' OR
      NVL(A_SD, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   A_PT_VERSION := UNAPIGEN.USEVERSION('pt', A_PT, A_PT_VERSION);

   L_REF_DATE := A_REF_DATE;
   
   IF L_REF_DATE IS NULL THEN
      L_REF_DATE := CURRENT_TIMESTAMP;
   END IF;

   L_FILTER_FREQ := NVL(A_FILTER_FREQ, '1');
   L_TOT_NR_ROWS := 0;


   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   
   
   
   IF L_TOT_NR_ROWS > A_NR_OF_ROWS THEN
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
             'InitSdSamplingDetails','a_nr_of_rows (' || A_NR_OF_ROWS ||
             ') too small for required sample initialisation');
   END IF;

   A_NR_OF_ROWS := L_TOT_NR_ROWS;
   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('InitSdSamplingDetails', SQLERRM);
   END IF;
   IF DBMS_SQL.IS_OPEN(L_DYN_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_DYN_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'InitSdSamplingDetails'));
END INITSDSAMPLINGDETAILS;

FUNCTION CREATESDSAMPLINGDETAILS                        
(A_PT               IN      VARCHAR2,                   
 A_PT_VERSION       IN OUT  VARCHAR2,                   
 A_SD               IN      VARCHAR2,                   
 A_FILTER_FREQ      IN      CHAR,                       
 A_REF_DATE         IN      DATE,                       
 A_USERID           IN      VARCHAR2,                   
 A_FIELDTYPE_TAB    IN      UNAPIGEN.VC20_TABLE_TYPE,   
 A_FIELDNAMES_TAB   IN      UNAPIGEN.VC20_TABLE_TYPE,   
 A_FIELDVALUES_TAB  IN      UNAPIGEN.VC40_TABLE_TYPE,   
 A_NR_OF_ROWS       IN      NUMBER,                     
 A_MODIFY_REASON    IN      VARCHAR2)                   
RETURN NUMBER IS

L_SC               VARCHAR2(20);
L_PP_TAB           UNAPIGEN.VC20_TABLE_TYPE;
L_PP_VERSION_TAB   UNAPIGEN.VC20_TABLE_TYPE;
L_PP_KEY1_TAB      UNAPIGEN.VC20_TABLE_TYPE;
L_PP_KEY2_TAB      UNAPIGEN.VC20_TABLE_TYPE;
L_PP_KEY3_TAB      UNAPIGEN.VC20_TABLE_TYPE;
L_PP_KEY4_TAB      UNAPIGEN.VC20_TABLE_TYPE;
L_PP_KEY5_TAB      UNAPIGEN.VC20_TABLE_TYPE;
L_PP_NR_OF_ROWS    INTEGER;
L_IP_TAB           UNAPIGEN.VC20_TABLE_TYPE;
L_IP_VERSION_TAB   UNAPIGEN.VC20_TABLE_TYPE;
L_IP_NR_OF_ROWS    INTEGER;

L_CSNODE            NUMBER;
L_TPNODE         NUMBER;
L_SEQ              NUMBER;
L_STST_TAB         UNAPIGEN.VC20_TABLE_TYPE;
L_STST_VERSION_TAB UNAPIGEN.VC20_TABLE_TYPE;
L_STDELAY_TAB      UNAPIGEN.NUM_TABLE_TYPE;
L_STDELAY_UNIT_TAB UNAPIGEN.VC20_TABLE_TYPE;
L_STINHERIT_AU_TAB UNAPIGEN.CHAR1_TABLE_TYPE;
L_STNR_PLANNED_SC  UNAPIGEN.NUM_TABLE_TYPE;
L_ST_NR_OF_ROWS    INTEGER;

L_ROW              INTEGER;
L_STROW            INTEGER;
L_ERRM             VARCHAR2(255);

CURSOR L_PTST_CURSOR IS
   SELECT PTROW, PTCOLUMN, SEQ, ST, ST_VERSION, NR_PLANNED_SC, SC_LC, SC_LC_VERSION, SC_UC,
           SC_UC_VERSION, ADD_STPP, ADD_STIP, NR_SC_MAX, INHERIT_AU
   FROM UTPTCELLST
   WHERE PT = A_PT AND 
   VERSION = A_PT_VERSION
   ORDER BY PTROW, PTCOLUMN, SEQ;  
   
CURSOR L_PTPP_CURSOR(C_PT_VERSION VARCHAR2, C_PTROW NUMBER, C_PTCOLUMN NUMBER, C_SEQ NUMBER) IS
   SELECT PP, PP_VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5
   FROM UTPTCELLPP
   WHERE PT = A_PT AND
         VERSION = C_PT_VERSION AND
         PTROW = C_PTROW AND
         PTCOLUMN = C_PTCOLUMN AND
         SEQ = C_SEQ;

CURSOR L_PTIP_CURSOR(C_PT_VERSION VARCHAR2, C_PTROW NUMBER, C_PTCOLUMN NUMBER,  C_SEQ NUMBER) IS
   SELECT IP, IP_VERSION
   FROM UTPTCELLIP
   WHERE PT = A_PT AND
         VERSION = C_PT_VERSION AND
         PTROW = C_PTROW AND
         PTCOLUMN  = C_PTCOLUMN AND
         SEQ = C_SEQ;
         
L_PTST_REC        L_PTST_CURSOR%ROWTYPE;
L_PTPP_REC        L_PTPP_CURSOR%ROWTYPE;
L_PTIP_REC        L_PTIP_CURSOR%ROWTYPE;

L_FIELDTYPE_TAB   UNAPIGEN.VC20_TABLE_TYPE;
L_FIELDNAMES_TAB  UNAPIGEN.VC20_TABLE_TYPE;
L_FIELDVALUES_TAB UNAPIGEN.VC40_TABLE_TYPE;
L_NR_OF_ROWS      INTEGER;
L_ORIG_NR_OF_ROWS INTEGER;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   A_PT_VERSION := UNAPIGEN.USEVERSION('pt', A_PT, A_PT_VERSION);

































   
   
   
   
   
   L_ERRM := '';
   L_ORIG_NR_OF_ROWS := A_NR_OF_ROWS;
   L_NR_OF_ROWS := A_NR_OF_ROWS;
   FOR L_ROW IN 1..L_NR_OF_ROWS LOOP
      L_FIELDTYPE_TAB(L_ROW) := A_FIELDTYPE_TAB(L_ROW);
      L_FIELDNAMES_TAB(L_ROW) :=  A_FIELDNAMES_TAB(L_ROW);
      L_FIELDVALUES_TAB(L_ROW) := A_FIELDVALUES_TAB(L_ROW);
   END LOOP;
     
   FOR L_PTST_REC IN L_PTST_CURSOR LOOP
      L_PP_NR_OF_ROWS := 0;
      L_IP_NR_OF_ROWS := 0;
      L_CSNODE        := L_PTST_REC.PTROW * UNAPIGEN.DEFAULT_NODE_INTERVAL; 
      L_TPNODE        := L_PTST_REC.PTCOLUMN * UNAPIGEN.DEFAULT_NODE_INTERVAL;
      L_SEQ           := L_PTST_REC.SEQ;
      
      FOR L_PTPP_REC IN L_PTPP_CURSOR(A_PT_VERSION, L_PTST_REC.PTROW, L_PTST_REC.PTCOLUMN, L_SEQ) LOOP
         L_PP_NR_OF_ROWS                     := L_PP_NR_OF_ROWS +1;
         L_PP_TAB(L_PP_NR_OF_ROWS)           := L_PTPP_REC.PP;
         L_PP_VERSION_TAB(L_PP_NR_OF_ROWS)   := L_PTPP_REC.PP_VERSION;        
         L_PP_KEY1_TAB(L_PP_NR_OF_ROWS)      := L_PTPP_REC.PP_KEY1;        
         L_PP_KEY2_TAB(L_PP_NR_OF_ROWS)      := L_PTPP_REC.PP_KEY2;        
         L_PP_KEY3_TAB(L_PP_NR_OF_ROWS)      := L_PTPP_REC.PP_KEY3;        
         L_PP_KEY4_TAB(L_PP_NR_OF_ROWS)      := L_PTPP_REC.PP_KEY4;        
         L_PP_KEY5_TAB(L_PP_NR_OF_ROWS)      := L_PTPP_REC.PP_KEY5;        
      END LOOP;
      
      FOR L_PTIP_REC IN L_PTIP_CURSOR(A_PT_VERSION, L_PTST_REC.PTROW, L_PTST_REC.PTCOLUMN,L_SEQ) LOOP
         L_IP_NR_OF_ROWS                     := L_IP_NR_OF_ROWS +1;
         L_IP_TAB(L_IP_NR_OF_ROWS)           := L_PTIP_REC.IP;
         L_IP_VERSION_TAB(L_IP_NR_OF_ROWS)   := L_PTIP_REC.IP_VERSION;        
      END LOOP;
      
      
      
      
      
      L_NR_OF_ROWS := L_ORIG_NR_OF_ROWS;
      FOR L_PTCSROW_REC IN (SELECT DISTINCT CS
                            FROM UTPTCS
                            WHERE PT = A_PT
                            AND VERSION = A_PT_VERSION
                            AND PTROW = L_PTST_REC.PTROW) LOOP
         L_NR_OF_ROWS := L_NR_OF_ROWS + 1;
         L_FIELDTYPE_TAB(L_NR_OF_ROWS) := 'gk';
         L_FIELDNAMES_TAB(L_NR_OF_ROWS) := 'cs';
         L_FIELDVALUES_TAB(L_NR_OF_ROWS) := L_PTCSROW_REC.CS;
         FOR L_PTCSCNROW_REC IN (SELECT DISTINCT CN, VALUE
                                 FROM UTPTCSCN
                                 WHERE PT = A_PT
                                 AND VERSION = A_PT_VERSION
                                 AND PTROW = L_PTST_REC.PTROW
                                 AND CS = L_PTCSROW_REC.CS) LOOP
            L_NR_OF_ROWS := L_NR_OF_ROWS + 1;
            L_FIELDTYPE_TAB(L_NR_OF_ROWS) := 'gk';
            L_FIELDNAMES_TAB(L_NR_OF_ROWS) := L_PTCSCNROW_REC.CN;
            L_FIELDVALUES_TAB(L_NR_OF_ROWS) := L_PTCSCNROW_REC.VALUE;
         END LOOP;
      END LOOP;
      FOR L_PTCSROW_REC IN (SELECT DISTINCT TP, TP_UNIT
                            FROM UTPTTP
                            WHERE PT = A_PT
                            AND VERSION = A_PT_VERSION
                            AND PTCOLUMN = L_PTST_REC.PTCOLUMN) LOOP
         L_NR_OF_ROWS := L_NR_OF_ROWS + 1;
         L_FIELDTYPE_TAB(L_NR_OF_ROWS) := 'gk';
         L_FIELDNAMES_TAB(L_NR_OF_ROWS) := 'tp';
         L_FIELDVALUES_TAB(L_NR_OF_ROWS) := L_PTCSROW_REC.TP;
         L_NR_OF_ROWS := L_NR_OF_ROWS + 1;
         L_FIELDTYPE_TAB(L_NR_OF_ROWS) := 'gk';
         L_FIELDNAMES_TAB(L_NR_OF_ROWS) := 'tp_unit';
         L_FIELDVALUES_TAB(L_NR_OF_ROWS) := L_PTCSROW_REC.TP_UNIT;
      END LOOP;      
   
      FOR L_ROW IN 1..L_PTST_REC.NR_PLANNED_SC LOOP

         L_SC := NULL;
         L_RET_CODE := UNAPISD2.CREATESDSAMPLE(A_PT, A_PT_VERSION, A_SD, L_CSNODE, L_TPNODE, 
               L_PTST_REC.SEQ, L_PTST_REC.ST, L_PTST_REC.ST_VERSION, L_SC, A_REF_DATE, NULL, '',
               NVL(A_USERID, UNAPIGEN.P_USER), L_PTST_REC.ADD_STPP, L_PTST_REC.ADD_STIP, L_PP_TAB, 
               L_PP_VERSION_TAB, L_PP_KEY1_TAB, L_PP_KEY2_TAB, L_PP_KEY3_TAB, L_PP_KEY4_TAB, L_PP_KEY5_TAB, 
               L_PP_NR_OF_ROWS, L_IP_TAB, L_IP_VERSION_TAB, L_IP_NR_OF_ROWS,
               L_FIELDTYPE_TAB, L_FIELDNAMES_TAB, L_FIELDVALUES_TAB, L_NR_OF_ROWS,
               'Study creation');
         IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
            L_ERRM := 'pt=' || A_PT || '#pt_version='|| A_PT_VERSION || '#sd='|| A_SD ||
                '#st=' || L_PTST_REC.ST || '#st_version='|| L_PTST_REC.ST_VERSION || '#sc=NULL' ||
                '#pp_nr_of_rows=' || L_PP_NR_OF_ROWS ||'#ip_nr_of_rows=' || L_IP_NR_OF_ROWS ||
                '#CreateSdSample#ErrorCode=' || TO_CHAR(L_RET_CODE);
            UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
            RAISE STPERROR;
         ELSE
            IF (NVL(L_PTST_REC.SC_LC, ' ') <> ' ') THEN
               
               UPDATE UTSC SET
                  LC = L_PTST_REC.SC_LC,
                  LC_VERSION = UNAPIGEN.VALIDATEVERSION('lc', L_PTST_REC.SC_LC, L_PTST_REC.SC_LC_VERSION)
               WHERE SC = L_SC;
         END IF;
         END IF;
      END LOOP;
   END LOOP;
   
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('CreateSdSamplingDetails', SQLERRM);
   ELSIF L_ERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('CreateSdSamplingDetails', L_ERRM);
   END IF;
   IF L_PTPP_CURSOR%ISOPEN THEN
      CLOSE L_PTPP_CURSOR;
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'CreateSdSamplingDetails'));
END CREATESDSAMPLINGDETAILS;




FUNCTION CREATESDSAMPLE
(A_PT               IN     VARCHAR2,                    
 A_PT_VERSION       IN OUT VARCHAR2,                    
 A_SD               IN     VARCHAR2,                    
 A_CSNODE           IN     NUMBER,                      
 A_TPNODE           IN     NUMBER,                      
 A_SEQ              IN     NUMBER,                      
 A_ST               IN     VARCHAR2,                    
 A_ST_VERSION       IN OUT VARCHAR2,                    
 A_SC               IN OUT VARCHAR2,                    
 A_REF_DATE         IN     DATE,                        
 A_DELAY            IN     NUMBER,                      
 A_DELAY_UNIT       IN     VARCHAR2,                    
 A_USERID           IN     VARCHAR2,                    
 A_ADD_STPP         IN     CHAR,                        
 A_ADD_STIP         IN     CHAR,                        
 A_PP               IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_PP_VERSION       IN OUT UNAPIGEN.VC20_TABLE_TYPE,    
 A_PP_KEY1          IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_PP_KEY2          IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_PP_KEY3          IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_PP_KEY4          IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_PP_KEY5          IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_PP_NR_OF_ROWS    IN     NUMBER,                      
 A_IP               IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_IP_VERSION       IN OUT UNAPIGEN.VC20_TABLE_TYPE,    
 A_IP_NR_OF_ROWS    IN     NUMBER,                      
 A_FIELDTYPE_TAB    IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_FIELDNAMES_TAB   IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_FIELDVALUES_TAB  IN     UNAPIGEN.VC40_TABLE_TYPE,    
 A_FIELDNR_OF_ROWS  IN     NUMBER,                      
 A_MODIFY_REASON    IN     VARCHAR2)                    
RETURN NUMBER IS




L_ROW                  INTEGER;
L_ERRM                 VARCHAR2(255);
L_EDIT_ALLOWED         CHAR(1);
L_VALID_CF             VARCHAR2(20);
L_CREATE_PG            VARCHAR2(40);
L_CREATE_IC            VARCHAR2(40);
L_PGNODE               NUMBER(9);

L_LC                   VARCHAR2(2);
L_LC_VERSION           VARCHAR2(20);
L_SS                   VARCHAR2(2);
L_LOG_HS               CHAR(1);
L_LOG_HS_DETAILS       CHAR(1);
L_ALLOW_MODIFY         CHAR(1);
L_ACTIVE               CHAR(1);
L_FIELDTYPE_TAB        UNAPIGEN.VC20_TABLE_TYPE;
L_FIELDNAMES_TAB       UNAPIGEN.VC20_TABLE_TYPE;
L_FIELDVALUES_TAB      UNAPIGEN.VC40_TABLE_TYPE;
L_FIELDNR_OF_ROWS      NUMBER;
L_SD_IN_FIELDS         BOOLEAN;
L_PT_IN_FIELDS         BOOLEAN;
L_PT_VERSION_IN_FIELDS BOOLEAN;

CURSOR L_PGNODE_CURSOR (A_SC VARCHAR2, A_PG VARCHAR2) IS
   SELECT MAX(PGNODE)
   FROM UTSCPG 
   WHERE SC = A_SC
   AND PG = A_PG;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_SD, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   A_PT_VERSION := UNAPIGEN.USEVERSION('pt', A_PT, A_PT_VERSION);
   A_ST_VERSION := UNAPIGEN.USEVERSION('st', A_ST, A_ST_VERSION);

    
    
    
    
    
    
    UPDATE UTSD
       SET NR_SC_CURRENT = NR_SC_CURRENT
     WHERE SD = A_SD;

   
   L_SD_IN_FIELDS := FALSE;
   L_PT_IN_FIELDS := FALSE;
   L_PT_VERSION_IN_FIELDS := FALSE;
   L_FIELDNR_OF_ROWS := A_FIELDNR_OF_ROWS;
   FOR L_ROW IN 1..A_FIELDNR_OF_ROWS LOOP
      L_FIELDTYPE_TAB(L_ROW) := A_FIELDTYPE_TAB(L_ROW);
      L_FIELDNAMES_TAB(L_ROW) := A_FIELDNAMES_TAB(L_ROW);
      L_FIELDVALUES_TAB(L_ROW) := A_FIELDVALUES_TAB(L_ROW);
      IF L_FIELDTYPE_TAB(L_ROW) = 'sd' AND L_FIELDNAMES_TAB(L_ROW) = 'sd' THEN
         L_SD_IN_FIELDS := TRUE;
      END IF;
      IF L_FIELDTYPE_TAB(L_ROW) = 'pt' AND L_FIELDNAMES_TAB(L_ROW) = 'pt' THEN
         L_PT_IN_FIELDS := TRUE;
      END IF;
      IF L_FIELDTYPE_TAB(L_ROW) = 'pt' AND L_FIELDNAMES_TAB(L_ROW) = 'pt_version' THEN
         L_PT_VERSION_IN_FIELDS := TRUE;
      END IF;
   END LOOP;
   IF NOT L_SD_IN_FIELDS THEN
      L_FIELDNR_OF_ROWS := L_FIELDNR_OF_ROWS + 1;
      L_FIELDTYPE_TAB(L_FIELDNR_OF_ROWS) := 'sd';
      L_FIELDNAMES_TAB(L_FIELDNR_OF_ROWS) := 'sd';
      L_FIELDVALUES_TAB(L_FIELDNR_OF_ROWS) := A_SD;
   END IF;
   IF NOT L_PT_IN_FIELDS THEN
      L_FIELDNR_OF_ROWS := L_FIELDNR_OF_ROWS + 1;
      L_FIELDTYPE_TAB(L_FIELDNR_OF_ROWS) := 'pt';
      L_FIELDNAMES_TAB(L_FIELDNR_OF_ROWS) := 'pt';
      L_FIELDVALUES_TAB(L_FIELDNR_OF_ROWS) := A_PT;
   END IF;
   IF NOT L_PT_VERSION_IN_FIELDS THEN
      L_FIELDNR_OF_ROWS := L_FIELDNR_OF_ROWS + 1;
      L_FIELDTYPE_TAB(L_FIELDNR_OF_ROWS) := 'pt';
      L_FIELDNAMES_TAB(L_FIELDNR_OF_ROWS) := 'pt_version';
      L_FIELDVALUES_TAB(L_FIELDNR_OF_ROWS) := A_PT_VERSION;
   END IF;
   
   
   L_FIELDNR_OF_ROWS := L_FIELDNR_OF_ROWS + 1;
   L_FIELDTYPE_TAB(L_FIELDNR_OF_ROWS) := 'csnode';
   L_FIELDNAMES_TAB(L_FIELDNR_OF_ROWS) := 'csnode';
   L_FIELDVALUES_TAB(L_FIELDNR_OF_ROWS) := A_CSNODE;
   L_FIELDNR_OF_ROWS := L_FIELDNR_OF_ROWS + 1;
   L_FIELDTYPE_TAB(L_FIELDNR_OF_ROWS) := 'tpnode';
   L_FIELDNAMES_TAB(L_FIELDNR_OF_ROWS) := 'tpnode';
   L_FIELDVALUES_TAB(L_FIELDNR_OF_ROWS) := A_TPNODE;
   L_FIELDNR_OF_ROWS := L_FIELDNR_OF_ROWS + 1;
   L_FIELDTYPE_TAB(L_FIELDNR_OF_ROWS) := 'ptcellstseq';
   L_FIELDNAMES_TAB(L_FIELDNR_OF_ROWS) := 'ptcellstseq';
   L_FIELDVALUES_TAB(L_FIELDNR_OF_ROWS) := A_SEQ;
   
   
   
   
   
   IF NVL(A_SC, ' ') = ' ' THEN
      L_RET_CODE := UNAPISD.GENERATESDSAMPLECODE(A_PT, A_PT_VERSION, A_REF_DATE, A_SD, A_CSNODE, A_TPNODE, A_SEQ, A_ST, A_ST_VERSION,
                                                 L_FIELDTYPE_TAB, L_FIELDNAMES_TAB, L_FIELDVALUES_TAB, L_FIELDNR_OF_ROWS,
                                                 A_SC, L_EDIT_ALLOWED, L_VALID_CF);

      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         L_ERRM := 'pt=' || A_PT || 
                   '#pt_version=' || A_PT_VERSION || 
                   '#sd='|| A_SD ||
                   '#st='|| A_ST || 
                   '#st_version=' || A_ST_VERSION || 
                   '#ref_date=' || A_REF_DATE || 
                   '#GenerateSdSampleCode#ErrorCode=' || TO_CHAR(L_RET_CODE);
         UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
         RAISE STPERROR;
      END IF;
   END IF;

   
   
   
   
   IF A_ADD_STPP = '1' THEN
      L_CREATE_PG := 'ON SAMPLE CREATION';
   ELSE
      L_CREATE_PG := 'NO';
   END IF;
   IF A_ADD_STIP = '1' THEN
      L_CREATE_IC := 'ON SAMPLE CREATION';
   ELSE
      L_CREATE_IC := 'NO';
   END IF;

   
   L_RET_CODE := UNAPISC.CREATESAMPLE2(A_ST, A_ST_VERSION, A_SC, A_REF_DATE, 0, 'DD', L_CREATE_IC,
                                       L_CREATE_PG,NVL(A_USERID,UNAPIGEN.P_USER),
                                       L_FIELDTYPE_TAB, L_FIELDNAMES_TAB, L_FIELDVALUES_TAB, L_FIELDNR_OF_ROWS,
                                       A_MODIFY_REASON);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      L_ERRM := 'st=' || A_ST ||
                '#st_version=' || A_ST_VERSION || 
                '#sc=' || A_SC ||
                '#ref_date=' || A_REF_DATE || 
                '#create_ic=' || L_CREATE_IC ||
                '#create_pg=' || L_CREATE_PG || 
                '#CreateSample#ErrorCode=' || TO_CHAR(L_RET_CODE);
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;
   
   
   
   
   
   FOR L_ROW IN 1..A_PP_NR_OF_ROWS LOOP
      L_RET_CODE := UNAPISC.ADDSCANALYSESDETAILS(A_SC, A_ST, A_ST_VERSION, A_PP(L_ROW), A_PP_VERSION(L_ROW),
         A_PP_KEY1(L_ROW), A_PP_KEY2(L_ROW), A_PP_KEY3(L_ROW),A_PP_KEY4(L_ROW), A_PP_KEY5(L_ROW), -1, NULL); 
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
         RAISE STPERROR;
      END IF;    
   END LOOP;


   
   
   
   
   FOR L_ROW IN 1..A_IP_NR_OF_ROWS LOOP
      L_RET_CODE := UNAPIIC.ADDSCINFODETAILS(A_ST, A_ST_VERSION, A_SC, A_IP(L_ROW), A_IP_VERSION(L_ROW),
                                                 0, NULL); 
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
         RAISE STPERROR;
      END IF;    
   END LOOP;

   
   
   
   INSERT INTO UTSDCELLSC (SD, CSNODE, TPNODE, SC, SEQ)
   SELECT A_SD, A_CSNODE , A_TPNODE ,A_SC, NVL(MAX(SEQ),0)+1
   FROM UTSDCELLSC
   WHERE SD = A_SD AND
         CSNODE = A_CSNODE AND
         TPNODE = A_TPNODE;
        























 
    L_EV_SEQ_NR := -1;
    L_EV_DETAILS := 'csnode=' || A_CSNODE ||'#tpnode=' || A_TPNODE ||'#sc=' || A_SC;
    L_EVENT_TP := 'SdCellSampleAdded';
    
    L_RESULT := UNAPIEV.INSERTEVENT('CreateSdSample', UNAPIGEN.P_EVMGR_NAME, 'sd', A_SD, L_LC, 
                         L_LC_VERSION, L_SS, L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);
    IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
        UNAPIGEN.P_TXN_ERROR := L_RESULT;
        RAISE STPERROR;
    END IF;

    
    UPDATE UTSD
       SET NR_SC_CURRENT = (SELECT COUNT(*) FROM UTSDCELLSC WHERE SD = A_SD)
     WHERE SD = A_SD;

    IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
    END IF;

    RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('CreateSdSample', SQLERRM);
   ELSIF L_ERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('CreateSdSample', L_ERRM);
   END IF;
   IF L_PGNODE_CURSOR%ISOPEN THEN
      CLOSE L_PGNODE_CURSOR;
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'CreateSdSample'));
END CREATESDSAMPLE;

FUNCTION GETSDSAMPLE                                      
(A_SD                  OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SC                  OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_ST                  OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_ST_VERSION          OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_DESCRIPTION         OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_ASSIGN_DATE         OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_ASSIGNED_BY         OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SHELF_LIFE_VAL      OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_SHELF_LIFE_UNIT     OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SAMPLING_DATE       OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_CREATION_DATE       OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_CREATED_BY          OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_EXEC_START_DATE     OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_EXEC_END_DATE       OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_PRIORITY            OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_LABEL_FORMAT        OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_DESCR_DOC           OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_DESCR_DOC_VERSION   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_RQ                  OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_DATE1               OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_DATE2               OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_DATE3               OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_DATE4               OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_DATE5               OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_ALLOW_ANY_PP        OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_SC_CLASS            OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_LOG_HS              OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LOG_HS_DETAILS      OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ALLOW_MODIFY        OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_AR                  OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ACTIVE              OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LC                  OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_LC_VERSION          OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SS                  OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_NR_OF_ROWS          IN OUT  NUMBER,                    
 A_WHERE_CLAUSE        IN      VARCHAR2,                  
 A_NEXT_ROWS           IN      NUMBER)                    
RETURN NUMBER IS

L_SC                VARCHAR2(20);
L_ST                VARCHAR2(20);
L_ST_VERSION        VARCHAR2(20);
L_DESCRIPTION       VARCHAR2(40);
L_ASSIGN_DATE       TIMESTAMP WITH TIME ZONE;
L_ASSIGNED_BY       VARCHAR2(20);
L_SHELF_LIFE_VAL    NUMBER(3);
L_SHELF_LIFE_UNIT   VARCHAR2(20);
L_SAMPLING_DATE     TIMESTAMP WITH TIME ZONE;
L_CREATION_DATE     TIMESTAMP WITH TIME ZONE;
L_CREATED_BY        VARCHAR2(20);
L_EXEC_START_DATE   TIMESTAMP WITH TIME ZONE;
L_EXEC_END_DATE     TIMESTAMP WITH TIME ZONE;
L_PRIORITY          NUMBER(3);
L_LABEL_FORMAT      VARCHAR2(20);
L_DESCR_DOC         VARCHAR2(40);
L_DESCR_DOC_VERSION VARCHAR2(20);
L_RQ                VARCHAR2(20);
L_SD                VARCHAR2(20);
L_DATE1             TIMESTAMP WITH TIME ZONE;
L_DATE2             TIMESTAMP WITH TIME ZONE;
L_DATE3             TIMESTAMP WITH TIME ZONE;
L_DATE4             TIMESTAMP WITH TIME ZONE;
L_DATE5             TIMESTAMP WITH TIME ZONE;
L_ALLOW_ANY_PP      CHAR(1);
L_SC_CLASS          VARCHAR2(2);
L_LOG_HS            CHAR(1);
L_LOG_HS_DETAILS    CHAR(1);
L_ALLOW_MODIFY      CHAR(1);
L_AR                CHAR(1);
L_ACTIVE            CHAR(1);
L_LC                VARCHAR2(2);
L_LC_VERSION        VARCHAR2(20);
L_SS                VARCHAR2(2);
L_FROM_CLAUSE       VARCHAR2(255);

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_SELECTSDSC_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_SELECTSDSC_CURSOR);
         P_SELECTSDSC_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_SELECTSDSC_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN

      L_SQL_STRING := 'SELECT sc.sc, sc.st, sc.st_version, sc.description, sc.shelf_life_val, ' ||
                      'sc.shelf_life_unit, sc.sampling_date, sc.creation_date, ' ||
                      'sc.created_by, sc.exec_start_date, sc.exec_end_date, ' ||
                      'sc.priority, sc.label_format, sc.descr_doc, sc.descr_doc_version, sc.rq, '||
                      'a.sd, ' ||
                      'sc.date1, sc.date2, sc.date3, sc.date4, sc.date5, ' ||
                      'sc.allow_any_pp, sc.sc_class, sc.log_hs, sc.log_hs_details, ' ||
                      'sc.allow_modify, sc.active, sc.lc, sc.lc_version, sc.ss, sc.ar, '||
                      'a.assign_date, a.assigned_by, a.seq ';


      L_FROM_CLAUSE := 'FROM dd' || UNAPIGEN.P_DD || '.uvsc sc, dd' || UNAPIGEN.P_DD ||'.uvsdsc a ';

      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
          RETURN(UNAPIGEN.DBERR_WHERECLAUSE);
      ELSIF
        UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
        L_WHERE_CLAUSE := 'WHERE a.sd = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                          ''' AND a.sc = sc.sc ORDER BY a.seq';
      ELSE
         L_WHERE_CLAUSE := 'WHERE a.sc = sc.sc AND '||SUBSTR(LTRIM(A_WHERE_CLAUSE),6);
      END IF;

      L_SQL_STRING := L_SQL_STRING || L_FROM_CLAUSE || L_WHERE_CLAUSE;

      IF P_SELECTSDSC_CURSOR IS NULL THEN
         P_SELECTSDSC_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;

      DBMS_SQL.PARSE(P_SELECTSDSC_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      DBMS_SQL.DEFINE_COLUMN(P_SELECTSDSC_CURSOR,       1,  L_SC,               20);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTSDSC_CURSOR,       2,  L_ST,               20);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTSDSC_CURSOR,       3,  L_ST_VERSION,       20);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTSDSC_CURSOR,       4,  L_DESCRIPTION,      40);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTSDSC_CURSOR,       5,  L_SHELF_LIFE_VAL);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTSDSC_CURSOR,       6,  L_SHELF_LIFE_UNIT,  20);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTSDSC_CURSOR,       7,  L_SAMPLING_DATE);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTSDSC_CURSOR,       8,  L_CREATION_DATE);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTSDSC_CURSOR,       9,  L_CREATED_BY,       20);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTSDSC_CURSOR,       10, L_EXEC_START_DATE);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTSDSC_CURSOR,       11, L_EXEC_END_DATE);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTSDSC_CURSOR,       12, L_PRIORITY);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTSDSC_CURSOR,       13, L_LABEL_FORMAT,     20);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTSDSC_CURSOR,       14, L_DESCR_DOC,        40);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTSDSC_CURSOR,       15, L_DESCR_DOC_VERSION,20);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTSDSC_CURSOR,       16, L_RQ,               20);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTSDSC_CURSOR,       17, L_SD,               20);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTSDSC_CURSOR,       18, L_DATE1);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTSDSC_CURSOR,       19, L_DATE2);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTSDSC_CURSOR,       20, L_DATE3);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTSDSC_CURSOR,       21, L_DATE4);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTSDSC_CURSOR,       22, L_DATE5);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTSDSC_CURSOR,  23, L_ALLOW_ANY_PP,     1);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTSDSC_CURSOR,       24, L_SC_CLASS,         2);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTSDSC_CURSOR,  25, L_LOG_HS,           1);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTSDSC_CURSOR,  26, L_LOG_HS_DETAILS,   1);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTSDSC_CURSOR,  27, L_ALLOW_MODIFY,     1);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTSDSC_CURSOR,  28, L_ACTIVE,           1);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTSDSC_CURSOR,       29, L_LC,               2);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTSDSC_CURSOR,       30, L_LC_VERSION,       20);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTSDSC_CURSOR,       31, L_SS,               2);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTSDSC_CURSOR,  32, L_AR,               1);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTSDSC_CURSOR,       33, L_ASSIGN_DATE);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTSDSC_CURSOR,       34, L_ASSIGNED_BY,      20);
      L_RESULT := DBMS_SQL.EXECUTE(P_SELECTSDSC_CURSOR);

   END IF;

   L_RESULT := DBMS_SQL.FETCH_ROWS(P_SELECTSDSC_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_SELECTSDSC_CURSOR,         1 ,  L_SC);
      DBMS_SQL.COLUMN_VALUE(P_SELECTSDSC_CURSOR,         2 ,  L_ST);
      DBMS_SQL.COLUMN_VALUE(P_SELECTSDSC_CURSOR,         3 ,  L_ST_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_SELECTSDSC_CURSOR,         4 ,  L_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE(P_SELECTSDSC_CURSOR,         5 ,  L_SHELF_LIFE_VAL);
      DBMS_SQL.COLUMN_VALUE(P_SELECTSDSC_CURSOR,         6 ,  L_SHELF_LIFE_UNIT);
      DBMS_SQL.COLUMN_VALUE(P_SELECTSDSC_CURSOR,         7 ,  L_SAMPLING_DATE);
      DBMS_SQL.COLUMN_VALUE(P_SELECTSDSC_CURSOR,         8 ,  L_CREATION_DATE);
      DBMS_SQL.COLUMN_VALUE(P_SELECTSDSC_CURSOR,         9 ,  L_CREATED_BY);
      DBMS_SQL.COLUMN_VALUE(P_SELECTSDSC_CURSOR,         10,  L_EXEC_START_DATE);
      DBMS_SQL.COLUMN_VALUE(P_SELECTSDSC_CURSOR,         11,  L_EXEC_END_DATE);
      DBMS_SQL.COLUMN_VALUE(P_SELECTSDSC_CURSOR,         12,  L_PRIORITY);
      DBMS_SQL.COLUMN_VALUE(P_SELECTSDSC_CURSOR,         13,  L_LABEL_FORMAT);
      DBMS_SQL.COLUMN_VALUE(P_SELECTSDSC_CURSOR,         14,  L_DESCR_DOC);
      DBMS_SQL.COLUMN_VALUE(P_SELECTSDSC_CURSOR,         15,  L_DESCR_DOC_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_SELECTSDSC_CURSOR,         16,  L_RQ);
      DBMS_SQL.COLUMN_VALUE(P_SELECTSDSC_CURSOR,         17,  L_SD);
      DBMS_SQL.COLUMN_VALUE(P_SELECTSDSC_CURSOR,         18,  L_DATE1);
      DBMS_SQL.COLUMN_VALUE(P_SELECTSDSC_CURSOR,         19,  L_DATE2);
      DBMS_SQL.COLUMN_VALUE(P_SELECTSDSC_CURSOR,         20,  L_DATE3);
      DBMS_SQL.COLUMN_VALUE(P_SELECTSDSC_CURSOR,         21,  L_DATE4);
      DBMS_SQL.COLUMN_VALUE(P_SELECTSDSC_CURSOR,         22,  L_DATE5);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTSDSC_CURSOR,    23,  L_ALLOW_ANY_PP);
      DBMS_SQL.COLUMN_VALUE(P_SELECTSDSC_CURSOR,         24,  L_SC_CLASS);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTSDSC_CURSOR,    25,  L_LOG_HS);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTSDSC_CURSOR,    26,  L_LOG_HS_DETAILS);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTSDSC_CURSOR,    27,  L_ALLOW_MODIFY);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTSDSC_CURSOR,    28,  L_ACTIVE);
      DBMS_SQL.COLUMN_VALUE(P_SELECTSDSC_CURSOR,         29,  L_LC);
      DBMS_SQL.COLUMN_VALUE(P_SELECTSDSC_CURSOR,         30,  L_LC_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_SELECTSDSC_CURSOR,         31,  L_SS);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTSDSC_CURSOR,    32,  L_AR);
      DBMS_SQL.COLUMN_VALUE(P_SELECTSDSC_CURSOR,         33,  L_ASSIGN_DATE);
      DBMS_SQL.COLUMN_VALUE(P_SELECTSDSC_CURSOR,         34,  L_ASSIGNED_BY);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_SC(L_FETCHED_ROWS)                  :=   L_SC;
      A_ST(L_FETCHED_ROWS)                  :=   L_ST;
      A_ST_VERSION(L_FETCHED_ROWS)          :=   L_ST_VERSION;
      A_DESCRIPTION(L_FETCHED_ROWS)         :=   L_DESCRIPTION;
      A_SHELF_LIFE_VAL(L_FETCHED_ROWS)      :=   L_SHELF_LIFE_VAL;
      A_SHELF_LIFE_UNIT(L_FETCHED_ROWS)     :=   L_SHELF_LIFE_UNIT;
      A_SAMPLING_DATE(L_FETCHED_ROWS)       :=   L_SAMPLING_DATE;
      A_CREATION_DATE(L_FETCHED_ROWS)       :=   L_CREATION_DATE;
      A_CREATED_BY(L_FETCHED_ROWS)          :=   L_CREATED_BY;
      A_EXEC_START_DATE(L_FETCHED_ROWS)     :=   L_EXEC_START_DATE;
      A_EXEC_END_DATE(L_FETCHED_ROWS)       :=   L_EXEC_END_DATE;
      A_PRIORITY(L_FETCHED_ROWS)            :=   L_PRIORITY;
      A_LABEL_FORMAT(L_FETCHED_ROWS)        :=   L_LABEL_FORMAT;
      A_DESCR_DOC(L_FETCHED_ROWS)           :=   L_DESCR_DOC;
      A_DESCR_DOC_VERSION(L_FETCHED_ROWS)   :=   L_DESCR_DOC_VERSION;
      A_RQ(L_FETCHED_ROWS)                  :=   L_RQ;
      A_SD(L_FETCHED_ROWS)                  :=   L_SD;
      A_DATE1(L_FETCHED_ROWS)               :=   L_DATE1;
      A_DATE2(L_FETCHED_ROWS)               :=   L_DATE2;
      A_DATE3(L_FETCHED_ROWS)               :=   L_DATE3;
      A_DATE4(L_FETCHED_ROWS)               :=   L_DATE4;
      A_DATE5(L_FETCHED_ROWS)               :=   L_DATE5;
      A_ALLOW_ANY_PP(L_FETCHED_ROWS)        :=   L_ALLOW_ANY_PP;
      A_SC_CLASS(L_FETCHED_ROWS)            :=   L_SC_CLASS;
      A_LOG_HS(L_FETCHED_ROWS)              :=   L_LOG_HS;
      A_LOG_HS_DETAILS(L_FETCHED_ROWS)      :=   L_LOG_HS_DETAILS;
      A_ALLOW_MODIFY(L_FETCHED_ROWS)        :=   L_ALLOW_MODIFY;
      A_ACTIVE(L_FETCHED_ROWS)              :=   L_ACTIVE;
      A_LC(L_FETCHED_ROWS)                  :=   L_LC;
      A_LC_VERSION(L_FETCHED_ROWS)          :=   L_LC_VERSION;
      A_SS(L_FETCHED_ROWS)                  :=   L_SS;
      A_AR(L_FETCHED_ROWS)                  :=   L_AR;
      A_ASSIGN_DATE(L_FETCHED_ROWS)         :=   L_ASSIGN_DATE;
      A_ASSIGNED_BY(L_FETCHED_ROWS)         :=   L_ASSIGNED_BY;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_SELECTSDSC_CURSOR);
      END IF;

   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_SELECTSDSC_CURSOR);
       P_SELECTSDSC_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_SELECTSDSC_CURSOR);
      P_SELECTSDSC_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;
   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      L_SQLERRM := SQLERRM;
   ELSE
      
      NULL;      
   END IF;
   IF SQLCODE = -918 THEN
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
             'GetSdSample', 'use a. prefix for uvsdsc columns and sc.prefix for uvsc columns');
      UNAPIGEN.U4COMMIT;
   END IF;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
          'GetSdSample', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   IF DBMS_SQL.IS_OPEN(P_SELECTSDSC_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(P_SELECTSDSC_CURSOR);
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETSDSAMPLE;

FUNCTION SAVESDSAMPLE                                   
(A_SD               IN     VARCHAR2,                    
 A_SC               IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_ASSIGN_DATE      IN     UNAPIGEN.DATE_TABLE_TYPE,    
 A_ASSIGNED_BY      IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_NR_OF_ROWS       IN     NUMBER,                      
 A_MODIFY_REASON    IN     VARCHAR2)                    
RETURN NUMBER IS
L_LC                      VARCHAR2(2);
L_LC_VERSION              VARCHAR2(20);
L_SS                      VARCHAR2(2);
L_LOG_HS                  CHAR(1);
L_LOG_HS_DETAILS          CHAR(1);
L_ALLOW_MODIFY            CHAR(1);
L_ACTIVE                  CHAR(1);
L_SEQ_NO                  NUMBER;
L_CURRENT_TIMESTAMP                 VARCHAR2(30);
L_NEW_MASTERSD            VARCHAR2(20);
L_ROW                     INTEGER;
L_FOUND                   BOOLEAN;
L_HS_SEQ                  INTEGER;
L_PT_VERSION              VARCHAR2(20);
L_SC_LOG_HS               CHAR(1);
L_SC_LOG_HS_DETAILS       CHAR(1);






























































  
BEGIN
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   L_SQLERRM := NULL;
   IF NVL(A_SD, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIAUT.GETSDAUTHORISATION(A_SD, L_PT_VERSION, L_LC, L_LC_VERSION, L_SS,
                                             L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS, L_LOG_HS_DETAILS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTSD
   SET ALLOW_MODIFY = '#'
   WHERE SD = A_SD;
   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR ;
   END IF;

   
   
   
   DELETE UTSDSC
   WHERE SD = A_SD;
   
   
   
   
   L_EVENT_TP := 'SdSamplesAdded';
   L_EV_SEQ_NR := -1;
   L_EV_DETAILS := 'pt_version=' || L_PT_VERSION;
   L_RESULT := UNAPIEV.INSERTEVENT('SaveSdSample', UNAPIGEN.P_EVMGR_NAME, 'sd', A_SD, L_LC, 
                                   L_LC_VERSION, L_SS, L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF L_LOG_HS = '1' THEN
      INSERT INTO UTSDHS (SD, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES (A_SD, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
              'study "'||A_SD||'" samples are updated.', 
              CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   
   
   
   L_CURRENT_TIMESTAMP := CURRENT_TIMESTAMP;
   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      IF NVL(A_SC(L_SEQ_NO), ' ') = ' ' THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
      END IF;
      
      INSERT INTO UTSDSC (SD, SC, SEQ, ASSIGN_DATE, ASSIGN_DATE_TZ, ASSIGNED_BY)
      VALUES (A_SD, A_SC(L_SEQ_NO), L_SEQ_NO, A_ASSIGN_DATE(L_SEQ_NO), A_ASSIGN_DATE(L_SEQ_NO), A_ASSIGNED_BY(L_SEQ_NO));
   END LOOP;


   
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveSdSample', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveSdSample'));
END SAVESDSAMPLE;

FUNCTION SAVE1SDSAMPLE                                  
(A_SD               IN     VARCHAR2,                    
 A_SC               IN     VARCHAR2,                    
 A_MODIFY_REASON    IN     VARCHAR2)                    
RETURN NUMBER IS

L_LC                VARCHAR2(2);
L_LC_VERSION        VARCHAR2(20);
L_SS                VARCHAR2(2);
L_LOG_HS            CHAR(1);
L_LOG_HS_DETAILS    CHAR(1);
L_ALLOW_MODIFY      CHAR(1);
L_ACTIVE            CHAR(1);
L_SEQ_NO            NUMBER;
L_HS_DETAILS_SEQ_NR INTEGER;
L_PT_VERSION        VARCHAR2(20);

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_SD, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_SC, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIAUT.GETSDAUTHORISATION(A_SD, L_PT_VERSION, L_LC, L_LC_VERSION, L_SS,
                                             L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS, L_LOG_HS_DETAILS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTSD
   SET ALLOW_MODIFY = '#'
   WHERE SD = A_SD;
   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR ;
   END IF;

   
   
   
   DELETE UTSDSC
   WHERE SD = A_SD
   AND SC = A_SC;
   
   
   
   
   INSERT INTO UTSDSC (SD, SC, SEQ)
   SELECT  A_SD, A_SC, NVL(MAX(SEQ),0)+1
   FROM UTSDSC
   WHERE SD = A_SD;

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   
   
   
   L_EVENT_TP := 'Sd1SampleAdded';
   L_EV_SEQ_NR := -1;
   L_EV_DETAILS := 'sc=' || A_SC ||
                   '#pt_version=' || L_PT_VERSION;
   L_RESULT := UNAPIEV.INSERTEVENT('Save1SdSample', UNAPIGEN.P_EVMGR_NAME,
                                   'sd', A_SD, L_LC, L_LC_VERSION, L_SS, L_EVENT_TP, 
                                   L_EV_DETAILS,  L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF L_LOG_HS = '1' THEN
      INSERT INTO UTSDHS (SD, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES (A_SD, UNAPIGEN.P_USER, UNAPIGEN.SQLUSERDESCRIPTION(UNAPIGEN.P_USER), 
             L_EVENT_TP, 'request "'||A_SD||'" sample  "'||A_SC||'" is added.', 
             CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   L_HS_DETAILS_SEQ_NR := 0;
   IF L_LOG_HS_DETAILS = '1' THEN
      L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
      INSERT INTO UTSDHSDETAILS (SD, TR_SEQ, EV_SEQ, SEQ, DETAILS)
      VALUES (A_SD, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR, 
              'request "'||A_SD||'" sample  "'||A_SC||'" is added.');
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE <> 1 THEN
         UNAPIGEN.LOGERROR('Save1SdSample', SQLERRM);
      END IF;
      RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'Save1SdSample'));
END SAVE1SDSAMPLE;

FUNCTION REMOVESDSAMPLE                                 
(A_SD               IN     VARCHAR2,                    
 A_SC               IN     VARCHAR2,                    
 A_MODIFY_REASON    IN     VARCHAR2)                    
RETURN NUMBER IS

L_LC                VARCHAR2(2);
L_LC_VERSION        VARCHAR2(20);
L_SS                VARCHAR2(2);
L_LOG_HS            CHAR(1);
L_LOG_HS_DETAILS    CHAR(1);
L_ALLOW_MODIFY      CHAR(1);
L_ACTIVE            CHAR(1);
L_SEQ_NO            NUMBER;
L_HS_DETAILS_SEQ_NR INTEGER;
L_PT_VERSION        VARCHAR2(20);
   
BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_SD, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_SC, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIAUT.GETSDAUTHORISATION(A_SD, L_PT_VERSION, L_LC, L_LC_VERSION, L_SS,
                                             L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS, L_LOG_HS_DETAILS);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTSD
   SET ALLOW_MODIFY = '#'
   WHERE SD = A_SD;
   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR ;
   END IF;

   
   
   
   DELETE UTSDSC
   WHERE SD = A_SD
   AND SC = A_SC;

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;
      
   
   
   
   L_EVENT_TP := 'SdSampleRemoved';
   L_EV_SEQ_NR := -1;
   L_EV_DETAILS := 'sc=' || A_SC ||
                   '#pt_version=' || L_PT_VERSION;
   L_RESULT := UNAPIEV.INSERTEVENT('RemoveSdSample', UNAPIGEN.P_EVMGR_NAME,
                                   'sd', A_SD, L_LC, L_LC_VERSION, L_SS, L_EVENT_TP, 
                                   L_EV_DETAILS,  L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF L_LOG_HS = '1' THEN
      INSERT INTO UTSDHS (SD, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES (A_SD, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
              'request "'||A_SD||'" sample  "'||A_SC||'" is removed.', 
              CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   L_HS_DETAILS_SEQ_NR := 0;
   IF L_LOG_HS_DETAILS = '1' THEN
      L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
      INSERT INTO UTSDHSDETAILS (SD, TR_SEQ, EV_SEQ, SEQ, DETAILS)
      VALUES (A_SD, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR,
              'request "'||A_SD||'" sample  "'||A_SC||'" is removed.');
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE <> 1 THEN
         UNAPIGEN.LOGERROR('RemoveSdSample', SQLERRM);
      END IF;
      RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'RemoveSdSample'));
END REMOVESDSAMPLE;

FUNCTION INITANDSAVESDCELLSCATTRIBUTES                  
(A_SD               IN     VARCHAR2,                    
 A_CSNODE           IN     NUMBER,                      
 A_TPNODE           IN     NUMBER,                      
 A_SEQ              IN     NUMBER,                      
 A_SC               IN     VARCHAR2)                    
RETURN NUMBER IS

CURSOR L_ST_CURSOR(C_SC VARCHAR2) IS
   SELECT ST, ST_VERSION
   FROM UTSC
   WHERE SC = C_SC;
L_ST            VARCHAR2(20);
L_ST_VERSION    VARCHAR2(20);
L_INHERIT_AU        CHAR(1);


CURSOR L_PT_CURSOR(C_SD VARCHAR2) IS
   SELECT PT, PT_VERSION
   FROM UTSD
   WHERE SD = C_SD;

CURSOR C_PTROW_CURSOR(C_PT VARCHAR2, C_PT_VERSION VARCHAR2) IS
SELECT A.PTROW
FROM UTPTCS A
WHERE A.PT = C_PT
AND A.VERSION = C_PT_VERSION
AND A.CS IN 
    (SELECT B.CS FROM UTSDCS B 
        WHERE B.CSNODE = A_CSNODE
            AND B.SD = A_SD);
            
CURSOR C_PTCOLUMN_CURSOR(C_PT VARCHAR2, C_PT_VERSION VARCHAR2) IS
SELECT A.PTCOLUMN
FROM UTPTTP A
WHERE A.PT = C_PT
AND A.VERSION = C_PT_VERSION
AND (A.TP, A.TP_UNIT) IN 
    (SELECT B.TP, B.TP_UNIT FROM UTSDTP B 
        WHERE B.TPNODE = A_TPNODE
            AND B.SD = A_SD);


L_PT            VARCHAR2(20);
L_PT_VERSION    VARCHAR2(20);
L_PTROW         NUMBER;
L_PTCOLUMN      NUMBER;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
   
      OPEN L_ST_CURSOR(A_SC);
      FETCH L_ST_CURSOR
      INTO L_ST, L_ST_VERSION;
      CLOSE L_ST_CURSOR;   

      OPEN L_PT_CURSOR(A_SD);
      FETCH L_PT_CURSOR
      INTO L_PT, L_PT_VERSION;
      CLOSE L_PT_CURSOR;   

      OPEN C_PTROW_CURSOR(L_PT, L_PT_VERSION);
      FETCH C_PTROW_CURSOR
      INTO L_PTROW;
      CLOSE C_PTROW_CURSOR;   

      OPEN C_PTCOLUMN_CURSOR(L_PT, L_PT_VERSION);
      FETCH C_PTCOLUMN_CURSOR
      INTO L_PTCOLUMN;
      CLOSE C_PTCOLUMN_CURSOR;   

   
   
   
   
   INSERT INTO UTSCAU(SC, AU, AU_VERSION, AUSEQ, VALUE)
   SELECT A_SC, A.AU, '' D_VERSION, A.AUSEQ, A.VALUE
   FROM UTSTAU A, UTST B, UTPTCELLST C, UTAU D
   WHERE A.ST = L_ST
     AND A.VERSION = L_ST_VERSION
     AND A.ST = B.ST
     AND A.VERSION = B.VERSION
     AND A.AU = D.AU
     AND UNAPIGEN.VALIDATEVERSION('au', A.AU, A.AU_VERSION) = D.VERSION
     AND C.PT = L_PT
     AND C.VERSION = L_PT_VERSION     
     AND C.ST = B.ST
     AND UNAPIGEN.VALIDATEVERSION('st', C.ST, C.ST_VERSION) = B.VERSION  
     AND C.PTROW = L_PTROW
     AND C.PTCOLUMN = L_PTCOLUMN
     AND C.SEQ = A_SEQ
     AND DECODE(D.INHERIT_AU,'0',DECODE(C.INHERIT_AU,'2',B.INHERIT_AU,C.INHERIT_AU),D.INHERIT_AU) = '1'
     AND A.AU NOT IN (SELECT DISTINCT J.AU
                      FROM UTPTCELLSTAU J, UTPTCELLST K, UTST L, UTAU M
                      WHERE J.ST = L.ST
                        AND UNAPIGEN.VALIDATEVERSION('st', J.ST, J.ST_VERSION) = L.VERSION
                        AND J.PT = L_PT
                        AND J.VERSION = L_PT_VERSION
                        AND J.ST = L_ST
                        AND J.PTROW = L_PTROW
                        AND J.PTCOLUMN = L_PTCOLUMN
                        AND J.SEQ = A_SEQ
                        AND UNAPIGEN.VALIDATEVERSION('st', J.ST, J.ST_VERSION) = L_ST_VERSION
                        AND J.ST = K.ST
                        AND UNAPIGEN.VALIDATEVERSION('st', J.ST, J.ST_VERSION) = UNAPIGEN.VALIDATEVERSION('st', K.ST, K.ST_VERSION)                        
                        AND J.PT = K.PT
                        AND J.VERSION = K.VERSION
                        AND J.PTROW = K.PTROW
                        AND J.PTCOLUMN = K.PTCOLUMN
                        AND J.SEQ = K.SEQ
                        AND DECODE(M.INHERIT_AU,'0',DECODE(K.INHERIT_AU,'2',L.INHERIT_AU,K.INHERIT_AU),M.INHERIT_AU) = '1'
                        AND J.AU = M.AU
                        AND M.VERSION = UNAPIGEN.VALIDATEVERSION('au', J.AU, J.AU_VERSION))
   
   
   
   
   UNION
   SELECT A_SC, V.AU, '' Y_VERSION, V.AUSEQ+500, V.VALUE
   FROM UTPTCELLSTAU V, UTPTCELLST W, UTST X, UTAU Y
   WHERE V.ST = X.ST
     AND UNAPIGEN.VALIDATEVERSION('st', V.ST, V.ST_VERSION) = X.VERSION
     AND V.PT = L_PT
     AND V.VERSION = L_PT_VERSION     
     AND V.PTROW = L_PTROW
     AND V.PTCOLUMN = L_PTCOLUMN
     AND V.SEQ = A_SEQ
     AND V.ST = L_ST
     AND UNAPIGEN.VALIDATEVERSION('st', V.ST, V.ST_VERSION) = L_ST_VERSION
     AND V.PT = W.PT
     AND V.VERSION = W.VERSION     
     AND V.PTROW = W.PTROW
     AND V.PTCOLUMN = W.PTCOLUMN
     AND V.SEQ = W.SEQ
     AND V.ST = W.ST
     AND UNAPIGEN.VALIDATEVERSION('st', V.ST, V.ST_VERSION) = UNAPIGEN.VALIDATEVERSION('st', W.ST, W.ST_VERSION)     
     AND DECODE(Y.INHERIT_AU,'0',DECODE(W.INHERIT_AU,'2',X.INHERIT_AU,W.INHERIT_AU),Y.INHERIT_AU) = '1' 
     AND V.AU = Y.AU
     AND UNAPIGEN.VALIDATEVERSION('au', V.AU, V.AU_VERSION) = Y.VERSION;

   
   
   
   
   IF SQL%ROWCOUNT = 0 THEN
      SELECT INHERIT_AU
      INTO L_INHERIT_AU
      FROM UTST
      WHERE ST = L_ST
      AND VERSION = L_ST_VERSION ;

      IF NVL(L_INHERIT_AU, '0') = '1' THEN
         INSERT INTO UTSCAU
         (SC, AU, AU_VERSION, AUSEQ, VALUE)
         SELECT A_SC, A.AU, '' B_VERSION, A.AUSEQ, A.VALUE
         FROM UTAU B, UTSTAU A
         WHERE A.ST = L_ST
         AND A.VERSION = L_ST_VERSION
         AND A.AU = B.AU
         AND UNAPIGEN.USEVERSION('au', A.AU, A.AU_VERSION) = B.VERSION;
      ELSE
         INSERT INTO UTSCAU
         (SC, AU, AU_VERSION, AUSEQ, VALUE)
         SELECT A_SC, A.AU, '' B_VERSION, A.AUSEQ, A.VALUE
         FROM UTAU B, UTSTAU A
         WHERE A.ST = L_ST
         AND A.VERSION = L_ST_VERSION
         AND A.AU = B.AU
         AND UNAPIGEN.USEVERSION('au', A.AU, A.AU_VERSION) = B.VERSION
         AND B.INHERIT_AU = '1';
      END IF;
   END IF;
   
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('InitAndSaveSdCellScAttributes', SQLERRM);
   END IF;
   IF L_ST_CURSOR%ISOPEN THEN
      CLOSE L_ST_CURSOR;
   END IF;
   IF L_PT_CURSOR%ISOPEN THEN
      CLOSE L_PT_CURSOR;
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'InitAndSaveSdCellScAttributes'));
END INITANDSAVESDCELLSCATTRIBUTES; 

END UNAPISD2;
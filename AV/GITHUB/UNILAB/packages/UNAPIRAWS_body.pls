PACKAGE BODY unapiraws AS






STPERROR      EXCEPTION;
L_RET_CODE    INTEGER;
L_SQLERRM     VARCHAR2(255);
L_SQL_STRING  VARCHAR2(2000);
L_DYN_CURSOR  INTEGER;
L_SEP         CHAR(1);

CURSOR L_ALLWSGK_TABLES_CURSOR IS
   SELECT DISTINCT TABLE_NAME,
   DECODE(SUBSTR(TABLE_NAME,1,6),'UTWSGK',1,3) TABLE_ORDER1,
   LENGTH(TABLE_NAME) TABLE_ORDER2
   FROM USER_TAB_COLUMNS
   WHERE COLUMN_NAME = 'WS'
   AND TABLE_NAME LIKE 'UTWSGK%'
   ORDER BY 2 ASC, 3 ASC, 1 ASC;

CURSOR L_ALLWSCUSTOM_TABLES_CURSOR IS
   SELECT DISTINCT TABLE_NAME,
   LENGTH(TABLE_NAME) TABLE_ORDER1
   FROM USER_TAB_COLUMNS
   WHERE COLUMN_NAME = 'WS'
   AND TABLE_NAME LIKE 'AT%'
   ORDER BY 2 ASC, 1 ASC;


FUNCTION GETVERSION
   RETURN VARCHAR2
IS
BEGIN
   RETURN('06.07.00.00_00.13');
EXCEPTION
   WHEN OTHERS THEN
   RETURN (NULL);
END GETVERSION;



PROCEDURE LOGERROR
(A_API IN VARCHAR2, A_ERROR_MSG IN VARCHAR2)
IS
BEGIN
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
           A_API, A_ERROR_MSG);
END LOGERROR;




FUNCTION REMOVEWSFROMARCHIVE
(A_WS IN VARCHAR2)
RETURN NUMBER IS
BEGIN
   

   DELETE FROM UAUTWS
   WHERE WS = A_WS;

   DELETE FROM UAUTWSAU
   WHERE WS = A_WS;

   DELETE FROM UAUTWSHS
   WHERE WS = A_WS;

   DELETE FROM UAUTWSHSDETAILS
   WHERE WS = A_WS;

   DELETE FROM UAUTWSII
   WHERE WS = A_WS;

   DELETE FROM UAUTWSSC
   WHERE WS = A_WS;

   DELETE FROM UAUTWSME
   WHERE WS = A_WS;

   
   FOR L_TABLE_REC IN L_ALLWSGK_TABLES_CURSOR LOOP
      L_DYN_CURSOR := DBMS_SQL.OPEN_CURSOR;
      L_SQL_STRING := 'DELETE FROM '||L_TABLE_REC.TABLE_NAME||'@uniarch '||
                      'WHERE ws=:a_ws';
      BEGIN
         DBMS_SQL.PARSE(L_DYN_CURSOR, L_SQL_STRING, DBMS_SQL.V7);
         DBMS_SQL.BIND_VARIABLE(L_DYN_CURSOR, ':a_ws', A_WS);
         L_RET_CODE := DBMS_SQL.EXECUTE(L_DYN_CURSOR);
      EXCEPTION
      WHEN OTHERS THEN
         IF SQLCODE <> -942 THEN
            L_SQLERRM := SUBSTR(SQLERRM,1,200);
            LOGERROR ('RemoveWsFromArchive',L_SQLERRM);
            L_SQLERRM := 'Error while archiving table '||L_TABLE_REC.TABLE_NAME;
            LOGERROR ('RemoveWsFromArchive',L_SQLERRM);
         ELSE
            L_SQLERRM := 'Table '||L_TABLE_REC.TABLE_NAME||' does not exist';
            LOGERROR ('RemoveWsFromArchive',L_SQLERRM);
         END IF;
      END;
      DBMS_SQL.CLOSE_CURSOR(L_DYN_CURSOR);
   END LOOP;
   
   FOR L_TABLE_REC IN L_ALLWSCUSTOM_TABLES_CURSOR LOOP
      L_SQL_STRING := 'DELETE FROM '||L_TABLE_REC.TABLE_NAME||'@uniarch '||
                      'WHERE ws=:a_ws';
      BEGIN
         DBMS_SQL.PARSE(L_DYN_CURSOR, L_SQL_STRING, DBMS_SQL.V7);
         DBMS_SQL.BIND_VARIABLE(L_DYN_CURSOR, ':a_ws', A_WS);
         L_RET_CODE := DBMS_SQL.EXECUTE(L_DYN_CURSOR);
      EXCEPTION
      WHEN OTHERS THEN
         IF SQLCODE <> -942 THEN
            L_SQLERRM := SUBSTR(SQLERRM,1,200);
            LOGERROR ('RemoveWsFromArchive',L_SQLERRM);
            L_SQLERRM := 'Error while archiving table '||L_TABLE_REC.TABLE_NAME;
            LOGERROR ('RemoveWsFromArchive',L_SQLERRM);
         ELSE
            L_SQLERRM := 'Table '||L_TABLE_REC.TABLE_NAME||' does not exist';
            LOGERROR ('RemoveWsFromArchive',L_SQLERRM);
         END IF;
      END;
      DBMS_SQL.CLOSE_CURSOR(L_DYN_CURSOR);
   END LOOP;

   RETURN(UNAPIGEN.DBERR_SUCCESS);
END REMOVEWSFROMARCHIVE;




FUNCTION COPYWSTOARCHDB(A_WS IN VARCHAR2, A_IGNORE_DUP_VAL_ON_INDEX BOOLEAN) RETURN NUMBER IS
L_STEP VARCHAR2(255) ;
BEGIN
   
   EXECUTE IMMEDIATE
   'INSERT INTO uautws' ||
   UNAPIRA.LISTALLCOLUMNS('utws', 'BRACKETS', '1') ||
   ' SELECT '||   UNAPIRA.LISTALLCOLUMNS('utws', 'NO_BRACKETS', '1') ||
   ' FROM utws' ||
   ' WHERE ws = '''||A_WS||'''';
   INSERT INTO UAUTWSAU
      (WS, AU, AU_VERSION, AUSEQ, VALUE)
   SELECT        WS, AU, AU_VERSION, AUSEQ, VALUE
   FROM UTWSAU
   WHERE WS = A_WS;
   INSERT INTO UAUTWSHS
      (WS, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY,
      TR_SEQ, EV_SEQ)
   SELECT  WS, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY,
      TR_SEQ, EV_SEQ
   FROM UTWSHS
   WHERE WS = A_WS;
   INSERT INTO UAUTWSHSDETAILS
      (WS, TR_SEQ, EV_SEQ, SEQ, DETAILS)
   SELECT        WS, TR_SEQ, EV_SEQ, SEQ, DETAILS
   FROM UTWSHSDETAILS
   WHERE WS = A_WS;
   INSERT INTO UAUTWSII
      (WS, ROWNR, SC, IC, ICNODE, II, IINODE)
   SELECT        WS, ROWNR, SC, IC, ICNODE, II, IINODE
   FROM UTWSII
   WHERE WS = A_WS;
   INSERT INTO UAUTWSSC
      (WS, ROWNR, SC)
   SELECT        WS, ROWNR, SC
   FROM UTWSSC
   WHERE WS = A_WS;
   INSERT INTO UAUTWSME
      (WS, ROWNR, SC, PG, PGNODE, PA, PANODE, ME, MENODE, REANALYSIS)
   SELECT        WS, ROWNR, SC, PG, PGNODE, PA, PANODE, ME, MENODE, REANALYSIS
   FROM UTWSME
   WHERE WS = A_WS;

   
   FOR L_TABLE_REC IN L_ALLWSGK_TABLES_CURSOR LOOP
      L_DYN_CURSOR := DBMS_SQL.OPEN_CURSOR;
      L_SQL_STRING := 'INSERT INTO '||L_TABLE_REC.TABLE_NAME||'@uniarch '||
                      UNAPIRA.LISTALLCOLUMNS(L_TABLE_REC.TABLE_NAME, 'BRACKETS', '0') ||
                      ' SELECT '||
                      UNAPIRA.LISTALLCOLUMNS(L_TABLE_REC.TABLE_NAME, 'NO_BRACKETS', '0') ||
                      ' FROM '||L_TABLE_REC.TABLE_NAME||
                      ' WHERE ws=:a_ws';
      BEGIN
         DBMS_SQL.PARSE(L_DYN_CURSOR, L_SQL_STRING, DBMS_SQL.V7);
         DBMS_SQL.BIND_VARIABLE(L_DYN_CURSOR, ':a_ws', A_WS);
         L_RET_CODE := DBMS_SQL.EXECUTE(L_DYN_CURSOR);
      EXCEPTION
      WHEN OTHERS THEN
         IF SQLCODE <> -942 THEN
            L_SQLERRM := SUBSTR(SQLERRM,1,200);
            LOGERROR ('CopyWsToArchDB',L_SQLERRM);
            L_SQLERRM := 'Error while archiving table '||L_TABLE_REC.TABLE_NAME;
            LOGERROR ('CopyWsToArchDB',L_SQLERRM);
         ELSE
            L_SQLERRM := 'Table '||L_TABLE_REC.TABLE_NAME||' does not exist';
            LOGERROR ('CopyWsToArchDB',L_SQLERRM);
         END IF;
      END;
      DBMS_SQL.CLOSE_CURSOR(L_DYN_CURSOR);
   END LOOP;
   FOR L_TABLE_REC IN L_ALLWSCUSTOM_TABLES_CURSOR LOOP
      L_DYN_CURSOR := DBMS_SQL.OPEN_CURSOR;
      L_SQL_STRING := 'INSERT INTO '||L_TABLE_REC.TABLE_NAME||'@uniarch '||
                      UNAPIRA.LISTALLCOLUMNS(L_TABLE_REC.TABLE_NAME, 'BRACKETS', '0') ||
                      ' SELECT '||
                      UNAPIRA.LISTALLCOLUMNS(L_TABLE_REC.TABLE_NAME, 'NO_BRACKETS', '0') ||
                      ' FROM '||L_TABLE_REC.TABLE_NAME||
                      ' WHERE ws=:a_ws';
      BEGIN
         DBMS_SQL.PARSE(L_DYN_CURSOR, L_SQL_STRING, DBMS_SQL.V7);
         DBMS_SQL.BIND_VARIABLE(L_DYN_CURSOR, ':a_ws', A_WS);
         L_RET_CODE := DBMS_SQL.EXECUTE(L_DYN_CURSOR);
      EXCEPTION
      WHEN OTHERS THEN
         IF SQLCODE <> -942 THEN
            L_SQLERRM := SUBSTR(SQLERRM,1,200);
            LOGERROR ('CopyWsToArchDB',L_SQLERRM);
            L_SQLERRM := 'Error while archiving table '||L_TABLE_REC.TABLE_NAME;
            LOGERROR ('CopyWsToArchDB',L_SQLERRM);
         ELSE
            L_SQLERRM := 'Table '||L_TABLE_REC.TABLE_NAME||' does not exist';
            LOGERROR ('CopyWsToArchDB',L_SQLERRM);
         END IF;
      END;
      DBMS_SQL.CLOSE_CURSOR(L_DYN_CURSOR);
   END LOOP;

   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
   IF A_IGNORE_DUP_VAL_ON_INDEX THEN
      L_RET_CODE := REMOVEWSFROMARCHIVE(A_WS);
   END IF;
   RETURN(UNAPIGEN.DBERR_NORECORDS);
END COPYWSTOARCHDB;

FUNCTION ARCHIVEWSTODB
(A_WS IN VARCHAR2)
RETURN NUMBER IS
BEGIN
   L_RET_CODE := COPYWSTOARCHDB(A_WS, TRUE);
   IF L_RET_CODE = UNAPIGEN.DBERR_NORECORDS THEN
      L_RET_CODE := COPYWSTOARCHDB(A_WS, FALSE);
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         L_SQLERRM := 'CopyWsToArchDB#return='||TO_CHAR(L_RET_CODE)||' for ws='||A_WS;
         RAISE STPERROR;
      END IF;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      L_SQLERRM := SUBSTR(SQLERRM,1,200);
   END IF;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
          'ArchiveWsToDB', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END ARCHIVEWSTODB;

FUNCTION COPYWSFROMARCHDB(A_WS IN VARCHAR2, A_IGNORE_DUP_VAL_ON_INDEX BOOLEAN) RETURN NUMBER IS
BEGIN
   

   EXECUTE IMMEDIATE
   'INSERT INTO utws' ||
   UNAPIRA.LISTALLCOLUMNS('utws', 'BRACKETS', '1') ||
   ' SELECT '||   UNAPIRA.LISTALLCOLUMNS('utws', 'NO_BRACKETS', '1') ||
   ' FROM uautws' ||
   ' WHERE ws = '''||A_WS||'''';

   INSERT INTO UTWSAU
      (WS, AU, AU_VERSION, AUSEQ, VALUE)
   SELECT        WS, AU, AU_VERSION, AUSEQ, VALUE
   FROM UAUTWSAU
   WHERE WS = A_WS;

   INSERT INTO UTWSHS
      (WS, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY,
      TR_SEQ, EV_SEQ)
   SELECT  WS, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY,
      TR_SEQ, EV_SEQ
   FROM UAUTWSHS
   WHERE WS = A_WS;

   INSERT INTO UTWSHSDETAILS
      (WS, TR_SEQ, EV_SEQ, SEQ, DETAILS)
   SELECT        WS, TR_SEQ, EV_SEQ, SEQ, DETAILS
   FROM UAUTWSHSDETAILS
   WHERE WS = A_WS;

   INSERT INTO UTWSII
      (WS, ROWNR, SC, IC, ICNODE, II, IINODE)
   SELECT        WS, ROWNR, SC, IC, ICNODE, II, IINODE
   FROM UAUTWSII
   WHERE WS = A_WS;

   INSERT INTO UTWSSC
      (WS, ROWNR, SC)
   SELECT        WS, ROWNR, SC
   FROM UAUTWSSC
   WHERE WS = A_WS;

   INSERT INTO UTWSME
      (WS, ROWNR, SC, PG, PGNODE, PA, PANODE, ME, MENODE, REANALYSIS)
   SELECT        WS, ROWNR, SC, PG, PGNODE, PA, PANODE, ME, MENODE, REANALYSIS
   FROM UAUTWSME
   WHERE WS = A_WS;
   
   FOR L_TABLE_REC IN L_ALLWSGK_TABLES_CURSOR LOOP
      L_DYN_CURSOR := DBMS_SQL.OPEN_CURSOR;
      L_SQL_STRING := 'INSERT INTO '||L_TABLE_REC.TABLE_NAME||' '||
                      UNAPIRA.LISTALLCOLUMNS(L_TABLE_REC.TABLE_NAME, 'BRACKETS', '0') ||
                      ' SELECT '||
                      UNAPIRA.LISTALLCOLUMNS(L_TABLE_REC.TABLE_NAME, 'NO_BRACKETS', '0') ||
                      ' FROM '||L_TABLE_REC.TABLE_NAME||'@uniarch '||
                      ' WHERE ws=:a_ws';
      BEGIN
         DBMS_SQL.PARSE(L_DYN_CURSOR, L_SQL_STRING, DBMS_SQL.V7);
         DBMS_SQL.BIND_VARIABLE(L_DYN_CURSOR, ':a_ws', A_WS);
         L_RET_CODE := DBMS_SQL.EXECUTE(L_DYN_CURSOR);
      EXCEPTION
      WHEN OTHERS THEN
         IF SQLCODE <> -942 THEN
            L_SQLERRM := SUBSTR(SQLERRM,1,200);
            LOGERROR ('CopyWsFromArchDB',L_SQLERRM);
            L_SQLERRM := 'Error while archiving table '||L_TABLE_REC.TABLE_NAME;
            LOGERROR ('CopyWsFromArchDB',L_SQLERRM);
         ELSE
            L_SQLERRM := 'Table '||L_TABLE_REC.TABLE_NAME||' does not exist';
            LOGERROR ('CopyWsFromArchDB',L_SQLERRM);
         END IF;
      END;
      DBMS_SQL.CLOSE_CURSOR(L_DYN_CURSOR);
   END LOOP;
   
   FOR L_TABLE_REC IN L_ALLWSCUSTOM_TABLES_CURSOR LOOP
      L_DYN_CURSOR := DBMS_SQL.OPEN_CURSOR;
      L_SQL_STRING := 'INSERT INTO '||L_TABLE_REC.TABLE_NAME||' '||
                      UNAPIRA.LISTALLCOLUMNS(L_TABLE_REC.TABLE_NAME, 'BRACKETS', '0') ||
                      ' SELECT '||
                      UNAPIRA.LISTALLCOLUMNS(L_TABLE_REC.TABLE_NAME, 'NO_BRACKETS', '0') ||
                      ' FROM '||L_TABLE_REC.TABLE_NAME||'@uniarch '||
                      ' WHERE ws=:a_ws';
      BEGIN
         DBMS_SQL.PARSE(L_DYN_CURSOR, L_SQL_STRING, DBMS_SQL.V7);
         DBMS_SQL.BIND_VARIABLE(L_DYN_CURSOR, ':a_ws', A_WS);
         L_RET_CODE := DBMS_SQL.EXECUTE(L_DYN_CURSOR);
      EXCEPTION
      WHEN OTHERS THEN
         IF SQLCODE <> -942 THEN
            L_SQLERRM := SUBSTR(SQLERRM,1,200);
            LOGERROR ('CopyWsFromArchDB',L_SQLERRM);
            L_SQLERRM := 'Error while archiving table '||L_TABLE_REC.TABLE_NAME;
            LOGERROR ('CopyWsFromArchDB',L_SQLERRM);
         ELSE
            L_SQLERRM := 'Table '||L_TABLE_REC.TABLE_NAME||' does not exist';
            LOGERROR ('CopyWsFromArchDB',L_SQLERRM);
         END IF;
      END;
      DBMS_SQL.CLOSE_CURSOR(L_DYN_CURSOR);
   END LOOP;

   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
   IF A_IGNORE_DUP_VAL_ON_INDEX THEN
      L_RET_CODE := REMOVEWSFROMDB(A_WS);
   END IF;
   RETURN(UNAPIGEN.DBERR_NORECORDS);
END COPYWSFROMARCHDB;

FUNCTION RESTOREWSFROMDB
(A_WS IN VARCHAR2)
RETURN NUMBER IS
BEGIN
   L_RET_CODE := COPYWSFROMARCHDB(A_WS, TRUE);
   IF L_RET_CODE = UNAPIGEN.DBERR_NORECORDS THEN
      L_RET_CODE := COPYWSFROMARCHDB(A_WS, FALSE);
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         L_SQLERRM := 'CopyWsFromArchDB#return='||TO_CHAR(L_RET_CODE)||' for ws='||A_WS;
         RAISE STPERROR;
      END IF;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      L_SQLERRM := SUBSTR(SQLERRM,1,200);
   END IF;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
          'RestoreWsFromDB', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END RESTOREWSFROMDB;

FUNCTION REMOVEWSFROMDB
(A_WS IN VARCHAR2)
RETURN NUMBER IS
BEGIN
   

   DELETE FROM UTWS
   WHERE WS = A_WS;

   DELETE FROM UTWSAU
   WHERE WS = A_WS;

   DELETE FROM UTWSHS
   WHERE WS = A_WS;

   DELETE FROM UTWSHSDETAILS
   WHERE WS = A_WS;

   DELETE FROM UTWSII
   WHERE WS = A_WS;

   DELETE FROM UTWSSC
   WHERE WS = A_WS;

   DELETE FROM UTWSME
   WHERE WS = A_WS;

   
   FOR L_TABLE_REC IN L_ALLWSGK_TABLES_CURSOR LOOP
      L_DYN_CURSOR := DBMS_SQL.OPEN_CURSOR;
      L_SQL_STRING := 'DELETE FROM '||L_TABLE_REC.TABLE_NAME ||
                      ' WHERE ws=:a_ws';
      BEGIN
         DBMS_SQL.PARSE(L_DYN_CURSOR, L_SQL_STRING, DBMS_SQL.V7);
         DBMS_SQL.BIND_VARIABLE(L_DYN_CURSOR, ':a_ws', A_WS);
         L_RET_CODE := DBMS_SQL.EXECUTE(L_DYN_CURSOR);
      EXCEPTION
      WHEN OTHERS THEN
         IF SQLCODE <> -942 THEN
            L_SQLERRM := SUBSTR(SQLERRM,1,200);
            LOGERROR ('RemoveWsFromDB',L_SQLERRM);
            L_SQLERRM := 'Error while archiving table '||L_TABLE_REC.TABLE_NAME;
            LOGERROR ('RemoveWsFromDB',L_SQLERRM);
         ELSE
            L_SQLERRM := 'Table '||L_TABLE_REC.TABLE_NAME||' does not exist';
            LOGERROR ('RemoveWsFromDB',L_SQLERRM);
         END IF;
      END;
      DBMS_SQL.CLOSE_CURSOR(L_DYN_CURSOR);
   END LOOP;
   
   FOR L_TABLE_REC IN L_ALLWSCUSTOM_TABLES_CURSOR LOOP
      L_DYN_CURSOR := DBMS_SQL.OPEN_CURSOR;
      L_SQL_STRING := 'DELETE FROM '||L_TABLE_REC.TABLE_NAME ||
                      ' WHERE ws=:a_ws';
      BEGIN
         DBMS_SQL.PARSE(L_DYN_CURSOR, L_SQL_STRING, DBMS_SQL.V7);
         DBMS_SQL.BIND_VARIABLE(L_DYN_CURSOR, ':a_ws', A_WS);
         L_RET_CODE := DBMS_SQL.EXECUTE(L_DYN_CURSOR);
      EXCEPTION
      WHEN OTHERS THEN
         IF SQLCODE <> -942 THEN
            L_SQLERRM := SUBSTR(SQLERRM,1,200);
            LOGERROR ('RemoveWsFromDB',L_SQLERRM);
            L_SQLERRM := 'Error while archiving table '||L_TABLE_REC.TABLE_NAME;
            LOGERROR ('RemoveWsFromDB',L_SQLERRM);
         ELSE
            L_SQLERRM := 'Table '||L_TABLE_REC.TABLE_NAME||' does not exist';
            LOGERROR ('RemoveWsFromDB',L_SQLERRM);
         END IF;
      END;
      DBMS_SQL.CLOSE_CURSOR(L_DYN_CURSOR);
   END LOOP;

   RETURN(UNAPIGEN.DBERR_SUCCESS);
END REMOVEWSFROMDB;

FUNCTION ARCHIVEWSTOFILE
(A_WS            IN VARCHAR2)
RETURN NUMBER IS

CURSOR L_UTWS_CURSOR (A_WS IN VARCHAR2) IS
   SELECT * FROM UDWS WHERE WS=A_WS;

CURSOR L_UTWSAU_CURSOR (A_WS IN VARCHAR2) IS
   SELECT * FROM UTWSAU WHERE WS=A_WS;

CURSOR L_UTWSHS_CURSOR (A_WS IN VARCHAR2) IS
   SELECT * FROM UTWSHS WHERE WS=A_WS;

CURSOR L_UTWSHSDETAILS_CURSOR (A_WS IN VARCHAR2) IS
   SELECT * FROM UTWSHSDETAILS WHERE WS=A_WS;

CURSOR L_UTWSII_CURSOR (A_WS IN VARCHAR2) IS
   SELECT * FROM UTWSII WHERE WS=A_WS;

CURSOR L_UTWSSC_CURSOR (A_WS IN VARCHAR2) IS
   SELECT * FROM UTWSSC WHERE WS=A_WS;

CURSOR L_UTWSME_CURSOR (A_WS IN VARCHAR2) IS
   SELECT * FROM UTWSME WHERE WS=A_WS;

BEGIN
   L_SQLERRM:=NULL;
   UNAPIRA.L_EXCEPTION_STEP :='utws' ||'ws='||A_WS;
   FOR L_REC IN L_UTWS_CURSOR(A_WS) LOOP
      UNAPIRA3.L_PUTTEXT := 'utws' || L_SEP ||
      L_REC.WS || L_SEP || L_REC.WT || L_SEP || L_REC.WT_VERSION || L_SEP ||
      L_REC.DESCRIPTION || L_SEP ||
      TO_CHAR(L_REC.CREATION_DATE,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      TO_CHAR(L_REC.CREATION_DATE_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      L_REC.CREATED_BY || L_SEP ||
      TO_CHAR(L_REC.EXEC_START_DATE,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      TO_CHAR(L_REC.EXEC_START_DATE_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      TO_CHAR(L_REC.EXEC_END_DATE,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      TO_CHAR(L_REC.EXEC_END_DATE_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      L_REC.PRIORITY || L_SEP ||
      TO_CHAR(L_REC.DUE_DATE,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      TO_CHAR(L_REC.DUE_DATE_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      L_REC.RESPONSIBLE || L_SEP || L_REC.SC_COUNTER || L_SEP ||
      L_REC.MIN_ROWS || L_SEP || L_REC.MAX_ROWS || L_SEP ||
      L_REC.COMPLETE || L_SEP || L_REC.VALID_CF || L_SEP ||
      L_REC.DESCR_DOC || L_SEP || L_REC.DESCR_DOC_VERSION || L_SEP ||
      TO_CHAR(L_REC.DATE1,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      TO_CHAR(L_REC.DATE1_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      TO_CHAR(L_REC.DATE2,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      TO_CHAR(L_REC.DATE2_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      TO_CHAR(L_REC.DATE3,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      TO_CHAR(L_REC.DATE3_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      TO_CHAR(L_REC.DATE4,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      TO_CHAR(L_REC.DATE4_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      TO_CHAR(L_REC.DATE5,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      TO_CHAR(L_REC.DATE5_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      L_REC.LAST_COMMENT || L_SEP || L_REC.WS_CLASS || L_SEP ||
      L_REC.LOG_HS || L_SEP || L_REC.LOG_HS_DETAILS || L_SEP ||
      L_REC.ALLOW_MODIFY || L_SEP || L_REC.ACTIVE || L_SEP || L_REC.LC || L_SEP ||
      L_REC.LC_VERSION || L_SEP || L_REC.SS || L_SEP || L_REC.AR1 || L_SEP ||
      L_REC.AR2 || L_SEP || L_REC.AR3 || L_SEP || L_REC.AR4 || L_SEP ||
      L_REC.AR5 || L_SEP || L_REC.AR6 || L_SEP || L_REC.AR7 || L_SEP ||
      L_REC.AR8 || L_SEP || L_REC.AR9 || L_SEP || L_REC.AR10 || L_SEP ||
      L_REC.AR11 || L_SEP || L_REC.AR12 || L_SEP || L_REC.AR13 || L_SEP ||
      L_REC.AR14 || L_SEP || L_REC.AR15 || L_SEP || L_REC.AR16 || L_SEP ||
      L_REC.AR17 || L_SEP || L_REC.AR18 || L_SEP || L_REC.AR19 || L_SEP ||
      L_REC.AR20 || L_SEP || L_REC.AR21 || L_SEP || L_REC.AR22 || L_SEP ||
      L_REC.AR23 || L_SEP || L_REC.AR24 || L_SEP || L_REC.AR25 || L_SEP ||
      L_REC.AR26 || L_SEP || L_REC.AR27 || L_SEP || L_REC.AR28 || L_SEP ||
      L_REC.AR29 || L_SEP || L_REC.AR30 || L_SEP || L_REC.AR31 || L_SEP ||
      L_REC.AR32 || L_SEP || L_REC.AR33 || L_SEP || L_REC.AR34 || L_SEP ||
      L_REC.AR35 || L_SEP || L_REC.AR36 || L_SEP || L_REC.AR37 || L_SEP ||
      L_REC.AR38 || L_SEP || L_REC.AR39 || L_SEP || L_REC.AR40 || L_SEP ||
      L_REC.AR41 || L_SEP || L_REC.AR42 || L_SEP || L_REC.AR43 || L_SEP ||
      L_REC.AR44 || L_SEP || L_REC.AR45 || L_SEP || L_REC.AR46 || L_SEP ||
      L_REC.AR47 || L_SEP || L_REC.AR48 || L_SEP || L_REC.AR49 || L_SEP ||
      L_REC.AR50 || L_SEP || L_REC.AR51 || L_SEP || L_REC.AR52 || L_SEP ||
      L_REC.AR53 || L_SEP || L_REC.AR54 || L_SEP || L_REC.AR55 || L_SEP ||
      L_REC.AR56 || L_SEP || L_REC.AR57 || L_SEP || L_REC.AR58 || L_SEP ||
      L_REC.AR59 || L_SEP || L_REC.AR60 || L_SEP || L_REC.AR61 || L_SEP ||
      L_REC.AR62 || L_SEP || L_REC.AR63 || L_SEP || L_REC.AR64 || L_SEP ||
      L_REC.AR65 || L_SEP || L_REC.AR66 || L_SEP || L_REC.AR67 || L_SEP ||
      L_REC.AR68 || L_SEP || L_REC.AR69 || L_SEP || L_REC.AR70 || L_SEP ||
      L_REC.AR71 || L_SEP || L_REC.AR72 || L_SEP || L_REC.AR73 || L_SEP ||
      L_REC.AR74 || L_SEP || L_REC.AR75 || L_SEP || L_REC.AR76 || L_SEP ||
      L_REC.AR77 || L_SEP || L_REC.AR78 || L_SEP || L_REC.AR79 || L_SEP ||
      L_REC.AR80 || L_SEP || L_REC.AR81 || L_SEP || L_REC.AR82 || L_SEP ||
      L_REC.AR83 || L_SEP || L_REC.AR84 || L_SEP || L_REC.AR85 || L_SEP ||
      L_REC.AR86 || L_SEP || L_REC.AR87 || L_SEP || L_REC.AR88 || L_SEP ||
      L_REC.AR89 || L_SEP || L_REC.AR90 || L_SEP || L_REC.AR91 || L_SEP ||
      L_REC.AR92 || L_SEP || L_REC.AR93 || L_SEP || L_REC.AR94 || L_SEP ||
      L_REC.AR95 || L_SEP || L_REC.AR96 || L_SEP || L_REC.AR97 || L_SEP ||
      L_REC.AR98 || L_SEP || L_REC.AR99 || L_SEP || L_REC.AR100 || L_SEP ||
      L_REC.AR101 || L_SEP || L_REC.AR102 || L_SEP || L_REC.AR103 || L_SEP ||
      L_REC.AR104 || L_SEP || L_REC.AR105 || L_SEP || L_REC.AR106 || L_SEP ||
      L_REC.AR107 || L_SEP || L_REC.AR108 || L_SEP || L_REC.AR109 || L_SEP ||
      L_REC.AR110 || L_SEP || L_REC.AR111 || L_SEP || L_REC.AR112 || L_SEP ||
      L_REC.AR113 || L_SEP || L_REC.AR114 || L_SEP || L_REC.AR115 || L_SEP ||
      L_REC.AR116 || L_SEP || L_REC.AR117 || L_SEP || L_REC.AR118 || L_SEP ||
      L_REC.AR119 || L_SEP || L_REC.AR120 || L_SEP || L_REC.AR121 || L_SEP ||
      L_REC.AR122 || L_SEP || L_REC.AR123 || L_SEP || L_REC.AR124 || L_SEP ||
      L_REC.AR125 || L_SEP || L_REC.AR126 || L_SEP || L_REC.AR127 || L_SEP ||
      L_REC.AR128;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   UNAPIRA.L_EXCEPTION_STEP :='utwsau' ||'ws='||A_WS;
   FOR L_REC IN L_UTWSAU_CURSOR(A_WS) LOOP
      UNAPIRA3.L_PUTTEXT := 'utwsau' || L_SEP ||
      L_REC.WS || L_SEP || L_REC.AU || L_SEP || L_REC.AU_VERSION || L_SEP ||
      L_REC.AUSEQ || L_SEP || L_REC.VALUE;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   UNAPIRA.L_EXCEPTION_STEP :='utwshs' ||'ws='||A_WS;
   FOR L_REC IN L_UTWSHS_CURSOR(A_WS) LOOP
      UNAPIRA3.L_PUTTEXT := 'utwshs' || L_SEP ||
      L_REC.WS || L_SEP || L_REC.WHO || L_SEP || L_REC.WHO_DESCRIPTION || L_SEP ||
      L_REC.WHAT || L_SEP || L_REC.WHAT_DESCRIPTION || L_SEP ||
      TO_CHAR(L_REC.LOGDATE,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      TO_CHAR(L_REC.LOGDATE_TZ,UNAPIRA.P_TSTZ_FORMAT) || L_SEP ||
      L_REC.WHY || L_SEP || L_REC.TR_SEQ || L_SEP || L_REC.EV_SEQ;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   UNAPIRA.L_EXCEPTION_STEP :='utwshsdetails' ||'ws='||A_WS;
   FOR L_REC IN L_UTWSHSDETAILS_CURSOR(A_WS) LOOP
      UNAPIRA3.L_PUTTEXT := 'utwshsdetails' || L_SEP ||
      L_REC.WS || L_SEP || L_REC.TR_SEQ || L_SEP || L_REC.EV_SEQ || L_SEP ||
      L_REC.SEQ || L_SEP || L_REC.DETAILS;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   UNAPIRA.L_EXCEPTION_STEP :='utwsii' ||'ws='||A_WS;
   FOR L_REC IN L_UTWSII_CURSOR(A_WS) LOOP
      UNAPIRA3.L_PUTTEXT := 'utwsii' || L_SEP ||
      L_REC.WS || L_SEP || L_REC.ROWNR || L_SEP || L_REC.SC || L_SEP ||
      L_REC.IC || L_SEP || L_REC.ICNODE || L_SEP || L_REC.II || L_SEP ||
      L_REC.IINODE;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   UNAPIRA.L_EXCEPTION_STEP :='utwssc' ||'ws='||A_WS;
   FOR L_REC IN L_UTWSSC_CURSOR(A_WS) LOOP
      UNAPIRA3.L_PUTTEXT := 'utwssc' || L_SEP ||
      L_REC.WS || L_SEP || L_REC.ROWNR || L_SEP || L_REC.SC;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   UNAPIRA.L_EXCEPTION_STEP :='utwsme' ||'ws='||A_WS;
   FOR L_REC IN L_UTWSME_CURSOR(A_WS) LOOP
      UNAPIRA3.L_PUTTEXT := 'utwsme' || L_SEP ||
      L_REC.WS || L_SEP || L_REC.ROWNR || L_SEP || L_REC.SC || L_SEP ||
      L_REC.PG || L_SEP || L_REC.PGNODE || L_SEP || L_REC.PA || L_SEP ||
      L_REC.PANODE || L_SEP || L_REC.ME || L_SEP || L_REC.MENODE || L_SEP ||
      L_REC.REANALYSIS;
      UNAPIRA3.U4DATAPUTLINE(UNAPIRA3.L_PUTTEXT);
   END LOOP;

   
   
   UNAPIRA.L_EXCEPTION_STEP :='ArchiveWsGkToFile#ws='||A_WS;
   L_RET_CODE := UNAPIRA3.ARCHIVEWSGKTOFILE(A_WS);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      L_SQLERRM := 'ArchiveWsGkToFile return='||L_RET_CODE||'for ws '||A_WS;
      RAISE STPERROR;
   END IF;

   
   
   UNAPIRA.L_EXCEPTION_STEP :='ArchiveWsCustomToFile#ws='||A_WS;
   L_RET_CODE := UNAPIRA3.ARCHIVEWSCUSTOMTOFILE(A_WS);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      L_SQLERRM := 'ArchiveWsCustomToFile return='||L_RET_CODE||'for ws '||A_WS;
      RAISE STPERROR;
   END IF;

   UNAPIRA3.U4DATAPUTLINE( ' ');

   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN UTL_FILE.INVALID_PATH THEN
   L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Invalid path';
   UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveWsToFile', L_SQLERRM, 'UTL_FILE.INVALID_PATH',UNAPIRA.P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_NOOBJECT);

WHEN UTL_FILE.INVALID_MODE THEN
   L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Invalid mode';
   UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveWsToFile', L_SQLERRM, 'UTL_FILE.INVALID_MODE',UNAPIRA.P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_GENFAIL);

WHEN UTL_FILE.INVALID_FILEHANDLE THEN
   L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Invalid filehandle';
   UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveWsToFile', L_SQLERRM, 'UTL_FILE.INVALID_FILEHANDLE',UNAPIRA.P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_GENFAIL);

WHEN UTL_FILE.INVALID_OPERATION THEN
   
   L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Invalid operation';
   UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveWsToFile', L_SQLERRM, 'UTL_FILE.INVALID_OPERATION',UNAPIRA.P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_NOOBJECT);

WHEN UTL_FILE.READ_ERROR THEN
   L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Read error';
   UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveWsToFile', L_SQLERRM, 'UTL_FILE.READ_ERROR',UNAPIRA.P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_GENFAIL);

WHEN UTL_FILE.WRITE_ERROR THEN
   L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Write error';
   UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveWsToFile', L_SQLERRM, 'UTL_FILE.WRITE_ERROR',UNAPIRA.P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_GENFAIL);

WHEN UTL_FILE.INTERNAL_ERROR THEN
   L_SQLERRM := 'directory='||UNAPIRA.P_FILE_DIR||'#file='||UNAPIRA.P_FILE_NAME ||':Internal error';
   UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveWsToFile', L_SQLERRM, 'UTL_FILE.INTERNAL_ERROR',UNAPIRA.P_CLOSE_CURSOR);
   RETURN(UNAPIGEN.DBERR_GENFAIL);

WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      L_SQLERRM := SQLERRM;
      UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveWsToFile', L_SQLERRM, 'UTL_FILE.INTERNAL_ERROR',UNAPIRA.P_CLOSE_CURSOR);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIRA.UTLFILEEXCEPTIONHANDLER('ArchiveWsToFile', L_SQLERRM, 'UTL_FILE.INTERNAL_ERROR',UNAPIRA.P_CLOSE_CURSOR);
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END ARCHIVEWSTOFILE;

BEGIN
   L_SEP:=UNAPIRA.P_INTERNAL_SEP;
END UNAPIRAWS;
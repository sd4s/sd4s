PACKAGE BODY unapipp AS

L_SQLERRM         VARCHAR2(255);
L_SQL_STRING      VARCHAR2(4000);
L_WHERE_CLAUSE    VARCHAR2(1000);
L_EVENT_TP        UTEV.EV_TP%TYPE;
L_RET_CODE        NUMBER;
L_RESULT          NUMBER;
L_FETCHED_ROWS    NUMBER;
L_EV_SEQ_NR       NUMBER;
L_EV_DETAILS      VARCHAR2(255);


P_PP_CURSOR      INTEGER;

STPERROR         EXCEPTION;

FUNCTION GETVERSION
   RETURN VARCHAR2
IS
BEGIN
   RETURN('06.07.00.00_00.13');
EXCEPTION
   WHEN OTHERS THEN
      RETURN (NULL);
END GETVERSION;

FUNCTION GETPARAMETERPROFILELIST
(A_PP                      OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_VERSION                 OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PP_KEY1                 OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PP_KEY2                 OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PP_KEY3                 OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PP_KEY4                 OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PP_KEY5                 OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_VERSION_IS_CURRENT      OUT     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_EFFECTIVE_FROM          OUT     UNAPIGEN.DATE_TABLE_TYPE,   
 A_EFFECTIVE_TILL          OUT     UNAPIGEN.DATE_TABLE_TYPE,   
 A_DESCRIPTION             OUT     UNAPIGEN.VC40_TABLE_TYPE,   
 A_SS                      OUT     UNAPIGEN.VC2_TABLE_TYPE,    
 A_NR_OF_ROWS              IN OUT  NUMBER,                     
 A_WHERE_CLAUSE            IN      VARCHAR2,                   
 A_NEXT_ROWS               IN      NUMBER)                     
RETURN NUMBER IS

L_PP                    VARCHAR2(20);
L_VERSION               VARCHAR2(20);
L_PP_KEY1               VARCHAR2(20);
L_PP_KEY2               VARCHAR2(20);
L_PP_KEY3               VARCHAR2(20);
L_PP_KEY4               VARCHAR2(20);
L_PP_KEY5               VARCHAR2(20);
L_VERSION_IS_CURRENT    CHAR(1);
L_EFFECTIVE_FROM        TIMESTAMP WITH TIME ZONE;
L_EFFECTIVE_TILL        TIMESTAMP WITH TIME ZONE;
L_DESCRIPTION           VARCHAR2(40);
L_SS                    VARCHAR2(2);

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_PP_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_PP_CURSOR);
         P_PP_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_PP_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      IF P_PP_CURSOR IS NULL THEN
         P_PP_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;

      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
         L_WHERE_CLAUSE := 'WHERE active = ''1'' ORDER BY pp, pp_key1, pp_key2, pp_key3, '||
                           'pp_key4, pp_key5, version'; 
      ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
         L_WHERE_CLAUSE := 'WHERE version_is_current = ''1'' '||
                           'AND pp = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                           ''' AND pp_key1 = '' '' AND pp_key2 = '' '' AND pp_key3 = '' '' '||
                           'AND pp_key4 = '' '' AND pp_key5 = '' '' '||
                           'ORDER BY pp, pp_key1, pp_key2, pp_key3, pp_key4, pp_key5, version'; 
      ELSE
         L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
      END IF;

      L_SQL_STRING := 'SELECT pp, version, pp_key1, pp_key2, pp_key3, pp_key4, pp_key5, '||
                      'nvl(version_is_current,''0''), effective_from, effective_till, '||
                      'description, ss FROM dd' || UNAPIGEN.P_DD || '.uvpp ' || L_WHERE_CLAUSE;

      DBMS_SQL.PARSE(P_PP_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

      DBMS_SQL.DEFINE_COLUMN(P_PP_CURSOR, 1, L_PP, 20);
      DBMS_SQL.DEFINE_COLUMN(P_PP_CURSOR, 2, L_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(P_PP_CURSOR, 3, L_PP_KEY1, 20);
      DBMS_SQL.DEFINE_COLUMN(P_PP_CURSOR, 4, L_PP_KEY2, 20);
      DBMS_SQL.DEFINE_COLUMN(P_PP_CURSOR, 5, L_PP_KEY3, 20);
      DBMS_SQL.DEFINE_COLUMN(P_PP_CURSOR, 6, L_PP_KEY4, 20);
      DBMS_SQL.DEFINE_COLUMN(P_PP_CURSOR, 7, L_PP_KEY5, 20);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_PP_CURSOR, 8, L_VERSION_IS_CURRENT, 1);
      DBMS_SQL.DEFINE_COLUMN(P_PP_CURSOR, 9, L_EFFECTIVE_FROM);
      DBMS_SQL.DEFINE_COLUMN(P_PP_CURSOR, 10, L_EFFECTIVE_TILL);
      DBMS_SQL.DEFINE_COLUMN(P_PP_CURSOR, 11, L_DESCRIPTION, 40);
      DBMS_SQL.DEFINE_COLUMN(P_PP_CURSOR, 12, L_SS, 2);
      L_RESULT := DBMS_SQL.EXECUTE(P_PP_CURSOR);
   END IF;

   L_RESULT := DBMS_SQL.FETCH_ROWS(P_PP_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_PP_CURSOR, 1, L_PP);
      DBMS_SQL.COLUMN_VALUE(P_PP_CURSOR, 2, L_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_PP_CURSOR, 3, L_PP_KEY1);
      DBMS_SQL.COLUMN_VALUE(P_PP_CURSOR, 4, L_PP_KEY2);
      DBMS_SQL.COLUMN_VALUE(P_PP_CURSOR, 5, L_PP_KEY3);
      DBMS_SQL.COLUMN_VALUE(P_PP_CURSOR, 6, L_PP_KEY4);
      DBMS_SQL.COLUMN_VALUE(P_PP_CURSOR, 7, L_PP_KEY5);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_PP_CURSOR, 8, L_VERSION_IS_CURRENT);
      DBMS_SQL.COLUMN_VALUE(P_PP_CURSOR, 9, L_EFFECTIVE_FROM);
      DBMS_SQL.COLUMN_VALUE(P_PP_CURSOR, 10, L_EFFECTIVE_TILL);
      DBMS_SQL.COLUMN_VALUE(P_PP_CURSOR, 11, L_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE(P_PP_CURSOR, 12, L_SS);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_PP(L_FETCHED_ROWS) := L_PP;
      A_VERSION(L_FETCHED_ROWS) := L_VERSION;
      A_PP_KEY1(L_FETCHED_ROWS) := L_PP_KEY1;
      A_PP_KEY2(L_FETCHED_ROWS) := L_PP_KEY2;
      A_PP_KEY3(L_FETCHED_ROWS) := L_PP_KEY3;
      A_PP_KEY4(L_FETCHED_ROWS) := L_PP_KEY4;
      A_PP_KEY5(L_FETCHED_ROWS) := L_PP_KEY5;
      A_VERSION_IS_CURRENT(L_FETCHED_ROWS) := L_VERSION_IS_CURRENT;
      A_EFFECTIVE_FROM(L_FETCHED_ROWS) := L_EFFECTIVE_FROM;
      A_EFFECTIVE_TILL(L_FETCHED_ROWS) := L_EFFECTIVE_TILL;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;
      A_SS(L_FETCHED_ROWS) := L_SS;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_PP_CURSOR);
      END IF;
   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_PP_CURSOR);
       P_PP_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_PP_CURSOR);
      P_PP_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME,
                          ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetParameterProfileList', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (P_PP_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (P_PP_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETPARAMETERPROFILELIST;

FUNCTION GETPARAMETERPROFILE
(A_PP                          OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_VERSION                     OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PP_KEY1                     OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PP_KEY2                     OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PP_KEY3                     OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PP_KEY4                     OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PP_KEY5                     OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_VERSION_IS_CURRENT          OUT     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_EFFECTIVE_FROM              OUT     UNAPIGEN.DATE_TABLE_TYPE,   
 A_EFFECTIVE_TILL              OUT     UNAPIGEN.DATE_TABLE_TYPE,   
 A_DESCRIPTION                 OUT     UNAPIGEN.VC40_TABLE_TYPE,   
 A_DESCRIPTION2                OUT     UNAPIGEN.VC40_TABLE_TYPE,   
 A_UNIT                        OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_FORMAT                      OUT     UNAPIGEN.VC40_TABLE_TYPE,   
 A_CONFIRM_ASSIGN              OUT     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_ALLOW_ANY_PR                OUT     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_NEVER_CREATE_METHODS        OUT     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_DELAY                       OUT     UNAPIGEN.NUM_TABLE_TYPE,    
 A_DELAY_UNIT                  OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_IS_TEMPLATE                 OUT     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_SC_LC                       OUT     UNAPIGEN.VC2_TABLE_TYPE,    
 A_SC_LC_VERSION               OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_INHERIT_AU                  OUT     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_PP_CLASS                    OUT     UNAPIGEN.VC2_TABLE_TYPE,    
 A_LOG_HS                      OUT     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_ALLOW_MODIFY                OUT     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_ACTIVE                      OUT     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_LC                          OUT     UNAPIGEN.VC2_TABLE_TYPE,    
 A_LC_VERSION                  OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_SS                          OUT     UNAPIGEN.VC2_TABLE_TYPE,    
 A_NR_OF_ROWS                  IN OUT  NUMBER,                     
 A_WHERE_CLAUSE                IN      VARCHAR2)                   
RETURN NUMBER IS

L_PP                          VARCHAR2(20);
L_VERSION                     VARCHAR2(20);
L_PP_KEY1                     VARCHAR2(20);
L_PP_KEY2                     VARCHAR2(20);
L_PP_KEY3                     VARCHAR2(20);
L_PP_KEY4                     VARCHAR2(20);
L_PP_KEY5                     VARCHAR2(20);
L_VERSION_IS_CURRENT          CHAR(1);
L_EFFECTIVE_FROM              TIMESTAMP WITH TIME ZONE;
L_EFFECTIVE_TILL              TIMESTAMP WITH TIME ZONE;
L_DESCRIPTION                 VARCHAR2(40);
L_DESCRIPTION2                VARCHAR2(40);
L_UNIT                        VARCHAR2(20);
L_FORMAT                      VARCHAR2(40);
L_ALLOW_ANY_PR                CHAR(1);
L_NEVER_CREATE_METHODS        CHAR(1);
L_CONFIRM_ASSIGN              CHAR(1);
L_DELAY                       NUMBER;
L_DELAY_UNIT                  VARCHAR2(20);
L_IS_TEMPLATE                 CHAR(1);
L_SC_LC                       VARCHAR2(2);
L_SC_LC_VERSION               VARCHAR2(20);
L_INHERIT_AU                  CHAR(1);
L_PP_CLASS                    VARCHAR2(2);
L_LOG_HS                      CHAR(1);
L_ALLOW_MODIFY                CHAR(1);
L_ACTIVE                      CHAR(1);
L_LC                          VARCHAR2(2);
L_LC_VERSION                  VARCHAR2(20);
L_SS                          VARCHAR2(2);
L_PP_CURSOR                   INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

  IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'WHERE active = ''1'' '||
                        'ORDER BY pp, pp_key1, pp_key2, pp_key3, '||
                        'pp_key4, pp_key5, version'; 
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := 'WHERE version_is_current = ''1'' '||
                        'AND pp = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                        ''' AND pp_key1 = '' '' AND pp_key2 = '' '' AND pp_key3 = '' '' '||
                        'AND pp_key4 = '' '' AND pp_key5 = '' '' '||
                        'ORDER BY pp, pp_key1, pp_key2, pp_key3, pp_key4, pp_key5, version'; 
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_PP_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT pp, version, pp_key1, pp_key2, pp_key3, pp_key4, pp_key5, '||
                   'nvl(version_is_current,''0''), effective_from, '||
                   'effective_till, description, description2, unit, format, allow_any_pr, '||
                   'never_create_methods, confirm_assign, delay, delay_unit, ' ||
                   'is_template, sc_lc, sc_lc_version, inherit_au, pp_class, log_hs, ' ||
                   'allow_modify, active, lc, lc_version, ss FROM dd'
                   || UNAPIGEN.P_DD || '.uvpp ' || L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_PP_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_PP_CURSOR, 1, L_PP, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PP_CURSOR, 2, L_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PP_CURSOR, 3, L_PP_KEY1, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PP_CURSOR, 4, L_PP_KEY2, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PP_CURSOR, 5, L_PP_KEY3, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PP_CURSOR, 6, L_PP_KEY4, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PP_CURSOR, 7, L_PP_KEY5, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PP_CURSOR, 8, L_VERSION_IS_CURRENT, 1);
   DBMS_SQL.DEFINE_COLUMN(L_PP_CURSOR, 9, L_EFFECTIVE_FROM);
   DBMS_SQL.DEFINE_COLUMN(L_PP_CURSOR, 10, L_EFFECTIVE_TILL);
   DBMS_SQL.DEFINE_COLUMN(L_PP_CURSOR, 11,  L_DESCRIPTION, 40);
   DBMS_SQL.DEFINE_COLUMN(L_PP_CURSOR, 12,  L_DESCRIPTION2, 40);
   DBMS_SQL.DEFINE_COLUMN(L_PP_CURSOR, 13,  L_UNIT, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PP_CURSOR, 14,  L_FORMAT, 40);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PP_CURSOR, 15,  L_ALLOW_ANY_PR, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PP_CURSOR, 16,  L_NEVER_CREATE_METHODS, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PP_CURSOR, 17,  L_CONFIRM_ASSIGN, 1);
   DBMS_SQL.DEFINE_COLUMN(L_PP_CURSOR, 18, L_DELAY);
   DBMS_SQL.DEFINE_COLUMN(L_PP_CURSOR, 19, L_DELAY_UNIT, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PP_CURSOR, 20, L_IS_TEMPLATE, 1);
   DBMS_SQL.DEFINE_COLUMN(L_PP_CURSOR, 21, L_SC_LC, 2);
   DBMS_SQL.DEFINE_COLUMN(L_PP_CURSOR, 22, L_SC_LC_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PP_CURSOR, 23, L_INHERIT_AU, 1);
   DBMS_SQL.DEFINE_COLUMN(L_PP_CURSOR, 24, L_PP_CLASS, 2);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PP_CURSOR, 25, L_LOG_HS, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PP_CURSOR, 26, L_ALLOW_MODIFY, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PP_CURSOR, 27, L_ACTIVE, 1);
   DBMS_SQL.DEFINE_COLUMN(L_PP_CURSOR, 28, L_LC, 2);
   DBMS_SQL.DEFINE_COLUMN(L_PP_CURSOR, 29, L_LC_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PP_CURSOR, 30, L_SS, 2);

   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_PP_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_PP_CURSOR, 1, L_PP);
      DBMS_SQL.COLUMN_VALUE(L_PP_CURSOR, 2, L_VERSION);
      DBMS_SQL.COLUMN_VALUE(L_PP_CURSOR, 3, L_PP_KEY1);
      DBMS_SQL.COLUMN_VALUE(L_PP_CURSOR, 4, L_PP_KEY2);
      DBMS_SQL.COLUMN_VALUE(L_PP_CURSOR, 5, L_PP_KEY3);
      DBMS_SQL.COLUMN_VALUE(L_PP_CURSOR, 6, L_PP_KEY4);
      DBMS_SQL.COLUMN_VALUE(L_PP_CURSOR, 7, L_PP_KEY5);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PP_CURSOR, 8, L_VERSION_IS_CURRENT);
      DBMS_SQL.COLUMN_VALUE(L_PP_CURSOR, 9, L_EFFECTIVE_FROM);
      DBMS_SQL.COLUMN_VALUE(L_PP_CURSOR, 10, L_EFFECTIVE_TILL);
      DBMS_SQL.COLUMN_VALUE(L_PP_CURSOR, 11, L_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE(L_PP_CURSOR, 12, L_DESCRIPTION2);
      DBMS_SQL.COLUMN_VALUE(L_PP_CURSOR, 13, L_UNIT);
      DBMS_SQL.COLUMN_VALUE(L_PP_CURSOR, 14, L_FORMAT);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PP_CURSOR, 15, L_ALLOW_ANY_PR);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PP_CURSOR, 16, L_NEVER_CREATE_METHODS);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PP_CURSOR, 17, L_CONFIRM_ASSIGN);
      DBMS_SQL.COLUMN_VALUE(L_PP_CURSOR, 18, L_DELAY);
      DBMS_SQL.COLUMN_VALUE(L_PP_CURSOR, 19, L_DELAY_UNIT);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PP_CURSOR, 20, L_IS_TEMPLATE);
      DBMS_SQL.COLUMN_VALUE(L_PP_CURSOR, 21, L_SC_LC);
      DBMS_SQL.COLUMN_VALUE(L_PP_CURSOR, 22, L_SC_LC_VERSION);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PP_CURSOR, 23, L_INHERIT_AU);
      DBMS_SQL.COLUMN_VALUE(L_PP_CURSOR, 24, L_PP_CLASS);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PP_CURSOR, 25, L_LOG_HS);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PP_CURSOR, 26, L_ALLOW_MODIFY);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PP_CURSOR, 27, L_ACTIVE);
      DBMS_SQL.COLUMN_VALUE(L_PP_CURSOR, 28, L_LC);
      DBMS_SQL.COLUMN_VALUE(L_PP_CURSOR, 29, L_LC_VERSION);
      DBMS_SQL.COLUMN_VALUE(L_PP_CURSOR, 30, L_SS);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_PP(L_FETCHED_ROWS) := L_PP;
      A_VERSION(L_FETCHED_ROWS) := L_VERSION;
      A_PP_KEY1(L_FETCHED_ROWS) := L_PP_KEY1;
      A_PP_KEY2(L_FETCHED_ROWS) := L_PP_KEY2;
      A_PP_KEY3(L_FETCHED_ROWS) := L_PP_KEY3;
      A_PP_KEY4(L_FETCHED_ROWS) := L_PP_KEY4;
      A_PP_KEY5(L_FETCHED_ROWS) := L_PP_KEY5;
      A_VERSION_IS_CURRENT(L_FETCHED_ROWS) := L_VERSION_IS_CURRENT;
      A_EFFECTIVE_FROM(L_FETCHED_ROWS) := L_EFFECTIVE_FROM;
      A_EFFECTIVE_TILL(L_FETCHED_ROWS) := L_EFFECTIVE_TILL;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;
      A_DESCRIPTION2(L_FETCHED_ROWS) := L_DESCRIPTION2;
      A_UNIT(L_FETCHED_ROWS) := L_UNIT;
      A_FORMAT(L_FETCHED_ROWS) := L_FORMAT;
      A_ALLOW_ANY_PR(L_FETCHED_ROWS) := L_ALLOW_ANY_PR;
      A_NEVER_CREATE_METHODS(L_FETCHED_ROWS) := L_NEVER_CREATE_METHODS;
      A_CONFIRM_ASSIGN(L_FETCHED_ROWS) := L_CONFIRM_ASSIGN;
      A_DELAY(L_FETCHED_ROWS) := L_DELAY;
      A_DELAY_UNIT(L_FETCHED_ROWS) := L_DELAY_UNIT;
      A_IS_TEMPLATE(L_FETCHED_ROWS) := L_IS_TEMPLATE;
      A_SC_LC(L_FETCHED_ROWS) := L_SC_LC;
      A_SC_LC_VERSION(L_FETCHED_ROWS) := L_SC_LC_VERSION;
      A_INHERIT_AU(L_FETCHED_ROWS) := L_INHERIT_AU;
      A_PP_CLASS(L_FETCHED_ROWS) := L_PP_CLASS;
      A_LOG_HS(L_FETCHED_ROWS) := L_LOG_HS;
      A_ALLOW_MODIFY(L_FETCHED_ROWS) := L_ALLOW_MODIFY;
      A_ACTIVE(L_FETCHED_ROWS) := L_ACTIVE;
      A_LC(L_FETCHED_ROWS) := L_LC;
      A_LC_VERSION(L_FETCHED_ROWS) := L_LC_VERSION;
      A_SS(L_FETCHED_ROWS) := L_SS;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_PP_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_PP_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetParameterProfile', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (L_PP_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_PP_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETPARAMETERPROFILE;

FUNCTION GETPPPARAMETER
(A_PP                  OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_VERSION             OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_PP_KEY1             OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_PP_KEY2             OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_PP_KEY3             OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_PP_KEY4             OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_PP_KEY5             OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_PR                  OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_PR_VERSION          OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_DESCRIPTION         OUT    UNAPIGEN.VC40_TABLE_TYPE,  
 A_UNIT                OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_FORMAT              OUT    UNAPIGEN.VC40_TABLE_TYPE,  
 A_NR_MEASUR           OUT    UNAPIGEN.NUM_TABLE_TYPE,   
 A_ALLOW_ADD           OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_IS_PP               OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_FREQ_TP             OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_FREQ_VAL            OUT    UNAPIGEN.NUM_TABLE_TYPE,   
 A_FREQ_UNIT           OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_INVERT_FREQ         OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ST_BASED_FREQ       OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LAST_SCHED          OUT    UNAPIGEN.DATE_TABLE_TYPE,  
 A_LAST_CNT            OUT    UNAPIGEN.NUM_TABLE_TYPE,   
 A_LAST_VAL            OUT    UNAPIGEN.VC40_TABLE_TYPE,  
 A_INHERIT_AU          OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_DELAY               OUT    UNAPIGEN.NUM_TABLE_TYPE,   
 A_DELAY_UNIT          OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_MT                  OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_MT_VERSION          OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_MT_NR_MEASUR        OUT    UNAPIGEN.NUM_TABLE_TYPE,   
 A_NR_OF_ROWS          IN OUT NUMBER,                    
 A_WHERE_CLAUSE        IN     VARCHAR2)                  
RETURN NUMBER IS

L_PP              VARCHAR2(20);
L_VERSION         VARCHAR2(20);
L_PP_KEY1         VARCHAR2(20);
L_PP_KEY2         VARCHAR2(20);
L_PP_KEY3         VARCHAR2(20);
L_PP_KEY4         VARCHAR2(20);
L_PP_KEY5         VARCHAR2(20);
L_PR              VARCHAR2(20);
L_PR_VERSION      VARCHAR2(20);
L_DESCRIPTION     VARCHAR2(40);
L_UNIT            VARCHAR2(20);
L_FORMAT          VARCHAR2(40);
L_SEQ             NUMBER;
L_NR_MEASUR       NUMBER(3);
L_ALLOW_ADD       CHAR(1);
L_IS_PP           CHAR(1);
L_FREQ_TP         CHAR(1);
L_FREQ_VAL        NUMBER;
L_FREQ_UNIT       VARCHAR2(20);
L_INVERT_FREQ     CHAR(1);
L_ST_BASED_FREQ   CHAR(1);
L_LAST_SCHED      TIMESTAMP WITH TIME ZONE;
L_LAST_CNT        NUMBER(5);
L_LAST_VAL        VARCHAR2(40);
L_INHERIT_AU      CHAR(1);
L_DELAY           NUMBER(3);
L_DELAY_UNIT      VARCHAR2(20);
L_MT              VARCHAR2(20);
L_MT_VERSION      VARCHAR2(20);
L_MT_NR_MEASUR    NUMBER(3);
L_PPPR_CURSOR     INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'ORDER BY pp, version, pp_key1, pp_key2, pp_key3, pp_key4, pp_key5, seq'; 
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := ', dd'||UNAPIGEN.P_DD||'.uvpp pp WHERE pp.version_is_current = ''1'' '||
                        'AND pp.pp = pppr.pp '||
                        'AND pp.version = pppr.version '||
                        'AND pp.pp_key1 = pppr.pp_key1 '||
                        'AND pp.pp_key2 = pppr.pp_key2 '||
                        'AND pp.pp_key3 = pppr.pp_key3 '||
                        'AND pp.pp_key4 = pppr.pp_key4 '||
                        'AND pp.pp_key5 = pppr.pp_key5 '||
                        'AND pppr.pp = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                        ''' AND pppr.pp_key1 = '' '' AND pppr.pp_key2 = '' '' AND pppr.pp_key3 = '' '' '||
                        'AND pppr.pp_key4 = '' '' AND pppr.pp_key5 = '' '' '||
                        ' ORDER BY pppr.seq';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_PPPR_CURSOR := DBMS_SQL.OPEN_CURSOR;

   L_SQL_STRING := 'SELECT pppr.pp, pppr.version, pppr.pp_key1, pppr.pp_key2, pppr.pp_key3, '||
                   'pppr.pp_key4, pppr.pp_key5, pppr.pr, pppr.pr_version, pppr.nr_measur, '||
                   'pppr.unit, pppr.format, pppr.allow_add, pppr.is_pp, pppr.freq_tp, ' ||
                   'pppr.freq_val, pppr.freq_unit, pppr.invert_freq, pppr.st_based_freq, ' ||
                   'pppr.last_sched, pppr.last_cnt, pppr.last_val, pppr.inherit_au, pppr.delay, '||
                   'pppr.delay_unit, pppr.mt, pppr.mt_version, pppr.mt_nr_measur ' ||
                   'FROM dd' || UNAPIGEN.P_DD || '.uvpppr pppr ' || L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_PPPR_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_PPPR_CURSOR, 1, L_PP, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PPPR_CURSOR, 2, L_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PPPR_CURSOR, 3, L_PP_KEY1, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PPPR_CURSOR, 4, L_PP_KEY2, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PPPR_CURSOR, 5, L_PP_KEY3, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PPPR_CURSOR, 6, L_PP_KEY4, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PPPR_CURSOR, 7, L_PP_KEY5, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PPPR_CURSOR, 8, L_PR, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PPPR_CURSOR, 9, L_PR_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PPPR_CURSOR, 10, L_NR_MEASUR);
   DBMS_SQL.DEFINE_COLUMN(L_PPPR_CURSOR, 11, L_UNIT, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PPPR_CURSOR, 12, L_FORMAT, 40);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PPPR_CURSOR, 13, L_ALLOW_ADD, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PPPR_CURSOR, 14, L_IS_PP, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PPPR_CURSOR, 15, L_FREQ_TP, 1);
   DBMS_SQL.DEFINE_COLUMN(L_PPPR_CURSOR, 16, L_FREQ_VAL);
   DBMS_SQL.DEFINE_COLUMN(L_PPPR_CURSOR, 17, L_FREQ_UNIT, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PPPR_CURSOR, 18, L_INVERT_FREQ, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PPPR_CURSOR, 19, L_ST_BASED_FREQ, 1);
   DBMS_SQL.DEFINE_COLUMN(L_PPPR_CURSOR, 20, L_LAST_SCHED);
   DBMS_SQL.DEFINE_COLUMN(L_PPPR_CURSOR, 21, L_LAST_CNT);
   DBMS_SQL.DEFINE_COLUMN(L_PPPR_CURSOR, 22, L_LAST_VAL, 40);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_PPPR_CURSOR, 23, L_INHERIT_AU, 1);
   DBMS_SQL.DEFINE_COLUMN(L_PPPR_CURSOR, 24, L_DELAY);
   DBMS_SQL.DEFINE_COLUMN(L_PPPR_CURSOR, 25, L_DELAY_UNIT, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PPPR_CURSOR, 26, L_MT, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PPPR_CURSOR, 27, L_MT_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PPPR_CURSOR, 28, L_MT_NR_MEASUR);

   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_PPPR_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_PPPR_CURSOR, 1, L_PP);
      DBMS_SQL.COLUMN_VALUE(L_PPPR_CURSOR, 2, L_VERSION);
      DBMS_SQL.COLUMN_VALUE(L_PPPR_CURSOR, 3, L_PP_KEY1);
      DBMS_SQL.COLUMN_VALUE(L_PPPR_CURSOR, 4, L_PP_KEY2);
      DBMS_SQL.COLUMN_VALUE(L_PPPR_CURSOR, 5, L_PP_KEY3);
      DBMS_SQL.COLUMN_VALUE(L_PPPR_CURSOR, 6, L_PP_KEY4);
      DBMS_SQL.COLUMN_VALUE(L_PPPR_CURSOR, 7, L_PP_KEY5);
      DBMS_SQL.COLUMN_VALUE(L_PPPR_CURSOR, 8, L_PR);
      DBMS_SQL.COLUMN_VALUE(L_PPPR_CURSOR, 9, L_PR_VERSION);
      DBMS_SQL.COLUMN_VALUE(L_PPPR_CURSOR, 10, L_NR_MEASUR);
      DBMS_SQL.COLUMN_VALUE(L_PPPR_CURSOR, 11, L_UNIT);
      DBMS_SQL.COLUMN_VALUE(L_PPPR_CURSOR, 12, L_FORMAT);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PPPR_CURSOR, 13, L_ALLOW_ADD);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PPPR_CURSOR, 14, L_IS_PP);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PPPR_CURSOR, 15, L_FREQ_TP);
      DBMS_SQL.COLUMN_VALUE(L_PPPR_CURSOR, 16, L_FREQ_VAL);
      DBMS_SQL.COLUMN_VALUE(L_PPPR_CURSOR, 17, L_FREQ_UNIT);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PPPR_CURSOR, 18, L_INVERT_FREQ);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PPPR_CURSOR, 19, L_ST_BASED_FREQ);
      DBMS_SQL.COLUMN_VALUE(L_PPPR_CURSOR, 20, L_LAST_SCHED);
      DBMS_SQL.COLUMN_VALUE(L_PPPR_CURSOR, 21, L_LAST_CNT);
      DBMS_SQL.COLUMN_VALUE(L_PPPR_CURSOR, 22, L_LAST_VAL);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_PPPR_CURSOR, 23, L_INHERIT_AU);
      DBMS_SQL.COLUMN_VALUE(L_PPPR_CURSOR, 24, L_DELAY);
      DBMS_SQL.COLUMN_VALUE(L_PPPR_CURSOR, 25, L_DELAY_UNIT);
      DBMS_SQL.COLUMN_VALUE(L_PPPR_CURSOR, 26, L_MT);
      DBMS_SQL.COLUMN_VALUE(L_PPPR_CURSOR, 27, L_MT_VERSION);
      DBMS_SQL.COLUMN_VALUE(L_PPPR_CURSOR, 28, L_MT_NR_MEASUR);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_PP (L_FETCHED_ROWS) := L_PP;
      A_VERSION (L_FETCHED_ROWS) := L_VERSION;
      A_PP_KEY1 (L_FETCHED_ROWS) := L_PP_KEY1;
      A_PP_KEY2 (L_FETCHED_ROWS) := L_PP_KEY2;
      A_PP_KEY3 (L_FETCHED_ROWS) := L_PP_KEY3;
      A_PP_KEY4 (L_FETCHED_ROWS) := L_PP_KEY4;
      A_PP_KEY5 (L_FETCHED_ROWS) := L_PP_KEY5;
      A_PR (L_FETCHED_ROWS) := L_PR;
      A_PR_VERSION (L_FETCHED_ROWS) := L_PR_VERSION;
      A_NR_MEASUR (L_FETCHED_ROWS) := L_NR_MEASUR;
      A_UNIT(L_FETCHED_ROWS) := L_UNIT;
      A_FORMAT(L_FETCHED_ROWS) := L_FORMAT;
      A_ALLOW_ADD (L_FETCHED_ROWS) := L_ALLOW_ADD;
      A_IS_PP (L_FETCHED_ROWS) := L_IS_PP;
      A_FREQ_TP (L_FETCHED_ROWS) := L_FREQ_TP;
      A_FREQ_VAL (L_FETCHED_ROWS) := L_FREQ_VAL;
      A_FREQ_UNIT (L_FETCHED_ROWS) := L_FREQ_UNIT;
      A_ST_BASED_FREQ (L_FETCHED_ROWS) := L_ST_BASED_FREQ;
      A_INVERT_FREQ (L_FETCHED_ROWS) := L_INVERT_FREQ;
      A_LAST_SCHED (L_FETCHED_ROWS) := TO_CHAR(L_LAST_SCHED);
      A_LAST_CNT (L_FETCHED_ROWS) :=  L_LAST_CNT;
      A_LAST_VAL(L_FETCHED_ROWS) :=  L_LAST_VAL;
      A_INHERIT_AU (L_FETCHED_ROWS) := L_INHERIT_AU;
      A_DELAY (L_FETCHED_ROWS) := L_DELAY;
      A_DELAY_UNIT (L_FETCHED_ROWS) := L_DELAY_UNIT;
      A_MT (L_FETCHED_ROWS) := L_MT;
      A_MT_VERSION (L_FETCHED_ROWS) := L_MT_VERSION;
      A_MT_NR_MEASUR (L_FETCHED_ROWS) := L_MT_NR_MEASUR;

      L_DESCRIPTION := NULL;

      L_SQL_STRING:=   'SELECT description '
                     ||'FROM dd'||UNAPIGEN.P_DD||'.uvpr '
                     ||'WHERE version = NVL(UNAPIGEN.UseVersion(''pr'',:l_pr,:l_pr_version), '
                     ||                    'UNAPIGEN.UseVersion(''pr'',:l_pr,''*'')) '
                     ||'AND pr = :l_pr';
      BEGIN
         EXECUTE IMMEDIATE L_SQL_STRING 
         INTO L_DESCRIPTION
         USING L_PR, L_PR_VERSION, L_PR, L_PR;
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            
            NULL;
      END;

      IF SQL%NOTFOUND THEN
         L_DESCRIPTION := L_PR;
      END IF;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_PPPR_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_PPPR_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME,
                          ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
              'GetPpParameter', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (L_PPPR_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_PPPR_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETPPPARAMETER;

FUNCTION GETPPPARAMETERSPECS
(A_PP           OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_VERSION      OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_PP_KEY1      OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_PP_KEY2      OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_PP_KEY3      OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_PP_KEY4      OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_PP_KEY5      OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_PR           OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_PR_VERSION   OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_LOW_LIMIT    OUT    UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_HIGH_LIMIT   OUT    UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_LOW_SPEC     OUT    UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_HIGH_SPEC    OUT    UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_LOW_DEV      OUT    UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_REL_LOW_DEV  OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_TARGET       OUT    UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_HIGH_DEV     OUT    UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_REL_HIGH_DEV OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_SPEC_SET     IN     CHAR,                      
 A_NR_OF_ROWS   IN OUT NUMBER,                    
 A_WHERE_CLAUSE IN     VARCHAR2)                  
RETURN NUMBER IS

L_PP              VARCHAR2(20);
L_VERSION         VARCHAR2(20);
L_PP_KEY1         VARCHAR2(20);
L_PP_KEY2         VARCHAR2(20);
L_PP_KEY3         VARCHAR2(20);
L_PP_KEY4         VARCHAR2(20);
L_PP_KEY5         VARCHAR2(20);
L_PR              VARCHAR2(20);
L_PR_VERSION      VARCHAR2(20);
L_SEQ             NUMBER(5);
L_LOW_LIMIT       NUMBER;
L_HIGH_LIMIT      NUMBER;
L_LOW_SPEC        NUMBER;
L_HIGH_SPEC       NUMBER;
L_LOW_DEV         NUMBER;
L_REL_LOW_DEV     CHAR(1);
L_TARGET          NUMBER;
L_HIGH_DEV        NUMBER;
L_REL_HIGH_DEV    CHAR(1);
L_PPPR_CURSOR     INTEGER;

CURSOR L_PPSPA_CURSOR (C_PR  VARCHAR2, C_PR_VERSION VARCHAR2, C_PP  VARCHAR2, C_VERSION VARCHAR2, 
                       C_PP_KEY1 VARCHAR2, C_PP_KEY2 VARCHAR2, C_PP_KEY3 VARCHAR2, 
                       C_PP_KEY4 VARCHAR2, C_PP_KEY5 VARCHAR2, C_SEQ  NUMBER)
IS SELECT LOW_LIMIT, HIGH_LIMIT, LOW_SPEC, HIGH_SPEC,
          LOW_DEV, REL_LOW_DEV, TARGET, HIGH_DEV, REL_HIGH_DEV
   FROM  UTPPSPA
   WHERE PR = C_PR AND
         PR_VERSION = C_PR_VERSION AND
         PP = C_PP AND
         VERSION = C_VERSION AND
         PP_KEY1 = C_PP_KEY1 AND
         PP_KEY2 = C_PP_KEY2 AND
         PP_KEY3 = C_PP_KEY3 AND
         PP_KEY4 = C_PP_KEY4 AND
         PP_KEY5 = C_PP_KEY5 AND
         SEQ = C_SEQ;
         
CURSOR L_PPSPB_CURSOR (C_PR  VARCHAR2, C_PR_VERSION VARCHAR2, C_PP  VARCHAR2, C_VERSION VARCHAR2, 
                       C_PP_KEY1 VARCHAR2, C_PP_KEY2 VARCHAR2, C_PP_KEY3 VARCHAR2, 
                       C_PP_KEY4 VARCHAR2, C_PP_KEY5 VARCHAR2, C_SEQ  NUMBER)
IS SELECT LOW_LIMIT, HIGH_LIMIT, LOW_SPEC, HIGH_SPEC,
          LOW_DEV, REL_LOW_DEV, TARGET, HIGH_DEV, REL_HIGH_DEV
   FROM  UTPPSPB
   WHERE PR = C_PR AND
         PR_VERSION = C_PR_VERSION AND
         PP = C_PP AND
         VERSION = C_VERSION AND
         PP_KEY1 = C_PP_KEY1 AND
         PP_KEY2 = C_PP_KEY2 AND
         PP_KEY3 = C_PP_KEY3 AND
         PP_KEY4 = C_PP_KEY4 AND
         PP_KEY5 = C_PP_KEY5 AND
         SEQ = C_SEQ;

CURSOR L_PPSPC_CURSOR (C_PR  VARCHAR2, C_PR_VERSION VARCHAR2, C_PP  VARCHAR2, C_VERSION VARCHAR2, 
                       C_PP_KEY1 VARCHAR2, C_PP_KEY2 VARCHAR2, C_PP_KEY3 VARCHAR2, 
                       C_PP_KEY4 VARCHAR2, C_PP_KEY5 VARCHAR2, C_SEQ  NUMBER)
IS SELECT  LOW_LIMIT, HIGH_LIMIT, LOW_SPEC, HIGH_SPEC,
           LOW_DEV, REL_LOW_DEV, TARGET, HIGH_DEV, REL_HIGH_DEV
   FROM  UTPPSPC
   WHERE PR = C_PR AND
         PR_VERSION = C_PR_VERSION AND
         PP = C_PP AND
         VERSION = C_VERSION AND
         PP_KEY1 = C_PP_KEY1 AND
         PP_KEY2 = C_PP_KEY2 AND
         PP_KEY3 = C_PP_KEY3 AND
         PP_KEY4 = C_PP_KEY4 AND
         PP_KEY5 = C_PP_KEY5 AND
         SEQ = C_SEQ;

BEGIN

   IF NVL(A_NR_OF_ROWS, 0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'ORDER BY pp, version, pp_key1, pp_key2, pp_key3, pp_key4, pp_key5, seq'; 
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := ', dd'||UNAPIGEN.P_DD||'.uvpp pp WHERE pp.version_is_current = ''1'' '||
                        'AND pp.pp = pppr.pp '||
                        'AND pp.version = pppr.version '||
                        'AND pp.pp_key1 = pppr.pp_key1 '||
                        'AND pp.pp_key2 = pppr.pp_key2 '||
                        'AND pp.pp_key3 = pppr.pp_key3 '||
                        'AND pp.pp_key4 = pppr.pp_key4 '||
                        'AND pp.pp_key5 = pppr.pp_key5 '||
                        'AND pppr.pp = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                        ''' ORDER BY pppr.seq';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   IF (A_SPEC_SET) NOT IN ('a', 'b', 'c') THEN
      RETURN (UNAPIGEN.DBERR_SPECSET);
   END IF;

   L_PPPR_CURSOR := DBMS_SQL.OPEN_CURSOR;

   L_SQL_STRING := 'SELECT pppr.pp, pppr.version, pppr.pp_key1, pppr.pp_key2, pppr.pp_key3, '||
                   'pppr.pp_key4, pppr.pp_key5, pppr.pr, pppr.pr_version, pppr.seq FROM dd' || 
                   UNAPIGEN.P_DD || '.uvpppr pppr ' || L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_PPPR_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_PPPR_CURSOR, 1,  L_PP, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PPPR_CURSOR, 2,  L_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PPPR_CURSOR, 3,  L_PP_KEY1, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PPPR_CURSOR, 4,  L_PP_KEY2, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PPPR_CURSOR, 5,  L_PP_KEY3, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PPPR_CURSOR, 6,  L_PP_KEY4, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PPPR_CURSOR, 7,  L_PP_KEY5, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PPPR_CURSOR, 8,  L_PR, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PPPR_CURSOR, 9,  L_PR_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PPPR_CURSOR, 10, L_SEQ);

   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_PPPR_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_PPPR_CURSOR, 1,  L_PP);
      DBMS_SQL.COLUMN_VALUE(L_PPPR_CURSOR, 2,  L_VERSION);
      DBMS_SQL.COLUMN_VALUE(L_PPPR_CURSOR, 3,  L_PP_KEY1);
      DBMS_SQL.COLUMN_VALUE(L_PPPR_CURSOR, 4,  L_PP_KEY2);
      DBMS_SQL.COLUMN_VALUE(L_PPPR_CURSOR, 5,  L_PP_KEY3);
      DBMS_SQL.COLUMN_VALUE(L_PPPR_CURSOR, 6,  L_PP_KEY4);
      DBMS_SQL.COLUMN_VALUE(L_PPPR_CURSOR, 7,  L_PP_KEY5);
      DBMS_SQL.COLUMN_VALUE(L_PPPR_CURSOR, 8,  L_PR);
      DBMS_SQL.COLUMN_VALUE(L_PPPR_CURSOR, 9,  L_PR_VERSION);
      DBMS_SQL.COLUMN_VALUE(L_PPPR_CURSOR, 10, L_SEQ);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_PP (L_FETCHED_ROWS) := L_PP;
      A_VERSION (L_FETCHED_ROWS) := L_VERSION;
      A_PP_KEY1 (L_FETCHED_ROWS) := L_PP_KEY1;
      A_PP_KEY2 (L_FETCHED_ROWS) := L_PP_KEY2;
      A_PP_KEY3 (L_FETCHED_ROWS) := L_PP_KEY3;
      A_PP_KEY4 (L_FETCHED_ROWS) := L_PP_KEY4;
      A_PP_KEY5 (L_FETCHED_ROWS) := L_PP_KEY5;
      A_PR (L_FETCHED_ROWS) := L_PR;
      A_PR_VERSION (L_FETCHED_ROWS) := L_PR_VERSION;

      L_LOW_LIMIT := NULL;
      L_HIGH_LIMIT := NULL;
      L_LOW_SPEC := NULL;
      L_HIGH_SPEC := NULL;
      L_LOW_DEV := NULL;
      L_TARGET := NULL;
      L_HIGH_DEV := NULL;
      L_REL_LOW_DEV := 0;
      L_REL_HIGH_DEV := 0;

      IF A_SPEC_SET = 'a' THEN
         
         OPEN L_PPSPA_CURSOR (L_PR, L_PR_VERSION, L_PP, L_VERSION, L_PP_KEY1, L_PP_KEY2, 
                              L_PP_KEY3, L_PP_KEY4, L_PP_KEY5, L_SEQ);
         FETCH L_PPSPA_CURSOR
         INTO L_LOW_LIMIT,L_HIGH_LIMIT,L_LOW_SPEC, L_HIGH_SPEC, L_LOW_DEV,
              L_REL_LOW_DEV, L_TARGET,L_HIGH_DEV,L_REL_HIGH_DEV;
         CLOSE L_PPSPA_CURSOR;

      ELSIF A_SPEC_SET = 'b' THEN
         
         OPEN L_PPSPB_CURSOR (L_PR, L_PR_VERSION, L_PP, L_VERSION, L_PP_KEY1, L_PP_KEY2, 
                              L_PP_KEY3, L_PP_KEY4, L_PP_KEY5, L_SEQ);
         FETCH L_PPSPB_CURSOR
         INTO L_LOW_LIMIT,L_HIGH_LIMIT,L_LOW_SPEC, L_HIGH_SPEC, L_LOW_DEV,
              L_REL_LOW_DEV, L_TARGET,L_HIGH_DEV, L_REL_HIGH_DEV;
         CLOSE L_PPSPB_CURSOR;

      ELSE
         
         OPEN L_PPSPC_CURSOR (L_PR, L_PR_VERSION, L_PP, L_VERSION, L_PP_KEY1, L_PP_KEY2, 
                              L_PP_KEY3, L_PP_KEY4, L_PP_KEY5, L_SEQ);
         FETCH L_PPSPC_CURSOR
         INTO L_LOW_LIMIT,L_HIGH_LIMIT,L_LOW_SPEC, L_HIGH_SPEC, L_LOW_DEV,
              L_REL_LOW_DEV, L_TARGET,L_HIGH_DEV, L_REL_HIGH_DEV;
         CLOSE L_PPSPC_CURSOR;
         
      END IF;

      A_LOW_LIMIT(L_FETCHED_ROWS) := L_LOW_LIMIT;
      A_HIGH_LIMIT(L_FETCHED_ROWS) := L_HIGH_LIMIT;
      A_LOW_SPEC(L_FETCHED_ROWS) := L_LOW_SPEC;
      A_HIGH_SPEC(L_FETCHED_ROWS) := L_HIGH_SPEC;
      A_LOW_DEV(L_FETCHED_ROWS) := L_LOW_DEV;
      A_REL_LOW_DEV(L_FETCHED_ROWS) := L_REL_LOW_DEV;
      A_TARGET(L_FETCHED_ROWS) := L_TARGET;
      A_HIGH_DEV(L_FETCHED_ROWS) := L_HIGH_DEV;
      A_REL_HIGH_DEV(L_FETCHED_ROWS) := L_REL_HIGH_DEV;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_PPPR_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_PPPR_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
              'GetPpParameterSpecs', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (L_PPPR_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_PPPR_CURSOR);
      END IF;
      IF L_PPSPA_CURSOR%ISOPEN  THEN
         CLOSE L_PPSPA_CURSOR;
      END IF;
      IF L_PPSPB_CURSOR%ISOPEN  THEN
         CLOSE L_PPSPB_CURSOR;
      END IF;
      IF L_PPSPC_CURSOR%ISOPEN  THEN
         CLOSE L_PPSPC_CURSOR;
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETPPPARAMETERSPECS;

FUNCTION DELETEPARAMETERPROFILE
(A_PP                  IN     VARCHAR2,                
 A_VERSION             IN     VARCHAR2,                
 A_PP_KEY1             IN     VARCHAR2,                
 A_PP_KEY2             IN     VARCHAR2,                
 A_PP_KEY3             IN     VARCHAR2,                
 A_PP_KEY4             IN     VARCHAR2,                
 A_PP_KEY5             IN     VARCHAR2,                
 A_MODIFY_REASON       IN     VARCHAR2)                
RETURN NUMBER IS

L_ALLOW_MODIFY CHAR(1);
L_ACTIVE       CHAR(1);
L_LOG_HS       CHAR(1);
L_LC           CHAR(2);
L_LC_VERSION   CHAR(20);
L_SS           VARCHAR2(2);

CURSOR L_STPP_CURSOR(C_PP VARCHAR2, C_VERSION VARCHAR2, C_PP_KEY1 VARCHAR2, C_PP_KEY2 VARCHAR2, 
                     C_PP_KEY3 VARCHAR2, C_PP_KEY4 VARCHAR2, C_PP_KEY5 VARCHAR2) IS
SELECT UTSTPP.PP, UTST.LC, UTST.LC_VERSION, UTST.ST, UTST.VERSION, UTST.SS, UTST.LOG_HS
FROM   UTST, UTSTPP
WHERE  UTSTPP.PP         = C_PP           AND
       UNAPIGEN.USEPPVERSION(UTSTPP.PP,UTSTPP.PP_VERSION,UTSTPP.PP_KEY1,UTSTPP.PP_KEY2,
                             UTSTPP.PP_KEY3,UTSTPP.PP_KEY4,UTSTPP.PP_KEY5) = C_VERSION      AND
       UTSTPP.PP_KEY1    = C_PP_KEY1      AND
       UTSTPP.PP_KEY2    = C_PP_KEY2      AND
       UTSTPP.PP_KEY3    = C_PP_KEY3      AND
       UTSTPP.PP_KEY4    = C_PP_KEY4      AND
       UTSTPP.PP_KEY5    = C_PP_KEY5      AND
       UTST.ST           = UTSTPP.ST      AND
       UTST.VERSION      = UTSTPP.VERSION;

CURSOR L_RTPP_CURSOR(C_PP VARCHAR2, C_VERSION VARCHAR2, C_PP_KEY1 VARCHAR2, C_PP_KEY2 VARCHAR2, 
                     C_PP_KEY3 VARCHAR2, C_PP_KEY4 VARCHAR2, C_PP_KEY5 VARCHAR2) IS
SELECT UTRTPP.PP, UTRT.LC, UTRT.LC_VERSION, UTRT.RT, UTRT.VERSION, UTRT.SS, UTRT.LOG_HS
FROM   UTRT, UTRTPP
WHERE  UTRTPP.PP         = C_PP           AND
       UNAPIGEN.USEPPVERSION(UTRTPP.PP,UTRTPP.PP_VERSION,UTRTPP.PP_KEY1,UTRTPP.PP_KEY2,
                             UTRTPP.PP_KEY3,UTRTPP.PP_KEY4,UTRTPP.PP_KEY5) = C_VERSION      AND
       UTRTPP.PP_KEY1    = C_PP_KEY1      AND
       UTRTPP.PP_KEY2    = C_PP_KEY2      AND
       UTRTPP.PP_KEY3    = C_PP_KEY3      AND
       UTRTPP.PP_KEY4    = C_PP_KEY4      AND
       UTRTPP.PP_KEY5    = C_PP_KEY5      AND
       UTRT.RT           = UTRTPP.RT      AND
       UTRT.VERSION      = UTRTPP.VERSION;

CURSOR L_PPINPPPR_CURSOR(C_PP VARCHAR2, C_VERSION VARCHAR2, C_PP_KEY1 VARCHAR2, C_PP_KEY2 VARCHAR2, 
                     C_PP_KEY3 VARCHAR2, C_PP_KEY4 VARCHAR2, C_PP_KEY5 VARCHAR2) IS
SELECT UTPPPR.PR, UTPP.LC, UTPP.LC_VERSION, UTPP.PP, UTPP.VERSION, UTPP.SS, UTPP.LOG_HS
FROM   UTPP, UTPPPR
WHERE  UTPPPR.PR         = C_PP           AND
       UNAPIGEN.USEPPVERSION(UTPPPR.PR,UTPPPR.PR_VERSION,UTPPPR.PP_KEY1,UTPPPR.PP_KEY2,
                             UTPPPR.PP_KEY3,UTPPPR.PP_KEY4,UTPPPR.PP_KEY5) = C_VERSION      AND
       UTPPPR.PP_KEY1    = C_PP_KEY1      AND
       UTPPPR.PP_KEY2    = C_PP_KEY2      AND
       UTPPPR.PP_KEY3    = C_PP_KEY3      AND
       UTPPPR.PP_KEY4    = C_PP_KEY4      AND
       UTPPPR.PP_KEY5    = C_PP_KEY5      AND
       UTPP.PP           = UTPPPR.PP      AND
       UTPP.VERSION      = UTPPPR.VERSION AND
       UTPP.PP_KEY1      = UTPPPR.PP_KEY1 AND
       UTPP.PP_KEY2      = UTPPPR.PP_KEY2 AND
       UTPP.PP_KEY3      = UTPPPR.PP_KEY3 AND
       UTPP.PP_KEY4      = UTPPPR.PP_KEY4 AND
       UTPP.PP_KEY5      = UTPPPR.PP_KEY5 AND
       UTPPPR.IS_PP      = '1';

CURSOR L_PTCELLPP_CURSOR(C_PP VARCHAR2, C_VERSION VARCHAR2, C_PP_KEY1 VARCHAR2, C_PP_KEY2 VARCHAR2, 
                         C_PP_KEY3 VARCHAR2, C_PP_KEY4 VARCHAR2, C_PP_KEY5 VARCHAR2) IS
SELECT UTPTCELLPP.PP, UTPT.LC, UTPT.LC_VERSION, UTPT.PT, UTPT.VERSION, UTPT.SS, UTPT.LOG_HS
FROM   UTPT, UTPTCELLPP
WHERE  UTPTCELLPP.PP         = C_PP           AND
       UNAPIGEN.USEPPVERSION(UTPTCELLPP.PP,UTPTCELLPP.PP_VERSION,UTPTCELLPP.PP_KEY1,UTPTCELLPP.PP_KEY2,
                             UTPTCELLPP.PP_KEY3,UTPTCELLPP.PP_KEY4,UTPTCELLPP.PP_KEY5) = C_VERSION      AND
       UTPTCELLPP.PP_KEY1    = C_PP_KEY1      AND
       UTPTCELLPP.PP_KEY2    = C_PP_KEY2      AND
       UTPTCELLPP.PP_KEY3    = C_PP_KEY3      AND
       UTPTCELLPP.PP_KEY4    = C_PP_KEY4      AND
       UTPTCELLPP.PP_KEY5    = C_PP_KEY5      AND
       UTPT.PT               = UTPTCELLPP.PT  AND
       UTPT.VERSION          = UTPTCELLPP.VERSION;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL (A_PP, ' ')= ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL (A_VERSION, ' ')= ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   IF A_PP_KEY1 IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOPPKEYID;
      RAISE STPERROR;
   END IF;

   IF A_PP_KEY2 IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOPPKEYID;
      RAISE STPERROR;
   END IF;

   IF A_PP_KEY3 IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOPPKEYID;
      RAISE STPERROR;
   END IF;

   IF A_PP_KEY4 IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOPPKEYID;
      RAISE STPERROR;
   END IF;

   IF A_PP_KEY5 IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOPPKEYID;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIPPP.GETPPAUTHORISATION(A_PP, A_VERSION, A_PP_KEY1, A_PP_KEY2, A_PP_KEY3, 
                                             A_PP_KEY4, A_PP_KEY5, L_LC, L_LC_VERSION, L_SS,
                                             L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   
   IF UNAPIGEN.ISSYSTEM21CFR11COMPLIANT = UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTALLOWEDIN21CFR11;
      RAISE STPERROR;
   END IF;

   DELETE FROM UTPPHS
   WHERE PP = A_PP
     AND VERSION = A_VERSION
     AND PP_KEY1 = A_PP_KEY1
     AND PP_KEY2 = A_PP_KEY2
     AND PP_KEY3 = A_PP_KEY3
     AND PP_KEY4 = A_PP_KEY4
     AND PP_KEY5 = A_PP_KEY5;

   DELETE FROM UTPPAU
   WHERE PP = A_PP
     AND VERSION = A_VERSION
     AND PP_KEY1 = A_PP_KEY1
     AND PP_KEY2 = A_PP_KEY2
     AND PP_KEY3 = A_PP_KEY3
     AND PP_KEY4 = A_PP_KEY4
     AND PP_KEY5 = A_PP_KEY5;

   DELETE FROM UTPPSPA
   WHERE PP = A_PP
     AND VERSION = A_VERSION
     AND PP_KEY1 = A_PP_KEY1
     AND PP_KEY2 = A_PP_KEY2
     AND PP_KEY3 = A_PP_KEY3
     AND PP_KEY4 = A_PP_KEY4
     AND PP_KEY5 = A_PP_KEY5;

   DELETE FROM UTPPSPB
   WHERE PP = A_PP
     AND VERSION = A_VERSION
     AND PP_KEY1 = A_PP_KEY1
     AND PP_KEY2 = A_PP_KEY2
     AND PP_KEY3 = A_PP_KEY3
     AND PP_KEY4 = A_PP_KEY4
     AND PP_KEY5 = A_PP_KEY5;

   DELETE FROM UTPPSPC
   WHERE PP = A_PP
     AND VERSION = A_VERSION
     AND PP_KEY1 = A_PP_KEY1
     AND PP_KEY2 = A_PP_KEY2
     AND PP_KEY3 = A_PP_KEY3
     AND PP_KEY4 = A_PP_KEY4
     AND PP_KEY5 = A_PP_KEY5;

   DELETE FROM UTPPPR
   WHERE PP = A_PP
     AND VERSION = A_VERSION
     AND PP_KEY1 = A_PP_KEY1
     AND PP_KEY2 = A_PP_KEY2
     AND PP_KEY3 = A_PP_KEY3
     AND PP_KEY4 = A_PP_KEY4
     AND PP_KEY5 = A_PP_KEY5;

   DELETE FROM UTPPPRAU
   WHERE PP = A_PP
     AND VERSION = A_VERSION
     AND PP_KEY1 = A_PP_KEY1
     AND PP_KEY2 = A_PP_KEY2
     AND PP_KEY3 = A_PP_KEY3
     AND PP_KEY4 = A_PP_KEY4
     AND PP_KEY5 = A_PP_KEY5;
     
   L_EVENT_TP := 'UsedObjectDeleted';
   FOR L_ST_REC IN L_STPP_CURSOR(A_PP, A_VERSION, A_PP_KEY1, A_PP_KEY2, A_PP_KEY3, 
                                 A_PP_KEY4, A_PP_KEY5) LOOP
      DELETE FROM UTSTPPAU
      WHERE ST = L_ST_REC.ST
        AND VERSION = L_ST_REC.VERSION
        AND PP = A_PP
        AND UNAPIGEN.USEPPVERSION(PP,PP_VERSION,PP_KEY1,PP_KEY2,PP_KEY3,PP_KEY4,PP_KEY5) = A_VERSION
        AND PP_KEY1 = A_PP_KEY1
        AND PP_KEY2 = A_PP_KEY2
        AND PP_KEY3 = A_PP_KEY3
        AND PP_KEY4 = A_PP_KEY4
        AND PP_KEY5 = A_PP_KEY5;

      DELETE FROM UTSTPP
      WHERE ST = L_ST_REC.ST
        AND VERSION = L_ST_REC.VERSION
        AND PP = A_PP
        AND UNAPIGEN.USEPPVERSION(PP,PP_VERSION,PP_KEY1,PP_KEY2,PP_KEY3,PP_KEY4,PP_KEY5) = A_VERSION
        AND PP_KEY1 = A_PP_KEY1
        AND PP_KEY2 = A_PP_KEY2
        AND PP_KEY3 = A_PP_KEY3
        AND PP_KEY4 = A_PP_KEY4
        AND PP_KEY5 = A_PP_KEY5;

      L_EV_SEQ_NR := -1;
      L_EV_DETAILS := 'version='||L_ST_REC.VERSION;
      L_RESULT := UNAPIEV.INSERTEVENT('DeleteParameterProfile', UNAPIGEN.P_EVMGR_NAME, 'st',
                                      L_ST_REC.ST, L_ST_REC.LC, L_ST_REC.LC_VERSION, L_ST_REC.SS,
                                      L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);
      IF L_RESULT <> 0 THEN
         UNAPIGEN.P_TXN_ERROR := L_RESULT;
         RAISE STPERROR;
      END IF;

      IF L_ST_REC.LOG_HS = '1' THEN
         INSERT INTO UTSTHS(ST, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                            WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES(L_ST_REC.ST, L_ST_REC.VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 
                L_EVENT_TP, 
                'parameter profile "'||A_PP||'" is deleted and removed from sample type <<'||L_ST_REC.ST||'>>', 
                CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   END LOOP;

   L_EVENT_TP := 'UsedObjectDeleted';
   FOR L_RT_REC IN L_RTPP_CURSOR(A_PP, A_VERSION, A_PP_KEY1, A_PP_KEY2, A_PP_KEY3, 
                                 A_PP_KEY4, A_PP_KEY5) LOOP
      DELETE FROM UTRTPPAU
      WHERE RT = L_RT_REC.RT
        AND VERSION = L_RT_REC.VERSION
        AND PP = A_PP
        AND UNAPIGEN.USEPPVERSION(PP,PP_VERSION,PP_KEY1,PP_KEY2,PP_KEY3,PP_KEY4,PP_KEY5) = A_VERSION
        AND PP_KEY1 = A_PP_KEY1
        AND PP_KEY2 = A_PP_KEY2
        AND PP_KEY3 = A_PP_KEY3
        AND PP_KEY4 = A_PP_KEY4
        AND PP_KEY5 = A_PP_KEY5;

      DELETE FROM UTRTPP
      WHERE RT = L_RT_REC.RT 
        AND VERSION = L_RT_REC.VERSION
        AND PP = A_PP
        AND UNAPIGEN.USEPPVERSION(PP,PP_VERSION,PP_KEY1,PP_KEY2,PP_KEY3,PP_KEY4,PP_KEY5) = A_VERSION
        AND PP_KEY1 = A_PP_KEY1
        AND PP_KEY2 = A_PP_KEY2
        AND PP_KEY3 = A_PP_KEY3
        AND PP_KEY4 = A_PP_KEY4
        AND PP_KEY5 = A_PP_KEY5;

      L_EV_SEQ_NR := -1;
      L_EV_DETAILS := 'version='||L_RT_REC.VERSION;
      L_RESULT := UNAPIEV.INSERTEVENT('DeleteParameterProfile', UNAPIGEN.P_EVMGR_NAME, 'rt',
                                      L_RT_REC.RT, L_RT_REC.LC, L_RT_REC.LC_VERSION, L_RT_REC.SS,
                                      L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);
      IF L_RESULT <> 0 THEN
         UNAPIGEN.P_TXN_ERROR := L_RESULT;
         RAISE STPERROR;
      END IF;

      IF L_RT_REC.LOG_HS = '1' THEN
         INSERT INTO UTRTHS(RT, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                            WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES  (L_RT_REC.RT, L_RT_REC.VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 
                  L_EVENT_TP, 
                  'parameter profile "'||A_PP||'" is deleted and removed from request type <<'||L_RT_REC.RT||'>>', 
                  CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   END LOOP;

   L_EVENT_TP := 'UsedObjectDeleted';
   FOR L_PPINPPPR_REC IN L_PPINPPPR_CURSOR(A_PP, A_VERSION, A_PP_KEY1, A_PP_KEY2, A_PP_KEY3, 
                                           A_PP_KEY4, A_PP_KEY5) LOOP
      DELETE FROM UTPPPR
      WHERE PP = L_PPINPPPR_REC.PP
        AND VERSION = L_PPINPPPR_REC.VERSION
        AND PR = A_PP
        AND UNAPIGEN.USEPPVERSION(PR,PR_VERSION,PP_KEY1,PP_KEY2,PP_KEY3,PP_KEY4,PP_KEY5) = A_VERSION
        AND PP_KEY1 = A_PP_KEY1   
        AND PP_KEY2 = A_PP_KEY2   
        AND PP_KEY3 = A_PP_KEY3
        AND PP_KEY4 = A_PP_KEY4
        AND PP_KEY5 = A_PP_KEY5
        AND IS_PP = '1';

      L_EV_SEQ_NR := -1;
      L_EV_DETAILS := 'version='||L_PPINPPPR_REC.VERSION||'#pp_key1='||A_PP_KEY1||'#pp_key2='||A_PP_KEY2||
                      '#pp_key3='||A_PP_KEY3||'#pp_key4='||A_PP_KEY4||'#pp_key5='||A_PP_KEY5;
      L_RESULT := UNAPIEV.INSERTEVENT('DeleteParameterProfile', UNAPIGEN.P_EVMGR_NAME, 'pp', 
                                      L_PPINPPPR_REC.PP, L_PPINPPPR_REC.LC, L_PPINPPPR_REC.LC_VERSION, 
                                      L_PPINPPPR_REC.SS, L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);
      IF L_RESULT <> 0 THEN
         UNAPIGEN.P_TXN_ERROR := L_RESULT;
         RAISE STPERROR;
      END IF;

      IF L_PPINPPPR_REC.LOG_HS = '1' THEN
         INSERT INTO UTPPHS(PP, VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, WHO, WHO_DESCRIPTION, 
                            WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES  (L_PPINPPPR_REC.PP, L_PPINPPPR_REC.VERSION, A_PP_KEY1, A_PP_KEY2, A_PP_KEY3, A_PP_KEY4, A_PP_KEY5, 
                  UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                  'parameter profile "'||A_PP||'" is deleted and removed from parameter profile <<'||L_PPINPPPR_REC.PP||'>>', 
                  CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   END LOOP;

   L_EVENT_TP := 'UsedObjectDeleted';
   FOR L_PT_REC IN L_PTCELLPP_CURSOR(A_PP, A_VERSION, A_PP_KEY1, A_PP_KEY2, A_PP_KEY3, A_PP_KEY4, A_PP_KEY5) LOOP
      DELETE FROM UTPTCELLPP
      WHERE PT      = L_PT_REC.PT
        AND VERSION = L_PT_REC.VERSION
        AND PP      = A_PP
        AND UNAPIGEN.USEPPVERSION(PP,PP_VERSION,PP_KEY1,PP_KEY2,PP_KEY3,PP_KEY4,PP_KEY5) = A_VERSION
        AND PP_KEY1 = A_PP_KEY1
        AND PP_KEY2 = A_PP_KEY2
        AND PP_KEY3 = A_PP_KEY3
        AND PP_KEY4 = A_PP_KEY4
        AND PP_KEY5 = A_PP_KEY5;

      L_EV_SEQ_NR := -1;
      L_EV_DETAILS := 'version='||L_PT_REC.VERSION;
      L_RESULT := UNAPIEV.INSERTEVENT('DeleteParameterProfile', UNAPIGEN.P_EVMGR_NAME, 'pt',
                                      L_PT_REC.PT, L_PT_REC.LC, L_PT_REC.LC_VERSION, L_PT_REC.SS,
                                      L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);
      IF L_RESULT <> 0 THEN
         UNAPIGEN.P_TXN_ERROR := L_RESULT;
         RAISE STPERROR;
      END IF;

      IF L_PT_REC.LOG_HS = '1' THEN
         INSERT INTO UTPTHS(PT, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                            WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES(L_PT_REC.PT, L_PT_REC.VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                'parameter profile "'||A_PP||'" is deleted and removed from the cells of protocol <<'||L_PT_REC.PT||'>>', 
                CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   END LOOP;

   DELETE FROM UTEVTIMED
   WHERE OBJECT_TP = 'pp' 
     AND OBJECT_ID = A_PP 
     AND INSTR(EV_DETAILS,'version='||A_VERSION||'#pp_key1='||A_PP_KEY1||'#pp_key2='||A_PP_KEY2||
         '#pp_key3='||A_PP_KEY3||'#pp_key4='||A_PP_KEY4||'#pp_key5='||A_PP_KEY5) <> 0;

   DELETE FROM UTEVRULESDELAYED
   WHERE OBJECT_TP = 'pp' 
     AND OBJECT_ID = A_PP 
     AND INSTR(EV_DETAILS,'version='||A_VERSION||'#pp_key1='||A_PP_KEY1||'#pp_key2='||A_PP_KEY2||
         '#pp_key3='||A_PP_KEY3||'#pp_key4='||A_PP_KEY4||'#pp_key5='||A_PP_KEY5) <> 0;

   DELETE FROM UTPP
   WHERE PP = A_PP
     AND VERSION = A_VERSION
     AND PP_KEY1 = A_PP_KEY1
     AND PP_KEY2 = A_PP_KEY2
     AND PP_KEY3 = A_PP_KEY3
     AND PP_KEY4 = A_PP_KEY4
     AND PP_KEY5 = A_PP_KEY5;

   L_EVENT_TP := 'ObjectDeleted';
   L_EV_SEQ_NR := -1;
   L_EV_DETAILS := 'version='||A_VERSION||'#pp_key1='||A_PP_KEY1||'#pp_key2='||A_PP_KEY2||
                   '#pp_key3='||A_PP_KEY3||'#pp_key4='||A_PP_KEY4||'#pp_key5='||A_PP_KEY5;
   L_RESULT := UNAPIEV.INSERTEVENT('DeleteParameterProfile',
                                   UNAPIGEN.P_EVMGR_NAME, 'pp', A_PP, L_LC, L_LC_VERSION, 
                                   L_SS, L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('DeleteParameterProfile', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'DeleteParameterProfile'));
END DELETEPARAMETERPROFILE;

FUNCTION SAVEPARAMETERPROFILE
(A_PP                           IN     VARCHAR2,                 
 A_VERSION                      IN     VARCHAR2,                 
 A_PP_KEY1                      IN     VARCHAR2,                 
 A_PP_KEY2                      IN     VARCHAR2,                 
 A_PP_KEY3                      IN     VARCHAR2,                 
 A_PP_KEY4                      IN     VARCHAR2,                 
 A_PP_KEY5                      IN     VARCHAR2,                 
 A_VERSION_IS_CURRENT           IN     CHAR,                     
 A_EFFECTIVE_FROM               IN     DATE,                     
 A_EFFECTIVE_TILL               IN     DATE,                     
 A_DESCRIPTION                  IN     VARCHAR2,                 
 A_DESCRIPTION2                 IN     VARCHAR2,                 
 A_UNIT                         IN     VARCHAR2,                 
 A_FORMAT                       IN     VARCHAR2,                 
 A_CONFIRM_ASSIGN               IN     CHAR,                     
 A_ALLOW_ANY_PR                 IN     CHAR,                     
 A_NEVER_CREATE_METHODS         IN     CHAR,                     
 A_DELAY                        IN     NUMBER,                   
 A_DELAY_UNIT                   IN     VARCHAR2,                 
 A_IS_TEMPLATE                  IN     CHAR,                     
 A_SC_LC                        IN     VARCHAR2,                 
 A_SC_LC_VERSION                IN     VARCHAR2,                 
 A_INHERIT_AU                   IN     CHAR,                     
 A_PP_CLASS                     IN     VARCHAR2,                 
 A_LOG_HS                       IN     CHAR,                     
 A_LC                           IN     VARCHAR2,                 
 A_LC_VERSION                   IN     VARCHAR2,                 
 A_MODIFY_REASON                IN     VARCHAR2)                 
RETURN NUMBER IS

L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);
L_LOG_HS       CHAR(1);
L_ALLOW_MODIFY CHAR(1);
L_ACTIVE       CHAR(1);
L_INSERT       BOOLEAN;


L_ST               VARCHAR2(20);
L_ST_VERSION       VARCHAR2(20);
L_ALREADY_PRESENT  BOOLEAN;
L_ST_LC            VARCHAR2(2);
L_ST_LC_VERSION    VARCHAR2(20);
L_ST_SS            VARCHAR2(2);
L_ST_LOG_HS        CHAR(1);
L_ST_ALLOW_MODIFY  CHAR(1);
L_ST_ACTIVE        CHAR(1);
L_NEW_ST_VERSION   VARCHAR2(20);

CURSOR L_STPP_CURSOR (A_ST VARCHAR2, A_VERSION VARCHAR2, 
                      A_PP VARCHAR2, A_PP_KEY1 VARCHAR2, A_PP_KEY2 VARCHAR2, A_PP_KEY3 VARCHAR2, A_PP_KEY4 VARCHAR2, A_PP_KEY5 VARCHAR2) IS
   SELECT VERSION
   FROM UTSTPP
   WHERE ST = A_ST
   AND VERSION = A_VERSION
   AND PP = A_PP
   AND PP_KEY1 = A_PP_KEY1
   AND PP_KEY2 = A_PP_KEY2
   AND PP_KEY3 = A_PP_KEY3
   AND PP_KEY4 = A_PP_KEY4
   AND PP_KEY5 = A_PP_KEY5;
L_STPP_REC    L_STPP_CURSOR%ROWTYPE;

BEGIN

   L_SQLERRM := NULL;
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_PP, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   IF A_PP_KEY1 IS NULL OR
      A_PP_KEY2 IS NULL OR
      A_PP_KEY3 IS NULL OR
      A_PP_KEY4 IS NULL OR
      A_PP_KEY5 IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOPPKEYID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_CONFIRM_ASSIGN, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_CONFIRMASSIGN;
      RAISE STPERROR;
   END IF;

   IF NVL(A_ALLOW_ANY_PR, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_ALLOWANYPR;
      RAISE STPERROR;
   END IF;

   IF NVL(A_NEVER_CREATE_METHODS, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NEVERCREATEMETHODS;
      RAISE STPERROR;
   END IF;

   IF NVL(A_IS_TEMPLATE, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_TEMPLATE;
      RAISE STPERROR;
   END IF;

   IF NVL(A_INHERIT_AU, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INHERITAU;
      RAISE STPERROR;
   END IF;

   IF NVL(A_LOG_HS, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_LOGHS;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIPPP.GETPPAUTHORISATION(A_PP, A_VERSION, A_PP_KEY1, A_PP_KEY2, 
                                             A_PP_KEY3, A_PP_KEY4, A_PP_KEY5, L_LC, L_LC_VERSION, 
                                             L_SS, L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE = UNAPIGEN.DBERR_NOOBJECT THEN
      L_INSERT := TRUE;
   ELSIF L_RET_CODE = UNAPIGEN.DBERR_SUCCESS THEN
      L_INSERT := FALSE;
   ELSE
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   IF L_INSERT THEN                      
      IF NVL(A_LC, ' ') <> ' ' THEN
         L_LC := A_LC;
      END IF;
      IF NVL(A_LC_VERSION, ' ') <> ' ' THEN
         L_LC_VERSION := A_LC_VERSION;
      END IF;
      INSERT INTO UTPP (PP, VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, 
                        EFFECTIVE_FROM, EFFECTIVE_FROM_TZ, DESCRIPTION, DESCRIPTION2, UNIT, 
                        FORMAT, ALLOW_ANY_PR, NEVER_CREATE_METHODS, CONFIRM_ASSIGN, DELAY, 
                        DELAY_UNIT, IS_TEMPLATE, SC_LC, SC_LC_VERSION, INHERIT_AU, 
                        PP_CLASS, LOG_HS, LC, LC_VERSION, ALLOW_MODIFY, ACTIVE)
      VALUES (A_PP, A_VERSION, A_PP_KEY1, A_PP_KEY2, A_PP_KEY3, A_PP_KEY4, A_PP_KEY5, 
              A_EFFECTIVE_FROM, A_EFFECTIVE_FROM, A_DESCRIPTION, A_DESCRIPTION2, A_UNIT, 
              A_FORMAT, A_ALLOW_ANY_PR, A_NEVER_CREATE_METHODS, A_CONFIRM_ASSIGN, A_DELAY, 
              A_DELAY_UNIT, A_IS_TEMPLATE, A_SC_LC, A_SC_LC_VERSION, A_INHERIT_AU, 
              A_PP_CLASS, A_LOG_HS, L_LC, L_LC_VERSION, '#', '0');
      L_EVENT_TP := 'ObjectCreated';
   ELSE                                   
      UPDATE UTPP
      SET EFFECTIVE_FROM          = DECODE(EFFECTIVE_TILL, NULL, A_EFFECTIVE_FROM, EFFECTIVE_FROM),
          EFFECTIVE_FROM_TZ       = DECODE(EFFECTIVE_TILL, NULL,  DECODE(A_EFFECTIVE_FROM, EFFECTIVE_TILL, EFFECTIVE_TILL, A_EFFECTIVE_FROM), EFFECTIVE_FROM_TZ),
          DESCRIPTION             = A_DESCRIPTION,
          DESCRIPTION2            = A_DESCRIPTION2,
          UNIT                    = A_UNIT,
          FORMAT                  = A_FORMAT,
          ALLOW_ANY_PR            = A_ALLOW_ANY_PR,
          NEVER_CREATE_METHODS    = A_NEVER_CREATE_METHODS,
          CONFIRM_ASSIGN          = A_CONFIRM_ASSIGN,
          DELAY                   = A_DELAY,
          DELAY_UNIT              = A_DELAY_UNIT,
          IS_TEMPLATE             = A_IS_TEMPLATE,
          SC_LC                   = A_SC_LC,
          SC_LC_VERSION           = A_SC_LC_VERSION,
          INHERIT_AU              = A_INHERIT_AU,
          PP_CLASS                = A_PP_CLASS,
          LOG_HS                  = A_LOG_HS,
          ALLOW_MODIFY            = '#'
      WHERE PP = A_PP
        AND VERSION = A_VERSION
        AND PP_KEY1 = A_PP_KEY1
        AND PP_KEY2 = A_PP_KEY2
        AND PP_KEY3 = A_PP_KEY3
        AND PP_KEY4 = A_PP_KEY4
        AND PP_KEY5 = A_PP_KEY5;
      L_EVENT_TP := 'ObjectUpdated';
   END IF;

   L_EV_SEQ_NR := -1;
   L_EV_DETAILS := 'version='||A_VERSION||'#pp_key1='||A_PP_KEY1||'#pp_key2='||A_PP_KEY2||
                   '#pp_key3='||A_PP_KEY3||'#pp_key4='||A_PP_KEY4||'#pp_key5='||A_PP_KEY5;
   L_RESULT := UNAPIEV.INSERTEVENT('SaveParameterProfile', UNAPIGEN.P_EVMGR_NAME, 'pp', A_PP, 
                                   L_LC, L_LC_VERSION, L_SS, L_EVENT_TP, L_EV_DETAILS, 
                                   L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF NVL(L_LOG_HS, ' ') <> A_LOG_HS THEN
      IF A_LOG_HS = '1' THEN
         INSERT INTO UTPPHS (PP, VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, WHO, 
                             WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_PP, A_VERSION, A_PP_KEY1, A_PP_KEY2, A_PP_KEY3, A_PP_KEY4, A_PP_KEY5, 
                 UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 'History switched ON', 
                 'Audit trail is turned on.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                 L_EV_SEQ_NR);
      ELSE
         INSERT INTO UTPPHS (PP, VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, WHO, 
                             WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_PP, A_VERSION, A_PP_KEY1, A_PP_KEY2, A_PP_KEY3, A_PP_KEY4, A_PP_KEY5, 
                 UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 'History switched OFF', 
                 'Audit trail is turned off.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                 L_EV_SEQ_NR);
      END IF;
   END IF;

   IF NVL(L_LOG_HS, ' ') = '1' THEN
      IF L_EVENT_TP = 'ObjectCreated' THEN
         INSERT INTO UTPPHS (PP, VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, WHO, 
                             WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_PP, A_VERSION, A_PP_KEY1, A_PP_KEY2, A_PP_KEY3, A_PP_KEY4, A_PP_KEY5, 
                 UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'parameter profile "'||A_PP||'" is created.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, 
                 UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      ELSE
         INSERT INTO UTPPHS (PP, VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_PP, A_VERSION, A_PP_KEY1, A_PP_KEY2, A_PP_KEY3, A_PP_KEY4, A_PP_KEY5, 
                 UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'parameter profile "'||A_PP||'" is updated.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, 
                 UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   ELSE
      
      
      IF L_EVENT_TP = 'ObjectCreated' THEN
         INSERT INTO UTPPHS (PP, VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, WHO, 
                             WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_PP, A_VERSION, A_PP_KEY1, A_PP_KEY2, A_PP_KEY3, A_PP_KEY4, A_PP_KEY5, 
                 UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'parameter profile "'||A_PP||'" is created.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, 
                 UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   END IF;

   
   IF UNAPIGEN.P_PP_KEY4PRODUCT IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SETCONNECTION;
      RAISE STPERROR;               
   END IF;
   L_ST := NULL;
   IF NVL(A_PP_KEY1, ' ') <> ' ' AND
      UNAPIGEN.P_PP_KEY4PRODUCT = 1 THEN
      L_ST := A_PP_KEY1;
   ELSIF NVL(A_PP_KEY2, ' ') <> ' ' AND
      UNAPIGEN.P_PP_KEY4PRODUCT = 2 THEN
      L_ST := A_PP_KEY2;
   ELSIF NVL(A_PP_KEY3, ' ') <> ' ' AND
      UNAPIGEN.P_PP_KEY4PRODUCT = 3 THEN
      L_ST := A_PP_KEY3;
   ELSIF NVL(A_PP_KEY4, ' ') <> ' ' AND
      UNAPIGEN.P_PP_KEY4PRODUCT = 4 THEN
      L_ST := A_PP_KEY4;
   ELSIF NVL(A_PP_KEY5, ' ') <> ' ' AND
      UNAPIGEN.P_PP_KEY4PRODUCT = 5 THEN
      L_ST := A_PP_KEY5;
   END IF;
   IF L_ST IS NOT NULL THEN
      
      
      
      L_ST_VERSION := UNVERSION.SQLGETHIGHESTMAJORVERSION('st', L_ST, '');
      IF L_ST_VERSION IS NULL THEN
         L_SQLERRM := 'An attempt was made to store a sample type specific parameter profile but the sample type "'||L_ST||'" does not exist!';
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
         RAISE STPERROR;
      END IF;
      
      
      OPEN L_STPP_CURSOR(L_ST, L_ST_VERSION, A_PP, A_PP_KEY1, A_PP_KEY2, A_PP_KEY3, A_PP_KEY4, A_PP_KEY5);
      FETCH L_STPP_CURSOR
      INTO L_STPP_REC;
      L_ALREADY_PRESENT := L_STPP_CURSOR%FOUND;
      CLOSE L_STPP_CURSOR;
      
      IF L_ALREADY_PRESENT = FALSE THEN
         
         L_RET_CODE := UNAPIGEN.GETAUTHORISATION('st', L_ST, L_ST_VERSION, L_ST_LC, L_ST_LC_VERSION, L_ST_SS,
                                                 L_ST_ALLOW_MODIFY, L_ST_ACTIVE, L_ST_LOG_HS);

         IF L_RET_CODE = UNAPIGEN.DBERR_NOTMODIFIABLE THEN
            IF UNAPIGEN.ISSYSTEM21CFR11COMPLIANT = UNAPIGEN.DBERR_SUCCESS THEN
               
               
               L_NEW_ST_VERSION := NULL;
               L_RET_CODE := UNAPIST.COPYSAMPLETYPE
                                     (L_ST, L_ST_VERSION, L_ST, L_NEW_ST_VERSION,'');
               IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
                  L_SQLERRM := 'CopySampleType#ret_code='||L_RET_CODE||'#st='||L_ST||'#version='||L_ST_VERSION||'#cp_st='||L_ST||'#cp_version='||L_NEW_ST_VERSION;
                  UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
                  RAISE STPERROR;
               END IF;
               L_ST_VERSION := L_NEW_ST_VERSION;                       
            ELSE
               UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_STPPNOTAUTHORISED;
               UNAPIAUT.P_NOT_AUTHORISED := 'st='||L_ST||'#version='||L_ST_VERSION||'#authorisation_error='||L_RET_CODE;
               RAISE STPERROR;            
            END IF;
         ELSIF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_STPPNOTAUTHORISED;
            UNAPIAUT.P_NOT_AUTHORISED := 'st='||L_ST||'#version='||L_ST_VERSION||'#authorisation_error='||L_RET_CODE;
            RAISE STPERROR;            
         END IF;

         
         
         INSERT INTO UTSTPP
         (ST, VERSION, PP, PP_VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, 
          SEQ, FREQ_TP, FREQ_VAL, FREQ_UNIT, INVERT_FREQ, LAST_SCHED, LAST_SCHED_TZ,
          LAST_CNT, LAST_VAL, INHERIT_AU)
         SELECT L_ST, L_ST_VERSION, A_PP, '~Current~', A_PP_KEY1, A_PP_KEY2, A_PP_KEY3, A_PP_KEY4, A_PP_KEY5,
                NVL(MAX(SEQ),0)+1, 'A', 0, 'DD', '0', NULL, NULL,
                0, NULL, '2'
         FROM UTSTPP
         WHERE ST = L_ST
           AND VERSION = L_ST_VERSION;

         L_EV_SEQ_NR := -1;
         L_EVENT_TP := 'UsedObjectsUpdated';
         L_RESULT := UNAPIEV.INSERTEVENT('SaveStParameterProfile', UNAPIGEN.P_EVMGR_NAME,
                                         'st', L_ST, L_ST_LC, L_ST_LC_VERSION, L_ST_SS, 
                                         L_EVENT_TP, 'version='||L_ST_VERSION, L_EV_SEQ_NR);
         IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS  THEN
            UNAPIGEN.P_TXN_ERROR := L_RESULT;
            RAISE STPERROR;
         END IF;

         IF L_ST_LOG_HS = '1' THEN
            INSERT INTO UTSTHS (ST, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                                WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
            VALUES (L_ST, L_ST_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                    'sample type "'||L_ST||'" parameter profiles are updated.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, 
                    UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
         END IF;
           
      END IF;
         
   END IF;
   
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveParameterProfile', SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('SaveParameterProfile', L_SQLERRM);   
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveParameterProfile'));
END SAVEPARAMETERPROFILE;

FUNCTION SAVEPPPARAMETER
(A_PP            IN  VARCHAR2,                  
 A_VERSION       IN  VARCHAR2,                  
 A_PP_KEY1       IN  VARCHAR2,                  
 A_PP_KEY2       IN  VARCHAR2,                  
 A_PP_KEY3       IN  VARCHAR2,                  
 A_PP_KEY4       IN  VARCHAR2,                  
 A_PP_KEY5       IN  VARCHAR2,                  
 A_PR            IN  UNAPIGEN.VC20_TABLE_TYPE,  
 A_PR_VERSION    IN  UNAPIGEN.VC20_TABLE_TYPE,  
 A_NR_MEASUR     IN  UNAPIGEN.NUM_TABLE_TYPE,   
 A_UNIT          IN  UNAPIGEN.VC20_TABLE_TYPE,  
 A_FORMAT        IN  UNAPIGEN.VC40_TABLE_TYPE,  
 A_ALLOW_ADD     IN  UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_IS_PP         IN  UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_FREQ_TP       IN  UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_FREQ_VAL      IN  UNAPIGEN.NUM_TABLE_TYPE,   
 A_FREQ_UNIT     IN  UNAPIGEN.VC20_TABLE_TYPE,  
 A_INVERT_FREQ   IN  UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ST_BASED_FREQ IN  UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LAST_SCHED    IN  UNAPIGEN.DATE_TABLE_TYPE,  
 A_LAST_CNT      IN  UNAPIGEN.NUM_TABLE_TYPE,   
 A_LAST_VAL      IN  UNAPIGEN.VC40_TABLE_TYPE,  
 A_INHERIT_AU    IN  UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_DELAY         IN  UNAPIGEN.NUM_TABLE_TYPE,   
 A_DELAY_UNIT    IN  UNAPIGEN.VC20_TABLE_TYPE,  
 A_MT            IN  UNAPIGEN.VC20_TABLE_TYPE,  
 A_MT_VERSION    IN  UNAPIGEN.VC20_TABLE_TYPE,  
 A_MT_NR_MEASUR  IN  UNAPIGEN.NUM_TABLE_TYPE,   
 A_NR_OF_ROWS    IN  NUMBER,                    
 A_MODIFY_REASON IN  VARCHAR2)                  
RETURN NUMBER IS

L_LC                VARCHAR2(2);
L_LC_VERSION        VARCHAR2(20);
L_SS                VARCHAR2(2);
L_LOG_HS            CHAR(1);
L_ALLOW_MODIFY      CHAR(1);
L_ACTIVE            CHAR(1);
L_SEQ_NO            NUMBER;
L_USED_PR_VERSION   VARCHAR2(20);
L_USED_MT_VERSION   VARCHAR2(20);

CURSOR L_PRMT_CURSOR (C_PR VARCHAR2, C_PR_VERSION VARCHAR2, C_MT VARCHAR2, C_MT_VERSION VARCHAR2) IS
   
   
   
   
   SELECT PR, VERSION, MT, MT_VERSION
   FROM UTPRMT
   WHERE PR = C_PR
     AND MT = C_MT;
L_PRMT_REC L_PRMT_CURSOR%ROWTYPE;

CURSOR L_CHECK4RECURSIVEDATA_CURSOR(A_PP IN VARCHAR2, A_VERSION IN VARCHAR2, 
                                    A_PP_KEY1 IN VARCHAR2, A_PP_KEY2 IN VARCHAR2,
                                    A_PP_KEY3 IN VARCHAR2, A_PP_KEY4 IN VARCHAR2,
                                    A_PP_KEY5 IN VARCHAR2) IS
   SELECT PP, VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, PR, PR_VERSION
   FROM UTPPPR
   START WITH PP = A_PP 
          AND VERSION = A_VERSION
          AND PP_KEY1 = A_PP_KEY1
          AND PP_KEY2 = A_PP_KEY2
          AND PP_KEY3 = A_PP_KEY3
          AND PP_KEY4 = A_PP_KEY4
          AND PP_KEY5 = A_PP_KEY5
   CONNECT BY PRIOR PR = PP 
          AND UNAPIGEN.USEPPVERSION(PRIOR PR, PRIOR PR_VERSION, PRIOR PP_KEY1, PRIOR PP_KEY2,PRIOR PP_KEY3,PRIOR PP_KEY4,PRIOR PP_KEY5) = VERSION 
          AND PRIOR PP_KEY1 = PP_KEY1
          AND PRIOR PP_KEY2 = PP_KEY2
          AND PRIOR PP_KEY3 = PP_KEY3
          AND PRIOR PP_KEY4 = PP_KEY4
          AND PRIOR PP_KEY5 = PP_KEY5
          AND PRIOR IS_PP = '1';
L_CHECK4RECURSIVEDATA_REC L_CHECK4RECURSIVEDATA_CURSOR%ROWTYPE;   

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_PP, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   IF A_PP_KEY1 IS NULL OR
      A_PP_KEY2 IS NULL OR
      A_PP_KEY3 IS NULL OR
      A_PP_KEY4 IS NULL OR
      A_PP_KEY5 IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOPPKEYID;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIPPP.GETPPAUTHORISATION(A_PP, A_VERSION, A_PP_KEY1, A_PP_KEY2, 
                                             A_PP_KEY3, A_PP_KEY4, A_PP_KEY5, L_LC, L_LC_VERSION, 
                                             L_SS, L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTPP
   SET ALLOW_MODIFY = '#'
   WHERE PP = A_PP
     AND VERSION = A_VERSION
     AND PP_KEY1 = A_PP_KEY1
     AND PP_KEY2 = A_PP_KEY2
     AND PP_KEY3 = A_PP_KEY3
     AND PP_KEY4 = A_PP_KEY4
     AND PP_KEY5 = A_PP_KEY5;

   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR ;
   END IF;

   DELETE UTPPPR
   WHERE PP = A_PP
     AND VERSION = A_VERSION
     AND PP_KEY1 = A_PP_KEY1
     AND PP_KEY2 = A_PP_KEY2
     AND PP_KEY3 = A_PP_KEY3
     AND PP_KEY4 = A_PP_KEY4
     AND PP_KEY5 = A_PP_KEY5;

   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      IF NVL(A_PR(L_SEQ_NO), ' ') = ' ' THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
      END IF;

      IF NVL(A_ALLOW_ADD(L_SEQ_NO), ' ') NOT IN ('1','0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_ALLOWADD;
         RAISE STPERROR;
      END IF;

      IF NVL(A_IS_PP(L_SEQ_NO), ' ') NOT IN ('1','0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_ISPP;
         RAISE STPERROR;
      END IF;

      IF NVL(A_FREQ_TP(L_SEQ_NO), ' ') NOT IN ('A','S','T','C','N') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_FREQTP;
         RAISE STPERROR;
      END IF;

      IF A_FREQ_TP(L_SEQ_NO) IN ('C','T','S') THEN
         IF A_FREQ_UNIT(L_SEQ_NO) IS NULL THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_FREQUNIT;
            RAISE STPERROR;         
         ELSIF A_FREQ_TP(L_SEQ_NO) = 'T' AND
            A_FREQ_UNIT(L_SEQ_NO) NOT IN ('MI','HH','DD','WW','MM','YY','MF','YF') THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_FREQUNIT;
            RAISE STPERROR;         
         END IF;
      END IF;

      IF NVL(A_INVERT_FREQ(L_SEQ_NO), ' ') NOT IN ('1','0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INVERTFREQ;
         RAISE STPERROR;
      END IF;

      IF NVL(A_ST_BASED_FREQ(L_SEQ_NO), ' ') NOT IN ('1','0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_STFREQ;
         RAISE STPERROR;
      END IF;

      IF NVL(A_INHERIT_AU(L_SEQ_NO), ' ') NOT IN ('2', '1','0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INHERITAU;
         RAISE STPERROR;
      END IF;

      IF A_MT(L_SEQ_NO) IS NOT NULL THEN
         
         L_USED_PR_VERSION := UNAPIGEN.USEVERSION('pr', A_PR(L_SEQ_NO), A_PR_VERSION(L_SEQ_NO));
         IF NVL(L_USED_PR_VERSION,'~Current~') <> NVL(A_PR_VERSION(L_SEQ_NO), '~Current~') THEN
            L_USED_PR_VERSION := NULL;
         END IF;           
         L_USED_MT_VERSION := UNAPIGEN.USEVERSION('mt', A_MT(L_SEQ_NO), A_MT_VERSION(L_SEQ_NO));
         IF NVL(L_USED_MT_VERSION,'~Current~') <> NVL(A_MT_VERSION(L_SEQ_NO), '~Current~') THEN
            L_USED_MT_VERSION := NULL;
         END IF;           
         
         OPEN L_PRMT_CURSOR(A_PR(L_SEQ_NO), L_USED_PR_VERSION, A_MT(L_SEQ_NO), L_USED_MT_VERSION);
         FETCH L_PRMT_CURSOR
         INTO L_PRMT_REC;
            IF L_PRMT_CURSOR%NOTFOUND THEN
               CLOSE L_PRMT_CURSOR;
               UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_MISSINGPRMT;
               RAISE STPERROR;
            END IF;
         CLOSE L_PRMT_CURSOR;
      END IF;
      
      INSERT INTO UTPPPR(PP, VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, 
                         PR, PR_VERSION, SEQ, NR_MEASUR, UNIT, FORMAT, ALLOW_ADD, 
                         IS_PP, FREQ_TP, FREQ_VAL, FREQ_UNIT, INVERT_FREQ, ST_BASED_FREQ,
                         LAST_SCHED, LAST_CNT, LAST_VAL, INHERIT_AU, DELAY,
                         DELAY_UNIT, MT, MT_VERSION, MT_NR_MEASUR)
      VALUES (A_PP, A_VERSION, A_PP_KEY1, A_PP_KEY2, A_PP_KEY3, A_PP_KEY4, A_PP_KEY5, 
              A_PR(L_SEQ_NO), A_PR_VERSION(L_SEQ_NO), L_SEQ_NO, 
              A_NR_MEASUR(L_SEQ_NO), A_UNIT(L_SEQ_NO), A_FORMAT(L_SEQ_NO), A_ALLOW_ADD (L_SEQ_NO), 
              A_IS_PP(L_SEQ_NO), A_FREQ_TP(L_SEQ_NO), A_FREQ_VAL(L_SEQ_NO), A_FREQ_UNIT(L_SEQ_NO),
              A_INVERT_FREQ(L_SEQ_NO), A_ST_BASED_FREQ(L_SEQ_NO),
              TO_TIMESTAMP_TZ(A_LAST_SCHED(L_SEQ_NO)), A_LAST_CNT(L_SEQ_NO),
              A_LAST_VAL(L_SEQ_NO), A_INHERIT_AU(L_SEQ_NO), A_DELAY(L_SEQ_NO),
              A_DELAY_UNIT(L_SEQ_NO), A_MT(L_SEQ_NO), A_MT_VERSION(L_SEQ_NO), A_MT_NR_MEASUR(L_SEQ_NO));
              
      UPDATE UTSTPRFREQ
      SET FREQ_TP=A_FREQ_TP(L_SEQ_NO),
          FREQ_UNIT=A_FREQ_UNIT(L_SEQ_NO),
          FREQ_VAL=A_FREQ_VAL(L_SEQ_NO),
          INVERT_FREQ=A_INVERT_FREQ(L_SEQ_NO)
      WHERE PP = A_PP
        AND PP_VERSION = A_VERSION
        AND PP_KEY1 = A_PP_KEY1
        AND PP_KEY2 = A_PP_KEY2
        AND PP_KEY3 = A_PP_KEY3
        AND PP_KEY4 = A_PP_KEY4
        AND PP_KEY5 = A_PP_KEY5
        AND PR = A_PR(L_SEQ_NO)
        AND PR_VERSION = A_PR_VERSION(L_SEQ_NO);
      
   END LOOP;

   
   
   
   BEGIN 
      FOR  L_CHECK4RECURSIVEDATA_REC IN L_CHECK4RECURSIVEDATA_CURSOR(A_PP, A_VERSION, A_PP_KEY1, 
                                                A_PP_KEY2, A_PP_KEY3, A_PP_KEY4, A_PP_KEY5) LOOP
         NULL;
      END LOOP;
   EXCEPTION
   WHEN OTHERS THEN
      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_RECURSIVEDATA;
      RAISE STPERROR;
   END;
   
   
   
   
   DELETE FROM UTPPPRAU
   WHERE PP = A_PP
     AND VERSION = A_VERSION
     AND PP_KEY1 = A_PP_KEY1
     AND PP_KEY2 = A_PP_KEY2
     AND PP_KEY3 = A_PP_KEY3
     AND PP_KEY4 = A_PP_KEY4
     AND PP_KEY5 = A_PP_KEY5
     AND (PR, NVL(PR_VERSION, '~Current~')) NOT IN (SELECT PR, NVL(PR_VERSION, '~Current~') 
                                                      FROM UTPPPR 
                                                     WHERE PP = A_PP 
                                                       AND VERSION = A_VERSION
                                                       AND PP_KEY1 = A_PP_KEY1
                                                       AND PP_KEY2 = A_PP_KEY2
                                                       AND PP_KEY3 = A_PP_KEY3
                                                       AND PP_KEY4 = A_PP_KEY4
                                                       AND PP_KEY5 = A_PP_KEY5);

   
   
   DELETE FROM UTPPSPA
   WHERE PP = A_PP
     AND VERSION = A_VERSION
     AND PP_KEY1 = A_PP_KEY1
     AND PP_KEY2 = A_PP_KEY2
     AND PP_KEY3 = A_PP_KEY3
     AND PP_KEY4 = A_PP_KEY4
     AND PP_KEY5 = A_PP_KEY5
     AND (PR, NVL(PR_VERSION, '~Current~')) NOT IN (SELECT PR, NVL(PR_VERSION, '~Current~') 
                                                      FROM UTPPPR 
                                                     WHERE PP = A_PP 
                                                       AND VERSION = A_VERSION
                                                       AND PP_KEY1 = A_PP_KEY1
                                                       AND PP_KEY2 = A_PP_KEY2
                                                       AND PP_KEY3 = A_PP_KEY3
                                                       AND PP_KEY4 = A_PP_KEY4
                                                       AND PP_KEY5 = A_PP_KEY5);

   DELETE FROM UTPPSPB
   WHERE PP = A_PP
     AND VERSION = A_VERSION
     AND PP_KEY1 = A_PP_KEY1
     AND PP_KEY2 = A_PP_KEY2
     AND PP_KEY3 = A_PP_KEY3
     AND PP_KEY4 = A_PP_KEY4
     AND PP_KEY5 = A_PP_KEY5
     AND (PR, NVL(PR_VERSION, '~Current~')) NOT IN (SELECT PR, NVL(PR_VERSION, '~Current~') 
                                                      FROM UTPPPR 
                                                     WHERE PP = A_PP 
                                                       AND VERSION = A_VERSION
                                                       AND PP_KEY1 = A_PP_KEY1
                                                       AND PP_KEY2 = A_PP_KEY2
                                                       AND PP_KEY3 = A_PP_KEY3
                                                       AND PP_KEY4 = A_PP_KEY4
                                                       AND PP_KEY5 = A_PP_KEY5);

   DELETE FROM UTPPSPC
   WHERE PP = A_PP
     AND VERSION = A_VERSION
     AND PP_KEY1 = A_PP_KEY1
     AND PP_KEY2 = A_PP_KEY2
     AND PP_KEY3 = A_PP_KEY3
     AND PP_KEY4 = A_PP_KEY4
     AND PP_KEY5 = A_PP_KEY5
     AND (PR, NVL(PR_VERSION, '~Current~')) NOT IN (SELECT PR, NVL(PR_VERSION, '~Current~') 
                                                      FROM UTPPPR 
                                                     WHERE PP = A_PP 
                                                       AND VERSION = A_VERSION
                                                       AND PP_KEY1 = A_PP_KEY1
                                                       AND PP_KEY2 = A_PP_KEY2
                                                       AND PP_KEY3 = A_PP_KEY3
                                                       AND PP_KEY4 = A_PP_KEY4
                                                       AND PP_KEY5 = A_PP_KEY5);

   
   
   DELETE FROM UTSTPRFREQ
   WHERE PP = A_PP
     AND PP_VERSION = A_VERSION
     AND PP_KEY1 = A_PP_KEY1
     AND PP_KEY2 = A_PP_KEY2
     AND PP_KEY3 = A_PP_KEY3
     AND PP_KEY4 = A_PP_KEY4
     AND PP_KEY5 = A_PP_KEY5
     AND (PR, NVL(PR_VERSION, '~Current~')) NOT IN (SELECT PR, NVL(PR_VERSION, '~Current~') 
                                                      FROM UTPPPR 
                                                     WHERE PP = A_PP 
                                                       AND VERSION = A_VERSION
                                                       AND PP_KEY1 = A_PP_KEY1
                                                       AND PP_KEY2 = A_PP_KEY2
                                                       AND PP_KEY3 = A_PP_KEY3
                                                       AND PP_KEY4 = A_PP_KEY4
                                                       AND PP_KEY5 = A_PP_KEY5);

   L_EV_SEQ_NR := -1;
   L_EVENT_TP := 'UsedObjectsUpdated';
   L_EV_DETAILS := 'version='||A_VERSION||'#pp_key1='||A_PP_KEY1||'#pp_key2='||A_PP_KEY2||
                   '#pp_key3='||A_PP_KEY3||'#pp_key4='||A_PP_KEY4||'#pp_key5='||A_PP_KEY5;
   L_RESULT := UNAPIEV.INSERTEVENT('SavePpParameter', UNAPIGEN.P_EVMGR_NAME, 'pp', A_PP,
                                   L_LC, L_LC_VERSION, L_SS, L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF L_LOG_HS = '1' THEN
      INSERT INTO UTPPHS (PP, VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, WHO, 
                          WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES (A_PP, A_VERSION, A_PP_KEY1, A_PP_KEY2, A_PP_KEY3, A_PP_KEY4, A_PP_KEY5, 
              UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
              'parameter profile "'||A_PP||'" parameters are updated.', 
              CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SavePpParameter', SQLERRM);
   END IF;
   IF L_PRMT_CURSOR%ISOPEN THEN
      CLOSE L_PRMT_CURSOR;
   END IF;
   IF L_CHECK4RECURSIVEDATA_CURSOR%ISOPEN THEN
      CLOSE L_CHECK4RECURSIVEDATA_CURSOR;
   END IF;   
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SavePpParameter'));
END SAVEPPPARAMETER;

FUNCTION SAVEPPPARAMETERSPECS
(A_PP            IN  VARCHAR2,                  
 A_VERSION       IN  VARCHAR2,                  
 A_PP_KEY1       IN  VARCHAR2,                  
 A_PP_KEY2       IN  VARCHAR2,                  
 A_PP_KEY3       IN  VARCHAR2,                  
 A_PP_KEY4       IN  VARCHAR2,                  
 A_PP_KEY5       IN  VARCHAR2,                  
 A_PR            IN  UNAPIGEN.VC20_TABLE_TYPE,  
 A_PR_VERSION    IN  UNAPIGEN.VC20_TABLE_TYPE,  
 A_SPEC_SET      IN  CHAR,                      
 A_LOW_LIMIT     IN  UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_HIGH_LIMIT    IN  UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_LOW_SPEC      IN  UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_HIGH_SPEC     IN  UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_LOW_DEV       IN  UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_REL_LOW_DEV   IN  UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_TARGET        IN  UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_HIGH_DEV      IN  UNAPIGEN.FLOAT_TABLE_TYPE, 
 A_REL_HIGH_DEV  IN  UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NR_OF_ROWS    IN  NUMBER,                    
 A_MODIFY_REASON IN  VARCHAR2)                  
RETURN NUMBER IS

L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);
L_LOG_HS       CHAR(1);
L_ALLOW_MODIFY CHAR(1);
L_ACTIVE       CHAR(1);
L_SEQ_NO       NUMBER;
L_SPEC_CURSOR  INTEGER;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_PP, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   IF A_PP_KEY1 IS NULL OR
      A_PP_KEY2 IS NULL OR
      A_PP_KEY3 IS NULL OR
      A_PP_KEY4 IS NULL OR
      A_PP_KEY5 IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOPPKEYID;
      RAISE STPERROR;
   END IF;

   IF A_SPEC_SET NOT IN ('a', 'b', 'c') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SPECSET;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIPPP.GETPPAUTHORISATION(A_PP, A_VERSION, A_PP_KEY1, A_PP_KEY2, 
                                             A_PP_KEY3, A_PP_KEY4, A_PP_KEY5, L_LC, L_LC_VERSION, 
                                             L_SS, L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTPP
   SET ALLOW_MODIFY = '#'
   WHERE PP = A_PP
     AND VERSION = A_VERSION
     AND PP_KEY1 = A_PP_KEY1
     AND PP_KEY2 = A_PP_KEY2
     AND PP_KEY3 = A_PP_KEY3
     AND PP_KEY4 = A_PP_KEY4
     AND PP_KEY5 = A_PP_KEY5;

   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR ;
   END IF;

   L_SPEC_CURSOR := DBMS_SQL.OPEN_CURSOR;

   L_SQL_STRING := 'DELETE utppsp' || A_SPEC_SET ||
                   ' WHERE pp = ''' || REPLACE(A_PP, '''', '''''') || '''' || 
                   ' AND version = ''' || REPLACE(A_VERSION, '''', '''''') || '''' || 
                   ' AND pp_key1 = ''' || REPLACE(A_PP_KEY1, '''', '''''') || '''' || 
                   ' AND pp_key2 = ''' || REPLACE(A_PP_KEY2, '''', '''''') || '''' || 
                   ' AND pp_key3 = ''' || REPLACE(A_PP_KEY3, '''', '''''') || '''' || 
                   ' AND pp_key4 = ''' || REPLACE(A_PP_KEY4, '''', '''''') || '''' || 
                   ' AND pp_key5 = ''' || REPLACE(A_PP_KEY5, '''', '''''') || ''''; 
   DBMS_SQL.PARSE(L_SPEC_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   L_RESULT := DBMS_SQL.EXECUTE(L_SPEC_CURSOR);

   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      IF NVL(A_PR(L_SEQ_NO), ' ') = ' ' THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
      END IF;

      IF NVL(A_REL_LOW_DEV(L_SEQ_NO), ' ') NOT IN ('1','0') THEN
          UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_RELLOWDEV;
          RAISE STPERROR;
      ELSIF NVL(A_REL_HIGH_DEV(L_SEQ_NO), ' ') NOT IN ('1','0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_RELHIGHDEV;
         RAISE STPERROR;
      END IF;

      
      IF A_LOW_LIMIT(L_SEQ_NO)  IS NOT NULL OR
         A_HIGH_LIMIT(L_SEQ_NO) IS NOT NULL OR
         A_LOW_SPEC(L_SEQ_NO)   IS NOT NULL OR
         A_HIGH_SPEC(L_SEQ_NO)  IS NOT NULL OR
         A_LOW_DEV(L_SEQ_NO)    IS NOT NULL OR
         A_TARGET(L_SEQ_NO)     IS NOT NULL OR
         A_HIGH_DEV(L_SEQ_NO)   IS NOT NULL THEN
         L_SQL_STRING := 'INSERT INTO utppsp' || A_SPEC_SET ||
                         ' (pp, version, pp_key1, pp_key2, pp_key3, pp_key4, pp_key5, '||
                         ' pr, pr_version, seq, low_limit, ' ||
                         ' high_limit, low_spec, high_spec, low_dev, rel_low_dev, ' ||
                         ' target, high_dev, rel_high_dev) ' ||
                         'VALUES  (:a_pp, :a_version, :a_pp_key1, :a_pp_key2, :a_pp_key3, '||
                         ':a_pp_key4, :a_pp_key5, :a_pr, :a_pr_version, ' ||
                         ':l_seq_no, :a_low_limit, :a_high_limit, ' || 
                         ':a_low_spec, :a_high_spec, ' ||
                         ':a_low_dev, :a_rel_low_dev, ' ||
                         ':a_target, :a_high_dev, ' ||
                         ':a_rel_high_dev)';

         DBMS_SQL.PARSE(L_SPEC_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

         DBMS_SQL.BIND_VARIABLE(L_SPEC_CURSOR, ':a_pp', A_PP);
         DBMS_SQL.BIND_VARIABLE(L_SPEC_CURSOR, ':a_version', A_VERSION);
         DBMS_SQL.BIND_VARIABLE(L_SPEC_CURSOR, ':a_pp_key1', A_PP_KEY1);
         DBMS_SQL.BIND_VARIABLE(L_SPEC_CURSOR, ':a_pp_key2', A_PP_KEY2);
         DBMS_SQL.BIND_VARIABLE(L_SPEC_CURSOR, ':a_pp_key3', A_PP_KEY3);
         DBMS_SQL.BIND_VARIABLE(L_SPEC_CURSOR, ':a_pp_key4', A_PP_KEY4);
         DBMS_SQL.BIND_VARIABLE(L_SPEC_CURSOR, ':a_pp_key5', A_PP_KEY5);
         DBMS_SQL.BIND_VARIABLE(L_SPEC_CURSOR, ':a_pr', A_PR(L_SEQ_NO));
         DBMS_SQL.BIND_VARIABLE(L_SPEC_CURSOR, ':a_pr_version', A_PR_VERSION(L_SEQ_NO));
         DBMS_SQL.BIND_VARIABLE(L_SPEC_CURSOR, ':l_seq_no', L_SEQ_NO);
         DBMS_SQL.BIND_VARIABLE(L_SPEC_CURSOR, ':a_low_limit', A_LOW_LIMIT(L_SEQ_NO));
         DBMS_SQL.BIND_VARIABLE(L_SPEC_CURSOR, ':a_high_limit', A_HIGH_LIMIT(L_SEQ_NO));
         DBMS_SQL.BIND_VARIABLE(L_SPEC_CURSOR, ':a_low_spec', A_LOW_SPEC(L_SEQ_NO));
         DBMS_SQL.BIND_VARIABLE(L_SPEC_CURSOR, ':a_high_spec', A_HIGH_SPEC(L_SEQ_NO));
         DBMS_SQL.BIND_VARIABLE(L_SPEC_CURSOR, ':a_low_dev', A_LOW_DEV(L_SEQ_NO));
         DBMS_SQL.BIND_VARIABLE_CHAR(L_SPEC_CURSOR, ':a_rel_low_dev', A_REL_LOW_DEV(L_SEQ_NO),1);
         DBMS_SQL.BIND_VARIABLE(L_SPEC_CURSOR, ':a_target', A_TARGET(L_SEQ_NO));
         DBMS_SQL.BIND_VARIABLE(L_SPEC_CURSOR, ':a_high_dev', A_HIGH_DEV(L_SEQ_NO));
         DBMS_SQL.BIND_VARIABLE_CHAR(L_SPEC_CURSOR, ':a_rel_high_dev', A_REL_HIGH_DEV(L_SEQ_NO),1);
         L_RESULT := DBMS_SQL.EXECUTE(L_SPEC_CURSOR);
      END IF;
   END LOOP;

   L_EVENT_TP := 'PpSpecsUpdated';
   L_EV_SEQ_NR := -1;
   L_EV_DETAILS := 'sp='|| A_SPEC_SET||'#version='||A_VERSION||
                   '#pp_key1='||A_PP_KEY1||'#pp_key2='||A_PP_KEY2||'#pp_key3='||A_PP_KEY3||
                   '#pp_key4='||A_PP_KEY4||'#pp_key5='||A_PP_KEY5;
   L_RESULT := UNAPIEV.INSERTEVENT('SavePpParameterSpecs', UNAPIGEN.P_EVMGR_NAME, 'pp', A_PP,
                                   L_LC, L_LC_VERSION, L_SS, L_EVENT_TP,
                                   L_EV_DETAILS, L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF L_LOG_HS = '1' THEN
      
      
      
      INSERT INTO UTPPHS (PP, VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, WHO, 
                          WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES (A_PP, A_VERSION, A_PP_KEY1, A_PP_KEY2, A_PP_KEY3, A_PP_KEY4, A_PP_KEY5, 
              UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
              'parameter profile "'||A_PP||'" parameter specifications are updated.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              DECODE(A_MODIFY_REASON, NULL, 'SpecSet='||A_SPEC_SET, A_MODIFY_REASON), 
              UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

  DBMS_SQL.CLOSE_CURSOR(L_SPEC_CURSOR);
  RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SavePpParameterSpecs', SQLERRM);
   END IF;
   IF DBMS_SQL.IS_OPEN(L_SPEC_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_SPEC_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SavePpParameterSpecs'));
END SAVEPPPARAMETERSPECS;

FUNCTION COPYPARAMETERPROFILE
(A_PP            IN     VARCHAR2,                  
 A_VERSION       IN     VARCHAR2,                  
 A_PP_KEY1       IN     VARCHAR2,                  
 A_PP_KEY2       IN     VARCHAR2,                  
 A_PP_KEY3       IN     VARCHAR2,                  
 A_PP_KEY4       IN     VARCHAR2,                  
 A_PP_KEY5       IN     VARCHAR2,                  
 A_CP_PP         IN OUT VARCHAR2,                  
 A_CP_VERSION    IN OUT VARCHAR2,                  
 A_CP_PP_KEY1    IN OUT VARCHAR2,                  
 A_CP_PP_KEY2    IN OUT VARCHAR2,                  
 A_CP_PP_KEY3    IN OUT VARCHAR2,                  
 A_CP_PP_KEY4    IN OUT VARCHAR2,                  
 A_CP_PP_KEY5    IN OUT VARCHAR2,                  
 A_MODIFY_REASON IN     VARCHAR2)                  
RETURN NUMBER IS

CURSOR L_PP_CURSOR(A_PP         IN VARCHAR2, 
                   A_PP_VERSION IN VARCHAR2,
                   A_PP_KEY1    IN VARCHAR2,
                   A_PP_KEY2    IN VARCHAR2,
                   A_PP_KEY3    IN VARCHAR2,
                   A_PP_KEY4    IN VARCHAR2,
                   A_PP_KEY5    IN VARCHAR2) IS
   SELECT LOG_HS
   FROM UTPP
   WHERE PP = A_PP
     AND VERSION = A_PP_VERSION
     AND PP_KEY1 = A_PP_KEY1
     AND PP_KEY2 = A_PP_KEY2
     AND PP_KEY3 = A_PP_KEY3
     AND PP_KEY4 = A_PP_KEY4
     AND PP_KEY5 = A_PP_KEY5;
L_PP_REC          L_PP_CURSOR%ROWTYPE;

L_DYN_CURSOR  INTEGER;

L_TEMP_LC                 VARCHAR2(2);
L_TEMP_LC_VERSION         VARCHAR2(20);
L_TEMP_SS                 VARCHAR2(2);
L_TEMP_LOG_HS             CHAR(1);
L_TEMP_ALLOW_MODIFY       CHAR(1);
L_TEMP_ACTIVE             CHAR(1);
L_LOG_HS                  CHAR(1);
L_SQLERRM2                VARCHAR2(255);


L_ST               VARCHAR2(20);
L_ST_VERSION       VARCHAR2(20);
L_ALREADY_PRESENT  BOOLEAN;
L_ST_LC            VARCHAR2(2);
L_ST_LC_VERSION    VARCHAR2(20);
L_ST_SS            VARCHAR2(2);
L_ST_LOG_HS        CHAR(1);
L_ST_ALLOW_MODIFY  CHAR(1);
L_ST_ACTIVE        CHAR(1);
L_NEW_ST_VERSION   VARCHAR2(20);

CURSOR L_STPP_CURSOR (A_ST VARCHAR2, A_VERSION VARCHAR2, 
                      A_PP VARCHAR2, A_PP_KEY1 VARCHAR2, A_PP_KEY2 VARCHAR2, 
                      A_PP_KEY3 VARCHAR2, A_PP_KEY4 VARCHAR2, A_PP_KEY5 VARCHAR2) IS
   SELECT VERSION
   FROM UTSTPP
   WHERE ST    = A_ST
   AND VERSION = A_VERSION
   AND PP      = A_PP
   AND PP_KEY1 = A_PP_KEY1
   AND PP_KEY2 = A_PP_KEY2
   AND PP_KEY3 = A_PP_KEY3
   AND PP_KEY4 = A_PP_KEY4
   AND PP_KEY5 = A_PP_KEY5;
L_STPP_REC    L_STPP_CURSOR%ROWTYPE;

BEGIN

   L_SQLERRM := NULL;
   L_SQLERRM2 := NULL;

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   
   IF NVL(A_PP, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID ;
      RAISE STPERROR ;
   END IF;

   IF NVL(A_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   IF A_PP_KEY1 IS NULL OR
      A_PP_KEY2 IS NULL OR
      A_PP_KEY3 IS NULL OR
      A_PP_KEY4 IS NULL OR
      A_PP_KEY5 IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOPPKEYID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_CP_PP, ' ') = ' ' THEN
      
      A_CP_PP := A_PP;
   END IF;

   IF A_CP_PP_KEY1 IS NULL THEN
      
      A_CP_PP_KEY1 := A_PP_KEY1;
   END IF;

   IF A_CP_PP_KEY2 IS NULL THEN
      
      A_CP_PP_KEY2 := A_PP_KEY2;
   END IF;

   IF A_CP_PP_KEY3 IS NULL THEN
      
      A_CP_PP_KEY3 := A_PP_KEY3;
   END IF;

   IF A_CP_PP_KEY4 IS NULL THEN
      
      A_CP_PP_KEY4 := A_PP_KEY4;
   END IF;

   IF A_CP_PP_KEY5 IS NULL THEN
      
      A_CP_PP_KEY5 := A_PP_KEY5;
   END IF;

   
   OPEN L_PP_CURSOR(A_PP, A_VERSION, A_PP_KEY1, A_PP_KEY2, A_PP_KEY3, A_PP_KEY4, A_PP_KEY5);
   FETCH L_PP_CURSOR
   INTO L_PP_REC;
   IF L_PP_CURSOR%NOTFOUND THEN
      CLOSE L_PP_CURSOR;
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR;
   END IF;
   CLOSE L_PP_CURSOR;
   
   L_LOG_HS := L_PP_REC.LOG_HS;

   
   IF A_CP_VERSION IS NOT NULL THEN
      OPEN L_PP_CURSOR(A_CP_PP, A_CP_VERSION, A_CP_PP_KEY1, A_CP_PP_KEY2, A_CP_PP_KEY3, A_CP_PP_KEY4, A_CP_PP_KEY5);
      FETCH L_PP_CURSOR
      INTO L_PP_REC;
      IF L_PP_CURSOR%FOUND THEN
         CLOSE L_PP_CURSOR;
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_ALREADYEXISTS;
         RAISE STPERROR;
      END IF;
      CLOSE L_PP_CURSOR;
   END IF;

   
   
   IF A_CP_VERSION IS NULL THEN
      
      IF A_PP = A_CP_PP AND 
         A_PP_KEY1 = A_CP_PP_KEY1 AND 
         A_PP_KEY2 = A_CP_PP_KEY2 AND 
         A_PP_KEY3 = A_CP_PP_KEY3 AND 
         A_PP_KEY4 = A_CP_PP_KEY4 AND 
         A_PP_KEY5 = A_CP_PP_KEY5 THEN 
         A_CP_VERSION := A_VERSION;
         L_RET_CODE := UNVERSION.GETPPHIGHESTMINORVERSION(A_CP_PP, A_CP_VERSION, A_CP_PP_KEY1, A_CP_PP_KEY2, A_CP_PP_KEY3, A_CP_PP_KEY4, A_CP_PP_KEY5);
         IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
            L_SQLERRM := 'UNVERSION.GetPpHighestMinorVersion#ret_code='||L_RET_CODE||'#pp='||A_CP_PP||'version='||A_CP_VERSION||
                         'pp_k1='||A_CP_PP_KEY1||'pp_k2='||A_CP_PP_KEY2||'pp_k3='||A_CP_PP_KEY3||'pp_k4='||A_CP_PP_KEY4||'pp_k5='||A_CP_PP_KEY5;
            RAISE STPERROR;
         END IF;

         L_RET_CODE := UNVERSION.GETNEXTMINORVERSION(A_CP_VERSION);
         IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
            L_SQLERRM := 'UNVERSION.GetNextMinorVersion#ret_code='||L_RET_CODE||'#version='||A_CP_VERSION;
            RAISE STPERROR;
         END IF;
      ELSE
         L_RET_CODE := UNVERSION.GETPPHIGHESTMAJORVERSION(A_CP_PP, A_CP_VERSION, A_CP_PP_KEY1, A_CP_PP_KEY2, A_CP_PP_KEY3, A_CP_PP_KEY4, A_CP_PP_KEY5);
         IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
            L_SQLERRM := 'UNVERSION.GetPpHighestMajorVersion#ret_code='||L_RET_CODE||'#pp='||A_CP_PP||'version='||A_CP_VERSION||
                         'pp_k1='||A_CP_PP_KEY1||'pp_k2='||A_CP_PP_KEY2||'pp_k3='||A_CP_PP_KEY3||'pp_k4='||A_CP_PP_KEY4||'pp_k5='||A_CP_PP_KEY5;
            RAISE STPERROR;
         END IF;

         L_RET_CODE := UNVERSION.GETNEXTMAJORVERSION(A_CP_VERSION);
         IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
            L_SQLERRM := 'UNVERSION.GetNextMajorVersion#ret_code='||L_RET_CODE||'#version='||A_CP_VERSION;
            RAISE STPERROR;
         END IF;
         
      END IF;
   END IF;

   
   
   
   
   
   
   L_RET_CODE := UNAPIPPP.GETPPAUTHORISATION(A_CP_PP, A_CP_VERSION, 
                                             A_CP_PP_KEY1, A_CP_PP_KEY2, A_CP_PP_KEY3, A_CP_PP_KEY4, A_CP_PP_KEY5,
                                             L_TEMP_LC, L_TEMP_LC_VERSION, L_TEMP_SS, L_TEMP_ALLOW_MODIFY,
                                             L_TEMP_ACTIVE, L_TEMP_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_NOOBJECT  THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_ALREADYEXISTS;
      RAISE STPERROR;
   END IF;

   
   

   
   
   L_SQL_STRING := 'INSERT INTO utpp(pp, version, pp_key1, pp_key2, pp_key3, pp_key4, pp_key5,' ||
                   'description, description2, unit, format, confirm_assign, ' ||
                   'allow_any_pr, never_create_methods, delay, delay_unit, is_template, ' ||
                   'sc_lc, sc_lc_version, inherit_au, last_comment, pp_class, ' ||
                   'log_hs, allow_modify, active, lc, lc_version, ss';
   FOR I IN 1..UNAPIGEN.P_DATADOMAINS LOOP
      L_SQL_STRING := L_SQL_STRING||', ar'||I;
   END LOOP;
   L_SQL_STRING := L_SQL_STRING||') ';
   L_SQL_STRING := L_SQL_STRING||'SELECT :a_cp_pp, :a_cp_version, '||
                   ':a_cp_pp_key1, :a_cp_pp_key2, :a_cp_pp_key3, :a_cp_pp_key4, :a_cp_pp_key5,'||
                   'description, description2, unit, format, confirm_assign, ' ||
                   'allow_any_pr, never_create_methods, delay, delay_unit, is_template, ' ||
                   'sc_lc, sc_lc_version, inherit_au, last_comment, pp_class, ' ||
                   'log_hs, ''#'', ''0'', lc, lc_version, NULL';
   FOR I IN 1..UNAPIGEN.P_DATADOMAINS LOOP
      L_SQL_STRING := L_SQL_STRING||', ar'||I;
   END LOOP;
   L_SQL_STRING := L_SQL_STRING||' FROM utpp WHERE pp = :a_pp'||
                                             ' AND version = :a_version'||
                                             ' AND pp_key1 = :a_pp_key1'||
                                             ' AND pp_key2 = :a_pp_key2'||
                                             ' AND pp_key3 = :a_pp_key3'||
                                             ' AND pp_key4 = :a_pp_key4'||
                                             ' AND pp_key5 = :a_pp_key5';
   L_DYN_CURSOR := DBMS_SQL.OPEN_CURSOR;
   BEGIN
      DBMS_SQL.PARSE(L_DYN_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      DBMS_SQL.BIND_VARIABLE(L_DYN_CURSOR, ':a_pp', A_PP);
      DBMS_SQL.BIND_VARIABLE(L_DYN_CURSOR, ':a_version', A_VERSION);
      DBMS_SQL.BIND_VARIABLE(L_DYN_CURSOR, ':a_pp_key1', A_PP_KEY1);
      DBMS_SQL.BIND_VARIABLE(L_DYN_CURSOR, ':a_pp_key2', A_PP_KEY2);
      DBMS_SQL.BIND_VARIABLE(L_DYN_CURSOR, ':a_pp_key3', A_PP_KEY3);
      DBMS_SQL.BIND_VARIABLE(L_DYN_CURSOR, ':a_pp_key4', A_PP_KEY4);
      DBMS_SQL.BIND_VARIABLE(L_DYN_CURSOR, ':a_pp_key5', A_PP_KEY5);
      DBMS_SQL.BIND_VARIABLE(L_DYN_CURSOR, ':a_cp_pp', A_CP_PP);
      DBMS_SQL.BIND_VARIABLE(L_DYN_CURSOR, ':a_cp_version', A_CP_VERSION);
      DBMS_SQL.BIND_VARIABLE(L_DYN_CURSOR, ':a_cp_pp_key1', A_CP_PP_KEY1);
      DBMS_SQL.BIND_VARIABLE(L_DYN_CURSOR, ':a_cp_pp_key2', A_CP_PP_KEY2);
      DBMS_SQL.BIND_VARIABLE(L_DYN_CURSOR, ':a_cp_pp_key3', A_CP_PP_KEY3);
      DBMS_SQL.BIND_VARIABLE(L_DYN_CURSOR, ':a_cp_pp_key4', A_CP_PP_KEY4);
      DBMS_SQL.BIND_VARIABLE(L_DYN_CURSOR, ':a_cp_pp_key5', A_CP_PP_KEY5);
      L_RET_CODE := DBMS_SQL.EXECUTE(L_DYN_CURSOR);
   EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := 'Error while copying data for table utpp#sqlcode='||SQLCODE;
      L_SQLERRM2 := 'Used Sql statement: '||SUBSTR(L_SQL_STRING,1,230);
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END;
   L_SQLERRM2 := NULL;
   
   DBMS_SQL.CLOSE_CURSOR(L_DYN_CURSOR);

   INSERT INTO UTPPAU
   (PP, VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, AU, AU_VERSION, AUSEQ, VALUE)
   SELECT A_CP_PP, A_CP_VERSION, A_CP_PP_KEY1, A_CP_PP_KEY2, A_CP_PP_KEY3, A_CP_PP_KEY4, A_CP_PP_KEY5, AU, AU_VERSION, AUSEQ, VALUE
   FROM UTPPAU
   WHERE PP = A_PP
     AND VERSION = A_VERSION
     AND PP_KEY1 = A_PP_KEY1
     AND PP_KEY2 = A_PP_KEY2
     AND PP_KEY3 = A_PP_KEY3
     AND PP_KEY4 = A_PP_KEY4
     AND PP_KEY5 = A_PP_KEY5;

   

   INSERT INTO UTPPPR
   (PP, VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, 
    PR, PR_VERSION, SEQ, NR_MEASUR, UNIT, FORMAT, DELAY, DELAY_UNIT,
    ALLOW_ADD, IS_PP, FREQ_TP, FREQ_VAL, FREQ_UNIT, INVERT_FREQ, 
    ST_BASED_FREQ, LAST_SCHED, LAST_CNT, LAST_VAL, INHERIT_AU, 
    MT, MT_VERSION, MT_NR_MEASUR)
   SELECT A_CP_PP, A_CP_VERSION, A_CP_PP_KEY1, A_CP_PP_KEY2, A_CP_PP_KEY3, A_CP_PP_KEY4, A_CP_PP_KEY5,
          PR, PR_VERSION, SEQ, NR_MEASUR, UNIT, FORMAT, DELAY, DELAY_UNIT,
          ALLOW_ADD, IS_PP, FREQ_TP, FREQ_VAL, FREQ_UNIT, INVERT_FREQ, 
          ST_BASED_FREQ, LAST_SCHED, LAST_CNT, LAST_VAL, INHERIT_AU, 
          MT, MT_VERSION, MT_NR_MEASUR
   FROM UTPPPR
   WHERE PP = A_PP
     AND VERSION = A_VERSION     
     AND PP_KEY1 = A_PP_KEY1
     AND PP_KEY2 = A_PP_KEY2
     AND PP_KEY3 = A_PP_KEY3
     AND PP_KEY4 = A_PP_KEY4
     AND PP_KEY5 = A_PP_KEY5;

   INSERT INTO UTPPPRAU
   (PP, VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, 
    PR, PR_VERSION, AU, AU_VERSION, AUSEQ, VALUE)
   SELECT A_CP_PP, A_CP_VERSION, A_CP_PP_KEY1, A_CP_PP_KEY2, A_CP_PP_KEY3, A_CP_PP_KEY4, A_CP_PP_KEY5,
          PR, PR_VERSION, AU, AU_VERSION, AUSEQ, VALUE
   FROM UTPPPRAU
   WHERE PP = A_PP
     AND VERSION = A_VERSION     
     AND PP_KEY1 = A_PP_KEY1
     AND PP_KEY2 = A_PP_KEY2
     AND PP_KEY3 = A_PP_KEY3
     AND PP_KEY4 = A_PP_KEY4
     AND PP_KEY5 = A_PP_KEY5;

   INSERT INTO UTPPSPA
   (PP, VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5,
    PR, PR_VERSION, SEQ, LOW_LIMIT, HIGH_LIMIT, LOW_SPEC, HIGH_SPEC, 
    LOW_DEV, REL_LOW_DEV, TARGET, HIGH_DEV, REL_HIGH_DEV)
   SELECT A_CP_PP, A_CP_VERSION, A_CP_PP_KEY1, A_CP_PP_KEY2, A_CP_PP_KEY3, A_CP_PP_KEY4, A_CP_PP_KEY5,
          PR, PR_VERSION, SEQ, LOW_LIMIT, HIGH_LIMIT, LOW_SPEC, HIGH_SPEC, 
          LOW_DEV, REL_LOW_DEV, TARGET, HIGH_DEV, REL_HIGH_DEV
   FROM UTPPSPA
   WHERE PP = A_PP
     AND VERSION = A_VERSION     
     AND PP_KEY1 = A_PP_KEY1
     AND PP_KEY2 = A_PP_KEY2
     AND PP_KEY3 = A_PP_KEY3
     AND PP_KEY4 = A_PP_KEY4
     AND PP_KEY5 = A_PP_KEY5;

   INSERT INTO UTPPSPB
   (PP, VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5,
    PR, PR_VERSION, SEQ, LOW_LIMIT, HIGH_LIMIT, LOW_SPEC, HIGH_SPEC, 
    LOW_DEV, REL_LOW_DEV, TARGET, HIGH_DEV, REL_HIGH_DEV)
   SELECT A_CP_PP, A_CP_VERSION, A_CP_PP_KEY1, A_CP_PP_KEY2, A_CP_PP_KEY3, A_CP_PP_KEY4, A_CP_PP_KEY5,
          PR, PR_VERSION, SEQ, LOW_LIMIT, HIGH_LIMIT, LOW_SPEC, HIGH_SPEC, 
          LOW_DEV, REL_LOW_DEV, TARGET, HIGH_DEV, REL_HIGH_DEV
   FROM UTPPSPB
   WHERE PP = A_PP
     AND VERSION = A_VERSION     
     AND PP_KEY1 = A_PP_KEY1
     AND PP_KEY2 = A_PP_KEY2
     AND PP_KEY3 = A_PP_KEY3
     AND PP_KEY4 = A_PP_KEY4
     AND PP_KEY5 = A_PP_KEY5;

   INSERT INTO UTPPSPC
   (PP, VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5,
    PR, PR_VERSION, SEQ, LOW_LIMIT, HIGH_LIMIT, LOW_SPEC, HIGH_SPEC, 
    LOW_DEV, REL_LOW_DEV, TARGET, HIGH_DEV, REL_HIGH_DEV)
   SELECT A_CP_PP, A_CP_VERSION, A_CP_PP_KEY1, A_CP_PP_KEY2, A_CP_PP_KEY3, A_CP_PP_KEY4, A_CP_PP_KEY5,
          PR, PR_VERSION, SEQ, LOW_LIMIT, HIGH_LIMIT, LOW_SPEC, HIGH_SPEC, 
          LOW_DEV, REL_LOW_DEV, TARGET, HIGH_DEV, REL_HIGH_DEV
   FROM UTPPSPC
   WHERE PP = A_PP
     AND VERSION = A_VERSION     
     AND PP_KEY1 = A_PP_KEY1
     AND PP_KEY2 = A_PP_KEY2
     AND PP_KEY3 = A_PP_KEY3
     AND PP_KEY4 = A_PP_KEY4
     AND PP_KEY5 = A_PP_KEY5;

   
   L_EVENT_TP := 'ObjectCreated';
   L_EV_DETAILS := 'version='||A_CP_VERSION||'#pp_key1='||A_CP_PP_KEY1||'#pp_key2='||A_CP_PP_KEY2||
                   '#pp_key3='||A_CP_PP_KEY3||'#pp_key4='||A_CP_PP_KEY4||'#pp_key5='||A_CP_PP_KEY5;   
   L_EV_SEQ_NR := -1;
   L_RET_CODE := UNAPIEV.INSERTEVENT('NewPpVersion',UNAPIGEN.P_EVMGR_NAME,
                                     'pp', A_CP_PP, '', '', '', L_EVENT_TP,
                                     L_EV_DETAILS, L_EV_SEQ_NR);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   IF L_LOG_HS = '1' THEN
      IF A_PP = A_CP_PP AND 
         A_PP_KEY1 = A_CP_PP_KEY1 AND 
         A_PP_KEY2 = A_CP_PP_KEY2 AND 
         A_PP_KEY3 = A_CP_PP_KEY3 AND 
         A_PP_KEY4 = A_CP_PP_KEY4 AND 
         A_PP_KEY5 = A_CP_PP_KEY5 THEN 
         INSERT INTO UTPPHS (PP, VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, 
                             WHO, WHO_DESCRIPTION, WHAT,
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_CP_PP, A_CP_VERSION, A_CP_PP_KEY1, A_CP_PP_KEY2, A_CP_PP_KEY3, A_CP_PP_KEY4, A_CP_PP_KEY5,
                 UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP,
                 'parameter profile "'||A_CP_PP||'" version "'||A_CP_VERSION||'" is created based on version "'||A_VERSION||'"',
                 CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      ELSE
         INSERT INTO UTPPHS (PP, VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, 
                             WHO, WHO_DESCRIPTION, WHAT,
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_CP_PP, A_CP_VERSION, A_CP_PP_KEY1, A_CP_PP_KEY2, A_CP_PP_KEY3, A_CP_PP_KEY4, A_CP_PP_KEY5,
                 UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP,
                 'parameter profile "'||A_CP_PP||'" version "'||A_CP_VERSION||'" is created based on parameter profile "'||A_PP||'" version "'||A_VERSION||'"',
                 CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   END IF;

   
   IF UNAPIGEN.P_PP_KEY4PRODUCT IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SETCONNECTION;
      RAISE STPERROR;               
   END IF;
   L_ST := NULL;
   IF NVL(A_CP_PP_KEY1, ' ') <> ' ' AND UNAPIGEN.P_PP_KEY4PRODUCT = 1 THEN
      L_ST := A_CP_PP_KEY1;
   ELSIF NVL(A_CP_PP_KEY2, ' ') <> ' ' AND UNAPIGEN.P_PP_KEY4PRODUCT = 2 THEN
      L_ST := A_CP_PP_KEY2;
   ELSIF NVL(A_CP_PP_KEY3, ' ') <> ' ' AND UNAPIGEN.P_PP_KEY4PRODUCT = 3 THEN
      L_ST := A_CP_PP_KEY3;
   ELSIF NVL(A_CP_PP_KEY4, ' ') <> ' ' AND UNAPIGEN.P_PP_KEY4PRODUCT = 4 THEN
      L_ST := A_CP_PP_KEY4;
   ELSIF NVL(A_CP_PP_KEY5, ' ') <> ' ' AND UNAPIGEN.P_PP_KEY4PRODUCT = 5 THEN
      L_ST := A_CP_PP_KEY5;
   END IF;
   IF L_ST IS NOT NULL THEN
      
      
      
      L_ST_VERSION := UNVERSION.SQLGETHIGHESTMAJORVERSION('st', L_ST, '');
      IF L_ST_VERSION IS NULL THEN
         L_SQLERRM := 'An attempt was made to store a sample type specific parameter profile but the sample type "'||L_ST||'" does not exist!';
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
         RAISE STPERROR;
      END IF;
      
      
      OPEN L_STPP_CURSOR(L_ST, L_ST_VERSION, A_CP_PP, A_CP_PP_KEY1, A_CP_PP_KEY2, 
                         A_CP_PP_KEY3, A_CP_PP_KEY4, A_CP_PP_KEY5);
      FETCH L_STPP_CURSOR
      INTO L_STPP_REC;
      L_ALREADY_PRESENT := L_STPP_CURSOR%FOUND;
      CLOSE L_STPP_CURSOR;
      
      IF L_ALREADY_PRESENT = FALSE THEN
         
         L_RET_CODE := UNAPIGEN.GETAUTHORISATION('st', L_ST, L_ST_VERSION, L_ST_LC, 
                                                 L_ST_LC_VERSION, L_ST_SS,
                                                 L_ST_ALLOW_MODIFY, L_ST_ACTIVE, L_ST_LOG_HS);
         IF L_RET_CODE = UNAPIGEN.DBERR_NOTMODIFIABLE THEN
            IF UNAPIGEN.ISSYSTEM21CFR11COMPLIANT = UNAPIGEN.DBERR_SUCCESS THEN
               
               
               L_NEW_ST_VERSION := NULL;
               L_RET_CODE := UNAPIST.COPYSAMPLETYPE
                                     (L_ST, L_ST_VERSION, L_ST, L_NEW_ST_VERSION,'');
               IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
                  L_SQLERRM := 'CopySampleType#ret_code='||L_RET_CODE||'#st='||L_ST||
                                   '#version='||L_ST_VERSION||'#cp_st='||L_ST||
                                   '#cp_version='||L_NEW_ST_VERSION;
                  UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
                  RAISE STPERROR;
               END IF;
               L_ST_VERSION := L_NEW_ST_VERSION;                       
            ELSE
               UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_STPPNOTAUTHORISED;
               UNAPIAUT.P_NOT_AUTHORISED := 'st='||L_ST||'#version='||L_ST_VERSION||
                                               '#authorisation_error='||L_RET_CODE;
               RAISE STPERROR;            
            END IF;
         ELSIF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_STPPNOTAUTHORISED;
            UNAPIAUT.P_NOT_AUTHORISED := 'st='||L_ST||'#version='||L_ST_VERSION||
                                            '#authorisation_error='||L_RET_CODE;
            RAISE STPERROR;            
         END IF;

         
         
         INSERT INTO UTSTPP
         (ST, VERSION, PP, PP_VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, 
          SEQ, FREQ_TP, FREQ_VAL, FREQ_UNIT, INVERT_FREQ, LAST_SCHED, LAST_SCHED_TZ,
          LAST_CNT, LAST_VAL, INHERIT_AU)
         SELECT L_ST, L_ST_VERSION, A_CP_PP, '~Current~', A_CP_PP_KEY1, A_CP_PP_KEY2, 
                A_CP_PP_KEY3, A_CP_PP_KEY4, A_CP_PP_KEY5, NVL(MAX(SEQ),0)+1, 'A', 0, 
                'DD', '0', NULL, NULL, 0, NULL, '2'
         FROM UTSTPP
         WHERE ST = L_ST
           AND VERSION = L_ST_VERSION;

         L_EV_SEQ_NR := -1;
         L_EVENT_TP := 'UsedObjectsUpdated';
         L_RESULT := UNAPIEV.INSERTEVENT('SaveStParameterProfile', UNAPIGEN.P_EVMGR_NAME,
                                         'st', L_ST, L_ST_LC, L_ST_LC_VERSION, L_ST_SS, 
                                         L_EVENT_TP, 'version='||L_ST_VERSION, L_EV_SEQ_NR);
         IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
            UNAPIGEN.P_TXN_ERROR := L_RESULT;
            RAISE STPERROR;
         END IF;

         IF L_ST_LOG_HS = '1' THEN
            INSERT INTO UTSTHS(ST, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                               WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
            VALUES (L_ST, L_ST_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                    'sample type "'||L_ST||'" parameter profiles are updated.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
                    A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
         END IF;
      END IF;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('CopyParameterProfile',SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('CopyParameterProfile',L_SQLERRM);
      IF L_SQLERRM2 IS NOT NULL THEN
         UNAPIGEN.LOGERROR('CopyParameterProfile',L_SQLERRM2);
      END IF;
   END IF;
   IF L_PP_CURSOR%ISOPEN THEN
      CLOSE L_PP_CURSOR;
   END IF;
   IF DBMS_SQL.IS_OPEN(L_DYN_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_DYN_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'CopyParameterProfile'));
END COPYPARAMETERPROFILE;




BEGIN
   P_PP_CURSOR := NULL;
END UNAPIPP;
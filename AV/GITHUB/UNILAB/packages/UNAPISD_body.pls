PACKAGE BODY unapisd AS

TYPE BOOLEAN_TABLE_TYPE IS TABLE OF BOOLEAN INDEX BY BINARY_INTEGER;
P_SELECTSD_CURSOR        INTEGER;
P_SELECTSDGK_CURSOR      INTEGER;
P_SELECTSDPROP_CURSOR    INTEGER;

L_SQLERRM         VARCHAR2(255);
L_SQL_STRING      VARCHAR2(4000);
L_WHERE_CLAUSE    VARCHAR2(3000);
L_EVENT_TP        UTEV.EV_TP%TYPE;
L_RET_CODE        NUMBER;
L_RESULT          NUMBER;
L_FETCHED_ROWS    NUMBER;
L_EV_SEQ_NR       NUMBER;
L_EV_DETAILS      VARCHAR2(255);
L_WHAT_DESCRIPTION VARCHAR2(2000);
STPERROR          EXCEPTION;

FUNCTION GETVERSION
   RETURN VARCHAR2
IS
BEGIN
   RETURN('06.07.00.00_00.13');
EXCEPTION
   WHEN OTHERS THEN
      RETURN (NULL);
END GETVERSION;

FUNCTION SAVESTUDY
(A_SD                  IN     VARCHAR2 ,    
 A_PT                  IN     VARCHAR2 ,    
 A_PT_VERSION          IN     VARCHAR2 ,    
 A_DESCRIPTION         IN     VARCHAR2 ,    
 A_DESCR_DOC           IN     VARCHAR2 ,    
 A_DESCR_DOC_VERSION   IN     VARCHAR2 ,    
 A_RESPONSIBLE         IN     VARCHAR2 ,    
 A_LABEL_FORMAT        IN     VARCHAR2 ,    
 A_CREATION_DATE       IN     DATE     ,    
 A_CREATED_BY          IN     VARCHAR2 ,    
 A_EXEC_START_DATE     IN     DATE     ,    
 A_EXEC_END_DATE       IN     DATE     ,    
 A_T0_DATE             IN     DATE     ,    
 A_NR_SC_CURRENT       IN     NUMBER   ,    
 A_SD_CLASS            IN     VARCHAR2 ,    
 A_LOG_HS              IN     CHAR     ,    
 A_LOG_HS_DETAILS      IN     CHAR     ,    
 A_LC                  IN     VARCHAR2 ,    
 A_LC_VERSION          IN     VARCHAR2 ,    
 A_MODIFY_REASON       IN     VARCHAR2)     
RETURN NUMBER IS

L_LC                  VARCHAR2(2);
L_LC_VERSION          VARCHAR2(20);
L_SS                  VARCHAR2(2);
L_LOG_HS              CHAR(1);
L_LOG_HS_DETAILS      CHAR(1);
L_ALLOW_MODIFY        CHAR(1);
L_ACTIVE              CHAR(1);
L_INSERT              BOOLEAN;
L_DELAYED_TILL        TIMESTAMP WITH TIME ZONE;
L_CURRENT_TIMESTAMP             TIMESTAMP WITH TIME ZONE;
L_REF_DATE            TIMESTAMP WITH TIME ZONE;
L_HS_DETAILS_SEQ_NR   INTEGER;
L_PT_VERSION          VARCHAR2(20);
L_T0_DATE_OLD         TIMESTAMP WITH TIME ZONE;

CURSOR L_SDOLD_CURSOR (A_SD IN VARCHAR2) IS
   SELECT A.*
   FROM UDSD A
   WHERE A.SD = A_SD;
L_SDOLD_REC UDSD%ROWTYPE;
L_SDNEW_REC UDSD%ROWTYPE;
L_CSNODE NUMBER;

CURSOR L_SDCS_CURSOR (A_SD IN VARCHAR2) IS
   SELECT CSNODE
   FROM UTSDCS
   WHERE SD = A_SD
   AND T0_DATE IS NULL;


BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_SD, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_LOG_HS, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_LOGHS;
      RAISE STPERROR;
   END IF;
   L_T0_DATE_OLD := NULL;
   L_CURRENT_TIMESTAMP := CURRENT_TIMESTAMP;
   L_PT_VERSION := A_PT_VERSION;
   L_RET_CODE := UNAPIAUT.GETSDAUTHORISATION(A_SD, L_PT_VERSION, L_LC, L_LC_VERSION, L_SS,
                                             L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS, L_LOG_HS_DETAILS);
   IF L_RET_CODE = UNAPIGEN.DBERR_NOOBJECT THEN
      L_INSERT := TRUE;
   ELSIF L_RET_CODE = UNAPIGEN.DBERR_SUCCESS THEN
      L_INSERT := FALSE;
   ELSE
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   IF L_INSERT THEN                
      IF NVL(A_LC, ' ') <> ' ' THEN
         L_LC := A_LC;
      END IF;
      IF NVL(A_LC_VERSION, ' ') <> ' ' THEN
         L_LC_VERSION := A_LC_VERSION;
      END IF;

      
      
      INSERT INTO UTSD(SD, PT, PT_VERSION, DESCRIPTION, DESCR_DOC, DESCR_DOC_VERSION,
                  RESPONSIBLE, LABEL_FORMAT, CREATION_DATE, CREATION_DATE_TZ, CREATED_BY,
        EXEC_START_DATE, EXEC_START_DATE_TZ, EXEC_END_DATE, EXEC_END_DATE_TZ,
                  T0_DATE, T0_DATE_TZ, NR_SC_CURRENT, SD_CLASS, LOG_HS, LOG_HS_DETAILS, 
                       ALLOW_MODIFY, ACTIVE, LC, LC_VERSION)
      VALUES(A_SD, A_PT, A_PT_VERSION, A_DESCRIPTION, A_DESCR_DOC, A_DESCR_DOC_VERSION, 
            A_RESPONSIBLE, A_LABEL_FORMAT, A_CREATION_DATE, A_CREATION_DATE, A_CREATED_BY,
       A_EXEC_START_DATE, A_EXEC_START_DATE, A_EXEC_END_DATE, A_EXEC_END_DATE, 
            A_T0_DATE, A_T0_DATE, A_NR_SC_CURRENT, A_SD_CLASS, A_LOG_HS, A_LOG_HS_DETAILS, 
             '#', '0', L_LC, L_LC_VERSION);
      UNAPIAUT.UPDATELCINAUTHORISATIONBUFFER('sd', A_SD, '', L_LC, L_LC_VERSION);             
      L_EVENT_TP := 'StudyCreated';
   ELSE                             
      
      
      
      OPEN L_SDOLD_CURSOR(A_SD);
      FETCH L_SDOLD_CURSOR
      INTO L_SDOLD_REC;
      CLOSE L_SDOLD_CURSOR;
      L_SDNEW_REC := L_SDOLD_REC;
      
      L_T0_DATE_OLD := L_SDOLD_REC.T0_DATE;
      
      
      
      
      UPDATE UTSD
      SET DESCRIPTION          = A_DESCRIPTION,
          RESPONSIBLE          = A_RESPONSIBLE,
          LABEL_FORMAT         = A_LABEL_FORMAT,
          CREATION_DATE        = A_CREATION_DATE,
          CREATION_DATE_TZ     =  DECODE(A_CREATION_DATE, CREATION_DATE_TZ, CREATION_DATE_TZ, A_CREATION_DATE),
          CREATED_BY           = A_CREATED_BY,
          EXEC_START_DATE      = A_EXEC_START_DATE,  
          EXEC_START_DATE_TZ   =  DECODE(A_EXEC_START_DATE, EXEC_START_DATE_TZ, EXEC_START_DATE_TZ, A_EXEC_START_DATE),  
          EXEC_END_DATE        = A_EXEC_END_DATE, 
          EXEC_END_DATE_TZ     =  DECODE(A_EXEC_END_DATE, EXEC_END_DATE_TZ, EXEC_END_DATE_TZ, A_EXEC_END_DATE), 
          T0_DATE              = A_T0_DATE,
          T0_DATE_TZ           = DECODE(A_T0_DATE, T0_DATE_TZ, T0_DATE_TZ, A_T0_DATE),
          NR_SC_CURRENT        = A_NR_SC_CURRENT,
          SD_CLASS             = A_SD_CLASS,
          LOG_HS               = A_LOG_HS,
          LOG_HS_DETAILS       = A_LOG_HS_DETAILS,
          ALLOW_MODIFY         = '#'
      WHERE SD = A_SD
      RETURNING DESCRIPTION, RESPONSIBLE, LABEL_FORMAT, 
                CREATION_DATE, CREATION_DATE_TZ, CREATED_BY, EXEC_START_DATE, EXEC_START_DATE_TZ,
      EXEC_END_DATE, EXEC_END_DATE_TZ, T0_DATE,  T0_DATE_TZ, 
                NR_SC_CURRENT, SD_CLASS, LOG_HS, LOG_HS_DETAILS, ALLOW_MODIFY
      INTO L_SDNEW_REC.DESCRIPTION, L_SDNEW_REC.RESPONSIBLE, L_SDNEW_REC.LABEL_FORMAT, 
           L_SDNEW_REC.CREATION_DATE, L_SDNEW_REC.CREATION_DATE_TZ, L_SDNEW_REC.CREATED_BY, 
      L_SDNEW_REC.EXEC_START_DATE, L_SDNEW_REC.EXEC_START_DATE_TZ, 
           L_SDNEW_REC.EXEC_END_DATE, L_SDNEW_REC.EXEC_END_DATE_TZ, 
      L_SDNEW_REC.T0_DATE, L_SDNEW_REC.T0_DATE_TZ, L_SDNEW_REC.NR_SC_CURRENT, 
           L_SDNEW_REC.SD_CLASS, L_SDNEW_REC.LOG_HS, L_SDNEW_REC.LOG_HS_DETAILS, 
           L_SDNEW_REC.ALLOW_MODIFY;
      L_EVENT_TP := 'StudyUpdated';
   END IF;

   
   
   
   L_RET_CODE := UNAPISD.UPDATELINKEDSDII
                   (A_SD, NULL, '1', A_PT, A_PT_VERSION, A_DESCRIPTION, A_DESCR_DOC, A_DESCR_DOC_VERSION, 
                    A_RESPONSIBLE, A_LABEL_FORMAT, A_CREATION_DATE, A_CREATED_BY, A_EXEC_START_DATE, A_EXEC_END_DATE, 
                    A_T0_DATE,  A_NR_SC_CURRENT);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   L_EV_SEQ_NR := -1;
   L_EV_DETAILS := 'pt_version=' || L_PT_VERSION;
   L_RESULT := UNAPIEV.INSERTEVENT('SaveStudy', UNAPIGEN.P_EVMGR_NAME, 'sd', A_SD, L_LC, 
                                   L_LC_VERSION, L_SS, L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   
   
   
   IF NVL(L_LOG_HS, ' ') <> A_LOG_HS THEN
      IF A_LOG_HS = '1' THEN
         INSERT INTO UTSDHS(SD, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES(A_SD, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 'History switched ON', 
                'Audit trail is turned on.', 
                L_CURRENT_TIMESTAMP, L_CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      ELSE
         INSERT INTO UTSDHS(SD, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES(A_SD, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 'History switched OFF', 
                'Audit trail is turned off.', 
                L_CURRENT_TIMESTAMP, L_CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   END IF;

   
   
   
   L_HS_DETAILS_SEQ_NR := 0;
   IF NVL(L_LOG_HS_DETAILS, ' ') <> A_LOG_HS_DETAILS THEN
      IF A_LOG_HS_DETAILS = '1' THEN
         L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
         INSERT INTO UTSDHSDETAILS(SD, TR_SEQ, EV_SEQ, SEQ, DETAILS)
         VALUES(A_SD, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR, 
                'Audit trail is turned on.');
      ELSE
         L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
         INSERT INTO UTSDHSDETAILS(SD, TR_SEQ, EV_SEQ, SEQ, DETAILS)
         VALUES(A_SD, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR, 
                'Audit trail is turned off.');
      END IF;
   END IF;

   IF NVL(L_LOG_HS, ' ') = '1' THEN
      IF L_EVENT_TP = 'StudyCreated' THEN
         INSERT INTO UTSDHS(SD, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES(A_SD, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                'study "'||A_SD||'" is created.', 
                L_CURRENT_TIMESTAMP, L_CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      ELSE
         INSERT INTO UTSDHS(SD, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES(A_SD, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                'study "'||A_SD||'" is updated.', 
                L_CURRENT_TIMESTAMP, L_CURRENT_TIMESTAMP,  A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   END IF;

   IF NVL(L_LOG_HS_DETAILS, ' ') = '1' THEN
      IF L_EVENT_TP = 'StudyCreated' THEN
         L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
         INSERT INTO UTSDHSDETAILS(SD, TR_SEQ, EV_SEQ, SEQ, DETAILS)
         VALUES(A_SD, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR, 
                'study "'||A_SD||'" is created.');
      ELSE
         L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
         INSERT INTO UTSDHSDETAILS(SD, TR_SEQ, EV_SEQ, SEQ, DETAILS)
         VALUES(A_SD, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR, 
                'study "'||A_SD||'" is updated.');
         UNAPIHSDETAILS.ADDSDHSDETAILS(L_SDOLD_REC, L_SDNEW_REC, UNAPIGEN.P_TR_SEQ, 
                                       L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR); 
      END IF;
   END IF;

    IF (L_T0_DATE_OLD IS NULL) AND NOT(A_T0_DATE IS NULL) THEN
       
       FOR L_CS_REC IN L_SDCS_CURSOR(A_SD) LOOP
           L_CSNODE := L_CS_REC.CSNODE;
           UPDATE UTSDCS
           SET T0_DATE = A_T0_DATE,
              T0_DATE_TZ =  DECODE(A_T0_DATE, T0_DATE_TZ, T0_DATE_TZ, A_T0_DATE)
           WHERE SD = A_SD
             AND CSNODE =L_CSNODE; 
           L_EV_SEQ_NR := -1;
           L_EVENT_TP := 'T0_dateSet';
           L_EV_DETAILS :=  'csnode=' || L_CSNODE;
           L_RESULT := UNAPIEV.INSERTEVENT('SaveStudy', UNAPIGEN.P_EVMGR_NAME, 'sd', A_SD, L_LC, 
                                          L_LC_VERSION, L_SS, L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);
           IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS  THEN
             UNAPIGEN.P_TXN_ERROR := L_RESULT;
             RAISE STPERROR;
           END IF;
       END LOOP;
    END IF;
    
    IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
        RAISE STPERROR;
    END IF;

    RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveStudy', SQLERRM);
   END IF;
   IF L_SDOLD_CURSOR%ISOPEN THEN
      CLOSE L_SDOLD_CURSOR;
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveStudy'));
END SAVESTUDY;

FUNCTION UPDATELINKEDSDII                  
(A_SD                  IN     VARCHAR2,       
 A_SD_STD_PROPERTY     IN     VARCHAR2,       
 A_SD_CREATION         IN     CHAR,           
 A_PT                  IN     VARCHAR2 ,    
 A_PT_VERSION          IN     VARCHAR2 ,    
 A_DESCRIPTION         IN     VARCHAR2 ,    
 A_DESCR_DOC           IN     VARCHAR2 ,    
 A_DESCR_DOC_VERSION   IN     VARCHAR2 ,    
 A_RESPONSIBLE         IN     VARCHAR2 ,    
 A_LABEL_FORMAT        IN     VARCHAR2 ,    
 A_CREATION_DATE       IN     DATE     ,    
 A_CREATED_BY          IN     VARCHAR2 ,    
 A_EXEC_START_DATE     IN     DATE     ,    
 A_EXEC_END_DATE       IN     DATE     ,    
 A_T0_DATE             IN     DATE     ,    
 A_NR_SC_CURRENT       IN     NUMBER   )    
RETURN NUMBER IS

L_UPDATE              BOOLEAN;
L_ENTER_LOOP          BOOLEAN;
L_SD_STD_PROPERTY     VARCHAR2(2000);
L_IIVALUE_F           NUMBER;
L_IIVALUE_S           VARCHAR2(40);
L_DATEVALID           VARCHAR2(80);
L_ERRM                VARCHAR2(255);
L_II_LOG_HS           CHAR(1);
L_II_LOG_HS_DETAILS   CHAR(1);
L_IC_LOG_HS           CHAR(1);
L_IC_LOG_HS_DETAILS   CHAR(1);
L_HS_DETAILS_SEQ_NR   INTEGER;
L_PREV_RQ             VARCHAR2(20);
L_PREV_IC             VARCHAR2(20);
L_PREV_ICNODE         NUMBER;
L_CREATION_DATE       TIMESTAMP WITH TIME ZONE;
L_EXEC_START_DATE     TIMESTAMP WITH TIME ZONE;
L_EXEC_END_DATE       TIMESTAMP WITH TIME ZONE;
L_T0_DATE             TIMESTAMP WITH TIME ZONE;

CURSOR L_SDII_CURSOR(A_SD VARCHAR2, A_SD_STD_PROPERTY VARCHAR2) IS
   SELECT SDII.*, IE.IEVALUE, IE.FORMAT, IE.DATA_TP
   FROM UTSDII SDII, UTSDIC SDIC, UTIE IE
   WHERE SDII.SD = A_SD
     AND SDII.SD = SDIC.SD
     AND SDII.IC = SDIC.IC
     AND SDII.ICNODE = SDIC.ICNODE
     AND SDII.II = IE.IE
     AND SDII.IE_VERSION = IE.VERSION
     AND IE.DEF_VAL_TP = 'S'
     AND IE.IEVALUE = NVL(A_SD_STD_PROPERTY, IE.IEVALUE)
     AND (IE.IE, IE.VERSION) NOT IN 
        (SELECT C.IE, UNAPIGEN.VALIDATEVERSION('ie', C.IE, C.IE_VERSION) IE_VERSION 
         FROM UTIPIE C
         WHERE C.IP = SDII.IC
           AND C.VERSION = SDIC.IP_VERSION
           AND C.IE = SDII.II
           AND UNAPIGEN.VALIDATEVERSION('ie', C.IE, C.IE_VERSION) = SDII.IE_VERSION
           AND (C.DEF_VAL_TP<>'F' OR C.IEVALUE IS NOT NULL))
   UNION 
   SELECT SDII.*, IPIE.IEVALUE, IE.FORMAT, IE.DATA_TP
   FROM UTSDII SDII, UTSDIC SDIC, UTIPIE IPIE, UTIE IE
   WHERE SDII.SD = A_SD
     AND SDII.SD = SDIC.SD
     AND SDII.IC = SDIC.IC
     AND SDII.ICNODE = SDIC.ICNODE     
     AND SDIC.IC = IPIE.IP
     AND SDIC.IP_VERSION = IPIE.VERSION
     AND SDII.II = IE.IE
     AND SDII.IE_VERSION = IE.VERSION
     AND IPIE.IE = IE.IE
     AND UNAPIGEN.VALIDATEVERSION('ie', IPIE.IE, IPIE.IE_VERSION) = IE.VERSION
     AND IPIE.DEF_VAL_TP = 'S'
     AND IPIE.IEVALUE = NVL(A_SD_STD_PROPERTY, IPIE.IEVALUE);


CURSOR L_SDIIOLD_CURSOR (A_SD IN VARCHAR2, 
                         A_IC IN VARCHAR2, A_ICNODE IN NUMBER,
                         A_II IN VARCHAR2, A_IINODE IN NUMBER) IS
   SELECT A.*
   FROM UDSDII A
   WHERE A.SD = A_SD
     AND A.IC = A_IC
     AND A.ICNODE = A_ICNODE
     AND A.II = A_II
     AND A.IINODE = A_IINODE;
L_SDIIOLD_REC UDSDII%ROWTYPE;
L_SDIINEW_REC UDSDII%ROWTYPE;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_SD, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   
   
   
   
   L_ENTER_LOOP := FALSE;
   L_HS_DETAILS_SEQ_NR := 0;
   L_PREV_RQ := NULL;
   L_PREV_IC := NULL;
   L_PREV_ICNODE := NULL;

   L_CREATION_DATE := A_CREATION_DATE;
   L_EXEC_START_DATE := A_EXEC_START_DATE;
   L_EXEC_END_DATE := A_EXEC_END_DATE;
   L_T0_DATE := A_T0_DATE;
   
   FOR L_SDII_REC IN L_SDII_CURSOR(A_SD, A_SD_STD_PROPERTY) LOOP

      L_ENTER_LOOP := TRUE;
      L_UPDATE := TRUE;
      IF L_SDII_REC.IEVALUE = 'sd' THEN
         L_SD_STD_PROPERTY := A_SD;
      ELSIF L_SDII_REC.IEVALUE = 'pt' THEN
         IF A_SD_CREATION = '1' THEN
            L_UPDATE := FALSE;
         ELSE
            L_SD_STD_PROPERTY := A_PT;
         END IF;
      ELSIF L_SDII_REC.IEVALUE = 'description' THEN
         L_SD_STD_PROPERTY := A_DESCRIPTION;
      ELSIF L_SDII_REC.IEVALUE = 'descr_doc' THEN
         L_SD_STD_PROPERTY := A_DESCR_DOC;
      ELSIF L_SDII_REC.IEVALUE = 'creation_date' THEN
         L_SD_STD_PROPERTY := TO_CHAR(L_CREATION_DATE, SUBSTR(L_SDII_REC.FORMAT,2));
      ELSIF L_SDII_REC.IEVALUE = 'created_by' THEN
         L_SD_STD_PROPERTY := A_CREATED_BY;
      ELSIF L_SDII_REC.IEVALUE = 'exec_start_date' THEN
         L_SD_STD_PROPERTY := TO_CHAR(L_EXEC_START_DATE, SUBSTR(L_SDII_REC.FORMAT,2));
      ELSIF L_SDII_REC.IEVALUE = 'exec_end_date' THEN
         L_SD_STD_PROPERTY := TO_CHAR(L_EXEC_END_DATE, SUBSTR(L_SDII_REC.FORMAT,2));
      ELSIF L_SDII_REC.IEVALUE = 'responsible' THEN
         L_SD_STD_PROPERTY := A_RESPONSIBLE;
      ELSIF L_SDII_REC.IEVALUE = 'label_format' THEN
         L_SD_STD_PROPERTY := A_LABEL_FORMAT;
      ELSIF L_SDII_REC.IEVALUE = 't0_date' THEN
         L_SD_STD_PROPERTY := TO_CHAR(L_T0_DATE, SUBSTR(L_SDII_REC.FORMAT,2));
      ELSIF L_SDII_REC.IEVALUE = 'nr_sc_current' THEN
         L_SD_STD_PROPERTY := TO_CHAR(A_NR_SC_CURRENT) ;
      ELSE
         L_SQLERRM := L_SDII_REC.IEVALUE || ' is not a valid study standard property for info field '||L_SDII_REC.II||
                      ' in info profile '||L_SDII_REC.IC ||' sd=' ||L_SDII_REC.SD || '#icnode=' ||
                            TO_CHAR(L_SDII_REC.ICNODE) || '#iinode=' || TO_CHAR(L_SDII_REC.IINODE);
         RAISE STPERROR;
      END IF;

      
      
      
      IF L_SDII_REC.DATA_TP = 'A' THEN                      
         
         IF SUBSTR(L_SDII_REC.FORMAT,1,1)='C' THEN
            IF LENGTH(L_SDII_REC.FORMAT)>1 THEN
               L_SD_STD_PROPERTY := SUBSTR(L_SD_STD_PROPERTY,1,SUBSTR(L_SDII_REC.FORMAT,2));
            ELSE
               NULL;
            END IF;
         
         ELSIF SUBSTR(L_SDII_REC.FORMAT,1,1)='D' THEN
            L_DATEVALID := L_SD_STD_PROPERTY||'@'||SUBSTR(L_SDII_REC.FORMAT,2); 
            L_RET_CODE := UNAPIGEN.DATEVALID(L_DATEVALID, L_ERRM);
            IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
               INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
               VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                      'UpdateLinkedSdii', 
                      'Warning#DateValid returned '||L_RET_CODE || ' for info field '||L_SDII_REC.II||
                      ' with value '||L_SD_STD_PROPERTY||'@'||SUBSTR(L_SDII_REC.FORMAT,2) );
            END IF;
         ELSE
            L_IIVALUE_F := NULL;
            BEGIN
               L_IIVALUE_F := TO_NUMBER(L_SD_STD_PROPERTY);
            EXCEPTION
            WHEN VALUE_ERROR THEN
               INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
               VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                      'UpdateLinkedSdii',
                      'Warning#Value could not be converted to a float for info field '||L_SDII_REC.II||
                      ' using format '||L_SDII_REC.FORMAT||' with value '||L_SD_STD_PROPERTY);
            END;
            L_IIVALUE_S := '';
            L_RET_CODE := UNAPIGEN.FORMATRESULT(L_IIVALUE_F, L_SDII_REC.FORMAT, L_IIVALUE_S);
            IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
               INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
               VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                      'UpdateLinkedSdii', 
                      'Warning#FormatResult returned '||L_RET_CODE || ' for info field '||L_SDII_REC.II||
                      ' using format '||L_SDII_REC.FORMAT||' with value '||L_SD_STD_PROPERTY );
            END IF;
           L_SD_STD_PROPERTY := L_IIVALUE_S;         
         END IF;
      ELSIF L_SDII_REC.DATA_TP IN ('D','M') THEN            
         L_DATEVALID := L_SD_STD_PROPERTY||'@'||SUBSTR(L_SDII_REC.FORMAT,2); 
         L_RET_CODE := UNAPIGEN.DATEVALID(L_DATEVALID, L_ERRM);
         IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
            INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
            VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                   'UpdateLinkedSdii', 
                   'Warning#DateValid returned '||L_RET_CODE || ' for info field '||L_SDII_REC.II||
                   ' with value '||L_SD_STD_PROPERTY||'@'||SUBSTR(L_SDII_REC.FORMAT,2) );
         END IF;   
      ELSIF L_SDII_REC.DATA_TP IN ('I','F') THEN            
         L_IIVALUE_F := NULL;
         BEGIN
            L_IIVALUE_F := TO_NUMBER(L_SD_STD_PROPERTY);
         EXCEPTION
         WHEN VALUE_ERROR THEN
            INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
            VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                   'UpdateLinkedSdii',
                   'Warning#Value could not be converted to a float for info field '||L_SDII_REC.II||
                   ' using format '||L_SDII_REC.FORMAT||' with value '||L_SD_STD_PROPERTY);
         END;
         L_IIVALUE_S := '';
         L_RET_CODE := UNAPIGEN.FORMATRESULT(L_IIVALUE_F, L_SDII_REC.FORMAT, L_IIVALUE_S);
         IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
               INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
               VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                      'UpdateLinkedSdii', 
                      'Warning#FormatResult returned '||L_RET_CODE || ' for info field '||L_SDII_REC.II||
                      ' using format '||L_SDII_REC.FORMAT||' with value '||L_SD_STD_PROPERTY );
         END IF;
         L_SD_STD_PROPERTY := L_IIVALUE_S;         
      END IF;

      IF L_UPDATE THEN
         
         
         
         OPEN L_SDIIOLD_CURSOR(L_SDII_REC.SD, 
                               L_SDII_REC.IC, L_SDII_REC.ICNODE,
                               L_SDII_REC.II, L_SDII_REC.IINODE);
         FETCH L_SDIIOLD_CURSOR
         INTO L_SDIIOLD_REC;
         CLOSE L_SDIIOLD_CURSOR;
         L_SDIINEW_REC := L_SDIIOLD_REC;

         
         
         
         UPDATE UTSDII 
         SET IIVALUE = L_SD_STD_PROPERTY
         WHERE SD     = L_SDII_REC.SD 
           AND IC     = L_SDII_REC.IC 
           AND ICNODE = L_SDII_REC.ICNODE
           AND II     = L_SDII_REC.II 
           AND IINODE = L_SDII_REC.IINODE
         RETURNING IIVALUE, LOG_HS, LOG_HS_DETAILS
         INTO L_SDIINEW_REC.IIVALUE, L_II_LOG_HS, L_II_LOG_HS_DETAILS;

         BEGIN
            SELECT LOG_HS, LOG_HS_DETAILS
            INTO L_IC_LOG_HS, L_IC_LOG_HS_DETAILS
            FROM UTSDIC
            WHERE SD     = L_SDII_REC.SD
              AND IC     = L_SDII_REC.IC
              AND ICNODE = L_SDII_REC.ICNODE;
         EXCEPTION
         WHEN NO_DATA_FOUND THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
            RAISE STPERROR;
         END;

         
         
         
         L_EV_SEQ_NR := -1;
         L_EVENT_TP  := 'SdInfoFieldValueChanged';
         L_EV_DETAILS := 'sd=' || A_SD || 
                         '#ic=' || L_SDII_REC.IC ||
                         '#icnode=' || TO_CHAR(L_SDII_REC.ICNODE) || 
                         '#iinode=' || TO_CHAR(L_SDII_REC.IINODE) || 
                         '#old_value=' || SUBSTR(L_SDIIOLD_REC.IIVALUE, 1,40) || 
                         '#new_value=' || SUBSTR(L_SDIINEW_REC.IIVALUE, 1,40)  ||
                         '#ie_version=' || L_SDII_REC.IE_VERSION;
         L_RESULT := UNAPIEV.INSERTINFOFIELDEVENT('SaveSdIiValue', UNAPIGEN.P_EVMGR_NAME,
                                                  'sdii', L_SDII_REC.II, L_SDII_REC.LC, L_SDII_REC.LC_VERSION, 
                                                  L_SDII_REC.SS, L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);
         IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
            UNAPIGEN.P_TXN_ERROR := L_RESULT;
            RAISE STPERROR;
         END IF;

         
         IF L_EV_SEQ_NR = -1 THEN
            L_RET_CODE := UNAPIGEN.GETNEXTEVENTSEQNR(L_EV_SEQ_NR);
            IF L_RET_CODE <> 0 THEN
               UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
               RAISE STPERROR;
            END IF;
         END IF;
         
         IF NVL(L_II_LOG_HS, ' ') = '1' THEN
            L_EVENT_TP := 'SdInfoFieldValueChanged';
            INSERT INTO UTSDICHS(SD, IC, ICNODE, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, 
                                 LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
            VALUES(A_SD, L_SDII_REC.IC, L_SDII_REC.ICNODE, UNAPIGEN.P_USER, 
                   UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                   'info field "'||L_SDII_REC.II||'" is updated.',
                   CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);

            IF NVL((L_SDIIOLD_REC.IIVALUE <> L_SDIINEW_REC.IIVALUE), TRUE) AND NOT(L_SDIIOLD_REC.IIVALUE IS NULL AND L_SDIINEW_REC.IIVALUE IS NULL)  THEN 
               INSERT INTO UTSDICHS(SD, IC, ICNODE, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, 
                                    LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
               VALUES(A_SD, L_SDII_REC.IC, L_SDII_REC.ICNODE, UNAPIGEN.P_USER, 
                      UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                      'info field "'||L_SDII_REC.II||'" is updated: property <iivalue> changed value from "'||SUBSTR(L_SDIIOLD_REC.IIVALUE,1,40)||'" to "'||SUBSTR(L_SDIINEW_REC.IIVALUE,1,40)||'".',
                      CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
            END IF;
         END IF;
                  
         IF NVL(L_IC_LOG_HS, ' ') = '1' THEN
            L_EVENT_TP  := 'SdInfoFieldValuesChanged';
            INSERT INTO UTSDICHS(SD, IC, ICNODE, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, 
                                 LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
            VALUES(A_SD, L_SDII_REC.IC, L_SDII_REC.ICNODE, UNAPIGEN.P_USER, 
                   UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                   'info card "'||L_SDII_REC.IC||'" info field values are updated.',
                   CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
         END IF;

         IF NVL(L_II_LOG_HS_DETAILS, ' ') = '1' THEN
            L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
            INSERT INTO UTSDICHSDETAILS(SD, IC, ICNODE, TR_SEQ, EV_SEQ, SEQ, DETAILS)
            VALUES(A_SD, L_SDII_REC.IC, L_SDII_REC.ICNODE, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, 
                   L_HS_DETAILS_SEQ_NR, 'info field "'||L_SDII_REC.II||'" is updated.');
                   
            UNAPIHSDETAILS.ADDSDIIHSDETAILS(L_SDIIOLD_REC, L_SDIINEW_REC, UNAPIGEN.P_TR_SEQ, 
                                            L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR); 
         END IF;

         IF NVL(L_IC_LOG_HS_DETAILS, ' ') = '1' THEN
            L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
            INSERT INTO UTSDICHSDETAILS(SD, IC, ICNODE, TR_SEQ, EV_SEQ, SEQ, DETAILS)
            VALUES(A_SD, L_SDII_REC.IC, L_SDII_REC.ICNODE, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, 
                   L_HS_DETAILS_SEQ_NR, 'info card "'||L_SDII_REC.IC||'" info field values are updated.');
         END IF;
      END IF;
   END LOOP;
      
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('UpdateLinkedSdii', SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('UpdateLinkedSdii', L_SQLERRM);   
   END IF;
   IF L_SDIIOLD_CURSOR%ISOPEN THEN
      CLOSE L_SDIIOLD_CURSOR;
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'UpdateLinkedSdii'));
END UPDATELINKEDSDII;

FUNCTION GETSTUDY
(A_SD                    OUT     UNAPIGEN.VC20_TABLE_TYPE  ,  
 A_PT                    OUT     UNAPIGEN.VC20_TABLE_TYPE  ,  
 A_PT_VERSION            OUT     UNAPIGEN.VC20_TABLE_TYPE  ,  
 A_DESCRIPTION           OUT     UNAPIGEN.VC40_TABLE_TYPE  ,  
 A_DESCR_DOC             OUT     UNAPIGEN.VC40_TABLE_TYPE  ,  
 A_DESCR_DOC_VERSION     OUT     UNAPIGEN.VC20_TABLE_TYPE  ,  
 A_RESPONSIBLE           OUT     UNAPIGEN.VC20_TABLE_TYPE  ,  
 A_LABEL_FORMAT          OUT     UNAPIGEN.VC20_TABLE_TYPE  ,  
 A_CREATION_DATE         OUT     UNAPIGEN.DATE_TABLE_TYPE  ,  
 A_CREATED_BY            OUT     UNAPIGEN.VC20_TABLE_TYPE  ,  
 A_EXEC_START_DATE       OUT     UNAPIGEN.DATE_TABLE_TYPE  ,  
 A_EXEC_END_DATE         OUT     UNAPIGEN.DATE_TABLE_TYPE  ,  
 A_T0_DATE               OUT     UNAPIGEN.DATE_TABLE_TYPE  ,  
 A_NR_SC_CURRENT         OUT     UNAPIGEN.NUM_TABLE_TYPE   ,  
 A_SD_CLASS              OUT     UNAPIGEN.VC2_TABLE_TYPE,      
 A_LOG_HS                OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LOG_HS_DETAILS        OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ALLOW_MODIFY          OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_AR                    OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ACTIVE                OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LC                    OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_LC_VERSION            OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SS                    OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_NR_OF_ROWS            IN OUT  NUMBER,                    
 A_WHERE_CLAUSE          IN      VARCHAR2)                  
RETURN NUMBER IS

L_SD                VARCHAR2(20);
L_PT                VARCHAR2(20);
L_PT_VERSION        VARCHAR2(20);
L_DESCRIPTION       VARCHAR2(40);
L_DESCR_DOC         VARCHAR2(40);
L_DESCR_DOC_VERSION VARCHAR2(20);
L_RESPONSIBLE       VARCHAR2(20);
L_LABEL_FORMAT      VARCHAR2(20);
L_CREATION_DATE     TIMESTAMP WITH TIME ZONE;
L_CREATED_BY        VARCHAR2(20);
L_EXEC_START_DATE   TIMESTAMP WITH TIME ZONE;
L_EXEC_END_DATE     TIMESTAMP WITH TIME ZONE;
L_T0_DATE           TIMESTAMP WITH TIME ZONE;
L_NR_SC_CURRENT     NUMBER;
L_SD_CLASS          VARCHAR2(2);
L_LOG_HS            CHAR(1);
L_LOG_HS_DETAILS    CHAR(1);
L_ALLOW_MODIFY      CHAR(1);
L_AR                CHAR(1);
L_ACTIVE            CHAR(1);
L_LC                VARCHAR2(2);
L_LC_VERSION        VARCHAR2(20);
L_SS                VARCHAR2(2);
L_SD_CURSOR         INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      RETURN(UNAPIGEN.DBERR_WHERECLAUSE);
   ELSIF
      UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := 'WHERE sd = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                        ''' ORDER BY sd';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_SD_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT sd, pt, pt_version, description, descr_doc, descr_doc_version, responsible,' ||
                   'label_format, creation_date, created_by, exec_start_date, exec_end_date, t0_date, ' ||
                   'nr_sc_current, sd_class, log_hs, log_hs_details, ' ||
                   'allow_modify, active, lc, lc_version, ss, ar ' ||
                   'FROM dd' || UNAPIGEN.P_DD || '.uvsd ' || L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_SD_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   DBMS_SQL.DEFINE_COLUMN(L_SD_CURSOR        , 1    , L_SD                  , 20   );
   DBMS_SQL.DEFINE_COLUMN(L_SD_CURSOR        , 2    , L_PT                  , 20   );
   DBMS_SQL.DEFINE_COLUMN(L_SD_CURSOR        , 3    , L_PT_VERSION          , 20   );
   DBMS_SQL.DEFINE_COLUMN(L_SD_CURSOR        , 4    , L_DESCRIPTION         , 40   );
   DBMS_SQL.DEFINE_COLUMN(L_SD_CURSOR        , 5    , L_DESCR_DOC           , 40   );
   DBMS_SQL.DEFINE_COLUMN(L_SD_CURSOR        , 6    , L_DESCR_DOC_VERSION   , 20   );
   DBMS_SQL.DEFINE_COLUMN(L_SD_CURSOR        , 7    , L_RESPONSIBLE         , 20   );
   DBMS_SQL.DEFINE_COLUMN(L_SD_CURSOR        , 8    , L_LABEL_FORMAT        , 20   );
   DBMS_SQL.DEFINE_COLUMN(L_SD_CURSOR        , 9    , L_CREATION_DATE              );
   DBMS_SQL.DEFINE_COLUMN(L_SD_CURSOR        , 10   , L_CREATED_BY          , 20   );
   DBMS_SQL.DEFINE_COLUMN(L_SD_CURSOR        , 11   , L_EXEC_START_DATE            );
   DBMS_SQL.DEFINE_COLUMN(L_SD_CURSOR        , 12   , L_EXEC_END_DATE              );
   DBMS_SQL.DEFINE_COLUMN(L_SD_CURSOR        , 13   , L_T0_DATE                    );
   DBMS_SQL.DEFINE_COLUMN(L_SD_CURSOR        , 14   , L_NR_SC_CURRENT              );
   DBMS_SQL.DEFINE_COLUMN(L_SD_CURSOR        , 15   , L_SD_CLASS            , 2    );
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_SD_CURSOR   , 16   , L_LOG_HS              , 1    );
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_SD_CURSOR   , 17   , L_LOG_HS_DETAILS      , 1    );
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_SD_CURSOR   , 18   , L_ALLOW_MODIFY        , 1    );
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_SD_CURSOR   , 19   , L_ACTIVE              , 1    );
   DBMS_SQL.DEFINE_COLUMN(L_SD_CURSOR        , 20   , L_LC                  , 2    );
   DBMS_SQL.DEFINE_COLUMN(L_SD_CURSOR        , 21   , L_LC_VERSION          , 20   );
   DBMS_SQL.DEFINE_COLUMN(L_SD_CURSOR        , 22   , L_SS                  , 2    );
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_SD_CURSOR   , 23   , L_AR                  , 1    );
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_SD_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_SD_CURSOR        , 1      , L_SD                );
      DBMS_SQL.COLUMN_VALUE(L_SD_CURSOR        , 2      , L_PT                );
      DBMS_SQL.COLUMN_VALUE(L_SD_CURSOR        , 3      , L_PT_VERSION        );
      DBMS_SQL.COLUMN_VALUE(L_SD_CURSOR        , 4      , L_DESCRIPTION       );
      DBMS_SQL.COLUMN_VALUE(L_SD_CURSOR        , 5      , L_DESCR_DOC         );
      DBMS_SQL.COLUMN_VALUE(L_SD_CURSOR        , 6      , L_DESCR_DOC_VERSION );
      DBMS_SQL.COLUMN_VALUE(L_SD_CURSOR        , 7      , L_RESPONSIBLE       );
      DBMS_SQL.COLUMN_VALUE(L_SD_CURSOR        , 8      , L_LABEL_FORMAT      );
      DBMS_SQL.COLUMN_VALUE(L_SD_CURSOR        , 9      , L_CREATION_DATE     );
      DBMS_SQL.COLUMN_VALUE(L_SD_CURSOR        , 10     , L_CREATED_BY        );
      DBMS_SQL.COLUMN_VALUE(L_SD_CURSOR        , 11     , L_EXEC_START_DATE   );
      DBMS_SQL.COLUMN_VALUE(L_SD_CURSOR        , 12     , L_EXEC_END_DATE     );
      DBMS_SQL.COLUMN_VALUE(L_SD_CURSOR        , 13     , L_T0_DATE           );
      DBMS_SQL.COLUMN_VALUE(L_SD_CURSOR        , 14     , L_NR_SC_CURRENT     );
      DBMS_SQL.COLUMN_VALUE(L_SD_CURSOR        , 15     , L_SD_CLASS          );
      DBMS_SQL.COLUMN_VALUE_CHAR(L_SD_CURSOR   , 16     , L_LOG_HS            );
      DBMS_SQL.COLUMN_VALUE_CHAR(L_SD_CURSOR   , 17     , L_LOG_HS_DETAILS    );
      DBMS_SQL.COLUMN_VALUE_CHAR(L_SD_CURSOR   , 18     , L_ALLOW_MODIFY      );
      DBMS_SQL.COLUMN_VALUE_CHAR(L_SD_CURSOR   , 19     , L_ACTIVE            );
      DBMS_SQL.COLUMN_VALUE(L_SD_CURSOR        , 20     , L_LC                );
      DBMS_SQL.COLUMN_VALUE(L_SD_CURSOR        , 21     , L_LC_VERSION        );
      DBMS_SQL.COLUMN_VALUE(L_SD_CURSOR        , 22     , L_SS                );
      DBMS_SQL.COLUMN_VALUE_CHAR(L_SD_CURSOR   , 23     , L_AR                );

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_SD                (L_FETCHED_ROWS) := L_SD                ;
      A_PT                (L_FETCHED_ROWS) := L_PT                ;
      A_PT_VERSION        (L_FETCHED_ROWS) := L_PT_VERSION        ;
      A_DESCRIPTION       (L_FETCHED_ROWS) := L_DESCRIPTION       ;
      A_DESCR_DOC         (L_FETCHED_ROWS) := L_DESCR_DOC         ;
      A_DESCR_DOC_VERSION (L_FETCHED_ROWS) := L_DESCR_DOC_VERSION ;
      A_RESPONSIBLE       (L_FETCHED_ROWS) := L_RESPONSIBLE       ;
      A_LABEL_FORMAT      (L_FETCHED_ROWS) := L_LABEL_FORMAT      ;
      A_CREATION_DATE     (L_FETCHED_ROWS) := L_CREATION_DATE     ;
      A_CREATED_BY        (L_FETCHED_ROWS) := L_CREATED_BY        ;
      A_EXEC_START_DATE   (L_FETCHED_ROWS) := L_EXEC_START_DATE   ;
      A_EXEC_END_DATE     (L_FETCHED_ROWS) := L_EXEC_END_DATE     ;
      A_T0_DATE           (L_FETCHED_ROWS) := L_T0_DATE           ;
      A_NR_SC_CURRENT     (L_FETCHED_ROWS) := L_NR_SC_CURRENT     ;
      A_SD_CLASS          (L_FETCHED_ROWS) := L_SD_CLASS          ;
      A_LOG_HS            (L_FETCHED_ROWS) := L_LOG_HS            ;
      A_LOG_HS_DETAILS    (L_FETCHED_ROWS) := L_LOG_HS_DETAILS    ;
      A_ALLOW_MODIFY      (L_FETCHED_ROWS) := L_ALLOW_MODIFY      ;
      A_ACTIVE            (L_FETCHED_ROWS) := L_ACTIVE            ;
      A_LC                (L_FETCHED_ROWS) := L_LC                ;
      A_LC_VERSION        (L_FETCHED_ROWS) := L_LC_VERSION        ;
      A_SS                (L_FETCHED_ROWS) := L_SS                ;
      A_AR                (L_FETCHED_ROWS) := L_AR                ;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_SD_CURSOR);
      END IF;

   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_SD_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
             'GetStudy', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN(L_SD_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(L_SD_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETSTUDY;

FUNCTION SELECTSTUDY 
(A_COL_ID                IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_TP                IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_VALUE             IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_NR_OF_ROWS        IN      NUMBER,                    
 A_SD                    OUT     UNAPIGEN.VC20_TABLE_TYPE  ,  
 A_PT                    OUT     UNAPIGEN.VC20_TABLE_TYPE  ,  
 A_PT_VERSION            OUT     UNAPIGEN.VC20_TABLE_TYPE  ,  
 A_DESCRIPTION           OUT     UNAPIGEN.VC40_TABLE_TYPE  ,  
 A_DESCR_DOC             OUT     UNAPIGEN.VC40_TABLE_TYPE  ,  
 A_DESCR_DOC_VERSION     OUT     UNAPIGEN.VC20_TABLE_TYPE  ,  
 A_RESPONSIBLE           OUT     UNAPIGEN.VC20_TABLE_TYPE  ,  
 A_LABEL_FORMAT          OUT     UNAPIGEN.VC20_TABLE_TYPE  ,  
 A_CREATION_DATE         OUT     UNAPIGEN.DATE_TABLE_TYPE  ,  
 A_CREATED_BY            OUT     UNAPIGEN.VC20_TABLE_TYPE  ,  
 A_EXEC_START_DATE       OUT     UNAPIGEN.DATE_TABLE_TYPE  ,  
 A_EXEC_END_DATE         OUT     UNAPIGEN.DATE_TABLE_TYPE  ,  
 A_T0_DATE               OUT     UNAPIGEN.DATE_TABLE_TYPE  ,  
 A_NR_SC_CURRENT         OUT     UNAPIGEN.NUM_TABLE_TYPE   ,  
 A_SD_CLASS              OUT     UNAPIGEN.VC2_TABLE_TYPE,      
 A_LOG_HS                OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LOG_HS_DETAILS        OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ALLOW_MODIFY          OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_AR                    OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ACTIVE                OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LC                    OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_LC_VERSION            OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SS                    OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_NR_OF_ROWS            IN OUT  NUMBER,                    
 A_ORDER_BY_CLAUSE       IN      VARCHAR2,                  
 A_NEXT_ROWS             IN      NUMBER)                    
RETURN NUMBER IS

L_COL_OPERATOR           UNAPIGEN.VC20_TABLE_TYPE;
L_COL_ANDOR              UNAPIGEN.VC3_TABLE_TYPE;

BEGIN

 FOR L_X IN 1..A_COL_NR_OF_ROWS LOOP
    L_COL_OPERATOR(L_X) := '=';
    L_COL_ANDOR(L_X) := 'AND';
 END LOOP;

 RETURN(UNAPISD.SELECTSTUDY(A_COL_ID,
                            A_COL_TP,
                            A_COL_VALUE,
                            L_COL_OPERATOR,
                            L_COL_ANDOR,
                            A_COL_NR_OF_ROWS,
                            A_SD,
                            A_PT,
                            A_PT_VERSION,
                            A_DESCRIPTION,
                            A_DESCR_DOC,
                            A_DESCR_DOC_VERSION,
                            A_RESPONSIBLE,
                            A_LABEL_FORMAT,
                            A_CREATION_DATE,
                            A_CREATED_BY,
                            A_EXEC_START_DATE,
                            A_EXEC_END_DATE,
                            A_T0_DATE,
                            A_NR_SC_CURRENT,
                            A_SD_CLASS,
                            A_LOG_HS,
                            A_LOG_HS_DETAILS,
                            A_ALLOW_MODIFY,
                            A_AR,
                            A_ACTIVE,
                            A_LC,
                            A_LC_VERSION,
                            A_SS,
                            A_NR_OF_ROWS,
                            A_ORDER_BY_CLAUSE,
                            A_NEXT_ROWS));

END SELECTSTUDY;

FUNCTION SELECTSTUDY 
(A_COL_ID                IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_TP                IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_VALUE             IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_OPERATOR          IN      UNAPIGEN.VC20_TABLE_TYPE,  
 A_COL_ANDOR             IN      UNAPIGEN.VC3_TABLE_TYPE,   
 A_COL_NR_OF_ROWS        IN      NUMBER,                    
 A_SD                    OUT     UNAPIGEN.VC20_TABLE_TYPE  ,  
 A_PT                    OUT     UNAPIGEN.VC20_TABLE_TYPE  ,  
 A_PT_VERSION            OUT     UNAPIGEN.VC20_TABLE_TYPE  ,  
 A_DESCRIPTION           OUT     UNAPIGEN.VC40_TABLE_TYPE  ,  
 A_DESCR_DOC             OUT     UNAPIGEN.VC40_TABLE_TYPE  ,  
 A_DESCR_DOC_VERSION     OUT     UNAPIGEN.VC20_TABLE_TYPE  ,  
 A_RESPONSIBLE           OUT     UNAPIGEN.VC20_TABLE_TYPE  ,  
 A_LABEL_FORMAT          OUT     UNAPIGEN.VC20_TABLE_TYPE  ,  
 A_CREATION_DATE         OUT     UNAPIGEN.DATE_TABLE_TYPE  ,  
 A_CREATED_BY            OUT     UNAPIGEN.VC20_TABLE_TYPE  ,  
 A_EXEC_START_DATE       OUT     UNAPIGEN.DATE_TABLE_TYPE  ,  
 A_EXEC_END_DATE         OUT     UNAPIGEN.DATE_TABLE_TYPE  ,  
 A_T0_DATE               OUT     UNAPIGEN.DATE_TABLE_TYPE  ,  
 A_NR_SC_CURRENT         OUT     UNAPIGEN.NUM_TABLE_TYPE   ,  
 A_SD_CLASS              OUT     UNAPIGEN.VC2_TABLE_TYPE,      
 A_LOG_HS                OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LOG_HS_DETAILS        OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ALLOW_MODIFY          OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_AR                    OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ACTIVE                OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LC                    OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_LC_VERSION            OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SS                    OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_NR_OF_ROWS            IN OUT  NUMBER,                    
 A_ORDER_BY_CLAUSE       IN      VARCHAR2,                  
 A_NEXT_ROWS             IN      NUMBER)                    
RETURN NUMBER IS

L_SD                             VARCHAR2(20);
L_PT                             VARCHAR2(20);
L_PT_VERSION                     VARCHAR2(20);
L_DESCRIPTION                    VARCHAR2(40);
L_DESCR_DOC                      VARCHAR2(40);
L_DESCR_DOC_VERSION              VARCHAR2(20);
L_RESPONSIBLE                    VARCHAR2(20);
L_LABEL_FORMAT                   VARCHAR2(20);
L_CREATION_DATE                  TIMESTAMP WITH TIME ZONE;
L_CREATED_BY                     VARCHAR2(20);
L_EXEC_START_DATE                TIMESTAMP WITH TIME ZONE;
L_EXEC_END_DATE                  TIMESTAMP WITH TIME ZONE;
L_T0_DATE                        TIMESTAMP WITH TIME ZONE;
L_NR_SC_CURRENT                  NUMBER;
L_SD_CLASS                       VARCHAR2(2);
L_LOG_HS                         CHAR(1);
L_LOG_HS_DETAILS                 CHAR(1);
L_ALLOW_MODIFY                   CHAR(1);
L_AR                             CHAR(1);
L_ACTIVE                         CHAR(1);
L_LC                             VARCHAR2(2);
L_LC_VERSION                     VARCHAR2(20);
L_SS                             VARCHAR2(2);

L_ORDER_BY_CLAUSE                VARCHAR2(255);
L_FROM_CLAUSE                    VARCHAR2(255);
L_NEXT_PTGK_JOIN                 VARCHAR2(4);
L_NEXT_SDGK_JOIN                 VARCHAR2(4);
L_NEXT_SD_JOIN                   VARCHAR2(4);
L_COLUMN_HANDLED                 BOOLEAN_TABLE_TYPE;
L_ANYOR_PRESENT                  BOOLEAN;
L_COL_ANDOR                      VARCHAR2(3);
L_PREV_COL_TP                    VARCHAR2(40);
L_PREV_COL_ID                    VARCHAR2(40);
L_PREV_COL_INDEX                 INTEGER;
L_WHERE_CLAUSE4JOIN              VARCHAR2(1000);
L_LENGTH                         INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;
   
   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_SELECTSD_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_SELECTSD_CURSOR);
         P_SELECTSD_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;
   
   
   IF A_NEXT_ROWS = 1 THEN
      IF P_SELECTSD_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN

      P_SELECTION_VAL_TAB.DELETE;
      L_WHERE_CLAUSE := ' ';
      L_SQL_STRING := 'SELECT a.sd, a.pt, a.pt_version, a.description, a.descr_doc, a.descr_doc_version, a.responsible, a.label_format,' ||
         'a.creation_date, a.created_by, a.exec_start_date, a.exec_end_date, a.t0_date, a.nr_sc_current, a.sd_class, a.log_hs, ' ||
         'a.log_hs_details, a.allow_modify, a.active, a.lc, a.lc_version, a.ss, a.ar FROM ';
                      
      L_FROM_CLAUSE := 'dd' || UNAPIGEN.P_DD || '.uvsd a';
                   
      
      L_WHERE_CLAUSE4JOIN := '';
      L_WHERE_CLAUSE := '';
      L_ANYOR_PRESENT := FALSE;
      FOR I IN 1..A_COL_NR_OF_ROWS LOOP
         L_COLUMN_HANDLED(I) := FALSE;
         IF LTRIM(RTRIM(UPPER(A_COL_ANDOR(I)))) = 'OR' AND
            NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
            L_ANYOR_PRESENT := TRUE;
         END IF;
         
         
         IF I<>1 THEN
            IF NVL(A_COL_TP(I), ' ') = NVL(A_COL_TP(I-1), ' ') AND
               NVL(A_COL_ID(I), ' ') = NVL(A_COL_ID(I-1), ' ') AND
               NVL(A_COL_OPERATOR(I), '=') = '=' AND
               NVL(A_COL_OPERATOR(I-1), '=') = '=' AND
               NVL(A_COL_ANDOR(I-1), 'AND') =  'AND' AND
               (NVL(A_COL_VALUE(I), ' ') <> ' ' OR NVL(A_COL_VALUE(I-1), ' ') <> ' ') THEN
               IF I> 2 AND A_COL_ANDOR(I-2) = 'OR' THEN
                  L_ANYOR_PRESENT := TRUE;
               END IF;
            END IF;
         END IF;         
      END LOOP;
      
      
      
      
      L_NEXT_PTGK_JOIN := 'a';
      L_NEXT_SDGK_JOIN := 'a';
      L_NEXT_SD_JOIN := 'a';
      FOR I IN REVERSE 1..A_COL_NR_OF_ROWS LOOP
         IF NVL(LTRIM(A_COL_ID(I)), ' ') = ' ' THEN
            RETURN(UNAPIGEN.DBERR_SELCOLSINVALID);
         END IF;
   
         
         L_COL_ANDOR := 'AND';
         IF I<>1 THEN
            L_COL_ANDOR := A_COL_ANDOR(I-1);
         END IF;
         IF L_COL_ANDOR IS NULL THEN
            
            L_COL_ANDOR := 'AND';
         END IF;
         IF L_COLUMN_HANDLED(I) = FALSE THEN
            IF NVL(A_COL_TP(I), ' ') = 'sdgk' THEN 
               IF NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
                  UNAPIGEN.WHERECLAUSESTRINGBUILDER (A_BASE_TABLE => 'utsd', A_INDEX =>I, A_COL_TP => A_COL_TP(I), A_COL_ID => A_COL_ID(I),
                                   A_COL_VALUE => A_COL_VALUE(I), A_COL_OPERATOR => A_COL_OPERATOR(I),
                                   A_COL_ANDOR => L_COL_ANDOR, A_ANYOR_PRESENT => L_ANYOR_PRESENT,
                                   A_JOINTABLE_PREFIX => 'utsdgk', A_JOINCOLUMN1 => 'sd', A_JOINCOLUMN2 => '', 
                                   A_PREV_COL_TP => L_PREV_COL_TP, A_PREV_COL_ID => L_PREV_COL_ID, A_PREV_COL_INDEX => L_PREV_COL_INDEX,
                                   A_NEXTTABLE_TOJOIN => L_NEXT_SDGK_JOIN, A_FROM_CLAUSE => L_FROM_CLAUSE,
                                   A_WHERE_CLAUSE4JOIN => L_WHERE_CLAUSE4JOIN, A_WHERE_CLAUSE => L_WHERE_CLAUSE,
                                 A_SQL_VAL_TAB => P_SELECTION_VAL_TAB);                  
               ELSIF INSTR(A_ORDER_BY_CLAUSE, 't'|| TO_CHAR(I)) <> 0 THEN
                  L_FROM_CLAUSE := L_FROM_CLAUSE || ', utsdgk' || A_COL_ID(I) || ' t' || I;
                  L_COL_ANDOR := 'AND'; 
                  
                  L_WHERE_CLAUSE4JOIN := L_WHERE_CLAUSE4JOIN ||
                                    't' || I || '.sd(+) = a.sd ' || L_COL_ANDOR || ' ';
               END IF;
               L_COLUMN_HANDLED(I) := TRUE; 
            ELSIF NVL(A_COL_TP(I), ' ') = 'ptgk' THEN 
               IF NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
                  UNAPIGEN.WHERECLAUSESTRINGBUILDER (A_BASE_TABLE => 'utsd', A_INDEX =>I, A_COL_TP => A_COL_TP(I), A_COL_ID => A_COL_ID(I),
                                   A_COL_VALUE => A_COL_VALUE(I), A_COL_OPERATOR => A_COL_OPERATOR(I),
                                   A_COL_ANDOR => L_COL_ANDOR, A_ANYOR_PRESENT => L_ANYOR_PRESENT,
                                   A_JOINTABLE_PREFIX => 'utptgk', A_JOINCOLUMN1 => 'pt', A_JOINCOLUMN2 => 'version', 
                                   A_PREV_COL_TP => L_PREV_COL_TP, A_PREV_COL_ID => L_PREV_COL_ID, A_PREV_COL_INDEX => L_PREV_COL_INDEX,
                                   A_NEXTTABLE_TOJOIN => L_NEXT_PTGK_JOIN, A_FROM_CLAUSE => L_FROM_CLAUSE,
                                   A_WHERE_CLAUSE4JOIN => L_WHERE_CLAUSE4JOIN, A_WHERE_CLAUSE => L_WHERE_CLAUSE,
                                 A_SQL_VAL_TAB => P_SELECTION_VAL_TAB);                  
               ELSIF INSTR(A_ORDER_BY_CLAUSE, 't'|| TO_CHAR(I)) <> 0 THEN
                  L_FROM_CLAUSE := L_FROM_CLAUSE || ', utptgk' || A_COL_ID(I) || ' t' || I;
                  L_COL_ANDOR := 'AND'; 
                  
                  L_WHERE_CLAUSE4JOIN := L_WHERE_CLAUSE4JOIN ||
                                       't' || I || '.pt(+) = a.pt AND '||
                                    't' || I || '.version(+) = a.pt_version ' || L_COL_ANDOR || ' ';
               END IF;
               L_COLUMN_HANDLED(I) := TRUE; 
            ELSE
               
               IF NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
                  UNAPIGEN.WHERECLAUSESTRINGBUILDER (A_BASE_TABLE => 'utsd', A_INDEX =>I, A_COL_TP => A_COL_TP(I), A_COL_ID => A_COL_ID(I),
                                   A_COL_VALUE => A_COL_VALUE(I), A_COL_OPERATOR => A_COL_OPERATOR(I),
                                   A_COL_ANDOR => L_COL_ANDOR, A_ANYOR_PRESENT => L_ANYOR_PRESENT,
                                   A_JOINTABLE_PREFIX => '', A_JOINCOLUMN1 => '', A_JOINCOLUMN2 => '', 
                                   A_PREV_COL_TP => L_PREV_COL_TP, A_PREV_COL_ID => L_PREV_COL_ID, A_PREV_COL_INDEX => L_PREV_COL_INDEX,
                                   A_NEXTTABLE_TOJOIN => L_NEXT_SD_JOIN, A_FROM_CLAUSE => L_FROM_CLAUSE,
                                   A_WHERE_CLAUSE4JOIN => L_WHERE_CLAUSE4JOIN, A_WHERE_CLAUSE => L_WHERE_CLAUSE,
                                 A_SQL_VAL_TAB => P_SELECTION_VAL_TAB);                  
               END IF;
               L_COLUMN_HANDLED(I) := TRUE; 
            END IF;      
         END IF;
      END LOOP;

      
      IF SUBSTR(L_WHERE_CLAUSE4JOIN, -4) = 'AND ' THEN
         L_WHERE_CLAUSE4JOIN := SUBSTR(L_WHERE_CLAUSE4JOIN, 1,
                                  LENGTH(L_WHERE_CLAUSE4JOIN)-4);
      END IF;
      
      
      IF SUBSTR(L_WHERE_CLAUSE, -4) = 'AND ' THEN
         L_WHERE_CLAUSE := SUBSTR(L_WHERE_CLAUSE, 1,
                                  LENGTH(L_WHERE_CLAUSE)-4);
      END IF;
      IF UPPER(SUBSTR(L_WHERE_CLAUSE, -4)) = ' OR ' THEN
         L_WHERE_CLAUSE := SUBSTR(L_WHERE_CLAUSE, 1,
                                  LENGTH(L_WHERE_CLAUSE)-3);
      END IF;
      
      IF L_WHERE_CLAUSE4JOIN IS NOT NULL THEN
         IF L_WHERE_CLAUSE IS NULL THEN
            L_WHERE_CLAUSE := ' WHERE ' || L_WHERE_CLAUSE4JOIN;
         ELSE
            L_WHERE_CLAUSE := ' WHERE (' || L_WHERE_CLAUSE4JOIN || ') AND ('||L_WHERE_CLAUSE||') ';
         END IF;
      ELSE
         IF L_WHERE_CLAUSE IS NOT NULL THEN
            L_WHERE_CLAUSE := ' WHERE '||L_WHERE_CLAUSE;
         ELSE
            L_WHERE_CLAUSE := ' ';
         END IF;
      END IF;

      IF NVL(A_ORDER_BY_CLAUSE, ' ') = ' ' THEN
         L_ORDER_BY_CLAUSE := ' ORDER BY a.sd';
      ELSE
         L_ORDER_BY_CLAUSE := A_ORDER_BY_CLAUSE;
      END IF;

      L_SQL_STRING := L_SQL_STRING || L_FROM_CLAUSE || L_WHERE_CLAUSE || L_ORDER_BY_CLAUSE;
      P_SELECTION_CLAUSE := L_FROM_CLAUSE || L_WHERE_CLAUSE;

      IF P_SELECTSD_CURSOR IS NULL THEN
         P_SELECTSD_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;

      UNAPIAUT.ADDORACLECBOHINT (L_SQL_STRING) ;
      DBMS_SQL.PARSE(P_SELECTSD_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      FOR L_X IN 1..P_SELECTION_VAL_TAB.COUNT() LOOP
         DBMS_SQL.BIND_VARIABLE(P_SELECTSD_CURSOR, ':col_val'||L_X , P_SELECTION_VAL_TAB(L_X)); 
      END LOOP;      
      DBMS_SQL.DEFINE_COLUMN(P_SELECTSD_CURSOR        , 1    , L_SD                  , 20   );
      DBMS_SQL.DEFINE_COLUMN(P_SELECTSD_CURSOR        , 2    , L_PT                  , 20   );
      DBMS_SQL.DEFINE_COLUMN(P_SELECTSD_CURSOR        , 3    , L_PT_VERSION          , 20   );
      DBMS_SQL.DEFINE_COLUMN(P_SELECTSD_CURSOR        , 4    , L_DESCRIPTION         , 40   );
      DBMS_SQL.DEFINE_COLUMN(P_SELECTSD_CURSOR        , 5    , L_DESCR_DOC           , 40   );
      DBMS_SQL.DEFINE_COLUMN(P_SELECTSD_CURSOR        , 6    , L_DESCR_DOC_VERSION   , 20   );
      DBMS_SQL.DEFINE_COLUMN(P_SELECTSD_CURSOR        , 7    , L_RESPONSIBLE         , 20   );
      DBMS_SQL.DEFINE_COLUMN(P_SELECTSD_CURSOR        , 8    , L_LABEL_FORMAT        , 20   );
      DBMS_SQL.DEFINE_COLUMN(P_SELECTSD_CURSOR        , 9    , L_CREATION_DATE              );
      DBMS_SQL.DEFINE_COLUMN(P_SELECTSD_CURSOR        , 10   , L_CREATED_BY          , 20   );
      DBMS_SQL.DEFINE_COLUMN(P_SELECTSD_CURSOR        , 11   , L_EXEC_START_DATE            );
      DBMS_SQL.DEFINE_COLUMN(P_SELECTSD_CURSOR        , 12   , L_EXEC_END_DATE              );
      DBMS_SQL.DEFINE_COLUMN(P_SELECTSD_CURSOR        , 13   , L_T0_DATE                    );
      DBMS_SQL.DEFINE_COLUMN(P_SELECTSD_CURSOR        , 14   , L_NR_SC_CURRENT              );
      DBMS_SQL.DEFINE_COLUMN(P_SELECTSD_CURSOR        , 15   , L_SD_CLASS            , 2    );
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTSD_CURSOR   , 16   , L_LOG_HS              , 1    );
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTSD_CURSOR   , 17   , L_LOG_HS_DETAILS      , 1    );
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTSD_CURSOR   , 18   , L_ALLOW_MODIFY        , 1    );
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTSD_CURSOR   , 19   , L_ACTIVE              , 1    );
      DBMS_SQL.DEFINE_COLUMN(P_SELECTSD_CURSOR        , 20   , L_LC                  , 2    );
      DBMS_SQL.DEFINE_COLUMN(P_SELECTSD_CURSOR        , 21   , L_LC_VERSION          , 20   );
      DBMS_SQL.DEFINE_COLUMN(P_SELECTSD_CURSOR        , 22   , L_SS                  , 2    );
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTSD_CURSOR   , 23   , L_AR                  , 1    );
       L_RESULT := DBMS_SQL.EXECUTE(P_SELECTSD_CURSOR);

   END IF;
   
   L_RESULT := DBMS_SQL.FETCH_ROWS(P_SELECTSD_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_SELECTSD_CURSOR        , 1    , L_SD                );
      DBMS_SQL.COLUMN_VALUE(P_SELECTSD_CURSOR        , 2    , L_PT                );
      DBMS_SQL.COLUMN_VALUE(P_SELECTSD_CURSOR        , 3    , L_PT_VERSION        );
      DBMS_SQL.COLUMN_VALUE(P_SELECTSD_CURSOR        , 4    , L_DESCRIPTION       );
      DBMS_SQL.COLUMN_VALUE(P_SELECTSD_CURSOR        , 5    , L_DESCR_DOC         );
      DBMS_SQL.COLUMN_VALUE(P_SELECTSD_CURSOR        , 6    , L_DESCR_DOC_VERSION );
      DBMS_SQL.COLUMN_VALUE(P_SELECTSD_CURSOR        , 7    , L_RESPONSIBLE       );
      DBMS_SQL.COLUMN_VALUE(P_SELECTSD_CURSOR        , 8    , L_LABEL_FORMAT      );
      DBMS_SQL.COLUMN_VALUE(P_SELECTSD_CURSOR        , 9    , L_CREATION_DATE     );
      DBMS_SQL.COLUMN_VALUE(P_SELECTSD_CURSOR        , 10   , L_CREATED_BY        );
      DBMS_SQL.COLUMN_VALUE(P_SELECTSD_CURSOR        , 11   , L_EXEC_START_DATE   );
      DBMS_SQL.COLUMN_VALUE(P_SELECTSD_CURSOR        , 12   , L_EXEC_END_DATE     );
      DBMS_SQL.COLUMN_VALUE(P_SELECTSD_CURSOR        , 13   , L_T0_DATE           );
      DBMS_SQL.COLUMN_VALUE(P_SELECTSD_CURSOR        , 14   , L_NR_SC_CURRENT     );
      DBMS_SQL.COLUMN_VALUE(P_SELECTSD_CURSOR        , 15   , L_SD_CLASS          );
      DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTSD_CURSOR   , 16   , L_LOG_HS            );
      DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTSD_CURSOR   , 17   , L_LOG_HS_DETAILS    );
      DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTSD_CURSOR   , 18   , L_ALLOW_MODIFY      );
      DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTSD_CURSOR   , 19   , L_ACTIVE            );
      DBMS_SQL.COLUMN_VALUE(P_SELECTSD_CURSOR        , 20   , L_LC                );
      DBMS_SQL.COLUMN_VALUE(P_SELECTSD_CURSOR        , 21   , L_LC_VERSION        );
      DBMS_SQL.COLUMN_VALUE(P_SELECTSD_CURSOR        , 22   , L_SS                );
      DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTSD_CURSOR   , 23   , L_AR                );


      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_SD                (L_FETCHED_ROWS) := L_SD                ;
      A_PT                (L_FETCHED_ROWS) := L_PT                ;
      A_PT_VERSION        (L_FETCHED_ROWS) := L_PT_VERSION        ;
      A_DESCRIPTION       (L_FETCHED_ROWS) := L_DESCRIPTION       ;
      A_DESCR_DOC         (L_FETCHED_ROWS) := L_DESCR_DOC         ;
      A_DESCR_DOC_VERSION (L_FETCHED_ROWS) := L_DESCR_DOC_VERSION ;
      A_RESPONSIBLE       (L_FETCHED_ROWS) := L_RESPONSIBLE       ;
      A_LABEL_FORMAT      (L_FETCHED_ROWS) := L_LABEL_FORMAT      ;
      A_CREATION_DATE     (L_FETCHED_ROWS) := L_CREATION_DATE     ;
      A_CREATED_BY        (L_FETCHED_ROWS) := L_CREATED_BY        ;
      A_EXEC_START_DATE   (L_FETCHED_ROWS) := L_EXEC_START_DATE   ;
      A_EXEC_END_DATE     (L_FETCHED_ROWS) := L_EXEC_END_DATE     ;
      A_T0_DATE           (L_FETCHED_ROWS) := L_T0_DATE           ;
      A_NR_SC_CURRENT     (L_FETCHED_ROWS) := L_NR_SC_CURRENT     ;
      A_SD_CLASS          (L_FETCHED_ROWS) := L_SD_CLASS          ;
      A_LOG_HS            (L_FETCHED_ROWS) := L_LOG_HS            ;
      A_LOG_HS_DETAILS    (L_FETCHED_ROWS) := L_LOG_HS_DETAILS    ;
      A_ALLOW_MODIFY      (L_FETCHED_ROWS) := L_ALLOW_MODIFY      ;
      A_ACTIVE            (L_FETCHED_ROWS) := L_ACTIVE            ;
      A_LC                (L_FETCHED_ROWS) := L_LC                ;
      A_LC_VERSION        (L_FETCHED_ROWS) := L_LC_VERSION        ;
      A_SS                (L_FETCHED_ROWS) := L_SS                ;
      A_AR                (L_FETCHED_ROWS) := L_AR                ;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_SELECTSD_CURSOR);
      END IF;

   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_SELECTSD_CURSOR);
       P_SELECTSD_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_SELECTSD_CURSOR);
      P_SELECTSD_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;
   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
             'SelectStudy', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      L_LENGTH := 200;
      FOR L_X IN 1..10 LOOP
         IF ( LENGTH(L_SQL_STRING) > ((L_LENGTH*(L_X-1))+1) ) THEN
            INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
            VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                   'SelectStudy', '(SQL)'||SUBSTR(L_SQL_STRING, (L_LENGTH*(L_X-1))+1, L_LENGTH));             
         ELSE
            EXIT;
         END IF;
      END LOOP;            
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN(P_SELECTSD_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(P_SELECTSD_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END SELECTSTUDY;

FUNCTION SELECTSDGKVALUES
(A_COL_ID           IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_TP           IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_VALUE        IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_NR_OF_ROWS   IN      NUMBER,                    
 A_GK               IN      VARCHAR2,                  
 A_VALUE            OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_NR_OF_ROWS       IN OUT  NUMBER,                    
 A_ORDER_BY_CLAUSE  IN      VARCHAR2,                  
 A_NEXT_ROWS        IN      NUMBER)                    
RETURN NUMBER IS
L_COL_OPERATOR           UNAPIGEN.VC20_TABLE_TYPE;
L_COL_ANDOR              UNAPIGEN.VC3_TABLE_TYPE;
BEGIN
FOR L_X IN 1..A_COL_NR_OF_ROWS LOOP
    L_COL_OPERATOR(L_X) := '=';
    L_COL_ANDOR(L_X) := 'AND';
END LOOP;
 RETURN(UNAPISD.SELECTSDGKVALUES(A_COL_ID,
                                 A_COL_TP,
                                 A_COL_VALUE,
                                 L_COL_OPERATOR,
                                 L_COL_ANDOR,
                                 A_COL_NR_OF_ROWS,
                                 A_GK,
                                 A_VALUE,
                                 A_NR_OF_ROWS,
                                 A_ORDER_BY_CLAUSE,
                                 A_NEXT_ROWS));
END SELECTSDGKVALUES;

FUNCTION SELECTSDGKVALUES
(A_COL_ID           IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_TP           IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_VALUE        IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_OPERATOR     IN      UNAPIGEN.VC20_TABLE_TYPE,         
 A_COL_ANDOR        IN      UNAPIGEN.VC3_TABLE_TYPE,          
 A_COL_NR_OF_ROWS   IN      NUMBER,                    
 A_GK               IN      VARCHAR2,                  
 A_VALUE            OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_NR_OF_ROWS       IN OUT  NUMBER,                    
 A_ORDER_BY_CLAUSE  IN      VARCHAR2,                  
 A_NEXT_ROWS        IN      NUMBER)                    
RETURN NUMBER IS

L_VALUE                          VARCHAR2(40);
L_ORDER_BY_CLAUSE                VARCHAR2(255);
L_FROM_CLAUSE                    VARCHAR2(500);
L_NEXT_SCGK_JOIN                 VARCHAR2(4);
L_NEXT_STGK_JOIN                 VARCHAR2(4);
L_NEXT_RQGK_JOIN                 VARCHAR2(4);
L_NEXT_SDGK_JOIN                 VARCHAR2(4);
L_NEXT_PTGK_JOIN                 VARCHAR2(4);
L_NEXT_SD_JOIN                   VARCHAR2(4);
L_NEXT_SC_JOIN                   VARCHAR2(4);
L_COLUMN_HANDLED                 BOOLEAN_TABLE_TYPE;
L_ANYOR_PRESENT                  BOOLEAN;
L_COL_ANDOR                      VARCHAR2(3);
L_PREV_COL_TP                    VARCHAR2(40);
L_PREV_COL_ID                    VARCHAR2(40);
L_PREV_COL_INDEX                 INTEGER;
L_WHERE_CLAUSE4JOIN              VARCHAR2(2000);
L_LENGTH                         INTEGER;
L_ME_SCANNED                     BOOLEAN;
L_SQL_VAL_TAB                    VC40_NESTEDTABLE_TYPE := VC40_NESTEDTABLE_TYPE();

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_SELECTSDGK_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_SELECTSDGK_CURSOR);
         P_SELECTSDGK_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_SELECTSDGK_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;
   
   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN

      
      L_SQL_STRING := 'SELECT DISTINCT b.' || A_GK ||' FROM ' ;
      L_FROM_CLAUSE := 'dd' || UNAPIGEN.P_DD || '.uvsd a, utsdgk' || A_GK || ' b';

      
      L_WHERE_CLAUSE4JOIN := 'a.sd = b.sd AND '; 
      L_WHERE_CLAUSE := '';
      L_ANYOR_PRESENT := FALSE;
      FOR I IN 1..A_COL_NR_OF_ROWS LOOP
         L_COLUMN_HANDLED(I) := FALSE;
         IF LTRIM(RTRIM(UPPER(A_COL_ANDOR(I)))) = 'OR' AND
            NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
            L_ANYOR_PRESENT := TRUE;
         END IF;
         
         
         IF I<>1 THEN
            IF NVL(A_COL_TP(I), ' ') = NVL(A_COL_TP(I-1), ' ') AND
               NVL(A_COL_ID(I), ' ') = NVL(A_COL_ID(I-1), ' ') AND
               NVL(A_COL_OPERATOR(I), '=') = '=' AND
               NVL(A_COL_OPERATOR(I-1), '=') = '=' AND
               NVL(A_COL_ANDOR(I-1), 'AND') =  'AND' AND
               (NVL(A_COL_VALUE(I), ' ') <> ' ' OR NVL(A_COL_VALUE(I-1), ' ') <> ' ') THEN
               IF I> 2 AND A_COL_ANDOR(I-2) = 'OR' THEN
                  L_ANYOR_PRESENT := TRUE;
               END IF;
            END IF;
         END IF;         
      END LOOP;
      
      
      

      L_NEXT_SC_JOIN := 'sc';
      L_NEXT_SD_JOIN := 'a';
      L_NEXT_SCGK_JOIN := 'sc';
      L_NEXT_STGK_JOIN := 'sc';
      L_NEXT_RQGK_JOIN := 'sc';
      L_NEXT_SDGK_JOIN := 'b';
      L_NEXT_PTGK_JOIN := 'a';
      
      
   
      FOR I IN REVERSE 1..A_COL_NR_OF_ROWS LOOP
         IF NVL(LTRIM(A_COL_ID(I)), ' ') = ' ' THEN
            RETURN(UNAPIGEN.DBERR_SELCOLSINVALID);
         END IF;

         
         L_COL_ANDOR := 'AND';
         IF I<>1 THEN
            L_COL_ANDOR := A_COL_ANDOR(I-1);
         END IF;
         IF L_COL_ANDOR IS NULL THEN
            
            L_COL_ANDOR := 'AND';
         END IF;

         IF L_COLUMN_HANDLED(I) = FALSE THEN
            IF NVL(A_COL_TP(I), ' ') = 'sdgk' THEN 
               IF NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
                  UNAPIGEN.WHERECLAUSESTRINGBUILDER (A_BASE_TABLE => 'utsd', A_INDEX =>I, A_COL_TP => A_COL_TP(I), A_COL_ID => A_COL_ID(I),
                                 A_COL_VALUE => A_COL_VALUE(I), A_COL_OPERATOR => A_COL_OPERATOR(I),
                                 A_COL_ANDOR => L_COL_ANDOR, A_ANYOR_PRESENT => L_ANYOR_PRESENT,
                                 A_JOINTABLE_PREFIX => 'utsdgk', A_JOINCOLUMN1 => 'sd', A_JOINCOLUMN2 => '', 
                                 A_PREV_COL_TP => L_PREV_COL_TP, A_PREV_COL_ID => L_PREV_COL_ID, A_PREV_COL_INDEX => L_PREV_COL_INDEX,
                                 A_NEXTTABLE_TOJOIN => L_NEXT_SDGK_JOIN, A_FROM_CLAUSE => L_FROM_CLAUSE,
                                 A_WHERE_CLAUSE4JOIN => L_WHERE_CLAUSE4JOIN, A_WHERE_CLAUSE => L_WHERE_CLAUSE,
                                 A_SQL_VAL_TAB => L_SQL_VAL_TAB);                
               END IF;
               L_COLUMN_HANDLED(I) := TRUE; 
            ELSIF NVL(A_COL_TP(I), ' ') = 'scgk' THEN 
               IF INSTR(L_FROM_CLAUSE, '.uvsc sc') = 0 THEN
                  L_FROM_CLAUSE := L_FROM_CLAUSE || ', dd' || UNAPIGEN.P_DD || '.uvsc sc' ;
                  L_WHERE_CLAUSE4JOIN := L_WHERE_CLAUSE4JOIN || 'sc.sd = b.sd AND ';
               END IF;
               IF NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
                  UNAPIGEN.WHERECLAUSESTRINGBUILDER (A_BASE_TABLE => 'utsc', A_INDEX =>I, A_COL_TP => A_COL_TP(I), A_COL_ID => A_COL_ID(I),
                                 A_COL_VALUE => A_COL_VALUE(I), A_COL_OPERATOR => A_COL_OPERATOR(I),
                                 A_COL_ANDOR => L_COL_ANDOR, A_ANYOR_PRESENT => L_ANYOR_PRESENT,
                                 A_JOINTABLE_PREFIX => 'utscgk', A_JOINCOLUMN1 => 'sc', A_JOINCOLUMN2 => '', 
                                 A_PREV_COL_TP => L_PREV_COL_TP, A_PREV_COL_ID => L_PREV_COL_ID, A_PREV_COL_INDEX => L_PREV_COL_INDEX,
                                 A_NEXTTABLE_TOJOIN => L_NEXT_SCGK_JOIN, A_FROM_CLAUSE => L_FROM_CLAUSE,
                                 A_WHERE_CLAUSE4JOIN => L_WHERE_CLAUSE4JOIN, A_WHERE_CLAUSE => L_WHERE_CLAUSE,
                                 A_BASETABLE4GK_ALIAS => 'sc',
                                 A_SQL_VAL_TAB => L_SQL_VAL_TAB);                  
               END IF ;
               L_COLUMN_HANDLED(I) := TRUE; 
            ELSIF NVL(A_COL_TP(I), ' ') = 'stgk' THEN 
               IF INSTR(L_FROM_CLAUSE, '.uvsc sc') = 0 THEN
                  L_FROM_CLAUSE := L_FROM_CLAUSE || ', dd' || UNAPIGEN.P_DD || '.uvsc sc' ;
                  L_WHERE_CLAUSE4JOIN := L_WHERE_CLAUSE4JOIN || 'sc.sd = b.sd AND ';
               END IF;
               IF NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
                  UNAPIGEN.WHERECLAUSESTRINGBUILDER (A_BASE_TABLE => 'utsc', A_INDEX =>I, A_COL_TP => A_COL_TP(I), A_COL_ID => A_COL_ID(I),
                                 A_COL_VALUE => A_COL_VALUE(I), A_COL_OPERATOR => A_COL_OPERATOR(I),
                                 A_COL_ANDOR => L_COL_ANDOR, A_ANYOR_PRESENT => L_ANYOR_PRESENT,
                                 A_JOINTABLE_PREFIX => 'utstgk', A_JOINCOLUMN1 => 'st', A_JOINCOLUMN2 => 'version', 
                                 A_PREV_COL_TP => L_PREV_COL_TP, A_PREV_COL_ID => L_PREV_COL_ID, A_PREV_COL_INDEX => L_PREV_COL_INDEX,
                                 A_NEXTTABLE_TOJOIN => L_NEXT_STGK_JOIN, A_FROM_CLAUSE => L_FROM_CLAUSE,
                                 A_WHERE_CLAUSE4JOIN => L_WHERE_CLAUSE4JOIN, A_WHERE_CLAUSE => L_WHERE_CLAUSE,
                                 A_BASETABLE4GK_ALIAS => 'sc',
                                 A_SQL_VAL_TAB => L_SQL_VAL_TAB);                                    
               END IF;
               L_COLUMN_HANDLED(I) := TRUE; 
            ELSIF NVL(A_COL_TP(I), ' ') = 'ptgk' THEN 
               IF NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
                  UNAPIGEN.WHERECLAUSESTRINGBUILDER (A_BASE_TABLE => 'utsd', A_INDEX =>I, A_COL_TP => A_COL_TP(I), A_COL_ID => A_COL_ID(I),
                                 A_COL_VALUE => A_COL_VALUE(I), A_COL_OPERATOR => A_COL_OPERATOR(I),
                                 A_COL_ANDOR => L_COL_ANDOR, A_ANYOR_PRESENT => L_ANYOR_PRESENT,
                                 A_JOINTABLE_PREFIX => 'utptgk', A_JOINCOLUMN1 => 'pt', A_JOINCOLUMN2 => 'version', 
                                 A_PREV_COL_TP => L_PREV_COL_TP, A_PREV_COL_ID => L_PREV_COL_ID, A_PREV_COL_INDEX => L_PREV_COL_INDEX,
                                 A_NEXTTABLE_TOJOIN => L_NEXT_PTGK_JOIN, A_FROM_CLAUSE => L_FROM_CLAUSE,
                                 A_WHERE_CLAUSE4JOIN => L_WHERE_CLAUSE4JOIN, A_WHERE_CLAUSE => L_WHERE_CLAUSE,
                                 A_SQL_VAL_TAB => L_SQL_VAL_TAB);                                    
               END IF;
               L_COLUMN_HANDLED(I) := TRUE; 
            ELSIF NVL(A_COL_TP(I), ' ') = 'sc' THEN 
               IF INSTR(L_FROM_CLAUSE, '.uvsc sc') = 0 THEN
                  L_FROM_CLAUSE :=  'dd' || UNAPIGEN.P_DD || '.uvsc sc,' || L_FROM_CLAUSE ;
                  L_WHERE_CLAUSE4JOIN := L_WHERE_CLAUSE4JOIN || 'sc.sd = b.sd AND ';
               END IF;
               IF NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
                  UNAPIGEN.WHERECLAUSESTRINGBUILDER (A_BASE_TABLE => 'utsc', A_INDEX =>I, A_COL_TP => A_COL_TP(I), A_COL_ID => A_COL_ID(I),
                                 A_COL_VALUE => A_COL_VALUE(I), A_COL_OPERATOR => A_COL_OPERATOR(I),
                                 A_COL_ANDOR => L_COL_ANDOR, A_ANYOR_PRESENT => L_ANYOR_PRESENT,
                                 A_JOINTABLE_PREFIX => '', A_JOINCOLUMN1 => '', A_JOINCOLUMN2 => '', 
                                 A_PREV_COL_TP => L_PREV_COL_TP, A_PREV_COL_ID => L_PREV_COL_ID, A_PREV_COL_INDEX => L_PREV_COL_INDEX,
                                 A_NEXTTABLE_TOJOIN => L_NEXT_SC_JOIN, A_FROM_CLAUSE => L_FROM_CLAUSE,
                                 A_WHERE_CLAUSE4JOIN => L_WHERE_CLAUSE4JOIN, A_WHERE_CLAUSE => L_WHERE_CLAUSE,
                                 A_BASETABLE4GK_ALIAS => 'sc',
                                 A_SQL_VAL_TAB => L_SQL_VAL_TAB);                                                      
               END IF;
               L_COLUMN_HANDLED(I) := TRUE; 
            ELSIF NVL(A_COL_TP(I), ' ') = 'rqgk' THEN 
               IF INSTR(L_FROM_CLAUSE, '.uvsc sc') = 0 THEN
                  L_FROM_CLAUSE := L_FROM_CLAUSE || ', dd' || UNAPIGEN.P_DD || '.uvsc sc' ;
                  L_WHERE_CLAUSE4JOIN := L_WHERE_CLAUSE4JOIN || 'sc.sd = b.sd  AND ';
               END IF;
               IF NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
                  UNAPIGEN.WHERECLAUSESTRINGBUILDER (A_BASE_TABLE => 'utrq', A_INDEX =>I, A_COL_TP => A_COL_TP(I), A_COL_ID => A_COL_ID(I),
                                 A_COL_VALUE => A_COL_VALUE(I), A_COL_OPERATOR => A_COL_OPERATOR(I),
                                 A_COL_ANDOR => L_COL_ANDOR, A_ANYOR_PRESENT => L_ANYOR_PRESENT,
                                 A_JOINTABLE_PREFIX => 'utrqgk', A_JOINCOLUMN1 => 'rq', A_JOINCOLUMN2 => '', 
                                 A_PREV_COL_TP => L_PREV_COL_TP, A_PREV_COL_ID => L_PREV_COL_ID, A_PREV_COL_INDEX => L_PREV_COL_INDEX,
                                 A_NEXTTABLE_TOJOIN => L_NEXT_RQGK_JOIN, A_FROM_CLAUSE => L_FROM_CLAUSE,
                                 A_WHERE_CLAUSE4JOIN => L_WHERE_CLAUSE4JOIN, A_WHERE_CLAUSE => L_WHERE_CLAUSE,
                                 A_BASETABLE4GK_ALIAS => 'sc',
                                 A_SQL_VAL_TAB => L_SQL_VAL_TAB);                 
               END IF;
            ELSE 
               IF NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
                  UNAPIGEN.WHERECLAUSESTRINGBUILDER (A_BASE_TABLE => 'utsd', A_INDEX =>I, A_COL_TP => A_COL_TP(I), A_COL_ID => A_COL_ID(I),
                                 A_COL_VALUE => A_COL_VALUE(I), A_COL_OPERATOR => A_COL_OPERATOR(I),
                                 A_COL_ANDOR => L_COL_ANDOR, A_ANYOR_PRESENT => L_ANYOR_PRESENT,
                                 A_JOINTABLE_PREFIX => '', A_JOINCOLUMN1 => '', A_JOINCOLUMN2 => '', 
                                 A_PREV_COL_TP => L_PREV_COL_TP, A_PREV_COL_ID => L_PREV_COL_ID, A_PREV_COL_INDEX => L_PREV_COL_INDEX,
                                 A_NEXTTABLE_TOJOIN => L_NEXT_SD_JOIN, A_FROM_CLAUSE => L_FROM_CLAUSE,
                                 A_WHERE_CLAUSE4JOIN => L_WHERE_CLAUSE4JOIN, A_WHERE_CLAUSE => L_WHERE_CLAUSE,
                                 A_SQL_VAL_TAB => L_SQL_VAL_TAB);                  
               END IF;
               L_COLUMN_HANDLED(I) := TRUE; 
            END IF;
         END IF;
      END LOOP;

      
      IF SUBSTR(L_WHERE_CLAUSE4JOIN, -4) = 'AND ' THEN
         L_WHERE_CLAUSE4JOIN := SUBSTR(L_WHERE_CLAUSE4JOIN, 1,
                                  LENGTH(L_WHERE_CLAUSE4JOIN)-4);
      END IF;
      
      
      IF SUBSTR(L_WHERE_CLAUSE, -4) = 'AND ' THEN
         L_WHERE_CLAUSE := SUBSTR(L_WHERE_CLAUSE, 1,
                                  LENGTH(L_WHERE_CLAUSE)-4);
      END IF;
      IF UPPER(SUBSTR(L_WHERE_CLAUSE, -4)) = ' OR ' THEN
         L_WHERE_CLAUSE := SUBSTR(L_WHERE_CLAUSE, 1,
                                  LENGTH(L_WHERE_CLAUSE)-3);
      END IF;
      
      IF L_WHERE_CLAUSE4JOIN IS NOT NULL THEN
         IF L_WHERE_CLAUSE IS NULL THEN
            L_WHERE_CLAUSE := ' WHERE ' || L_WHERE_CLAUSE4JOIN;
         ELSE
            L_WHERE_CLAUSE := ' WHERE (' || L_WHERE_CLAUSE4JOIN || ') AND ('||L_WHERE_CLAUSE||') ';
         END IF;
      ELSE
         IF L_WHERE_CLAUSE IS NOT NULL THEN
            L_WHERE_CLAUSE := ' WHERE '||L_WHERE_CLAUSE;
         ELSE
            L_WHERE_CLAUSE := ' ';
         END IF;
      END IF;

      L_ORDER_BY_CLAUSE := NVL(A_ORDER_BY_CLAUSE, ' ORDER BY 1');

      L_SQL_STRING := L_SQL_STRING || L_FROM_CLAUSE || L_WHERE_CLAUSE || L_ORDER_BY_CLAUSE;

      L_LENGTH := 200;
      FOR L_X IN 1..10 LOOP
         IF ( LENGTH(L_SQL_STRING) > ((L_LENGTH*(L_X-1))+1) ) THEN
            DBMS_OUTPUT.PUT_LINE(SUBSTR(L_SQL_STRING, (L_LENGTH*(L_X-1))+1, L_LENGTH));
         ELSE
            EXIT;
         END IF;
      END LOOP;            

      IF P_SELECTSDGK_CURSOR IS NULL THEN
         P_SELECTSDGK_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;

      UNAPIAUT.ADDORACLECBOHINT (L_SQL_STRING) ;
      DBMS_SQL.PARSE(P_SELECTSDGK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      FOR L_X IN 1..L_SQL_VAL_TAB.COUNT() LOOP
         DBMS_SQL.BIND_VARIABLE(P_SELECTSDGK_CURSOR, ':col_val'||L_X , L_SQL_VAL_TAB(L_X)); 
      END LOOP;   

      DBMS_SQL.DEFINE_COLUMN(P_SELECTSDGK_CURSOR, 1, L_VALUE, 40);

      L_RESULT := DBMS_SQL.EXECUTE(P_SELECTSDGK_CURSOR);

   END IF;
   
   L_RESULT := DBMS_SQL.FETCH_ROWS(P_SELECTSDGK_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_SELECTSDGK_CURSOR, 1, L_VALUE);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_VALUE(L_FETCHED_ROWS) := L_VALUE;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_SELECTSDGK_CURSOR);
      END IF;
   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_SELECTSDGK_CURSOR);
       P_SELECTSDGK_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_SELECTSDGK_CURSOR);
      P_SELECTSDGK_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'SelectSdGkValues', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      L_LENGTH := 200;
      FOR L_X IN 1..10 LOOP
         IF ( LENGTH(L_SQL_STRING) > ((L_LENGTH*(L_X-1))+1) ) THEN
            INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
            VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                   'SelectSdGkValues', '(SQL)'||SUBSTR(L_SQL_STRING, (L_LENGTH*(L_X-1))+1, L_LENGTH));             
         ELSE
            EXIT;
         END IF;
      END LOOP;            
      L_LENGTH := 200;
      FOR L_X IN 1..10 LOOP
         IF ( LENGTH(L_SQLERRM) > ((L_LENGTH*(L_X-1))+1) ) THEN
            DBMS_OUTPUT.PUT_LINE(SUBSTR(L_SQLERRM, (L_LENGTH*(L_X-1))+1, L_LENGTH));
         ELSE
            EXIT;
         END IF;
      END LOOP;            
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (P_SELECTSDGK_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (P_SELECTSDGK_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END SELECTSDGKVALUES;

FUNCTION SELECTSDPROPVALUES
(A_COL_ID           IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_TP           IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_VALUE        IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_NR_OF_ROWS   IN      NUMBER,                    
 A_PROP             IN      VARCHAR2,                  
 A_VALUE            OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_NR_OF_ROWS       IN OUT  NUMBER,                    
 A_ORDER_BY_CLAUSE  IN      VARCHAR2,                  
 A_NEXT_ROWS        IN      NUMBER)                    
RETURN NUMBER IS
L_COL_OPERATOR           UNAPIGEN.VC20_TABLE_TYPE;
L_COL_ANDOR              UNAPIGEN.VC3_TABLE_TYPE;
BEGIN
FOR L_X IN 1..A_COL_NR_OF_ROWS LOOP
    L_COL_OPERATOR(L_X) := '=';
    L_COL_ANDOR(L_X) := 'AND';
END LOOP;
 RETURN(UNAPISD.SELECTSDPROPVALUES(A_COL_ID,
                                 A_COL_TP,
                                 A_COL_VALUE,
                                 L_COL_OPERATOR,
                                 L_COL_ANDOR,
                                 A_COL_NR_OF_ROWS,
                                 A_PROP,
                                 A_VALUE,
                                 A_NR_OF_ROWS,
                                 A_ORDER_BY_CLAUSE,
                                 A_NEXT_ROWS));
END SELECTSDPROPVALUES;

FUNCTION SELECTSDPROPVALUES
(A_COL_ID           IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_TP           IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_VALUE        IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_OPERATOR     IN      UNAPIGEN.VC20_TABLE_TYPE,  
 A_COL_ANDOR        IN      UNAPIGEN.VC3_TABLE_TYPE,   
 A_COL_NR_OF_ROWS   IN      NUMBER,                    
 A_PROP             IN      VARCHAR2,                  
 A_VALUE            OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_NR_OF_ROWS       IN OUT  NUMBER,                    
 A_ORDER_BY_CLAUSE  IN      VARCHAR2,                  
 A_NEXT_ROWS        IN      NUMBER)                    
RETURN NUMBER IS
L_VALUE                          VARCHAR2(40);
L_ORDER_BY_CLAUSE                VARCHAR2(255);
L_FROM_CLAUSE                    VARCHAR2(500);
L_NEXT_SD_JOIN                   VARCHAR2(4);
L_NEXT_PTGK_JOIN                 VARCHAR2(4);
L_NEXT_SDGK_JOIN                 VARCHAR2(4);
L_COLUMN_HANDLED                 BOOLEAN_TABLE_TYPE;
L_ANYOR_PRESENT                  BOOLEAN;
L_COL_ANDOR                      VARCHAR2(3);
L_PREV_COL_TP                    VARCHAR2(40);
L_PREV_COL_ID                    VARCHAR2(40);
L_PREV_COL_INDEX                 INTEGER;
L_WHERE_CLAUSE4JOIN              VARCHAR2(2000);
L_LENGTH                         INTEGER;
L_SQL_VAL_TAB                    VC40_NESTEDTABLE_TYPE := VC40_NESTEDTABLE_TYPE();

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_SELECTSDPROP_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_SELECTSDPROP_CURSOR);
         P_SELECTSDPROP_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_SELECTSDPROP_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN

      L_SQL_STRING := 'SELECT DISTINCT a.' || A_PROP ||' FROM ';
      L_FROM_CLAUSE := 'dd' || UNAPIGEN.P_DD || '.uvsd a';

      
      L_WHERE_CLAUSE4JOIN := '';
      L_WHERE_CLAUSE := '';
      L_ANYOR_PRESENT := FALSE;
      FOR I IN 1..A_COL_NR_OF_ROWS LOOP
         L_COLUMN_HANDLED(I) := FALSE;
         IF LTRIM(RTRIM(UPPER(A_COL_ANDOR(I)))) = 'OR' AND
            NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
            L_ANYOR_PRESENT := TRUE;
         END IF;
         
         
         IF I<>1 THEN
            IF NVL(A_COL_TP(I), ' ') = NVL(A_COL_TP(I-1), ' ') AND
               NVL(A_COL_ID(I), ' ') = NVL(A_COL_ID(I-1), ' ') AND
               NVL(A_COL_OPERATOR(I), '=') = '=' AND
               NVL(A_COL_OPERATOR(I-1), '=') = '=' AND
               NVL(A_COL_ANDOR(I-1), 'AND') =  'AND' AND
               (NVL(A_COL_VALUE(I), ' ') <> ' ' OR NVL(A_COL_VALUE(I-1), ' ') <> ' ') THEN
               IF I> 2 AND A_COL_ANDOR(I-2) = 'OR' THEN
                  L_ANYOR_PRESENT := TRUE;
               END IF;
            END IF;
         END IF;         
      END LOOP;

      L_NEXT_SD_JOIN := 'a';
      L_NEXT_PTGK_JOIN := 'a';
      L_NEXT_SDGK_JOIN := 'a';
      FOR I IN REVERSE 1..A_COL_NR_OF_ROWS LOOP
        IF NVL(LTRIM(A_COL_ID(I)), ' ') = ' ' THEN
           RETURN(UNAPIGEN.DBERR_SELCOLSINVALID);
        END IF;

         
         L_COL_ANDOR := 'AND';
         IF I<>1 THEN
            L_COL_ANDOR := A_COL_ANDOR(I-1);
         END IF;
         IF L_COL_ANDOR IS NULL THEN
            
            L_COL_ANDOR := 'AND';
         END IF;

         IF L_COLUMN_HANDLED(I) = FALSE THEN
            IF NVL(A_COL_TP(I), ' ') = 'sdgk' THEN 
               IF NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
                  UNAPIGEN.WHERECLAUSESTRINGBUILDER (A_BASE_TABLE => 'utsd', A_INDEX =>I, A_COL_TP => A_COL_TP(I), A_COL_ID => A_COL_ID(I),
                                 A_COL_VALUE => A_COL_VALUE(I), A_COL_OPERATOR => A_COL_OPERATOR(I),
                                 A_COL_ANDOR => L_COL_ANDOR, A_ANYOR_PRESENT => L_ANYOR_PRESENT,
                                 A_JOINTABLE_PREFIX => 'utsdgk', A_JOINCOLUMN1 => 'sd', A_JOINCOLUMN2 => '', 
                                 A_PREV_COL_TP => L_PREV_COL_TP, A_PREV_COL_ID => L_PREV_COL_ID, A_PREV_COL_INDEX => L_PREV_COL_INDEX,
                                 A_NEXTTABLE_TOJOIN => L_NEXT_SDGK_JOIN, A_FROM_CLAUSE => L_FROM_CLAUSE,
                                 A_WHERE_CLAUSE4JOIN => L_WHERE_CLAUSE4JOIN, A_WHERE_CLAUSE => L_WHERE_CLAUSE,
                                 A_SQL_VAL_TAB => L_SQL_VAL_TAB);                 
               END IF;
               L_COLUMN_HANDLED(I) := TRUE; 
            ELSIF NVL(A_COL_TP(I), ' ') = 'ptgk' THEN 
               IF NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
                  UNAPIGEN.WHERECLAUSESTRINGBUILDER (A_BASE_TABLE => 'utsd', A_INDEX =>I, A_COL_TP => A_COL_TP(I), A_COL_ID => A_COL_ID(I),
                                 A_COL_VALUE => A_COL_VALUE(I), A_COL_OPERATOR => A_COL_OPERATOR(I),
                                 A_COL_ANDOR => L_COL_ANDOR, A_ANYOR_PRESENT => L_ANYOR_PRESENT,
                                 A_JOINTABLE_PREFIX => 'utptgk', A_JOINCOLUMN1 => 'pt', A_JOINCOLUMN2 => 'version', 
                                 A_PREV_COL_TP => L_PREV_COL_TP, A_PREV_COL_ID => L_PREV_COL_ID, A_PREV_COL_INDEX => L_PREV_COL_INDEX,
                                 A_NEXTTABLE_TOJOIN => L_NEXT_PTGK_JOIN, A_FROM_CLAUSE => L_FROM_CLAUSE,
                                 A_WHERE_CLAUSE4JOIN => L_WHERE_CLAUSE4JOIN, A_WHERE_CLAUSE => L_WHERE_CLAUSE,
                                 A_SQL_VAL_TAB => L_SQL_VAL_TAB);                  
               END IF;
               L_COLUMN_HANDLED(I) := TRUE; 
            ELSE 
               IF NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
                  UNAPIGEN.WHERECLAUSESTRINGBUILDER (A_BASE_TABLE => 'utsd', A_INDEX =>I, A_COL_TP => A_COL_TP(I), A_COL_ID => A_COL_ID(I),
                                   A_COL_VALUE => A_COL_VALUE(I), A_COL_OPERATOR => A_COL_OPERATOR(I),
                                   A_COL_ANDOR => L_COL_ANDOR, A_ANYOR_PRESENT => L_ANYOR_PRESENT,
                                   A_JOINTABLE_PREFIX => '', A_JOINCOLUMN1 => '', A_JOINCOLUMN2 => '', 
                                   A_PREV_COL_TP => L_PREV_COL_TP, A_PREV_COL_ID => L_PREV_COL_ID, A_PREV_COL_INDEX => L_PREV_COL_INDEX,
                                   A_NEXTTABLE_TOJOIN => L_NEXT_SD_JOIN, A_FROM_CLAUSE => L_FROM_CLAUSE,
                                   A_WHERE_CLAUSE4JOIN => L_WHERE_CLAUSE4JOIN, A_WHERE_CLAUSE => L_WHERE_CLAUSE,
                                 A_SQL_VAL_TAB => L_SQL_VAL_TAB);                
               END IF;
               L_COLUMN_HANDLED(I) := TRUE; 
            END IF;
         END IF;
      END LOOP;

      
      IF SUBSTR(L_WHERE_CLAUSE4JOIN, -4) = 'AND ' THEN
         L_WHERE_CLAUSE4JOIN := SUBSTR(L_WHERE_CLAUSE4JOIN, 1,
                                  LENGTH(L_WHERE_CLAUSE4JOIN)-4);
      END IF;
      
      
      IF SUBSTR(L_WHERE_CLAUSE, -4) = 'AND ' THEN
         L_WHERE_CLAUSE := SUBSTR(L_WHERE_CLAUSE, 1,
                                  LENGTH(L_WHERE_CLAUSE)-4);
      END IF;
      IF UPPER(SUBSTR(L_WHERE_CLAUSE, -4)) = ' OR ' THEN
         L_WHERE_CLAUSE := SUBSTR(L_WHERE_CLAUSE, 1,
                                  LENGTH(L_WHERE_CLAUSE)-3);
      END IF;
      
      IF L_WHERE_CLAUSE4JOIN IS NOT NULL THEN
         IF L_WHERE_CLAUSE IS NULL THEN
            L_WHERE_CLAUSE := ' WHERE ' || L_WHERE_CLAUSE4JOIN;
         ELSE
            L_WHERE_CLAUSE := ' WHERE (' || L_WHERE_CLAUSE4JOIN || ') AND ('||L_WHERE_CLAUSE||') ';
         END IF;
      ELSE
         IF L_WHERE_CLAUSE IS NOT NULL THEN
            L_WHERE_CLAUSE := ' WHERE '||L_WHERE_CLAUSE;
         ELSE
            L_WHERE_CLAUSE := ' ';
         END IF;
      END IF;

      L_ORDER_BY_CLAUSE := NVL(A_ORDER_BY_CLAUSE, ' ORDER BY 1');

      L_SQL_STRING := L_SQL_STRING || L_FROM_CLAUSE || L_WHERE_CLAUSE || L_ORDER_BY_CLAUSE;

      L_LENGTH := 200;
      FOR L_X IN 1..10 LOOP
         IF ( LENGTH(L_SQL_STRING) > ((L_LENGTH*(L_X-1))+1) ) THEN
            DBMS_OUTPUT.PUT_LINE(SUBSTR(L_SQL_STRING, (L_LENGTH*(L_X-1))+1, L_LENGTH));
         ELSE
            EXIT;
         END IF;
      END LOOP;            

      IF P_SELECTSDPROP_CURSOR IS NULL THEN
         P_SELECTSDPROP_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;
      
      UNAPIAUT.ADDORACLECBOHINT (L_SQL_STRING) ;
      DBMS_SQL.PARSE(P_SELECTSDPROP_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      FOR L_X IN 1..L_SQL_VAL_TAB.COUNT() LOOP
         DBMS_SQL.BIND_VARIABLE(P_SELECTSDPROP_CURSOR, ':col_val'||L_X , L_SQL_VAL_TAB(L_X)); 
      END LOOP;

      DBMS_SQL.DEFINE_COLUMN(P_SELECTSDPROP_CURSOR, 1, L_VALUE, 40);

      L_RESULT := DBMS_SQL.EXECUTE(P_SELECTSDPROP_CURSOR);
   END IF;
   
   L_RESULT := DBMS_SQL.FETCH_ROWS(P_SELECTSDPROP_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_SELECTSDPROP_CURSOR, 1, L_VALUE);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_VALUE(L_FETCHED_ROWS) := L_VALUE;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_SELECTSDPROP_CURSOR);
      END IF;
   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_SELECTSDPROP_CURSOR);
       P_SELECTSDPROP_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_SELECTSDPROP_CURSOR);
      P_SELECTSDPROP_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;
   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'SelectSdPropValues', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      L_LENGTH := 200;
      FOR L_X IN 1..10 LOOP
         IF ( LENGTH(L_SQL_STRING) > ((L_LENGTH*(L_X-1))+1) ) THEN
            INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
            VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                   'SelectRqPropValues', '(SQL)'||SUBSTR(L_SQL_STRING, (L_LENGTH*(L_X-1))+1, L_LENGTH));             
         ELSE
            EXIT;
         END IF;
      END LOOP;            
      L_LENGTH := 200;
      FOR L_X IN 1..10 LOOP
         IF ( LENGTH(L_SQLERRM) > ((L_LENGTH*(L_X-1))+1) ) THEN
            DBMS_OUTPUT.PUT_LINE(SUBSTR(L_SQLERRM, (L_LENGTH*(L_X-1))+1, L_LENGTH));
         ELSE
            EXIT;
         END IF;
      END LOOP;            
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (P_SELECTSDPROP_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (P_SELECTSDPROP_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END SELECTSDPROPVALUES;

FUNCTION DELETESTUDY
(A_SD            IN  VARCHAR2,          
 A_MODIFY_REASON IN  VARCHAR2)          
RETURN NUMBER  IS
BEGIN
   RETURN(UNAPISD2.DELETESTUDY
            (A_SD, A_MODIFY_REASON));
END DELETESTUDY;


FUNCTION INITSDSAMPLINGDETAILS
(A_PT               IN      VARCHAR2,                  
 A_PT_VERSION       IN OUT  VARCHAR2,                  
 A_SD               IN      VARCHAR2,                  
 A_FILTER_FREQ      IN      CHAR,                      
 A_REF_DATE         IN      DATE,                      
 A_ST               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_ST_VERSION       OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_DELAY            OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_DELAY_UNIT       OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_INHERIT_AU       OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NR_PLANNED_SC    OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_NR_OF_ROWS       IN OUT  NUMBER)                    
RETURN NUMBER IS
BEGIN
   RETURN(UNAPISD2.INITSDSAMPLINGDETAILS
            (A_PT, A_PT_VERSION, A_SD, A_FILTER_FREQ, A_REF_DATE, A_ST, A_ST_VERSION, A_DELAY, A_DELAY_UNIT,
              A_INHERIT_AU, A_NR_PLANNED_SC, A_NR_OF_ROWS));
END INITSDSAMPLINGDETAILS;


FUNCTION CREATESDSAMPLINGDETAILS
(A_PT               IN      VARCHAR2,                   
 A_PT_VERSION       IN OUT  VARCHAR2,                   
 A_SD               IN      VARCHAR2,                   
 A_FILTER_FREQ      IN      CHAR,                       
 A_REF_DATE         IN      DATE,                       
 A_USERID           IN      VARCHAR2,                   
 A_FIELDTYPE_TAB    IN      UNAPIGEN.VC20_TABLE_TYPE,   
 A_FIELDNAMES_TAB   IN      UNAPIGEN.VC20_TABLE_TYPE,   
 A_FIELDVALUES_TAB  IN      UNAPIGEN.VC40_TABLE_TYPE,   
 A_NR_OF_ROWS       IN      NUMBER,                     
 A_MODIFY_REASON    IN      VARCHAR2)                   
RETURN NUMBER IS
BEGIN
   RETURN(UNAPISD2.CREATESDSAMPLINGDETAILS
            (A_PT, A_PT_VERSION, A_SD, A_FILTER_FREQ, A_REF_DATE, A_USERID, 
             A_FIELDTYPE_TAB, A_FIELDNAMES_TAB, A_FIELDVALUES_TAB, A_NR_OF_ROWS,
             A_MODIFY_REASON));
END CREATESDSAMPLINGDETAILS;


FUNCTION GETPREFVALUE                                  
(A_UP_IN            IN     NUMBER,                     
 A_US_IN            IN     VARCHAR2,                   
 A_PREF_NAME_IN     IN     VARCHAR2,                   
 A_PREF_VALUE       OUT    VARCHAR2)                   
RETURN NUMBER IS

L_UPUSPREF_UP           UNAPIGEN.LONG_TABLE_TYPE;
L_UPUSPREF_US           UNAPIGEN.VC20_TABLE_TYPE;
L_UPUSPREF_PREF_NAME    UNAPIGEN.VC20_TABLE_TYPE;
L_UPUSPREF_PREF_VALUE   UNAPIGEN.VC40_TABLE_TYPE;
L_UPUSPREF_INHERIT_PREF UNAPIGEN.CHAR1_TABLE_TYPE;
L_UPUSPREF_NR_OF_ROWS   NUMBER;
L_UP_IN                 NUMBER;

BEGIN 
   
   
   
   IF UNAPIEV.P_EV_MGR_SESSION THEN
      BEGIN
         SELECT DEF_UP
         INTO L_UP_IN
         FROM UTAD
         WHERE AD = A_US_IN;
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
         RETURN(UNAPIGEN.DBERR_NOOBJECT);
      END;
   ELSE
     L_UP_IN := A_UP_IN;
   END IF;

   L_RET_CODE := UNAPIUPP.GETUPUSPREF(L_UP_IN, NVL(A_US_IN,UNAPIGEN.P_USER) , A_PREF_NAME_IN,
                                      L_UPUSPREF_UP, L_UPUSPREF_US, L_UPUSPREF_PREF_NAME,
                                      L_UPUSPREF_PREF_VALUE, L_UPUSPREF_INHERIT_PREF,
                                      L_UPUSPREF_NR_OF_ROWS);
   IF L_RET_CODE = UNAPIGEN.DBERR_NORECORDS THEN
      A_PREF_VALUE := '';
      RETURN(UNAPIGEN.DBERR_SUCCESS);
   ELSIF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      L_SQLERRM := 'GetUpUsPref returned '||TO_CHAR(L_RET_CODE) || ' for (up,user,pref_name)=('||
                   A_UP_IN || ',' ||  NVL(A_US_IN,UNAPIGEN.P_USER) || ',' || A_PREF_NAME_IN ||')';
      RETURN(UNAPIGEN.DBERR_GENFAIL);
   ELSIF L_UPUSPREF_NR_OF_ROWS > 1 THEN
      L_SQLERRM := 'GetUpUsPref returned too much rows for (up,user,pref_name)=('||
                   A_UP_IN || ',' ||  NVL(A_US_IN,UNAPIGEN.P_USER) || ',' || A_PREF_NAME_IN ||')';
      RETURN(UNAPIGEN.DBERR_GENFAIL);
   END IF;
   A_PREF_VALUE := L_UPUSPREF_PREF_VALUE(1);
   RETURN(UNAPIGEN.DBERR_SUCCESS);
END GETPREFVALUE;








FUNCTION CREATESTUDY
(A_PT               IN     VARCHAR2,       
 A_PT_VERSION       IN OUT VARCHAR2,       
 A_SD               IN OUT VARCHAR2,       
 A_REF_DATE         IN     DATE,           
 A_CREATE_IC        IN     VARCHAR2,       
 A_CREATE_SC        IN     VARCHAR2,       
 A_USERID           IN     VARCHAR2,       
 A_FIELDTYPE_TAB    IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_FIELDNAMES_TAB   IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_FIELDVALUES_TAB  IN     UNAPIGEN.VC40_TABLE_TYPE,  
 A_NR_OF_ROWS       IN     NUMBER,                    
 A_MODIFY_REASON    IN     VARCHAR2)       
RETURN NUMBER IS

L_SAMPLING_DATE        TIMESTAMP WITH TIME ZONE;
L_PREF_VALUE           VARCHAR2(40);
L_CREATE_IC            VARCHAR2(40);
L_CREATE_SC            VARCHAR2(40);
L_DATE_CURSOR          INTEGER;
L_SDGK_CURSOR          INTEGER;
L_PT_REC               UTPT%ROWTYPE;
L_EDIT_ALLOWED         CHAR(1);
L_VALID_CF             VARCHAR2(20);
L_DELAYED_TILL         TIMESTAMP WITH TIME ZONE;
L_TIMED_EVENT_TP       VARCHAR2(255);
L_REF_DATE             TIMESTAMP WITH TIME ZONE;
L_LC                   VARCHAR2(2);
L_LC_VERSION           VARCHAR2(20);
L_SS                   VARCHAR2(2);
L_LOG_HS               CHAR(1);
L_LOG_HS_DETAILS       CHAR(1);
L_ALLOW_MODIFY         CHAR(1);
L_ACTIVE               CHAR(1);
L_SD_CLASS             VARCHAR2(2);
L_PT_VERSION           VARCHAR2(20);

L_EVMGR_NAME           VARCHAR2(20);

CURSOR L_PTGK_CURSOR(C_PT_INHERIT_GK CHAR) IS
   SELECT A.GK, A.GKSEQ, A.VALUE
   FROM  UTGKSD B, UTPTGK A
   WHERE A.PT = A_PT
     AND A.VERSION = UNAPIGEN.USEVERSION('pt', A_PT, A_PT_VERSION)   
     AND A.GK = B.GK
     AND B.STRUCT_CREATED = '1'
     AND B.VERSION_IS_CURRENT = '1'
     AND B.VERSION = UNAPIGEN.USEVERSION('gkpt', A.GK, A.GK_VERSION)
     AND DECODE(C_PT_INHERIT_GK, '0',B.INHERIT_GK, C_PT_INHERIT_GK) = '1';

CURSOR L_OBJECTS_CURSOR (A_OBJECT_TYPE VARCHAR2) IS
   SELECT LOG_HS, LOG_HS_DETAILS
   FROM UTOBJECTS
   WHERE OBJECT=A_OBJECT_TYPE;
   
CURSOR L_PTTP_CURSOR(C_PT VARCHAR2, C_PT_VERSION VARCHAR2) IS
SELECT * FROM UTPTTP 
WHERE PT = C_PT AND
      VERSION = UNAPIGEN.USEVERSION('pt', C_PT, C_PT_VERSION)
ORDER BY PTCOLUMN;

CURSOR L_PTCS_CURSOR(C_PT VARCHAR2, C_PT_VERSION VARCHAR2) IS
SELECT * FROM UTPTCS 
WHERE PT = C_PT AND
      VERSION = UNAPIGEN.USEVERSION('pt', C_PT, C_PT_VERSION)
ORDER BY PTROW;
     
CURSOR L_PTCSCN_CURSOR(C_PT VARCHAR2, C_PT_VERSION VARCHAR2, C_PTROW NUMBER) IS
SELECT * FROM UTPTCSCN 
WHERE PT = C_PT AND
      VERSION = UNAPIGEN.USEVERSION('pt', C_PT, C_PT_VERSION) AND
   PTROW = C_PTROW;

L_PTTP_REC        UTPTTP%ROWTYPE;
L_PTCS_REC        UTPTCS%ROWTYPE;
L_PTCSCN_REC      UTPTCSCN%ROWTYPE;

L_TPNODE    NUMBER;
L_CSNODE    NUMBER;

BEGIN
   L_EVMGR_NAME := UNAPIGEN.P_EVMGR_NAME;
   UNAPIGEN.P_EVMGR_NAME := 'STUDY_EVENT_MGR';
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   
   
   
   
   
   
   

   
   IF A_PT IS NOT NULL THEN
      A_PT_VERSION := UNAPIGEN.VALIDATEVERSION('pt', A_PT, A_PT_VERSION);
   ELSE
      IF A_PT_VERSION IS NULL THEN
         A_PT_VERSION := UNVERSION.P_NO_VERSION;
      END IF;
   END IF;
   
   
   
   
   
   L_SQLERRM := '';   
   IF A_REF_DATE IS NULL THEN
      L_REF_DATE := NULL;
      L_SAMPLING_DATE := NULL;
   ELSE
      L_SAMPLING_DATE := A_REF_DATE;
      L_REF_DATE := A_REF_DATE;
   END IF;

   
   
   
   
   IF NVL(A_SD, ' ') = ' ' THEN
      L_RET_CODE := GENERATESTUDYCODE(A_PT, A_PT_VERSION, L_REF_DATE, 
                                      A_FIELDTYPE_TAB, A_FIELDNAMES_TAB, A_FIELDVALUES_TAB, A_NR_OF_ROWS,
                                      A_SD, L_EDIT_ALLOWED, L_VALID_CF);
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
         RAISE STPERROR;
      END IF;
   END IF;

   
   
   
   
   
   
   
   
   L_PT_VERSION := A_PT_VERSION;
   L_RET_CODE := UNAPIAUT.GETSDAUTHORISATION(A_SD, L_PT_VERSION, L_LC, L_LC_VERSION, L_SS,
                                             L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS, L_LOG_HS_DETAILS);
   IF L_RET_CODE <> UNAPIGEN.DBERR_NOOBJECT  THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SDALREADYEXIST;
      RAISE STPERROR;
   END IF;

   
   
   
   
   
   
   
   

   IF NVL(A_PT, ' ') <> ' ' THEN

      BEGIN
         SELECT *
         INTO L_PT_REC
         FROM UTPT
         WHERE PT = A_PT
         AND VERSION = A_PT_VERSION;
         
         IF L_PT_REC.SD_LC IS NOT NULL THEN
            L_LC := L_PT_REC.SD_LC;
            L_LC_VERSION := UNAPIGEN.USEVERSION('lc', L_PT_REC.SD_LC, L_PT_REC.SD_LC_VERSION);
         END IF;

      EXCEPTION
      WHEN NO_DATA_FOUND THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
         RAISE STPERROR;
      END;

   END IF;

   
   
   
   L_CREATE_SC := A_CREATE_SC;
   IF NVL(L_CREATE_SC, ' ') = ' ' THEN      
      
      
      L_RET_CODE := GETPREFVALUE(UNAPIGEN.P_CURRENT_UP, A_USERID, 'sdCreateSc',
                                 L_PREF_VALUE);
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
         RAISE STPERROR;
      END IF;
      L_CREATE_SC := L_PREF_VALUE;
   END IF;
   IF NVL(L_CREATE_SC, 'ON STUDY CREATION') = 'WHEN INFO AVAILABLE' THEN
      L_SD_CLASS := '1';
   ELSIF NVL(A_PT, ' ') <> ' ' THEN 
      L_SD_CLASS := L_PT_REC.PT_CLASS ;
   ELSE
      L_SD_CLASS := NULL;    
   END IF;
   
   
   
   
   IF NVL(A_PT, ' ') <> ' ' THEN
      INSERT INTO UTSD(SD, PT, PT_VERSION, DESCRIPTION, 
                       CREATION_DATE, CREATION_DATE_TZ, CREATED_BY,
                       LABEL_FORMAT, DESCR_DOC, DESCR_DOC_VERSION,
                       LOG_HS, LOG_HS_DETAILS, ALLOW_MODIFY,
                       ACTIVE, LC, LC_VERSION, SD_CLASS)
      VALUES(A_SD, A_PT, L_PT_REC.VERSION, L_PT_REC.DESCRIPTION,
             CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NVL(A_USERID,UNAPIGEN.P_USER),
             L_PT_REC.LABEL_FORMAT, L_PT_REC.DESCR_DOC, L_PT_REC.DESCR_DOC_VERSION, 
             L_LOG_HS, L_LOG_HS_DETAILS, '#',
             '0', L_LC, L_LC_VERSION, L_SD_CLASS);
      UNAPIAUT.UPDATELCINAUTHORISATIONBUFFER('sd', A_SD, '', L_LC, L_LC_VERSION);             
   ELSE

      INSERT INTO UTSD(SD, CREATION_DATE, CREATION_DATE_TZ, CREATED_BY,
                       LOG_HS, LOG_HS_DETAILS, ALLOW_MODIFY, ACTIVE, LC, LC_VERSION, SD_CLASS)
      VALUES (A_SD,  CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NVL(A_USERID,UNAPIGEN.P_USER),
              L_LOG_HS, L_LOG_HS_DETAILS, '#', '0', L_LC, L_LC_VERSION, L_SD_CLASS);
   END IF;

 
   
   
   
   
   
   
   
   
   IF NVL(A_PT, ' ') <> ' ' THEN

      
      IF NVL(L_PT_REC.INHERIT_AU, '0') = '1' THEN
         INSERT INTO UTSDAU
         (SD, AU, AU_VERSION, AUSEQ, VALUE)
         SELECT A_SD, A.AU, '' B_VERSION, A.AUSEQ, A.VALUE
         FROM UTAU B, UTPTAU A
         WHERE PT = A_PT
         AND A.VERSION = A_PT_VERSION
         AND A.AU = B.AU
         AND UNAPIGEN.USEVERSION('au', A.AU, A.AU_VERSION) = B.VERSION;
      ELSE
         INSERT INTO UTSDAU
         (SD, AU, AU_VERSION, AUSEQ, VALUE)
         SELECT A_SD, A.AU, '' B_VERSION, A.AUSEQ, A.VALUE
         FROM UTAU B, UTPTAU A
         WHERE PT = A_PT
         AND A.VERSION = A_PT_VERSION
         AND A.AU = B.AU
         AND UNAPIGEN.USEVERSION('au', A.AU, A.AU_VERSION) = B.VERSION
         AND B.INHERIT_AU = '1';      
      END IF;

      
      
      
      L_CREATE_IC := A_CREATE_IC;
      IF NVL(L_CREATE_IC, ' ') = ' ' THEN
         
         
         L_RET_CODE := GETPREFVALUE(UNAPIGEN.P_CURRENT_UP, A_USERID, 'sdCreateIc',
                                    L_PREF_VALUE);
         IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
            UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
            RAISE STPERROR;
         END IF;
         L_CREATE_IC := L_PREF_VALUE;
      END IF;

      IF NVL(L_CREATE_IC, 'ON STUDY CREATION') = 'ON STUDY CREATION' THEN
         L_RET_CODE := UNAPISD.CREATESDINFODETAILS(A_PT, A_PT_VERSION, A_SD,
                                        UNAPIGEN.PERFORM_FREQ_FILTERING,
                                        L_REF_DATE, A_MODIFY_REASON);
         IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
            UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
            RAISE STPERROR;
         END IF;
      END IF;

      
      
      
      












      L_SDGK_CURSOR := DBMS_SQL.OPEN_CURSOR;
      FOR L_PTGK_REC IN L_PTGK_CURSOR(NVL(L_PT_REC.INHERIT_GK, '0')) LOOP
         BEGIN
            
            INSERT INTO UTSDGK(SD, GK, GKSEQ, VALUE)
            VALUES(A_SD, L_PTGK_REC.GK, L_PTGK_REC.GKSEQ, L_PTGK_REC.VALUE);

            IF L_PTGK_REC.VALUE IS NOT NULL THEN
               L_SQL_STRING := 'INSERT INTO utsdgk' || L_PTGK_REC.GK ||
                               '(sd, ' || L_PTGK_REC.GK || ') VALUES (:a_sd, :a_gk)';                               
               DBMS_SQL.PARSE(L_SDGK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
               DBMS_SQL.BIND_VARIABLE(L_SDGK_CURSOR, ':a_sd', A_SD, 20);
               DBMS_SQL.BIND_VARIABLE(L_SDGK_CURSOR, ':a_gk', L_PTGK_REC.VALUE, 40);
               L_RESULT := DBMS_SQL.EXECUTE(L_SDGK_CURSOR);

               IF L_RESULT = 0 THEN
                  UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NORECORDS;
                  RAISE STPERROR;
               END IF;
            END IF;
         EXCEPTION
         WHEN DUP_VAL_ON_INDEX THEN
            
            
            NULL;
         END;
      END LOOP;
      DBMS_SQL.CLOSE_CURSOR(L_SDGK_CURSOR);

   END IF;
   L_TPNODE := 0;
   
   FOR L_PTTP_REC IN L_PTTP_CURSOR(A_PT, A_PT_VERSION) LOOP
      L_TPNODE := L_PTTP_REC.PTCOLUMN * UNAPIGEN.DEFAULT_NODE_INTERVAL;
      INSERT INTO UTSDTP(SD, TPNODE, TP,  TP_UNIT, ALLOW_UPFRONT, 
                  ALLOW_UPFRONT_UNIT, ALLOW_OVERDUE, ALLOW_OVERDUE_UNIT)
      VALUES ( A_SD, 
               L_TPNODE,
               L_PTTP_REC.TP,
               L_PTTP_REC.TP_UNIT,
               L_PTTP_REC.ALLOW_UPFRONT,
               L_PTTP_REC.ALLOW_UPFRONT_UNIT,
               L_PTTP_REC.ALLOW_OVERDUE,
               L_PTTP_REC.ALLOW_OVERDUE_UNIT);
   END LOOP;
   L_CSNODE := 0;
   FOR L_PTCS_REC IN L_PTCS_CURSOR(A_PT, A_PT_VERSION) LOOP
      L_CSNODE :=  L_PTCS_REC.PTROW * UNAPIGEN.DEFAULT_NODE_INTERVAL;   
      
      INSERT INTO UTSDCS(SD, CSNODE, CS,  DESCRIPTION, T0_DATE, T0_DATE_TZ)
      VALUES (A_SD, L_CSNODE, L_PTCS_REC.CS, L_PTCS_REC.DESCRIPTION, NULL, NULL);
      
      FOR L_PTCSCN_REC IN L_PTCSCN_CURSOR(A_PT, A_PT_VERSION, L_PTCS_REC.PTROW) LOOP
         INSERT INTO UTSDCSCN(SD, CSNODE, CS, CN, CNSEQ, VALUE)
         VALUES ( A_SD, 
                 L_CSNODE,
                 L_PTCSCN_REC.CS,
                 L_PTCSCN_REC.CN,
                 L_PTCSCN_REC.CNSEQ,
                 L_PTCSCN_REC.VALUE);
      END LOOP;
   END LOOP;

   
   
   
   L_EVENT_TP := 'StudyCreated';
   L_EV_SEQ_NR := -1;
   L_EV_DETAILS := 'pt_version=' || A_PT_VERSION;   
   L_RESULT := UNAPIEV.INSERTEVENT('CreateStudy', UNAPIGEN.P_EVMGR_NAME, 'sd',
                                   A_SD, '', '', '', L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   INSERT INTO UTSDHS(SD, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
   VALUES(A_SD, NVL(A_USERID, UNAPIGEN.P_USER), UNAPIGEN.SQLUSERDESCRIPTION(NVL(A_USERID, UNAPIGEN.P_USER)), 
          L_EVENT_TP, 'study "'||A_SD||'" is created.', 
          CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
   UNAPIGEN.P_EVMGR_NAME := L_EVMGR_NAME;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('CreateStudy', SQLERRM);
   
   ELSIF L_SQLERRM IS NOT NULL THEN
   
      UNAPIGEN.LOGERROR('CreateStudy', L_SQLERRM);   
   END IF;
   IF DBMS_SQL.IS_OPEN(L_DATE_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_DATE_CURSOR);
   END IF;
   IF DBMS_SQL.IS_OPEN(L_SDGK_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_SDGK_CURSOR);
   END IF;
   IF L_OBJECTS_CURSOR%ISOPEN THEN
      CLOSE L_OBJECTS_CURSOR;
   END IF;   
   UNAPIGEN.P_EVMGR_NAME := L_EVMGR_NAME;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'CreateStudy'));
END CREATESTUDY;

FUNCTION PLANSTUDY
(A_PT               IN     VARCHAR2,       
 A_PT_VERSION       IN OUT VARCHAR2,       
 A_SD               IN OUT VARCHAR2,       
 A_REF_DATE         IN     DATE,           
 A_CREATE_IC        IN     VARCHAR2,       
 A_CREATE_SC        IN     VARCHAR2,       
 A_USERID           IN     VARCHAR2,       
 A_FIELDTYPE_TAB    IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_FIELDNAMES_TAB   IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_FIELDVALUES_TAB  IN     UNAPIGEN.VC40_TABLE_TYPE,  
 A_NR_OF_ROWS       IN     NUMBER,                    
 A_MODIFY_REASON    IN     VARCHAR2)       
RETURN NUMBER IS

L_SAMPLING_DATE        TIMESTAMP WITH TIME ZONE;
L_PREF_VALUE           VARCHAR2(40);
L_CREATE_IC            VARCHAR2(40);
L_CREATE_SC            VARCHAR2(40);
L_DATE_CURSOR          INTEGER;
L_SDGK_CURSOR          INTEGER;
L_PT_REC               UTPT%ROWTYPE;
L_EDIT_ALLOWED         CHAR(1);
L_VALID_CF             VARCHAR2(20);
L_DELAYED_TILL         TIMESTAMP WITH TIME ZONE;
L_TIMED_EVENT_TP       VARCHAR2(255);
L_REF_DATE             TIMESTAMP WITH TIME ZONE;
L_LC                   VARCHAR2(2);
L_LC_VERSION           VARCHAR2(20);
L_SS                   VARCHAR2(2);
L_LOG_HS               CHAR(1);
L_LOG_HS_DETAILS       CHAR(1);
L_ALLOW_MODIFY         CHAR(1);
L_ACTIVE               CHAR(1);
L_SD_CLASS             VARCHAR2(2);
L_PT_VERSION           VARCHAR2(20);


CURSOR L_PTGK_CURSOR(C_PT_INHERIT_GK CHAR) IS
   SELECT A.GK, A.GKSEQ, A.VALUE
   FROM  UTGKSD B, UTPTGK A
   WHERE A.PT = A_PT
     AND A.VERSION = UNAPIGEN.USEVERSION('pt', A_PT, A_PT_VERSION)   
     AND A.GK = B.GK
     AND B.STRUCT_CREATED = '1'
     AND B.VERSION_IS_CURRENT = '1'
     AND B.VERSION = DECODE(A.GK_VERSION, NULL, B.VERSION, UNAPIGEN.USEVERSION('gkpt', A.GK, A.GK_VERSION))
     AND DECODE(C_PT_INHERIT_GK, '0',B.INHERIT_GK, C_PT_INHERIT_GK) = '1';

CURSOR L_OBJECTS_CURSOR (A_OBJECT_TYPE VARCHAR2) IS
   SELECT LOG_HS, LOG_HS_DETAILS
   FROM UTOBJECTS
   WHERE OBJECT=A_OBJECT_TYPE;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   
   
   
   
   
   
   

   
   IF A_PT IS NOT NULL THEN
      A_PT_VERSION := UNAPIGEN.VALIDATEVERSION('pt', A_PT, A_PT_VERSION);
   ELSE
      IF A_PT_VERSION IS NULL THEN
         A_PT_VERSION := UNVERSION.P_NO_VERSION;
      END IF;
   END IF;
   
   
   
   
   
   L_SQLERRM := '';
   IF A_REF_DATE IS NULL THEN
      L_REF_DATE := NULL;
      L_SAMPLING_DATE := NULL;
   ELSE
      L_SAMPLING_DATE := A_REF_DATE;
      L_REF_DATE := A_REF_DATE;
   END IF;

   
   
   
   
   IF NVL(A_SD, ' ') = ' ' THEN
      L_RET_CODE := GENERATESTUDYCODE(A_PT, A_PT_VERSION, L_REF_DATE, 
                                      A_FIELDTYPE_TAB, A_FIELDNAMES_TAB, A_FIELDVALUES_TAB, A_NR_OF_ROWS,
                                      A_SD, L_EDIT_ALLOWED, L_VALID_CF);
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
         RAISE STPERROR;
      END IF;
   END IF;

   
   
   
   
   
   
   
   
   L_PT_VERSION := A_PT_VERSION;
   L_RET_CODE := UNAPIAUT.GETSDAUTHORISATION(A_SD, L_PT_VERSION, L_LC, L_LC_VERSION, L_SS,
                                             L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS, L_LOG_HS_DETAILS);
   IF L_RET_CODE <> UNAPIGEN.DBERR_NOOBJECT  THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SDALREADYEXIST;
      RAISE STPERROR;
   END IF;

   
   
   
   
   
   
   
   

   IF NVL(A_PT, ' ') <> ' ' THEN

      BEGIN
         SELECT *
         INTO L_PT_REC
         FROM UTPT
         WHERE PT = A_PT
         AND VERSION = A_PT_VERSION;

      EXCEPTION
      WHEN NO_DATA_FOUND THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
         RAISE STPERROR;
      END;

   END IF;

   
   
   
   L_CREATE_SC := A_CREATE_SC;
   IF NVL(L_CREATE_SC, ' ') = ' ' THEN
      
      
      L_RET_CODE := GETPREFVALUE(UNAPIGEN.P_CURRENT_UP, A_USERID, 'sdCreateSc',
                                 L_PREF_VALUE);
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
         RAISE STPERROR;
      END IF;
      L_CREATE_SC := L_PREF_VALUE;
   END IF;
   IF NVL(L_CREATE_SC, 'ON STUDY CREATION') = 'WHEN INFO AVAILABLE' THEN
      L_SD_CLASS := '1';
   ELSIF NVL(A_PT, ' ') <> ' ' THEN 
      L_SD_CLASS := L_PT_REC.PT_CLASS ;
   ELSE
      L_SD_CLASS := NULL;    
   END IF;

   
   
   
   IF NVL(A_PT, ' ') <> ' ' THEN

      INSERT INTO UTSD(SD, PT, PT_VERSION, DESCRIPTION, 
                       CREATION_DATE, CREATION_DATE_TZ, CREATED_BY,
                       LABEL_FORMAT, DESCR_DOC, DESCR_DOC_VERSION,
                       LOG_HS, LOG_HS_DETAILS, ALLOW_MODIFY,
                       ACTIVE, 
                       LC, LC_VERSION, SD_CLASS)
      VALUES(A_SD, A_PT, L_PT_REC.VERSION, L_PT_REC.DESCRIPTION, 
             CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NVL(A_USERID,UNAPIGEN.P_USER),
             L_PT_REC.LABEL_FORMAT, L_PT_REC.DESCR_DOC, L_PT_REC.DESCR_DOC_VERSION, 
             L_LOG_HS, L_LOG_HS_DETAILS, '#',
             '0', 
             L_PT_REC.SD_LC, UNAPIGEN.USEVERSION('lc', L_PT_REC.SD_LC, L_PT_REC.SD_LC_VERSION), L_SD_CLASS);

      UPDATE UTPT
      SET LAST_SCHED = L_REF_DATE, 
              LAST_SCHED_TZ = DECODE(L_REF_DATE, LAST_SCHED_TZ, LAST_SCHED_TZ, L_REF_DATE) 
      WHERE PT = A_PT;

   ELSE

      INSERT INTO UTSD(SD, CREATION_DATE, CREATION_DATE_TZ, CREATED_BY,
                       LOG_HS, LOG_HS_DETAILS, ALLOW_MODIFY, ACTIVE, LC, LC_VERSION, SD_CLASS)
      VALUES (A_SD,  CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NVL(A_USERID,UNAPIGEN.P_USER),
              L_LOG_HS, L_LOG_HS_DETAILS, '#', '0', '', '', L_SD_CLASS);
   END IF;

   
   
   
   L_EVENT_TP := 'StudyPlanned';                                                      
   L_EV_SEQ_NR := -1;
   L_EV_DETAILS := 'pt_version=' || A_PT_VERSION || 
                   '#ss_to=@P';      
   L_RESULT := UNAPIEV.INSERTEVENT('PlanStudy', UNAPIGEN.P_EVMGR_NAME, 'sd',
                                   A_SD, '', '', '', L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   INSERT INTO UTSDHS(SD, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
   VALUES(A_SD, NVL(A_USERID, UNAPIGEN.P_USER), UNAPIGEN.SQLUSERDESCRIPTION(NVL(A_USERID, UNAPIGEN.P_USER)), 
          L_EVENT_TP, 'study "'||A_SD||'" is planned.', 
          CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);

   
   
   
   
   
   
   
   
   
   IF NVL(A_PT, ' ') <> ' ' THEN
      IF NVL(L_PT_REC.INHERIT_AU, '0') = '1' THEN
         INSERT INTO UTSDAU
         (SD, AU, AU_VERSION, AUSEQ, VALUE)
         SELECT A_SD, A.AU, '' B_VERSION, A.AUSEQ, A.VALUE
         FROM UTAU B, UTPTAU A
         WHERE PT = A_PT
         AND A.VERSION = A_PT_VERSION
         AND A.AU = B.AU
         AND UNAPIGEN.USEVERSION('au', A.AU, A.AU_VERSION) = B.VERSION;
      ELSE
         INSERT INTO UTSDAU
         (SD, AU, AU_VERSION, AUSEQ, VALUE)
         SELECT A_SD, A.AU, '' B_VERSION, A.AUSEQ, A.VALUE
         FROM UTAU B, UTPTAU A
         WHERE PT = A_PT
         AND A.VERSION = A_PT_VERSION
         AND A.AU = B.AU
         AND UNAPIGEN.USEVERSION('au', A.AU, A.AU_VERSION) = B.VERSION
         AND B.INHERIT_AU = '1';      
      END IF;
      
      
      
      L_CREATE_IC := A_CREATE_IC;
      IF NVL(L_CREATE_IC, ' ') = ' ' THEN
         
         
         L_RET_CODE := GETPREFVALUE(UNAPIGEN.P_CURRENT_UP, A_USERID, 'sdCreateIc',
                                    L_PREF_VALUE);
         IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
            UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
            RAISE STPERROR;
         END IF;
         L_CREATE_IC := L_PREF_VALUE;
      END IF;

      IF NVL(L_CREATE_IC, 'ON STUDY CREATION') = 'ON STUDY CREATION' THEN
         L_RET_CODE := UNAPISD.CREATESDINFODETAILS(A_PT, A_PT_VERSION, A_SD,
                                        UNAPIGEN.PERFORM_FREQ_FILTERING,
                                        L_REF_DATE, A_MODIFY_REASON);
         IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
            UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
            RAISE STPERROR;
         END IF;
      END IF;

      
      
      
      












      
      L_SDGK_CURSOR := DBMS_SQL.OPEN_CURSOR;
      FOR L_PTGK_REC IN L_PTGK_CURSOR(NVL(L_PT_REC.INHERIT_GK, '0')) LOOP
         BEGIN
            
            INSERT INTO UTSDGK(SD, GK, GKSEQ, VALUE)
            VALUES(A_SD, L_PTGK_REC.GK, L_PTGK_REC.GKSEQ, L_PTGK_REC.VALUE);

            IF L_PTGK_REC.VALUE IS NOT NULL THEN
               L_SQL_STRING := 'INSERT INTO utsdgk' || L_PTGK_REC.GK ||
                               '(sd, ' || L_PTGK_REC.GK || ') VALUES (:a_sd, :a_gk)';                               
               DBMS_SQL.PARSE(L_SDGK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
               DBMS_SQL.BIND_VARIABLE(L_SDGK_CURSOR, ':a_sd', A_SD, 20);
               DBMS_SQL.BIND_VARIABLE(L_SDGK_CURSOR, ':a_gk', L_PTGK_REC.VALUE, 40);
               L_RESULT := DBMS_SQL.EXECUTE(L_SDGK_CURSOR);

               IF L_RESULT = 0 THEN
                  UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NORECORDS;
                  RAISE STPERROR;
               END IF;
            END IF;
         EXCEPTION
         WHEN DUP_VAL_ON_INDEX THEN
            
            
            NULL;
         END;
      END LOOP;
      DBMS_SQL.CLOSE_CURSOR(L_SDGK_CURSOR);

   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('PlanStudy', SQLERRM);
   
   ELSIF L_SQLERRM IS NOT NULL THEN
   
      UNAPIGEN.LOGERROR('PlanStudy', L_SQLERRM);   
   END IF;
   IF DBMS_SQL.IS_OPEN(L_DATE_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_DATE_CURSOR);
   END IF;
   IF DBMS_SQL.IS_OPEN(L_SDGK_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_SDGK_CURSOR);
   END IF;
   IF L_OBJECTS_CURSOR%ISOPEN THEN
      CLOSE L_OBJECTS_CURSOR;
   END IF;   
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'PlanStudy'));
END PLANSTUDY;

FUNCTION GENERATESDSAMPLECODE
(A_PT               IN     VARCHAR2,                  
 A_PT_VERSION       IN OUT VARCHAR2,                  
 A_REF_DATE         IN     DATE,                      
 A_SD               IN     VARCHAR2,                  
 A_CSNODE           IN     NUMBER,                    
 A_TPNODE           IN     NUMBER,                    
 A_SEQ              IN     NUMBER,                    
 A_ST               IN     VARCHAR2,                  
 A_ST_VERSION       IN OUT VARCHAR2,                  
 A_FIELDTYPE_TAB    IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_FIELDNAMES_TAB   IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_FIELDVALUES_TAB  IN     UNAPIGEN.VC40_TABLE_TYPE,  
 A_NR_OF_ROWS       IN     NUMBER,                    
 A_SC               OUT    VARCHAR2,                  
 A_EDIT_ALLOWED     OUT    CHAR,                      
 A_VALID_CF         OUT    VARCHAR2)                  
RETURN NUMBER IS

L_SC_UC                 VARCHAR2(20);
L_SC_UC_VERSION         VARCHAR2(20);
L_NEXT_VAL              VARCHAR2(255);
L_UC_STRUCTURE          VARCHAR2(255);
L_POS                   NUMBER;
L_FIELDTYPE_TAB         UNAPIGEN.VC20_TABLE_TYPE;
L_FIELDNAMES_TAB        UNAPIGEN.VC40_TABLE_TYPE;
L_FIELDVALUES_TAB       UNAPIGEN.VC40_TABLE_TYPE;
L_NR_OF_ROWS            NUMBER;

L_CS                    VARCHAR2(20);
L_TP                    NUMBER;
L_TP_UNIT               VARCHAR2(20);
L_ST_IN_FIELDS          BOOLEAN;
L_ST_VERSION_IN_FIELDS  BOOLEAN;
L_PT_IN_FIELDS          BOOLEAN;
L_PT_VERSION_IN_FIELDS  BOOLEAN;
L_SD_IN_FIELDS          BOOLEAN;

CURSOR L_CELL_CURSOR IS
SELECT A.CS, B.TP, B.TP_UNIT 
FROM UTSDCS A, UTSDTP B
WHERE A.CSNODE = A_CSNODE
  AND A.SD = A_SD
  AND B.SD = A_SD
  AND B.TPNODE = A_TPNODE;

CURSOR L_SCUC_CURSOR(C_SD         VARCHAR2,
                     C_PT         VARCHAR2, 
                     C_PT_VERSION VARCHAR2,
                     C_ST         VARCHAR2, 
                     C_SEQ        NUMBER,
                     C_CS         VARCHAR2,
                     C_CSNODE     NUMBER,
                     C_TP         VARCHAR2,
                     C_TP_UNIT    VARCHAR2)
IS
  SELECT A.SC_UC, A.SC_UC_VERSION
  FROM  UTPTCELLST A
  WHERE A.PT = C_PT
    AND A.VERSION = C_PT_VERSION
    AND A.ST = C_ST
    AND A.SEQ = C_SEQ
    AND A.PTROW IN 
       (SELECT DISTINCT B.PTROW 
        FROM UTSDCSCN C, UTPTCSCN B 
        WHERE B.PT = C_PT
          AND B.VERSION = C_PT_VERSION
          AND B.CS = C_CS
          AND C.SD = C_SD
          AND C.CSNODE = C_CSNODE
          AND C.CS = C_CS
          AND C.CS = B.CS
          AND C.CN = B.CN
          AND C.CNSEQ = B.CNSEQ
          AND C.VALUE = B.VALUE)
    AND A.PTCOLUMN IN 
       (SELECT B.PTCOLUMN 
        FROM UTPTTP B 
        WHERE B.PT = C_PT
          AND B.VERSION = C_PT_VERSION
          AND B.TP    = C_TP
          AND B.TP_UNIT = C_TP_UNIT);

BEGIN
   
   L_SQLERRM := NULL;
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   
   A_PT_VERSION := UNAPIGEN.VALIDATEVERSION('pt', A_PT, A_PT_VERSION);
   
   A_ST_VERSION := UNAPIGEN.VALIDATEVERSION('st', A_ST, A_ST_VERSION);

   
   
   
    IF NVL(A_PT, ' ') <> ' ' AND A_SEQ > 0 THEN

        OPEN L_CELL_CURSOR;
        FETCH L_CELL_CURSOR 
        INTO L_CS, L_TP, L_TP_UNIT;
        IF L_CELL_CURSOR%NOTFOUND THEN
           L_SQLERRM := 'No object in sdtp and sdcs while searching with sd='||A_SD||'#csnode='||A_CSNODE||
                        '#tpnode='||A_TPNODE;
           UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
           RAISE STPERROR;           
        END IF;
        CLOSE L_CELL_CURSOR;
        
        OPEN L_SCUC_CURSOR(A_SD, A_PT, A_PT_VERSION, A_ST, A_SEQ, L_CS, A_CSNODE, L_TP, L_TP_UNIT);
        FETCH L_SCUC_CURSOR
        INTO L_SC_UC, L_SC_UC_VERSION;
        IF L_SCUC_CURSOR%NOTFOUND THEN
           L_SQLERRM := 'No object in ptcellst while searching sc_uc for pt='||A_PT||'#pt_version='||A_PT_VERSION||
                        '#st='||A_ST||'#seq='||A_SEQ||
                        '#cs='||L_CS||'#tp='||L_TP||'#tp_unit='||L_TP_UNIT;
           UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
           RAISE STPERROR;           
        END IF;
        CLOSE L_SCUC_CURSOR;

   END IF;
   
   
   
   
   
   IF NVL(L_SC_UC, ' ') = ' ' THEN
      BEGIN
         SELECT SC_UC, SC_UC_VERSION
         INTO L_SC_UC, L_SC_UC_VERSION
         FROM UTST
         WHERE ST = A_ST
         AND VERSION = A_ST_VERSION;
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
         L_SQLERRM := 'No object for st='||A_ST||'#st_version='||A_ST_VERSION;
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
         RAISE STPERROR;
      END;
   END IF;

   
   
   
   
   IF NVL(L_SC_UC, ' ') = ' ' THEN
      BEGIN
         SELECT UC, VERSION
         INTO L_SC_UC, L_SC_UC_VERSION
         FROM UTUC
         WHERE DEF_MASK_FOR = 'sc';

      EXCEPTION
      WHEN NO_DATA_FOUND THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NODFLTMASKFORSC;
         RAISE STPERROR;
      WHEN TOO_MANY_ROWS THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_MULTDEFMASKFORSC;
         RAISE STPERROR;
      END;
   END IF;

   
   
   
   L_ST_IN_FIELDS := FALSE;
   L_ST_VERSION_IN_FIELDS := FALSE;
   L_PT_IN_FIELDS := FALSE;
   L_PT_VERSION_IN_FIELDS := FALSE;
   L_SD_IN_FIELDS := FALSE;
   IF (A_NR_OF_ROWS > 0) THEN
      FOR L_I IN 1..A_NR_OF_ROWS LOOP
         L_FIELDTYPE_TAB(L_I) := A_FIELDTYPE_TAB(L_I);
         L_FIELDNAMES_TAB(L_I) :=  A_FIELDNAMES_TAB(L_I);
         L_FIELDVALUES_TAB(L_I) :=  A_FIELDVALUES_TAB(L_I);
         IF L_FIELDTYPE_TAB(L_I) = 'st' AND L_FIELDNAMES_TAB(L_I) = 'st' THEN
            L_ST_IN_FIELDS := TRUE;
         END IF;
         IF L_FIELDTYPE_TAB(L_I) = 'st' AND L_FIELDNAMES_TAB(L_I) = 'st_version' THEN
            L_ST_VERSION_IN_FIELDS := TRUE;
         END IF;
         IF L_FIELDTYPE_TAB(L_I) = 'pt' AND L_FIELDNAMES_TAB(L_I) = 'pt' THEN
            L_PT_IN_FIELDS := TRUE;
         END IF;
         IF L_FIELDTYPE_TAB(L_I) = 'pt' AND L_FIELDNAMES_TAB(L_I) = 'pt_version' THEN
            L_PT_VERSION_IN_FIELDS := TRUE;
         END IF;
         IF L_FIELDTYPE_TAB(L_I) = 'sd' AND L_FIELDNAMES_TAB(L_I) = 'sd' THEN
            L_SD_IN_FIELDS := TRUE;
         END IF;
      END LOOP  ;
   END IF ;
   L_NR_OF_ROWS :=   NVL(A_NR_OF_ROWS, 0);
   IF NOT L_ST_IN_FIELDS THEN
      L_NR_OF_ROWS :=   L_NR_OF_ROWS +1;
      L_FIELDTYPE_TAB (L_NR_OF_ROWS) :=  'st';
      L_FIELDNAMES_TAB (L_NR_OF_ROWS) :=  'st';
      L_FIELDVALUES_TAB(L_NR_OF_ROWS) :=  A_ST;
   END IF;
   IF NOT L_ST_VERSION_IN_FIELDS THEN
      L_NR_OF_ROWS :=   L_NR_OF_ROWS +1;
      L_FIELDTYPE_TAB (L_NR_OF_ROWS) :=  'st';
      L_FIELDNAMES_TAB (L_NR_OF_ROWS) :=  'st_version';
      L_FIELDVALUES_TAB(L_NR_OF_ROWS) :=  A_ST_VERSION;
   END IF;
   IF NOT L_PT_IN_FIELDS THEN
      L_NR_OF_ROWS :=   L_NR_OF_ROWS +1;
      L_FIELDTYPE_TAB (L_NR_OF_ROWS) :=  'pt';
      L_FIELDNAMES_TAB (L_NR_OF_ROWS) :=  'pt';
      L_FIELDVALUES_TAB(L_NR_OF_ROWS) :=  A_PT;
   END IF;
   IF NOT L_PT_VERSION_IN_FIELDS THEN
      L_NR_OF_ROWS :=   L_NR_OF_ROWS +1;
      L_FIELDTYPE_TAB (L_NR_OF_ROWS) :=  'pt';
      L_FIELDNAMES_TAB (L_NR_OF_ROWS) :=  'pt_version';
      L_FIELDVALUES_TAB(L_NR_OF_ROWS) :=  A_PT_VERSION;
   END IF;
   IF NOT L_SD_IN_FIELDS THEN
      L_NR_OF_ROWS :=   L_NR_OF_ROWS +1;
      L_FIELDTYPE_TAB (L_NR_OF_ROWS) :=  'sd';
      L_FIELDNAMES_TAB (L_NR_OF_ROWS) :=  'sd';
      L_FIELDVALUES_TAB(L_NR_OF_ROWS) :=  A_SD;
   END IF;
   L_RET_CODE := UNAPIUC.CREATENEXTUNIQUECODEVALUE(L_SC_UC, L_FIELDTYPE_TAB, L_FIELDNAMES_TAB, L_FIELDVALUES_TAB, L_NR_OF_ROWS,
                                                 A_REF_DATE, A_SC, A_EDIT_ALLOWED, A_VALID_CF); 

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
     UNAPIGEN.LOGERROR('GenerateSdSampleCode', SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
     UNAPIGEN.LOGERROR('GenerateSdSampleCode', L_SQLERRM);   
   END IF;
   IF L_SCUC_CURSOR%ISOPEN THEN
      CLOSE L_SCUC_CURSOR;
   END IF;
   IF L_CELL_CURSOR%ISOPEN THEN
      CLOSE L_CELL_CURSOR;
   END IF;   
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'GenerateSdSampleCode'));   
END GENERATESDSAMPLECODE;   

FUNCTION GENERATESTUDYCODE
(A_PT               IN     VARCHAR2,                  
 A_PT_VERSION       IN OUT VARCHAR2,                  
 A_REF_DATE         IN     DATE,                      
 A_FIELDTYPE_TAB    IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_FIELDNAMES_TAB   IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_FIELDVALUES_TAB  IN     UNAPIGEN.VC40_TABLE_TYPE,  
 A_NR_OF_ROWS       IN     NUMBER,                    
 A_SD               OUT    VARCHAR2,                  
 A_EDIT_ALLOWED     OUT    CHAR,                      
 A_VALID_CF         OUT    VARCHAR2)                  
RETURN NUMBER IS

L_SD_UC                VARCHAR2(20);
L_NEXT_VAL             VARCHAR2(255);
L_EDIT_ALLOWED         CHAR(1);
L_VALID_CF             VARCHAR2(20);
L_FIELDTYPE_TAB       UNAPIGEN.VC20_TABLE_TYPE;
L_FIELDNAMES_TAB      UNAPIGEN.VC40_TABLE_TYPE;
L_FIELDVALUES_TAB     UNAPIGEN.VC40_TABLE_TYPE;
L_NR_OF_ROWS          NUMBER;

CURSOR L_SD_UC_CURSOR IS
   SELECT SD_UC
   FROM UTPT
   WHERE PT = A_PT
   AND VERSION = A_PT_VERSION;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   
   A_PT_VERSION := UNAPIGEN.VALIDATEVERSION('pt', A_PT, A_PT_VERSION);

   
   
   
   IF NVL(A_PT, ' ') <> ' ' THEN
      OPEN L_SD_UC_CURSOR;
      FETCH L_SD_UC_CURSOR INTO L_SD_UC;
      IF L_SD_UC_CURSOR%NOTFOUND THEN
         CLOSE L_SD_UC_CURSOR;
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
         RAISE STPERROR;
      END IF;
      CLOSE L_SD_UC_CURSOR;
   END IF;

   
   
   
   
   IF NVL(L_SD_UC, ' ') = ' ' THEN
      BEGIN
         SELECT UC
         INTO L_SD_UC
         FROM UTUC
         WHERE DEF_MASK_FOR = 'sd';

      EXCEPTION
      WHEN NO_DATA_FOUND THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NODFLTMASKFORSD;
         RAISE STPERROR;
      WHEN TOO_MANY_ROWS THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_MULTDEFMASKFORSD;
         RAISE STPERROR;
      END;
   END IF;

   
   
   
   
   IF (A_NR_OF_ROWS > 0) THEN
      FOR L_I IN 1..A_NR_OF_ROWS LOOP
         L_FIELDTYPE_TAB(L_I) := A_FIELDTYPE_TAB(L_I);
         L_FIELDNAMES_TAB(L_I) :=  A_FIELDNAMES_TAB(L_I);
         L_FIELDVALUES_TAB(L_I) :=  A_FIELDVALUES_TAB(L_I);
      END LOOP  ;
   END IF ;
   L_FIELDTYPE_TAB(NVL(A_NR_OF_ROWS, 0) +1) := 'pt';
   L_FIELDNAMES_TAB (NVL(A_NR_OF_ROWS, 0) +1) :=  'pt';
   L_FIELDVALUES_TAB(NVL(A_NR_OF_ROWS, 0) +1) :=  A_PT;
   L_FIELDTYPE_TAB(NVL(A_NR_OF_ROWS, 0) +2) := 'pt';
   L_FIELDNAMES_TAB (NVL(A_NR_OF_ROWS, 0) +2) :=  'pt_version';
   L_FIELDVALUES_TAB(NVL(A_NR_OF_ROWS, 0) +2) :=  A_PT_VERSION;
   L_NR_OF_ROWS :=   NVL(A_NR_OF_ROWS, 0) +2;
 
   L_RET_CODE := UNAPIUC.CREATENEXTUNIQUECODEVALUE( L_SD_UC, L_FIELDTYPE_TAB, L_FIELDNAMES_TAB, L_FIELDVALUES_TAB, L_NR_OF_ROWS,
      A_REF_DATE, A_SD, A_EDIT_ALLOWED, A_VALID_CF); 

    IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
     UNAPIGEN.LOGERROR('GenerateStudyCode', SQLERRM);
   END IF;
   IF L_SD_UC_CURSOR%ISOPEN THEN
      CLOSE L_SD_UC_CURSOR;
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'GenerateStudyCode'));
END GENERATESTUDYCODE;

FUNCTION CREATESDSAMPLE
(A_PT               IN     VARCHAR2,                    
 A_PT_VERSION       IN OUT VARCHAR2,                    
 A_SD               IN     VARCHAR2,                    
 A_CSNODE           IN     NUMBER,                      
 A_TPNODE           IN     NUMBER,                      
 A_SEQ              IN     NUMBER,                      
 A_ST               IN     VARCHAR2,                    
 A_ST_VERSION       IN OUT VARCHAR2,                    
 A_SC               IN OUT VARCHAR2,                    
 A_REF_DATE         IN     DATE,                        
 A_DELAY            IN     NUMBER,                      
 A_DELAY_UNIT       IN     VARCHAR2,                    
 A_USERID           IN     VARCHAR2,                    
 A_ADD_STPP         IN     CHAR,                        
 A_ADD_STIP         IN     CHAR,                        
 A_PP               IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_PP_VERSION       IN OUT UNAPIGEN.VC20_TABLE_TYPE,    
 A_PP_KEY1          IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_PP_KEY2          IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_PP_KEY3          IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_PP_KEY4          IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_PP_KEY5          IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_PP_NR_OF_ROWS    IN     NUMBER,                      
 A_IP               IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_IP_VERSION       IN OUT UNAPIGEN.VC20_TABLE_TYPE,    
 A_IP_NR_OF_ROWS    IN     NUMBER,                      
 A_FIELDTYPE_TAB    IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_FIELDNAMES_TAB   IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_FIELDVALUES_TAB  IN     UNAPIGEN.VC40_TABLE_TYPE,    
 A_FIELDNR_OF_ROWS  IN     NUMBER,                      
 A_MODIFY_REASON    IN     VARCHAR2)                    
RETURN NUMBER IS
BEGIN
   RETURN(UNAPISD2.CREATESDSAMPLE
                   (A_PT, A_PT_VERSION, A_SD, A_CSNODE, A_TPNODE, A_SEQ, A_ST, A_ST_VERSION, A_SC, 
                   A_REF_DATE, A_DELAY, A_DELAY_UNIT, A_USERID, A_ADD_STPP, A_ADD_STIP, A_PP, A_PP_VERSION, 
       A_PP_KEY1, A_PP_KEY2, A_PP_KEY3, A_PP_KEY4, A_PP_KEY5, A_PP_NR_OF_ROWS, A_IP, A_IP_VERSION, 
       A_IP_NR_OF_ROWS, A_FIELDTYPE_TAB, A_FIELDNAMES_TAB, A_FIELDVALUES_TAB, A_FIELDNR_OF_ROWS,
                   A_MODIFY_REASON));
END CREATESDSAMPLE;

FUNCTION GETSDSAMPLE
(A_SD                  OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SC                  OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_ST                  OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_ST_VERSION          OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_DESCRIPTION         OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_ASSIGN_DATE         OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_ASSIGNED_BY         OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SHELF_LIFE_VAL      OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_SHELF_LIFE_UNIT     OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SAMPLING_DATE       OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_CREATION_DATE       OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_CREATED_BY          OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_EXEC_START_DATE     OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_EXEC_END_DATE       OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_PRIORITY            OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_LABEL_FORMAT        OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_DESCR_DOC           OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_DESCR_DOC_VERSION   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_RQ                  OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_DATE1               OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_DATE2               OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_DATE3               OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_DATE4               OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_DATE5               OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_ALLOW_ANY_PP        OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_SC_CLASS            OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_LOG_HS              OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LOG_HS_DETAILS      OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ALLOW_MODIFY        OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_AR                  OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ACTIVE              OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LC                  OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_LC_VERSION          OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SS                  OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_NR_OF_ROWS          IN OUT  NUMBER,                    
 A_WHERE_CLAUSE        IN      VARCHAR2,                  
 A_NEXT_ROWS           IN      NUMBER)                    
RETURN NUMBER IS
BEGIN
   RETURN(UNAPISD2.GETSDSAMPLE
                   (A_SD, A_SC, A_ST, A_ST_VERSION, A_DESCRIPTION, A_ASSIGN_DATE,A_ASSIGNED_BY,
                    A_SHELF_LIFE_VAL, A_SHELF_LIFE_UNIT, A_SAMPLING_DATE, A_CREATION_DATE, A_CREATED_BY, 
                    A_EXEC_START_DATE, A_EXEC_END_DATE, A_PRIORITY, A_LABEL_FORMAT, A_DESCR_DOC,
                    A_DESCR_DOC_VERSION, A_RQ, A_DATE1, A_DATE2, A_DATE3, A_DATE4, A_DATE5,
                    A_ALLOW_ANY_PP, A_SC_CLASS, A_LOG_HS, A_LOG_HS_DETAILS, A_ALLOW_MODIFY, A_AR, 
                    A_ACTIVE, A_LC, A_LC_VERSION, A_SS,
                    A_NR_OF_ROWS, A_WHERE_CLAUSE, A_NEXT_ROWS));
END GETSDSAMPLE;

FUNCTION SAVESDSAMPLE
(A_SD               IN     VARCHAR2,                    
 A_SC               IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_ASSIGN_DATE      IN     UNAPIGEN.DATE_TABLE_TYPE,    
 A_ASSIGNED_BY      IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_NR_OF_ROWS       IN     NUMBER,                      
 A_MODIFY_REASON    IN     VARCHAR2)                    
RETURN NUMBER IS
BEGIN
   RETURN(UNAPISD2.SAVESDSAMPLE
                   (A_SD, A_SC, A_ASSIGN_DATE, A_ASSIGNED_BY,
                    A_NR_OF_ROWS, A_MODIFY_REASON));
END SAVESDSAMPLE;

FUNCTION SAVE1SDSAMPLE
(A_SD               IN     VARCHAR2,                    
 A_SC               IN     VARCHAR2,                    
 A_MODIFY_REASON    IN     VARCHAR2)                    
RETURN NUMBER IS
BEGIN
   RETURN(UNAPISD2.SAVE1SDSAMPLE
                   (A_SD, A_SC, 
                    A_MODIFY_REASON));
END SAVE1SDSAMPLE;

FUNCTION REMOVESDSAMPLE
(A_SD               IN     VARCHAR2,                    
 A_SC               IN     VARCHAR2,                    
 A_MODIFY_REASON    IN     VARCHAR2)                    
RETURN NUMBER IS
BEGIN
   RETURN(UNAPISD2.REMOVESDSAMPLE
                   (A_SD, A_SC, A_MODIFY_REASON));
END REMOVESDSAMPLE;

FUNCTION GETSDINFOCARD
(A_SD             OUT      UNAPIGEN.VC20_TABLE_TYPE,  
 A_IC             OUT      UNAPIGEN.VC20_TABLE_TYPE,  
 A_ICNODE         OUT      UNAPIGEN.LONG_TABLE_TYPE,  
 A_IP_VERSION     OUT      UNAPIGEN.VC20_TABLE_TYPE,  
 A_DESCRIPTION    OUT      UNAPIGEN.VC40_TABLE_TYPE,  
 A_WINSIZE_X      OUT      UNAPIGEN.NUM_TABLE_TYPE,   
 A_WINSIZE_Y      OUT      UNAPIGEN.NUM_TABLE_TYPE,   
 A_IS_PROTECTED   OUT      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_HIDDEN         OUT      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_MANUALLY_ADDED OUT      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NEXT_II        OUT      UNAPIGEN.VC20_TABLE_TYPE,  
 A_IC_CLASS       OUT      UNAPIGEN.VC2_TABLE_TYPE,   
 A_LOG_HS         OUT      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LOG_HS_DETAILS OUT      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ALLOW_MODIFY   OUT      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_AR             OUT      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ACTIVE         OUT      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LC             OUT      UNAPIGEN.VC2_TABLE_TYPE,   
 A_LC_VERSION     OUT      UNAPIGEN.VC20_TABLE_TYPE,  
 A_SS             OUT      UNAPIGEN.VC2_TABLE_TYPE,   
 A_NR_OF_ROWS     IN OUT   NUMBER,                    
 A_WHERE_CLAUSE   IN       VARCHAR2)                  
RETURN NUMBER IS

BEGIN
   RETURN(UNAPISDIC.GETSDINFOCARD(A_SD, A_IC, A_ICNODE,  A_IP_VERSION, A_DESCRIPTION, 
                                  A_WINSIZE_X, A_WINSIZE_Y, A_IS_PROTECTED,
                                  A_HIDDEN, A_MANUALLY_ADDED, A_NEXT_II, 
                                  A_IC_CLASS, A_LOG_HS, A_LOG_HS_DETAILS, A_ALLOW_MODIFY,
                                  A_AR, A_ACTIVE, A_LC, A_LC_VERSION, A_SS, A_NR_OF_ROWS,
                                   A_WHERE_CLAUSE));
NULL;
END GETSDINFOCARD;

FUNCTION GETSDINFOFIELD
(A_SD               OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_IC               OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_ICNODE           OUT    UNAPIGEN.LONG_TABLE_TYPE,    
 A_II               OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_IINODE           OUT    UNAPIGEN.LONG_TABLE_TYPE,    
 A_IE_VERSION       OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_IIVALUE          OUT    UNAPIGEN.VC2000_TABLE_TYPE,  
 A_POS_X            OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_POS_Y            OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_IS_PROTECTED     OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_MANDATORY        OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_HIDDEN           OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_DSP_TITLE        OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_DSP_LEN          OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_DSP_TP           OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_DSP_ROWS         OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_II_CLASS         OUT    UNAPIGEN.VC2_TABLE_TYPE,     
 A_LOG_HS           OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_LOG_HS_DETAILS   OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_ALLOW_MODIFY     OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_AR               OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_ACTIVE           OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_LC               OUT    UNAPIGEN.VC2_TABLE_TYPE,     
 A_LC_VERSION       OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_SS               OUT    UNAPIGEN.VC2_TABLE_TYPE,     
 A_NR_OF_ROWS       IN OUT NUMBER,                      
 A_WHERE_CLAUSE     IN     VARCHAR2,                    
 A_NEXT_ROWS        IN     NUMBER)                      
RETURN NUMBER IS

BEGIN
   RETURN(UNAPISDIC.GETSDINFOFIELD(A_SD, A_IC, A_ICNODE, A_II, A_IINODE, A_IE_VERSION,
                                   A_IIVALUE, A_POS_X, A_POS_Y,
                                   A_IS_PROTECTED, A_MANDATORY,
                                   A_HIDDEN, A_DSP_TITLE, A_DSP_LEN,
                                   A_DSP_TP, A_DSP_ROWS,
                                   A_II_CLASS, A_LOG_HS, A_LOG_HS_DETAILS, A_ALLOW_MODIFY,
                                   A_AR, A_ACTIVE, A_LC, A_LC_VERSION, A_SS, A_NR_OF_ROWS,
                                   A_WHERE_CLAUSE, A_NEXT_ROWS));
END GETSDINFOFIELD;

FUNCTION SAVESDINFOCARD
(A_SD             IN      UNAPIGEN.VC20_TABLE_TYPE,  
 A_IC             IN      UNAPIGEN.VC20_TABLE_TYPE,  
 A_ICNODE         IN OUT  UNAPIGEN.LONG_TABLE_TYPE,  
 A_IP_VERSION     IN      UNAPIGEN.VC20_TABLE_TYPE,  
 A_DESCRIPTION    IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_WINSIZE_X      IN      UNAPIGEN.NUM_TABLE_TYPE,   
 A_WINSIZE_Y      IN      UNAPIGEN.NUM_TABLE_TYPE,   
 A_IS_PROTECTED   IN      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_HIDDEN         IN      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_MANUALLY_ADDED IN      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NEXT_II        IN      UNAPIGEN.VC20_TABLE_TYPE,  
 A_IC_CLASS       IN      UNAPIGEN.VC2_TABLE_TYPE,   
 A_LOG_HS         IN      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LOG_HS_DETAILS IN      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LC             IN      UNAPIGEN.VC2_TABLE_TYPE,   
 A_LC_VERSION     IN      UNAPIGEN.VC20_TABLE_TYPE,  
 A_MODIFY_FLAG    IN OUT  UNAPIGEN.NUM_TABLE_TYPE,   
 A_NR_OF_ROWS     IN      NUMBER,                    
 A_MODIFY_REASON  IN      VARCHAR2)                  
RETURN NUMBER IS

BEGIN
   RETURN(UNAPISDIC.SAVESDINFOCARD(A_SD, A_IC, A_ICNODE, A_IP_VERSION, A_DESCRIPTION, 
                                  A_WINSIZE_X, A_WINSIZE_Y, A_IS_PROTECTED,
                                  A_HIDDEN, A_MANUALLY_ADDED, A_NEXT_II, 
                                  A_IC_CLASS, A_LOG_HS, A_LOG_HS_DETAILS, A_LC,A_LC_VERSION, A_MODIFY_FLAG,
                                  A_NR_OF_ROWS, A_MODIFY_REASON));
END SAVESDINFOCARD;

FUNCTION SAVESDINFOFIELD
(A_SD               IN       UNAPIGEN.VC20_TABLE_TYPE,    
 A_IC               IN       UNAPIGEN.VC20_TABLE_TYPE,    
 A_ICNODE           IN OUT   UNAPIGEN.LONG_TABLE_TYPE,    
 A_II               IN       UNAPIGEN.VC20_TABLE_TYPE,    
 A_IINODE           IN OUT   UNAPIGEN.LONG_TABLE_TYPE,    
 A_IE_VERSION       IN       UNAPIGEN.VC20_TABLE_TYPE,    
 A_IIVALUE          IN       UNAPIGEN.VC2000_TABLE_TYPE,  
 A_POS_X            IN       UNAPIGEN.NUM_TABLE_TYPE,     
 A_POS_Y            IN       UNAPIGEN.NUM_TABLE_TYPE,     
 A_IS_PROTECTED     IN       UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_MANDATORY        IN       UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_HIDDEN           IN       UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_DSP_TITLE        IN       UNAPIGEN.VC40_TABLE_TYPE,    
 A_DSP_LEN          IN       UNAPIGEN.NUM_TABLE_TYPE,     
 A_DSP_TP           IN       UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_DSP_ROWS         IN       UNAPIGEN.NUM_TABLE_TYPE,     
 A_II_CLASS         IN       UNAPIGEN.VC2_TABLE_TYPE,     
 A_LOG_HS           IN       UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_LOG_HS_DETAILS   IN       UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_LC               IN       UNAPIGEN.VC2_TABLE_TYPE,     
 A_LC_VERSION       IN       UNAPIGEN.VC20_TABLE_TYPE,    
 A_MODIFY_FLAG      IN OUT   UNAPIGEN.NUM_TABLE_TYPE,     
 A_NR_OF_ROWS       IN       NUMBER,                      
 A_MODIFY_REASON    IN       VARCHAR2)                    
RETURN NUMBER IS

BEGIN
   RETURN(UNAPISDIC.SAVESDINFOFIELD(A_SD, A_IC, A_ICNODE, A_II, A_IINODE, A_IE_VERSION,
                                   A_IIVALUE, A_POS_X, A_POS_Y,
                                   A_IS_PROTECTED, A_MANDATORY,
                                   A_HIDDEN, A_DSP_TITLE, A_DSP_LEN,
                                   A_DSP_TP, A_DSP_ROWS,
                                   A_II_CLASS, A_LOG_HS, A_LOG_HS_DETAILS, A_LC, A_LC_VERSION, 
                                   A_MODIFY_FLAG, A_NR_OF_ROWS,
                                   A_MODIFY_REASON));
END SAVESDINFOFIELD;

FUNCTION SAVESDIIVALUE
(A_SD               IN       UNAPIGEN.VC20_TABLE_TYPE,    
 A_IC               IN       UNAPIGEN.VC20_TABLE_TYPE,    
 A_ICNODE           IN OUT   UNAPIGEN.LONG_TABLE_TYPE,    
 A_II               IN       UNAPIGEN.VC20_TABLE_TYPE,    
 A_IINODE           IN OUT   UNAPIGEN.LONG_TABLE_TYPE,    
 A_IIVALUE          IN       UNAPIGEN.VC2000_TABLE_TYPE,  
 A_MODIFY_FLAG      IN OUT   UNAPIGEN.NUM_TABLE_TYPE,     
 A_NR_OF_ROWS       IN       NUMBER,                      
 A_MODIFY_REASON    IN       VARCHAR2)                    
RETURN NUMBER IS

BEGIN
   RETURN(UNAPISDIC.SAVESDIIVALUE(A_SD, A_IC, A_ICNODE, A_II, A_IINODE, 
                                   A_IIVALUE, A_MODIFY_FLAG, A_NR_OF_ROWS,
                                   A_MODIFY_REASON));
END SAVESDIIVALUE;

FUNCTION CREATESDINFODETAILS
(A_PT             IN        VARCHAR2,                 
 A_PT_VERSION     IN OUT    VARCHAR2,                 
 A_SD             IN        VARCHAR2,                 
 A_FILTER_FREQ    IN        CHAR,                     
 A_REF_DATE       IN        DATE,                     
 A_MODIFY_REASON  IN        VARCHAR2)                 
RETURN NUMBER IS

BEGIN
   RETURN(UNAPISDIC.CREATESDINFODETAILS(A_PT, A_PT_VERSION, A_SD, A_FILTER_FREQ, A_REF_DATE, A_MODIFY_REASON));
END CREATESDINFODETAILS;

FUNCTION ADDSDINFODETAILS
(A_PT             IN        VARCHAR2,                 
 A_PT_VERSION     IN        VARCHAR2,                 
 A_SD             IN        VARCHAR2,                 
 A_IP             IN        VARCHAR2,                 
 A_IP_VERSION     IN        VARCHAR2,                 
 A_SEQ            IN        NUMBER,                   
 A_MODIFY_REASON  IN        VARCHAR2)                 
RETURN NUMBER IS

BEGIN
   RETURN(UNAPISDIC.ADDSDINFODETAILS(A_PT, A_PT_VERSION, A_SD, A_IP, A_IP_VERSION, A_SEQ, A_MODIFY_REASON));
END ADDSDINFODETAILS;

FUNCTION CREATESDICDETAILS                            
(A_PT             IN        VARCHAR2,                 
 A_PT_VERSION     IN OUT    VARCHAR2,                 
 A_IP             IN        VARCHAR2,                 
 A_IP_VERSION     IN OUT    VARCHAR2,                 
 A_SEQ            IN        NUMBER,                   
 A_SD             IN        VARCHAR2,                 
 A_ICNODE         IN        NUMBER,                   
 A_MODIFY_REASON  IN        VARCHAR2)                 
RETURN NUMBER IS
BEGIN
   RETURN(UNAPISDIC.CREATESDICDETAILS(A_PT, A_PT_VERSION, A_IP, A_IP_VERSION, A_SEQ, A_SD,
                                      A_ICNODE, A_MODIFY_REASON));
END CREATESDICDETAILS;

FUNCTION ADDSDICDETAILS
(A_PT             IN        VARCHAR2,                 
 A_PT_VERSION     IN        VARCHAR2,                 
 A_SD             IN        VARCHAR2,                 
 A_IC             IN        VARCHAR2,                 
 A_ICNODE         IN        NUMBER,                   
 A_IE             IN        VARCHAR2,                 
 A_IE_VERSION     IN        VARCHAR2,                 
 A_SEQ            IN        NUMBER,                   
 A_MODIFY_REASON  IN        VARCHAR2)                 
RETURN NUMBER IS

BEGIN
   RETURN(UNAPISDIC.ADDSDICDETAILS(A_PT, A_PT_VERSION, A_SD, A_IC, A_ICNODE,
                                   A_IE, A_IE_VERSION, A_SEQ, A_MODIFY_REASON));
END ADDSDICDETAILS;

FUNCTION INITSDINFOCARD
(A_IP              IN     VARCHAR2,                  
 A_IP_VERSION_IN   IN     VARCHAR2,                  
 A_SEQ             IN     NUMBER,                    
 A_PT              IN     VARCHAR2,                  
 A_PT_VERSION      IN     VARCHAR2,                  
 A_SD              IN     VARCHAR2,                  
 A_IP_VERSION      OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_DESCRIPTION     OUT    UNAPIGEN.VC40_TABLE_TYPE,  
 A_WINSIZE_X       OUT    UNAPIGEN.NUM_TABLE_TYPE,   
 A_WINSIZE_Y       OUT    UNAPIGEN.NUM_TABLE_TYPE,   
 A_IS_PROTECTED    OUT    UNAPIGEN.CHAR1_TABLE_TYPE ,
 A_HIDDEN          OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_MANUALLY_ADDED  OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NEXT_II         OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_IC_CLASS        OUT    UNAPIGEN.VC2_TABLE_TYPE,   
 A_LOG_HS          OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LOG_HS_DETAILS  OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LC              OUT    UNAPIGEN.VC2_TABLE_TYPE,   
 A_LC_VERSION      OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_NR_OF_ROWS      IN OUT NUMBER)                    
RETURN NUMBER IS
BEGIN
   RETURN(UNAPISDIC.INITSDINFOCARD(A_IP, A_IP_VERSION_IN, A_SEQ, A_PT, A_PT_VERSION, A_SD, A_IP_VERSION, A_DESCRIPTION, 
                                  A_WINSIZE_X, A_WINSIZE_Y, A_IS_PROTECTED,
                                  A_HIDDEN, A_MANUALLY_ADDED, A_NEXT_II, 
                                  A_IC_CLASS, A_LOG_HS, A_LOG_HS_DETAILS, A_LC, A_LC_VERSION, A_NR_OF_ROWS));
END INITSDINFOCARD;

FUNCTION INITSDICATTRIBUTE
(A_SD               IN     VARCHAR2,                  
 A_PT               IN     VARCHAR2,                  
 A_PT_VERSION       IN     VARCHAR2,                  
 A_IP               IN     VARCHAR2,                  
 A_IP_VERSION       IN     VARCHAR2,                  
 A_AU               OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_AU_VERSION       OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_VALUE            OUT    UNAPIGEN.VC40_TABLE_TYPE,  
 A_DESCRIPTION      OUT    UNAPIGEN.VC40_TABLE_TYPE,  
 A_IS_PROTECTED     OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_SINGLE_VALUED    OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NEW_VAL_ALLOWED  OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_STORE_DB         OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_VALUE_LIST_TP    OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_RUN_MODE         OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_SERVICE          OUT    UNAPIGEN.VC255_TABLE_TYPE, 
 A_CF_VALUE         OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_NR_OF_ROWS       IN OUT NUMBER)                    
RETURN NUMBER IS

BEGIN
   RETURN(UNAPISDIC.INITSDICATTRIBUTE(A_SD, A_PT,A_PT_VERSION,  A_IP, A_IP_VERSION, 
                                      A_AU, A_AU_VERSION, A_VALUE, A_DESCRIPTION,
                                      A_IS_PROTECTED, A_SINGLE_VALUED,
                                      A_NEW_VAL_ALLOWED, A_STORE_DB,
                                      A_VALUE_LIST_TP, A_RUN_MODE,
                                      A_SERVICE, A_CF_VALUE, A_NR_OF_ROWS));
END INITSDICATTRIBUTE;

FUNCTION INITSDICDETAILS
(A_IP              IN     VARCHAR2,                   
 A_IP_VERSION      IN OUT VARCHAR2,                   
 A_SD              IN     VARCHAR2,                   
 A_II              OUT    UNAPIGEN.VC20_TABLE_TYPE,   
 A_IE_VERSION      OUT    UNAPIGEN.VC20_TABLE_TYPE,   
 A_IIVALUE         OUT    UNAPIGEN.VC2000_TABLE_TYPE, 
 A_POS_X           OUT    UNAPIGEN.NUM_TABLE_TYPE,    
 A_POS_Y           OUT    UNAPIGEN.NUM_TABLE_TYPE,    
 A_IS_PROTECTED    OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_MANDATORY       OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_HIDDEN          OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_DSP_TITLE       OUT    UNAPIGEN.VC40_TABLE_TYPE,   
 A_DSP_LEN         OUT    UNAPIGEN.NUM_TABLE_TYPE,    
 A_DSP_TP          OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_DSP_ROWS        OUT    UNAPIGEN.NUM_TABLE_TYPE,    
 A_II_CLASS        OUT    UNAPIGEN.VC2_TABLE_TYPE,    
 A_LOG_HS          OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_LOG_HS_DETAILS  OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_LC              OUT    UNAPIGEN.VC2_TABLE_TYPE,    
 A_LC_VERSION      OUT    UNAPIGEN.VC20_TABLE_TYPE,   
 A_NR_OF_ROWS      IN OUT NUMBER,                     
 A_NEXT_ROWS       IN     NUMBER)                     
RETURN NUMBER IS

BEGIN
   RETURN(UNAPISDIC.INITSDICDETAILS(A_IP, A_IP_VERSION , A_SD, A_II, A_IE_VERSION, A_IIVALUE,
                                    A_POS_X, A_POS_Y,
                                    A_IS_PROTECTED, A_MANDATORY,
                                    A_HIDDEN, A_DSP_TITLE, A_DSP_LEN,
                                    A_DSP_TP, A_DSP_ROWS,
                                    A_II_CLASS, A_LOG_HS, A_LOG_HS_DETAILS, A_LC, A_LC_VERSION,
                                    A_NR_OF_ROWS,A_NEXT_ROWS));
END INITSDICDETAILS;

FUNCTION INITSDINFODETAILS
(A_PT             IN        VARCHAR2,                  
 A_PT_VERSION     IN OUT    VARCHAR2,                 
 A_SD             IN        VARCHAR2,                  
 A_FILTER_FREQ    IN        CHAR,                      
 A_REF_DATE       IN        DATE,                      
 A_IC             OUT       UNAPIGEN.VC20_TABLE_TYPE,  
 A_IP_VERSION     OUT       UNAPIGEN.VC20_TABLE_TYPE,  
 A_DESCRIPTION    OUT       UNAPIGEN.VC40_TABLE_TYPE,  
 A_WINSIZE_X      OUT       UNAPIGEN.NUM_TABLE_TYPE,   
 A_WINSIZE_Y      OUT       UNAPIGEN.NUM_TABLE_TYPE,   
 A_IS_PROTECTED   OUT       UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_HIDDEN         OUT       UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_MANUALLY_ADDED OUT       UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NEXT_II        OUT       UNAPIGEN.VC20_TABLE_TYPE,  
 A_IC_CLASS       OUT       UNAPIGEN.VC2_TABLE_TYPE,   
 A_LOG_HS         OUT       UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LOG_HS_DETAILS OUT       UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LC             OUT       UNAPIGEN.VC2_TABLE_TYPE,   
 A_LC_VERSION     OUT       UNAPIGEN.VC20_TABLE_TYPE,  
 A_NR_OF_ROWS     IN OUT    NUMBER)                    
RETURN NUMBER IS

BEGIN
   RETURN(UNAPISDIC.INITSDINFODETAILS(A_PT, A_PT_VERSION, A_SD, A_FILTER_FREQ, A_REF_DATE,
                                      A_IC, A_IP_VERSION, A_DESCRIPTION, A_WINSIZE_X, A_WINSIZE_Y,
                                      A_IS_PROTECTED, A_HIDDEN, A_MANUALLY_ADDED, A_NEXT_II, A_IC_CLASS,
                                      A_LOG_HS, A_LOG_HS_DETAILS, A_LC, A_LC_VERSION, A_NR_OF_ROWS));
END INITSDINFODETAILS;

FUNCTION GETSDICATTRIBUTE
(A_SD                 OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_IC                 OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_ICNODE             OUT    UNAPIGEN.LONG_TABLE_TYPE,  
 A_AU                 OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_AU_VERSION         OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_VALUE              OUT    UNAPIGEN.VC40_TABLE_TYPE,  
 A_DESCRIPTION        OUT    UNAPIGEN.VC40_TABLE_TYPE,  
 A_IS_PROTECTED       OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_SINGLE_VALUED      OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NEW_VAL_ALLOWED    OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_STORE_DB           OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_VALUE_LIST_TP      OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_RUN_MODE           OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_SERVICE            OUT    UNAPIGEN.VC255_TABLE_TYPE, 
 A_CF_VALUE           OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_NR_OF_ROWS         IN OUT NUMBER,                    
 A_WHERE_CLAUSE       IN     VARCHAR2)                  
RETURN NUMBER IS

BEGIN
   RETURN(UNAPISDIC2.GETSDICATTRIBUTE(A_SD, A_IC, A_ICNODE, 
                                      A_AU, A_AU_VERSION, A_VALUE, A_DESCRIPTION,
                                      A_IS_PROTECTED, A_SINGLE_VALUED,
                                      A_NEW_VAL_ALLOWED, A_STORE_DB,
                                      A_VALUE_LIST_TP, A_RUN_MODE,
                                      A_SERVICE, A_CF_VALUE, A_NR_OF_ROWS,
                                      A_WHERE_CLAUSE));
END GETSDICATTRIBUTE;

FUNCTION SAVESDICATTRIBUTE
(A_SD             IN        VARCHAR2,                 
 A_IC             IN        VARCHAR2,                 
 A_ICNODE         IN        NUMBER,                   
 A_AU             IN        UNAPIGEN.VC20_TABLE_TYPE, 
 A_AU_VERSION     IN OUT    UNAPIGEN.VC20_TABLE_TYPE, 
 A_VALUE          IN        UNAPIGEN.VC40_TABLE_TYPE, 
 A_NR_OF_ROWS     IN        NUMBER,                   
 A_MODIFY_REASON  IN        VARCHAR2)                 
RETURN NUMBER IS

BEGIN
   RETURN(UNAPISDIC2.SAVESDICATTRIBUTE(A_SD, A_IC, A_ICNODE, 
                                      A_AU, A_AU_VERSION, A_VALUE, A_NR_OF_ROWS,
                                      A_MODIFY_REASON));
END SAVESDICATTRIBUTE;

FUNCTION SAVE1SDICATTRIBUTE
(A_SD             IN        VARCHAR2,                 
 A_IC             IN        VARCHAR2,                 
 A_ICNODE         IN        NUMBER,                   
 A_AU             IN        VARCHAR2,                 
 A_AU_VERSION     IN OUT    VARCHAR2,                 
 A_VALUE          IN        UNAPIGEN.VC40_TABLE_TYPE, 
 A_NR_OF_ROWS     IN        NUMBER,                   
 A_MODIFY_REASON  IN        VARCHAR2)                 
RETURN NUMBER IS

BEGIN
   RETURN(UNAPISDIC2.SAVE1SDICATTRIBUTE(A_SD, A_IC, A_ICNODE, A_AU, A_AU_VERSION, A_VALUE,
                                        A_NR_OF_ROWS, A_MODIFY_REASON));
END SAVE1SDICATTRIBUTE;

FUNCTION SAVESDICHISTORY
(A_SD             IN        VARCHAR2,                  
 A_IC                IN        VARCHAR2,                  
 A_ICNODE            IN        NUMBER,                    
 A_WHO               IN        UNAPIGEN.VC20_TABLE_TYPE,   
 A_WHO_DESCRIPTION   IN        UNAPIGEN.VC40_TABLE_TYPE,   
 A_WHAT              IN        UNAPIGEN.VC60_TABLE_TYPE,   
 A_WHAT_DESCRIPTION  IN        UNAPIGEN.VC255_TABLE_TYPE,  
 A_LOGDATE           IN        UNAPIGEN.DATE_TABLE_TYPE,   
 A_WHY               IN        UNAPIGEN.VC255_TABLE_TYPE,  
 A_TR_SEQ            IN        UNAPIGEN.NUM_TABLE_TYPE,    
 A_EV_SEQ            IN        UNAPIGEN.NUM_TABLE_TYPE,    
 A_NR_OF_ROWS     IN        NUMBER)                    
RETURN NUMBER IS

BEGIN
   RETURN(UNAPISDIC2.SAVESDICHISTORY(A_SD, A_IC, A_ICNODE, 
                                    A_WHO, A_WHO_DESCRIPTION, A_WHAT, A_WHAT_DESCRIPTION, A_LOGDATE,
                                    A_WHY, A_TR_SEQ, A_EV_SEQ, A_NR_OF_ROWS));
END SAVESDICHISTORY;

FUNCTION GETSDICHISTORY
(A_SD               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_IC               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_ICNODE           OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_WHO               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_WHO_DESCRIPTION   OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_WHAT              OUT     UNAPIGEN.VC60_TABLE_TYPE,  
 A_WHAT_DESCRIPTION  OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_LOGDATE           OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_WHY               OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_TR_SEQ            OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_EV_SEQ            OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_NR_OF_ROWS       IN OUT  NUMBER,                    
 A_WHERE_CLAUSE     IN      VARCHAR2)                  
RETURN NUMBER IS

BEGIN
   RETURN(UNAPISDIC2.GETSDICHISTORY(A_SD, A_IC, A_ICNODE, 
                                   A_WHO, A_WHO_DESCRIPTION, A_WHAT, A_WHAT_DESCRIPTION, A_LOGDATE,
                                   A_WHY, A_TR_SEQ, A_EV_SEQ, A_NR_OF_ROWS, A_WHERE_CLAUSE));
END GETSDICHISTORY;

FUNCTION GETSDICHISTORY 
(A_SD                OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_IC                OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_ICNODE            OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_WHO               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_WHO_DESCRIPTION   OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_WHAT              OUT     UNAPIGEN.VC60_TABLE_TYPE,  
 A_WHAT_DESCRIPTION  OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_LOGDATE           OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_WHY               OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_TR_SEQ            OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_EV_SEQ            OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_NR_OF_ROWS        IN OUT  NUMBER,                    
 A_WHERE_CLAUSE      IN      VARCHAR2,                  
 A_NEXT_ROWS         IN      NUMBER)                    
RETURN NUMBER IS
BEGIN
   RETURN(UNAPISDIC2.GETSDICHISTORY(A_SD, A_IC, A_ICNODE,
                                    A_WHO, A_WHO_DESCRIPTION, A_WHAT, A_WHAT_DESCRIPTION, A_LOGDATE,
                                    A_WHY, A_TR_SEQ, A_EV_SEQ, A_NR_OF_ROWS, A_WHERE_CLAUSE, A_NEXT_ROWS));
END GETSDICHISTORY;

FUNCTION GETSDICHISTORYDETAILS 
(A_SD                OUT     UNAPIGEN.VC20_TABLE_TYPE,    
 A_IC                OUT     UNAPIGEN.VC20_TABLE_TYPE,    
 A_ICNODE            OUT     UNAPIGEN.LONG_TABLE_TYPE,    
 A_TR_SEQ            OUT     UNAPIGEN.NUM_TABLE_TYPE,     
 A_EV_SEQ            OUT     UNAPIGEN.NUM_TABLE_TYPE,     
 A_SEQ               OUT     UNAPIGEN.NUM_TABLE_TYPE,     
 A_DETAILS           OUT     UNAPIGEN.VC4000_TABLE_TYPE,  
 A_NR_OF_ROWS        IN OUT  NUMBER,                      
 A_WHERE_CLAUSE      IN      VARCHAR2,                    
 A_NEXT_ROWS         IN      NUMBER)                      
RETURN NUMBER IS
BEGIN
   RETURN(UNAPISDIC2.GETSDICHISTORYDETAILS(A_SD, A_IC, A_ICNODE,
                                           A_TR_SEQ, A_EV_SEQ, A_SEQ, A_DETAILS, A_NR_OF_ROWS,
                                           A_WHERE_CLAUSE, A_NEXT_ROWS));
END GETSDICHISTORYDETAILS;

FUNCTION ADDSDICCOMMENT
(A_SD           IN  VARCHAR2, 
 A_IC           IN  VARCHAR2, 
 A_ICNODE       IN  NUMBER,   
 A_COMMENT      IN  VARCHAR2) 
RETURN NUMBER IS

BEGIN
   RETURN(UNAPISDIC2.ADDSDICCOMMENT(A_SD, A_IC, A_ICNODE, 
                                   A_COMMENT));
END ADDSDICCOMMENT;

FUNCTION GETSDICCOMMENT
(A_SD               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_IC               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_ICNODE           OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_LAST_COMMENT     OUT     UNAPIGEN.VC255_TABLE_TYPE, 
 A_NR_OF_ROWS       IN OUT  NUMBER,                    
 A_WHERE_CLAUSE     IN      VARCHAR2,                  
 A_NEXT_ROWS        IN      NUMBER)                    
RETURN NUMBER IS

BEGIN
   RETURN(UNAPISDIC2.GETSDICCOMMENT(A_SD, A_IC, A_ICNODE, 
                                    A_LAST_COMMENT, A_NR_OF_ROWS, A_WHERE_CLAUSE, A_NEXT_ROWS));
END GETSDICCOMMENT;

FUNCTION SAVESDICACCESS
(A_SD                IN      VARCHAR2,                  
 A_IC                IN      VARCHAR2,                  
 A_ICNODE            IN      NUMBER,                    
 A_DD                IN      UNAPIGEN.VC3_TABLE_TYPE,   
 A_ACCESS_RIGHTS     IN      UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NR_OF_ROWS        IN      NUMBER,                    
 A_MODIFY_REASON     IN      VARCHAR2)                  
RETURN NUMBER IS

BEGIN
   RETURN(UNAPISDIC2.SAVESDICACCESS(A_SD, A_IC, A_ICNODE, 
                                   A_DD, A_ACCESS_RIGHTS, 
                                   A_NR_OF_ROWS, A_MODIFY_REASON));
END SAVESDICACCESS;

FUNCTION GETSDICACCESS
(A_SD                OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_IC                OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_ICNODE            OUT     UNAPIGEN.LONG_TABLE_TYPE,  
 A_DD                OUT     UNAPIGEN.VC3_TABLE_TYPE,   
 A_DATA_DOMAIN       OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_ACCESS_RIGHTS     OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NR_OF_ROWS        IN OUT  NUMBER,                    
 A_WHERE_CLAUSE      IN      VARCHAR2)                  
RETURN NUMBER IS

BEGIN
   RETURN(UNAPISDIC2.GETSDICACCESS(A_SD, A_IC, A_ICNODE, 
                                   A_DD, A_DATA_DOMAIN, A_ACCESS_RIGHTS, 
                                   A_NR_OF_ROWS, A_WHERE_CLAUSE));
END GETSDICACCESS;

FUNCTION CHANGESDICSTATUS
(A_SD                IN      VARCHAR2,     
 A_IC                IN      VARCHAR2,     
 A_ICNODE            IN      NUMBER,       
 A_OLD_SS            IN      VARCHAR2,     
 A_NEW_SS            IN      VARCHAR2,     
 A_LC                IN      VARCHAR2,     
 A_LC_VERSION        IN      VARCHAR2,     
 A_MODIFY_REASON     IN      VARCHAR2)     
RETURN NUMBER IS

BEGIN

   RETURN(UNAPISDIC2.CHANGESDICSTATUS(A_SD, A_IC, A_ICNODE, 
                                      A_OLD_SS, A_NEW_SS, A_LC, A_LC_VERSION, 
                                      A_MODIFY_REASON));
                                     
END CHANGESDICSTATUS;

FUNCTION INTERNALCHANGESDICSTATUS          
(A_SD                IN      VARCHAR2,     
 A_IC                IN      VARCHAR2,     
 A_ICNODE            IN      NUMBER,       
 A_NEW_SS            IN      VARCHAR2,     
 A_MODIFY_REASON     IN      VARCHAR2)     
RETURN NUMBER IS

BEGIN

   RETURN(UNAPISDIC2.INTERNALCHANGESDICSTATUS(A_SD, A_IC, A_ICNODE, 
                                              A_NEW_SS,  
                                              A_MODIFY_REASON));
                                     
END INTERNALCHANGESDICSTATUS;

FUNCTION CANCELSDIC
(A_SD                IN      VARCHAR2,     
 A_IC                IN      VARCHAR2,     
 A_ICNODE            IN      NUMBER,       
 A_MODIFY_REASON     IN      VARCHAR2)     
RETURN NUMBER IS

BEGIN

   RETURN(UNAPISDIC2.CANCELSDIC(A_SD, A_IC, A_ICNODE, 
                                A_MODIFY_REASON));
                                     
END CANCELSDIC;

FUNCTION CHANGESDICLIFECYCLE
(A_SD                IN      VARCHAR2,     
 A_IC                IN      VARCHAR2,     
 A_ICNODE            IN      NUMBER,       
 A_OLD_LC            IN      VARCHAR2,     
 A_OLD_LC_VERSION    IN      VARCHAR2,     
 A_NEW_LC            IN      VARCHAR2,     
 A_NEW_LC_VERSION    IN      VARCHAR2,     
 A_MODIFY_REASON     IN      VARCHAR2)     
RETURN NUMBER IS

BEGIN
   RETURN(UNAPISDIC2.CHANGESDICLIFECYCLE(A_SD, A_IC, A_ICNODE, A_OLD_LC, A_OLD_LC_VERSION, 
                                         A_NEW_LC, A_NEW_LC_VERSION, A_MODIFY_REASON));
END CHANGESDICLIFECYCLE;

FUNCTION SDICELECTRONICSIGNATURE
(A_SD                IN      VARCHAR2,     
 A_IC                IN      VARCHAR2,     
 A_ICNODE            IN      NUMBER,       
 A_AUTHORISED_BY     IN      VARCHAR2,     
 A_MODIFY_REASON     IN      VARCHAR2)     
RETURN NUMBER IS

BEGIN
   RETURN(UNAPISDIC2.SDICELECTRONICSIGNATURE(A_SD, A_IC, A_ICNODE, 
                                             A_AUTHORISED_BY,
                                             A_MODIFY_REASON));                                     
END SDICELECTRONICSIGNATURE;

FUNCTION INITANDSAVESDCELLSCATTRIBUTES                  
(A_SD               IN     VARCHAR2,                    
 A_CSNODE            IN     NUMBER,                      
 A_TPNODE        IN     NUMBER,                      
 A_SEQ              IN     NUMBER,                      
 A_SC               IN     VARCHAR2)                    
RETURN NUMBER IS
BEGIN
   RETURN(UNAPISD2.INITANDSAVESDCELLSCATTRIBUTES(A_SD, A_CSNODE, A_TPNODE, 
                                             A_SEQ, A_SC));                                     
END INITANDSAVESDCELLSCATTRIBUTES;

FUNCTION GETSDCONDITIONSET
(A_SD             OUT     UNAPIGEN.VC20_TABLE_TYPE, 
 A_CSNODE         OUT     UNAPIGEN.NUM_TABLE_TYPE,     
 A_CS             OUT     UNAPIGEN.VC20_TABLE_TYPE,    
 A_DESCRIPTION    OUT     UNAPIGEN.VC40_TABLE_TYPE,    
 A_T0_DATE        OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_NR_OF_ROWS     IN OUT  NUMBER,                   
 A_WHERE_CLAUSE   IN      VARCHAR2)                 
RETURN NUMBER IS

L_SD             VARCHAR2(20);
L_CS             VARCHAR2(20);
L_ST             VARCHAR2(20);
L_DESCRIPTION    VARCHAR2(40);
L_CSNODE          NUMBER;
L_T0_DATE        TIMESTAMP WITH TIME ZONE;
L_CS_CURSOR      INTEGER;
   
BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
       RETURN(UNAPIGEN.DBERR_WHERECLAUSE);
   ELSIF
     UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
     L_WHERE_CLAUSE := 'WHERE sd = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                       ''' ORDER BY csnode';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_CS_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT sd, csnode, cs, description, t0_date ' ||
                   'FROM dd' || UNAPIGEN.P_DD || '.uvsdcs ' || L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_CS_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_CS_CURSOR, 1, L_SD          , 20);
   DBMS_SQL.DEFINE_COLUMN(L_CS_CURSOR, 2, L_CSNODE        );
   DBMS_SQL.DEFINE_COLUMN(L_CS_CURSOR, 3, L_CS          , 20);
   DBMS_SQL.DEFINE_COLUMN(L_CS_CURSOR, 4, L_DESCRIPTION , 40);
   DBMS_SQL.DEFINE_COLUMN(L_CS_CURSOR, 5, L_T0_DATE     );
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_CS_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP

      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_CS_CURSOR, 1, L_SD         );
      DBMS_SQL.COLUMN_VALUE(L_CS_CURSOR, 2, L_CSNODE   );
      DBMS_SQL.COLUMN_VALUE(L_CS_CURSOR, 3, L_CS         );
      DBMS_SQL.COLUMN_VALUE(L_CS_CURSOR, 4, L_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE(L_CS_CURSOR, 5, L_T0_DATE    );

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_SD          (L_FETCHED_ROWS) := L_SD        ;
      A_CSNODE      (L_FETCHED_ROWS) := L_CSNODE     ;
      A_CS          (L_FETCHED_ROWS) := L_CS         ;
      A_DESCRIPTION (L_FETCHED_ROWS) := L_DESCRIPTION;
      A_T0_DATE     (L_FETCHED_ROWS) := L_T0_DATE    ;
                                          
      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_CS_CURSOR);
      END IF;

   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_CS_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
             'GetSdConditionSet', L_SQLERRM);
      COMMIT;
      IF DBMS_SQL.IS_OPEN(L_CS_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(L_CS_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETSDCONDITIONSET;

FUNCTION GETSDTIMEPOINT
(A_SD                   OUT   UNAPIGEN.VC20_TABLE_TYPE, 
 A_TPNODE               OUT   UNAPIGEN.NUM_TABLE_TYPE,  
 A_TP                   OUT   UNAPIGEN.NUM_TABLE_TYPE,  
 A_TP_UNIT              OUT   UNAPIGEN.VC20_TABLE_TYPE,  
 A_ALLOW_UPFRONT        OUT   UNAPIGEN.NUM_TABLE_TYPE,  
 A_ALLOW_UPFRONT_UNIT   OUT   UNAPIGEN.VC20_TABLE_TYPE, 
 A_ALLOW_OVERDUE        OUT   UNAPIGEN.NUM_TABLE_TYPE,  
 A_ALLOW_OVERDUE_UNIT   OUT   UNAPIGEN.VC20_TABLE_TYPE, 
 A_NR_OF_ROWS          IN OUT NUMBER,                   
 A_WHERE_CLAUSE         IN    VARCHAR2)                 
RETURN NUMBER IS
L_SD                  VARCHAR2(20);
L_TPNODE              NUMBER;
L_TP                  NUMBER;
L_TP_UNIT             VARCHAR2(20);
L_ALLOW_UPFRONT       NUMBER;
L_ALLOW_UPFRONT_UNIT  VARCHAR2(20);
L_ALLOW_OVERDUE       NUMBER;
L_ALLOW_OVERDUE_UNIT  VARCHAR2(20);
L_TP_CURSOR           INTEGER;


BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
       RETURN(UNAPIGEN.DBERR_WHERECLAUSE);
   ELSIF
     UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
     L_WHERE_CLAUSE := 'WHERE sd = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                       ''' ORDER BY tpnode';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_TP_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT sd, tpnode, tp, tp_unit, allow_upfront, allow_upfront_unit, allow_overdue, allow_overdue_unit' ||
                   ' FROM dd' || UNAPIGEN.P_DD || '.uvsdtp ' || L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_TP_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_TP_CURSOR, 1, L_SD                 , 20);
   DBMS_SQL.DEFINE_COLUMN(L_TP_CURSOR, 2, L_TPNODE             );
   DBMS_SQL.DEFINE_COLUMN(L_TP_CURSOR, 3, L_TP                 );
   DBMS_SQL.DEFINE_COLUMN(L_TP_CURSOR, 4, L_TP_UNIT            , 20);
   DBMS_SQL.DEFINE_COLUMN(L_TP_CURSOR, 5, L_ALLOW_UPFRONT      );
   DBMS_SQL.DEFINE_COLUMN(L_TP_CURSOR, 6, L_ALLOW_UPFRONT_UNIT , 20);
   DBMS_SQL.DEFINE_COLUMN(L_TP_CURSOR, 7, L_ALLOW_OVERDUE      );
   DBMS_SQL.DEFINE_COLUMN(L_TP_CURSOR, 8, L_ALLOW_OVERDUE_UNIT , 20);
 
 
 L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_TP_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP

      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_TP_CURSOR, 1, L_SD                    );
      DBMS_SQL.COLUMN_VALUE(L_TP_CURSOR, 2, L_TPNODE                );
      DBMS_SQL.COLUMN_VALUE(L_TP_CURSOR, 3, L_TP                    );
      DBMS_SQL.COLUMN_VALUE(L_TP_CURSOR, 4, L_TP_UNIT               );
      DBMS_SQL.COLUMN_VALUE(L_TP_CURSOR, 5, L_ALLOW_UPFRONT         );
      DBMS_SQL.COLUMN_VALUE(L_TP_CURSOR, 6, L_ALLOW_UPFRONT_UNIT    );
      DBMS_SQL.COLUMN_VALUE(L_TP_CURSOR, 7, L_ALLOW_OVERDUE         );
      DBMS_SQL.COLUMN_VALUE(L_TP_CURSOR, 8, L_ALLOW_OVERDUE_UNIT    );



      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_SD                 (L_FETCHED_ROWS) := L_SD                 ;
      A_TPNODE             (L_FETCHED_ROWS) := L_TPNODE             ;
      A_TP                 (L_FETCHED_ROWS) := L_TP                 ;
      A_TP_UNIT            (L_FETCHED_ROWS) := L_TP_UNIT            ;
      A_ALLOW_UPFRONT      (L_FETCHED_ROWS) := L_ALLOW_UPFRONT      ;
      A_ALLOW_UPFRONT_UNIT (L_FETCHED_ROWS) := L_ALLOW_UPFRONT_UNIT ;
      A_ALLOW_OVERDUE      (L_FETCHED_ROWS) := L_ALLOW_OVERDUE      ;
      A_ALLOW_OVERDUE_UNIT (L_FETCHED_ROWS) := L_ALLOW_OVERDUE_UNIT ;
                                         
      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_TP_CURSOR);
      END IF;

   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_TP_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

RETURN(UNAPIGEN.DBERR_GENFAIL);
EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
             'GetSdTimePoint', L_SQLERRM);
      COMMIT;
      IF DBMS_SQL.IS_OPEN(L_TP_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(L_TP_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETSDTIMEPOINT;

FUNCTION SAVESDCONDITIONSET
(A_SD             IN     VARCHAR2,                  
 A_CSNODE         IN OUT UNAPIGEN.NUM_TABLE_TYPE,   
 A_CS             IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_T0_DATE        IN     UNAPIGEN.DATE_TABLE_TYPE,  
 A_MODIFY_FLAG    IN OUT UNAPIGEN.NUM_TABLE_TYPE,   
 A_NR_OF_ROWS     IN     NUMBER,                    
 A_MODIFY_REASON  IN     VARCHAR2)                  
RETURN NUMBER IS
L_LC                     VARCHAR2(2);
L_LC_VERSION             VARCHAR2(20);
L_SS                     VARCHAR2(2);
L_LOG_HS                 CHAR(1);
L_LOG_HS_DETAILS         CHAR(1);
L_ALLOW_MODIFY           CHAR(1);
L_ACTIVE                 CHAR(1);
L_PT_VERSION             VARCHAR2(20); 
L_SEQ_NO                 NUMBER;
L_HS_SEQ                 NUMBER;
L_CURRENT_TIMESTAMP                TIMESTAMP WITH TIME ZONE;
L_T0_DATE_OLD            TIMESTAMP WITH TIME ZONE;
L_PREVIOUS_CSNODE        NUMBER(9);
L_NEXT_CSNODE            NUMBER(9);
L_NBR_PREV_INSERTED_ROWS NUMBER;
L_NBR_NEXT_INSERTED_ROWS NUMBER;
L_I                      NUMBER;
L_OLD_NR_SC_CURRENT      NUMBER;
L_NEW_NR_SC_CURRENT      NUMBER;

L_CS                     VARCHAR2(20);
L_DESCRIPTION            VARCHAR2(40);
L_T0_DATE                TIMESTAMP WITH TIME ZONE;

CURSOR C_CS_CURSOR(C_CSNODE NUMBER) IS
SELECT CS, DESCRIPTION, T0_DATE 
FROM UTSDCS 
WHERE SD = A_SD
    AND CSNODE = C_CSNODE;

CURSOR C_CSDESCR_CURSOR(C_CS VARCHAR2) IS
SELECT DESCRIPTION 
FROM UTCS
WHERE CS = C_CS;
 
CURSOR C_CSCN_CURSOR(C_CS VARCHAR2) IS
SELECT CN, VALUE , CNSEQ
FROM UTCSCN
WHERE CS = C_CS
ORDER BY CNSEQ;

CURSOR C_SD_CURSOR (C_SD VARCHAR2) IS
   SELECT NR_SC_CURRENT
     FROM UTSD
    WHERE SD = C_SD;
 
BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_SD, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   L_CURRENT_TIMESTAMP := CURRENT_TIMESTAMP;
   L_PT_VERSION := '';
   L_RET_CODE := UNAPIAUT.GETSDAUTHORISATION(A_SD, L_PT_VERSION, L_LC, L_LC_VERSION, L_SS,
                                             L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS, L_LOG_HS_DETAILS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTSD
   SET ALLOW_MODIFY = '#'
   WHERE SD = A_SD;
   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR ;
   END IF;

   L_EVENT_TP := 'SdConditionSetsUpdated';
   L_EV_SEQ_NR := -1;
   L_EV_DETAILS := '';
   L_RESULT := UNAPIEV.INSERTEVENT('SaveSdConditionSet', UNAPIGEN.P_EVMGR_NAME, 'sd', A_SD, L_LC, 
                                   L_LC_VERSION, L_SS, L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF (L_LOG_HS = '1') THEN
       INSERT INTO UTSDHS(SD, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, 
                            LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
       VALUES(A_SD,  UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
              'condition sets of study "'|| A_SD ||'" are updated.', 
              CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   L_HS_SEQ := 0;
   IF (L_LOG_HS_DETAILS = '1') THEN
       L_HS_SEQ := L_HS_SEQ + 1;
       INSERT INTO UTSDHSDETAILS(SD, TR_SEQ, EV_SEQ, SEQ, DETAILS)
       VALUES(A_SD, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_SEQ, 
              'condition sets of study "'|| A_SD ||'" are updated.');
   END IF;
   
    FOR L_SEQ_NO IN 1.. A_NR_OF_ROWS LOOP
        IF A_MODIFY_FLAG(L_SEQ_NO) = UNAPIGEN.DBERR_SUCCESS THEN
            NULL; 
        ELSIF A_MODIFY_FLAG(L_SEQ_NO) = UNAPIGEN.MOD_FLAG_INSERT THEN
         
            IF A_CS(L_SEQ_NO) IS NULL THEN
                UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID ;
                RAISE STPERROR;
            END IF;
            OPEN C_CSDESCR_CURSOR(A_CS(L_SEQ_NO));
            FETCH C_CSDESCR_CURSOR INTO L_DESCRIPTION;
                    IF C_CSDESCR_CURSOR%NOTFOUND THEN 
                       UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT ;
                       RAISE STPERROR;
                    END IF;
            CLOSE C_CSDESCR_CURSOR;
           
            IF NVL(A_CSNODE(L_SEQ_NO), 0) <> 0 THEN
                UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NEWCSNODENOTZERO;
                RAISE STPERROR;
            END IF;        
            L_PREVIOUS_CSNODE := 0;
            L_NEXT_CSNODE     := 0;
            L_NBR_PREV_INSERTED_ROWS := 0;
            L_NBR_NEXT_INSERTED_ROWS := 0;

            
            L_I := L_SEQ_NO -1;
            WHILE L_I > 0 LOOP
                IF (A_MODIFY_FLAG(L_I) = UNAPIGEN.MOD_FLAG_INSERT) THEN
                    L_NBR_PREV_INSERTED_ROWS := L_NBR_PREV_INSERTED_ROWS +1;
                 ELSIF ((A_MODIFY_FLAG(L_I) = UNAPIGEN.DBERR_SUCCESS) OR
                    (A_MODIFY_FLAG(L_I) = UNAPIGEN.MOD_FLAG_DELETE) OR
                    (A_MODIFY_FLAG(L_I) = UNAPIGEN.MOD_FLAG_UPDATE)) THEN
                   
                    L_PREVIOUS_CSNODE := A_CSNODE(L_I);
                    EXIT;
                END IF;
                L_I := L_I -1;
            END LOOP;

            
            L_I := L_SEQ_NO  + 1;
            WHILE L_I < (A_NR_OF_ROWS + 1) LOOP
                IF (A_MODIFY_FLAG(L_I) = UNAPIGEN.MOD_FLAG_INSERT) THEN
                    L_NBR_NEXT_INSERTED_ROWS := L_NBR_NEXT_INSERTED_ROWS +1;
                ELSIF ((A_MODIFY_FLAG(L_I) = UNAPIGEN.DBERR_SUCCESS) OR
                    (A_MODIFY_FLAG(L_I) = UNAPIGEN.MOD_FLAG_DELETE) OR
                    (A_MODIFY_FLAG(L_I) = UNAPIGEN.MOD_FLAG_UPDATE)) THEN
                    
                    L_NEXT_CSNODE := A_CSNODE(L_I);
                    EXIT;
                END IF;
                L_I := L_I +1;
            END LOOP;
            IF (L_NEXT_CSNODE = 0) THEN
                A_CSNODE(L_SEQ_NO):= L_PREVIOUS_CSNODE + (L_NBR_PREV_INSERTED_ROWS + 1) * UNAPIGEN.DEFAULT_NODE_INTERVAL; 
            ELSE
                A_CSNODE(L_SEQ_NO) := L_PREVIOUS_CSNODE + ROUND((L_NEXT_CSNODE- L_PREVIOUS_CSNODE) * (1 + L_NBR_PREV_INSERTED_ROWS) / ( 2 + L_NBR_NEXT_INSERTED_ROWS + L_NBR_PREV_INSERTED_ROWS));
            END IF;
            INSERT INTO UTSDCS (SD,  CS, CSNODE, DESCRIPTION, T0_DATE, T0_DATE_TZ)
            VALUES (A_SD,  A_CS(L_SEQ_NO), A_CSNODE(L_SEQ_NO), L_DESCRIPTION, A_T0_DATE(L_SEQ_NO), A_T0_DATE(L_SEQ_NO));

            FOR L_CSCN_REC IN C_CSCN_CURSOR(A_CS(L_SEQ_NO)) LOOP
                INSERT INTO UTSDCSCN(SD,CSNODE, CS, CN, CNSEQ,VALUE)
                VALUES(A_SD, A_CSNODE(L_SEQ_NO), A_CS(L_SEQ_NO), L_CSCN_REC.CN, L_CSCN_REC.CNSEQ, L_CSCN_REC.VALUE);  
            END LOOP;
            IF (L_LOG_HS_DETAILS = '1') THEN
                L_WHAT_DESCRIPTION := 'condition set "'||A_CS(L_SEQ_NO)||'" is added to study "'||A_SD||'".';
                L_HS_SEQ := L_HS_SEQ + 1;
                INSERT INTO UTSDHSDETAILS(SD, TR_SEQ, EV_SEQ, SEQ, DETAILS)
                VALUES(A_SD, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR,L_HS_SEQ, L_WHAT_DESCRIPTION);
            END IF;
        ELSIF A_MODIFY_FLAG(L_SEQ_NO) = UNAPIGEN.MOD_FLAG_UPDATE THEN
            OPEN C_CS_CURSOR(A_CSNODE(L_SEQ_NO));
            FETCH C_CS_CURSOR INTO L_CS, L_DESCRIPTION, L_T0_DATE;
            IF C_CS_CURSOR%NOTFOUND THEN 
                UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INVALIDCSNODE ;
                RAISE STPERROR;
            END IF;
            CLOSE C_CS_CURSOR;
            UPDATE UTSDCS
            SET CS                 = A_CS(L_SEQ_NO),
                T0_DATE            = A_T0_DATE(L_SEQ_NO),
                T0_DATE_TZ         =  DECODE(A_T0_DATE(L_SEQ_NO), T0_DATE_TZ, T0_DATE_TZ, A_T0_DATE(L_SEQ_NO))
            WHERE SD = A_SD
              AND CSNODE = A_CSNODE(L_SEQ_NO);

            IF NOT(A_T0_DATE(L_SEQ_NO) IS NULL) AND (L_T0_DATE IS NULL) THEN
                L_EVENT_TP := 'T0_dateSet';
                L_EV_DETAILS :=  'csnode=' || A_CSNODE(L_SEQ_NO);
                L_RESULT := UNAPIEV.INSERTEVENT('SaveSdConditionSet', UNAPIGEN.P_EVMGR_NAME, 'sd', A_SD, L_LC, 
                                               L_LC_VERSION, L_SS, L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);
                IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS  THEN
                  UNAPIGEN.P_TXN_ERROR := L_RESULT;
                  RAISE STPERROR;
                END IF;
            END IF;

            
            IF (L_LOG_HS_DETAILS = '1') THEN
                IF (NVL(A_CS(L_SEQ_NO), ' ') <> NVL(L_CS , ' ')) THEN
                    L_WHAT_DESCRIPTION := 'condition set "'||L_CS||'" of study "'||A_SD||'" is changed to "'||A_CS(L_SEQ_NO)||'".';
                    L_HS_SEQ := L_HS_SEQ + 1;
                    INSERT INTO UTSDHSDETAILS(SD, TR_SEQ, EV_SEQ, SEQ, DETAILS)
                    VALUES(A_SD, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR,L_HS_SEQ, L_WHAT_DESCRIPTION);
                END IF;
                IF (NVL(A_T0_DATE(L_SEQ_NO), TO_TIMESTAMP_TZ('15/07/1921', 'DD/MM/YYYY')) <> NVL(L_T0_DATE, TO_TIMESTAMP_TZ('15/07/1921', 'DD/MM/YYYY'))) THEN
                    L_WHAT_DESCRIPTION := 't0_date of condition set "'||L_CS||'" of study "'||A_SD||'" is changed from "'||TO_CHAR(L_T0_DATE, 'DD-MON-YYYY HH24:MI:SS') || '" to "'||A_T0_DATE(L_SEQ_NO)||'".';
                    L_HS_SEQ := L_HS_SEQ + 1;
                    INSERT INTO UTSDHSDETAILS(SD, TR_SEQ, EV_SEQ, SEQ, DETAILS)
                    VALUES(A_SD, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR,L_HS_SEQ, L_WHAT_DESCRIPTION);
                END IF;
            END IF;
        ELSIF A_MODIFY_FLAG(L_SEQ_NO) = UNAPIGEN.MOD_FLAG_DELETE THEN
            OPEN C_CS_CURSOR(A_CSNODE(L_SEQ_NO));
            FETCH C_CS_CURSOR INTO L_CS, L_DESCRIPTION, L_T0_DATE;
            IF C_CS_CURSOR%NOTFOUND THEN 
                UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INVALIDCSNODE ;
                RAISE STPERROR;
            END IF;
            CLOSE C_CS_CURSOR;

            
            OPEN C_SD_CURSOR(A_SD);
            FETCH C_SD_CURSOR INTO L_OLD_NR_SC_CURRENT;
            CLOSE C_SD_CURSOR;
            
            
            DELETE FROM UTSDCS
            WHERE SD = A_SD 
              AND CSNODE = A_CSNODE(L_SEQ_NO);
              
            DELETE FROM UTSDCSCN
            WHERE SD = A_SD 
              AND CSNODE = A_CSNODE(L_SEQ_NO);

            DELETE FROM UTSDCELLSC
            WHERE SD = A_SD 
              AND CSNODE = A_CSNODE(L_SEQ_NO);

            
            UPDATE UTSD
               SET NR_SC_CURRENT = (SELECT COUNT(*) FROM UTSDCELLSC WHERE SD = A_SD)
             WHERE SD = A_SD
            RETURNING NR_SC_CURRENT
              INTO L_NEW_NR_SC_CURRENT;

            IF (L_LOG_HS_DETAILS = '1') THEN
                L_WHAT_DESCRIPTION := 'condition set "'||L_CS||'" of study "'||A_SD||'" is deleted.';
                L_HS_SEQ := L_HS_SEQ + 1;
                INSERT INTO UTSDHSDETAILS(SD, TR_SEQ, EV_SEQ, SEQ, DETAILS)
                VALUES(A_SD, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR,L_HS_SEQ, L_WHAT_DESCRIPTION);

                IF NVL((L_OLD_NR_SC_CURRENT <> L_NEW_NR_SC_CURRENT), TRUE) AND 
                   NOT(L_OLD_NR_SC_CURRENT IS NULL AND L_NEW_NR_SC_CURRENT IS NULL) THEN 
                   L_WHAT_DESCRIPTION := 'study "'||A_SD||'" is updated: property <nr_sc_current> changed value from "'||
                                         L_OLD_NR_SC_CURRENT||'" to "'||L_NEW_NR_SC_CURRENT||'".';
                   L_HS_SEQ := L_HS_SEQ + 1;
                   INSERT INTO UTSDHSDETAILS(SD, TR_SEQ, EV_SEQ, SEQ, DETAILS)
                   VALUES(A_SD, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_SEQ, L_WHAT_DESCRIPTION);
                END IF;
            END IF;
        END IF;
    END LOOP;

   
   
   
   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      IF A_MODIFY_FLAG(L_SEQ_NO) < UNAPIGEN.DBERR_SUCCESS THEN
         A_MODIFY_FLAG(L_SEQ_NO) := UNAPIGEN.DBERR_SUCCESS;
      END IF;
   END LOOP;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE <> 1 THEN
         UNAPIGEN.LOGERROR('SaveSdConditionSet', SQLERRM);
      END IF;
      IF C_SD_CURSOR%ISOPEN THEN
         CLOSE C_SD_CURSOR;
      END IF;
      RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveSdConditionSet'));
END SAVESDCONDITIONSET;

FUNCTION SAVESDTIMEPOINT
(A_SD                   IN    VARCHAR2,                   
 A_TPNODE           IN OUT UNAPIGEN.NUM_TABLE_TYPE,    
 A_TP                   IN    UNAPIGEN.NUM_TABLE_TYPE,    
 A_TP_UNIT              IN    UNAPIGEN.VC20_TABLE_TYPE,   
 A_ALLOW_UPFRONT        IN    UNAPIGEN.NUM_TABLE_TYPE,    
 A_ALLOW_UPFRONT_UNIT   IN    UNAPIGEN.VC20_TABLE_TYPE,   
 A_ALLOW_OVERDUE        IN    UNAPIGEN.NUM_TABLE_TYPE,    
 A_ALLOW_OVERDUE_UNIT   IN    UNAPIGEN.VC20_TABLE_TYPE,   
 A_MODIFY_FLAG         IN OUT UNAPIGEN.NUM_TABLE_TYPE,   
 A_NR_OF_ROWS           IN    NUMBER,                     
 A_MODIFY_REASON        IN    VARCHAR2)                   
RETURN NUMBER IS

L_LC                     VARCHAR2(2);
L_LC_VERSION             VARCHAR2(20);
L_SS                     VARCHAR2(2);
L_LOG_HS                 CHAR(1);
L_LOG_HS_DETAILS         CHAR(1);
L_ALLOW_MODIFY           CHAR(1);
L_ACTIVE                 CHAR(1);
L_PT_VERSION             VARCHAR2(20); 
L_SEQ_NO                 NUMBER;
L_HS_SEQ                 NUMBER;
L_CURRENT_TIMESTAMP                TIMESTAMP WITH TIME ZONE;
L_OLD_NR_SC_CURRENT      NUMBER;
L_NEW_NR_SC_CURRENT      NUMBER;

L_PREVIOUS_TPNODE        NUMBER(9);
L_NEXT_TPNODE            NUMBER(9);
L_NBR_PREV_INSERTED_ROWS NUMBER;
L_NBR_NEXT_INSERTED_ROWS NUMBER;
L_I                      NUMBER;

L_TP                     NUMBER;
L_TP_UNIT                VARCHAR2(20);
L_ALLOW_UPFRONT          NUMBER;
L_ALLOW_UPFRONT_UNIT     VARCHAR2(20);
L_ALLOW_OVERDUE          NUMBER;
L_ALLOW_OVERDUE_UNIT     VARCHAR2(20); 

CURSOR C_TP_CURSOR(C_TPNODE NUMBER) IS
SELECT TP, TP_UNIT, ALLOW_UPFRONT, ALLOW_UPFRONT_UNIT, ALLOW_OVERDUE, ALLOW_OVERDUE_UNIT
 FROM UTSDTP
 WHERE SD= A_SD 
   AND TPNODE= C_TPNODE;
    
CURSOR C_SD_CURSOR (C_SD VARCHAR2) IS
   SELECT NR_SC_CURRENT
     FROM UTSD
    WHERE SD = C_SD;

BEGIN
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
     UNAPIGEN.DBERR_SUCCESS THEN
     RAISE STPERROR;
   END IF;

   IF NVL(A_SD, ' ') = ' ' THEN
     UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
     RAISE STPERROR;
   END IF;

   L_CURRENT_TIMESTAMP := CURRENT_TIMESTAMP;
   L_PT_VERSION := '';
   L_RET_CODE := UNAPIAUT.GETSDAUTHORISATION(A_SD, L_PT_VERSION, L_LC, L_LC_VERSION, L_SS,
                                            L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS, L_LOG_HS_DETAILS);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTSD
   SET ALLOW_MODIFY = '#'
   WHERE SD = A_SD;
   
   IF SQL%ROWCOUNT < 1 THEN
     UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
     RAISE STPERROR ;
   END IF;

   L_EVENT_TP := 'SdTimePointsUpdated';
   L_EV_SEQ_NR := -1;
   L_EV_DETAILS := '';
   L_RESULT := UNAPIEV.INSERTEVENT('SaveSdTimePoint', UNAPIGEN.P_EVMGR_NAME, 'sd', A_SD, L_LC, 
                                  L_LC_VERSION, L_SS, L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
     UNAPIGEN.P_TXN_ERROR := L_RESULT;
     RAISE STPERROR;
   END IF;

   IF (L_LOG_HS = '1') THEN
      INSERT INTO UTSDHS(SD, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, 
                           LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES(A_SD,  UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
             'time points are updated', 
             CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   L_HS_SEQ := 0;
   IF (L_LOG_HS_DETAILS = '1') THEN
      L_HS_SEQ := L_HS_SEQ + 1;
      INSERT INTO UTSDHSDETAILS(SD, TR_SEQ, EV_SEQ, SEQ, DETAILS)
      VALUES(A_SD, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_SEQ, 'time points are updated');
   END IF;

   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
       IF A_MODIFY_FLAG(L_SEQ_NO) = UNAPIGEN.DBERR_SUCCESS THEN
           NULL; 
       ELSIF A_MODIFY_FLAG(L_SEQ_NO) = UNAPIGEN.MOD_FLAG_INSERT THEN
        
           IF A_TP(L_SEQ_NO) IS NULL THEN
               UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NULLTIMEPOINT ;
               RAISE STPERROR;
           END IF;
            IF A_TP_UNIT(L_SEQ_NO) NOT IN ('MI','HH','DD','WW','MM','YY','MF','YF') THEN
               UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_TPUNIT;
               RAISE STPERROR;         
           END IF;
          
            IF NVL(A_TPNODE(L_SEQ_NO), 0) <> 0 THEN
               UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NEWTPNODENOTZERO;
               RAISE STPERROR;
            END IF;        
           L_PREVIOUS_TPNODE:= 0;
           L_NEXT_TPNODE    := 0;
           L_NBR_PREV_INSERTED_ROWS := 0;
           L_NBR_NEXT_INSERTED_ROWS := 0;

           
           L_I := L_SEQ_NO -1;
           WHILE L_I > 0 LOOP
               IF (A_MODIFY_FLAG(L_I) = UNAPIGEN.MOD_FLAG_INSERT) THEN
                   L_NBR_PREV_INSERTED_ROWS := L_NBR_PREV_INSERTED_ROWS +1;
                ELSIF ((A_MODIFY_FLAG(L_I) = UNAPIGEN.DBERR_SUCCESS) OR
                   (A_MODIFY_FLAG(L_I) = UNAPIGEN.MOD_FLAG_DELETE) OR
                   (A_MODIFY_FLAG(L_I) = UNAPIGEN.MOD_FLAG_UPDATE)) THEN
                  
                   L_PREVIOUS_TPNODE:= A_TPNODE(L_I);
                   EXIT;
               END IF;
               L_I := L_I -1;
           END LOOP;

           
           L_I := L_SEQ_NO  + 1;
           WHILE L_I < A_NR_OF_ROWS +1 LOOP
               IF (A_MODIFY_FLAG(L_I) = UNAPIGEN.MOD_FLAG_INSERT) THEN
                   L_NBR_NEXT_INSERTED_ROWS := L_NBR_NEXT_INSERTED_ROWS +1;
               ELSIF ((A_MODIFY_FLAG(L_I) = UNAPIGEN.DBERR_SUCCESS) OR
                   (A_MODIFY_FLAG(L_I) = UNAPIGEN.MOD_FLAG_DELETE) OR
                   (A_MODIFY_FLAG(L_I) = UNAPIGEN.MOD_FLAG_UPDATE)) THEN
                   
                   L_NEXT_TPNODE:= A_TPNODE(L_I);
                   EXIT;
               END IF;
               L_I := L_I +1;
           END LOOP;
           IF (L_NEXT_TPNODE= 0) THEN
               A_TPNODE(L_SEQ_NO):= L_PREVIOUS_TPNODE+ (L_NBR_PREV_INSERTED_ROWS + 1) * UNAPIGEN.DEFAULT_NODE_INTERVAL; 
           ELSE
               A_TPNODE(L_SEQ_NO) := L_PREVIOUS_TPNODE+ ROUND((L_NEXT_TPNODE- L_PREVIOUS_TPNODE) * (1 + L_NBR_PREV_INSERTED_ROWS) / ( 2 + L_NBR_NEXT_INSERTED_ROWS + L_NBR_PREV_INSERTED_ROWS));
           END IF;
           INSERT INTO UTSDTP (SD,  TPNODE, TP, TP_UNIT, ALLOW_UPFRONT, ALLOW_UPFRONT_UNIT, 
                              ALLOW_OVERDUE, ALLOW_OVERDUE_UNIT)
           VALUES (A_SD,  A_TPNODE(L_SEQ_NO), A_TP(L_SEQ_NO), A_TP_UNIT(L_SEQ_NO), 
                  A_ALLOW_UPFRONT(L_SEQ_NO), A_ALLOW_UPFRONT_UNIT(L_SEQ_NO), A_ALLOW_OVERDUE(L_SEQ_NO), 
                  A_ALLOW_OVERDUE_UNIT(L_SEQ_NO));
           IF (L_LOG_HS_DETAILS = '1') THEN
               L_WHAT_DESCRIPTION := 'Timepoint  "'||A_TP(L_SEQ_NO)||' '||A_TP_UNIT(L_SEQ_NO)||'" is added to study "'||A_SD||'".';
               L_HS_SEQ := L_HS_SEQ + 1;
               INSERT INTO UTSDHSDETAILS(SD, TR_SEQ, EV_SEQ, SEQ, DETAILS)
               VALUES(A_SD, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR,L_HS_SEQ, L_WHAT_DESCRIPTION);
           END IF;
       ELSIF A_MODIFY_FLAG(L_SEQ_NO) = UNAPIGEN.MOD_FLAG_UPDATE THEN
           OPEN C_TP_CURSOR(A_TPNODE(L_SEQ_NO));
           FETCH C_TP_CURSOR INTO L_TP,L_TP_UNIT,L_ALLOW_UPFRONT,L_ALLOW_UPFRONT_UNIT,L_ALLOW_OVERDUE,L_ALLOW_OVERDUE_UNIT;
           IF C_TP_CURSOR%NOTFOUND THEN 
               UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INVALIDTPNODE;
               RAISE STPERROR;
           END IF;
           CLOSE C_TP_CURSOR;
           UPDATE UTSDTP
           SET TP                 = A_TP(L_SEQ_NO),
               TP_UNIT            = A_TP_UNIT(L_SEQ_NO),
               ALLOW_UPFRONT      = A_ALLOW_UPFRONT(L_SEQ_NO),
               ALLOW_UPFRONT_UNIT = A_ALLOW_UPFRONT_UNIT(L_SEQ_NO), 
               ALLOW_OVERDUE      = A_ALLOW_OVERDUE(L_SEQ_NO),
               ALLOW_OVERDUE_UNIT = A_ALLOW_OVERDUE_UNIT(L_SEQ_NO)
           WHERE SD = A_SD
             AND TPNODE= A_TPNODE(L_SEQ_NO);

       
           IF (L_LOG_HS_DETAILS = '1') THEN
               IF (NVL(A_TP(L_SEQ_NO), ' ') <> NVL(L_TP , ' ')) OR
                 (NVL(A_TP_UNIT(L_SEQ_NO), ' ') <> NVL(L_TP_UNIT , ' ')) THEN
                   L_WHAT_DESCRIPTION := 'Timepoint  "'||L_TP||' '||L_TP_UNIT||'" of study "'||A_SD||'" is changed to "'||A_TP(L_SEQ_NO)||' '||A_TP_UNIT(L_SEQ_NO)||'".';
                   L_HS_SEQ := L_HS_SEQ + 1;
                   INSERT INTO UTSDHSDETAILS(SD, TR_SEQ, EV_SEQ, SEQ, DETAILS)
                   VALUES(A_SD, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR,L_HS_SEQ, L_WHAT_DESCRIPTION);
               END IF;
               IF (NVL(A_ALLOW_UPFRONT(L_SEQ_NO), ' ') <> NVL(L_ALLOW_UPFRONT , ' ')) OR
                 (NVL(A_ALLOW_UPFRONT_UNIT(L_SEQ_NO), ' ') <> NVL(L_ALLOW_UPFRONT_UNIT , ' ')) THEN
                    L_WHAT_DESCRIPTION := 'Allow_upfront of timepoint  "'||L_TP||' '||L_TP_UNIT||'" of study "'||A_SD||'" is changed from "'||NVL(L_ALLOW_UPFRONT , ' ') || ' '|| NVL(L_ALLOW_UPFRONT_UNIT , ' ') || '" to "'||NVL(A_ALLOW_UPFRONT(L_SEQ_NO), ' ') || ' '|| NVL(A_ALLOW_UPFRONT_UNIT(L_SEQ_NO) , ' ')||'".';
                   L_HS_SEQ := L_HS_SEQ + 1;
                   INSERT INTO UTSDHSDETAILS(SD, TR_SEQ, EV_SEQ, SEQ, DETAILS)
                   VALUES(A_SD, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR,L_HS_SEQ, L_WHAT_DESCRIPTION);
               END IF;
               IF (NVL(A_ALLOW_OVERDUE(L_SEQ_NO), ' ') <> NVL(L_ALLOW_OVERDUE, ' ')) OR
                 (NVL(A_ALLOW_OVERDUE_UNIT(L_SEQ_NO), ' ') <> NVL(L_ALLOW_OVERDUE_UNIT , ' ')) THEN
                   L_WHAT_DESCRIPTION := 'Allow_overdue of timepoint  "'||L_TP||' '||L_TP_UNIT||'" of study "'||A_SD||'" is changed from "'|| NVL(L_ALLOW_OVERDUE, ' ')|| ' '|| NVL(L_ALLOW_OVERDUE_UNIT , ' ')  || '" to "'||NVL(A_ALLOW_OVERDUE(L_SEQ_NO), ' ') || ' '|| NVL(A_ALLOW_OVERDUE_UNIT(L_SEQ_NO) , ' ') ||'".';
                   L_HS_SEQ := L_HS_SEQ + 1;
                   INSERT INTO UTSDHSDETAILS(SD, TR_SEQ, EV_SEQ, SEQ, DETAILS)
                   VALUES(A_SD, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR,L_HS_SEQ, L_WHAT_DESCRIPTION);
               END IF;
           END IF;
       ELSIF A_MODIFY_FLAG(L_SEQ_NO) = UNAPIGEN.MOD_FLAG_DELETE THEN
           OPEN C_TP_CURSOR(A_TPNODE(L_SEQ_NO));
           FETCH C_TP_CURSOR INTO L_TP,L_TP_UNIT,L_ALLOW_UPFRONT,L_ALLOW_UPFRONT_UNIT,L_ALLOW_OVERDUE,L_ALLOW_OVERDUE_UNIT;
           IF C_TP_CURSOR%NOTFOUND THEN 
               UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INVALIDTPNODE;
               RAISE STPERROR;
           END IF;
           CLOSE C_TP_CURSOR;

           
           OPEN C_SD_CURSOR(A_SD);
           FETCH C_SD_CURSOR INTO L_OLD_NR_SC_CURRENT;
           CLOSE C_SD_CURSOR;

           
           DELETE FROM UTSDTP
           WHERE SD = A_SD 
             AND TPNODE = A_TPNODE(L_SEQ_NO);

           DELETE FROM UTSDCELLSC
           WHERE SD = A_SD 
             AND TPNODE = A_TPNODE(L_SEQ_NO);

           
           UPDATE UTSD
              SET NR_SC_CURRENT = (SELECT COUNT(*) FROM UTSDCELLSC WHERE SD = A_SD)
            WHERE SD = A_SD
           RETURNING NR_SC_CURRENT
             INTO L_NEW_NR_SC_CURRENT;

           IF (L_LOG_HS_DETAILS = '1') THEN
               L_WHAT_DESCRIPTION := 'Timepoint  "'||L_TP||' '||L_TP_UNIT||'" of study "'||A_SD||'" is deleted.';
               L_HS_SEQ := L_HS_SEQ + 1;
               INSERT INTO UTSDHSDETAILS(SD, TR_SEQ, EV_SEQ, SEQ, DETAILS)
               VALUES(A_SD, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR,L_HS_SEQ, L_WHAT_DESCRIPTION);

               IF NVL((L_OLD_NR_SC_CURRENT <> L_NEW_NR_SC_CURRENT), TRUE) AND 
                  NOT(L_OLD_NR_SC_CURRENT IS NULL AND L_NEW_NR_SC_CURRENT IS NULL) THEN 
                  L_WHAT_DESCRIPTION := 'study "'||A_SD||'" is updated: property <nr_sc_current> changed value from "'||
                                        L_OLD_NR_SC_CURRENT||'" to "'||L_NEW_NR_SC_CURRENT||'".';
                  L_HS_SEQ := L_HS_SEQ + 1;
                  INSERT INTO UTSDHSDETAILS(SD, TR_SEQ, EV_SEQ, SEQ, DETAILS)
                  VALUES(A_SD, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_SEQ, L_WHAT_DESCRIPTION);
               END IF;
           END IF;
       END IF;
   END LOOP;

   
   
   
   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      IF A_MODIFY_FLAG(L_SEQ_NO) < UNAPIGEN.DBERR_SUCCESS THEN
         A_MODIFY_FLAG(L_SEQ_NO) := UNAPIGEN.DBERR_SUCCESS;
      END IF;
   END LOOP;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE <> 1 THEN
         UNAPIGEN.LOGERROR('SaveSdTimePoint', SQLERRM);
      END IF;
      IF C_SD_CURSOR%ISOPEN THEN
         CLOSE C_SD_CURSOR;
      END IF;
      RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveSdTimePoint'));
END SAVESDTIMEPOINT;

FUNCTION GETSDCELLSAMPLE
(A_SD               OUT   UNAPIGEN.VC20_TABLE_TYPE, 
 A_CSNODE           OUT   UNAPIGEN.NUM_TABLE_TYPE,  
 A_TPNODE           OUT   UNAPIGEN.NUM_TABLE_TYPE,  
 A_SC               OUT   UNAPIGEN.VC20_TABLE_TYPE, 
 A_LO               OUT   UNAPIGEN.VC20_TABLE_TYPE, 
 A_LO_DESCRIPTION   OUT   UNAPIGEN.VC40_TABLE_TYPE, 
 A_LO_START_DATE    OUT   UNAPIGEN.DATE_TABLE_TYPE,  
 A_LO_END_DATE      OUT   UNAPIGEN.DATE_TABLE_TYPE,  
 A_NR_OF_ROWS       IN OUT  NUMBER,                 
 A_WHERE_CLAUSE     IN    VARCHAR2)                 
RETURN NUMBER IS
L_SD              VARCHAR2(20);
L_CSNODE           NUMBER;
L_TPNODE       NUMBER;
L_SEQ             NUMBER;
L_SC              VARCHAR2(20);
L_LO              VARCHAR2(20);
L_LO_DESCRIPTION  VARCHAR2(40);
L_LO_START_DATE   TIMESTAMP WITH TIME ZONE;
L_LO_END_DATE     TIMESTAMP WITH TIME ZONE;
L_CELLSC_CURSOR   INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
       RETURN(UNAPIGEN.DBERR_WHERECLAUSE);
   ELSIF
     UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
     L_WHERE_CLAUSE := 'WHERE sd = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                       ''' ORDER BY seq';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_CELLSC_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT sd, csnode, tpnode, sc, lo, lo_description, lo_start_date, lo_end_date' ||
                   ' FROM dd' || UNAPIGEN.P_DD || '.uvsdcellsc ' || L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_CELLSC_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_CELLSC_CURSOR, 1, L_SD              , 20);
   DBMS_SQL.DEFINE_COLUMN(L_CELLSC_CURSOR, 2, L_CSNODE           );
   DBMS_SQL.DEFINE_COLUMN(L_CELLSC_CURSOR, 3, L_TPNODE       );
   DBMS_SQL.DEFINE_COLUMN(L_CELLSC_CURSOR, 4, L_SC              , 20);
   DBMS_SQL.DEFINE_COLUMN(L_CELLSC_CURSOR, 5, L_LO              , 20);
   DBMS_SQL.DEFINE_COLUMN(L_CELLSC_CURSOR, 6, L_LO_DESCRIPTION  , 40);
   DBMS_SQL.DEFINE_COLUMN(L_CELLSC_CURSOR, 7, L_LO_START_DATE   );
   DBMS_SQL.DEFINE_COLUMN(L_CELLSC_CURSOR, 8, L_LO_END_DATE     );
 
 
 L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_CELLSC_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP

      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_CELLSC_CURSOR, 1, L_SD                    );
      DBMS_SQL.COLUMN_VALUE(L_CELLSC_CURSOR, 2, L_CSNODE                 );
      DBMS_SQL.COLUMN_VALUE(L_CELLSC_CURSOR, 3, L_TPNODE             );
      DBMS_SQL.COLUMN_VALUE(L_CELLSC_CURSOR, 4, L_SC                    );
      DBMS_SQL.COLUMN_VALUE(L_CELLSC_CURSOR, 5, L_LO                    );
      DBMS_SQL.COLUMN_VALUE(L_CELLSC_CURSOR, 6, L_LO_DESCRIPTION        );
      DBMS_SQL.COLUMN_VALUE(L_CELLSC_CURSOR, 7, L_LO_START_DATE         );
      DBMS_SQL.COLUMN_VALUE(L_CELLSC_CURSOR, 8, L_LO_END_DATE           );


      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_SD             (L_FETCHED_ROWS) := L_SD             ;
      A_CSNODE          (L_FETCHED_ROWS) := L_CSNODE          ;
      A_TPNODE      (L_FETCHED_ROWS) := L_TPNODE      ;
      A_SC             (L_FETCHED_ROWS) := L_SC             ;
      A_LO             (L_FETCHED_ROWS) := L_LO             ;
      A_LO_DESCRIPTION (L_FETCHED_ROWS) := L_LO_DESCRIPTION ;
      A_LO_START_DATE  (L_FETCHED_ROWS) := L_LO_START_DATE  ;
      A_LO_END_DATE    (L_FETCHED_ROWS) := L_LO_END_DATE    ;
      
      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_CELLSC_CURSOR);
      END IF;

   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_CELLSC_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
             'GetSdCellSample', L_SQLERRM);
      COMMIT;
      IF DBMS_SQL.IS_OPEN(L_CELLSC_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(L_CELLSC_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETSDCELLSAMPLE;







FUNCTION SAVESDCELLSAMPLE
(A_SD               IN   VARCHAR2,                 
 A_CSNODE           IN   UNAPIGEN.NUM_TABLE_TYPE,  
 A_TPNODE           IN   UNAPIGEN.NUM_TABLE_TYPE,  
 A_SC               IN   UNAPIGEN.VC20_TABLE_TYPE, 
 A_LO               IN   UNAPIGEN.VC20_TABLE_TYPE, 
 A_LO_DESCRIPTION   IN   UNAPIGEN.VC40_TABLE_TYPE, 
 A_LO_START_DATE    IN   UNAPIGEN.DATE_TABLE_TYPE, 
 A_LO_END_DATE      IN   UNAPIGEN.DATE_TABLE_TYPE, 
 A_NR_OF_ROWS       IN   NUMBER,                   
 A_MODIFY_REASON    IN   VARCHAR2)                 
RETURN NUMBER IS

L_LC                          VARCHAR2(2);
L_LC_VERSION                  VARCHAR2(20);
L_SS                          VARCHAR2(2);
L_LOG_HS                      CHAR(1);
L_LOG_HS_DETAILS              CHAR(1);
L_ALLOW_MODIFY                CHAR(1);
L_ACTIVE                      CHAR(1);
L_PT_VERSION                  VARCHAR2(20); 
L_SEQ_NO                      NUMBER;
L_HS_SEQ                      NUMBER;
L_CURRENT_TIMESTAMP                     TIMESTAMP WITH TIME ZONE;
L_TP                          NUMBER;
L_TP_UNIT                     VARCHAR2(20);
L_CS                          VARCHAR2(20);
L_PREVIOUS_CSNODE_VALIDATED   NUMBER(9);
L_PREVIOUS_TPNODE_VALIDATED   NUMBER(9);
L_OTHER_CELL                  BOOLEAN;
L_ENTRY_ALREADY_IN_HS         BOOLEAN;
L_CELL_SC_SEQ                 NUMBER;
L_LAST_SAMPLE_IN_CELL         BOOLEAN;
L_SC_LOG_HS                   CHAR(1);
L_SC_LOG_HS_DETAILS           CHAR(1);
L_OLD_SD                      VARCHAR2(20);
L_NEW_SD                      VARCHAR2(20);
L_SAMPLE_AFFECTED             BOOLEAN;
L_SQLERRM2                    VARCHAR2(255);
L_SQLERRM3                    VARCHAR2(255);
L_LAST_SC_UPDATED             VARCHAR2(20);
L_OLD_NR_SC_CURRENT           NUMBER;
L_NEW_NR_SC_CURRENT           NUMBER;

CURSOR L_CS_CURSOR(C_SD VARCHAR2, C_CSNODE NUMBER) IS
  SELECT CS
  FROM UTSDCS 
  WHERE SD = C_SD
  AND CSNODE = C_CSNODE;

CURSOR L_TP_CURSOR(C_SD VARCHAR2, C_TPNODE NUMBER) IS
SELECT TP, TP_UNIT
FROM UTSDTP 
WHERE SD = C_SD
  AND TPNODE= C_TPNODE;

CURSOR L_SDCELLSC_OLD_CURSOR(C_SD VARCHAR2, C_CSNODE NUMBER, C_TPNODE NUMBER, C_SC VARCHAR2) IS
SELECT *
FROM UTSDCELLSC
WHERE SD = C_SD
  AND CSNODE = C_CSNODE
  AND TPNODE = C_TPNODE
  AND SC = C_SC
  AND SEQ < 0 
ORDER BY SEQ;

CURSOR L_SDCELLSC_NEW_CURSOR(C_SD VARCHAR2, C_CSNODE NUMBER, C_TPNODE NUMBER, C_SC VARCHAR2) IS
SELECT *
FROM UTSDCELLSC
WHERE SD = C_SD
  AND CSNODE = C_CSNODE
  AND TPNODE = C_TPNODE
  AND SC = C_SC
  AND SEQ > 0 
ORDER BY SEQ;
L_SDCELLSC_OLD_REC   UTSDCELLSC%ROWTYPE;
L_SDCELLSC_NEW_REC   UTSDCELLSC%ROWTYPE;

CURSOR C_SD_CURSOR (C_SD VARCHAR2) IS
   SELECT NR_SC_CURRENT
     FROM UTSD
    WHERE SD = C_SD;

CURSOR L_MODIFIEDSC_CURSOR(C_SD VARCHAR2, C_CSNODE NUMBER, C_TPNODE NUMBER) IS
   
   (SELECT A.SC SC, 'DELETE' ACTION, '' NEWVALUE, '' OLDVALUE
    FROM UTSDCELLSC A
    WHERE A.SD = C_SD
    AND A.CSNODE = C_CSNODE
    AND A.TPNODE= C_TPNODE
    AND A.SEQ < 0
   MINUS
    SELECT A.SC SC, 'DELETE' ACTION, '' NEWVALUE, '' OLDVALUE
    FROM UTSDCELLSC A
    WHERE A.SD = C_SD
    AND A.CSNODE = C_CSNODE
    AND A.TPNODE= C_TPNODE
    AND A.SEQ > 0)
  UNION ALL
   
   (SELECT A.SC SC, 'NEW' ACTION, '' NEWVALUE, '' OLDVALUE
    FROM UTSDCELLSC A
    WHERE A.SD = C_SD
    AND A.CSNODE = C_CSNODE
    AND A.TPNODE= C_TPNODE
    AND A.SEQ > 0
   MINUS
    SELECT A.SC SC, 'NEW' ACTION, '' NEWVALUE, '' OLDVALUE
    FROM UTSDCELLSC A
    WHERE A.SD = C_SD
    AND A.CSNODE = C_CSNODE
    AND A.TPNODE= C_TPNODE
    AND A.SEQ < 0)
  UNION ALL
   
   (SELECT A.SC SC,  'LO_UPDATED' ACTION, A.LO NEWVALUE,  B.LO OLDVALUE
    FROM UTSDCELLSC A, UTSDCELLSC B
    WHERE A.SD = C_SD
        AND A.SD = B.SD
        AND A.CSNODE = C_CSNODE
        AND B.CSNODE = A.CSNODE
        AND A.TPNODE= C_TPNODE
        AND A.TPNODE= B.TPNODE
        AND A.SC = B.SC
        AND A.SEQ > 0
        AND B.SEQ < 0
        AND NVL(A.LO, ' ') <> NVL(B.LO, ' ') )
  UNION ALL
    
   (SELECT A.SC SC, 'LO_DESCR_UPDATED' ACTION, A.LO_DESCRIPTION NEWVALUE,  B.LO_DESCRIPTION OLDVALUE
    FROM UTSDCELLSC A, UTSDCELLSC B
    WHERE A.SD = C_SD
        AND A.SD = B.SD
        AND A.CSNODE = C_CSNODE
        AND B.CSNODE = A.CSNODE
        AND A.TPNODE= C_TPNODE
        AND A.TPNODE= B.TPNODE
        AND A.SEQ > 0 
        AND B.SEQ < 0
        AND A.SC = B.SC   
        
        
        AND NVL(A.LO_DESCRIPTION, ' ') <> NVL(B.LO_DESCRIPTION, ' ') )
  UNION ALL
    
   (SELECT A.SC SC, 'LO_START_DATE_UPDATED' ACTION, TO_CHAR(A.LO_START_DATE) NEWVALUE,  TO_CHAR(B.LO_START_DATE)  OLDVALUE
    FROM UTSDCELLSC A, UTSDCELLSC B
    WHERE A.SD = C_SD
        AND A.SD = B.SD
        AND A.CSNODE = C_CSNODE
        AND B.CSNODE = A.CSNODE
        AND A.TPNODE= C_TPNODE
        AND A.TPNODE= B.TPNODE
        AND A.SEQ > 0 
        AND B.SEQ < 0
        AND A.SC = B.SC
        
        
        AND NVL(A.LO_START_DATE, TO_TIMESTAMP_TZ('01/01/1970','DD/MM/YYYY')) <> NVL(B.LO_START_DATE, TO_TIMESTAMP_TZ('01/01/1970','DD/MM/YYYY')) )
  UNION ALL
    
   (SELECT A.SC SC, 'LO_END_DATE_UPDATED' ACTION, TO_CHAR(A.LO_END_DATE) NEWVALUE,  TO_CHAR(B.LO_END_DATE)  OLDVALUE
    FROM UTSDCELLSC A, UTSDCELLSC B
    WHERE A.SD = C_SD
        AND A.SD = B.SD
        AND A.CSNODE = C_CSNODE
        AND B.CSNODE = A.CSNODE
        AND A.TPNODE= C_TPNODE
        AND A.TPNODE= B.TPNODE
        AND A.SEQ > 0 
        AND B.SEQ < 0
        AND A.SC = B.SC
        
        
        AND NVL(A.LO_END_DATE, TO_TIMESTAMP_TZ('01/01/1970','DD/MM/YYYY')) <> NVL(B.LO_END_DATE, TO_TIMESTAMP_TZ('01/01/1970','DD/MM/YYYY')) )
ORDER BY 1, 2; 

   PROCEDURE UPDATELOCATIONCOUNTER
   (A_SD                              IN     VARCHAR2, 
    A_CS                              IN     VARCHAR2, 
    A_CSNODE                          IN     NUMBER,   
    A_TP                              IN     NUMBER,   
    A_TP_UNIT                         IN     VARCHAR2, 
    A_TPNODE                          IN     NUMBER,   
    A_SC                              IN     VARCHAR2, 
    A_OLD_SDCE_REC_LO                 IN     VARCHAR2, 
    A_OLD_SDCE_REC_LO_DESCRIPTION     IN     VARCHAR2, 
    A_OLD_SDCE_REC_LO_START_DATE      IN     DATE,     
    A_OLD_SDCE_REC_LO_END_DATE        IN     DATE,     
    A_NEW_SDCE_REC_LO                 IN     VARCHAR2, 
    A_NEW_SDCE_REC_LO_DESCRIPTION     IN     VARCHAR2, 
    A_NEW_SDCE_REC_LO_START_DATE      IN     DATE,     
    A_NEW_SDCE_REC_LO_END_DATE        IN     DATE,     
    A_MODIFY_ACTION                   IN     VARCHAR2)
    IS
    BEGIN
       IF A_LO IS NOT NULL THEN
          L_SQL_STRING := 'BEGIN :l_ret_code := UNLOCATION.UpdateLocationCounter'||
                                                   '(:a_sd, :a_cs, :a_csnode, :a_tp, :a_tp_unit, :a_tpnode, :a_sc,'||
                                                   ' :a_old_sdce_rec_lo, :a_old_sdce_rec_lo_description, '||
                                                   ' :a_old_sdce_rec_lo_start_date, :a_old_sdce_rec_lo_end_date,'||
                                                   ' :a_new_sdce_rec_lo, :a_new_sdce_rec_lo_description, '||
                                                   ' :a_new_sdce_rec_lo_start_date, :a_new_sdce_rec_lo_end_date,'||
                                                   ' :a_modify_action); END;';
          BEGIN
             EXECUTE IMMEDIATE L_SQL_STRING 
             USING OUT L_RET_CODE, IN A_SD, IN A_CS, IN A_CSNODE, IN A_TP, IN A_TP_UNIT, IN A_TPNODE, IN A_SC, IN A_OLD_SDCE_REC_LO, IN A_OLD_SDCE_REC_LO_DESCRIPTION, IN A_OLD_SDCE_REC_LO_START_DATE, IN A_OLD_SDCE_REC_LO_END_DATE, IN A_NEW_SDCE_REC_LO, IN A_NEW_SDCE_REC_LO_DESCRIPTION, IN A_NEW_SDCE_REC_LO_START_DATE, IN A_NEW_SDCE_REC_LO_END_DATE, IN A_MODIFY_ACTION;
          EXCEPTION
          WHEN OTHERS THEN
             L_SQLERRM := SUBSTR(SQLERRM,1,200);
             
             L_SQLERRM2 := 'UNLOCATION.UpdateLocationCounter failed for sd='||A_SD||
                           '#cs='||A_CS||'#csnode='||A_CSNODE||'#tp='||A_TP||'#tp_unit='||A_TP_UNIT||
                           '#sc='||A_SC||'#modify_action='||A_MODIFY_ACTION;
             L_SQLERRM3 := 'old_lo='||A_OLD_SDCE_REC_LO||
                           '#old_lo_start_date='||A_OLD_SDCE_REC_LO_START_DATE||
                           '#old_lo_end_date='||A_OLD_SDCE_REC_LO_END_DATE||
                           '#new_lo='||A_NEW_SDCE_REC_LO||
                           '#new_lo_start_date='||A_NEW_SDCE_REC_LO_START_DATE||
                           '#new_lo_end_date='||A_NEW_SDCE_REC_LO_END_DATE;             
             RAISE STPERROR;
          END;

          IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
             
             L_SQLERRM2 := 'UNLOCATION.UpdateLocationCounter ret_code='|| L_RET_CODE || '#sd='||A_SD||
                           '#cs='||A_CS||'#csnode='||A_CSNODE||'#tp='||A_TP||'#tp_unit='||A_TP_UNIT||
                           '#sc='||A_SC||'#modify_action='||A_MODIFY_ACTION;
             
             L_SQLERRM3 := 'old_lo='||A_OLD_SDCE_REC_LO||
                           '#old_lo_start_date='||A_OLD_SDCE_REC_LO_START_DATE||
                           '#old_lo_end_date='||A_OLD_SDCE_REC_LO_END_DATE||
                           '#new_lo='||A_NEW_SDCE_REC_LO||
                           '#new_lo_start_date='||A_NEW_SDCE_REC_LO_START_DATE||
                           '#new_lo_end_date='||A_NEW_SDCE_REC_LO_END_DATE;             
             RAISE STPERROR;
          END IF;
        END IF;            
    END UPDATELOCATIONCOUNTER;
    
BEGIN

   L_SQLERRM := NULL;
   L_SQLERRM2 := NULL;
   L_SQLERRM3 := NULL;
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_SD, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   
   OPEN C_SD_CURSOR(A_SD);
   FETCH C_SD_CURSOR INTO L_OLD_NR_SC_CURRENT;
   CLOSE C_SD_CURSOR;

   L_CURRENT_TIMESTAMP := CURRENT_TIMESTAMP;
   L_PT_VERSION := '';
   L_RET_CODE := UNAPIAUT.GETSDAUTHORISATION(A_SD, L_PT_VERSION, L_LC, L_LC_VERSION, L_SS,
                                             L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS, L_LOG_HS_DETAILS);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;
   
   IF A_NR_OF_ROWS > 0 THEN 
      UPDATE UTSD
      SET ALLOW_MODIFY = '#'
      WHERE SD = A_SD;
      IF SQL%ROWCOUNT < 1 THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
         RAISE STPERROR ;
      END IF;
   END IF;
   
   L_PREVIOUS_CSNODE_VALIDATED := NULL;
   L_PREVIOUS_TPNODE_VALIDATED := NULL;
   L_ENTRY_ALREADY_IN_HS := FALSE;
   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP

      
      
      IF A_CSNODE(L_SEQ_NO) IS NULL OR
         A_TPNODE(L_SEQ_NO) IS NULL THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR ;
      END IF;

      
      L_OTHER_CELL := FALSE;         
      IF L_PREVIOUS_CSNODE_VALIDATED IS NULL OR
         L_PREVIOUS_CSNODE_VALIDATED <> A_CSNODE(L_SEQ_NO) THEN

         L_OTHER_CELL := TRUE;         
         OPEN L_CS_CURSOR(A_SD, A_CSNODE(L_SEQ_NO));
         FETCH L_CS_CURSOR INTO L_CS;
         IF L_CS_CURSOR%NOTFOUND THEN
            CLOSE L_CS_CURSOR;
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INVALIDCSNODE;
            RAISE STPERROR ;
         END IF;
         CLOSE L_CS_CURSOR;
         L_PREVIOUS_CSNODE_VALIDATED := A_CSNODE(L_SEQ_NO);
      END IF;
      
      IF L_PREVIOUS_TPNODE_VALIDATED IS NULL OR
         L_PREVIOUS_TPNODE_VALIDATED <> A_TPNODE(L_SEQ_NO) THEN
         L_OTHER_CELL := TRUE;         
         OPEN L_TP_CURSOR(A_SD, A_TPNODE(L_SEQ_NO));
         FETCH L_TP_CURSOR INTO L_TP, L_TP_UNIT;
         IF L_TP_CURSOR%NOTFOUND THEN
            CLOSE L_TP_CURSOR;
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INVALIDTPNODE;
            RAISE STPERROR ;
         END IF;
         CLOSE L_TP_CURSOR;
         L_PREVIOUS_TPNODE_VALIDATED := A_TPNODE(L_SEQ_NO);
      END IF;

      
      IF L_OTHER_CELL THEN
         L_EVENT_TP := 'SdCellSamplesUpdated';
         L_EV_SEQ_NR := -1;
         L_EV_DETAILS := 'csnode=' || A_CSNODE(L_SEQ_NO) ||'#tpnode=' || A_TPNODE(L_SEQ_NO);
         L_RESULT := UNAPIEV.INSERTEVENT('SaveSdCellSample', UNAPIGEN.P_EVMGR_NAME, 'sd', A_SD, L_LC, 
                                         L_LC_VERSION, L_SS, L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);
         IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
            UNAPIGEN.P_TXN_ERROR := L_RESULT;
            RAISE STPERROR;
         END IF;
      END IF;

      IF L_ENTRY_ALREADY_IN_HS = FALSE THEN
         IF (L_LOG_HS = '1') THEN
            INSERT INTO UTSDHS(SD, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, 
                                 LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
            VALUES(A_SD,  UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                   'cell samples are updated', 
                   CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
            L_ENTRY_ALREADY_IN_HS := TRUE;
         END IF;

         L_HS_SEQ := 0;
         IF (L_LOG_HS_DETAILS = '1') THEN
             L_HS_SEQ := L_HS_SEQ + 1;
             INSERT INTO UTSDHSDETAILS(SD, TR_SEQ, EV_SEQ, SEQ, DETAILS)
             VALUES(A_SD, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_SEQ, 
                    'cell samples are updated');
            L_ENTRY_ALREADY_IN_HS := TRUE;
         END IF;
      END IF;

      IF L_OTHER_CELL THEN
         UPDATE UTSDCELLSC
         SET SEQ = -SEQ
         WHERE SD = A_SD
           AND CSNODE = A_CSNODE(L_SEQ_NO)
           AND TPNODE= A_TPNODE(L_SEQ_NO);
         L_CELL_SC_SEQ := 0;
      END IF;

      IF (NVL(A_SC(L_SEQ_NO), ' ') <> ' ') THEN
         L_CELL_SC_SEQ := L_CELL_SC_SEQ + 1;
         INSERT INTO UTSDCELLSC (SD, CSNODE, TPNODE, SEQ,  SC, LO, LO_DESCRIPTION, LO_START_DATE, LO_START_DATE_TZ, LO_END_DATE, LO_END_DATE_TZ)
         VALUES (A_SD,  A_CSNODE(L_SEQ_NO), A_TPNODE(L_SEQ_NO), L_CELL_SC_SEQ,  A_SC(L_SEQ_NO), A_LO(L_SEQ_NO), 
    A_LO_DESCRIPTION(L_SEQ_NO), A_LO_START_DATE(L_SEQ_NO), A_LO_START_DATE(L_SEQ_NO), A_LO_END_DATE(L_SEQ_NO), A_LO_END_DATE(L_SEQ_NO));
      END IF;

      
      L_LAST_SAMPLE_IN_CELL := FALSE;
      IF L_SEQ_NO = A_NR_OF_ROWS THEN
         L_LAST_SAMPLE_IN_CELL := TRUE;
      ELSE
         IF A_CSNODE(L_SEQ_NO) <> A_CSNODE(L_SEQ_NO+1) OR
            A_TPNODE(L_SEQ_NO) <> A_TPNODE(L_SEQ_NO+1) THEN
            L_LAST_SAMPLE_IN_CELL := TRUE;
         END IF;
      END IF;
      
      IF L_LAST_SAMPLE_IN_CELL = TRUE THEN
           
         
         
         
         
         
         
         
         

         
         FOR L_SC_REC IN L_MODIFIEDSC_CURSOR(A_SD, A_CSNODE(L_SEQ_NO), A_TPNODE(L_SEQ_NO)) LOOP
            L_EV_SEQ_NR := -1;
            L_EV_DETAILS := 'csnode=' || A_CSNODE(L_SEQ_NO) ||'#tpnode=' || A_TPNODE(L_SEQ_NO) ||'#sc=' || L_SC_REC.SC;
            L_SAMPLE_AFFECTED := FALSE;
            
            
            
            IF L_SC_REC.ACTION = 'DELETE' THEN
               L_EVENT_TP := 'SdCellSampleDeleted';
               L_WHAT_DESCRIPTION := 'cell sample "'||L_SC_REC.SC||'" for condition set "'|| L_CS ||
                                     '" and timepoint "'|| L_TP ||' '||L_TP_UNIT ||
                                     '" is removed from study "'||A_SD||'".';
               L_SAMPLE_AFFECTED := TRUE;
            ELSIF L_SC_REC.ACTION = 'NEW' THEN
               L_EVENT_TP := 'SdCellSampleAdded';
               L_WHAT_DESCRIPTION := 'cell Sample "'||L_SC_REC.SC||'" for condition set "'|| L_CS ||
                                     '" and timepoint "'|| L_TP ||' '||L_TP_UNIT ||
                                     '" is added to study "'||A_SD||'".';
               L_SAMPLE_AFFECTED := TRUE;
            ELSIF L_SC_REC.ACTION = 'LO_UPDATED' THEN
               L_EVENT_TP := 'SdCellSampleLocationUpdated';
               L_WHAT_DESCRIPTION := 'location of cell sample  "'||L_SC_REC.SC||
                                     '" for condition set "'|| L_CS ||
                                     '" and timepoint "'|| L_TP ||' '||L_TP_UNIT ||
                                     '" in study "'||A_SD||'" is changed from "'||
                                     L_SC_REC.OLDVALUE || '" to "'||L_SC_REC.NEWVALUE ||'".';
            ELSIF L_SC_REC.ACTION = 'LO_DESCR_UPDATED' THEN
               L_EV_SEQ_NR := 0;        
               L_WHAT_DESCRIPTION := 'location description of cell sample "'||L_SC_REC.SC||
                                     '" for condition set "'|| L_CS ||
                                     '" and timepoint "'|| L_TP ||' '||L_TP_UNIT ||
                                     '" in study "'||A_SD||'" is changed from "'||
                                     L_SC_REC.OLDVALUE || '" to "'||L_SC_REC.NEWVALUE ||'".';
            ELSIF L_SC_REC.ACTION = 'LO_START_DATE_UPDATED' THEN
               L_EV_SEQ_NR := 0;        
               L_WHAT_DESCRIPTION := 'location start date of cell sample "'||L_SC_REC.SC||
                                     '" for condition set "'|| L_CS ||
                                     '" and timepoint "'|| L_TP ||' '||L_TP_UNIT||
                                     '" in study "'||A_SD||'" is changed from "'||
                                     L_SC_REC.OLDVALUE || '" to "'||L_SC_REC.NEWVALUE ||'".';
            ELSIF L_SC_REC.ACTION = 'LO_END_DATE_UPDATED' THEN
               
               
               IF L_SC_REC.OLDVALUE IS NULL AND
                  L_SC_REC.NEWVALUE IS NOT NULL THEN
                  L_EV_SEQ_NR := -1;                  
                  L_EVENT_TP := 'SdCellSampleLocationEnded';
               ELSE
                  L_EV_SEQ_NR := 0;        
               END IF;
               L_WHAT_DESCRIPTION := 'location end date of cell sample "'||L_SC_REC.SC||
                                     '" for condition set "'|| L_CS ||
                                     '" and timepoint "'|| L_TP ||' '||L_TP_UNIT||
                                     '" in study "'||A_SD||'" is changed from "'||
                                     L_SC_REC.OLDVALUE || '" to "'||L_SC_REC.NEWVALUE ||'".';
            END IF;                     
            IF L_EV_SEQ_NR < 0 THEN
               L_RESULT := UNAPIEV.INSERTEVENT('SaveSdCellSample', UNAPIGEN.P_EVMGR_NAME, 'sd', A_SD, L_LC, 
                                               L_LC_VERSION, L_SS, L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);
               IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
                  UNAPIGEN.P_TXN_ERROR := L_RESULT;
                  RAISE STPERROR;
               END IF;
            END IF;
            IF (L_LOG_HS_DETAILS = '1') THEN
               L_HS_SEQ := L_HS_SEQ + 1;
               INSERT INTO UTSDHSDETAILS(SD, TR_SEQ, EV_SEQ, SEQ, DETAILS)
               VALUES(A_SD, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR,L_HS_SEQ, L_WHAT_DESCRIPTION);
            END IF;            
            
            
            
            IF L_SAMPLE_AFFECTED THEN
               L_NEW_SD := NULL;
               L_OLD_SD := NULL;
               
               IF L_EVENT_TP = 'SdCellSampleAdded' THEN
                  L_NEW_SD := A_SD;
                  UPDATE UTSC
                  SET SD= L_NEW_SD
                  WHERE SC = L_SC_REC.SC
                  AND SD IS NULL
                  RETURNING LOG_HS, LOG_HS_DETAILS
                  INTO L_SC_LOG_HS, L_SC_LOG_HS_DETAILS;         
               ELSE 
                  L_OLD_SD := A_SD;
                  UPDATE UTSC
                  SET SD= NULL
                  WHERE SC = L_SC_REC.SC
                  AND SD = A_SD
                  RETURNING LOG_HS, LOG_HS_DETAILS
                  INTO L_SC_LOG_HS, L_SC_LOG_HS_DETAILS;         
               END IF;

               
               IF SQL%ROWCOUNT > 0 THEN
                  IF L_SC_LOG_HS = '1' THEN
                     INSERT INTO UTSCHS (SC, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
                     VALUES (L_SC_REC.SC, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                             'sample "'||L_SC_REC.SC||'" is updated.', 
                             CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
                  END IF;
                  IF L_SC_LOG_HS_DETAILS = '1' THEN
                     L_HS_SEQ := L_HS_SEQ + 1;
                     INSERT INTO UTSCHSDETAILS (SC, TR_SEQ, EV_SEQ, SEQ, DETAILS)
                     VALUES (L_SC_REC.SC, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_SEQ, 
                             'sample "'||L_SC_REC.SC||'" is updated: property <sd> changed value from "'||
                             L_OLD_SD||'" to "'||L_NEW_SD||'".');
                  END IF;

                  
                  
                  
                  L_RET_CODE := UNAPISC.UPDATELINKEDSCII(
                                    A_SC                => L_SC_REC.SC,            
                                    A_SC_STD_PROPERTY   => 'sd',
                                    A_SC_CREATION       => '0',    
                                    A_ST                => '',         
                                    A_ST_VERSION        => '',
                                    A_DESCRIPTION       => '',
                                    A_SHELF_LIFE_VAL    => 0,
                                    A_SHELF_LIFE_UNIT   => '',
                                    A_SAMPLING_DATE     => '',
                                    A_CREATION_DATE     => NULL,
                                    A_CREATED_BY        => '',
                                    A_EXEC_START_DATE   => NULL,
                                    A_EXEC_END_DATE     => NULL,
                                    A_PRIORITY          => 0,
                                    A_LABEL_FORMAT      => '',
                                    A_DESCR_DOC         => '',
                                    A_DESCR_DOC_VERSION => '',
                                    A_RQ                => '',
                                    A_SD                => L_NEW_SD,  
                                    A_DATE1             => NULL,
                                    A_DATE2             => NULL,
                                    A_DATE3             => NULL,
                                    A_DATE4             => NULL,
                                    A_DATE5             => NULL,
                                    A_ALLOW_ANY_PP      => '',                                                        
                                    A_SC_CLASS          => '');                                                        
                  IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
                     UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
                     RAISE STPERROR;
                  END IF;
               END IF;
            END IF;
            
            
            
            
            
            IF NVL(L_LAST_SC_UPDATED, ' ') <> L_SC_REC.SC THEN
               IF L_SC_REC.ACTION = 'DELETE' THEN
                  
                  OPEN L_SDCELLSC_OLD_CURSOR(A_SD, A_CSNODE(L_SEQ_NO), A_TPNODE(L_SEQ_NO), L_SC_REC.SC);
                  FETCH L_SDCELLSC_OLD_CURSOR
                  INTO L_SDCELLSC_OLD_REC;
                  CLOSE L_SDCELLSC_OLD_CURSOR;
                  L_SDCELLSC_NEW_REC := NULL;

                  UPDATELOCATIONCOUNTER (A_SD, L_CS, A_CSNODE(L_SEQ_NO), L_TP, L_TP_UNIT,
                                         A_TPNODE(L_SEQ_NO), L_SC_REC.SC,
                                         L_SDCELLSC_OLD_REC.LO, L_SDCELLSC_OLD_REC.LO_DESCRIPTION,
                                         L_SDCELLSC_OLD_REC.LO_START_DATE, L_SDCELLSC_OLD_REC.LO_END_DATE, 
                                         L_SDCELLSC_NEW_REC.LO, L_SDCELLSC_NEW_REC.LO_DESCRIPTION,
                                         L_SDCELLSC_NEW_REC.LO_START_DATE, L_SDCELLSC_NEW_REC.LO_END_DATE, 
                                         'SDCELLSC_DELETED');
               ELSIF L_SC_REC.ACTION = 'NEW' THEN
                  
                  L_SDCELLSC_OLD_REC := NULL;
                  OPEN L_SDCELLSC_NEW_CURSOR(A_SD, A_CSNODE(L_SEQ_NO), A_TPNODE(L_SEQ_NO), L_SC_REC.SC);
                  FETCH L_SDCELLSC_NEW_CURSOR
                  INTO L_SDCELLSC_NEW_REC;
                  CLOSE L_SDCELLSC_NEW_CURSOR;
                  UPDATELOCATIONCOUNTER (A_SD, L_CS, A_CSNODE(L_SEQ_NO), L_TP, L_TP_UNIT,
                                         A_TPNODE(L_SEQ_NO), L_SC_REC.SC,
                                         L_SDCELLSC_OLD_REC.LO, L_SDCELLSC_OLD_REC.LO_DESCRIPTION,
                                         L_SDCELLSC_OLD_REC.LO_START_DATE, L_SDCELLSC_OLD_REC.LO_END_DATE, 
                                         L_SDCELLSC_NEW_REC.LO, L_SDCELLSC_NEW_REC.LO_DESCRIPTION,
                                         L_SDCELLSC_NEW_REC.LO_START_DATE, L_SDCELLSC_NEW_REC.LO_END_DATE, 
                                         'SDCELLSC_ADDED');

               ELSE 
                  
                  
                  OPEN L_SDCELLSC_OLD_CURSOR(A_SD, A_CSNODE(L_SEQ_NO), A_TPNODE(L_SEQ_NO), L_SC_REC.SC);
                  FETCH L_SDCELLSC_OLD_CURSOR
                  INTO L_SDCELLSC_OLD_REC;
                  CLOSE L_SDCELLSC_OLD_CURSOR;

                  OPEN L_SDCELLSC_NEW_CURSOR(A_SD, A_CSNODE(L_SEQ_NO), A_TPNODE(L_SEQ_NO), L_SC_REC.SC);
                  FETCH L_SDCELLSC_NEW_CURSOR
                  INTO L_SDCELLSC_NEW_REC;
                  CLOSE L_SDCELLSC_NEW_CURSOR;

                  UPDATELOCATIONCOUNTER (A_SD, L_CS, A_CSNODE(L_SEQ_NO), L_TP, L_TP_UNIT,
                                         A_TPNODE(L_SEQ_NO), L_SC_REC.SC,
                                         L_SDCELLSC_OLD_REC.LO, L_SDCELLSC_OLD_REC.LO_DESCRIPTION,
                                         L_SDCELLSC_OLD_REC.LO_START_DATE, L_SDCELLSC_OLD_REC.LO_END_DATE, 
                                         L_SDCELLSC_NEW_REC.LO, L_SDCELLSC_NEW_REC.LO_DESCRIPTION,
                                         L_SDCELLSC_NEW_REC.LO_START_DATE, L_SDCELLSC_NEW_REC.LO_END_DATE, 
                                         'SDCELLSC_UPDATED');

               END IF; 
               
               L_LAST_SC_UPDATED := L_SC_REC.SC;
            END IF;            
         END LOOP;

         
         
         
         DELETE FROM UTSDCELLSC
         WHERE SD = A_SD
         AND CSNODE = A_CSNODE(L_SEQ_NO)
         AND TPNODE= A_TPNODE(L_SEQ_NO)
         AND SEQ <0;
      END IF;      
   END LOOP;
   
   
   UPDATE UTSD
      SET NR_SC_CURRENT = (SELECT COUNT(*) FROM UTSDCELLSC WHERE SD = A_SD)
    WHERE SD = A_SD
   RETURNING NR_SC_CURRENT
     INTO L_NEW_NR_SC_CURRENT;

   IF (L_LOG_HS_DETAILS = '1') THEN
      IF NVL((L_OLD_NR_SC_CURRENT <> L_NEW_NR_SC_CURRENT), TRUE) AND 
         NOT(L_OLD_NR_SC_CURRENT IS NULL AND L_NEW_NR_SC_CURRENT IS NULL) THEN 
         L_WHAT_DESCRIPTION := 'study "'||A_SD||'" is updated: property <nr_sc_current> changed value from "'||
                               L_OLD_NR_SC_CURRENT||'" to "'||L_NEW_NR_SC_CURRENT||'".';
         L_HS_SEQ := L_HS_SEQ + 1;
         INSERT INTO UTSDHSDETAILS(SD, TR_SEQ, EV_SEQ, SEQ, DETAILS)
         VALUES(A_SD, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_SEQ, L_WHAT_DESCRIPTION);
      END IF;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
    WHEN OTHERS THEN
    IF SQLCODE <> 1 THEN
        UNAPIGEN.LOGERROR('SaveSdCellSample', SQLERRM);
    ELSIF L_SQLERRM IS NOT NULL THEN
        UNAPIGEN.LOGERROR('SaveSdCellSample', L_SQLERRM);
    END IF;
    IF L_SQLERRM2 IS NOT NULL THEN
        UNAPIGEN.LOGERROR('SaveSdCellSample', L_SQLERRM2);
    END IF;
    IF L_SQLERRM3 IS NOT NULL THEN
        UNAPIGEN.LOGERROR('SaveSdCellSample', L_SQLERRM3);
    END IF;
    IF L_CS_CURSOR%ISOPEN THEN
       CLOSE L_CS_CURSOR;
    END IF;
    IF L_TP_CURSOR%ISOPEN THEN
       CLOSE L_TP_CURSOR;
    END IF;
    IF L_SDCELLSC_OLD_CURSOR%ISOPEN THEN
       CLOSE L_SDCELLSC_OLD_CURSOR;
    END IF;
    IF L_SDCELLSC_NEW_CURSOR%ISOPEN THEN
       CLOSE L_SDCELLSC_NEW_CURSOR;
    END IF;
    IF C_SD_CURSOR%ISOPEN THEN
       CLOSE C_SD_CURSOR;
    END IF;
    RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveSdCellSample'));
END SAVESDCELLSAMPLE;

FUNCTION EVALUATESDCSTIMEPOINTS                       
(A_SD                       IN        VARCHAR2,       
 A_CSNODE                   IN        VARCHAR2)       
RETURN NUMBER IS

L_REF_DATE               TIMESTAMP WITH TIME ZONE;
L_IN_DATE                TIMESTAMP WITH TIME ZONE;
L_COUNT_DELAYED_EVENTS   INTEGER;

CURSOR L_SDCELLSC_CURSOR(A_SD VARCHAR2, A_CSNODE NUMBER) IS
   SELECT A.CSNODE, A.CS, A.DESCRIPTION, A.T0_DATE,
          B.SC,
          C.TPNODE, C.TP, C.TP_UNIT,
          C.ALLOW_UPFRONT, C.ALLOW_UPFRONT_UNIT,
          C.ALLOW_OVERDUE, C.ALLOW_OVERDUE_UNIT,
          D.ST_VERSION
   FROM UTSC D, UTSDTP C, UTSDCELLSC B, UTSDCS A
   WHERE A.SD = A_SD
   AND A.CSNODE = NVL(A_CSNODE, A.CSNODE)
   AND A.SD = B.SD
   AND A.CSNODE = B.CSNODE
   AND B.SD = C.SD
   AND B.TPNODE = C.TPNODE
   AND B.SC = D.SC;

   
   PROCEDURE INSERTDELAYEDTIMEPOINTEVENT
   (A_EVENT_TP    IN     VARCHAR2,
    A_EV_DETAILS  IN     VARCHAR2,
    A_SC          IN     VARCHAR2,
    A_DELAY       IN     NUMBER,
    A_DELAY_UNIT  IN     VARCHAR2,
    A_T0_DATE     IN OUT DATE)
   IS
   L_DELAYED_TILL           TIMESTAMP WITH TIME ZONE;       
   BEGIN
      
      IF A_DELAY IS NULL OR
         A_DELAY_UNIT NOT IN ('MI','HH','DD','WW','MM','YY','MF','YF') THEN
         L_DELAYED_TILL := NULL;
      ELSE
         
         L_DELAYED_TILL := NULL;
         L_RET_CODE := UNAPIAUT.CALCULATEDELAY(A_DELAY        => A_DELAY,
                                               A_DELAY_UNIT   => A_DELAY_UNIT,
                                               A_REF_DATE     => A_T0_DATE,
                                               A_DELAYED_TILL => L_DELAYED_TILL);
         IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
            L_SQLERRM := 'CalculateDelay#ret_code='||L_RET_CODE||'#delay='||A_DELAY||
                         '#delay_unit='||A_DELAY_UNIT||
                         '#ref_date='||TO_CHAR(A_T0_DATE, UNAPIGEN.P_JOBS_DATE_FORMAT);
            UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
            RAISE STPERROR;
         END IF;
         
         L_EV_SEQ_NR  := -1;
         L_RESULT := UNAPIEV.INSERTTIMEDEVENT(A_API_NAME          => 'EvaluateSdCsTimePoints',
                                              A_EVMGR_NAME        => UNAPIGEN.P_EVMGR_NAME, 
                                              A_OBJECT_TP         => 'sc',
                                              A_OBJECT_ID         => A_SC, 
                                              A_OBJECT_LC         => NULL,
                                              A_OBJECT_LC_VERSION => NULL, 
                                              A_OBJECT_SS         => NULL, 
                                              A_EV_TP             => A_EVENT_TP,
                                              A_EV_DETAILS        => L_EV_DETAILS,
                                              A_SEQ_NR            => L_EV_SEQ_NR,
                                              A_EXECUTE_AT        => L_DELAYED_TILL);
         IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
            L_SQLERRM := 'InsertTimedEvent#ret_code='||L_RET_CODE||'#sc='||A_SC||
                         '#ev_tp='||A_EVENT_TP||
                         '#ev_details='||A_EV_DETAILS||
                         '#execute_at='||TO_CHAR(L_DELAYED_TILL, UNAPIGEN.P_JOBS_DATE_FORMAT);
            UNAPIGEN.P_TXN_ERROR := L_RESULT;
            RAISE STPERROR;
         END IF;
      END IF;
      A_T0_DATE := L_DELAYED_TILL;
   END INSERTDELAYEDTIMEPOINTEVENT;

BEGIN




















   L_SQLERRM :=NULL;
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
   
   FOR L_SDCELLSC_REC IN L_SDCELLSC_CURSOR(A_SD, A_CSNODE) LOOP
      L_EV_DETAILS := 'sd='||A_SD||
                      '#csnode='||L_SDCELLSC_REC.CSNODE||
                      '#tpnode='||L_SDCELLSC_REC.TPNODE||
                      '#st_version='||L_SDCELLSC_REC.ST_VERSION;
      
      SELECT COUNT('X')
      INTO L_COUNT_DELAYED_EVENTS
      FROM UTEVTIMED
      WHERE OBJECT_TP = 'sc'
      AND OBJECT_ID = L_SDCELLSC_REC.SC
      AND EV_DETAILS = L_EV_DETAILS
      AND EV_TP IN ('TpReached', 'TpUpFront', 'TpOverdue');

      IF L_COUNT_DELAYED_EVENTS = 0 THEN
         INSERTDELAYEDTIMEPOINTEVENT(A_EVENT_TP     => 'TpReached',
                                     A_EV_DETAILS   => L_EV_DETAILS,
                                     A_SC           => L_SDCELLSC_REC.SC,
                                     A_DELAY        => L_SDCELLSC_REC.TP,
                                     A_DELAY_UNIT   => L_SDCELLSC_REC.TP_UNIT,
                                     A_T0_DATE      => L_SDCELLSC_REC.T0_DATE);
         L_REF_DATE := L_SDCELLSC_REC.T0_DATE; 
                                               

         IF L_REF_DATE IS NOT NULL THEN
            IF L_SDCELLSC_REC.ALLOW_UPFRONT > 0 THEN
               L_IN_DATE := L_REF_DATE;
               INSERTDELAYEDTIMEPOINTEVENT(A_EVENT_TP     => 'TpUpFront',
                                           A_EV_DETAILS   => L_EV_DETAILS,
                                           A_SC           => L_SDCELLSC_REC.SC,
                                           A_DELAY        => -L_SDCELLSC_REC.ALLOW_UPFRONT,
                                           A_DELAY_UNIT   => L_SDCELLSC_REC.ALLOW_UPFRONT_UNIT,
                                           A_T0_DATE      => L_IN_DATE);
            END IF;


            IF L_SDCELLSC_REC.ALLOW_OVERDUE > 0 THEN
               L_IN_DATE := L_REF_DATE;
               INSERTDELAYEDTIMEPOINTEVENT(A_EVENT_TP     => 'TpOverdue',
                                           A_EV_DETAILS   => L_EV_DETAILS,
                                           A_SC           => L_SDCELLSC_REC.SC,
                                           A_DELAY        => L_SDCELLSC_REC.ALLOW_OVERDUE,
                                           A_DELAY_UNIT   => L_SDCELLSC_REC.ALLOW_OVERDUE_UNIT,
                                           A_T0_DATE      => L_IN_DATE);
            END IF;

            
            
            L_EVENT_TP := 'SdScTpReachedSet';
            L_EV_SEQ_NR := -1;
            L_EV_DETAILS := 'sd='||A_SD||'#csnode='||L_SDCELLSC_REC.CSNODE||
                            '#SdScTpReached='||TO_CHAR(L_REF_DATE, UNAPISD.TP_REACHED_DATE_FORMAT);
            L_RESULT := UNAPIEV.INSERTEVENT(A_API_NAME          => 'EvaluateSdCsTimePoints',
                                            A_EVMGR_NAME        => UNAPIGEN.P_EVMGR_NAME, 
                                            A_OBJECT_TP         => 'sc',
                                            A_OBJECT_ID         => L_SDCELLSC_REC.SC, 
                                            A_OBJECT_LC         => NULL,
                                            A_OBJECT_LC_VERSION => NULL, 
                                            A_OBJECT_SS         => NULL, 
                                            A_EV_TP             => L_EVENT_TP,
                                            A_EV_DETAILS        => L_EV_DETAILS,
                                            A_SEQ_NR            => L_EV_SEQ_NR);

            IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
               UNAPIGEN.P_TXN_ERROR := L_RESULT;
               RAISE STPERROR;
            END IF;
         END IF;
      END IF;
   END LOOP;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);
   
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> -1 THEN
      L_SQLERRM := SUBSTR(SQLERRM, 1, 250);
   END IF;
   UNAPIGEN.LOGERROR('EvaluateSdCsTimePoints', L_SQLERRM);
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'EvaluateSdCsTimePoints'));
END EVALUATESDCSTIMEPOINTS;

FUNCTION GETSDCSCONDITION
(A_SD             OUT     UNAPIGEN.VC20_TABLE_TYPE,    
 A_CSNODE         OUT     UNAPIGEN.NUM_TABLE_TYPE,     
 A_CS             OUT     UNAPIGEN.VC20_TABLE_TYPE,    
 A_CN             OUT     UNAPIGEN.VC20_TABLE_TYPE,    
 A_VALUE          OUT     UNAPIGEN.VC40_TABLE_TYPE,    
 A_NR_OF_ROWS     IN OUT  NUMBER,                      
 A_WHERE_CLAUSE   IN      VARCHAR2)                    
RETURN NUMBER IS

L_SD                 VARCHAR2(20);
L_CS                 VARCHAR2(20);
L_CSNODE             NUMBER;
L_CN                 VARCHAR2(20);
L_VALUE              VARCHAR2(40);
L_SDCSCN_CURSOR      INTEGER;
   
BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
       RETURN(UNAPIGEN.DBERR_WHERECLAUSE);
   ELSIF
     UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
     L_WHERE_CLAUSE := 'WHERE sd = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                       ''' ORDER BY csnode';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_SDCSCN_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT sd, csnode, cs, cn, value ' ||
                   'FROM dd' || UNAPIGEN.P_DD || '.uvsdcscn ' || L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_SDCSCN_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_SDCSCN_CURSOR, 1, L_SD          , 20);
   DBMS_SQL.DEFINE_COLUMN(L_SDCSCN_CURSOR, 2, L_CSNODE          );
   DBMS_SQL.DEFINE_COLUMN(L_SDCSCN_CURSOR, 3, L_CS          , 20);
   DBMS_SQL.DEFINE_COLUMN(L_SDCSCN_CURSOR, 4, L_CN          , 20);
   DBMS_SQL.DEFINE_COLUMN(L_SDCSCN_CURSOR, 5, L_VALUE       , 40);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_SDCSCN_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP

      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_SDCSCN_CURSOR, 1, L_SD         );
      DBMS_SQL.COLUMN_VALUE(L_SDCSCN_CURSOR, 2, L_CSNODE     );
      DBMS_SQL.COLUMN_VALUE(L_SDCSCN_CURSOR, 3, L_CS         );
      DBMS_SQL.COLUMN_VALUE(L_SDCSCN_CURSOR, 4, L_CN         );
      DBMS_SQL.COLUMN_VALUE(L_SDCSCN_CURSOR, 5, L_VALUE      );

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_SD          (L_FETCHED_ROWS) := L_SD         ;
      A_CSNODE      (L_FETCHED_ROWS) := L_CSNODE     ;
      A_CS          (L_FETCHED_ROWS) := L_CS         ;
      A_CN          (L_FETCHED_ROWS) := L_CN         ;
      A_VALUE       (L_FETCHED_ROWS) := L_VALUE      ;
                                          
      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_SDCSCN_CURSOR);
      END IF;

   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_SDCSCN_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
             'GetSdCsCondition', L_SQLERRM);
      COMMIT;
      IF DBMS_SQL.IS_OPEN(L_SDCSCN_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(L_SDCSCN_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETSDCSCONDITION;

FUNCTION SAVESDCSCONDITION
(A_SD             IN     VARCHAR2,                    
 A_CSNODE         IN     UNAPIGEN.NUM_TABLE_TYPE,     
 A_CS             IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_CN             IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_VALUE          IN     UNAPIGEN.VC40_TABLE_TYPE,    
 A_MODIFY_FLAG    IN OUT UNAPIGEN.NUM_TABLE_TYPE,     
 A_NR_OF_ROWS     IN     NUMBER,                      
 A_MODIFY_REASON  IN     VARCHAR2)                    
RETURN NUMBER IS

L_LC                            VARCHAR2(2);
L_LC_VERSION                    VARCHAR2(20);
L_SS                            VARCHAR2(2);
L_LOG_HS                        CHAR(1);
L_LOG_HS_DETAILS                CHAR(1);
L_ALLOW_MODIFY                  CHAR(1);
L_ACTIVE                        CHAR(1);
L_PT_VERSION                    VARCHAR2(20);
L_SEQ_NO                        NUMBER;
L_HS_SEQ                        NUMBER;
L_OLD_VALUE                     VARCHAR2(40);

CURSOR L_SDCSCN_CURSOR(C_SD VARCHAR2, C_CSNODE NUMBER, C_CS VARCHAR2, C_CN VARCHAR2) IS
SELECT VALUE 
FROM UTSDCSCN
WHERE SD = C_SD
AND CSNODE = C_CSNODE
AND CS = C_CS
AND CN = C_CN
ORDER BY CNSEQ;
 
BEGIN

   L_SQLERRM := NULL;
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_SD, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   L_PT_VERSION := '';
   L_RET_CODE := UNAPIAUT.GETSDAUTHORISATION(A_SD, L_PT_VERSION, L_LC, L_LC_VERSION, L_SS,
                                             L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS, L_LOG_HS_DETAILS);


   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTSD
   SET ALLOW_MODIFY = '#'
   WHERE SD = A_SD;
   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR ;
   END IF;

   L_EVENT_TP := 'SdCsConditionUpdated';
   L_EV_SEQ_NR := -1;
   L_EV_DETAILS := '';
   L_RESULT := UNAPIEV.INSERTEVENT('SaveSdCsCondition', UNAPIGEN.P_EVMGR_NAME, 'sd', A_SD, L_LC, 
                                   L_LC_VERSION, L_SS, L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF (L_LOG_HS = '1') THEN
      INSERT INTO UTSDHS(SD, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, 
                           LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES(A_SD,  UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
             'condition set condition values of study "'|| A_SD ||'" are updated.', 
             CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   L_HS_SEQ := 0;
   IF (L_LOG_HS_DETAILS = '1') THEN
      L_HS_SEQ := L_HS_SEQ + 1;
      INSERT INTO UTSDHSDETAILS(SD, TR_SEQ, EV_SEQ, SEQ, DETAILS)
      VALUES(A_SD, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_SEQ, 
             'condition set condition values of study "'|| A_SD ||'" are updated.');
   END IF;
   
   FOR L_SEQ_NO IN 1.. A_NR_OF_ROWS LOOP
      
      IF A_CS(L_SEQ_NO) IS NULL THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID ;
         RAISE STPERROR;
      END IF;
      IF NVL(A_CSNODE(L_SEQ_NO), 0) = 0 THEN
          UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
          RAISE STPERROR;
      END IF;        
      IF A_CN(L_SEQ_NO) IS NULL THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID ;
         RAISE STPERROR;
      END IF;

      IF A_MODIFY_FLAG(L_SEQ_NO) NOT IN (UNAPIGEN.DBERR_SUCCESS,
                                         UNAPIGEN.MOD_FLAG_INSERT,
                                         UNAPIGEN.MOD_FLAG_UPDATE,
                                         UNAPIGEN.MOD_FLAG_DELETE) THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INVALMODFLAG ;
         RAISE STPERROR;
      END IF;                                         
      
      
      IF A_MODIFY_FLAG(L_SEQ_NO) = UNAPIGEN.DBERR_SUCCESS THEN
         NULL; 
      ELSIF A_MODIFY_FLAG(L_SEQ_NO) = UNAPIGEN.MOD_FLAG_INSERT THEN
         
         
         INSERT INTO UTSDCSCN (SD,  CS, CSNODE, CN, CNSEQ, VALUE)
         SELECT A_SD,  A_CS(L_SEQ_NO), A_CSNODE(L_SEQ_NO), A_CN(L_SEQ_NO), 
                NVL(MAX(CNSEQ),0)+1, A_VALUE(L_SEQ_NO)
         FROM UTSDCSCN
         WHERE SD = A_SD
         AND CS = A_CS(L_SEQ_NO)
         AND CSNODE = A_CSNODE(L_SEQ_NO);

         IF (L_LOG_HS_DETAILS = '1') THEN
            L_WHAT_DESCRIPTION := 'condition "'||A_CN(L_SEQ_NO)||
                                  '" with value "'||A_VALUE(L_SEQ_NO)||
                                  '" is added in condition set "'||A_CS(L_SEQ_NO)||
                                  '" in study "'||A_SD||'".';
            L_HS_SEQ := L_HS_SEQ + 1;
            INSERT INTO UTSDHSDETAILS(SD, TR_SEQ, EV_SEQ, SEQ, DETAILS)
            VALUES(A_SD, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR,L_HS_SEQ, L_WHAT_DESCRIPTION);
         END IF;
      ELSIF A_MODIFY_FLAG(L_SEQ_NO) = UNAPIGEN.MOD_FLAG_UPDATE THEN
         OPEN L_SDCSCN_CURSOR(A_SD, A_CSNODE(L_SEQ_NO), A_CS(L_SEQ_NO), A_CN(L_SEQ_NO));
         FETCH L_SDCSCN_CURSOR
         INTO L_OLD_VALUE;
         IF L_SDCSCN_CURSOR%NOTFOUND THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
            CLOSE L_SDCSCN_CURSOR;
            RAISE STPERROR ;             
         END IF;
         CLOSE L_SDCSCN_CURSOR;

         UPDATE UTSDCSCN
         SET VALUE = A_VALUE(L_SEQ_NO)
         WHERE SD     = A_SD
           AND CSNODE = A_CSNODE(L_SEQ_NO)
           AND CS     = A_CS(L_SEQ_NO)
           AND CN     = A_CN(L_SEQ_NO);
            
         IF SQL%ROWCOUNT > 1 THEN
            L_SQLERRM := 'Mutiple valued conditions use for sd='||A_SD||
                         '#csnode='||A_CSNODE(L_SEQ_NO)||
                         'cs='||A_CS(L_SEQ_NO)||'#cn='||A_CN(L_SEQ_NO)||
                         '. Use DELETE+INSERT instead of UPDATE';
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
            RAISE STPERROR;                         
         END IF;

         
         IF (L_LOG_HS_DETAILS = '1') THEN
            IF (NVL(A_VALUE(L_SEQ_NO), ' ') <> NVL(L_OLD_VALUE , ' ')) THEN
               L_WHAT_DESCRIPTION := 'condition "'||A_CN(L_SEQ_NO)||
                                     '" is changed from "'||L_OLD_VALUE||
                                     '" to "'||A_VALUE(L_SEQ_NO)||
                                     '" in condition set "'||A_CS(L_SEQ_NO)||
                                     '" of study "'||A_SD||'".';
               L_HS_SEQ := L_HS_SEQ + 1;
               INSERT INTO UTSDHSDETAILS(SD, TR_SEQ, EV_SEQ, SEQ, DETAILS)
               VALUES(A_SD, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR,L_HS_SEQ, L_WHAT_DESCRIPTION);
            END IF;
         END IF;
      ELSIF A_MODIFY_FLAG(L_SEQ_NO) = UNAPIGEN.MOD_FLAG_DELETE THEN

         DELETE FROM UTSDCSCN
         WHERE SD                  = A_SD
           AND CSNODE              = A_CSNODE(L_SEQ_NO)
           AND CS                  = A_CS(L_SEQ_NO)
           AND CN                  = A_CN(L_SEQ_NO)
           AND NVL(VALUE, 'NULL')  = NVL(A_VALUE(L_SEQ_NO), NVL(VALUE, 'NULL'));

         IF SQL%ROWCOUNT = 0 THEN
            L_SQLERRM := 'Condition to be deleted does not exist.sd='||A_SD||
                         '#csnode='||A_CSNODE(L_SEQ_NO)||
                         '#cs='||A_CS(L_SEQ_NO)||
                         '#cn='||A_CN(L_SEQ_NO);
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
            RAISE STPERROR;                         
         END IF;

         IF (L_LOG_HS_DETAILS = '1') THEN
            L_WHAT_DESCRIPTION := 'condition "'||A_CN(L_SEQ_NO)||
                                  '" with value "'||A_VALUE(L_SEQ_NO)||
                                  '" is deleted from condition set "'||A_CS(L_SEQ_NO)||
                                  '" in study "'||A_SD||'".';
            L_HS_SEQ := L_HS_SEQ + 1;
            INSERT INTO UTSDHSDETAILS(SD, TR_SEQ, EV_SEQ, SEQ, DETAILS)
            VALUES(A_SD, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR,L_HS_SEQ, L_WHAT_DESCRIPTION);
         END IF;
      END IF;
   END LOOP;

   
   
   
   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      IF A_MODIFY_FLAG(L_SEQ_NO) < UNAPIGEN.DBERR_SUCCESS THEN
         A_MODIFY_FLAG(L_SEQ_NO) := UNAPIGEN.DBERR_SUCCESS;
      END IF;
   END LOOP;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE <> 1 THEN
         UNAPIGEN.LOGERROR('SaveSdCsCondition', SQLERRM);
      ELSIF L_SQLERRM IS NOT NULL THEN
         UNAPIGEN.LOGERROR('SaveSdCsCondition', L_SQLERRM);      
      END IF;
      IF L_SDCSCN_CURSOR%ISOPEN THEN
         CLOSE L_SDCSCN_CURSOR;
      END IF;
      RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveSdCsCondition'));   
END SAVESDCSCONDITION;

END UNAPISD;
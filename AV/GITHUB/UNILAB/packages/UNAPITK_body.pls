PACKAGE BODY unapitk AS

L_SQLERRM         VARCHAR2(255);
L_SQL_STRING      VARCHAR2(2000);
L_WHERE_CLAUSE    VARCHAR2(1000);
L_EVENT_TP        UTEV.EV_TP%TYPE;
L_RET_CODE        NUMBER;
L_RESULT          NUMBER;
L_FETCHED_ROWS    NUMBER;
L_EV_SEQ_NR       NUMBER;
STPERROR          EXCEPTION;
P_TK_CURSOR       INTEGER;
L_DML1_CURSOR              INTEGER;

FUNCTION GETVERSION
   RETURN VARCHAR2
IS
BEGIN
   RETURN('06.07.00.00_00.13');
EXCEPTION
   WHEN OTHERS THEN
      RETURN (NULL);
END GETVERSION;

FUNCTION GETUICOMPONENT                     
(A_COMPONENT_TP    OUT    UNAPIGEN.VC4_TABLE_TYPE,  
 A_COMPONENT_ID    OUT    UNAPIGEN.VC20_TABLE_TYPE, 
 A_COL_TP          OUT    UNAPIGEN.VC40_TABLE_TYPE, 
 A_DISP_TITLE      OUT    UNAPIGEN.VC40_TABLE_TYPE,  
 A_NR_OF_ROWS      IN OUT NUMBER,                   
 A_WHERE_CLAUSE    IN     VARCHAR2)                 
RETURN NUMBER IS

L_COMPONENT_TP   VARCHAR2(4);
L_COMPONENT_ID   VARCHAR2(20);
L_COL_TP         VARCHAR2(40);
L_DISP_TITLE     VARCHAR2(40);
L_UI_CURSOR      INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := ' ORDER BY component_tp, component_id, seq'; 
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := ' WHERE component_tp = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                        ''' ORDER BY component_id, seq';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;
   
   L_UI_CURSOR := DBMS_SQL.OPEN_CURSOR;

   L_SQL_STRING := 'SELECT component_tp, component_id, col_tp, disp_title ' ||
                   'FROM dd'||UNAPIGEN.P_DD||'.uvuicomponent ' || L_WHERE_CLAUSE;
   DBMS_SQL.PARSE(L_UI_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_UI_CURSOR, 1, L_COMPONENT_TP, 4);
   DBMS_SQL.DEFINE_COLUMN(L_UI_CURSOR, 2, L_COMPONENT_ID, 20);
   DBMS_SQL.DEFINE_COLUMN(L_UI_CURSOR, 3, L_COL_TP, 40);
   DBMS_SQL.DEFINE_COLUMN(L_UI_CURSOR, 4, L_DISP_TITLE, 40);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_UI_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_UI_CURSOR, 1, L_COMPONENT_TP);
      DBMS_SQL.COLUMN_VALUE(L_UI_CURSOR, 2, L_COMPONENT_ID);
      DBMS_SQL.COLUMN_VALUE(L_UI_CURSOR, 3, L_COL_TP);
      DBMS_SQL.COLUMN_VALUE(L_UI_CURSOR, 4, L_DISP_TITLE);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_COMPONENT_TP(L_FETCHED_ROWS) := L_COMPONENT_TP;
      A_COMPONENT_ID(L_FETCHED_ROWS) := L_COMPONENT_ID;
      A_COL_TP(L_FETCHED_ROWS) := L_COL_TP;
      A_DISP_TITLE(L_FETCHED_ROWS) := L_DISP_TITLE;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_UI_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_UI_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   UNAPIGEN.LOGERROR('GetUiComponent', SQLERRM);
   IF DBMS_SQL.IS_OPEN (L_UI_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_UI_CURSOR);
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETUICOMPONENT;

FUNCTION GETOTDETAILS
(A_COL_TP          OUT    UNAPIGEN.VC40_TABLE_TYPE, 
 A_COL_ID          OUT    UNAPIGEN.VC40_TABLE_TYPE, 
 A_COL_LEN         OUT    UNAPIGEN.NUM_TABLE_TYPE,  
 A_DISP_TP         OUT    UNAPIGEN.NUM_TABLE_TYPE,  
 A_DISP_TITLE      OUT    UNAPIGEN.VC40_TABLE_TYPE, 
 A_DISP_STYLE      OUT    UNAPIGEN.NUM_TABLE_TYPE,  
 A_DISP_WIDTH      OUT    UNAPIGEN.NUM_TABLE_TYPE,  
 A_DISP_FORMAT     OUT    UNAPIGEN.VC40_TABLE_TYPE, 
 A_NR_OF_ROWS      IN OUT NUMBER,                   
 A_WHERE_CLAUSE    IN     VARCHAR2)                 
RETURN NUMBER IS

L_COL_TP         VARCHAR2(40);
L_COL_ID         VARCHAR2(40);
L_COL_LEN        NUMBER;
L_DISP_TP        NUMBER;
L_DISP_TITLE     VARCHAR2(40);
L_DISP_STYLE     NUMBER;
L_DISP_WIDTH     NUMBER;
L_DISP_FORMAT    VARCHAR2(40);
L_OT_CURSOR      INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := ' ORDER BY col_tp, seq'; 
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := ' WHERE col_tp = ''' || A_WHERE_CLAUSE || 
                        ''' ORDER BY seq';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;
   
   L_OT_CURSOR := DBMS_SQL.OPEN_CURSOR;

   L_SQL_STRING := 'SELECT col_tp, col_id, col_len, disp_tp, disp_title, ' ||
                   'disp_style, disp_width, disp_format '||
                   'FROM dd'||UNAPIGEN.P_DD||'.uvotdetails ' || L_WHERE_CLAUSE;
   DBMS_SQL.PARSE(L_OT_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_OT_CURSOR, 1, L_COL_TP, 40);
   DBMS_SQL.DEFINE_COLUMN(L_OT_CURSOR, 2, L_COL_ID, 40);
   DBMS_SQL.DEFINE_COLUMN(L_OT_CURSOR, 3, L_COL_LEN);
   DBMS_SQL.DEFINE_COLUMN(L_OT_CURSOR, 4, L_DISP_TP);
   DBMS_SQL.DEFINE_COLUMN(L_OT_CURSOR, 5, L_DISP_TITLE, 40);
   DBMS_SQL.DEFINE_COLUMN(L_OT_CURSOR, 6, L_DISP_STYLE);
   DBMS_SQL.DEFINE_COLUMN(L_OT_CURSOR, 7, L_DISP_WIDTH);
   DBMS_SQL.DEFINE_COLUMN(L_OT_CURSOR, 8, L_DISP_FORMAT, 40);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_OT_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_OT_CURSOR, 1, L_COL_TP);
      DBMS_SQL.COLUMN_VALUE(L_OT_CURSOR, 2, L_COL_ID);
      DBMS_SQL.COLUMN_VALUE(L_OT_CURSOR, 3, L_COL_LEN);
      DBMS_SQL.COLUMN_VALUE(L_OT_CURSOR, 4, L_DISP_TP);
      DBMS_SQL.COLUMN_VALUE(L_OT_CURSOR, 5, L_DISP_TITLE);
      DBMS_SQL.COLUMN_VALUE(L_OT_CURSOR, 6, L_DISP_STYLE);
      DBMS_SQL.COLUMN_VALUE(L_OT_CURSOR, 7, L_DISP_WIDTH);
      DBMS_SQL.COLUMN_VALUE(L_OT_CURSOR, 8, L_DISP_FORMAT);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_COL_TP(L_FETCHED_ROWS) := L_COL_TP;
      A_COL_ID(L_FETCHED_ROWS) := L_COL_ID;
      A_COL_LEN(L_FETCHED_ROWS) := L_COL_LEN;
      A_DISP_TP(L_FETCHED_ROWS) := L_DISP_TP;
      A_DISP_TITLE(L_FETCHED_ROWS) := L_DISP_TITLE;
      A_DISP_STYLE(L_FETCHED_ROWS) := L_DISP_STYLE;
      A_DISP_WIDTH(L_FETCHED_ROWS) := L_DISP_WIDTH;
      A_DISP_FORMAT(L_FETCHED_ROWS) := L_DISP_FORMAT;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_OT_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_OT_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   UNAPIGEN.LOGERROR('GetOtDetails', SQLERRM);
   IF DBMS_SQL.IS_OPEN (L_OT_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_OT_CURSOR);
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETOTDETAILS;

FUNCTION GETTASKLIST
(A_TK_TP        IN     VARCHAR2,                   
 A_TK           OUT    UNAPIGEN.VC20_TABLE_TYPE,   
 A_DESCRIPTION  OUT    UNAPIGEN.VC40_TABLE_TYPE,   
 A_NR_OF_ROWS   IN OUT NUMBER,                     
 A_NEXT_ROWS    IN     NUMBER)                     
RETURN NUMBER IS

L_TK           VARCHAR2(20);
L_DESCRIPTION  VARCHAR2(40);

BEGIN

   IF NVL(A_TK_TP, ' ') = ' ' THEN
      RETURN(UNAPIGEN.DBERR_NOOBJTP);
   END IF;

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;
   
   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;
   
   
   IF A_NEXT_ROWS = -1 THEN
      IF P_TK_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_TK_CURSOR);
         P_TK_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;
   
   
   IF A_NEXT_ROWS = 1 THEN
      IF P_TK_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;
   
   
   IF NVL(A_NEXT_ROWS, 0) = 0 THEN
      IF P_TK_CURSOR IS NULL THEN
         P_TK_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;
      
      L_SQL_STRING := 'SELECT DISTINCT tk, description FROM dd' ||
                      UNAPIGEN.P_DD || '.uvtk ' ||
                      'WHERE tk_tp = :a_tk_tp ORDER BY 1,2'; 

      DBMS_SQL.PARSE(P_TK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      DBMS_SQL.BIND_VARIABLE(P_TK_CURSOR, ':a_tk_tp', A_TK_TP);
      DBMS_SQL.DEFINE_COLUMN(P_TK_CURSOR, 1, L_TK, 20);
      DBMS_SQL.DEFINE_COLUMN(P_TK_CURSOR, 2, L_DESCRIPTION, 40);
 
      L_RESULT := DBMS_SQL.EXECUTE(P_TK_CURSOR);
   END IF;

   L_RESULT := DBMS_SQL.FETCH_ROWS(P_TK_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_TK_CURSOR, 1, L_TK);
      DBMS_SQL.COLUMN_VALUE(P_TK_CURSOR, 2, L_DESCRIPTION);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_TK(L_FETCHED_ROWS) := L_TK;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
            L_RESULT := DBMS_SQL.FETCH_ROWS(P_TK_CURSOR);
      END IF;
   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_TK_CURSOR);
       P_TK_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_TK_CURSOR);
      P_TK_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   UNAPIGEN.LOGERROR('GetTaskList', SQLERRM);
   IF DBMS_SQL.IS_OPEN (P_TK_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (P_TK_CURSOR);
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETTASKLIST;

FUNCTION GETTASK
(A_TK_TP            IN      VARCHAR2,                    
 A_TK               IN      VARCHAR2,                    
 A_DESCRIPTION      OUT     VARCHAR2,                    
 A_COL_ID           OUT     UNAPIGEN.VC40_TABLE_TYPE,    
 A_COL_TP           OUT     UNAPIGEN.VC40_TABLE_TYPE,    
 A_DISP_TITLE       OUT     UNAPIGEN.VC40_TABLE_TYPE,    
 A_DEF_VAL          OUT     UNAPIGEN.VC40_TABLE_TYPE,    
 A_HIDDEN           OUT     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_IS_PROTECTED     OUT     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_MANDATORY        OUT     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_AUTO_REFRESH     OUT     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_COL_ASC          OUT     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_VALUE_LIST_TP    OUT     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_DSP_LEN          OUT     UNAPIGEN.NUM_TABLE_TYPE,     
 A_NR_OF_ROWS       IN OUT  NUMBER)                      
RETURN NUMBER IS

A_VERSION           VARCHAR2(20);
L_DESCRIPTION       VARCHAR2(40);
L_COL_ID            VARCHAR2(40);
L_COL_TP            VARCHAR2(40);
L_DISP_TITLE        VARCHAR2(40);
L_DEF_VAL           VARCHAR2(40);
L_HIDDEN            CHAR(1);
L_IS_PROTECTED      CHAR(1);
L_MANDATORY         CHAR(1);
L_AUTO_REFRESH      CHAR(1);
L_COL_ASC           CHAR(1);
L_VALUE_LIST_TP     CHAR(1);
L_DSP_LEN           NUMBER;
L_TK_CURSOR         INTEGER;
L_GK_CURSOR         INTEGER;
L_OT_CURSOR         INTEGER;
L_OBJECT_TP         VARCHAR2(2);

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_TK_TP, ' ') = ' ' THEN
      RETURN(UNAPIGEN.DBERR_NOOBJTP);
   END IF;

   IF NVL(A_TK, ' ') = ' ' THEN
      RETURN(UNAPIGEN.DBERR_TK);
   END IF;

   L_TK_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_GK_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_OT_CURSOR := DBMS_SQL.OPEN_CURSOR;

   L_SQL_STRING := 'SELECT col_id, col_tp, description, def_val, hidden, '||
                          'is_protected, mandatory, auto_refresh, col_asc, value_list_tp, dsp_len '||
                   'FROM dd'||UNAPIGEN.P_DD||'.uvtk '||
                   'WHERE tk_tp = ''' || A_TK_TP || 
                   ''' AND version = ''' || REPLACE(A_VERSION, '''', '''''') || 
                   ''' AND tk = ''' || REPLACE(A_TK, '''', '''''') || 
                   ''' ORDER BY seq' ;
   DBMS_SQL.PARSE(L_TK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_TK_CURSOR,  1, L_COL_ID, 40);
   DBMS_SQL.DEFINE_COLUMN(L_TK_CURSOR,  2, L_COL_TP, 40);
   DBMS_SQL.DEFINE_COLUMN(L_TK_CURSOR,  3, L_DESCRIPTION, 40);
   DBMS_SQL.DEFINE_COLUMN(L_TK_CURSOR,  4, L_DEF_VAL, 40);
   DBMS_SQL.DEFINE_COLUMN(L_TK_CURSOR,  5, L_HIDDEN, 1);
   DBMS_SQL.DEFINE_COLUMN(L_TK_CURSOR,  6, L_IS_PROTECTED, 1);
   DBMS_SQL.DEFINE_COLUMN(L_TK_CURSOR,  7, L_MANDATORY, 1);
   DBMS_SQL.DEFINE_COLUMN(L_TK_CURSOR,  8, L_AUTO_REFRESH, 1);
   DBMS_SQL.DEFINE_COLUMN(L_TK_CURSOR,  9, L_COL_ASC, 1);
   DBMS_SQL.DEFINE_COLUMN(L_TK_CURSOR, 10, L_VALUE_LIST_TP, 1);
   DBMS_SQL.DEFINE_COLUMN(L_TK_CURSOR, 11, L_DSP_LEN);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_TK_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_TK_CURSOR,  1, L_COL_ID);
      DBMS_SQL.COLUMN_VALUE(L_TK_CURSOR,  2, L_COL_TP);
      DBMS_SQL.COLUMN_VALUE(L_TK_CURSOR,  3, L_DESCRIPTION);      
      DBMS_SQL.COLUMN_VALUE(L_TK_CURSOR,  4, L_DEF_VAL);
      DBMS_SQL.COLUMN_VALUE(L_TK_CURSOR,  5, L_HIDDEN);
      DBMS_SQL.COLUMN_VALUE(L_TK_CURSOR,  6, L_IS_PROTECTED);
      DBMS_SQL.COLUMN_VALUE(L_TK_CURSOR,  7, L_MANDATORY);
      DBMS_SQL.COLUMN_VALUE(L_TK_CURSOR,  8, L_AUTO_REFRESH);
      DBMS_SQL.COLUMN_VALUE(L_TK_CURSOR,  9, L_COL_ASC);
      DBMS_SQL.COLUMN_VALUE(L_TK_CURSOR, 10, L_VALUE_LIST_TP);
      DBMS_SQL.COLUMN_VALUE(L_TK_CURSOR, 11, L_DSP_LEN);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_COL_ID(L_FETCHED_ROWS)       := L_COL_ID;
      A_COL_TP(L_FETCHED_ROWS)       := L_COL_TP;
      A_DESCRIPTION                  := L_DESCRIPTION;
      A_DEF_VAL(L_FETCHED_ROWS)      := L_DEF_VAL;
      A_HIDDEN(L_FETCHED_ROWS)       := L_HIDDEN;
      A_IS_PROTECTED(L_FETCHED_ROWS) := L_IS_PROTECTED;
      A_MANDATORY(L_FETCHED_ROWS)    := L_MANDATORY;
      A_AUTO_REFRESH(L_FETCHED_ROWS) := L_AUTO_REFRESH;
      A_COL_ASC(L_FETCHED_ROWS)      := L_COL_ASC;
      A_VALUE_LIST_TP(L_FETCHED_ROWS):= L_VALUE_LIST_TP;
      A_DSP_LEN(L_FETCHED_ROWS)      := L_DSP_LEN;

      IF SUBSTR(L_COL_TP, 3, 2) = 'gk' THEN
         L_OBJECT_TP := SUBSTR(L_COL_TP, 1, 2);
         L_SQL_STRING := 'SELECT description '||
                         'FROM dd'||UNAPIGEN.P_DD||'.uvgk' || L_OBJECT_TP ||
                         ' WHERE version_is_current = ''1'' ' ||
                         'AND gk = ''' || REPLACE(L_COL_ID, '''', '''''') || ''''; 
         DBMS_SQL.PARSE(L_GK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 1, L_DISP_TITLE, 40);
         L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_GK_CURSOR);
         DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 1, L_DISP_TITLE);
         A_DISP_TITLE(L_FETCHED_ROWS) := L_DISP_TITLE;
      ELSE
         L_OBJECT_TP := SUBSTR(L_COL_TP, 1, 2);
         L_SQL_STRING := 'SELECT disp_title '||
                         'FROM dd'||UNAPIGEN.P_DD||'.uvotdetails' ||
                         ' WHERE col_id = ''' || L_COL_ID || ''''; 
         DBMS_SQL.PARSE(L_OT_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         DBMS_SQL.DEFINE_COLUMN(L_OT_CURSOR, 1, L_DISP_TITLE, 40);
         L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_OT_CURSOR);
         DBMS_SQL.COLUMN_VALUE(L_OT_CURSOR, 1, L_DISP_TITLE);
         A_DISP_TITLE(L_FETCHED_ROWS) := L_DISP_TITLE;
      END IF;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_TK_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_TK_CURSOR);
   DBMS_SQL.CLOSE_CURSOR(L_GK_CURSOR);
   DBMS_SQL.CLOSE_CURSOR(L_OT_CURSOR);   

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   UNAPIGEN.LOGERROR('GetTask', SQLERRM);
   IF DBMS_SQL.IS_OPEN (L_TK_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_TK_CURSOR);
   END IF;
   IF DBMS_SQL.IS_OPEN (L_GK_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_GK_CURSOR);
   END IF;
   IF DBMS_SQL.IS_OPEN (L_OT_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_OT_CURSOR);
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETTASK;

FUNCTION SAVETASK
(A_TK_TP          IN     VARCHAR2,                    
 A_TK             IN     VARCHAR2,                    
 A_DESCRIPTION    IN     VARCHAR2,                    
 A_COL_ID         IN     UNAPIGEN.VC40_TABLE_TYPE,    
 A_COL_TP         IN     UNAPIGEN.VC40_TABLE_TYPE,    
 A_DEF_VAL        IN     UNAPIGEN.VC40_TABLE_TYPE,    
 A_HIDDEN         IN     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_IS_PROTECTED   IN     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_MANDATORY      IN     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_AUTO_REFRESH   IN     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_COL_ASC        IN     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_VALUE_LIST_TP  IN     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_DSP_LEN        IN     UNAPIGEN.NUM_TABLE_TYPE,     
 A_NR_OF_ROWS     IN     NUMBER,                      
 A_MODIFY_REASON  IN     VARCHAR2)                    
RETURN NUMBER IS

A_VERSION        VARCHAR2(20);
L_LC             VARCHAR2(2);
L_LC_VERSION     VARCHAR2(20);
L_SS             VARCHAR2(2);
L_LOG_HS         CHAR(1);
L_ALLOW_MODIFY   CHAR(1);
L_ACTIVE         CHAR(1);
L_DELETE_CACHE   BOOLEAN;

CURSOR L_UPUS_CURSOR IS
   SELECT DISTINCT UP, US
   FROM UTUPUS;
   
CURSOR L_TK_CURSOR IS
   SELECT COL_ID, COL_TP, SEQ, COL_ASC
   FROM UTTK
   WHERE TK_TP = A_TK_TP
   AND VERSION = A_VERSION
   AND TK = A_TK
   ORDER BY SEQ;  
L_TK_REC         L_TK_CURSOR%ROWTYPE;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_EMPTYSAVE;
      RAISE STPERROR;
   END IF;

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF NVL(A_TK_TP, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJTP;
      RAISE STPERROR;
   END IF;

   IF NVL(A_TK, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   
   
   
   
   L_LC := '@L';
   L_SS := '@A';

   BEGIN
      SELECT VERSION
      INTO L_LC_VERSION
      FROM UTLC
      WHERE LC = '@L'
      AND VERSION_IS_CURRENT = '1';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      RETURN (UNAPIGEN.DBERR_NOCURRENTLCVERSION);
   END;

   BEGIN
      SELECT ALLOW_MODIFY, ACTIVE
      INTO L_ALLOW_MODIFY, L_ACTIVE
      FROM UTSS
      WHERE SS = '@A';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      RETURN (UNAPIGEN.DBERR_NOOBJECT);
   END;
   
   BEGIN
      SELECT LOG_HS
      INTO L_LOG_HS
      FROM UTOBJECTS 
      WHERE OBJECT = 'tk';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      
      
      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OBJTP;
      RAISE STPERROR;
   END;
   

   
   
   
   L_DELETE_CACHE := FALSE;
   OPEN L_TK_CURSOR;
   FOR L_SEQ IN 1..A_NR_OF_ROWS LOOP
      IF NVL(A_COL_TP(L_SEQ), ' ') NOT IN
          ('st','sc','me','rq','rt','stgk','scgk','megk','rqgk','rtgk', 'ws', 'wsgk', 'pt', 'ptgk', 'sd', 'sdgk', 'dc', 'dcgk', 'ch', 'chgk') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_COLTP;
         RAISE STPERROR;
      END IF;

      IF NVL(A_COL_ID(L_SEQ), ' ') = ' ' THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
      END IF;

      FETCH L_TK_CURSOR INTO L_TK_REC;
      IF L_TK_CURSOR%NOTFOUND OR
         (L_TK_REC.COL_ID <> A_COL_ID(L_SEQ)) OR 
         (L_TK_REC.COL_TP <> A_COL_TP(L_SEQ)) OR 
         (L_TK_REC.SEQ <> L_SEQ)              OR
         (NVL(L_TK_REC.COL_ASC,' ') <> NVL(A_COL_ASC(L_SEQ),' ')) THEN
         L_DELETE_CACHE := TRUE;
         EXIT;
      END IF;
   END LOOP;
   FETCH L_TK_CURSOR INTO L_TK_REC;
   IF L_TK_CURSOR%FOUND THEN
      L_DELETE_CACHE := TRUE;
   END IF;
   CLOSE L_TK_CURSOR;

   IF L_DELETE_CACHE THEN
      
      
      
      FOR L_UPUS_REC IN L_UPUS_CURSOR LOOP
         DELETE FROM UTUPUSTKVALUELISTS
         WHERE TK_TP = A_TK_TP
           AND TK = A_TK
           AND US = L_UPUS_REC.US
           AND UP = L_UPUS_REC.UP;
         UNAPIGEN.U4COMMIT;
      END LOOP;
      L_DELETE_CACHE := FALSE;
   END IF;

   
   DELETE FROM UTTKSQL 
   WHERE TK_TP = A_TK_TP
     AND TK = A_TK; 
   
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   DELETE FROM UTTK
   WHERE TK_TP = A_TK_TP
     AND VERSION = A_VERSION
     AND TK = A_TK;

   FOR L_SEQ IN 1..A_NR_OF_ROWS LOOP
      IF NVL(A_HIDDEN(L_SEQ), ' ') NOT IN ('1', '0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_HIDDEN;
         RAISE STPERROR;
      END IF;

      IF NVL(A_IS_PROTECTED(L_SEQ), ' ') NOT IN ('1', '0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_PROTECTED;
         RAISE STPERROR;
      END IF;

      IF NVL(A_MANDATORY(L_SEQ), ' ') NOT IN ('1', '0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_MANDATORY;
         RAISE STPERROR;
      END IF;

      IF NVL(A_AUTO_REFRESH(L_SEQ), ' ') NOT IN ('O', 'L') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_AUTOREFRESH;
         RAISE STPERROR;
      END IF;

      INSERT INTO UTTK(TK_TP, TK, VERSION, VERSION_IS_CURRENT, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ, 
                       EFFECTIVE_TILL, EFFECTIVE_TILL_TZ, DESCRIPTION, 
                       COL_ID, COL_TP, SEQ, DEF_VAL, HIDDEN, IS_PROTECTED, 
                       MANDATORY, AUTO_REFRESH, COL_ASC, VALUE_LIST_TP, DSP_LEN, 
                       LOG_HS, ALLOW_MODIFY, ACTIVE, LC, LC_VERSION, SS)
      VALUES(A_TK_TP, A_TK, A_VERSION, '1', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, NULL, A_DESCRIPTION, A_COL_ID(L_SEQ), 
             A_COL_TP(L_SEQ), L_SEQ, A_DEF_VAL(L_SEQ), A_HIDDEN(L_SEQ), A_IS_PROTECTED(L_SEQ),
             A_MANDATORY(L_SEQ), A_AUTO_REFRESH(L_SEQ), A_COL_ASC(L_SEQ), A_VALUE_LIST_TP(L_SEQ), 
       A_DSP_LEN(L_SEQ), L_LOG_HS, L_ALLOW_MODIFY, L_ACTIVE, L_LC, L_LC_VERSION, L_SS);
   END LOOP;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveTask', SQLERRM);
   END IF;
   IF L_TK_CURSOR%ISOPEN THEN
      CLOSE L_TK_CURSOR;
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveTask'));
END SAVETASK;


FUNCTION DELETETASK
(A_TK_TP         IN  VARCHAR2,          
 A_TK            IN  VARCHAR2,          
 A_MODIFY_REASON IN  VARCHAR2)          
RETURN NUMBER IS

A_VERSION          VARCHAR2(20);
L_USED_TASK        BOOLEAN;

CURSOR L_PREF_CURSOR (A_TK_TP VARCHAR2, A_TK VARCHAR2) IS
   SELECT 'preference' PREF_LEVEL, PREF_TP, PREF_NAME, 0 UP, NULL VERSION, NULL US, NULL US_VERSION
   FROM UTPREF 
   WHERE (PREF_NAME = DECODE(SUBSTR(A_TK_TP,1,2),'me','wl',SUBSTR(A_TK_TP,1,2))||'DefCreateTask'
          AND A_TK_TP IN ('sccreate', 'rqcreate')
          AND PREF_VALUE = A_TK)
      OR ((PREF_NAME, A_TK_TP, PREF_VALUE) IN (('wtAssignStTask', 'stlist', A_TK),
                                               ('wsAssignScTask', 'sclist', A_TK),
                                               ('wsAssignMeTask', 'melist', A_TK)))
   UNION
   SELECT 'user profile' PREF_LEVEL, NULL PREF_TP, PREF_NAME, UP, VERSION, NULL US, NULL US_VERSION
   FROM UTUPPREF 
   WHERE (PREF_NAME = DECODE(SUBSTR(A_TK_TP,1,2),'me','wl',SUBSTR(A_TK_TP,1,2))||'DefCreateTask'
          AND A_TK_TP IN ('sccreate', 'rqcreate')
          AND PREF_VALUE = A_TK)
      OR ((PREF_NAME, A_TK_TP, PREF_VALUE) IN (('wtAssignStTask', 'stlist', A_TK),
                                              ('wsAssignScTask', 'sclist', A_TK),
                                              ('wsAssignMeTask', 'melist', A_TK)))
   UNION
   SELECT 'user' PREF_LEVEL, NULL PREF_TP, PREF_NAME, UP, VERSION, US, US_VERSION
   FROM UTUPUSPREF 
   WHERE (PREF_NAME = DECODE(SUBSTR(A_TK_TP,1,2),'me','wl',SUBSTR(A_TK_TP,1,2))||'DefCreateTask'
          AND A_TK_TP IN ('sccreate', 'rqcreate')
          AND PREF_VALUE = A_TK)
      OR ((PREF_NAME, A_TK_TP, PREF_VALUE) IN (('wtAssignStTask', 'stlist', A_TK),
                                               ('wsAssignScTask', 'sclist', A_TK),
                                               ('wsAssignMeTask', 'melist', A_TK)));

L_PREF_REC L_PREF_CURSOR%ROWTYPE;

CURSOR L_UPUS_CURSOR IS
   SELECT DISTINCT UP, US
   FROM UTUPUS;

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   
   IF UNAPIGEN.ISSYSTEM21CFR11COMPLIANT = UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTALLOWEDIN21CFR11;
      RAISE STPERROR;
   END IF;

   
   
   
   FOR L_UPUS_REC IN L_UPUS_CURSOR LOOP
      DELETE FROM UTUPUSTKVALUELISTS
      WHERE TK_TP = A_TK_TP
        AND TK = A_TK
        AND US = L_UPUS_REC.US
        AND UP = L_UPUS_REC.UP;
      UNAPIGEN.U4COMMIT;
   END LOOP;
   
   L_USED_TASK := FALSE;
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_TK_TP, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJTP;
      RAISE STPERROR;
   END IF;

   IF NVL(A_TK, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   
   OPEN L_PREF_CURSOR (A_TK_TP, A_TK);
   FETCH L_PREF_CURSOR
   INTO L_PREF_REC;
   IF L_PREF_CURSOR%FOUND THEN
      CLOSE L_PREF_CURSOR;
      L_USED_TASK := TRUE;
      RAISE STPERROR;
   END IF;
   CLOSE L_PREF_CURSOR;
      
   DELETE FROM UTTK
   WHERE TK_TP = A_TK_TP
     AND VERSION = A_VERSION
     AND TK = A_TK;
     
   DELETE FROM UTTKPREF
   WHERE TK_TP = A_TK_TP
     AND TK = A_TK;
     
   DELETE FROM UTTKSQL
   WHERE TK_TP = A_TK_TP
     AND TK = A_TK;

   DELETE FROM UTUPTK
   WHERE TK_TP = A_TK_TP
     AND TK = A_TK;
     
   DELETE FROM UTUPTKDETAILS
   WHERE TK_TP = A_TK_TP
     AND TK = A_TK;
     
   DELETE FROM UTUPUSTK
   WHERE TK_TP = A_TK_TP
     AND TK = A_TK;

   DELETE FROM UTUPUSTKDETAILS
   WHERE TK_TP = A_TK_TP
     AND TK = A_TK;

   DELETE FROM UTUPUSOUTLOOKTASKS
   WHERE TK_TP = A_TK_TP
     AND TK = A_TK;
     
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('DeleteTask', SQLERRM);
   ELSIF L_USED_TASK THEN
      
      OPEN L_PREF_CURSOR (A_TK_TP, A_TK);
      LOOP 
         FETCH L_PREF_CURSOR
         INTO L_PREF_REC;
         
         EXIT WHEN L_PREF_CURSOR%NOTFOUND;
         
         L_SQLERRM := 'Task : '||A_TK || ' is used as default task on '|| L_PREF_REC.PREF_LEVEL ;
         IF L_PREF_REC.PREF_TP IS NOT NULL THEN
            L_SQLERRM := L_SQLERRM || '(' || L_PREF_REC.PREF_TP || ')';
         END IF;
         L_SQLERRM := L_SQLERRM || ' level for preference ' || L_PREF_REC.PREF_NAME;
         IF L_PREF_REC.UP IS NOT NULL THEN
            L_SQLERRM := L_SQLERRM || ' for up '||TO_CHAR(L_PREF_REC.UP);
         END IF;
         IF L_PREF_REC.US IS NOT NULL THEN
            L_SQLERRM := L_SQLERRM || ' for us '||L_PREF_REC.US;
         END IF;         
         UNAPIGEN.LOGERROR('DeleteTask',L_SQLERRM);
      END LOOP;      
      CLOSE L_PREF_CURSOR;
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'DeleteTask'));
END DELETETASK;

FUNCTION GETTKPREF
(A_TK_TP            OUT    UNAPIGEN.VC20_TABLE_TYPE,   
 A_TK               OUT    UNAPIGEN.VC20_TABLE_TYPE,   
 A_PREF_NAME        OUT    UNAPIGEN.VC20_TABLE_TYPE,   
 A_PREF_VALUE       OUT    UNAPIGEN.VC40_TABLE_TYPE,   
 A_APPLICABLE_OBJ   OUT    UNAPIGEN.VC40_TABLE_TYPE,   
 A_CATEGORY         OUT    UNAPIGEN.VC40_TABLE_TYPE,   
 A_DESCRIPTION      OUT    UNAPIGEN.VC255_TABLE_TYPE,  
 A_NR_OF_ROWS       IN OUT NUMBER,                     
 A_WHERE_CLAUSE     IN     VARCHAR2)                   
RETURN NUMBER IS

L_TK_TP             VARCHAR2(20);
L_TK                VARCHAR2(20);
L_PREF_NAME         VARCHAR2(20);
L_PREF_VALUE        VARCHAR2(40);
L_APPLICABLE_OBJ    VARCHAR2(40);
L_CATEGORY          VARCHAR2(40);
L_DESCRIPTION       VARCHAR2(255);
L_TK_CURSOR         INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := ' ORDER BY tk_tp, tk, pref_name, seq'; 
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := ' WHERE tk_tp = ''' || A_WHERE_CLAUSE || 
                        ''' ORDER BY tk, pref_name, seq';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;
   L_TK_CURSOR := DBMS_SQL.OPEN_CURSOR;

   L_SQL_STRING := 'SELECT tk_tp, tk, pref_name, pref_value '||
               'FROM dd' || UNAPIGEN.P_DD || '.uvtkpref ' || L_WHERE_CLAUSE;
   DBMS_SQL.PARSE(L_TK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_TK_CURSOR, 1, L_TK_TP, 20);
   DBMS_SQL.DEFINE_COLUMN(L_TK_CURSOR, 2, L_TK, 20);
   DBMS_SQL.DEFINE_COLUMN(L_TK_CURSOR, 3, L_PREF_NAME, 20);
   DBMS_SQL.DEFINE_COLUMN(L_TK_CURSOR, 4, L_PREF_VALUE, 40);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_TK_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_TK_CURSOR, 1, L_TK_TP);
      DBMS_SQL.COLUMN_VALUE(L_TK_CURSOR, 2, L_TK);
      DBMS_SQL.COLUMN_VALUE(L_TK_CURSOR, 3, L_PREF_NAME);
      DBMS_SQL.COLUMN_VALUE(L_TK_CURSOR, 4, L_PREF_VALUE);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_TK_TP(L_FETCHED_ROWS) := L_TK_TP;
      A_TK(L_FETCHED_ROWS) := L_TK;
      A_PREF_NAME(L_FETCHED_ROWS) := L_PREF_NAME;
      A_PREF_VALUE(L_FETCHED_ROWS) := L_PREF_VALUE;

      L_SQL_STRING :=    'SELECT applicable_obj, category, description '
                      || 'FROM dd'||UNAPIGEN.P_DD||'.uvpref '
                      || 'WHERE pref_tp = ''up'' '
                      || 'AND pref_name = :l_pref_name';
      EXECUTE IMMEDIATE L_SQL_STRING
      INTO L_APPLICABLE_OBJ, L_CATEGORY, L_DESCRIPTION
      USING L_PREF_NAME;
      A_APPLICABLE_OBJ(L_FETCHED_ROWS) := L_APPLICABLE_OBJ;
      A_CATEGORY(L_FETCHED_ROWS) := L_CATEGORY;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_TK_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_TK_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   UNAPIGEN.LOGERROR('GetTkPref', SQLERRM);
   IF DBMS_SQL.IS_OPEN (L_TK_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_TK_CURSOR);
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETTKPREF;

FUNCTION SAVETKPREF
(A_TK_TP          IN   VARCHAR2,                  
 A_TK             IN   VARCHAR2,                  
 A_PREF_NAME      IN   UNAPIGEN.VC20_TABLE_TYPE,  
 A_PREF_VALUE     IN   UNAPIGEN.VC40_TABLE_TYPE,  
 A_NR_OF_ROWS     IN   NUMBER,                    
 A_MODIFY_REASON  IN   VARCHAR2)                  
RETURN NUMBER IS

A_VERSION          VARCHAR2(20);

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   DELETE FROM UTTKPREF
   WHERE TK_TP = A_TK_TP
     AND TK = A_TK;

   FOR L_SEQ IN 1..A_NR_OF_ROWS LOOP
      IF NVL(A_PREF_NAME(L_SEQ), ' ') <> ' ' THEN
         INSERT INTO UTTKPREF(TK_TP, TK, VERSION, PREF_NAME, PREF_VALUE, SEQ)
         VALUES(A_TK_TP, A_TK, A_VERSION, A_PREF_NAME(L_SEQ), A_PREF_VALUE(L_SEQ), L_SEQ);
      END IF;
   END LOOP;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveTkPref', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveTkPref'));
END SAVETKPREF;

FUNCTION GETPREFVALUE
(A_PREF_TP          OUT    UNAPIGEN.VC20_TABLE_TYPE,   
 A_PREF_NAME        OUT    UNAPIGEN.VC20_TABLE_TYPE,   
 A_PREF_VALUE       OUT    UNAPIGEN.VC40_TABLE_TYPE,   
 A_NR_OF_ROWS       IN OUT NUMBER,                     
 A_WHERE_CLAUSE     IN     VARCHAR2)                   
RETURN NUMBER IS

L_PREF_TP      VARCHAR2(20);
L_PREF_NAME    VARCHAR2(20);
L_PREF_VALUE   VARCHAR2(40);
L_PREF_CURSOR  INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := ' ORDER BY pref_name, seq'; 
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := ' WHERE pref_tp = ''' || A_WHERE_CLAUSE || 
                        ''' ORDER BY pref_name, seq';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;
   L_PREF_CURSOR := DBMS_SQL.OPEN_CURSOR;

   L_SQL_STRING := 'SELECT pref_tp, pref_name, pref_value '||
              'FROM dd' || UNAPIGEN.P_DD || '.uvpreflist ' || L_WHERE_CLAUSE;
   DBMS_SQL.PARSE(L_PREF_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_PREF_CURSOR, 1, L_PREF_TP, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PREF_CURSOR, 2, L_PREF_NAME, 20);
   DBMS_SQL.DEFINE_COLUMN(L_PREF_CURSOR, 3, L_PREF_VALUE, 40);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_PREF_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_PREF_CURSOR, 1, L_PREF_TP);
      DBMS_SQL.COLUMN_VALUE(L_PREF_CURSOR, 2, L_PREF_NAME);
      DBMS_SQL.COLUMN_VALUE(L_PREF_CURSOR, 3, L_PREF_VALUE);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_PREF_TP(L_FETCHED_ROWS) := L_PREF_TP;
      A_PREF_NAME(L_FETCHED_ROWS) := L_PREF_NAME;
      A_PREF_VALUE(L_FETCHED_ROWS) := L_PREF_VALUE;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_PREF_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_PREF_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   UNAPIGEN.LOGERROR('GetPrefValue', SQLERRM);
   IF DBMS_SQL.IS_OPEN (L_PREF_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_PREF_CURSOR);
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETPREFVALUE;

FUNCTION GETTASKSQL
(A_TK_TP          IN     VARCHAR2,                    
 A_TK             IN     VARCHAR2,                    
 A_COL_ID         IN     VARCHAR2,                    
 A_COL_TP         IN     VARCHAR2,                    
 A_SQLTEXT        OUT    UNAPIGEN.VC255_TABLE_TYPE,   
 A_NR_OF_ROWS     IN OUT NUMBER)                      
RETURN NUMBER IS
L_VERSION         VARCHAR2(20);
L_SQLTEXT         VARCHAR2(255);
L_SQL_CURSOR       INTEGER;
L_WHERE_CLAUSE    VARCHAR2(511);
BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;


   L_SQL_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT sqltext ' ||
             'FROM uttksql where tk_tp = ''' || A_TK_TP || '''' ||
           ' and tk = ''' || REPLACE(A_TK,  '''', '''''') ||''' ' ||
           ' and col_id = ''' || REPLACE(A_COL_ID,  '''', '''''') ||''' '  ||
           ' and col_tp = ''' || REPLACE(A_COL_TP,  '''', '''''') ||''' ' ||
           ' order by sqlseq' ;

   DBMS_SQL.PARSE(L_SQL_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_SQL_CURSOR, 1, L_SQLTEXT, 255);
  
   L_RESULT := DBMS_SQL.EXECUTE(L_SQL_CURSOR);

   L_RESULT := DBMS_SQL.FETCH_ROWS(L_SQL_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_SQL_CURSOR, 1, L_SQLTEXT);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_SQLTEXT(L_FETCHED_ROWS) := L_SQLTEXT;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_SQL_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_SQL_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ,
                          API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
              'GetTaskSql', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (L_SQL_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_SQL_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETTASKSQL;

FUNCTION SAVETASKSQL
(A_TK_TP          IN     VARCHAR2,                    
 A_TK             IN     VARCHAR2,                    
 A_COL_ID         IN     VARCHAR2,                    
 A_COL_TP         IN     VARCHAR2,                    
 A_SQLTEXT        IN     UNAPIGEN.VC255_TABLE_TYPE,   
 A_NR_OF_ROWS     IN     NUMBER,                       
 A_MODIFY_REASON  IN     VARCHAR2)                      
RETURN NUMBER IS

L_LC                      VARCHAR2(2);
L_LC_VERSION              VARCHAR2(20);
L_SS                      VARCHAR2(2);
L_ALLOW_MODIFY            CHAR(1);
L_ACTIVE                  CHAR(1);
L_LOG_HS                  CHAR(1);
L_SEQ_NO                  NUMBER;
A_VERSION         VARCHAR2(20);

BEGIN
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF (NVL(A_TK, ' ') = ' ') OR (NVL(A_TK_TP, ' ') = ' ') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   DELETE FROM UTTKSQL
   WHERE TK = A_TK
     AND TK_TP = A_TK_TP 
   AND COL_ID = A_COL_ID
   AND COL_TP = A_COL_TP;

   L_EVENT_TP := 'ObjectUpdated';

   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      IF NVL(A_SQLTEXT(L_SEQ_NO), ' ') <> ' ' THEN
         INSERT INTO UTTKSQL(TK, TK_TP, VERSION, COL_ID, COL_TP, SQLSEQ, SQLTEXT)
         VALUES(A_TK, A_TK_TP, A_VERSION, A_COL_ID, A_COL_TP, L_SEQ_NO, A_SQLTEXT(L_SEQ_NO));
      END IF;
   END LOOP;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveTaskSql',SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveTaskSql'));
END SAVETASKSQL;

FUNCTION SELECTCUSTOMSQLVALUES
(A_TK_TP            IN      VARCHAR2,                    
 A_TK               IN      VARCHAR2,                    
 A_COL_ID           IN      UNAPIGEN.VC40_TABLE_TYPE,    
 A_COL_TP           IN      UNAPIGEN.VC40_TABLE_TYPE,    
 A_COL_VALUE        IN      UNAPIGEN.VC40_TABLE_TYPE,    
 A_COL_NR_OF_ROWS   IN      NUMBER,                      
 A_COL_ID4CUSTOMSQL IN      VARCHAR2,                    
 A_COL_TP4CUSTOMSQL IN      VARCHAR2,                    
 A_VALUE            OUT     UNAPIGEN.VC40_TABLE_TYPE,    
 A_NR_OF_ROWS       IN OUT  NUMBER,                      
 A_ORDER_BY_CLAUSE  IN      VARCHAR2,                    
 A_NEXT_ROWS        IN      NUMBER)                      
RETURN NUMBER IS
POSTILDE1     NUMBER;
POSTILDE2     NUMBER;
POSDOT    NUMBER;
L_COL_ID    VARCHAR2(40);
L_COL_TP    VARCHAR2(40);
L_COL_VALUE   VARCHAR2(40);
L_DML1_VALUE  UNAPIGEN.VC255_TABLE_TYPE;
L_RETCODE   NUMBER;
L_NR_OF_ROWS  NUMBER;
L_ORDER_BY_CLAUSE   VARCHAR2(255);
L_VALUE        VARCHAR2(255);

CURSOR C_SQLTEXT IS
  SELECT SQLTEXT 
  FROM UTTKSQL
  WHERE TK_TP = A_TK_TP
    AND TK = A_TK
    AND COL_ID = A_COL_ID4CUSTOMSQL
    AND COL_TP = A_COL_TP4CUSTOMSQL
  ORDER BY SQLSEQ;

BEGIN

L_SQL_STRING := '';
FOR L_SQL_CURSOR IN C_SQLTEXT LOOP
  L_SQL_STRING := L_SQL_STRING || L_SQL_CURSOR.SQLTEXT;
END LOOP;

IF LENGTH(L_SQL_STRING) = 0 THEN
   A_NR_OF_ROWS :=0;
   RETURN (UNAPIGEN.DBERR_SUCCESS);
END IF;

IF  INSTR(UPPER(L_SQL_STRING), 'ORDER BY') = 0 THEN
   L_ORDER_BY_CLAUSE := NVL(A_ORDER_BY_CLAUSE, ' ORDER BY 1');
   L_SQL_STRING := L_SQL_STRING || ' ' || A_ORDER_BY_CLAUSE;
 NULL;
END IF;


IF INSTR(L_SQL_STRING , '~') >0 THEN 
  L_SQL_STRING := REPLACE(L_SQL_STRING, '~us~', REPLACE(UNAPIGEN.P_USER, '''', ''''''));
  L_SQL_STRING := REPLACE(L_SQL_STRING, '~up~', UNAPIGEN.P_CURRENT_UP);
  L_SQL_STRING := REPLACE(L_SQL_STRING, '~dd~', UNAPIGEN.P_DD );
  WHILE L_SQL_STRING LIKE '%~%.%~%' LOOP
     
     POSTILDE1 := INSTR(L_SQL_STRING, '~');
     POSTILDE2 := INSTR(L_SQL_STRING, '~',1,2);
     POSDOT    := INSTR(L_SQL_STRING, '.', POSTILDE1);
     L_COL_TP  := SUBSTR(L_SQL_STRING, POSTILDE1 + 1, POSDOT - POSTILDE1 - 1 );
     L_COL_ID  := SUBSTR(L_SQL_STRING, POSDOT + 1, POSTILDE2 - POSDOT - 1 );
     L_COL_VALUE := '';
     FOR I IN 1 .. A_COL_NR_OF_ROWS LOOP
         IF (A_COL_ID(I) = L_COL_ID) AND (A_COL_TP(I) = L_COL_TP) THEN
          L_COL_VALUE := A_COL_VALUE(I);
        EXIT ;
       END IF;
     END LOOP;
     L_SQL_STRING := REPLACE(L_SQL_STRING, '~'||L_COL_TP ||'.'||L_COL_ID ||'~', L_COL_VALUE);
  END LOOP;
END IF;


   L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF L_DML1_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(L_DML1_CURSOR);
         L_DML1_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF L_DML1_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      IF L_DML1_CURSOR IS NULL THEN
         
        L_DML1_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;

      DBMS_SQL.PARSE(L_DML1_CURSOR, 
                     L_SQL_STRING,
                     DBMS_SQL.V7);
      DBMS_SQL.DEFINE_COLUMN(L_DML1_CURSOR, 1, L_VALUE, 255);
      L_RESULT := DBMS_SQL.EXECUTE(L_DML1_CURSOR);

   END IF;

   L_RESULT := DBMS_SQL.FETCH_ROWS(L_DML1_CURSOR);
   L_FETCHED_ROWS := 0;
   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      L_VALUE := NULL;
      DBMS_SQL.COLUMN_VALUE(L_DML1_CURSOR, 1, L_VALUE);
      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      L_DML1_VALUE(L_FETCHED_ROWS) := L_VALUE;
      A_VALUE(L_FETCHED_ROWS) := SUBSTR(L_DML1_VALUE(L_FETCHED_ROWS), 1 ,40);
      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
            L_RESULT := DBMS_SQL.FETCH_ROWS(L_DML1_CURSOR);
      END IF;
   END LOOP;

   IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(L_DML1_CURSOR);
      L_DML1_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;
   

RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   L_SQLERRM := SQLERRM;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
        'SelectCustomSQLValues SQL Error', L_SQLERRM);
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
           'SelectCustomSQLValues SQL', 'SQL(1):'||SUBSTR(L_SQL_STRING,1,248));
   IF LENGTH(L_SQL_STRING) > 248 THEN
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'SelectCustomSQLValues SQL', 'SQL(2):'||SUBSTR(L_SQL_STRING,249,248));
   END IF;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ,
                       API_NAME, ERROR_MSG)
   VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
           'SelectCustomSQLValues', L_SQLERRM);
   UNAPIGEN.U4COMMIT;      
RETURN(UNAPIGEN.DBERR_GENFAIL);

END SELECTCUSTOMSQLVALUES;

FUNCTION GETTASK
(A_TK_TP            IN      VARCHAR2,                    
 A_TK               IN      VARCHAR2,                    
 A_DESCRIPTION      OUT     VARCHAR2,                    
 A_COL_ID           OUT     UNAPIGEN.VC40_TABLE_TYPE,    
 A_COL_TP           OUT     UNAPIGEN.VC40_TABLE_TYPE,    
 A_DISP_TITLE       OUT     UNAPIGEN.VC40_TABLE_TYPE,    
 A_OPERATOR         OUT     UNAPIGEN.VC20_TABLE_TYPE,    
 A_DEF_VAL          OUT     UNAPIGEN.VC40_TABLE_TYPE,    
 A_ANDOR            OUT     UNAPIGEN.VC3_TABLE_TYPE,     
 A_HIDDEN           OUT     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_IS_PROTECTED     OUT     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_MANDATORY        OUT     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_AUTO_REFRESH     OUT     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_COL_ASC          OUT     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_VALUE_LIST_TP    OUT     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_OPERATOR_PROTECT OUT     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_ANDOR_PROTECT    OUT     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_DSP_LEN          OUT     UNAPIGEN.NUM_TABLE_TYPE,     
 A_NR_OF_ROWS       IN OUT  NUMBER)                      
RETURN NUMBER IS

A_VERSION           VARCHAR2(20);
L_DESCRIPTION       VARCHAR2(40);
L_COL_ID            VARCHAR2(40);
L_COL_TP            VARCHAR2(40);
L_DSP_TITLE        VARCHAR2(40);
L_DEF_VAL           VARCHAR2(40);
L_OPERATOR          VARCHAR2(20);
L_ANDOR             VARCHAR2(3);
L_HIDDEN            CHAR(1);
L_IS_PROTECTED      CHAR(1);
L_OPERATOR_PROTECT  CHAR(1);
L_ANDOR_PROTECT     CHAR(1);
L_MANDATORY         CHAR(1);
L_AUTO_REFRESH      CHAR(1);
L_COL_ASC           CHAR(1);
L_VALUE_LIST_TP     CHAR(1);
L_DSP_LEN           NUMBER;
L_TK_CURSOR         INTEGER;
L_GK_CURSOR         INTEGER;
L_OT_CURSOR         INTEGER;
L_OBJECT_TP         VARCHAR2(2);

BEGIN

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_TK_TP, ' ') = ' ' THEN
      RETURN(UNAPIGEN.DBERR_NOOBJTP);
   END IF;

   IF NVL(A_TK, ' ') = ' ' THEN
      RETURN(UNAPIGEN.DBERR_TK);
   END IF;

   L_TK_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_GK_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_OT_CURSOR := DBMS_SQL.OPEN_CURSOR;
   
   L_SQL_STRING := 'SELECT col_id, col_tp, description, dsp_title, operat, def_val, andor, hidden, '||
                          'is_protected, mandatory, auto_refresh, col_asc, value_list_tp, operat_protect, andor_protect, dsp_len '||
                   'FROM dd'||UNAPIGEN.P_DD||'.uvtk '||
                   'WHERE tk_tp = ''' || A_TK_TP || 
                   ''' AND version = ''' || REPLACE(A_VERSION, '''', '''''') || 
                   ''' AND tk = ''' || REPLACE(A_TK, '''', '''''') || 
                   ''' ORDER BY seq' ;
   DBMS_SQL.PARSE(L_TK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_TK_CURSOR, 1  , L_COL_ID, 40);
   DBMS_SQL.DEFINE_COLUMN(L_TK_CURSOR, 2  , L_COL_TP, 40);
   DBMS_SQL.DEFINE_COLUMN(L_TK_CURSOR, 3  , L_DESCRIPTION, 40);
   DBMS_SQL.DEFINE_COLUMN(L_TK_CURSOR, 4  , L_DSP_TITLE, 40);
   DBMS_SQL.DEFINE_COLUMN(L_TK_CURSOR, 5  , L_OPERATOR, 20);
   DBMS_SQL.DEFINE_COLUMN(L_TK_CURSOR, 6  , L_DEF_VAL, 40);
   DBMS_SQL.DEFINE_COLUMN(L_TK_CURSOR, 7  , L_ANDOR, 3);
   DBMS_SQL.DEFINE_COLUMN(L_TK_CURSOR, 8  , L_HIDDEN, 1);
   DBMS_SQL.DEFINE_COLUMN(L_TK_CURSOR, 9  , L_IS_PROTECTED, 1);
   DBMS_SQL.DEFINE_COLUMN(L_TK_CURSOR, 10 , L_MANDATORY, 1);
   DBMS_SQL.DEFINE_COLUMN(L_TK_CURSOR, 11 , L_AUTO_REFRESH, 1);
   DBMS_SQL.DEFINE_COLUMN(L_TK_CURSOR, 12 , L_COL_ASC, 1);
   DBMS_SQL.DEFINE_COLUMN(L_TK_CURSOR, 13 , L_VALUE_LIST_TP, 1);
   DBMS_SQL.DEFINE_COLUMN(L_TK_CURSOR, 14 , L_OPERATOR_PROTECT, 1);
   DBMS_SQL.DEFINE_COLUMN(L_TK_CURSOR, 15 , L_ANDOR_PROTECT, 1);
   DBMS_SQL.DEFINE_COLUMN(L_TK_CURSOR, 16 , L_DSP_LEN);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_TK_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_TK_CURSOR,  1, L_COL_ID);
      DBMS_SQL.COLUMN_VALUE(L_TK_CURSOR,  2, L_COL_TP);
      DBMS_SQL.COLUMN_VALUE(L_TK_CURSOR,  3, L_DESCRIPTION);      
      DBMS_SQL.COLUMN_VALUE(L_TK_CURSOR,  4, L_DSP_TITLE);      
      DBMS_SQL.COLUMN_VALUE(L_TK_CURSOR,  5, L_OPERATOR);      
      DBMS_SQL.COLUMN_VALUE(L_TK_CURSOR,  6, L_DEF_VAL);
      DBMS_SQL.COLUMN_VALUE(L_TK_CURSOR,  7, L_ANDOR);
      DBMS_SQL.COLUMN_VALUE(L_TK_CURSOR,  8, L_HIDDEN);
      DBMS_SQL.COLUMN_VALUE(L_TK_CURSOR,  9, L_IS_PROTECTED);
      DBMS_SQL.COLUMN_VALUE(L_TK_CURSOR, 10, L_MANDATORY);
      DBMS_SQL.COLUMN_VALUE(L_TK_CURSOR, 11, L_AUTO_REFRESH);
      DBMS_SQL.COLUMN_VALUE(L_TK_CURSOR, 12, L_COL_ASC);
      DBMS_SQL.COLUMN_VALUE(L_TK_CURSOR, 13, L_VALUE_LIST_TP);
      DBMS_SQL.COLUMN_VALUE(L_TK_CURSOR, 14, L_OPERATOR_PROTECT);
      DBMS_SQL.COLUMN_VALUE(L_TK_CURSOR, 15, L_ANDOR_PROTECT);
      DBMS_SQL.COLUMN_VALUE(L_TK_CURSOR, 16, L_DSP_LEN);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_COL_ID(L_FETCHED_ROWS)       := L_COL_ID;
      A_COL_TP(L_FETCHED_ROWS)       := L_COL_TP;
      A_DESCRIPTION                  := L_DESCRIPTION;
      A_DISP_TITLE(L_FETCHED_ROWS)   := L_DSP_TITLE;
      A_OPERATOR(L_FETCHED_ROWS)     := L_OPERATOR;
      A_DEF_VAL(L_FETCHED_ROWS)      := L_DEF_VAL;
      A_ANDOR(L_FETCHED_ROWS)        := L_ANDOR;
      A_HIDDEN(L_FETCHED_ROWS)       := L_HIDDEN;
      A_IS_PROTECTED(L_FETCHED_ROWS) := L_IS_PROTECTED;
      A_MANDATORY(L_FETCHED_ROWS)    := L_MANDATORY;
      A_AUTO_REFRESH(L_FETCHED_ROWS) := L_AUTO_REFRESH;
      A_COL_ASC(L_FETCHED_ROWS)      := L_COL_ASC;
      A_VALUE_LIST_TP(L_FETCHED_ROWS):= L_VALUE_LIST_TP;
      A_OPERATOR_PROTECT(L_FETCHED_ROWS):= L_OPERATOR_PROTECT;
      A_ANDOR_PROTECT(L_FETCHED_ROWS):= L_ANDOR_PROTECT;
      A_DSP_LEN(L_FETCHED_ROWS)      := L_DSP_LEN;

      IF SUBSTR(L_COL_TP, 3, 2) = 'gk' THEN
         L_OBJECT_TP := SUBSTR(L_COL_TP, 1, 2);
         L_SQL_STRING := 'SELECT description '||
                         'FROM dd'||UNAPIGEN.P_DD||'.uvgk' || L_OBJECT_TP ||
                         ' WHERE version_is_current = ''1'' ' ||
                         'AND gk = ''' || REPLACE(L_COL_ID, '''', '''''') || ''''; 
         DBMS_SQL.PARSE(L_GK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         DBMS_SQL.DEFINE_COLUMN(L_GK_CURSOR, 1, L_DSP_TITLE, 40);
         L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_GK_CURSOR);
         DBMS_SQL.COLUMN_VALUE(L_GK_CURSOR, 1, L_DSP_TITLE);
         A_DISP_TITLE(L_FETCHED_ROWS) := L_DSP_TITLE;
      ELSE
         L_OBJECT_TP := SUBSTR(L_COL_TP, 1, 2);
         L_SQL_STRING := 'SELECT disp_title '||
                         'FROM dd'||UNAPIGEN.P_DD||'.uvotdetails' ||
                         ' WHERE col_id = ''' || L_COL_ID || ''''; 
         DBMS_SQL.PARSE(L_OT_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         DBMS_SQL.DEFINE_COLUMN(L_OT_CURSOR, 1, L_DSP_TITLE, 40);
         L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_OT_CURSOR);
         DBMS_SQL.COLUMN_VALUE(L_OT_CURSOR, 1, L_DSP_TITLE);
         A_DISP_TITLE(L_FETCHED_ROWS) := L_DSP_TITLE;
      END IF;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_TK_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_TK_CURSOR);
   DBMS_SQL.CLOSE_CURSOR(L_GK_CURSOR);
   DBMS_SQL.CLOSE_CURSOR(L_OT_CURSOR);   

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   UNAPIGEN.LOGERROR('GetTask', SQLERRM);
   IF DBMS_SQL.IS_OPEN (L_TK_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_TK_CURSOR);
   END IF;
   IF DBMS_SQL.IS_OPEN (L_GK_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_GK_CURSOR);
   END IF;
   IF DBMS_SQL.IS_OPEN (L_OT_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_OT_CURSOR);
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETTASK;

FUNCTION SAVETASK
(A_TK_TP          IN     VARCHAR2,                    
 A_TK             IN     VARCHAR2,                    
 A_DESCRIPTION    IN     VARCHAR2,                    
 A_COL_ID         IN     UNAPIGEN.VC40_TABLE_TYPE,    
 A_COL_TP         IN     UNAPIGEN.VC40_TABLE_TYPE,    
 A_DISP_TITLE     IN     UNAPIGEN.VC40_TABLE_TYPE,    
 A_OPERATOR       IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_DEF_VAL        IN     UNAPIGEN.VC40_TABLE_TYPE,    
 A_ANDOR          IN     UNAPIGEN.VC3_TABLE_TYPE,      
 A_HIDDEN         IN     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_IS_PROTECTED   IN     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_MANDATORY      IN     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_AUTO_REFRESH   IN     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_COL_ASC        IN     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_VALUE_LIST_TP  IN     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_OPERATOR_PROTECT IN   UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_ANDOR_PROTECT  IN     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_DSP_LEN        IN     UNAPIGEN.NUM_TABLE_TYPE,     
 A_NR_OF_ROWS     IN     NUMBER,                      
 A_MODIFY_REASON  IN     VARCHAR2)                    
RETURN NUMBER IS

A_VERSION        VARCHAR2(20);
L_LC             VARCHAR2(2);
L_LC_VERSION     VARCHAR2(20);
L_SS             VARCHAR2(2);
L_LOG_HS         CHAR(1);
L_ALLOW_MODIFY   CHAR(1);
L_ACTIVE         CHAR(1);
L_DELETE_CACHE   BOOLEAN;

CURSOR L_UPUS_CURSOR IS
   SELECT DISTINCT UP, US
   FROM UTUPUS;
   
CURSOR L_TK_CURSOR IS
   SELECT COL_ID, COL_TP, SEQ, COL_ASC
   FROM UTTK
   WHERE TK_TP = A_TK_TP
   AND VERSION = A_VERSION
   AND TK = A_TK
   ORDER BY SEQ;  
L_TK_REC         L_TK_CURSOR%ROWTYPE;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_EMPTYSAVE;
      RAISE STPERROR;
   END IF;

   
   A_VERSION := UNVERSION.P_NO_VERSION;
   IF A_VERSION IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;
   

   IF NVL(A_TK_TP, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJTP;
      RAISE STPERROR;
   END IF;

   IF NVL(A_TK, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   
   
   
   
   L_LC := '@L';
   L_SS := '@A';

   BEGIN
      SELECT VERSION
      INTO L_LC_VERSION
      FROM UTLC
      WHERE LC = '@L'
      AND VERSION_IS_CURRENT = '1';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      RETURN (UNAPIGEN.DBERR_NOCURRENTLCVERSION);
   END;

   BEGIN
      SELECT ALLOW_MODIFY, ACTIVE
      INTO L_ALLOW_MODIFY, L_ACTIVE
      FROM UTSS
      WHERE SS = '@A';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      RETURN (UNAPIGEN.DBERR_NOOBJECT);
   END;
   
   BEGIN
      SELECT LOG_HS
      INTO L_LOG_HS
      FROM UTOBJECTS 
      WHERE OBJECT = 'tk';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      
      
      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OBJTP;
      RAISE STPERROR;
   END;
   

   
   
   
   L_DELETE_CACHE := FALSE;
   OPEN L_TK_CURSOR;
   FOR L_SEQ IN 1..A_NR_OF_ROWS LOOP
      IF NVL(A_COL_TP(L_SEQ), ' ') NOT IN
          ('st','sc','me','rq','rt','stgk','scgk','megk','rqgk','rtgk', 'ws', 'wsgk', 'pt', 'ptgk', 'sd', 'sdgk', 'dc', 'dcgk', 'ch', 'chgk') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_COLTP;
        RAISE STPERROR;
     END IF;

      IF NVL(A_COL_ID(L_SEQ), ' ') = ' ' THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
      END IF;

      FETCH L_TK_CURSOR INTO L_TK_REC;
      IF L_TK_CURSOR%NOTFOUND OR
         (L_TK_REC.COL_ID <> A_COL_ID(L_SEQ)) OR 
         (L_TK_REC.COL_TP <> A_COL_TP(L_SEQ)) OR 
         (L_TK_REC.SEQ <> L_SEQ)              OR
         (NVL(L_TK_REC.COL_ASC,' ') <> NVL(A_COL_ASC(L_SEQ),' ')) THEN
         L_DELETE_CACHE := TRUE;
         EXIT;
      END IF;
   END LOOP;
   FETCH L_TK_CURSOR INTO L_TK_REC;
   IF L_TK_CURSOR%FOUND THEN
      L_DELETE_CACHE := TRUE;
   END IF;
   CLOSE L_TK_CURSOR;

   IF L_DELETE_CACHE THEN
      
      
      
      FOR L_UPUS_REC IN L_UPUS_CURSOR LOOP
         DELETE FROM UTUPUSTKVALUELISTS
         WHERE TK_TP = A_TK_TP
           AND TK = A_TK
           AND US = L_UPUS_REC.US
           AND UP = L_UPUS_REC.UP;
         UNAPIGEN.U4COMMIT;
      END LOOP;
      L_DELETE_CACHE := FALSE;
   END IF;

   
   DELETE FROM UTTKSQL 
   WHERE TK_TP = A_TK_TP
     AND TK = A_TK; 
   
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   DELETE FROM UTTK
   WHERE TK_TP = A_TK_TP
     AND VERSION = A_VERSION
     AND TK = A_TK;

   FOR L_SEQ IN 1..A_NR_OF_ROWS LOOP
      IF NVL(A_HIDDEN(L_SEQ), ' ') NOT IN ('1', '0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_HIDDEN;
         RAISE STPERROR;
      END IF;

      IF NVL(A_IS_PROTECTED(L_SEQ), ' ') NOT IN ('1', '0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_PROTECTED;
         RAISE STPERROR;
      END IF;

      IF NVL(A_MANDATORY(L_SEQ), ' ') NOT IN ('1', '0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_MANDATORY;
         RAISE STPERROR;
      END IF;

      IF NVL(A_AUTO_REFRESH(L_SEQ), ' ') NOT IN ('O', 'L') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_AUTOREFRESH;
         RAISE STPERROR;
      END IF;

      INSERT INTO UTTK(TK_TP, TK, VERSION, VERSION_IS_CURRENT, EFFECTIVE_FROM, EFFECTIVE_TILL, DESCRIPTION, 
                       COL_ID, COL_TP, SEQ, DSP_TITLE, OPERAT, DEF_VAL, ANDOR, HIDDEN, IS_PROTECTED, 
                       MANDATORY, AUTO_REFRESH, COL_ASC, VALUE_LIST_TP, OPERAT_PROTECT, ANDOR_PROTECT, DSP_LEN, 
                       LOG_HS, ALLOW_MODIFY, ACTIVE, LC, LC_VERSION, SS)
      VALUES(A_TK_TP, A_TK, A_VERSION, '1', SYSDATE, NULL, A_DESCRIPTION, A_COL_ID(L_SEQ), 
             A_COL_TP(L_SEQ), L_SEQ, A_DISP_TITLE(L_SEQ), A_OPERATOR(L_SEQ), A_DEF_VAL(L_SEQ), A_ANDOR(L_SEQ), A_HIDDEN(L_SEQ), A_IS_PROTECTED(L_SEQ),
             A_MANDATORY(L_SEQ), A_AUTO_REFRESH(L_SEQ), A_COL_ASC(L_SEQ), A_VALUE_LIST_TP(L_SEQ), A_OPERATOR_PROTECT(L_SEQ), A_ANDOR_PROTECT(L_SEQ),
       A_DSP_LEN(L_SEQ), L_LOG_HS, L_ALLOW_MODIFY, L_ACTIVE, L_LC, L_LC_VERSION, L_SS);
   END LOOP;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveTask', SQLERRM);
   END IF;
   IF L_TK_CURSOR%ISOPEN THEN
      CLOSE L_TK_CURSOR;
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveTask'));
END SAVETASK;



END UNAPITK;
PACKAGE BODY unapirt AS

TYPE BOOLEAN_TABLE_TYPE IS TABLE OF BOOLEAN INDEX BY BINARY_INTEGER;
L_SQLERRM         VARCHAR2(255);
L_SQL_STRING      VARCHAR2(4000);
L_WHERE_CLAUSE    VARCHAR2(3000);
L_EVENT_TP        UTEV.EV_TP%TYPE;
L_EV_DETAILS      VARCHAR2(255);
L_RET_CODE        NUMBER;
L_RESULT          NUMBER;
L_FETCHED_ROWS    NUMBER;
L_EV_SEQ_NR       NUMBER;
STPERROR          EXCEPTION;


P_RT_CURSOR            INTEGER;
P_SELECTRT_CURSOR      INTEGER;
P_SELECTRTGK_CURSOR    INTEGER;
P_SELECTRTPROP_CURSOR  INTEGER;
P_RTGK_CURSOR          INTEGER;
P_RTST_CURSOR          INTEGER;
P_RTIP_CURSOR          INTEGER;
P_RTPP_CURSOR          INTEGER;

FUNCTION GETVERSION
   RETURN VARCHAR2
IS
BEGIN
   RETURN('06.07.00.00_00.13');
EXCEPTION
   WHEN OTHERS THEN
      RETURN (NULL);
END GETVERSION;

FUNCTION GETREQUESTTYPELIST
(A_RT                          OUT      UNAPIGEN.VC20_TABLE_TYPE, 
 A_VERSION                     OUT      UNAPIGEN.VC20_TABLE_TYPE, 
 A_VERSION_IS_CURRENT          OUT      UNAPIGEN.CHAR1_TABLE_TYPE,
 A_EFFECTIVE_FROM              OUT      UNAPIGEN.DATE_TABLE_TYPE, 
 A_EFFECTIVE_TILL              OUT      UNAPIGEN.DATE_TABLE_TYPE, 
 A_DESCRIPTION                 OUT      UNAPIGEN.VC40_TABLE_TYPE, 
 A_SS                          OUT      UNAPIGEN.VC2_TABLE_TYPE,  
 A_NR_OF_ROWS                  IN OUT   NUMBER,                   
 A_WHERE_CLAUSE                IN       VARCHAR2,                 
 A_NEXT_ROWS                   IN       NUMBER)                   
RETURN NUMBER IS

L_RT                          VARCHAR2(20);
L_VERSION                     VARCHAR2(20);
L_VERSION_IS_CURRENT          CHAR(1);
L_EFFECTIVE_FROM              TIMESTAMP WITH TIME ZONE;
L_EFFECTIVE_TILL              TIMESTAMP WITH TIME ZONE;
L_DESCRIPTION                 VARCHAR2(40);
L_SS                          VARCHAR2(2);

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_RT_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_RT_CURSOR);
         P_RT_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_RT_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      IF P_RT_CURSOR IS NULL THEN
         P_RT_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;

      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
         L_WHERE_CLAUSE := 'WHERE active = ''1'' ORDER BY rt, version'; 
      ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
         L_WHERE_CLAUSE := 'WHERE version_is_current = ''1'' ' || 
                           'AND rt = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                           ''' ORDER BY rt, version';
      ELSE
         L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
      END IF;

      L_SQL_STRING := 'SELECT rt, version, nvl(version_is_current,''0''), effective_from, '||
                      'effective_till, description, ss FROM dd' ||
                      UNAPIGEN.P_DD || '.uvrt ' || L_WHERE_CLAUSE;

      DBMS_SQL.PARSE(P_RT_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

      DBMS_SQL.DEFINE_COLUMN(P_RT_CURSOR, 1, L_RT, 20);
      DBMS_SQL.DEFINE_COLUMN(P_RT_CURSOR, 2, L_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_RT_CURSOR, 3, L_VERSION_IS_CURRENT, 1);
      DBMS_SQL.DEFINE_COLUMN(P_RT_CURSOR, 4, L_EFFECTIVE_FROM);
      DBMS_SQL.DEFINE_COLUMN(P_RT_CURSOR, 5, L_EFFECTIVE_TILL);
      DBMS_SQL.DEFINE_COLUMN(P_RT_CURSOR, 6, L_DESCRIPTION, 40);
      DBMS_SQL.DEFINE_COLUMN(P_RT_CURSOR, 7, L_SS, 2);
      L_RESULT := DBMS_SQL.EXECUTE(P_RT_CURSOR);
   END IF;

   L_RESULT := DBMS_SQL.FETCH_ROWS(P_RT_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_RT_CURSOR, 1, L_RT);
      DBMS_SQL.COLUMN_VALUE(P_RT_CURSOR, 2, L_VERSION);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_RT_CURSOR, 3, L_VERSION_IS_CURRENT);
      DBMS_SQL.COLUMN_VALUE(P_RT_CURSOR, 4, L_EFFECTIVE_FROM);
      DBMS_SQL.COLUMN_VALUE(P_RT_CURSOR, 5, L_EFFECTIVE_TILL);
      DBMS_SQL.COLUMN_VALUE(P_RT_CURSOR, 6, L_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE(P_RT_CURSOR, 7, L_SS);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_RT(L_FETCHED_ROWS) := L_RT;
      A_VERSION(L_FETCHED_ROWS) := L_VERSION;
      A_VERSION_IS_CURRENT(L_FETCHED_ROWS) := L_VERSION_IS_CURRENT;
      A_EFFECTIVE_FROM(L_FETCHED_ROWS) := L_EFFECTIVE_FROM;
      A_EFFECTIVE_TILL(L_FETCHED_ROWS) := L_EFFECTIVE_TILL;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;
      A_SS(L_FETCHED_ROWS) := L_SS;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_RT_CURSOR);
      END IF;
   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_RT_CURSOR);
       P_RT_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_RT_CURSOR);
      P_RT_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME,
                          ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
              'GetRequestTypeList', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (P_RT_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (P_RT_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETREQUESTTYPELIST;

FUNCTION GETREQUESTTYPE
(A_RT                  OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_VERSION             OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_VERSION_IS_CURRENT  OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_EFFECTIVE_FROM      OUT  UNAPIGEN.DATE_TABLE_TYPE,     
 A_EFFECTIVE_TILL      OUT  UNAPIGEN.DATE_TABLE_TYPE,     
 A_DESCRIPTION         OUT  UNAPIGEN.VC40_TABLE_TYPE,     
 A_DESCRIPTION2        OUT  UNAPIGEN.VC40_TABLE_TYPE,     
 A_DESCR_DOC           OUT  UNAPIGEN.VC40_TABLE_TYPE,     
 A_DESCR_DOC_VERSION   OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_IS_TEMPLATE         OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_CONFIRM_USERID      OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_NR_PLANNED_RQ       OUT  UNAPIGEN.NUM_TABLE_TYPE,      
 A_FREQ_TP             OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_FREQ_VAL            OUT  UNAPIGEN.NUM_TABLE_TYPE,      
 A_FREQ_UNIT           OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_INVERT_FREQ         OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_LAST_SCHED          OUT  UNAPIGEN.DATE_TABLE_TYPE,     
 A_LAST_CNT            OUT  UNAPIGEN.NUM_TABLE_TYPE,      
 A_LAST_VAL            OUT  UNAPIGEN.VC40_TABLE_TYPE,     
 A_PRIORITY            OUT  UNAPIGEN.NUM_TABLE_TYPE,      
 A_LABEL_FORMAT        OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_ALLOW_ANY_ST        OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_ALLOW_NEW_SC        OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_ADD_STPP            OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_PLANNED_RESPONSIBLE OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_SC_UC               OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_SC_UC_VERSION       OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_RQ_UC               OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_RQ_UC_VERSION       OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_RQ_LC               OUT  UNAPIGEN.VC2_TABLE_TYPE,      
 A_RQ_LC_VERSION       OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_INHERIT_AU          OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_INHERIT_GK          OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_RT_CLASS            OUT  UNAPIGEN.VC2_TABLE_TYPE,      
 A_LOG_HS              OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_ALLOW_MODIFY        OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_ACTIVE              OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_LC                  OUT  UNAPIGEN.VC2_TABLE_TYPE,      
 A_LC_VERSION          OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_SS                  OUT  UNAPIGEN.VC2_TABLE_TYPE,      
 A_NR_OF_ROWS          IN OUT  NUMBER,                    
 A_WHERE_CLAUSE        IN   VARCHAR2)                     
RETURN NUMBER IS

L_RT                  VARCHAR2(20);
L_VERSION             VARCHAR2(20);
L_VERSION_IS_CURRENT  CHAR(1);
L_EFFECTIVE_FROM      TIMESTAMP WITH TIME ZONE;
L_EFFECTIVE_TILL      TIMESTAMP WITH TIME ZONE;
L_DESCRIPTION         VARCHAR2(40);
L_DESCRIPTION2        VARCHAR2(40);
L_DESCR_DOC           VARCHAR2(40);
L_DESCR_DOC_VERSION   VARCHAR2(20);
L_IS_TEMPLATE         CHAR(1);
L_CONFIRM_USERID      CHAR(1);
L_NR_PLANNED_RQ       NUMBER(3);
L_FREQ_TP             CHAR(1);
L_FREQ_VAL            NUMBER;
L_FREQ_UNIT           VARCHAR2(20);
L_INVERT_FREQ         CHAR(1);
L_LAST_SCHED          TIMESTAMP WITH TIME ZONE;
L_LAST_CNT            NUMBER(5);
L_LAST_VAL            VARCHAR2(40);
L_PRIORITY            NUMBER(3);
L_LABEL_FORMAT        VARCHAR2(20);
L_ALLOW_ANY_ST        CHAR(1);
L_ALLOW_NEW_SC        CHAR(1);
L_ADD_STPP            CHAR(1);
L_PLANNED_RESPONSIBLE VARCHAR2(20);
L_SC_UC               VARCHAR2(20);
L_SC_UC_VERSION       VARCHAR2(20);
L_RQ_UC               VARCHAR2(20);
L_RQ_UC_VERSION       VARCHAR2(20);
L_RQ_LC               VARCHAR2(2);
L_RQ_LC_VERSION       VARCHAR2(20);
L_INHERIT_AU          CHAR(1);
L_INHERIT_GK          CHAR(1);
L_RT_CLASS            VARCHAR2(2);
L_LOG_HS              CHAR(1);
L_ALLOW_MODIFY        CHAR(1);
L_ACTIVE              CHAR(1);
L_LC                  VARCHAR2(2);
L_LC_VERSION          VARCHAR2(20);
L_SS                  VARCHAR2(2);
L_RT_CURSOR           INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'ORDER BY rt, version'; 
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := 'WHERE version_is_current = ''1'' '||
                        'AND rt = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                        ''' ORDER BY rt, version';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_RT_CURSOR := DBMS_SQL.OPEN_CURSOR;

   L_SQL_STRING := 'SELECT rt, version, nvl(version_is_current,''0''), effective_from, effective_till, '||
                   'description, description2, descr_doc, descr_doc_version, is_template, '||
                   'confirm_userid, nr_planned_rq, freq_tp, freq_val, freq_unit, invert_freq, '||
                   'last_sched, last_cnt, last_val, priority, label_format, '||
                   'allow_any_st, allow_new_sc, add_stpp, planned_responsible, '||
                   'sc_uc, sc_uc_version, rq_uc, rq_uc_version, rq_lc, rq_lc_version, inherit_au, '||
                   'inherit_gk, rt_class, log_hs, allow_modify, active, lc, lc_version, ss ' ||
                   'FROM dd' || UNAPIGEN.P_DD || '.uvrt ' || L_WHERE_CLAUSE;
   DBMS_SQL.PARSE(L_RT_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_RT_CURSOR, 1, L_RT, 20);
   DBMS_SQL.DEFINE_COLUMN(L_RT_CURSOR, 2, L_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_RT_CURSOR, 3, L_VERSION_IS_CURRENT, 1);
   DBMS_SQL.DEFINE_COLUMN(L_RT_CURSOR, 4, L_EFFECTIVE_FROM);
   DBMS_SQL.DEFINE_COLUMN(L_RT_CURSOR, 5, L_EFFECTIVE_TILL);
   DBMS_SQL.DEFINE_COLUMN(L_RT_CURSOR, 6, L_DESCRIPTION, 40);
   DBMS_SQL.DEFINE_COLUMN(L_RT_CURSOR, 7, L_DESCRIPTION2, 40);
   DBMS_SQL.DEFINE_COLUMN(L_RT_CURSOR, 8, L_DESCR_DOC, 40);
   DBMS_SQL.DEFINE_COLUMN(L_RT_CURSOR, 9, L_DESCR_DOC_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_RT_CURSOR, 10, L_IS_TEMPLATE, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_RT_CURSOR, 11, L_CONFIRM_USERID, 1);
   DBMS_SQL.DEFINE_COLUMN(L_RT_CURSOR, 12, L_NR_PLANNED_RQ);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_RT_CURSOR, 13, L_FREQ_TP, 1);
   DBMS_SQL.DEFINE_COLUMN(L_RT_CURSOR, 14, L_FREQ_VAL);
   DBMS_SQL.DEFINE_COLUMN(L_RT_CURSOR, 15, L_FREQ_UNIT, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_RT_CURSOR, 16, L_INVERT_FREQ, 1);
   DBMS_SQL.DEFINE_COLUMN(L_RT_CURSOR, 17, L_LAST_SCHED);
   DBMS_SQL.DEFINE_COLUMN(L_RT_CURSOR, 18, L_LAST_CNT);
   DBMS_SQL.DEFINE_COLUMN(L_RT_CURSOR, 19, L_LAST_VAL, 40);
   DBMS_SQL.DEFINE_COLUMN(L_RT_CURSOR, 20, L_PRIORITY);
   DBMS_SQL.DEFINE_COLUMN(L_RT_CURSOR, 21, L_LABEL_FORMAT, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_RT_CURSOR, 22, L_ALLOW_ANY_ST, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_RT_CURSOR, 23, L_ALLOW_NEW_SC, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_RT_CURSOR, 24, L_ADD_STPP, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_RT_CURSOR, 25, L_PLANNED_RESPONSIBLE, 20);
   DBMS_SQL.DEFINE_COLUMN(L_RT_CURSOR, 26, L_SC_UC, 20);
   DBMS_SQL.DEFINE_COLUMN(L_RT_CURSOR, 27, L_SC_UC_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN(L_RT_CURSOR, 28, L_RQ_UC, 20);
   DBMS_SQL.DEFINE_COLUMN(L_RT_CURSOR, 29, L_RQ_UC_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN(L_RT_CURSOR, 30, L_RQ_LC, 2);
   DBMS_SQL.DEFINE_COLUMN(L_RT_CURSOR, 31, L_RQ_LC_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_RT_CURSOR, 32, L_INHERIT_AU, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_RT_CURSOR, 33, L_INHERIT_GK, 1);
   DBMS_SQL.DEFINE_COLUMN(L_RT_CURSOR, 34, L_RT_CLASS, 2);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_RT_CURSOR, 35, L_LOG_HS, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_RT_CURSOR, 36, L_ALLOW_MODIFY, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_RT_CURSOR, 37, L_ACTIVE, 1);
   DBMS_SQL.DEFINE_COLUMN(L_RT_CURSOR, 38, L_LC, 2);
   DBMS_SQL.DEFINE_COLUMN(L_RT_CURSOR, 39, L_LC_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN(L_RT_CURSOR, 40, L_SS, 2);

   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_RT_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_RT_CURSOR, 1, L_RT);
      DBMS_SQL.COLUMN_VALUE(L_RT_CURSOR, 2, L_VERSION);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_RT_CURSOR, 3, L_VERSION_IS_CURRENT);
      DBMS_SQL.COLUMN_VALUE(L_RT_CURSOR, 4, L_EFFECTIVE_FROM);
      DBMS_SQL.COLUMN_VALUE(L_RT_CURSOR, 5, L_EFFECTIVE_TILL);
      DBMS_SQL.COLUMN_VALUE(L_RT_CURSOR, 6, L_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE(L_RT_CURSOR, 7, L_DESCRIPTION2);
      DBMS_SQL.COLUMN_VALUE(L_RT_CURSOR, 8, L_DESCR_DOC);
      DBMS_SQL.COLUMN_VALUE(L_RT_CURSOR, 9, L_DESCR_DOC_VERSION);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_RT_CURSOR, 10, L_IS_TEMPLATE);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_RT_CURSOR, 11, L_CONFIRM_USERID);
      DBMS_SQL.COLUMN_VALUE(L_RT_CURSOR, 12, L_NR_PLANNED_RQ);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_RT_CURSOR, 13, L_FREQ_TP);
      DBMS_SQL.COLUMN_VALUE(L_RT_CURSOR, 14, L_FREQ_VAL);
      DBMS_SQL.COLUMN_VALUE(L_RT_CURSOR, 15, L_FREQ_UNIT);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_RT_CURSOR, 16, L_INVERT_FREQ);
      DBMS_SQL.COLUMN_VALUE(L_RT_CURSOR, 17, L_LAST_SCHED);
      DBMS_SQL.COLUMN_VALUE(L_RT_CURSOR, 18, L_LAST_CNT);
      DBMS_SQL.COLUMN_VALUE(L_RT_CURSOR, 19, L_LAST_VAL);
      DBMS_SQL.COLUMN_VALUE(L_RT_CURSOR, 20, L_PRIORITY);
      DBMS_SQL.COLUMN_VALUE(L_RT_CURSOR, 21, L_LABEL_FORMAT);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_RT_CURSOR, 22, L_ALLOW_ANY_ST);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_RT_CURSOR, 23, L_ALLOW_NEW_SC);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_RT_CURSOR, 24, L_ADD_STPP); 
      DBMS_SQL.COLUMN_VALUE_CHAR(L_RT_CURSOR, 25, L_PLANNED_RESPONSIBLE);
      DBMS_SQL.COLUMN_VALUE(L_RT_CURSOR, 26, L_SC_UC);
      DBMS_SQL.COLUMN_VALUE(L_RT_CURSOR, 27, L_SC_UC_VERSION);
      DBMS_SQL.COLUMN_VALUE(L_RT_CURSOR, 28, L_RQ_UC);
      DBMS_SQL.COLUMN_VALUE(L_RT_CURSOR, 29, L_RQ_UC_VERSION);
      DBMS_SQL.COLUMN_VALUE(L_RT_CURSOR, 30, L_RQ_LC);
      DBMS_SQL.COLUMN_VALUE(L_RT_CURSOR, 31, L_RQ_LC_VERSION);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_RT_CURSOR, 32, L_INHERIT_AU);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_RT_CURSOR, 33, L_INHERIT_GK);
      DBMS_SQL.COLUMN_VALUE(L_RT_CURSOR, 34, L_RT_CLASS);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_RT_CURSOR, 35, L_LOG_HS);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_RT_CURSOR, 36, L_ALLOW_MODIFY);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_RT_CURSOR, 37, L_ACTIVE);
      DBMS_SQL.COLUMN_VALUE(L_RT_CURSOR, 38, L_LC);
      DBMS_SQL.COLUMN_VALUE(L_RT_CURSOR, 39, L_LC_VERSION);
      DBMS_SQL.COLUMN_VALUE(L_RT_CURSOR, 40, L_SS);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_RT(L_FETCHED_ROWS) := L_RT;
      A_VERSION(L_FETCHED_ROWS) := L_VERSION;
      A_VERSION_IS_CURRENT(L_FETCHED_ROWS) := L_VERSION_IS_CURRENT;
      A_EFFECTIVE_FROM(L_FETCHED_ROWS) := L_EFFECTIVE_FROM;
      A_EFFECTIVE_TILL(L_FETCHED_ROWS) := L_EFFECTIVE_TILL;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;
      A_DESCRIPTION2(L_FETCHED_ROWS) := L_DESCRIPTION2;
      A_DESCR_DOC(L_FETCHED_ROWS) := L_DESCR_DOC;
      A_DESCR_DOC_VERSION(L_FETCHED_ROWS) := L_DESCR_DOC_VERSION;
      A_IS_TEMPLATE(L_FETCHED_ROWS) := L_IS_TEMPLATE;
      A_CONFIRM_USERID(L_FETCHED_ROWS) := L_CONFIRM_USERID;
      A_NR_PLANNED_RQ(L_FETCHED_ROWS) := L_NR_PLANNED_RQ;
      A_FREQ_TP(L_FETCHED_ROWS) := L_FREQ_TP;
      A_FREQ_VAL(L_FETCHED_ROWS) := L_FREQ_VAL;
      A_FREQ_UNIT(L_FETCHED_ROWS) := L_FREQ_UNIT;
      A_INVERT_FREQ(L_FETCHED_ROWS) := L_INVERT_FREQ;
      A_LAST_SCHED(L_FETCHED_ROWS) := L_LAST_SCHED;
      A_LAST_CNT(L_FETCHED_ROWS) := L_LAST_CNT;
      A_LAST_VAL(L_FETCHED_ROWS) := L_LAST_VAL;
      A_PRIORITY(L_FETCHED_ROWS) := L_PRIORITY;
      A_LABEL_FORMAT(L_FETCHED_ROWS) := L_LABEL_FORMAT;
      A_ALLOW_ANY_ST(L_FETCHED_ROWS) := L_ALLOW_ANY_ST;
      A_ALLOW_NEW_SC(L_FETCHED_ROWS) := L_ALLOW_NEW_SC;
      A_ADD_STPP(L_FETCHED_ROWS) := L_ADD_STPP;
      A_PLANNED_RESPONSIBLE(L_FETCHED_ROWS) := L_PLANNED_RESPONSIBLE;
      A_SC_UC(L_FETCHED_ROWS) := L_SC_UC;
      A_SC_UC_VERSION(L_FETCHED_ROWS) := L_SC_UC_VERSION;
      A_RQ_UC(L_FETCHED_ROWS) := L_RQ_UC;
      A_RQ_UC_VERSION(L_FETCHED_ROWS) := L_RQ_UC_VERSION;
      A_RQ_LC(L_FETCHED_ROWS) := L_RQ_LC;
      A_RQ_LC_VERSION(L_FETCHED_ROWS) := L_RQ_LC_VERSION;
      A_INHERIT_AU(L_FETCHED_ROWS) := L_INHERIT_AU;
      A_INHERIT_GK(L_FETCHED_ROWS) := L_INHERIT_GK;
      A_RT_CLASS(L_FETCHED_ROWS) := L_RT_CLASS;
      A_LOG_HS(L_FETCHED_ROWS) := L_LOG_HS;
      A_ALLOW_MODIFY(L_FETCHED_ROWS) := L_ALLOW_MODIFY;
      A_ACTIVE(L_FETCHED_ROWS) := L_ACTIVE;
      A_LC(L_FETCHED_ROWS) := L_LC;
      A_LC_VERSION(L_FETCHED_ROWS) := L_LC_VERSION;
      A_SS(L_FETCHED_ROWS) := L_SS;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_RT_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_RT_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;
   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
              'GetRequestType', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (L_RT_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_RT_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETREQUESTTYPE;

FUNCTION SELECTREQUESTTYPE
(A_COL_ID              IN   UNAPIGEN.VC40_TABLE_TYPE,     
 A_COL_TP              IN   UNAPIGEN.VC40_TABLE_TYPE,     
 A_COL_VALUE           IN   UNAPIGEN.VC40_TABLE_TYPE,     
 A_COL_NR_OF_ROWS      IN   NUMBER,                       
 A_RT                  OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_VERSION             OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_VERSION_IS_CURRENT  OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_EFFECTIVE_FROM      OUT  UNAPIGEN.DATE_TABLE_TYPE,     
 A_EFFECTIVE_TILL      OUT  UNAPIGEN.DATE_TABLE_TYPE,     
 A_DESCRIPTION         OUT  UNAPIGEN.VC40_TABLE_TYPE,     
 A_DESCRIPTION2        OUT  UNAPIGEN.VC40_TABLE_TYPE,     
 A_DESCR_DOC           OUT  UNAPIGEN.VC40_TABLE_TYPE,     
 A_DESCR_DOC_VERSION   OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_IS_TEMPLATE         OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_CONFIRM_USERID      OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_NR_PLANNED_RQ       OUT  UNAPIGEN.NUM_TABLE_TYPE,      
 A_FREQ_TP             OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_FREQ_VAL            OUT  UNAPIGEN.NUM_TABLE_TYPE,      
 A_FREQ_UNIT           OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_INVERT_FREQ         OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_LAST_SCHED          OUT  UNAPIGEN.DATE_TABLE_TYPE,     
 A_LAST_CNT            OUT  UNAPIGEN.NUM_TABLE_TYPE,      
 A_LAST_VAL            OUT  UNAPIGEN.VC40_TABLE_TYPE,     
 A_PRIORITY            OUT  UNAPIGEN.NUM_TABLE_TYPE,      
 A_LABEL_FORMAT        OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_ALLOW_ANY_ST        OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_ALLOW_NEW_SC        OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_ADD_STPP            OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_PLANNED_RESPONSIBLE OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_SC_UC               OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_SC_UC_VERSION       OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_RQ_UC               OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_RQ_UC_VERSION       OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_RQ_LC               OUT  UNAPIGEN.VC2_TABLE_TYPE,      
 A_RQ_LC_VERSION       OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_INHERIT_AU          OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_INHERIT_GK          OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_RT_CLASS            OUT  UNAPIGEN.VC2_TABLE_TYPE,      
 A_LOG_HS              OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_ALLOW_MODIFY        OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_ACTIVE              OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_LC                  OUT  UNAPIGEN.VC2_TABLE_TYPE,      
 A_LC_VERSION          OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_SS                  OUT  UNAPIGEN.VC2_TABLE_TYPE,      
 A_NR_OF_ROWS          IN OUT  NUMBER,                    
 A_ORDER_BY_CLAUSE     IN   VARCHAR2,                     
 A_NEXT_ROWS           IN   NUMBER)                       
RETURN NUMBER IS

L_COL_OPERATOR           UNAPIGEN.VC20_TABLE_TYPE;
L_COL_ANDOR              UNAPIGEN.VC3_TABLE_TYPE;

BEGIN

   FOR L_X IN 1..A_COL_NR_OF_ROWS LOOP
       L_COL_OPERATOR(L_X) := '=';
       L_COL_ANDOR(L_X) := 'AND';
   END LOOP;

   RETURN(UNAPIRT.SELECTREQUESTTYPE(A_COL_ID,
                               A_COL_TP,
                               A_COL_VALUE,
                               L_COL_OPERATOR,
                               L_COL_ANDOR,
                               A_COL_NR_OF_ROWS,
                               A_RT,
                               A_VERSION,
                               A_VERSION_IS_CURRENT,
                               A_EFFECTIVE_FROM,
                               A_EFFECTIVE_TILL,
                               A_DESCRIPTION,
                               A_DESCRIPTION2,
                               A_DESCR_DOC,
                               A_DESCR_DOC_VERSION,
                               A_IS_TEMPLATE,
                               A_CONFIRM_USERID,
                               A_NR_PLANNED_RQ,
                               A_FREQ_TP,
                               A_FREQ_VAL,
                               A_FREQ_UNIT,
                               A_INVERT_FREQ,
                               A_LAST_SCHED,
                               A_LAST_CNT,
                               A_LAST_VAL,
                               A_PRIORITY,
                               A_LABEL_FORMAT,
                               A_ALLOW_ANY_ST,
                               A_ALLOW_NEW_SC,
                               A_ADD_STPP,
                               A_PLANNED_RESPONSIBLE,
                               A_SC_UC,
                               A_SC_UC_VERSION,
                               A_RQ_UC,
                               A_RQ_UC_VERSION,
                               A_RQ_LC,
                               A_RQ_LC_VERSION,
                               A_INHERIT_AU,
                               A_INHERIT_GK,
                               A_RT_CLASS,
                               A_LOG_HS,
                               A_ALLOW_MODIFY,
                               A_ACTIVE,
                               A_LC,
                               A_LC_VERSION,
                               A_SS,
                               A_NR_OF_ROWS,
                               A_ORDER_BY_CLAUSE,
                               A_NEXT_ROWS));              
END SELECTREQUESTTYPE;

FUNCTION SELECTREQUESTTYPE
(A_COL_ID              IN   UNAPIGEN.VC40_TABLE_TYPE,     
 A_COL_TP              IN   UNAPIGEN.VC40_TABLE_TYPE,     
 A_COL_VALUE           IN   UNAPIGEN.VC40_TABLE_TYPE,     
 A_COL_OPERATOR        IN   UNAPIGEN.VC20_TABLE_TYPE,     
 A_COL_ANDOR           IN   UNAPIGEN.VC3_TABLE_TYPE,      
 A_COL_NR_OF_ROWS      IN   NUMBER,                       
 A_RT                  OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_VERSION             OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_VERSION_IS_CURRENT  OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_EFFECTIVE_FROM      OUT  UNAPIGEN.DATE_TABLE_TYPE,     
 A_EFFECTIVE_TILL      OUT  UNAPIGEN.DATE_TABLE_TYPE,     
 A_DESCRIPTION         OUT  UNAPIGEN.VC40_TABLE_TYPE,     
 A_DESCRIPTION2        OUT  UNAPIGEN.VC40_TABLE_TYPE,     
 A_DESCR_DOC           OUT  UNAPIGEN.VC40_TABLE_TYPE,     
 A_DESCR_DOC_VERSION   OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_IS_TEMPLATE         OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_CONFIRM_USERID      OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_NR_PLANNED_RQ       OUT  UNAPIGEN.NUM_TABLE_TYPE,      
 A_FREQ_TP             OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_FREQ_VAL            OUT  UNAPIGEN.NUM_TABLE_TYPE,      
 A_FREQ_UNIT           OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_INVERT_FREQ         OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_LAST_SCHED          OUT  UNAPIGEN.DATE_TABLE_TYPE,     
 A_LAST_CNT            OUT  UNAPIGEN.NUM_TABLE_TYPE,      
 A_LAST_VAL            OUT  UNAPIGEN.VC40_TABLE_TYPE,     
 A_PRIORITY            OUT  UNAPIGEN.NUM_TABLE_TYPE,      
 A_LABEL_FORMAT        OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_ALLOW_ANY_ST        OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_ALLOW_NEW_SC        OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_ADD_STPP            OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_PLANNED_RESPONSIBLE OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_SC_UC               OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_SC_UC_VERSION       OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_RQ_UC               OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_RQ_UC_VERSION       OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_RQ_LC               OUT  UNAPIGEN.VC2_TABLE_TYPE,      
 A_RQ_LC_VERSION       OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_INHERIT_AU          OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_INHERIT_GK          OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_RT_CLASS            OUT  UNAPIGEN.VC2_TABLE_TYPE,      
 A_LOG_HS              OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_ALLOW_MODIFY        OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_ACTIVE              OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_LC                  OUT  UNAPIGEN.VC2_TABLE_TYPE,      
 A_LC_VERSION          OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_SS                  OUT  UNAPIGEN.VC2_TABLE_TYPE,      
 A_NR_OF_ROWS          IN OUT  NUMBER,                    
 A_ORDER_BY_CLAUSE     IN   VARCHAR2,                     
 A_NEXT_ROWS           IN   NUMBER)                       
RETURN NUMBER IS

L_RT                             VARCHAR2(20);
L_VERSION                        VARCHAR2(20);
L_VERSION_IS_CURRENT             CHAR(1);
L_EFFECTIVE_FROM                 TIMESTAMP WITH TIME ZONE;
L_EFFECTIVE_TILL                 TIMESTAMP WITH TIME ZONE;
L_DESCRIPTION                    VARCHAR2(40);
L_DESCRIPTION2                   VARCHAR2(40);
L_DESCR_DOC                      VARCHAR2(40);
L_DESCR_DOC_VERSION              VARCHAR2(20);
L_IS_TEMPLATE                    CHAR(1);
L_CONFIRM_USERID                 CHAR(1);
L_NR_PLANNED_RQ                  NUMBER(3);
L_FREQ_TP                        CHAR(1);
L_FREQ_VAL                       NUMBER;
L_FREQ_UNIT                      VARCHAR2(20);
L_INVERT_FREQ                    CHAR(1);
L_LAST_SCHED                     TIMESTAMP WITH TIME ZONE;
L_LAST_CNT                       NUMBER(5);
L_LAST_VAL                       VARCHAR2(40);
L_PRIORITY                       NUMBER(3);
L_LABEL_FORMAT                   VARCHAR2(20);
L_ALLOW_ANY_ST                   CHAR(1);
L_ALLOW_NEW_SC                   CHAR(1);
L_ADD_STPP                       CHAR(1);
L_PLANNED_RESPONSIBLE            VARCHAR2(20);
L_SC_UC                          VARCHAR2(20);
L_SC_UC_VERSION                  VARCHAR2(20);
L_RQ_UC                          VARCHAR2(20);
L_RQ_UC_VERSION                  VARCHAR2(20);
L_RQ_LC                          VARCHAR2(2);
L_RQ_LC_VERSION                  VARCHAR2(20);
L_INHERIT_AU                     CHAR(1);
L_INHERIT_GK                     CHAR(1);
L_RT_CLASS                       VARCHAR2(2);
L_LOG_HS                         CHAR(1);
L_ALLOW_MODIFY                   CHAR(1);
L_ACTIVE                         CHAR(1);
L_LC                             VARCHAR2(2);
L_LC_VERSION                     VARCHAR2(20);
L_SS                             VARCHAR2(2);
L_ORDER_BY_CLAUSE                VARCHAR2(255);
L_FROM_CLAUSE                    VARCHAR2(255);
L_NEXT_RTGK_JOIN                 VARCHAR2(4);
L_NEXT_RT_JOIN                   VARCHAR2(4);
L_LENGTH                         INTEGER;
L_COLUMN_HANDLED                 BOOLEAN_TABLE_TYPE;
L_ANYOR_PRESENT                  BOOLEAN;
L_COL_ANDOR                      VARCHAR2(3);
L_PREV_COL_TP                    VARCHAR2(40);
L_PREV_COL_ID                    VARCHAR2(40);
L_PREV_COL_INDEX                 INTEGER;
L_WHERE_CLAUSE4JOIN              VARCHAR2(1000);
BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_SELECTRT_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_SELECTRT_CURSOR);
         P_SELECTRT_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;
   
   
   IF A_NEXT_ROWS = 1 THEN
      IF P_SELECTRT_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      P_SELECTION_VAL_TAB.DELETE;
      L_SQL_STRING := 'SELECT a.rt, a.version, nvl(a.version_is_current,''0''), a.effective_from, '||
                      'a.effective_till, a.description, a.description2, a.descr_doc, a.descr_doc_version, '||
                      'a.is_template, a.confirm_userid, a.nr_planned_rq, a.freq_tp, a.freq_val, '||
                      'a.freq_unit, a.invert_freq, a.last_sched, a.last_cnt, a.last_val, '||
                      'a.priority, a.label_format, a.allow_any_st, a.allow_new_sc, a.add_stpp, '||
                      'a.planned_responsible, a.sc_uc, a.sc_uc_version, a.rq_uc, a.rq_uc_version, '||
                      'a.rq_lc, a.rq_lc_version, a.inherit_au, a.inherit_gk, a.rt_class, a.log_hs, '|| 
                      'a.allow_modify, a.active, a.lc, a.lc_version, a.ss FROM ';
      L_FROM_CLAUSE := 'dd' || UNAPIGEN.P_DD || '.uvrt a ' ;

      
      L_WHERE_CLAUSE4JOIN := '';
      L_WHERE_CLAUSE := '';
      L_ANYOR_PRESENT := FALSE;

      FOR I IN 1..A_COL_NR_OF_ROWS LOOP
         L_COLUMN_HANDLED(I) := FALSE;
         IF LTRIM(RTRIM(UPPER(A_COL_ANDOR(I)))) = 'OR' AND
            NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
            L_ANYOR_PRESENT := TRUE;
         END IF;
         
         
         IF I<>1 THEN
            IF NVL(A_COL_TP(I), ' ') = NVL(A_COL_TP(I-1), ' ') AND
               NVL(A_COL_ID(I), ' ') = NVL(A_COL_ID(I-1), ' ') AND
               NVL(A_COL_OPERATOR(I), '=') = '=' AND
               NVL(A_COL_OPERATOR(I-1), '=') = '=' AND
               NVL(A_COL_ANDOR(I-1), 'AND') =  'AND' AND
               (NVL(A_COL_VALUE(I), ' ') <> ' ' OR NVL(A_COL_VALUE(I-1), ' ') <> ' ') THEN
               IF I> 2 AND A_COL_ANDOR(I-2) = 'OR' THEN
                  L_ANYOR_PRESENT := TRUE;
               END IF;
            END IF;
         END IF;         
      END LOOP;
      
      
      
      L_NEXT_RTGK_JOIN := 'a';
      L_NEXT_RT_JOIN := 'a';

      FOR I IN REVERSE 1..A_COL_NR_OF_ROWS LOOP
         IF NVL(LTRIM(A_COL_ID(I)), ' ') = ' ' THEN
            RETURN(UNAPIGEN.DBERR_SELCOLSINVALID);
         END IF;

         
         L_COL_ANDOR := 'AND';
         IF I<>1 THEN
            L_COL_ANDOR := A_COL_ANDOR(I-1);
         END IF;
         IF L_COL_ANDOR IS NULL THEN
            
            L_COL_ANDOR := 'AND';
         END IF;
         IF L_COLUMN_HANDLED(I) = FALSE THEN
            IF NVL(A_COL_TP(I), ' ') = 'rtgk' THEN
               IF NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
                  UNAPIGEN.WHERECLAUSESTRINGBUILDER (A_BASE_TABLE => 'utrt', A_INDEX =>I, A_COL_TP => A_COL_TP(I), A_COL_ID => A_COL_ID(I),
                                   A_COL_VALUE => A_COL_VALUE(I), A_COL_OPERATOR => A_COL_OPERATOR(I),
                                   A_COL_ANDOR => L_COL_ANDOR, A_ANYOR_PRESENT => L_ANYOR_PRESENT,
                                   A_JOINTABLE_PREFIX => 'utrtgk', A_JOINCOLUMN1 => 'rt', A_JOINCOLUMN2 => 'version', 
                                   A_PREV_COL_TP => L_PREV_COL_TP, A_PREV_COL_ID => L_PREV_COL_ID, A_PREV_COL_INDEX => L_PREV_COL_INDEX,
                                   A_NEXTTABLE_TOJOIN => L_NEXT_RTGK_JOIN, A_FROM_CLAUSE => L_FROM_CLAUSE,
                                   A_WHERE_CLAUSE4JOIN => L_WHERE_CLAUSE4JOIN, A_WHERE_CLAUSE => L_WHERE_CLAUSE,
                                 A_SQL_VAL_TAB => P_SELECTION_VAL_TAB);                  
               ELSIF INSTR(A_ORDER_BY_CLAUSE, 't'|| TO_CHAR(I)) <> 0 THEN
                  L_FROM_CLAUSE := L_FROM_CLAUSE || ', utrtgk' || A_COL_ID(I) || ' t' || I;
                  L_COL_ANDOR := 'AND'; 
                  
                  L_WHERE_CLAUSE4JOIN := L_WHERE_CLAUSE4JOIN ||
                                    't' || I || '.rt(+) = a.rt AND t' || I || '.version(+) = a.version ' || L_COL_ANDOR || ' ';
               END IF;
               L_COLUMN_HANDLED(I) := TRUE; 
            ELSE
               
               IF (LOWER(NVL(A_COL_ID(I),' ')) = 'version') AND (NVL(A_COL_VALUE(I),' ') = 'MAX') THEN
                  L_WHERE_CLAUSE := L_WHERE_CLAUSE || '(a.rt, a.' || A_COL_ID(I) || ') ' ||
                                    'IN (SELECT rt, MAX(' || A_COL_ID(I) || ') '|| 
                                        'FROM dd'|| UNAPIGEN.P_DD ||'.uvrt GROUP BY rt) '||
                                    L_COL_ANDOR|| ' '; 
               ELSIF NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
                  UNAPIGEN.WHERECLAUSESTRINGBUILDER (A_BASE_TABLE => 'utrt', A_INDEX =>I, A_COL_TP => A_COL_TP(I), A_COL_ID => A_COL_ID(I),
                                   A_COL_VALUE => A_COL_VALUE(I), A_COL_OPERATOR => A_COL_OPERATOR(I),
                                   A_COL_ANDOR => L_COL_ANDOR, A_ANYOR_PRESENT => L_ANYOR_PRESENT,
                                   A_JOINTABLE_PREFIX => '', A_JOINCOLUMN1 => '', A_JOINCOLUMN2 => '', 
                                   A_PREV_COL_TP => L_PREV_COL_TP, A_PREV_COL_ID => L_PREV_COL_ID, A_PREV_COL_INDEX => L_PREV_COL_INDEX,
                                   A_NEXTTABLE_TOJOIN => L_NEXT_RT_JOIN, A_FROM_CLAUSE => L_FROM_CLAUSE,
                                   A_WHERE_CLAUSE4JOIN => L_WHERE_CLAUSE4JOIN, A_WHERE_CLAUSE => L_WHERE_CLAUSE,
                                 A_SQL_VAL_TAB => P_SELECTION_VAL_TAB);                  
               END IF;
               L_COLUMN_HANDLED(I) := TRUE; 
            END IF;    
         END IF;
      END LOOP;

      
      IF SUBSTR(L_WHERE_CLAUSE4JOIN, -4) = 'AND ' THEN
         L_WHERE_CLAUSE4JOIN := SUBSTR(L_WHERE_CLAUSE4JOIN, 1,
                                  LENGTH(L_WHERE_CLAUSE4JOIN)-4);
      END IF;
      
      
      IF SUBSTR(L_WHERE_CLAUSE, -4) = 'AND ' THEN
         L_WHERE_CLAUSE := SUBSTR(L_WHERE_CLAUSE, 1,
                                  LENGTH(L_WHERE_CLAUSE)-4);
      END IF;
      IF UPPER(SUBSTR(L_WHERE_CLAUSE, -4)) = ' OR ' THEN
         L_WHERE_CLAUSE := SUBSTR(L_WHERE_CLAUSE, 1,
                                  LENGTH(L_WHERE_CLAUSE)-3);
      END IF;
      IF L_WHERE_CLAUSE4JOIN IS NOT NULL THEN
         IF L_WHERE_CLAUSE IS NULL THEN
            L_WHERE_CLAUSE := ' WHERE ' || L_WHERE_CLAUSE4JOIN;
         ELSE
            L_WHERE_CLAUSE := ' WHERE (' || L_WHERE_CLAUSE4JOIN || ') AND ('||L_WHERE_CLAUSE||') ';
         END IF;
      ELSE
         IF L_WHERE_CLAUSE IS NOT NULL THEN
            L_WHERE_CLAUSE := ' WHERE '||L_WHERE_CLAUSE;
         ELSE
            L_WHERE_CLAUSE := ' ';
         END IF;
      END IF;   

      IF NVL(A_ORDER_BY_CLAUSE, ' ') = ' ' THEN
         L_ORDER_BY_CLAUSE := ' ORDER BY a.rt, a.version';
      ELSE
         L_ORDER_BY_CLAUSE := A_ORDER_BY_CLAUSE; 
      END IF;

      L_SQL_STRING := L_SQL_STRING || L_FROM_CLAUSE || L_WHERE_CLAUSE || L_ORDER_BY_CLAUSE;
      P_SELECTION_CLAUSE := L_FROM_CLAUSE || L_WHERE_CLAUSE;

      IF P_SELECTRT_CURSOR IS NULL THEN
         P_SELECTRT_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;
      
      UNAPIAUT.ADDORACLECBOHINT (L_SQL_STRING) ;
      DBMS_SQL.PARSE(P_SELECTRT_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      FOR L_X IN 1..P_SELECTION_VAL_TAB.COUNT() LOOP
         DBMS_SQL.BIND_VARIABLE(P_SELECTRT_CURSOR, ':col_val'||L_X , P_SELECTION_VAL_TAB(L_X)); 
      END LOOP;

      DBMS_SQL.DEFINE_COLUMN(P_SELECTRT_CURSOR, 1, L_RT, 20);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTRT_CURSOR, 2, L_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTRT_CURSOR, 3, L_VERSION_IS_CURRENT, 1);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTRT_CURSOR, 4, L_EFFECTIVE_FROM);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTRT_CURSOR, 5, L_EFFECTIVE_TILL);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTRT_CURSOR, 6, L_DESCRIPTION, 40);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTRT_CURSOR, 7, L_DESCRIPTION2, 40);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTRT_CURSOR, 8, L_DESCR_DOC, 40);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTRT_CURSOR, 9, L_DESCR_DOC_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTRT_CURSOR, 10, L_IS_TEMPLATE, 1);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTRT_CURSOR, 11, L_CONFIRM_USERID, 1);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTRT_CURSOR, 12, L_NR_PLANNED_RQ);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTRT_CURSOR, 13, L_FREQ_TP, 1);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTRT_CURSOR, 14, L_FREQ_VAL);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTRT_CURSOR, 15, L_FREQ_UNIT, 20);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTRT_CURSOR, 16, L_INVERT_FREQ, 1);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTRT_CURSOR, 17, L_LAST_SCHED);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTRT_CURSOR, 18, L_LAST_CNT);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTRT_CURSOR, 19, L_LAST_VAL, 40);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTRT_CURSOR, 20, L_PRIORITY);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTRT_CURSOR, 21, L_LABEL_FORMAT, 20);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTRT_CURSOR, 22, L_ALLOW_ANY_ST, 1);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTRT_CURSOR, 23, L_ALLOW_NEW_SC, 1);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTRT_CURSOR, 24, L_ADD_STPP, 1);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTRT_CURSOR, 25, L_PLANNED_RESPONSIBLE, 20);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTRT_CURSOR, 26, L_SC_UC, 20);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTRT_CURSOR, 27, L_SC_UC_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTRT_CURSOR, 28, L_RQ_UC, 20);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTRT_CURSOR, 29, L_RQ_UC_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTRT_CURSOR, 30, L_RQ_LC, 2);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTRT_CURSOR, 31, L_RQ_LC_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTRT_CURSOR, 32, L_INHERIT_AU, 1);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTRT_CURSOR, 33, L_INHERIT_GK, 1);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTRT_CURSOR, 34, L_RT_CLASS, 2);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTRT_CURSOR, 35, L_LOG_HS, 1);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTRT_CURSOR, 36, L_ALLOW_MODIFY, 1);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTRT_CURSOR, 37, L_ACTIVE, 1);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTRT_CURSOR, 38, L_LC, 2);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTRT_CURSOR, 39, L_LC_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTRT_CURSOR, 40, L_SS, 2);

      L_RESULT := DBMS_SQL.EXECUTE(P_SELECTRT_CURSOR);
   END IF;
   
   L_RESULT := DBMS_SQL.FETCH_ROWS(P_SELECTRT_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_SELECTRT_CURSOR, 1, L_RT);
      DBMS_SQL.COLUMN_VALUE(P_SELECTRT_CURSOR, 2, L_VERSION);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTRT_CURSOR, 3, L_VERSION_IS_CURRENT);
      DBMS_SQL.COLUMN_VALUE(P_SELECTRT_CURSOR, 4, L_EFFECTIVE_FROM);
      DBMS_SQL.COLUMN_VALUE(P_SELECTRT_CURSOR, 5, L_EFFECTIVE_TILL);
      DBMS_SQL.COLUMN_VALUE(P_SELECTRT_CURSOR, 6, L_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE(P_SELECTRT_CURSOR, 7, L_DESCRIPTION2);
      DBMS_SQL.COLUMN_VALUE(P_SELECTRT_CURSOR, 8, L_DESCR_DOC);
      DBMS_SQL.COLUMN_VALUE(P_SELECTRT_CURSOR, 9, L_DESCR_DOC_VERSION);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTRT_CURSOR, 10, L_IS_TEMPLATE);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTRT_CURSOR, 11, L_CONFIRM_USERID);
      DBMS_SQL.COLUMN_VALUE(P_SELECTRT_CURSOR, 12, L_NR_PLANNED_RQ);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTRT_CURSOR, 13, L_FREQ_TP);
      DBMS_SQL.COLUMN_VALUE(P_SELECTRT_CURSOR, 14, L_FREQ_VAL);
      DBMS_SQL.COLUMN_VALUE(P_SELECTRT_CURSOR, 15, L_FREQ_UNIT);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTRT_CURSOR, 16, L_INVERT_FREQ);
      DBMS_SQL.COLUMN_VALUE(P_SELECTRT_CURSOR, 17, L_LAST_SCHED);
      DBMS_SQL.COLUMN_VALUE(P_SELECTRT_CURSOR, 18, L_LAST_CNT);
      DBMS_SQL.COLUMN_VALUE(P_SELECTRT_CURSOR, 19, L_LAST_VAL);
      DBMS_SQL.COLUMN_VALUE(P_SELECTRT_CURSOR, 20, L_PRIORITY);
      DBMS_SQL.COLUMN_VALUE(P_SELECTRT_CURSOR, 21, L_LABEL_FORMAT);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTRT_CURSOR, 22, L_ALLOW_ANY_ST);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTRT_CURSOR, 23, L_ALLOW_NEW_SC);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTRT_CURSOR, 24, L_ADD_STPP);
      DBMS_SQL.COLUMN_VALUE(P_SELECTRT_CURSOR, 25, L_PLANNED_RESPONSIBLE);
      DBMS_SQL.COLUMN_VALUE(P_SELECTRT_CURSOR, 26, L_SC_UC);
      DBMS_SQL.COLUMN_VALUE(P_SELECTRT_CURSOR, 27, L_SC_UC_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_SELECTRT_CURSOR, 28, L_RQ_UC);
      DBMS_SQL.COLUMN_VALUE(P_SELECTRT_CURSOR, 29, L_RQ_UC_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_SELECTRT_CURSOR, 30, L_RQ_LC);
      DBMS_SQL.COLUMN_VALUE(P_SELECTRT_CURSOR, 31, L_RQ_LC_VERSION);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTRT_CURSOR, 32, L_INHERIT_AU);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTRT_CURSOR, 33, L_INHERIT_GK);
      DBMS_SQL.COLUMN_VALUE(P_SELECTRT_CURSOR, 34, L_RT_CLASS);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTRT_CURSOR, 35, L_LOG_HS);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTRT_CURSOR, 36, L_ALLOW_MODIFY);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTRT_CURSOR, 37, L_ACTIVE);
      DBMS_SQL.COLUMN_VALUE(P_SELECTRT_CURSOR, 38, L_LC);
      DBMS_SQL.COLUMN_VALUE(P_SELECTRT_CURSOR, 39, L_LC_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_SELECTRT_CURSOR, 40, L_SS);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_RT(L_FETCHED_ROWS) := L_RT;
      A_VERSION(L_FETCHED_ROWS) := L_VERSION;
      A_VERSION_IS_CURRENT(L_FETCHED_ROWS) := L_VERSION_IS_CURRENT;
      A_EFFECTIVE_FROM(L_FETCHED_ROWS) := L_EFFECTIVE_FROM;
      A_EFFECTIVE_TILL(L_FETCHED_ROWS) := L_EFFECTIVE_TILL;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;
      A_DESCRIPTION2(L_FETCHED_ROWS) := L_DESCRIPTION2;
      A_DESCR_DOC(L_FETCHED_ROWS) := L_DESCR_DOC;
      A_DESCR_DOC_VERSION(L_FETCHED_ROWS) := L_DESCR_DOC_VERSION;
      A_IS_TEMPLATE(L_FETCHED_ROWS) := L_IS_TEMPLATE;
      A_CONFIRM_USERID(L_FETCHED_ROWS) := L_CONFIRM_USERID;
      A_NR_PLANNED_RQ(L_FETCHED_ROWS) := L_NR_PLANNED_RQ;
      A_FREQ_TP(L_FETCHED_ROWS) := L_FREQ_TP;
      A_FREQ_VAL(L_FETCHED_ROWS) := L_FREQ_VAL;
      A_FREQ_UNIT(L_FETCHED_ROWS) := L_FREQ_UNIT;
      A_INVERT_FREQ(L_FETCHED_ROWS) := L_INVERT_FREQ;
      A_LAST_SCHED(L_FETCHED_ROWS) := L_LAST_SCHED;
      A_LAST_CNT(L_FETCHED_ROWS) := L_LAST_CNT;
      A_LAST_VAL(L_FETCHED_ROWS) := L_LAST_VAL;
      A_PRIORITY (L_FETCHED_ROWS) := L_PRIORITY;
      A_LABEL_FORMAT(L_FETCHED_ROWS) := L_LABEL_FORMAT;
      A_ALLOW_ANY_ST(L_FETCHED_ROWS) := L_ALLOW_ANY_ST;
      A_ALLOW_NEW_SC(L_FETCHED_ROWS) := L_ALLOW_NEW_SC;
      A_ADD_STPP(L_FETCHED_ROWS) := L_ADD_STPP;
      A_PLANNED_RESPONSIBLE(L_FETCHED_ROWS) := L_PLANNED_RESPONSIBLE;
      A_SC_UC(L_FETCHED_ROWS) := L_SC_UC;
      A_SC_UC_VERSION(L_FETCHED_ROWS) := L_SC_UC_VERSION;
      A_RQ_UC(L_FETCHED_ROWS) := L_RQ_UC;
      A_RQ_UC_VERSION(L_FETCHED_ROWS) := L_RQ_UC_VERSION;
      A_RQ_LC(L_FETCHED_ROWS) := L_RQ_LC;
      A_RQ_LC_VERSION(L_FETCHED_ROWS) := L_RQ_LC_VERSION;
      A_INHERIT_AU(L_FETCHED_ROWS) := L_INHERIT_AU;
      A_INHERIT_GK(L_FETCHED_ROWS) := L_INHERIT_GK;
      A_RT_CLASS(L_FETCHED_ROWS) := L_RT_CLASS;
      A_LOG_HS(L_FETCHED_ROWS) := L_LOG_HS;
      A_ALLOW_MODIFY(L_FETCHED_ROWS) := L_ALLOW_MODIFY;
      A_ACTIVE(L_FETCHED_ROWS) := L_ACTIVE;
      A_LC(L_FETCHED_ROWS) := L_LC;
      A_LC_VERSION(L_FETCHED_ROWS) := L_LC_VERSION;
      A_SS(L_FETCHED_ROWS) := L_SS;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_SELECTRT_CURSOR);
      END IF;
   END LOOP;


   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_SELECTRT_CURSOR);
       P_SELECTRT_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_SELECTRT_CURSOR);
      P_SELECTRT_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;
   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
              'SelectRequestType', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      L_LENGTH := 200;
      FOR L_X IN 1..10 LOOP
         IF ( LENGTH(L_SQL_STRING) > ((L_LENGTH*(L_X-1))+1) ) THEN
            INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
            VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                   'SelectRequestType', '(SQL)'||SUBSTR(L_SQL_STRING, (L_LENGTH*(L_X-1))+1, L_LENGTH));             
         ELSE
            EXIT;
         END IF;
      END LOOP;            
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (P_SELECTRT_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (P_SELECTRT_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END SELECTREQUESTTYPE;

FUNCTION SELECTRTGKVALUES
(A_COL_ID           IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_TP           IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_VALUE        IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_NR_OF_ROWS   IN      NUMBER,                    
 A_GK               IN      VARCHAR2,                  
 A_VALUE            OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_NR_OF_ROWS       IN OUT  NUMBER,                    
 A_ORDER_BY_CLAUSE  IN      VARCHAR2,                  
 A_NEXT_ROWS        IN      NUMBER)                    
RETURN NUMBER IS
L_COL_OPERATOR           UNAPIGEN.VC20_TABLE_TYPE;
L_COL_ANDOR              UNAPIGEN.VC3_TABLE_TYPE;
BEGIN
   FOR L_X IN 1..A_COL_NR_OF_ROWS LOOP
       L_COL_OPERATOR(L_X) := '=';
       L_COL_ANDOR(L_X) := 'AND';
   END LOOP;
   RETURN(UNAPIRT.SELECTRTGKVALUES(A_COL_ID,
                                    A_COL_TP,
                                    A_COL_VALUE,
                                    L_COL_OPERATOR,
                                    L_COL_ANDOR,
                                    A_COL_NR_OF_ROWS,
                                    A_GK,
                                    A_VALUE,
                                    A_NR_OF_ROWS,
                                    A_ORDER_BY_CLAUSE,
                                    A_NEXT_ROWS));
END SELECTRTGKVALUES;

FUNCTION SELECTRTGKVALUES
(A_COL_ID           IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_TP           IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_VALUE        IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_OPERATOR     IN      UNAPIGEN.VC20_TABLE_TYPE,  
 A_COL_ANDOR        IN      UNAPIGEN.VC3_TABLE_TYPE,   
 A_COL_NR_OF_ROWS   IN      NUMBER,                    
 A_GK               IN      VARCHAR2,                  
 A_VALUE            OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_NR_OF_ROWS       IN OUT  NUMBER,                    
 A_ORDER_BY_CLAUSE  IN      VARCHAR2,                  
 A_NEXT_ROWS        IN      NUMBER)                    
RETURN NUMBER IS

L_VALUE                          VARCHAR2(40);
L_ORDER_BY_CLAUSE                VARCHAR2(255);
L_FROM_CLAUSE                    VARCHAR2(500);
L_NEXT_RQ_JOIN                   VARCHAR2(4);
L_NEXT_RT_JOIN                   VARCHAR2(4);
L_NEXT_RTGK_JOIN                 VARCHAR2(4);
L_NEXT_RQGK_JOIN                 VARCHAR2(4);
L_COLUMN_HANDLED                 BOOLEAN_TABLE_TYPE;
L_ANYOR_PRESENT                  BOOLEAN;
L_COL_ANDOR                      VARCHAR2(3);
L_PREV_COL_TP                    VARCHAR2(40);
L_PREV_COL_ID                    VARCHAR2(40);
L_PREV_COL_INDEX                 INTEGER;
L_WHERE_CLAUSE4JOIN              VARCHAR2(2000);
L_LENGTH                         INTEGER;
L_SQL_VAL_TAB                    VC40_NESTEDTABLE_TYPE := VC40_NESTEDTABLE_TYPE();

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_SELECTRTGK_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_SELECTRTGK_CURSOR);
         P_SELECTRTGK_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_SELECTRTGK_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;
   
   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
   
      
      L_SQL_STRING := 'SELECT DISTINCT b.' || A_GK || ' FROM ';
      L_FROM_CLAUSE := 'dd' || UNAPIGEN.P_DD || '.uvrt rt, utrtgk' || A_GK || ' b';

      
      L_WHERE_CLAUSE4JOIN := 'rt.rt = b.rt AND '|| 
                        'rt.version = b.version AND '; 
      L_WHERE_CLAUSE := '';
      L_ANYOR_PRESENT := FALSE;
      FOR I IN 1..A_COL_NR_OF_ROWS LOOP
         L_COLUMN_HANDLED(I) := FALSE;
         IF LTRIM(RTRIM(UPPER(A_COL_ANDOR(I)))) = 'OR' AND
            NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
            L_ANYOR_PRESENT := TRUE;
         END IF;
         
         
         IF I<>1 THEN
            IF NVL(A_COL_TP(I), ' ') = NVL(A_COL_TP(I-1), ' ') AND
               NVL(A_COL_ID(I), ' ') = NVL(A_COL_ID(I-1), ' ') AND
               NVL(A_COL_OPERATOR(I), '=') = '=' AND
               NVL(A_COL_OPERATOR(I-1), '=') = '=' AND
               NVL(A_COL_ANDOR(I-1), 'AND') =  'AND' AND
               (NVL(A_COL_VALUE(I), ' ') <> ' ' OR NVL(A_COL_VALUE(I-1), ' ') <> ' ') THEN
               IF I> 2 AND A_COL_ANDOR(I-2) = 'OR' THEN
                  L_ANYOR_PRESENT := TRUE;
               END IF;
            END IF;
         END IF;         
      END LOOP;
      
      
      
      
      L_NEXT_RT_JOIN := 'rt';
      L_NEXT_RTGK_JOIN := 'b';
      L_NEXT_RQGK_JOIN := 'rq';
      L_NEXT_RQ_JOIN := 'rq';

      FOR I IN REVERSE 1..A_COL_NR_OF_ROWS LOOP
         IF NVL(LTRIM(A_COL_ID(I)), ' ') = ' ' THEN
            RETURN(UNAPIGEN.DBERR_SELCOLSINVALID);
         END IF;

         
         L_COL_ANDOR := 'AND';
         IF I<>1 THEN
            L_COL_ANDOR := A_COL_ANDOR(I-1);
         END IF;
         IF L_COL_ANDOR IS NULL THEN
            
            L_COL_ANDOR := 'AND';
         END IF;

         IF L_COLUMN_HANDLED(I) = FALSE THEN
            IF NVL(A_COL_TP(I), ' ') = 'rtgk' THEN 
               IF NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
                  UNAPIGEN.WHERECLAUSESTRINGBUILDER (A_BASE_TABLE => 'utrt', A_INDEX =>I, A_COL_TP => A_COL_TP(I), A_COL_ID => A_COL_ID(I),
                                 A_COL_VALUE => A_COL_VALUE(I), A_COL_OPERATOR => A_COL_OPERATOR(I),
                                 A_COL_ANDOR => L_COL_ANDOR, A_ANYOR_PRESENT => L_ANYOR_PRESENT,
                                 A_JOINTABLE_PREFIX => 'utrtgk', A_JOINCOLUMN1 => 'rt', A_JOINCOLUMN2 => 'version', 
                                 A_PREV_COL_TP => L_PREV_COL_TP, A_PREV_COL_ID => L_PREV_COL_ID, A_PREV_COL_INDEX => L_PREV_COL_INDEX,
                                 A_NEXTTABLE_TOJOIN => L_NEXT_RTGK_JOIN, A_FROM_CLAUSE => L_FROM_CLAUSE,
                                 A_WHERE_CLAUSE4JOIN => L_WHERE_CLAUSE4JOIN, A_WHERE_CLAUSE => L_WHERE_CLAUSE,
                                 A_BASETABLE4GK_ALIAS => 'rt',
                                 A_SQL_VAL_TAB => L_SQL_VAL_TAB);                 
               END IF;
               L_COLUMN_HANDLED(I) := TRUE; 
            ELSIF NVL(A_COL_TP(I), ' ') = 'rqgk' THEN 
                  IF INSTR(L_FROM_CLAUSE, '.uvrq rq') = 0 THEN
                     L_FROM_CLAUSE := L_FROM_CLAUSE || ', dd' || UNAPIGEN.P_DD || '.uvrq rq' ;
                     L_WHERE_CLAUSE4JOIN := L_WHERE_CLAUSE4JOIN || 'rq.rt = b.rt AND '|| 
                                       'rq.rt_version = b.version AND '; 
                  END IF;
               IF NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
                  UNAPIGEN.WHERECLAUSESTRINGBUILDER (A_BASE_TABLE => 'utrq', A_INDEX =>I, A_COL_TP => A_COL_TP(I), A_COL_ID => A_COL_ID(I),
                                 A_COL_VALUE => A_COL_VALUE(I), A_COL_OPERATOR => A_COL_OPERATOR(I),
                                 A_COL_ANDOR => L_COL_ANDOR, A_ANYOR_PRESENT => L_ANYOR_PRESENT,
                                 A_JOINTABLE_PREFIX => 'utrqgk', A_JOINCOLUMN1 => 'rq', A_JOINCOLUMN2 => '', 
                                 A_PREV_COL_TP => L_PREV_COL_TP, A_PREV_COL_ID => L_PREV_COL_ID, A_PREV_COL_INDEX => L_PREV_COL_INDEX,
                                 A_NEXTTABLE_TOJOIN => L_NEXT_RQGK_JOIN, A_FROM_CLAUSE => L_FROM_CLAUSE,
                                 A_WHERE_CLAUSE4JOIN => L_WHERE_CLAUSE4JOIN, A_WHERE_CLAUSE => L_WHERE_CLAUSE,
                                 A_BASETABLE4GK_ALIAS => 'rq',
                                 A_SQL_VAL_TAB => L_SQL_VAL_TAB);                  
               END IF;
               L_COLUMN_HANDLED(I) := TRUE; 
            ELSIF NVL(A_COL_TP(I), ' ') = 'rq' THEN 
               IF INSTR(L_FROM_CLAUSE, '.uvrq rq') = 0 THEN
                  L_FROM_CLAUSE :=  'dd' || UNAPIGEN.P_DD || '.uvrq rq,' || L_FROM_CLAUSE;
                  L_WHERE_CLAUSE4JOIN := L_WHERE_CLAUSE4JOIN || 'rq.rt = b.rt AND '|| 
                                    'rq.rt_version = b.version AND '; 
               END IF;
               IF NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
                  UNAPIGEN.WHERECLAUSESTRINGBUILDER (A_BASE_TABLE => 'utrq', A_INDEX =>I, A_COL_TP => A_COL_TP(I), A_COL_ID => A_COL_ID(I),
                                   A_COL_VALUE => A_COL_VALUE(I), A_COL_OPERATOR => A_COL_OPERATOR(I),
                                   A_COL_ANDOR => L_COL_ANDOR, A_ANYOR_PRESENT => L_ANYOR_PRESENT,
                                   A_JOINTABLE_PREFIX => '', A_JOINCOLUMN1 => '', A_JOINCOLUMN2 => '', 
                                   A_PREV_COL_TP => L_PREV_COL_TP, A_PREV_COL_ID => L_PREV_COL_ID, A_PREV_COL_INDEX => L_PREV_COL_INDEX,
                                   A_NEXTTABLE_TOJOIN => L_NEXT_RQ_JOIN, A_FROM_CLAUSE => L_FROM_CLAUSE,
                                   A_WHERE_CLAUSE4JOIN => L_WHERE_CLAUSE4JOIN, A_WHERE_CLAUSE => L_WHERE_CLAUSE,
                                   A_BASETABLE4GK_ALIAS => 'rq',
                                 A_SQL_VAL_TAB => L_SQL_VAL_TAB);                 
               END IF;
               L_COLUMN_HANDLED(I) := TRUE; 
            ELSE 
               IF (LOWER(NVL(A_COL_ID(I),' ')) = 'version') AND (NVL(A_COL_VALUE(I),' ') = 'MAX') THEN
                  L_WHERE_CLAUSE := L_WHERE_CLAUSE || '(rt.rt, rt.' || A_COL_ID(I) || ') ' ||
                                    'IN (SELECT rt, MAX(' || A_COL_ID(I) || ') '|| 
                                        'FROM dd'|| UNAPIGEN.P_DD ||'.uvrt GROUP BY rt) '||
                                        L_COL_ANDOR || ' '; 
               ELSIF NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
                  UNAPIGEN.WHERECLAUSESTRINGBUILDER (A_BASE_TABLE => 'utrt', A_INDEX =>I, A_COL_TP => A_COL_TP(I), A_COL_ID => A_COL_ID(I),
                                 A_COL_VALUE => A_COL_VALUE(I), A_COL_OPERATOR => A_COL_OPERATOR(I),
                                 A_COL_ANDOR => L_COL_ANDOR, A_ANYOR_PRESENT => L_ANYOR_PRESENT,
                                 A_JOINTABLE_PREFIX => '', A_JOINCOLUMN1 => '', A_JOINCOLUMN2 => '', 
                                 A_PREV_COL_TP => L_PREV_COL_TP, A_PREV_COL_ID => L_PREV_COL_ID, A_PREV_COL_INDEX => L_PREV_COL_INDEX,
                                 A_NEXTTABLE_TOJOIN => L_NEXT_RT_JOIN, A_FROM_CLAUSE => L_FROM_CLAUSE,
                                 A_WHERE_CLAUSE4JOIN => L_WHERE_CLAUSE4JOIN, A_WHERE_CLAUSE => L_WHERE_CLAUSE,
                                 A_BASETABLE4GK_ALIAS => 'rt',
                                 A_SQL_VAL_TAB => L_SQL_VAL_TAB);                  
               END IF;
               L_COLUMN_HANDLED(I) := TRUE; 
            END IF;
         END IF;
      END LOOP;
      
      
      IF SUBSTR(L_WHERE_CLAUSE4JOIN, -4) = 'AND ' THEN
         L_WHERE_CLAUSE4JOIN := SUBSTR(L_WHERE_CLAUSE4JOIN, 1,
                                  LENGTH(L_WHERE_CLAUSE4JOIN)-4);
      END IF;
      
      
      IF SUBSTR(L_WHERE_CLAUSE, -4) = 'AND ' THEN
         L_WHERE_CLAUSE := SUBSTR(L_WHERE_CLAUSE, 1,
                                  LENGTH(L_WHERE_CLAUSE)-4);
      END IF;
      IF UPPER(SUBSTR(L_WHERE_CLAUSE, -4)) = ' OR ' THEN
         L_WHERE_CLAUSE := SUBSTR(L_WHERE_CLAUSE, 1,
                                  LENGTH(L_WHERE_CLAUSE)-3);
      END IF;
      
      IF L_WHERE_CLAUSE4JOIN IS NOT NULL THEN
         IF L_WHERE_CLAUSE IS NULL THEN
            L_WHERE_CLAUSE := ' WHERE ' || L_WHERE_CLAUSE4JOIN;
         ELSE
            L_WHERE_CLAUSE := ' WHERE (' || L_WHERE_CLAUSE4JOIN || ') AND ('||L_WHERE_CLAUSE||') ';
         END IF;
      ELSE
         IF L_WHERE_CLAUSE IS NOT NULL THEN
            L_WHERE_CLAUSE := ' WHERE '||L_WHERE_CLAUSE;
         ELSE
            L_WHERE_CLAUSE := ' ';
         END IF;
      END IF;

      L_ORDER_BY_CLAUSE := NVL(A_ORDER_BY_CLAUSE, ' ORDER BY 1');

      L_SQL_STRING := L_SQL_STRING || L_FROM_CLAUSE || L_WHERE_CLAUSE || L_ORDER_BY_CLAUSE;

      L_LENGTH := 200;
      FOR L_X IN 1..10 LOOP
         IF ( LENGTH(L_SQL_STRING) > ((L_LENGTH*(L_X-1))+1) ) THEN
            DBMS_OUTPUT.PUT_LINE(SUBSTR(L_SQL_STRING, (L_LENGTH*(L_X-1))+1, L_LENGTH));
         ELSE
            EXIT;
         END IF;
      END LOOP;            
                      
      IF P_SELECTRTGK_CURSOR IS NULL THEN 
         P_SELECTRTGK_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;

      UNAPIAUT.ADDORACLECBOHINT (L_SQL_STRING) ;
      DBMS_SQL.PARSE(P_SELECTRTGK_CURSOR, L_SQL_STRING, DBMS_SQL.V7);    
      FOR L_X IN 1..L_SQL_VAL_TAB.COUNT() LOOP
         DBMS_SQL.BIND_VARIABLE(P_SELECTRTGK_CURSOR, ':col_val'||L_X , L_SQL_VAL_TAB(L_X)); 
      END LOOP;
      DBMS_SQL.DEFINE_COLUMN(P_SELECTRTGK_CURSOR, 1, L_VALUE, 40);
      L_RESULT := DBMS_SQL.EXECUTE(P_SELECTRTGK_CURSOR);

   END IF;
   
   L_RESULT := DBMS_SQL.FETCH_ROWS(P_SELECTRTGK_CURSOR);
   L_FETCHED_ROWS := 0;
   
   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;
      DBMS_SQL.COLUMN_VALUE(P_SELECTRTGK_CURSOR, 1, L_VALUE);
      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
   
      A_VALUE(L_FETCHED_ROWS) := L_VALUE;
   
      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_SELECTRTGK_CURSOR);
      END IF;
   END LOOP;
   
   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_SELECTRTGK_CURSOR);
       P_SELECTRTGK_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_SELECTRTGK_CURSOR);
      P_SELECTRTGK_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);
   
EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
              'SelectRtGkValues', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      L_LENGTH := 200;
      FOR L_X IN 1..10 LOOP
         IF ( LENGTH(L_SQL_STRING) > ((L_LENGTH*(L_X-1))+1) ) THEN
            INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
            VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                   'SelectRtGkValues', '(SQL)'||SUBSTR(L_SQL_STRING, (L_LENGTH*(L_X-1))+1, L_LENGTH));             
         ELSE
            EXIT;
         END IF;
      END LOOP;            
      L_LENGTH := 200;
      FOR L_X IN 1..10 LOOP
         IF ( LENGTH(L_SQLERRM) > ((L_LENGTH*(L_X-1))+1) ) THEN
            DBMS_OUTPUT.PUT_LINE(SUBSTR(L_SQLERRM, (L_LENGTH*(L_X-1))+1, L_LENGTH));
         ELSE
            EXIT;
         END IF;
      END LOOP;            
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (P_SELECTRTGK_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (P_SELECTRTGK_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END SELECTRTGKVALUES;

FUNCTION SELECTRTPROPVALUES
(A_COL_ID           IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_TP           IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_VALUE        IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_NR_OF_ROWS   IN      NUMBER,                    
 A_PROP             IN      VARCHAR2,                  
 A_VALUE            OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_NR_OF_ROWS       IN OUT  NUMBER,                    
 A_ORDER_BY_CLAUSE  IN      VARCHAR2,                  
 A_NEXT_ROWS        IN      NUMBER)                    
RETURN NUMBER IS
L_COL_OPERATOR           UNAPIGEN.VC20_TABLE_TYPE;
L_COL_ANDOR              UNAPIGEN.VC3_TABLE_TYPE;
BEGIN
FOR L_X IN 1..A_COL_NR_OF_ROWS LOOP
    L_COL_OPERATOR(L_X) := '=';
    L_COL_ANDOR(L_X) := 'AND';
END LOOP;
 RETURN(UNAPIRT.SELECTRTPROPVALUES(A_COL_ID,
                                 A_COL_TP,
                                 A_COL_VALUE,
                                 L_COL_OPERATOR,
                                 L_COL_ANDOR,
                                 A_COL_NR_OF_ROWS,
                                 A_PROP,
                                 A_VALUE,
                                 A_NR_OF_ROWS,
                                 A_ORDER_BY_CLAUSE,
                                 A_NEXT_ROWS));
END SELECTRTPROPVALUES;

FUNCTION SELECTRTPROPVALUES
(A_COL_ID           IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_TP           IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_VALUE        IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_OPERATOR     IN      UNAPIGEN.VC20_TABLE_TYPE,  
 A_COL_ANDOR        IN      UNAPIGEN.VC3_TABLE_TYPE,   
 A_COL_NR_OF_ROWS   IN      NUMBER,                    
 A_PROP             IN      VARCHAR2,                  
 A_VALUE            OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_NR_OF_ROWS       IN OUT  NUMBER,                    
 A_ORDER_BY_CLAUSE  IN      VARCHAR2,                  
 A_NEXT_ROWS        IN      NUMBER)                    
RETURN NUMBER IS

L_VALUE                          VARCHAR2(40);
L_ORDER_BY_CLAUSE                VARCHAR2(255);
L_FROM_CLAUSE                    VARCHAR2(500);
L_NEXT_RT_JOIN                   VARCHAR2(4);
L_NEXT_RQ_JOIN                   VARCHAR2(4);
L_NEXT_RTGK_JOIN                 VARCHAR2(4);
L_NEXT_RQGK_JOIN                 VARCHAR2(4);
L_COLUMN_HANDLED                 BOOLEAN_TABLE_TYPE;
L_ANYOR_PRESENT                  BOOLEAN;
L_COL_ANDOR                      VARCHAR2(3);
L_PREV_COL_TP                    VARCHAR2(40);
L_PREV_COL_ID                    VARCHAR2(40);
L_PREV_COL_INDEX                 INTEGER;
L_WHERE_CLAUSE4JOIN              VARCHAR2(2000);
L_LENGTH                         INTEGER;
L_SQL_VAL_TAB                    VC40_NESTEDTABLE_TYPE := VC40_NESTEDTABLE_TYPE();

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_SELECTRTPROP_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_SELECTRTPROP_CURSOR);
         P_SELECTRTPROP_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_SELECTRTPROP_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      L_SQL_STRING := 'SELECT DISTINCT a.' || A_PROP ||' FROM ';
      L_FROM_CLAUSE := 'dd' || UNAPIGEN.P_DD || '.uvrt a';

      
      L_WHERE_CLAUSE4JOIN := '';
      L_WHERE_CLAUSE := '';
      L_ANYOR_PRESENT := FALSE;
      FOR I IN 1..A_COL_NR_OF_ROWS LOOP
         L_COLUMN_HANDLED(I) := FALSE;
         IF LTRIM(RTRIM(UPPER(A_COL_ANDOR(I)))) = 'OR' AND
            NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
            L_ANYOR_PRESENT := TRUE;
         END IF;
         
         
         IF I<>1 THEN
            IF NVL(A_COL_TP(I), ' ') = NVL(A_COL_TP(I-1), ' ') AND
               NVL(A_COL_ID(I), ' ') = NVL(A_COL_ID(I-1), ' ') AND
               NVL(A_COL_OPERATOR(I), '=') = '=' AND
               NVL(A_COL_OPERATOR(I-1), '=') = '=' AND
               NVL(A_COL_ANDOR(I-1), 'AND') =  'AND' AND
               (NVL(A_COL_VALUE(I), ' ') <> ' ' OR NVL(A_COL_VALUE(I-1), ' ') <> ' ') THEN
               IF I> 2 AND A_COL_ANDOR(I-2) = 'OR' THEN
                  L_ANYOR_PRESENT := TRUE;
               END IF;
            END IF;
         END IF;         
      END LOOP;
      
      
      
      L_NEXT_RQGK_JOIN := 'rq';
      L_NEXT_RQ_JOIN := 'rq';
      L_NEXT_RTGK_JOIN := 'a';
      L_NEXT_RT_JOIN := 'a';

      FOR I IN REVERSE 1..A_COL_NR_OF_ROWS LOOP
         IF NVL(LTRIM(A_COL_ID(I)), ' ') = ' ' THEN
            RETURN(UNAPIGEN.DBERR_SELCOLSINVALID);
         END IF;

         
         L_COL_ANDOR := 'AND';
         IF I<>1 THEN
            L_COL_ANDOR := A_COL_ANDOR(I-1);
         END IF;
         IF L_COL_ANDOR IS NULL THEN
            
            L_COL_ANDOR := 'AND';
         END IF;

         IF L_COLUMN_HANDLED(I) = FALSE THEN
            IF NVL(A_COL_TP(I), ' ') = 'rtgk' THEN 
               IF NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
                  UNAPIGEN.WHERECLAUSESTRINGBUILDER (A_BASE_TABLE => 'utrt', A_INDEX =>I, A_COL_TP => A_COL_TP(I), A_COL_ID => A_COL_ID(I),
                                 A_COL_VALUE => A_COL_VALUE(I), A_COL_OPERATOR => A_COL_OPERATOR(I),
                                 A_COL_ANDOR => L_COL_ANDOR, A_ANYOR_PRESENT => L_ANYOR_PRESENT,
                                 A_JOINTABLE_PREFIX => 'utrtgk', A_JOINCOLUMN1 => 'rt', A_JOINCOLUMN2 => 'version', 
                                 A_PREV_COL_TP => L_PREV_COL_TP, A_PREV_COL_ID => L_PREV_COL_ID, A_PREV_COL_INDEX => L_PREV_COL_INDEX,
                                 A_NEXTTABLE_TOJOIN => L_NEXT_RTGK_JOIN, A_FROM_CLAUSE => L_FROM_CLAUSE,
                                 A_WHERE_CLAUSE4JOIN => L_WHERE_CLAUSE4JOIN, A_WHERE_CLAUSE => L_WHERE_CLAUSE,
                                 A_SQL_VAL_TAB => L_SQL_VAL_TAB);                                   
               END IF;
               L_COLUMN_HANDLED(I) := TRUE; 
            ELSIF NVL(A_COL_TP(I), ' ') = 'rqgk' THEN 
               IF INSTR(L_FROM_CLAUSE, '.uvrq rq') = 0 THEN
                 L_FROM_CLAUSE := L_FROM_CLAUSE || ', dd' || UNAPIGEN.P_DD || '.uvrq rq' ;
                 L_WHERE_CLAUSE4JOIN := L_WHERE_CLAUSE4JOIN || 'rq.rt = a.rt AND '|| 
                                   'rq.rt_version = a.version AND '; 
               END IF;
               IF NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
                  UNAPIGEN.WHERECLAUSESTRINGBUILDER (A_BASE_TABLE => 'utrq', A_INDEX =>I, A_COL_TP => A_COL_TP(I), A_COL_ID => A_COL_ID(I),
                                 A_COL_VALUE => A_COL_VALUE(I), A_COL_OPERATOR => A_COL_OPERATOR(I),
                                 A_COL_ANDOR => L_COL_ANDOR, A_ANYOR_PRESENT => L_ANYOR_PRESENT,
                                 A_JOINTABLE_PREFIX => 'utrqgk', A_JOINCOLUMN1 => 'rq', A_JOINCOLUMN2 => '', 
                                 A_PREV_COL_TP => L_PREV_COL_TP, A_PREV_COL_ID => L_PREV_COL_ID, A_PREV_COL_INDEX => L_PREV_COL_INDEX,
                                 A_NEXTTABLE_TOJOIN => L_NEXT_RQGK_JOIN, A_FROM_CLAUSE => L_FROM_CLAUSE,
                                 A_WHERE_CLAUSE4JOIN => L_WHERE_CLAUSE4JOIN, A_WHERE_CLAUSE => L_WHERE_CLAUSE,
                                 A_BASETABLE4GK_ALIAS => 'rq',
                                 A_SQL_VAL_TAB => L_SQL_VAL_TAB);                                  
               END IF;
               L_COLUMN_HANDLED(I) := TRUE; 
            ELSIF NVL(A_COL_TP(I), ' ') = 'rq' THEN 
               IF INSTR(L_FROM_CLAUSE, '.uvrq rq') = 0 THEN
                 L_FROM_CLAUSE := L_FROM_CLAUSE || ', dd' || UNAPIGEN.P_DD || '.uvrq rq' ;
                 L_WHERE_CLAUSE4JOIN := L_WHERE_CLAUSE4JOIN || 'rq.rt = a.rt AND '|| 
                                        'rq.rt_version = a.version AND '; 
               END IF;
               IF NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
                  UNAPIGEN.WHERECLAUSESTRINGBUILDER (A_BASE_TABLE => 'utrq', A_INDEX =>I, A_COL_TP => A_COL_TP(I), A_COL_ID => A_COL_ID(I),
                                 A_COL_VALUE => A_COL_VALUE(I), A_COL_OPERATOR => A_COL_OPERATOR(I),
                                 A_COL_ANDOR => L_COL_ANDOR, A_ANYOR_PRESENT => L_ANYOR_PRESENT,
                                 A_JOINTABLE_PREFIX => '', A_JOINCOLUMN1 => '', A_JOINCOLUMN2 => '', 
                                 A_PREV_COL_TP => L_PREV_COL_TP, A_PREV_COL_ID => L_PREV_COL_ID, A_PREV_COL_INDEX => L_PREV_COL_INDEX,
                                 A_NEXTTABLE_TOJOIN => L_NEXT_RQ_JOIN, A_FROM_CLAUSE => L_FROM_CLAUSE,
                                 A_WHERE_CLAUSE4JOIN => L_WHERE_CLAUSE4JOIN, A_WHERE_CLAUSE => L_WHERE_CLAUSE,                  
                                 A_BASETABLE4GK_ALIAS => 'rq',
                                 A_SQL_VAL_TAB => L_SQL_VAL_TAB);                  
               END IF;
               L_COLUMN_HANDLED(I) := TRUE; 
            ELSE 
               IF (LOWER(NVL(A_COL_ID(I),' ')) = 'version') AND (NVL(A_COL_VALUE(I),' ') = 'MAX') THEN
                 L_WHERE_CLAUSE := L_WHERE_CLAUSE || '(a.rt, a.' || A_COL_ID(I) || ') ' ||
                                   'IN (SELECT rt, MAX(' || A_COL_ID(I) || ') '|| 
                                       'FROM dd'|| UNAPIGEN.P_DD ||'.uvrt GROUP BY rt) '||
                                        L_COL_ANDOR|| ' '; 
               ELSIF NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
                  UNAPIGEN.WHERECLAUSESTRINGBUILDER (A_BASE_TABLE => 'utrt', A_INDEX =>I, A_COL_TP => A_COL_TP(I), A_COL_ID => A_COL_ID(I),
                                 A_COL_VALUE => A_COL_VALUE(I), A_COL_OPERATOR => A_COL_OPERATOR(I),
                                 A_COL_ANDOR => L_COL_ANDOR, A_ANYOR_PRESENT => L_ANYOR_PRESENT,
                                 A_JOINTABLE_PREFIX => '', A_JOINCOLUMN1 => '', A_JOINCOLUMN2 => '', 
                                 A_PREV_COL_TP => L_PREV_COL_TP, A_PREV_COL_ID => L_PREV_COL_ID, A_PREV_COL_INDEX => L_PREV_COL_INDEX,
                                 A_NEXTTABLE_TOJOIN => L_NEXT_RT_JOIN, A_FROM_CLAUSE => L_FROM_CLAUSE,
                                 A_WHERE_CLAUSE4JOIN => L_WHERE_CLAUSE4JOIN, A_WHERE_CLAUSE => L_WHERE_CLAUSE,
                                 A_SQL_VAL_TAB => L_SQL_VAL_TAB);                                   
               END IF;
               L_COLUMN_HANDLED(I) := TRUE; 
            END IF;
         END IF;
      END LOOP;

      
      IF SUBSTR(L_WHERE_CLAUSE4JOIN, -4) = 'AND ' THEN
         L_WHERE_CLAUSE4JOIN := SUBSTR(L_WHERE_CLAUSE4JOIN, 1,
                                  LENGTH(L_WHERE_CLAUSE4JOIN)-4);
      END IF;
      
      
      IF SUBSTR(L_WHERE_CLAUSE, -4) = 'AND ' THEN
         L_WHERE_CLAUSE := SUBSTR(L_WHERE_CLAUSE, 1,
                                  LENGTH(L_WHERE_CLAUSE)-4);
      END IF;
      IF UPPER(SUBSTR(L_WHERE_CLAUSE, -4)) = ' OR ' THEN
         L_WHERE_CLAUSE := SUBSTR(L_WHERE_CLAUSE, 1,
                                  LENGTH(L_WHERE_CLAUSE)-3);
      END IF;
      
      IF L_WHERE_CLAUSE4JOIN IS NOT NULL THEN
         IF L_WHERE_CLAUSE IS NULL THEN
            L_WHERE_CLAUSE := ' WHERE ' || L_WHERE_CLAUSE4JOIN;
         ELSE
            L_WHERE_CLAUSE := ' WHERE (' || L_WHERE_CLAUSE4JOIN || ') AND ('||L_WHERE_CLAUSE||') ';
         END IF;
      ELSE
         IF L_WHERE_CLAUSE IS NOT NULL THEN
            L_WHERE_CLAUSE := ' WHERE '||L_WHERE_CLAUSE;
         ELSE
            L_WHERE_CLAUSE := ' ';
         END IF;
      END IF;

      L_ORDER_BY_CLAUSE := NVL(A_ORDER_BY_CLAUSE, ' ORDER BY 1');

      L_SQL_STRING := L_SQL_STRING || L_FROM_CLAUSE || L_WHERE_CLAUSE || L_ORDER_BY_CLAUSE;

      L_LENGTH := 200;
      FOR L_X IN 1..10 LOOP
         IF ( LENGTH(L_SQL_STRING) > ((L_LENGTH*(L_X-1))+1) ) THEN
            DBMS_OUTPUT.PUT_LINE(SUBSTR(L_SQL_STRING, (L_LENGTH*(L_X-1))+1, L_LENGTH));
         ELSE
            EXIT;
         END IF;
      END LOOP;            

      IF P_SELECTRTPROP_CURSOR IS NULL THEN 
         P_SELECTRTPROP_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;
      
      UNAPIAUT.ADDORACLECBOHINT (L_SQL_STRING) ;
      DBMS_SQL.PARSE(P_SELECTRTPROP_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      FOR L_X IN 1..L_SQL_VAL_TAB.COUNT() LOOP
         DBMS_SQL.BIND_VARIABLE(P_SELECTRTPROP_CURSOR, ':col_val'||L_X , L_SQL_VAL_TAB(L_X)); 
      END LOOP;
      DBMS_SQL.DEFINE_COLUMN(P_SELECTRTPROP_CURSOR, 1, L_VALUE, 40);
      L_RESULT := DBMS_SQL.EXECUTE(P_SELECTRTPROP_CURSOR);

   END IF;

   L_RESULT := DBMS_SQL.FETCH_ROWS(P_SELECTRTPROP_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_SELECTRTPROP_CURSOR, 1, L_VALUE);
      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_VALUE(L_FETCHED_ROWS) := L_VALUE;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_SELECTRTPROP_CURSOR);
      END IF;
   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_SELECTRTPROP_CURSOR);
       P_SELECTRTPROP_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_SELECTRTPROP_CURSOR);
      P_SELECTRTPROP_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;
   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
              'SelectRtPropValues', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      L_LENGTH := 200;
      FOR L_X IN 1..10 LOOP
         IF ( LENGTH(L_SQL_STRING) > ((L_LENGTH*(L_X-1))+1) ) THEN
            INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
            VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                   'SelectRtPropValues', '(SQL)'||SUBSTR(L_SQL_STRING, (L_LENGTH*(L_X-1))+1, L_LENGTH));             
         ELSE
            EXIT;
         END IF;
      END LOOP;            
      L_LENGTH := 200;
      FOR L_X IN 1..10 LOOP
         IF ( LENGTH(L_SQLERRM) > ((L_LENGTH*(L_X-1))+1) ) THEN
            DBMS_OUTPUT.PUT_LINE(SUBSTR(L_SQLERRM, (L_LENGTH*(L_X-1))+1, L_LENGTH));
         ELSE
            EXIT;
         END IF;
      END LOOP;            
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (P_SELECTRTPROP_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (P_SELECTRTPROP_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END SELECTRTPROPVALUES;

FUNCTION GETRTSAMPLETYPE
(A_RT               OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_VERSION          OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_ST               OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_ST_VERSION       OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_DESCRIPTION      OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_NR_PLANNED_SC    OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_DELAY            OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_DELAY_UNIT       OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_FREQ_TP          OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_FREQ_VAL         OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_FREQ_UNIT        OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_INVERT_FREQ      OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_LAST_SCHED       OUT    UNAPIGEN.DATE_TABLE_TYPE,    
 A_LAST_CNT         OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_LAST_VAL         OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_INHERIT_AU       OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_NR_OF_ROWS       IN OUT NUMBER,                      
 A_WHERE_CLAUSE     IN     VARCHAR2)                    
RETURN NUMBER IS

L_RT                    VARCHAR2(20);
L_VERSION               VARCHAR2(20);
L_ST                    VARCHAR2(20);
L_ST_VERSION            VARCHAR2(20);
L_DESCRIPTION           VARCHAR2(40);
L_NR_PLANNED_SC         NUMBER(3);
L_DELAY                 NUMBER(3);
L_DELAY_UNIT            VARCHAR2(20);
L_FREQ_TP               CHAR(1);
L_FREQ_VAL              NUMBER;
L_FREQ_UNIT             VARCHAR2(20);
L_INVERT_FREQ           CHAR(1);
L_LAST_SCHED            TIMESTAMP WITH TIME ZONE;
L_LAST_CNT              NUMBER(5);
L_LAST_VAL              VARCHAR2(40);
L_INHERIT_AU            CHAR(1);
L_BIND_RT_SELECTION     BOOLEAN;

BEGIN

   L_BIND_RT_SELECTION := FALSE;
   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'ORDER BY rtst.rt, rtst.version, rtst.seq'; 
   ELSIF A_WHERE_CLAUSE = 'SELECTION' THEN
      IF UNAPIRT.P_SELECTION_CLAUSE IS NOT NULL THEN 
         IF INSTR(UPPER(UNAPIRT.P_SELECTION_CLAUSE), 'WHERE') <> 0 THEN       
            L_WHERE_CLAUSE := ','||UNAPIRT.P_SELECTION_CLAUSE|| 
                              ' AND a.version = rtst.version AND a.rt = rtst.rt ORDER BY rtst.rt, rtst.version, rtst.seq'; 
         ELSE
            L_WHERE_CLAUSE := ','||UNAPIRT.P_SELECTION_CLAUSE|| 
                              ' WHERE a.version = rtst.version AND a.rt = rtst.rt ORDER BY rtst.rt, rtst.version, rtst.seq'; 
         END IF;
         L_BIND_RT_SELECTION := TRUE;
      ELSE
         L_WHERE_CLAUSE := 'ORDER BY rtst.rt, rtst.version, rtst.seq'; 
      END IF;      
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := ', dd'||UNAPIGEN.P_DD||'.uvrt rt, dd'||UNAPIGEN.P_DD||'.uvst st WHERE rt.version_is_current = ''1'' '||
                        'AND st.st = rtst.st ' ||
                        'AND st.version = UNAPIGEN.UseVersion (''st'', rtst.st, rtst.st_version) ' ||
								'AND rt.version = rtst.version ' || 
                        'AND rt.rt = rtst.rt ' || 
                        'AND rtst.rt = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                        ''' ORDER BY rtst.seq';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   IF NOT DBMS_SQL.IS_OPEN(P_RTST_CURSOR) THEN
      P_RTST_CURSOR := DBMS_SQL.OPEN_CURSOR;

      L_SQL_STRING := 'SELECT rtst.rt, rtst.version, rtst.st, rtst.st_version, rtst.nr_planned_sc, '||
                      'rtst.delay, rtst.delay_unit, rtst.freq_tp, rtst.freq_val, rtst.freq_unit, '||
                      'rtst.invert_freq, rtst.last_sched, rtst.last_cnt, rtst.last_val, rtst.inherit_au ' ||
                      'FROM dd'||UNAPIGEN.P_DD||'.uvrtst rtst '|| L_WHERE_CLAUSE;

      DBMS_SQL.PARSE(P_RTST_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      IF L_BIND_RT_SELECTION THEN
         FOR L_X IN 1..UNAPIRT.P_SELECTION_VAL_TAB.COUNT() LOOP
            DBMS_SQL.BIND_VARIABLE(P_RTST_CURSOR, ':col_val'||L_X , UNAPIRT.P_SELECTION_VAL_TAB(L_X)); 
         END LOOP;
      END IF;
      DBMS_SQL.DEFINE_COLUMN(P_RTST_CURSOR, 1, L_RT, 20);
      DBMS_SQL.DEFINE_COLUMN(P_RTST_CURSOR, 2, L_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(P_RTST_CURSOR, 3, L_ST, 20);
      DBMS_SQL.DEFINE_COLUMN(P_RTST_CURSOR, 4, L_ST_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(P_RTST_CURSOR, 5, L_NR_PLANNED_SC);
      DBMS_SQL.DEFINE_COLUMN(P_RTST_CURSOR, 6, L_DELAY);
      DBMS_SQL.DEFINE_COLUMN(P_RTST_CURSOR, 7, L_DELAY_UNIT, 20);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_RTST_CURSOR, 8, L_FREQ_TP, 1);
      DBMS_SQL.DEFINE_COLUMN(P_RTST_CURSOR, 9, L_FREQ_VAL);
      DBMS_SQL.DEFINE_COLUMN(P_RTST_CURSOR, 10, L_FREQ_UNIT, 20);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_RTST_CURSOR, 11, L_INVERT_FREQ, 1);
      DBMS_SQL.DEFINE_COLUMN(P_RTST_CURSOR, 12, L_LAST_SCHED);
      DBMS_SQL.DEFINE_COLUMN(P_RTST_CURSOR, 13, L_LAST_CNT);
      DBMS_SQL.DEFINE_COLUMN(P_RTST_CURSOR, 14, L_LAST_VAL, 40);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_RTST_CURSOR, 15, L_INHERIT_AU, 1);
      L_RESULT := DBMS_SQL.EXECUTE(P_RTST_CURSOR);
   END IF;
      
   L_RESULT := DBMS_SQL.FETCH_ROWS(P_RTST_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_RTST_CURSOR, 1, L_RT);
      DBMS_SQL.COLUMN_VALUE(P_RTST_CURSOR, 2, L_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_RTST_CURSOR, 3, L_ST);
      DBMS_SQL.COLUMN_VALUE(P_RTST_CURSOR, 4, L_ST_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_RTST_CURSOR, 5, L_NR_PLANNED_SC);
      DBMS_SQL.COLUMN_VALUE(P_RTST_CURSOR, 6, L_DELAY);
      DBMS_SQL.COLUMN_VALUE(P_RTST_CURSOR, 7, L_DELAY_UNIT);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_RTST_CURSOR, 8, L_FREQ_TP);
      DBMS_SQL.COLUMN_VALUE(P_RTST_CURSOR, 9, L_FREQ_VAL);
      DBMS_SQL.COLUMN_VALUE(P_RTST_CURSOR, 10, L_FREQ_UNIT);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_RTST_CURSOR, 11, L_INVERT_FREQ);
      DBMS_SQL.COLUMN_VALUE(P_RTST_CURSOR, 12, L_LAST_SCHED);
      DBMS_SQL.COLUMN_VALUE(P_RTST_CURSOR, 13, L_LAST_CNT);
      DBMS_SQL.COLUMN_VALUE(P_RTST_CURSOR, 14, L_LAST_VAL);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_RTST_CURSOR, 15, L_INHERIT_AU);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_RT(L_FETCHED_ROWS) := L_RT;
      A_VERSION(L_FETCHED_ROWS) := L_VERSION;
      A_ST(L_FETCHED_ROWS) := L_ST;
      A_ST_VERSION(L_FETCHED_ROWS) := L_ST_VERSION;
      A_NR_PLANNED_SC(L_FETCHED_ROWS) := L_NR_PLANNED_SC;
      A_DELAY(L_FETCHED_ROWS) := L_DELAY;
      A_DELAY_UNIT(L_FETCHED_ROWS) := L_DELAY_UNIT;
      A_FREQ_TP(L_FETCHED_ROWS) := L_FREQ_TP;
      A_FREQ_VAL(L_FETCHED_ROWS) := L_FREQ_VAL;
      A_FREQ_UNIT(L_FETCHED_ROWS) := L_FREQ_UNIT;
      A_INVERT_FREQ(L_FETCHED_ROWS) := L_INVERT_FREQ;
      A_LAST_SCHED(L_FETCHED_ROWS) := TO_CHAR(L_LAST_SCHED);
      A_LAST_CNT(L_FETCHED_ROWS) := L_LAST_CNT;
      A_LAST_VAL(L_FETCHED_ROWS) := L_LAST_VAL;
      A_INHERIT_AU(L_FETCHED_ROWS) := L_INHERIT_AU;

      L_DESCRIPTION := NULL;
      L_SQL_STRING:=   'SELECT description '
                     ||'FROM dd'||UNAPIGEN.P_DD||'.uvst '
                     ||'WHERE version = NVL(UNAPIGEN.UseVersion(''st'',:l_st,:l_st_version), '
                     ||                    'UNAPIGEN.UseVersion(''st'',:l_st,''*'')) '
                     ||'AND st = :l_st';
      BEGIN
         EXECUTE IMMEDIATE L_SQL_STRING 
         INTO L_DESCRIPTION
         USING L_ST, L_ST_VERSION, L_ST, L_ST;
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            
            NULL;
      END;

      IF SQL%NOTFOUND THEN
         L_DESCRIPTION := L_ST;
      END IF;

      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_RTST_CURSOR);
      END IF;
   END LOOP;

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
      DBMS_SQL.CLOSE_CURSOR(P_RTST_CURSOR);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      DBMS_SQL.CLOSE_CURSOR(P_RTST_CURSOR);
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   IF A_WHERE_CLAUSE <> 'SELECTION' AND
      DBMS_SQL.IS_OPEN(P_RTST_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(P_RTST_CURSOR);
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
              'GetRtSampleType', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (P_RTST_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (P_RTST_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETRTSAMPLETYPE; 

FUNCTION GETRTINFOPROFILE
(A_RT               OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_VERSION          OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_IP               OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_IP_VERSION       OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_DESCRIPTION      OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_IS_PROTECTED     OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_HIDDEN           OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_FREQ_TP          OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_FREQ_VAL         OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_FREQ_UNIT        OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_INVERT_FREQ      OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_LAST_SCHED       OUT    UNAPIGEN.DATE_TABLE_TYPE,    
 A_LAST_CNT         OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_LAST_VAL         OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_INHERIT_AU       OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_NR_OF_ROWS       IN OUT NUMBER,                      
 A_WHERE_CLAUSE     IN     VARCHAR2)                    
RETURN NUMBER IS

L_RT                       VARCHAR2(20);
L_VERSION                  VARCHAR2(20);
L_IP                       VARCHAR2(20);
L_IP_VERSION               VARCHAR2(20);
L_DESCRIPTION              VARCHAR2(40);
L_IS_PROTECTED             CHAR(1);
L_HIDDEN                   CHAR(1);
L_FREQ_TP                  CHAR(1);
L_FREQ_VAL                 NUMBER;
L_FREQ_UNIT                VARCHAR2(20);
L_INVERT_FREQ              CHAR(1);
L_LAST_SCHED               TIMESTAMP WITH TIME ZONE;
L_LAST_CNT                 NUMBER(5);
L_LAST_VAL                 VARCHAR2(40);
L_INHERIT_AU               CHAR(1);
L_BIND_RT_SELECTION        BOOLEAN;
L_LENGTH                   INTEGER;

BEGIN

   L_BIND_RT_SELECTION := FALSE;
   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'ORDER BY rtip.rt, rtip.version, rtip.seq'; 
   ELSIF A_WHERE_CLAUSE = 'SELECTION' THEN
      IF UNAPIRT.P_SELECTION_CLAUSE IS NOT NULL THEN 
         IF INSTR(UPPER(UNAPIRT.P_SELECTION_CLAUSE), 'WHERE') <> 0 THEN       
            L_WHERE_CLAUSE := ','||UNAPIRT.P_SELECTION_CLAUSE|| 
                              ' AND a.version = rtip.version AND a.rt = rtip.rt ORDER BY rtip.rt, rtip.version, rtip.seq'; 
         ELSE
            L_WHERE_CLAUSE := ','||UNAPIRT.P_SELECTION_CLAUSE|| 
                              ' WHERE a.version = rtip.version AND a.rt = rtip.rt ORDER BY rtip.rt, rtip.version, rtip.seq'; 
         END IF;
         L_BIND_RT_SELECTION := TRUE;
      ELSE
         L_WHERE_CLAUSE := 'ORDER BY rtip.rt, rtip.version, rtip.seq'; 
      END IF;      
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := ', dd'||UNAPIGEN.P_DD||'.uvrt rt WHERE rt.version_is_current = ''1'' '||
                        'AND rtip.version = rt.version '||
                        'AND rtip.rt = rt.rt '||
                        'AND rtip.rt = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                        ''' ORDER BY rtip.seq';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   IF NOT DBMS_SQL.IS_OPEN(P_RTIP_CURSOR) THEN
      P_RTIP_CURSOR := DBMS_SQL.OPEN_CURSOR;

      L_SQL_STRING := 'SELECT rtip.rt, rtip.version, rtip.ip, rtip.ip_version, rtip.is_protected, '||
                      'rtip.hidden, rtip.freq_tp, rtip.freq_val, rtip.freq_unit, rtip.invert_freq, ' ||
                      'rtip.last_sched, rtip.last_cnt, rtip.last_val, rtip.inherit_au ' ||
                      'FROM dd'||UNAPIGEN.P_DD||'.uvrtip rtip '|| L_WHERE_CLAUSE;

      DBMS_SQL.PARSE(P_RTIP_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      
      IF L_BIND_RT_SELECTION THEN
DBMS_OUTPUT.PUT_LINE('Binding '||UNAPIRT.P_SELECTION_VAL_TAB.COUNT());         
         FOR L_X IN 1..UNAPIRT.P_SELECTION_VAL_TAB.COUNT() LOOP
DBMS_OUTPUT.PUT_LINE('Binding '||':col_val'||L_X||' with'||UNAPIRT.P_SELECTION_VAL_TAB(L_X));         
            DBMS_SQL.BIND_VARIABLE(P_RTIP_CURSOR, ':col_val'||L_X , UNAPIRT.P_SELECTION_VAL_TAB(L_X)); 
         END LOOP;
      END IF;
DBMS_OUTPUT.PUT_LINE('Binding finished');         
      DBMS_SQL.DEFINE_COLUMN(P_RTIP_CURSOR, 1, L_RT, 20);
      DBMS_SQL.DEFINE_COLUMN(P_RTIP_CURSOR, 2, L_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(P_RTIP_CURSOR, 3, L_IP, 20);
      DBMS_SQL.DEFINE_COLUMN(P_RTIP_CURSOR, 4, L_IP_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_RTIP_CURSOR, 5, L_IS_PROTECTED, 1);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_RTIP_CURSOR, 6, L_HIDDEN, 1);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_RTIP_CURSOR, 7, L_FREQ_TP, 1);
      DBMS_SQL.DEFINE_COLUMN(P_RTIP_CURSOR, 8, L_FREQ_VAL);
      DBMS_SQL.DEFINE_COLUMN(P_RTIP_CURSOR, 9, L_FREQ_UNIT, 20);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_RTIP_CURSOR, 10, L_INVERT_FREQ, 1);
      DBMS_SQL.DEFINE_COLUMN(P_RTIP_CURSOR, 11, L_LAST_SCHED);
      DBMS_SQL.DEFINE_COLUMN(P_RTIP_CURSOR, 12, L_LAST_CNT);
      DBMS_SQL.DEFINE_COLUMN(P_RTIP_CURSOR, 13, L_LAST_VAL, 40);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_RTIP_CURSOR, 14, L_INHERIT_AU, 1);
      L_RESULT := DBMS_SQL.EXECUTE(P_RTIP_CURSOR);
   END IF;

   L_RESULT := DBMS_SQL.FETCH_ROWS(P_RTIP_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_RTIP_CURSOR, 1, L_RT);
      DBMS_SQL.COLUMN_VALUE(P_RTIP_CURSOR, 2, L_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_RTIP_CURSOR, 3, L_IP);
      DBMS_SQL.COLUMN_VALUE(P_RTIP_CURSOR, 4, L_IP_VERSION);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_RTIP_CURSOR, 5, L_IS_PROTECTED);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_RTIP_CURSOR, 6, L_HIDDEN);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_RTIP_CURSOR, 7, L_FREQ_TP);
      DBMS_SQL.COLUMN_VALUE(P_RTIP_CURSOR, 8, L_FREQ_VAL);
      DBMS_SQL.COLUMN_VALUE(P_RTIP_CURSOR, 9, L_FREQ_UNIT);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_RTIP_CURSOR, 10, L_INVERT_FREQ);
      DBMS_SQL.COLUMN_VALUE(P_RTIP_CURSOR, 11, L_LAST_SCHED);
      DBMS_SQL.COLUMN_VALUE(P_RTIP_CURSOR, 12, L_LAST_CNT);
      DBMS_SQL.COLUMN_VALUE(P_RTIP_CURSOR, 13, L_LAST_VAL);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_RTIP_CURSOR, 14, L_INHERIT_AU);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_RT(L_FETCHED_ROWS) := L_RT;
      A_VERSION(L_FETCHED_ROWS) := L_VERSION;
      A_IP(L_FETCHED_ROWS) := L_IP;
      A_IP_VERSION(L_FETCHED_ROWS) := L_IP_VERSION;
      A_IS_PROTECTED(L_FETCHED_ROWS) := L_IS_PROTECTED;
      A_HIDDEN(L_FETCHED_ROWS) := L_HIDDEN;
      A_FREQ_TP(L_FETCHED_ROWS) := L_FREQ_TP;
      A_FREQ_VAL(L_FETCHED_ROWS) := L_FREQ_VAL;
      A_FREQ_UNIT(L_FETCHED_ROWS) := L_FREQ_UNIT;
      A_INVERT_FREQ(L_FETCHED_ROWS) := L_INVERT_FREQ;
      A_LAST_SCHED(L_FETCHED_ROWS) := TO_CHAR(L_LAST_SCHED);
      A_LAST_CNT(L_FETCHED_ROWS) := L_LAST_CNT;
      A_LAST_VAL(L_FETCHED_ROWS) := L_LAST_VAL;
      A_INHERIT_AU(L_FETCHED_ROWS) := L_INHERIT_AU;

      L_DESCRIPTION := NULL;
      L_SQL_STRING:=   'SELECT description '
                     ||'FROM dd'||UNAPIGEN.P_DD||'.uvip '
                     ||'WHERE version = NVL(UNAPIGEN.UseVersion(''ip'',:l_ip,:l_ip_version), '
                     ||                    'UNAPIGEN.UseVersion(''ip'',:l_ip,''*'')) '
                     ||'AND ip = :l_ip';
      BEGIN
         EXECUTE IMMEDIATE L_SQL_STRING 
         INTO L_DESCRIPTION
         USING L_IP, L_IP_VERSION, L_IP, L_IP;
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            
            NULL;
      END;

      IF SQL%NOTFOUND THEN
         L_DESCRIPTION := L_IP;
      END IF;

      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_RTIP_CURSOR);
      END IF;
   END LOOP;

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
      DBMS_SQL.CLOSE_CURSOR(P_RTIP_CURSOR);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      DBMS_SQL.CLOSE_CURSOR(P_RTIP_CURSOR);
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   IF A_WHERE_CLAUSE <> 'SELECTION' AND
      DBMS_SQL.IS_OPEN(P_RTIP_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(P_RTIP_CURSOR);
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   L_SQLERRM := SQLERRM;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
           'GetRtInfoProfile', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   L_LENGTH := 200;
   FOR L_X IN 1..10 LOOP
      IF ( LENGTH(L_SQL_STRING) > ((L_LENGTH*(L_X-1))+1) ) THEN
         INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
         VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                'GetRtInfoProfile', '(SQL)'||SUBSTR(L_SQL_STRING, (L_LENGTH*(L_X-1))+1, L_LENGTH));             
      ELSE
         EXIT;
      END IF;
   END LOOP;            
   UNAPIGEN.U4COMMIT;
   IF DBMS_SQL.IS_OPEN (P_RTIP_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (P_RTIP_CURSOR);
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETRTINFOPROFILE;

FUNCTION GETRTPARAMETERPROFILE
(A_RT               OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_VERSION          OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_PP               OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_PP_VERSION       OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_PP_KEY1          OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_PP_KEY2          OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_PP_KEY3          OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_PP_KEY4          OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_PP_KEY5          OUT    UNAPIGEN.VC20_TABLE_TYPE,     
 A_DESCRIPTION      OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_DELAY            OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_DELAY_UNIT       OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_FREQ_TP          OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_FREQ_VAL         OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_FREQ_UNIT        OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_INVERT_FREQ      OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_LAST_SCHED       OUT    UNAPIGEN.DATE_TABLE_TYPE,    
 A_LAST_CNT         OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_LAST_VAL         OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_INHERIT_AU       OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_NR_OF_ROWS       IN OUT NUMBER,                      
 A_WHERE_CLAUSE     IN     VARCHAR2)                    
RETURN NUMBER IS

L_RT                          VARCHAR2(20);
L_VERSION                     VARCHAR2(20);
L_PP                          VARCHAR2(20);
L_PP_VERSION                  VARCHAR2(20);
L_PP_KEY1                     VARCHAR2(20);
L_PP_KEY2                     VARCHAR2(20);
L_PP_KEY3                     VARCHAR2(20);
L_PP_KEY4                     VARCHAR2(20);
L_PP_KEY5                     VARCHAR2(20);
L_DESCRIPTION                 VARCHAR2(40);
L_DELAY                       NUMBER;
L_DELAY_UNIT                  VARCHAR2(20);
L_FREQ_TP                     CHAR(1);
L_FREQ_VAL                    NUMBER;
L_FREQ_UNIT                   VARCHAR2(20);
L_INVERT_FREQ                 CHAR(1);
L_LAST_SCHED                  TIMESTAMP WITH TIME ZONE;
L_LAST_CNT                    NUMBER(5);
L_LAST_VAL                    VARCHAR2(40);
L_INHERIT_AU                  CHAR(1);
L_BIND_RT_SELECTION           BOOLEAN;
L_BIND_FIXED_RT_FLAG          BOOLEAN;
L_BIND_RT_VALUE               VARCHAR2(20);

BEGIN
   L_BIND_RT_SELECTION := FALSE;
   L_BIND_FIXED_RT_FLAG := FALSE;
   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'ORDER BY rtpp.rt, rtpp.version, rtpp.seq'; 
   ELSIF A_WHERE_CLAUSE = 'SELECTION' THEN
     IF UNAPIRT.P_SELECTION_CLAUSE IS NOT NULL THEN 
        IF INSTR(UPPER(UNAPIRT.P_SELECTION_CLAUSE), 'WHERE') <> 0 THEN       
           L_WHERE_CLAUSE := ','||UNAPIRT.P_SELECTION_CLAUSE||
                             ' AND a.version = rtpp.version AND a.rt = rtpp.rt ORDER BY rtpp.rt, rtpp.version, rtpp.seq'; 
        ELSE
           L_WHERE_CLAUSE := ','||UNAPIRT.P_SELECTION_CLAUSE|| 
                             ' WHERE a.version = rtpp.version AND a.rt = rtpp.rt ORDER BY rtpp.rt, rtpp.version, rtpp.seq'; 
        END IF;
         L_BIND_RT_SELECTION := TRUE;
     ELSE
        L_WHERE_CLAUSE := 'ORDER BY rtpp.rt, rtpp.version, rtpp.seq'; 
     END IF;      
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_BIND_FIXED_RT_FLAG := TRUE;
      L_BIND_RT_VALUE := A_WHERE_CLAUSE;
      L_WHERE_CLAUSE := ', dd'||UNAPIGEN.P_DD||'.uvrt rt WHERE rt.version_is_current = ''1'' '||
                        'AND rtpp.version = rt.version '||
                        'AND rtpp.rt = rt.rt '||
                        'AND rtpp.rt = :rt_val ORDER BY rtpp.seq';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   IF NOT DBMS_SQL.IS_OPEN(P_RTPP_CURSOR) THEN
      P_RTPP_CURSOR := DBMS_SQL.OPEN_CURSOR;
      L_SQL_STRING := 'SELECT rtpp.rt, rtpp.version, rtpp.pp, rtpp.pp_version, '||
                      'rtpp.pp_key1, rtpp.pp_key2, rtpp.pp_key3, rtpp.pp_key4, rtpp.pp_key5, '||
                      'rtpp.delay, rtpp.delay_unit, '||
                      'rtpp.freq_tp, rtpp.freq_val, rtpp.freq_unit, rtpp.invert_freq, rtpp.last_sched, '||
                      'rtpp.last_cnt, rtpp.last_val, rtpp.inherit_au ' ||
                      'FROM dd'||UNAPIGEN.P_DD||'.uvrtpp rtpp ' || L_WHERE_CLAUSE;

      DBMS_SQL.PARSE(P_RTPP_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      IF L_BIND_RT_SELECTION THEN
         FOR L_X IN 1..UNAPIRT.P_SELECTION_VAL_TAB.COUNT() LOOP
            DBMS_SQL.BIND_VARIABLE(P_RTPP_CURSOR, ':col_val'||L_X , UNAPIRT.P_SELECTION_VAL_TAB(L_X)); 
         END LOOP;
      ELSIF L_BIND_FIXED_RT_FLAG THEN
         DBMS_SQL.BIND_VARIABLE(P_RTPP_CURSOR, ':rt_val' , L_BIND_RT_VALUE); 
      END IF;
      DBMS_SQL.DEFINE_COLUMN(P_RTPP_CURSOR, 1, L_RT, 20);
      DBMS_SQL.DEFINE_COLUMN(P_RTPP_CURSOR, 2, L_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(P_RTPP_CURSOR, 3, L_PP, 20);
      DBMS_SQL.DEFINE_COLUMN(P_RTPP_CURSOR, 4, L_PP_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(P_RTPP_CURSOR, 5, L_PP_KEY1, 20);
      DBMS_SQL.DEFINE_COLUMN(P_RTPP_CURSOR, 6, L_PP_KEY2, 20);
      DBMS_SQL.DEFINE_COLUMN(P_RTPP_CURSOR, 7, L_PP_KEY3, 20);
      DBMS_SQL.DEFINE_COLUMN(P_RTPP_CURSOR, 8, L_PP_KEY4, 20);
      DBMS_SQL.DEFINE_COLUMN(P_RTPP_CURSOR, 9, L_PP_KEY5, 20);      
      DBMS_SQL.DEFINE_COLUMN(P_RTPP_CURSOR, 10, L_DELAY);
      DBMS_SQL.DEFINE_COLUMN(P_RTPP_CURSOR, 11, L_DELAY_UNIT, 20);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_RTPP_CURSOR, 12, L_FREQ_TP, 1);
      DBMS_SQL.DEFINE_COLUMN(P_RTPP_CURSOR, 13, L_FREQ_VAL);
      DBMS_SQL.DEFINE_COLUMN(P_RTPP_CURSOR, 14, L_FREQ_UNIT, 20);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_RTPP_CURSOR, 15, L_INVERT_FREQ, 1);
      DBMS_SQL.DEFINE_COLUMN(P_RTPP_CURSOR, 16, L_LAST_SCHED);
      DBMS_SQL.DEFINE_COLUMN(P_RTPP_CURSOR, 17, L_LAST_CNT);
      DBMS_SQL.DEFINE_COLUMN(P_RTPP_CURSOR, 18, L_LAST_VAL, 40);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_RTPP_CURSOR, 19, L_INHERIT_AU, 1);
      L_RESULT := DBMS_SQL.EXECUTE(P_RTPP_CURSOR);
   END IF;   
      
   L_RESULT := DBMS_SQL.FETCH_ROWS(P_RTPP_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_RTPP_CURSOR, 1, L_RT);
      DBMS_SQL.COLUMN_VALUE(P_RTPP_CURSOR, 2, L_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_RTPP_CURSOR, 3, L_PP);
      DBMS_SQL.COLUMN_VALUE(P_RTPP_CURSOR, 4, L_PP_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_RTPP_CURSOR, 5, L_PP_KEY1);
      DBMS_SQL.COLUMN_VALUE(P_RTPP_CURSOR, 6, L_PP_KEY2);
      DBMS_SQL.COLUMN_VALUE(P_RTPP_CURSOR, 7, L_PP_KEY3);
      DBMS_SQL.COLUMN_VALUE(P_RTPP_CURSOR, 8, L_PP_KEY4);
      DBMS_SQL.COLUMN_VALUE(P_RTPP_CURSOR, 9, L_PP_KEY5);
      DBMS_SQL.COLUMN_VALUE(P_RTPP_CURSOR, 10, L_DELAY);
      DBMS_SQL.COLUMN_VALUE(P_RTPP_CURSOR, 11, L_DELAY_UNIT);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_RTPP_CURSOR, 12, L_FREQ_TP);
      DBMS_SQL.COLUMN_VALUE(P_RTPP_CURSOR, 13, L_FREQ_VAL);
      DBMS_SQL.COLUMN_VALUE(P_RTPP_CURSOR, 14, L_FREQ_UNIT);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_RTPP_CURSOR, 15, L_INVERT_FREQ);
      DBMS_SQL.COLUMN_VALUE(P_RTPP_CURSOR, 16, L_LAST_SCHED);
      DBMS_SQL.COLUMN_VALUE(P_RTPP_CURSOR, 17, L_LAST_CNT);
      DBMS_SQL.COLUMN_VALUE(P_RTPP_CURSOR, 18, L_LAST_VAL);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_RTPP_CURSOR, 19, L_INHERIT_AU);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_RT(L_FETCHED_ROWS) := L_RT;
      A_VERSION(L_FETCHED_ROWS) := L_VERSION;
      A_PP(L_FETCHED_ROWS) := L_PP;
      A_PP_VERSION(L_FETCHED_ROWS) := L_PP_VERSION;
      A_PP_KEY1(L_FETCHED_ROWS) := L_PP_KEY1;
      A_PP_KEY2(L_FETCHED_ROWS) := L_PP_KEY2;
      A_PP_KEY3(L_FETCHED_ROWS) := L_PP_KEY3;
      A_PP_KEY4(L_FETCHED_ROWS) := L_PP_KEY4;
      A_PP_KEY5(L_FETCHED_ROWS) := L_PP_KEY5;
      A_DELAY(L_FETCHED_ROWS) := L_DELAY;
      A_DELAY_UNIT(L_FETCHED_ROWS) := L_DELAY_UNIT;
      A_FREQ_TP(L_FETCHED_ROWS) := L_FREQ_TP;
      A_FREQ_VAL(L_FETCHED_ROWS) := L_FREQ_VAL;
      A_FREQ_UNIT(L_FETCHED_ROWS) := L_FREQ_UNIT;
      A_INVERT_FREQ(L_FETCHED_ROWS) := L_INVERT_FREQ;
      A_LAST_SCHED(L_FETCHED_ROWS) := TO_CHAR(L_LAST_SCHED);
      A_LAST_CNT(L_FETCHED_ROWS) := L_LAST_CNT;
      A_LAST_VAL(L_FETCHED_ROWS) := L_LAST_VAL;
      A_INHERIT_AU(L_FETCHED_ROWS) := L_INHERIT_AU;

      L_DESCRIPTION := NULL;
      L_SQL_STRING:=   'SELECT description '
                     ||'FROM dd'||UNAPIGEN.P_DD||'.uvpp '
                     ||'WHERE version = NVL(UNAPIGEN.UsePpVersion(:l_pp,:l_pp_version,:l_pp_key1,:l_pp_key2,:l_pp_key3,:l_pp_key4,:l_pp_key5), '
                     ||                    'UNAPIGEN.UsePpVersion(:l_pp,''*'',:l_pp_key1,:l_pp_key2,:l_pp_key3,:l_pp_key4,:l_pp_key5)) '
                     ||'AND pp = :l_pp '
                     ||'AND pp_key1 = :l_pp_key1 '
                     ||'AND pp_key2 = :l_pp_key2 '
                     ||'AND pp_key3 = :l_pp_key3 '
                     ||'AND pp_key4 = :l_pp_key4 '
                     ||'AND pp_key5 = :l_pp_key5';
      BEGIN
         EXECUTE IMMEDIATE L_SQL_STRING 
         INTO L_DESCRIPTION
         USING L_PP, L_PP_VERSION, L_PP_KEY1, L_PP_KEY2, L_PP_KEY3, L_PP_KEY4, L_PP_KEY5,
               L_PP, L_PP_KEY1, L_PP_KEY2, L_PP_KEY3, L_PP_KEY4, L_PP_KEY5,
               L_PP, L_PP_KEY1, L_PP_KEY2, L_PP_KEY3, L_PP_KEY4, L_PP_KEY5;
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            
            NULL;
      END;

      IF SQL%NOTFOUND THEN
         L_DESCRIPTION := L_PP;
      END IF;

      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_RTPP_CURSOR);
      END IF;
   END LOOP;

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
      DBMS_SQL.CLOSE_CURSOR(P_RTPP_CURSOR);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      DBMS_SQL.CLOSE_CURSOR(P_RTPP_CURSOR);
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   IF A_WHERE_CLAUSE <> 'SELECTION' AND
      DBMS_SQL.IS_OPEN(P_RTPP_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(P_RTPP_CURSOR);
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
              'GetRtParameterProfile', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (P_RTPP_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (P_RTPP_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETRTPARAMETERPROFILE;

FUNCTION GETRTGROUPKEY
(A_RT                 OUT    UNAPIGEN.VC20_TABLE_TYPE,   
 A_VERSION            OUT    UNAPIGEN.VC20_TABLE_TYPE,   
 A_GK                 OUT    UNAPIGEN.VC20_TABLE_TYPE,   
 A_GK_VERSION         OUT    UNAPIGEN.VC20_TABLE_TYPE,   
 A_VALUE              OUT    UNAPIGEN.VC40_TABLE_TYPE,   
 A_DESCRIPTION        OUT    UNAPIGEN.VC40_TABLE_TYPE,   
 A_IS_PROTECTED       OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_VALUE_UNIQUE       OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_SINGLE_VALUED      OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_NEW_VAL_ALLOWED    OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_MANDATORY          OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_VALUE_LIST_TP      OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_DSP_ROWS           OUT    UNAPIGEN.NUM_TABLE_TYPE,    
 A_NR_OF_ROWS         IN OUT NUMBER,                     
 A_WHERE_CLAUSE       IN     VARCHAR2)                   
RETURN NUMBER IS

L_RT                             VARCHAR2(20);
L_VERSION                        VARCHAR2(20);
L_GK                             VARCHAR2(20);
L_GK_VERSION                     VARCHAR2(20);
L_VALUE                          VARCHAR2(40);
L_DESCRIPTION                    VARCHAR2(40);
L_IS_PROTECTED                   CHAR(1);
L_VALUE_UNIQUE                   CHAR(1);
L_SINGLE_VALUED                  CHAR(1);
L_NEW_VAL_ALLOWED                CHAR(1);
L_MANDATORY                      CHAR(1);
L_VALUE_LIST_TP                  CHAR(1);
L_DSP_ROWS                       NUMBER(3);
L_BIND_RT_SELECTION              BOOLEAN;
L_BIND_FIXED_RT_FLAG             BOOLEAN;
L_GKDEF_REC                      UNAPIGK.GKDEFINITIONREC;
L_TEMP_RET_CODE                  INTEGER;

BEGIN

  L_BIND_RT_SELECTION := FALSE;
  L_BIND_FIXED_RT_FLAG := FALSE;
  IF NVL(A_NR_OF_ROWS,0) = 0 THEN
     A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
  ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
     RETURN (UNAPIGEN.DBERR_NROFROWS);
  END IF;

  IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
     L_WHERE_CLAUSE := ' ORDER BY gk.rt, gk.version, gk.gkseq';
  ELSIF A_WHERE_CLAUSE = 'SELECTION' THEN
     IF UNAPIRT.P_SELECTION_CLAUSE IS NOT NULL THEN 
        IF INSTR(UPPER(UNAPIRT.P_SELECTION_CLAUSE), 'WHERE') <> 0 THEN       
           L_WHERE_CLAUSE := ','||UNAPIRT.P_SELECTION_CLAUSE|| 
                             ' AND a.version = gk.version AND a.rt = gk.rt ORDER BY gk.rt, gk.version, gk.gkseq'; 
        ELSE
           L_WHERE_CLAUSE := ','||UNAPIRT.P_SELECTION_CLAUSE|| 
                             ' WHERE a.version = gk.version AND a.rt = gk.rt ORDER BY gk.rt, gk.version, gk.gkseq'; 
        END IF;
         L_BIND_RT_SELECTION := TRUE;
     ELSE
        L_WHERE_CLAUSE := 'ORDER BY gk.rt, gk.version, gk.gkseq'; 
     END IF;      
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_BIND_FIXED_RT_FLAG := TRUE;
      L_WHERE_CLAUSE := ', dd'||UNAPIGEN.P_DD||'.uvrt rt WHERE rt.version_is_current = ''1'' '||
                        'AND gk.version = rt.version '||
                        'AND gk.rt = rt.rt '||
                        'AND gk.rt = :rt_val ORDER BY gk.gkseq';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   IF NOT DBMS_SQL.IS_OPEN(P_RTGK_CURSOR) THEN
      
      L_TEMP_RET_CODE := UNAPIGK.INITGROUPKEYDEFBUFFER('rt');
      IF L_TEMP_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         RAISE_APPLICATION_ERROR(-20000, 'InitGroupKeyDefBuffer failed with ret_code='||L_TEMP_RET_CODE||' for a_gk_tp=rt');   
      END IF;
      P_RTGK_CURSOR := DBMS_SQL.OPEN_CURSOR;
      L_SQL_STRING := 'SELECT gk.rt, gk.version, gk.gk, gk.gk_version, gk.value ' ||
                      'FROM dd'|| UNAPIGEN.P_DD ||'.uvrtgk gk '|| L_WHERE_CLAUSE;

      DBMS_SQL.PARSE(P_RTGK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      IF L_BIND_RT_SELECTION THEN
         FOR L_X IN 1..UNAPIRT.P_SELECTION_VAL_TAB.COUNT() LOOP
            DBMS_SQL.BIND_VARIABLE(P_RTGK_CURSOR, ':col_val'||L_X , UNAPIRT.P_SELECTION_VAL_TAB(L_X)); 
         END LOOP;
      ELSIF L_BIND_FIXED_RT_FLAG THEN
         DBMS_SQL.BIND_VARIABLE(P_RTGK_CURSOR, ':rt_val', A_WHERE_CLAUSE); 
      END IF;
      DBMS_SQL.DEFINE_COLUMN(P_RTGK_CURSOR, 1, L_RT, 20);
      DBMS_SQL.DEFINE_COLUMN(P_RTGK_CURSOR, 2, L_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(P_RTGK_CURSOR, 3, L_GK, 20);
      DBMS_SQL.DEFINE_COLUMN(P_RTGK_CURSOR, 4, L_GK_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(P_RTGK_CURSOR, 5, L_VALUE, 40);
      L_RESULT := DBMS_SQL.EXECUTE(P_RTGK_CURSOR);
   END IF;

   L_RESULT := DBMS_SQL.FETCH_ROWS(P_RTGK_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_RTGK_CURSOR, 1, L_RT);
      DBMS_SQL.COLUMN_VALUE(P_RTGK_CURSOR, 2, L_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_RTGK_CURSOR, 3, L_GK);
      DBMS_SQL.COLUMN_VALUE(P_RTGK_CURSOR, 4, L_GK_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_RTGK_CURSOR, 5, L_VALUE);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_RT(L_FETCHED_ROWS) := L_RT;
      A_VERSION(L_FETCHED_ROWS) := L_VERSION;
      A_GK(L_FETCHED_ROWS) := L_GK;
      A_GK_VERSION(L_FETCHED_ROWS) := L_GK_VERSION;
      A_VALUE(L_FETCHED_ROWS) := L_VALUE;

      
      BEGIN
         L_GKDEF_REC := UNAPIGK.P_GK_DEF_BUFFER(L_GK);
         A_DESCRIPTION(L_FETCHED_ROWS) := L_GKDEF_REC.DESCRIPTION;
         A_IS_PROTECTED(L_FETCHED_ROWS) := L_GKDEF_REC.IS_PROTECTED;
         A_VALUE_UNIQUE(L_FETCHED_ROWS) := L_GKDEF_REC.VALUE_UNIQUE;
         A_SINGLE_VALUED(L_FETCHED_ROWS) := L_GKDEF_REC.SINGLE_VALUED;
         A_NEW_VAL_ALLOWED(L_FETCHED_ROWS) := L_GKDEF_REC.NEW_VAL_ALLOWED;
         A_MANDATORY(L_FETCHED_ROWS) := L_GKDEF_REC.MANDATORY;
         A_VALUE_LIST_TP(L_FETCHED_ROWS) := L_GKDEF_REC.VALUE_LIST_TP;
         A_DSP_ROWS(L_FETCHED_ROWS) := L_GKDEF_REC.DSP_ROWS;
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
         
         
         
         A_DESCRIPTION(L_FETCHED_ROWS)     := L_GK;
         A_IS_PROTECTED(L_FETCHED_ROWS)    := '1';
         A_VALUE_UNIQUE(L_FETCHED_ROWS)    := '0';
         A_SINGLE_VALUED(L_FETCHED_ROWS)   := '1';
         A_NEW_VAL_ALLOWED(L_FETCHED_ROWS) := '1';
         A_MANDATORY(L_FETCHED_ROWS)       := '0';
         A_VALUE_LIST_TP(L_FETCHED_ROWS)   := 'F';
         A_DSP_ROWS(L_FETCHED_ROWS)        := 10;      
      END;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_RTGK_CURSOR);
      END IF;
   END LOOP;

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
      DBMS_SQL.CLOSE_CURSOR(P_RTGK_CURSOR);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      DBMS_SQL.CLOSE_CURSOR(P_RTGK_CURSOR);
   ELSE   
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   IF A_WHERE_CLAUSE <> 'SELECTION' AND
      DBMS_SQL.IS_OPEN(P_RTGK_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(P_RTGK_CURSOR);
   END IF;

   IF NOT DBMS_SQL.IS_OPEN(P_RTGK_CURSOR) THEN
      L_TEMP_RET_CODE := UNAPIGK.CLOSEGROUPKEYDEFBUFFER('rt');
      IF L_TEMP_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         RAISE_APPLICATION_ERROR(-20000, 'CloseGroupKeyDefBuffer failed with ret_code='||L_TEMP_RET_CODE||' for a_gk_tp=rt');   
      END IF;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
  WHEN OTHERS THEN
     L_SQLERRM := SQLERRM;
     UNAPIGEN.U4ROLLBACK;
     INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
     VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
             'GetRtGroupKey', L_SQLERRM);
     UNAPIGEN.U4COMMIT;
     IF DBMS_SQL.IS_OPEN (P_RTGK_CURSOR) THEN
        DBMS_SQL.CLOSE_CURSOR (P_RTGK_CURSOR);
     END IF;
      L_RET_CODE := UNAPIGK.CLOSEGROUPKEYDEFBUFFER('rt');
      
     RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETRTGROUPKEY;

FUNCTION SAVEREQUESTTYPE
(A_RT                  IN  VARCHAR2,                  
 A_VERSION             IN  VARCHAR2,                  
 A_VERSION_IS_CURRENT  IN  CHAR,                      
 A_EFFECTIVE_FROM      IN  DATE,                      
 A_EFFECTIVE_TILL      IN  DATE,                      
 A_DESCRIPTION         IN  VARCHAR2,                  
 A_DESCRIPTION2        IN  VARCHAR2,                  
 A_DESCR_DOC           IN  VARCHAR2,                  
 A_DESCR_DOC_VERSION   IN  VARCHAR2,                  
 A_IS_TEMPLATE         IN  CHAR,                      
 A_CONFIRM_USERID      IN  CHAR,                      
 A_NR_PLANNED_RQ       IN  NUMBER,                    
 A_FREQ_TP             IN  CHAR,                      
 A_FREQ_VAL            IN  NUMBER,                    
 A_FREQ_UNIT           IN  VARCHAR2,                  
 A_INVERT_FREQ         IN  CHAR,                      
 A_LAST_SCHED          IN  DATE,                      
 A_LAST_CNT            IN  NUMBER,                    
 A_LAST_VAL            IN  VARCHAR2,                  
 A_PRIORITY            IN  NUMBER,                    
 A_LABEL_FORMAT        IN  VARCHAR2,                  
 A_ALLOW_ANY_ST        IN  CHAR,                      
 A_ALLOW_NEW_SC        IN  CHAR,                      
 A_ADD_STPP            IN  CHAR,                      
 A_PLANNED_RESPONSIBLE IN  VARCHAR2,                  
 A_SC_UC               IN  VARCHAR2,                  
 A_SC_UC_VERSION       IN  VARCHAR2,                  
 A_RQ_UC               IN  VARCHAR2,                  
 A_RQ_UC_VERSION       IN  VARCHAR2,                  
 A_RQ_LC               IN  VARCHAR2,                  
 A_RQ_LC_VERSION       IN  VARCHAR2,                  
 A_INHERIT_AU          IN  CHAR,                      
 A_INHERIT_GK          IN  CHAR,                      
 A_RT_CLASS            IN  VARCHAR2,                  
 A_LOG_HS              IN  CHAR,                      
 A_LC                  IN  VARCHAR2,                  
 A_LC_VERSION          IN  VARCHAR2,                  
 A_MODIFY_REASON       IN  VARCHAR2)                  
RETURN NUMBER IS

L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);
L_LOG_HS       CHAR(1);
L_ALLOW_MODIFY CHAR(1);
L_ACTIVE       CHAR(1);
L_INSERT       BOOLEAN;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_RT, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   IF NVL(A_IS_TEMPLATE, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_TEMPLATE;
      RAISE STPERROR;
   END IF;

   IF NVL(A_CONFIRM_USERID, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_CONFIRMUSERID;
      RAISE STPERROR;
   END IF;

	IF NVL(A_FREQ_TP, ' ') NOT IN ('A','S','T','C','N','M','O') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_FREQTP;
      RAISE STPERROR;
   END IF;
   
   IF A_FREQ_TP IN ('C','T','S') THEN
      IF A_FREQ_UNIT IS NULL THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_FREQUNIT;
         RAISE STPERROR;         
      ELSIF A_FREQ_TP = 'T' AND
         A_FREQ_UNIT NOT IN ('MI','HH','DD','WW','MM','YY','MF','YF') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_FREQUNIT;
         RAISE STPERROR;         
      END IF;
   END IF;

   IF NVL(A_INVERT_FREQ, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INVERTFREQ;
      RAISE STPERROR;
   END IF;

   IF NVL(A_INHERIT_AU, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INHERITAU;
      RAISE STPERROR;
   END IF;

   IF NVL(A_INHERIT_GK, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INHERITGK;
      RAISE STPERROR;
   END IF;

   IF NVL(A_LOG_HS, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_LOGHS;
      RAISE STPERROR;
   END IF;

   IF NVL(A_ALLOW_ANY_ST, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_ALLOWANYST;
      RAISE STPERROR;
   END IF;

   IF NVL(A_ALLOW_NEW_SC, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_ALLOWNEWSC;
      RAISE STPERROR;
   END IF;

   IF NVL(A_ADD_STPP, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_ADDSTPP;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('rt', A_RT, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE = UNAPIGEN.DBERR_NOOBJECT THEN
      L_INSERT := TRUE;
   ELSIF L_RET_CODE = UNAPIGEN.DBERR_SUCCESS THEN
      L_INSERT := FALSE;
   ELSE
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   IF L_INSERT THEN                
      IF NVL(A_LC, ' ') <> ' ' THEN
         L_LC := A_LC;
      END IF;
      IF NVL(A_LC_VERSION, ' ') <> ' ' THEN
         L_LC_VERSION := A_LC_VERSION;
      END IF;
      INSERT INTO UTRT(RT, VERSION, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ, DESCRIPTION, DESCRIPTION2, DESCR_DOC, 
                       DESCR_DOC_VERSION, IS_TEMPLATE, CONFIRM_USERID, NR_PLANNED_RQ, FREQ_TP, 
                       FREQ_VAL, FREQ_UNIT, INVERT_FREQ, LAST_SCHED, LAST_SCHED_TZ, LAST_CNT, LAST_VAL, 
                       PRIORITY, LABEL_FORMAT, ALLOW_ANY_ST, ALLOW_NEW_SC, ADD_STPP, 
                       PLANNED_RESPONSIBLE, SC_UC, SC_UC_VERSION, RQ_UC, RQ_UC_VERSION, RQ_LC, 
                       RQ_LC_VERSION, INHERIT_AU, INHERIT_GK, RT_CLASS, LOG_HS, ALLOW_MODIFY, 
                       ACTIVE, LC, LC_VERSION)
      VALUES(A_RT, A_VERSION, A_EFFECTIVE_FROM, A_EFFECTIVE_FROM, A_DESCRIPTION, A_DESCRIPTION2, A_DESCR_DOC, 
             A_DESCR_DOC_VERSION, A_IS_TEMPLATE, A_CONFIRM_USERID, A_NR_PLANNED_RQ, A_FREQ_TP, 
             NVL(A_FREQ_VAL, 0), A_FREQ_UNIT, A_INVERT_FREQ, A_LAST_SCHED, A_LAST_SCHED, NVL(A_LAST_CNT, 0), A_LAST_VAL,
             A_PRIORITY, A_LABEL_FORMAT, A_ALLOW_ANY_ST, A_ALLOW_NEW_SC, A_ADD_STPP, 
             A_PLANNED_RESPONSIBLE, A_SC_UC, A_SC_UC_VERSION, A_RQ_UC, A_RQ_UC_VERSION, A_RQ_LC, 
             A_RQ_LC_VERSION, A_INHERIT_AU, A_INHERIT_GK, A_RT_CLASS, A_LOG_HS, '#',
             '0', L_LC, L_LC_VERSION);
      L_EVENT_TP := 'ObjectCreated';
   ELSE                             
      UPDATE UTRT
      SET EFFECTIVE_FROM      = DECODE(EFFECTIVE_TILL, NULL, A_EFFECTIVE_FROM, EFFECTIVE_FROM),
           EFFECTIVE_FROM_TZ    = DECODE(EFFECTIVE_TILL, NULL,  DECODE(A_EFFECTIVE_FROM, EFFECTIVE_FROM_TZ, EFFECTIVE_FROM_TZ, A_EFFECTIVE_FROM), EFFECTIVE_FROM_TZ),
          DESCRIPTION         = A_DESCRIPTION,
          DESCRIPTION2        = A_DESCRIPTION2,
          DESCR_DOC           = A_DESCR_DOC,
          DESCR_DOC_VERSION   = A_DESCR_DOC_VERSION,
          IS_TEMPLATE         = A_IS_TEMPLATE,
          CONFIRM_USERID      = A_CONFIRM_USERID,
          NR_PLANNED_RQ       = A_NR_PLANNED_RQ,
          FREQ_TP             = A_FREQ_TP,
          FREQ_VAL            = A_FREQ_VAL,
          FREQ_UNIT           = A_FREQ_UNIT,
          INVERT_FREQ         = A_INVERT_FREQ,
          LAST_SCHED          = A_LAST_SCHED,
          LAST_SCHED_TZ       =  DECODE(A_LAST_SCHED, LAST_SCHED_TZ, LAST_SCHED_TZ, A_LAST_SCHED),
          LAST_CNT            = A_LAST_CNT,
          LAST_VAL            = A_LAST_VAL,
          PRIORITY            = A_PRIORITY,
          LABEL_FORMAT        = A_LABEL_FORMAT,
          ALLOW_ANY_ST        = A_ALLOW_ANY_ST,
          ALLOW_NEW_SC        = A_ALLOW_NEW_SC,
          ADD_STPP            = A_ADD_STPP,
          PLANNED_RESPONSIBLE = A_PLANNED_RESPONSIBLE,
          SC_UC               = A_SC_UC,
          SC_UC_VERSION       = A_SC_UC_VERSION,
          RQ_UC               = A_RQ_UC,
          RQ_UC_VERSION       = A_RQ_UC_VERSION,
          RQ_LC               = A_RQ_LC,
          RQ_LC_VERSION       = A_RQ_LC_VERSION,
          INHERIT_AU          = A_INHERIT_AU,
          INHERIT_GK          = A_INHERIT_GK,
          RT_CLASS            = A_RT_CLASS,
          LOG_HS              = A_LOG_HS,
          ALLOW_MODIFY        = '#'
      WHERE RT = A_RT
        AND VERSION = A_VERSION;
      L_EVENT_TP := 'ObjectUpdated';
   END IF;

   L_EV_SEQ_NR := -1;
   L_RESULT :=
         UNAPIEV.INSERTEVENT('SaveRequestType', UNAPIGEN.P_EVMGR_NAME, 'rt', A_RT, L_LC, L_LC_VERSION, 
                             L_SS, L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF NVL(L_LOG_HS, ' ') <> A_LOG_HS THEN
      IF A_LOG_HS = '1' THEN
         INSERT INTO UTRTHS (RT, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_RT, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 'History switched ON', 
                 'Audit trail is turned on.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      ELSE
         INSERT INTO UTRTHS (RT, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_RT, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 'History switched OFF', 
                 'Audit trail is turned off.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   END IF;

   IF NVL(L_LOG_HS, ' ') = '1' THEN
      IF L_EVENT_TP = 'ObjectCreated' THEN
         INSERT INTO UTRTHS (RT, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_RT, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'request type "'||A_RT||'" is created.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                 L_EV_SEQ_NR);
      ELSE
         INSERT INTO UTRTHS (RT, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_RT, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'request type "'||A_RT||'" is updated.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                 L_EV_SEQ_NR);
      END IF;
   ELSE
      
      
      IF L_EVENT_TP = 'ObjectCreated' THEN
         INSERT INTO UTRTHS (RT, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_RT, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'request type "'||A_RT||'" is created.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                 L_EV_SEQ_NR);
      END IF;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
        UNAPIGEN.LOGERROR('SaveRequestType', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveRequestType'));
END SAVEREQUESTTYPE;

FUNCTION DELETEREQUESTTYPE
(A_RT            IN  VARCHAR2,          
 A_VERSION       IN  VARCHAR2,          
 A_MODIFY_REASON IN  VARCHAR2)          
RETURN NUMBER IS

L_ALLOW_MODIFY CHAR(1);
L_ACTIVE       CHAR(1);
L_LC           CHAR(2);
L_LC_VERSION   CHAR(20);
L_SS           VARCHAR2(2);
L_LOG_HS       CHAR(1);
L_RT_CURSOR    INTEGER;

CURSOR L_RTD_CURSOR IS
SELECT DISTINCT GK
FROM UTRTGK
WHERE VERSION = A_VERSION
  AND RT = A_RT;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_RT, ' ')= ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VERSION, ' ')= ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('rt', A_RT, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   
   IF UNAPIGEN.ISSYSTEM21CFR11COMPLIANT = UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTALLOWEDIN21CFR11;
      RAISE STPERROR;
   END IF;

   DELETE FROM UTRTAU
   WHERE RT = A_RT
     AND VERSION = A_VERSION;

   DELETE FROM UTRTHS
   WHERE RT = A_RT
     AND VERSION = A_VERSION;

   L_RT_CURSOR := DBMS_SQL.OPEN_CURSOR;
   FOR L_RTG IN L_RTD_CURSOR LOOP
      BEGIN
         L_SQL_STRING := ' DELETE FROM utrtgk' || L_RTG.GK ||
                         ' WHERE version = ''' || REPLACE(A_VERSION, '''', '''''') || '''' || 
                         ' AND rt = ''' || REPLACE(A_RT, '''', '''''') || ''''; 
         DBMS_SQL.PARSE(L_RT_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         L_RESULT := DBMS_SQL.EXECUTE(L_RT_CURSOR);
      EXCEPTION
      WHEN OTHERS THEN
         IF SQLCODE = -942 THEN
            NULL; 
         ELSE
            RAISE;
         END IF;
      END;
   END LOOP;
   
   DELETE FROM UTRTGK
   WHERE RT = A_RT
     AND VERSION = A_VERSION;

   DELETE FROM UTRTPP
   WHERE RT = A_RT
     AND VERSION = A_VERSION;

   DELETE FROM UTRTPPAU
   WHERE RT = A_RT
     AND VERSION = A_VERSION;

   DELETE FROM UTRTIP
   WHERE RT = A_RT
     AND VERSION = A_VERSION;

   DELETE FROM UTRTIPAU
   WHERE RT = A_RT
     AND VERSION = A_VERSION;

   DELETE FROM UTRTST
   WHERE RT = A_RT
     AND VERSION = A_VERSION;

   DELETE FROM UTEVTIMED
   WHERE (OBJECT_TP='rt' AND OBJECT_ID=A_RT AND INSTR(EV_DETAILS,'version='||A_VERSION)<>0);

   DELETE FROM UTEVRULESDELAYED
   WHERE (OBJECT_TP='rt' AND OBJECT_ID=A_RT AND INSTR(EV_DETAILS,'version='||A_VERSION)<>0);

   DELETE FROM UTRT
   WHERE RT = A_RT
     AND VERSION = A_VERSION;

   L_EVENT_TP := 'ObjectDeleted';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT('DeleteRequestType',UNAPIGEN.P_EVMGR_NAME, 'rt', A_RT, L_LC, 
                                   L_LC_VERSION, L_SS, L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   DBMS_SQL.CLOSE_CURSOR(L_RT_CURSOR);
   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE <> 1 THEN
        UNAPIGEN.LOGERROR('DeleteRequestType', SQLERRM);
      END IF;
      IF DBMS_SQL.IS_OPEN (L_RT_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_RT_CURSOR);
      END IF;
      RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'DeleteRequestType'));
END DELETEREQUESTTYPE;

FUNCTION SAVERTSAMPLETYPE
(A_RT               IN    VARCHAR2,                   
 A_VERSION          IN    VARCHAR2,                   
 A_ST               IN    UNAPIGEN.VC20_TABLE_TYPE,   
 A_ST_VERSION       IN    UNAPIGEN.VC20_TABLE_TYPE,   
 A_NR_PLANNED_SC    IN    UNAPIGEN.NUM_TABLE_TYPE,    
 A_DELAY            IN    UNAPIGEN.NUM_TABLE_TYPE,    
 A_DELAY_UNIT       IN    UNAPIGEN.VC20_TABLE_TYPE,   
 A_FREQ_TP          IN    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_FREQ_VAL         IN    UNAPIGEN.NUM_TABLE_TYPE,    
 A_FREQ_UNIT        IN    UNAPIGEN.VC20_TABLE_TYPE,   
 A_INVERT_FREQ      IN    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_LAST_SCHED       IN    UNAPIGEN.DATE_TABLE_TYPE,   
 A_LAST_CNT         IN    UNAPIGEN.NUM_TABLE_TYPE,    
 A_LAST_VAL         IN    UNAPIGEN.VC40_TABLE_TYPE,   
 A_INHERIT_AU       IN    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_NR_OF_ROWS       IN    NUMBER,                     
 A_MODIFY_REASON    IN    VARCHAR2)                   
RETURN NUMBER IS

L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);
L_LOG_HS       CHAR(1);
L_ALLOW_MODIFY CHAR(1);
L_ACTIVE       CHAR(1);
L_SEQ_NO       NUMBER;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_RT, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('rt', A_RT, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTRT
   SET ALLOW_MODIFY = '#'
   WHERE RT = A_RT
     AND VERSION = A_VERSION;
   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR ;
   END IF;

   DELETE UTRTST
   WHERE VERSION = A_VERSION
     AND RT = A_RT;

   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      IF NVL(A_ST(L_SEQ_NO), ' ') = ' ' THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
      END IF;

      IF NVL(A_FREQ_TP(L_SEQ_NO), ' ') NOT IN ('A','S','T','C','N') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_FREQTP;
         RAISE STPERROR;
      END IF;
      
      IF A_FREQ_TP(L_SEQ_NO) IN ('C','T','S') THEN
         IF A_FREQ_UNIT(L_SEQ_NO) IS NULL THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_FREQUNIT;
            RAISE STPERROR;         
         ELSIF A_FREQ_TP(L_SEQ_NO) = 'T' AND
            A_FREQ_UNIT(L_SEQ_NO) NOT IN ('MI','HH','DD','WW','MM','YY','MF','YF') THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_FREQUNIT;
            RAISE STPERROR;         
         END IF;
      END IF;

      IF NVL(A_INVERT_FREQ(L_SEQ_NO), ' ') NOT IN ('1','0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INVERTFREQ;
         RAISE STPERROR;
      END IF;

      IF NVL(A_INHERIT_AU(L_SEQ_NO), ' ') NOT IN ('2','1','0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INHERITAU;
         RAISE STPERROR;
      END IF;

       INSERT INTO UTRTST (RT, VERSION, ST, ST_VERSION, SEQ, 
                           NR_PLANNED_SC, DELAY, DELAY_UNIT, 
                           FREQ_TP, FREQ_VAL, FREQ_UNIT, 
                           INVERT_FREQ, LAST_SCHED, LAST_SCHED_TZ, LAST_CNT, 
                           LAST_VAL, INHERIT_AU)
       VALUES (A_RT, A_VERSION, A_ST(L_SEQ_NO), A_ST_VERSION(L_SEQ_NO), L_SEQ_NO, 
               A_NR_PLANNED_SC(L_SEQ_NO), A_DELAY(L_SEQ_NO), A_DELAY_UNIT(L_SEQ_NO), 
               A_FREQ_TP(L_SEQ_NO), A_FREQ_VAL(L_SEQ_NO), A_FREQ_UNIT(L_SEQ_NO), 
               A_INVERT_FREQ(L_SEQ_NO), TO_TIMESTAMP_TZ(A_LAST_SCHED(L_SEQ_NO)), 
               TO_TIMESTAMP_TZ(A_LAST_SCHED(L_SEQ_NO)), A_LAST_CNT(L_SEQ_NO), 
               A_LAST_VAL(L_SEQ_NO), A_INHERIT_AU(L_SEQ_NO));
   END LOOP;

   
   
   DELETE FROM UTRTSTAU
   WHERE VERSION = A_VERSION
     AND RT = A_RT
     AND (ST, NVL(ST_VERSION,'~Current~')) NOT IN (SELECT ST, NVL(ST_VERSION, '~Current~') 
                                                     FROM UTRTST 
                                                    WHERE VERSION = A_VERSION 
                                                      AND RT = A_RT);

   L_EVENT_TP := 'UsedObjectsUpdated';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT('SaveRtSampleType', UNAPIGEN.P_EVMGR_NAME, 'rt', A_RT, L_LC, 
                                   L_LC_VERSION, L_SS, L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF L_LOG_HS = '1' THEN
      INSERT INTO UTRTHS (RT, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                          WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES (A_RT, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
              'request type "'||A_RT||'" sample types are updated.', 
              CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE <> 1 THEN
         UNAPIGEN.LOGERROR('SaveRtSampleType', SQLERRM);
      END IF;
      RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveRtSampleType'));
END SAVERTSAMPLETYPE;

FUNCTION SAVERTINFOPROFILE
(A_RT               IN    VARCHAR2,                    
 A_VERSION          IN    VARCHAR2,                    
 A_IP               IN    UNAPIGEN.VC20_TABLE_TYPE,    
 A_IP_VERSION       IN    UNAPIGEN.VC20_TABLE_TYPE,    
 A_IS_PROTECTED     IN    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_HIDDEN           IN    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_FREQ_TP          IN    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_FREQ_VAL         IN    UNAPIGEN.NUM_TABLE_TYPE,     
 A_FREQ_UNIT        IN    UNAPIGEN.VC20_TABLE_TYPE,    
 A_INVERT_FREQ      IN    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_LAST_SCHED       IN    UNAPIGEN.DATE_TABLE_TYPE,    
 A_LAST_CNT         IN    UNAPIGEN.NUM_TABLE_TYPE,     
 A_LAST_VAL         IN    UNAPIGEN.VC40_TABLE_TYPE,    
 A_INHERIT_AU       IN    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_NR_OF_ROWS       IN    NUMBER,                      
 A_MODIFY_REASON    IN    VARCHAR2)                    
RETURN NUMBER IS

L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);
L_LOG_HS       CHAR(1);
L_ALLOW_MODIFY CHAR(1);
L_ACTIVE       CHAR(1);
L_SEQ_NO       NUMBER;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_RT, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('rt', A_RT, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTRT
   SET ALLOW_MODIFY = '#'
   WHERE VERSION = A_VERSION
     AND RT = A_RT;

   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR ;
   END IF;

   DELETE UTRTIP
   WHERE VERSION = A_VERSION
     AND RT = A_RT;

   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      IF NVL(A_IP(L_SEQ_NO), ' ') = ' ' THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
      END IF;

		
		  
			 
			 
		
      IF NVL(A_FREQ_TP(L_SEQ_NO), ' ') NOT IN ('A','S','T','C','N','M','O') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_FREQTP;
         RAISE STPERROR;
      END IF;

      IF A_FREQ_TP(L_SEQ_NO) IN ('C','T','S') THEN
         IF A_FREQ_UNIT(L_SEQ_NO) IS NULL THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_FREQUNIT;
            RAISE STPERROR;         
         ELSIF A_FREQ_TP(L_SEQ_NO) = 'T' AND
            A_FREQ_UNIT(L_SEQ_NO) NOT IN ('MI','HH','DD','WW','MM','YY','MF','YF') THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_FREQUNIT;
            RAISE STPERROR;         
         END IF;
      END IF;

      IF NVL(A_INVERT_FREQ(L_SEQ_NO), ' ') NOT IN ('1','0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INVERTFREQ;
         RAISE STPERROR;
      END IF;

      IF NVL(A_IS_PROTECTED(L_SEQ_NO), '0') NOT IN ('2','1','0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_PROTECTED;
         RAISE STPERROR;
      END IF;

      IF NVL(A_HIDDEN(L_SEQ_NO), '0') NOT IN ('2','1','0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_HIDDEN;
         RAISE STPERROR;
      END IF;

      IF NVL(A_INHERIT_AU(L_SEQ_NO), ' ') NOT IN ('2','1','0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INHERITAU;
         RAISE STPERROR;
      END IF;

      INSERT INTO UTRTIP (RT, VERSION, IP, IP_VERSION, SEQ, IS_PROTECTED, HIDDEN, FREQ_TP, FREQ_VAL,
                          FREQ_UNIT, INVERT_FREQ, LAST_SCHED, LAST_SCHED_TZ, LAST_CNT, LAST_VAL, INHERIT_AU)
      VALUES (A_RT, A_VERSION, A_IP(L_SEQ_NO), A_IP_VERSION(L_SEQ_NO), L_SEQ_NO, 
              A_IS_PROTECTED(L_SEQ_NO), A_HIDDEN(L_SEQ_NO),A_FREQ_TP(L_SEQ_NO), A_FREQ_VAL(L_SEQ_NO),
              A_FREQ_UNIT(L_SEQ_NO), A_INVERT_FREQ(L_SEQ_NO),
              TO_TIMESTAMP_TZ(A_LAST_SCHED(L_SEQ_NO)), TO_TIMESTAMP_TZ(A_LAST_SCHED(L_SEQ_NO)), A_LAST_CNT(L_SEQ_NO),
              A_LAST_VAL(L_SEQ_NO), A_INHERIT_AU(L_SEQ_NO));
   END LOOP;

   
   
   DELETE FROM UTRTIPAU
   WHERE VERSION = A_VERSION
     AND RT = A_RT
     AND (IP, NVL(IP_VERSION, '~Current~')) NOT IN (SELECT IP, NVL(IP_VERSION, '~Current~') 
                                                      FROM UTRTIP 
                                                     WHERE VERSION = A_VERSION 
                                                       AND RT = A_RT);

   L_EVENT_TP := 'UsedObjectsUpdated';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT('SaveRtInfoProfile', UNAPIGEN.P_EVMGR_NAME, 'rt', A_RT, L_LC, 
                                   L_LC_VERSION, L_SS, L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF L_LOG_HS = '1' THEN
      INSERT INTO UTRTHS (RT, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                          WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES (A_RT, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
              'request type "'||A_RT||'" info profiles are updated.', 
              CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE <> 1 THEN
         UNAPIGEN.LOGERROR('SaveRtInfoProfile', SQLERRM);
      END IF;
      RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveRtInfoProfile'));
END SAVERTINFOPROFILE;

FUNCTION SAVERTPARAMETERPROFILE
(A_RT               IN    VARCHAR2,                   
 A_VERSION          IN    VARCHAR2,                   
 A_PP               IN    UNAPIGEN.VC20_TABLE_TYPE,   
 A_PP_VERSION       IN    UNAPIGEN.VC20_TABLE_TYPE,   
 A_PP_KEY1          IN    UNAPIGEN.VC20_TABLE_TYPE,   
 A_PP_KEY2          IN    UNAPIGEN.VC20_TABLE_TYPE,   
 A_PP_KEY3          IN    UNAPIGEN.VC20_TABLE_TYPE,   
 A_PP_KEY4          IN    UNAPIGEN.VC20_TABLE_TYPE,   
 A_PP_KEY5          IN    UNAPIGEN.VC20_TABLE_TYPE,   
 A_DELAY            IN    UNAPIGEN.NUM_TABLE_TYPE,    
 A_DELAY_UNIT       IN    UNAPIGEN.VC20_TABLE_TYPE,   
 A_FREQ_TP          IN    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_FREQ_VAL         IN    UNAPIGEN.NUM_TABLE_TYPE,    
 A_FREQ_UNIT        IN    UNAPIGEN.VC20_TABLE_TYPE,   
 A_INVERT_FREQ      IN    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_LAST_SCHED       IN    UNAPIGEN.DATE_TABLE_TYPE,   
 A_LAST_CNT         IN    UNAPIGEN.NUM_TABLE_TYPE,    
 A_LAST_VAL         IN    UNAPIGEN.VC40_TABLE_TYPE,   
 A_INHERIT_AU       IN    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_NR_OF_ROWS       IN    NUMBER,                     
 A_MODIFY_REASON    IN    VARCHAR2)                   
RETURN NUMBER IS

L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);
L_LOG_HS       CHAR(1);
L_ALLOW_MODIFY CHAR(1);
L_ACTIVE       CHAR(1);
L_SEQ_NO       NUMBER;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_RT, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('rt', A_RT, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTRT
   SET ALLOW_MODIFY = '#'
   WHERE VERSION = A_VERSION
     AND RT = A_RT;
   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR ;
   END IF;

   DELETE UTRTPP
   WHERE VERSION = A_VERSION
     AND RT = A_RT;

   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      IF NVL(A_PP(L_SEQ_NO), ' ') = ' ' THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
      END IF;

      IF A_PP_KEY1(L_SEQ_NO) IS NULL OR
         A_PP_KEY2(L_SEQ_NO) IS NULL OR
         A_PP_KEY3(L_SEQ_NO) IS NULL OR
         A_PP_KEY4(L_SEQ_NO) IS NULL OR
         A_PP_KEY5(L_SEQ_NO) IS NULL THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOPPKEYID;
         RAISE STPERROR;
      END IF;

      IF NVL(A_FREQ_TP(L_SEQ_NO), ' ') NOT IN ('A','S','T','C','N') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_FREQTP;
         RAISE STPERROR;
      END IF;

      IF A_FREQ_TP(L_SEQ_NO) IN ('C','T','S') THEN
         IF A_FREQ_UNIT(L_SEQ_NO) IS NULL THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_FREQUNIT;
            RAISE STPERROR;         
         ELSIF A_FREQ_TP(L_SEQ_NO) = 'T' AND
            A_FREQ_UNIT(L_SEQ_NO) NOT IN ('MI','HH','DD','WW','MM','YY','MF','YF') THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_FREQUNIT;
            RAISE STPERROR;         
         END IF;
      END IF;

      IF NVL(A_INVERT_FREQ(L_SEQ_NO), ' ') NOT IN ('1','0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INVERTFREQ;
         RAISE STPERROR;
      END IF;

      IF NVL(A_INHERIT_AU(L_SEQ_NO), ' ') NOT IN ('2','1','0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INHERITAU;
         RAISE STPERROR;
      END IF;

       INSERT INTO UTRTPP (RT, VERSION, PP, PP_VERSION,
                           PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, 
                           SEQ, DELAY, DELAY_UNIT,
                           FREQ_TP, FREQ_VAL, FREQ_UNIT,
                           INVERT_FREQ, LAST_SCHED, LAST_SCHED_TZ,
                           LAST_CNT, LAST_VAL, INHERIT_AU)
       VALUES (A_RT, A_VERSION, A_PP(L_SEQ_NO), A_PP_VERSION(L_SEQ_NO), 
               A_PP_KEY1(L_SEQ_NO), A_PP_KEY2(L_SEQ_NO), A_PP_KEY3(L_SEQ_NO), 
               A_PP_KEY4(L_SEQ_NO), A_PP_KEY5(L_SEQ_NO), 
               L_SEQ_NO, A_DELAY(L_SEQ_NO), A_DELAY_UNIT(L_SEQ_NO),
               A_FREQ_TP(L_SEQ_NO), A_FREQ_VAL(L_SEQ_NO), A_FREQ_UNIT(L_SEQ_NO),
               A_INVERT_FREQ(L_SEQ_NO), TO_TIMESTAMP_TZ(A_LAST_SCHED(L_SEQ_NO)), TO_TIMESTAMP_TZ(A_LAST_SCHED(L_SEQ_NO)),
               A_LAST_CNT(L_SEQ_NO), A_LAST_VAL(L_SEQ_NO), A_INHERIT_AU(L_SEQ_NO));
   END LOOP;

   
   
   DELETE FROM UTRTPPAU RTPPAU
   WHERE RTPPAU.VERSION = A_VERSION
     AND RTPPAU.RT = A_RT
     AND (RTPPAU.PP, NVL(RTPPAU.PP_VERSION, '~Current~'), RTPPAU.PP_KEY1, RTPPAU.PP_KEY2, 
          RTPPAU.PP_KEY3, RTPPAU.PP_KEY4, RTPPAU.PP_KEY5)
         NOT IN (SELECT RTPP.PP, NVL(RTPP.PP_VERSION,'~Current~'), RTPP.PP_KEY1, RTPP.PP_KEY2, 
                        RTPP.PP_KEY3, RTPP.PP_KEY4, RTPP.PP_KEY5
                   FROM UTRTPP RTPP
                  WHERE RTPP.RT      = A_RT 
                    AND RTPP.VERSION = A_VERSION);

   L_EVENT_TP := 'UsedObjectsUpdated';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT('SaveRtParameterProfile', UNAPIGEN.P_EVMGR_NAME, 'rt', A_RT, L_LC, 
                                   L_LC_VERSION, L_SS, L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF L_LOG_HS = '1' THEN
      INSERT INTO UTRTHS (RT, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                          WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES (A_RT, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
              'request type "'||A_RT||'" parameter profiles are updated.', 
              CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE <> 1 THEN
         UNAPIGEN.LOGERROR('SaveRtParameterProfile', SQLERRM);
      END IF;
      RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveRtParameterProfile'));
END SAVERTPARAMETERPROFILE;

FUNCTION SAVERTGROUPKEY
(A_RT                 IN       VARCHAR2,                   
 A_VERSION            IN       VARCHAR2,                   
 A_GK                 IN       UNAPIGEN.VC20_TABLE_TYPE,   
 A_GK_VERSION         IN OUT   UNAPIGEN.VC20_TABLE_TYPE,   
 A_VALUE              IN       UNAPIGEN.VC40_TABLE_TYPE,   
 A_NR_OF_ROWS         IN       NUMBER,                     
 A_MODIFY_REASON      IN       VARCHAR2)                   
RETURN NUMBER IS

L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);
L_LOG_HS       CHAR(1);
L_ALLOW_MODIFY CHAR(1);
L_ACTIVE       CHAR(1);
L_RT_CURSOR    NUMBER;
L_LAST_SEQ     INTEGER;
L_GK_HANDLE    BOOLEAN_TABLE_TYPE;
L_GK_FOUND     BOOLEAN;
L_SKIP         BOOLEAN;

TABLE_DOES_NOT_EXIST EXCEPTION;
PRAGMA EXCEPTION_INIT (TABLE_DOES_NOT_EXIST, -942);


CURSOR L_GK_CURSOR IS
SELECT GK, GK_VERSION, VALUE, GKSEQ
FROM UTRTGK
WHERE VERSION = A_VERSION
  AND RT = A_RT
ORDER BY GKSEQ;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_RT, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      IF NVL(A_GK(L_SEQ_NO), ' ') = ' ' THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
      END IF;
      L_GK_HANDLE(L_SEQ_NO) := TRUE;
   END LOOP;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('rt', A_RT, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTRT
   SET ALLOW_MODIFY = '#'
   WHERE VERSION = A_VERSION
     AND RT = A_RT;

   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR ;
   END IF;

   L_LAST_SEQ := 499;
   L_RT_CURSOR := DBMS_SQL.OPEN_CURSOR;
   FOR L_RTGK IN L_GK_CURSOR LOOP
      L_GK_FOUND := FALSE;
      FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
         
         IF L_RTGK.GK = A_GK(L_SEQ_NO) AND
            ( (L_RTGK.VALUE = A_VALUE(L_SEQ_NO)) OR
              (L_RTGK.VALUE IS NULL AND A_VALUE(L_SEQ_NO) IS NULL)) THEN
            L_GK_HANDLE(L_SEQ_NO) := FALSE;
            L_GK_FOUND := TRUE;
            EXIT;
         END IF;
      END LOOP;

      IF NOT L_GK_FOUND THEN
         
         DELETE FROM UTRTGK
         WHERE VERSION = A_VERSION
           AND RT = A_RT
           AND GK = L_RTGK.GK
           AND VALUE = L_RTGK.VALUE;

         IF L_RTGK.VALUE IS NULL THEN
            DELETE FROM UTRTGK
            WHERE VERSION = A_VERSION
              AND RT = A_RT
              AND GK = L_RTGK.GK
              AND VALUE IS NULL;
         END IF;            

         L_SQL_STRING := 'DELETE FROM utrtgk' || L_RTGK.GK ||
                         ' WHERE rt = :rt AND version = :version AND ' || 
                         L_RTGK.GK || ' = :value '; 
         BEGIN
            DBMS_SQL.PARSE(L_RT_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
            DBMS_SQL.BIND_VARIABLE(L_RT_CURSOR, ':rt' , A_RT); 
            DBMS_SQL.BIND_VARIABLE(L_RT_CURSOR, ':version' , A_VERSION); 
            DBMS_SQL.BIND_VARIABLE(L_RT_CURSOR, ':value' , L_RTGK.VALUE); 
            L_RESULT := DBMS_SQL.EXECUTE(L_RT_CURSOR);
         EXCEPTION
         WHEN TABLE_DOES_NOT_EXIST THEN
            
            
            NULL;
         END;
      ELSE
         L_LAST_SEQ := L_RTGK.GKSEQ;
      END IF;
   END LOOP;

   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      IF L_GK_HANDLE(L_SEQ_NO) THEN
         L_SKIP := FALSE; 
         IF NVL(A_VALUE(L_SEQ_NO), ' ') <> ' ' THEN
            L_SQL_STRING := 'INSERT INTO utrtgk' || A_GK(L_SEQ_NO) ||
                            ' ('||A_GK(L_SEQ_NO)||', rt, version)'||
                            ' VALUES (:value, :rt, :version) ';  
            BEGIN
               DBMS_SQL.PARSE(L_RT_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
               DBMS_SQL.BIND_VARIABLE(L_RT_CURSOR, ':value' , A_VALUE(L_SEQ_NO)); 
               DBMS_SQL.BIND_VARIABLE(L_RT_CURSOR, ':rt' , A_RT); 
               DBMS_SQL.BIND_VARIABLE(L_RT_CURSOR, ':version' , A_VERSION); 
               L_RESULT := DBMS_SQL.EXECUTE(L_RT_CURSOR);
            EXCEPTION
            WHEN TABLE_DOES_NOT_EXIST THEN
               
               
               NULL;
            WHEN DUP_VAL_ON_INDEX THEN
               L_SKIP := TRUE;
            END;
         END IF;

         IF NOT L_SKIP THEN
            L_LAST_SEQ := L_LAST_SEQ + 1;

            
            INSERT INTO UTRTGK (RT, VERSION, GK, GK_VERSION, GKSEQ, VALUE)
            VALUES(A_RT, A_VERSION, A_GK(L_SEQ_NO), NULL, L_LAST_SEQ, A_VALUE(L_SEQ_NO));
         END IF;
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_RT_CURSOR);

   L_EVENT_TP := 'UsedObjectsUpdated';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT('SaveRtGroupKey', UNAPIGEN.P_EVMGR_NAME, 'rt', A_RT, L_LC, 
                                   L_LC_VERSION, L_SS, L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF (L_LOG_HS = '1') AND (UNAPIGEN.P_LOG_GK_HS = '1') THEN
      INSERT INTO UTRTHS (RT, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                          WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES (A_RT, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
              'request type "'||A_RT||'" group keys are updated.', 
              CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
   IF DBMS_SQL.IS_OPEN (L_RT_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_RT_CURSOR);
   END IF;
   UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UNIQUEGK;
   
   
   L_RESULT := UNAPIGEN.ENDTXN; 
   RETURN(UNAPIGEN.P_TXN_ERROR);
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveRtGroupKey', SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('SaveRtGroupKey', L_SQLERRM);
   END IF;
   IF DBMS_SQL.IS_OPEN (L_RT_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_RT_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveRtGroupKey'));
END SAVERTGROUPKEY;

FUNCTION SAVE1RTGROUPKEY
(A_RT                 IN       VARCHAR2,                   
 A_VERSION            IN       VARCHAR2,                   
 A_GK                 IN       VARCHAR2,                   
 A_GK_VERSION         IN OUT   VARCHAR2,                   
 A_VALUE              IN       UNAPIGEN.VC40_TABLE_TYPE,   
 A_NR_OF_ROWS         IN       NUMBER,                     
 A_MODIFY_REASON      IN       VARCHAR2)                   
RETURN NUMBER IS

L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);
L_LOG_HS       CHAR(1);
L_ALLOW_MODIFY CHAR(1);
L_ACTIVE       CHAR(1);
L_RT_CURSOR    NUMBER;
L_LAST_SEQ     INTEGER;
L_GK_HANDLE    BOOLEAN_TABLE_TYPE;
L_GK_FOUND     BOOLEAN;
L_SKIP         BOOLEAN;

TABLE_DOES_NOT_EXIST EXCEPTION;
PRAGMA EXCEPTION_INIT (TABLE_DOES_NOT_EXIST, -942);


CURSOR L_GK_CURSOR IS
SELECT VALUE, GKSEQ
FROM UTRTGK
WHERE VERSION = A_VERSION
  AND RT = A_RT
  AND GK = A_GK
ORDER BY GKSEQ;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_RT, ' ') = ' ' OR
      NVL(A_GK, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      L_GK_HANDLE(L_SEQ_NO) := TRUE;
   END LOOP;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('rt', A_RT, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTRT
   SET ALLOW_MODIFY = '#'
   WHERE VERSION = A_VERSION
     AND RT = A_RT;

   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR ;
   END IF;

   L_LAST_SEQ := 499;
   L_RT_CURSOR := DBMS_SQL.OPEN_CURSOR;
   FOR L_RTGK IN L_GK_CURSOR LOOP
      L_GK_FOUND := FALSE;
      FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
         IF L_RTGK.VALUE = A_VALUE(L_SEQ_NO) OR
            (L_RTGK.VALUE IS NULL AND A_VALUE(L_SEQ_NO) IS NULL) THEN
            L_GK_HANDLE(L_SEQ_NO) := FALSE;
            L_GK_FOUND := TRUE;
            EXIT;
         END IF;
      END LOOP;

      IF NOT L_GK_FOUND THEN
         
         DELETE FROM UTRTGK
         WHERE VERSION = A_VERSION
           AND RT = A_RT
           AND GK = A_GK
           AND VALUE = L_RTGK.VALUE;

         IF L_RTGK.VALUE IS NULL THEN
            DELETE FROM UTRTGK
            WHERE VERSION = A_VERSION
              AND RT = A_RT
              AND GK = A_GK
              AND VALUE IS NULL;
         END IF;            

         L_SQL_STRING := 'DELETE FROM utrtgk' || A_GK ||
                         ' WHERE rt = :rt AND version = :version AND ' || 
                         A_GK || '= :value '; 
         BEGIN
            DBMS_SQL.PARSE(L_RT_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
            DBMS_SQL.BIND_VARIABLE(L_RT_CURSOR, ':rt' , A_RT); 
            DBMS_SQL.BIND_VARIABLE(L_RT_CURSOR, ':version' , A_VERSION); 
            DBMS_SQL.BIND_VARIABLE(L_RT_CURSOR, ':value' , L_RTGK.VALUE); 
            L_RESULT := DBMS_SQL.EXECUTE(L_RT_CURSOR);
         EXCEPTION
         WHEN TABLE_DOES_NOT_EXIST THEN
            
            
            NULL;
         END;
      ELSE      
         L_LAST_SEQ := L_RTGK.GKSEQ;
      END IF;
   END LOOP;

   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      IF L_GK_HANDLE(L_SEQ_NO) THEN
         L_SKIP := FALSE; 
         IF NVL(A_VALUE(L_SEQ_NO), ' ') <> ' ' THEN
            L_SQL_STRING := 'INSERT INTO utrtgk' || A_GK ||
                            ' ('||A_GK||', rt, version)'||
                            ' VALUES (:value, :rt, :version) ';  
            BEGIN
               DBMS_SQL.PARSE(L_RT_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
               DBMS_SQL.BIND_VARIABLE(L_RT_CURSOR, ':value' , A_VALUE(L_SEQ_NO)); 
               DBMS_SQL.BIND_VARIABLE(L_RT_CURSOR, ':rt' , A_RT); 
               DBMS_SQL.BIND_VARIABLE(L_RT_CURSOR, ':version' , A_VERSION); 
               L_RESULT := DBMS_SQL.EXECUTE(L_RT_CURSOR);
            EXCEPTION
            WHEN TABLE_DOES_NOT_EXIST THEN
               
               
               NULL;
            WHEN DUP_VAL_ON_INDEX THEN
               L_SKIP := TRUE;
            END;
         END IF;

         IF NOT L_SKIP THEN
            L_LAST_SEQ := L_LAST_SEQ + 1;

            
            INSERT INTO UTRTGK (RT, VERSION, GK, GK_VERSION, GKSEQ, VALUE)
            VALUES(A_RT, A_VERSION, A_GK, NULL, L_LAST_SEQ, A_VALUE(L_SEQ_NO));
         END IF;
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_RT_CURSOR);

   L_EVENT_TP := 'RtGroupKeyUpdated';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT('Save1RtGroupKey', UNAPIGEN.P_EVMGR_NAME, 'rt', A_RT, L_LC, 
                                   L_LC_VERSION, L_SS, L_EVENT_TP, 'version='||A_VERSION||'#gk='||A_GK||'#gk_version='||A_GK_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF (L_LOG_HS = '1') AND (UNAPIGEN.P_LOG_GK_HS = '1') THEN
      INSERT INTO UTRTHS (RT, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                          WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES (A_RT, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 
              L_EVENT_TP, 
              'request type "'||A_RT||'" group key "'||A_GK||'" is created or updated.', 
              CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
   IF DBMS_SQL.IS_OPEN (L_RT_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_RT_CURSOR);
   END IF;
   UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UNIQUEGK;
   
    UPDATE UTRT
      SET ALLOW_MODIFY = '1' 
    WHERE RT = A_RT
    AND VERSION = A_VERSION;
   
   
   L_RESULT := UNAPIGEN.ENDTXN; 
   RETURN(UNAPIGEN.P_TXN_ERROR);
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('Save1RtGroupKey', SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('Save1RtGroupKey', L_SQLERRM);
   END IF;
   IF DBMS_SQL.IS_OPEN (L_RT_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_RT_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'Save1RtGroupKey'));
END SAVE1RTGROUPKEY;

FUNCTION GETRTPPATTRIBUTE
(A_RT               OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_VERSION          OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_PP               OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_PP_VERSION       OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_PP_KEY1          OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_PP_KEY2          OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_PP_KEY3          OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_PP_KEY4          OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_PP_KEY5          OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_AU               OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_AU_VERSION       OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_VALUE            OUT    UNAPIGEN.VC40_TABLE_TYPE,  
 A_DESCRIPTION      OUT    UNAPIGEN.VC40_TABLE_TYPE,  
 A_IS_PROTECTED     OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_SINGLE_VALUED    OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NEW_VAL_ALLOWED  OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_STORE_DB         OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_VALUE_LIST_TP    OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_RUN_MODE         OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_SERVICE          OUT    UNAPIGEN.VC255_TABLE_TYPE, 
 A_CF_VALUE         OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_NR_OF_ROWS       IN OUT NUMBER,                    
 A_WHERE_CLAUSE     IN     VARCHAR2)                  
RETURN NUMBER IS

L_RT                                   VARCHAR2(20);
L_VERSION                              VARCHAR2(20);
L_PP                                   VARCHAR2(20);
L_PP_VERSION                           VARCHAR2(20);
L_PP_KEY1                              VARCHAR2(20);
L_PP_KEY2                              VARCHAR2(20);
L_PP_KEY3                              VARCHAR2(20);
L_PP_KEY4                              VARCHAR2(20);
L_PP_KEY5                              VARCHAR2(20);
L_AU                                   VARCHAR2(20);
L_AU_VERSION                           VARCHAR2(20);
L_VALUE                                VARCHAR2(40);
L_DESCRIPTION                          VARCHAR2(40);
L_IS_PROTECTED                         CHAR(1);
L_SINGLE_VALUED                        CHAR(1);
L_NEW_VAL_ALLOWED                      CHAR(1);
L_STORE_DB                             CHAR(1);
L_VALUE_LIST_TP                        CHAR(1);
L_RUN_MODE                             CHAR(1);
L_SERVICE                              VARCHAR2(255);
L_CF_VALUE                             VARCHAR2(20);
L_PSEUDO_NEXT_ROWS                     BOOLEAN;
L_AU_CURSOR                            INTEGER;
L_BIND_RT_SELECTION                    BOOLEAN;
L_BIND_FIXED_RT_FLAG                   BOOLEAN;
L_BIND_RT_VALUE                        VARCHAR2(20);

BEGIN

   L_BIND_RT_SELECTION := FALSE;
   L_BIND_FIXED_RT_FLAG := FALSE;
   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   L_PSEUDO_NEXT_ROWS := FALSE;
   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      RETURN(UNAPIGEN.DBERR_WHERECLAUSE);
   ELSIF A_WHERE_CLAUSE = 'SELECTION' THEN
      L_PSEUDO_NEXT_ROWS := TRUE;
      IF UNAPIRT.P_SELECTION_CLAUSE IS NOT NULL THEN
         IF INSTR(UPPER(UNAPIRT.P_SELECTION_CLAUSE), ' WHERE ') <> 0 THEN       
            L_WHERE_CLAUSE := ','||UNAPIRT.P_SELECTION_CLAUSE|| 
                              ' AND a.rt = au.rt AND a.version = au.version ORDER BY au.rt, au.version, au.pp, au.pp_version, au.auseq, au.au'; 
         ELSE
            L_WHERE_CLAUSE := ','||UNAPIRT.P_SELECTION_CLAUSE|| 
                              ' WHERE a.rt = au.rt AND a.version = au.version ORDER BY au.rt, au.version, au.pp, au.pp_version, au.auseq, au.au'; 
         END IF;
         L_BIND_RT_SELECTION := TRUE;
      ELSE
         L_WHERE_CLAUSE := 'ORDER BY au.rt, au.version, au.pp, au.pp_version, au.auseq, au.au'; 
      END IF;   
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,3)) = 'RT=' THEN
      
      
      
      L_BIND_FIXED_RT_FLAG := TRUE;
      L_BIND_RT_VALUE := SUBSTR(A_WHERE_CLAUSE,4);
      L_WHERE_CLAUSE := 'WHERE rt=:rt_val ';
      L_PSEUDO_NEXT_ROWS := TRUE;
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_BIND_FIXED_RT_FLAG := TRUE;
      L_BIND_RT_VALUE := A_WHERE_CLAUSE;
      L_WHERE_CLAUSE := 'WHERE rt=:rt_val ';
      L_PSEUDO_NEXT_ROWS := TRUE;
      L_WHERE_CLAUSE := 'WHERE au.rt = :rt_val ORDER BY au.rt, au.version, au.pp, au.pp_version, au.auseq, au.au';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_SQL_STRING := 'SELECT au.rt, au.version, au.pp, au.pp_version, '||
                   'au.pp_key1, au.pp_key2, au.pp_key3, au.pp_key4, au.pp_key5, '||
                   'au.au, au.au_version, au.value '||
                   'FROM dd' || UNAPIGEN.P_DD || '.uvrtppau au ' || L_WHERE_CLAUSE;

   IF NOT DBMS_SQL.IS_OPEN(L_AU_CURSOR) THEN
   
      L_AU_CURSOR := DBMS_SQL.OPEN_CURSOR;
      DBMS_SQL.PARSE(L_AU_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      IF L_BIND_FIXED_RT_FLAG THEN
         DBMS_SQL.BIND_VARIABLE(L_AU_CURSOR, ':rt_val' , L_BIND_RT_VALUE); 
      ELSIF L_BIND_RT_SELECTION THEN
         FOR L_X IN 1..UNAPIRT.P_SELECTION_VAL_TAB.COUNT() LOOP
            DBMS_SQL.BIND_VARIABLE(L_AU_CURSOR, ':col_val'||L_X , UNAPIRT.P_SELECTION_VAL_TAB(L_X)); 
         END LOOP;
      END IF;      
      DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 1, L_RT, 20);
      DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 2, L_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 3, L_PP, 20);
      DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 4, L_PP_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 5, L_PP_KEY1, 20);
      DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 6, L_PP_KEY2, 20);
      DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 7, L_PP_KEY3, 20);
      DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 8, L_PP_KEY4, 20);
      DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 9, L_PP_KEY5, 20);
      DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 10, L_AU, 20);
      DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 11, L_AU_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 12, L_VALUE, 40);
      L_RESULT := DBMS_SQL.EXECUTE(L_AU_CURSOR);
   END IF;
   
   L_RESULT := DBMS_SQL.FETCH_ROWS(L_AU_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP

      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;
      
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 1, L_RT);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 2, L_VERSION);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 3, L_PP);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 4, L_PP_VERSION);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 5, L_PP_KEY1);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 6, L_PP_KEY2);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 7, L_PP_KEY3);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 8, L_PP_KEY4);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 9, L_PP_KEY5);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 10, L_AU);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 11, L_AU_VERSION);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 12, L_VALUE);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_RT(L_FETCHED_ROWS) := L_RT;
      A_VERSION(L_FETCHED_ROWS) := L_VERSION;
      A_PP(L_FETCHED_ROWS) := L_PP;
      A_PP_VERSION(L_FETCHED_ROWS) := L_PP_VERSION;
      A_PP_KEY1(L_FETCHED_ROWS) := L_PP_KEY1;
      A_PP_KEY2(L_FETCHED_ROWS) := L_PP_KEY2;
      A_PP_KEY3(L_FETCHED_ROWS) := L_PP_KEY3;
      A_PP_KEY4(L_FETCHED_ROWS) := L_PP_KEY4;
      A_PP_KEY5(L_FETCHED_ROWS) := L_PP_KEY5;
      A_AU(L_FETCHED_ROWS) := L_AU;
      A_AU_VERSION(L_FETCHED_ROWS) := L_AU_VERSION;
      A_VALUE(L_FETCHED_ROWS) := L_VALUE;

      OPEN UNAPIGEN.L_AUDET_CURSOR(L_AU, L_AU_VERSION);
      FETCH UNAPIGEN.L_AUDET_CURSOR
      INTO L_DESCRIPTION, L_IS_PROTECTED, L_SINGLE_VALUED,
           L_NEW_VAL_ALLOWED, L_STORE_DB, L_VALUE_LIST_TP, L_RUN_MODE,
           L_SERVICE, L_CF_VALUE;
      IF UNAPIGEN.L_AUDET_CURSOR%NOTFOUND THEN
         
         
         
         A_DESCRIPTION(L_FETCHED_ROWS)     := L_AU;
         A_IS_PROTECTED(L_FETCHED_ROWS)    := '1';
         A_SINGLE_VALUED(L_FETCHED_ROWS)   := '1';
         A_NEW_VAL_ALLOWED(L_FETCHED_ROWS) := '0';
         A_STORE_DB(L_FETCHED_ROWS)        := '0';
         A_VALUE_LIST_TP(L_FETCHED_ROWS)   := 'E';
         A_RUN_MODE(L_FETCHED_ROWS)        := 'H';
         A_SERVICE(L_FETCHED_ROWS)         := NULL;
         A_CF_VALUE(L_FETCHED_ROWS)        := NULL;
      ELSE      
         A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;
         A_IS_PROTECTED(L_FETCHED_ROWS) := L_IS_PROTECTED;
         A_SINGLE_VALUED(L_FETCHED_ROWS) := L_SINGLE_VALUED;
         A_NEW_VAL_ALLOWED(L_FETCHED_ROWS) := L_NEW_VAL_ALLOWED;
         A_STORE_DB(L_FETCHED_ROWS) := L_STORE_DB;
         A_VALUE_LIST_TP(L_FETCHED_ROWS) := L_VALUE_LIST_TP;
         A_RUN_MODE(L_FETCHED_ROWS) := L_RUN_MODE;
         A_SERVICE(L_FETCHED_ROWS) := L_SERVICE;
         A_CF_VALUE(L_FETCHED_ROWS) := L_CF_VALUE;
      END IF;
      CLOSE UNAPIGEN.L_AUDET_CURSOR;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_AU_CURSOR);
      END IF;
   END LOOP;

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
      DBMS_SQL.CLOSE_CURSOR(L_AU_CURSOR);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      DBMS_SQL.CLOSE_CURSOR(L_AU_CURSOR);
   ELSE   
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   IF L_PSEUDO_NEXT_ROWS = FALSE AND
      DBMS_SQL.IS_OPEN(L_AU_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_AU_CURSOR);
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
             'GetRtPpAttribute', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF UNAPIGEN.L_AUDET_CURSOR%ISOPEN THEN
         CLOSE UNAPIGEN.L_AUDET_CURSOR;
      END IF;
      IF DBMS_SQL.IS_OPEN(L_AU_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(L_AU_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETRTPPATTRIBUTE;

FUNCTION SAVERTPPATTRIBUTE
(A_RT             IN        VARCHAR2,                 
 A_VERSION        IN        VARCHAR2,                 
 A_PP             IN        VARCHAR2,                 
 A_PP_VERSION     IN        VARCHAR2,                 
 A_PP_KEY1        IN        VARCHAR2,                 
 A_PP_KEY2        IN        VARCHAR2,                 
 A_PP_KEY3        IN        VARCHAR2,                 
 A_PP_KEY4        IN        VARCHAR2,                 
 A_PP_KEY5        IN        VARCHAR2,                 
 A_AU             IN        UNAPIGEN.VC20_TABLE_TYPE, 
 A_VALUE          IN        UNAPIGEN.VC40_TABLE_TYPE, 
 A_AU_VERSION     IN OUT    UNAPIGEN.VC20_TABLE_TYPE, 
 A_NR_OF_ROWS     IN        NUMBER,                   
 A_MODIFY_REASON  IN        VARCHAR2)                 
RETURN NUMBER IS

L_AU           VARCHAR2(20);
L_AU_VERSION   VARCHAR2(20);
L_VALUE        VARCHAR2(40);
L_ALLOW_MODIFY CHAR(1);
L_AUSEQ        NUMBER;
L_LOG_HS       CHAR(1);
L_ACTIVE       CHAR(1);
L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);
L_OBJECT_ID    VARCHAR2(20);

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_RT, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;
   
   IF NVL(A_PP, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF A_PP_KEY1 IS NULL OR
      A_PP_KEY2 IS NULL OR
      A_PP_KEY3 IS NULL OR
      A_PP_KEY4 IS NULL OR
      A_PP_KEY5 IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOPPKEYID;
      RAISE STPERROR;
   END IF;


   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('rt', A_RT, A_VERSION, L_LC, 
                                           L_LC_VERSION, L_SS, L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTRT
   SET ALLOW_MODIFY = '#'
   WHERE VERSION = A_VERSION
     AND RT = A_RT;
   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR ;
   END IF;

   
   DELETE FROM UTRTPPAU
   WHERE RT = A_RT
   AND VERSION = A_VERSION
   AND PP = A_PP
   AND PP_KEY1 =A_PP_KEY1
   AND PP_KEY2 =A_PP_KEY2
   AND PP_KEY3 =A_PP_KEY3
   AND PP_KEY4 =A_PP_KEY4
   AND PP_KEY5 =A_PP_KEY5;                         

   FOR I IN 1..A_NR_OF_ROWS LOOP
      
      IF NVL(A_AU(I), ' ') = ' ' THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
      END IF;
      
      INSERT INTO UTRTPPAU
      (RT, VERSION, PP, PP_VERSION, 
       PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, 
       AU, AU_VERSION,  AUSEQ, VALUE)
      VALUES
      (A_RT, A_VERSION, A_PP, A_PP_VERSION,
       A_PP_KEY1, A_PP_KEY2, A_PP_KEY3, A_PP_KEY4, A_PP_KEY5, 
       A_AU(I), A_AU_VERSION(I), I, A_VALUE(I));
   END LOOP;

   L_EVENT_TP := 'AttributesUpdated';
   L_EV_DETAILS := 'version='||A_VERSION||
                   '#pp_key1='||A_PP_KEY1||
                   '#pp_key2='||A_PP_KEY2||
                   '#pp_key3='||A_PP_KEY3||
                   '#pp_key4='||A_PP_KEY4||
                   '#pp_key5='||A_PP_KEY5;
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT ('SaveRtPpAttribute',
               UNAPIGEN.P_EVMGR_NAME, 'rt', A_RT, L_LC, L_LC_VERSION, L_SS,
               L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF L_LOG_HS = '1' THEN
      INSERT INTO UTRTHS
      (RT, VERSION, WHO, WHO_DESCRIPTION, 
      WHAT, WHAT_DESCRIPTION,
      LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES (A_RT, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 
              L_EVENT_TP, 'attributes for '||UNAPIGEN.GETOBJTPDESCRIPTION('pp')||' "'||A_PP||
                          '" used in object '||UNAPIGEN.GETOBJTPDESCRIPTION('rt')||' "'||A_RT||
                          '" are updated',
                          CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR ); 
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveRtPpAttribute', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveRtPpAttribute'));
END SAVERTPPATTRIBUTE;

FUNCTION SAVE1RTPPATTRIBUTE
(A_RT             IN        VARCHAR2,                 
 A_VERSION        IN        VARCHAR2,                 
 A_PP             IN        VARCHAR2,                 
 A_PP_VERSION     IN        VARCHAR2,                 
 A_PP_KEY1        IN        VARCHAR2,                 
 A_PP_KEY2        IN        VARCHAR2,                 
 A_PP_KEY3        IN        VARCHAR2,                 
 A_PP_KEY4        IN        VARCHAR2,                 
 A_PP_KEY5        IN        VARCHAR2,                 
 A_AU             IN        VARCHAR2,                 
 A_VALUE          IN        UNAPIGEN.VC40_TABLE_TYPE, 
 A_AU_VERSION     IN        VARCHAR2,                 
 A_NR_OF_ROWS     IN        NUMBER,                   
 A_MODIFY_REASON  IN        VARCHAR2)                 
RETURN NUMBER
 IS

L_AU           VARCHAR2(20);
L_AU_VERSION   VARCHAR2(20);
L_VALUE        VARCHAR2(40);
L_ALLOW_MODIFY CHAR(1);
L_AUSEQ        NUMBER;
L_LOG_HS       CHAR(1);
L_ACTIVE       CHAR(1);
L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);
L_OBJECT_ID    VARCHAR2(20);

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_RT, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;
   
   IF NVL(A_PP, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF A_PP_KEY1 IS NULL OR
      A_PP_KEY2 IS NULL OR
      A_PP_KEY3 IS NULL OR
      A_PP_KEY4 IS NULL OR
      A_PP_KEY5 IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOPPKEYID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_AU, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;
   L_AU_VERSION := NULL;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('rt', A_RT, A_VERSION, L_LC, 
                                           L_LC_VERSION, L_SS, L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTRT
   SET ALLOW_MODIFY = '#'
   WHERE VERSION = A_VERSION
     AND RT = A_RT;
   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR ;
   END IF;

   
   DELETE FROM UTRTPPAU
   WHERE RT = A_RT
   AND VERSION = A_VERSION
   AND PP = A_PP
   AND PP_KEY1 =A_PP_KEY1
   AND PP_KEY2 =A_PP_KEY2
   AND PP_KEY3 =A_PP_KEY3
   AND PP_KEY4 =A_PP_KEY4
   AND PP_KEY5 =A_PP_KEY5
   AND AU = A_AU;                         

   
   L_AU_VERSION := NULL;

   FOR I IN 1..A_NR_OF_ROWS LOOP

            
      INSERT INTO UTRTPPAU
      (RT, VERSION, PP, PP_VERSION, 
       PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, 
       AU, AU_VERSION,  AUSEQ, VALUE)
      VALUES
      (A_RT, A_VERSION, A_PP, A_PP_VERSION,
       A_PP_KEY1, A_PP_KEY2, A_PP_KEY3, A_PP_KEY4, A_PP_KEY5, 
       A_AU, L_AU_VERSION, I, A_VALUE(I));
   END LOOP;

   L_EVENT_TP := 'AttributesUpdated';
   L_EV_DETAILS := 'version='||A_VERSION||
                   '#pp_key1='||A_PP_KEY1||
                   '#pp_key2='||A_PP_KEY2||
                   '#pp_key3='||A_PP_KEY3||
                   '#pp_key4='||A_PP_KEY4||
                   '#pp_key5='||A_PP_KEY5;
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT ('Save1RtPpAttribute',
               UNAPIGEN.P_EVMGR_NAME, 'rt', A_RT, L_LC, L_LC_VERSION, L_SS,
               L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF L_LOG_HS = '1' THEN
      INSERT INTO UTRTHS
      (RT, VERSION, WHO, WHO_DESCRIPTION, 
      WHAT, WHAT_DESCRIPTION,
      LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES (A_RT, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 
              L_EVENT_TP, 'attributes for '||UNAPIGEN.GETOBJTPDESCRIPTION('pp')||' "'||A_PP||
                          '" used in object '||UNAPIGEN.GETOBJTPDESCRIPTION('rt')||' "'||A_RT||
                          '" are updated',
                          CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR ); 
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('Save1RtPpAttribute', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'Save1RtPpAttribute'));
END SAVE1RTPPATTRIBUTE;

END UNAPIRT;
PACKAGE BODY unapigen AS 

L_SQLERRM                      VARCHAR2(255);
L_SQLERRM2                     VARCHAR2(255);
L_SQL_STRING                   VARCHAR2(2000);
L_WHERE_CLAUSE                 VARCHAR2(1000);
L_EVENT_TP                     UTEV.EV_TP%TYPE;
L_RET_CODE                     NUMBER;
L_RESULT                       NUMBER;
L_FETCHED_ROWS                 NUMBER;
L_EV_SEQ_NR                    NUMBER;
L_EV_DETAILS                   VARCHAR2(255);
STPERROR                       EXCEPTION;
L_DML_CURSOR                   INTEGER;
L_CURSOR                       INTEGER;
L_DML1_CURSOR                  INTEGER;
L_MAILSETTINGS_FETCHED         CHAR(1);
P_GETERROR_CURSOR              INTEGER;
P_NR_OF_COLUMNS                INTEGER;
P_SMTP_SERVER                  VARCHAR2(255);
P_SMTP_DOMAIN                  VARCHAR2(255);
P_SMTP_SENDER                  VARCHAR2(255);
L_CHECK_CODE                   FLOAT;
P_INSERTEVENT_STATEMENT        VARCHAR2(500);


P_GETOBJCOMMENT_CURSOR         INTEGER;
P_FDACOMPLIANT                 VARCHAR2(10);
P_EQMNGMT_SUPPORTED            VARCHAR2(3);
P_RNDSUITE_SUPPORTED           CHAR(1);


P_MAX_SAMPLES                  INTEGER;

CURSOR C_SYSTEM (A_SETTING_NAME VARCHAR2) IS
   SELECT SETTING_VALUE
   FROM UTSYSTEM
   WHERE SETTING_NAME = A_SETTING_NAME;

CURSOR C_UTDBA (A_SETTING_NAME VARCHAR2) IS
   SELECT SETTING_VALUE
   FROM UTDBA
   WHERE SETTING_NAME = A_SETTING_NAME;
      
FUNCTION GETVERSION
   RETURN VARCHAR2
IS
BEGIN
   RETURN('06.07.00.00_00.13');
EXCEPTION
   WHEN OTHERS THEN
      RETURN (NULL);
END GETVERSION;

PROCEDURE U4COMMIT
IS
BEGIN
   IF P_REMOTE='0' THEN
      COMMIT;
   END IF;
END U4COMMIT;

PROCEDURE U4ROLLBACK
IS
BEGIN
   IF P_REMOTE='0' THEN
      BEGIN
         U4ROLLBACK2SAVEPOINT('unilab4');      
      EXCEPTION
      WHEN OTHERS THEN
         ROLLBACK;
         UNAPIME3.PA_EQ_NR_OF_ROWS := 0;
         UNAPIEV.L_EV_TAB.DELETE;
      END;
      IF UNAPIEV.P_EV_MGR_SESSION THEN
         IF SQLCODE = -60 THEN 
            UNAPIGEN.P_DEADLOCK_RAISED := TRUE;
         END IF;
      END IF;
   END IF;
END U4ROLLBACK;

PROCEDURE U4SAVEPOINT
(A_SAVEPOINT   IN VARCHAR2)
IS
BEGIN
   EXECUTE IMMEDIATE('SAVEPOINT '||A_SAVEPOINT);
   P_EQ_POINTER(A_SAVEPOINT) := UNAPIME3.PA_EQ_NR_OF_ROWS;
   P_EV_POINTER(A_SAVEPOINT) := UNAPIEV.L_EV_TAB.COUNT();
END;

PROCEDURE U4ROLLBACK2SAVEPOINT
(A_SAVEPOINT   IN VARCHAR2)
IS
BEGIN
   EXECUTE IMMEDIATE('ROLLBACK TO SAVEPOINT '||A_SAVEPOINT);
   BEGIN
      UNAPIME3.PA_EQ_NR_OF_ROWS := P_EQ_POINTER(A_SAVEPOINT);
   EXCEPTION 
   WHEN NO_DATA_FOUND THEN
      
      NULL;
   END;
   BEGIN
      IF P_EV_POINTER(A_SAVEPOINT)<UNAPIEV.L_EV_TAB.COUNT() THEN
        
        UNAPIEV.L_EV_TAB.TRIM(UNAPIEV.L_EV_TAB.COUNT()-P_EV_POINTER(A_SAVEPOINT));
      END IF;
   EXCEPTION 
   WHEN NO_DATA_FOUND THEN
      
      NULL;
   END;   
END;

FUNCTION BEGINTRANSACTION
RETURN NUMBER IS

BEGIN
   L_RET_CODE := BEGINTXN(P_MULTI_API_TXN);
   RETURN(L_RET_CODE);
END BEGINTRANSACTION;

FUNCTION BEGINTXN                     
(A_TXN_TYPE       IN NUMBER DEFAULT P_MULTI_API_TXN)
RETURN NUMBER IS

CURSOR L_TR_SEQ_EVENT_CURSOR IS
   SELECT TR_SEQ_EVENT_NR.NEXTVAL
   FROM DUAL;

BEGIN

   IF P_TXN_LEVEL = 0 THEN
      IF UNAPIEV.P_EV_MGR_SESSION AND 
         NVL(UNAPIEV.P_EV_RECURSIVELEVEL,0) > 1 THEN
         NULL;
         
         
         
         
         
         
         
      ELSE
         PA_OBJECT_NR := 0;
      END IF;

      UNAPIME3.PA_EQ_NR_OF_ROWS := 0;
      UNAPIEV.L_EV_TAB.DELETE();
      
      
         
         OPEN L_TR_SEQ_EVENT_CURSOR;
         FETCH L_TR_SEQ_EVENT_CURSOR INTO P_TR_SEQ;
         CLOSE L_TR_SEQ_EVENT_CURSOR;
      
   END IF;

   IF (A_TXN_TYPE = P_MULTI_API_TXN) THEN
      IF (P_TXN_LEVEL > 0) THEN
         
         U4ROLLBACK;
         INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
         VALUES (P_CLIENT_ID, P_APPLIC_NAME, NVL(UNAPIGEN.P_USER,USER), CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'BeginTxn',
                 'Begin new MST without terminating previous (pending) transaction!('
                 ||TO_CHAR(P_TXN_LEVEL)||')');
         U4COMMIT;
         P_TXN_ERROR := DBERR_GENFAIL;
      ELSE
         P_TXN_ERROR := DBERR_SUCCESS;
      END IF;
      P_TXN_LEVEL := 1;
   ELSIF A_TXN_TYPE = P_SINGLE_API_TXN THEN
      P_TXN_LEVEL := P_TXN_LEVEL + 1;
      P_TXN_ERROR := DBERR_SUCCESS;
   END IF;
   P_PP := '';
   P_PP_VERSION := '';
   P_INHERIT_FROM := '-1';

   RETURN(P_TXN_ERROR);

EXCEPTION
WHEN OTHERS THEN
   L_SQLERRM := SQLERRM;
   U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES (P_CLIENT_ID, P_APPLIC_NAME, NVL(UNAPIGEN.P_USER,USER), CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'BeginTxn', L_SQLERRM);
   U4COMMIT;
   RETURN(DBERR_GENFAIL);
END BEGINTXN;

FUNCTION ENDTRANSACTION
RETURN NUMBER IS

BEGIN
   L_RET_CODE := ENDTXN(P_MULTI_API_TXN);
   RETURN(L_RET_CODE);
END ENDTRANSACTION;

FUNCTION GETTXNID
(A_TXN_ID     OUT    NUMBER)     
RETURN NUMBER IS

BEGIN
   A_TXN_ID := P_TR_SEQ;
   RETURN(UNAPIGEN.DBERR_SUCCESS);
END GETTXNID;

FUNCTION SYNCHRENDTRANSACTION
RETURN NUMBER IS

L_PREV_EV_MGR_SESSION            BOOLEAN;
L_LOCKNAME                       VARCHAR2(30);
L_LOCKHANDLE                     VARCHAR2(200);
L_LOCKED                         BOOLEAN;
L_PREV_EV_MGR_NAME               VARCHAR2(20);
L_PREV_CURRENT_EV_MGR_NAME       VARCHAR2(20);

CURSOR C_SYSTEM (A_SETTING_NAME VARCHAR2) IS
   SELECT SETTING_VALUE
   FROM UTSYSTEM
   WHERE SETTING_NAME = A_SETTING_NAME;

BEGIN
   
   
   
   
   
   
   L_PREV_EV_MGR_SESSION := UNAPIEV.P_EV_MGR_SESSION;
   UNAPIEV.P_EV_MGR_SESSION := TRUE;
   L_PREV_EV_MGR_NAME := P_EVMGR_NAME;
   L_PREV_CURRENT_EV_MGR_NAME :=  P_CURRENT_EVMGR_NAME;
   P_EVMGR_NAME := 'SynchrEventManager';
   
   
   UNAPIEV.P_EV_REC.TR_SEQ := UNAPIGEN.P_TR_SEQ;
   UNAPIEV.P_EV_REC.USERNAME := UNAPIGEN.P_USER;   

   
   
   
   
   
   
   L_LOCKED := FALSE;
   L_LOCKNAME := 'U4EVMGR'||P_TR_SEQ;
   SYS.DBMS_LOCK.ALLOCATE_UNIQUE(L_LOCKNAME, L_LOCKHANDLE, 60);

   
   
   
   
   
   
   
   
   LOOP
      L_RET_CODE := SYS.DBMS_LOCK.REQUEST(L_LOCKHANDLE, SYS.DBMS_LOCK.X_MODE,
                                   0.01, FALSE);
      IF L_RET_CODE = UNAPIGEN.DBERR_SUCCESS THEN
         L_LOCKED := TRUE;
         
         IF UNAPIEV.P_CLIENT_EVMGR_USED IS NULL THEN
            UNAPIEV.P_CLIENT_EVMGR_USED := 'NO';
            OPEN C_SYSTEM ('CLIENT_EVMGR_USED');
            FETCH C_SYSTEM INTO UNAPIEV.P_CLIENT_EVMGR_USED;
            CLOSE C_SYSTEM;
         END IF;

         L_RET_CODE := ENDTXN(P_MULTI_API_TXN);

         L_RET_CODE := SYS.DBMS_LOCK.RELEASE(L_LOCKHANDLE);
         IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
            INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
            VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, NVL(UNAPIGEN.P_USER,USER), CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                   'SyncETxn', 'Major Error : Releasing lock '||L_LOCKNAME||':('||L_LOCKHANDLE||
                   ')returned '||TO_CHAR(L_RET_CODE));
            U4COMMIT;
         END IF;
         L_LOCKED := FALSE;

         
         
         
         
         U4COMMIT;
         EXIT;
      ELSIF L_RET_CODE = 1 THEN
         
         
         
         
         SYS.DBMS_LOCK.SLEEP(2);
      ELSE
         INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
         VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, NVL(UNAPIGEN.P_USER,USER), CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                'SyncETxn', 'Major Error : Requesting lock '||L_LOCKNAME||':('||L_LOCKHANDLE||
                ') returned '||TO_CHAR(L_RET_CODE));
         U4COMMIT;
         EXIT;
      END IF;
   END LOOP;

   UNAPIEV.P_EV_MGR_SESSION := L_PREV_EV_MGR_SESSION;
   P_CURRENT_EVMGR_NAME := L_PREV_CURRENT_EV_MGR_NAME;
   P_EVMGR_NAME := L_PREV_EV_MGR_NAME;
   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      L_SQLERRM := SUBSTR(SQLERRM,1,255);
   END IF;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, NVL(UNAPIGEN.P_USER,USER), CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
          'SyncETxn', L_SQLERRM);
   
   
   
   IF L_LOCKED THEN
      L_RET_CODE := SYS.DBMS_LOCK.RELEASE(L_LOCKHANDLE);
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
         VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, NVL(UNAPIGEN.P_USER,USER), CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                'SyncETxn', 'Major error : Releasing lock '||L_LOCKNAME||':('||L_LOCKHANDLE||
                ')returned '||TO_CHAR(L_RET_CODE));
         U4COMMIT;
      END IF;
   END IF;
   IF C_SYSTEM%ISOPEN THEN
      CLOSE C_SYSTEM;
   END IF;   
   U4COMMIT;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END SYNCHRENDTRANSACTION;

FUNCTION ENDTXN                     
(A_TXN_TYPE       IN NUMBER DEFAULT P_SINGLE_API_TXN)
RETURN NUMBER IS

L_SEQ_NO             NUMBER;
L_TRACE_COUNT        INTEGER;
L_TRACE_EVENTMANAGER VARCHAR2(20);
L_TMP_RET_CODE       INTEGER;

BEGIN
   P_TXN_LEVEL := GREATEST(0, P_TXN_LEVEL - 1);      

   IF (A_TXN_TYPE = P_MULTI_API_TXN) AND (P_TXN_LEVEL > 0) THEN
      
      U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (P_CLIENT_ID, P_APPLIC_NAME, NVL(UNAPIGEN.P_USER,USER), CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'EndTxn',
              'At end of MST the BeginTxn and EndTxn pairs do not match! ('
              || TO_CHAR(P_TXN_LEVEL) ||')');
      U4COMMIT;
      P_TXN_LEVEL := 0;
      P_TXN_ERROR := DBERR_GENFAIL;
   END IF;

   IF P_TXN_LEVEL = 0 THEN
      IF P_TXN_ERROR = DBERR_SUCCESS THEN
      IF UNAPIEV.P_EV_MGR_SESSION AND 
         NVL(UNAPIEV.P_EV_RECURSIVELEVEL,0) >= 1 THEN
            NULL;
            
            
            
            
            
            
            
         ELSE
            FOR L_SEQ_NO IN 1..PA_OBJECT_NR LOOP
               PA_OBJECT_ID(L_SEQ_NO) := '';
            END LOOP;
            PA_OBJECT_NR := 0;
            L_RET_CODE := UNAPIAUT.EVALFREQBUFFER ; 
         END IF;

         
         
         
         
         IF UNAPIME3.PA_EQ_NR_OF_ROWS > 0 THEN
            UNAPIME3.INSERTEVENTSEQ;
         END IF;
         UNAPIME3.PA_EQ_NR_OF_ROWS := 0;
         
         IF UNAPIEV.P_EVMGRS_EV_IN_BULK='1' THEN
            
            
            IF UNAPIEV.P_EVMGRS_1QBYINSTANCE='1' THEN
               IF P_INSERTEVENT_STATEMENT IS NULL THEN
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  P_INSERTEVENT_STATEMENT :=
                      'INSERT INTO utev'||UNAPIGEN.P_INSTANCENR||
                      ' (tr_seq, ev_seq, created_on, created_on_tz, client_id, applic, dbapi_name,'||
                      'evmgr_name, object_tp, object_id, object_lc, object_lc_version, object_ss,'||
                      'ev_tp, username, ev_details) '||
                      'SELECT tr_seq, ev_seq, created_on,created_on_tz, client_id,'||
                      'applic, dbapi_name, evmgr_name, object_tp, object_id,'||
                      'object_lc, object_lc_version, object_ss,'||
                      'ev_tp, username, ev_details '||
                      'FROM TABLE(CAST(:l_ev_tab AS uoevlist))';                
               END IF;
               
               
               
               
               
               
               
               
               
               
               
               
               
               
               
               
               
               IF UNAPIEV.L_EV_TAB.COUNT() >0 THEN
                  EXECUTE IMMEDIATE 
                  P_INSERTEVENT_STATEMENT
                  USING UNAPIEV.L_EV_TAB;
               END IF;
            ELSE            
               
               
               
               
               
               
               
               
               
               
               
               
               
               
               
               INSERT INTO UTEV
                   (TR_SEQ, EV_SEQ, CREATED_ON, CREATED_ON_TZ, CLIENT_ID, APPLIC, DBAPI_NAME,
                    EVMGR_NAME, OBJECT_TP, OBJECT_ID, OBJECT_LC, OBJECT_LC_VERSION, OBJECT_SS,
                    EV_TP, USERNAME, EV_DETAILS)
               SELECT TR_SEQ, EV_SEQ, CREATED_ON, CREATED_ON_TZ, CLIENT_ID, APPLIC, DBAPI_NAME,
                    EVMGR_NAME, OBJECT_TP, OBJECT_ID, OBJECT_LC, OBJECT_LC_VERSION, OBJECT_SS,
                    EV_TP, USERNAME, EV_DETAILS
               FROM TABLE(CAST(UNAPIEV.L_EV_TAB AS UOEVLIST));
               
            END IF;
         END IF;
         U4COMMIT;
         UNAPIEV.L_EV_TAB.DELETE();

         IF NOT UNAPIEV.P_EV_MGR_SESSION THEN
            
            IF UNAPIEV.P_EVMGRS_POLLING_ON='0' THEN
               DBMS_ALERT.SIGNAL(NVL(P_CURRENT_EVMGR_NAME,P_EVMGR_NAME), TO_CHAR(P_TR_SEQ));
               IF SQL%ROWCOUNT = 0 THEN
                  
                  INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
                  VALUES (P_CLIENT_ID, P_APPLIC_NAME, NVL(UNAPIGEN.P_USER,USER), CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'EndTxn',
                     'No listening event manager ! used event manager name = '||NVL(P_CURRENT_EVMGR_NAME,P_EVMGR_NAME));
                  U4COMMIT;
               END IF;
            END IF;
         ELSE
            IF NVL(UNAPIEV.P_EV_RECURSIVELEVEL,0) < 1 OR
               UNAPIEV.L_SUBEVENTS > 0 THEN
               L_RET_CODE := UNAPIEV2.EVENTMANAGER(P_TR_SEQ);

               
               IF NVL(UNAPIEV.P_EV_RECURSIVELEVEL,0) <= 1 THEN
                  L_TMP_RET_CODE := UNAPIAUT.EVALFREQBUFFER ; 
               END IF;
               












            END IF;
         END IF;
         U4COMMIT;
      ELSE
         U4ROLLBACK;
         IF UNAPIEV.P_EV_MGR_SESSION AND 
            NVL(UNAPIEV.P_EV_RECURSIVELEVEL,0) >= 1 THEN
            NULL;
            
            
            
            
            
            
            
         ELSE
            FOR L_SEQ_NO IN 1..PA_OBJECT_NR LOOP
               PA_OBJECT_ID(L_SEQ_NO) := '';
            END LOOP;
            PA_OBJECT_NR := 0;
         END IF;
         UNAPIME3.PA_EQ_NR_OF_ROWS := 0;
         UNAPIEV.L_EV_TAB.DELETE();
         
      END IF;
   END IF;

   P_TXN_ERROR := DBERR_SUCCESS;
   P_PP := '';
   P_INHERIT_FROM := '-1';

   RETURN(P_TXN_ERROR);

EXCEPTION
WHEN OTHERS THEN
   L_SQLERRM := SQLERRM;
   U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES (P_CLIENT_ID, P_APPLIC_NAME, NVL(UNAPIGEN.P_USER,USER), CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'EndTxn', L_SQLERRM);
   U4COMMIT;
   P_TXN_ERROR := DBERR_GENFAIL;
   RETURN(P_TXN_ERROR);
END ENDTXN;

FUNCTION ABORTTXN                     

(A_ERR_CODE         IN NUMBER,
 A_API_NAME         IN VARCHAR2)
RETURN NUMBER IS

L_SEQ_NO         NUMBER;

BEGIN
   P_TXN_LEVEL := GREATEST(0, P_TXN_LEVEL - 1);      
   U4ROLLBACK;

   P_TXN_ERROR := A_ERR_CODE;
   P_PP := '';
   P_INHERIT_FROM := '-1';




   IF SQLCODE = -60 THEN 
      IF UNAPIEV.P_EV_MGR_SESSION THEN
         UNAPIGEN.P_DEADLOCK_RAISED := TRUE;
      ELSE
         IF P_TXN_ERROR = UNAPIGEN.DBERR_GENFAIL THEN
            P_TXN_ERROR := UNAPIGEN.DBERR_DEADLOCKDETECTED;
         END IF;
      END IF;
   END IF;    
   RETURN(P_TXN_ERROR);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (P_CLIENT_ID, P_APPLIC_NAME, NVL(UNAPIGEN.P_USER,USER), CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'AbortTxn',
              L_SQLERRM);
      U4COMMIT;
      P_TXN_ERROR := DBERR_GENFAIL;
      RETURN(P_TXN_ERROR);
END ABORTTXN;

FUNCTION SKIPEVENTSINTRANSACTION  
RETURN NUMBER IS

CURSOR L_EVENTS_CURSOR (A_TR_SEQ IN NUMBER) IS
   SELECT A.*
   FROM UTEV A
   WHERE A.TR_SEQ = A_TR_SEQ
   ORDER BY A.EV_SEQ;
L_EVENTS_REC L_EVENTS_CURSOR%ROWTYPE;

BEGIN

   FOR L_EVENTS_REC IN L_EVENTS_CURSOR(UNAPIGEN.P_TR_SEQ) LOOP
       UNAPIEV.P_EV_REC.TR_SEQ             := L_EVENTS_REC.TR_SEQ;
       UNAPIEV.P_EV_REC.EV_SEQ             := L_EVENTS_REC.EV_SEQ;
       UNAPIEV.P_EV_REC.CREATED_ON         := L_EVENTS_REC.CREATED_ON;
       UNAPIEV.P_EV_REC.CLIENT_ID          := L_EVENTS_REC.CLIENT_ID;
       UNAPIEV.P_EV_REC.APPLIC             := L_EVENTS_REC.APPLIC;
       UNAPIEV.P_EV_REC.DBAPI_NAME         := L_EVENTS_REC.DBAPI_NAME;
       UNAPIEV.P_EV_REC.EVMGR_NAME         := L_EVENTS_REC.EVMGR_NAME;
       UNAPIEV.P_EV_REC.OBJECT_TP          := L_EVENTS_REC.OBJECT_TP;
       UNAPIEV.P_EV_REC.OBJECT_ID          := L_EVENTS_REC.OBJECT_ID;
       UNAPIEV.P_EV_REC.OBJECT_LC          := L_EVENTS_REC.OBJECT_LC;
       UNAPIEV.P_EV_REC.OBJECT_LC_VERSION  := L_EVENTS_REC.OBJECT_LC_VERSION;
       UNAPIEV.P_EV_REC.OBJECT_SS          := L_EVENTS_REC.OBJECT_SS;
       UNAPIEV.P_EV_REC.EV_TP              := L_EVENTS_REC.EV_TP;
       UNAPIEV.P_EV_REC.USERNAME           := L_EVENTS_REC.USERNAME;
       UNAPIEV.P_EV_REC.EV_DETAILS         := L_EVENTS_REC.EV_DETAILS;
       UNAPIEV.EVALUATEEVENTDETAILS(L_EVENTS_REC.EV_SEQ);
 

       UNAPIEV.P_SS_TO := NULL;
       IF UNAPIEV.P_EV_REC.OBJECT_TP IN ('sd', 'sdic', 'sdii', 'ws', 'rq', 'rqic', 'rqii',
                                         'sc', 'ic', 'ii', 'pg', 'pa', 'me', 'ch') THEN
          UNAPIEV.UPDATEOPALOBJECTRECORD(UNAPIEV.P_SS_TO);
       ELSE
          IF NOT DBMS_SQL.IS_OPEN(UNAPIEV.L_OBJ_CURSOR) THEN
             UNAPIEV.L_OBJ_CURSOR := DBMS_SQL.OPEN_CURSOR;
          END IF;
          UNAPIEV.UPDATEOBJECTRECORD(UNAPIEV.P_SS_TO);
       END IF;                                           
   END LOOP;
   
   DELETE FROM UTEV
   WHERE TR_SEQ=UNAPIGEN.P_TR_SEQ
      AND DBAPI_NAME NOT LIKE 'InternalChange%';

   IF DBMS_SQL.IS_OPEN(UNAPIEV.L_OBJ_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(UNAPIEV.L_OBJ_CURSOR);
   END IF;
   
   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (P_CLIENT_ID, P_APPLIC_NAME, NVL(UNAPIGEN.P_USER,USER), CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'SkipEventsInTransaction',
              L_SQLERRM);
      U4COMMIT;
      IF DBMS_SQL.IS_OPEN(UNAPIEV.L_OBJ_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(UNAPIEV.L_OBJ_CURSOR);
      END IF;
      P_TXN_ERROR := DBERR_GENFAIL;
      RETURN(P_TXN_ERROR);
END SKIPEVENTSINTRANSACTION;

FUNCTION SETUSUSERPROFILE
( A_UP                 IN     NUMBER,   
  A_US                 IN     VARCHAR2, 
  A_TK                 OUT    VARCHAR2, 
  A_LANGUAGE           OUT    VARCHAR2) 
RETURN NUMBER IS

L_DD               VARCHAR2(3);
L_LANGUAGE         VARCHAR2(20);
L_COUNT        NUMBER;








BEGIN

   
   SELECT COUNT(*) INTO L_COUNT
   FROM UTUPUS
   WHERE UP= A_UP AND US= A_US;
   
   IF (L_COUNT = 0) 
   THEN
       RETURN(DBERR_INVALIDUP);
   END IF;
   

   SELECT DD,LANGUAGE 
   INTO L_DD, L_LANGUAGE
   FROM UTUP
   WHERE UP = A_UP;

   A_LANGUAGE := L_LANGUAGE;

   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   A_TK := NULL;
   P_TK := NULL;
   
   P_CURRENT_UP := A_UP;
   P_DD := L_DD;

   
   PA_OBJECT_NR := 0;

   RETURN(DBERR_SUCCESS);

EXCEPTION
    WHEN OTHERS THEN
       L_SQLERRM := SQLERRM;
       U4ROLLBACK;
       INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
       VALUES (P_CLIENT_ID, P_APPLIC_NAME, NVL(UNAPIGEN.P_USER,USER), CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'SetUsUserProfile',
               L_SQLERRM);
       U4COMMIT;
       RETURN(DBERR_GENFAIL);
END SETUSUSERPROFILE;


FUNCTION GETSHORTCUTKEY
( A_SHORTCUT            OUT       RAW8_TABLE_TYPE,         
  A_KEY_TP              OUT       VC2_TABLE_TYPE,          
  A_VALUE_S             OUT       VC40_TABLE_TYPE,         
  A_VALUE_F             OUT       NUM_TABLE_TYPE,          
  A_STORE_DB            OUT       CHAR1_TABLE_TYPE,        
  A_RUN_MODE            OUT       CHAR1_TABLE_TYPE,        
  A_SERVICE             OUT       VC255_TABLE_TYPE,        
  A_NR_OF_ROWS          IN OUT    NUMBER)                  
RETURN NUMBER IS

L_SHORTCUT            RAW(8);
L_KEY_TP              VARCHAR2(2);
L_VALUE_S             VARCHAR2(40);
L_VALUE_F             NUMBER;
L_STORE_DB            CHAR(1);
L_RUN_MODE            CHAR(1);
L_SERVICE             VARCHAR2(255);
L_SHORTCUT_CURSOR     INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS, 0) = 0 THEN
      A_NR_OF_ROWS := P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > P_MAX_CHUNK_SIZE THEN
      RETURN (DBERR_NROFROWS);
   END IF;

   
   L_SQL_STRING := 'SELECT shortcut, key_tp, value_s, value_f, store_db, ' ||
                   'run_mode, service  ' ||
                   ' FROM dd' || P_DD || '.uvshortcut';

   L_SHORTCUT_CURSOR := DBMS_SQL.OPEN_CURSOR;

   DBMS_SQL.PARSE(L_SHORTCUT_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN_RAW(L_SHORTCUT_CURSOR, 1, L_SHORTCUT, 8);
   DBMS_SQL.DEFINE_COLUMN(L_SHORTCUT_CURSOR, 2, L_KEY_TP, 2);
   DBMS_SQL.DEFINE_COLUMN(L_SHORTCUT_CURSOR, 3, L_VALUE_S, 40);
   DBMS_SQL.DEFINE_COLUMN(L_SHORTCUT_CURSOR, 4, L_VALUE_F);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_SHORTCUT_CURSOR, 5, L_STORE_DB, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_SHORTCUT_CURSOR, 6, L_RUN_MODE, 1);
   DBMS_SQL.DEFINE_COLUMN(L_SHORTCUT_CURSOR, 7, L_SERVICE, 255);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_SHORTCUT_CURSOR);

   L_FETCHED_ROWS := 0;
   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE_RAW(L_SHORTCUT_CURSOR,1,L_SHORTCUT);
      DBMS_SQL.COLUMN_VALUE(L_SHORTCUT_CURSOR,2,L_KEY_TP);
      DBMS_SQL.COLUMN_VALUE(L_SHORTCUT_CURSOR,3,L_VALUE_S);
      DBMS_SQL.COLUMN_VALUE(L_SHORTCUT_CURSOR,4,L_VALUE_F);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_SHORTCUT_CURSOR,5,L_STORE_DB);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_SHORTCUT_CURSOR,6,L_RUN_MODE);
      DBMS_SQL.COLUMN_VALUE(L_SHORTCUT_CURSOR,7,L_SERVICE);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_SHORTCUT(L_FETCHED_ROWS) := L_SHORTCUT;
      A_KEY_TP(L_FETCHED_ROWS) := L_KEY_TP;
      A_VALUE_S(L_FETCHED_ROWS) := L_VALUE_S;
      A_VALUE_F(L_FETCHED_ROWS) := L_VALUE_F;
      A_STORE_DB(L_FETCHED_ROWS) := L_STORE_DB;
      A_RUN_MODE(L_FETCHED_ROWS) := L_RUN_MODE;
      A_SERVICE(L_FETCHED_ROWS) := L_SERVICE;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_SHORTCUT_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_SHORTCUT_CURSOR);

   
   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := DBERR_SUCCESS;
   END IF;

RETURN (L_RET_CODE);

EXCEPTION
  WHEN OTHERS THEN
     L_SQLERRM := SQLERRM;
     UNAPIGEN.U4ROLLBACK;
     INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
     VALUES (P_CLIENT_ID, P_APPLIC_NAME, NVL(UNAPIGEN.P_USER,USER), CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'GetShortCutKey',
             L_SQLERRM);
     UNAPIGEN.U4COMMIT;
     IF DBMS_SQL.IS_OPEN(L_SHORTCUT_CURSOR) THEN
        DBMS_SQL.CLOSE_CURSOR(L_SHORTCUT_CURSOR);
     END IF;
     RETURN(DBERR_GENFAIL);
END GETSHORTCUTKEY;


FUNCTION GETSHORTCUTKEY
( A_ALT                 OUT       CHAR1_TABLE_TYPE,        
  A_CTRL                OUT       CHAR1_TABLE_TYPE,        
  A_SHIFT               OUT       CHAR1_TABLE_TYPE,        
  A_KEY_NAME            OUT       VC20_TABLE_TYPE,         
  A_KEY_TP              OUT       VC2_TABLE_TYPE,          
  A_VALUE_S             OUT       VC40_TABLE_TYPE,         
  A_VALUE_F             OUT       NUM_TABLE_TYPE,          
  A_STORE_DB            OUT       CHAR1_TABLE_TYPE,        
  A_RUN_MODE            OUT       CHAR1_TABLE_TYPE,        
  A_SERVICE             OUT       VC255_TABLE_TYPE,        
  A_NR_OF_ROWS          IN OUT    NUMBER)                  
RETURN NUMBER IS

L_SHORTCUT            RAW(8);
L_KEY_TP              VARCHAR2(2);
L_VALUE_S             VARCHAR2(40);
L_VALUE_F             NUMBER;
L_STORE_DB            CHAR(1);
L_RUN_MODE            CHAR(1);
L_SERVICE             VARCHAR2(255);
L_SHORTCUT_CURSOR     INTEGER;

L_VC8_SHORTCUT        VARCHAR2(8);
L_CHAR1_ALT           CHAR(1);
L_CHAR1_CTRL          CHAR(1);
L_CHAR1_SHIFT         CHAR(1);
L_VC20_KEY_NAME       VARCHAR2(20);

BEGIN

   IF NVL(A_NR_OF_ROWS, 0) = 0 THEN
      A_NR_OF_ROWS := P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > P_MAX_CHUNK_SIZE THEN
      RETURN (DBERR_NROFROWS);
   END IF;

   
   L_SQL_STRING := 'SELECT shortcut, key_tp, value_s, value_f, store_db, ' ||
                   'run_mode, service  ' ||
                   ' FROM dd' || P_DD || '.uvshortcut';

   L_SHORTCUT_CURSOR := DBMS_SQL.OPEN_CURSOR;

   DBMS_SQL.PARSE(L_SHORTCUT_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN_RAW(L_SHORTCUT_CURSOR, 1, L_SHORTCUT, 8);
   DBMS_SQL.DEFINE_COLUMN(L_SHORTCUT_CURSOR, 2, L_KEY_TP, 2);
   DBMS_SQL.DEFINE_COLUMN(L_SHORTCUT_CURSOR, 3, L_VALUE_S, 40);
   DBMS_SQL.DEFINE_COLUMN(L_SHORTCUT_CURSOR, 4, L_VALUE_F);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_SHORTCUT_CURSOR, 5, L_STORE_DB, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_SHORTCUT_CURSOR, 6, L_RUN_MODE, 1);
   DBMS_SQL.DEFINE_COLUMN(L_SHORTCUT_CURSOR, 7, L_SERVICE, 255);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_SHORTCUT_CURSOR);

   L_FETCHED_ROWS := 0;
   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE_RAW(L_SHORTCUT_CURSOR,1,L_SHORTCUT);
      DBMS_SQL.COLUMN_VALUE(L_SHORTCUT_CURSOR,2,L_KEY_TP);
      DBMS_SQL.COLUMN_VALUE(L_SHORTCUT_CURSOR,3,L_VALUE_S);
      DBMS_SQL.COLUMN_VALUE(L_SHORTCUT_CURSOR,4,L_VALUE_F);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_SHORTCUT_CURSOR,5,L_STORE_DB);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_SHORTCUT_CURSOR,6,L_RUN_MODE);
      DBMS_SQL.COLUMN_VALUE(L_SHORTCUT_CURSOR,7,L_SERVICE);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      
      IF L_SHORTCUT = HEXTORAW('0000000000000000') THEN
         L_VC8_SHORTCUT := NULL;
      ELSE
         L_VC8_SHORTCUT := UTL_RAW.CAST_TO_VARCHAR2(L_SHORTCUT);
      END IF;
      IF NVL(L_VC8_SHORTCUT, ' ') = ' ' THEN
         L_VC8_SHORTCUT := '000Undef';
      END IF;
      L_CHAR1_ALT     := SUBSTR(L_VC8_SHORTCUT, 1, 1);
      L_CHAR1_CTRL    := SUBSTR(L_VC8_SHORTCUT, 2, 1);
      L_CHAR1_SHIFT   := SUBSTR(L_VC8_SHORTCUT, 3, 1);
      L_VC20_KEY_NAME := SUBSTR(L_VC8_SHORTCUT, 4);
      IF L_VC20_KEY_NAME = 'Undef' THEN
         L_VC20_KEY_NAME := '';
      END IF;
      A_ALT(L_FETCHED_ROWS)      := L_CHAR1_ALT;
      A_CTRL(L_FETCHED_ROWS)     := L_CHAR1_CTRL;
      A_SHIFT(L_FETCHED_ROWS)    := L_CHAR1_SHIFT;
      A_KEY_NAME(L_FETCHED_ROWS) := RTRIM(L_VC20_KEY_NAME);

      A_KEY_TP(L_FETCHED_ROWS) := L_KEY_TP;
      A_VALUE_S(L_FETCHED_ROWS) := L_VALUE_S;
      A_VALUE_F(L_FETCHED_ROWS) := L_VALUE_F;
      A_STORE_DB(L_FETCHED_ROWS) := L_STORE_DB;
      A_RUN_MODE(L_FETCHED_ROWS) := L_RUN_MODE;
      A_SERVICE(L_FETCHED_ROWS) := L_SERVICE;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_SHORTCUT_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_SHORTCUT_CURSOR);

   
   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := DBERR_SUCCESS;
   END IF;

RETURN (L_RET_CODE);

EXCEPTION
  WHEN OTHERS THEN
     L_SQLERRM := SQLERRM;
     UNAPIGEN.U4ROLLBACK;
     INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
     VALUES (P_CLIENT_ID, P_APPLIC_NAME, NVL(UNAPIGEN.P_USER,USER), CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'GetShortCutKey',
             L_SQLERRM);
     UNAPIGEN.U4COMMIT;
     IF DBMS_SQL.IS_OPEN(L_SHORTCUT_CURSOR) THEN
        DBMS_SQL.CLOSE_CURSOR(L_SHORTCUT_CURSOR);
     END IF;
     RETURN(DBERR_GENFAIL);
END GETSHORTCUTKEY;

FUNCTION GETALLOWEDSTATUS
(A_OBJECT_LC          IN        VARCHAR2,         
 A_CUR_SS             IN        VARCHAR2,         
 A_NEW_SS             OUT       VC2_TABLE_TYPE,   
 A_SS_NAME            OUT       VC20_TABLE_TYPE,  
 A_NR_OF_ROWS         IN OUT    NUMBER)           
RETURN NUMBER IS

L_SS_CURSOR      INTEGER;
L_LC             VARCHAR2(2);
L_SS_TO          VARCHAR2(2);
L_SS_NAME        VARCHAR2(20);
L_COUNT          INTEGER;
L_TR_NO          NUMBER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > P_MAX_CHUNK_SIZE THEN
      RETURN (DBERR_NROFROWS);
   END IF;

   L_SQLERRM := '';
   
   SELECT NVL(COUNT(LC),0)
   INTO L_COUNT
   FROM UTLC
   WHERE LC = A_OBJECT_LC;

   IF L_COUNT = 0 THEN
      RAISE STPERROR;
   END IF;

   
   SELECT NVL(COUNT(SS),0)
   INTO L_COUNT
   FROM UTSS
   WHERE SS = A_CUR_SS;

   IF L_COUNT = 0 THEN
      RAISE STPERROR;
   END IF;

   L_SQL_STRING := 'SELECT DISTINCT ss_to, name , tr_no ' ||
                   'FROM dd' || P_DD || '.uvss' || ', dd' || P_DD || '.uvlcus ' ||
                   'WHERE lc = ''' || A_OBJECT_LC  || ''' AND ' ||
                   'ss_from IN (''@@'', ''' || A_CUR_SS || ''') AND ' ||
                   'us IN (''' || P_USER || ''', ''~ANY~'',''UP'||TO_CHAR(UNAPIGEN.P_CURRENT_UP) ||
                   ''',''~DYNAMIC~'') AND ss = ss_to order by tr_no';

   L_SS_CURSOR := DBMS_SQL.OPEN_CURSOR;
   DBMS_SQL.PARSE(L_SS_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   DBMS_SQL.DEFINE_COLUMN(L_SS_CURSOR, 1, L_SS_TO, 2);
   DBMS_SQL.DEFINE_COLUMN(L_SS_CURSOR, 2, L_SS_NAME, 20);
   DBMS_SQL.DEFINE_COLUMN(L_SS_CURSOR, 3, L_TR_NO);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_SS_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_SS_CURSOR, 1, L_SS_TO);
      DBMS_SQL.COLUMN_VALUE(L_SS_CURSOR, 2, L_SS_NAME);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_NEW_SS(L_FETCHED_ROWS) := L_SS_TO;
      A_SS_NAME(L_FETCHED_ROWS) := L_SS_NAME;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_SS_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_SS_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
       L_RET_CODE := DBERR_NORECORDS;
   ELSE
       A_NR_OF_ROWS := L_FETCHED_ROWS;
       L_RET_CODE := DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      IF L_SQLERRM IS NULL THEN
         L_SQLERRM := SQLERRM;
      END IF;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (P_CLIENT_ID, P_APPLIC_NAME, NVL(UNAPIGEN.P_USER,USER), CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetAllowedStatus', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
   END IF;
   IF DBMS_SQL.IS_OPEN(L_SS_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_SS_CURSOR);
   END IF;
   RETURN(DBERR_GENFAIL);
END GETALLOWEDSTATUS;

FUNCTION GETNEXTEVENTSEQNR                                 
(A_SEQ_NR              IN OUT   NUMBER)                    
RETURN NUMBER IS

CURSOR L_SEQ_EVENT_CURSOR IS
   SELECT SEQ_EVENT_NR.NEXTVAL FROM DUAL;

BEGIN

   
   OPEN L_SEQ_EVENT_CURSOR;
   FETCH L_SEQ_EVENT_CURSOR INTO A_SEQ_NR;
   CLOSE L_SEQ_EVENT_CURSOR;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

END GETNEXTEVENTSEQNR;

FUNCTION ADDOBJECTCOMMENT
(A_OBJECT_TP         IN  VARCHAR2, 
 A_OBJECT_ID         IN  VARCHAR2, 
 A_OBJECT_VERSION    IN  VARCHAR2, 
 A_COMMENT           IN  VARCHAR2) 
RETURN NUMBER IS

L_HS_CURSOR         INTEGER;
L_ALLOW_MODIFY      CHAR(1);
L_LOG_HS            CHAR(1);
L_LC                VARCHAR2(2);
L_LC_VERSION        VARCHAR2(20);
L_ACTIVE            CHAR(1);
L_SS                VARCHAR2(2);

BEGIN

   IF BEGINTXN(P_SINGLE_API_TXN) <> P_TXN_ERROR THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_OBJECT_TP, ' ') = ' ' THEN
      P_TXN_ERROR := DBERR_NOOBJTP;
      RAISE STPERROR;
   END IF;

   IF NVL(A_OBJECT_ID, ' ') = ' ' THEN
      P_TXN_ERROR := DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_OBJECT_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := GETAUTHORISATION(A_OBJECT_TP, A_OBJECT_ID, A_OBJECT_VERSION, L_LC, L_LC_VERSION, L_SS,
                                  L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);
   IF L_RET_CODE <> 0 THEN
      P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;
   
   L_RET_CODE := GETNEXTEVENTSEQNR(L_EV_SEQ_NR);
   IF L_RET_CODE <> 0 THEN
      P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   L_HS_CURSOR := DBMS_SQL.OPEN_CURSOR;

   
   L_SQL_STRING :=
        'INSERT INTO ut' || A_OBJECT_TP || 'hs (' || A_OBJECT_TP ||
        ', version, who, who_description, what, what_description, logdate, logdate_tz, why, tr_seq, ev_seq)' ||
        ' VALUES (''' || REPLACE(A_OBJECT_ID, '''', '''''') || 
             ''', ''' || REPLACE(A_OBJECT_VERSION, '''', '''''') || 
             ''', ''' || REPLACE(P_USER, '''', '''''') || 
             ''', ''' || REPLACE(P_USER_DESCRIPTION, '''', '''''') || 
             ''', ''Comment'', ''comment is added on '||GETOBJTPDESCRIPTION(A_OBJECT_TP)||' "'||
              REPLACE(A_OBJECT_ID, '''', '''''') ||'"'', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, ''' ||
             REPLACE(A_COMMENT, '''', '''''') || 
             ''', '   || P_TR_SEQ ||
             ', '     || L_EV_SEQ_NR || ')'; 

   DBMS_SQL.PARSE(L_HS_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   L_RESULT := DBMS_SQL.EXECUTE(L_HS_CURSOR);

   
   L_SQL_STRING :=
        'UPDATE ut' || A_OBJECT_TP || 
        ' SET last_comment= '''||REPLACE(A_COMMENT, '''', '''''')||''''|| 
        ' WHERE '||A_OBJECT_TP||'='''||REPLACE(A_OBJECT_ID, '''', '''''')||''''|| 
        ' AND version ='''||REPLACE(A_OBJECT_VERSION, '''', '''''')||''''; 
        
   DBMS_SQL.PARSE(L_HS_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   L_RESULT := DBMS_SQL.EXECUTE(L_HS_CURSOR);

   DBMS_SQL.CLOSE_CURSOR(L_HS_CURSOR);

   IF L_RESULT = 0 THEN
      P_TXN_ERROR := DBERR_GENFAIL;
      RAISE STPERROR;
   END IF;

   IF ENDTXN <> DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      LOGERROR('AddObjectComment', SQLERRM);
   END IF;
   IF DBMS_SQL.IS_OPEN(L_HS_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_HS_CURSOR);
   END IF;
   RETURN(ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'AddObjectComment'));
END ADDOBJECTCOMMENT;

FUNCTION GETOBJECTCOMMENT
(A_OBJECT_TP        IN        VARCHAR2,             
 A_OBJECT_ID        OUT       VC20_TABLE_TYPE,      
 A_OBJECT_VERSION   OUT       VC20_TABLE_TYPE,      
 A_LAST_COMMENT     OUT       VC255_TABLE_TYPE,     
 A_NR_OF_ROWS       IN OUT    NUMBER,               
 A_WHERE_CLAUSE     IN        VARCHAR2,             
 A_NEXT_ROWS        IN        NUMBER)               
RETURN NUMBER IS

L_OBJECT_ID         VARCHAR2(20);
L_OBJECT_VERSION    VARCHAR2(20);
L_LAST_COMMENT      VARCHAR2(255);

L_FROM_CLAUSE       VARCHAR2(255);
L_BIND_RT_SELECTION BOOLEAN;
L_BIND_ST_SELECTION BOOLEAN;

BEGIN

   L_BIND_RT_SELECTION:= FALSE;
   L_BIND_ST_SELECTION:= FALSE;
   IF NVL(A_OBJECT_TP, ' ') = ' ' THEN
      RETURN(UNAPIGEN.DBERR_NOOBJTP);
   END IF;
   IF NVL(A_NR_OF_ROWS, 0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF A_WHERE_CLAUSE <> 'SELECTION' THEN
      IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
         RETURN(UNAPIGEN.DBERR_NEXTROWS);
      END IF;

      
      IF A_NEXT_ROWS = -1 THEN
         IF P_GETOBJCOMMENT_CURSOR IS NOT NULL THEN
            DBMS_SQL.CLOSE_CURSOR(P_GETOBJCOMMENT_CURSOR);
            P_GETOBJCOMMENT_CURSOR := NULL;
         END IF;
         RETURN (UNAPIGEN.DBERR_SUCCESS);
      END IF;

      
      IF A_NEXT_ROWS = 1 THEN
         IF P_GETOBJCOMMENT_CURSOR IS NULL THEN
            RETURN(UNAPIGEN.DBERR_NOCURSOR);
         END IF;
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 OR 
      A_WHERE_CLAUSE = 'SELECTION' THEN
      
      IF P_GETOBJCOMMENT_CURSOR IS NULL THEN
         L_SQL_STRING := 'SELECT a.'||A_OBJECT_TP||', a.version, a.last_comment FROM ';

         L_FROM_CLAUSE := 'dd' || UNAPIGEN.P_DD || '.uv'||A_OBJECT_TP||' a ';

         
         L_WHERE_CLAUSE := ' ';
         IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
            RETURN(UNAPIGEN.DBERR_WHERECLAUSE);
         ELSIF A_WHERE_CLAUSE = 'SELECTION' THEN
            L_BIND_RT_SELECTION := FALSE;
            L_BIND_ST_SELECTION := FALSE;
            
            
            
            
            
            
            
            
            
            
            IF A_OBJECT_TP = 'st' THEN
               IF UNAPIST.P_SELECTION_CLAUSE IS NOT NULL THEN 
                  L_FROM_CLAUSE := '';
                  L_WHERE_CLAUSE := UNAPIST.P_SELECTION_CLAUSE || 
                                    ' ORDER BY a.'||A_OBJECT_TP||', a.version';
                  L_BIND_ST_SELECTION := TRUE;
               ELSE
                  L_WHERE_CLAUSE := ' ORDER BY a.'||A_OBJECT_TP||', a.version'; 
               END IF;
            ELSIF A_OBJECT_TP = 'rt' THEN
               IF UNAPIRT.P_SELECTION_CLAUSE IS NOT NULL THEN 
                  L_FROM_CLAUSE := '';
                  L_WHERE_CLAUSE := UNAPIRT.P_SELECTION_CLAUSE || 
                                    ' ORDER BY a.'||A_OBJECT_TP||', a.version';
                  L_BIND_RT_SELECTION := TRUE;
               ELSE
                  L_WHERE_CLAUSE := ' ORDER BY a.'||A_OBJECT_TP||', a.version'; 
               END IF;
            ELSE
               
               RETURN(UNAPIGEN.DBERR_WHERECLAUSE);         
            END IF;         
         ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
            L_WHERE_CLAUSE := ' WHERE a.'||A_OBJECT_TP||' = ''' || A_WHERE_CLAUSE || 
                              ''' AND version_is_current=''1''';
         ELSE
            L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
         END IF;

         L_SQL_STRING := L_SQL_STRING || L_FROM_CLAUSE || L_WHERE_CLAUSE;

         P_GETOBJCOMMENT_CURSOR := DBMS_SQL.OPEN_CURSOR;

         DBMS_SQL.PARSE(P_GETOBJCOMMENT_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         IF L_BIND_ST_SELECTION THEN
            FOR L_X IN 1..UNAPIST.P_SELECTION_VAL_TAB.COUNT() LOOP
               DBMS_SQL.BIND_VARIABLE(P_GETOBJCOMMENT_CURSOR, ':col_val'||L_X , UNAPIST.P_SELECTION_VAL_TAB(L_X)); 
            END LOOP;
         ELSIF L_BIND_RT_SELECTION THEN
            FOR L_X IN 1..UNAPIRT.P_SELECTION_VAL_TAB.COUNT() LOOP
               DBMS_SQL.BIND_VARIABLE(P_GETOBJCOMMENT_CURSOR, ':col_val'||L_X , UNAPIRT.P_SELECTION_VAL_TAB(L_X)); 
            END LOOP;
         END IF;
         DBMS_SQL.DEFINE_COLUMN(P_GETOBJCOMMENT_CURSOR, 1, L_OBJECT_ID, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETOBJCOMMENT_CURSOR, 2, L_OBJECT_VERSION, 20);
         DBMS_SQL.DEFINE_COLUMN(P_GETOBJCOMMENT_CURSOR, 3, L_LAST_COMMENT, 255);

         L_RESULT := DBMS_SQL.EXECUTE(P_GETOBJCOMMENT_CURSOR);

      END IF;
   END IF;
   
   L_RESULT := DBMS_SQL.FETCH_ROWS(P_GETOBJCOMMENT_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_GETOBJCOMMENT_CURSOR, 1, L_OBJECT_ID);
      DBMS_SQL.COLUMN_VALUE(P_GETOBJCOMMENT_CURSOR, 2, L_OBJECT_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_GETOBJCOMMENT_CURSOR, 3, L_LAST_COMMENT);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_OBJECT_ID(L_FETCHED_ROWS) := L_OBJECT_ID;
      A_OBJECT_VERSION(L_FETCHED_ROWS) := L_OBJECT_VERSION;
      A_LAST_COMMENT(L_FETCHED_ROWS) := L_LAST_COMMENT;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_GETOBJCOMMENT_CURSOR);
      END IF;

   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_GETOBJCOMMENT_CURSOR);
       P_GETOBJCOMMENT_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_GETOBJCOMMENT_CURSOR);
      P_GETOBJCOMMENT_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;
   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE,LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
             'GetObjectComment', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN(P_GETOBJCOMMENT_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(P_GETOBJCOMMENT_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETOBJECTCOMMENT;

FUNCTION SETCUSTOMCONNECTIONPARAMETER
(A_CUSTOMCONNECTIONPARAMETER         IN VARCHAR2)    
RETURN NUMBER IS
BEGIN
   EXECUTE IMMEDIATE 'DECLARE l_ret_code INTEGER; BEGIN :l_ret_code := UNCUSTOMSETCONNECTION.SetCustomConnectionParameter(:a_CustomconnectionParameter); END;'
   USING OUT L_RET_CODE, IN A_CUSTOMCONNECTIONPARAMETER;
   RETURN(L_RET_CODE);
END;


FUNCTION SETCONNECTION
( A_CLIENT_ID          IN     VARCHAR2, 
  A_US                 IN     VARCHAR2, 
  A_PASSWORD           IN     VARCHAR2, 
  A_APPLIC             IN     VARCHAR2, 
  A_NUMERIC_CHARACTERS IN OUT VARCHAR2, 
  A_DATE_FORMAT        IN OUT VARCHAR2, 
  A_UP                 OUT    NUMBER,   
  A_USER_PROFILE       OUT    VARCHAR2, 
  A_LANGUAGE           OUT    VARCHAR2, 
  A_TK                 OUT    VARCHAR2) 
RETURN NUMBER IS
L_US                          VARCHAR2(20);
L_INSTALL_BUSY                CHAR(1);
L_TIMEZONE                    VARCHAR2(255);
BEGIN
L_US := A_US;
L_INSTALL_BUSY := '0';
L_TIMEZONE := '';

RETURN ( UNAPIGEN.SETCONNECTION4INSTALL(A_CLIENT_ID          => A_CLIENT_ID,
                                A_US                 => L_US,
                                A_APPLIC             => A_APPLIC,
                                A_NUMERIC_CHARACTERS => A_NUMERIC_CHARACTERS,
                                A_DATE_FORMAT        => A_DATE_FORMAT,
            A_TIMEZONE           => L_TIMEZONE,
                                A_UP                 => A_UP,
                                A_USER_PROFILE       => A_USER_PROFILE,
                                A_LANGUAGE           => A_LANGUAGE,
                                A_TK                 => A_TK,
                                A_INSTALL_BUSY       => L_INSTALL_BUSY));
END SETCONNECTION;                                   


FUNCTION SETCONNECTION
( A_CLIENT_ID          IN     VARCHAR2, 
  A_US                 IN OUT VARCHAR2, 
  A_APPLIC             IN     VARCHAR2, 
  A_NUMERIC_CHARACTERS IN OUT VARCHAR2, 
  A_DATE_FORMAT        IN OUT VARCHAR2, 
  A_UP                 OUT    NUMBER,   
  A_USER_PROFILE       OUT    VARCHAR2, 
  A_LANGUAGE           OUT    VARCHAR2, 
  A_TK                 OUT    VARCHAR2) 
RETURN NUMBER IS
L_INSTALL_BUSY                CHAR(1);
L_TIMEZONE                    VARCHAR2(255);
BEGIN
L_INSTALL_BUSY := '0';
L_TIMEZONE := '';
RETURN ( UNAPIGEN.SETCONNECTION4INSTALL(A_CLIENT_ID          => A_CLIENT_ID,
                                A_US                 => A_US,
                                A_APPLIC             => A_APPLIC,
                                A_NUMERIC_CHARACTERS => A_NUMERIC_CHARACTERS,
                                A_DATE_FORMAT        => A_DATE_FORMAT,
            A_TIMEZONE           => L_TIMEZONE,
                                A_UP                 => A_UP,
                                A_USER_PROFILE       => A_USER_PROFILE,
                                A_LANGUAGE           => A_LANGUAGE,
                                A_TK                 => A_TK,
                                A_INSTALL_BUSY       => L_INSTALL_BUSY));
END SETCONNECTION;                                   


FUNCTION SETCONNECTION
( A_CLIENT_ID          IN     VARCHAR2, 
  A_US                 IN OUT VARCHAR2, 
  A_PASSWORD           IN     VARCHAR2, 
  A_APPLIC             IN     VARCHAR2, 
  A_NUMERIC_CHARACTERS IN OUT VARCHAR2, 
  A_DATE_FORMAT        IN OUT VARCHAR2, 
  A_TIMEZONE           IN     VARCHAR2, 
  A_UP                 OUT    NUMBER,   
  A_USER_PROFILE       OUT    VARCHAR2, 
  A_LANGUAGE           OUT    VARCHAR2, 
  A_TK                 OUT    VARCHAR2) 
RETURN NUMBER IS
L_INSTALL_BUSY                CHAR(1);
L_RET_CODE                    NUMBER;
BEGIN
L_INSTALL_BUSY := '0';

RETURN ( UNAPIGEN.SETCONNECTION4INSTALL(A_CLIENT_ID          => A_CLIENT_ID,
                                A_US                 => A_US,
                                A_APPLIC             => A_APPLIC,
                                A_NUMERIC_CHARACTERS => A_NUMERIC_CHARACTERS,
                                A_DATE_FORMAT        => A_DATE_FORMAT,
            A_TIMEZONE           => A_TIMEZONE,
                                A_UP                 => A_UP,
                                A_USER_PROFILE       => A_USER_PROFILE,
                                A_LANGUAGE           => A_LANGUAGE,
                                A_TK                 => A_TK,
                                A_INSTALL_BUSY       => L_INSTALL_BUSY));
END SETCONNECTION;                                   

FUNCTION SETCONNECTION4INSTALL          
( A_CLIENT_ID          IN     VARCHAR2, 
  A_US                 IN OUT VARCHAR2, 
  A_APPLIC             IN     VARCHAR2, 
  A_NUMERIC_CHARACTERS IN OUT VARCHAR2, 
  A_DATE_FORMAT        IN OUT VARCHAR2, 
  A_UP                 OUT    NUMBER,   
  A_USER_PROFILE       OUT    VARCHAR2, 
  A_LANGUAGE           OUT    VARCHAR2, 
  A_TK                 OUT    VARCHAR2, 
  A_INSTALL_BUSY       IN     CHAR)     
RETURN NUMBER IS
L_TIMEZONE                    VARCHAR2(255);
BEGIN
L_TIMEZONE := '';
RETURN ( UNAPIGEN.SETCONNECTION4INSTALL(A_CLIENT_ID          => A_CLIENT_ID,
                                A_US                 => A_US,
                                A_APPLIC             => A_APPLIC,
                                A_NUMERIC_CHARACTERS => A_NUMERIC_CHARACTERS,
                                A_DATE_FORMAT        => A_DATE_FORMAT,
            A_TIMEZONE           => L_TIMEZONE,
                                A_UP                 => A_UP,
                                A_USER_PROFILE       => A_USER_PROFILE,
                                A_LANGUAGE           => A_LANGUAGE,
                                A_TK                 => A_TK,
                                A_INSTALL_BUSY       => A_INSTALL_BUSY));

END SETCONNECTION4INSTALL;                                   

FUNCTION SETCONNECTION4INSTALL          
( A_CLIENT_ID          IN     VARCHAR2, 
  A_US                 IN OUT VARCHAR2, 
  A_APPLIC             IN     VARCHAR2, 
  A_NUMERIC_CHARACTERS IN OUT VARCHAR2, 
  A_DATE_FORMAT        IN OUT VARCHAR2, 
  A_TIMEZONE           IN     VARCHAR2, 
  A_UP                 OUT    NUMBER,   
  A_USER_PROFILE       OUT    VARCHAR2, 
  A_LANGUAGE           OUT    VARCHAR2, 
  A_TK                 OUT    VARCHAR2, 
  A_INSTALL_BUSY       IN     CHAR)     
RETURN NUMBER IS

L_DEF_TASK                          VARCHAR2(40);
L_LANG                              VARCHAR2(20);
L_LANGUAGE                          VARCHAR2(20);
L_DESCRIPTION                       VARCHAR2(40);
L_SETTING_VALUE                     VARCHAR2(255);
L_UP                                NUMBER(5);
L_DD                                VARCHAR(3);
L_ACTIVE                            CHAR(1);
L_SYS_CURSOR                        INTEGER;
L_DATE_FORMAT                       VARCHAR2(255);
L_MAX_USERS                         NUMBER(4);
L_CURRENT_USERS                     NUMBER(4);
L_LIC_EXPIRED                       CHAR(11);
L_ISDBAUSER                         INTEGER;
L_ISUNILABUSER                      INTEGER;
L_DATE_STRING                       VARCHAR2(30); 
                                                  
                                                  
L_TIMESTAMP_FORMAT                  VARCHAR2(60);
L_DATE_OK                           BOOLEAN;
L_INSIDE_QUOTES                     BOOLEAN;
L_CURR_CHAR                         CHAR(1);
L_BLANK_SEP_POS                     INTEGER;
L_LASTY_FOUND                       BOOLEAN;
L_TEMP_UP                           NUMBER(5);
L_TEMP_US                           VARCHAR2(20);
L_AUDSID_SESSION                    NUMBER;
L_INTERNAL_CODE                     FLOAT;
L_COUNT_CHECK                       INTEGER;
L_CONVERTED_DATE_FORMAT             VARCHAR2(255);
L_NEXT_CHAR                         CHAR(1);
L_CHALLENGE1_OK                     BOOLEAN;
L_CHALLENGE2_OK                     BOOLEAN;
L_CHALLENGE3_OK                     BOOLEAN;
L_TEMP_CLOB                         CLOB;
L_LENGTH_TO_APPEND                  INTEGER;
L_NEXT_POS                          INTEGER;
L_START_POS                         INTEGER;
L_ENTERPRISE_USER                   VARCHAR2(255);
L_CHECK_ENT_USER                    INTEGER;


L_APP_ID_TAB                     CXSAPILK.VC20_TABLE_TYPE;
L_APP_VERSION_TAB                CXSAPILK.VC20_TABLE_TYPE;
L_APP_CUSTOM_PARAM_TAB           CXSAPILK.VC20_TABLE_TYPE;
L_LIC_CHECK_OK_4_APP_TAB         CXSAPILK.NUM_TABLE_TYPE;
L_MAX_USERS_4_APP_TAB            CXSAPILK.NUM_TABLE_TYPE;
L_NR_OF_ROWS                     NUMBER;
L_ERROR_MESSAGE                  VARCHAR2(255);
L_TEST_LIC_AVAILABLE             BOOLEAN;
L_OPERATIONAL_LIC_AVAILABLE      BOOLEAN;
L_MAIN_ORA_VERSION               VARCHAR2(20);
L_COUNTIF_GLOBAL_SHARED_USER     NUMBER;

CURSOR C_UTAD(A_US VARCHAR2) IS
   SELECT DEF_UP, ACTIVE
   FROM UTAD
   WHERE AD = A_US
     AND IS_USER IN ('1', '2')
   ORDER BY AD;

CURSOR C_SEARCHUTAD IS
   SELECT AD
   FROM UTAD
   WHERE AD = USER
     AND IS_USER IN ('1', '2');
   
BEGIN
   
   L_RET_CODE := UNDATEFMT.CONVERTTIMEZONE(A_TIMEZONE);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
      RETURN (L_RET_CODE);
   END IF;
   
   
   
   
   EXECUTE IMMEDIATE 'ALTER SESSION SET error_on_overlap_time = FALSE';
   
   

   P_CLIENT_ID := SUBSTR(A_CLIENT_ID,1,20);
    
   UNAPILK.UNAPILK := SUBSTR(A_CLIENT_ID,1,20);
   IF A_CLIENT_ID IS NULL THEN
      SELECT DECODE(SIGN(LENGTH( SYS.STANDARD.USERENV('SESSIONID'))-8),
                    1, SUBSTR( SYS.STANDARD.USERENV('SESSIONID'),-8),
                     SYS.STANDARD.USERENV('SESSIONID'))
      INTO P_CLIENT_ID
      FROM DUAL;
      UNAPILK.UNAPILK := P_CLIENT_ID;
   END IF;
   P_EVMGR_NAME := 'U4EVMGR';
   P_APPLIC_NAME := SUBSTR(A_APPLIC,1,8);
   
   
   
   
   SELECT SUBSTR(VERSION, 1, INSTR(VERSION,'.')-1) ORA_MAIN_VERSION
   INTO L_MAIN_ORA_VERSION 
   FROM V$INSTANCE;
   IF L_MAIN_ORA_VERSION = '10' THEN 
      SELECT COUNT('X')
      INTO L_COUNTIF_GLOBAL_SHARED_USER
      FROM SYS.DBA_USERS
      WHERE USERNAME = USER
      AND PASSWORD='GLOBAL'
      AND EXTERNAL_NAME IS NULL;
      
      IF L_COUNTIF_GLOBAL_SHARED_USER > 0 THEN
         SELECT REGEXP_REPLACE(SYS_CONTEXT('USERENV', 'EXTERNAL_NAME'), P_ORA10_REXEXP_PATTERN, P_ORA10_REXEXP_REPLACE)
         INTO L_ENTERPRISE_USER
         FROM DUAL;
         
         IF L_ENTERPRISE_USER IS NULL THEN
            SELECT SUBSTR(SYS_CONTEXT('USERENV', 'EXTERNAL_NAME'),1,30)
            INTO L_ENTERPRISE_USER
            FROM DUAL;
         END IF;
         IF L_ENTERPRISE_USER IS NULL THEN
            L_SQLERRM := 'Impossible to determine the user alias for enterprise user';
            RAISE STPERROR;
         END IF;
      END IF;                     
   ELSE 
      SELECT COUNT('X')
      INTO L_COUNTIF_GLOBAL_SHARED_USER
      FROM SYS.DBA_USERS
      WHERE USERNAME = USER
      AND PASSWORD='GLOBAL'
      AND EXTERNAL_NAME IS NULL;
      
      IF L_COUNTIF_GLOBAL_SHARED_USER > 0 THEN
         IF USER <> SYS_CONTEXT('USERENV', 'AUTHENTICATED_IDENTITY') THEN
            L_ENTERPRISE_USER := SYS_CONTEXT('USERENV', 'AUTHENTICATED_IDENTITY');
         ELSE
            L_ENTERPRISE_USER := NULL;
         END IF;
      ELSE
         L_ENTERPRISE_USER := NULL;
      END IF;
   END IF;
   IF TRIM(A_US) IS NULL THEN
      IF USER LIKE UNAPIGEN.P_ENTERPRISE_USER_PREFIX||'%' AND
         SUBSTR(L_ENTERPRISE_USER,1,20) IS NOT NULL THEN
         
         A_US := SUBSTR(L_ENTERPRISE_USER,1,20);
      ELSE
         
         
         OPEN C_SEARCHUTAD;
         FETCH C_SEARCHUTAD
         INTO A_US;
         IF C_SEARCHUTAD%NOTFOUND THEN
            CLOSE C_SEARCHUTAD;
            RETURN(DBERR_INVALIDUSER);      
         END IF;
         CLOSE C_SEARCHUTAD;      
      END IF;
   END IF;
   P_USER := A_US;

   IF P_DBA_NAME IS NULL THEN 
      OPEN C_SYSTEM ('DBA_NAME');
      FETCH C_SYSTEM INTO P_DBA_NAME;
      IF C_SYSTEM%NOTFOUND THEN
         CLOSE C_SYSTEM;
         RETURN (DBERR_SYSDEFAULTS);
      END IF;
      CLOSE C_SYSTEM;
   END IF;

   L_ISDBAUSER := ISEXTERNALDBAUSER;
   IF L_ISDBAUSER <> UNAPIGEN.DBERR_SUCCESS THEN
      
      
      L_TEMP_UP := NULL;
      L_TEMP_US := NULL;
      IF A_US = P_DBA_NAME THEN
         
         
         
         
         
         
         
         
         
         SELECT SYS.STANDARD.USERENV('SESSIONID')
         INTO L_AUDSID_SESSION
         FROM DUAL;
         IF L_AUDSID_SESSION <> 0 AND NVL(A_APPLIC, ' ') NOT IN ('Unilink', 'CLEVTMGR') THEN
            RETURN(DBERR_INVALIDUSER);      
         END IF;
         
      ELSIF A_US <> USER THEN
         IF USER LIKE P_ENTERPRISE_USER_PREFIX||'%' AND
            SUBSTR(L_ENTERPRISE_USER,1,20) IS NOT NULL THEN
            
            
            IF SUBSTR(A_US,1,20) <> NVL(SUBSTR(L_ENTERPRISE_USER,1,20) ,'$') THEN
               IF NVL(A_APPLIC, ' ') NOT IN ('Unilink', 'CLEVTMGR') THEN
                  RETURN(DBERR_INVALIDUSER);      
               END IF;
            END IF;
         ELSE
            IF NVL(A_APPLIC, ' ') NOT IN ('Unilink', 'CLEVTMGR') THEN
               RETURN(DBERR_INVALIDUSER);      
            END IF;
         END IF;
      END IF;
   ELSE
      
      IF (A_US <> USER AND A_US <> P_DBA_NAME AND A_US <> NVL(SUBSTR(L_ENTERPRISE_USER,1,20) ,'$')) THEN         
         IF NVL(A_APPLIC, ' ') NOT IN ('Unilink', 'CLEVTMGR') THEN
            RETURN(DBERR_INVALIDUSER);      
         ELSE
            
            
            NULL;
         END IF;
      END IF;
      
      IF (UPPER(A_US) = UPPER(P_DBA_NAME) AND A_US <> P_DBA_NAME) THEN
         RETURN(DBERR_INVALIDUSER);      
      END IF;      
   END IF;

   L_ISUNILABUSER := UNAPIGEN.DBERR_NOOBJECT;
   
   OPEN C_UTAD(A_US);
   FETCH C_UTAD
   INTO L_UP, L_ACTIVE;

   IF C_UTAD%FOUND THEN
      L_ISUNILABUSER := UNAPIGEN.DBERR_SUCCESS;
      IF L_ENTERPRISE_USER IS NOT NULL THEN
         BEGIN
            L_UP := TO_NUMBER(REPLACE(USER, P_ENTERPRISE_USER_PREFIX, ''));
            L_ACTIVE := '1';
         EXCEPTION
         WHEN OTHERS THEN
            L_SQLERRM := 'Impossible to derive the user profile number from the shared schema name:'||USER;
            RAISE STPERROR;
         END;
      END IF;
   ELSE
      IF L_ISDBAUSER <> UNAPIGEN.DBERR_SUCCESS THEN 
         IF L_ENTERPRISE_USER IS NULL THEN
            CLOSE C_UTAD;
            RETURN(DBERR_INVALIDUSER);
         ELSE
            
            BEGIN
               L_UP := TO_NUMBER(REPLACE(USER, P_ENTERPRISE_USER_PREFIX, ''));
               L_ACTIVE := '1';
            EXCEPTION
            WHEN OTHERS THEN
               L_SQLERRM := 'Impossible to derive the user profile number from the shared schema name:'||USER;
               RAISE STPERROR;
            END;
         END IF;
      ELSE
         CLOSE C_UTAD;
         
         
         OPEN C_UTAD(P_DBA_NAME);
         FETCH C_UTAD
         INTO L_UP, L_ACTIVE;
      END IF;
   END IF;
   CLOSE C_UTAD;
      
   
   BEGIN
      SELECT NVL(PERSON, AD)
      INTO P_USER_DESCRIPTION
      FROM UTAD
      WHERE AD = P_USER
      AND VERSION_IS_CURRENT = '1';
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      IF L_ENTERPRISE_USER IS NULL THEN
         RETURN (UNAPIGEN.DBERR_NOCURRENTADVERSION);
      ELSE
         P_USER_DESCRIPTION := SUBSTR(L_ENTERPRISE_USER,1,40);
      END IF;
   END;

   
   
   IF NVL(L_ACTIVE, '0') <> '1' AND
      A_US <> P_DBA_NAME AND
      L_ISDBAUSER <> UNAPIGEN.DBERR_SUCCESS AND 
      NVL(A_APPLIC, ' ') NOT IN ('addef', 'updef') THEN
      RETURN(DBERR_USERNOTACTIVE);
   END IF;
   
   BEGIN
      SELECT DD
      INTO L_DD
      FROM UTUP
      WHERE UP = L_UP ;
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      RETURN(DBERR_INVALIDUP);
   END;

   OPEN C_UTDBA ('DATADOMAINS');
   FETCH C_UTDBA INTO L_SETTING_VALUE;
   IF C_UTDBA%NOTFOUND THEN
      CLOSE C_UTDBA;
      RETURN (DBERR_SYSDEFAULTS);
   END IF;
   CLOSE C_UTDBA;
   P_DATADOMAINS := L_SETTING_VALUE;
      
   IF NVL(TO_NUMBER(L_DD),-1) < 0 OR
      NVL(TO_NUMBER(L_DD),-1) > P_DATADOMAINS THEN
      RETURN(DBERR_INVALIDDD);
   END IF;
   P_CURRENT_UP := L_UP;
   P_DD := L_DD;     

   BEGIN
      SELECT LANGUAGE, DESCRIPTION, ACTIVE
      INTO L_LANGUAGE, L_DESCRIPTION, L_ACTIVE
      FROM UTUP
      WHERE UP = L_UP;
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      RETURN(DBERR_INVALIDUP);
   END;

   
   
   IF NVL(L_ACTIVE, '0') <> '1' AND
      A_US <> P_DBA_NAME AND 
      L_ISDBAUSER <> UNAPIGEN.DBERR_SUCCESS AND
      NVL(A_APPLIC, ' ') NOT IN ('addef', 'updef') THEN
      RETURN(DBERR_UPNOTACTIVE);
   END IF;

   A_LANGUAGE := L_LANGUAGE;
   A_USER_PROFILE := L_DESCRIPTION;
   A_UP := L_UP;

   OPEN C_SYSTEM ('LOG_EV');
   FETCH C_SYSTEM INTO L_SETTING_VALUE;
   IF C_SYSTEM%NOTFOUND THEN
      CLOSE C_SYSTEM;
      RETURN (DBERR_SYSDEFAULTS);
   END IF;
   CLOSE C_SYSTEM;
   IF L_SETTING_VALUE = '1' THEN
      P_LOG_EV := TRUE;
   ELSE
      P_LOG_EV := FALSE;
   END IF;

   OPEN C_SYSTEM ('LOG_LC_ACTIONS');
   FETCH C_SYSTEM INTO L_SETTING_VALUE;
   IF C_SYSTEM%NOTFOUND THEN
      CLOSE C_SYSTEM;
      RETURN (DBERR_SYSDEFAULTS);
   END IF;
   CLOSE C_SYSTEM;
   IF L_SETTING_VALUE = '1' THEN
      P_LOG_LC_ACTIONS := TRUE;
   ELSE
      P_LOG_LC_ACTIONS := FALSE;
   END IF;

   OPEN C_SYSTEM ('DEFAULT_FORMAT');
   FETCH C_SYSTEM INTO L_SETTING_VALUE;
   IF C_SYSTEM%NOTFOUND THEN
      CLOSE C_SYSTEM;
      RETURN (DBERR_SYSDEFAULTS);
   END IF;
   CLOSE C_SYSTEM;
   P_DEFAULT_FORMAT := L_SETTING_VALUE;

   OPEN C_SYSTEM ('UC_KEEPTRYINGTIMEOUT');
   FETCH C_SYSTEM INTO L_SETTING_VALUE;
   IF C_SYSTEM%NOTFOUND THEN
      CLOSE C_SYSTEM;
      RETURN (DBERR_SYSDEFAULTS);
   END IF;
   CLOSE C_SYSTEM;
   P_UC_TIMEOUT := L_SETTING_VALUE;

   OPEN C_SYSTEM ('JOBS_DATE_FORMAT');
   FETCH C_SYSTEM INTO L_SETTING_VALUE;
   IF C_SYSTEM%NOTFOUND THEN
      CLOSE C_SYSTEM;
      RETURN (DBERR_SYSDEFAULTS);
   END IF;
   CLOSE C_SYSTEM;
   P_JOBS_DATE_FORMAT := L_SETTING_VALUE;

   OPEN C_SYSTEM ('JOBS_TSLTZ_FORMAT');
   FETCH C_SYSTEM INTO L_SETTING_VALUE;
   IF C_SYSTEM%NOTFOUND THEN
      CLOSE C_SYSTEM;
      RETURN (DBERR_SYSDEFAULTS);
   END IF;
   CLOSE C_SYSTEM;
   P_JOBS_TSLTZ_FORMAT := L_SETTING_VALUE;

   OPEN C_SYSTEM ('JOBS_TSTZ_FORMAT');
   FETCH C_SYSTEM INTO L_SETTING_VALUE;
   IF C_SYSTEM%NOTFOUND THEN
      CLOSE C_SYSTEM;
      RETURN (DBERR_SYSDEFAULTS);
   END IF;
   CLOSE C_SYSTEM;
   P_JOBS_TSTZ_FORMAT := L_SETTING_VALUE;

   OPEN C_SYSTEM ('LABEL_SPECA');
   FETCH C_SYSTEM INTO L_SETTING_VALUE;
   IF C_SYSTEM%NOTFOUND THEN
      CLOSE C_SYSTEM;
      RETURN (DBERR_SYSDEFAULTS);
   END IF;
   CLOSE C_SYSTEM;
   P_SPEC_SETA_LABEL := SUBSTR(L_SETTING_VALUE, 1, 40);

   OPEN C_SYSTEM ('LABEL_SPECB');
   FETCH C_SYSTEM INTO L_SETTING_VALUE;
   IF C_SYSTEM%NOTFOUND THEN
      CLOSE C_SYSTEM;
      RETURN (DBERR_SYSDEFAULTS);
   END IF;
   CLOSE C_SYSTEM;
   P_SPEC_SETB_LABEL := SUBSTR(L_SETTING_VALUE, 1, 40);

   OPEN C_SYSTEM ('LABEL_SPECC');
   FETCH C_SYSTEM INTO L_SETTING_VALUE;
   IF C_SYSTEM%NOTFOUND THEN
      CLOSE C_SYSTEM;
      RETURN (DBERR_SYSDEFAULTS);
   END IF;
   CLOSE C_SYSTEM;
   P_SPEC_SETC_LABEL := SUBSTR(L_SETTING_VALUE, 1, 40);

   OPEN UNAPIEV.C_EVENT_MANAGER_SETTINGS;
   FETCH UNAPIEV.C_EVENT_MANAGER_SETTINGS
   INTO UNAPIEV.P_EVMGRS_EV_IN_BULK, UNAPIEV.P_EVMGRS_POLLING_ON,
        UNAPIEV.P_EVMGRS_POLLINGINTERV, UNAPIEV.P_EVMGRS_1QBYINSTANCE,
        UNAPIEV.P_EVMGRS_COLLECTSTAT, UNAPIGEN.P_INSTANCENR;
   CLOSE UNAPIEV.C_EVENT_MANAGER_SETTINGS;
   
   
   
   IF A_INSTALL_BUSY = '0' THEN
      
      L_APP_ID_TAB(1)            := 'IULC';
      L_APP_VERSION_TAB(1)       := '0607';
      L_APP_CUSTOM_PARAM_TAB(1)  := 'U0';
      L_APP_ID_TAB(2)            := 'IULS'; 
      L_APP_VERSION_TAB(2)       := '0607';
      L_APP_CUSTOM_PARAM_TAB(2)  := 'U0';
      L_APP_ID_TAB(3)            := 'IULS'; 
      L_APP_VERSION_TAB(3)       := '0607';
      L_APP_CUSTOM_PARAM_TAB(3)  := 'A0';
      L_APP_ID_TAB(4)            := 'IULS'; 
      L_APP_VERSION_TAB(4)       := '0607';
      L_APP_CUSTOM_PARAM_TAB(4)  := 'T3';
      L_APP_ID_TAB(5)            := 'RULS'; 
      L_APP_VERSION_TAB(5)       := '0607';
      L_APP_CUSTOM_PARAM_TAB(5)  := 'U0';
      L_APP_ID_TAB(6)            := 'RULS'; 
      L_APP_VERSION_TAB(6)       := '0607';
      L_APP_CUSTOM_PARAM_TAB(6)  := 'A0';
      L_APP_ID_TAB(7)            := 'RULS'; 
      L_APP_VERSION_TAB(7)       := '0607';
      L_APP_CUSTOM_PARAM_TAB(7)  := 'T3';
      L_NR_OF_ROWS               := 7;   
      L_RET_CODE := CXSAPILK.CHECKLICENSE( L_APP_ID_TAB,
                                           L_APP_VERSION_TAB,
                                           L_APP_CUSTOM_PARAM_TAB,
                                           L_LIC_CHECK_OK_4_APP_TAB,
                                           L_MAX_USERS_4_APP_TAB,
                                           L_NR_OF_ROWS,
                                           L_ERROR_MESSAGE);
      IF L_RET_CODE NOT IN (UNAPIGEN.DBERR_SUCCESS, CXSAPILK.DBERR_OK_NO_ALM) THEN
         RETURN (L_RET_CODE);
      END IF;
      
      
      L_OPERATIONAL_LIC_AVAILABLE := FALSE;
      L_TEST_LIC_AVAILABLE := FALSE;
      FOR L_ROW IN 2..L_NR_OF_ROWS LOOP
         IF L_ROW IN (2,3,5,6) THEN
            IF L_LIC_CHECK_OK_4_APP_TAB(L_ROW) = UNAPIGEN.DBERR_SUCCESS THEN
               L_OPERATIONAL_LIC_AVAILABLE := TRUE;
            END IF;
         ELSIF L_ROW IN (4,7) THEN
            IF L_LIC_CHECK_OK_4_APP_TAB(L_ROW) = UNAPIGEN.DBERR_SUCCESS THEN
               L_TEST_LIC_AVAILABLE := TRUE;
            END IF;
         END IF;
      END LOOP;
      
      IF L_OPERATIONAL_LIC_AVAILABLE = FALSE THEN
         IF L_TEST_LIC_AVAILABLE THEN
            P_MAX_SAMPLES := 5000;
         ELSE
            P_MAX_SAMPLES := 0;            
         END IF;
      ELSE
         P_MAX_SAMPLES := -1;            
      END IF;
   END IF;

   L_SYS_CURSOR := DBMS_SQL.OPEN_CURSOR;

   
   
   
   
   
   
   SELECT SYS.STANDARD.CONVERT(A_NUMERIC_CHARACTERS,'US7ASCII')
   INTO A_NUMERIC_CHARACTERS
   FROM DUAL;
      
   
   IF A_NUMERIC_CHARACTERS <> 'DB' THEN
      L_SQL_STRING := 'ALTER SESSION SET NLS_NUMERIC_CHARACTERS = ''' || REPLACE(A_NUMERIC_CHARACTERS,'''', '''''') || '''';
      BEGIN
         DBMS_SQL.PARSE(L_SYS_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         L_RESULT := DBMS_SQL.EXECUTE(L_SYS_CURSOR);
      EXCEPTION
      WHEN OTHERS THEN
         L_SQLERRM := SQLERRM;
         L_SQLERRM2 := 'Invalid numeric characters: ' || A_NUMERIC_CHARACTERS;
         RAISE STPERROR;
      END;
   END IF;

   SELECT SUBSTR (VALUE,1,2)
   INTO A_NUMERIC_CHARACTERS
   FROM V$NLS_PARAMETERS
   WHERE PARAMETER='NLS_NUMERIC_CHARACTERS';

   
   
   
   L_DATE_FORMAT := RTRIM(A_DATE_FORMAT);
   IF L_DATE_FORMAT <> 'SERVER' THEN

      
      
      L_CONVERTED_DATE_FORMAT := '';
      L_INSIDE_QUOTES := FALSE;
      FOR L_X IN 1..LENGTH(L_DATE_FORMAT) LOOP
         L_NEXT_CHAR := SUBSTR(L_DATE_FORMAT, L_X, 1);
         IF L_NEXT_CHAR = '''' THEN
            L_INSIDE_QUOTES := NOT (L_INSIDE_QUOTES);
            L_CONVERTED_DATE_FORMAT := L_CONVERTED_DATE_FORMAT || '''';
         ELSE
            IF L_INSIDE_QUOTES THEN
               
               L_CONVERTED_DATE_FORMAT := L_CONVERTED_DATE_FORMAT || L_NEXT_CHAR;
            ELSE
               
               L_CONVERTED_DATE_FORMAT := L_CONVERTED_DATE_FORMAT || CONVERT(L_NEXT_CHAR,'US7ASCII');
            END IF;
         END IF;  
      END LOOP;
      L_DATE_FORMAT := L_CONVERTED_DATE_FORMAT;
      
      
      BEGIN         
         SELECT TO_CHAR(TO_TIMESTAMP_TZ(TO_CHAR(CURRENT_TIMESTAMP, L_DATE_FORMAT), L_DATE_FORMAT), L_DATE_FORMAT)
         INTO L_DATE_STRING
         FROM DUAL;
         L_DATE_OK := TRUE;
      EXCEPTION
      WHEN OTHERS THEN
         L_DATE_OK := FALSE;         
      END;

      IF NOT L_DATE_OK THEN
         
         L_SQLERRM2 := 'DateValStep1 - Provided date format was :'||A_DATE_FORMAT || ' is not a valid Oracle date format' ||
                       ',OR is too long OR is a windows date format that can not be converted to an Oracle format.';
         L_RET_CODE := UNDATEFMT.CONVERTDATEFMT(L_DATE_FORMAT);
         IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
            RAISE STPERROR;
         END IF;
         
         L_SQLERRM2 := NULL;         
      END IF;
      
      L_SQL_STRING :=
            'ALTER SESSION SET NLS_DATE_FORMAT = ''' ||
             L_DATE_FORMAT || '''';

      BEGIN
         DBMS_SQL.PARSE(L_SYS_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         L_RESULT := DBMS_SQL.EXECUTE(L_SYS_CURSOR);
         A_DATE_FORMAT := L_DATE_FORMAT;
      EXCEPTION
      WHEN OTHERS THEN
         L_SQLERRM := SQLERRM;
         L_SQLERRM2 := 'DateValStep2 - Provided date format was :'||A_DATE_FORMAT || ' is not a valid Oracle date format ' ||
                       ',OR is too long OR is a windows date format that can not be converted to an Oracle format. Result of transformation was:'||L_DATE_FORMAT;
         RAISE STPERROR;
      END;

   
      L_SQL_STRING :=
            'ALTER SESSION SET NLS_TIMESTAMP_TZ_FORMAT = ''' ||
             L_DATE_FORMAT || '''';

      BEGIN
         DBMS_SQL.PARSE(L_SYS_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         L_RESULT := DBMS_SQL.EXECUTE(L_SYS_CURSOR);
         A_DATE_FORMAT := L_DATE_FORMAT;
      EXCEPTION
      WHEN OTHERS THEN
         L_SQLERRM := SQLERRM;
         L_SQLERRM2 := 'DateValStep3 - Provided date format was :'||A_DATE_FORMAT || ' is not a valid Oracle TIMESTAMP TZ format ' ||
                       ',OR is too long OR is a windows date format that can not be converted to an Oracle format. Result of transformation was:'||L_DATE_FORMAT;
         RAISE STPERROR;
      END;

   
      L_SQL_STRING :=
            'ALTER SESSION SET NLS_TIMESTAMP_FORMAT = ''' ||
             L_DATE_FORMAT || '''';

      BEGIN
         DBMS_SQL.PARSE(L_SYS_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         L_RESULT := DBMS_SQL.EXECUTE(L_SYS_CURSOR);
         A_DATE_FORMAT := L_DATE_FORMAT;
      EXCEPTION
      WHEN OTHERS THEN
         L_SQLERRM := SQLERRM;
         L_SQLERRM2 := 'DateValStep4 - Provided date format was :'||A_DATE_FORMAT || ' is not a valid Oracle TIMESTAMP TZ format ' ||
                       ',OR is too long OR is a windows date format that can not be converted to an Oracle format. Result of transformation was:'||L_DATE_FORMAT;
         RAISE STPERROR;
      END;

   ELSE
      SELECT VALUE
      INTO L_DATE_FORMAT
      FROM V$NLS_PARAMETERS
      WHERE PARAMETER='NLS_DATE_FORMAT';
      A_DATE_FORMAT := L_DATE_FORMAT;
      
      
      
      
      BEGIN         
         SELECT TO_TIMESTAMP_TZ(TO_CHAR(CURRENT_TIMESTAMP))
         INTO L_DATE_STRING
         FROM DUAL;
      EXCEPTION
      WHEN OTHERS THEN
         BEGIN
            SELECT VALUE
            INTO L_TIMESTAMP_FORMAT
            FROM V$NLS_PARAMETERS
            WHERE PARAMETER='NLS_TIMESTAMP_TZ_FORMAT';
         EXCEPTION
         WHEN OTHERS THEN
           L_TIMESTAMP_FORMAT := 'unable to fetch format from environment';
         END;
         L_SQLERRM2 := 'DateValStep10 - The NLS_TIMESTAMP_TZ_FORMAT specified in the environment is too long:'||L_TIMESTAMP_FORMAT;
         RAISE STPERROR;
      END;
   END IF;

   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   L_SQL_STRING := 'BEGIN NULL; END;';
   DBMS_SQL.PARSE(L_SYS_CURSOR, L_SQL_STRING, DBMS_SQL.V7);
   L_RESULT := DBMS_SQL.EXECUTE(L_SYS_CURSOR); 

   DBMS_SQL.CLOSE_CURSOR(L_SYS_CURSOR);

   
   IF L_ENTERPRISE_USER IS NOT NULL THEN
      SELECT COUNT('X')
      INTO L_CHECK_ENT_USER
      FROM UTUPUS
      WHERE UP = P_CURRENT_UP
      AND UP = (SELECT DEF_UP FROM UTAD WHERE AD=UNAPIGEN.P_USER)
      AND US = UNAPIGEN.P_USER;
      IF L_CHECK_ENT_USER = 0 THEN

         L_RET_CODE := UNAPIUP.ADDONEENTERPRISEUSER(P_CURRENT_UP, P_USER, P_USER_DESCRIPTION);
         IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
            
            LOGERROR('SetConnection', 'AddOneEnterpriseUser failed. ret_code='||L_RET_CODE||'#us='||P_USER||'#up='||P_CURRENT_UP);
            U4COMMIT;
         END IF;         
         L_ISUNILABUSER := UNAPIGEN.DBERR_SUCCESS;
      END IF;
   END IF;

   IF L_ISUNILABUSER = UNAPIGEN.DBERR_SUCCESS THEN
      L_RESULT := SETUSUSERPROFILE(L_UP, A_US, L_DEF_TASK, L_LANG);
   ELSE
      L_RESULT := SETUSUSERPROFILE(L_UP, P_DBA_NAME, L_DEF_TASK, L_LANG);
   END IF;
   IF L_RESULT <> 0 THEN
      RETURN (L_RESULT);
   END IF;
   A_TK := SUBSTR(L_DEF_TASK,1,20);
   P_TK := SUBSTR(L_DEF_TASK,1,20);

   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   IF INSTR(L_DATE_FORMAT,' ') = 0 THEN
      P_DATEFORMAT := L_DATE_FORMAT;
      P_TIMEFORMAT := NULL;
   ELSE
      
      L_INSIDE_QUOTES := FALSE;
      L_LASTY_FOUND := FALSE;
      L_BLANK_SEP_POS := 0;
      FOR L_X IN REVERSE 1..LENGTH(L_DATE_FORMAT) LOOP
         L_CURR_CHAR := SUBSTR(L_DATE_FORMAT, L_X, 1);
         IF L_CURR_CHAR = '"' THEN
               L_INSIDE_QUOTES := NOT L_INSIDE_QUOTES;
         ELSIF L_CURR_CHAR=' ' THEN
            IF NOT L_INSIDE_QUOTES THEN
               L_BLANK_SEP_POS := L_X;
            END IF;
         ELSIF UPPER(L_CURR_CHAR) IN ('Y', 'R') THEN
            IF NOT L_INSIDE_QUOTES THEN
               L_LASTY_FOUND := TRUE;
               EXIT;
            END IF;
         END IF;
      END LOOP;
      IF L_BLANK_SEP_POS > 0 AND L_LASTY_FOUND THEN
         P_DATEFORMAT := SUBSTR(L_DATE_FORMAT, 1, L_BLANK_SEP_POS-1);
         P_TIMEFORMAT := SUBSTR(L_DATE_FORMAT, L_BLANK_SEP_POS+1 );
      ELSE
         P_DATEFORMAT := L_DATE_FORMAT;
         P_TIMEFORMAT := NULL;
      END IF;
   END IF;

   
   IF A_INSTALL_BUSY = '0' THEN
      L_RET_CODE := UNAPIEV.ISEVENTMANAGERRUNNING(UNAPIGEN.P_EVMGR_NAME);
      IF L_RET_CODE <> 0 THEN
         RETURN (L_RET_CODE);
      END IF;
   END IF;

   
   
   L_RET_CODE := UNAPILK.GETINTERNALCODE(L_INTERNAL_CODE);
   IF L_INTERNAL_CODE <> (L_CHECK_CODE) THEN 
      L_SQLERRM := 'The UNAPILK package is not the correct one !';
      RAISE STPERROR;
   END IF;
   
   
   SELECT COUNT('X')
   INTO L_COUNT_CHECK
   FROM SYS.DBA_OBJECTS
   WHERE OBJECT_NAME = 'CTLICUSERCNT'
   AND OBJECT_TYPE='TABLE';   
   
   IF L_COUNT_CHECK=0 THEN
      L_SQLERRM := 'The table CTLICUSERCNT is not installed as a table !';
      RAISE STPERROR;
   END IF;
   
   SELECT COUNT('X')
   INTO L_COUNT_CHECK
   FROM SYS.TRIGGER$ T 
   WHERE T.BASEOBJECT = (SELECT OBJECT_ID 
                         FROM USER_OBJECTS 
                         WHERE OBJECT_NAME='CTLICUSERCNT'
                               AND OBJECT_TYPE <> 'SYNONYM');
   IF L_COUNT_CHECK>0 THEN
      L_SQLERRM := 'No triggers may be defined on table CTLICUSERCNT!';
      RAISE STPERROR;
   END IF;   
   
   
   
   
   
   
   
   
   
   
   
   
   BEGIN
      DBMS_APPLICATION_INFO.SET_MODULE ( A_APPLIC, NULL);
   EXCEPTION
   WHEN OTHERS THEN 
      
      NULL;
   END;
   
   
   SETPPKEYSCONTEXT;
   
   RETURN DBERR_SUCCESS;

EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE <> 1 THEN
         L_SQLERRM := SQLERRM;
      END IF;
      U4ROLLBACK;
      IF L_SQLERRM IS NOT NULL THEN
         INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
         VALUES (P_CLIENT_ID, P_APPLIC_NAME, NVL(UNAPIGEN.P_USER,USER), CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                 'SetConnection', L_SQLERRM);
      END IF;
      IF L_SQLERRM2 IS NOT NULL THEN
         INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
         VALUES (P_CLIENT_ID, P_APPLIC_NAME, NVL(UNAPIGEN.P_USER,USER), CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                 'SetConnection', L_SQLERRM2);
      END IF;
      U4COMMIT;
      IF C_SYSTEM%ISOPEN THEN
         CLOSE C_SYSTEM;
      END IF;
      IF C_UTAD%ISOPEN THEN
         CLOSE C_UTAD;
      END IF;
      IF C_UTDBA%ISOPEN THEN
         CLOSE C_UTDBA;
      END IF;
      IF C_SEARCHUTAD%ISOPEN THEN
         CLOSE C_SEARCHUTAD;
      END IF;
      IF DBMS_SQL.IS_OPEN(L_SYS_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(L_SYS_CURSOR);
      END IF;
      IF L_SQLERRM2 IS NULL THEN
         RETURN(DBERR_GENFAIL);
      ELSE
         RETURN(DBERR_INVALIDDATEFORMAT);
      END IF;
END SETCONNECTION4INSTALL;

FUNCTION ISUSERAUTHORISED
(A_UP                 IN OUT   VARCHAR2, 
 A_US                 IN OUT   VARCHAR2, 
 A_APPLIC             IN       VARCHAR2, 
 A_TOPIC              IN       VARCHAR2) 
RETURN NUMBER IS


CURSOR L_FA_CURSOR IS
   SELECT A.UP, A.US, A.APPLIC, B.DESCRIPTION, B.SEQ, A.TOPIC, B.TOPIC_DESCRIPTION, A.FA, A.INHERIT_FA
   FROM UTUPUSFA A, UTFA B
   WHERE A.APPLIC = B.APPLIC
     AND A.TOPIC = B.TOPIC
     AND A.UP = A_UP
     AND A.US = A_US
     AND A.APPLIC = A_APPLIC
     AND A.TOPIC = A_TOPIC
   UNION
   SELECT A.UP, C.US, A.APPLIC, B.DESCRIPTION, B.SEQ, A.TOPIC, B.TOPIC_DESCRIPTION, A.FA, '1'
   FROM UTUPFA A, UTFA B, UTUPUS C
   WHERE A.APPLIC = B.APPLIC
     AND A.TOPIC = B.TOPIC
     AND A.VERSION = C.VERSION
     AND A.UP = C.UP
     AND A.UP = A_UP
     AND C.US = A_US
     AND A.APPLIC = A_APPLIC
     AND A.TOPIC = A_TOPIC
     AND (A.APPLIC, A.TOPIC) NOT IN (SELECT APPLIC,TOPIC
                                     FROM UTUPUSFA
                                     WHERE VERSION = C.VERSION
                                       AND UP = C.UP
                                       AND US_VERSION = C.US_VERSION
                                       AND US = C.US)
   UNION 
   SELECT C.UP, C.US, B.APPLIC, B.DESCRIPTION, B.SEQ, B.TOPIC, B.TOPIC_DESCRIPTION, B.FA, '1'
   FROM UTFA B, UTUPUS C
   WHERE (B.APPLIC, B.TOPIC) NOT IN (SELECT APPLIC, TOPIC
                                     FROM UTUPUSFA
                                     WHERE VERSION = C.VERSION
                                       AND UP = C.UP
                                       AND US_VERSION = C.US_VERSION
                                       AND US = C.US
                                     UNION
                                     SELECT APPLIC, TOPIC
                                     FROM UTUPFA
                                     WHERE VERSION = C.VERSION
                                       AND UP = C.UP)
     AND C.UP = A_UP
     AND C.US = A_US
     AND B.APPLIC = A_APPLIC
     AND B.TOPIC = A_TOPIC;
L_FA_REC    L_FA_CURSOR%ROWTYPE;                                            
                                            
BEGIN
   
   
   IF A_US IS NULL THEN
      BEGIN
         SELECT AD, DEF_UP
         INTO A_US, A_UP
         FROM UTAD
         WHERE AD = USER;
      EXCEPTION
      WHEN TOO_MANY_ROWS THEN
         UNAPIAUT.P_NOT_AUTHORISED := 'Too many users with the same id for user='||USER||'. Can not check func access rights for startstopjobs.';
         RETURN(UNAPIGEN.DBERR_NOTAUTHORISED);
      WHEN NO_DATA_FOUND THEN
         UNAPIAUT.P_NOT_AUTHORISED := 'User '||USER||' is not a Unilab user.';
         RETURN(UNAPIGEN.DBERR_NOTAUTHORISED);
       END;
   ELSIF A_UP IS NULL THEN
      BEGIN
         SELECT DEF_UP
         INTO A_UP
         FROM UTAD
         WHERE AD = A_US;
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
         UNAPIAUT.P_NOT_AUTHORISED := 'User '||A_US||' is not a Unilab user.';
         RETURN(UNAPIGEN.DBERR_NOTAUTHORISED);
      END;
   END IF;
   IF A_APPLIC IS NULL OR
      A_TOPIC IS NULL THEN
      UNAPIAUT.P_NOT_AUTHORISED := 'Missing id for func access right request.up='||A_UP||'#us='||A_US||'#applic='||A_APPLIC||'#topic='||A_TOPIC;
      RETURN(UNAPIGEN.DBERR_NOTAUTHORISED);
   END IF;
  
   OPEN L_FA_CURSOR;
   FETCH L_FA_CURSOR
   INTO L_FA_REC;
   IF L_FA_CURSOR%NOTFOUND THEN
      CLOSE L_FA_CURSOR;
      UNAPIAUT.P_NOT_AUTHORISED := 'Required func access right is not granted to specified user.up='||A_UP||'#us='||A_US||'#applic='||A_APPLIC||'#topic='||A_TOPIC;
      RETURN(UNAPIGEN.DBERR_NOTAUTHORISED);
   END IF;
   CLOSE L_FA_CURSOR;
   IF L_FA_REC.FA ='0' THEN
      UNAPIAUT.P_NOT_AUTHORISED := 'Required func access right is not granted to specified user.up='||A_UP||'#us='||A_US||'#applic='||A_APPLIC||'#topic='||A_TOPIC;
      RETURN(UNAPIGEN.DBERR_NOTAUTHORISED);
   END IF;
   RETURN(UNAPIGEN.DBERR_SUCCESS);
END ISUSERAUTHORISED;

FUNCTION SWITCHUSER
( A_CLIENT_ID          IN OUT VARCHAR2, 
  A_US                 IN     VARCHAR2, 
  A_PASSWORD           IN     VARCHAR2, 
  A_APPLIC             IN OUT VARCHAR2, 
  A_NUMERIC_CHARACTERS IN OUT VARCHAR2, 
  A_DATE_FORMAT        IN OUT VARCHAR2, 
  A_UP                 IN OUT NUMBER,   
  A_USER_PROFILE       OUT    VARCHAR2, 
  A_LANGUAGE           OUT    VARCHAR2, 
  A_TK                 OUT    VARCHAR2) 
RETURN NUMBER IS

L_LOOPBACK_CONNECTSTRING      VARCHAR2(30);
L_SETTING_VALUE               VARCHAR2(255);
L_STEP                        VARCHAR2(255);
L_UP                          NUMBER(5);
L_UP_DESCRIPTION              VARCHAR2(40);
L_COUNT_UPUS                  INTEGER;
L_LINK_CREATED                BOOLEAN;
L_RET_CODE                    INTEGER;
L_SUB_RET_CODE                INTEGER;


L_USER_CONTEXT_ALTERED            BOOLEAN;
L_OLD_CLIENT_ID                   VARCHAR2(20); 
L_OLD_US                          VARCHAR2(20); 
L_OLD_PASSWORD                    VARCHAR2(20); 
L_OLD_APPLIC                      VARCHAR2(8);  
L_OLD_NUMERIC_CHARACTERS          VARCHAR2(2);  
L_OLD_DATE_FORMAT                 VARCHAR2(255);
L_OLD_UP                          NUMBER(5);    
L_TEMP_UP                         NUMBER(5);
L_TEMP_UP_DESCRIPTION             VARCHAR2(40);
L_TEMP_LANGUAGE                   VARCHAR2(20);
L_TEMP_TK                         VARCHAR2(20);

BEGIN
   
   
   
   
   
   L_STEP := 'Input argument validation';
   L_SQLERRM := NULL;
   L_RET_CODE := DBERR_SUCCESS;
   L_LINK_CREATED := FALSE;
   L_SQL_STRING := NULL;
   L_USER_CONTEXT_ALTERED := FALSE;
   
   IF NVL(A_CLIENT_ID, ' ') <> 'Unilink' THEN
      L_SQLERRM := 'SwitchUser may only be used in a Unilink context';
      RAISE STPERROR;
   END IF;
   
   
   L_STEP := 'Keeping current user context';
   L_OLD_CLIENT_ID        := UNAPIGEN.P_CLIENT_ID;
   L_OLD_US               := UNAPIGEN.P_USER;
   L_OLD_PASSWORD         := NULL;
   L_OLD_APPLIC           := UNAPIGEN.P_APPLIC_NAME;
   L_OLD_UP               := UNAPIGEN.P_CURRENT_UP;

   SELECT SUBSTR (VALUE,1,2)
   INTO L_OLD_NUMERIC_CHARACTERS
   FROM V$NLS_PARAMETERS
   WHERE PARAMETER='NLS_NUMERIC_CHARACTERS';

   SELECT VALUE
   INTO L_OLD_DATE_FORMAT
   FROM V$NLS_PARAMETERS
   WHERE PARAMETER='NLS_DATE_FORMAT';

   
   
   
   
   IF A_PASSWORD IS NOT NULL THEN

      
      L_STEP := NULL;
      OPEN C_SYSTEM ('LOOPBACK_CONNECTSTR');
      FETCH C_SYSTEM INTO L_LOOPBACK_CONNECTSTRING;
      IF C_SYSTEM%NOTFOUND THEN
         CLOSE C_SYSTEM;         
         L_SQLERRM := 'Missing system setting LOOPBACK_CONNECTSTR';
         L_RET_CODE := DBERR_SYSDEFAULTS;
         RAISE STPERROR;
      END IF;
      CLOSE C_SYSTEM;

      
      L_STEP := 'Dropping database link U4LOOPBACK';
      BEGIN
         EXECUTE IMMEDIATE 'DROP DATABASE LINK U4LOOPBACK';
      EXCEPTION
      WHEN OTHERS THEN
         
         NULL;
      END;

      
      L_STEP := 'Creating database link U4LOOPBACK for password validation';
      BEGIN
         L_SQL_STRING := 'CREATE DATABASE LINK U4LOOPBACK CONNECT TO '||A_US||' IDENTIFIED BY '||A_PASSWORD||
                         ' USING '''||L_LOOPBACK_CONNECTSTRING||'''';
         EXECUTE IMMEDIATE L_SQL_STRING;
      EXCEPTION
      WHEN OTHERS THEN
         L_SQLERRM := SQLERRM;
         RAISE STPERROR;
      END;
      L_LINK_CREATED := TRUE;

      
      L_STEP := 'Testing database link U4LOOPBACK for password validation';
      L_SETTING_VALUE := NULL;
      BEGIN
         L_SQL_STRING := 'SELECT setting_value FROM uvsystem@U4LOOPBACK WHERE setting_name=''VERSION''';
         EXECUTE IMMEDIATE L_SQL_STRING
         INTO L_SETTING_VALUE;
      EXCEPTION
      WHEN OTHERS THEN
         L_RET_CODE := DBERR_INVALIDPASSWORD;
         L_SQLERRM := SQLERRM;
         RAISE STPERROR;
      END;
      L_SQL_STRING := NULL;

   END IF;
   
   
   
   L_STEP := 'Perform SetConnection';
   L_RET_CODE := UNAPIGEN.SETCONNECTION(A_CLIENT_ID,
                                        A_US,
                                        A_PASSWORD,
                                        A_APPLIC,
                                        A_NUMERIC_CHARACTERS,
                                        A_DATE_FORMAT,
                                        L_UP,
                                        L_UP_DESCRIPTION,
                                        A_LANGUAGE,
                                        A_TK);                                        
   
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
   L_USER_CONTEXT_ALTERED := TRUE;

   IF L_LINK_CREATED THEN   
      U4COMMIT;
      U4ROLLBACK; 
      BEGIN
         EXECUTE IMMEDIATE 'DROP DATABASE LINK U4LOOPBACK';
      EXCEPTION
      WHEN OTHERS THEN
         
         NULL;
      END;
      L_LINK_CREATED := FALSE;
   END IF;
   
   
   L_STEP := 'Setting user profile context';
   IF A_UP IS NOT NULL THEN
      
      
      SELECT COUNT(*)
      INTO L_COUNT_UPUS
      FROM UTUPUS
      WHERE UP=A_UP
      AND US=A_US;
      
      IF L_COUNT_UPUS = 0 THEN
         L_RET_CODE := DBERR_INVALIDUP;
         RAISE STPERROR;
      END IF;
      L_RET_CODE := UNAPIGEN.SETUSUSERPROFILE(A_UP, A_US, A_TK, A_LANGUAGE);
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         RAISE STPERROR;
      END IF;
      
      SELECT DESCRIPTION
      INTO A_USER_PROFILE
      FROM UTUP
      WHERE UP = A_UP;
   ELSE
      
      A_UP := L_UP;
      A_USER_PROFILE := L_UP_DESCRIPTION;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      LOGERROR('SwitchUser', SUBSTR(SQLERRM,1,250));
      IF L_STEP IS NOT NULL THEN
         LOGERROR('SwitchUser', SUBSTR('Exception Step: '||L_STEP,1,250));
      END IF;
   ELSIF L_SQLERRM IS NOT NULL THEN
      LOGERROR('SwitchUser', L_SQLERRM);
      IF L_STEP IS NOT NULL THEN
         LOGERROR('SwitchUser', SUBSTR('Exception Step: '||L_STEP,1,250));
      END IF;
   END IF;
   IF L_LINK_CREATED THEN   
      U4COMMIT;
      U4ROLLBACK; 
      BEGIN
         EXECUTE IMMEDIATE 'DROP DATABASE LINK U4LOOPBACK';
      EXCEPTION
      WHEN OTHERS THEN
         
         NULL;
      END;
      L_LINK_CREATED := FALSE;
   END IF;
   
   IF L_USER_CONTEXT_ALTERED AND
      L_OLD_US IS NOT NULL THEN
      BEGIN
         L_SUB_RET_CODE := UNAPIGEN.SETCONNECTION(L_OLD_CLIENT_ID,
                                                  L_OLD_US,
                                                  L_OLD_PASSWORD,
                                                  L_OLD_APPLIC,
                                                  L_OLD_NUMERIC_CHARACTERS,
                                                  L_OLD_DATE_FORMAT,
                                                  L_TEMP_UP,
                                                  L_TEMP_UP_DESCRIPTION,
                                                  L_TEMP_LANGUAGE,
                                                  L_TEMP_TK);                                        
         IF L_SUB_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
            LOGERROR('SwitchUser', 'The attempt to restore preceding user settings failes! SetConnection returned='||L_SUB_RET_CODE);
         END IF;
      EXCEPTION
      WHEN OTHERS THEN
         LOGERROR('SwitchUser', SUBSTR(SQLERRM,1,250));
         LOGERROR('SwitchUser', 'The attempt to restore preceding user settings failed!');
      END;
      BEGIN
         L_SUB_RET_CODE := UNAPIGEN.SETUSUSERPROFILE(L_OLD_UP, L_OLD_US, L_TEMP_TK, L_TEMP_LANGUAGE);                                        
         IF L_SUB_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
            LOGERROR('SwitchUser', 'The attempt to restore preceding user settings failed! SetUsUserProfile returned='||L_SUB_RET_CODE);
         END IF;
      EXCEPTION
      WHEN OTHERS THEN
         LOGERROR('SwitchUser', SUBSTR(SQLERRM,1,250));
         LOGERROR('SwitchUser', 'The attempt to restore preceding user settings failed!');
      END;      
   END IF;
   IF L_RET_CODE <> DBERR_SUCCESS THEN
      RETURN(L_RET_CODE);
   ELSE
      RETURN(DBERR_GENFAIL);
   END IF;
END SWITCHUSER;

FUNCTION RESETCONNECTION
RETURN NUMBER IS

BEGIN
   RETURN(DBERR_SUCCESS);
END RESETCONNECTION;

FUNCTION GETATTRIBUTENAMES
( A_OBJECT_TP          IN        VARCHAR2,             
  A_OBJECT_ID          OUT       VC20_TABLE_TYPE,      
  A_AU                 OUT       VC20_TABLE_TYPE,      
  A_DESCRIPTION        OUT       VC40_TABLE_TYPE,      
  A_SERVICE            OUT       VC255_TABLE_TYPE,     
  A_NR_OF_ROWS         IN OUT    NUMBER,               
  A_WHERE_CLAUSE       IN        VARCHAR2)             

RETURN NUMBER IS

L_AU              VARCHAR2(20);
L_OBJECT_ID       VARCHAR2(20);
L_DESCRIPTION     VARCHAR2(40);
L_SERVICE         VARCHAR2(255);
L_RESULT1         NUMBER;
L_AU_CURSOR       INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > P_MAX_CHUNK_SIZE THEN
      RETURN (DBERR_NROFROWS);
   END IF;

  IF NVL(A_OBJECT_TP, ' ') = ' ' THEN
     L_RET_CODE := DBERR_NOOBJTP;
     RAISE STPERROR;
  END IF;

  IF NVL(A_WHERE_CLAUSE,' ') = ' ' THEN
     L_WHERE_CLAUSE := 'ORDER BY au'; 
  ELSE
     L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
  END IF;

   L_SQL_STRING := 'SELECT DISTINCT au, description, service FROM  ' ||
                  'dd' || P_DD || '.uvau ' || L_WHERE_CLAUSE;

  L_AU_CURSOR := DBMS_SQL.OPEN_CURSOR;
  DBMS_SQL.PARSE(L_AU_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
  DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 1, L_AU, 20);
  DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 2,  L_DESCRIPTION, 40);
  DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 3, L_SERVICE, 255);
  L_RESULT := DBMS_SQL.EXECUTE(L_AU_CURSOR);

  L_FETCHED_ROWS := 0;
  L_RESULT := DBMS_SQL.FETCH_ROWS(L_AU_CURSOR);

  LOOP
     EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

     DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 1, L_AU);
     DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 2, L_DESCRIPTION);
     DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 3, L_SERVICE);

     L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

     A_OBJECT_ID(L_FETCHED_ROWS) := L_AU;
     A_AU(L_FETCHED_ROWS) := L_AU;
     A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;
     A_SERVICE(L_FETCHED_ROWS) := L_SERVICE;

     IF L_RESULT < A_NR_OF_ROWS THEN
        L_RESULT := DBMS_SQL.FETCH_ROWS(L_AU_CURSOR);
     END IF;
  END LOOP;

  DBMS_SQL.CLOSE_CURSOR(L_AU_CURSOR);

  IF L_FETCHED_ROWS = 0 THEN
     L_RET_CODE := DBERR_NORECORDS;
  ELSE
     A_NR_OF_ROWS := L_FETCHED_ROWS;
     L_RET_CODE := DBERR_SUCCESS;
  END IF;

  RETURN(L_RET_CODE);

EXCEPTION
  WHEN OTHERS THEN
     L_SQLERRM := SQLERRM;
     UNAPIGEN.U4ROLLBACK;
     INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
     VALUES (P_CLIENT_ID, P_APPLIC_NAME, NVL(UNAPIGEN.P_USER,USER), CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
             'GetAttributeNames', L_SQLERRM);
     UNAPIGEN.U4COMMIT;
     IF DBMS_SQL.IS_OPEN(L_AU_CURSOR) THEN
        DBMS_SQL.CLOSE_CURSOR(L_AU_CURSOR);
     END IF;
     RETURN(DBERR_GENFAIL);
END GETATTRIBUTENAMES;

FUNCTION GETUSERPROFILESFORUSER
( A_UP           OUT    LONG_TABLE_TYPE,          
  A_DESCRIPTION  OUT    VC40_TABLE_TYPE,         
  A_NR_OF_ROWS   IN OUT NUMBER)                  
RETURN NUMBER IS
  L_DD    VC3_TABLE_TYPE;           
  L_WHERE VARCHAR2(50);
BEGIN
L_WHERE:='WHERE active = ''1'' ';
RETURN(GETUSERPROFILESFORUSER(A_UP, A_DESCRIPTION, L_DD, L_WHERE, A_NR_OF_ROWS));
END GETUSERPROFILESFORUSER;


FUNCTION GETUSERPROFILESFORUSER
( A_UP           OUT    LONG_TABLE_TYPE,          
  A_DESCRIPTION  OUT    VC40_TABLE_TYPE,          
  A_DD       OUT    VC3_TABLE_TYPE,           
  A_WHERE_CLAUSE IN     VARCHAR2,                 
  A_NR_OF_ROWS   IN OUT NUMBER)                   
RETURN NUMBER IS

L_UP           NUMBER(5);
L_DESCRIPTION  VARCHAR2(40);
L_DD         VARCHAR2(3);
L_UP_CURSOR    INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > P_MAX_CHUNK_SIZE THEN
      RETURN (DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'WHERE (active = ''1'' or active = ''0'')'; 
   ELSIF
      UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := 'WHERE ' || A_WHERE_CLAUSE; 
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_SQL_STRING :=
          'SELECT a.up, description, dd '
          || ' FROM dd' || P_DD || '.uvup a, dd' || P_DD || '.uvupus b '
          || L_WHERE_CLAUSE || ' AND us =''' || REPLACE(P_USER, '''', '''''') || ''' AND a.up = b.up' 
          || ' ORDER BY up';

  L_UP_CURSOR := DBMS_SQL.OPEN_CURSOR;
  DBMS_SQL.PARSE(L_UP_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
  DBMS_SQL.DEFINE_COLUMN(L_UP_CURSOR, 1, L_UP);
  DBMS_SQL.DEFINE_COLUMN(L_UP_CURSOR, 2, L_DESCRIPTION, 40);
  DBMS_SQL.DEFINE_COLUMN(L_UP_CURSOR, 3, L_DD, 3);

  L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_UP_CURSOR);

  L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_UP_CURSOR, 1, L_UP);
      DBMS_SQL.COLUMN_VALUE(L_UP_CURSOR, 2, L_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE(L_UP_CURSOR, 3, L_DD);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_UP(L_FETCHED_ROWS) := L_UP;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;
      A_DD(L_FETCHED_ROWS) := L_DD;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
            L_RESULT := DBMS_SQL.FETCH_ROWS(L_UP_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_UP_CURSOR);
   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
    WHEN OTHERS THEN
       L_SQLERRM := SQLERRM;
       UNAPIGEN.U4ROLLBACK;
       INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
       VALUES (P_CLIENT_ID, P_APPLIC_NAME, NVL(UNAPIGEN.P_USER,USER), CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
               'GetUserProfilesForUser', L_SQLERRM);
       UNAPIGEN.U4COMMIT;
       IF DBMS_SQL.IS_OPEN(L_UP_CURSOR) THEN
          DBMS_SQL.CLOSE_CURSOR(L_UP_CURSOR);
       END IF;
       RETURN(DBERR_GENFAIL);
END GETUSERPROFILESFORUSER;



FUNCTION UNEXECDDL
(A_DDL_STRING   IN     VARCHAR2)       
RETURN NUMBER IS

L_CURSOR                INTEGER;
L_BIND_RET_CODE         INTEGER;
L_RET_CODE_TO_RETURN    BOOLEAN;
L_START                 INTEGER;
L_SQLCODE               INTEGER;

BEGIN

   L_SQLERRM := NULL;
   IF BEGINTXN(P_SINGLE_API_TXN) <> P_TXN_ERROR THEN
      RAISE STPERROR;
   END IF;

   L_CURSOR := DBMS_SQL.OPEN_CURSOR;
   DBMS_SQL.PARSE(L_CURSOR, A_DDL_STRING, DBMS_SQL.V7); 

   
   
   L_BIND_RET_CODE := NULL;
   L_RET_CODE_TO_RETURN := FALSE;
   IF INSTR(A_DDL_STRING, ':l_ret_code') <> 0 THEN

      L_RET_CODE_TO_RETURN := TRUE;
      DBMS_SQL.BIND_VARIABLE(L_CURSOR, ':l_ret_code', L_BIND_RET_CODE);
   END IF;

   L_RESULT := DBMS_SQL.EXECUTE(L_CURSOR);
   
   IF L_RET_CODE_TO_RETURN THEN
      DBMS_SQL.VARIABLE_VALUE(L_CURSOR, ':l_ret_code', L_BIND_RET_CODE);
   END IF;
   DBMS_SQL.CLOSE_CURSOR(L_CURSOR);

   IF ENDTXN <> DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF L_BIND_RET_CODE IS NULL THEN
      RETURN(DBERR_SUCCESS);
   ELSE
      RETURN(L_BIND_RET_CODE);
   END IF;

EXCEPTION
    WHEN OTHERS THEN
       L_SQLERRM := SQLERRM;
       L_SQLCODE := SQLCODE;
       IF DBMS_SQL.IS_OPEN(L_CURSOR) THEN
          DBMS_SQL.CLOSE_CURSOR(L_CURSOR);
       END IF;
       UNAPIGEN.U4ROLLBACK;
       IF L_SQLCODE <> 1 THEN
          INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
          VALUES (P_CLIENT_ID, P_APPLIC_NAME, NVL(UNAPIGEN.P_USER,USER), CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                  'UnExecDdl ', L_SQLERRM);
       END IF;
       IF A_DDL_STRING IS NOT NULL THEN
          L_START := 1;
          LOOP
             IF LENGTH(A_DDL_STRING)<L_START THEN
                EXIT;
             ELSE
                INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
                VALUES (P_CLIENT_ID, P_APPLIC_NAME, NVL(UNAPIGEN.P_USER,USER), CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                        'UnExecDdl ', SUBSTR(A_DDL_STRING,L_START,255));
             END IF;                
             L_START := L_START+255;
          END LOOP;
       END IF;
       
       UNAPIGEN.U4COMMIT;
       IF UNAPIGEN.P_TXN_ERROR = UNAPIGEN.DBERR_SUCCESS THEN
          UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
       END IF;
       RETURN(ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'UnExecDdl'));

END UNEXECDDL;

FUNCTION UNEXECDML1
(A_DML_STRING   IN     VARCHAR2,            
 A_DML1_VALUE   OUT    VC255_TABLE_TYPE,    
 A_NR_OF_ROWS   IN OUT NUMBER,              
 A_NEXT_ROWS    IN     NUMBER)              
RETURN NUMBER IS

L_VALUE        VARCHAR2(255);

BEGIN
   L_RET_CODE := DBERR_SUCCESS;

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > P_MAX_CHUNK_SIZE THEN
      RETURN (DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF L_DML1_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(L_DML1_CURSOR);
         L_DML1_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF L_DML1_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      IF L_DML1_CURSOR IS NULL THEN
         
        L_DML1_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;

      
      
      
      DBMS_SQL.PARSE(L_DML1_CURSOR, 
                     REPLACE(REPLACE(A_DML_STRING,'~DD~','DD'||UNAPIGEN.P_DD),'~dd~','DD'||UNAPIGEN.P_DD),
                     DBMS_SQL.V7);
      DBMS_SQL.DEFINE_COLUMN(L_DML1_CURSOR, 1, L_VALUE, 255);
      L_RESULT := DBMS_SQL.EXECUTE(L_DML1_CURSOR);

   END IF;

   L_RESULT := DBMS_SQL.FETCH_ROWS(L_DML1_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      L_VALUE := NULL;
      DBMS_SQL.COLUMN_VALUE(L_DML1_CURSOR, 1, L_VALUE);
      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_DML1_VALUE(L_FETCHED_ROWS) := L_VALUE;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
            L_RESULT := DBMS_SQL.FETCH_ROWS(L_DML1_CURSOR);
      END IF;
   END LOOP;

   IF L_FETCHED_ROWS = 0 THEN
      DBMS_SQL.CLOSE_CURSOR(L_DML1_CURSOR);
      L_DML1_CURSOR := NULL;
      L_RET_CODE := DBERR_NORECORDS;
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(L_DML1_CURSOR);
      L_DML1_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
    WHEN OTHERS THEN
       L_SQLERRM := SQLERRM;
       UNAPIGEN.U4ROLLBACK;
       INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
       VALUES (P_CLIENT_ID, P_APPLIC_NAME, NVL(UNAPIGEN.P_USER,USER), CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
               'UnExecDml1', L_SQLERRM);
       INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
       VALUES (P_CLIENT_ID, P_APPLIC_NAME, NVL(UNAPIGEN.P_USER,USER), CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
               'UnExecDml1', 'SQL(1):'||SUBSTR(A_DML_STRING,1,248));
       IF LENGTH(A_DML_STRING) > 248 THEN
          INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
          VALUES (P_CLIENT_ID, P_APPLIC_NAME, NVL(UNAPIGEN.P_USER,USER), CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                  'UnExecDml1', 'SQL(2):'||SUBSTR(A_DML_STRING,249,248));
       END IF;
       UNAPIGEN.U4COMMIT;
       IF DBMS_SQL.IS_OPEN(L_DML1_CURSOR) THEN
          DBMS_SQL.CLOSE_CURSOR(L_DML1_CURSOR);
          L_DML1_CURSOR := NULL;
       END IF;
       RETURN(DBERR_GENFAIL);
END UNEXECDML1;

FUNCTION DATEVALID
(A_DATE_STRING  IN OUT VARCHAR2,              
 A_ERROR_MSG    OUT    VARCHAR2)              
RETURN NUMBER IS

L_DATE  TIMESTAMP WITH TIME ZONE;
BEGIN

   L_RET_CODE := UNAPIGEN.DATEVALID(A_DATE_STRING, L_DATE, A_ERROR_MSG);
   RETURN(L_RET_CODE);

END DATEVALID;

FUNCTION DATEVALID                            
(A_DATE_STRING  IN OUT VARCHAR2,              
 A_DATE         OUT    DATE,                  
 A_ERROR_MSG    OUT    VARCHAR2)              
RETURN NUMBER IS



L_DATE                   TIMESTAMP WITH TIME ZONE;
L_DATE_TIMEONLY          TIMESTAMP WITH TIME ZONE;
L_DATE_DATEONLY          TIMESTAMP WITH TIME ZONE;
L_CURSOR                 INTEGER;
L_DATE_OK                BOOLEAN;
L_DATE_TIMEONLY_OK       BOOLEAN;
L_DATE_DATEONLY_OK       BOOLEAN;
L_USED_FORMAT            VARCHAR2(255);
L_SEPARATOR_POS          INTEGER;
L_DATE_STRING            VARCHAR2(255);
L_DATE_TIMEONLY_STRING   VARCHAR2(255);
L_DATE_DATEONLY_STRING   VARCHAR2(255);

BEGIN


   L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   A_ERROR_MSG := NULL;
   L_DATE := NULL;

   
   
   
   
   
   L_SEPARATOR_POS := INSTR(A_DATE_STRING, '@');
   IF L_SEPARATOR_POS > 1 THEN
      L_DATE_STRING := SUBSTR(A_DATE_STRING,1, L_SEPARATOR_POS-1);
      L_USED_FORMAT := RTRIM(SUBSTR(A_DATE_STRING, L_SEPARATOR_POS+1)); 
   ELSIF L_SEPARATOR_POS = 1 THEN 
      L_DATE_STRING := NULL;
   ELSE
      L_DATE_STRING := A_DATE_STRING;
      L_USED_FORMAT := NULL;
   END IF;

   IF RTRIM(LTRIM(L_DATE_STRING)) IS NULL THEN
      IF NVL(LENGTH(L_DATE_STRING),0) = 0 THEN
         A_DATE := NULL;
         A_DATE_STRING := NULL;
         RETURN(L_RET_CODE);
      ELSE
         
         
         A_DATE := NULL;
         A_DATE_STRING := NULL;
         RETURN(UNAPIGEN.DBERR_INVALIDDATE);
      END IF;
   END IF;

   L_CURSOR := DBMS_SQL.OPEN_CURSOR;

   IF SUBSTR(L_DATE_STRING,1,1) = '=' THEN
      IF L_USED_FORMAT IS NULL THEN
         
         
         
         L_SQL_STRING := 'BEGIN :l_date:'||L_DATE_STRING ||'; END;';
         DBMS_SQL.PARSE(L_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         DBMS_SQL.BIND_VARIABLE(L_CURSOR, ':l_date', L_DATE);
         L_RESULT := DBMS_SQL.EXECUTE(L_CURSOR);
         DBMS_SQL.VARIABLE_VALUE(L_CURSOR, ':l_date', L_DATE);
         L_DATE_STRING := TO_CHAR(L_DATE);
      ELSE
         
         
         
         L_SQL_STRING := 'BEGIN :l_date:=' || SUBSTR(L_DATE_STRING,2) || '; END;';
         DBMS_SQL.PARSE(L_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         DBMS_SQL.BIND_VARIABLE(L_CURSOR, ':l_date', L_DATE);
         L_RESULT := DBMS_SQL.EXECUTE(L_CURSOR);
         DBMS_SQL.VARIABLE_VALUE(L_CURSOR, ':l_date', L_DATE);
         L_DATE_STRING := TO_CHAR(L_DATE, L_USED_FORMAT);
      END IF;
   ELSE
      L_DATE_OK := FALSE;
      
      
      
      IF L_USED_FORMAT IS NOT NULL THEN
         L_SQL_STRING := 'BEGIN :l_date:=TO_TIMESTAMP_TZ('''||L_DATE_STRING || ''',''' ||
                         L_USED_FORMAT ||'''); END;';
         DBMS_SQL.PARSE(L_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         DBMS_SQL.BIND_VARIABLE(L_CURSOR, ':l_date', L_DATE);
         L_RESULT := DBMS_SQL.EXECUTE(L_CURSOR);
         DBMS_SQL.VARIABLE_VALUE(L_CURSOR, ':l_date', L_DATE);
         L_DATE_OK := TRUE;
         L_DATE_STRING := TO_CHAR(L_DATE, L_USED_FORMAT);

         
         
         
         
         
         BEGIN
            
            
            
            
            
            L_SQL_STRING := 'BEGIN :l_date:=TO_TIMESTAMP_TZ(''' || TO_CHAR(CURRENT_TIMESTAMP,'DD/MM/YYYYRR')|| '  ' || L_DATE_STRING ||
                                                    ''',''DD/MM/YYYYRR ' || L_USED_FORMAT ||'''); END;';
            DBMS_SQL.PARSE(L_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
            DBMS_SQL.BIND_VARIABLE(L_CURSOR, ':l_date', L_DATE);
            L_RESULT := DBMS_SQL.EXECUTE(L_CURSOR);
            DBMS_SQL.VARIABLE_VALUE(L_CURSOR, ':l_date', L_DATE);
         EXCEPTION
         WHEN OTHERS THEN
            
            NULL;
         END;
      ELSE
         
         
         
         

         
         
         
         IF INSTR(L_DATE_STRING,' ',1) > 0 THEN
            BEGIN
               L_SQL_STRING := 'BEGIN :l_date:='''||L_DATE_STRING ||'''; END;';
               DBMS_SQL.PARSE(L_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
               DBMS_SQL.BIND_VARIABLE(L_CURSOR, ':l_date', L_DATE);
               L_RESULT := DBMS_SQL.EXECUTE(L_CURSOR);
               DBMS_SQL.VARIABLE_VALUE(L_CURSOR, ':l_date', L_DATE);
               IF L_DATE IS NOT NULL THEN
                  L_DATE_STRING := TO_CHAR(L_DATE);
                  L_DATE_OK := TRUE;
               END IF;
            EXCEPTION
            WHEN OTHERS THEN
               L_DATE_OK := FALSE;
            END;
         END IF;

         
         
         
         
         
         
         IF NOT L_DATE_OK THEN
            L_DATE_TIMEONLY_OK := FALSE;
            L_DATE_DATEONLY_OK := FALSE;
            BEGIN
               
               
               
               
               
               L_SQL_STRING := 'BEGIN :l_date:=TRUNC(CURRENT_TIMESTAMP,''DD'') +(' ||
                               'TO_TIMESTAMP_TZ('''||L_DATE_STRING ||''',''' ||
                               UNAPIGEN.P_TIMEFORMAT ||''') -' ||
                               'TRUNC(CURRENT_TIMESTAMP,''MM'')); END;';
               DBMS_SQL.PARSE(L_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
               DBMS_SQL.BIND_VARIABLE(L_CURSOR, ':l_date', L_DATE_TIMEONLY);
               L_RESULT := DBMS_SQL.EXECUTE(L_CURSOR);
               DBMS_SQL.VARIABLE_VALUE(L_CURSOR, ':l_date', L_DATE_TIMEONLY);
               IF L_DATE_TIMEONLY IS NOT NULL THEN
                  L_DATE_TIMEONLY_STRING := TO_CHAR(L_DATE_TIMEONLY);
                  L_DATE_TIMEONLY_OK := TRUE;
               END IF;
            EXCEPTION
            WHEN OTHERS THEN
               L_DATE_TIMEONLY_OK := FALSE;
            END;

            BEGIN
               L_SQL_STRING := 'BEGIN :l_date:=TO_TIMESTAMP_TZ('''||L_DATE_STRING ||''','''||
                               UNAPIGEN.P_DATEFORMAT ||'''); END;';
               DBMS_SQL.PARSE(L_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
               DBMS_SQL.BIND_VARIABLE(L_CURSOR, ':l_date', L_DATE_DATEONLY);
               L_RESULT := DBMS_SQL.EXECUTE(L_CURSOR);
               DBMS_SQL.VARIABLE_VALUE(L_CURSOR, ':l_date', L_DATE_DATEONLY);
               IF L_DATE_DATEONLY IS NOT NULL THEN
                  L_DATE_DATEONLY_STRING := TO_CHAR(L_DATE_DATEONLY);
                  L_DATE_DATEONLY_OK := TRUE;
               END IF;
            EXCEPTION
            WHEN OTHERS THEN
               L_DATE_DATEONLY_OK := FALSE;
            END;

         IF L_DATE_TIMEONLY_OK = TRUE THEN
            IF L_DATE_DATEONLY_OK = TRUE THEN
               A_ERROR_MSG := 'Both Date and time formats are valid for this date : ' || L_DATE_STRING ||
                              ' against Date and/or time format '||
                              UNAPIGEN.P_DATEFORMAT||' '||UNAPIGEN.P_TIMEFORMAT ||
                      ' =>could not determine if date string was a date or a time' ;
               L_RET_CODE := UNAPIGEN.DBERR_DATEMULTIPLMATCH;
            ELSE
               L_DATE_STRING := L_DATE_TIMEONLY_STRING;
               L_DATE := L_DATE_TIMEONLY;
            END IF;
         ELSE
            IF L_DATE_DATEONLY_OK = TRUE THEN
               L_DATE_STRING := L_DATE_DATEONLY_STRING;
               L_DATE := L_DATE_DATEONLY;
            END IF;
         END IF;
         END IF;

         IF NOT L_DATE_OK AND
            NOT L_DATE_DATEONLY_OK AND
            NOT L_DATE_TIMEONLY_OK THEN
            A_ERROR_MSG := 'Invalid Date and/or time ' || L_DATE_STRING ||
                           ' against Date and/or time format '||
                           UNAPIGEN.P_DATEFORMAT||' '||UNAPIGEN.P_TIMEFORMAT;
            L_RET_CODE := UNAPIGEN.DBERR_INVALIDDATE;
         END IF;
      END IF;
   END IF;

   DBMS_SQL.CLOSE_CURSOR(L_CURSOR);
   A_DATE_STRING := L_DATE_STRING;
   A_DATE := L_DATE;
   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   IF DBMS_SQL.IS_OPEN(L_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_CURSOR);
   END IF;
   A_ERROR_MSG := SUBSTR(SQLERRM, 1, 255);
   L_RET_CODE  := UNAPIGEN.DBERR_INVALIDDATE;
   IF DBMS_SQL.IS_OPEN(L_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_CURSOR);
   END IF;
   RETURN(L_RET_CODE);
END DATEVALID;

FUNCTION SPLITDATE
(A_DATE_STRING  IN VARCHAR2,              
 A_DATE_FMT     IN VARCHAR2 )             
RETURN VARCHAR2 IS

L_DATE                   TIMESTAMP WITH TIME ZONE;
L_DATE_STRING            VARCHAR2(255);
L_ERROR_MSG              VARCHAR2(255);
L_RESULT_STR             VARCHAR2(255);

BEGIN

   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   IF LENGTH(A_DATE_FMT) > 0 THEN
      L_DATE_STRING := A_DATE_STRING || '@' || A_DATE_FMT;
      L_RET_CODE := UNAPIGEN.DATEVALID(L_DATE_STRING, L_DATE, L_ERROR_MSG);
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         
         
         L_DATE_STRING := A_DATE_STRING;         

         L_RET_CODE := UNAPIGEN.DATEVALID(L_DATE_STRING, L_DATE, L_ERROR_MSG);         
         IF L_RET_CODE = UNAPIGEN.DBERR_SUCCESS THEN
            L_RESULT_STR := TO_CHAR(L_DATE, 'YYYY#MM#DD#HH24#MI#SS')||'#'||COMPOSEDATE(TO_CHAR(L_DATE, 'YYYY#MM#DD#HH24#MI#SS'), A_DATE_FMT);
         ELSE
            L_RESULT_STR := NULL;
         END IF;
         RETURN(L_RESULT_STR);
      END IF;
   ELSE
      L_DATE_STRING := A_DATE_STRING ;
      L_RET_CODE := UNAPIGEN.DATEVALID(L_DATE_STRING, L_DATE, L_ERROR_MSG);
   END IF;

   IF L_RET_CODE = UNAPIGEN.DBERR_SUCCESS THEN
      IF LENGTH(A_DATE_FMT) > 0 THEN
         L_RESULT_STR := TO_CHAR(L_DATE, 'YYYY#MM#DD#HH24#MI#SS')||'#'||TO_CHAR(L_DATE, A_DATE_FMT);
      ELSE
         L_RESULT_STR := TO_CHAR(L_DATE, 'YYYY#MM#DD#HH24#MI#SS')||'#'||TO_CHAR(L_DATE);
      END IF;
   ELSE
      
      L_RESULT_STR := '' ;
   END IF;

   RETURN(L_RESULT_STR);

END SPLITDATE;

FUNCTION COMPOSEDATE
(A_DATE_STRING  IN VARCHAR2,              
 A_DATE_FMT     IN VARCHAR2 )             
RETURN VARCHAR2 IS

L_DATE                   TIMESTAMP WITH TIME ZONE;
L_RESULT_STR             VARCHAR2(255);

BEGIN

 L_DATE := TO_TIMESTAMP_TZ(A_DATE_STRING, 'YYYY#MM#DD#HH24#MI#SS');

 IF LENGTH(A_DATE_FMT) > 0 THEN
    L_RESULT_STR := TO_CHAR(L_DATE, A_DATE_FMT);
 ELSE
    L_RESULT_STR := L_DATE; 
    END IF;

 RETURN(L_RESULT_STR);

END COMPOSEDATE;

FUNCTION UNEXECDML
(A_DML_STRING   IN     VARCHAR2,                     
 A_DML_VALUE    OUT    VC1000_TABLE_TYPE,            
 A_NR_OF_ROWS   IN OUT NUMBER,                       
 A_NEXT_ROWS    IN     NUMBER)                       
RETURN NUMBER IS

L_VALUE           VARCHAR2(1000);
L_VAL_INDEX       INTEGER;
L_DML_VALUE       VARCHAR2(1000);

BEGIN
   L_RET_CODE := DBERR_SUCCESS;

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > P_MAX_CHUNK_SIZE THEN
      RETURN (DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF L_DML_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(L_DML_CURSOR);
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF L_DML_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      IF L_DML_CURSOR IS NULL THEN
         
        L_DML_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;

      DBMS_SQL.PARSE(L_DML_CURSOR, 
                     REPLACE(REPLACE(A_DML_STRING,'~DD~','DD'||UNAPIGEN.P_DD),'~dd~','DD'||UNAPIGEN.P_DD),
                     DBMS_SQL.V7);

      BEGIN
         P_NR_OF_COLUMNS := 0;
         LOOP
            P_NR_OF_COLUMNS := P_NR_OF_COLUMNS + 1;
            DBMS_SQL.DEFINE_COLUMN(L_DML_CURSOR, P_NR_OF_COLUMNS, L_VALUE, 1000);
         END LOOP;
      EXCEPTION
      WHEN OTHERS THEN
         NULL;
      END;
      P_NR_OF_COLUMNS := P_NR_OF_COLUMNS - 1;

      L_RESULT := DBMS_SQL.EXECUTE(L_DML_CURSOR);

   END IF;

   BEGIN
      L_RESULT := DBMS_SQL.FETCH_ROWS(L_DML_CURSOR);
   EXCEPTION
   WHEN OTHERS THEN
      NULL;
   END;
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      L_DML_VALUE := NULL;
      BEGIN
         FOR L_VAL_INDEX IN 1..P_NR_OF_COLUMNS LOOP
            DBMS_SQL.COLUMN_VALUE(L_DML_CURSOR, L_VAL_INDEX, L_VALUE);
            IF L_DML_VALUE IS NULL THEN
               L_DML_VALUE := L_VALUE || CHR(9);
            ELSE
               L_DML_VALUE := SUBSTR(L_DML_VALUE ||L_VALUE || CHR(9),1,1000);
            END IF;
         END LOOP;
      EXCEPTION
      WHEN OTHERS THEN
         NULL;
      END;
      L_DML_VALUE := SUBSTR(L_DML_VALUE,1,LENGTH(L_DML_VALUE)-1); 
      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_DML_VALUE(L_FETCHED_ROWS) := L_DML_VALUE;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         BEGIN
            L_RESULT := DBMS_SQL.FETCH_ROWS(L_DML_CURSOR);
         EXCEPTION
         WHEN OTHERS THEN
            NULL;
         END;
      END IF;
   END LOOP;

   IF L_FETCHED_ROWS = 0 THEN
      DBMS_SQL.CLOSE_CURSOR(L_DML_CURSOR);
      L_RET_CODE := DBERR_NORECORDS;
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(L_DML_CURSOR);
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
    WHEN OTHERS THEN
       L_SQLERRM := SQLERRM;
       UNAPIGEN.U4ROLLBACK;
       INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
       VALUES (P_CLIENT_ID, P_APPLIC_NAME, NVL(UNAPIGEN.P_USER,USER), CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
               'UnExecDml', L_SQLERRM);
       INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
       VALUES (P_CLIENT_ID, P_APPLIC_NAME, NVL(UNAPIGEN.P_USER,USER), CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
               'UnExecDml', 'SQL(1):'||SUBSTR(A_DML_STRING,1,248));
       IF LENGTH(A_DML_STRING) > 248 THEN
          INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
          VALUES (P_CLIENT_ID, P_APPLIC_NAME, NVL(UNAPIGEN.P_USER,USER), CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                  'UnExecDml', 'SQL(2):'||SUBSTR(A_DML_STRING,249,248));
       END IF;
       UNAPIGEN.U4COMMIT;
       IF DBMS_SQL.IS_OPEN(L_DML_CURSOR) THEN
          DBMS_SQL.CLOSE_CURSOR(L_DML_CURSOR);
       END IF;
       RETURN(DBERR_GENFAIL);
END UNEXECDML;

FUNCTION GETAUTHORISATION                               
( A_OBJECT_TP           IN        VARCHAR2, 
  A_OBJECT_ID           IN        VARCHAR2, 
  A_OBJECT_VERSION      IN        VARCHAR2, 
  A_LC                  OUT       VARCHAR2, 
  A_LC_VERSION          OUT       VARCHAR2, 
  A_SS                  OUT       VARCHAR2, 
  A_ALLOW_MODIFY        OUT       CHAR,     
  A_ACTIVE              OUT       CHAR,     
  A_LOG_HS              OUT       CHAR)     
RETURN NUMBER IS

L_ACTIVE                CHAR(1);
L_SS                    VARCHAR2(2);
L_LC                    VARCHAR2(2);
L_LC_VERSION            VARCHAR2(20);
L_ALLOW_MODIFY          CHAR(1);
L_LOG_HS                CHAR(1);
L_AR                    CHAR(1) := '0';
L_AR_VAL                CHAR(1);
L_AH_CURSOR             INTEGER;
L_DEF_LC                VARCHAR2(2);
L_CURRENT_LC_VERSION    VARCHAR2(20);
L_DEFAULT_LOG_HS        CHAR(1);
L_RETRIES               INTEGER;
L_NO_ALLOW_MODIFY_CHECK CHAR(1);
L_NO_AR_CHECK           CHAR(1);

BEGIN

   L_RET_CODE := UNAPIGEN.EVALVERSION(A_OBJECT_TP, A_OBJECT_ID, A_OBJECT_VERSION);

   FOR L_SEQ_NO IN 1..UNAPIGEN.PA_OBJECT_NR LOOP
      IF UNAPIGEN.PA_OBJECT_TP(L_SEQ_NO) = A_OBJECT_TP AND
         UNAPIGEN.PA_OBJECT_ID(L_SEQ_NO) = A_OBJECT_ID AND
         UNAPIGEN.PA_OBJECT_VERSION(L_SEQ_NO) = A_OBJECT_VERSION THEN
         A_LC           := UNAPIGEN.PA_OBJECT_LC      (L_SEQ_NO);
         A_LC_VERSION   := UNAPIGEN.PA_OBJECT_LC_VERSION (L_SEQ_NO);
         A_SS           := UNAPIGEN.PA_OBJECT_SS      (L_SEQ_NO);
         A_ALLOW_MODIFY := UNAPIGEN.PA_OBJECT_ALLOW_MODIFY(L_SEQ_NO);
         A_ACTIVE       := UNAPIGEN.PA_OBJECT_ACTIVE  (L_SEQ_NO);
         A_LOG_HS       := UNAPIGEN.PA_OBJECT_LOG_HS  (L_SEQ_NO);
         IF UNAPIGEN.PA_OBJECT_ALLOW_MODIFY(L_SEQ_NO) = '0' THEN
            L_RET_CODE := UNAPIAUT.GETALLOWMODIFYCHECKMODE(L_NO_ALLOW_MODIFY_CHECK);
            IF L_NO_ALLOW_MODIFY_CHECK = '1' THEN
               RETURN(UNAPIGEN.DBERR_SUCCESS);
            END IF;
         END IF;
         RETURN (UNAPIGEN.PA_OBJECT_PRIV(L_SEQ_NO));
      END IF;
   END LOOP;

   UNAPIGEN.PA_OBJECT_NR := UNAPIGEN.PA_OBJECT_NR + 1;
   UNAPIGEN.PA_OBJECT_TP(UNAPIGEN.PA_OBJECT_NR) := A_OBJECT_TP;
   UNAPIGEN.PA_OBJECT_ID(UNAPIGEN.PA_OBJECT_NR) := A_OBJECT_ID;
   UNAPIGEN.PA_OBJECT_VERSION(UNAPIGEN.PA_OBJECT_NR) := A_OBJECT_VERSION;

   SELECT AR, DEF_LC, LOG_HS
   INTO L_AR, L_DEF_LC, L_DEFAULT_LOG_HS
   FROM UTOBJECTS
   WHERE OBJECT = A_OBJECT_TP;

   IF A_OBJECT_TP = 'lc' THEN
      L_SQL_STRING := 'SELECT lc_lc, lc_lc_version';
   ELSE
      L_SQL_STRING := 'SELECT lc, lc_version';
   END IF;

   IF L_AR = '1' THEN
      L_SQL_STRING := L_SQL_STRING || ', ss, active, allow_modify, log_hs, ar' ||
                       P_DD ||' FROM ud' || A_OBJECT_TP ||
                      ' WHERE ' || A_OBJECT_TP ||' = ''' || REPLACE(A_OBJECT_ID, '''', '''''') || '''' || 
                      ' AND version = ''' || REPLACE(A_OBJECT_VERSION, '''', '''''') || ''''; 
   ELSIF A_OBJECT_TP = 'ad' THEN
      L_SQL_STRING  := L_SQL_STRING || ', ss, active, allow_modify, log_hs, ''W''' ||
                       ' FROM ut' || A_OBJECT_TP ||
                       ' WHERE ad = ''' || REPLACE(A_OBJECT_ID, '''', '''''') || ''' ' || 
                       ' AND version = ''' || REPLACE(A_OBJECT_VERSION, '''', '''''') || ''''; 
   ELSE
      L_SQL_STRING  := L_SQL_STRING || ', ss, active, allow_modify, log_hs, ''W''' ||
                       ' FROM ut' || A_OBJECT_TP ||
                       ' WHERE ' || A_OBJECT_TP || ' = ''' || REPLACE(A_OBJECT_ID, '''', '''''') || '''' || 
                       ' AND version = ''' || REPLACE(A_OBJECT_VERSION, '''', '''''') || ''''; 
   END IF;

   L_AH_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_RETRIES := UNAPIEV.P_RETRIESWHENINTRANSITION;

   DBMS_SQL.PARSE(L_AH_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   DBMS_SQL.DEFINE_COLUMN(L_AH_CURSOR, 1, L_LC, 2);   
   DBMS_SQL.DEFINE_COLUMN(L_AH_CURSOR, 2, L_LC_VERSION, 20);      
   DBMS_SQL.DEFINE_COLUMN(L_AH_CURSOR, 3, L_SS, 2);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_AH_CURSOR, 4, L_ACTIVE, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_AH_CURSOR, 5, L_ALLOW_MODIFY, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_AH_CURSOR, 6, L_LOG_HS, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_AH_CURSOR, 7, L_AR_VAL, 1);

   LOOP
      L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_AH_CURSOR);

      EXIT WHEN L_RESULT = 0;

      DBMS_SQL.COLUMN_VALUE(L_AH_CURSOR, 1, L_LC);
      DBMS_SQL.COLUMN_VALUE(L_AH_CURSOR, 2, L_LC_VERSION);      
      DBMS_SQL.COLUMN_VALUE(L_AH_CURSOR, 3, L_SS);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_AH_CURSOR, 4, L_ACTIVE);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_AH_CURSOR, 5, L_ALLOW_MODIFY);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_AH_CURSOR, 6, L_LOG_HS);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_AH_CURSOR, 7, L_AR_VAL);

      EXIT WHEN NVL(L_ALLOW_MODIFY,' ') <> '#';
      EXIT WHEN (L_AR_VAL = 'N');
      EXIT WHEN L_RETRIES <= 0;
      L_RETRIES := L_RETRIES - 1;
      DBMS_LOCK.SLEEP(UNAPIEV.P_INTERVALWHENINTRANSITION);

   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_AH_CURSOR);

   IF L_RESULT = 0 THEN
      BEGIN
         SELECT VERSION
         INTO L_CURRENT_LC_VERSION
         FROM UTLC
         WHERE LC = L_DEF_LC
         AND VERSION_IS_CURRENT = '1';
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
         IF A_OBJECT_TP = 'dc' AND L_DEF_LC = '--' THEN 
            NULL;
         ELSE
            RETURN (UNAPIGEN.DBERR_NOCURRENTLCVERSION);
         END IF;   
      END;
      
      
      
      UNAPIGEN.PA_OBJECT_PRIV(UNAPIGEN.PA_OBJECT_NR) := UNAPIGEN.DBERR_SUCCESS;
      UNAPIGEN.PA_OBJECT_LC    (UNAPIGEN.PA_OBJECT_NR) := L_DEF_LC;
      UNAPIGEN.PA_OBJECT_LC_VERSION (UNAPIGEN.PA_OBJECT_NR) := L_CURRENT_LC_VERSION;
      UNAPIGEN.PA_OBJECT_SS    (UNAPIGEN.PA_OBJECT_NR) := '';
      UNAPIGEN.PA_OBJECT_ALLOW_MODIFY (UNAPIGEN.PA_OBJECT_NR) := '1';
      UNAPIGEN.PA_OBJECT_ACTIVE(UNAPIGEN.PA_OBJECT_NR) := '0';
      UNAPIGEN.PA_OBJECT_LOG_HS(UNAPIGEN.PA_OBJECT_NR) := L_DEFAULT_LOG_HS;

      A_LC           := UNAPIGEN.PA_OBJECT_LC         (UNAPIGEN.PA_OBJECT_NR);
      A_LC_VERSION   := UNAPIGEN.PA_OBJECT_LC_VERSION (UNAPIGEN.PA_OBJECT_NR);
      A_SS           := UNAPIGEN.PA_OBJECT_SS         (UNAPIGEN.PA_OBJECT_NR);
      A_ALLOW_MODIFY := '#';
      A_ACTIVE       := UNAPIGEN.PA_OBJECT_ACTIVE     (UNAPIGEN.PA_OBJECT_NR);
      A_LOG_HS       := UNAPIGEN.PA_OBJECT_LOG_HS     (UNAPIGEN.PA_OBJECT_NR);

      RETURN (UNAPIGEN.DBERR_NOOBJECT);
   END IF;

   
   
   
   IF L_AR_VAL = 'W' THEN
      IF L_ALLOW_MODIFY = '1' THEN
         
         UNAPIGEN.PA_OBJECT_PRIV(UNAPIGEN.PA_OBJECT_NR) := UNAPIGEN.DBERR_SUCCESS;
      ELSIF L_ALLOW_MODIFY = '0' THEN
         L_RET_CODE := UNAPIAUT.GETALLOWMODIFYCHECKMODE(L_NO_ALLOW_MODIFY_CHECK);
         IF L_NO_ALLOW_MODIFY_CHECK = '1' THEN
            UNAPIGEN.PA_OBJECT_PRIV(UNAPIGEN.PA_OBJECT_NR) := UNAPIGEN.DBERR_SUCCESS;
         ELSE
            UNAPIGEN.PA_OBJECT_PRIV(UNAPIGEN.PA_OBJECT_NR) := UNAPIGEN.DBERR_NOTMODIFIABLE;
            UNAPIAUT.P_NOT_AUTHORISED := 'object NOTMODIFIABLE:'||UNAPIGEN.PA_OBJECT_ID(UNAPIGEN.PA_OBJECT_NR);
         END IF;
      ELSIF L_ALLOW_MODIFY = '#' THEN
         
         UNAPIGEN.PA_OBJECT_PRIV(UNAPIGEN.PA_OBJECT_NR) := UNAPIGEN.DBERR_TRANSITION;
      ELSE
         UNAPIGEN.LOGERROR('GetAuthorisation','allow_modify has illegal value');
         RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'GetAuthorisation'));
      END IF;
   ELSIF L_AR_VAL = 'R' THEN
      L_RET_CODE := UNAPIAUT.GETARCHECKMODE(L_NO_AR_CHECK);
      IF L_NO_AR_CHECK = '1' THEN
         UNAPIGEN.PA_OBJECT_PRIV(UNAPIGEN.PA_OBJECT_NR) := UNAPIGEN.DBERR_SUCCESS;
      ELSE
         UNAPIGEN.PA_OBJECT_PRIV(UNAPIGEN.PA_OBJECT_NR) := UNAPIGEN.DBERR_READONLY;
         UNAPIAUT.P_NOT_AUTHORISED := 'object READONLY:'||UNAPIGEN.PA_OBJECT_ID(UNAPIGEN.PA_OBJECT_NR);
      END IF;
   ELSE
      L_RET_CODE := UNAPIAUT.GETALLOWMODIFYCHECKMODE(L_NO_AR_CHECK);
      IF L_NO_AR_CHECK='1' THEN
         UNAPIGEN.PA_OBJECT_PRIV(UNAPIGEN.PA_OBJECT_NR) := UNAPIGEN.DBERR_SUCCESS;
      ELSE
         UNAPIGEN.PA_OBJECT_PRIV(UNAPIGEN.PA_OBJECT_NR) := UNAPIGEN.DBERR_NOACCESS;
         UNAPIAUT.P_NOT_AUTHORISED := 'object NOACCESS:'||UNAPIGEN.PA_OBJECT_ID(UNAPIGEN.PA_OBJECT_NR);
      END IF;
   END IF;

   UNAPIGEN.PA_OBJECT_LC           (UNAPIGEN.PA_OBJECT_NR) := L_LC;
   UNAPIGEN.PA_OBJECT_LC_VERSION   (UNAPIGEN.PA_OBJECT_NR) := L_LC_VERSION;
   UNAPIGEN.PA_OBJECT_SS           (UNAPIGEN.PA_OBJECT_NR) := L_SS;
   UNAPIGEN.PA_OBJECT_ALLOW_MODIFY (UNAPIGEN.PA_OBJECT_NR) := L_ALLOW_MODIFY;
   UNAPIGEN.PA_OBJECT_ACTIVE       (UNAPIGEN.PA_OBJECT_NR) := L_ACTIVE;
   UNAPIGEN.PA_OBJECT_LOG_HS       (UNAPIGEN.PA_OBJECT_NR) := L_LOG_HS;

   A_LC           := UNAPIGEN.PA_OBJECT_LC          (UNAPIGEN.PA_OBJECT_NR);
   A_LC_VERSION   := UNAPIGEN.PA_OBJECT_LC_VERSION  (UNAPIGEN.PA_OBJECT_NR);
   A_SS           := UNAPIGEN.PA_OBJECT_SS          (UNAPIGEN.PA_OBJECT_NR);
   A_ALLOW_MODIFY := UNAPIGEN.PA_OBJECT_ALLOW_MODIFY(UNAPIGEN.PA_OBJECT_NR);
   A_ACTIVE       := UNAPIGEN.PA_OBJECT_ACTIVE      (UNAPIGEN.PA_OBJECT_NR);
   A_LOG_HS       := UNAPIGEN.PA_OBJECT_LOG_HS      (UNAPIGEN.PA_OBJECT_NR);

   RETURN (UNAPIGEN.PA_OBJECT_PRIV(UNAPIGEN.PA_OBJECT_NR));
EXCEPTION
WHEN NO_DATA_FOUND THEN
   
   
   
   IF DBMS_SQL.IS_OPEN(L_AH_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_AH_CURSOR);
   END IF;
   P_TXN_ERROR := DBERR_OBJTP;
   RAISE STPERROR;
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      LOGERROR('GetAuthorisation', SQLERRM);
   END IF;
   IF DBMS_SQL.IS_OPEN(L_AH_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_AH_CURSOR);
   END IF;
   RETURN(ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'GetAuthorisation'));
END GETAUTHORISATION;






PROCEDURE LOGERRORNOREMOTEAPICALL      
(A_API_NAME     IN        VARCHAR2,    
 A_ERROR_MSG    IN        VARCHAR2)    
IS
PRAGMA AUTONOMOUS_TRANSACTION;

BEGIN
   
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES (UNAPIGEN.P_CLIENT_ID, SUBSTR(UNAPIGEN.P_APPLIC_NAME,1,8), NVL(UNAPIGEN.P_USER,USER), CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
           SUBSTR(A_API_NAME,1,40), SUBSTR(A_ERROR_MSG,1,255));
   COMMIT; 
END LOGERRORNOREMOTEAPICALL;

PROCEDURE LOGERROR               
(A_API_NAME     IN        VARCHAR2,    
 A_ERROR_MSG    IN        VARCHAR2)    
IS

BEGIN
    IF UNAPIEV.P_EV_MGR_SESSION AND 
       SQLCODE = -60 AND 
       UNAPIGEN.P_DEADLOCK_COUNT < UNAPIGEN.P_MAX_DEADLOCK_COUNT THEN 
          UNAPIGEN.P_DEADLOCK_RAISED := TRUE;
    ELSE
       IF P_REMOTE = '0' THEN
          LOGERRORNOREMOTEAPICALL(A_API_NAME, A_ERROR_MSG);
       ELSE
          INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
          VALUES (UNAPIGEN.P_CLIENT_ID, SUBSTR(UNAPIGEN.P_APPLIC_NAME,1,8), NVL(UNAPIGEN.P_USER,USER), CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                  SUBSTR(A_API_NAME,1,40), SUBSTR(A_ERROR_MSG,1,255));    
       END IF;
       IF SQLCODE = -60 THEN
          
          
          UNAPIGEN.P_DEADLOCK_RAISED := TRUE;
       END IF;
    END IF;
    UNAPIGEN.P_TXN_ERROR_TEXT := SUBSTR(A_ERROR_MSG,1,255); 
    IF UNAPIGEN.P_TXN_ERROR = UNAPIGEN.DBERR_SUCCESS THEN
       UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
    END IF;
END LOGERROR;

FUNCTION GETDEFAULTLIFECYCLE
(A_OBJECT_TP    IN        VARCHAR2,  
 A_DEF_LC       OUT       VARCHAR2,  
 A_LC_NAME      OUT       VARCHAR2)  
RETURN NUMBER IS

L_DEF_LC    VARCHAR2(2);
L_LC_NAME   VARCHAR2(20);
L_LC_FOUND  BOOLEAN;

BEGIN

   IF NVL(A_OBJECT_TP, ' ') = ' ' THEN
      RETURN(DBERR_NOOBJECT);
   END IF;

   L_SQL_STRING:=   'SELECT obj.def_lc, lc.name '
                  ||'FROM dd'||UNAPIGEN.P_DD||'.uvobjects obj, dd'||UNAPIGEN.P_DD||'.uvlc lc '
                  ||'WHERE obj.object = :a_object_tp '
                  ||'  AND obj.def_lc = lc.lc';
   BEGIN
      EXECUTE IMMEDIATE L_SQL_STRING 
      INTO L_DEF_LC, L_LC_NAME
      USING A_OBJECT_TP;
   EXCEPTION
      WHEN NO_DATA_FOUND THEN
         
         NULL;
   END;

   L_LC_FOUND := SQL%FOUND;
   IF NOT L_LC_FOUND THEN
        P_TXN_ERROR := DBERR_OBJTP;
        RAISE STPERROR;
   END IF;

   A_DEF_LC := L_DEF_LC;
   A_LC_NAME := L_LC_NAME;
   RETURN(DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (P_CLIENT_ID, P_APPLIC_NAME, NVL(UNAPIGEN.P_USER,USER), CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'GetDefaultLifeCycle',
              L_SQLERRM);
      UNAPIGEN.U4COMMIT;
   END IF;
   RETURN(DBERR_GENFAIL);
END GETDEFAULTLIFECYCLE;

FUNCTION MINISPRINTF             
(A_FORMAT         IN VARCHAR2,   
 A_VALUE_F        IN NUMBER,     
 A_VALUE_S        OUT VARCHAR2,  
 A_ERROR_MSG      OUT VARCHAR2)  
RETURN NUMBER IS

L_FORMAT             VARCHAR2(40);
L_TYPE               CHAR(1);
L_DOT_POS            INTEGER;
L_EXP_POS            INTEGER;
L_PRECISION          INTEGER;
L_WIDTH              INTEGER;
L_VALUE_I            INTEGER;
L_START_POS          INTEGER;
L_WIDTH_STRING       VARCHAR2(40);
L_FLAGS_STRING       VARCHAR2(40);
L_CHAR               CHAR(1);
L_LEFT_JUSTIFY       BOOLEAN;
L_SHOW_SIGN          BOOLEAN;
L_ZERO_PADDING       BOOLEAN;
L_SPACE_FOR_SIGN     BOOLEAN;
L_SCAN_STRING        VARCHAR2(40);
L_VALUE_S            VARCHAR2(255);
L_TO_CHAR_FORMAT     VARCHAR2(80);
L_ROUNDED_VALUE      NUMBER;
L_DOT                CHAR(1);
L_TO_CHAR_DOT_POS    INTEGER;
L_NUMBER_OF_DECIMALS INTEGER;

   FUNCTION ISDIGIT(A_CHARACTER CHAR) RETURN BOOLEAN IS
   BEGIN
      IF A_CHARACTER IN ('0','1','2','3','4','5','6','7','8','9') THEN
         RETURN(TRUE);
      ELSE
         RETURN(FALSE);
      END IF;
   END ISDIGIT;

BEGIN

L_FORMAT := A_FORMAT;







L_FORMAT := LTRIM(RTRIM(L_FORMAT));
L_TYPE   := NVL(SUBSTR(L_FORMAT, -1),' ');
IF L_TYPE NOT IN ('d', 'f', 'e', 'E') THEN
   A_ERROR_MSG := 'Unsupported type';
   RETURN(UNAPIGEN.DBERR_FLOATTOSTRING);
END IF;






L_DOT_POS := INSTR(L_FORMAT, '.');
IF L_DOT_POS <> 0 THEN
   BEGIN
      L_PRECISION := TO_NUMBER(
                        SUBSTR(L_FORMAT, L_DOT_POS+1,
                               LENGTH(L_FORMAT)-1-L_DOT_POS
                        )
                     );
   EXCEPTION
   WHEN VALUE_ERROR THEN
      L_PRECISION := 0;
   END;
ELSE
   L_PRECISION := NULL;
END IF;
IF L_PRECISION < 0 THEN
   
   A_ERROR_MSG :='precision=0 (was negative)';
   RETURN(UNAPIGEN.DBERR_FLOATTOSTRING);
END IF;





IF NVL(L_DOT_POS,0) > 1 THEN
   L_START_POS    := L_DOT_POS-1;
ELSE
   L_START_POS := LENGTH(L_FORMAT)-1;
END IF;

L_WIDTH_STRING := '';
L_FLAGS_STRING := '';
FOR L_SCAN_IDX IN REVERSE 1..L_START_POS LOOP
   L_CHAR := SUBSTR(L_FORMAT, L_SCAN_IDX, 1);
   IF NOT ISDIGIT(L_CHAR) THEN
      L_WIDTH_STRING := SUBSTR(L_FORMAT, L_SCAN_IDX+1, L_START_POS-L_SCAN_IDX);
      L_FLAGS_STRING := SUBSTR(L_FORMAT, 1, L_SCAN_IDX);
      EXIT;
   END IF;
END LOOP;


IF SUBSTR(L_WIDTH_STRING, 1, 1) = '0' THEN
   L_FLAGS_STRING := L_FLAGS_STRING || '0';
   L_WIDTH_STRING := SUBSTR(L_WIDTH_STRING, 2);
END IF;

BEGIN
   L_WIDTH:= NVL(TO_NUMBER(L_WIDTH_STRING),0);
EXCEPTION
WHEN VALUE_ERROR THEN
   L_WIDTH := 0;
END;




L_LEFT_JUSTIFY := FALSE;
IF INSTR(L_FLAGS_STRING, '-')<>0 THEN
   L_LEFT_JUSTIFY := TRUE;
END IF;

L_SHOW_SIGN := FALSE;
IF INSTR(L_FLAGS_STRING, '+')<>0 THEN
   L_SHOW_SIGN := TRUE;
END IF;

L_ZERO_PADDING := FALSE;
IF INSTR(L_FLAGS_STRING, '0')<>0 THEN
   IF L_LEFT_JUSTIFY = FALSE AND
   L_TYPE <> 'd' THEN
     L_ZERO_PADDING := TRUE;
   END IF;
END IF;

L_SPACE_FOR_SIGN := FALSE;
IF INSTR(L_FLAGS_STRING, ' ')<>0 THEN
   IF L_SHOW_SIGN = FALSE THEN
     L_SPACE_FOR_SIGN := TRUE;
   END IF;
END IF;



L_SCAN_STRING := L_FLAGS_STRING;





L_SCAN_STRING := SUBSTR(L_SCAN_STRING,1,INSTR(L_SCAN_STRING,'%')-1)||
                 SUBSTR(L_SCAN_STRING,INSTR(L_SCAN_STRING,'%')+1);
L_SCAN_STRING := SUBSTR(L_SCAN_STRING,1,INSTR(L_SCAN_STRING,'-')-1)||
                 SUBSTR(L_SCAN_STRING,INSTR(L_SCAN_STRING,'-')+1);
L_SCAN_STRING := SUBSTR(L_SCAN_STRING,1,INSTR(L_SCAN_STRING,'+')-1)||
                 SUBSTR(L_SCAN_STRING,INSTR(L_SCAN_STRING,'+')+1);
L_SCAN_STRING := SUBSTR(L_SCAN_STRING,1,INSTR(L_SCAN_STRING,'0')-1)||
                 SUBSTR(L_SCAN_STRING,INSTR(L_SCAN_STRING,'0')+1);
L_SCAN_STRING := SUBSTR(L_SCAN_STRING,1,INSTR(L_SCAN_STRING,' ')-1)||
                 SUBSTR(L_SCAN_STRING,INSTR(L_SCAN_STRING,' ')+1);

IF L_SCAN_STRING IS NOT NULL THEN
   A_ERROR_MSG :='Invalid flag'||L_SCAN_STRING;
   RETURN(UNAPIGEN.DBERR_FLOATTOSTRING);
END IF;


IF L_TYPE = 'd' THEN
   

   L_VALUE_I := TRUNC(A_VALUE_F) ;

   
   
   
   
   IF L_PRECISION IS NULL THEN
      IF L_VALUE_I <> 0 THEN
         L_PRECISION := 1;
      ELSIF L_DOT_POS > 0 THEN
         L_PRECISION := 0;
      END IF;
   END IF;
   IF L_PRECISION = 0 AND
      L_VALUE_I = 0 THEN
      L_VALUE_S := '';
   ELSE
      L_VALUE_S := TO_CHAR(L_VALUE_I);
   END IF;

   
   IF LENGTH(REPLACE(L_VALUE_S,'-','')) < L_PRECISION THEN
      IF L_VALUE_I >= 0 THEN
         L_VALUE_S := CX_LPAD(L_VALUE_S, L_PRECISION, '0');
      ELSE
         L_VALUE_S := '-' || CX_LPAD(TO_CHAR(ABS(L_VALUE_S)), L_PRECISION, '0');
      END IF;
   END IF;

   
   
   IF L_SHOW_SIGN THEN
      IF SIGN(L_VALUE_I) <> -1 THEN
         IF L_VALUE_S IS NOT NULL THEN
            L_VALUE_S := '+' || L_VALUE_S;
         ELSE
            L_VALUE_S := '+';
         END IF;
      END IF;
   ELSIF L_SPACE_FOR_SIGN THEN
      IF SIGN(L_VALUE_I) <> -1 THEN
         IF L_VALUE_S IS NOT NULL THEN
            L_VALUE_S := ' ' || L_VALUE_S;
         ELSE
            L_VALUE_S := ' ';
         END IF;
      END IF;
   END IF;

   
   
   IF L_WIDTH IS NOT NULL AND
      NVL(LENGTH(L_VALUE_S),0) < L_WIDTH THEN
      IF L_LEFT_JUSTIFY THEN
         L_VALUE_S := CX_RPAD(NVL(L_VALUE_S,' '), L_WIDTH, ' ' );
      ELSE
         L_VALUE_S := CX_LPAD(NVL(L_VALUE_S,' '), L_WIDTH, ' ' );
      END IF;
   END IF;

ELSIF L_TYPE IN ('f', 'e', 'E') THEN
   
   
   
   
   

   
   IF L_DOT_POS <> 0 THEN
      IF L_PRECISION IS NULL THEN
         L_PRECISION := 0;
      END IF;
   END IF;
   IF L_PRECISION IS NULL THEN
      L_PRECISION := 6;
   END IF;

   IF L_TYPE = 'f' THEN
      L_ROUNDED_VALUE := ROUND(A_VALUE_F, L_PRECISION);
      L_VALUE_S := TO_CHAR(L_ROUNDED_VALUE);

      
      L_DOT := LTRIM(TO_CHAR(0,'D'));
      L_TO_CHAR_DOT_POS := INSTR(L_VALUE_S,L_DOT);
      IF L_TO_CHAR_DOT_POS > 0 THEN
         IF SUBSTR(L_VALUE_S,1,1) = L_DOT THEN
            L_VALUE_S := '0' || L_VALUE_S;
         ELSIF SUBSTR(L_VALUE_S,1,2) = '-'||L_DOT THEN
            L_VALUE_S := '-0' || L_DOT || SUBSTR(L_VALUE_S,3);
         END IF;
         L_TO_CHAR_DOT_POS := INSTR(L_VALUE_S,L_DOT);
      END IF;

      
      IF L_TO_CHAR_DOT_POS > 0 THEN
         L_NUMBER_OF_DECIMALS := LENGTH(SUBSTR(L_VALUE_S,L_TO_CHAR_DOT_POS+1));
         IF L_NUMBER_OF_DECIMALS < L_PRECISION THEN
            L_VALUE_S := L_VALUE_S || CX_RPAD('0', L_PRECISION-L_NUMBER_OF_DECIMALS, '0');
         END IF;
      ELSE
         IF L_PRECISION > 0 THEN
            L_VALUE_S := L_VALUE_S || L_DOT  || CX_RPAD('0', L_PRECISION, '0');
         END IF;
      END IF;
   ELSE
      L_TO_CHAR_FORMAT := '0';
      IF L_PRECISION > 0 THEN
         L_TO_CHAR_FORMAT := L_TO_CHAR_FORMAT || 'D' || CX_RPAD('0', L_PRECISION, '0');
      END IF;
      L_TO_CHAR_FORMAT := L_TO_CHAR_FORMAT || 'EEEE';
      L_VALUE_S := LTRIM(TO_CHAR(A_VALUE_F, L_TO_CHAR_FORMAT));
      L_EXP_POS := INSTR(L_VALUE_S, 'E') + 2 ;  
      IF L_TYPE = 'e' THEN
         L_VALUE_S := REPLACE(L_VALUE_S, 'E', 'e');
      END IF;

      
      

      IF LENGTH (SUBSTR(L_VALUE_S, L_EXP_POS)) < 3 THEN
         L_VALUE_S := SUBSTR(L_VALUE_S, 1, L_EXP_POS - 1) || '0' || SUBSTR(L_VALUE_S, L_EXP_POS);
      END IF;


   END IF;

   
   IF L_SHOW_SIGN THEN
      IF SIGN(A_VALUE_F) <> -1 THEN
         L_VALUE_S := '+' || L_VALUE_S;
      END IF;
   ELSIF L_SPACE_FOR_SIGN THEN
      IF SIGN(A_VALUE_F) <> -1 THEN
         L_VALUE_S := ' ' || L_VALUE_S;
      END IF;
   END IF;

   
   
   IF L_WIDTH IS NOT NULL AND
      LENGTH(L_VALUE_S) < L_WIDTH THEN
      IF L_LEFT_JUSTIFY THEN
         L_VALUE_S := CX_RPAD(L_VALUE_S, L_WIDTH, ' ' );
      ELSE
         IF L_ZERO_PADDING THEN
            
            IF SUBSTR(L_VALUE_S,1,1) IN ('+','-',' ') THEN
               L_VALUE_S := SUBSTR(L_VALUE_S,1,1) ||
                            CX_LPAD(SUBSTR(L_VALUE_S,2), L_WIDTH-1, '0' );
            ELSE
               L_VALUE_S := CX_LPAD(L_VALUE_S, L_WIDTH, '0' );
            END IF;
         ELSE
            L_VALUE_S := CX_LPAD(L_VALUE_S, L_WIDTH, ' ' );
         END IF;
      END IF;
   END IF;

END IF;
A_VALUE_S := L_VALUE_S;
RETURN(UNAPIGEN.DBERR_SUCCESS);

END MINISPRINTF;

FUNCTION SQLUNITCONVERSIONFACTOR               
(A_SRC_UNIT             IN   VARCHAR2,         
 A_DEST_UNIT            IN   VARCHAR2)         
RETURN NUMBER
IS

CURSOR C_CONV_FACTOR(C_SRC_UNIT VARCHAR2, C_DEST_UNIT VARCHAR2) IS
   SELECT A.CONV_FACTOR / B.CONV_FACTOR CONV_FACTOR 
   FROM UTUNIT A , UTUNIT B
   WHERE A.UNIT = C_SRC_UNIT 
   AND B.UNIT = C_DEST_UNIT 
   AND A.UNIT_TP = B.UNIT_TP;
L_CONV_FACTOR   NUMBER;

BEGIN
   IF (A_SRC_UNIT IS NULL) OR (A_DEST_UNIT IS NULL) THEN
      L_CONV_FACTOR := 1;
   ELSIF A_SRC_UNIT = A_DEST_UNIT THEN
      L_CONV_FACTOR := 1;
   ELSE
      OPEN C_CONV_FACTOR(A_SRC_UNIT, A_DEST_UNIT);
      FETCH C_CONV_FACTOR
      INTO L_CONV_FACTOR;
      CLOSE C_CONV_FACTOR;
   END IF;
   IF L_CONV_FACTOR IS NULL THEN
      RAISE_APPLICATION_ERROR(-20000, 'No factor found for conversion from "'||A_SRC_UNIT||'" to "'||A_DEST_UNIT||'"');
   END IF;
   RETURN(L_CONV_FACTOR);
END SQLUNITCONVERSIONFACTOR;

FUNCTION TRANSFORMRESULT                      
(A_SRC_VALUE_S          IN      VARCHAR2,     
 A_SRC_VALUE_F          IN      NUMBER,       
 A_SRC_UNIT             IN      VARCHAR2,     
 A_SRC_FORMAT           IN      VARCHAR2,     
 A_DEST_VALUE_S         OUT     VARCHAR2,     
 A_DEST_VALUE_F         OUT     NUMBER,       
 A_DEST_UNIT            IN OUT  VARCHAR2,     
 A_DEST_FORMAT          IN OUT  VARCHAR2)     
RETURN NUMBER IS

CURSOR C_OUT_F_VALUE(IN_F_VALUE NUMBER, IN_UNIT VARCHAR2, OUT_UNIT VARCHAR2) IS
SELECT IN_F_VALUE * A.CONV_FACTOR / B.CONV_FACTOR OUT_VALUE 
FROM UTUNIT A, UTUNIT B 
WHERE A.UNIT = IN_UNIT 
AND B.UNIT = OUT_UNIT 
AND A.UNIT_TP = B.UNIT_TP;

CURSOR C_OTHER_SEPER IS
SELECT DECODE(LTRIM(TO_CHAR(0, 'D')), '.', ',', ',', '.') FROM DUAL;

L_OTHER_SEPER  VARCHAR2(1);
L_OUT_F_VALUE   NUMBER;
L_OUT_S_VALUE   VARCHAR2(40);
L_FORM_IN_VALUE VARCHAR2(40);
L_FORM_IN_VALUE_WTH_OTH_SEPER VARCHAR2(40);
L_OUT_FORMAT   VARCHAR2(40);
L_OUT_UNIT     VARCHAR2(20);
L_RET          NUMBER;
L_RET_INT      NUMBER;
L_IN_VALUE_F    NUMBER;
L_PREFIX        VARCHAR2(40);
L_POSTFIX       VARCHAR2(40);

BEGIN

IF NVL(A_DEST_UNIT, ' ') = ' ' THEN
   A_DEST_UNIT := A_SRC_UNIT ;
END IF;

IF NVL(A_DEST_FORMAT, ' ') = ' ' THEN
   A_DEST_FORMAT := A_SRC_FORMAT ;
END IF;

IF NVL(A_DEST_UNIT, ' ') = NVL(A_SRC_UNIT, ' ') AND NVL(A_DEST_FORMAT, ' ') = NVL(A_SRC_FORMAT, ' ') THEN

   A_DEST_VALUE_S := A_SRC_VALUE_S;
   A_DEST_VALUE_F := A_SRC_VALUE_F;
   RETURN(UNAPIGEN.DBERR_SUCCESS);
END IF;


IF     (NVL (A_SRC_FORMAT, ' ') = ' ') 
   AND (NVL (A_SRC_UNIT, ' ') = ' ') 
THEN
   A_DEST_VALUE_S := A_SRC_VALUE_S;
   A_DEST_VALUE_F := A_SRC_VALUE_F;
   RETURN (UNAPIGEN.DBERR_SUCCESS);
END IF;

IF (NVL(A_SRC_UNIT, ' ') = ' ') OR (A_DEST_UNIT = A_SRC_UNIT) THEN

   A_DEST_VALUE_F := A_SRC_VALUE_F;
   L_RET := FORMATRESULT(A_DEST_VALUE_F, A_DEST_FORMAT ,L_OUT_S_VALUE);
ELSE
   OPEN  C_OUT_F_VALUE(A_SRC_VALUE_F, A_SRC_UNIT, A_DEST_UNIT);
   FETCH C_OUT_F_VALUE INTO L_OUT_F_VALUE;
   IF C_OUT_F_VALUE%NOTFOUND THEN  
      A_DEST_VALUE_F := NULL;
      A_DEST_VALUE_S := 'Conversion error';
      CLOSE C_OUT_F_VALUE;
      RETURN(UNAPIGEN.DBERR_SUCCESS);
   ELSE
      A_DEST_VALUE_F := L_OUT_F_VALUE;
      L_RET := FORMATRESULT(L_OUT_F_VALUE, A_DEST_FORMAT ,L_OUT_S_VALUE);
   END IF;
   CLOSE C_OUT_F_VALUE;
END IF;
L_IN_VALUE_F := A_SRC_VALUE_F;
L_RET_INT := FORMATRESULT(L_IN_VALUE_F , A_SRC_FORMAT, L_FORM_IN_VALUE);

IF L_FORM_IN_VALUE = A_SRC_VALUE_S THEN 
   A_DEST_VALUE_S := L_OUT_S_VALUE;
   RETURN(L_RET);
END IF;


OPEN C_OTHER_SEPER;
FETCH C_OTHER_SEPER INTO L_OTHER_SEPER;
CLOSE C_OTHER_SEPER;

L_FORM_IN_VALUE_WTH_OTH_SEPER := REPLACE(L_FORM_IN_VALUE, LTRIM(TO_CHAR(0, 'D')), L_OTHER_SEPER);
IF L_FORM_IN_VALUE_WTH_OTH_SEPER = A_SRC_VALUE_S THEN 
   A_DEST_VALUE_S := REPLACE(L_OUT_S_VALUE, LTRIM(TO_CHAR(0, 'D')), L_OTHER_SEPER);
   RETURN(L_RET);
END IF;


IF NVL(INSTR(A_SRC_VALUE_S, L_FORM_IN_VALUE),0) >0 THEN
   L_PREFIX := NVL(SUBSTR(A_SRC_VALUE_S, 1, INSTR(A_SRC_VALUE_S, L_FORM_IN_VALUE) -1) ,'');
   L_POSTFIX := NVL(SUBSTR(A_SRC_VALUE_S, INSTR(A_SRC_VALUE_S, L_FORM_IN_VALUE) + LENGTH(L_FORM_IN_VALUE)), '');
   A_DEST_VALUE_S := L_PREFIX || L_OUT_S_VALUE || L_POSTFIX;
ELSE

   IF NVL(INSTR(A_SRC_VALUE_S, L_FORM_IN_VALUE_WTH_OTH_SEPER),0) >0 THEN
      L_PREFIX := NVL(SUBSTR(A_SRC_VALUE_S, 1, INSTR(A_SRC_VALUE_S, L_FORM_IN_VALUE_WTH_OTH_SEPER) -1) ,'');
      L_POSTFIX := NVL(SUBSTR(A_SRC_VALUE_S, INSTR(A_SRC_VALUE_S, L_FORM_IN_VALUE_WTH_OTH_SEPER) + LENGTH(L_FORM_IN_VALUE_WTH_OTH_SEPER)), '');
      A_DEST_VALUE_S := L_PREFIX || REPLACE(L_OUT_S_VALUE, LTRIM(TO_CHAR(0, 'D')), L_OTHER_SEPER) || L_POSTFIX;
   ELSE
   
   
      A_DEST_VALUE_S :=  L_OUT_S_VALUE  ;
   END IF;
END IF;



IF A_DEST_VALUE_F IS NULL AND 
   A_SRC_VALUE_F IS NULL AND 
   ((NVL(A_SRC_UNIT, ' ') = ' ') OR (A_DEST_UNIT = A_SRC_UNIT)) AND
   A_DEST_VALUE_S IS NULL AND
   A_SRC_VALUE_S IS NOT NULL THEN
   A_DEST_VALUE_S := A_SRC_VALUE_S;
END IF;
   
RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   
   
   
   L_SQLERRM := 'src_value_f : ' || NVL(TO_CHAR(A_SRC_VALUE_F),'NULL') ||
                'src_value_s : ' || NVL(A_SRC_VALUE_S,'NULL') ||
                'src_format  : ' || NVL(A_SRC_FORMAT,'NULL') ||
                'src_unit  : ' || NVL(A_SRC_UNIT,'NULL') ||
            'dest_format  : ' || NVL(A_DEST_FORMAT,'NULL') ||
                'dest_unit  : ' || NVL(A_DEST_UNIT,'NULL') ||
                ' oracle error : ' || NVL(TO_CHAR(SQLCODE),'NULL');
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, NVL(UNAPIGEN.P_USER,USER), CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'TransformResult',
           L_SQLERRM);
   L_RET_CODE  := UNAPIGEN.DBERR_DEFVALUETP;  
   IF C_OUT_F_VALUE%ISOPEN THEN
        CLOSE C_OUT_F_VALUE;
   END IF;
   RETURN(L_RET_CODE);
END TRANSFORMRESULT;


FUNCTION FORMATRESULT                      
(A_VALUE_F           IN OUT  NUMBER,       
 A_FORMAT            IN      VARCHAR2,     
 A_VALUE_S           IN OUT  VARCHAR2)     
RETURN NUMBER IS

BEGIN

   L_RET_CODE := UNAPIGEN.READONLYFORMATRESULT(A_VALUE_F, A_FORMAT, A_VALUE_S);
   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   
   
   
   
   L_SQLERRM := 'value_f : ' || NVL(TO_CHAR(A_VALUE_F),'NULL') ||
                ' value_s : ' || NVL(A_VALUE_S,'NULL') ||
                ' format  : ' || NVL(A_FORMAT,'NULL') ||
                ' oracle error : ' || NVL(TO_CHAR(SQLCODE),'NULL');
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, NVL(UNAPIGEN.P_USER,USER), CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'FormatResult',
           L_SQLERRM);
   L_RET_CODE  := UNAPIGEN.DBERR_DEFVALUETP;
   RETURN(L_RET_CODE);
END FORMATRESULT;

FUNCTION READONLYFORMATRESULT              
(A_VALUE_F           IN OUT  NUMBER,       
 A_FORMAT            IN      VARCHAR2,     
 A_VALUE_S           IN OUT  VARCHAR2)     
RETURN NUMBER IS

L_FORMAT                 VARCHAR2(255);
L_FORMAT_TYPE            CHAR(1);
L_FORMAT_VALUE           VARCHAR2(39);
L_DOT_POS                INTEGER;
L_000_POS                INTEGER;
L_999_POS                INTEGER;
L_TO_CHAR_FORMAT         VARCHAR2(39);
L_ROUND_VALUE            NUMBER;
L_PRECISION              NUMBER;
L_EXPONENT               NUMBER;
L_VALUE_S                VARCHAR2(40);
L_VALUE_F                NUMBER;
L_VALUE                  NUMBER;
L_LENGTH                 NUMBER(4);
L_SIGN                   NUMBER;
L_DOT                    CHAR(1);
L_RET_CODE               INTEGER;
L_NUMBEROFDIGITS         INTEGER;
L_NUMBEROFDECIMALS       INTEGER;
L_ZEROS                   VARCHAR2(40) ;
L_NINES                   VARCHAR2(40) ;
L_ERROR_MSG              VARCHAR2(255);
L_TOTAL_DIGITS           INTEGER;
L_FILTER_FLAGS           VARCHAR2(39);
L_DIGITS_BEFORE_COMMA    INTEGER;
L_FORMAT_DIGITS          INTEGER;
L_SPRINTF_FORMAT_TYPE    CHAR(1);
L_INDEX                  INTEGER;
L_DECIMAL_SEPARATOR      CHAR(1);

CURSOR C_LOOKUP_F_CURSOR (A_VALUE_S VARCHAR2, A_ALT_VALUE_S VARCHAR2, A_LU VARCHAR2) IS
   SELECT NUM_VAL
   FROM UTLU
   WHERE LU=NVL(A_LU,'L')
      AND (STRING_VAL = A_VALUE_S
           OR STRING_VAL = A_ALT_VALUE_S)
   ORDER BY STRING_VAL;

CURSOR C_LOOKUP_S_CURSOR (A_VALUE_F NUMBER, A_LU VARCHAR2) IS
   SELECT STRING_VAL
   FROM UTLU
   WHERE LU = NVL(A_LU,'L')
   AND NUM_VAL = A_VALUE_F
   ORDER BY STRING_VAL;

CURSOR C_VFORMAT_CURSOR (A_RANGE_NAME VARCHAR2) IS
   SELECT *
   FROM UTVFORMAT
   WHERE RANGE_NAME = A_RANGE_NAME
   ORDER BY SEQ;
L_VFORMAT_REC  C_VFORMAT_CURSOR%ROWTYPE;
L_SKIP         BOOLEAN;

BEGIN
   L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;

   
   L_DECIMAL_SEPARATOR := LTRIM(TO_CHAR(0,'D'));

   
   
   
   L_FORMAT := NVL(A_FORMAT, P_DEFAULT_FORMAT);

   
   
   
   
   
   IF UNAPIGEN.P_DBA_NAME IS NULL AND
      L_FORMAT IS NULL THEN
      BEGIN
         OPEN C_SYSTEM ('DEFAULT_FORMAT');
         FETCH C_SYSTEM INTO L_FORMAT;
         IF C_SYSTEM%NOTFOUND THEN
            CLOSE C_SYSTEM;
         END IF;
         CLOSE C_SYSTEM;
      EXCEPTION
      WHEN OTHERS THEN
         L_FORMAT := '';
      END;
   END IF;

   
   
   
   IF LTRIM(RTRIM(A_VALUE_S)) IS NULL THEN
      
      
      
      
      
      
      
      
      
      
      
      IF A_VALUE_F IS NOT NULL THEN
         L_FORMAT_TYPE := SUBSTR(L_FORMAT, 1, 1);
         L_FORMAT_VALUE := SUBSTR(L_FORMAT, 2);

         
         
         
         
         
         
         
         IF L_FORMAT_TYPE IN ('F', 'f', 'E', 'I') THEN
            BEGIN
               
               L_FILTER_FLAGS := L_FORMAT_VALUE;
               LOOP
                  IF SUBSTR(L_FILTER_FLAGS,1,1) IN (' ','0','+','-') THEN
                     L_FILTER_FLAGS := SUBSTR(L_FILTER_FLAGS, 2);
                  ELSE
                     EXIT;
                  END IF;
               END LOOP;

               
               L_DOT_POS := INSTR(L_FILTER_FLAGS, '.');
               L_TOTAL_DIGITS := NULL;
               IF L_DOT_POS = 0 THEN
                  L_TOTAL_DIGITS := TO_NUMBER(L_FILTER_FLAGS);
               ELSIF L_DOT_POS > 1 THEN
                  L_TOTAL_DIGITS := TO_NUMBER(SUBSTR(L_FILTER_FLAGS,1,L_DOT_POS-1));
               END IF;
               IF L_TOTAL_DIGITS IS NULL THEN
                  L_TOTAL_DIGITS := 35;
               END IF;

               
               IF A_VALUE_F <> 0 THEN
                  BEGIN
                     L_DIGITS_BEFORE_COMMA := TRUNC(LOG(10, ABS(A_VALUE_F)))+1;
                   EXCEPTION
                   WHEN OTHERS THEN 
                      L_DIGITS_BEFORE_COMMA := 1;
                   END;
               ELSE
                  L_DIGITS_BEFORE_COMMA := 1;
               END IF;

            EXCEPTION
            WHEN VALUE_ERROR THEN
               L_RET_CODE  := UNAPIGEN.DBERR_FLOATTOSTRING;
            END;

            
            IF L_FORMAT_TYPE IN ('F','f') THEN
               L_SPRINTF_FORMAT_TYPE := 'f';
            ELSIF L_FORMAT_TYPE = ('E') THEN
               L_SPRINTF_FORMAT_TYPE := 'e';
            ELSE
               L_SPRINTF_FORMAT_TYPE := 'd';
            END IF;

            L_RET_CODE := MINISPRINTF('%'||L_FORMAT_VALUE||L_SPRINTF_FORMAT_TYPE, A_VALUE_F, A_VALUE_S, L_ERROR_MSG);

            IF LENGTH(A_VALUE_S)  > L_TOTAL_DIGITS THEN
               A_VALUE_S := CX_RPAD('#', L_TOTAL_DIGITS, '#');
            END IF;

            IF L_FORMAT_TYPE = 'I' THEN
               IF ABS(A_VALUE_F) >  2147483647 THEN
                  
                  A_VALUE_S := CX_RPAD('#', L_TOTAL_DIGITS, '#');
               END IF;
               A_VALUE_F := FLOOR(A_VALUE_F) ; 
            END IF;

         ELSIF L_FORMAT_TYPE = 'N' THEN
            BEGIN
               L_FILTER_FLAGS := L_FORMAT_VALUE;
               L_DOT_POS := INSTR(L_FILTER_FLAGS, '.');
               L_TOTAL_DIGITS := NULL;
               IF L_DOT_POS = 0 THEN
                  L_PRECISION := TO_NUMBER(L_FILTER_FLAGS);
               ELSIF L_DOT_POS > 1 THEN
                  L_PRECISION := TO_NUMBER(SUBSTR(L_FILTER_FLAGS,1,L_DOT_POS-1));
               END IF;
         
               IF ( L_PRECISION < 1 ) OR ( L_PRECISION IS NULL ) THEN
                  L_PRECISION := 3 ;
               ELSIF L_PRECISION > 9 THEN
                  L_PRECISION := 9 ;
               END IF ;

               L_ZEROS := CX_RPAD('0', L_PRECISION, '0');
               L_NINES := CX_RPAD('9', L_PRECISION, '9');

               A_VALUE_S := RPAD(REPLACE(TO_CHAR(A_VALUE_F), ',', '.'), 20, '0') ; 
               L_DOT_POS := INSTR(A_VALUE_S, '.');
               L_000_POS := INSTR(A_VALUE_S, L_ZEROS);
               L_999_POS := INSTR(A_VALUE_S, L_NINES);

               L_FORMAT := '%.' || TO_CHAR(20 - L_DOT_POS) || 'f' ; 
               L_EXPONENT := 2 ;

               IF ( ( ( L_000_POS > 0 ) AND ( L_000_POS > L_DOT_POS ) ) AND
                    ( ( L_999_POS > 0 ) AND ( L_999_POS > L_DOT_POS ) )     ) THEN
                  IF ( L_000_POS < L_999_POS ) THEN
                     L_EXPONENT := L_000_POS - L_DOT_POS + ( L_PRECISION - 1) ;
                     L_FORMAT_VALUE := L_EXPONENT - L_PRECISION ;
                  ELSE
                     L_EXPONENT := L_999_POS - L_DOT_POS ;
                     L_FORMAT_VALUE := L_EXPONENT - 1;
                  END IF ;
                  L_FORMAT := '%.'|| L_FORMAT_VALUE || 'f' ;
               ELSIF ( L_000_POS > L_DOT_POS ) THEN
                  L_EXPONENT := L_000_POS - L_DOT_POS + ( L_PRECISION - 1 ) ;
                  L_FORMAT_VALUE := L_EXPONENT - L_PRECISION;
                  L_FORMAT := '%.'|| L_FORMAT_VALUE || 'f' ;
               ELSIF ( L_999_POS > L_DOT_POS ) THEN
                  L_EXPONENT := L_999_POS - L_DOT_POS;
                  L_FORMAT_VALUE := L_EXPONENT - 1;
                  L_FORMAT := '%.'|| L_FORMAT_VALUE || 'f';
               END IF ;  

               
               L_VALUE := A_VALUE_F;
               L_VALUE := L_VALUE *  POWER(10, L_EXPONENT) + 0.5 ;
               L_VALUE := FLOOR(L_VALUE) ;
               L_VALUE := L_VALUE / POWER (10, L_EXPONENT);
               L_RET_CODE := MINISPRINTF(L_FORMAT, L_VALUE, A_VALUE_S, L_ERROR_MSG);
 
               
               IF L_DOT_POS > 0
               THEN
                  A_VALUE_S := SUBSTR (A_VALUE_S, 1, L_DOT_POS) || RTRIM(SUBSTR (A_VALUE_S, L_DOT_POS + 1), '0');

                  IF ( INSTR (A_VALUE_S, '.') = LENGTH(A_VALUE_S) ) THEN
                     A_VALUE_S := SUBSTR (A_VALUE_S, 1, LENGTH(A_VALUE_S) - 1) ;
                  END IF ;
               END IF;

            EXCEPTION
            WHEN VALUE_ERROR THEN
               L_RET_CODE  := UNAPIGEN.DBERR_FLOATTOSTRING;
            END;
         ELSIF L_FORMAT_TYPE = 'r' THEN                           
            BEGIN
               
               L_PRECISION := TO_NUMBER(SUBSTR(L_FORMAT, 3));

               L_VALUE := A_VALUE_F;

               IF L_VALUE <> 0 THEN
                  IF L_VALUE < 0 THEN
                     L_SIGN := -1 ;
                     L_VALUE := -L_VALUE;
                  ELSE
                     L_SIGN := +1 ;
                  END IF;

                  IF L_VALUE >= 1  THEN
                     L_EXPONENT := FLOOR(ABS(LOG(10, L_VALUE))) - L_PRECISION + 1 ;
                  ELSE
                     L_EXPONENT := -(FLOOR(ABS(LOG(10, L_VALUE))) + L_PRECISION) ;
                  END IF;

                  L_VALUE := L_VALUE /  POWER(10, L_EXPONENT);
                  L_VALUE := FLOOR(L_VALUE + 0.5) ;
                  L_VALUE := L_VALUE * POWER (10, L_EXPONENT);

                  L_NUMBEROFDIGITS := 0;
                  L_NUMBEROFDECIMALS := 0;

                  IF L_VALUE <> 0 THEN
                     IF LOG(10, L_VALUE) >= 0 THEN
                        L_NUMBEROFDIGITS := FLOOR(ABS(LOG(10, L_VALUE))) + 1 ;
                        IF L_PRECISION -  L_NUMBEROFDIGITS < 0 THEN
                           L_NUMBEROFDECIMALS := 0 ;
                        ELSE
                           L_NUMBEROFDECIMALS := L_PRECISION - L_NUMBEROFDIGITS ;
                        END IF;
                     ELSE
                        
                        L_DIGITS_BEFORE_COMMA := 1 ;
                        L_NUMBEROFDECIMALS :=  -FLOOR(LOG(10,L_VALUE)) ;
                        L_NUMBEROFDECIMALS := L_NUMBEROFDECIMALS + L_PRECISION - 1 ;
                     END IF;

                     L_FORMAT_DIGITS := L_NUMBEROFDIGITS + L_NUMBEROFDECIMALS;

                     L_FORMAT := '%' || L_FORMAT_DIGITS || '.' || L_NUMBEROFDECIMALS || 'f';

                  ELSE
                     
                     L_FORMAT := '%1.0f';
                  END IF;

                  L_VALUE := L_VALUE * L_SIGN;

                  L_RET_CODE := MINISPRINTF(L_FORMAT, L_VALUE, A_VALUE_S, L_ERROR_MSG);
               ELSE
                 
                 A_VALUE_S := '0';
                 L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
               END IF;

            EXCEPTION
            WHEN VALUE_ERROR THEN
               L_RET_CODE  := UNAPIGEN.DBERR_FLOATTOSTRING;
            END;

         ELSIF L_FORMAT_TYPE = 'R' THEN                                 
            BEGIN
               L_DOT_POS := INSTR(L_FORMAT_VALUE, '.');
               L_ROUND_VALUE := TO_NUMBER(REPLACE(L_FORMAT_VALUE,'.',L_DECIMAL_SEPARATOR));
               IF L_ROUND_VALUE = 0 THEN
                  L_ROUND_VALUE := 1;
               END IF;
               L_VALUE_F := ROUND((A_VALUE_F/L_ROUND_VALUE)) * L_ROUND_VALUE;

               BEGIN
                   
                   L_NUMBEROFDIGITS := TRUNC(LOG(10, ABS(L_VALUE_F)))+1;
               EXCEPTION
               WHEN OTHERS THEN 
                  L_NUMBEROFDIGITS := 30;
               END;
               L_TO_CHAR_FORMAT := RTRIM(CX_LPAD('9', L_NUMBEROFDIGITS, '9'));
               IF L_DOT_POS <> 0 THEN
                  L_NUMBEROFDECIMALS := LENGTH(LTRIM(RTRIM(SUBSTR(L_FORMAT,L_DOT_POS+1))));
                  L_TO_CHAR_FORMAT := L_TO_CHAR_FORMAT
                                   || '0D'
                                   || RTRIM(CX_LPAD(' ', L_NUMBEROFDECIMALS , '0'));
               END IF;
               A_VALUE_S := LTRIM(TO_CHAR(L_VALUE_F, L_TO_CHAR_FORMAT));
            EXCEPTION
            WHEN VALUE_ERROR THEN
               L_RET_CODE  := UNAPIGEN.DBERR_FLOATTOSTRING;
            END;
         ELSIF L_FORMAT_TYPE = 'L' THEN                             
            
            
            
            
            OPEN C_LOOKUP_S_CURSOR(A_VALUE_F, L_FORMAT_VALUE);
            FETCH C_LOOKUP_S_CURSOR
            INTO L_VALUE_S;
            IF C_LOOKUP_S_CURSOR%FOUND THEN
               A_VALUE_S := L_VALUE_S;
            ELSE
               
               
               IF L_FORMAT IS NOT NULL AND
                  SUBSTR(L_FORMAT,1,1) <> 'L' THEN
                  L_RET_CODE := UNAPIGEN.READONLYFORMATRESULT(A_VALUE_S, L_FORMAT, A_VALUE_F);
               ELSE
                  A_VALUE_S := A_VALUE_F;
               END IF;
            END IF;
            CLOSE C_LOOKUP_S_CURSOR;

         ELSIF L_FORMAT_TYPE = 'V' THEN                            
            
            
            
            
            OPEN C_VFORMAT_CURSOR(L_FORMAT_VALUE);            
            
            LOOP
               FETCH C_VFORMAT_CURSOR
               INTO L_VFORMAT_REC;
               L_SKIP := FALSE;               
               IF C_VFORMAT_CURSOR%NOTFOUND THEN
                  
                  L_VFORMAT_REC.FORMAT := L_FORMAT; 
               ELSE
                  IF L_VFORMAT_REC.RANGE_MIN IS NOT NULL THEN
                     
                     IF L_VFORMAT_REC.RANGE_MIN_BOUNDARY = ']' THEN
                        IF A_VALUE_F <= L_VFORMAT_REC.RANGE_MIN THEN
                           
                           L_SKIP := TRUE;
                        END IF;                           
                     ELSIF L_VFORMAT_REC.RANGE_MIN_BOUNDARY = '[' THEN
                        IF A_VALUE_F < L_VFORMAT_REC.RANGE_MIN THEN
                           
                           L_SKIP := TRUE;
                        END IF;                                                   
                     ELSE
                        
                        L_SKIP := TRUE;
                     END IF;
                  END IF;
                  
                  IF NOT L_SKIP THEN
                     IF L_VFORMAT_REC.RANGE_MAX IS NOT NULL THEN
                        
                        IF L_VFORMAT_REC.RANGE_MAX_BOUNDARY = ']' THEN
                           IF A_VALUE_F > L_VFORMAT_REC.RANGE_MAX THEN
                              
                              L_SKIP := TRUE;
                           END IF;                           
                        ELSIF L_VFORMAT_REC.RANGE_MAX_BOUNDARY = '[' THEN
                           IF A_VALUE_F >= L_VFORMAT_REC.RANGE_MAX THEN
                              
                              L_SKIP := TRUE;
                           END IF;                                                   
                        ELSE
                           
                           L_SKIP := TRUE;
                        END IF;
                     END IF;                  
                  END IF;
               END IF;
                              
               
               
               
               IF NOT L_SKIP THEN
                  IF L_VFORMAT_REC.FORMAT IS NOT NULL AND
                     SUBSTR(L_VFORMAT_REC.FORMAT,1,1) <> 'V' THEN

                     L_RET_CODE := UNAPIGEN.READONLYFORMATRESULT(A_VALUE_F, L_VFORMAT_REC.FORMAT, A_VALUE_S);
                  ELSE
                     A_VALUE_S := A_VALUE_F;
                  END IF;
                  EXIT;
               END IF;
            END LOOP;
            CLOSE C_VFORMAT_CURSOR;
            
         ELSE 
            BEGIN
            A_VALUE_S := A_VALUE_F;

            EXCEPTION
            WHEN VALUE_ERROR THEN
               L_RET_CODE  := UNAPIGEN.DBERR_FLOATTOSTRING;
            END;
         END IF;
      END IF;
   ELSE
      
      
      
      
      
      
      
      
      
      
      
      
      IF A_VALUE_F IS NOT NULL OR L_FORMAT ='C' THEN
         L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
      ELSE
         L_FORMAT_TYPE := SUBSTR(L_FORMAT, 1, 1);
         IF L_FORMAT_TYPE = 'C' THEN
            L_FORMAT_VALUE := SUBSTR(L_FORMAT, 2);
            BEGIN
               A_VALUE_S := SUBSTR(A_VALUE_S,1,TO_NUMBER(L_FORMAT_VALUE));
            EXCEPTION
            WHEN VALUE_ERROR THEN
               L_RET_CODE  := UNAPIGEN.DBERR_FLOATTOSTRING;
            END;
         ELSIF L_FORMAT_TYPE = 'L' THEN
            OPEN C_LOOKUP_F_CURSOR(A_VALUE_S, A_VALUE_S, SUBSTR(L_FORMAT,2));
            FETCH C_LOOKUP_F_CURSOR
            INTO L_VALUE_F;
            IF C_LOOKUP_F_CURSOR%FOUND THEN
               A_VALUE_F := L_VALUE_F;
            ELSE
               
               
               
               
               
               
               
               
               
               L_VALUE_S := A_VALUE_S;
               L_VALUE_S := REPLACE(L_VALUE_S, ' ', '');
               L_VALUE_S := REPLACE(L_VALUE_S, '<', '');
               L_VALUE_S := REPLACE(L_VALUE_S, '>', '');
               L_VALUE_S := REPLACE(L_VALUE_S, '=', '');
               L_VALUE_S := REPLACE(L_VALUE_S, UNISTR('\00B1'), '');
               L_VALUE_S := REPLACE(L_VALUE_S, '~', '');

               BEGIN
                  A_VALUE_F := L_VALUE_S;
               EXCEPTION
               WHEN VALUE_ERROR THEN
                  A_VALUE_F := NULL;
               END;
            END IF;
            CLOSE C_LOOKUP_F_CURSOR;
         ELSE
            
            
            
            
            
            
            
            
            

            L_VALUE_S := A_VALUE_S;
            L_VALUE_S := REPLACE(L_VALUE_S, ' ', '');
            L_VALUE_S := REPLACE(L_VALUE_S, '<', '');
            L_VALUE_S := REPLACE(L_VALUE_S, '>', '');
            L_VALUE_S := REPLACE(L_VALUE_S, '=', '');
            L_VALUE_S := REPLACE(L_VALUE_S, UNISTR('\00B1'), '');
            L_VALUE_S := REPLACE(L_VALUE_S, '~', '');

            BEGIN
               A_VALUE_F := L_VALUE_S;

            EXCEPTION
            WHEN VALUE_ERROR THEN
               OPEN C_LOOKUP_F_CURSOR(A_VALUE_S, L_VALUE_S, SUBSTR(L_FORMAT,2));
               FETCH C_LOOKUP_F_CURSOR
               INTO L_VALUE_F;
               IF C_LOOKUP_F_CURSOR%FOUND THEN
                  A_VALUE_F := L_VALUE_F;
               END IF;
               CLOSE C_LOOKUP_F_CURSOR;
            END;
         END IF;
      END IF;
   END IF;
   RETURN(L_RET_CODE);
EXCEPTION
WHEN OTHERS THEN
   IF C_SYSTEM%ISOPEN THEN
      CLOSE C_SYSTEM;
   END IF;
   IF C_LOOKUP_F_CURSOR%ISOPEN THEN
      CLOSE C_LOOKUP_F_CURSOR;
   END IF;
   IF C_LOOKUP_S_CURSOR%ISOPEN THEN
      CLOSE C_LOOKUP_S_CURSOR;
   END IF;
   IF C_VFORMAT_CURSOR%ISOPEN THEN
      CLOSE C_VFORMAT_CURSOR;
   END IF;
   RAISE; 
   RETURN(L_RET_CODE);
END READONLYFORMATRESULT;

FUNCTION SQLFORMATRESULT                   
(A_VALUE_F           IN      NUMBER,       
 A_FORMAT            IN      VARCHAR2)     
RETURN VARCHAR2 IS

L_VALUE_S  VARCHAR2(40);
L_VALUE_F  NUMBER;
L_RET_CODE INTEGER;

BEGIN

   L_VALUE_S := NULL;
   L_VALUE_F := A_VALUE_F;
   L_RET_CODE := UNAPIGEN.READONLYFORMATRESULT(L_VALUE_F, A_FORMAT, L_VALUE_S);
   RETURN(L_VALUE_S);

END SQLFORMATRESULT;

FUNCTION SQLFORMATRESULT                   
(A_VALUE_S           IN      VARCHAR2,     
 A_FORMAT            IN      VARCHAR2)     
RETURN NUMBER IS

L_VALUE_S  VARCHAR2(40);
L_VALUE_F  NUMBER;
L_RET_CODE INTEGER;

BEGIN

   L_VALUE_F := NULL;
   L_VALUE_S := A_VALUE_S;
   L_RET_CODE := UNAPIGEN.READONLYFORMATRESULT(L_VALUE_F, A_FORMAT, L_VALUE_S);
   RETURN(L_VALUE_F);

END SQLFORMATRESULT;

FUNCTION SQLRESULTVALUE                   
(A_VALUE_S           IN      VARCHAR2,     
 A_FORMAT            IN      VARCHAR2)     
RETURN VARCHAR2 IS

L_LAST4CHAR  VARCHAR2(4);
L_DOCNAME    VARCHAR2(40);
L_RETTEXT    VARCHAR2(2000);

CURSOR L_LONGTEXT_CURSOR IS
   SELECT TEXT_LINE, LINE_NBR
   FROM UTLONGTEXT
   WHERE DOC_NAME=A_VALUE_S
   ORDER BY LINE_NBR ASC;
L_LONGTEXT_REC  L_LONGTEXT_CURSOR%ROWTYPE;

BEGIN

   
   
   
   L_LAST4CHAR := SUBSTR(A_VALUE_S, -4);
   IF L_LAST4CHAR IN ('#TXT', '#LNK', '#IMG', '#BLB') THEN

      IF L_LAST4CHAR = '#TXT' THEN
         L_RETTEXT := NULL;
         BEGIN
            FOR L_LONGTEXT_REC IN L_LONGTEXT_CURSOR LOOP
               
               
               IF SUBSTR(L_LONGTEXT_REC.TEXT_LINE, -2) = CHR(13) || CHR(10) THEN
                  L_RETTEXT := L_RETTEXT || L_LONGTEXT_REC.TEXT_LINE;
               ELSE
                  L_RETTEXT := L_RETTEXT || L_LONGTEXT_REC.TEXT_LINE || CHR(13) || CHR(10);
               END IF;
            END LOOP;
         EXCEPTION
         WHEN OTHERS THEN
            NULL;
         END;
      ELSIF L_LAST4CHAR= '#LNK' THEN
         FOR L_LONGTEXT_REC IN L_LONGTEXT_CURSOR LOOP
            IF L_LONGTEXT_REC.LINE_NBR = 1 THEN
               L_RETTEXT := UNAPIGEN.P_DOC_LNK_URL;
               L_RETTEXT := REPLACE(L_RETTEXT, '~1~', L_LONGTEXT_REC.TEXT_LINE);
            ELSIF L_LONGTEXT_REC.LINE_NBR = 2 THEN
               L_RETTEXT := REPLACE(L_RETTEXT, '~2~', L_LONGTEXT_REC.TEXT_LINE);
            ELSE
               EXIT;
            END IF;
         END LOOP;
      ELSIF L_LAST4CHAR= '#IMG' THEN
         FOR L_LONGTEXT_REC IN L_LONGTEXT_CURSOR LOOP
            IF L_LONGTEXT_REC.LINE_NBR = 1 THEN
               L_RETTEXT := UNAPIGEN.P_DOC_IMG_URL;
               L_RETTEXT := REPLACE(L_RETTEXT, '~1~', L_LONGTEXT_REC.TEXT_LINE);
            ELSE
               EXIT;
            END IF;
         END LOOP;
      ELSIF L_LAST4CHAR= '#BLB' THEN
         BEGIN
            SELECT URL
            INTO L_RETTEXT
            FROM UTBLOB
            WHERE ID=A_VALUE_S;
         EXCEPTION
         WHEN NO_DATA_FOUND THEN
            NULL;
         WHEN TOO_MANY_ROWS THEN
            NULL;
         WHEN OTHERS THEN
            RAISE;
         END;
      END IF;
      RETURN (L_RETTEXT);
   ELSE
      RETURN(A_VALUE_S);
   END IF;

END SQLRESULTVALUE;

FUNCTION GETAPIVERSION
(A_API_VERSION      OUT       VARCHAR2)  
RETURN NUMBER IS

BEGIN
   IF P_VERSION IS NULL THEN
      BEGIN
         SELECT SETTING_VALUE
         INTO P_VERSION
         FROM UTSYSTEM
         WHERE SETTING_NAME = 'VERSION';

      EXCEPTION
      WHEN NO_DATA_FOUND THEN
         A_API_VERSION := 'No version in utsystem';
         P_VERSION := NULL;
         RETURN (DBERR_SYSDEFAULTS);
      WHEN OTHERS THEN
         A_API_VERSION := 'Major problem '||TO_CHAR(SQLCODE);
         P_VERSION := NULL;
         RETURN (DBERR_SYSDEFAULTS);
      END;
   END IF;

   A_API_VERSION := P_VERSION;
   RETURN(DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (P_CLIENT_ID, P_APPLIC_NAME, NVL(UNAPIGEN.P_USER,USER), CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'GetApiVersion',
              L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      RETURN(DBERR_GENFAIL);
END GETAPIVERSION;

FUNCTION GETERROR                                     
(A_CLIENT_ID          OUT       VC20_TABLE_TYPE,      
 A_APPLIC             OUT       VC8_TABLE_TYPE,       
 A_WHO                OUT       VC20_TABLE_TYPE,      
 A_LOGDATE            OUT       DATE_TABLE_TYPE,      
 A_API_NAME           OUT       VC40_TABLE_TYPE,      
 A_ERROR_MSG          OUT       VC255_TABLE_TYPE,     
 A_NR_OF_ROWS         IN OUT    NUMBER,               
 A_WHERE_CLAUSE       IN        VARCHAR2,             
 A_NEXT_ROWS          IN        NUMBER)               
RETURN NUMBER IS

L_CLIENT_ID          VARCHAR2(20);
L_APPLIC             VARCHAR2(8);
L_WHO                VARCHAR2(20);
L_LOGDATE            TIMESTAMP WITH TIME ZONE;
L_API_NAME           VARCHAR2(40);
L_ERROR_MSG          VARCHAR2(255);
L_LOGSTRING          BOOLEAN;

BEGIN

   L_LOGSTRING := FALSE;
   
   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_GETERROR_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_GETERROR_CURSOR);
         P_GETERROR_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;
   
   
   IF A_NEXT_ROWS = 1 THEN
      IF P_GETERROR_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      L_SQL_STRING := 'SELECT client_id, applic, who, logdate, ' ||
                      'api_name, error_msg FROM uterror ' || A_WHERE_CLAUSE; 
                      
      IF P_GETERROR_CURSOR IS NULL THEN
         P_GETERROR_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;
      
      L_LOGSTRING := TRUE;
      DBMS_SQL.PARSE(P_GETERROR_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      L_LOGSTRING := FALSE;

      DBMS_SQL.DEFINE_COLUMN(P_GETERROR_CURSOR, 1, L_CLIENT_ID, 20);
      DBMS_SQL.DEFINE_COLUMN(P_GETERROR_CURSOR, 2, L_APPLIC, 8);
      DBMS_SQL.DEFINE_COLUMN(P_GETERROR_CURSOR, 3, L_WHO, 20);
      DBMS_SQL.DEFINE_COLUMN(P_GETERROR_CURSOR, 4, L_LOGDATE);
      DBMS_SQL.DEFINE_COLUMN(P_GETERROR_CURSOR, 5, L_API_NAME, 40);
      DBMS_SQL.DEFINE_COLUMN(P_GETERROR_CURSOR, 6, L_ERROR_MSG, 255);
      
      L_LOGSTRING := TRUE;
      L_RESULT := DBMS_SQL.EXECUTE(P_GETERROR_CURSOR);
      L_LOGSTRING := FALSE;
      
   END IF;
   
   L_RESULT := DBMS_SQL.FETCH_ROWS(P_GETERROR_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_GETERROR_CURSOR, 1, L_CLIENT_ID);
      DBMS_SQL.COLUMN_VALUE(P_GETERROR_CURSOR, 2, L_APPLIC);
      DBMS_SQL.COLUMN_VALUE(P_GETERROR_CURSOR, 3, L_WHO);
      DBMS_SQL.COLUMN_VALUE(P_GETERROR_CURSOR, 4, L_LOGDATE);
      DBMS_SQL.COLUMN_VALUE(P_GETERROR_CURSOR, 5, L_API_NAME);
      DBMS_SQL.COLUMN_VALUE(P_GETERROR_CURSOR, 6, L_ERROR_MSG);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_CLIENT_ID (L_FETCHED_ROWS) := L_CLIENT_ID;
      A_APPLIC (L_FETCHED_ROWS) := L_APPLIC;
      A_WHO (L_FETCHED_ROWS) := L_WHO;
      A_LOGDATE (L_FETCHED_ROWS) := L_LOGDATE;
      A_API_NAME (L_FETCHED_ROWS) := L_API_NAME;
      A_ERROR_MSG (L_FETCHED_ROWS) := L_ERROR_MSG;
      
      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_GETERROR_CURSOR);
      END IF;
   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_GETERROR_CURSOR);
       P_GETERROR_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_GETERROR_CURSOR);
      P_GETERROR_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   L_SQLERRM := SQLERRM;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
           'GetError', L_SQLERRM);
   IF L_SQL_STRING IS NOT NULL AND
      L_LOGSTRING THEN
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetError', '(SQL)'||SUBSTR(L_SQL_STRING,1,200));
   END IF;
   UNAPIGEN.U4COMMIT;
   IF DBMS_SQL.IS_OPEN (P_GETERROR_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (P_GETERROR_CURSOR);
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETERROR;

FUNCTION DELETEERROR                    
(A_WHERE_CLAUSE      IN   VARCHAR2)     
RETURN NUMBER IS

L_ERROR_CURSOR       INTEGER;

BEGIN

   IF BEGINTXN(P_SINGLE_API_TXN) <> P_TXN_ERROR THEN
      RAISE STPERROR;
   END IF;

   L_SQL_STRING := 'DELETE FROM uterror ' || A_WHERE_CLAUSE; 

   L_ERROR_CURSOR := DBMS_SQL.OPEN_CURSOR;
   DBMS_SQL.PARSE(L_ERROR_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   L_RESULT := DBMS_SQL.EXECUTE(L_ERROR_CURSOR);
   DBMS_SQL.CLOSE_CURSOR(L_ERROR_CURSOR);

   IF ENDTXN <> DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      LOGERROR('DeleteError', SQLERRM);
   END IF;
   IF DBMS_SQL.IS_OPEN(L_ERROR_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_ERROR_CURSOR);
   END IF;
   RETURN(ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'DeleteError'));
END DELETEERROR;

FUNCTION REQUESTLOCK                                            
(A_LOCKNAME                   IN VARCHAR2,
 A_RELEASE_ON_TRANSACTION_END IN CHAR,
 A_TIMEOUT                    IN NUMBER)
RETURN NUMBER IS

L_LOCKHANDLE                  VARCHAR2(200);
L_LOCKID                      NUMBER;
L_LOCKERROR                   INTEGER;
L_LOCKACTION                  VARCHAR2(20);
L_RELEASE_ON_TRANSACTION_END  BOOLEAN;

CURSOR C_LOCKID(A_LOCKNAME VARCHAR2) IS
   SELECT LOCKID
   FROM SYS.DBMS_LOCK_ALLOCATED
   WHERE NAME = A_LOCKNAME;

BEGIN

   
   
   
   
   
   
   
   L_SQLERRM := NULL;
   
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_LOCKNAME, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_RELEASE_ON_TRANSACTION_END, ' ') NOT IN ('0', '1') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      L_SQLERRM := 'a_release_on_transaction_end not 0 and not 1';
      RAISE STPERROR;
   END IF;
   
   
   OPEN C_LOCKID(A_LOCKNAME);
   FETCH C_LOCKID 
   INTO L_LOCKID;

   IF C_LOCKID%NOTFOUND THEN
      
      
      DBMS_LOCK.ALLOCATE_UNIQUE(A_LOCKNAME, L_LOCKHANDLE, 68*365*24*60*60);

      
      CLOSE C_LOCKID;
      OPEN C_LOCKID(A_LOCKNAME);
      FETCH C_LOCKID 
      INTO L_LOCKID;
      IF C_LOCKID%NOTFOUND THEN
         CLOSE C_LOCKID;
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
         RAISE STPERROR;
      END IF;
   END IF;
   CLOSE C_LOCKID;

   IF A_RELEASE_ON_TRANSACTION_END = '1' THEN
      L_RELEASE_ON_TRANSACTION_END := TRUE;
   ELSE
      L_RELEASE_ON_TRANSACTION_END := FALSE;
   END IF;
   
   
   L_LOCKERROR := 0;
   L_RET_CODE := DBMS_LOCK.REQUEST(TO_CHAR(L_LOCKID), DBMS_LOCK.X_MODE, 
                                   A_TIMEOUT, L_RELEASE_ON_TRANSACTION_END);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      IF L_RET_CODE = 1 THEN 
         L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
      ELSIF L_RET_CODE = 4 THEN  
         L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
      ELSE
         L_LOCKERROR  := L_RET_CODE;
         L_LOCKACTION := 'requesting lock';      
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
         RAISE STPERROR;
      END IF;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(L_RET_CODE);
   
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('RequestLock', SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('RequestLock', L_SQLERRM); 
   END IF;
   IF L_LOCKERROR<>0 THEN
      IF L_LOCKERROR = 1 THEN
         UNAPIGEN.LOGERROR('RequestLock', 
                           'Timeout for lock on '|| A_LOCKNAME ||' used timeout : '||
                           TO_CHAR(A_TIMEOUT)||' seconds while '||
                           L_LOCKACTION);
      ELSIF L_LOCKERROR = 2 THEN
         UNAPIGEN.LOGERROR('RequestLock', 
                           'Deadlock detected while attempting to lock on '||
                           A_LOCKNAME ||' while '||L_LOCKACTION );
      ELSIF L_LOCKERROR = 3 THEN
         UNAPIGEN.LOGERROR('RequestLock', 
                           'Parameter error for DBMS_LOCK call for '||
                           A_LOCKNAME ||' while '||L_LOCKACTION );
      ELSIF L_LOCKERROR = 4 THEN
         UNAPIGEN.LOGERROR('RequestLock', 
                           'Attempt to release a lock not owned by session for '||
                           A_LOCKNAME ||' ,lockaction : '||L_LOCKACTION);
      ELSIF L_LOCKERROR = 5 THEN
         UNAPIGEN.LOGERROR('RequestLock', 
                           'Invalid lock handle for '||
                           A_LOCKNAME || ' : ' || NVL(TO_CHAR(L_LOCKID), 'NULL')||
                           ' lockaction : '||L_LOCKACTION );
      END IF;
   END IF;
   IF C_LOCKID%ISOPEN THEN
      CLOSE C_LOCKID;
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'RequestLock')); 
END REQUESTLOCK;

FUNCTION RELEASELOCK                                            
(A_LOCKNAME                   IN VARCHAR2,
 A_TIMEOUT                    IN NUMBER)
RETURN NUMBER IS

L_LOCKHANDLE                  VARCHAR2(200);
L_LOCKID                      INTEGER;
L_LOCKERROR                   INTEGER;
L_LOCKACTION                  VARCHAR2(20);

CURSOR C_LOCKID(A_LOCKNAME VARCHAR2) IS
   SELECT LOCKID
   FROM SYS.DBMS_LOCK_ALLOCATED
   WHERE NAME = A_LOCKNAME;

BEGIN

   
   
   
   
   
   
   
   
   L_SQLERRM := NULL;
   L_LOCKACTION := '';      
   
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_LOCKNAME, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;
   
   
   OPEN C_LOCKID(A_LOCKNAME);
   FETCH C_LOCKID 
   INTO L_LOCKID;

   IF C_LOCKID%NOTFOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR;
   END IF;
   CLOSE C_LOCKID;
   
   
   L_LOCKERROR := 0;
   L_LOCKACTION := 'releasing lock';      
   L_LOCKERROR := DBMS_LOCK.RELEASE(TO_CHAR(L_LOCKID));
   IF L_LOCKERROR <> UNAPIGEN.DBERR_SUCCESS THEN
      L_RET_CODE := L_LOCKERROR;
      L_SQLERRM :=  'Major error : Releasing lock '||A_LOCKNAME||' returned '||TO_CHAR(L_RET_CODE)||' lockid '||TO_CHAR(L_LOCKID);
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE; 
      RAISE STPERROR;         
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(L_RET_CODE);
   
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('ReleaseLock', SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('ReleaseLock', L_SQLERRM); 
   END IF;
   IF L_LOCKERROR<>0 THEN
      IF L_LOCKERROR = 1 THEN
         UNAPIGEN.LOGERROR('ReleaseLock', 
                           'Timeout for lock on '|| A_LOCKNAME ||' used timeout : '||
                           TO_CHAR(A_TIMEOUT)||' seconds while '||
                           L_LOCKACTION);
      ELSIF L_LOCKERROR = 3 THEN
         UNAPIGEN.LOGERROR('ReleaseLock', 
                           'Parameter error for DBMS_LOCK call for '||
                           A_LOCKNAME ||' while '||L_LOCKACTION );
      ELSIF L_LOCKERROR = 4 THEN
         UNAPIGEN.LOGERROR('ReleaseLock', 
                           'Attempt to release a lock not owned by session for '||
                           A_LOCKNAME ||' ,lockaction : '||L_LOCKACTION);
      ELSIF L_LOCKERROR = 5 THEN
         UNAPIGEN.LOGERROR('ReleaseLock', 
                           'Invalid lock handle for '||
                           A_LOCKNAME || ' : ' || NVL(TO_CHAR(L_LOCKID), 'NULL')||
                           ' lockaction : '||L_LOCKACTION );
      END IF;
   END IF;
   IF C_LOCKID%ISOPEN THEN
      CLOSE C_LOCKID;
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'ReleaseLock')); 
END RELEASELOCK;

FUNCTION UNIDECODE
(A_TYPE     IN    VARCHAR2,
 A_VALUE    IN    NUMBER,
 A_UNIT     IN    VARCHAR2,
 A_INVERT   IN    NUMBER)
RETURN VARCHAR2 IS

L_FREQUENCY VARCHAR2(40);
L_UNIT VARCHAR2(40);
L_TABLE_UNIT VARCHAR2(40);
L_TABLE_CODE_TP VARCHAR2(40);

CURSOR C_UNIDECODE (L_TABLE_UNIT VARCHAR2, L_TABLE_CODE_TP VARCHAR2) IS
   SELECT DESCRIPTION1
   FROM UTDECODE
   WHERE CODE = NLS_UPPER(L_TABLE_UNIT) AND CODE_TP = NLS_UPPER(L_TABLE_CODE_TP);

BEGIN
  IF A_TYPE = 'T' OR A_TYPE = 'S' THEN
      OPEN C_UNIDECODE(A_UNIT, 'FREQ_UNIT');
      FETCH C_UNIDECODE INTO L_UNIT;
      IF C_UNIDECODE%NOTFOUND THEN
         L_UNIT := A_UNIT;
      END IF;
      CLOSE C_UNIDECODE;
      IF A_INVERT = 1 THEN
         L_FREQUENCY := 'Not(' || 'Once per ' || TO_CHAR(A_VALUE) || ' ' || L_UNIT || ')';
      ELSE
         L_FREQUENCY := 'Once per ' || TO_CHAR(A_VALUE) || ' ' || L_UNIT;
      END IF;
    END IF;

   IF A_TYPE = 'N' OR A_TYPE = 'A' THEN

      OPEN C_UNIDECODE(A_TYPE, 'FREQ_TP');
      FETCH C_UNIDECODE INTO L_UNIT;
      IF C_UNIDECODE%NOTFOUND THEN
         L_UNIT := A_TYPE;
      END IF;
      CLOSE C_UNIDECODE;

      IF A_INVERT = 1 THEN
         L_FREQUENCY := 'Not(' || L_UNIT || ')';
      ELSE
         L_FREQUENCY := L_UNIT;
      END IF;
   END IF;

   IF A_TYPE = 'C' THEN
      IF A_INVERT = 1 THEN
         L_FREQUENCY := 'Not(' || TO_CHAR(A_VALUE) || ' ' || A_UNIT || ')';
      ELSE
         L_FREQUENCY := TO_CHAR(A_VALUE) || ' ' || A_UNIT;
      END IF;
   END IF;

   IF A_TYPE = 'Trending' THEN
      OPEN C_UNIDECODE(A_UNIT, 'FREQ_TP');
      FETCH C_UNIDECODE INTO L_UNIT;
      IF C_UNIDECODE%NOTFOUND THEN
         L_UNIT := A_UNIT;
      END IF;
      CLOSE C_UNIDECODE;
      L_FREQUENCY := 'Results of ' || TO_CHAR(A_VALUE) || ' ' || L_UNIT;
   END IF;

   IF A_TYPE = 'Cell Type' THEN
      OPEN C_UNIDECODE(A_UNIT, 'DSP_TP');
      FETCH C_UNIDECODE INTO L_UNIT;
      IF C_UNIDECODE%NOTFOUND THEN
         L_UNIT := A_UNIT;
      END IF;
      CLOSE C_UNIDECODE;
      L_FREQUENCY := L_UNIT;
   END IF;

   IF A_TYPE = 'Input' THEN
      OPEN C_UNIDECODE(A_UNIT, 'INPUT_TP');
      FETCH C_UNIDECODE INTO L_UNIT;
      IF C_UNIDECODE%NOTFOUND THEN
         L_UNIT := A_UNIT;
      END IF;
      CLOSE C_UNIDECODE;
      L_FREQUENCY := L_UNIT;
   END IF;

   IF A_TYPE = 'Data Type' THEN
      OPEN C_UNIDECODE(A_UNIT, 'DATA_TP');
      FETCH C_UNIDECODE INTO L_UNIT;
      IF C_UNIDECODE%NOTFOUND THEN
         L_UNIT := A_UNIT;
      END IF;
      CLOSE C_UNIDECODE;
      L_FREQUENCY := L_UNIT;
   END IF;

   IF A_TYPE = 'run_mode' THEN
      OPEN C_UNIDECODE(A_UNIT, 'run_mode');
      FETCH C_UNIDECODE INTO L_UNIT;
      IF C_UNIDECODE%NOTFOUND THEN
         L_UNIT := A_UNIT;
      END IF;
      CLOSE C_UNIDECODE;
      L_FREQUENCY := L_UNIT;
   END IF;

   IF A_TYPE = 'Shortcut' THEN
      IF SUBSTR(A_UNIT ,1,1) = '1' THEN
         L_FREQUENCY := 'ALT ';
      END IF;

      IF SUBSTR(A_UNIT ,2,1) = '1' THEN
         L_FREQUENCY := L_FREQUENCY || 'CTRL ';
      END IF;

      IF SUBSTR(A_UNIT ,3,1) = '1' THEN
         L_FREQUENCY := L_FREQUENCY || 'SHIFT ';
      END IF;

      L_FREQUENCY := L_FREQUENCY||SUBSTR(A_UNIT, 4);
   END IF;
   RETURN(L_FREQUENCY);
END UNIDECODE;

FUNCTION SAVELONGTEXT
(A_OBJ_ID              IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_OBJ_TP              IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_DOC_ID              IN     UNAPIGEN.VC40_TABLE_TYPE,   
 A_DOC_TP              IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_DOC_NAME            IN     UNAPIGEN.VC40_TABLE_TYPE,   
 A_TEXT_LINE           IN     UNAPIGEN.VC2000_TABLE_TYPE, 
 A_NR_OF_ROWS          IN OUT NUMBER,                     
 A_NEXT_ROWS           IN     NUMBER)                     
RETURN NUMBER IS

STPERROR       EXCEPTION;
L_ROW          NUMBER;

L_SQL_STRING   VARCHAR2(2000);
L_SQLERRM      VARCHAR2(255) ;

BEGIN

   L_SQLERRM := NULL ;

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
   
   IF A_NEXT_ROWS = 0 THEN
      IF NVL(P_SAVELONGTEXT_CALLS,0) <> 0 THEN
         L_SQLERRM := 'SaveLongText termination call never called for previous LongText (a_next_rows=-1)';
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NEXTROWS;
         RAISE STPERROR;
      END IF;
   ELSIF A_NEXT_ROWS = 1 THEN
      IF NVL(P_LAST_LINE, 0) = 0 THEN
         
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NEXTROWS;
         L_SQLERRM := 'SaveLongText initialisation call never occured (a_next_rows=0)';
         RAISE STPERROR;
      END IF;

      IF NVL(UNAPIGEN.P_TXN_LEVEL, 0) <= 1 THEN   
         L_SQLERRM := 'SaveLongText called with a_next_rows=1 in a non MST transaction !';
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NEXTROWS;
         RAISE STPERROR;   
      END IF;
   ELSIF A_NEXT_ROWS <> -1 THEN 
         L_SQLERRM := 'SaveLongText called with invalid a_next_rows (0,1,-1)';
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NEXTROWS;
         RAISE STPERROR;
   END IF;
   
   IF NVL(A_DOC_NAME(1), ' ') = ' ' THEN
      L_SQLERRM := 'No object id specified';
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   P_SAVELONGTEXT_CALLS := NVL(P_SAVELONGTEXT_CALLS, 0) + 1;

   IF (P_SAVELONGTEXT_CALLS = 1) THEN
      
      P_SAVELONG_TEXT_TR_SEQ := UNAPIGEN.P_TR_SEQ;

      DELETE FROM UTLONGTEXT 
         WHERE DOC_NAME = A_DOC_NAME(1);

      DELETE FROM UTUCAUDITTRAIL
      WHERE CURR_VAL = A_DOC_NAME(1);

      P_LAST_LINE := 0;
   ELSE
      IF UNAPIGEN.P_TR_SEQ <> P_SAVELONG_TEXT_TR_SEQ  THEN
         UNAPIGEN.P_TXN_ERROR := 1005 ; 
         L_SQLERRM := 'Successive calls of SaveLongText not in the same transaction !';
         RAISE STPERROR;   
      END IF;
   END IF;
   
   FOR L_ROW IN 1..A_NR_OF_ROWS LOOP
      P_LAST_LINE := P_LAST_LINE + 1;
      
      IF (A_DOC_NAME(1) <> A_DOC_NAME(L_ROW)) THEN
         L_SQLERRM := 'SaveLongText can only save one doc_name in one transaction !';
         UNAPIGEN.P_TXN_ERROR := 1006 ; 
         RAISE STPERROR;
      END IF;
      
      
      INSERT 
         INTO UTLONGTEXT 
         (OBJ_ID, OBJ_TP, DOC_ID, DOC_TP, DOC_NAME, LINE_NBR, TEXT_LINE)
         VALUES  (A_OBJ_ID(L_ROW),
                  A_OBJ_TP(L_ROW), 
                  A_DOC_ID(L_ROW), 
                  A_DOC_TP(L_ROW), 
                  A_DOC_NAME(L_ROW), 
                  P_LAST_LINE, 
                  A_TEXT_LINE(L_ROW));
      
   END LOOP ;
    
   IF A_NEXT_ROWS = -1 THEN
      
      P_LAST_LINE := 0 ;
      P_SAVELONGTEXT_CALLS := 0;
      P_SAVELONG_TEXT_TR_SEQ := 0;


   END IF;
   
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveLongText', SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('SaveLongText', L_SQLERRM);
   END IF;
   
   P_SAVELONGTEXT_CALLS := 0;
   P_SAVELONG_TEXT_TR_SEQ := 0;
   P_LAST_LINE := 0;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveLongText'));      
END SAVELONGTEXT;    

FUNCTION DELETELONGTEXT
(A_DOC_NAME            IN     VARCHAR2)                   
RETURN NUMBER IS
BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   DELETE FROM UTLONGTEXT 
   WHERE DOC_NAME = A_DOC_NAME;

   DELETE FROM UTUCAUDITTRAIL
   WHERE CURR_VAL = A_DOC_NAME;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('DeleteLongText', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'DeleteLongText'));
END DELETELONGTEXT;

FUNCTION GETLONGTEXTLIST
(A_OBJ_ID              OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_OBJ_TP              OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_DOC_ID              OUT     UNAPIGEN.VC40_TABLE_TYPE,   
 A_DOC_TP              OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_DOC_NAME            OUT     UNAPIGEN.VC40_TABLE_TYPE,   
 A_TEXT_LINE           OUT     UNAPIGEN.VC2000_TABLE_TYPE, 
 A_NR_OF_ROWS          IN OUT  NUMBER,                     
 A_WHERE_CLAUSE        IN      VARCHAR2,                   
 A_NEXT_ROWS           IN      NUMBER)                     
RETURN NUMBER IS
L_OBJ_TP       VARCHAR2(20) ;
L_OBJ_ID       VARCHAR2(20) ;
L_DOC_TP       VARCHAR2(20) ;
L_DOC_ID       VARCHAR2(40) ;
L_DOC_NAME     VARCHAR2(40) ;
L_TEXT_LINE    VARCHAR2(2000) ;
L_LINE_NBR     NUMBER;
L_NR_OF_ROWS   NUMBER;   
L_WHERE_CLAUSE VARCHAR2(2000);      
L_NEXT_ROWS    NUMBER;        

L_SQL_STRING   VARCHAR2(2000);
L_RESULT       NUMBER;
L_FETCHED_ROWS NUMBER ;
L_SQLERRM      VARCHAR2(255) ;


BEGIN
   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_LT_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_LT_CURSOR);
         P_LT_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_LT_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
         L_WHERE_CLAUSE := ' ORDER BY doc_name, line_nbr';
      ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
         L_WHERE_CLAUSE := ' WHERE doc_name = ''' || A_WHERE_CLAUSE ||
                           ''' ORDER BY line_nbr';
      ELSE
         L_WHERE_CLAUSE := A_WHERE_CLAUSE;
      END IF;

      IF P_LT_CURSOR IS NULL THEN
         P_LT_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;

      L_SQL_STRING:= 'SELECT obj_tp, obj_id, doc_tp, doc_id, doc_name, text_line FROM dd'||UNAPIGEN.P_DD||
                     '.uvlongtext '||L_WHERE_CLAUSE;
      DBMS_SQL.PARSE(P_LT_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

      DBMS_SQL.DEFINE_COLUMN(P_LT_CURSOR, 1, L_OBJ_TP, 20);
      DBMS_SQL.DEFINE_COLUMN(P_LT_CURSOR, 2, L_OBJ_ID, 20);
      DBMS_SQL.DEFINE_COLUMN(P_LT_CURSOR, 3, L_DOC_TP, 20);
      DBMS_SQL.DEFINE_COLUMN(P_LT_CURSOR, 4, L_DOC_ID, 40);
      DBMS_SQL.DEFINE_COLUMN(P_LT_CURSOR, 5, L_DOC_NAME, 40);
      DBMS_SQL.DEFINE_COLUMN(P_LT_CURSOR, 6, L_TEXT_LINE, 2000);
      L_RESULT := DBMS_SQL.EXECUTE(P_LT_CURSOR);
   END IF;

   L_RESULT := DBMS_SQL.FETCH_ROWS(P_LT_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_LT_CURSOR, 1, L_OBJ_TP);
      DBMS_SQL.COLUMN_VALUE(P_LT_CURSOR, 2, L_OBJ_ID);
      DBMS_SQL.COLUMN_VALUE(P_LT_CURSOR, 3, L_DOC_TP);
      DBMS_SQL.COLUMN_VALUE(P_LT_CURSOR, 4, L_DOC_ID);
      DBMS_SQL.COLUMN_VALUE(P_LT_CURSOR, 5, L_DOC_NAME);
      DBMS_SQL.COLUMN_VALUE(P_LT_CURSOR, 6, L_TEXT_LINE);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      
      A_OBJ_TP(L_FETCHED_ROWS)      := L_OBJ_TP;
      A_OBJ_ID(L_FETCHED_ROWS)      := L_OBJ_ID;
      A_DOC_TP(L_FETCHED_ROWS)      := L_DOC_TP;
      A_DOC_ID(L_FETCHED_ROWS)      := L_DOC_ID;
      A_DOC_NAME(L_FETCHED_ROWS)    := L_DOC_NAME;
      A_TEXT_LINE(L_FETCHED_ROWS)   := L_TEXT_LINE;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_LT_CURSOR);
      END IF;
   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_LT_CURSOR);
       P_LT_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   END IF;

   IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_LT_CURSOR);
      P_LT_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetLongTextList', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (P_LT_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (P_LT_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETLONGTEXTLIST;

FUNCTION ISEXTERNALDBAUSER    
RETURN NUMBER IS

CURSOR C_USER_ROLE_PRIVS(A_US VARCHAR2) IS
SELECT COUNT(GRANTED_ROLE) 
FROM SYS.DBA_ROLE_PRIVS 
WHERE GRANTEE=A_US
AND GRANTED_ROLE='UNILABDBA';

L_COUNT         INTEGER;

BEGIN

   
   
   

   
   IF P_DBA_NAME IS NULL THEN
      OPEN C_SYSTEM ('DBA_NAME');
      FETCH C_SYSTEM INTO P_DBA_NAME;
      IF C_SYSTEM%NOTFOUND THEN
         CLOSE C_SYSTEM;
         RETURN (DBERR_SYSDEFAULTS);
      END IF;
      CLOSE C_SYSTEM;
   END IF;
   
   IF P_DBA_NAME = USER THEN
      RETURN(UNAPIGEN.DBERR_SUCCESS);
   END IF;

   OPEN C_USER_ROLE_PRIVS (USER);
   FETCH C_USER_ROLE_PRIVS INTO L_COUNT;
   CLOSE C_USER_ROLE_PRIVS;

   IF L_COUNT=0 THEN
      RETURN(UNAPIGEN.DBERR_NOTADBAUSER);
   ELSE
      RETURN(UNAPIGEN.DBERR_SUCCESS);
   END IF;
   
EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'IsExternalDBAUser', L_SQLERRM);
      U4COMMIT;
      IF C_SYSTEM%ISOPEN THEN
         CLOSE C_SYSTEM;
      END IF;
      IF C_USER_ROLE_PRIVS%ISOPEN THEN
         CLOSE C_USER_ROLE_PRIVS;
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END ISEXTERNALDBAUSER;

PROCEDURE NEWVERSIONMGR IS             

L_UP                    NUMBER(5);
L_USER_PROFILE          VARCHAR2(40);
L_LANGUAGE              VARCHAR2(20);
L_TK                    VARCHAR2(20);
L_DBA_NAME              VARCHAR2(40);

L_REFDATE               TIMESTAMP WITH TIME ZONE;
L_NUMERIC_CHARACTERS    VARCHAR2(2);
L_DATEFORMAT            VARCHAR2(255);
L_OBJECT                VARCHAR2(20);
L_NEW_VERSION           VARCHAR2(20);
L_OLD_VERSION           VARCHAR2(20);
L_MAIN_CURSOR           INTEGER;
L_MAIN_RESULT           INTEGER;
L_PP                    VARCHAR2(20);
L_PP_KEY1               VARCHAR2(20);
L_PP_KEY2               VARCHAR2(20);
L_PP_KEY3               VARCHAR2(20);
L_PP_KEY4               VARCHAR2(20);
L_PP_KEY5               VARCHAR2(20);
L_SQLERRM               VARCHAR2(255);
L_TIMEZONE              VARCHAR2(64);
L_JOB_SETCONCUSTOMPAR   VARCHAR2(255);
L_LOCKED                BOOLEAN;
L_UL_TIMEOUT            INTEGER;

   PROCEDURE LOG(A_TEXT IN VARCHAR2) IS
   BEGIN
      IF P_NEWVERSIONMGR_OUTPUT THEN
         FOR L_X IN 1..FLOOR(LENGTH(A_TEXT)/200)+1 LOOP
            DBMS_OUTPUT.PUT_LINE(SUBSTR(A_TEXT,((L_X-1)*200)+1,200));
         END LOOP;
      END IF;
   END;

BEGIN

   L_TIMEZONE := 'SERVER';
   L_SQLERRM := NULL;
   
   LOG('Loading system defaults + SetConnection');
   
   OPEN C_SYSTEM ('DBA_NAME');
   FETCH C_SYSTEM INTO L_DBA_NAME;
   IF C_SYSTEM%NOTFOUND THEN
      CLOSE C_SYSTEM;
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SYSDEFAULTS; 
      L_SQLERRM := 'Missing system default DBA_NAME';
      RAISE STPERROR;
   END IF;
   CLOSE C_SYSTEM;

   
   
   
   IF P_CLIENT_ID IS NULL THEN
      OPEN C_SYSTEM ('JOBS_DATE_FORMAT');
      FETCH C_SYSTEM INTO L_DATEFORMAT;
      IF C_SYSTEM%NOTFOUND THEN
         CLOSE C_SYSTEM;
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SYSDEFAULTS; 
         L_SQLERRM := 'Missing system default JOBS_DATE_FORMAT';
         RAISE STPERROR;
      END IF;
      CLOSE C_SYSTEM;
      
      L_NUMERIC_CHARACTERS := 'DB';
      L_RET_CODE :=UNAPIGEN.SETCONNECTION4INSTALL('NewVersionMgr', L_DBA_NAME , 
                                'NwVerMgr', L_NUMERIC_CHARACTERS, L_DATEFORMAT, L_TIMEZONE, 
                                L_UP, L_USER_PROFILE, L_LANGUAGE, L_TK, '1');
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL; 
         L_SQLERRM := 'SetConnection failed! ret_code='||L_RET_CODE;
         IF L_RET_CODE = UNAPIGEN.DBERR_NOTAUTHORISED THEN
            L_SQLERRM2 := UNAPIAUT.P_NOT_AUTHORISED;
         END IF;
         RAISE STPERROR;
      END IF;
   END IF;

   
   OPEN C_SYSTEM ('JOB_SETCONCUSTOMPAR');
   FETCH C_SYSTEM INTO  L_JOB_SETCONCUSTOMPAR;
   IF C_SYSTEM%NOTFOUND THEN
       CLOSE C_SYSTEM;
       L_JOB_SETCONCUSTOMPAR:='';
   ELSE
      CLOSE C_SYSTEM;   
   END IF;
   L_RET_CODE :=  UNAPIGEN.SETCUSTOMCONNECTIONPARAMETER(L_JOB_SETCONCUSTOMPAR);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
       L_SQLERRM := 'SetCustomConnectionParameter failed ' || TO_CHAR(L_RET_CODE);
       RAISE STPERROR;
   END IF;
   

   
   
   
   OPEN C_SYSTEM ('VERSIONMGR_UL_TIMEOUT');
   FETCH C_SYSTEM INTO  L_UL_TIMEOUT;
   IF C_SYSTEM%NOTFOUND THEN
       CLOSE C_SYSTEM;
       L_UL_TIMEOUT:=120;
   ELSE
      CLOSE C_SYSTEM;   
   END IF;
   
   L_LOCKED := FALSE;
   L_RET_CODE := UNAPIGEN.REQUESTLOCK('U4VERSIONMGR', '0', L_UL_TIMEOUT);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      L_SQLERRM := 'RequestLock for UL=U4VERSIONMGR, returned '||L_RET_CODE;         
      RAISE STPERROR;
   END IF;
   L_LOCKED := TRUE;   
     
   
   L_REFDATE := CURRENT_TIMESTAMP;

   
   L_MAIN_CURSOR := DBMS_SQL.OPEN_CURSOR;
   FOR L_TP IN 1..L_NR_OF_TYPES LOOP
       LOG('Evaluation of objects to activate for '||L_OBJECT_TYPES(L_TP)||' timestamp before:'||TO_CHAR(CURRENT_TIMESTAMP));
      
      
      IF L_OBJECT_TYPES(L_TP) <> 'pp' THEN
         L_SQL_STRING := 'SELECT a.'||L_OBJECT_TYPES(L_TP)||', '||
                         'MAX( '||
                             'DECODE(a.ss,''@T'', NULL,'||
                              'DECODE(a.effective_till,NULL,'||
                               'DECODE(a.active,''1'','||
                                'DECODE(a.allow_modify,''0'','|| 
                                 'DECODE(SIGN(CASE WHEN ((a.effective_from-:l_refdate)>NUMTODSINTERVAL(0, ''DAY'')) THEN 1 ELSE -1 END),-1,version)))))) new_version,'||
                         'MAX(DECODE(a.version_is_current,''1'',version)) old_version '||
                         'FROM ut'||L_OBJECT_TYPES(L_TP)||' a '||
                         'GROUP BY a.'||L_OBJECT_TYPES(L_TP)||' '||
                         'HAVING MAX('||
                                    'DECODE(a.ss,''@T'', NULL,'||
                                     'DECODE(a.effective_till,NULL,'||
                                      'DECODE(a.active,''1'','||
                                       'DECODE(a.allow_modify,''0'','||
                                        'DECODE(SIGN(CASE WHEN ((a.effective_from-:l_refdate)>NUMTODSINTERVAL(0, ''DAY'')) THEN 1 ELSE -1 END),-1,version))))))'||
                                '> NVL(MAX(DECODE(a.version_is_current,''1'',version)),'' '')';
         LOG('Query used:');
         DBMS_SQL.PARSE(L_MAIN_CURSOR, L_SQL_STRING, DBMS_SQL.V7);
         DBMS_SQL.DEFINE_COLUMN(L_MAIN_CURSOR, 1, L_OBJECT, 20);
         DBMS_SQL.DEFINE_COLUMN(L_MAIN_CURSOR, 2, L_NEW_VERSION, 20);
         DBMS_SQL.DEFINE_COLUMN(L_MAIN_CURSOR, 3, L_OLD_VERSION, 20);
         DBMS_SQL.BIND_VARIABLE(L_MAIN_CURSOR, ':l_refdate', L_REFDATE);
         DBMS_SQL.BIND_VARIABLE(L_MAIN_CURSOR, ':l_refdate', L_REFDATE);
         L_MAIN_RESULT := DBMS_SQL.EXECUTE(L_MAIN_CURSOR);
         LOG('Evaluation of objects to activate for '||L_OBJECT_TYPES(L_TP)||' timestamp after:'||TO_CHAR(CURRENT_TIMESTAMP));
         L_MAIN_RESULT := DBMS_SQL.FETCH_ROWS(L_MAIN_CURSOR);

         LOOP
            EXIT WHEN L_MAIN_RESULT = 0;

            DBMS_SQL.COLUMN_VALUE(L_MAIN_CURSOR, 1, L_OBJECT);
            DBMS_SQL.COLUMN_VALUE(L_MAIN_CURSOR, 2, L_NEW_VERSION);
            DBMS_SQL.COLUMN_VALUE(L_MAIN_CURSOR, 3, L_OLD_VERSION);

            LOG('Object to be activated '||L_OBJECT_TYPES(L_TP)||L_OBJECT||'#version='||
                 L_NEW_VERSION||'#old_current_version='||L_OLD_VERSION);

            




            IF NVL(L_OLD_VERSION,'*') <> L_NEW_VERSION THEN
               IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
                  DBMS_SQL.CLOSE_CURSOR(L_MAIN_CURSOR);
                  L_MAIN_CURSOR := NULL;
                  L_SQLERRM := 'BeginTxn failed';
                  RAISE STPERROR;
               END IF;

               IF L_OLD_VERSION IS NOT NULL THEN
                  
                  LOG('Deactivating '||L_OBJECT_TYPES(L_TP)||'='||L_OBJECT||'#version='||
                      L_OLD_VERSION);
                  UNAPIGEN.DEACTIVATEOBJECT(L_OBJECT_TYPES(L_TP), L_OBJECT, L_OLD_VERSION, L_REFDATE, '0');
               END IF;

               
               LOG('Activating '||L_OBJECT_TYPES(L_TP)||'='||L_OBJECT||'#version='||
                   L_NEW_VERSION);
               UNAPIGEN.ACTIVATEOBJECT(L_OBJECT_TYPES(L_TP), L_OBJECT, L_OLD_VERSION, L_NEW_VERSION, L_REFDATE);

               IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
                  DBMS_SQL.CLOSE_CURSOR(L_MAIN_CURSOR);
                  L_MAIN_CURSOR := NULL;
                  L_SQLERRM := 'EndTxn failed';
                  RAISE STPERROR;
               END IF;
            END IF;         
            L_MAIN_RESULT := DBMS_SQL.FETCH_ROWS(L_MAIN_CURSOR);
         END LOOP;
      ELSE
         L_SQL_STRING := 'SELECT a.pp, a.pp_key1, a.pp_key2, a.pp_key3, a.pp_key4, a.pp_key5, '||
                         'MAX( '||
                             'DECODE(a.ss,''@T'', NULL,'||
                              'DECODE(a.effective_till,NULL,'||
                               'DECODE(a.active,''1'','||
                                'DECODE(a.allow_modify,''0'','||
                                 'DECODE(SIGN(CASE WHEN ((a.effective_from-:l_refdate)>NUMTODSINTERVAL(0, ''DAY'')) THEN 1 ELSE -1 END),-1,version)))))) new_version,'||
                         'MAX(DECODE(a.version_is_current,''1'',version)) old_version '||
                         'FROM utpp a '||
                         'GROUP BY a.pp, a.pp_key1, a.pp_key2, a.pp_key3, a.pp_key4, a.pp_key5 '||
                         'HAVING MAX('||
                                    'DECODE(a.ss,''@T'', NULL,'||
                                     'DECODE(a.effective_till,NULL,'||
                                      'DECODE(a.active,''1'','||
                                       'DECODE(a.allow_modify,''0'','||
                                        'DECODE(SIGN(CASE WHEN ((a.effective_from-:l_refdate)>NUMTODSINTERVAL(0, ''DAY'')) THEN 1 ELSE -1 END),-1,version))))))'||
                                '> NVL(MAX(DECODE(a.version_is_current,''1'',version)),'' '')';
         LOG('Query used:');
         DBMS_SQL.PARSE(L_MAIN_CURSOR, L_SQL_STRING, DBMS_SQL.V7);
         DBMS_SQL.DEFINE_COLUMN(L_MAIN_CURSOR, 1, L_PP, 20);
         DBMS_SQL.DEFINE_COLUMN(L_MAIN_CURSOR, 2, L_PP_KEY1, 20);
         DBMS_SQL.DEFINE_COLUMN(L_MAIN_CURSOR, 3, L_PP_KEY2, 20);
         DBMS_SQL.DEFINE_COLUMN(L_MAIN_CURSOR, 4, L_PP_KEY3, 20);
         DBMS_SQL.DEFINE_COLUMN(L_MAIN_CURSOR, 5, L_PP_KEY4, 20);
         DBMS_SQL.DEFINE_COLUMN(L_MAIN_CURSOR, 6, L_PP_KEY5, 20);
         DBMS_SQL.DEFINE_COLUMN(L_MAIN_CURSOR, 7, L_NEW_VERSION, 20);
         DBMS_SQL.DEFINE_COLUMN(L_MAIN_CURSOR, 8, L_OLD_VERSION, 20);
         DBMS_SQL.BIND_VARIABLE(L_MAIN_CURSOR, ':l_refdate', L_REFDATE);
         DBMS_SQL.BIND_VARIABLE(L_MAIN_CURSOR, ':l_refdate', L_REFDATE);
         L_MAIN_RESULT := DBMS_SQL.EXECUTE(L_MAIN_CURSOR);
         LOG('Evaluation of objects to activate for pp timestamp after:'||TO_CHAR(CURRENT_TIMESTAMP));
         L_MAIN_RESULT := DBMS_SQL.FETCH_ROWS(L_MAIN_CURSOR);

         LOOP
            EXIT WHEN L_MAIN_RESULT = 0;

            DBMS_SQL.COLUMN_VALUE(L_MAIN_CURSOR, 1, L_PP);
            DBMS_SQL.COLUMN_VALUE(L_MAIN_CURSOR, 2, L_PP_KEY1);
            DBMS_SQL.COLUMN_VALUE(L_MAIN_CURSOR, 3, L_PP_KEY2);
            DBMS_SQL.COLUMN_VALUE(L_MAIN_CURSOR, 4, L_PP_KEY3);
            DBMS_SQL.COLUMN_VALUE(L_MAIN_CURSOR, 5, L_PP_KEY4);
            DBMS_SQL.COLUMN_VALUE(L_MAIN_CURSOR, 6, L_PP_KEY5);
            DBMS_SQL.COLUMN_VALUE(L_MAIN_CURSOR, 7, L_NEW_VERSION);
            DBMS_SQL.COLUMN_VALUE(L_MAIN_CURSOR, 8, L_OLD_VERSION);

            LOG('Object to be activated pp='||L_PP||'#pp_key1='||L_PP_KEY1||'#pp_key2='||L_PP_KEY2||
                '#pp_key3='||L_PP_KEY3||'#pp_key4='||L_PP_KEY4||'#pp_key5='||L_PP_KEY5||
                '#version='||L_NEW_VERSION||'#old_current_version='||L_OLD_VERSION);

            




            IF NVL(L_OLD_VERSION,'*') <> L_NEW_VERSION THEN
               IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
                  DBMS_SQL.CLOSE_CURSOR(L_MAIN_CURSOR);
                  L_MAIN_CURSOR := NULL;
                  L_SQLERRM := 'BeginTxn failed';
                  RAISE STPERROR;
               END IF;

               IF L_OLD_VERSION IS NOT NULL THEN
                  
                  LOG('Deactivating pp='||L_PP||'#version='||
                      L_OLD_VERSION||'#pp_key1='||L_PP_KEY1||'#pp_key2='||L_PP_KEY2||
                      '#pp_key3='||L_PP_KEY3||'#pp_key4='||L_PP_KEY4||'#pp_key5='||L_PP_KEY5);
                  UNAPIGEN.DEACTIVATEPP(L_PP, L_OLD_VERSION, 
                                        L_PP_KEY1, L_PP_KEY2, L_PP_KEY3, L_PP_KEY4, L_PP_KEY5,
                                        L_REFDATE, '0');
               END IF;

               
               LOG('Activating pp='||L_PP||'#version='||
                      L_OLD_VERSION||'#pp_key1='||L_PP_KEY1||'#pp_key2='||L_PP_KEY2||
                      '#pp_key3='||L_PP_KEY3||'#pp_key4='||L_PP_KEY4||'#pp_key5='||L_PP_KEY5);
               UNAPIGEN.ACTIVATEPP(L_PP, L_OLD_VERSION, L_NEW_VERSION, L_PP_KEY1, L_PP_KEY2, L_PP_KEY3, L_PP_KEY4, L_PP_KEY5,
                                        L_REFDATE);

               IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
                  DBMS_SQL.CLOSE_CURSOR(L_MAIN_CURSOR);
                  L_MAIN_CURSOR := NULL;
                  L_SQLERRM := 'EndTxn failed';
                  RAISE STPERROR;
               END IF;
            END IF;         
            L_MAIN_RESULT := DBMS_SQL.FETCH_ROWS(L_MAIN_CURSOR);
         END LOOP;
      END IF;
                                                  
   END LOOP;   

   DBMS_SQL.CLOSE_CURSOR(L_MAIN_CURSOR);
   L_MAIN_CURSOR := NULL;

   IF L_LOCKED THEN
      L_RET_CODE := UNAPIGEN.RELEASELOCK('U4VERSIONMGR', 1);
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         L_SQLERRM := 'ReleaseLock for UL=U4VERSIONMGR, returned '||L_RET_CODE;         
         RAISE STPERROR;      
      END IF;
      L_LOCKED := FALSE;
   END IF;

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      L_SQLERRM := SQLERRM;
   END IF;
   UNAPIGEN.U4ROLLBACK;
   IF L_SQLERRM IS NOT NULL THEN
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
             'NewVersionMgr', L_SQLERRM);   
      UNAPIGEN.U4COMMIT;
   END IF;
   IF L_SQLERRM2 IS NOT NULL THEN
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
             'NewVersionMgr', L_SQLERRM2);   
      UNAPIGEN.U4COMMIT;
   END IF;
   IF C_SYSTEM%ISOPEN THEN
      CLOSE C_SYSTEM;
   END IF;
   IF DBMS_SQL.IS_OPEN(L_MAIN_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_MAIN_CURSOR);
   END IF;
   IF L_LOCKED THEN
      L_RET_CODE := UNAPIGEN.RELEASELOCK('U4VERSIONMGR', 1);
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         L_SQLERRM := 'ReleaseLock for UL=U4VERSIONMGR, returned '||L_RET_CODE;         
         INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
         VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                'NewVersionMgr', L_SQLERRM);   
         UNAPIGEN.U4COMMIT;
      END IF;
      L_LOCKED := FALSE;
   END IF;
END NEWVERSIONMGR;

FUNCTION LAUNCHNEWVERSIONMGR             
(A_REMOVE IN CHAR)
RETURN NUMBER IS         

L_JOB            VARCHAR2(30); 
L_ENABLED         VARCHAR2(5);
L_ACTION         VARCHAR2(4000);
L_INTERVAL       VARCHAR2(40);
L_SETTING_VALUE  VARCHAR2(40);
L_FOUND          BOOLEAN;
L_LEAVE_LOOP     BOOLEAN;
L_ATTEMPTS       INTEGER;
L_ISDBAUSER      INTEGER;

CURSOR L_JOBS_CURSOR (A_SEARCH VARCHAR2) IS
   SELECT JOB_NAME, ENABLED, JOB_ACTION
   FROM SYS.DBA_SCHEDULER_JOBS 
   WHERE INSTR(UPPER(JOB_ACTION), A_SEARCH) <> 0;

BEGIN

   
   L_SQLERRM := NULL;
   L_RET_CODE := UNAPIEV.CREATEDEFAULTSERVICELAYER;
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      L_SQLERRM := 'createDefaultServiceLayer failed ' || TO_CHAR(L_RET_CODE);
      RAISE STPERROR;
   END IF;

   
   
   
   
   
   
   OPEN L_JOBS_CURSOR('NEWVERSIONMGR');
   FETCH L_JOBS_CURSOR INTO L_JOB,L_ENABLED,L_ACTION ;
   L_FOUND := L_JOBS_CURSOR%FOUND;
   CLOSE L_JOBS_CURSOR;

   L_ISDBAUSER := UNAPIGEN.ISEXTERNALDBAUSER;

   IF L_FOUND THEN
      
      
      IF (A_REMOVE = '1') OR (UPPER(L_ENABLED) = 'FALSE') THEN
         IF (UNAPIGEN.ISUSERAUTHORISED(UNAPIGEN.P_CURRENT_UP, UNAPIGEN.P_USER, 'database', 'startstopjobs') <> UNAPIGEN.DBERR_SUCCESS) AND
            (L_ISDBAUSER <> UNAPIGEN.DBERR_SUCCESS) THEN
            RETURN(UNAPIGEN.DBERR_EVMGRSTARTNOTAUTHORISED);
         END IF;
      END IF;
      
      IF A_REMOVE = '1' THEN
         
         
         
         DBMS_SCHEDULER.DROP_JOB(L_JOB);
      ELSIF UPPER(L_ENABLED) = 'FALSE' THEN
         
         
         
         DBMS_SCHEDULER.ENABLE(L_JOB); 
      END IF;
   ELSE 
      IF NVL(A_REMOVE, '0') = '0' THEN
         
         
         
         IF (UNAPIGEN.ISUSERAUTHORISED(UNAPIGEN.P_CURRENT_UP, UNAPIGEN.P_USER, 'database', 'startstopjobs') <> UNAPIGEN.DBERR_SUCCESS) AND
            (L_ISDBAUSER <> UNAPIGEN.DBERR_SUCCESS) THEN
            RETURN(UNAPIGEN.DBERR_EVMGRSTARTNOTAUTHORISED);
         END IF;
         
         BEGIN
            SELECT SETTING_VALUE
            INTO L_SETTING_VALUE
            FROM UTSYSTEM
            WHERE SETTING_NAME = 'NEWVERSIONMGR_INTERV';

            L_INTERVAL := L_SETTING_VALUE;
         EXCEPTION
         WHEN NO_DATA_FOUND THEN
            
            L_INTERVAL := '5' ; 
            L_SQLERRM := 'utsystem.setting_name(NEWVERSIONMGR_INTERV) not found => Forced to 5 minutes';
            INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
            VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                   'LaunchNewVersionManager', L_SQLERRM);
         WHEN OTHERS THEN
            
            L_INTERVAL := '5' ; 
            L_SQLERRM := SUBSTR(SQLERRM,1,255);
            INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
            VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                   'LaunchNewVersionManager', L_SQLERRM);
         END;

         
         
         
           L_JOB := DBMS_SCHEDULER.GENERATE_JOB_NAME ('UNI_J_NEWVERMGR');
           DBMS_SCHEDULER.CREATE_JOB
             ( 
               JOB_NAME          =>  '"' ||UNAPIGEN.P_DBA_NAME||'".'||L_JOB,
               JOB_CLASS            => 'UNI_JC_OTHER_JOBS',
               JOB_TYPE             => 'PLSQL_BLOCK',
               JOB_ACTION           => 'UNAPIGEN.NewVersionMgr;',
               START_DATE           => CURRENT_TIMESTAMP + ((1/24)/60),
               
               
               REPEAT_INTERVAL      =>  UNAPIEV.SQLTRANSLATEDJOBINTERVAL(L_INTERVAL, 'minutes'),
               ENABLED              => TRUE
          );
         DBMS_SCHEDULER.SET_ATTRIBUTE (
                    NAME           => L_JOB,
                    ATTRIBUTE      => 'restartable',
                    VALUE          => TRUE);
      END IF;
   END IF;

   UNAPIGEN.U4COMMIT;

   
   
   
   
      
   L_LEAVE_LOOP := FALSE;
   L_ATTEMPTS := 0;
   WHILE NOT L_LEAVE_LOOP LOOP
      L_ATTEMPTS := L_ATTEMPTS + 1;
      OPEN L_JOBS_CURSOR('NEWVERSIONMGR');
      FETCH L_JOBS_CURSOR INTO L_JOB,L_ENABLED,L_ACTION ;
      L_FOUND := L_JOBS_CURSOR%FOUND;
      CLOSE L_JOBS_CURSOR;
      IF NVL(A_REMOVE, '0') = '0' THEN
         IF L_FOUND THEN 
            L_LEAVE_LOOP := TRUE;
         ELSE
            IF L_ATTEMPTS >= 30 THEN
               L_SQLERRM := 'NewVersionManager not started ! (timeout after 60 seconds)';
               RAISE STPERROR;
            ELSE
               DBMS_LOCK.SLEEP(2);
            END IF;
         END IF;
      ELSE
         IF NOT L_FOUND THEN 
            L_LEAVE_LOOP := TRUE;
         ELSE
            IF L_ATTEMPTS >= 30 THEN
               L_SQLERRM := 'NewVersionManager not stopped ! (timeout after 60 seconds)';
               RAISE STPERROR;
            ELSE
               DBMS_LOCK.SLEEP(2);
            END IF;
         END IF;
      END IF;
   END LOOP;
   
   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      L_SQLERRM := SQLERRM;
   END IF;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
          'LaunchNewVersionMgr', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   IF L_JOBS_CURSOR%ISOPEN THEN
      CLOSE L_JOBS_CURSOR;
   END IF;
   IF C_SYSTEM%ISOPEN THEN
      CLOSE C_SYSTEM;
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END LAUNCHNEWVERSIONMGR;


FUNCTION STARTNEWVERSIONMGR             
RETURN NUMBER IS
BEGIN
   RETURN(LAUNCHNEWVERSIONMGR('0'));
END STARTNEWVERSIONMGR;


FUNCTION STOPNEWVERSIONMGR              
RETURN NUMBER IS
BEGIN
   RETURN(LAUNCHNEWVERSIONMGR('1'));
END STOPNEWVERSIONMGR;

FUNCTION GETOBJTPDESCRIPTION             
(A_OBJ_TP              IN       VARCHAR2)                 
RETURN VARCHAR2 IS
   CURSOR L_OBJECT_CURSOR IS
      SELECT DESCRIPTION
        FROM UTOBJECTS
       WHERE OBJECT = A_OBJ_TP;
BEGIN
   
   IF A_OBJ_TP = 'ad' THEN
      RETURN('address');
   ELSIF A_OBJ_TP = 'au' THEN
      RETURN('attribute');
   ELSIF A_OBJ_TP = 'ch' THEN
      RETURN('chart');
   ELSIF A_OBJ_TP = 'cy' THEN
      RETURN('chart type');
   ELSIF A_OBJ_TP = 'eq' THEN
      RETURN('equipment');
   ELSIF A_OBJ_TP = 'fi' THEN
      RETURN('client file');
   ELSIF (A_OBJ_TP = 'gkme') OR (A_OBJ_TP = 'gkpt') OR (A_OBJ_TP = 'gkrq') OR (A_OBJ_TP = 'gkrt') OR
        (A_OBJ_TP = 'gksc') OR (A_OBJ_TP = 'gksd') OR (A_OBJ_TP = 'gkst') OR (A_OBJ_TP = 'gkws') OR
        (A_OBJ_TP = 'gkdc') OR (A_OBJ_TP = 'gkch') THEN
      RETURN('group key');
   ELSIF A_OBJ_TP = 'ic' THEN
      RETURN('info card');
   ELSIF (A_OBJ_TP = 'ie') OR (A_OBJ_TP = 'ii') THEN
      RETURN('info field');
   ELSIF A_OBJ_TP = 'ip' THEN
      RETURN('info profile');
   ELSIF A_OBJ_TP = 'lc' THEN
      RETURN('life cycle');
   ELSIF A_OBJ_TP = 'me' THEN
      RETURN('method sheet');
   ELSIF A_OBJ_TP = 'mt' THEN
      RETURN('method');
   ELSIF (A_OBJ_TP = 'pa') OR (A_OBJ_TP = 'pr') THEN
      RETURN('parameter');
   ELSIF A_OBJ_TP = 'pg' THEN
      RETURN('parameter group');
   ELSIF A_OBJ_TP = 'pp' THEN
      RETURN('parameter profile');
   ELSIF A_OBJ_TP = 'pt' THEN
      RETURN('protocol');
   ELSIF A_OBJ_TP = 'rq' THEN
      RETURN('request');
   ELSIF A_OBJ_TP = 'rqic' THEN
      RETURN('request info card');
   ELSIF A_OBJ_TP = 'rqii' THEN
      RETURN('request info field');
   ELSIF A_OBJ_TP = 'rt' THEN
      RETURN('request type');
   ELSIF A_OBJ_TP = 'sc' THEN
      RETURN('sample code');
   ELSIF A_OBJ_TP = 'sd' THEN
      RETURN('study');
   ELSIF A_OBJ_TP = 'sdic' THEN
      RETURN('study info card');
   ELSIF A_OBJ_TP = 'sdii' THEN
      RETURN('study info field');
   ELSIF A_OBJ_TP = 'st' THEN
      RETURN('sample type');
   ELSIF A_OBJ_TP = 'tk' THEN
      RETURN('task');
   ELSIF A_OBJ_TP = 'uc' THEN
      RETURN('unique code mask');
   ELSIF A_OBJ_TP = 'up' THEN
      RETURN('user profile');
   ELSIF A_OBJ_TP = 'ws' THEN
      RETURN('worksheet');
   ELSIF A_OBJ_TP = 'wt' THEN
      RETURN('worksheet type');
   ELSE 
      
      FOR L_OBJECT_REC IN L_OBJECT_CURSOR LOOP
         RETURN(L_OBJECT_REC.DESCRIPTION);
      END LOOP;
      
      RETURN('unknown type');
   END IF;
END GETOBJTPDESCRIPTION;

FUNCTION INTERNALUSEVERSION                           
(A_OBJECT_TP              IN       VARCHAR2,  
 A_OBJECT_ID              IN       VARCHAR2,  
 A_OBJECT_VERSION         IN       VARCHAR2,  
 A_ACTIVE                 OUT      VARCHAR2)  
RETURN VARCHAR2 IS

L_VERSION_CURSOR INTEGER;
L_VERSION        VARCHAR2(20);
L_OBJECT_VERSION VARCHAR2(20);

L_CURRENT_VERSION      VARCHAR2(20);
L_MAX_ACTIVE_VERSION   VARCHAR2(20);
L_MAX_INACTIVE_VERSION VARCHAR2(20);

BEGIN

   
   IF A_OBJECT_TP = 'pp' THEN
      RAISE_APPLICATION_ERROR(-20000, 'UseVersion may not be used for a pp - use the function UNAPIGEN.UsePpVersion instead');
   END IF;

   A_ACTIVE := '0';
   IF A_OBJECT_VERSION IS NOT NULL AND A_OBJECT_VERSION <> '~Current~' THEN
      IF INSTR(A_OBJECT_VERSION, '*')<>0 THEN
         
         L_VERSION := NULL;
         
         L_OBJECT_VERSION := REPLACE(A_OBJECT_VERSION, '*', '%');
         
         
         
         
         













         IF A_OBJECT_TP = 'ad' THEN SELECT MAX(DECODE(VERSION_IS_CURRENT, '1', VERSION, NULL)) CURRENT_VERSION,MAX(DECODE(ACTIVE, '1', VERSION, NULL)) MAX_ACTIVE_VERSION, MAX( VERSION ) MAX_INACTIVE_VERSION INTO L_CURRENT_VERSION, L_MAX_ACTIVE_VERSION, L_MAX_INACTIVE_VERSION  FROM UTAD WHERE AD= A_OBJECT_ID  AND VERSION LIKE L_OBJECT_VERSION; 
         ELSIF A_OBJECT_TP = 'au' THEN SELECT MAX(DECODE(VERSION_IS_CURRENT, '1', VERSION, NULL)) CURRENT_VERSION,MAX(DECODE(ACTIVE, '1', VERSION, NULL)) MAX_ACTIVE_VERSION, MAX( VERSION ) MAX_INACTIVE_VERSION INTO L_CURRENT_VERSION, L_MAX_ACTIVE_VERSION, L_MAX_INACTIVE_VERSION  FROM UTAU WHERE AU= A_OBJECT_ID  AND VERSION LIKE L_OBJECT_VERSION; 
         ELSIF A_OBJECT_TP = 'cy' THEN SELECT MAX(DECODE(VERSION_IS_CURRENT, '1', VERSION, NULL)) CURRENT_VERSION,MAX(DECODE(ACTIVE, '1', VERSION, NULL)) MAX_ACTIVE_VERSION, MAX( VERSION ) MAX_INACTIVE_VERSION INTO L_CURRENT_VERSION, L_MAX_ACTIVE_VERSION, L_MAX_INACTIVE_VERSION  FROM UTCY WHERE CY= A_OBJECT_ID  AND VERSION LIKE L_OBJECT_VERSION; 
         ELSIF A_OBJECT_TP = 'eq' THEN SELECT MAX(DECODE(VERSION_IS_CURRENT, '1', VERSION, NULL)) CURRENT_VERSION,MAX(DECODE(ACTIVE, '1', VERSION, NULL)) MAX_ACTIVE_VERSION, MAX( VERSION ) MAX_INACTIVE_VERSION INTO L_CURRENT_VERSION, L_MAX_ACTIVE_VERSION, L_MAX_INACTIVE_VERSION  FROM UTEQ WHERE EQ= A_OBJECT_ID  AND VERSION LIKE L_OBJECT_VERSION; 
         ELSIF A_OBJECT_TP = 'fi' THEN SELECT MAX(DECODE(VERSION_IS_CURRENT, '1', VERSION, NULL)) CURRENT_VERSION,MAX(DECODE(ACTIVE, '1', VERSION, NULL)) MAX_ACTIVE_VERSION, MAX( VERSION ) MAX_INACTIVE_VERSION INTO L_CURRENT_VERSION, L_MAX_ACTIVE_VERSION, L_MAX_INACTIVE_VERSION  FROM UTFI WHERE FI= A_OBJECT_ID  AND VERSION LIKE L_OBJECT_VERSION; 
         ELSIF A_OBJECT_TP = 'gkme' THEN SELECT MAX(DECODE(VERSION_IS_CURRENT, '1', VERSION, NULL)) CURRENT_VERSION,MAX(DECODE(ACTIVE, '1', VERSION, NULL)) MAX_ACTIVE_VERSION, MAX( VERSION ) MAX_INACTIVE_VERSION INTO L_CURRENT_VERSION, L_MAX_ACTIVE_VERSION, L_MAX_INACTIVE_VERSION  FROM UTGKME WHERE GK= A_OBJECT_ID  AND VERSION LIKE L_OBJECT_VERSION; 
         ELSIF A_OBJECT_TP = 'gkpt' THEN SELECT MAX(DECODE(VERSION_IS_CURRENT, '1', VERSION, NULL)) CURRENT_VERSION,MAX(DECODE(ACTIVE, '1', VERSION, NULL)) MAX_ACTIVE_VERSION, MAX( VERSION ) MAX_INACTIVE_VERSION INTO L_CURRENT_VERSION, L_MAX_ACTIVE_VERSION, L_MAX_INACTIVE_VERSION  FROM UTGKPT WHERE GK= A_OBJECT_ID  AND VERSION LIKE L_OBJECT_VERSION; 
         ELSIF A_OBJECT_TP = 'gkrq' THEN SELECT MAX(DECODE(VERSION_IS_CURRENT, '1', VERSION, NULL)) CURRENT_VERSION,MAX(DECODE(ACTIVE, '1', VERSION, NULL)) MAX_ACTIVE_VERSION, MAX( VERSION ) MAX_INACTIVE_VERSION INTO L_CURRENT_VERSION, L_MAX_ACTIVE_VERSION, L_MAX_INACTIVE_VERSION  FROM UTGKRQ WHERE GK= A_OBJECT_ID  AND VERSION LIKE L_OBJECT_VERSION; 
         ELSIF A_OBJECT_TP = 'gkrt' THEN SELECT MAX(DECODE(VERSION_IS_CURRENT, '1', VERSION, NULL)) CURRENT_VERSION,MAX(DECODE(ACTIVE, '1', VERSION, NULL)) MAX_ACTIVE_VERSION, MAX( VERSION ) MAX_INACTIVE_VERSION INTO L_CURRENT_VERSION, L_MAX_ACTIVE_VERSION, L_MAX_INACTIVE_VERSION  FROM UTGKRT WHERE GK= A_OBJECT_ID  AND VERSION LIKE L_OBJECT_VERSION; 
         ELSIF A_OBJECT_TP = 'gksc' THEN SELECT MAX(DECODE(VERSION_IS_CURRENT, '1', VERSION, NULL)) CURRENT_VERSION,MAX(DECODE(ACTIVE, '1', VERSION, NULL)) MAX_ACTIVE_VERSION, MAX( VERSION ) MAX_INACTIVE_VERSION INTO L_CURRENT_VERSION, L_MAX_ACTIVE_VERSION, L_MAX_INACTIVE_VERSION  FROM UTGKSC WHERE GK= A_OBJECT_ID  AND VERSION LIKE L_OBJECT_VERSION; 
         ELSIF A_OBJECT_TP = 'gksd' THEN SELECT MAX(DECODE(VERSION_IS_CURRENT, '1', VERSION, NULL)) CURRENT_VERSION,MAX(DECODE(ACTIVE, '1', VERSION, NULL)) MAX_ACTIVE_VERSION, MAX( VERSION ) MAX_INACTIVE_VERSION INTO L_CURRENT_VERSION, L_MAX_ACTIVE_VERSION, L_MAX_INACTIVE_VERSION  FROM UTGKSD WHERE GK= A_OBJECT_ID  AND VERSION LIKE L_OBJECT_VERSION; 
         ELSIF A_OBJECT_TP = 'gkst' THEN SELECT MAX(DECODE(VERSION_IS_CURRENT, '1', VERSION, NULL)) CURRENT_VERSION,MAX(DECODE(ACTIVE, '1', VERSION, NULL)) MAX_ACTIVE_VERSION, MAX( VERSION ) MAX_INACTIVE_VERSION INTO L_CURRENT_VERSION, L_MAX_ACTIVE_VERSION, L_MAX_INACTIVE_VERSION  FROM UTGKST WHERE GK= A_OBJECT_ID  AND VERSION LIKE L_OBJECT_VERSION; 
         ELSIF A_OBJECT_TP = 'gkws' THEN SELECT MAX(DECODE(VERSION_IS_CURRENT, '1', VERSION, NULL)) CURRENT_VERSION,MAX(DECODE(ACTIVE, '1', VERSION, NULL)) MAX_ACTIVE_VERSION, MAX( VERSION ) MAX_INACTIVE_VERSION INTO L_CURRENT_VERSION, L_MAX_ACTIVE_VERSION, L_MAX_INACTIVE_VERSION  FROM UTGKWS WHERE GK= A_OBJECT_ID  AND VERSION LIKE L_OBJECT_VERSION; 
         ELSIF A_OBJECT_TP = 'gkdc' THEN SELECT MAX(DECODE(VERSION_IS_CURRENT, '1', VERSION, NULL)) CURRENT_VERSION,MAX(DECODE(ACTIVE, '1', VERSION, NULL)) MAX_ACTIVE_VERSION, MAX( VERSION ) MAX_INACTIVE_VERSION INTO L_CURRENT_VERSION, L_MAX_ACTIVE_VERSION, L_MAX_INACTIVE_VERSION  FROM UTGKDC WHERE GK= A_OBJECT_ID  AND VERSION LIKE L_OBJECT_VERSION; 
         ELSIF A_OBJECT_TP = 'gkch' THEN SELECT MAX(DECODE(VERSION_IS_CURRENT, '1', VERSION, NULL)) CURRENT_VERSION,MAX(DECODE(ACTIVE, '1', VERSION, NULL)) MAX_ACTIVE_VERSION, MAX( VERSION ) MAX_INACTIVE_VERSION INTO L_CURRENT_VERSION, L_MAX_ACTIVE_VERSION, L_MAX_INACTIVE_VERSION  FROM UTGKCH WHERE GK= A_OBJECT_ID  AND VERSION LIKE L_OBJECT_VERSION; 
         ELSIF A_OBJECT_TP = 'ie' THEN SELECT MAX(DECODE(VERSION_IS_CURRENT, '1', VERSION, NULL)) CURRENT_VERSION,MAX(DECODE(ACTIVE, '1', VERSION, NULL)) MAX_ACTIVE_VERSION, MAX( VERSION ) MAX_INACTIVE_VERSION INTO L_CURRENT_VERSION, L_MAX_ACTIVE_VERSION, L_MAX_INACTIVE_VERSION  FROM UTIE WHERE IE= A_OBJECT_ID  AND VERSION LIKE L_OBJECT_VERSION; 
         ELSIF A_OBJECT_TP = 'ip' THEN SELECT MAX(DECODE(VERSION_IS_CURRENT, '1', VERSION, NULL)) CURRENT_VERSION,MAX(DECODE(ACTIVE, '1', VERSION, NULL)) MAX_ACTIVE_VERSION, MAX( VERSION ) MAX_INACTIVE_VERSION INTO L_CURRENT_VERSION, L_MAX_ACTIVE_VERSION, L_MAX_INACTIVE_VERSION  FROM UTIP WHERE IP= A_OBJECT_ID  AND VERSION LIKE L_OBJECT_VERSION; 
         ELSIF A_OBJECT_TP = 'lc' THEN SELECT MAX(DECODE(VERSION_IS_CURRENT, '1', VERSION, NULL)) CURRENT_VERSION,MAX(DECODE(ACTIVE, '1', VERSION, NULL)) MAX_ACTIVE_VERSION, MAX( VERSION ) MAX_INACTIVE_VERSION INTO L_CURRENT_VERSION, L_MAX_ACTIVE_VERSION, L_MAX_INACTIVE_VERSION  FROM UTLC WHERE LC= A_OBJECT_ID  AND VERSION LIKE L_OBJECT_VERSION; 
         ELSIF A_OBJECT_TP = 'mt' THEN SELECT MAX(DECODE(VERSION_IS_CURRENT, '1', VERSION, NULL)) CURRENT_VERSION,MAX(DECODE(ACTIVE, '1', VERSION, NULL)) MAX_ACTIVE_VERSION, MAX( VERSION ) MAX_INACTIVE_VERSION INTO L_CURRENT_VERSION, L_MAX_ACTIVE_VERSION, L_MAX_INACTIVE_VERSION  FROM UTMT WHERE MT= A_OBJECT_ID  AND VERSION LIKE L_OBJECT_VERSION; 
         
         ELSIF A_OBJECT_TP = 'pr' THEN SELECT MAX(DECODE(VERSION_IS_CURRENT, '1', VERSION, NULL)) CURRENT_VERSION,MAX(DECODE(ACTIVE, '1', VERSION, NULL)) MAX_ACTIVE_VERSION, MAX( VERSION ) MAX_INACTIVE_VERSION INTO L_CURRENT_VERSION, L_MAX_ACTIVE_VERSION, L_MAX_INACTIVE_VERSION  FROM UTPR WHERE PR= A_OBJECT_ID  AND VERSION LIKE L_OBJECT_VERSION; 
         ELSIF A_OBJECT_TP = 'pt' THEN SELECT MAX(DECODE(VERSION_IS_CURRENT, '1', VERSION, NULL)) CURRENT_VERSION,MAX(DECODE(ACTIVE, '1', VERSION, NULL)) MAX_ACTIVE_VERSION, MAX( VERSION ) MAX_INACTIVE_VERSION INTO L_CURRENT_VERSION, L_MAX_ACTIVE_VERSION, L_MAX_INACTIVE_VERSION  FROM UTPT WHERE PT= A_OBJECT_ID  AND VERSION LIKE L_OBJECT_VERSION; 
         ELSIF A_OBJECT_TP = 'rt' THEN SELECT MAX(DECODE(VERSION_IS_CURRENT, '1', VERSION, NULL)) CURRENT_VERSION,MAX(DECODE(ACTIVE, '1', VERSION, NULL)) MAX_ACTIVE_VERSION, MAX( VERSION ) MAX_INACTIVE_VERSION INTO L_CURRENT_VERSION, L_MAX_ACTIVE_VERSION, L_MAX_INACTIVE_VERSION  FROM UTRT WHERE RT= A_OBJECT_ID  AND VERSION LIKE L_OBJECT_VERSION; 
         ELSIF A_OBJECT_TP = 'st' THEN SELECT MAX(DECODE(VERSION_IS_CURRENT, '1', VERSION, NULL)) CURRENT_VERSION,MAX(DECODE(ACTIVE, '1', VERSION, NULL)) MAX_ACTIVE_VERSION, MAX( VERSION ) MAX_INACTIVE_VERSION INTO L_CURRENT_VERSION, L_MAX_ACTIVE_VERSION, L_MAX_INACTIVE_VERSION  FROM UTST WHERE ST= A_OBJECT_ID  AND VERSION LIKE L_OBJECT_VERSION; 
         ELSIF A_OBJECT_TP = 'tk' THEN SELECT MAX(DECODE(VERSION_IS_CURRENT, '1', VERSION, NULL)) CURRENT_VERSION,MAX(DECODE(ACTIVE, '1', VERSION, NULL)) MAX_ACTIVE_VERSION, MAX( VERSION ) MAX_INACTIVE_VERSION INTO L_CURRENT_VERSION, L_MAX_ACTIVE_VERSION, L_MAX_INACTIVE_VERSION  FROM UTTK WHERE TK= A_OBJECT_ID  AND VERSION LIKE L_OBJECT_VERSION; 
         ELSIF A_OBJECT_TP = 'uc' THEN SELECT MAX(DECODE(VERSION_IS_CURRENT, '1', VERSION, NULL)) CURRENT_VERSION,MAX(DECODE(ACTIVE, '1', VERSION, NULL)) MAX_ACTIVE_VERSION, MAX( VERSION ) MAX_INACTIVE_VERSION INTO L_CURRENT_VERSION, L_MAX_ACTIVE_VERSION, L_MAX_INACTIVE_VERSION  FROM UTUC WHERE UC= A_OBJECT_ID  AND VERSION LIKE L_OBJECT_VERSION; 
         ELSIF A_OBJECT_TP = 'up' THEN SELECT MAX(DECODE(VERSION_IS_CURRENT, '1', VERSION, NULL)) CURRENT_VERSION,MAX(DECODE(ACTIVE, '1', VERSION, NULL)) MAX_ACTIVE_VERSION, MAX( VERSION ) MAX_INACTIVE_VERSION INTO L_CURRENT_VERSION, L_MAX_ACTIVE_VERSION, L_MAX_INACTIVE_VERSION  FROM UTUP WHERE UP= A_OBJECT_ID  AND VERSION LIKE L_OBJECT_VERSION; 
         ELSIF A_OBJECT_TP = 'wt' THEN SELECT MAX(DECODE(VERSION_IS_CURRENT, '1', VERSION, NULL)) CURRENT_VERSION,MAX(DECODE(ACTIVE, '1', VERSION, NULL)) MAX_ACTIVE_VERSION, MAX( VERSION ) MAX_INACTIVE_VERSION INTO L_CURRENT_VERSION, L_MAX_ACTIVE_VERSION, L_MAX_INACTIVE_VERSION  FROM UTWT WHERE WT= A_OBJECT_ID  AND VERSION LIKE L_OBJECT_VERSION; 
         ELSE 
            L_VERSION_CURSOR := DBMS_SQL.OPEN_CURSOR;

            
            L_SQL_STRING := 'SELECT MAX(DECODE(version_is_current, ''1'', version, NULL)) current_version, '||
                            'MAX(DECODE(active, ''1'', version, NULL)) max_active_version, '||
                            'MAX( version ) max_inactive_version '||
                           ' FROM ut'|| A_OBJECT_TP ;
            
            IF SUBSTR(A_OBJECT_TP, 1, 2) = 'gk' THEN
               L_SQL_STRING := L_SQL_STRING ||
                               ' WHERE gk = :a_object_id' || 
                               ' AND version LIKE :a_object_version';
            ELSE            
               L_SQL_STRING := L_SQL_STRING ||
                            ' WHERE ' || A_OBJECT_TP || ' = :a_object_id' || 
                            ' AND version LIKE :a_object_version';
            END IF;
            DBMS_SQL.PARSE(L_VERSION_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
            DBMS_SQL.BIND_VARIABLE(L_VERSION_CURSOR, ':a_object_id', A_OBJECT_ID);
            DBMS_SQL.BIND_VARIABLE(L_VERSION_CURSOR, ':a_object_version', L_OBJECT_VERSION);
            DBMS_SQL.DEFINE_COLUMN(L_VERSION_CURSOR, 1, L_CURRENT_VERSION, 20);
            DBMS_SQL.DEFINE_COLUMN(L_VERSION_CURSOR, 2, L_MAX_ACTIVE_VERSION, 20);
            DBMS_SQL.DEFINE_COLUMN(L_VERSION_CURSOR, 3, L_MAX_INACTIVE_VERSION, 20);
            L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_VERSION_CURSOR);
            IF L_RESULT <> 0 THEN
               DBMS_SQL.COLUMN_VALUE(L_VERSION_CURSOR, 1, L_CURRENT_VERSION);
               DBMS_SQL.COLUMN_VALUE(L_VERSION_CURSOR, 2, L_MAX_ACTIVE_VERSION);
               DBMS_SQL.COLUMN_VALUE(L_VERSION_CURSOR, 3, L_MAX_INACTIVE_VERSION);
            END IF;
            DBMS_SQL.CLOSE_CURSOR(L_VERSION_CURSOR);
         END IF;
         IF L_CURRENT_VERSION IS NOT NULL THEN
            L_VERSION := L_CURRENT_VERSION;
            A_ACTIVE := '1';
         ELSIF L_MAX_ACTIVE_VERSION IS NOT NULL THEN
            L_VERSION := L_MAX_ACTIVE_VERSION;
            A_ACTIVE := '1';
         ELSE
            L_VERSION := L_MAX_INACTIVE_VERSION;
            A_ACTIVE := '0';
         END IF;
      ELSE
         
         L_VERSION := NULL;
         
         
         
         
         











         IF A_OBJECT_TP = 'ad' THEN BEGIN SELECT ACTIVE INTO A_ACTIVE  FROM UTAD WHERE AD = A_OBJECT_ID  AND VERSION = A_OBJECT_VERSION; RETURN(A_OBJECT_VERSION); EXCEPTION WHEN NO_DATA_FOUND THEN A_ACTIVE:='0'; RETURN(NULL); END;
         ELSIF A_OBJECT_TP = 'au' THEN BEGIN SELECT ACTIVE INTO A_ACTIVE  FROM UTAU WHERE AU = A_OBJECT_ID  AND VERSION = A_OBJECT_VERSION; RETURN(A_OBJECT_VERSION); EXCEPTION WHEN NO_DATA_FOUND THEN A_ACTIVE:='0'; RETURN(NULL); END;
         ELSIF A_OBJECT_TP = 'cy' THEN BEGIN SELECT ACTIVE INTO A_ACTIVE  FROM UTCY WHERE CY = A_OBJECT_ID  AND VERSION = A_OBJECT_VERSION; RETURN(A_OBJECT_VERSION); EXCEPTION WHEN NO_DATA_FOUND THEN A_ACTIVE:='0'; RETURN(NULL); END;
         ELSIF A_OBJECT_TP = 'eq' THEN BEGIN SELECT ACTIVE INTO A_ACTIVE  FROM UTEQ WHERE EQ = A_OBJECT_ID  AND VERSION = A_OBJECT_VERSION; RETURN(A_OBJECT_VERSION); EXCEPTION WHEN NO_DATA_FOUND THEN A_ACTIVE:='0'; RETURN(NULL); END;
         ELSIF A_OBJECT_TP = 'fi' THEN BEGIN SELECT ACTIVE INTO A_ACTIVE  FROM UTFI WHERE FI = A_OBJECT_ID  AND VERSION = A_OBJECT_VERSION; RETURN(A_OBJECT_VERSION); EXCEPTION WHEN NO_DATA_FOUND THEN A_ACTIVE:='0'; RETURN(NULL); END;
         ELSIF A_OBJECT_TP = 'gkme' THEN BEGIN SELECT ACTIVE INTO A_ACTIVE  FROM UTGKME WHERE GK = A_OBJECT_ID  AND VERSION = A_OBJECT_VERSION; RETURN(A_OBJECT_VERSION); EXCEPTION WHEN NO_DATA_FOUND THEN A_ACTIVE:='0'; RETURN(NULL); END;
         ELSIF A_OBJECT_TP = 'gkpt' THEN BEGIN SELECT ACTIVE INTO A_ACTIVE  FROM UTGKPT WHERE GK = A_OBJECT_ID  AND VERSION = A_OBJECT_VERSION; RETURN(A_OBJECT_VERSION); EXCEPTION WHEN NO_DATA_FOUND THEN A_ACTIVE:='0'; RETURN(NULL); END;
         ELSIF A_OBJECT_TP = 'gkrq' THEN BEGIN SELECT ACTIVE INTO A_ACTIVE  FROM UTGKRQ WHERE GK = A_OBJECT_ID  AND VERSION = A_OBJECT_VERSION; RETURN(A_OBJECT_VERSION); EXCEPTION WHEN NO_DATA_FOUND THEN A_ACTIVE:='0'; RETURN(NULL); END;
         ELSIF A_OBJECT_TP = 'gkrt' THEN BEGIN SELECT ACTIVE INTO A_ACTIVE  FROM UTGKRT WHERE GK = A_OBJECT_ID  AND VERSION = A_OBJECT_VERSION; RETURN(A_OBJECT_VERSION); EXCEPTION WHEN NO_DATA_FOUND THEN A_ACTIVE:='0'; RETURN(NULL); END;
         ELSIF A_OBJECT_TP = 'gksc' THEN BEGIN SELECT ACTIVE INTO A_ACTIVE  FROM UTGKSC WHERE GK = A_OBJECT_ID  AND VERSION = A_OBJECT_VERSION; RETURN(A_OBJECT_VERSION); EXCEPTION WHEN NO_DATA_FOUND THEN A_ACTIVE:='0'; RETURN(NULL); END;
         ELSIF A_OBJECT_TP = 'gksd' THEN BEGIN SELECT ACTIVE INTO A_ACTIVE  FROM UTGKSD WHERE GK = A_OBJECT_ID  AND VERSION = A_OBJECT_VERSION; RETURN(A_OBJECT_VERSION); EXCEPTION WHEN NO_DATA_FOUND THEN A_ACTIVE:='0'; RETURN(NULL); END;
         ELSIF A_OBJECT_TP = 'gkst' THEN BEGIN SELECT ACTIVE INTO A_ACTIVE  FROM UTGKST WHERE GK = A_OBJECT_ID  AND VERSION = A_OBJECT_VERSION; RETURN(A_OBJECT_VERSION); EXCEPTION WHEN NO_DATA_FOUND THEN A_ACTIVE:='0'; RETURN(NULL); END;
         ELSIF A_OBJECT_TP = 'gkws' THEN BEGIN SELECT ACTIVE INTO A_ACTIVE  FROM UTGKWS WHERE GK = A_OBJECT_ID  AND VERSION = A_OBJECT_VERSION; RETURN(A_OBJECT_VERSION); EXCEPTION WHEN NO_DATA_FOUND THEN A_ACTIVE:='0'; RETURN(NULL); END;
         ELSIF A_OBJECT_TP = 'gkdc' THEN BEGIN SELECT ACTIVE INTO A_ACTIVE  FROM UTGKDC WHERE GK = A_OBJECT_ID  AND VERSION = A_OBJECT_VERSION; RETURN(A_OBJECT_VERSION); EXCEPTION WHEN NO_DATA_FOUND THEN A_ACTIVE:='0'; RETURN(NULL); END;
         ELSIF A_OBJECT_TP = 'gkch' THEN BEGIN SELECT ACTIVE INTO A_ACTIVE  FROM UTGKCH WHERE GK = A_OBJECT_ID  AND VERSION = A_OBJECT_VERSION; RETURN(A_OBJECT_VERSION); EXCEPTION WHEN NO_DATA_FOUND THEN A_ACTIVE:='0'; RETURN(NULL); END;
         ELSIF A_OBJECT_TP = 'ie' THEN BEGIN SELECT ACTIVE INTO A_ACTIVE  FROM UTIE WHERE IE = A_OBJECT_ID  AND VERSION = A_OBJECT_VERSION; RETURN(A_OBJECT_VERSION); EXCEPTION WHEN NO_DATA_FOUND THEN A_ACTIVE:='0'; RETURN(NULL); END;
         ELSIF A_OBJECT_TP = 'ip' THEN BEGIN SELECT ACTIVE INTO A_ACTIVE  FROM UTIP WHERE IP = A_OBJECT_ID  AND VERSION = A_OBJECT_VERSION; RETURN(A_OBJECT_VERSION); EXCEPTION WHEN NO_DATA_FOUND THEN A_ACTIVE:='0'; RETURN(NULL); END;
         ELSIF A_OBJECT_TP = 'lc' THEN BEGIN SELECT ACTIVE INTO A_ACTIVE  FROM UTLC WHERE LC = A_OBJECT_ID  AND VERSION = A_OBJECT_VERSION; RETURN(A_OBJECT_VERSION); EXCEPTION WHEN NO_DATA_FOUND THEN A_ACTIVE:='0'; RETURN(NULL); END;
         ELSIF A_OBJECT_TP = 'mt' THEN BEGIN SELECT ACTIVE INTO A_ACTIVE  FROM UTMT WHERE MT = A_OBJECT_ID  AND VERSION = A_OBJECT_VERSION; RETURN(A_OBJECT_VERSION); EXCEPTION WHEN NO_DATA_FOUND THEN A_ACTIVE:='0'; RETURN(NULL); END;
         
         ELSIF A_OBJECT_TP = 'pr' THEN BEGIN SELECT ACTIVE INTO A_ACTIVE  FROM UTPR WHERE PR = A_OBJECT_ID  AND VERSION = A_OBJECT_VERSION; RETURN(A_OBJECT_VERSION); EXCEPTION WHEN NO_DATA_FOUND THEN A_ACTIVE:='0'; RETURN(NULL); END;
         ELSIF A_OBJECT_TP = 'pt' THEN BEGIN SELECT ACTIVE INTO A_ACTIVE  FROM UTPT WHERE PT = A_OBJECT_ID  AND VERSION = A_OBJECT_VERSION; RETURN(A_OBJECT_VERSION); EXCEPTION WHEN NO_DATA_FOUND THEN A_ACTIVE:='0'; RETURN(NULL); END;
         ELSIF A_OBJECT_TP = 'rt' THEN BEGIN SELECT ACTIVE INTO A_ACTIVE  FROM UTRT WHERE RT = A_OBJECT_ID  AND VERSION = A_OBJECT_VERSION; RETURN(A_OBJECT_VERSION); EXCEPTION WHEN NO_DATA_FOUND THEN A_ACTIVE:='0'; RETURN(NULL); END;
         ELSIF A_OBJECT_TP = 'st' THEN BEGIN SELECT ACTIVE INTO A_ACTIVE  FROM UTST WHERE ST = A_OBJECT_ID  AND VERSION = A_OBJECT_VERSION; RETURN(A_OBJECT_VERSION); EXCEPTION WHEN NO_DATA_FOUND THEN A_ACTIVE:='0'; RETURN(NULL); END;
         ELSIF A_OBJECT_TP = 'tk' THEN BEGIN SELECT ACTIVE INTO A_ACTIVE  FROM UTTK WHERE TK = A_OBJECT_ID  AND VERSION = A_OBJECT_VERSION; RETURN(A_OBJECT_VERSION); EXCEPTION WHEN NO_DATA_FOUND THEN A_ACTIVE:='0'; RETURN(NULL); END;
         ELSIF A_OBJECT_TP = 'uc' THEN BEGIN SELECT ACTIVE INTO A_ACTIVE  FROM UTUC WHERE UC = A_OBJECT_ID  AND VERSION = A_OBJECT_VERSION; RETURN(A_OBJECT_VERSION); EXCEPTION WHEN NO_DATA_FOUND THEN A_ACTIVE:='0'; RETURN(NULL); END;
         ELSIF A_OBJECT_TP = 'up' THEN BEGIN SELECT ACTIVE INTO A_ACTIVE  FROM UTUP WHERE UP = A_OBJECT_ID  AND VERSION = A_OBJECT_VERSION; RETURN(A_OBJECT_VERSION); EXCEPTION WHEN NO_DATA_FOUND THEN A_ACTIVE:='0'; RETURN(NULL); END;
         ELSIF A_OBJECT_TP = 'wt' THEN BEGIN SELECT ACTIVE INTO A_ACTIVE  FROM UTWT WHERE WT = A_OBJECT_ID  AND VERSION = A_OBJECT_VERSION; RETURN(A_OBJECT_VERSION); EXCEPTION WHEN NO_DATA_FOUND THEN A_ACTIVE:='0'; RETURN(NULL); END;
         ELSE
            L_VERSION_CURSOR := DBMS_SQL.OPEN_CURSOR;

            
            L_SQL_STRING := 'SELECT version, active FROM ut'|| A_OBJECT_TP;
            
            IF SUBSTR(A_OBJECT_TP, 1, 2) = 'gk' THEN
               L_SQL_STRING := L_SQL_STRING ||
                               ' WHERE gk = :a_object_id' || 
                               ' AND version = :a_object_version';
            ELSE            
               L_SQL_STRING := L_SQL_STRING ||
                               ' WHERE ' || A_OBJECT_TP || ' = :a_object_id' || 
                               ' AND version = :a_object_version';
            END IF;
            DBMS_SQL.PARSE(L_VERSION_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
            DBMS_SQL.BIND_VARIABLE(L_VERSION_CURSOR, ':a_object_id', A_OBJECT_ID);
            DBMS_SQL.BIND_VARIABLE(L_VERSION_CURSOR, ':a_object_version', A_OBJECT_VERSION);
            DBMS_SQL.DEFINE_COLUMN_CHAR(L_VERSION_CURSOR, 2, A_ACTIVE, 1);
            L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_VERSION_CURSOR);

            
            IF L_RESULT <> 0 THEN            
               DBMS_SQL.COLUMN_VALUE_CHAR(L_VERSION_CURSOR, 2, A_ACTIVE);
               DBMS_SQL.CLOSE_CURSOR(L_VERSION_CURSOR);
               RETURN(A_OBJECT_VERSION);
            ELSE
               DBMS_SQL.CLOSE_CURSOR(L_VERSION_CURSOR);
               A_ACTIVE := '0';
               RETURN(NULL);
            END IF;
         END IF;
      END IF;
   ELSE
      
         
         
         
         











      IF A_OBJECT_TP = 'ad' THEN BEGIN SELECT VERSION INTO L_VERSION  FROM UTAD WHERE AD = A_OBJECT_ID  AND VERSION_IS_CURRENT = '1'; A_ACTIVE := '1'; EXCEPTION WHEN NO_DATA_FOUND THEN NULL; END;
      ELSIF A_OBJECT_TP = 'au' THEN BEGIN SELECT VERSION INTO L_VERSION  FROM UTAU WHERE AU = A_OBJECT_ID  AND VERSION_IS_CURRENT = '1'; A_ACTIVE := '1'; EXCEPTION WHEN NO_DATA_FOUND THEN NULL; END;
      ELSIF A_OBJECT_TP = 'cy' THEN BEGIN SELECT VERSION INTO L_VERSION  FROM UTCY WHERE CY = A_OBJECT_ID  AND VERSION_IS_CURRENT = '1'; A_ACTIVE := '1'; EXCEPTION WHEN NO_DATA_FOUND THEN NULL; END;
      ELSIF A_OBJECT_TP = 'eq' THEN BEGIN SELECT VERSION INTO L_VERSION  FROM UTEQ WHERE EQ = A_OBJECT_ID  AND VERSION_IS_CURRENT = '1'; A_ACTIVE := '1'; EXCEPTION WHEN NO_DATA_FOUND THEN NULL; END;
      ELSIF A_OBJECT_TP = 'fi' THEN BEGIN SELECT VERSION INTO L_VERSION  FROM UTFI WHERE FI = A_OBJECT_ID  AND VERSION_IS_CURRENT = '1'; A_ACTIVE := '1'; EXCEPTION WHEN NO_DATA_FOUND THEN NULL; END;
      ELSIF A_OBJECT_TP = 'gkme' THEN BEGIN SELECT VERSION INTO L_VERSION  FROM UTGKME WHERE GK = A_OBJECT_ID  AND VERSION_IS_CURRENT = '1'; A_ACTIVE := '1'; EXCEPTION WHEN NO_DATA_FOUND THEN NULL; END;
      ELSIF A_OBJECT_TP = 'gkpt' THEN BEGIN SELECT VERSION INTO L_VERSION  FROM UTGKPT WHERE GK = A_OBJECT_ID  AND VERSION_IS_CURRENT = '1'; A_ACTIVE := '1'; EXCEPTION WHEN NO_DATA_FOUND THEN NULL; END;
      ELSIF A_OBJECT_TP = 'gkrq' THEN BEGIN SELECT VERSION INTO L_VERSION  FROM UTGKRQ WHERE GK = A_OBJECT_ID  AND VERSION_IS_CURRENT = '1'; A_ACTIVE := '1'; EXCEPTION WHEN NO_DATA_FOUND THEN NULL; END;
      ELSIF A_OBJECT_TP = 'gkrt' THEN BEGIN SELECT VERSION INTO L_VERSION  FROM UTGKRT WHERE GK = A_OBJECT_ID  AND VERSION_IS_CURRENT = '1'; A_ACTIVE := '1'; EXCEPTION WHEN NO_DATA_FOUND THEN NULL; END;
      ELSIF A_OBJECT_TP = 'gksc' THEN BEGIN SELECT VERSION INTO L_VERSION  FROM UTGKSC WHERE GK = A_OBJECT_ID  AND VERSION_IS_CURRENT = '1'; A_ACTIVE := '1'; EXCEPTION WHEN NO_DATA_FOUND THEN NULL; END;
      ELSIF A_OBJECT_TP = 'gksd' THEN BEGIN SELECT VERSION INTO L_VERSION  FROM UTGKSD WHERE GK = A_OBJECT_ID  AND VERSION_IS_CURRENT = '1'; A_ACTIVE := '1'; EXCEPTION WHEN NO_DATA_FOUND THEN NULL; END;
      ELSIF A_OBJECT_TP = 'gkst' THEN BEGIN SELECT VERSION INTO L_VERSION  FROM UTGKST WHERE GK = A_OBJECT_ID  AND VERSION_IS_CURRENT = '1'; A_ACTIVE := '1'; EXCEPTION WHEN NO_DATA_FOUND THEN NULL; END;
      ELSIF A_OBJECT_TP = 'gkws' THEN BEGIN SELECT VERSION INTO L_VERSION  FROM UTGKWS WHERE GK = A_OBJECT_ID  AND VERSION_IS_CURRENT = '1'; A_ACTIVE := '1'; EXCEPTION WHEN NO_DATA_FOUND THEN NULL; END;
      ELSIF A_OBJECT_TP = 'gkdc' THEN BEGIN SELECT VERSION INTO L_VERSION  FROM UTGKDC WHERE GK = A_OBJECT_ID  AND VERSION_IS_CURRENT = '1'; A_ACTIVE := '1'; EXCEPTION WHEN NO_DATA_FOUND THEN NULL; END;
      ELSIF A_OBJECT_TP = 'gkch' THEN BEGIN SELECT VERSION INTO L_VERSION  FROM UTGKCH WHERE GK = A_OBJECT_ID  AND VERSION_IS_CURRENT = '1'; A_ACTIVE := '1'; EXCEPTION WHEN NO_DATA_FOUND THEN NULL; END;
      ELSIF A_OBJECT_TP = 'ie' THEN BEGIN SELECT VERSION INTO L_VERSION  FROM UTIE WHERE IE = A_OBJECT_ID  AND VERSION_IS_CURRENT = '1'; A_ACTIVE := '1'; EXCEPTION WHEN NO_DATA_FOUND THEN NULL; END;
      ELSIF A_OBJECT_TP = 'ip' THEN BEGIN SELECT VERSION INTO L_VERSION  FROM UTIP WHERE IP = A_OBJECT_ID  AND VERSION_IS_CURRENT = '1'; A_ACTIVE := '1'; EXCEPTION WHEN NO_DATA_FOUND THEN NULL; END;
      ELSIF A_OBJECT_TP = 'lc' THEN BEGIN SELECT VERSION INTO L_VERSION  FROM UTLC WHERE LC = A_OBJECT_ID  AND VERSION_IS_CURRENT = '1'; A_ACTIVE := '1'; EXCEPTION WHEN NO_DATA_FOUND THEN NULL; END;
      ELSIF A_OBJECT_TP = 'mt' THEN BEGIN SELECT VERSION INTO L_VERSION  FROM UTMT WHERE MT = A_OBJECT_ID  AND VERSION_IS_CURRENT = '1'; A_ACTIVE := '1'; EXCEPTION WHEN NO_DATA_FOUND THEN NULL; END;
      
      ELSIF A_OBJECT_TP = 'pr' THEN BEGIN SELECT VERSION INTO L_VERSION  FROM UTPR WHERE PR = A_OBJECT_ID  AND VERSION_IS_CURRENT = '1'; A_ACTIVE := '1'; EXCEPTION WHEN NO_DATA_FOUND THEN NULL; END;
      ELSIF A_OBJECT_TP = 'pt' THEN BEGIN SELECT VERSION INTO L_VERSION  FROM UTPT WHERE PT = A_OBJECT_ID  AND VERSION_IS_CURRENT = '1'; A_ACTIVE := '1'; EXCEPTION WHEN NO_DATA_FOUND THEN NULL; END;
      ELSIF A_OBJECT_TP = 'rt' THEN BEGIN SELECT VERSION INTO L_VERSION  FROM UTRT WHERE RT = A_OBJECT_ID  AND VERSION_IS_CURRENT = '1'; A_ACTIVE := '1'; EXCEPTION WHEN NO_DATA_FOUND THEN NULL; END;
      ELSIF A_OBJECT_TP = 'st' THEN BEGIN SELECT VERSION INTO L_VERSION  FROM UTST WHERE ST = A_OBJECT_ID  AND VERSION_IS_CURRENT = '1'; A_ACTIVE := '1'; EXCEPTION WHEN NO_DATA_FOUND THEN NULL; END;
      ELSIF A_OBJECT_TP = 'tk' THEN BEGIN SELECT VERSION INTO L_VERSION  FROM UTTK WHERE TK = A_OBJECT_ID  AND VERSION_IS_CURRENT = '1'; A_ACTIVE := '1'; EXCEPTION WHEN NO_DATA_FOUND THEN NULL; END;
      ELSIF A_OBJECT_TP = 'uc' THEN BEGIN SELECT VERSION INTO L_VERSION  FROM UTUC WHERE UC = A_OBJECT_ID  AND VERSION_IS_CURRENT = '1'; A_ACTIVE := '1'; EXCEPTION WHEN NO_DATA_FOUND THEN NULL; END;
      ELSIF A_OBJECT_TP = 'up' THEN BEGIN SELECT VERSION INTO L_VERSION  FROM UTUP WHERE UP = A_OBJECT_ID  AND VERSION_IS_CURRENT = '1'; A_ACTIVE := '1'; EXCEPTION WHEN NO_DATA_FOUND THEN NULL; END;
      ELSIF A_OBJECT_TP = 'wt' THEN BEGIN SELECT VERSION INTO L_VERSION  FROM UTWT WHERE WT = A_OBJECT_ID  AND VERSION_IS_CURRENT = '1'; A_ACTIVE := '1'; EXCEPTION WHEN NO_DATA_FOUND THEN NULL; END;
      ELSE      
         L_SQL_STRING := 'SELECT version FROM ut' || A_OBJECT_TP ;
         
         IF SUBSTR(A_OBJECT_TP, 1, 2) = 'gk' THEN
            L_SQL_STRING := L_SQL_STRING ||
                            ' WHERE gk = :a_object_id' || 
                            ' AND version_is_current = ''1''';
            RETURN(L_VERSION);
         ELSE
            L_SQL_STRING := L_SQL_STRING ||
                            ' WHERE ' || A_OBJECT_TP || ' = :a_object_id' || 
                            ' AND version_is_current = ''1''';
         END IF;
         L_VERSION_CURSOR := DBMS_SQL.OPEN_CURSOR;
         DBMS_SQL.PARSE(L_VERSION_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         DBMS_SQL.BIND_VARIABLE(L_VERSION_CURSOR, ':a_object_id', A_OBJECT_ID);
         DBMS_SQL.DEFINE_COLUMN(L_VERSION_CURSOR, 1, L_VERSION, 20);
         L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_VERSION_CURSOR);
         IF L_RESULT <> 0 THEN
            A_ACTIVE := '1'; 
            DBMS_SQL.COLUMN_VALUE(L_VERSION_CURSOR, 1, L_VERSION);
         END IF;
         DBMS_SQL.CLOSE_CURSOR(L_VERSION_CURSOR);
      END IF;
   END IF;
   IF L_VERSION IS NULL THEN
      RAISE NO_DATA_FOUND;
   ELSE
      RETURN(L_VERSION);
   END IF;
EXCEPTION
WHEN NO_DATA_FOUND THEN
   IF DBMS_SQL.IS_OPEN(L_VERSION_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_VERSION_CURSOR);
   END IF;
   A_ACTIVE := '0';
   RETURN(NULL);
WHEN OTHERS THEN
   IF DBMS_SQL.IS_OPEN(L_VERSION_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_VERSION_CURSOR);
   END IF;
   A_ACTIVE := '0';
   RETURN(NULL);
END INTERNALUSEVERSION;

FUNCTION USEVERSION                           
(A_OBJECT_TP              IN       VARCHAR2,  
 A_OBJECT_ID              IN       VARCHAR2,  
 A_OBJECT_VERSION         IN       VARCHAR2)  
RETURN VARCHAR2 IS

L_ACTIVE   CHAR(1);

BEGIN

RETURN(INTERNALUSEVERSION(A_OBJECT_TP, A_OBJECT_ID, A_OBJECT_VERSION, L_ACTIVE));

END USEVERSION;

FUNCTION INTERNALUSEPPVERSION                 
(A_PP                     IN       VARCHAR2,  
 A_VERSION                IN       VARCHAR2,  
 A_PP_KEY1                IN       VARCHAR2,  
 A_PP_KEY2                IN       VARCHAR2,  
 A_PP_KEY3                IN       VARCHAR2,  
 A_PP_KEY4                IN       VARCHAR2,  
 A_PP_KEY5                IN       VARCHAR2,  
 A_ACTIVE                 OUT      VARCHAR2)  
RETURN VARCHAR2 IS

L_VERSION        VARCHAR2(20);
L_OBJECT_VERSION VARCHAR2(20);

L_CURRENT_VERSION      VARCHAR2(20);
L_MAX_ACTIVE_VERSION   VARCHAR2(20);
L_MAX_INACTIVE_VERSION VARCHAR2(20);

BEGIN
   IF A_PP IS NULL OR
      A_PP_KEY1 IS NULL OR
      A_PP_KEY2 IS NULL OR
      A_PP_KEY3 IS NULL OR
      A_PP_KEY4 IS NULL OR
      A_PP_KEY5 IS NULL THEN
      RETURN(NULL);
   END IF;
      
   A_ACTIVE := '0';
   IF A_VERSION IS NOT NULL AND A_VERSION <> '~Current~' THEN
      IF INSTR(A_VERSION, '*')<>0 THEN
         
         L_VERSION := NULL;
         
         L_OBJECT_VERSION := REPLACE(A_VERSION, '*', '%');
         
         
         SELECT MAX(DECODE(VERSION_IS_CURRENT, '1', VERSION, NULL)) CURRENT_VERSION, 
                MAX(DECODE(ACTIVE, '1', VERSION, NULL)) MAX_ACTIVE_VERSION,
                MAX( VERSION ) MAX_INACTIVE_VERSION
         INTO L_CURRENT_VERSION, L_MAX_ACTIVE_VERSION, L_MAX_INACTIVE_VERSION
         FROM UTPP
         WHERE PP=A_PP
         AND PP_KEY1=A_PP_KEY1
         AND PP_KEY2=A_PP_KEY2
         AND PP_KEY3=A_PP_KEY3
         AND PP_KEY4=A_PP_KEY4
         AND PP_KEY5=A_PP_KEY5
         AND VERSION LIKE L_OBJECT_VERSION;
         IF L_CURRENT_VERSION IS NOT NULL THEN
            L_VERSION := L_CURRENT_VERSION;
            A_ACTIVE := '1';
         ELSIF L_MAX_ACTIVE_VERSION IS NOT NULL THEN
            L_VERSION := L_MAX_ACTIVE_VERSION;
            A_ACTIVE := '1';
         ELSE
            L_VERSION := L_MAX_INACTIVE_VERSION;
            A_ACTIVE := '0';
         END IF;
      ELSE
         
         L_VERSION := NULL;
         
         
         BEGIN
            SELECT ACTIVE 
            INTO A_ACTIVE
            FROM UTPP
            WHERE PP = A_PP 
            AND PP_KEY1=A_PP_KEY1 
            AND PP_KEY2=A_PP_KEY2 
            AND PP_KEY3=A_PP_KEY3 
            AND PP_KEY4=A_PP_KEY4 
            AND PP_KEY5=A_PP_KEY5 
            AND VERSION = A_VERSION;
            RETURN(A_VERSION); 
         EXCEPTION WHEN NO_DATA_FOUND THEN 
            A_ACTIVE:='0'; 
            RETURN(NULL); 
         END;         
      END IF;
   ELSE
      
      BEGIN
         SELECT VERSION 
         INTO L_VERSION
         FROM UTPP
         WHERE PP = A_PP 
         AND PP_KEY1=A_PP_KEY1 
         AND PP_KEY2=A_PP_KEY2 
         AND PP_KEY3=A_PP_KEY3 
         AND PP_KEY4=A_PP_KEY4 
         AND PP_KEY5=A_PP_KEY5 
         AND VERSION_IS_CURRENT = '1';
         A_ACTIVE := '1'; 
      EXCEPTION 
      WHEN NO_DATA_FOUND THEN 
         NULL; 
      END;         
   END IF;
   IF L_VERSION IS NULL THEN
      RAISE NO_DATA_FOUND;
   ELSE
      RETURN(L_VERSION);
   END IF;
EXCEPTION
WHEN NO_DATA_FOUND THEN
   A_ACTIVE := '0';   
   RETURN(NULL);
WHEN OTHERS THEN
   A_ACTIVE := '0';
   RETURN(NULL);
END INTERNALUSEPPVERSION;

FUNCTION USEPPVERSION                         
(A_PP                     IN       VARCHAR2,  
 A_VERSION                IN       VARCHAR2,  
 A_PP_KEY1                IN       VARCHAR2,  
 A_PP_KEY2                IN       VARCHAR2,  
 A_PP_KEY3                IN       VARCHAR2,  
 A_PP_KEY4                IN       VARCHAR2,  
 A_PP_KEY5                IN       VARCHAR2)  
RETURN VARCHAR2 IS

L_ACTIVE   CHAR(1);

BEGIN
   RETURN(INTERNALUSEPPVERSION(A_PP, A_VERSION, A_PP_KEY1, A_PP_KEY2, A_PP_KEY3, A_PP_KEY4, A_PP_KEY5, L_ACTIVE));
END USEPPVERSION;

FUNCTION USEVERSION4TK                     
(A_TK_TP               IN       VARCHAR2,  
 A_TK                  IN       VARCHAR2,  
 A_TK_VERSION          IN       VARCHAR2)  
RETURN VARCHAR2 IS

BEGIN

   RETURN(NULL);

END USEVERSION4TK;

FUNCTION VALIDATEVERSION                                  
(A_OBJECT_TP              IN       VARCHAR2,              
 A_OBJECT_ID              IN       VARCHAR2,              
 A_OBJECT_VERSION         IN       VARCHAR2)              
RETURN VARCHAR2 IS

L_OBJECT_VERSION VARCHAR2(20);
L_ACTIVE         CHAR(1);

BEGIN

   

   
   IF A_OBJECT_TP IS NULL THEN
      RAISE_APPLICATION_ERROR(-20000, 'No object type passed to UNAPIGEN.ValidateVersion');
   ELSIF  A_OBJECT_ID IS NULL THEN
      RAISE_APPLICATION_ERROR(-20000, 'No object id passed to UNAPIGEN.ValidateVersion for object type "'||A_OBJECT_TP||'"');
   ELSIF A_OBJECT_TP = 'pp' THEN
      
      RAISE_APPLICATION_ERROR(-20000, 'ValidateVersion may not be used for a pp - use the function UNAPIGEN.ValidatePpVersion instead');
   END IF;

   L_OBJECT_VERSION := INTERNALUSEVERSION(A_OBJECT_TP, A_OBJECT_ID , A_OBJECT_VERSION, L_ACTIVE);
   IF (A_OBJECT_VERSION IS NULL) OR (A_OBJECT_ID = '/') THEN
      
      
      
      
      
      NULL;
   ELSE
      IF A_OBJECT_VERSION <> NVL(L_OBJECT_VERSION, ' ') AND
         L_OBJECT_VERSION IS NULL THEN
         
         RAISE_APPLICATION_ERROR(-20000, 'No corresponding version found by UNAPIGEN.ValidateVersion for object_type='||A_OBJECT_TP||'#object_id='||A_OBJECT_ID||'#version_in='||A_OBJECT_VERSION);
      END IF;      
      IF L_OBJECT_VERSION IS NOT NULL AND 
         L_ACTIVE = '0' THEN
         IF UNAPIGEN.ISSYSTEM21CFR11COMPLIANT = UNAPIGEN.DBERR_SUCCESS THEN
            RAISE_APPLICATION_ERROR(-20000, 'Version '||L_OBJECT_VERSION||' is not active. UNAPIGEN.ValidateVersion for object_type='||A_OBJECT_TP||'#object_id='||A_OBJECT_ID||'#version_in='||A_OBJECT_VERSION);
         END IF;
      END IF;
   END IF;
   RETURN(L_OBJECT_VERSION);
END VALIDATEVERSION;

FUNCTION VALIDATEPPVERSION                                   
(A_PP                     IN       VARCHAR2,                 
 A_VERSION                IN       VARCHAR2,                 
 A_PP_KEY1                IN       VARCHAR2,                 
 A_PP_KEY2                IN       VARCHAR2,                 
 A_PP_KEY3                IN       VARCHAR2,                 
 A_PP_KEY4                IN       VARCHAR2,                 
 A_PP_KEY5                IN       VARCHAR2,                 
 A_ALT_OBJECT_VERSION     IN       VARCHAR2 DEFAULT NULL,    
 A_RETURN_ERROR_INSTEAD   IN       VARCHAR2 DEFAULT 'FALSE') 
RETURN VARCHAR2 IS

L_OBJECT_VERSION VARCHAR2(20);
L_ACTIVE         CHAR(1);

BEGIN

   

   
   IF  A_PP IS NULL THEN
      RAISE_APPLICATION_ERROR(-20000, 'No parameter profile id passed to UNAPIGEN.ValidatePpVersion');
   END IF;
   IF  A_PP_KEY1 IS NULL THEN
      RAISE_APPLICATION_ERROR(-20000, 'No pp_key1 id passed to UNAPIGEN.ValidatePpVersion');
   ELSIF  A_PP_KEY2 IS NULL THEN
      RAISE_APPLICATION_ERROR(-20000, 'No pp_key2 id passed to UNAPIGEN.ValidatePpVersion');
   ELSIF  A_PP_KEY3 IS NULL THEN
      RAISE_APPLICATION_ERROR(-20000, 'No pp_key3 id passed to UNAPIGEN.ValidatePpVersion');
   ELSIF  A_PP_KEY4 IS NULL THEN
      RAISE_APPLICATION_ERROR(-20000, 'No pp_key4 id passed to UNAPIGEN.ValidatePpVersion');
   ELSIF  A_PP_KEY5 IS NULL THEN
      RAISE_APPLICATION_ERROR(-20000, 'No pp_key5 id passed to UNAPIGEN.ValidatePpVersion');
   END IF;

   L_OBJECT_VERSION := INTERNALUSEPPVERSION(A_PP, A_VERSION, A_PP_KEY1, A_PP_KEY2, A_PP_KEY3, A_PP_KEY4, A_PP_KEY5, L_ACTIVE);
   IF (A_VERSION IS NULL) OR (A_PP = '/') THEN
      
      
      
      
      
      NULL;
   ELSE
      IF A_VERSION <> NVL(L_OBJECT_VERSION, ' ') AND
         L_OBJECT_VERSION IS NULL THEN
         
         RAISE_APPLICATION_ERROR(-20000, 'No corresponding version found by UNAPIGEN.ValidatePpVersion for pp='||A_PP||'#version_in='||A_VERSION||
                                 '#pp_key1='||A_PP_KEY1||'#pp_key2='||A_PP_KEY2||'#pp_key3='||A_PP_KEY3||
                                 '#pp_key4='||A_PP_KEY4||'#pp_key5='||A_PP_KEY5);
      END IF;      
      IF L_OBJECT_VERSION IS NOT NULL AND 
         L_ACTIVE = '0' THEN
         IF UNAPIGEN.ISSYSTEM21CFR11COMPLIANT = UNAPIGEN.DBERR_SUCCESS THEN
            RAISE_APPLICATION_ERROR(-20000, 'Version '||L_OBJECT_VERSION||' is not active. UNAPIGEN.ValidateVersion for pp='||A_PP||'#version_in='||A_VERSION||
                                    '#pp_key1='||A_PP_KEY1||'#pp_key2='||A_PP_KEY2||'#pp_key3='||A_PP_KEY3||
                                    '#pp_key4='||A_PP_KEY4||'#pp_key5='||A_PP_KEY5);
         END IF;
      END IF;      
   END IF;
   RETURN(L_OBJECT_VERSION);
EXCEPTION

WHEN OTHERS THEN
   IF SQLCODE = -20000 THEN
      IF A_RETURN_ERROR_INSTEAD = 'TRUE' THEN
         UNAPIGEN.P_TXN_ERROR_TEXT := SUBSTR(SQLERRM,1,255); 
         RETURN('ERROR');
      END IF;
      IF A_ALT_OBJECT_VERSION IS NOT NULL THEN
         RETURN(A_ALT_OBJECT_VERSION);
      END IF;
   END IF;
   
   RAISE;
END VALIDATEPPVERSION;

FUNCTION SQLUSERDESCRIPTION                               
(A_AD              IN       VARCHAR2)                     
RETURN VARCHAR2 IS

CURSOR L_AD_CURSOR (C_AD VARCHAR2) IS
   SELECT NVL(A.PERSON, A.AD)
   FROM UTAD A
   WHERE A.AD = C_AD
   AND VERSION =(SELECT NVL( MAX(DECODE(VERSION_IS_CURRENT, 1, VERSION, NULL)), MAX(VERSION)) 
                 FROM UTAD
                 WHERE AD = C_AD);
L_AD_DESCRIPTION VARCHAR2(40);

BEGIN

   OPEN L_AD_CURSOR(A_AD);
   FETCH L_AD_CURSOR
   INTO L_AD_DESCRIPTION;
   CLOSE L_AD_CURSOR;
   RETURN(L_AD_DESCRIPTION);
EXCEPTION
WHEN OTHERS THEN
   IF L_AD_CURSOR%ISOPEN THEN
      CLOSE L_AD_CURSOR;
   END IF;
   RETURN(NULL);
END SQLUSERDESCRIPTION;

FUNCTION SQLSSNAME                               
(A_SS              IN       VARCHAR2)            
RETURN VARCHAR2 IS

CURSOR L_SS_CURSOR (C_SS VARCHAR2) IS
         SELECT NAME
         FROM UTSS
         WHERE SS = C_SS;
L_SS_NAME VARCHAR2(20);

BEGIN
   OPEN L_SS_CURSOR(A_SS);
   FETCH L_SS_CURSOR
   INTO L_SS_NAME;
   IF L_SS_CURSOR%NOTFOUND THEN
      IF A_SS = '@~' THEN
         L_SS_NAME := 'Initial';
      END IF;
   END IF;
   CLOSE L_SS_CURSOR;
   RETURN(L_SS_NAME);
EXCEPTION
WHEN OTHERS THEN
   IF L_SS_CURSOR%ISOPEN THEN
      CLOSE L_SS_CURSOR;
   END IF;
   RETURN(NULL);
END SQLSSNAME;

FUNCTION SQLLCNAME                               
(A_LC              IN       VARCHAR2)            
RETURN VARCHAR2 IS

CURSOR L_LC_CURSOR (C_LC VARCHAR2) IS
         SELECT NAME
         FROM UTLC
         WHERE LC = C_LC
           AND VERSION_IS_CURRENT = '1';
L_LC_NAME VARCHAR2(20);

BEGIN
   OPEN L_LC_CURSOR(A_LC);
   FETCH L_LC_CURSOR
   INTO L_LC_NAME;
   CLOSE L_LC_CURSOR;
   RETURN(L_LC_NAME);
EXCEPTION
WHEN OTHERS THEN
   IF L_LC_CURSOR%ISOPEN THEN
      CLOSE L_LC_CURSOR;
   END IF;
   RETURN(NULL);
END SQLLCNAME;

FUNCTION SQLCURRENTVERSION                       
(A_OBJ_TP          IN       VARCHAR2,            
 A_OBJ_ID          IN       VARCHAR2)            
RETURN VARCHAR2 IS

L_OBJ_CURSOR        INTEGER;
L_VERSION           VARCHAR2(20);

BEGIN
   IF A_OBJ_TP = 'pp' THEN
      
      RAISE_APPLICATION_ERROR(-20000, 'SQLCurrentVersion may not be used for a pp - use the function UNAPIGEN.SQLCurrentPpVersion instead');
   END IF;
   L_OBJ_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT version FROM ut' || A_OBJ_TP ||
                   ' WHERE '|| A_OBJ_TP || ' = ''' || A_OBJ_ID || ''' AND version_is_current = ''1''';

   DBMS_SQL.PARSE(L_OBJ_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   DBMS_SQL.DEFINE_COLUMN(L_OBJ_CURSOR, 1, L_VERSION, 20);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_OBJ_CURSOR);
   DBMS_SQL.COLUMN_VALUE(L_OBJ_CURSOR, 1, L_VERSION);
   DBMS_SQL.CLOSE_CURSOR(L_OBJ_CURSOR);

   RETURN(L_VERSION);
EXCEPTION
WHEN OTHERS THEN
   RETURN(NULL);
END SQLCURRENTVERSION;

FUNCTION SQLCURRENTPPVERSION                     
(A_PP                     IN       VARCHAR2,     
 A_VERSION                IN       VARCHAR2,     
 A_PP_KEY1                IN       VARCHAR2,     
 A_PP_KEY2                IN       VARCHAR2,     
 A_PP_KEY3                IN       VARCHAR2,     
 A_PP_KEY4                IN       VARCHAR2,     
 A_PP_KEY5                IN       VARCHAR2)     
RETURN VARCHAR2 IS

L_OBJ_CURSOR        INTEGER;
L_VERSION           VARCHAR2(20);

BEGIN

   L_OBJ_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT version FROM utpp' ||
                   ' WHERE pp= :a_pp '||
                   ' AND pp_key1 = :a_pp_key1'||
                   ' AND pp_key2 = :a_pp_key2'||
                   ' AND pp_key3 = :a_pp_key3'||
                   ' AND pp_key4 = :a_pp_key4'||
                   ' AND pp_key5 = :a_pp_key5'||
                   ' AND version_is_current = ''1''';

   DBMS_SQL.PARSE(L_OBJ_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   DBMS_SQL.BIND_VARIABLE(L_OBJ_CURSOR, ':a_pp', A_PP);
   DBMS_SQL.BIND_VARIABLE(L_OBJ_CURSOR, ':a_pp_key1', A_PP_KEY1);
   DBMS_SQL.BIND_VARIABLE(L_OBJ_CURSOR, ':a_pp_key2', A_PP_KEY2);
   DBMS_SQL.BIND_VARIABLE(L_OBJ_CURSOR, ':a_pp_key3', A_PP_KEY3);
   DBMS_SQL.BIND_VARIABLE(L_OBJ_CURSOR, ':a_pp_key4', A_PP_KEY4);
   DBMS_SQL.BIND_VARIABLE(L_OBJ_CURSOR, ':a_pp_key5', A_PP_KEY5);
   DBMS_SQL.DEFINE_COLUMN(L_OBJ_CURSOR, 1, L_VERSION, 20);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_OBJ_CURSOR);
   DBMS_SQL.COLUMN_VALUE(L_OBJ_CURSOR, 1, L_VERSION);
   DBMS_SQL.CLOSE_CURSOR(L_OBJ_CURSOR);

   RETURN(L_VERSION);
EXCEPTION
WHEN OTHERS THEN
   RETURN(NULL);
END SQLCURRENTPPVERSION;

FUNCTION ISSYSTEM21CFR11COMPLIANT                      
RETURN NUMBER IS


L_APP_ID_TAB                  CXSAPILK.VC20_TABLE_TYPE;
L_APP_VERSION_TAB             CXSAPILK.VC20_TABLE_TYPE;
L_APP_CUSTOM_PARAM_TAB        CXSAPILK.VC20_TABLE_TYPE;
L_LIC_CHECK_OK_4_APP_TAB      CXSAPILK.NUM_TABLE_TYPE;
L_MAX_USERS_4_APP_TAB         CXSAPILK.NUM_TABLE_TYPE;
L_NR_OF_ROWS                  NUMBER;
L_ERROR_MESSAGE               VARCHAR2(255);
L_COUNT_LICENSE               INTEGER;

BEGIN
  
   IF P_FDACOMPLIANT IS NULL THEN
      L_APP_ID_TAB(1) := 'IULS'; L_APP_VERSION_TAB(1) := '0607'; L_APP_CUSTOM_PARAM_TAB(1):= 'U6';
      L_APP_ID_TAB(2) := 'IULS'; L_APP_VERSION_TAB(2) := '0607'; L_APP_CUSTOM_PARAM_TAB(2):= 'A6';
      L_APP_ID_TAB(3) := 'IULS'; L_APP_VERSION_TAB(3) := '0607'; L_APP_CUSTOM_PARAM_TAB(3):= 'T6';
      L_APP_ID_TAB(4) := 'RULS'; L_APP_VERSION_TAB(4) := '0607'; L_APP_CUSTOM_PARAM_TAB(4):= 'U6';
      L_APP_ID_TAB(5) := 'RULS'; L_APP_VERSION_TAB(5) := '0607'; L_APP_CUSTOM_PARAM_TAB(5):= 'A6';
      L_APP_ID_TAB(6) := 'RULS'; L_APP_VERSION_TAB(6) := '0607'; L_APP_CUSTOM_PARAM_TAB(6):= 'T6';
      L_NR_OF_ROWS               := 6;   
      BEGIN
         L_RET_CODE := CXSAPILK.CHECKLICENSE( L_APP_ID_TAB,
                                              L_APP_VERSION_TAB,
                                              L_APP_CUSTOM_PARAM_TAB,
                                              L_LIC_CHECK_OK_4_APP_TAB,
                                              L_MAX_USERS_4_APP_TAB,
                                              L_NR_OF_ROWS,
                                              L_ERROR_MESSAGE);
         IF L_RET_CODE NOT IN (UNAPIGEN.DBERR_SUCCESS, CXSAPILK.DBERR_OK_NO_ALM) THEN
            P_FDACOMPLIANT := 'NO';         
         ELSE
            P_FDACOMPLIANT := 'YES';
         END IF;
      EXCEPTION
      WHEN OTHERS THEN
         
         BEGIN
            EXECUTE IMMEDIATE 'SELECT COUNT(*) FROM ctlicsecid'
            INTO L_COUNT_LICENSE;         
         EXCEPTION
         WHEN OTHERS THEN
            BEGIN
               EXECUTE IMMEDIATE 'SELECT COUNT(*) FROM rndlicense.ctlicsecid'
               INTO L_COUNT_LICENSE;         
            EXCEPTION
            WHEN OTHERS THEN
               L_COUNT_LICENSE :=0;
            END;
         END;
         
         IF L_COUNT_LICENSE = 0 THEN
            
            P_FDACOMPLIANT := 'NO';         
         ELSE
            RAISE;
         END IF;
      END;        
   END IF;
   IF P_FDACOMPLIANT = 'YES' THEN
      RETURN(UNAPIGEN.DBERR_SUCCESS);
   ELSE
      RETURN(UNAPIGEN.DBERR_GENFAIL);
   END IF;     
END ISSYSTEM21CFR11COMPLIANT;

FUNCTION ISSYSTEMSUPPORTINGEQMNGMT                      
RETURN NUMBER IS


L_APP_ID_TAB                  CXSAPILK.VC20_TABLE_TYPE;
L_APP_VERSION_TAB             CXSAPILK.VC20_TABLE_TYPE;
L_APP_CUSTOM_PARAM_TAB        CXSAPILK.VC20_TABLE_TYPE;
L_LIC_CHECK_OK_4_APP_TAB      CXSAPILK.NUM_TABLE_TYPE;
L_MAX_USERS_4_APP_TAB         CXSAPILK.NUM_TABLE_TYPE;
L_NR_OF_ROWS                  NUMBER;
L_ERROR_MESSAGE               VARCHAR2(255);

BEGIN
   IF P_EQMNGMT_SUPPORTED IS NULL THEN
      L_APP_ID_TAB(1) := 'IULS'; L_APP_VERSION_TAB(1) := '0607'; L_APP_CUSTOM_PARAM_TAB(1):= 'U3';
      L_APP_ID_TAB(2) := 'IULS'; L_APP_VERSION_TAB(2) := '0607'; L_APP_CUSTOM_PARAM_TAB(2):= 'A3';
      L_APP_ID_TAB(3) := 'IULS'; L_APP_VERSION_TAB(3) := '0607'; L_APP_CUSTOM_PARAM_TAB(3):= 'T3';
      L_APP_ID_TAB(4) := 'RULS'; L_APP_VERSION_TAB(4) := '0607'; L_APP_CUSTOM_PARAM_TAB(4):= 'U3';
      L_APP_ID_TAB(5) := 'RULS'; L_APP_VERSION_TAB(5) := '0607'; L_APP_CUSTOM_PARAM_TAB(5):= 'A3';
      L_APP_ID_TAB(6) := 'RULS'; L_APP_VERSION_TAB(6) := '0607'; L_APP_CUSTOM_PARAM_TAB(6):= 'T3';
      L_NR_OF_ROWS               := 6;   
      L_RET_CODE := CXSAPILK.CHECKLICENSE( L_APP_ID_TAB,
                                           L_APP_VERSION_TAB,
                                           L_APP_CUSTOM_PARAM_TAB,
                                           L_LIC_CHECK_OK_4_APP_TAB,
                                           L_MAX_USERS_4_APP_TAB,
                                           L_NR_OF_ROWS,
                                           L_ERROR_MESSAGE);
      IF L_RET_CODE NOT IN (UNAPIGEN.DBERR_SUCCESS, CXSAPILK.DBERR_OK_NO_ALM) THEN
         P_EQMNGMT_SUPPORTED := 'NO';
      ELSE
         P_EQMNGMT_SUPPORTED := 'YES';
      END IF;
   END IF;
   IF P_EQMNGMT_SUPPORTED = 'YES' THEN
      RETURN(UNAPIGEN.DBERR_SUCCESS);
   ELSE
      RETURN(UNAPIGEN.DBERR_GENFAIL);
   END IF;     
END ISSYSTEMSUPPORTINGEQMNGMT;

FUNCTION ISSYSTEMSUPPORTINGRNDSUITE                      
RETURN NUMBER IS
L_SETTING_VALUE      VARCHAR2(255);
BEGIN
   
   IF P_RNDSUITE_SUPPORTED IS NULL THEN
      BEGIN
         SELECT SETTING_VALUE
         INTO L_SETTING_VALUE
         FROM UTSYSTEM
         WHERE SETTING_NAME = 'RNDSUITEENABLED';
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
         L_SETTING_VALUE := '0';
      END;      
      IF L_SETTING_VALUE = '1' THEN
         P_RNDSUITE_SUPPORTED := '1';
      ELSE
         P_RNDSUITE_SUPPORTED := '0';
      END IF;
   END IF;
   IF P_RNDSUITE_SUPPORTED = '1' THEN
      RETURN(UNAPIGEN.DBERR_SUCCESS);
   ELSE
      RETURN(UNAPIGEN.DBERR_GENFAIL);
   END IF;     
END ISSYSTEMSUPPORTINGRNDSUITE;

FUNCTION SETSESSIONRNDSUITEMODEON
RETURN NUMBER IS
BEGIN
   P_RNDSUITESESSION := '1';
   RETURN(UNAPIGEN.DBERR_SUCCESS);
END SETSESSIONRNDSUITEMODEON;

FUNCTION SETSESSIONRNDSUITEMODEOFF
RETURN NUMBER IS
BEGIN
   P_RNDSUITESESSION := '0';
   RETURN(UNAPIGEN.DBERR_SUCCESS);
END SETSESSIONRNDSUITEMODEOFF;

FUNCTION SELECTCOUNTEVENTSTOPROCESS
(A_TXN_ID      IN    NUMBER,     
 A_COUNT_EV    OUT   NUMBER)     
RETURN NUMBER IS
BEGIN
   IF NVL(UNAPIEV.P_EVMGRS_1QBYINSTANCE,'0') = '0' THEN
      SELECT COUNT('X')
      INTO A_COUNT_EV
      FROM UTEV
      WHERE TR_SEQ = A_TXN_ID;
   ELSE
      EXECUTE IMMEDIATE 'SELECT COUNT(''X'') FROM utev'||UNAPIGEN.P_INSTANCENR||' WHERE tr_seq=:a_txn_id' 
      INTO A_COUNT_EV
      USING A_TXN_ID;
   END IF;
   RETURN UNAPIGEN.DBERR_SUCCESS;
EXCEPTION
WHEN OTHERS THEN
   L_SQLERRM := SQLERRM;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
          'SelectCountEventsToProcess', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END SELECTCOUNTEVENTSTOPROCESS;




FUNCTION SENDMAIL                                     
(A_RECIPIENT        IN   VARCHAR2,                    
 A_SUBJECT          IN   VARCHAR2,                    
 A_TEXT_TAB         IN   UNAPIGEN.VC255_TABLE_TYPE,   
 A_NR_OF_ROWS       IN   NUMBER)                      
RETURN NUMBER IS                   

LRAWDATA          RAW(32767);
L_CONNECTION      UTL_SMTP.CONNECTION;
L_ROW             INTEGER;
L_ISOPEN          BOOLEAN DEFAULT FALSE;

L_RECIPIENT_NR    NUMBER;
L_POS1            NUMBER;
L_POS2            NUMBER;

   PROCEDURE SEND_HEADER(A_CONNECTION IN OUT UTL_SMTP.CONNECTION, A_NAME IN VARCHAR2, A_HEADER IN VARCHAR2) AS
   BEGIN
      UTL_SMTP.WRITE_DATA(A_CONNECTION, A_NAME || ': ' || A_HEADER || UTL_TCP.CRLF);
   END;

   PROCEDURE SEND_RAW_HEADER(A_CONNECTION IN OUT UTL_SMTP.CONNECTION, A_NAME IN VARCHAR2, A_HEADER IN VARCHAR2) AS
      L_RAW RAW(32767);
   BEGIN
      L_RAW := UTL_RAW.CAST_TO_RAW(A_NAME || ': ' || A_HEADER || UTL_TCP.CRLF);
      UTL_SMTP.WRITE_RAW_DATA(A_CONNECTION, L_RAW);
   END;

BEGIN

   
   
   IF L_MAILSETTINGS_FETCHED = '0' THEN
      OPEN C_SYSTEM('SMTP_SERVER');
      FETCH C_SYSTEM
      INTO P_SMTP_SERVER;
      IF C_SYSTEM%NOTFOUND THEN
         INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
         VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                'UNAPIGEN.Initilisation', 'missing system setting: SMTP_SERVER');
         U4COMMIT;
         CLOSE C_SYSTEM;
         RETURN (DBERR_SYSDEFAULTS);
      END IF;
      CLOSE C_SYSTEM;

      OPEN C_SYSTEM('SMTP_DOMAIN');
      FETCH C_SYSTEM
      INTO P_SMTP_DOMAIN;
      IF C_SYSTEM%NOTFOUND THEN
         INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
         VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                'UNAPIGEN.Initilisation', 'missing system setting: SMTP_DOMAIN');
         U4COMMIT;
         CLOSE C_SYSTEM;
         RETURN (DBERR_SYSDEFAULTS);
      END IF;
      CLOSE C_SYSTEM;

      OPEN C_SYSTEM('SMTP_SENDER');
      FETCH C_SYSTEM
      INTO P_SMTP_SENDER;
      IF C_SYSTEM%NOTFOUND THEN
         INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
         VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                'UNAPIGEN.Initilisation', 'missing system setting: SMTP_SENDER');
         U4COMMIT;
         CLOSE C_SYSTEM;
         RETURN (DBERR_SYSDEFAULTS);
      END IF;
      CLOSE C_SYSTEM;
      
      L_MAILSETTINGS_FETCHED := '1';
   END IF;

   
   L_RECIPIENT_NR := 1;
   L_POS2 := 0;
   LOOP
      L_POS1 := L_POS2 + 1;
      L_POS2 := INSTR(A_RECIPIENT, ';', 1, L_RECIPIENT_NR);
      
      
      
      
      
      
      
      
      

      
      L_CONNECTION := UTL_SMTP.OPEN_CONNECTION(P_SMTP_SERVER);
      L_ISOPEN := TRUE;
      
      UTL_SMTP.HELO(L_CONNECTION, P_SMTP_DOMAIN);
      UTL_SMTP.MAIL(L_CONNECTION, P_SMTP_SENDER);
      
      IF L_POS2 <> 0 THEN
         UTL_SMTP.RCPT(L_CONNECTION, SUBSTR(A_RECIPIENT, L_POS1, L_POS2-L_POS1));
      ELSE
         UTL_SMTP.RCPT(L_CONNECTION, SUBSTR(A_RECIPIENT, L_POS1));
      END IF;
      UTL_SMTP.OPEN_DATA(L_CONNECTION);
      SEND_HEADER(L_CONNECTION, 'From',    P_SMTP_SENDER);
      
      IF L_POS2 <> 0 THEN
         SEND_HEADER(L_CONNECTION, 'To',      SUBSTR(A_RECIPIENT, L_POS1, L_POS2-L_POS1));
      ELSE
         SEND_HEADER(L_CONNECTION, 'To',      SUBSTR(A_RECIPIENT, L_POS1));
      END IF;
      
      SEND_RAW_HEADER(L_CONNECTION, 'Subject', A_SUBJECT);
      SEND_HEADER(L_CONNECTION, 'Content-Type', UNAPIGEN.P_SMTP_CONTENT_TYPE);
      FOR L_ROW IN 1..A_NR_OF_ROWS LOOP
         LRAWDATA := UTL_RAW.CAST_TO_RAW(UTL_TCP.CRLF || A_TEXT_TAB(L_ROW));
         UTL_SMTP.WRITE_RAW_DATA(L_CONNECTION, LRAWDATA);
      END LOOP;
      UTL_SMTP.CLOSE_DATA(L_CONNECTION);
      
      UTL_SMTP.QUIT(L_CONNECTION);
      L_ISOPEN := FALSE;

      EXIT WHEN L_POS2 = 0;
      L_RECIPIENT_NR := L_RECIPIENT_NR + 1;     
   END LOOP;

   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN UTL_SMTP.TRANSIENT_ERROR OR UTL_SMTP.PERMANENT_ERROR THEN
   IF L_ISOPEN THEN
      UTL_SMTP.QUIT(L_CONNECTION);
      L_ISOPEN := FALSE;
   END IF;
   L_SQLERRM := 'Failed to send mail due to the following error: ' || SUBSTR(SQLERRM,1,200);
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
          'SendMail', L_SQLERRM);
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
          'SendMail', SUBSTR('Used settings:smtp_server='||P_SMTP_SERVER||'#smtp_domain='||P_SMTP_DOMAIN||'#smtp_sender='||P_SMTP_SENDER||'#smtp_recipient='||A_RECIPIENT||'#Content-Type='||UNAPIGEN.P_SMTP_CONTENT_TYPE,1,255));
   U4COMMIT;
   IF C_SYSTEM%ISOPEN THEN
      CLOSE C_SYSTEM;
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
WHEN OTHERS THEN
   L_SQLERRM := SUBSTR(SQLERRM,1,255);
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
          'SendMail', L_SQLERRM);
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
          'SendMail', SUBSTR('Used settings:smtp_server='||P_SMTP_SERVER||'#smtp_domain='||P_SMTP_DOMAIN||'#smtp_sender='||P_SMTP_SENDER||'#smtp_recipient='||A_RECIPIENT||'...#Content-Type='||UNAPIGEN.P_SMTP_CONTENT_TYPE,1,255));
   U4COMMIT;
   IF L_ISOPEN THEN
      UTL_SMTP.QUIT(L_CONNECTION);
      L_ISOPEN := FALSE;
   END IF;
   IF C_SYSTEM%ISOPEN THEN
      CLOSE C_SYSTEM;
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END SENDMAIL;

PROCEDURE ACTIVATEOBJECT                     
(A_OBJECT_TP            IN     VARCHAR2,     
 A_OBJECT_ID            IN     VARCHAR2,     
 A_OBJECT_OLD_VERSION   IN     VARCHAR2,     
 A_OBJECT_NEW_VERSION   IN     VARCHAR2,     
 A_REFDATE              IN     DATE)         
IS

L_ACTIVATE_CURSOR   INTEGER;
L_OBJECT_CURSOR     INTEGER;
L_EFFECTIVE_FROM    TIMESTAMP WITH TIME ZONE;
L_PLANNED_EFFECTIVE_FROM    TIMESTAMP WITH TIME ZONE;
L_LC                VARCHAR2(2);
L_LC_VERSION        VARCHAR2(20);
L_SS                VARCHAR2(2);
L_LOG_HS            CHAR(1);

BEGIN

   L_SQLERRM := NULL;
   
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      L_SQLERRM := 'BeginTxn failed';
      RAISE STPERROR;
   END IF;

   IF A_OBJECT_TP = 'pp' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      L_SQLERRM := 'ActivatePp must be used instead of ActivateObject for parameter profile objects.';
      RAISE STPERROR;
   END IF;

   
   IF A_OBJECT_OLD_VERSION IS NOT NULL THEN
      UNAPIGEN.DEACTIVATEOBJECT(A_OBJECT_TP, A_OBJECT_ID, A_OBJECT_OLD_VERSION, A_REFDATE, '0');
   END IF;


   
   L_OBJECT_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT a.effective_from '||
                   'FROM ut'||A_OBJECT_TP||' a '||
                   'WHERE a.'||A_OBJECT_TP||' = :l_object_id '||
                   'AND a.version = :l_new_version ';
   DBMS_SQL.PARSE(L_OBJECT_CURSOR, L_SQL_STRING, DBMS_SQL.V7);
   DBMS_SQL.DEFINE_COLUMN(L_OBJECT_CURSOR, 1, L_PLANNED_EFFECTIVE_FROM);
   DBMS_SQL.BIND_VARIABLE(L_OBJECT_CURSOR, ':l_object_id', A_OBJECT_ID);
   DBMS_SQL.BIND_VARIABLE(L_OBJECT_CURSOR, ':l_new_version', A_OBJECT_NEW_VERSION);
   L_RESULT := DBMS_SQL.EXECUTE(L_OBJECT_CURSOR);
   L_RESULT := DBMS_SQL.FETCH_ROWS(L_OBJECT_CURSOR);
   DBMS_SQL.COLUMN_VALUE(L_OBJECT_CURSOR, 1, L_PLANNED_EFFECTIVE_FROM);
   DBMS_SQL.CLOSE_CURSOR(L_OBJECT_CURSOR);
   L_OBJECT_CURSOR := NULL;


   
   L_ACTIVATE_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'UPDATE ut'||A_OBJECT_TP||
                   ' SET version_is_current = ''1'', effective_from = :l_refdate, effective_from_tz = :l_refdate '||
                   'WHERE version = :l_new_version '||
                   'AND '||A_OBJECT_TP||' = :l_object_id';
   DBMS_SQL.PARSE(L_ACTIVATE_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   DBMS_SQL.BIND_VARIABLE(L_ACTIVATE_CURSOR, ':l_refdate', A_REFDATE);
   DBMS_SQL.BIND_VARIABLE(L_ACTIVATE_CURSOR, ':l_new_version', A_OBJECT_NEW_VERSION);
   DBMS_SQL.BIND_VARIABLE(L_ACTIVATE_CURSOR, ':l_object_id', A_OBJECT_ID);
   L_RESULT := DBMS_SQL.EXECUTE(L_ACTIVATE_CURSOR);
   IF L_RESULT = 0 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
      DBMS_SQL.CLOSE_CURSOR(L_ACTIVATE_CURSOR);
      L_SQLERRM := 'No records found while activating '||A_OBJECT_TP||'='||
                    REPLACE(A_OBJECT_ID, '''', '''''') ||'#version='||A_OBJECT_NEW_VERSION;
      RAISE STPERROR;
   END IF;
   DBMS_SQL.CLOSE_CURSOR(L_ACTIVATE_CURSOR);
   L_ACTIVATE_CURSOR := NULL;
   
   
   L_OBJECT_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT a.effective_from, a.lc, '||
                          'a.lc_version, a.ss, a.log_hs '||
                   'FROM ut'||A_OBJECT_TP||' a '||
                   'WHERE a.'||A_OBJECT_TP||' = :l_object_id '||
                   'AND a.version = :l_new_version ';
   DBMS_SQL.PARSE(L_OBJECT_CURSOR, L_SQL_STRING, DBMS_SQL.V7);
   DBMS_SQL.DEFINE_COLUMN(L_OBJECT_CURSOR, 1, L_EFFECTIVE_FROM);
   DBMS_SQL.DEFINE_COLUMN(L_OBJECT_CURSOR, 2, L_LC, 2);
   DBMS_SQL.DEFINE_COLUMN(L_OBJECT_CURSOR, 3, L_LC_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN(L_OBJECT_CURSOR, 4, L_SS, 2);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_OBJECT_CURSOR, 5, L_LOG_HS, 1);
   DBMS_SQL.BIND_VARIABLE(L_OBJECT_CURSOR, ':l_object_id', A_OBJECT_ID);
   DBMS_SQL.BIND_VARIABLE(L_OBJECT_CURSOR, ':l_new_version', A_OBJECT_NEW_VERSION);
   L_RESULT := DBMS_SQL.EXECUTE(L_OBJECT_CURSOR);
   L_RESULT := DBMS_SQL.FETCH_ROWS(L_OBJECT_CURSOR);
   DBMS_SQL.COLUMN_VALUE(L_OBJECT_CURSOR, 1, L_EFFECTIVE_FROM);
   DBMS_SQL.COLUMN_VALUE(L_OBJECT_CURSOR, 2, L_LC);
   DBMS_SQL.COLUMN_VALUE(L_OBJECT_CURSOR, 3, L_LC_VERSION);
   DBMS_SQL.COLUMN_VALUE(L_OBJECT_CURSOR, 4, L_SS);
   DBMS_SQL.COLUMN_VALUE_CHAR(L_OBJECT_CURSOR, 5, L_LOG_HS);
   DBMS_SQL.CLOSE_CURSOR(L_OBJECT_CURSOR);
   L_OBJECT_CURSOR := NULL;

   
   L_EVENT_TP := 'ObjectBecomesCurrent';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT('ActivateObject', UNAPIGEN.P_EVMGR_NAME, A_OBJECT_TP, 
                                   A_OBJECT_ID, L_LC, L_LC_VERSION, L_SS, L_EVENT_TP, 
                                   'version='||A_OBJECT_NEW_VERSION||'#old_current_version='||A_OBJECT_OLD_VERSION, 
                                   L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      DBMS_SQL.CLOSE_CURSOR(L_OBJECT_CURSOR);
      L_SQLERRM := 'Error returned by InsertEvent ret_code='||L_RESULT;               
      RAISE STPERROR;
   END IF;

   
   IF (L_LOG_HS = '1') THEN
      L_ACTIVATE_CURSOR := DBMS_SQL.OPEN_CURSOR;
      IF A_OBJECT_OLD_VERSION IS NULL THEN
         L_SQL_STRING :='INSERT INTO ut'||A_OBJECT_TP||'hs'||
                       '('||A_OBJECT_TP||', version, who, who_description, '||
                         'what, what_description, logdate, logdate_tz, why, tr_seq, ev_seq) ' ||
                       'VALUES(:l_object_id, :l_new_version, :l_user, :l_user_descr, :l_event_tp, ''' || 
                        GETOBJTPDESCRIPTION(A_OBJECT_TP) || ' "''||:l_object_id||''" ' || 
                        'is current on ''||to_char(:l_refdate,:l_dateformat)||''. ' || 
                        'The planned date to become current was ''||' || 
                        'to_char(:l_planned_effective_from,:l_dateformat)||''. The new current version is ''||' ||
                        ':l_new_version||'', no previous current version was available.'', ' ||
                        ':l_refdate, :l_refdate, NULL, :l_tr_seq, :l_ev_seq_nr)'; 
         DBMS_SQL.PARSE(L_ACTIVATE_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      ELSE
         L_SQL_STRING :='INSERT INTO ut'||A_OBJECT_TP||'hs'||
                       '('||A_OBJECT_TP||', version, who, who_description, '||
                         'what, what_description, logdate, logdate_tz, why, tr_seq, ev_seq) ' ||
                       'VALUES(:l_object_id, :l_new_version, :l_user, :l_user_descr, :l_event_tp, ''' || 
                        GETOBJTPDESCRIPTION(A_OBJECT_TP) || ' "''||:l_object_id||''" ' || 
                        'is current on ''||to_char(:l_refdate,:l_dateformat)||''. ' ||
                        'The planned date to become current was ''||' || 
                        'to_char(:l_planned_effective_from,:l_dateformat)||''. The new current version is ''||' ||
                        ':l_new_version||'', replacing version ''||:l_old_version||''.'', ' ||
                        ':l_refdate, :l_refdate, NULL, :l_tr_seq, :l_ev_seq_nr)'; 
         DBMS_SQL.PARSE(L_ACTIVATE_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         DBMS_SQL.BIND_VARIABLE(L_ACTIVATE_CURSOR, ':l_old_version', A_OBJECT_OLD_VERSION);
      END IF;
      DBMS_SQL.BIND_VARIABLE(L_ACTIVATE_CURSOR, ':l_object_id', A_OBJECT_ID);
      DBMS_SQL.BIND_VARIABLE(L_ACTIVATE_CURSOR, ':l_new_version', A_OBJECT_NEW_VERSION);
      DBMS_SQL.BIND_VARIABLE(L_ACTIVATE_CURSOR, ':l_user', UNAPIGEN.P_USER);
      DBMS_SQL.BIND_VARIABLE(L_ACTIVATE_CURSOR, ':l_user_descr', UNAPIGEN.P_USER_DESCRIPTION);
      DBMS_SQL.BIND_VARIABLE(L_ACTIVATE_CURSOR, ':l_event_tp', L_EVENT_TP);
      DBMS_SQL.BIND_VARIABLE(L_ACTIVATE_CURSOR, ':l_refdate', A_REFDATE);
      DBMS_SQL.BIND_VARIABLE(L_ACTIVATE_CURSOR, ':l_dateformat', P_JOBS_DATE_FORMAT);
      DBMS_SQL.BIND_VARIABLE(L_ACTIVATE_CURSOR, 'l_planned_effective_from', L_PLANNED_EFFECTIVE_FROM);
      DBMS_SQL.BIND_VARIABLE(L_ACTIVATE_CURSOR, ':l_tr_seq', UNAPIGEN.P_TR_SEQ);
      DBMS_SQL.BIND_VARIABLE(L_ACTIVATE_CURSOR, ':l_ev_seq_nr', L_EV_SEQ_NR);
      L_RESULT := DBMS_SQL.EXECUTE(L_ACTIVATE_CURSOR);
      IF L_RESULT = 0 THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
         DBMS_SQL.CLOSE_CURSOR(L_ACTIVATE_CURSOR);
         L_SQLERRM := 'Insert in history did not insert any record';                                 
         RAISE STPERROR;
      END IF;
      DBMS_SQL.CLOSE_CURSOR(L_ACTIVATE_CURSOR);
      L_ACTIVATE_CURSOR := NULL;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      L_SQLERRM := 'EndTxn failed';                                    
      RAISE STPERROR;
   END IF;
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      L_SQLERRM := SQLERRM;
   END IF;
   UNAPIGEN.U4ROLLBACK;
   IF L_SQLERRM IS NOT NULL THEN
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
             'ActivateObject', L_SQLERRM);   
      UNAPIGEN.U4COMMIT;
   END IF;
   IF DBMS_SQL.IS_OPEN(L_ACTIVATE_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_ACTIVATE_CURSOR);
   END IF;
   IF DBMS_SQL.IS_OPEN(L_OBJECT_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_OBJECT_CURSOR);
   END IF;
   L_RET_CODE := UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'ActivateObject');
END ACTIVATEOBJECT;

PROCEDURE ACTIVATEPP                         
(A_PP                   IN     VARCHAR2,     
 A_PP_OLD_VERSION       IN     VARCHAR2,     
 A_PP_NEW_VERSION       IN     VARCHAR2,     
 A_PP_KEY1              IN     VARCHAR2,     
 A_PP_KEY2              IN     VARCHAR2,     
 A_PP_KEY3              IN     VARCHAR2,     
 A_PP_KEY4              IN     VARCHAR2,     
 A_PP_KEY5              IN     VARCHAR2,     
 A_REFDATE              IN     DATE)         
IS

L_EFFECTIVE_FROM    TIMESTAMP WITH TIME ZONE;
L_EFFECTIVE_FROM_TZ TIMESTAMP WITH TIME ZONE;
L_LC                VARCHAR2(2);
L_LC_VERSION        VARCHAR2(20);
L_SS                VARCHAR2(2);
L_LOG_HS            CHAR(1);

BEGIN

   L_SQLERRM := NULL;
   
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      L_SQLERRM := 'BeginTxn failed';
      RAISE STPERROR;
   END IF;

   IF A_PP_KEY1 IS NULL OR
      A_PP_KEY2 IS NULL OR
      A_PP_KEY3 IS NULL OR
      A_PP_KEY4 IS NULL OR
      A_PP_KEY5 IS NULL THEN
      L_SQLERRM := 'Empty pp_key[1..5]';
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOPPKEYID;
      RAISE STPERROR;
   END IF;

   
   IF A_PP_OLD_VERSION IS NOT NULL THEN
      UNAPIGEN.DEACTIVATEPP(A_PP, A_PP_OLD_VERSION, 
                            A_PP_KEY1, A_PP_KEY2, A_PP_KEY3, A_PP_KEY4, A_PP_KEY5,
                            A_REFDATE, '0');
   END IF;

   
   UPDATE UTPP 
   SET VERSION_IS_CURRENT = '1',
       EFFECTIVE_FROM = A_REFDATE, 
       EFFECTIVE_FROM_TZ =  DECODE(A_REFDATE, EFFECTIVE_FROM_TZ, EFFECTIVE_FROM_TZ, A_REFDATE) 
  WHERE VERSION = A_PP_NEW_VERSION
   AND PP = A_PP
   AND PP_KEY1 = A_PP_KEY1
   AND PP_KEY2 = A_PP_KEY2
   AND PP_KEY3 = A_PP_KEY3
   AND PP_KEY4 = A_PP_KEY4
   AND PP_KEY5 = A_PP_KEY5
   RETURNING EFFECTIVE_FROM, EFFECTIVE_FROM_TZ, LC, LC_VERSION, SS, LOG_HS
   INTO L_EFFECTIVE_FROM, L_EFFECTIVE_FROM_TZ, L_LC, L_LC_VERSION, L_SS, L_LOG_HS;   
   IF SQL%ROWCOUNT = 0 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTFOUND;
      L_SQLERRM := 'No records found while activating pp='||
                   A_PP||'#version='||A_PP_NEW_VERSION||'#pp_key1='||A_PP_KEY1||'#pp_key2='||A_PP_KEY2||
                      '#pp_key3='||A_PP_KEY3||'#pp_key4='||A_PP_KEY4||'#pp_key5='||A_PP_KEY5;
      RAISE STPERROR;
   END IF;
   
   
   L_EVENT_TP := 'ObjectBecomesCurrent';
   L_EV_SEQ_NR := -1;
   L_EV_DETAILS := 'version='||A_PP_NEW_VERSION||'#old_current_version='||A_PP_OLD_VERSION||
                   '#pp_key1='||A_PP_KEY1||'#pp_key2='||A_PP_KEY2||
                   '#pp_key3='||A_PP_KEY3||'#pp_key4='||A_PP_KEY4||'#pp_key5='||A_PP_KEY5;
                   
   L_RESULT := UNAPIEV.INSERTEVENT('ActivatePp', UNAPIGEN.P_EVMGR_NAME, 'pp', 
                                   A_PP, L_LC, L_LC_VERSION, L_SS, L_EVENT_TP, 
                                   L_EV_DETAILS, 
                                   L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      L_SQLERRM := 'Error returned by InsertEvent ret_code='||L_RESULT;               
      RAISE STPERROR;
   END IF;

   
   IF (L_LOG_HS = '1') THEN
      IF A_PP_OLD_VERSION IS NULL THEN
         INSERT INTO UTPPHS
         (PP, VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, 
          WHO, WHO_DESCRIPTION, 
          WHAT, WHAT_DESCRIPTION, 
          LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES
         (A_PP, A_PP_NEW_VERSION, A_PP_KEY1, A_PP_KEY2, A_PP_KEY3, A_PP_KEY4, A_PP_KEY5, 
         UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION,
         L_EVENT_TP, GETOBJTPDESCRIPTION('pp') || ' "'||A_PP||'" ' || 
                        'is current on '||TO_CHAR(A_REFDATE,P_JOBS_DATE_FORMAT)||'. ' || 
                        'The planned date to become current was ' || 
                        TO_CHAR(L_EFFECTIVE_FROM,P_JOBS_DATE_FORMAT)||'. The new current version is ' ||
                        A_PP_NEW_VERSION||', no previous current version was available.', 
          A_REFDATE, A_REFDATE, NULL, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR); 
      ELSE
         INSERT INTO UTPPHS
         (PP, VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, 
          WHO, WHO_DESCRIPTION,
          WHAT, WHAT_DESCRIPTION, 
          LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES
         (A_PP, A_PP_NEW_VERSION, A_PP_KEY1, A_PP_KEY2, A_PP_KEY3, A_PP_KEY4, A_PP_KEY5, 
          UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION,
          L_EVENT_TP, GETOBJTPDESCRIPTION('pp') || ' "'||A_PP||'" ' || 
                        'is current on '||TO_CHAR(A_REFDATE,P_JOBS_DATE_FORMAT)||'. ' || 
                        'The planned date to become current was ' || 
                        TO_CHAR(L_EFFECTIVE_FROM,P_JOBS_DATE_FORMAT)||'. The new current version is ' ||
                        A_PP_NEW_VERSION||', replacing version '||A_PP_OLD_VERSION||'.',
          A_REFDATE, A_REFDATE, NULL, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR); 
      END IF;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      L_SQLERRM := 'EndTxn failed';                                    
      RAISE STPERROR;
   END IF;
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      L_SQLERRM := SQLERRM;
   END IF;
   UNAPIGEN.U4ROLLBACK;
   IF L_SQLERRM IS NOT NULL THEN
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
             'ActivatePp', L_SQLERRM);   
      UNAPIGEN.U4COMMIT;
   END IF;
   L_RET_CODE := UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'ActivatePp');
END ACTIVATEPP;

PROCEDURE DEACTIVATEOBJECT               
(A_OBJECT_TP        IN     VARCHAR2,     
 A_OBJECT_ID        IN     VARCHAR2,     
 A_OBJECT_VERSION   IN     VARCHAR2,     
 A_REFDATE          IN     DATE,         
 A_SENDEMAIL        IN     CHAR)         
IS

L_DEACTIVATE_CURSOR   INTEGER;
L_RECIPIENT           VARCHAR2(255);
L_SUBJECT             VARCHAR2(255);
L_TEXT_TAB            UNAPIGEN.VC255_TABLE_TYPE;
L_NR_OF_ROWS          NUMBER;
L_USER_DESC           VARCHAR2(40);
L_DB                  VARCHAR2(40);

BEGIN

   L_SQLERRM := NULL;
   
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      L_SQLERRM := 'BeginTxn failed';
      RAISE STPERROR;
   END IF;
   
   IF A_OBJECT_TP = 'pp' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      L_SQLERRM := 'DeactivatePp must be used instead of DeActivateObject for parameter profile objects.';
      RAISE STPERROR;
   END IF;

   
   L_DEACTIVATE_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'UPDATE ut'||A_OBJECT_TP||
                   ' SET version_is_current = NULL, effective_till = :l_refdate, effective_till_tz = :l_refdate '||
                   'WHERE version = :l_old_version '||
                   'AND '||A_OBJECT_TP||' = :l_object_id';
   DBMS_SQL.PARSE(L_DEACTIVATE_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   DBMS_SQL.BIND_VARIABLE(L_DEACTIVATE_CURSOR, ':l_refdate', A_REFDATE);
   DBMS_SQL.BIND_VARIABLE(L_DEACTIVATE_CURSOR, ':l_old_version', A_OBJECT_VERSION);
   DBMS_SQL.BIND_VARIABLE(L_DEACTIVATE_CURSOR, ':l_object_id', A_OBJECT_ID);
   L_RESULT := DBMS_SQL.EXECUTE(L_DEACTIVATE_CURSOR);
   DBMS_SQL.CLOSE_CURSOR(L_DEACTIVATE_CURSOR);
   L_DEACTIVATE_CURSOR := NULL;

   
   IF A_SENDEMAIL = '1' THEN
      
      OPEN C_SYSTEM ('DBA_EMAILADDRESS');
      FETCH C_SYSTEM INTO L_RECIPIENT;
      IF C_SYSTEM%NOTFOUND THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SYSDEFAULTS;
         CLOSE C_SYSTEM;
         L_SQLERRM := 'System setting DBA_EMAILADDRESS is missing';
         RAISE STPERROR;
      END IF;
      CLOSE C_SYSTEM;

      
      L_USER_DESC := NVL(SQLUSERDESCRIPTION(UNAPIEV.P_EV_REC.USERNAME), P_USER_DESCRIPTION);
      
      BEGIN
         
         SELECT GLOBAL_NAME
         INTO L_DB
         FROM GLOBAL_NAME;

      EXCEPTION
      WHEN NO_DATA_FOUND THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SYSDEFAULTS;
         L_SQLERRM := 'The following setting is missing: global_name.global_name';
         RAISE STPERROR;
      END;

      L_SUBJECT := 'Object version not current anymore';
      L_TEXT_TAB(1)  := INITCAP(UNAPIGEN.GETOBJTPDESCRIPTION(A_OBJECT_TP));
      L_TEXT_TAB(2)  := '   id      = '||A_OBJECT_ID;
      L_TEXT_TAB(3)  := '   version = '||A_OBJECT_VERSION;
      L_TEXT_TAB(4)  := '';
      L_TEXT_TAB(5)  := 'General';
      L_TEXT_TAB(6)  := '   user        = '||L_USER_DESC;
      L_TEXT_TAB(7)  := '   application = '||UNAPIGEN.P_APPLIC_NAME;
      L_TEXT_TAB(8)  := '   database    = '||L_DB;
      L_TEXT_TAB(9)  := '';
      L_TEXT_TAB(10) := '';
      L_TEXT_TAB(11) := 'Due to a bad lifecycle configuration, the object was not ';
      L_TEXT_TAB(12) := 'active anymore, or was modifiable again. Since this is ';
      L_TEXT_TAB(13) := 'not allowed for the current version of an object, this ';
      L_TEXT_TAB(14) := 'version has been deactivated on '||TO_CHAR(A_REFDATE, 'DD/MM/YYYY')||
                        ' at '||TO_CHAR(A_REFDATE, 'HH24:MI:SS')||'.';
      L_TEXT_TAB(15) := '';
      L_TEXT_TAB(16) := '';
      L_TEXT_TAB(17) := '__________________________________________________________';
      L_TEXT_TAB(18) := 'Please do not reply to this mail, as it has been generated';
      L_TEXT_TAB(19) := 'automatically by the LIMS.';
      L_NR_OF_ROWS := 19;
      L_RET_CODE := UNAPIGEN.SENDMAIL(L_RECIPIENT, L_SUBJECT, L_TEXT_TAB, L_NR_OF_ROWS);
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
         L_SQLERRM := 'No mail has been sent.';
         RAISE STPERROR;
      END IF;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      L_SQLERRM := 'EndTxn failed';                                    
      RAISE STPERROR;
   END IF;

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      L_SQLERRM := SQLERRM;
   END IF;
   UNAPIGEN.U4ROLLBACK;
   IF L_SQLERRM IS NOT NULL THEN
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
             'DeActivateObject', L_SQLERRM);   
      UNAPIGEN.U4COMMIT;
   END IF;
   IF DBMS_SQL.IS_OPEN(L_DEACTIVATE_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_DEACTIVATE_CURSOR);
   END IF;
   IF C_SYSTEM%ISOPEN THEN
      CLOSE C_SYSTEM;
   END IF;
   L_RET_CODE := UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'DeActivateObject');
END DEACTIVATEOBJECT;

PROCEDURE DEACTIVATEPP                   
(A_PP               IN     VARCHAR2,     
 A_VERSION          IN     VARCHAR2,     
 A_PP_KEY1          IN     VARCHAR2,     
 A_PP_KEY2          IN     VARCHAR2,     
 A_PP_KEY3          IN     VARCHAR2,     
 A_PP_KEY4          IN     VARCHAR2,     
 A_PP_KEY5          IN     VARCHAR2,     
 A_REFDATE          IN     DATE,         
 A_SENDEMAIL        IN     CHAR)         
IS

L_RECIPIENT           VARCHAR2(255);
L_SUBJECT             VARCHAR2(255);
L_TEXT_TAB            UNAPIGEN.VC255_TABLE_TYPE;
L_NR_OF_ROWS          NUMBER;
L_USER_DESC           VARCHAR2(40);
L_DB                  VARCHAR2(40);

BEGIN

   L_SQLERRM := NULL;
   
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      L_SQLERRM := 'BeginTxn failed';
      RAISE STPERROR;
   END IF;

   IF A_PP_KEY1 IS NULL OR
      A_PP_KEY2 IS NULL OR
      A_PP_KEY3 IS NULL OR
      A_PP_KEY4 IS NULL OR
      A_PP_KEY5 IS NULL THEN
      L_SQLERRM := 'Empty pp_key[1..5]';
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOPPKEYID;
      RAISE STPERROR;
   END IF;

   
   UPDATE UTPP
   SET VERSION_IS_CURRENT = NULL, 
       EFFECTIVE_TILL = A_REFDATE, 
       EFFECTIVE_TILL_TZ =  DECODE(A_REFDATE, EFFECTIVE_TILL_TZ, EFFECTIVE_TILL_TZ, A_REFDATE) 
   WHERE VERSION = A_VERSION
   AND PP = A_PP
   AND PP_KEY1 = A_PP_KEY1
   AND PP_KEY2 = A_PP_KEY2
   AND PP_KEY3 = A_PP_KEY3
   AND PP_KEY4 = A_PP_KEY4
   AND PP_KEY5 = A_PP_KEY5;

   
   IF A_SENDEMAIL = '1' THEN
      
      OPEN C_SYSTEM ('DBA_EMAILADDRESS');
      FETCH C_SYSTEM INTO L_RECIPIENT;
      IF C_SYSTEM%NOTFOUND THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SYSDEFAULTS;
         CLOSE C_SYSTEM;
         L_SQLERRM := 'System setting DBA_EMAILADDRESS is missing';
         RAISE STPERROR;
      END IF;
      CLOSE C_SYSTEM;

      
      L_USER_DESC := NVL(SQLUSERDESCRIPTION(UNAPIEV.P_EV_REC.USERNAME), P_USER_DESCRIPTION);
      
      BEGIN
         
         SELECT GLOBAL_NAME
         INTO L_DB
         FROM GLOBAL_NAME;

      EXCEPTION
      WHEN NO_DATA_FOUND THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SYSDEFAULTS;
         L_SQLERRM := 'The following setting is missing: global_name.global_name';
         RAISE STPERROR;
      END;

      L_SUBJECT := 'Object version not current anymore';
      L_TEXT_TAB(1)  := INITCAP(UNAPIGEN.GETOBJTPDESCRIPTION('pp'));
      L_TEXT_TAB(2)  := '   pp             = "'||A_PP||'"';
      L_TEXT_TAB(3)  := '   version        = "'||A_VERSION||'"';
      L_TEXT_TAB(4)  := '   pp_key1        = "'||A_PP_KEY1||'"';
      L_TEXT_TAB(5)  := '   pp_key2        = "'||A_PP_KEY2||'"';
      L_TEXT_TAB(6)  := '   pp_key3        = "'||A_PP_KEY3||'"';
      L_TEXT_TAB(7)  := '   pp_key4        = "'||A_PP_KEY4||'"';
      L_TEXT_TAB(8)  := '   pp_key5        = "'||A_PP_KEY5||'"';
      L_TEXT_TAB(9)  := '   effective_till = '||A_REFDATE;
      L_TEXT_TAB(10) := '';
      L_TEXT_TAB(11) := 'General';
      L_TEXT_TAB(12) := '   user        = '||L_USER_DESC;
      L_TEXT_TAB(13) := '   application = '||UNAPIGEN.P_APPLIC_NAME;
      L_TEXT_TAB(14) := '   database    = '||L_DB;
      L_TEXT_TAB(15) := '';
      L_TEXT_TAB(16) := '';
      L_TEXT_TAB(17) := 'Due to a bad lifecycle configuration, the object was not ';
      L_TEXT_TAB(18) := 'active anymore, or was modifiable again. Since this is ';
      L_TEXT_TAB(19) := 'not allowed for the current version of an object, this ';
      L_TEXT_TAB(20) := 'version has been deactivated on '||TO_CHAR(A_REFDATE, 'DD/MM/YYYY')||
                        ' at '||TO_CHAR(A_REFDATE, 'HH24:MI:SS')||'.';
      L_TEXT_TAB(21) := '';
      L_TEXT_TAB(22) := '';
      L_TEXT_TAB(23) := '__________________________________________________________';
      L_TEXT_TAB(24) := 'Please do not reply to this mail, as it has been generated';
      L_TEXT_TAB(25) := 'automatically by the LIMS.';
      L_NR_OF_ROWS := 25;
      L_RET_CODE := UNAPIGEN.SENDMAIL(L_RECIPIENT, L_SUBJECT, L_TEXT_TAB, L_NR_OF_ROWS);
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
         L_SQLERRM := 'No mail has been sent.';
         RAISE STPERROR;
      END IF;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      L_SQLERRM := 'EndTxn failed';                                    
      RAISE STPERROR;
   END IF;

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      L_SQLERRM := SQLERRM;
   END IF;
   UNAPIGEN.U4ROLLBACK;
   IF L_SQLERRM IS NOT NULL THEN
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
             'DeActivatePp', L_SQLERRM);   
      UNAPIGEN.U4COMMIT;
   END IF;
   IF C_SYSTEM%ISOPEN THEN
      CLOSE C_SYSTEM;
   END IF;
   L_RET_CODE := UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'DeActivatePp');
END DEACTIVATEPP;

FUNCTION EVALVERSION                     
(A_OBJECT_TP        IN     VARCHAR2,     
 A_OBJECT_ID        IN     VARCHAR2,     
 A_OBJECT_VERSION   IN     VARCHAR2)     
RETURN NUMBER IS                   

L_REFDATE              TIMESTAMP WITH TIME ZONE;
L_VERSION_IMPLEMENTED  BOOLEAN;
L_INDEX                INTEGER;
L_OBJECT_CURSOR        INTEGER;
L_EFFECTIVE_FROM       TIMESTAMP WITH TIME ZONE;
L_EFFECTIVE_TILL       TIMESTAMP WITH TIME ZONE;
L_VERSION_IS_CURRENT   CHAR(1);
L_ALLOW_MODIFY         CHAR(1);
L_ACTIVE               CHAR(1);
L_SS                   VARCHAR2(2);
L_OBJECT_OLD_VERSION   VARCHAR2(20);
L_RECIPIENT            VARCHAR2(255);
L_SUBJECT              VARCHAR2(255);
L_TEXT_TAB             UNAPIGEN.VC255_TABLE_TYPE;
L_NR_OF_ROWS           NUMBER;
L_USER_DESC            VARCHAR2(40);
L_DB                   VARCHAR2(40);
L_OBJECT_EXISTS        BOOLEAN;

BEGIN
   
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   L_SQLERRM := NULL;
   L_REFDATE := CURRENT_TIMESTAMP;
   
   IF A_OBJECT_TP = 'pp' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      L_SQLERRM := 'EvalPpVersion must be used instead of EvalVersion for parameter profile objects.';
      RAISE STPERROR;
   END IF;
   
   
   L_VERSION_IMPLEMENTED := FALSE;
   L_INDEX := 1;
   LOOP
      EXIT WHEN (L_VERSION_IMPLEMENTED = TRUE) OR (L_INDEX > L_NR_OF_TYPES);
      
      IF A_OBJECT_TP = L_OBJECT_TYPES(L_INDEX) THEN
         L_VERSION_IMPLEMENTED := TRUE;
      END IF;
      L_INDEX := L_INDEX + 1;
   END LOOP;
   
   IF L_VERSION_IMPLEMENTED THEN
      
      L_OBJECT_CURSOR := DBMS_SQL.OPEN_CURSOR;
      L_SQL_STRING := 'SELECT effective_from, effective_till, version_is_current, '||
                      'allow_modify, active, ss '||
                      'FROM ut'||A_OBJECT_TP||' '||
                      'WHERE '||A_OBJECT_TP||' = :l_object_id '||
                      'AND version = :l_object_version ';
      DBMS_SQL.PARSE(L_OBJECT_CURSOR, L_SQL_STRING, DBMS_SQL.V7);
      DBMS_SQL.DEFINE_COLUMN(L_OBJECT_CURSOR, 1, L_EFFECTIVE_FROM);
      DBMS_SQL.DEFINE_COLUMN(L_OBJECT_CURSOR, 2, L_EFFECTIVE_TILL);
      DBMS_SQL.DEFINE_COLUMN_CHAR(L_OBJECT_CURSOR, 3, L_VERSION_IS_CURRENT, 1);
      DBMS_SQL.DEFINE_COLUMN_CHAR(L_OBJECT_CURSOR, 4, L_ALLOW_MODIFY, 1);
      DBMS_SQL.DEFINE_COLUMN_CHAR(L_OBJECT_CURSOR, 5, L_ACTIVE, 1);
      DBMS_SQL.DEFINE_COLUMN(L_OBJECT_CURSOR, 6, L_SS, 2);
      DBMS_SQL.BIND_VARIABLE(L_OBJECT_CURSOR, ':l_object_id', A_OBJECT_ID);
      DBMS_SQL.BIND_VARIABLE(L_OBJECT_CURSOR, ':l_object_version', A_OBJECT_VERSION);
      L_RESULT := DBMS_SQL.EXECUTE(L_OBJECT_CURSOR);
      L_OBJECT_EXISTS := TRUE;
      L_RESULT := DBMS_SQL.FETCH_ROWS(L_OBJECT_CURSOR);
      IF L_RESULT = 0 THEN
         L_OBJECT_EXISTS := FALSE;
      END IF;
      DBMS_SQL.COLUMN_VALUE(L_OBJECT_CURSOR, 1, L_EFFECTIVE_FROM);
      DBMS_SQL.COLUMN_VALUE(L_OBJECT_CURSOR, 2, L_EFFECTIVE_TILL);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_OBJECT_CURSOR, 3, L_VERSION_IS_CURRENT);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_OBJECT_CURSOR, 4, L_ALLOW_MODIFY);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_OBJECT_CURSOR, 5, L_ACTIVE);
      DBMS_SQL.COLUMN_VALUE(L_OBJECT_CURSOR, 6, L_SS);
      DBMS_SQL.CLOSE_CURSOR(L_OBJECT_CURSOR);
      L_OBJECT_CURSOR := NULL;      
      
      IF L_OBJECT_EXISTS THEN
         
         
         
         IF (L_EFFECTIVE_FROM IS NULL) AND (L_ACTIVE = '1') AND (L_ALLOW_MODIFY = '0') AND 
            (L_SS <> '@T') AND (NVL(L_VERSION_IS_CURRENT,'0') <> '1') THEN
            
            L_OBJECT_CURSOR := DBMS_SQL.OPEN_CURSOR;
            L_SQL_STRING := 'SELECT version '||
                            'FROM ut'||A_OBJECT_TP||' '||
                            'WHERE '||A_OBJECT_TP||' = :l_object_id '||
                            'AND version_is_current = ''1'' ';
            DBMS_SQL.PARSE(L_OBJECT_CURSOR, L_SQL_STRING, DBMS_SQL.V7);
            DBMS_SQL.DEFINE_COLUMN(L_OBJECT_CURSOR, 1, L_OBJECT_OLD_VERSION, 20);
            DBMS_SQL.BIND_VARIABLE(L_OBJECT_CURSOR, ':l_object_id', A_OBJECT_ID);
            L_RESULT := DBMS_SQL.EXECUTE(L_OBJECT_CURSOR);
            L_RESULT := DBMS_SQL.FETCH_ROWS(L_OBJECT_CURSOR);
            DBMS_SQL.COLUMN_VALUE(L_OBJECT_CURSOR, 1, L_OBJECT_OLD_VERSION);
            DBMS_SQL.CLOSE_CURSOR(L_OBJECT_CURSOR);
            L_OBJECT_CURSOR := NULL;

            
            IF L_OBJECT_OLD_VERSION < A_OBJECT_VERSION OR
               L_OBJECT_OLD_VERSION IS NULL THEN
               UNAPIGEN.ACTIVATEOBJECT(A_OBJECT_TP, A_OBJECT_ID, L_OBJECT_OLD_VERSION, 
                                       A_OBJECT_VERSION, L_REFDATE);
            END IF;
         END IF;

         
         IF ISSYSTEM21CFR11COMPLIANT <> UNAPIGEN.DBERR_SUCCESS THEN
            NULL;
            
         ELSE
            
            
            IF NVL(L_VERSION_IS_CURRENT,'0') = '1' THEN
               
               
               IF (L_ACTIVE = '0') OR (L_ALLOW_MODIFY = '1') THEN
                  UNAPIGEN.DEACTIVATEOBJECT(A_OBJECT_TP, A_OBJECT_ID, A_OBJECT_VERSION, L_REFDATE, '1');
               END IF;

               
               
               
               
               IF L_EFFECTIVE_TILL IS NOT NULL THEN
                  
                  OPEN C_SYSTEM ('DBA_EMAILADDRESS');
                  FETCH C_SYSTEM INTO L_RECIPIENT;
                  IF C_SYSTEM%NOTFOUND THEN
                     UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SYSDEFAULTS;
                     CLOSE C_SYSTEM;
                     L_SQLERRM := 'System setting DBA_EMAILADDRESS is missing';
                     RAISE STPERROR;
                  END IF;
                  CLOSE C_SYSTEM;

                  
                  L_USER_DESC := NVL(SQLUSERDESCRIPTION(UNAPIEV.P_EV_REC.USERNAME), P_USER_DESCRIPTION);

                  BEGIN
                     
                     SELECT GLOBAL_NAME
                     INTO L_DB
                     FROM GLOBAL_NAME;

                  EXCEPTION
                  WHEN NO_DATA_FOUND THEN
                     UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SYSDEFAULTS;
                     L_SQLERRM := 'The following setting is missing: global_name.global_name';
                     RAISE STPERROR;
                  END;

                  L_SUBJECT := 'Dubious object';
                  L_TEXT_TAB(1)  := INITCAP(UNAPIGEN.GETOBJTPDESCRIPTION(A_OBJECT_TP));
                  L_TEXT_TAB(2)  := '   id             = '||A_OBJECT_ID;
                  L_TEXT_TAB(3)  := '   version        = '||A_OBJECT_VERSION;
                  L_TEXT_TAB(4)  := '   effective_till = '||L_EFFECTIVE_TILL;
                  L_TEXT_TAB(5)  := '';
                  L_TEXT_TAB(6)  := 'General';
                  L_TEXT_TAB(7)  := '   user        = '||L_USER_DESC;
                  L_TEXT_TAB(8)  := '   application = '||UNAPIGEN.P_APPLIC_NAME;
                  L_TEXT_TAB(9)  := '   database    = '||L_DB;
                  L_TEXT_TAB(10)  := '';
                  L_TEXT_TAB(11)  := '';
                  L_TEXT_TAB(12) := 'This version had been deactivated, but has recently been';
                  L_TEXT_TAB(13) := 'reactivated (and made the current version) manually';
                  L_TEXT_TAB(14) := 'in the database!';
                  L_TEXT_TAB(15) := '';
                  L_TEXT_TAB(16) := '';
                  L_TEXT_TAB(17) := '__________________________________________________________';
                  L_TEXT_TAB(18) := 'Please do not reply to this mail, as it has been generated';
                  L_TEXT_TAB(19) := 'automatically by the LIMS.';
                  L_NR_OF_ROWS := 19;
                  L_RET_CODE := UNAPIGEN.SENDMAIL(L_RECIPIENT, L_SUBJECT, L_TEXT_TAB, L_NR_OF_ROWS);
                  IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
                     UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
                     L_SQLERRM := 'No mail has been sent.';
                     RAISE STPERROR;
                  END IF;
               END IF;
            END IF;
         END IF;
      END IF;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('EvalVersion',SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('EvalVersion',L_SQLERRM);   
   END IF;
   IF DBMS_SQL.IS_OPEN(L_OBJECT_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_OBJECT_CURSOR);
   END IF;
   IF C_SYSTEM%ISOPEN THEN
      CLOSE C_SYSTEM;
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'EvalVersion'));
END EVALVERSION;

FUNCTION EVALPPVERSION                   
(A_PP               IN     VARCHAR2,     
 A_VERSION          IN     VARCHAR2,     
 A_PP_KEY1          IN     VARCHAR2,     
 A_PP_KEY2          IN     VARCHAR2,     
 A_PP_KEY3          IN     VARCHAR2,     
 A_PP_KEY4          IN     VARCHAR2,     
 A_PP_KEY5          IN     VARCHAR2)     
RETURN NUMBER IS                  

L_REFDATE              TIMESTAMP WITH TIME ZONE;
L_VERSION_IMPLEMENTED  BOOLEAN;
L_INDEX                INTEGER;
L_EFFECTIVE_FROM       TIMESTAMP WITH TIME ZONE;
L_EFFECTIVE_TILL       TIMESTAMP WITH TIME ZONE;
L_VERSION_IS_CURRENT   CHAR(1);
L_ALLOW_MODIFY         CHAR(1);
L_ACTIVE               CHAR(1);
L_SS                   VARCHAR2(2);
L_PP_OLD_VERSION       VARCHAR2(20);
L_RECIPIENT            VARCHAR2(255);
L_SUBJECT              VARCHAR2(255);
L_TEXT_TAB             UNAPIGEN.VC255_TABLE_TYPE;
L_NR_OF_ROWS           NUMBER;
L_USER_DESC            VARCHAR2(40);
L_DB                   VARCHAR2(40);
L_PP_EXISTS            BOOLEAN;

BEGIN
   
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   L_SQLERRM := NULL;
   L_REFDATE := CURRENT_TIMESTAMP;

   IF A_PP_KEY1 IS NULL OR
      A_PP_KEY2 IS NULL OR
      A_PP_KEY3 IS NULL OR
      A_PP_KEY4 IS NULL OR
      A_PP_KEY5 IS NULL THEN
      L_SQLERRM := 'Empty pp_key[1..5]';
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOPPKEYID;
      RAISE STPERROR;
   END IF;
   
   
   L_VERSION_IMPLEMENTED := FALSE;
   L_INDEX := 1;
   LOOP
      EXIT WHEN (L_VERSION_IMPLEMENTED = TRUE) OR (L_INDEX > L_NR_OF_TYPES);
      
      IF L_OBJECT_TYPES(L_INDEX) = 'pp' THEN
         L_VERSION_IMPLEMENTED := TRUE;
      END IF;
      L_INDEX := L_INDEX + 1;
   END LOOP;
   
   IF L_VERSION_IMPLEMENTED THEN
      
      L_PP_EXISTS := TRUE;
      BEGIN
         SELECT EFFECTIVE_FROM, EFFECTIVE_TILL, VERSION_IS_CURRENT,
                ALLOW_MODIFY, ACTIVE, SS 
         INTO L_EFFECTIVE_FROM, L_EFFECTIVE_TILL, L_VERSION_IS_CURRENT, L_ALLOW_MODIFY,
              L_ACTIVE, L_SS             
         FROM UTPP 
         WHERE PP = A_PP
         AND VERSION = A_VERSION
         AND PP_KEY1 = A_PP_KEY1
         AND PP_KEY2 = A_PP_KEY2
         AND PP_KEY3 = A_PP_KEY3
         AND PP_KEY4 = A_PP_KEY4
         AND PP_KEY5 = A_PP_KEY5;
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
         
         L_PP_EXISTS := FALSE;
      END;

      IF L_PP_EXISTS THEN
         
         
         
         IF (L_EFFECTIVE_FROM IS NULL) AND (L_ACTIVE = '1') AND (L_ALLOW_MODIFY = '0') AND 
            (L_SS <> '@T') AND (NVL(L_VERSION_IS_CURRENT,'0') <> '1') THEN
            
            BEGIN
               SELECT VERSION
               INTO L_PP_OLD_VERSION
               FROM UTPP
               WHERE PP = A_PP
               AND PP_KEY1 = A_PP_KEY1
               AND PP_KEY2 = A_PP_KEY2
               AND PP_KEY3 = A_PP_KEY3
               AND PP_KEY4 = A_PP_KEY4
               AND PP_KEY5 = A_PP_KEY5
               AND VERSION_IS_CURRENT = '1';
            EXCEPTION
            WHEN NO_DATA_FOUND THEN
               L_PP_OLD_VERSION := NULL;
            END;

            
            IF L_PP_OLD_VERSION < A_VERSION OR
               L_PP_OLD_VERSION IS NULL THEN
               UNAPIGEN.ACTIVATEPP(A_PP, L_PP_OLD_VERSION, A_VERSION, A_PP_KEY1, 
                                   A_PP_KEY2, A_PP_KEY3, A_PP_KEY4, A_PP_KEY5, L_REFDATE);
            END IF;
         END IF;

         
         IF ISSYSTEM21CFR11COMPLIANT <> UNAPIGEN.DBERR_SUCCESS THEN
            NULL;
            
         ELSE
            
            
            IF NVL(L_VERSION_IS_CURRENT,'0') = '1' THEN
               
               
               IF (L_ACTIVE = '0') OR (L_ALLOW_MODIFY = '1') THEN
                  UNAPIGEN.DEACTIVATEPP(A_PP, A_VERSION, A_PP_KEY1, A_PP_KEY2, A_PP_KEY3,
                                        A_PP_KEY4, A_PP_KEY5,L_REFDATE, '1');
               END IF;

               
               
               
               
               IF L_EFFECTIVE_TILL IS NOT NULL THEN
                  
                  OPEN C_SYSTEM ('DBA_EMAILADDRESS');
                  FETCH C_SYSTEM INTO L_RECIPIENT;
                  IF C_SYSTEM%NOTFOUND THEN
                     UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SYSDEFAULTS;
                     CLOSE C_SYSTEM;
                     L_SQLERRM := 'System setting DBA_EMAILADDRESS is missing';
                     RAISE STPERROR;
                  END IF;
                  CLOSE C_SYSTEM;

                  
                  L_USER_DESC := NVL(SQLUSERDESCRIPTION(UNAPIEV.P_EV_REC.USERNAME), P_USER_DESCRIPTION);

                  BEGIN
                     
                     SELECT GLOBAL_NAME
                     INTO L_DB
                     FROM GLOBAL_NAME;

                  EXCEPTION
                  WHEN NO_DATA_FOUND THEN
                     UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SYSDEFAULTS;
                     L_SQLERRM := 'The following setting is missing: global_name.global_name';
                     RAISE STPERROR;
                  END;

                  L_SUBJECT := 'Dubious object';
                  L_TEXT_TAB(1)  := INITCAP(UNAPIGEN.GETOBJTPDESCRIPTION('pp'));
                  L_TEXT_TAB(2)  := '   pp             = "'||A_PP||'"';
                  L_TEXT_TAB(3)  := '   version        = "'||A_VERSION||'"';
                  L_TEXT_TAB(4)  := '   pp_key1        = "'||A_PP_KEY1||'"';
                  L_TEXT_TAB(5)  := '   pp_key2        = "'||A_PP_KEY2||'"';
                  L_TEXT_TAB(6)  := '   pp_key3        = "'||A_PP_KEY3||'"';
                  L_TEXT_TAB(7)  := '   pp_key4        = "'||A_PP_KEY4||'"';
                  L_TEXT_TAB(8)  := '   pp_key5        = "'||A_PP_KEY5||'"';
                  L_TEXT_TAB(9)  := '   effective_till = '||L_EFFECTIVE_TILL;
                  L_TEXT_TAB(10) := '';
                  L_TEXT_TAB(11) := 'General';
                  L_TEXT_TAB(12) := '   user        = '||L_USER_DESC;
                  L_TEXT_TAB(13) := '   application = '||UNAPIGEN.P_APPLIC_NAME;
                  L_TEXT_TAB(14) := '   database    = '||L_DB;
                  L_TEXT_TAB(15) := '';
                  L_TEXT_TAB(16) := '';
                  L_TEXT_TAB(17) := 'This version had been deactivated, but has recently been';
                  L_TEXT_TAB(18) := 'reactivated (and made the current version) manually';
                  L_TEXT_TAB(19) := 'in the database!';
                  L_TEXT_TAB(20) := '';
                  L_TEXT_TAB(21) := '';
                  L_TEXT_TAB(22) := '__________________________________________________________';
                  L_TEXT_TAB(23) := 'Please do not reply to this mail, as it has been generated';
                  L_TEXT_TAB(24) := 'automatically by the LIMS.';
                  L_NR_OF_ROWS := 24;
                  L_RET_CODE := UNAPIGEN.SENDMAIL(L_RECIPIENT, L_SUBJECT, L_TEXT_TAB, L_NR_OF_ROWS);
                  IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
                     UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
                     L_SQLERRM := 'No mail has been sent.';
                     RAISE STPERROR;
                  END IF;
               END IF;
            END IF;
         END IF;
      END IF;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('EvalPpVersion',SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('EvalPpVersion',L_SQLERRM);   
   END IF;
   IF C_SYSTEM%ISOPEN THEN
      CLOSE C_SYSTEM;
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'EvalPpVersion'));
END EVALPPVERSION;








FUNCTION TILDESUBSTITUTION
(A_OBJECT_TP         IN    VARCHAR2,   
 A_OBJECT_KEY        IN    VARCHAR2,   
 A_ASKED_VALUE       IN    VARCHAR2,   
 A_VALUE_S           OUT   VARCHAR2,   
 A_VALUE_F           OUT   NUMBER,     
 A_VALUE_D           OUT   DATE)       
RETURN NUMBER IS

L_SC                VARCHAR2(20);
L_RQ                VARCHAR2(20);
L_SD                VARCHAR2(20);
L_PG                VARCHAR2(20);
L_PA                VARCHAR2(20);
L_ME                VARCHAR2(20);
L_IC                VARCHAR2(20);
L_II                VARCHAR2(20);
L_WS                VARCHAR2(20);
L_CH                VARCHAR2(20);
L_PGNODE            NUMBER;
L_PANODE            NUMBER;
L_MENODE            NUMBER;
L_ICNODE            NUMBER;
L_IINODE            NUMBER;
L_ST                VARCHAR2(20); 
L_ST_VERSION        VARCHAR2(20); 
L_RT                VARCHAR2(20); 
L_RT_VERSION        VARCHAR2(20); 
L_PT                VARCHAR2(20); 
L_PT_VERSION        VARCHAR2(20); 
L_DC                VARCHAR2(40); 
L_DC_VERSION        VARCHAR2(20); 
L_MT_VERSION        VARCHAR2(20);
L_EQ                VARCHAR2(20);
L_LAB               VARCHAR2(20);
L_EQ_VERSION        VARCHAR2(20);
L_CT_NAME           VARCHAR2(20);
L_DATA_TYPE         VARCHAR(106);
L_DEST_TP           VARCHAR2(20);
L_DEST_PROPERTY     VARCHAR2(20);
L_VALUE_S           VARCHAR2(2000);
L_VALUE_F           NUMBER;  
L_VALUE_D           TIMESTAMP WITH TIME ZONE;
L_ASKED_VALUE       VARCHAR2(255);
L_CSNODE            NUMBER;
L_TPNODE            NUMBER;

TYPE DYNCURTYP IS REF CURSOR;  
DYN_CUR   DYNCURTYP;  
DYN_CUR1  DYNCURTYP;
DYN_CUR2  DYNCURTYP;
 
CURSOR C_DATATYPE(C_TABLE VARCHAR2, C_COLUMN VARCHAR2) IS
   SELECT DATA_TYPE 
   FROM USER_TAB_COLUMNS 
   WHERE TABLE_NAME  = UPPER(C_TABLE) 
     AND COLUMN_NAME = UPPER(C_COLUMN); 







CURSOR C_RQ(C_SC VARCHAR2) IS
   SELECT RQ 
   FROM UTSC 
   WHERE SC = C_SC;

CURSOR C_SD(C_SC VARCHAR2) IS
   SELECT SD 
   FROM UTSC 
   WHERE SC = C_SC;

CURSOR C_WS(C_SC VARCHAR2, C_PG VARCHAR2, C_PGNODE NUMBER, C_PA VARCHAR2, C_PANODE NUMBER, 
            C_ME VARCHAR2, C_MENODE NUMBER) IS
   SELECT WS 
   FROM UTWSME 
   WHERE SC     = C_SC
     AND PG     = C_PG
     AND PGNODE = C_PGNODE
     AND PA     = C_PA
     AND PANODE = C_PANODE
     AND ME     = C_ME
     AND MENODE = C_MENODE;

CURSOR C_ST(C_SC VARCHAR2) IS
   SELECT ST, ST_VERSION 
   FROM UTSC 
   WHERE SC = C_SC;

CURSOR C_RT(C_RQ VARCHAR2) IS
   SELECT RT, RT_VERSION 
   FROM UTRQ 
   WHERE RQ = C_RQ;

CURSOR C_PT(C_SD VARCHAR2) IS
   SELECT PT, PT_VERSION 
   FROM UTSD 
   WHERE SD = C_SD;

CURSOR C_MT(C_SC VARCHAR2, C_PG VARCHAR2, C_PGNODE NUMBER, C_PA VARCHAR2, C_PANODE NUMBER, 
            C_ME VARCHAR2, C_MENODE NUMBER) IS
   SELECT MT_VERSION 
   FROM UTSCME 
   WHERE SC     = C_SC
     AND PG     = C_PG
     AND PGNODE = C_PGNODE
     AND PA     = C_PA
     AND PANODE = C_PANODE
     AND ME     = C_ME
     AND MENODE = C_MENODE;

CURSOR C_SDCELLSC(C_SD VARCHAR2, C_SC VARCHAR2) IS
   SELECT CSNODE, TPNODE 
   FROM UTSDCELLSC 
   WHERE SD = C_SD 
   AND SC = C_SC
   ORDER BY CSNODE, TPNODE, SEQ;

BEGIN

IF A_OBJECT_KEY = '~EV_REC~' THEN
   L_SC          := UNAPIEV.P_SC;
   L_RQ          := UNAPIEV.P_RQ;
   L_SD          := UNAPIEV.P_SD;
   L_PG          := UNAPIEV.P_PG;
   L_PGNODE      := UNAPIEV.P_PGNODE;
   L_PA          := UNAPIEV.P_PA;
   L_PANODE      := UNAPIEV.P_PANODE;
   L_ME          := UNAPIEV.P_ME;
   L_MENODE      := UNAPIEV.P_MENODE;
   L_IC          := UNAPIEV.P_IC;
   L_ICNODE      := UNAPIEV.P_ICNODE;
   L_II          := UNAPIEV.P_II;
   L_IINODE      := UNAPIEV.P_IINODE;
   L_WS          := UNAPIEV.P_WS;
   L_CH          := UNAPIEV.P_CH;
   IF UNAPIEV.P_EV_REC.OBJECT_TP = 'st' THEN
      L_ST          := UNAPIEV.P_EV_REC.OBJECT_ID; 
      L_ST_VERSION  := UNAPIEV.P_VERSION; 
   ELSE      
      L_ST          := UNAPIEV.P_ST; 
      L_ST_VERSION  := UNAPIEV.P_ST_VERSION; 
   END IF;
   IF UNAPIEV.P_EV_REC.OBJECT_TP = 'rt' THEN
      L_RT          := UNAPIEV.P_EV_REC.OBJECT_ID; 
      L_RT_VERSION  := UNAPIEV.P_VERSION; 
   ELSE
      L_RT          := UNAPIEV.P_RT; 
      L_RT_VERSION  := UNAPIEV.P_RT_VERSION; 
   END IF;
   IF UNAPIEV.P_EV_REC.OBJECT_TP = 'pt' THEN
      L_PT          := UNAPIEV.P_EV_REC.OBJECT_ID; 
      L_PT_VERSION  := UNAPIEV.P_VERSION; 
   ELSE
      L_PT          := UNAPIEV.P_PT; 
      L_PT_VERSION  := UNAPIEV.P_PT_VERSION; 
   END IF;
   IF UNAPIEV.P_EV_REC.OBJECT_TP = 'dc' THEN
      L_DC          := UNAPIEV.P_EV_REC.OBJECT_ID; 
      L_DC_VERSION  := UNAPIEV.P_VERSION; 
   ELSE      
      L_DC          := UNAPIEV.P_DC; 
      L_DC_VERSION  := UNAPIEV.P_DC_VERSION; 
   END IF;
   IF UNAPIEV.P_EV_REC.OBJECT_TP = 'eq' THEN
      L_EQ := UNAPIEV.P_EV_REC.OBJECT_ID;
      L_EQ_VERSION := UNAPIEV.P_VERSION;
      L_LAB := UNAPIEV.P_LAB;
      L_CT_NAME := UNAPIEV.P_CT;
   END IF;   
   L_MT_VERSION  := UNAPIEV.P_MT_VERSION;
ELSIF A_OBJECT_TP = 'sc' THEN
   L_SC := A_OBJECT_KEY;
ELSIF A_OBJECT_TP = 'rq' THEN
   L_RQ := A_OBJECT_KEY;
ELSIF A_OBJECT_TP = 'sd' THEN
   L_SD := A_OBJECT_KEY;
ELSIF A_OBJECT_TP = 'ws' THEN
   L_WS := A_OBJECT_KEY;
ELSIF A_OBJECT_TP = 'ch' THEN
   L_CH := A_OBJECT_KEY;
ELSIF A_OBJECT_TP = 'pg' THEN
   L_SC := SUBSTR(A_OBJECT_KEY, 1, INSTR(A_OBJECT_KEY, '#', 1) - 1);
   L_PG := SUBSTR(A_OBJECT_KEY, INSTR(A_OBJECT_KEY, '#', 1) + 1, INSTR(A_OBJECT_KEY, '#', 1,  2)  - INSTR(A_OBJECT_KEY, '#', 1) - 1);
   L_PGNODE := TO_NUMBER(SUBSTR(A_OBJECT_KEY, INSTR(A_OBJECT_KEY, '#', 1, 2) + 1));
ELSIF A_OBJECT_TP = 'pa' THEN
   L_SC := SUBSTR(A_OBJECT_KEY, 1, INSTR(A_OBJECT_KEY, '#', 1) - 1);
   L_PG := SUBSTR(A_OBJECT_KEY, INSTR(A_OBJECT_KEY, '#', 1) + 1, INSTR(A_OBJECT_KEY, '#', 1, 2) - INSTR(A_OBJECT_KEY, '#', 1) - 1);
   L_PGNODE := TO_NUMBER(SUBSTR(A_OBJECT_KEY, INSTR(A_OBJECT_KEY, '#', 1, 2) + 1, INSTR(A_OBJECT_KEY, '#', 1, 3) - INSTR(A_OBJECT_KEY, '#', 1, 2) - 1));
   L_PA := SUBSTR(A_OBJECT_KEY, INSTR(A_OBJECT_KEY, '#', 1, 3) + 1, INSTR(A_OBJECT_KEY, '#', 1, 4) - INSTR(A_OBJECT_KEY, '#', 1, 3) - 1);
   L_PANODE := TO_NUMBER(SUBSTR(A_OBJECT_KEY, INSTR(A_OBJECT_KEY, '#', 1, 4) + 1));
ELSIF A_OBJECT_TP = 'me' THEN
   L_SC := SUBSTR(A_OBJECT_KEY, 1, INSTR(A_OBJECT_KEY, '#', 1) - 1);
   L_PG := SUBSTR(A_OBJECT_KEY, INSTR(A_OBJECT_KEY, '#', 1) + 1, INSTR(A_OBJECT_KEY, '#', 1, 2) - INSTR(A_OBJECT_KEY, '#', 1) - 1);
   L_PGNODE := TO_NUMBER(SUBSTR(A_OBJECT_KEY, INSTR(A_OBJECT_KEY, '#', 1, 2) + 1, INSTR(A_OBJECT_KEY, '#', 1, 3) - INSTR(A_OBJECT_KEY, '#', 1, 2) - 1));
   L_PA := SUBSTR(A_OBJECT_KEY, INSTR(A_OBJECT_KEY, '#', 1, 3) + 1, INSTR(A_OBJECT_KEY, '#', 1, 4) - INSTR(A_OBJECT_KEY, '#', 1, 3)- 1);
   L_PANODE := TO_NUMBER(SUBSTR(A_OBJECT_KEY, INSTR(A_OBJECT_KEY, '#', 1, 4) + 1, INSTR(A_OBJECT_KEY, '#', 1, 5) - INSTR(A_OBJECT_KEY, '#', 1, 4) - 1));
   L_ME := SUBSTR(A_OBJECT_KEY, INSTR(A_OBJECT_KEY, '#', 1, 5) + 1, INSTR(A_OBJECT_KEY, '#', 1, 6) - INSTR(A_OBJECT_KEY, '#', 1, 5) - 1);
   L_MENODE := TO_NUMBER(SUBSTR(A_OBJECT_KEY, INSTR(A_OBJECT_KEY, '#', 1, 6) + 1));
ELSIF A_OBJECT_TP = 'eqct' THEN
   L_EQ := SUBSTR(A_OBJECT_KEY, 1, INSTR(A_OBJECT_KEY, '#', 1) - 1);     
   L_LAB := SUBSTR(A_OBJECT_KEY, INSTR(A_OBJECT_KEY, '#', 1) + 1, INSTR(A_OBJECT_KEY, '#', 1, 2) - INSTR(A_OBJECT_KEY, '#', 1) - 1);
   L_EQ_VERSION := SUBSTR(A_OBJECT_KEY, INSTR(A_OBJECT_KEY, '#', 1, 2) + 1, INSTR(A_OBJECT_KEY, '#', 1, 3) - INSTR(A_OBJECT_KEY, '#', 1, 2) - 1);
   L_CT_NAME := SUBSTR(A_OBJECT_KEY, INSTR(A_OBJECT_KEY, '#', 1, 3) + 1);
END IF;

L_ASKED_VALUE := REPLACE(A_ASKED_VALUE, '~'); 
L_DEST_TP := SUBSTR(L_ASKED_VALUE, 1, INSTR(L_ASKED_VALUE, '@', 1) - 1);
L_DEST_PROPERTY := SUBSTR(L_ASKED_VALUE,  INSTR(L_ASKED_VALUE, '@', 1) + 1); 

IF L_DEST_TP = 'sc' THEN
   OPEN C_DATATYPE('UVSC', L_DEST_PROPERTY);
   FETCH C_DATATYPE INTO L_DATA_TYPE;
   CLOSE C_DATATYPE;

   OPEN DYN_CUR FOR  'SELECT '||L_DEST_PROPERTY||' FROM UVSC WHERE sc = :dest_sc' USING  L_SC;
   IF (SUBSTR(L_DATA_TYPE,1,9) = 'TIMESTAMP') THEN
      FETCH DYN_CUR INTO L_VALUE_D;  
      L_VALUE_S  := TO_CHAR(L_VALUE_D);
   ELSIF (L_DATA_TYPE = 'NUMBER') OR (L_DATA_TYPE = 'FLOAT') THEN
      FETCH DYN_CUR INTO L_VALUE_F; 
      L_VALUE_S  := TO_CHAR(L_VALUE_F);
   ELSE 
      FETCH DYN_CUR INTO L_VALUE_S; 
   END IF;
   CLOSE DYN_CUR;  
ELSIF L_DEST_TP = 'rq' THEN
   IF L_RQ IS NULL THEN
      OPEN C_RQ(L_SC);
      FETCH C_RQ INTO L_RQ;
      CLOSE C_RQ;
   END IF;
   
   OPEN C_DATATYPE('UVRQ', L_DEST_PROPERTY);
   FETCH C_DATATYPE INTO L_DATA_TYPE;
   CLOSE C_DATATYPE;
   
   OPEN DYN_CUR FOR  'SELECT '||L_DEST_PROPERTY||' FROM UVRQ WHERE rq = :dest_rq' USING  L_RQ;
   IF (SUBSTR(L_DATA_TYPE,1,9) = 'TIMESTAMP') THEN
      FETCH DYN_CUR INTO L_VALUE_D;  
      L_VALUE_S  := TO_CHAR(L_VALUE_D);
   ELSIF (L_DATA_TYPE = 'NUMBER') OR (L_DATA_TYPE = 'FLOAT') THEN
      FETCH DYN_CUR INTO L_VALUE_F; 
      L_VALUE_S  := TO_CHAR(L_VALUE_F);
   ELSE 
      FETCH DYN_CUR INTO L_VALUE_S; 
   END IF;
   CLOSE DYN_CUR;  
ELSIF L_DEST_TP = 'sd' THEN
   IF L_SD IS NULL THEN
      OPEN C_SD(L_SC);
      FETCH C_SD INTO L_SD;
      CLOSE C_SD;
   END IF;
   
   OPEN C_DATATYPE('UVSD', L_DEST_PROPERTY);
   FETCH C_DATATYPE INTO L_DATA_TYPE;
   CLOSE C_DATATYPE;
   
   OPEN DYN_CUR FOR  'SELECT '||L_DEST_PROPERTY||' FROM UVSD WHERE sd = :dest_sd' USING  L_SD;
   IF (SUBSTR(L_DATA_TYPE,1,9) = 'TIMESTAMP') THEN
      FETCH DYN_CUR INTO L_VALUE_D;  
      L_VALUE_S  := TO_CHAR(L_VALUE_D);
   ELSIF (L_DATA_TYPE = 'NUMBER') OR (L_DATA_TYPE = 'FLOAT') THEN
      FETCH DYN_CUR INTO L_VALUE_F; 
      L_VALUE_S  := TO_CHAR(L_VALUE_F);
   ELSE 
      FETCH DYN_CUR INTO L_VALUE_S; 
   END IF;
   CLOSE DYN_CUR;  
ELSIF L_DEST_TP = 'ws' THEN
   IF L_WS IS NULL THEN
      OPEN C_WS(L_SC, L_PG, L_PGNODE, L_PA, L_PANODE, L_ME, L_MENODE);
      FETCH C_WS INTO L_WS;
      CLOSE C_WS;
   END IF;

   OPEN C_DATATYPE('UVWS', L_DEST_PROPERTY);
   FETCH C_DATATYPE INTO L_DATA_TYPE;
   CLOSE C_DATATYPE;

   OPEN DYN_CUR FOR  'SELECT '||L_DEST_PROPERTY||' FROM UVWS WHERE ws = :dest_ws' USING  L_WS;
   IF (SUBSTR(L_DATA_TYPE,1,9) = 'TIMESTAMP') THEN
      FETCH DYN_CUR INTO L_VALUE_D;  
      L_VALUE_S  := TO_CHAR(L_VALUE_D);
   ELSIF (L_DATA_TYPE = 'NUMBER') OR (L_DATA_TYPE = 'FLOAT') THEN
      FETCH DYN_CUR INTO L_VALUE_F; 
      L_VALUE_S  := TO_CHAR(L_VALUE_F);
   ELSE 
      FETCH DYN_CUR INTO L_VALUE_S; 
   END IF;
   CLOSE DYN_CUR;  
ELSIF L_DEST_TP = 'ch' THEN
   OPEN C_DATATYPE('UVCH', L_DEST_PROPERTY);
   FETCH C_DATATYPE INTO L_DATA_TYPE;
   CLOSE C_DATATYPE;

   OPEN DYN_CUR FOR  'SELECT '||L_DEST_PROPERTY||' FROM UVCH WHERE ch = :dest_ch' USING L_CH;
   IF (SUBSTR(L_DATA_TYPE,1,9) = 'TIMESTAMP') THEN
      FETCH DYN_CUR INTO L_VALUE_D;  
      L_VALUE_S := TO_CHAR(L_VALUE_D);
   ELSIF (L_DATA_TYPE = 'NUMBER') OR (L_DATA_TYPE = 'FLOAT') THEN
      FETCH DYN_CUR INTO L_VALUE_F; 
      L_VALUE_S := TO_CHAR(L_VALUE_F);
   ELSE 
      FETCH DYN_CUR INTO L_VALUE_S; 
   END IF;
   CLOSE DYN_CUR;  
ELSIF L_DEST_TP = 'pg' THEN
   OPEN C_DATATYPE('UVSCPG', L_DEST_PROPERTY);
   FETCH C_DATATYPE INTO L_DATA_TYPE;
   CLOSE C_DATATYPE;

   OPEN DYN_CUR FOR 'SELECT '||L_DEST_PROPERTY||
         ' FROM UVSCPG WHERE sc = :dest_sc AND pg = :dest_pg AND pgnode = :dest_pgnode' 
         USING  L_SC, L_PG, L_PGNODE;
   IF (SUBSTR(L_DATA_TYPE,1,9) = 'TIMESTAMP') THEN
      FETCH DYN_CUR INTO L_VALUE_D;  
      L_VALUE_S  := TO_CHAR(L_VALUE_D);
   ELSIF (L_DATA_TYPE = 'NUMBER') OR (L_DATA_TYPE = 'FLOAT') THEN
      FETCH DYN_CUR INTO L_VALUE_F; 
      L_VALUE_S  := TO_CHAR(L_VALUE_F);
   ELSE 
      FETCH DYN_CUR INTO L_VALUE_S; 
   END IF;
   CLOSE DYN_CUR;
ELSIF L_DEST_TP = 'pa' THEN
   OPEN C_DATATYPE('UVSCPA', L_DEST_PROPERTY);
   FETCH C_DATATYPE INTO L_DATA_TYPE;
   CLOSE C_DATATYPE;

   OPEN DYN_CUR FOR 'SELECT '||L_DEST_PROPERTY||
         ' FROM UVSCPA WHERE sc = :dest_sc AND pg = :dest_pg AND pgnode = :dest_pgnode '||
         'AND pa = :dest_pa AND panode = :dest_panode' USING L_SC, L_PG, L_PGNODE, L_PA, L_PANODE;
   IF (SUBSTR(L_DATA_TYPE,1,9) = 'TIMESTAMP') THEN
      FETCH DYN_CUR INTO L_VALUE_D;  
      L_VALUE_S  := TO_CHAR(L_VALUE_D);
   ELSIF (L_DATA_TYPE = 'NUMBER') OR (L_DATA_TYPE = 'FLOAT') THEN
      FETCH DYN_CUR INTO L_VALUE_F; 
      L_VALUE_S  := TO_CHAR(L_VALUE_F);
   ELSE 
      FETCH DYN_CUR INTO L_VALUE_S; 
   END IF;
   CLOSE DYN_CUR;
ELSIF L_DEST_TP = 'me' THEN
   OPEN C_DATATYPE('UVSCME', L_DEST_PROPERTY);
   FETCH C_DATATYPE INTO L_DATA_TYPE;
   CLOSE C_DATATYPE;
   
   OPEN DYN_CUR FOR 'SELECT '||L_DEST_PROPERTY||
         ' FROM UVSCME WHERE sc = :dest_sc AND pg = :dest_pg AND pgnode = :dest_pgnode '||
         'AND pa = :dest_pa AND panode = :dest_panode AND me = :dest_me AND menode = :dest_menode'
         USING L_SC, L_PG, L_PGNODE, L_PA, L_PANODE, L_ME, L_MENODE;
   IF (SUBSTR(L_DATA_TYPE,1,9) = 'TIMESTAMP') THEN
      FETCH DYN_CUR INTO L_VALUE_D;  
      L_VALUE_S  := TO_CHAR(L_VALUE_D);
   ELSIF (L_DATA_TYPE = 'NUMBER') OR (L_DATA_TYPE = 'FLOAT') THEN
      FETCH DYN_CUR INTO L_VALUE_F; 
      L_VALUE_S  := TO_CHAR(L_VALUE_F);
   ELSE 
      FETCH DYN_CUR INTO L_VALUE_S; 
   END IF;
   CLOSE DYN_CUR;
ELSIF L_DEST_TP = 'st' THEN
   IF L_ST IS NULL THEN
      OPEN C_ST(L_SC);
      FETCH C_ST INTO L_ST, L_ST_VERSION;
      CLOSE C_ST;
   END IF;

   OPEN C_DATATYPE('UVST', L_DEST_PROPERTY);
   FETCH C_DATATYPE INTO L_DATA_TYPE;
   CLOSE C_DATATYPE;

   OPEN DYN_CUR FOR 'SELECT '||L_DEST_PROPERTY||
         ' FROM UVST WHERE st = :dest_st AND version = :dest_version' USING L_ST, L_ST_VERSION;
   IF (SUBSTR(L_DATA_TYPE,1,9) = 'TIMESTAMP') THEN
      FETCH DYN_CUR INTO L_VALUE_D;  
      L_VALUE_S  := TO_CHAR(L_VALUE_D);
   ELSIF (L_DATA_TYPE = 'NUMBER') OR (L_DATA_TYPE = 'FLOAT') THEN
      FETCH DYN_CUR INTO L_VALUE_F; 
      L_VALUE_S  := TO_CHAR(L_VALUE_F);
   ELSE 
      FETCH DYN_CUR INTO L_VALUE_S; 
   END IF;
   CLOSE DYN_CUR;
ELSIF L_DEST_TP = 'rt' THEN
   IF L_RQ IS NULL THEN
      OPEN C_RQ(L_SC);
      FETCH C_RQ INTO L_RQ;
      CLOSE C_RQ;
   END IF;
   IF L_RT IS NULL THEN
      OPEN C_RT(L_RQ);
      FETCH C_RT INTO L_RT, L_RT_VERSION;
      CLOSE C_RT;
   END IF;
   
   OPEN C_DATATYPE('UVRT', L_DEST_PROPERTY);
   FETCH C_DATATYPE INTO L_DATA_TYPE;
   CLOSE C_DATATYPE;
 
   OPEN DYN_CUR FOR 'SELECT '||L_DEST_PROPERTY||
         ' FROM UVRT WHERE rt = :dest_rt AND version = :dest_version' USING L_RT, L_RT_VERSION;
   IF (SUBSTR(L_DATA_TYPE,1,9) = 'TIMESTAMP') THEN
      FETCH DYN_CUR INTO L_VALUE_D;  
      L_VALUE_S  := TO_CHAR(L_VALUE_D);
   ELSIF (L_DATA_TYPE = 'NUMBER') OR (L_DATA_TYPE = 'FLOAT') THEN
      FETCH DYN_CUR INTO L_VALUE_F; 
      L_VALUE_S  := TO_CHAR(L_VALUE_F);
   ELSE 
      FETCH DYN_CUR INTO L_VALUE_S; 
   END IF;
   CLOSE DYN_CUR;
ELSIF L_DEST_TP = 'pt' THEN
   IF L_SD IS NULL THEN
      OPEN C_SD(L_SC);
      FETCH C_SD INTO L_SD;
      CLOSE C_SD;
   END IF;
   IF L_PT IS NULL THEN
      OPEN C_PT(L_SD);
      FETCH C_PT INTO L_PT, L_PT_VERSION;
      CLOSE C_PT;
   END IF;
   
   OPEN C_DATATYPE('UVPT', L_DEST_PROPERTY);
   FETCH C_DATATYPE INTO L_DATA_TYPE;
   CLOSE C_DATATYPE;
 
   OPEN DYN_CUR FOR 'SELECT '||L_DEST_PROPERTY||
         ' FROM UVPT WHERE pt = :dest_pt AND version = :dest_version' USING L_PT, L_PT_VERSION;
   IF (SUBSTR(L_DATA_TYPE,1,9) = 'TIMESTAMP') THEN
      FETCH DYN_CUR INTO L_VALUE_D;  
      L_VALUE_S  := TO_CHAR(L_VALUE_D);
   ELSIF (L_DATA_TYPE = 'NUMBER') OR (L_DATA_TYPE = 'FLOAT') THEN
      FETCH DYN_CUR INTO L_VALUE_F; 
      L_VALUE_S  := TO_CHAR(L_VALUE_F);
   ELSE 
      FETCH DYN_CUR INTO L_VALUE_S; 
   END IF;
   CLOSE DYN_CUR;
ELSIF L_DEST_TP = 'dc' THEN
   OPEN C_DATATYPE('UVDC', L_DEST_PROPERTY);
   FETCH C_DATATYPE INTO L_DATA_TYPE;
   CLOSE C_DATATYPE;

   OPEN DYN_CUR FOR 'SELECT '||L_DEST_PROPERTY||
         ' FROM UVDC WHERE dc = :dest_dc AND version = :dest_version' USING L_DC, L_DC_VERSION;
   IF (L_DATA_TYPE = 'DATE') THEN
      FETCH DYN_CUR INTO L_VALUE_D;  
      L_VALUE_S  := TO_CHAR(L_VALUE_D);
   ELSIF (L_DATA_TYPE = 'NUMBER') OR (L_DATA_TYPE = 'FLOAT') THEN
      FETCH DYN_CUR INTO L_VALUE_F; 
      L_VALUE_S  := TO_CHAR(L_VALUE_F);
   ELSE 
      FETCH DYN_CUR INTO L_VALUE_S; 
   END IF;
   CLOSE DYN_CUR;
ELSIF L_DEST_TP = 'us' THEN
   OPEN DYN_CUR FOR 'SELECT '||L_DEST_PROPERTY||' FROM UVAD WHERE ad = :dest_us' 
         USING UNAPIEV.P_EV_REC.USERNAME; 
   FETCH DYN_CUR INTO L_VALUE_S; 
   CLOSE DYN_CUR;
ELSIF L_DEST_TP = 'scgk' THEN
   OPEN DYN_CUR FOR 'SELECT value FROM UVSCGK WHERE sc = :dest_sc AND gk = :dest_gk '||
         'ORDER BY gkseq' USING L_SC, L_DEST_PROPERTY; 
   FETCH DYN_CUR INTO L_VALUE_S; 
   CLOSE DYN_CUR;
ELSIF L_DEST_TP = 'rqgk' THEN
   IF L_RQ IS NULL THEN
      OPEN C_RQ(L_SC);
      FETCH C_RQ INTO L_RQ;
      CLOSE C_RQ;
   END IF;
   
   OPEN DYN_CUR FOR 'SELECT value FROM UVRQGK WHERE rq = :dest_rq AND gk = :dest_gk '||
         'ORDER BY gkseq' USING L_RQ, L_DEST_PROPERTY; 
   FETCH DYN_CUR INTO L_VALUE_S; 
   CLOSE DYN_CUR;
ELSIF L_DEST_TP = 'sdgk' THEN
   IF L_SD IS NULL THEN
      OPEN C_SD(L_SC);
      FETCH C_SD INTO L_SD;
      CLOSE C_SD;
   END IF;
   
   OPEN DYN_CUR FOR 'SELECT value FROM UVSDGK WHERE sd = :dest_sd AND gk = :dest_gk '||
         'ORDER BY gkseq' USING L_SD, L_DEST_PROPERTY; 
   FETCH DYN_CUR INTO L_VALUE_S; 
   CLOSE DYN_CUR;
ELSIF L_DEST_TP = 'wsgk' THEN
   IF L_WS IS NULL THEN
      OPEN C_WS(L_SC, L_PG, L_PGNODE, L_PA, L_PANODE, L_ME, L_MENODE);
      FETCH C_WS INTO L_WS;
      CLOSE C_WS;
   END IF;

   OPEN DYN_CUR FOR 'SELECT value FROM UVWSGK WHERE ws = :dest_ws AND gk = :dest_gk '||
         'ORDER BY gkseq' USING L_WS, L_DEST_PROPERTY;
   FETCH DYN_CUR INTO L_VALUE_S;
   CLOSE DYN_CUR;
ELSIF L_DEST_TP = 'megk' THEN
   OPEN DYN_CUR FOR 'SELECT value FROM UVSCMEGK WHERE sc = :dest_sc AND pg = :dest_pg '||
         'AND pgnode = :dest_pgnode AND pa = :dest_pa AND panode = :dest_panode '||
         'AND me = :dest_me AND menode = :dest_menode AND gk = :dest_gk ORDER BY gkseq'
         USING L_SC, L_PG, L_PGNODE, L_PA, L_PANODE, L_ME, L_MENODE, L_DEST_PROPERTY;
   FETCH DYN_CUR INTO L_VALUE_S; 
   CLOSE DYN_CUR;
ELSIF L_DEST_TP = 'stgk' THEN
   IF L_ST IS NULL THEN
      OPEN C_ST(L_SC);
      FETCH C_ST INTO L_ST, L_ST_VERSION;
      CLOSE C_ST;
   END IF;
   
   OPEN DYN_CUR FOR 'SELECT value FROM UVSTGK WHERE st = :dest_st AND version = :dest_version '||
         'AND gk = :dest_gk ORDER BY gkseq' USING L_ST, L_ST_VERSION, L_DEST_PROPERTY; 
   FETCH DYN_CUR INTO L_VALUE_S; 
   CLOSE DYN_CUR;
ELSIF L_DEST_TP = 'rtgk' THEN
   IF L_RQ IS NULL THEN
      OPEN C_RQ(L_SC);
      FETCH C_RQ INTO L_RQ;
      CLOSE C_RQ;
   END IF;
   IF L_RT IS NULL THEN
      OPEN C_RT(L_RQ);
      FETCH C_RT INTO L_RT, L_RT_VERSION;
      CLOSE C_RT;
   END IF;   
   
   OPEN DYN_CUR FOR 'SELECT value FROM UVRTGK WHERE rt = :dest_rt AND version = :dest_version '||
         'AND gk = :dest_gk ORDER BY gkseq' USING L_RT, L_RT_VERSION, L_DEST_PROPERTY;
   FETCH DYN_CUR INTO L_VALUE_S; 
   CLOSE DYN_CUR;
ELSIF L_DEST_TP = 'ptgk' THEN
   IF L_SD IS NULL THEN
      OPEN C_SD(L_SC);
      FETCH C_SD INTO L_SD;
      CLOSE C_SD;
   END IF;
   IF L_PT IS NULL THEN
      OPEN C_PT(L_SD);
      FETCH C_PT INTO L_PT, L_PT_VERSION;
      CLOSE C_PT;
   END IF;   
   
   OPEN DYN_CUR FOR 'SELECT value FROM UVPTGK WHERE pt = :dest_pt AND version = :dest_version '||
         'AND gk = :dest_gk ORDER BY gkseq' USING L_PT, L_PT_VERSION, L_DEST_PROPERTY;
   FETCH DYN_CUR INTO L_VALUE_S; 
   CLOSE DYN_CUR;
ELSIF L_DEST_TP = 'dcgk' THEN
   OPEN DYN_CUR FOR 'SELECT value FROM UVDCGK WHERE dc = :dest_dc AND version = :dest_version '||
         'AND gk = :dest_gk ORDER BY gkseq' USING L_DC, L_DC_VERSION, L_DEST_PROPERTY; 
   FETCH DYN_CUR INTO L_VALUE_S; 
   CLOSE DYN_CUR;
ELSIF L_DEST_TP = 'chgk' THEN
   OPEN DYN_CUR FOR 'SELECT value FROM UVCHGK WHERE ch = :dest_ch '||
         'AND gk = :dest_gk ORDER BY gkseq' USING L_CH, L_DEST_PROPERTY; 
   FETCH DYN_CUR INTO L_VALUE_S; 
   CLOSE DYN_CUR;
ELSIF L_DEST_TP = 'scii' THEN
   IF L_IC IS NOT NULL AND L_ICNODE IS NOT NULL THEN
      OPEN DYN_CUR1 FOR 'SELECT iivalue FROM UVSCII WHERE sc = :dest_sc AND ic = :dest_ic AND icnode = :dest_icnode '||
            'AND ii = :dest_ii ORDER BY icnode, iinode' USING L_SC, L_IC, L_ICNODE, L_DEST_PROPERTY; 
      FETCH DYN_CUR1 INTO L_VALUE_S; 
      IF DYN_CUR1%NOTFOUND THEN
         OPEN DYN_CUR2 FOR 'SELECT iivalue FROM UVSCII WHERE sc = :dest_sc AND ii = :dest_ii '||
               'ORDER BY icnode, iinode' USING L_SC, L_DEST_PROPERTY; 
         FETCH DYN_CUR2 INTO L_VALUE_S; 
         CLOSE DYN_CUR2;
      END IF;
      CLOSE DYN_CUR1;
   ELSE
      OPEN DYN_CUR FOR 'SELECT iivalue FROM UVSCII WHERE sc = :dest_sc AND ii = :dest_ii '||
            'ORDER BY icnode, iinode' USING L_SC, L_DEST_PROPERTY; 
      FETCH DYN_CUR INTO L_VALUE_S; 
      CLOSE DYN_CUR;
   END IF;
ELSIF L_DEST_TP = 'rqii' THEN
   IF L_RQ IS NULL THEN
      OPEN C_RQ(L_SC);
      FETCH C_RQ INTO L_RQ;
      CLOSE C_RQ;
   END IF;
   IF L_IC IS NOT NULL AND L_ICNODE IS NOT NULL THEN
      OPEN DYN_CUR1 FOR 'SELECT iivalue FROM UVRQII WHERE rq = :dest_rq AND ic = :dest_ic AND icnode = :dest_icnode '||
            'AND ii = :dest_ii ORDER BY icnode, iinode' USING L_RQ, L_IC, L_ICNODE, L_DEST_PROPERTY; 
      FETCH DYN_CUR1 INTO L_VALUE_S; 
      IF DYN_CUR1%NOTFOUND THEN
         OPEN DYN_CUR2 FOR 'SELECT iivalue FROM UVRQII WHERE rq = :dest_rq AND ii = :dest_ii '||
               'ORDER BY icnode, iinode' USING L_RQ, L_DEST_PROPERTY; 
         FETCH DYN_CUR2 INTO L_VALUE_S; 
         CLOSE DYN_CUR2;
      END IF;
      CLOSE DYN_CUR1;
   ELSE
      OPEN DYN_CUR FOR 'SELECT iivalue FROM UVRQII WHERE rq = :dest_rq AND ii = :dest_ii '||
            'ORDER BY icnode, iinode' USING L_RQ, L_DEST_PROPERTY; 
      FETCH DYN_CUR INTO L_VALUE_S; 
      CLOSE DYN_CUR;
   END IF;
ELSIF L_DEST_TP = 'sdii' THEN
   IF L_SD IS NULL THEN
      OPEN C_SD(L_SC);
      FETCH C_SD INTO L_SD;
      CLOSE C_SD;
   END IF;
   IF L_IC IS NOT NULL AND L_ICNODE IS NOT NULL THEN
      OPEN DYN_CUR1 FOR 'SELECT iivalue FROM UVSDII WHERE sd = :dest_sd AND ic = :dest_ic AND icnode = :dest_icnode '||
            'AND ii = :dest_ii ORDER BY icnode, iinode' USING L_SD, L_IC, L_ICNODE, L_DEST_PROPERTY; 
      FETCH DYN_CUR1 INTO L_VALUE_S; 
      IF DYN_CUR1%NOTFOUND THEN
         OPEN DYN_CUR2 FOR 'SELECT iivalue FROM UVSDII WHERE sd = :dest_sd AND ii = :dest_ii '||
               'ORDER BY icnode, iinode' USING L_SD, L_DEST_PROPERTY; 
         FETCH DYN_CUR2 INTO L_VALUE_S; 
         CLOSE DYN_CUR2;
      END IF;
      CLOSE DYN_CUR1;
   ELSE
      OPEN DYN_CUR FOR 'SELECT iivalue FROM UVSDII WHERE sd = :dest_sd AND ii = :dest_ii '||
            'ORDER BY icnode, iinode' USING L_SD, L_DEST_PROPERTY; 
      FETCH DYN_CUR INTO L_VALUE_S; 
      CLOSE DYN_CUR;
   END IF;
ELSIF L_DEST_TP = 'scau' THEN
   OPEN DYN_CUR FOR 'SELECT value FROM UVSCAU WHERE sc = :dest_sc AND au = :dest_au '||
         'ORDER BY auseq' USING L_SC, L_DEST_PROPERTY; 
   FETCH DYN_CUR INTO L_VALUE_S; 
   CLOSE DYN_CUR;
ELSIF L_DEST_TP = 'rqau' THEN
   IF L_RQ IS NULL THEN
      OPEN C_RQ(L_SC);
      FETCH C_RQ INTO L_RQ;
      CLOSE C_RQ;
   END IF;
   
   OPEN DYN_CUR FOR 'SELECT value FROM UVRQAU WHERE rq = :dest_rq AND au = :dest_gk '||
         'ORDER BY auseq' USING L_RQ, L_DEST_PROPERTY; 
   FETCH DYN_CUR INTO L_VALUE_S; 
   CLOSE DYN_CUR;
ELSIF L_DEST_TP = 'sdau' THEN
   IF L_SD IS NULL THEN
      OPEN C_SD(L_SC);
      FETCH C_SD INTO L_SD;
      CLOSE C_SD;
   END IF;
   
   OPEN DYN_CUR FOR 'SELECT value FROM UVSDAU WHERE sd = :dest_sd AND au = :dest_gk '||
         'ORDER BY auseq' USING L_SD, L_DEST_PROPERTY; 
   FETCH DYN_CUR INTO L_VALUE_S; 
   CLOSE DYN_CUR;
ELSIF L_DEST_TP = 'wsau' THEN
   IF L_WS IS NULL THEN
      OPEN C_WS(L_SC, L_PG, L_PGNODE, L_PA, L_PANODE, L_ME, L_MENODE);
      FETCH C_WS INTO L_WS;
      CLOSE C_WS;
   END IF;

   OPEN DYN_CUR FOR 'SELECT value FROM UVWSAU WHERE ws = :dest_ws AND au = :dest_au '|| 
         'ORDER BY auseq' USING L_WS, L_DEST_PROPERTY; 
   FETCH DYN_CUR INTO L_VALUE_S; 
   CLOSE DYN_CUR;
ELSIF L_DEST_TP = 'chau' THEN
   OPEN DYN_CUR FOR 'SELECT value FROM UVCHAU WHERE ch = :dest_ch AND au = :dest_au '|| 
         'ORDER BY auseq' USING L_CH, L_DEST_PROPERTY; 
   FETCH DYN_CUR INTO L_VALUE_S; 
   CLOSE DYN_CUR;
ELSIF L_DEST_TP = 'meau' THEN
   OPEN DYN_CUR FOR 'SELECT value FROM UVSCMEAU WHERE sc = :dest_sc AND pg = :dest_pg '||
         'AND pgnode = :dest_pgnode AND pa = :dest_pa AND panode = :dest_panode '||
         'AND me = :dest_me AND menode = :dest_menode AND au = :dest_au ORDER BY auseq' 
         USING L_SC, L_PG, L_PGNODE, L_PA, L_PANODE, L_ME, L_MENODE, L_DEST_PROPERTY; 
   FETCH DYN_CUR INTO L_VALUE_S; 
   CLOSE DYN_CUR;
ELSIF L_DEST_TP = 'stau' THEN
   IF L_ST IS NULL THEN
      OPEN C_ST(L_SC);
      FETCH C_ST INTO L_ST, L_ST_VERSION;
      CLOSE C_ST;
   END IF;
   
   OPEN DYN_CUR FOR 'SELECT value FROM UVSTAU WHERE st = :dest_st AND version = :dest_version '||
         'AND au = :dest_au ORDER BY auseq' USING L_ST, L_ST_VERSION, L_DEST_PROPERTY; 
   FETCH DYN_CUR INTO L_VALUE_S; 
   CLOSE DYN_CUR;
ELSIF L_DEST_TP = 'rtau' THEN
   IF L_RQ IS NULL THEN
      OPEN C_RQ(L_SC);
      FETCH C_RQ INTO L_RQ;
      CLOSE C_RQ;
   END IF;
   IF L_RT IS NULL THEN
      OPEN C_RT(L_RQ);
      FETCH C_RT INTO L_RT, L_RT_VERSION;
      CLOSE C_RT;
   END IF;   
   
   OPEN DYN_CUR FOR 'SELECT value FROM UVRTAU WHERE rt = :dest_rt AND version = :dest_version '||
         'AND au = :dest_au ORDER BY auseq' USING L_RT, L_RT_VERSION, L_DEST_PROPERTY; 
   FETCH DYN_CUR INTO L_VALUE_S; 
   CLOSE DYN_CUR;
ELSIF L_DEST_TP = 'ptau' THEN
   IF L_SD IS NULL THEN
      OPEN C_SD(L_SC);
      FETCH C_SD INTO L_SD;
      CLOSE C_SD;
   END IF;
   IF L_PT IS NULL THEN
      OPEN C_PT(L_SD);
      FETCH C_PT INTO L_PT, L_PT_VERSION;
      CLOSE C_PT;
   END IF;   
   
   OPEN DYN_CUR FOR 'SELECT value FROM UVPTAU WHERE pt = :dest_pt AND version = :dest_version '||
         'AND au = :dest_au ORDER BY auseq' USING L_PT, L_PT_VERSION, L_DEST_PROPERTY; 
   FETCH DYN_CUR INTO L_VALUE_S; 
   CLOSE DYN_CUR;
ELSIF L_DEST_TP = 'dcau' THEN
   OPEN DYN_CUR FOR 'SELECT value FROM UVDCAU WHERE dc = :dest_dc AND version = :dest_version '||
         'AND au = :dest_au ORDER BY auseq' USING L_DC, L_DC_VERSION, L_DEST_PROPERTY; 
   FETCH DYN_CUR INTO L_VALUE_S; 
   CLOSE DYN_CUR;
ELSIF L_DEST_TP = 'mtau' THEN
   IF L_MT_VERSION IS NULL THEN
      OPEN C_MT(L_SC, L_PG, L_PGNODE, L_PA, L_PANODE, L_ME, L_MENODE);
      FETCH C_MT INTO L_MT_VERSION;
      CLOSE C_MT;
   END IF;
   
   OPEN DYN_CUR FOR 'SELECT value FROM UVMTAU WHERE mt = :dest_mt AND version = :dest_version '||
         'AND au = :dest_au ORDER BY auseq' USING L_ME, L_MT_VERSION, L_DEST_PROPERTY; 
   FETCH DYN_CUR INTO L_VALUE_S; 
   CLOSE DYN_CUR;
ELSIF L_DEST_TP = 'usau' THEN
   OPEN DYN_CUR FOR 'SELECT value FROM UVADAU WHERE ad = :dest_us AND au = :dest_au'|| 
         'ORDER BY auseq' USING UNAPIEV.P_EV_REC.USERNAME, L_DEST_PROPERTY; 
   FETCH DYN_CUR INTO L_VALUE_S; 
   CLOSE DYN_CUR;
ELSIF L_DEST_TP = 'eq' THEN
   OPEN C_DATATYPE('UVEQ', L_DEST_PROPERTY);
   FETCH C_DATATYPE INTO L_DATA_TYPE;
   CLOSE C_DATATYPE;
   
   OPEN DYN_CUR FOR 'SELECT '||L_DEST_PROPERTY||
         ' FROM uveq WHERE eq = :dest_eq AND lab = :dest_lab AND version = :dest_version' USING L_EQ, L_LAB, L_EQ_VERSION;
   IF (SUBSTR(L_DATA_TYPE,1,9) = 'TIMESTAMP') THEN
      FETCH DYN_CUR INTO L_VALUE_D;  
      L_VALUE_S  := TO_CHAR(L_VALUE_D);
   ELSIF (L_DATA_TYPE = 'NUMBER') OR (L_DATA_TYPE = 'FLOAT') THEN
      FETCH DYN_CUR INTO L_VALUE_F;
      L_VALUE_S  := TO_CHAR(L_VALUE_F);
   ELSE
      FETCH DYN_CUR INTO L_VALUE_S;
   END IF;
   CLOSE DYN_CUR;      
ELSIF L_DEST_TP = 'eqct' THEN
   OPEN C_DATATYPE('UVEQCT', L_DEST_PROPERTY);
   FETCH C_DATATYPE INTO L_DATA_TYPE;
   CLOSE C_DATATYPE;

   OPEN DYN_CUR FOR 'SELECT '||L_DEST_PROPERTY||
         ' FROM uveqct WHERE eq = :dest_eq AND lab = :dest_lab AND version = :dest_version' ||
         ' AND ct_name = :dest_ct_name' USING L_EQ, L_LAB, L_EQ_VERSION, L_CT_NAME;
   IF (L_DATA_TYPE = 'NUMBER') OR (L_DATA_TYPE = 'FLOAT') THEN
      FETCH DYN_CUR INTO L_VALUE_F;
      L_VALUE_S  := TO_CHAR(L_VALUE_F);
   ELSE
      FETCH DYN_CUR INTO L_VALUE_S;
   END IF;
   CLOSE DYN_CUR;      
ELSIF L_DEST_TP = 'scsdcs' THEN
   IF L_SD IS NULL THEN
      OPEN C_SD(L_SC);
      FETCH C_SD INTO L_SD;
      CLOSE C_SD;
   END IF;

   
   IF L_SD IS NOT NULL THEN
      L_CSNODE := NULL;
      OPEN C_SDCELLSC(L_SD, L_SC);
      FETCH C_SDCELLSC INTO L_CSNODE, L_TPNODE;
      CLOSE C_SDCELLSC;
   
      IF L_CSNODE IS NOT NULL THEN
         OPEN C_DATATYPE('UVSDCS', L_DEST_PROPERTY);
         FETCH C_DATATYPE INTO L_DATA_TYPE;
         CLOSE C_DATATYPE;

         OPEN DYN_CUR FOR 'SELECT '||L_DEST_PROPERTY||
                          ' FROM uvsdcs WHERE sd=:dest_sd AND csnode = :dest_csnode '||
                          ' ORDER BY cs ' USING L_SD, L_CSNODE;
         IF (SUBSTR(L_DATA_TYPE,1,9) = 'TIMESTAMP') THEN
            FETCH DYN_CUR INTO L_VALUE_D;  
            L_VALUE_S  := TO_CHAR(L_VALUE_D);
         ELSIF (L_DATA_TYPE = 'NUMBER') OR (L_DATA_TYPE = 'FLOAT') THEN
            FETCH DYN_CUR INTO L_VALUE_F;
            L_VALUE_S  := TO_CHAR(L_VALUE_F);
         ELSE
            FETCH DYN_CUR INTO L_VALUE_S;
         END IF;
         CLOSE DYN_CUR;    
      END IF;
   END IF;
ELSIF L_DEST_TP = 'scsdtp' THEN
   IF L_SD IS NULL THEN
      OPEN C_SD(L_SC);
      FETCH C_SD INTO L_SD;
      CLOSE C_SD;
   END IF;

   
   IF L_SD IS NOT NULL THEN
      L_TPNODE := NULL;
      OPEN C_SDCELLSC(L_SD, L_SC);
      FETCH C_SDCELLSC INTO L_CSNODE, L_TPNODE;
      CLOSE C_SDCELLSC;
   
      IF L_TPNODE IS NOT NULL THEN
         OPEN C_DATATYPE('UVSDTP', L_DEST_PROPERTY);
         FETCH C_DATATYPE INTO L_DATA_TYPE;
         CLOSE C_DATATYPE;

         OPEN DYN_CUR FOR 'SELECT '||L_DEST_PROPERTY||
                          ' FROM uvsdtp WHERE sd=:dest_sd AND tpnode = :dest_tpnode '||
                          ' ORDER BY tp ' USING L_SD, L_TPNODE;
         IF (SUBSTR(L_DATA_TYPE,1,9) = 'TIMESTAMP') THEN
            FETCH DYN_CUR INTO L_VALUE_D;  
            L_VALUE_S  := TO_CHAR(L_VALUE_D);
         ELSIF (L_DATA_TYPE = 'NUMBER') OR (L_DATA_TYPE = 'FLOAT') THEN
            FETCH DYN_CUR INTO L_VALUE_F;
            L_VALUE_S  := TO_CHAR(L_VALUE_F);
         ELSE
            FETCH DYN_CUR INTO L_VALUE_S;
         END IF;
         CLOSE DYN_CUR;    
      END IF;
   END IF;
ELSIF L_DEST_TP = 'scsdcscn' THEN
   IF L_SD IS NULL THEN
      OPEN C_SD(L_SC);
      FETCH C_SD INTO L_SD;
      CLOSE C_SD;
   END IF;

   
   IF L_SD IS NOT NULL THEN
      L_CSNODE := NULL;
      OPEN C_SDCELLSC(L_SD, L_SC);
      FETCH C_SDCELLSC INTO L_CSNODE, L_TPNODE;
      CLOSE C_SDCELLSC;
   
      IF L_CSNODE IS NOT NULL THEN

         OPEN DYN_CUR FOR 'SELECT value'||
                          ' FROM uvsdcscn WHERE sd=:dest_sd AND csnode = :dest_csnode '||
                          ' AND cn = :dest_property ORDER BY cs, cnseq ' USING L_SD, L_CSNODE, L_DEST_PROPERTY;
         FETCH DYN_CUR INTO L_VALUE_S;
         CLOSE DYN_CUR;    
      END IF;
   END IF;
ELSIF L_DEST_TP = 'scsdcellsc' THEN
   IF L_SD IS NULL THEN
      OPEN C_SD(L_SC);
      FETCH C_SD INTO L_SD;
      CLOSE C_SD;
   END IF;

   
   IF L_SD IS NOT NULL THEN   
      OPEN C_DATATYPE('UVSDCELLSC', L_DEST_PROPERTY);
      FETCH C_DATATYPE INTO L_DATA_TYPE;
      CLOSE C_DATATYPE;

      OPEN DYN_CUR FOR 'SELECT '||L_DEST_PROPERTY||
                       ' FROM uvsdcellsc WHERE sd=:dest_sd AND sc = :dest_sc '||
                       ' ORDER BY csnode, tpnode, seq ' USING L_SD, L_SC;
      IF (SUBSTR(L_DATA_TYPE,1,9) = 'TIMESTAMP') THEN
         FETCH DYN_CUR INTO L_VALUE_D;  
         L_VALUE_S  := TO_CHAR(L_VALUE_D);
      ELSIF (L_DATA_TYPE = 'NUMBER') OR (L_DATA_TYPE = 'FLOAT') THEN
         FETCH DYN_CUR INTO L_VALUE_F;
         L_VALUE_S  := TO_CHAR(L_VALUE_F);
      ELSE
         FETCH DYN_CUR INTO L_VALUE_S;
      END IF;
      CLOSE DYN_CUR;    
   END IF;
END IF;

A_VALUE_S := L_VALUE_S;
A_VALUE_F := L_VALUE_F;
A_VALUE_D := L_VALUE_D;
L_RESULT  := UNAPIGEN.DBERR_SUCCESS;

RETURN(L_RESULT);

EXCEPTION
WHEN OTHERS THEN
   L_SQLERRM := SQLERRM;

   IF DYN_CUR%ISOPEN THEN
      CLOSE DYN_CUR;
   END IF;
   IF C_RQ%ISOPEN THEN
      CLOSE C_RQ;
   END IF;
   IF C_SD%ISOPEN THEN
      CLOSE C_SD;
   END IF;
   IF C_SDCELLSC%ISOPEN THEN
      CLOSE C_SDCELLSC;
   END IF;
   IF C_WS%ISOPEN THEN
      CLOSE C_WS;
   END IF;
   IF C_ST%ISOPEN THEN
      CLOSE C_ST;
   END IF;
   IF C_RT%ISOPEN THEN
      CLOSE C_RT;
   END IF;
   IF C_PT%ISOPEN THEN
      CLOSE C_PT;
   END IF;
   IF C_MT%ISOPEN THEN
      CLOSE C_MT;
   END IF;
   IF C_DATATYPE%ISOPEN  THEN
      CLOSE C_DATATYPE;
   END IF;
   RETURN(UNAPIGEN.DBERR_NOOBJECT);
END TILDESUBSTITUTION;

FUNCTION SUBSTITUTEALLTILDESINTEXT
(A_OBJECT_TP    IN      VARCHAR2,    
 A_OBJECT_KEY   IN      VARCHAR2,       
 A_TEXT         IN OUT  VARCHAR2)
RETURN NUMBER IS
   L_TEXT         VARCHAR2(2000);
   L_TEXT_PIECE   VARCHAR2(2000);
   L_POS_A        INTEGER;
   L_POS_B        INTEGER;
   L_COUNT        INTEGER;
   L_SUBST_OUT_S  VARCHAR2(2000);
   L_SUBST_OUT_F  NUMBER;
   L_SUBST_OUT_D  TIMESTAMP WITH TIME ZONE;
BEGIN
   L_TEXT   := A_TEXT;
   L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;

   IF INSTR(L_TEXT,'@') > 0 THEN 
      L_POS_B := INSTR(L_TEXT, '~', 1, 2);

      IF L_POS_B > 0 THEN
         WHILE (L_POS_B > 0) AND (L_RET_CODE = UNAPIGEN.DBERR_SUCCESS) LOOP
            IF (L_POS_B > 0) THEN
               L_POS_A      := INSTR(L_TEXT, '~');
               L_TEXT_PIECE := SUBSTR(L_TEXT, L_POS_A, L_POS_B - L_POS_A + 1);
            END IF;

            L_RET_CODE := UNAPIGEN.TILDESUBSTITUTION(A_OBJECT_TP, A_OBJECT_KEY, 
                             REPLACE(L_TEXT_PIECE,'~'), L_SUBST_OUT_S, L_SUBST_OUT_F, 
                             L_SUBST_OUT_D);
            L_TEXT   := REPLACE(L_TEXT, L_TEXT_PIECE, L_SUBST_OUT_S);
            L_POS_B  := INSTR(L_TEXT, '~', 1, 2) ;
         END LOOP; 
      ELSE
         L_RET_CODE := UNAPIGEN.TILDESUBSTITUTION(A_OBJECT_TP, A_OBJECT_KEY, REPLACE(L_TEXT,'~'), 
                                                  L_SUBST_OUT_S, L_SUBST_OUT_F, L_SUBST_OUT_D);   
         L_TEXT  := L_SUBST_OUT_S;
      END IF;
      A_TEXT := L_TEXT;
   END IF;

   RETURN(L_RET_CODE);
EXCEPTION
WHEN OTHERS THEN 
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END SUBSTITUTEALLTILDESINTEXT;

FUNCTION GETUNIT
(A_UNIT                        OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_UNIT_TP                     OUT     UNAPIGEN.VC40_TABLE_TYPE,   
 A_CONV_FACTOR                 OUT     UNAPIGEN.FLOAT_TABLE_TYPE,   
 A_NR_OF_ROWS                  IN OUT  NUMBER,                     
 A_WHERE_CLAUSE                IN      VARCHAR2)                   
RETURN NUMBER IS

L_UNIT                        VARCHAR2(20);
L_UNIT_TP                     VARCHAR2(40);
L_CONV_FACTOR                 NUMBER;
L_UNIT_CURSOR                 INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

  IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'ORDER BY unit'; 
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := 'WHERE unit = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || ''' ORDER BY unit'; 
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_UNIT_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT unit, unit_tp, conv_factor FROM dd'
                   || UNAPIGEN.P_DD || '.uvunit ' || L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_UNIT_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

   DBMS_SQL.DEFINE_COLUMN(L_UNIT_CURSOR, 1, L_UNIT, 20);
   DBMS_SQL.DEFINE_COLUMN(L_UNIT_CURSOR, 2, L_UNIT_TP, 20);
   DBMS_SQL.DEFINE_COLUMN(L_UNIT_CURSOR, 3, L_CONV_FACTOR);

   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_UNIT_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(L_UNIT_CURSOR, 1, L_UNIT);
      DBMS_SQL.COLUMN_VALUE(L_UNIT_CURSOR, 2, L_UNIT_TP);
      DBMS_SQL.COLUMN_VALUE(L_UNIT_CURSOR, 3, L_CONV_FACTOR);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_UNIT(L_FETCHED_ROWS) := L_UNIT;
      A_UNIT_TP(L_FETCHED_ROWS) := L_UNIT_TP;
      A_CONV_FACTOR(L_FETCHED_ROWS) := L_CONV_FACTOR;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_UNIT_CURSOR);
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_UNIT_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetUnit', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (L_UNIT_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_UNIT_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETUNIT;

FUNCTION USERENV
(A_ENVIRONMENT_VARIABLE                IN      VARCHAR2)                   
RETURN VARCHAR2 IS
L_LOCAL_VC255                          VARCHAR2(255);
L_SQL_STRING                           VARCHAR2(255);
BEGIN
   L_SQL_STRING := 'BEGIN :l_local_vc255 := '||A_ENVIRONMENT_VARIABLE||'; END;';
   EXECUTE IMMEDIATE L_SQL_STRING USING OUT L_LOCAL_VC255;
   RETURN(L_LOCAL_VC255);
END USERENV;


FUNCTION CX_RPAD
(A_INPUTSTRING     IN VARCHAR2, 
 A_SIZE            IN NUMBER, 
 A_PADDINGSTRING   IN VARCHAR2) 
RETURN VARCHAR2 IS
   L_TEMP VARCHAR2(2000);
BEGIN
   IF (LENGTH(A_PADDINGSTRING) < 1) THEN
      RETURN(A_INPUTSTRING);  
   END IF;
   L_TEMP := A_INPUTSTRING;
   WHILE (LENGTH(L_TEMP) < A_SIZE) LOOP
      L_TEMP := L_TEMP || A_PADDINGSTRING;
   END LOOP;
   RETURN(L_TEMP);
END CX_RPAD;


FUNCTION CX_LPAD
(A_INPUTSTRING     IN VARCHAR2, 
 A_SIZE            IN NUMBER, 
 A_PADDINGSTRING   IN VARCHAR2) 
RETURN VARCHAR2 IS
   L_TEMP VARCHAR2(2000);
BEGIN
   IF (LENGTH(A_PADDINGSTRING) < 1) THEN
      RETURN(A_INPUTSTRING);  
   END IF;
   L_TEMP := A_INPUTSTRING;
   WHILE (LENGTH(L_TEMP) < A_SIZE) LOOP
      L_TEMP := A_PADDINGSTRING || L_TEMP;
   END LOOP;
   RETURN(L_TEMP);
END CX_LPAD;

PROCEDURE SETPPKEYSCONTEXT IS

L_LAST_PP_KEY_SEQ       INTEGER;

CURSOR L_UTKEYPP_CURSOR IS
   SELECT *
   FROM UTKEYPP
   ORDER BY SEQ;

BEGIN

   
   
   
   IF UNAPIGEN.P_PP_KEY_NR_OF_ROWS IS NULL THEN
      UNAPIGEN.P_PP_KEY4PRODUCT := 0;
      UNAPIGEN.P_PP_KEY4CUSTOMER := 0;
      UNAPIGEN.P_PP_KEY4SUPPLIER := 0;
      UNAPIGEN.P_PP_KEY_NR_OF_ROWS := 0;
      L_LAST_PP_KEY_SEQ := 0;
      FOR L_UTKEYPP_REC IN L_UTKEYPP_CURSOR LOOP
         IF L_UTKEYPP_REC.KEY_TP = 'st' THEN
            IF L_UTKEYPP_REC.KEY_NAME = 'st' THEN
               UNAPIGEN.P_PP_KEY4PRODUCT := L_UTKEYPP_REC.SEQ;
            ELSE
               RAISE_APPLICATION_ERROR(-20000, '"st" is the only key_name supported when key_tp="st"');
            END IF;
         ELSIF L_UTKEYPP_REC.KEY_TP IN ('gk', 'supplier', 'customer') THEN
            IF NVL(SUBSTR(L_UTKEYPP_REC.KEY_NAME, 1, 3), ' ') <> 'gk.' THEN
               RAISE_APPLICATION_ERROR(-20000, 'key_name must start with gk. when key_tp = "gk", "supplier" or "customer"');
            END IF;
            IF L_UTKEYPP_REC.KEY_TP = 'customer' THEN
               UNAPIGEN.P_PP_KEY4CUSTOMER := L_UTKEYPP_REC.SEQ;
            END IF;
            IF L_UTKEYPP_REC.KEY_TP = 'supplier' THEN
               UNAPIGEN.P_PP_KEY4SUPPLIER := L_UTKEYPP_REC.SEQ;
            END IF;         
         ELSE
            RAISE_APPLICATION_ERROR(-20000, 'key_tp supported are "st", "gk", "supplier" and "customer"');
         END IF;
         IF L_UTKEYPP_REC.SEQ <1 OR L_UTKEYPP_REC.SEQ>5 THEN
            RAISE_APPLICATION_ERROR(-20000, 'utkeypp.seq supported values are: 1, 2, 3, 4 or 5');
         END IF;
         IF L_UTKEYPP_REC.SEQ <> L_LAST_PP_KEY_SEQ+1 THEN
            RAISE_APPLICATION_ERROR(-20000, 'No gaps allowed in utkeypp.seq: must start with 1, followed by 2, followed by 3, followed by 4, followed by 5');
         END IF;
         L_LAST_PP_KEY_SEQ := L_UTKEYPP_REC.SEQ;
         UNAPIGEN.P_PP_KEY_NR_OF_ROWS := UNAPIGEN.P_PP_KEY_NR_OF_ROWS + 1;
         UNAPIGEN.P_PP_KEY_TP_TAB(L_UTKEYPP_REC.SEQ) := L_UTKEYPP_REC.KEY_TP;
         UNAPIGEN.P_PP_KEY_NAME_TAB(L_UTKEYPP_REC.SEQ) := L_UTKEYPP_REC.KEY_NAME;
      END LOOP;         
   END IF;   
END SETPPKEYSCONTEXT;

FUNCTION GETMAXSAMPLES
(A_MAX_NUMBER_OF_SAMPLES     OUT  NUMBER)
RETURN NUMBER IS
BEGIN
   A_MAX_NUMBER_OF_SAMPLES := P_MAX_SAMPLES;
   RETURN(UNAPIGEN.DBERR_SUCCESS);
END GETMAXSAMPLES;


FUNCTION CHANGESESSIONTIMEZONE                       
(A_TIMEZONE        IN VARCHAR2)                
RETURN NUMBER IS
BEGIN
 RETURN (UNDATEFMT.CONVERTTIMEZONE(A_TIMEZONE));
END CHANGESESSIONTIMEZONE;

PROCEDURE WHERECLAUSESTRINGBUILDER
                        ( A_BASE_TABLE          IN VARCHAR2,
                          A_INDEX               IN INTEGER,
                          A_COL_TP              IN VARCHAR2,    
                          A_COL_ID              IN VARCHAR2,
                          A_COL_VALUE           IN VARCHAR2,
                          A_COL_OPERATOR        IN VARCHAR2,
                          A_COL_ANDOR           IN VARCHAR2,
                          A_ANYOR_PRESENT       IN BOOLEAN,
                          A_JOINTABLE_PREFIX    IN VARCHAR2,
                          A_JOINCOLUMN1         IN VARCHAR2,
                          A_JOINCOLUMN2         IN VARCHAR2,
                          A_PREV_COL_TP         IN OUT VARCHAR2,
                          A_PREV_COL_ID         IN OUT VARCHAR2,
                          A_PREV_COL_INDEX      IN OUT VARCHAR2,                                
                          A_NEXTTABLE_TOJOIN    IN OUT VARCHAR2,
                          A_FROM_CLAUSE         IN OUT VARCHAR2,
                          A_WHERE_CLAUSE4JOIN   IN OUT VARCHAR2,
                          A_WHERE_CLAUSE        IN OUT VARCHAR2,
                          A_BASETABLE4GK_ALIAS  IN VARCHAR2 DEFAULT NULL, 
                          A_SQL_VAL_TAB         IN OUT VC40_NESTEDTABLE_TYPE)
                          
AS
L_INDEX_TO_USE                INTEGER;
L_DO_NOT_JOIN                 BOOLEAN;
L_OUTER_JOIN                  VARCHAR2(3);

L_JOINCOLUMN2_PREFIX      VARCHAR2(20);
BEGIN
   
   
   L_DO_NOT_JOIN := FALSE;
   
   
   


   IF A_COL_TP=A_PREV_COL_TP AND A_COL_ID=A_PREV_COL_ID THEN
      
      L_INDEX_TO_USE := A_PREV_COL_INDEX;
      
      IF (SUBSTR(A_WHERE_CLAUSE, -6) = ') AND ') THEN
         A_WHERE_CLAUSE := REGEXP_REPLACE(A_WHERE_CLAUSE, '\) AND $', ' AND ');
      END IF;
      IF (SUBSTR(A_WHERE_CLAUSE, -5) = ') OR ') THEN
         A_WHERE_CLAUSE := REGEXP_REPLACE(A_WHERE_CLAUSE, '\) OR $', ' OR ');
      END IF;
      
      L_DO_NOT_JOIN := TRUE;
      
   ELSE
      IF A_JOINTABLE_PREFIX IS NOT NULL THEN
         A_FROM_CLAUSE := A_FROM_CLAUSE || ', ' || A_JOINTABLE_PREFIX || A_COL_ID || ' t' || A_INDEX;
         L_INDEX_TO_USE := A_INDEX;
         A_PREV_COL_INDEX := A_INDEX;
      END IF;
   END IF;

   
   
   
   
   
   
   L_OUTER_JOIN := '';
   IF A_ANYOR_PRESENT THEN
      IF A_BASETABLE4GK_ALIAS IS NULL THEN
         A_NEXTTABLE_TOJOIN := 'a';
      ELSE
         A_NEXTTABLE_TOJOIN := A_BASETABLE4GK_ALIAS;
      END IF;
      L_OUTER_JOIN := '(+)';
   END IF;
   IF NOT L_DO_NOT_JOIN THEN
      IF A_JOINCOLUMN1 IS NOT NULL THEN


         IF A_JOINCOLUMN1 = 'me' THEN
            A_WHERE_CLAUSE4JOIN := A_WHERE_CLAUSE4JOIN ||
                                   't'||L_INDEX_TO_USE||'.sc'||L_OUTER_JOIN ||' = '|| A_NEXTTABLE_TOJOIN ||'.sc AND '||
                                   't'||L_INDEX_TO_USE||'.pg'||L_OUTER_JOIN ||' = '|| A_NEXTTABLE_TOJOIN ||'.pg AND '||
                                   't'||L_INDEX_TO_USE||'.pgnode'||L_OUTER_JOIN ||' = '|| A_NEXTTABLE_TOJOIN ||'.pgnode AND '||
                                   't'||L_INDEX_TO_USE||'.pa'||L_OUTER_JOIN ||' = '|| A_NEXTTABLE_TOJOIN ||'.pa AND '||
                                   't'||L_INDEX_TO_USE||'.panode'||L_OUTER_JOIN ||' = '|| A_NEXTTABLE_TOJOIN ||'.panode AND '||
                                   't'||L_INDEX_TO_USE||'.me'||L_OUTER_JOIN ||' = '|| A_NEXTTABLE_TOJOIN ||'.me AND '||
                                   't'||L_INDEX_TO_USE||'.menode'||L_OUTER_JOIN ||' = '|| A_NEXTTABLE_TOJOIN ||'.menode AND ';                                         
         ELSE
            A_WHERE_CLAUSE4JOIN := A_WHERE_CLAUSE4JOIN ||
                                   't' || L_INDEX_TO_USE || '.'||A_JOINCOLUMN1 || L_OUTER_JOIN ||
                                   ' = '|| A_NEXTTABLE_TOJOIN ||'.'||A_JOINCOLUMN1||' AND ';
         END IF;
      END IF;
      IF A_JOINCOLUMN2 IS NOT NULL THEN
         IF A_NEXTTABLE_TOJOIN IN ('a', 'sc') THEN
            L_JOINCOLUMN2_PREFIX := NULL; 
            IF A_BASE_TABLE = 'utsc' THEN
               L_JOINCOLUMN2_PREFIX := 'st_';                     
            ELSIF A_BASE_TABLE = 'utrq' THEN
               L_JOINCOLUMN2_PREFIX := 'rt_';
            ELSIF A_BASE_TABLE = 'utsd' THEN
               L_JOINCOLUMN2_PREFIX := 'pt_';
            END IF;
            A_WHERE_CLAUSE4JOIN := A_WHERE_CLAUSE4JOIN ||
                                   't' || L_INDEX_TO_USE || '.'||A_JOINCOLUMN2|| L_OUTER_JOIN ||
                                   ' = '|| A_NEXTTABLE_TOJOIN ||'.'||L_JOINCOLUMN2_PREFIX||A_JOINCOLUMN2||' AND ';
         ELSE
            A_WHERE_CLAUSE4JOIN := A_WHERE_CLAUSE4JOIN ||
                                   't' || L_INDEX_TO_USE || '.'||A_JOINCOLUMN2|| L_OUTER_JOIN ||
                                   ' = '|| A_NEXTTABLE_TOJOIN ||'.'||A_JOINCOLUMN2||' AND ';
         END IF;
      END IF;
   END IF;
   
   IF A_JOINTABLE_PREFIX IS NOT NULL THEN
      IF A_COL_OPERATOR LIKE '\%' THEN
         
         



         A_WHERE_CLAUSE := A_WHERE_CLAUSE ||
                           SUBSTR(A_COL_OPERATOR,2)||
                           A_COL_VALUE || 
                           CASE SUBSTR(A_COL_VALUE,-1) WHEN ')' THEN ' ' END || 
                                                                                
                           ' ' || A_COL_ANDOR || ' '; 
      ELSE






         A_SQL_VAL_TAB.EXTEND;
         A_SQL_VAL_TAB(A_SQL_VAL_TAB.COUNT()) := A_COL_VALUE;
         A_WHERE_CLAUSE := A_WHERE_CLAUSE ||
                              't' || L_INDEX_TO_USE || '.' || A_COL_ID || ' ' || NVL(A_COL_OPERATOR,'=') || 
                              ' :col_val' ||A_SQL_VAL_TAB.COUNT()|| '  '|| A_COL_ANDOR || ' '; 
      END IF;
   ELSE
      IF A_COL_OPERATOR LIKE '\%' THEN
         
         



         A_WHERE_CLAUSE :=A_WHERE_CLAUSE ||
                          SUBSTR(A_COL_OPERATOR,2)||
                          A_COL_VALUE || 
                          CASE SUBSTR(A_COL_VALUE,-1) WHEN ')' THEN ' ' END || 
                                                                               
                          ' ' || A_COL_ANDOR || ' '; 
      ELSE






         A_SQL_VAL_TAB.EXTEND;
         A_SQL_VAL_TAB(A_SQL_VAL_TAB.COUNT()) := A_COL_VALUE;
         A_WHERE_CLAUSE := A_WHERE_CLAUSE ||
                              A_NEXTTABLE_TOJOIN || '.' || A_COL_ID || ' ' || NVL(A_COL_OPERATOR,'=') || 
                              ' :col_val' ||A_SQL_VAL_TAB.COUNT()|| '  ' || A_COL_ANDOR || ' '; 
      END IF;
   END IF;
   
   
   
   
   
   IF A_JOINTABLE_PREFIX IS NOT NULL THEN             
      A_NEXTTABLE_TOJOIN := 't' || L_INDEX_TO_USE;
   END IF;
   A_PREV_COL_TP := A_COL_TP;
   A_PREV_COL_ID := A_COL_ID;
END WHERECLAUSESTRINGBUILDER;                                                                                                             


PROCEDURE SENDMAILTASKGKTODBA         
(A_OBJECT_TP        IN     VARCHAR2,     
 A_OBJECT_ID        IN     VARCHAR2,     
 A_OBJECT_VERSION   IN     VARCHAR2,     
 A_COMMAND          IN     VARCHAR2)     

IS

   L_RECIPIENT           VARCHAR2(255);
   L_SUBJECT             VARCHAR2(255);
   L_TEXT_TAB            UNAPIGEN.VC255_TABLE_TYPE;
   L_NR_OF_ROWS          NUMBER;
   L_USER_DESC           VARCHAR2(40);
   L_DB                  VARCHAR2(40);

BEGIN

   L_SQLERRM := NULL;
   
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <> UNAPIGEN.DBERR_SUCCESS THEN
      L_SQLERRM := 'BeginTxn failed';
      RAISE STPERROR;
   END IF;
   
   
   
   OPEN C_SYSTEM ('DBA_EMAILADDRESS');
   FETCH C_SYSTEM INTO L_RECIPIENT;
   IF C_SYSTEM%NOTFOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SYSDEFAULTS;
      CLOSE C_SYSTEM;
      L_SQLERRM := 'System setting DBA_EMAILADDRESS is missing';
      RAISE STPERROR;
   END IF;
   CLOSE C_SYSTEM;

   
   L_USER_DESC := NVL(SQLUSERDESCRIPTION(UNAPIEV.P_EV_REC.USERNAME), P_USER_DESCRIPTION);
      
   BEGIN
      
      SELECT GLOBAL_NAME
      INTO L_DB
      FROM GLOBAL_NAME;

   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SYSDEFAULTS;
      L_SQLERRM := 'The following setting is missing: global_name.global_name';
      RAISE STPERROR;
   END;
   
   
   L_SUBJECT := 'Manual Remove/Add of group key Constraint for "unique across objects" is required';
   L_TEXT_TAB(1)  := INITCAP(UNAPIGEN.GETOBJTPDESCRIPTION(LOWER(A_OBJECT_TP))) || ' Group Key';
   L_TEXT_TAB(2)  := '   id      = '||A_OBJECT_ID;
   L_TEXT_TAB(3)  := '   version = '||A_OBJECT_VERSION;
   L_TEXT_TAB(4)  := '';
   L_TEXT_TAB(5)  := 'General';
   L_TEXT_TAB(6)  := '   user        = '||L_USER_DESC;
   L_TEXT_TAB(7)  := '   application = '||UNAPIGEN.P_APPLIC_NAME;
   L_TEXT_TAB(8)  := '   database    = '||L_DB;
   L_TEXT_TAB(9)  := '';
   L_TEXT_TAB(10) := '';
   L_TEXT_TAB(11) := 'A modification has been performed on that "Group Key". ' ;
   L_TEXT_TAB(12) := 'The property "unique value across object" was set or reset, you will have to execute the following';
   L_TEXT_TAB(13) := 'statement into the DB: ' || A_COMMAND ;
   L_TEXT_TAB(14) := '';
   L_TEXT_TAB(15) := 'See also in the UTERRROR table for details.';
   L_TEXT_TAB(16) := '';
   L_TEXT_TAB(17) := '__________________________________________________________';
   L_TEXT_TAB(18) := 'Please do not reply to this mail, as it has been generated';
   L_TEXT_TAB(19) := 'automatically by the LIMS.';
   L_NR_OF_ROWS := 19;
   L_RET_CODE := UNAPIGEN.SENDMAIL(L_RECIPIENT, L_SUBJECT, L_TEXT_TAB, L_NR_OF_ROWS);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      L_SQLERRM := 'No mail has been sent at DBA.';
      RAISE STPERROR;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      L_SQLERRM := 'EndTxn failed';                                    
      RAISE STPERROR;
   END IF;

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      L_SQLERRM := SQLERRM;
   END IF;
   UNAPIGEN.U4ROLLBACK;
   IF L_SQLERRM IS NOT NULL THEN
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
             'SendMailTaskGKToDBA', L_SQLERRM);   
      UNAPIGEN.U4COMMIT;
   END IF;
   IF C_SYSTEM%ISOPEN THEN
      CLOSE C_SYSTEM;
   END IF;
   L_RET_CODE := UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SendMailTaskGKToDBA');
END SENDMAILTASKGKTODBA;


FUNCTION GETVALUEUNIQUEGK          
(A_OBJECT_TP        IN     VARCHAR2,     
 A_OBJECT_ID        IN     VARCHAR2,     
 A_OBJECT_VERSION   IN     VARCHAR2)     
RETURN CHAR
IS
   
   L_C_VALUE               SYS_REFCURSOR;
   
   L_ACTUAL_VALUE_UNIQUE   CHAR(1);

   L_TABLE_NAME            VARCHAR2(100) ;  

BEGIN

   L_TABLE_NAME   := 'UTGK' || A_OBJECT_TP;  

   
   OPEN L_C_VALUE FOR  'SELECT value_unique FROM ' || L_TABLE_NAME || ' WHERE gk = ''' || A_OBJECT_ID  || ''' AND VERSION =''' || A_OBJECT_VERSION || ''' ';
   FETCH L_C_VALUE  INTO L_ACTUAL_VALUE_UNIQUE;
   IF L_C_VALUE%NOTFOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SYSDEFAULTS;
      CLOSE L_C_VALUE ;
      
      RETURN('0');
   END IF;

   CLOSE L_C_VALUE;

   RETURN(NVL(L_ACTUAL_VALUE_UNIQUE,'0'));
   
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      LOGERROR('getValueUniqueGK', SQLERRM);
   END IF;
   RETURN('0');
END GETVALUEUNIQUEGK;

PROCEDURE LOGMESSAGETASKGKTODBA       
(A_OBJECT_TP        IN     VARCHAR2,     
 A_OBJECT_ID        IN     VARCHAR2,     
 A_OBJECT_VERSION   IN     VARCHAR2,      
 A_COMMAND          OUT    VARCHAR2)     
IS 
   L_COMMAND_DROP_CONSTRAINT     VARCHAR2(2000);

   L_COMMAND_ADD_CONSTRAINT      VARCHAR2(2000);

   L_COMMAND    VARCHAR2(2000);

   L_ACTUAL_VALUE_UNIQUE   CHAR(1):= GETVALUEUNIQUEGK(A_OBJECT_TP, A_OBJECT_ID, A_OBJECT_VERSION );

   L_TABLE_NAME       VARCHAR2(100) := 'UT' || A_OBJECT_TP || 'GK' || A_OBJECT_ID;  
   L_CONSTRAINT_NAME  VARCHAR2(100) := 'UC' || A_OBJECT_TP || 'GK' || A_OBJECT_ID;

BEGIN

   
   
   
   L_COMMAND_DROP_CONSTRAINT  := UPPER('ALTER TABLE ' ||  L_TABLE_NAME || ' DROP CONSTRAINT ' || L_CONSTRAINT_NAME || ';');     

   L_COMMAND_ADD_CONSTRAINT   := UPPER('ALTER TABLE ' ||  L_TABLE_NAME || ' ADD CONSTRAINT ' || L_CONSTRAINT_NAME || ' UNIQUE  (' || A_OBJECT_ID ||');');


   IF (1 = L_ACTUAL_VALUE_UNIQUE)   
   THEN
      L_COMMAND:= L_COMMAND_ADD_CONSTRAINT;
   ELSE
      L_COMMAND:= L_COMMAND_DROP_CONSTRAINT;
   END IF;
   
   A_COMMAND := L_COMMAND;
   
   LOGERROR('LogMessageToDBA', L_COMMAND);
      
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      LOGERROR('LogMessageTaskGKToDBA', SQLERRM);
   END IF;
END LOGMESSAGETASKGKTODBA;



FUNCTION CONSTRAINTEXIST        
(A_OBJECT_TP        IN     VARCHAR2,     
 A_OBJECT_ID        IN     VARCHAR2)     
RETURN BOOLEAN
IS
   
   L_C_VALUE            SYS_REFCURSOR;
   
   L_UNIQUE_INDEX       BOOLEAN := FALSE;

   L_CONSTRAINT_NAME    VARCHAR2(100):='';

BEGIN

   
   
      
   OPEN L_C_VALUE FOR  'SELECT TRIM(constraint_name) FROM sys.all_constraints  WHERE OWNER = ''UNILAB'' AND CONSTRAINT_NAME = ''UC' || UPPER(A_OBJECT_TP) || 'GK' || UPPER(A_OBJECT_ID) || '''' || ' AND TABLE_NAME = ''UT' || UPPER(A_OBJECT_TP) || 'GK' || UPPER(A_OBJECT_ID) || ''' ' ;
    
   FETCH L_C_VALUE  INTO L_CONSTRAINT_NAME;
   
   IF L_C_VALUE%NOTFOUND THEN
     CLOSE L_C_VALUE ;
     
     L_UNIQUE_INDEX := FALSE; 
     RETURN(FALSE);
   END IF;

   
   
   IF NVL(L_CONSTRAINT_NAME,'') = TRIM(UPPER('UC' || A_OBJECT_TP || 'GK' || A_OBJECT_ID))
   THEN
      L_UNIQUE_INDEX := TRUE; 
   END IF;
    

   CLOSE L_C_VALUE;

   RETURN(L_UNIQUE_INDEX  );
   
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      LOGERROR('ConstraintExist', SQLERRM);
   END IF;
   RETURN(L_UNIQUE_INDEX );
END CONSTRAINTEXIST;

PROCEDURE NOTIFYTASKGKTODBA
(
 A_OBJECT_TP        IN     VARCHAR2,     
 A_OBJECT_ID        IN     VARCHAR2,     
 A_OBJECT_VERSION   IN     VARCHAR2,     
 A_VALUE_UNIQUE     IN     CHAR)        
IS

   L_RECIPIENT           VARCHAR2(255);
   L_SUBJECT             VARCHAR2(255);
   L_TEXT_TAB            UNAPIGEN.VC255_TABLE_TYPE;
   L_NR_OF_ROWS          NUMBER;
   L_USER_DESC           VARCHAR2(40);
   L_DB                  VARCHAR2(40);
   L_COMMANDDBA          VARCHAR2(1000);
   
   L_VALUE_UNIQUE        CHAR;
   L_CONSTRAINT_EXIST    BOOLEAN;   
BEGIN

   L_SQLERRM := NULL;
   
   
   L_CONSTRAINT_EXIST:= CONSTRAINTEXIST(A_OBJECT_TP, A_OBJECT_ID);
   
   L_VALUE_UNIQUE    := GETVALUEUNIQUEGK (A_OBJECT_TP, A_OBJECT_ID, A_OBJECT_VERSION ); 
   
   

   IF (( 1 = L_VALUE_UNIQUE) AND (FALSE = L_CONSTRAINT_EXIST))
      OR
      (( 0 = L_VALUE_UNIQUE) AND (TRUE = L_CONSTRAINT_EXIST))
   THEN
      LOGMESSAGETASKGKTODBA(A_OBJECT_TP, A_OBJECT_ID, A_OBJECT_VERSION, L_COMMANDDBA);

      SENDMAILTASKGKTODBA(A_OBJECT_TP, A_OBJECT_ID, A_OBJECT_VERSION, L_COMMANDDBA);
   END IF;











EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      L_SQLERRM := SQLERRM;
   END IF;
   IF L_SQLERRM IS NOT NULL THEN
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
             'NotifyTaskGKToDBA', L_SQLERRM);   
      UNAPIGEN.U4COMMIT;
   END IF;
   L_RET_CODE := UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'NotifyTaskGKToDBA');
   
END NOTIFYTASKGKTODBA;



FUNCTION  GETPRODUCTCOMPONENTVERSION
(
   A_PRODUCT   OUT VARCHAR2,
   A_VERSION   OUT VARCHAR2
) RETURN BOOLEAN
IS

   L_ENTERPRISEEDITION   BOOLEAN := FALSE;   
   

   
   
   
   CURSOR CUR_DB_VERSION IS
      SELECT PRODUCT, VERSION FROM SYS.PRODUCT_COMPONENT_VERSION WHERE UPPER(PRODUCT) LIKE UPPER('Oracle%');
      
BEGIN
   A_PRODUCT:= 'not found';
   A_VERSION:= 'not found';
   
   OPEN CUR_DB_VERSION;
   
   LOOP
      FETCH  CUR_DB_VERSION 
         INTO A_PRODUCT, A_VERSION;
      EXIT;
   END LOOP;
   
   CLOSE CUR_DB_VERSION;
   IF A_PRODUCT LIKE '%Enterprise%Edition%'
   THEN  
      L_ENTERPRISEEDITION := TRUE;
   END IF;
   
   RETURN L_ENTERPRISEEDITION; 
   
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      LOGERROR('LogMessageTaskGKToDBA', SQLERRM);
   END IF;
   
END GETPRODUCTCOMPONENTVERSION;

FUNCTION  GETPACKAGEVERSION
(
   A_OBJECT_NAME   IN VARCHAR2
) RETURN VARCHAR
IS
   L_VERSION   VARCHAR2 (20);
BEGIN
   EXECUTE IMMEDIATE 'SELECT ' || A_OBJECT_NAME || ' .GetVersion FROM DUAL' INTO L_VERSION;
   RETURN L_VERSION;

EXCEPTION
   WHEN OTHERS THEN
      RETURN 'Not Defined';
END GETPACKAGEVERSION;




BEGIN
   P_TXN_LEVEL := 0;
   P_TXN_ERROR   := DBERR_SUCCESS;
   PA_OBJECT_NR := 0;
   P_PP := '';
   P_INHERIT_FROM := '-1';
   P_VERSION  := NULL;
   P_LAST_LINE := 0;
   P_SAVELONGTEXT_CALLS := 0;
   P_REMOTE := 0;

   
   L_OBJECT_TYPES(1)  := 'rt';
   L_OBJECT_TYPES(2)  := 'st';
   L_OBJECT_TYPES(3)  := 'pp';
   L_OBJECT_TYPES(4)  := 'pr';
   L_OBJECT_TYPES(5)  := 'mt';
   L_OBJECT_TYPES(6)  := 'ip';
   L_OBJECT_TYPES(7)  := 'ie';
   L_OBJECT_TYPES(8)  := 'au';
   L_OBJECT_TYPES(9)  := 'wt';
   L_OBJECT_TYPES(10)  := 'cy';
   L_OBJECT_TYPES(11)  := 'pt';
   L_OBJECT_TYPES(12)  := 'fi';
   L_OBJECT_TYPES(13)  := 'dc';
   L_NR_OF_TYPES := 13;

   L_MAILSETTINGS_FETCHED := 0;
   L_CHECK_CODE := 123.456/SQRT(16);
END UNAPIGEN;
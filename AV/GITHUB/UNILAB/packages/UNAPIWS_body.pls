PACKAGE BODY unapiws AS

TYPE BOOLEAN_TABLE_TYPE IS TABLE OF BOOLEAN INDEX BY BINARY_INTEGER;

P_WSII_CURSOR                 INTEGER;
P_WSSC_CURSOR                 INTEGER;
P_WSME_CURSOR                 INTEGER;
P_WSME_REANALYSIS_FETCHED     BOOLEAN;
P_SELECTWS_CURSOR             INTEGER;
P_SELECTWSGK_CURSOR           INTEGER;
P_SELECTWSPROP_CURSOR         INTEGER;
P_SAVEWSSC_CALLS              INTEGER;
P_SAVEWSSC_TR_SEQ             INTEGER;  
P_SAVEWSME_CALLS              INTEGER;
P_SAVEWSME_TR_SEQ             INTEGER;  
P_SAVEWSII_CALLS              INTEGER;
P_SAVEWSII_TR_SEQ             INTEGER;  
P_PREV_MOD_FLAG               BOOLEAN;
P_CURR_MOD_FLAG               BOOLEAN;
P_WS_DETAILS_CHG              BOOLEAN;
P_WS_DETAILS_CHG_TR_SEQ       INTEGER;  
P_WSDETAILSUPDATED_EVINSERTED CHAR(1);
P_GETWSME_BIND_WS_SELECTION   BOOLEAN;
P_GETWSME_BIND_FIXED_WS_FLAG  BOOLEAN;

L_SQLERRM         VARCHAR2(255);
L_SQL_STRING      VARCHAR2(10000);
L_WHERE_CLAUSE    VARCHAR2(10000);
L_ORDER_BY_CLAUSE VARCHAR2(1000);
L_EVENT_TP        UTEV.EV_TP%TYPE;
L_RET_CODE        NUMBER;
L_RESULT          NUMBER;
L_FETCHED_ROWS    NUMBER;
L_EV_SEQ_NR       NUMBER;
L_EV_DETAILS      VARCHAR2(255);
STPERROR          EXCEPTION;

L_WS              VARCHAR2(20);
L_WS_CURSOR       INTEGER;

FUNCTION GETVERSION
   RETURN VARCHAR2
IS
BEGIN
   RETURN('06.07.00.00_00.13');
EXCEPTION
   WHEN OTHERS THEN
      RETURN (NULL);
END GETVERSION;

FUNCTION SAVEWORKSHEET
(A_WS                   IN     VARCHAR2,       
 A_WT                   IN     VARCHAR2,       
 A_WT_VERSION           IN     VARCHAR2,       
 A_DESCRIPTION          IN     VARCHAR2,       
 A_CREATION_DATE        IN     DATE,           
 A_CREATED_BY           IN     VARCHAR2,       
 A_EXEC_START_DATE      IN     DATE,           
 A_EXEC_END_DATE        IN     DATE,           
 A_PRIORITY             IN     NUMBER,         
 A_DUE_DATE             IN     DATE,           
 A_RESPONSIBLE          IN     VARCHAR2,       
 A_SC_COUNTER           IN     NUMBER,         
 A_MIN_ROWS             IN     NUMBER,         
 A_MAX_ROWS             IN     NUMBER,         
 A_COMPLETE             IN     CHAR,           
 A_VALID_CF             IN     VARCHAR2,       
 A_DESCR_DOC            IN     VARCHAR2,       
 A_DESCR_DOC_VERSION    IN     VARCHAR2,       
 A_DATE1                IN     DATE,           
 A_DATE2                IN     DATE,           
 A_DATE3                IN     DATE,           
 A_DATE4                IN     DATE,           
 A_DATE5                IN     DATE,           
 A_WS_CLASS             IN     VARCHAR2,       
 A_LOG_HS               IN     CHAR,           
 A_LOG_HS_DETAILS       IN     CHAR,           
 A_LC                   IN     VARCHAR2,       
 A_LC_VERSION           IN     VARCHAR2,       
 A_MODIFY_REASON        IN     VARCHAR2)       
RETURN NUMBER IS
  
L_LC                  VARCHAR2(2);
L_LC_VERSION          VARCHAR2(20);
L_SS                  VARCHAR2(2);
L_LOG_HS              CHAR(1);
L_LOG_HS_DETAILS      CHAR(1);
L_ALLOW_MODIFY        CHAR(1);
L_ACTIVE              CHAR(1);
L_INSERT              CHAR(1);
L_CURRENT_TIMESTAMP             TIMESTAMP WITH TIME ZONE;
L_REF_DATE            TIMESTAMP WITH TIME ZONE;
L_VALUE               UNAPIGEN.VC40_TABLE_TYPE;
L_HS_DETAILS_SEQ_NR   INTEGER;
L_GK_VERSION          VARCHAR2(20);
L_WT_VERSION          VARCHAR2(20);
 
CURSOR L_WSOLD_CURSOR (A_WS IN VARCHAR2) IS
   SELECT A.*
   FROM UDWS A
   WHERE A.WS = A_WS;
L_WSOLD_REC UDWS%ROWTYPE;
L_WSNEW_REC UDWS%ROWTYPE;

BEGIN
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
  
   IF NVL(A_WS, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_LOG_HS, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_LOGHS;
      RAISE STPERROR;
   END IF;

   IF NVL(A_SC_COUNTER, -1) = -1  THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SC_COUNTER;
      RAISE STPERROR;
   END IF;

   IF NVL(A_MIN_ROWS, -1) = -1 OR NVL(A_MIN_ROWS, -1) >  NVL(A_MAX_ROWS, -1)  THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_MIN_ROWS;
      RAISE STPERROR;
   END IF;

   IF NVL(A_MAX_ROWS, -1) = -1 OR NVL(A_MAX_ROWS, -1) < NVL(A_MIN_ROWS, -1) THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_MIN_ROWS;
      RAISE STPERROR;
   END IF;

   IF NVL(A_COMPLETE, ' ') NOT IN ('1', '0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_COMPLETE;
      RAISE STPERROR;
   END IF;

   IF NVL(A_WT_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_WTVERSION;
      RAISE STPERROR;
   END IF;

   L_CURRENT_TIMESTAMP := CURRENT_TIMESTAMP;
   L_WT_VERSION := A_WT_VERSION;
   L_RET_CODE := UNAPIAUT.GETWSAUTHORISATION(A_WS, L_WT_VERSION, L_LC, L_LC_VERSION, L_SS,
                                             L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS, L_LOG_HS_DETAILS);
   IF L_RET_CODE = UNAPIGEN.DBERR_NOOBJECT THEN
      L_INSERT := '1';
   ELSIF L_RET_CODE = UNAPIGEN.DBERR_SUCCESS THEN
      L_INSERT := '0';
   ELSE
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   IF L_INSERT = '1' THEN                
      IF NVL(A_LC, ' ') <> ' ' THEN
         L_LC := A_LC;
      END IF;
      IF NVL(A_LC_VERSION, ' ') <> ' ' THEN
         L_LC_VERSION := A_LC_VERSION;
      END IF;

      
      INSERT INTO UTWS(WS, WT, WT_VERSION, DESCRIPTION, PRIORITY, DUE_DATE, DUE_DATE_TZ, RESPONSIBLE,
                       SC_COUNTER, MIN_ROWS, MAX_ROWS, COMPLETE,
                       VALID_CF, DESCR_DOC, DESCR_DOC_VERSION, DATE1, DATE1_TZ, DATE2, DATE2_TZ, DATE3, DATE3_TZ, DATE4, DATE4_TZ,
                       DATE5, DATE5_TZ, WS_CLASS, LOG_HS, LOG_HS_DETAILS, ALLOW_MODIFY, ACTIVE, LC, LC_VERSION)
      VALUES(A_WS, A_WT, L_WT_VERSION, A_DESCRIPTION, A_PRIORITY, A_DUE_DATE, A_DUE_DATE, A_RESPONSIBLE,
             A_SC_COUNTER, A_MIN_ROWS, A_MAX_ROWS, A_COMPLETE,
             A_VALID_CF, A_DESCR_DOC, A_DESCR_DOC_VERSION, A_DATE1, A_DATE1, A_DATE2, A_DATE2, A_DATE3, A_DATE3, A_DATE4, A_DATE4,
             A_DATE5, A_DATE5, A_WS_CLASS, A_LOG_HS, A_LOG_HS_DETAILS, '#', '0', L_LC, L_LC_VERSION);
      UNAPIAUT.UPDATELCINAUTHORISATIONBUFFER('ws', A_WS, '', L_LC, L_LC_VERSION);             
      L_EVENT_TP := 'WorksheetCreated';
   ELSE                             
      
      
      
      OPEN L_WSOLD_CURSOR(A_WS);
      FETCH L_WSOLD_CURSOR
      INTO L_WSOLD_REC;
      CLOSE L_WSOLD_CURSOR;
      L_WSNEW_REC := L_WSOLD_REC;

      
      
      
      
      
      
      UPDATE UTWS
      SET DESCRIPTION      = A_DESCRIPTION,
          PRIORITY         = A_PRIORITY,       
          DUE_DATE         = A_DUE_DATE,       
          DUE_DATE_TZ      = DECODE(A_DUE_DATE, DUE_DATE_TZ, DUE_DATE_TZ, A_DUE_DATE) ,       
          RESPONSIBLE      = A_RESPONSIBLE,    
          SC_COUNTER       = A_SC_COUNTER,     
          MIN_ROWS         = A_MIN_ROWS,       
          MAX_ROWS         = A_MAX_ROWS,       
          COMPLETE         = A_COMPLETE,       
          VALID_CF         = A_VALID_CF,       
          DESCR_DOC        = A_DESCR_DOC,
          DESCR_DOC_VERSION= A_DESCR_DOC_VERSION,
          DATE1            = A_DATE1,          
          DATE1_TZ         =  DECODE(A_DATE1, DATE1_TZ, DATE1_TZ, A_DATE1),          
          DATE2            = A_DATE2,          
          DATE2_TZ         =  DECODE(A_DATE2, DATE2_TZ, DATE2_TZ, A_DATE2),          
          DATE3            = A_DATE3,          
          DATE3_TZ         =  DECODE(A_DATE3, DATE2_TZ, DATE2_TZ, A_DATE3),          
          DATE4            = A_DATE4,          
          DATE4_TZ         =  DECODE(A_DATE4, DATE4_TZ, DATE4_TZ, A_DATE4),          
          DATE5            = A_DATE5,          
          DATE5_TZ         =  DECODE(A_DATE5, DATE5_TZ, DATE5_TZ, A_DATE5),          
          WS_CLASS         = A_WS_CLASS,       
          LOG_HS           = A_LOG_HS,
          LOG_HS_DETAILS   = A_LOG_HS_DETAILS,
          ALLOW_MODIFY     = '#'
      WHERE WS = A_WS
      RETURNING DESCRIPTION, PRIORITY, DUE_DATE, DUE_DATE_TZ, RESPONSIBLE, SC_COUNTER, MIN_ROWS, MAX_ROWS, 
                COMPLETE, VALID_CF, DESCR_DOC, DESCR_DOC_VERSION, DATE1, DATE1_TZ, DATE2, DATE2_TZ, DATE3, DATE3_TZ,
      DATE4, DATE4_TZ, DATE5, DATE5_TZ, WS_CLASS, LOG_HS, LOG_HS_DETAILS, ALLOW_MODIFY
      INTO L_WSNEW_REC.DESCRIPTION, L_WSNEW_REC.PRIORITY, L_WSNEW_REC.DUE_DATE, L_WSNEW_REC.DUE_DATE_TZ, 
           L_WSNEW_REC.RESPONSIBLE, L_WSNEW_REC.SC_COUNTER, L_WSNEW_REC.MIN_ROWS, 
           L_WSNEW_REC.MAX_ROWS, L_WSNEW_REC.COMPLETE, L_WSNEW_REC.VALID_CF, 
           L_WSNEW_REC.DESCR_DOC, L_WSNEW_REC.DESCR_DOC_VERSION, L_WSNEW_REC.DATE1, L_WSNEW_REC.DATE1_TZ, 
           L_WSNEW_REC.DATE2, L_WSNEW_REC.DATE2_TZ, L_WSNEW_REC.DATE3, L_WSNEW_REC.DATE3_TZ, 
      L_WSNEW_REC.DATE4, L_WSNEW_REC.DATE4_TZ, L_WSNEW_REC.DATE5, L_WSNEW_REC.DATE5_TZ, 
           L_WSNEW_REC.WS_CLASS, L_WSNEW_REC.LOG_HS, L_WSNEW_REC.LOG_HS_DETAILS, 
           L_WSNEW_REC.ALLOW_MODIFY;
      L_EVENT_TP := 'WorksheetUpdated';
   END IF;

   
   
   

   IF A_COMPLETE = '1' THEN 
      L_VALUE(1) := NULL; 
      
      L_RET_CODE := UNAPIWSP.SAVE1WSGROUPKEY(A_WS, 'opensheets', L_GK_VERSION, L_VALUE, 
                                             1, A_MODIFY_REASON);
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SUCCESS;
      END IF;
   ELSE 
      L_VALUE(1) := A_WS; 
      
      L_RET_CODE := UNAPIWSP.SAVE1WSGROUPKEY(A_WS, 'opensheets', L_GK_VERSION, L_VALUE, 
                                             1, A_MODIFY_REASON);
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SUCCESS;
      END IF;
   END IF;      

   L_EV_SEQ_NR := -1;
   L_EV_DETAILS := 'wt_version=' || L_WT_VERSION;
   L_RESULT := UNAPIEV.INSERTEVENT('SaveWorksheet', UNAPIGEN.P_EVMGR_NAME, 'ws', A_WS, L_LC, 
                                   L_LC_VERSION, L_SS, L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   
   
   
   IF NVL(L_LOG_HS, ' ') <> A_LOG_HS THEN
      IF A_LOG_HS = '1' THEN
         INSERT INTO UTWSHS(WS, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE,  LOGDATE_TZ,
                            WHY, TR_SEQ, EV_SEQ)
         VALUES(A_WS, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 'History switched ON', 
                'Audit trail is turned on.', L_CURRENT_TIMESTAMP, L_CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      ELSE
         INSERT INTO UTWSHS(WS, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE,  LOGDATE_TZ,
                            WHY, TR_SEQ, EV_SEQ)
         VALUES(A_WS, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 'History switched OFF', 
                'Audit trail is turned off.', L_CURRENT_TIMESTAMP, L_CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   END IF;

   
   
   
   L_HS_DETAILS_SEQ_NR := 0;
   IF NVL(L_LOG_HS_DETAILS, ' ') <> A_LOG_HS_DETAILS THEN
      IF A_LOG_HS_DETAILS = '1' THEN
         L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
         INSERT INTO UTWSHSDETAILS(WS, TR_SEQ, EV_SEQ, SEQ, DETAILS)
         VALUES(A_WS, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR, 
                'Audit trail is turned on.');
      ELSE
         L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
         INSERT INTO UTWSHSDETAILS(WS, TR_SEQ, EV_SEQ, SEQ, DETAILS)
         VALUES(A_WS, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR, 
                'Audit trail is turned off.');
      END IF;
   END IF;

   IF NVL(L_LOG_HS, ' ') = '1' THEN
      IF L_EVENT_TP = 'WorksheetCreated' THEN
         INSERT INTO UTWSHS(WS, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE,  LOGDATE_TZ,
                            WHY, TR_SEQ, EV_SEQ)
         VALUES(A_WS, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                'worksheet "'||A_WS||'" is created.', 
                L_CURRENT_TIMESTAMP, L_CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      ELSE
         INSERT INTO UTWSHS(WS, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, 
                            WHY, TR_SEQ, EV_SEQ)
         VALUES(A_WS, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                'worksheet "'||A_WS||'" is updated.', 
                L_CURRENT_TIMESTAMP, L_CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   END IF;

   IF NVL(L_LOG_HS_DETAILS, ' ') = '1' THEN
      IF L_EVENT_TP = 'WorksheetCreated' THEN
         L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
         INSERT INTO UTWSHSDETAILS(WS, TR_SEQ, EV_SEQ, SEQ, DETAILS)
         VALUES(A_WS, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR, 
                'worksheet "'||A_WS||'" is created.');
      ELSE
         L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
         INSERT INTO UTWSHSDETAILS(WS, TR_SEQ, EV_SEQ, SEQ, DETAILS)
         VALUES(A_WS, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR, 
                'worksheet "'||A_WS||'" is updated.');
         UNAPIHSDETAILS.ADDWSHSDETAILS(L_WSOLD_REC, L_WSNEW_REC, UNAPIGEN.P_TR_SEQ, 
                                       L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR); 
      END IF;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);
  
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveWorksheet', SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('SaveWorksheet', L_SQLERRM);   
   END IF;
   IF L_WSOLD_CURSOR%ISOPEN THEN
      CLOSE L_WSOLD_CURSOR;
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveWorksheet'));
END SAVEWORKSHEET;

FUNCTION GETWORKSHEET
(A_WS                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_WT                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_WT_VERSION           OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_DESCRIPTION          OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_CREATION_DATE        OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_CREATED_BY           OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_EXEC_START_DATE      OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_EXEC_END_DATE        OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_PRIORITY             OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_DUE_DATE             OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_RESPONSIBLE          OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SC_COUNTER           OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_MIN_ROWS             OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_MAX_ROWS             OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_COMPLETE             OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_VALID_CF             OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_DESCR_DOC            OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_DESCR_DOC_VERSION    OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_DATE1                OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_DATE2                OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_DATE3                OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_DATE4                OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_DATE5                OUT     UNAPIGEN.DATE_TABLE_TYPE,  

 A_WS_CLASS             OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_LOG_HS               OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LOG_HS_DETAILS       OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ALLOW_MODIFY         OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_AR                   OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ACTIVE               OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LC                   OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_LC_VERSION           OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SS                   OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_NR_OF_ROWS           IN OUT  NUMBER,                    
 A_WHERE_CLAUSE         IN      VARCHAR2)                  
RETURN NUMBER IS

L_WS                VARCHAR2(20);
L_WT                VARCHAR2(20);
L_WT_VERSION        VARCHAR2(20);
L_DESCRIPTION       VARCHAR2(40);
L_CREATION_DATE     TIMESTAMP WITH TIME ZONE;
L_CREATED_BY        VARCHAR2(20);
L_EXEC_START_DATE   TIMESTAMP WITH TIME ZONE;
L_EXEC_END_DATE     TIMESTAMP WITH TIME ZONE;
L_PRIORITY          NUMBER(3);
L_DUE_DATE          TIMESTAMP WITH TIME ZONE;
L_RESPONSIBLE       VARCHAR2(20);
L_SC_COUNTER        NUMBER(4);
L_MIN_ROWS          NUMBER(4);
L_MAX_ROWS          NUMBER(4);
L_COMPLETE          CHAR(1);
L_VALID_CF          VARCHAR2(20);
L_DESCR_DOC         VARCHAR2(40);
L_DESCR_DOC_VERSION VARCHAR2(20);
L_DATE1             TIMESTAMP WITH TIME ZONE;
L_DATE2             TIMESTAMP WITH TIME ZONE;
L_DATE3             TIMESTAMP WITH TIME ZONE;
L_DATE4             TIMESTAMP WITH TIME ZONE;
L_DATE5             TIMESTAMP WITH TIME ZONE;

L_WS_CLASS          VARCHAR2(2);
L_LOG_HS            CHAR(1);
L_LOG_HS_DETAILS    CHAR(1);
L_ALLOW_MODIFY      CHAR(1);
L_AR                CHAR(1);
L_ACTIVE            CHAR(1);
L_LC                VARCHAR2(2);
L_LC_VERSION        VARCHAR2(20);
L_SS                VARCHAR2(2);

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      RETURN(UNAPIGEN.DBERR_WHERECLAUSE);
   ELSIF
      UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_WHERE_CLAUSE := 'WHERE ws = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                        ''' ORDER BY ws';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;
   
   L_WS_CURSOR := DBMS_SQL.OPEN_CURSOR;
   L_SQL_STRING := 'SELECT ws, wt, wt_version, description, creation_date, created_by, ' ||
                   'exec_start_date, exec_end_date, priority, due_date, responsible, sc_counter, ' ||
                   'min_rows, max_rows, complete, valid_cf, descr_doc, descr_doc_version, ' ||
                   'date1, date2, date3, date4, date5, last_comment, ws_class, log_hs, ' || 
                   'log_hs_details, allow_modify, active, lc, lc_version, ss, ar ' ||
                   'FROM dd' || UNAPIGEN.P_DD || '.uvws ' || L_WHERE_CLAUSE;

   DBMS_SQL.PARSE(L_WS_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
   DBMS_SQL.DEFINE_COLUMN(L_WS_CURSOR, 1, L_WS, 20);
   DBMS_SQL.DEFINE_COLUMN(L_WS_CURSOR, 2, L_WT, 20);
   DBMS_SQL.DEFINE_COLUMN(L_WS_CURSOR, 3, L_WT_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN(L_WS_CURSOR, 4, L_DESCRIPTION, 40);
   DBMS_SQL.DEFINE_COLUMN(L_WS_CURSOR, 5, L_CREATION_DATE);
   DBMS_SQL.DEFINE_COLUMN(L_WS_CURSOR, 6, L_CREATED_BY, 20);
   DBMS_SQL.DEFINE_COLUMN(L_WS_CURSOR, 7, L_EXEC_START_DATE);
   DBMS_SQL.DEFINE_COLUMN(L_WS_CURSOR, 8, L_EXEC_END_DATE);
   DBMS_SQL.DEFINE_COLUMN(L_WS_CURSOR, 9, L_PRIORITY);
   DBMS_SQL.DEFINE_COLUMN(L_WS_CURSOR, 10, L_DUE_DATE);
   DBMS_SQL.DEFINE_COLUMN(L_WS_CURSOR, 11, L_RESPONSIBLE, 20);
   DBMS_SQL.DEFINE_COLUMN(L_WS_CURSOR, 12, L_SC_COUNTER);
   DBMS_SQL.DEFINE_COLUMN(L_WS_CURSOR, 13, L_MIN_ROWS);
   DBMS_SQL.DEFINE_COLUMN(L_WS_CURSOR, 14, L_MAX_ROWS);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_WS_CURSOR, 15, L_COMPLETE, 1);
   DBMS_SQL.DEFINE_COLUMN(L_WS_CURSOR, 16, L_VALID_CF, 20);
   DBMS_SQL.DEFINE_COLUMN(L_WS_CURSOR, 17, L_DESCR_DOC, 40);
   DBMS_SQL.DEFINE_COLUMN(L_WS_CURSOR, 18, L_DESCR_DOC_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN(L_WS_CURSOR, 19, L_DATE1);
   DBMS_SQL.DEFINE_COLUMN(L_WS_CURSOR, 20, L_DATE2);
   DBMS_SQL.DEFINE_COLUMN(L_WS_CURSOR, 21, L_DATE3);
   DBMS_SQL.DEFINE_COLUMN(L_WS_CURSOR, 22, L_DATE4);
   DBMS_SQL.DEFINE_COLUMN(L_WS_CURSOR, 23, L_DATE5);
 
   DBMS_SQL.DEFINE_COLUMN(L_WS_CURSOR, 25, L_WS_CLASS, 2);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_WS_CURSOR, 26, L_LOG_HS, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_WS_CURSOR, 27, L_LOG_HS_DETAILS, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_WS_CURSOR, 28, L_ALLOW_MODIFY, 1);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_WS_CURSOR, 29, L_ACTIVE, 1);
   DBMS_SQL.DEFINE_COLUMN(L_WS_CURSOR, 30, L_LC, 2);
   DBMS_SQL.DEFINE_COLUMN(L_WS_CURSOR, 31, L_LC_VERSION, 20);
   DBMS_SQL.DEFINE_COLUMN(L_WS_CURSOR, 32, L_SS, 2);
   DBMS_SQL.DEFINE_COLUMN_CHAR(L_WS_CURSOR, 33, L_AR, 1);
   L_RESULT := DBMS_SQL.EXECUTE_AND_FETCH(L_WS_CURSOR);
      
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;
      
      DBMS_SQL.COLUMN_VALUE(L_WS_CURSOR, 1, L_WS);
      DBMS_SQL.COLUMN_VALUE(L_WS_CURSOR, 2, L_WT);
      DBMS_SQL.COLUMN_VALUE(L_WS_CURSOR, 3, L_WT_VERSION);
      DBMS_SQL.COLUMN_VALUE(L_WS_CURSOR, 4, L_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE(L_WS_CURSOR, 5, L_CREATION_DATE);
      DBMS_SQL.COLUMN_VALUE(L_WS_CURSOR, 6, L_CREATED_BY);
      DBMS_SQL.COLUMN_VALUE(L_WS_CURSOR, 7, L_EXEC_START_DATE);
      DBMS_SQL.COLUMN_VALUE(L_WS_CURSOR, 8, L_EXEC_END_DATE);
      DBMS_SQL.COLUMN_VALUE(L_WS_CURSOR, 9, L_PRIORITY);
      DBMS_SQL.COLUMN_VALUE(L_WS_CURSOR, 10, L_DUE_DATE);
      DBMS_SQL.COLUMN_VALUE(L_WS_CURSOR, 11, L_RESPONSIBLE);
      DBMS_SQL.COLUMN_VALUE(L_WS_CURSOR, 12, L_SC_COUNTER);
      DBMS_SQL.COLUMN_VALUE(L_WS_CURSOR, 13, L_MIN_ROWS);
      DBMS_SQL.COLUMN_VALUE(L_WS_CURSOR, 14, L_MAX_ROWS);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_WS_CURSOR, 15, L_COMPLETE);
      DBMS_SQL.COLUMN_VALUE(L_WS_CURSOR, 16, L_VALID_CF);
      DBMS_SQL.COLUMN_VALUE(L_WS_CURSOR, 17, L_DESCR_DOC);
      DBMS_SQL.COLUMN_VALUE(L_WS_CURSOR, 18, L_DESCR_DOC_VERSION);
      DBMS_SQL.COLUMN_VALUE(L_WS_CURSOR, 19, L_DATE1);
      DBMS_SQL.COLUMN_VALUE(L_WS_CURSOR, 20, L_DATE2);
      DBMS_SQL.COLUMN_VALUE(L_WS_CURSOR, 21, L_DATE3);
      DBMS_SQL.COLUMN_VALUE(L_WS_CURSOR, 22, L_DATE4);
      DBMS_SQL.COLUMN_VALUE(L_WS_CURSOR, 23, L_DATE5);
   
      DBMS_SQL.COLUMN_VALUE(L_WS_CURSOR, 25, L_WS_CLASS);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_WS_CURSOR, 26, L_LOG_HS);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_WS_CURSOR, 27, L_LOG_HS_DETAILS);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_WS_CURSOR, 28, L_ALLOW_MODIFY);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_WS_CURSOR, 29, L_ACTIVE);
      DBMS_SQL.COLUMN_VALUE(L_WS_CURSOR, 30, L_LC);
      DBMS_SQL.COLUMN_VALUE(L_WS_CURSOR, 31, L_LC_VERSION);
      DBMS_SQL.COLUMN_VALUE(L_WS_CURSOR, 32, L_SS);
      DBMS_SQL.COLUMN_VALUE_CHAR(L_WS_CURSOR, 33, L_AR);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_WS(L_FETCHED_ROWS) := L_WS;
      A_WT(L_FETCHED_ROWS) := L_WT;
      A_WT_VERSION(L_FETCHED_ROWS) := L_WT_VERSION;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;
      A_CREATION_DATE(L_FETCHED_ROWS) := L_CREATION_DATE;
      A_CREATED_BY(L_FETCHED_ROWS) := L_CREATED_BY;
      A_EXEC_START_DATE(L_FETCHED_ROWS) := L_EXEC_START_DATE;
      A_EXEC_END_DATE(L_FETCHED_ROWS) := L_EXEC_END_DATE;
      A_PRIORITY(L_FETCHED_ROWS) := L_PRIORITY;
      A_DUE_DATE(L_FETCHED_ROWS) := L_DUE_DATE;
      A_RESPONSIBLE(L_FETCHED_ROWS) := L_RESPONSIBLE;
      A_SC_COUNTER(L_FETCHED_ROWS) :=  L_SC_COUNTER;
      A_MIN_ROWS(L_FETCHED_ROWS) := L_MIN_ROWS;
      A_MAX_ROWS(L_FETCHED_ROWS) := L_MAX_ROWS;
      A_COMPLETE(L_FETCHED_ROWS) := L_COMPLETE;
      A_VALID_CF(L_FETCHED_ROWS) := L_VALID_CF;
      A_DESCR_DOC(L_FETCHED_ROWS) := L_DESCR_DOC;
      A_DESCR_DOC_VERSION(L_FETCHED_ROWS) := L_DESCR_DOC_VERSION;
      A_DATE1(L_FETCHED_ROWS) := L_DATE1;
      A_DATE2(L_FETCHED_ROWS) := L_DATE2;
      A_DATE3(L_FETCHED_ROWS) := L_DATE3;
      A_DATE4(L_FETCHED_ROWS) := L_DATE4;
      A_DATE5(L_FETCHED_ROWS) := L_DATE5;
     
      A_WS_CLASS(L_FETCHED_ROWS) := L_WS_CLASS;
      A_LOG_HS(L_FETCHED_ROWS) := L_LOG_HS;
      A_LOG_HS_DETAILS(L_FETCHED_ROWS) := L_LOG_HS_DETAILS;
      A_ALLOW_MODIFY(L_FETCHED_ROWS) := L_ALLOW_MODIFY;
      A_ACTIVE(L_FETCHED_ROWS) := L_ACTIVE;
      A_LC(L_FETCHED_ROWS) := L_LC;
      A_LC_VERSION(L_FETCHED_ROWS) := L_LC_VERSION;
      A_SS(L_FETCHED_ROWS) := L_SS;
      A_AR(L_FETCHED_ROWS) := L_AR;
      
      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_WS_CURSOR);
      END IF;
   END LOOP;
   
   DBMS_SQL.CLOSE_CURSOR(L_WS_CURSOR);

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
             'GetWorksheet', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN(L_WS_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(L_WS_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETWORKSHEET;

FUNCTION SAVEWSSAMPLE
(A_WS                   IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_ROWNR                IN     UNAPIGEN.NUM_TABLE_TYPE,   
 A_WS_MODIFY_FLAG       IN OUT UNAPIGEN.NUM_TABLE_TYPE,   
 A_SC                   IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_ST                   IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_ST_VERSION           IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_DESCRIPTION          IN     UNAPIGEN.VC40_TABLE_TYPE,  
 A_SHELF_LIFE_VAL       IN     UNAPIGEN.NUM_TABLE_TYPE,   
 A_SHELF_LIFE_UNIT      IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SAMPLING_DATE        IN     UNAPIGEN.DATE_TABLE_TYPE,  
 A_CREATION_DATE        IN     UNAPIGEN.DATE_TABLE_TYPE,  
 A_CREATED_BY           IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_EXEC_START_DATE      IN     UNAPIGEN.DATE_TABLE_TYPE,  
 A_EXEC_END_DATE        IN     UNAPIGEN.DATE_TABLE_TYPE,  
 A_PRIORITY             IN     UNAPIGEN.NUM_TABLE_TYPE,   
 A_LABEL_FORMAT         IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_DESCR_DOC            IN     UNAPIGEN.VC40_TABLE_TYPE,  
 A_DESCR_DOC_VERSION    IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_RQ                   IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SD                   IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_DATE1                IN     UNAPIGEN.DATE_TABLE_TYPE,  
 A_DATE2                IN     UNAPIGEN.DATE_TABLE_TYPE,  
 A_DATE3                IN     UNAPIGEN.DATE_TABLE_TYPE,  
 A_DATE4                IN     UNAPIGEN.DATE_TABLE_TYPE,  
 A_DATE5                IN     UNAPIGEN.DATE_TABLE_TYPE,  
 A_ALLOW_ANY_PP         IN     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_SC_CLASS             IN     UNAPIGEN.VC2_TABLE_TYPE,   
 A_LOG_HS               IN     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LOG_HS_DETAILS       IN     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LC                   IN     UNAPIGEN.VC2_TABLE_TYPE,   
 A_LC_VERSION           IN     UNAPIGEN.VC20_TABLE_TYPE,  
 A_MODIFY_FLAG          IN OUT UNAPIGEN.NUM_TABLE_TYPE,   
 A_NR_OF_ROWS           IN     NUMBER,                    
 A_NEXT_ROWS            IN     NUMBER,                    
 A_MODIFY_REASON        IN     VARCHAR2)                  
RETURN NUMBER IS

L_LC                VARCHAR2(2);
L_LC_VERSION        VARCHAR2(20);
L_SS                VARCHAR2(2);
L_LOG_HS            CHAR(1);
L_LOG_HS_DETAILS    CHAR(1);
L_ALLOW_MODIFY      CHAR(1);
L_ACTIVE            CHAR(1);
L_SEQ_NO            NUMBER;
L_MAX_ROWS          NUMBER; 
L_SC_COUNTER        NUMBER;
L_WHAT_DESCRIPTION  VARCHAR2(255);
L_HS_SEQ            INTEGER;
L_WT_VERSION        VARCHAR2(20);

CURSOR L_COUNT_ROWS_SC_CURSOR IS
SELECT MAX_ROWS , NVL(SC_COUNTER,0)
FROM UTWS
WHERE WS = L_WS; 

CURSOR L_MODIFIEDSC_CURSOR IS
   
   (SELECT A.SC SC, 'DELETE' ACTION
    FROM UTWSSC A
    WHERE A.WS = L_WS
    AND ROWNR < 0
   MINUS
    SELECT A.SC SC, 'DELETE' ACTION
    FROM UTWSSC A
    WHERE A.WS = L_WS
    AND ROWNR > 0)
   UNION ALL
   
   (SELECT A.SC SC, 'NEW' ACTION
    FROM UTWSSC A
    WHERE A.WS = L_WS
    AND ROWNR > 0
   MINUS
    SELECT A.SC SC, 'NEW' ACTION
    FROM UTWSSC A
    WHERE A.WS = L_WS
    AND ROWNR < 0);

BEGIN
   L_HS_SEQ := 0;
   L_SQLERRM := NULL;
   L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;
   
   
   
   
   IF P_WS_DETAILS_CHG_TR_SEQ <> UNAPIGEN.P_TR_SEQ THEN
      P_WS_DETAILS_CHG := FALSE;   
      P_WS_DETAILS_CHG_TR_SEQ := UNAPIGEN.P_TR_SEQ;
      P_WSDETAILSUPDATED_EVINSERTED := '0';
   END IF;

   IF NVL(A_NEXT_ROWS, 0) = 0 THEN
      IF NVL(P_SAVEWSSC_CALLS, 0) <> 0 THEN
         L_SQLERRM := 'SaveWsSample termination call never called for previous worksheet ! (a_next_rows=-1) a_next_rows='||
                      TO_CHAR(A_NEXT_ROWS);
         RAISE STPERROR;
      END IF;
      P_SAVEWSSC_CALLS := 1;
   ELSIF NVL(A_NEXT_ROWS, 0) = -1 THEN
      P_SAVEWSSC_CALLS := NVL(P_SAVEWSSC_CALLS, 0) + 1;
   ELSIF NVL(A_NEXT_ROWS, 0) = 1 THEN
      IF NVL(P_SAVEWSSC_CALLS, 0) = 0 THEN   
         L_SQLERRM := 'SaveWsSample startup call never called ! (a_next_rows=0)';
         RAISE STPERROR;   
      END IF;
      IF NVL(UNAPIGEN.P_TXN_LEVEL, 0) <= 1 THEN   
         L_SQLERRM := 'SaveWsSample called with a_next_rows=1 in a non MST transaction !';
         RAISE STPERROR;   
      END IF;
      P_SAVEWSSC_CALLS := NVL(P_SAVEWSSC_CALLS, 0) + 1;      
   ELSE
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NEXTROWS;
      RAISE STPERROR;
   END IF;         
   IF P_SAVEWSSC_CALLS = 1 THEN
      L_WS := A_WS(1);
      IF NVL(L_WS, ' ') = ' ' THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
      END IF;
      P_SAVEWSSC_TR_SEQ := UNAPIGEN.P_TR_SEQ;
   ELSE
      IF UNAPIGEN.P_TR_SEQ <> P_SAVEWSSC_TR_SEQ THEN
         L_SQLERRM := 'Successive calls of SaveWsSample not in the same transaction !';
         RAISE STPERROR;   
      END IF;
   END IF;
   
   L_RET_CODE := UNAPIAUT.GETWSAUTHORISATION(L_WS, L_WT_VERSION, L_LC, L_LC_VERSION, L_SS,
                                             L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS, L_LOG_HS_DETAILS);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   
   
   
   
   IF L_WT_VERSION IS NULL THEN
      SELECT WT_VERSION
      INTO L_WT_VERSION
      FROM UTWS
      WHERE WS = L_WS;
   END IF;

   OPEN L_COUNT_ROWS_SC_CURSOR;
   FETCH L_COUNT_ROWS_SC_CURSOR INTO L_MAX_ROWS, L_SC_COUNTER;
      IF L_COUNT_ROWS_SC_CURSOR%NOTFOUND THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
         CLOSE L_COUNT_ROWS_SC_CURSOR;
      RAISE STPERROR;
   END IF;
   CLOSE L_COUNT_ROWS_SC_CURSOR;
  
   
   
   
   
   
   IF NVL(P_SAVEWSSC_CALLS, 0) = 1 THEN
      IF A_NR_OF_ROWS = 0 THEN
         
         

         UPDATE UTWSSC
         SET ROWNR = -ROWNR
         WHERE WS = L_WS;

         L_SC_COUNTER := 0;
      ELSIF A_WS_MODIFY_FLAG(1) = UNAPIGEN.MOD_FLAG_CREATE THEN
         
         

         UPDATE UTWSSC
         SET ROWNR = -ROWNR
         WHERE WS = L_WS;

         L_SC_COUNTER := 0;
      END IF;
   END IF;
      
   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP 
      IF NVL(A_WS(L_SEQ_NO), ' ') = ' ' THEN
          UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
          RAISE STPERROR;
      END IF;

      IF NVL(A_ROWNR(L_SEQ_NO), -1) = -1 THEN
          UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
          RAISE STPERROR;
      ELSE
         IF NVL(A_ROWNR(L_SEQ_NO), -1) > L_MAX_ROWS THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_MAXROWSOVERFLOW;
            RAISE STPERROR;
         END IF;
      END IF;

      IF NVL(A_SC(L_SEQ_NO), ' ') = ' ' AND A_WS_MODIFY_FLAG(L_SEQ_NO) <> UNAPIGEN.MOD_FLAG_DELETE THEN
          UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
          RAISE STPERROR;
      END IF;
      
        
      
      
      
      P_PREV_MOD_FLAG := P_CURR_MOD_FLAG;
       
      IF A_WS_MODIFY_FLAG(L_SEQ_NO) = UNAPIGEN.MOD_FLAG_CREATE THEN
        P_CURR_MOD_FLAG := TRUE;
      ELSE
        P_CURR_MOD_FLAG := FALSE;     
      END IF;
      IF L_SEQ_NO <> 1 OR A_NEXT_ROWS = 1 THEN
        IF P_PREV_MOD_FLAG <> P_CURR_MOD_FLAG THEN
           UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INVALWSMODFLAG;
           RAISE STPERROR;
        END IF;
      END IF;
      
        
      
      
      
 
      IF A_WS_MODIFY_FLAG(L_SEQ_NO) = UNAPIGEN.MOD_FLAG_CREATE THEN
         L_SC_COUNTER := L_SC_COUNTER + 1;
        
         IF NVL(L_SC_COUNTER, -1) <= -1 THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SC_COUNTER;
            RAISE STPERROR;
         END IF;
         
         IF NVL(L_SC_COUNTER, -1) > L_MAX_ROWS THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_MAXROWSOVERFLOW;
            RAISE STPERROR;
         END IF;
                  
         INSERT INTO UTWSSC(WS, ROWNR, SC) 
         VALUES (A_WS(L_SEQ_NO), A_ROWNR(L_SEQ_NO), A_SC(L_SEQ_NO)); 
         P_WS_DETAILS_CHG := TRUE;
         
         
         
         

         
         
         
         
      ELSIF A_WS_MODIFY_FLAG(L_SEQ_NO) = UNAPIGEN.MOD_FLAG_INSERT THEN
         L_SC_COUNTER := L_SC_COUNTER + 1;
         
         IF NVL(L_SC_COUNTER, -1) <= -1 THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SC_COUNTER;
            RAISE STPERROR;
         END IF;
         
         IF NVL(L_SC_COUNTER, -1) > L_MAX_ROWS THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_MAXROWSOVERFLOW;
            RAISE STPERROR;
         END IF;
         
         INSERT INTO UTWSSC(WS, ROWNR, SC) 
         VALUES (A_WS(L_SEQ_NO), A_ROWNR(L_SEQ_NO), A_SC(L_SEQ_NO)); 
         P_WS_DETAILS_CHG := TRUE; 
         
         
         
         

         
         
         
         
      ELSIF A_WS_MODIFY_FLAG(L_SEQ_NO) = UNAPIGEN.MOD_FLAG_UPDATE THEN
         UPDATE UTWSSC 
         SET SC = A_SC(L_SEQ_NO) 
         WHERE WS = A_WS(L_SEQ_NO)
           AND ROWNR = A_ROWNR(L_SEQ_NO);
         P_WS_DETAILS_CHG := TRUE;

         IF SQL%ROWCOUNT < 1 THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
            RAISE STPERROR;
         END IF;
      ELSIF A_WS_MODIFY_FLAG(L_SEQ_NO) = UNAPIGEN.MOD_FLAG_DELETE THEN
         L_SC_COUNTER := L_SC_COUNTER - 1;
         
         DELETE UTWSSC 
         WHERE WS = A_WS(L_SEQ_NO)
           AND ROWNR = A_ROWNR(L_SEQ_NO);

         IF SQL%ROWCOUNT < 1 THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
            RAISE STPERROR;
         END IF;
         P_WS_DETAILS_CHG := TRUE;
         
         
         
         

         
         
         
         
      ELSIF A_WS_MODIFY_FLAG(L_SEQ_NO) = UNAPIGEN.DBERR_SUCCESS THEN
         NULL;         
      ELSE
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INVALWSMODFLAG;    
         RAISE STPERROR;
      END IF;
  
      A_WS_MODIFY_FLAG(L_SEQ_NO) := UNAPIGEN.DBERR_SUCCESS;
     
      

      
      IF P_WS_DETAILS_CHG THEN      
         UPDATE UTWS
         SET ALLOW_MODIFY = '#'
         WHERE WS = L_WS;

         IF SQL%ROWCOUNT < 1 THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
            RAISE STPERROR;
         END IF;      
      END IF;
      
        
      
      
      IF A_MODIFY_FLAG(L_SEQ_NO) = UNAPIGEN.MOD_FLAG_UPDATE THEN
         L_RET_CODE := UNAPISC.SAVESAMPLE(A_SC(L_SEQ_NO), A_ST(L_SEQ_NO), A_ST_VERSION(L_SEQ_NO), 
                       A_DESCRIPTION(L_SEQ_NO), A_SHELF_LIFE_VAL(L_SEQ_NO), A_SHELF_LIFE_UNIT(L_SEQ_NO), 
                       A_SAMPLING_DATE(L_SEQ_NO), A_CREATION_DATE(L_SEQ_NO), A_CREATED_BY(L_SEQ_NO), 
                       A_EXEC_START_DATE(L_SEQ_NO), A_EXEC_END_DATE(L_SEQ_NO), A_PRIORITY(L_SEQ_NO),
                       A_LABEL_FORMAT(L_SEQ_NO), A_DESCR_DOC(L_SEQ_NO), A_DESCR_DOC_VERSION(L_SEQ_NO), 
                       A_RQ(L_SEQ_NO), A_SD(L_SEQ_NO), A_DATE1(L_SEQ_NO), A_DATE2(L_SEQ_NO), A_DATE3(L_SEQ_NO), 
                       A_DATE4(L_SEQ_NO),A_DATE5(L_SEQ_NO), A_ALLOW_ANY_PP(L_SEQ_NO), 
                       A_SC_CLASS(L_SEQ_NO), A_LOG_HS(L_SEQ_NO), A_LOG_HS_DETAILS(L_SEQ_NO), 
                       A_LC(L_SEQ_NO), A_LC_VERSION(L_SEQ_NO), A_MODIFY_REASON);
         A_MODIFY_FLAG(L_SEQ_NO) := L_RET_CODE;              
         
         
         
         
         IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
            A_MODIFY_FLAG(L_SEQ_NO) := L_RET_CODE;              
            L_RET_CODE := UNAPIGEN.DBERR_PARTIALSAVE;
         END IF;
      ELSIF A_MODIFY_FLAG(L_SEQ_NO) = UNAPIGEN.DBERR_SUCCESS THEN
         NULL;
      ELSE  
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INVALMODFLAG;    
         RAISE STPERROR;
      END IF;   
   END LOOP;
   
   UPDATE UTWS
   SET SC_COUNTER = L_SC_COUNTER   
   WHERE WS = A_WS(1);

   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR;
   END IF;

   
   
   
   IF P_WS_DETAILS_CHG THEN
      IF NVL(A_NEXT_ROWS, 0) = -1 AND P_WSDETAILSUPDATED_EVINSERTED = '0' THEN 
         L_EVENT_TP := 'WsDetailsUpdated';
         L_EV_SEQ_NR := -1;
         L_EV_DETAILS := 'wt_version=' || L_WT_VERSION;
         L_RESULT := UNAPIEV.INSERTEVENT('SaveWsSample', UNAPIGEN.P_EVMGR_NAME, 'ws', L_WS, L_LC, 
                                         L_LC_VERSION, L_SS, L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);
         IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
            UNAPIGEN.P_TXN_ERROR := L_RESULT;
            RAISE STPERROR;
         END IF;

         IF L_LOG_HS = '1' THEN
            INSERT INTO UTWSHS (WS, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, 
                                TR_SEQ, EV_SEQ)
            VALUES (L_WS, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                    'worksheet "'||L_WS||'" samples are updated.', 
                    CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
         END IF;

         IF L_LOG_HS_DETAILS = '1' THEN
            L_HS_SEQ := L_HS_SEQ + 1;
            INSERT INTO UTWSHSDETAILS (WS, TR_SEQ, EV_SEQ, SEQ, DETAILS)
            VALUES (L_WS, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_SEQ, 
                    'worksheet "'||L_WS||'" samples are updated.');
         END IF;

         P_WSDETAILSUPDATED_EVINSERTED := '1'; 
      ELSE
         
         L_RET_CODE := UNAPIGEN.GETNEXTEVENTSEQNR(L_EV_SEQ_NR);
         IF L_RET_CODE <> 0 THEN
            UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
            RAISE STPERROR;
         END IF;
      END IF;

      
      
         
      
      
      
      IF (L_LOG_HS_DETAILS = '1') THEN
         FOR L_SC_REC IN L_MODIFIEDSC_CURSOR LOOP
            IF L_SC_REC.ACTION = 'DELETE' THEN
               L_WHAT_DESCRIPTION := 'Sample "'||L_SC_REC.SC||'" is removed from worksheet "'||L_WS||'".';
            ELSE
               L_WHAT_DESCRIPTION := 'Sample "'||L_SC_REC.SC||'" is added to worksheet "'||L_WS||'".';
            END IF;
            L_HS_SEQ := L_HS_SEQ + 1;
            INSERT INTO UTWSHSDETAILS(WS, TR_SEQ, EV_SEQ, SEQ, DETAILS)
            VALUES(L_WS, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_SEQ, L_WHAT_DESCRIPTION);
         END LOOP;
      END IF;
   END IF;  
  
   
   
   
   DELETE FROM UTWSSC
   WHERE WS = L_WS
   AND ROWNR < 0;
   
   
   IF NVL(A_NEXT_ROWS, 0) = -1 THEN
      
      P_SAVEWSSC_CALLS := 0;
   END IF;
   
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   
   
   
   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      IF A_MODIFY_FLAG(L_SEQ_NO) < UNAPIGEN.DBERR_SUCCESS THEN
         A_MODIFY_FLAG(L_SEQ_NO) := UNAPIGEN.DBERR_SUCCESS;
      END IF;
      IF A_WS_MODIFY_FLAG(L_SEQ_NO) < UNAPIGEN.DBERR_SUCCESS THEN
         A_WS_MODIFY_FLAG(L_SEQ_NO) := UNAPIGEN.DBERR_SUCCESS;
      END IF;
   END LOOP;

   RETURN (L_RET_CODE);
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveWsSample',SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
     UNAPIGEN.LOGERROR('SaveWsSample',L_SQLERRM); 
   END IF;
   
   P_SAVEWSSC_CALLS := 0;
   P_CURR_MOD_FLAG := FALSE;
   P_PREV_MOD_FLAG := FALSE;
   P_WSDETAILSUPDATED_EVINSERTED := '0';
   IF L_MODIFIEDSC_CURSOR%ISOPEN THEN
      CLOSE L_MODIFIEDSC_CURSOR;
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveWsSample'));
END SAVEWSSAMPLE;

FUNCTION GETWSSAMPLE
(A_WS                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_ROWNR                OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_SC                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_ST                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_ST_VERSION           OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_DESCRIPTION          OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_SHELF_LIFE_VAL       OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_SHELF_LIFE_UNIT      OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SAMPLING_DATE        OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_CREATION_DATE        OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_CREATED_BY           OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_EXEC_START_DATE      OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_EXEC_END_DATE        OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_PRIORITY             OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_LABEL_FORMAT         OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_DESCR_DOC            OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_DESCR_DOC_VERSION    OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_RQ                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SD                   OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_DATE1                OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_DATE2                OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_DATE3                OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_DATE4                OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_DATE5                OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_ALLOW_ANY_PP         OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_SC_CLASS             OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_LOG_HS               OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LOG_HS_DETAILS       OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ALLOW_MODIFY         OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_AR                   OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_ACTIVE               OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LC                   OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_LC_VERSION           OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SS                   OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_NR_OF_ROWS           IN OUT  NUMBER,                    
 A_WHERE_CLAUSE         IN      VARCHAR2,                  
 A_NEXT_ROWS            IN      NUMBER)                    
RETURN NUMBER IS

L_WS                             VARCHAR2(20);
L_ROWNR                          NUMBER(4);
L_SC                             VARCHAR2(20);
L_ST                             VARCHAR2(20);
L_ST_VERSION                     VARCHAR2(20);
L_DESCRIPTION                    VARCHAR2(40);
L_SHELF_LIFE_VAL                 NUMBER(3);
L_SHELF_LIFE_UNIT                VARCHAR2(20);
L_SAMPLING_DATE                  TIMESTAMP WITH TIME ZONE;
L_CREATION_DATE                  TIMESTAMP WITH TIME ZONE;
L_CREATED_BY                     VARCHAR2(20);
L_EXEC_START_DATE                TIMESTAMP WITH TIME ZONE;
L_EXEC_END_DATE                  TIMESTAMP WITH TIME ZONE;
L_PRIORITY                       NUMBER(3);
L_LABEL_FORMAT                   VARCHAR2(20);
L_DESCR_DOC                      VARCHAR2(40);
L_DESCR_DOC_VERSION              VARCHAR2(20);
L_RQ                             VARCHAR2(20);
L_SD                             VARCHAR2(20);
L_DATE1                          TIMESTAMP WITH TIME ZONE;
L_DATE2                          TIMESTAMP WITH TIME ZONE;
L_DATE3                          TIMESTAMP WITH TIME ZONE;
L_DATE4                          TIMESTAMP WITH TIME ZONE;
L_DATE5                          TIMESTAMP WITH TIME ZONE;
L_ALLOW_ANY_PP                   CHAR(1);
L_SC_CLASS                       VARCHAR2(2);
L_LOG_HS                         CHAR(1);
L_LOG_HS_DETAILS                 CHAR(1);
L_ALLOW_MODIFY                   CHAR(1);
L_AR                             CHAR(1);
L_ACTIVE                         CHAR(1);
L_LC                             VARCHAR2(2);
L_LC_VERSION                     VARCHAR2(20);
L_SS                             VARCHAR2(2);
L_BIND_WS_SELECTION              BOOLEAN;
L_BIND_FIXED_WS_FLAG             BOOLEAN;

BEGIN

   L_BIND_WS_SELECTION := FALSE;
   L_BIND_FIXED_WS_FLAG := FALSE;
   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
            RETURN(UNAPIGEN.DBERR_WHERECLAUSE);
         ELSIF A_WHERE_CLAUSE = 'SELECTION' THEN
            IF UNAPIWS.P_SELECTION_CLAUSE IS NOT NULL THEN 
               IF INSTR(UPPER(UNAPIWS.P_SELECTION_CLAUSE), 'WHERE') <> 0 THEN       
                  L_WHERE_CLAUSE := ','||UNAPIWS.P_SELECTION_CLAUSE|| ' AND a.ws = wssc.ws AND wssc.sc = b.sc';  
                  L_ORDER_BY_CLAUSE := ' ORDER BY wssc.ws, wssc.rownr';
               ELSE
                  L_WHERE_CLAUSE := ','||UNAPIWS.P_SELECTION_CLAUSE|| ' WHERE a.ws = wssc.ws AND wssc.sc = b.sc'; 
                  L_ORDER_BY_CLAUSE := ' ORDER BY wssc.ws, wssc.rownr';
               END IF;
               L_BIND_WS_SELECTION := TRUE;
            ELSE
               L_WHERE_CLAUSE := ' WHERE a.ws = wssc.ws AND wssc.sc = b.sc';  
               L_ORDER_BY_CLAUSE := ' ORDER BY wssc.ws, wssc.rownr';
            END IF;      
         ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
               L_BIND_FIXED_WS_FLAG := TRUE;
               L_WHERE_CLAUSE := 'WHERE wssc.ws = :ws_val AND wssc.sc = b.sc'; 
               L_ORDER_BY_CLAUSE := ' ORDER BY wssc.ws, wssc.rownr';                             
         ELSE
            L_WHERE_CLAUSE := A_WHERE_CLAUSE || ' AND wssc.sc = b.sc' ; 
            L_ORDER_BY_CLAUSE := ' ORDER BY wssc.ws, wssc.rownr';
      END IF;
   
   IF NOT DBMS_SQL.IS_OPEN(P_WSSC_CURSOR) THEN
      P_WSSC_CURSOR := DBMS_SQL.OPEN_CURSOR;
      L_SQL_STRING := 'SELECT b.sc, b.st, b.st_version, b.description, b.shelf_life_val, ' ||
                      'b.shelf_life_unit, b.sampling_date, b.creation_date, b.created_by, ' ||
                      'b.exec_start_date, b.exec_end_date, b.priority, b.label_format, ' ||
                      'b.descr_doc, b.descr_doc_version, b.rq, b.sd, b.date1, b.date2, b.date3, b.date4, ' ||
                      'b.date5, b.allow_any_pp, b.sc_class, b.log_hs, b.log_hs_details, ' ||
                      'b.allow_modify, b.active, b.lc, b.lc_version, b.ss, b.ar, wssc.ws, wssc.rownr ' || 
                      'FROM dd'||UNAPIGEN.P_DD||'.uvsc b, dd' || UNAPIGEN.P_DD || 
                      '.uvwssc wssc ' || L_WHERE_CLAUSE || L_ORDER_BY_CLAUSE;

      DBMS_SQL.PARSE(P_WSSC_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      IF L_BIND_WS_SELECTION THEN
         FOR L_X IN 1..UNAPIWS.P_SELECTION_VAL_TAB.COUNT() LOOP
            DBMS_SQL.BIND_VARIABLE(P_WSSC_CURSOR, ':col_val'||L_X , UNAPIWS.P_SELECTION_VAL_TAB(L_X)); 
         END LOOP;
      ELSIF L_BIND_FIXED_WS_FLAG THEN
         DBMS_SQL.BIND_VARIABLE(P_WSSC_CURSOR, ':ws_val' , A_WHERE_CLAUSE); 
      END IF;
      
      DBMS_SQL.DEFINE_COLUMN(P_WSSC_CURSOR,      1  ,  L_SC,     20);
      DBMS_SQL.DEFINE_COLUMN(P_WSSC_CURSOR,      2  ,  L_ST,     20);
      DBMS_SQL.DEFINE_COLUMN(P_WSSC_CURSOR,      3  ,  L_ST_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(P_WSSC_CURSOR,      4  ,  L_DESCRIPTION, 40);
      DBMS_SQL.DEFINE_COLUMN(P_WSSC_CURSOR,      5  ,  L_SHELF_LIFE_VAL);
      DBMS_SQL.DEFINE_COLUMN(P_WSSC_CURSOR,      6  ,  L_SHELF_LIFE_UNIT, 20);
      DBMS_SQL.DEFINE_COLUMN(P_WSSC_CURSOR,      7  ,  L_SAMPLING_DATE);
      DBMS_SQL.DEFINE_COLUMN(P_WSSC_CURSOR,      8  ,  L_CREATION_DATE);
      DBMS_SQL.DEFINE_COLUMN(P_WSSC_CURSOR,      9  ,  L_CREATED_BY, 20);
      DBMS_SQL.DEFINE_COLUMN(P_WSSC_CURSOR,      10 , L_EXEC_START_DATE);
      DBMS_SQL.DEFINE_COLUMN(P_WSSC_CURSOR,      11 , L_EXEC_END_DATE);
      DBMS_SQL.DEFINE_COLUMN(P_WSSC_CURSOR,      12 , L_PRIORITY);
      DBMS_SQL.DEFINE_COLUMN(P_WSSC_CURSOR,      13 , L_LABEL_FORMAT, 20);
      DBMS_SQL.DEFINE_COLUMN(P_WSSC_CURSOR,      14 , L_DESCR_DOC, 40);
      DBMS_SQL.DEFINE_COLUMN(P_WSSC_CURSOR,      15 , L_DESCR_DOC_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(P_WSSC_CURSOR,      16 , L_RQ,   20);
      DBMS_SQL.DEFINE_COLUMN(P_WSSC_CURSOR,      17 , L_SD,   20);
      DBMS_SQL.DEFINE_COLUMN(P_WSSC_CURSOR,      18 , L_DATE1);
      DBMS_SQL.DEFINE_COLUMN(P_WSSC_CURSOR,      19 , L_DATE2);
      DBMS_SQL.DEFINE_COLUMN(P_WSSC_CURSOR,      20 , L_DATE3);
      DBMS_SQL.DEFINE_COLUMN(P_WSSC_CURSOR,      21 , L_DATE4);
      DBMS_SQL.DEFINE_COLUMN(P_WSSC_CURSOR,      22 , L_DATE5);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_WSSC_CURSOR, 23 , L_ALLOW_ANY_PP, 1);
      DBMS_SQL.DEFINE_COLUMN(P_WSSC_CURSOR,      24 , L_SC_CLASS, 2);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_WSSC_CURSOR, 25 , L_LOG_HS, 1);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_WSSC_CURSOR, 26 , L_LOG_HS_DETAILS, 1);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_WSSC_CURSOR, 27 , L_ALLOW_MODIFY, 1);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_WSSC_CURSOR, 28 , L_ACTIVE, 1);
      DBMS_SQL.DEFINE_COLUMN(P_WSSC_CURSOR,      29 , L_LC,   2);
      DBMS_SQL.DEFINE_COLUMN(P_WSSC_CURSOR,      30 , L_LC_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(P_WSSC_CURSOR,      31 , L_SS,   2);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_WSSC_CURSOR, 32 , L_AR, 1);
      DBMS_SQL.DEFINE_COLUMN(P_WSSC_CURSOR,      33 , L_WS,   20);
      DBMS_SQL.DEFINE_COLUMN(P_WSSC_CURSOR,      34 , L_ROWNR);
      
      L_RESULT := DBMS_SQL.EXECUTE(P_WSSC_CURSOR);
   END IF;
   
   L_RESULT := DBMS_SQL.FETCH_ROWS(P_WSSC_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_WSSC_CURSOR,        1 ,   L_SC);
      DBMS_SQL.COLUMN_VALUE(P_WSSC_CURSOR,        2 ,   L_ST);
      DBMS_SQL.COLUMN_VALUE(P_WSSC_CURSOR,        3 ,   L_ST_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_WSSC_CURSOR,        4 ,   L_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE(P_WSSC_CURSOR,        5 ,   L_SHELF_LIFE_VAL);
      DBMS_SQL.COLUMN_VALUE(P_WSSC_CURSOR,        6 ,   L_SHELF_LIFE_UNIT);
      DBMS_SQL.COLUMN_VALUE(P_WSSC_CURSOR,        7 ,   L_SAMPLING_DATE);
      DBMS_SQL.COLUMN_VALUE(P_WSSC_CURSOR,        8 ,   L_CREATION_DATE);
      DBMS_SQL.COLUMN_VALUE(P_WSSC_CURSOR,        9 ,   L_CREATED_BY);
      DBMS_SQL.COLUMN_VALUE(P_WSSC_CURSOR,        10 ,  L_EXEC_START_DATE);
      DBMS_SQL.COLUMN_VALUE(P_WSSC_CURSOR,        11 ,  L_EXEC_END_DATE);
      DBMS_SQL.COLUMN_VALUE(P_WSSC_CURSOR,        12 ,  L_PRIORITY);
      DBMS_SQL.COLUMN_VALUE(P_WSSC_CURSOR,        13 ,  L_LABEL_FORMAT);
      DBMS_SQL.COLUMN_VALUE(P_WSSC_CURSOR,        14 ,  L_DESCR_DOC);
      DBMS_SQL.COLUMN_VALUE(P_WSSC_CURSOR,        15 ,  L_DESCR_DOC_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_WSSC_CURSOR,        16 ,  L_RQ);
      DBMS_SQL.COLUMN_VALUE(P_WSSC_CURSOR,        17 ,  L_SD);
      DBMS_SQL.COLUMN_VALUE(P_WSSC_CURSOR,        18 ,  L_DATE1);
      DBMS_SQL.COLUMN_VALUE(P_WSSC_CURSOR,        19 ,  L_DATE2);
      DBMS_SQL.COLUMN_VALUE(P_WSSC_CURSOR,        20 ,  L_DATE3);
      DBMS_SQL.COLUMN_VALUE(P_WSSC_CURSOR,        21 ,  L_DATE4);
      DBMS_SQL.COLUMN_VALUE(P_WSSC_CURSOR,        22 ,  L_DATE5);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_WSSC_CURSOR,   23 ,  L_ALLOW_ANY_PP);
      DBMS_SQL.COLUMN_VALUE(P_WSSC_CURSOR,        24 ,  L_SC_CLASS);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_WSSC_CURSOR,   25 ,  L_LOG_HS);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_WSSC_CURSOR,   26 ,  L_LOG_HS_DETAILS);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_WSSC_CURSOR,   27 ,  L_ALLOW_MODIFY);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_WSSC_CURSOR,   28 ,  L_ACTIVE);
      DBMS_SQL.COLUMN_VALUE(P_WSSC_CURSOR,        29 ,  L_LC);
      DBMS_SQL.COLUMN_VALUE(P_WSSC_CURSOR,        30 ,  L_LC_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_WSSC_CURSOR,        31 ,  L_SS);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_WSSC_CURSOR,   32 ,  L_AR);
      DBMS_SQL.COLUMN_VALUE(P_WSSC_CURSOR,        33 ,  L_WS);
      DBMS_SQL.COLUMN_VALUE(P_WSSC_CURSOR,        34 ,  L_ROWNR);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_SC               (L_FETCHED_ROWS) :=  L_SC;
      A_ST               (L_FETCHED_ROWS) :=  L_ST;
      A_ST_VERSION       (L_FETCHED_ROWS) :=  L_ST_VERSION;
      A_DESCRIPTION      (L_FETCHED_ROWS) :=  L_DESCRIPTION;
      A_SHELF_LIFE_VAL   (L_FETCHED_ROWS) :=  L_SHELF_LIFE_VAL;
      A_SHELF_LIFE_UNIT  (L_FETCHED_ROWS) :=  L_SHELF_LIFE_UNIT;
      A_SAMPLING_DATE    (L_FETCHED_ROWS) :=  L_SAMPLING_DATE;
      A_CREATION_DATE    (L_FETCHED_ROWS) :=  L_CREATION_DATE;
      A_CREATED_BY       (L_FETCHED_ROWS) :=  L_CREATED_BY;
      A_EXEC_START_DATE  (L_FETCHED_ROWS) :=  L_EXEC_START_DATE;
      A_EXEC_END_DATE    (L_FETCHED_ROWS) :=  L_EXEC_END_DATE;
      A_PRIORITY         (L_FETCHED_ROWS) :=  L_PRIORITY;
      A_LABEL_FORMAT     (L_FETCHED_ROWS) :=  L_LABEL_FORMAT;
      A_DESCR_DOC        (L_FETCHED_ROWS) :=  L_DESCR_DOC;
      A_DESCR_DOC_VERSION(L_FETCHED_ROWS) :=  L_DESCR_DOC_VERSION;
      A_RQ               (L_FETCHED_ROWS) :=  L_RQ;
      A_SD               (L_FETCHED_ROWS) :=  L_SD;
      A_DATE1            (L_FETCHED_ROWS) :=  L_DATE1;
      A_DATE2            (L_FETCHED_ROWS) :=  L_DATE2;
      A_DATE3            (L_FETCHED_ROWS) :=  L_DATE3;
      A_DATE4            (L_FETCHED_ROWS) :=  L_DATE4;
      A_DATE5            (L_FETCHED_ROWS) :=  L_DATE5;
      A_ALLOW_ANY_PP     (L_FETCHED_ROWS) :=  L_ALLOW_ANY_PP;
      A_SC_CLASS         (L_FETCHED_ROWS) :=  L_SC_CLASS;
      A_LOG_HS           (L_FETCHED_ROWS) :=  L_LOG_HS;
      A_LOG_HS_DETAILS   (L_FETCHED_ROWS) :=  L_LOG_HS_DETAILS;
      A_ALLOW_MODIFY     (L_FETCHED_ROWS) :=  L_ALLOW_MODIFY;
      A_ACTIVE           (L_FETCHED_ROWS) :=  L_ACTIVE;
      A_LC               (L_FETCHED_ROWS) :=  L_LC;
      A_LC_VERSION       (L_FETCHED_ROWS) :=  L_LC_VERSION;
      A_SS               (L_FETCHED_ROWS) :=  L_SS;
      A_AR               (L_FETCHED_ROWS) :=  L_AR;
      A_WS               (L_FETCHED_ROWS) :=  L_WS;
      A_ROWNR            (L_FETCHED_ROWS) :=  L_ROWNR;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_WSSC_CURSOR);
      END IF;
   END LOOP;

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
      DBMS_SQL.CLOSE_CURSOR(P_WSSC_CURSOR);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      DBMS_SQL.CLOSE_CURSOR(P_WSSC_CURSOR);
   ELSE   
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   
   
   
   

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
             'GetWsSample', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN(P_WSSC_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(P_WSSC_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETWSSAMPLE;

FUNCTION SAVEWSINFOFIELD
(A_WS               IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_ROWNR            IN     UNAPIGEN.NUM_TABLE_TYPE,     
 A_WS_MODIFY_FLAG   IN OUT UNAPIGEN.NUM_TABLE_TYPE,     
 A_SC               IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_IC               IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_ICNODE           IN OUT UNAPIGEN.LONG_TABLE_TYPE,    
 A_II               IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_IINODE           IN OUT UNAPIGEN.LONG_TABLE_TYPE,    
 A_IE_VERSION       IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_IIVALUE          IN     UNAPIGEN.VC2000_TABLE_TYPE,  
 A_POS_X            IN     UNAPIGEN.NUM_TABLE_TYPE,     
 A_POS_Y            IN     UNAPIGEN.NUM_TABLE_TYPE,     
 A_IS_PROTECTED     IN     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_MANDATORY        IN     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_HIDDEN           IN     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_DSP_TITLE        IN     UNAPIGEN.VC40_TABLE_TYPE,    
 A_DSP_LEN          IN     UNAPIGEN.NUM_TABLE_TYPE,     
 A_DSP_TP           IN     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_DSP_ROWS         IN     UNAPIGEN.NUM_TABLE_TYPE,     
 A_II_CLASS         IN     UNAPIGEN.VC2_TABLE_TYPE,     
 A_LOG_HS           IN     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_LOG_HS_DETAILS   IN     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_LC               IN     UNAPIGEN.VC2_TABLE_TYPE,     
 A_LC_VERSION       IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_MODIFY_FLAG      IN OUT UNAPIGEN.NUM_TABLE_TYPE,     
 A_NR_OF_ROWS       IN     NUMBER,                      
 A_NEXT_ROWS        IN     NUMBER,                      
 A_MODIFY_REASON    IN     VARCHAR2)                    
RETURN NUMBER IS

L_LC                VARCHAR2(2);
L_LC_VERSION        VARCHAR2(20);
L_SS                VARCHAR2(2);
L_LOG_HS            CHAR(1);
L_LOG_HS_DETAILS    CHAR(1);
L_ALLOW_MODIFY      CHAR(1);
L_ACTIVE            CHAR(1);
L_SEQ_NO            NUMBER;
L_MAX_ROWS          NUMBER; 
L_ERRM              VARCHAR2(255);
L_CALL_SAVESCII     BOOLEAN;

L_WHAT_DESCRIPTION  VARCHAR2(255);
L_HS_SEQ            INTEGER;
L_WT_VERSION        VARCHAR2(20);
 
L_CURRENT_SC           VARCHAR2(20);   
L_SVII_NR_OF_ROWS      NUMBER;
L_SVII_ORIG_ARRAY_NR   UNAPIGEN.NUM_TABLE_TYPE;

L_SVSC                 UNAPIGEN.VC20_TABLE_TYPE;
L_SVIC                 UNAPIGEN.VC20_TABLE_TYPE;
L_SVICNODE             UNAPIGEN.LONG_TABLE_TYPE;
L_SVII                 UNAPIGEN.VC20_TABLE_TYPE;
L_SVIINODE             UNAPIGEN.LONG_TABLE_TYPE;
L_SVIE_VERSION         UNAPIGEN.VC20_TABLE_TYPE;
L_SVIIVALUE            UNAPIGEN.VC2000_TABLE_TYPE;
L_SVPOS_X              UNAPIGEN.NUM_TABLE_TYPE;
L_SVPOS_Y              UNAPIGEN.NUM_TABLE_TYPE;
L_SVIS_PROTECTED       UNAPIGEN.CHAR1_TABLE_TYPE;
L_SVMANDATORY          UNAPIGEN.CHAR1_TABLE_TYPE;
L_SVHIDDEN             UNAPIGEN.CHAR1_TABLE_TYPE;
L_SVDSP_TITLE          UNAPIGEN.VC40_TABLE_TYPE;
L_SVDSP_LEN            UNAPIGEN.NUM_TABLE_TYPE; 
L_SVDSP_TP             UNAPIGEN.CHAR1_TABLE_TYPE;
L_SVDSP_ROWS           UNAPIGEN.NUM_TABLE_TYPE;
L_SVII_CLASS           UNAPIGEN.VC2_TABLE_TYPE;
L_SVLOG_HS             UNAPIGEN.CHAR1_TABLE_TYPE;
L_SVLOG_HS_DETAILS     UNAPIGEN.CHAR1_TABLE_TYPE;
L_SVLC                 UNAPIGEN.VC2_TABLE_TYPE;
L_SVLC_VERSION         UNAPIGEN.VC20_TABLE_TYPE;
L_SVMODIFY_FLAG        UNAPIGEN.NUM_TABLE_TYPE;

CURSOR L_MAX_ROWS_CURSOR IS
SELECT MAX_ROWS 
FROM UTWS
WHERE WS = L_WS; 

CURSOR L_MODIFIEDII_CURSOR IS
   
   (SELECT A.SC SC, A.IC IC, A.ICNODE ICNODE, A.II II, A.IINODE IINODE, 'DELETE' ACTION
    FROM UTWSII A
    WHERE A.WS = L_WS
    AND ROWNR < 0
   MINUS
    SELECT A.SC SC, A.IC IC, A.ICNODE ICNODE, A.II II, A.IINODE IINODE, 'DELETE' ACTION
    FROM UTWSII A
    WHERE A.WS = L_WS
    AND ROWNR > 0)
   UNION ALL
   
   (SELECT A.SC SC, A.IC IC, A.ICNODE ICNODE, A.II II, A.IINODE IINODE, 'NEW' ACTION
    FROM UTWSII A
    WHERE A.WS = L_WS
    AND ROWNR > 0
   MINUS
    SELECT A.SC SC, A.IC IC, A.ICNODE ICNODE, A.II II, A.IINODE IINODE, 'NEW' ACTION
    FROM UTWSII A
    WHERE A.WS = L_WS
    AND ROWNR < 0);

BEGIN
 
   L_HS_SEQ := 0;
   L_ERRM := NULL;
   L_SQLERRM := NULL;
   L_RET_CODE := UNAPIGEN.DBERR_SUCCESS; 
   
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   
   
   IF P_WS_DETAILS_CHG_TR_SEQ <> UNAPIGEN.P_TR_SEQ THEN
      P_WS_DETAILS_CHG := FALSE;   
      P_WS_DETAILS_CHG_TR_SEQ := UNAPIGEN.P_TR_SEQ;
      P_WSDETAILSUPDATED_EVINSERTED := '0';
   END IF;

   IF NVL(A_NEXT_ROWS, 0) = 0 THEN
      IF NVL(P_SAVEWSII_CALLS, 0) <> 0 THEN
         L_SQLERRM := 'SaveWsInfoField termination call never called for previous worksheet ! (a_next_rows=-1) a_next_rows='||
                      TO_CHAR(A_NEXT_ROWS);
         RAISE STPERROR;
      END IF;
      P_SAVEWSII_CALLS := 1;
   ELSIF NVL(A_NEXT_ROWS, 0) = -1 THEN
      P_SAVEWSII_CALLS := NVL(P_SAVEWSII_CALLS, 0) + 1;
   ELSIF NVL(A_NEXT_ROWS, 0) = 1 THEN
      IF NVL(P_SAVEWSII_CALLS, 0) = 0 THEN   
         L_SQLERRM := 'SaveWsInfoField startup call never called ! (a_next_rows=0)';
         RAISE STPERROR;   
      END IF;
      IF NVL(UNAPIGEN.P_TXN_LEVEL, 0) <= 1 THEN   
         L_SQLERRM := 'SaveWsInfofield called with a_next_rows=1 in a non MST transaction !';
         RAISE STPERROR;   
      END IF;
      P_SAVEWSII_CALLS := NVL(P_SAVEWSII_CALLS, 0) + 1;      
   ELSE
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NEXTROWS;
      RAISE STPERROR;
   END IF;         
   IF P_SAVEWSII_CALLS = 1 THEN
      L_WS := A_WS(1);
      IF NVL(L_WS, ' ') = ' ' THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
      END IF;
      P_SAVEWSII_TR_SEQ := UNAPIGEN.P_TR_SEQ;
   ELSE
      IF UNAPIGEN.P_TR_SEQ <> P_SAVEWSII_TR_SEQ THEN
         L_SQLERRM := 'Successive calls of SaveWsInfoField not in the same transaction !';
         RAISE STPERROR;   
      END IF;
   END IF;
 
   
   L_RET_CODE := UNAPIAUT.GETWSAUTHORISATION(L_WS, L_WT_VERSION, L_LC, L_LC_VERSION, L_SS,
                                             L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS, L_LOG_HS_DETAILS);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;
  
   
   
   
   
   IF L_WT_VERSION IS NULL THEN
      SELECT WT_VERSION
      INTO L_WT_VERSION
      FROM UTWS
      WHERE WS = L_WS;
   END IF;



   
   
   
   
   
   IF NVL(P_SAVEWSII_CALLS, 0) = 1 THEN
      IF A_NR_OF_ROWS = 0 THEN
         
         

         UPDATE UTWSII
         SET ROWNR = -ROWNR
         WHERE WS = L_WS;
      ELSIF A_WS_MODIFY_FLAG(1) = UNAPIGEN.MOD_FLAG_CREATE THEN
         
         

         UPDATE UTWSII
         SET ROWNR = -ROWNR
         WHERE WS = L_WS;
      END IF;      
   END IF;
 
   
   OPEN L_MAX_ROWS_CURSOR;
   FETCH L_MAX_ROWS_CURSOR INTO L_MAX_ROWS;
   IF L_MAX_ROWS_CURSOR%NOTFOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      CLOSE L_MAX_ROWS_CURSOR;
      RAISE STPERROR;
   END IF;
   CLOSE L_MAX_ROWS_CURSOR;

 
   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP 
      IF NVL(A_WS(L_SEQ_NO), ' ') = ' ' THEN
          UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
          RAISE STPERROR;
      END IF;

      IF NVL(A_ROWNR(L_SEQ_NO), -1) = -1 THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
      ELSE
         IF NVL(A_ROWNR(L_SEQ_NO), -1) > L_MAX_ROWS THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_MAXROWSOVERFLOW;
            RAISE STPERROR;
         END IF;
      END IF;
      
      IF A_WS_MODIFY_FLAG(L_SEQ_NO) <> UNAPIGEN.MOD_FLAG_DELETE THEN
         IF NVL(A_SC(L_SEQ_NO), ' ') = ' ' THEN
             UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
             RAISE STPERROR;
         END IF;

         IF NVL(A_IC(L_SEQ_NO), ' ') = ' ' THEN
             UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
             RAISE STPERROR;
         END IF;

         IF NVL(A_ICNODE(L_SEQ_NO), -1) = -1 THEN
             UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
             RAISE STPERROR;
         END IF;

         IF NVL(A_II(L_SEQ_NO),' ') = ' ' THEN
             UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
             RAISE STPERROR;
         END IF;

         IF NVL(A_IINODE(L_SEQ_NO), -1) = -1 THEN
             UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
             RAISE STPERROR;
         END IF;
       END IF;
      
        
      
      


      P_PREV_MOD_FLAG := P_CURR_MOD_FLAG;

      IF A_WS_MODIFY_FLAG(L_SEQ_NO) = UNAPIGEN.MOD_FLAG_CREATE THEN
         P_CURR_MOD_FLAG := TRUE;
      ELSE
         P_CURR_MOD_FLAG := FALSE;     
      END IF;
      IF L_SEQ_NO <> 1 OR A_NEXT_ROWS = 1 THEN
         IF P_PREV_MOD_FLAG <> P_CURR_MOD_FLAG THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INVALWSMODFLAG;
            RAISE STPERROR;
         END IF;
      END IF;

        
      
      
      

 
      IF A_WS_MODIFY_FLAG(L_SEQ_NO) = UNAPIGEN.MOD_FLAG_CREATE THEN

         INSERT INTO UTWSII(WS, ROWNR, SC, IC, ICNODE, II, IINODE) 
         VALUES (A_WS(L_SEQ_NO), A_ROWNR(L_SEQ_NO), A_SC(L_SEQ_NO), A_IC(L_SEQ_NO), A_ICNODE(L_SEQ_NO),
                 A_II(L_SEQ_NO), A_IINODE(L_SEQ_NO)); 
         P_WS_DETAILS_CHG := TRUE;

      ELSIF A_WS_MODIFY_FLAG(L_SEQ_NO) = UNAPIGEN.MOD_FLAG_INSERT THEN

         INSERT INTO UTWSII(WS, ROWNR, SC, IC, ICNODE, II, IINODE) 
         VALUES (A_WS(L_SEQ_NO), A_ROWNR(L_SEQ_NO), A_SC(L_SEQ_NO), A_IC(L_SEQ_NO), A_ICNODE(L_SEQ_NO),
                 A_II(L_SEQ_NO), A_IINODE(L_SEQ_NO)); 
         P_WS_DETAILS_CHG := TRUE; 

      ELSIF A_WS_MODIFY_FLAG(L_SEQ_NO) = UNAPIGEN.MOD_FLAG_UPDATE THEN

         UPDATE UTWSII 
         SET SC = A_SC(L_SEQ_NO),
             IC = A_IC(L_SEQ_NO),
             ICNODE = A_ICNODE(L_SEQ_NO),
             II = A_II(L_SEQ_NO),
             IINODE = A_IINODE(L_SEQ_NO)
         WHERE WS = A_WS(L_SEQ_NO)
         AND ROWNR = A_ROWNR(L_SEQ_NO)
         AND II = A_II(L_SEQ_NO);
         P_WS_DETAILS_CHG := TRUE;

         IF SQL%ROWCOUNT < 1 THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
            RAISE STPERROR;
         END IF;

      ELSIF A_WS_MODIFY_FLAG(L_SEQ_NO) = UNAPIGEN.MOD_FLAG_DELETE THEN

         DELETE UTWSII 
         WHERE WS = A_WS(L_SEQ_NO)
           AND ROWNR = A_ROWNR(L_SEQ_NO);
           
         
         
         
         
         P_WS_DETAILS_CHG := TRUE; 

      ELSIF A_WS_MODIFY_FLAG(L_SEQ_NO) = UNAPIGEN.DBERR_SUCCESS THEN
         NULL;         
      ELSE
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INVALWSMODFLAG;    
         RAISE STPERROR;
      END IF;

      A_WS_MODIFY_FLAG(L_SEQ_NO) := UNAPIGEN.DBERR_SUCCESS;
   END LOOP;
 
 
   

   
   IF P_WS_DETAILS_CHG THEN   
      UPDATE UTWS
      SET ALLOW_MODIFY = '#'
      WHERE WS = L_WS;

      IF SQL%ROWCOUNT < 1 THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
         RAISE STPERROR;
      END IF;
   END IF;
   
     
   
   
   L_CALL_SAVESCII := FALSE;
   L_CURRENT_SC := '';
   L_SVII_NR_OF_ROWS := 0;
   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      IF A_MODIFY_FLAG(L_SEQ_NO)<>UNAPIGEN.DBERR_SUCCESS THEN
         L_SVII_NR_OF_ROWS := L_SVII_NR_OF_ROWS + 1; 
         L_SVSC(L_SVII_NR_OF_ROWS) := A_SC(L_SEQ_NO);
         L_SVIC(L_SVII_NR_OF_ROWS) := A_IC(L_SEQ_NO);
         L_SVICNODE(L_SVII_NR_OF_ROWS) := A_ICNODE(L_SEQ_NO);
         L_SVII(L_SVII_NR_OF_ROWS) := A_II(L_SEQ_NO);
         L_SVIINODE(L_SVII_NR_OF_ROWS) := A_IINODE(L_SEQ_NO);
         L_SVIE_VERSION(L_SVII_NR_OF_ROWS) := A_IE_VERSION(L_SEQ_NO);
         L_SVIIVALUE(L_SVII_NR_OF_ROWS) := A_IIVALUE(L_SEQ_NO);
         L_SVPOS_X(L_SVII_NR_OF_ROWS) := A_POS_X(L_SEQ_NO);
         L_SVPOS_Y(L_SVII_NR_OF_ROWS) := A_POS_Y(L_SEQ_NO);
         L_SVIS_PROTECTED(L_SVII_NR_OF_ROWS) := A_IS_PROTECTED(L_SEQ_NO);
         L_SVMANDATORY(L_SVII_NR_OF_ROWS) := A_MANDATORY(L_SEQ_NO);
         L_SVHIDDEN(L_SVII_NR_OF_ROWS) := A_HIDDEN(L_SEQ_NO);
         L_SVDSP_TITLE(L_SVII_NR_OF_ROWS) := A_DSP_TITLE(L_SEQ_NO);
         L_SVDSP_LEN(L_SVII_NR_OF_ROWS) := A_DSP_LEN(L_SEQ_NO);
         L_SVDSP_TP(L_SVII_NR_OF_ROWS) := A_DSP_TP(L_SEQ_NO);
         L_SVDSP_ROWS(L_SVII_NR_OF_ROWS) := A_DSP_ROWS(L_SEQ_NO);
         L_SVII_CLASS(L_SVII_NR_OF_ROWS) := A_II_CLASS(L_SEQ_NO);
         L_SVLOG_HS(L_SVII_NR_OF_ROWS) := A_LOG_HS(L_SEQ_NO);
         L_SVLOG_HS_DETAILS(L_SVII_NR_OF_ROWS) := A_LOG_HS_DETAILS(L_SEQ_NO);
         L_SVLC(L_SVII_NR_OF_ROWS) := A_LC(L_SEQ_NO);
         L_SVLC_VERSION(L_SVII_NR_OF_ROWS) := A_LC_VERSION(L_SEQ_NO);
         L_SVMODIFY_FLAG(L_SVII_NR_OF_ROWS) := A_MODIFY_FLAG(L_SEQ_NO);
         L_SVII_ORIG_ARRAY_NR(L_SVII_NR_OF_ROWS) := L_SEQ_NO;
      END IF;
      
      L_CALL_SAVESCII := FALSE;
      
      
      IF L_SEQ_NO = A_NR_OF_ROWS AND
         L_SVII_NR_OF_ROWS>0 THEN
         L_CALL_SAVESCII := TRUE;
      END IF;

      
      IF L_SEQ_NO <> A_NR_OF_ROWS THEN
         IF A_SC(L_SEQ_NO + 1) <> NVL(L_CURRENT_SC,A_SC(1)) THEN
            L_CALL_SAVESCII := TRUE;
         END IF;
      END IF;
         
      IF L_CALL_SAVESCII THEN
         L_RET_CODE := UNAPIIC.SAVESCINFOFIELD(L_SVSC, L_SVIC, L_SVICNODE, L_SVII, L_SVIINODE, 
                                               L_SVIE_VERSION, L_SVIIVALUE, L_SVPOS_X, L_SVPOS_Y,
                                               L_SVIS_PROTECTED, L_SVMANDATORY, L_SVHIDDEN, 
                                               L_SVDSP_TITLE, L_SVDSP_LEN, L_SVDSP_TP, L_SVDSP_ROWS, 
                                               L_SVII_CLASS, L_SVLOG_HS, L_SVLOG_HS_DETAILS, 
                                               L_SVLC, L_SVLC_VERSION, L_SVMODIFY_FLAG,
                                               L_SVII_NR_OF_ROWS, 'Modified in worksheet');
            
            
            
            
            IF L_RET_CODE = UNAPIGEN.DBERR_PARTIALSAVE THEN
               FOR L_SCIIROW IN 1..L_SVII_NR_OF_ROWS LOOP
                   A_MODIFY_FLAG(L_SVII_ORIG_ARRAY_NR(L_SCIIROW)) := L_SVMODIFY_FLAG(L_SCIIROW);
               END LOOP;
            ELSIF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN 
               L_SQLERRM := 'SaveScInfoField ret_code='||TO_CHAR(L_RET_CODE);
               RAISE STPERROR;
            END IF;   

         
         L_SVII_NR_OF_ROWS := 0;
      
      END IF;
      L_CURRENT_SC := A_SC(L_SEQ_NO);
   END LOOP;
     
 
   
   
   
   IF P_WS_DETAILS_CHG THEN 
      IF NVL(A_NEXT_ROWS, 0) = -1 AND P_WSDETAILSUPDATED_EVINSERTED = '0' THEN 
         L_EVENT_TP := 'WsDetailsUpdated';
         L_EV_SEQ_NR := -1;
         L_EV_DETAILS := 'wt_version=' || L_WT_VERSION;
         L_RESULT := UNAPIEV.INSERTEVENT('SaveWsInfoField', UNAPIGEN.P_EVMGR_NAME, 'ws', L_WS, L_LC, 
                                         L_LC_VERSION, L_SS, L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);
         IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
            UNAPIGEN.P_TXN_ERROR := L_RESULT;
            RAISE STPERROR;
         END IF;

         IF L_LOG_HS = '1' THEN
            INSERT INTO UTWSHS (WS, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
            VALUES (L_WS, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                    'worksheet "'||L_WS||'" info fields are updated.', 
                    CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
         END IF;

         IF L_LOG_HS_DETAILS = '1' THEN
            L_HS_SEQ := L_HS_SEQ + 1;
            INSERT INTO UTWSHSDETAILS (WS, TR_SEQ, EV_SEQ, SEQ, DETAILS)
            VALUES (L_WS, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_SEQ, 
                    'worksheet "'||L_WS||'" info fields are updated.');
         END IF;

         P_WSDETAILSUPDATED_EVINSERTED := '1'; 
      ELSE
         
         L_RET_CODE := UNAPIGEN.GETNEXTEVENTSEQNR(L_EV_SEQ_NR);
         IF L_RET_CODE <> 0 THEN
            UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
            RAISE STPERROR;
         END IF;
      END IF;

      
      
         
      
      
      
      IF (L_LOG_HS_DETAILS = '1') THEN
         FOR L_II_REC IN L_MODIFIEDII_CURSOR LOOP
            IF L_II_REC.ACTION = 'DELETE' THEN
               L_WHAT_DESCRIPTION := 'Info field "'||L_II_REC.II||'" is removed from worksheet "'||L_WS||'".';
            ELSE
               L_WHAT_DESCRIPTION := 'Info field "'||L_II_REC.II||'" is added to worksheet "'||L_WS||'".';
            END IF;
            L_HS_SEQ := L_HS_SEQ + 1;
            INSERT INTO UTWSHSDETAILS(WS, TR_SEQ, EV_SEQ, SEQ, DETAILS)
            VALUES(L_WS, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_SEQ, L_WHAT_DESCRIPTION);
         END LOOP;
      END IF;
   END IF;  
 

   
   
   
   DELETE FROM UTWSII
   WHERE WS = L_WS
   AND ROWNR < 0;
   
   
   IF NVL(A_NEXT_ROWS, 0) = -1 THEN
      
      P_SAVEWSII_CALLS := 0;
   END IF;
   
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   
   
   
   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      IF A_MODIFY_FLAG(L_SEQ_NO) < UNAPIGEN.DBERR_SUCCESS THEN
         A_MODIFY_FLAG(L_SEQ_NO) := UNAPIGEN.DBERR_SUCCESS;
      END IF;
      IF A_WS_MODIFY_FLAG(L_SEQ_NO) < UNAPIGEN.DBERR_SUCCESS THEN
         A_WS_MODIFY_FLAG(L_SEQ_NO) := UNAPIGEN.DBERR_SUCCESS;
      END IF;
   END LOOP;

   RETURN (L_RET_CODE);
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveWsInfoField',SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
     UNAPIGEN.LOGERROR('SaveWsInfofield',L_SQLERRM); 
   ELSIF L_ERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('SaveWsInfoField', L_ERRM);
   END IF;
 
 
 
   
   P_SAVEWSII_CALLS := 0;
   P_CURR_MOD_FLAG := FALSE;
   P_PREV_MOD_FLAG := FALSE;
   P_WSDETAILSUPDATED_EVINSERTED := '0';
   IF L_MODIFIEDII_CURSOR%ISOPEN THEN
      CLOSE L_MODIFIEDII_CURSOR;
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveWsInfoField'));
END SAVEWSINFOFIELD;

FUNCTION GETWSINFOFIELD
(A_WS               OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_ROWNR            OUT     UNAPIGEN.NUM_TABLE_TYPE,    
 A_SC               OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_IC               OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_ICNODE           OUT     UNAPIGEN.LONG_TABLE_TYPE,   
 A_II               OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_IINODE           OUT     UNAPIGEN.LONG_TABLE_TYPE,   
 A_IE_VERSION       OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_IIVALUE          OUT     UNAPIGEN.VC2000_TABLE_TYPE, 
 A_POS_X            OUT     UNAPIGEN.NUM_TABLE_TYPE,    
 A_POS_Y            OUT     UNAPIGEN.NUM_TABLE_TYPE,    
 A_IS_PROTECTED     OUT     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_MANDATORY        OUT     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_HIDDEN           OUT     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_DSP_TITLE        OUT     UNAPIGEN.VC40_TABLE_TYPE,   
 A_DSP_LEN          OUT     UNAPIGEN.NUM_TABLE_TYPE,    
 A_DSP_TP           OUT     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_DSP_ROWS         OUT     UNAPIGEN.NUM_TABLE_TYPE,    
 A_II_CLASS         OUT     UNAPIGEN.VC2_TABLE_TYPE,    
 A_LOG_HS           OUT     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_LOG_HS_DETAILS   OUT     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_ALLOW_MODIFY     OUT     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_AR               OUT     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_ACTIVE           OUT     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_LC               OUT     UNAPIGEN.VC2_TABLE_TYPE,    
 A_LC_VERSION       OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_SS               OUT     UNAPIGEN.VC2_TABLE_TYPE,    
 A_NR_OF_ROWS       IN OUT  NUMBER,                     
 A_WHERE_CLAUSE     IN      VARCHAR2,                   
 A_NEXT_ROWS        IN      NUMBER)                     
RETURN NUMBER IS

L_WS             VARCHAR2(20);
L_ROWNR                          NUMBER(4);
L_SC                             VARCHAR2(20);
L_IC                             VARCHAR2(20);
L_ICNODE                         NUMBER(9);
L_II                             VARCHAR2(20);
L_IINODE                         NUMBER(9);
L_IE_VERSION                     VARCHAR2(20);
L_IIVALUE                        VARCHAR2(2000);
L_POS_X                          NUMBER(4);
L_POS_Y                          NUMBER(4);
L_IS_PROTECTED                   CHAR(1);
L_MANDATORY                      CHAR(1);
L_HIDDEN                         CHAR(1);
L_DSP_TITLE                      VARCHAR2(40);
L_DSP_TP                         CHAR(1);
L_DSP_LEN                        NUMBER(4);
L_DSP_ROWS                       NUMBER(3);
L_II_CLASS                       VARCHAR2(2);
L_LOG_HS                         CHAR(1);
L_LOG_HS_DETAILS                 CHAR(1);
L_ALLOW_MODIFY                   CHAR(1);
L_AR                             CHAR(1);
L_ACTIVE                         CHAR(1);
L_LC                             VARCHAR2(2);
L_LC_VERSION                     VARCHAR2(20);
L_SS                             VARCHAR2(2);
L_BIND_WS_SELECTION              BOOLEAN;
L_BIND_FIXED_WS_FLAG             BOOLEAN;

BEGIN

   L_BIND_WS_SELECTION := FALSE;
   L_BIND_FIXED_WS_FLAG := FALSE;
   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;
   
   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
         RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;
   
  
   IF A_NEXT_ROWS = -1 THEN
      IF P_WSII_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_WSII_CURSOR);
         P_WSII_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_WSII_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
         RETURN(UNAPIGEN.DBERR_WHERECLAUSE);  
      ELSIF A_WHERE_CLAUSE = 'SELECTION' THEN
         IF UNAPIWS.P_SELECTION_CLAUSE IS NOT NULL THEN 
            IF INSTR(UPPER(UNAPIWS.P_SELECTION_CLAUSE), 'WHERE') <> 0 THEN       
               L_WHERE_CLAUSE := ','||UNAPIWS.P_SELECTION_CLAUSE|| ' AND a.ws = wsii.ws';  
               L_ORDER_BY_CLAUSE := ' ORDER BY wsii.ws, wsii.icnode, wsii.iinode';
            ELSE
               L_WHERE_CLAUSE := ','||UNAPIWS.P_SELECTION_CLAUSE|| ' WHERE a.ws = wsii.ws'; 
               L_ORDER_BY_CLAUSE := ' ORDER BY wsii.ws, wsii.icnode, wsii.iinode';
            END IF;
            L_BIND_WS_SELECTION := TRUE;
         ELSE
            L_WHERE_CLAUSE := ' WHERE a.ws = wsii.ws';  
            L_ORDER_BY_CLAUSE := ' ORDER BY wsii.ws, wsii.icnode, wsii.iinode';
         END IF;      
      ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
            L_BIND_FIXED_WS_FLAG := TRUE;
            L_WHERE_CLAUSE := 'WHERE wsii.ws = :ws_val '; 
            L_ORDER_BY_CLAUSE := ' ORDER BY wsii.ws, wsii.icnode, wsii.iinode';                             
      ELSE
         L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
         L_ORDER_BY_CLAUSE := ' ORDER BY wsii.ws, wsii.icnode, wsii.iinode';
      END IF;

      IF P_WSII_CURSOR IS NULL THEN
         P_WSII_CURSOR:= DBMS_SQL.OPEN_CURSOR;
      END IF;
                            
      L_SQL_STRING := 'SELECT b.sc, b.ic, b.icnode, b.ii, b.iinode, b.ie_version, b.iivalue, b.pos_x, ' ||
                      'b.pos_y, b.is_protected, b.mandatory, b.hidden, b.dsp_title, b.dsp_len, ' ||
                      'b.dsp_tp, b.dsp_rows, b.ii_class, b.log_hs, b.log_hs_details, b.allow_modify, ' ||
                      'b.active, b.lc, b.lc_version, b.ss, b.ar, wsii.ws, wsii.rownr ' || 
                      'FROM dd'||UNAPIGEN.P_DD||'.uvscii b, dd' || UNAPIGEN.P_DD || 
                      '.uvwsii wsii ' || L_WHERE_CLAUSE || ' AND b.sc = wsii.sc ' ||
                      'AND b.ic = wsii.ic AND b.icnode = wsii.icnode AND b.ii = wsii.ii AND ' ||
                      'b.iinode = wsii.iinode' || L_ORDER_BY_CLAUSE ;

      DBMS_SQL.PARSE(P_WSII_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      IF L_BIND_WS_SELECTION THEN
         FOR L_X IN 1..UNAPIWS.P_SELECTION_VAL_TAB.COUNT() LOOP
            DBMS_SQL.BIND_VARIABLE(P_WSII_CURSOR, ':col_val'||L_X , UNAPIWS.P_SELECTION_VAL_TAB(L_X)); 
         END LOOP;
      ELSIF L_BIND_FIXED_WS_FLAG THEN
         DBMS_SQL.BIND_VARIABLE(P_WSII_CURSOR, ':ws_val' , A_WHERE_CLAUSE); 
      END IF;
      DBMS_SQL.DEFINE_COLUMN(P_WSII_CURSOR, 1, L_SC, 20);
      DBMS_SQL.DEFINE_COLUMN(P_WSII_CURSOR, 2, L_IC, 20);
      DBMS_SQL.DEFINE_COLUMN(P_WSII_CURSOR, 3, L_ICNODE);
      DBMS_SQL.DEFINE_COLUMN(P_WSII_CURSOR, 4, L_II, 20);
      DBMS_SQL.DEFINE_COLUMN(P_WSII_CURSOR, 5, L_IINODE);
      DBMS_SQL.DEFINE_COLUMN(P_WSII_CURSOR, 6, L_IE_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(P_WSII_CURSOR, 7, L_IIVALUE, 2000);
      DBMS_SQL.DEFINE_COLUMN(P_WSII_CURSOR, 8, L_POS_X);
      DBMS_SQL.DEFINE_COLUMN(P_WSII_CURSOR, 9, L_POS_Y);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_WSII_CURSOR, 10, L_IS_PROTECTED, 1);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_WSII_CURSOR, 11, L_MANDATORY, 1);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_WSII_CURSOR, 12, L_HIDDEN, 1);
      DBMS_SQL.DEFINE_COLUMN(P_WSII_CURSOR, 13, L_DSP_TITLE, 40);
      DBMS_SQL.DEFINE_COLUMN(P_WSII_CURSOR, 14, L_DSP_LEN);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_WSII_CURSOR, 15, L_DSP_TP, 1);
      DBMS_SQL.DEFINE_COLUMN(P_WSII_CURSOR, 16, L_DSP_ROWS);
      DBMS_SQL.DEFINE_COLUMN(P_WSII_CURSOR, 17, L_II_CLASS, 2);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_WSII_CURSOR, 18, L_LOG_HS, 1);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_WSII_CURSOR, 19, L_LOG_HS_DETAILS, 1);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_WSII_CURSOR, 20, L_ALLOW_MODIFY, 1);  
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_WSII_CURSOR, 21, L_ACTIVE, 1);
      DBMS_SQL.DEFINE_COLUMN(P_WSII_CURSOR, 22, L_LC, 2);
      DBMS_SQL.DEFINE_COLUMN(P_WSII_CURSOR, 23, L_LC_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(P_WSII_CURSOR, 24, L_SS, 2);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_WSII_CURSOR, 25, L_AR, 1);
      DBMS_SQL.DEFINE_COLUMN(P_WSII_CURSOR, 26, L_WS, 20);
      DBMS_SQL.DEFINE_COLUMN(P_WSII_CURSOR, 27, L_ROWNR);
      L_RESULT := DBMS_SQL.EXECUTE(P_WSII_CURSOR);
   END IF;
   
   L_RESULT := DBMS_SQL.FETCH_ROWS(P_WSII_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_WSII_CURSOR, 1, L_SC);
      DBMS_SQL.COLUMN_VALUE(P_WSII_CURSOR, 2, L_IC);
      DBMS_SQL.COLUMN_VALUE(P_WSII_CURSOR, 3, L_ICNODE);
      DBMS_SQL.COLUMN_VALUE(P_WSII_CURSOR, 4, L_II);
      DBMS_SQL.COLUMN_VALUE(P_WSII_CURSOR, 5, L_IINODE);
      DBMS_SQL.COLUMN_VALUE(P_WSII_CURSOR, 6, L_IE_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_WSII_CURSOR, 7, L_IIVALUE);
      DBMS_SQL.COLUMN_VALUE(P_WSII_CURSOR, 8, L_POS_X);
      DBMS_SQL.COLUMN_VALUE(P_WSII_CURSOR, 9, L_POS_Y);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_WSII_CURSOR, 10, L_IS_PROTECTED);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_WSII_CURSOR, 11, L_MANDATORY);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_WSII_CURSOR, 12, L_HIDDEN);
      DBMS_SQL.COLUMN_VALUE(P_WSII_CURSOR, 13, L_DSP_TITLE);
      DBMS_SQL.COLUMN_VALUE(P_WSII_CURSOR, 14, L_DSP_LEN);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_WSII_CURSOR, 15, L_DSP_TP);
      DBMS_SQL.COLUMN_VALUE(P_WSII_CURSOR, 16, L_DSP_ROWS);
      DBMS_SQL.COLUMN_VALUE(P_WSII_CURSOR, 17, L_II_CLASS);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_WSII_CURSOR, 18, L_LOG_HS);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_WSII_CURSOR, 19, L_LOG_HS_DETAILS);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_WSII_CURSOR, 20, L_ALLOW_MODIFY);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_WSII_CURSOR, 21, L_ACTIVE);
      DBMS_SQL.COLUMN_VALUE(P_WSII_CURSOR, 22, L_LC);
      DBMS_SQL.COLUMN_VALUE(P_WSII_CURSOR, 23, L_LC_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_WSII_CURSOR, 24, L_SS);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_WSII_CURSOR, 25, L_AR);
      DBMS_SQL.COLUMN_VALUE(P_WSII_CURSOR, 26, L_WS);
      DBMS_SQL.COLUMN_VALUE(P_WSII_CURSOR, 27, L_ROWNR);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_SC(L_FETCHED_ROWS) := L_SC;
      A_IC(L_FETCHED_ROWS) := L_IC;
      A_ICNODE(L_FETCHED_ROWS) := L_ICNODE;
      A_II(L_FETCHED_ROWS) := L_II;
      A_IINODE(L_FETCHED_ROWS) := L_IINODE;
      A_IE_VERSION(L_FETCHED_ROWS) := L_IE_VERSION;
      A_IIVALUE(L_FETCHED_ROWS) := L_IIVALUE;
      A_POS_X(L_FETCHED_ROWS) := L_POS_X;
      A_POS_Y(L_FETCHED_ROWS) := L_POS_Y;
      A_IS_PROTECTED(L_FETCHED_ROWS) := L_IS_PROTECTED;
      A_MANDATORY(L_FETCHED_ROWS) := L_MANDATORY;
      A_HIDDEN(L_FETCHED_ROWS) := L_HIDDEN;
      A_DSP_TITLE(L_FETCHED_ROWS) := L_DSP_TITLE;
      A_DSP_LEN(L_FETCHED_ROWS) := L_DSP_LEN;
      A_DSP_TP(L_FETCHED_ROWS) := L_DSP_TP;
      A_DSP_ROWS(L_FETCHED_ROWS) := L_DSP_ROWS;
      A_II_CLASS(L_FETCHED_ROWS) := L_II_CLASS;
      A_LOG_HS(L_FETCHED_ROWS) := L_LOG_HS;
      A_LOG_HS_DETAILS(L_FETCHED_ROWS) := L_LOG_HS_DETAILS;
      A_ALLOW_MODIFY(L_FETCHED_ROWS) := L_ALLOW_MODIFY;
      A_ACTIVE(L_FETCHED_ROWS) := L_ACTIVE;
      A_LC(L_FETCHED_ROWS) := L_LC;
      A_LC_VERSION(L_FETCHED_ROWS) := L_LC_VERSION;
      A_SS(L_FETCHED_ROWS) := L_SS;
      A_AR(L_FETCHED_ROWS) := L_AR;
      A_WS(L_FETCHED_ROWS) := L_WS;
      A_ROWNR(L_FETCHED_ROWS) := L_ROWNR;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_WSII_CURSOR);
      END IF;
   END LOOP;

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
      DBMS_SQL.CLOSE_CURSOR(P_WSII_CURSOR);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      DBMS_SQL.CLOSE_CURSOR(P_WSII_CURSOR);
   ELSE   
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF; 

   
   
   
   

   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   L_SQLERRM := SQLERRM;
   UNAPIGEN.U4ROLLBACK;
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
           'GetWsInfoField', L_SQLERRM);
   UNAPIGEN.U4COMMIT;
   IF DBMS_SQL.IS_OPEN (P_WSII_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (P_WSII_CURSOR);
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETWSINFOFIELD;

FUNCTION SAVEWSMETHOD
(A_WS                   IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_ROWNR                IN     UNAPIGEN.NUM_TABLE_TYPE,     
 A_WS_MODIFY_FLAG       IN OUT UNAPIGEN.NUM_TABLE_TYPE,     
 A_ALARMS_HANDLED       IN     CHAR,                        
 A_SC                   IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_PG                   IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_PGNODE               IN     UNAPIGEN.LONG_TABLE_TYPE,    
 A_PA                   IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_PANODE               IN     UNAPIGEN.LONG_TABLE_TYPE,    
 A_ME                   IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_MENODE               IN OUT UNAPIGEN.LONG_TABLE_TYPE,    
 A_REANALYSIS           IN OUT UNAPIGEN.NUM_TABLE_TYPE,    
 A_MT_VERSION           IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_DESCRIPTION          IN     UNAPIGEN.VC40_TABLE_TYPE,    
 A_VALUE_F              IN     UNAPIGEN.FLOAT_TABLE_TYPE,   
 A_VALUE_S              IN     UNAPIGEN.VC40_TABLE_TYPE,    
 A_UNIT                 IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_EXEC_START_DATE      IN     UNAPIGEN.DATE_TABLE_TYPE,    
 A_EXEC_END_DATE        IN OUT UNAPIGEN.DATE_TABLE_TYPE,    
 A_EXECUTOR             IN OUT UNAPIGEN.VC20_TABLE_TYPE,    
 A_LAB                  IN OUT UNAPIGEN.VC20_TABLE_TYPE,    
 A_EQ                   IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_EQ_VERSION           IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_PLANNED_EXECUTOR     IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_PLANNED_EQ           IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_PLANNED_EQ_VERSION   IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_MANUALLY_ENTERED     IN     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_ALLOW_ADD            IN     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_ASSIGN_DATE          IN     UNAPIGEN.DATE_TABLE_TYPE,    
 A_ASSIGNED_BY          IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_MANUALLY_ADDED       IN     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_DELAY                IN     UNAPIGEN.NUM_TABLE_TYPE,     
 A_DELAY_UNIT           IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_FORMAT               IN     UNAPIGEN.VC40_TABLE_TYPE,    
 A_ACCURACY             IN     UNAPIGEN.FLOAT_TABLE_TYPE,   
 A_REAL_COST            IN     UNAPIGEN.VC40_TABLE_TYPE,    
 A_REAL_TIME            IN     UNAPIGEN.VC40_TABLE_TYPE,    
 A_CALIBRATION          IN     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_CONFIRM_COMPLETE     IN     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_AUTORECALC           IN     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_ME_RESULT_EDITABLE   IN     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_NEXT_CELL            IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_SOP                  IN     UNAPIGEN.VC40_TABLE_TYPE,    
 A_SOP_VERSION          IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_PLAUS_LOW            IN     UNAPIGEN.FLOAT_TABLE_TYPE,   
 A_PLAUS_HIGH           IN     UNAPIGEN.FLOAT_TABLE_TYPE,   
 A_WINSIZE_X            IN     UNAPIGEN.NUM_TABLE_TYPE,     
 A_WINSIZE_Y            IN     UNAPIGEN.NUM_TABLE_TYPE,     
 A_ME_CLASS             IN     UNAPIGEN.VC2_TABLE_TYPE,     
 A_LOG_HS               IN     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_LOG_HS_DETAILS       IN     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_LC                   IN     UNAPIGEN.VC2_TABLE_TYPE,     
 A_LC_VERSION           IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_MODIFY_FLAG          IN OUT UNAPIGEN.NUM_TABLE_TYPE,     
 A_NR_OF_ROWS           IN     NUMBER,                      
 A_NEXT_ROWS            IN     NUMBER,                      
 A_MODIFY_REASON        IN     VARCHAR2)                    
RETURN NUMBER IS

L_LC                VARCHAR2(2);
L_LC_VERSION        VARCHAR2(20);
L_SS                VARCHAR2(2);
L_LOG_HS            CHAR(1);
L_LOG_HS_DETAILS    CHAR(1);
L_ALLOW_MODIFY      CHAR(1);
L_ACTIVE            CHAR(1);
L_SEQ_NO            NUMBER;
L_MAX_ROWS          NUMBER; 
L_ERRM              VARCHAR2(255);
L_CALL_SAVESCME     BOOLEAN;

L_WHAT_DESCRIPTION  VARCHAR2(255);
L_HS_SEQ            INTEGER;
L_WT_VERSION        VARCHAR2(20);

L_CURRENT_SC           VARCHAR2(20);   
L_SVME_NR_OF_ROWS      NUMBER;
L_SVME_ORIG_ARRAY_NR   UNAPIGEN.NUM_TABLE_TYPE;

L_SVSC                 UNAPIGEN.VC20_TABLE_TYPE;
L_SVPG                 UNAPIGEN.VC20_TABLE_TYPE;
L_SVPGNODE             UNAPIGEN.LONG_TABLE_TYPE;
L_SVPA                 UNAPIGEN.VC20_TABLE_TYPE;
L_SVPANODE             UNAPIGEN.LONG_TABLE_TYPE;
L_SVME                 UNAPIGEN.VC20_TABLE_TYPE;
L_SVMENODE             UNAPIGEN.LONG_TABLE_TYPE;
L_SVMT_VERSION         UNAPIGEN.VC20_TABLE_TYPE;
L_SVDESCRIPTION        UNAPIGEN.VC40_TABLE_TYPE;   
L_SVVALUE_F            UNAPIGEN.FLOAT_TABLE_TYPE;  
L_SVVALUE_S            UNAPIGEN.VC40_TABLE_TYPE;   
L_SVUNIT               UNAPIGEN.VC20_TABLE_TYPE;   
L_SVEXEC_START_DATE    UNAPIGEN.DATE_TABLE_TYPE;   
L_SVEXEC_END_DATE      UNAPIGEN.DATE_TABLE_TYPE;   
L_SVEXECUTOR           UNAPIGEN.VC20_TABLE_TYPE;   
L_SVLAB                UNAPIGEN.VC20_TABLE_TYPE;   
L_SVEQ                 UNAPIGEN.VC20_TABLE_TYPE;   
L_SVEQ_VERSION         UNAPIGEN.VC20_TABLE_TYPE;   
L_SVPLANNED_EXECUTOR   UNAPIGEN.VC20_TABLE_TYPE;   
L_SVPLANNED_EQ         UNAPIGEN.VC20_TABLE_TYPE;   
L_SVPLANNED_EQ_VERSION UNAPIGEN.VC20_TABLE_TYPE;   
L_SVMANUALLY_ENTERED   UNAPIGEN.CHAR1_TABLE_TYPE;  
L_SVALLOW_ADD          UNAPIGEN.CHAR1_TABLE_TYPE;  
L_SVASSIGN_DATE        UNAPIGEN.DATE_TABLE_TYPE;   
L_SVASSIGNED_BY        UNAPIGEN.VC20_TABLE_TYPE;   
L_SVMANUALLY_ADDED     UNAPIGEN.CHAR1_TABLE_TYPE;  
L_SVDELAY              UNAPIGEN.NUM_TABLE_TYPE;    
L_SVDELAY_UNIT         UNAPIGEN.VC20_TABLE_TYPE;   
L_SVFORMAT             UNAPIGEN.VC40_TABLE_TYPE;   
L_SVACCURACY           UNAPIGEN.FLOAT_TABLE_TYPE;  
L_SVREAL_COST          UNAPIGEN.VC40_TABLE_TYPE;   
L_SVREAL_TIME          UNAPIGEN.VC40_TABLE_TYPE;   
L_SVCALIBRATION        UNAPIGEN.CHAR1_TABLE_TYPE;  
L_SVCONFIRM_COMPLETE   UNAPIGEN.CHAR1_TABLE_TYPE;  
L_SVAUTORECALC         UNAPIGEN.CHAR1_TABLE_TYPE;  
L_SVME_RESULT_EDITABLE UNAPIGEN.CHAR1_TABLE_TYPE;  
L_SVNEXT_CELL          UNAPIGEN.VC20_TABLE_TYPE;   
L_SVSOP                UNAPIGEN.VC40_TABLE_TYPE;   
L_SVSOP_VERSION        UNAPIGEN.VC20_TABLE_TYPE;   
L_SVPLAUS_LOW          UNAPIGEN.FLOAT_TABLE_TYPE;  
L_SVPLAUS_HIGH         UNAPIGEN.FLOAT_TABLE_TYPE;  
L_SVWINSIZE_X          UNAPIGEN.NUM_TABLE_TYPE;    
L_SVWINSIZE_Y          UNAPIGEN.NUM_TABLE_TYPE;    
L_SVREANALYSIS         UNAPIGEN.NUM_TABLE_TYPE;    
L_SVME_CLASS           UNAPIGEN.VC2_TABLE_TYPE;    
L_SVLOG_HS             UNAPIGEN.CHAR1_TABLE_TYPE;  
L_SVLOG_HS_DETAILS     UNAPIGEN.CHAR1_TABLE_TYPE;  
L_SVLC                 UNAPIGEN.VC2_TABLE_TYPE;    
L_SVLC_VERSION         UNAPIGEN.VC20_TABLE_TYPE;    
L_SVMODIFY_FLAG        UNAPIGEN.NUM_TABLE_TYPE;    

L_SC                   VARCHAR2(20);
L_PG                   VARCHAR2(20);
L_PGNODE               NUMBER;
L_PA                   VARCHAR2(20);
L_PANODE               NUMBER;
L_ME                   VARCHAR2(20);
L_MENODE               NUMBER;
L_GK                   VARCHAR2(20); 

CURSOR L_MAX_ROWS_CURSOR IS
SELECT MAX_ROWS 
FROM UTWS
WHERE WS = L_WS;

CURSOR L_WSME_CURSOR IS
SELECT SC, PG, PGNODE, PA, PANODE, ME, MENODE  
FROM UTWSME
WHERE WS = L_WS;

CURSOR L_MODIFIEDME_CURSOR IS
   
   (SELECT A.SC SC, A.PG PG, A.PGNODE PGNODE, A.PA PA, A.PANODE PANODE, 
           A.ME ME, A.MENODE MENODE, A.REANALYSIS REANALYSIS, 'DELETE' ACTION
    FROM UTWSME A
    WHERE A.WS = L_WS
    AND ROWNR < 0
   MINUS
    SELECT A.SC SC, A.PG PG, A.PGNODE PGNODE, A.PA PA, A.PANODE PANODE, 
           A.ME ME, A.MENODE MENODE, A.REANALYSIS REANALYSIS, 'DELETE' ACTION
    FROM UTWSME A
    WHERE A.WS = L_WS
    AND ROWNR > 0)
   UNION ALL
   
   (SELECT A.SC SC, A.PG PG, A.PGNODE PGNODE, A.PA PA, A.PANODE PANODE, 
           A.ME ME, A.MENODE MENODE, A.REANALYSIS REANALYSIS, 'NEW' ACTION
    FROM UTWSME A
    WHERE A.WS = L_WS
    AND ROWNR > 0
   MINUS
    SELECT A.SC SC, A.PG PG, A.PGNODE PGNODE, A.PA PA, A.PANODE PANODE, 
           A.ME ME, A.MENODE MENODE, A.REANALYSIS REANALYSIS, 'NEW' ACTION
    FROM UTWSME A
    WHERE A.WS = L_WS
    AND ROWNR < 0);

   
   
   
   FUNCTION SPECIALSAVE1SCMEGROUPKEY(L_SC VARCHAR2, L_PG VARCHAR2, L_PGNODE NUMBER,
                                     L_PA VARCHAR2, L_PANODE NUMBER, L_ME VARCHAR2,
                                     L_MENODE NUMBER, L_GK VARCHAR2, L_WS VARCHAR2,
                                     L_MOD_FLAG VARCHAR2)
   RETURN NUMBER IS

   L_ME_CURSOR            INTEGER;
   L_NEW_SEQ              NUMBER;
   L_GK_HANDLE            BOOLEAN;
   L_GK_FOUND             BOOLEAN;
   L_SEQ                  NUMBER;
   L_ME_LOG_HS            CHAR(1);
   L_ME_LOG_HS_DETAILS    CHAR(1);

   CURSOR L_GK_CURSOR IS
      SELECT VALUE
      FROM UTSCMEGK
      WHERE SC = L_SC
         AND PG = L_PG
         AND PGNODE = L_PGNODE
         AND PA = L_PA
         AND PANODE = L_PANODE
         AND ME = L_ME
         AND MENODE = L_MENODE
         AND GK = L_GK
         AND VALUE = L_WS              
      ORDER BY GKSEQ;

   CURSOR L_SCME_CURSOR IS
      SELECT LOG_HS, LOG_HS_DETAILS
      FROM UTSCME
      WHERE SC     = L_SC
        AND PG     = L_PG
        AND PGNODE = L_PGNODE
        AND PA     = L_PA
        AND PANODE = L_PANODE
        AND ME     = L_ME
        AND MENODE = L_MENODE;

   BEGIN
      OPEN L_SCME_CURSOR;
      FETCH L_SCME_CURSOR INTO L_ME_LOG_HS, L_ME_LOG_HS_DETAILS;
      IF L_SCME_CURSOR%NOTFOUND THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
      END IF;
      CLOSE L_SCME_CURSOR;

      IF (L_ME_LOG_HS = '1') AND (UNAPIGEN.P_LOG_GK_HS = '1') THEN
         INSERT INTO UTSCMEHS(SC, PG, PGNODE, PA, PANODE, ME, MENODE, WHO, WHO_DESCRIPTION, WHAT,
                              WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES(L_SC, L_PG, L_PGNODE, L_PA, L_PANODE, L_ME, L_MENODE, UNAPIGEN.P_USER, 
                UNAPIGEN.P_USER_DESCRIPTION, 'MeGroupKeyUpdated', 
                'method "'||L_ME||'" group keys are updated.', 
                CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;

      IF L_ME_LOG_HS_DETAILS = '1' THEN
         L_HS_SEQ := L_HS_SEQ + 1;
         INSERT INTO UTSCMEHSDETAILS(SC, PG, PGNODE, PA, PANODE, ME, MENODE, TR_SEQ, EV_SEQ, SEQ, DETAILS)
         VALUES(L_SC, L_PG, L_PGNODE, L_PA, L_PANODE, L_ME, L_MENODE, 
                UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_SEQ, 
                'method "'||L_ME||'" group keys are updated.');
      END IF;

      L_GK_HANDLE := TRUE;

      L_ME_CURSOR := DBMS_SQL.OPEN_CURSOR;
      FOR L_MEGK IN L_GK_CURSOR LOOP
         L_GK_FOUND := FALSE;

         IF L_MEGK.VALUE = L_WS THEN
            L_GK_HANDLE := FALSE;
            L_GK_FOUND := TRUE;             
            EXIT;
         END IF;

         IF L_GK_FOUND AND L_MOD_FLAG = 'DELETE' THEN
            DELETE FROM UTSCMEGK
            WHERE SC = L_SC
               AND PG = L_PG
               AND PGNODE = L_PGNODE
               AND PA = L_PA
               AND PANODE = L_PANODE
               AND ME = L_ME
               AND MENODE = L_MENODE
               AND GK = L_GK
               AND VALUE = L_MEGK.VALUE;

            IF L_MEGK.VALUE IS NULL THEN
               DELETE FROM UTSCMEGK
               WHERE SC = L_SC
                 AND PG = L_PG
                 AND PGNODE = L_PGNODE
                 AND PA = L_PA
                 AND PANODE = L_PANODE
                 AND ME = L_ME
                 AND MENODE = L_MENODE
                 AND GK = L_GK
                 AND VALUE IS NULL;
            END IF;

            IF L_ME_LOG_HS_DETAILS = '1' THEN
               L_HS_SEQ := L_HS_SEQ + 1;
               INSERT INTO UTSCMEHSDETAILS(SC, PG, PGNODE, PA, PANODE, ME, MENODE, TR_SEQ, EV_SEQ, SEQ, DETAILS)
               VALUES(L_SC, L_PG, L_PGNODE, L_PA, L_PANODE, L_ME, L_MENODE, 
                      UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_SEQ, 
                      'Groupkey "'||L_GK||'" with value "'||L_MEGK.VALUE||'" is removed from method "'||L_ME||'".');
            END IF;   

            L_SQL_STRING := 'DELETE FROM utscmegk' || L_GK ||
                            ' WHERE sc = ''' || REPLACE(L_SC, '''', '''''') || 
                            ''' AND pg = ''' || REPLACE(L_PG, '''', '''''') || 
                            ''' AND pgnode = ''' || L_PGNODE ||
                            ''' AND pa = ''' || REPLACE(L_PA, '''', '''''') || 
                            ''' AND panode = ''' || L_PANODE ||
                            ''' AND me = ''' || REPLACE(L_ME, '''', '''''') || 
                            ''' AND menode = ''' || L_MENODE || ''' AND ' ||
                            L_GK || '='''|| REPLACE(L_MEGK.VALUE, '''', '''''') ||''''; 
            DBMS_SQL.PARSE(L_ME_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
            L_RESULT := DBMS_SQL.EXECUTE(L_ME_CURSOR);
         END IF;
      END LOOP;

      IF L_GK_HANDLE AND L_MOD_FLAG = 'INSERT' THEN

         SELECT NVL(MAX(GKSEQ), 0) + 1
         INTO L_SEQ
         FROM UTSCMEGK
         WHERE SC = L_SC
           AND PG = L_PG
           AND PGNODE = L_PGNODE
           AND PA = L_PA
           AND PANODE = L_PANODE
           AND ME = L_ME
           AND MENODE = L_MENODE
           AND GK = L_GK;

         IF L_SEQ = 1 THEN
            L_SEQ := 500;
         END IF;   

         INSERT INTO UTSCMEGK
         (SC, PG, PGNODE, PA, PANODE, ME, MENODE, 
          GK, GKSEQ, VALUE)
         VALUES
         (L_SC, L_PG, L_PGNODE, L_PA, L_PANODE, L_ME, L_MENODE,
          L_GK, L_SEQ, L_WS);

         IF L_ME_LOG_HS_DETAILS = '1' THEN
            L_HS_SEQ := L_HS_SEQ + 1;
            INSERT INTO UTSCMEHSDETAILS(SC, PG, PGNODE, PA, PANODE, ME, MENODE, TR_SEQ, EV_SEQ, SEQ, DETAILS)
            VALUES(L_SC, L_PG, L_PGNODE, L_PA, L_PANODE, L_ME, L_MENODE, 
                   UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_SEQ, 
                   'Groupkey "'||L_GK||'" is added to method "'||L_ME||'", value is "'||L_WS||'".');
         END IF;   

         IF NVL(L_WS, ' ') <> ' ' THEN
            L_SQL_STRING := 'INSERT INTO utscmegk' || L_GK ||
                            '('||L_GK||', sc, pg, pgnode, pa, panode, me, menode)'||
                            ' VALUES(''' || REPLACE(L_WS, '''', '''''') || ''','''|| 
                            REPLACE(L_SC, '''', '''''') ||''','''|| REPLACE(L_PG, '''', '''''') || ''',''' 
                            || L_PGNODE || ''',''' || REPLACE(L_PA, '''', '''''') || ''',''' 
                            || L_PANODE || ''',''' || REPLACE(L_ME, '''', '''''') || ''',''' 
                            || L_MENODE || ''')';

            DBMS_SQL.PARSE(L_ME_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
            L_RESULT := DBMS_SQL.EXECUTE(L_ME_CURSOR);
         END IF;

      ELSIF NOT L_GK_HANDLE AND L_MOD_FLAG = 'DELETE' THEN
         DELETE FROM UTSCMEGK
         WHERE SC = L_SC
            AND PG = L_PG
            AND PGNODE = L_PGNODE
            AND PA = L_PA
            AND PANODE = L_PANODE
            AND ME = L_ME
            AND MENODE = L_MENODE
            AND GK = L_GK
            AND VALUE = L_WS;

         L_SQL_STRING := 'DELETE FROM utscmegk' || L_GK ||
                         ' WHERE sc = ''' || REPLACE(L_SC, '''', '''''') || 
                         ''' AND pg = ''' || REPLACE(L_PG, '''', '''''') || 
                         ''' AND pgnode = ''' || L_PGNODE ||
                         ''' AND pa = ''' || REPLACE(L_PA, '''', '''''') || 
                         ''' AND panode = ''' || L_PANODE ||
                         ''' AND me = ''' || REPLACE(L_ME, '''', '''''') || 
                         ''' AND menode = ''' || L_MENODE || ''' AND ' ||
                         L_GK || '='''|| REPLACE(L_WS, '''', '''''') ||''''; 
         DBMS_SQL.PARSE(L_ME_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         L_RESULT := DBMS_SQL.EXECUTE(L_ME_CURSOR);
      END IF;

      DBMS_SQL.CLOSE_CURSOR(L_ME_CURSOR);

      RETURN(UNAPIGEN.DBERR_SUCCESS);

   EXCEPTION
   WHEN DUP_VAL_ON_INDEX THEN
      IF DBMS_SQL.IS_OPEN(L_ME_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(L_ME_CURSOR);
      END IF;
      IF L_SCME_CURSOR%ISOPEN THEN
         CLOSE L_SCME_CURSOR;
      END IF;
      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SUCCESS;
      RETURN(UNAPIGEN.DBERR_SUCCESS);
   WHEN OTHERS THEN
    
      IF DBMS_SQL.IS_OPEN(L_ME_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(L_ME_CURSOR);
      END IF;
      IF L_SCME_CURSOR%ISOPEN THEN
         CLOSE L_SCME_CURSOR;
      END IF;
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SUCCESS;
      RETURN(UNAPIGEN.DBERR_SUCCESS);
   END SPECIALSAVE1SCMEGROUPKEY;
      

BEGIN

   L_HS_SEQ := 0;
   L_ERRM := NULL;
   L_SQLERRM := NULL;
   L_RET_CODE := UNAPIGEN.DBERR_SUCCESS; 
   L_GK := 'worksheets';
   
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   
   
   IF P_WS_DETAILS_CHG_TR_SEQ <> UNAPIGEN.P_TR_SEQ THEN
      P_WS_DETAILS_CHG := FALSE;   
      P_WS_DETAILS_CHG_TR_SEQ := UNAPIGEN.P_TR_SEQ;
      P_WSDETAILSUPDATED_EVINSERTED := '0';
   END IF;

   IF NVL(A_NEXT_ROWS, 0) = 0 THEN
      IF NVL(P_SAVEWSME_CALLS, 0) <> 0 THEN
         L_SQLERRM := 'SaveWsMethod termination call never called for previous worksheet ! (a_next_rows=-1) a_next_rows='||
                      TO_CHAR(A_NEXT_ROWS);
         RAISE STPERROR;
      END IF;
      P_SAVEWSME_CALLS := 1;
   ELSIF NVL(A_NEXT_ROWS, 0) = -1 THEN
      P_SAVEWSME_CALLS := NVL(P_SAVEWSME_CALLS, 0) + 1;
   ELSIF NVL(A_NEXT_ROWS, 0) = 1 THEN
      IF NVL(P_SAVEWSME_CALLS, 0) = 0 THEN   
         L_SQLERRM := 'SaveWsMethod startup call never called ! (a_next_rows=0)';
         RAISE STPERROR;   
      END IF;
      IF NVL(UNAPIGEN.P_TXN_LEVEL, 0) <= 1 THEN   
         L_SQLERRM := 'SaveWsMethod called with a_next_rows=1 in a non MST transaction !';
         RAISE STPERROR;   
      END IF;
      P_SAVEWSME_CALLS := NVL(P_SAVEWSME_CALLS, 0) + 1;      
   ELSE
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NEXTROWS;
      RAISE STPERROR;
   END IF;         
   IF P_SAVEWSME_CALLS = 1 THEN
      L_WS := A_WS(1);
      IF NVL(L_WS, ' ') = ' ' THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
      END IF;
      P_SAVEWSME_TR_SEQ := UNAPIGEN.P_TR_SEQ;
   ELSE
      IF UNAPIGEN.P_TR_SEQ <> P_SAVEWSME_TR_SEQ THEN
         L_SQLERRM := 'Successive calls of SaveWsMethod not in the same transaction !';
         RAISE STPERROR;   
      END IF;
   END IF;

   
   L_RET_CODE := UNAPIAUT.GETWSAUTHORISATION(L_WS, L_WT_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS, L_LOG_HS_DETAILS);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;
   
   
   
   
   
   IF L_WT_VERSION IS NULL THEN
      SELECT WT_VERSION
      INTO L_WT_VERSION
      FROM UTWS
      WHERE WS = L_WS;
   END IF;



   
   L_RET_CODE := UNAPIGEN.GETNEXTEVENTSEQNR(L_EV_SEQ_NR);
   IF L_RET_CODE <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   
   
   
   
   
   IF NVL(P_SAVEWSME_CALLS, 0) = 1 THEN     
      IF A_NR_OF_ROWS = 0 THEN
         OPEN L_WSME_CURSOR;
         LOOP
            FETCH L_WSME_CURSOR INTO L_SC, L_PG, L_PGNODE, L_PA, L_PANODE, L_ME, L_MENODE;
            L_RET_CODE := SPECIALSAVE1SCMEGROUPKEY(L_SC, L_PG, L_PGNODE, L_PA, L_PANODE, L_ME, L_MENODE, 
                                                   L_GK, L_WS, 'DELETE');
            EXIT WHEN L_WSME_CURSOR%NOTFOUND;
         END LOOP;
         CLOSE L_WSME_CURSOR;
      
         
         

         UPDATE UTWSME
         SET ROWNR = -ROWNR
         WHERE WS = L_WS;
      ELSIF A_WS_MODIFY_FLAG(1) = UNAPIGEN.MOD_FLAG_CREATE THEN
         OPEN L_WSME_CURSOR;
         LOOP
            FETCH L_WSME_CURSOR INTO L_SC, L_PG, L_PGNODE, L_PA, L_PANODE, L_ME, L_MENODE;
            L_RET_CODE := SPECIALSAVE1SCMEGROUPKEY(L_SC, L_PG, L_PGNODE, L_PA, L_PANODE, L_ME, L_MENODE, 
                                                   L_GK, L_WS, 'DELETE');
            EXIT WHEN L_WSME_CURSOR%NOTFOUND;
         END LOOP;
         CLOSE L_WSME_CURSOR;
      
         
         

         UPDATE UTWSME
         SET ROWNR = -ROWNR
         WHERE WS = L_WS;
      END IF;       
   END IF;

   
   OPEN L_MAX_ROWS_CURSOR;
   FETCH L_MAX_ROWS_CURSOR INTO L_MAX_ROWS;
   IF L_MAX_ROWS_CURSOR%NOTFOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      CLOSE L_MAX_ROWS_CURSOR;
      RAISE STPERROR;
   END IF;
   CLOSE L_MAX_ROWS_CURSOR;


   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP 

      IF NVL(A_WS(L_SEQ_NO), ' ') = ' ' THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
      END IF;

      IF NVL(A_ROWNR(L_SEQ_NO), -1) = -1 THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
      ELSE
         IF NVL(A_ROWNR(L_SEQ_NO), -1) > L_MAX_ROWS THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_MAXROWSOVERFLOW;
            RAISE STPERROR;
         END IF;
      END IF;

      IF A_WS_MODIFY_FLAG(L_SEQ_NO) <> UNAPIGEN.MOD_FLAG_DELETE THEN
      
         IF NVL(A_SC(L_SEQ_NO), ' ') = ' ' THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
            RAISE STPERROR;
         END IF;

         IF NVL(A_PG(L_SEQ_NO), ' ') = ' ' THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
            RAISE STPERROR;
         END IF;

         IF NVL(A_PGNODE(L_SEQ_NO), -1) = -1 THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
            RAISE STPERROR;
         END IF;

         IF NVL(A_PA(L_SEQ_NO),' ') = ' ' THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
            RAISE STPERROR;
         END IF;

         IF NVL(A_PANODE(L_SEQ_NO), -1) = -1 THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
            RAISE STPERROR;
         END IF;

         IF NVL(A_ME(L_SEQ_NO), ' ') = ' ' THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
            RAISE STPERROR;
         END IF;

         IF NVL(A_MENODE(L_SEQ_NO), -1) = -1 THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
            RAISE STPERROR;
         END IF;

         IF NVL(A_REANALYSIS(L_SEQ_NO), -1) = -1 THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
            RAISE STPERROR;
         END IF;
         
      END IF;   

        
      
      


      P_PREV_MOD_FLAG := P_CURR_MOD_FLAG;

      IF A_WS_MODIFY_FLAG(L_SEQ_NO) = UNAPIGEN.MOD_FLAG_CREATE THEN
         P_CURR_MOD_FLAG := TRUE;
      ELSE
         P_CURR_MOD_FLAG := FALSE;     
      END IF;
      IF L_SEQ_NO <> 1 OR A_NEXT_ROWS = 1 THEN
         IF P_PREV_MOD_FLAG <> P_CURR_MOD_FLAG THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INVALWSMODFLAG;
            RAISE STPERROR;
         END IF;
      END IF;

        
      
      
      


      IF A_WS_MODIFY_FLAG(L_SEQ_NO) = UNAPIGEN.MOD_FLAG_CREATE THEN

         INSERT INTO UTWSME(WS, ROWNR, SC, PG, PGNODE, PA, PANODE, ME, MENODE, REANALYSIS) 
         VALUES (A_WS(L_SEQ_NO), A_ROWNR(L_SEQ_NO), A_SC(L_SEQ_NO), A_PG(L_SEQ_NO), A_PGNODE(L_SEQ_NO),
                 A_PA(L_SEQ_NO), A_PANODE(L_SEQ_NO), A_ME(L_SEQ_NO), A_MENODE(L_SEQ_NO), A_REANALYSIS(L_SEQ_NO)); 
         P_WS_DETAILS_CHG := TRUE;

         L_RET_CODE := SPECIALSAVE1SCMEGROUPKEY(A_SC(L_SEQ_NO), A_PG(L_SEQ_NO), A_PGNODE(L_SEQ_NO),
                       A_PA(L_SEQ_NO), A_PANODE(L_SEQ_NO), A_ME(L_SEQ_NO), A_MENODE(L_SEQ_NO), L_GK, A_WS(L_SEQ_NO),
                       'INSERT'); 
                      
      ELSIF A_WS_MODIFY_FLAG(L_SEQ_NO) = UNAPIGEN.MOD_FLAG_INSERT THEN

         INSERT INTO UTWSME(WS, ROWNR, SC, PG, PGNODE, PA, PANODE, ME, MENODE, REANALYSIS) 
         VALUES (A_WS(L_SEQ_NO), A_ROWNR(L_SEQ_NO), A_SC(L_SEQ_NO), A_PG(L_SEQ_NO), A_PGNODE(L_SEQ_NO),
                 A_PA(L_SEQ_NO), A_PANODE(L_SEQ_NO), A_ME(L_SEQ_NO), A_MENODE(L_SEQ_NO), A_REANALYSIS(L_SEQ_NO)); 
         P_WS_DETAILS_CHG := TRUE; 
         
         L_RET_CODE := SPECIALSAVE1SCMEGROUPKEY(A_SC(L_SEQ_NO), A_PG(L_SEQ_NO), A_PGNODE(L_SEQ_NO),
                       A_PA(L_SEQ_NO), A_PANODE(L_SEQ_NO), A_ME(L_SEQ_NO), A_MENODE(L_SEQ_NO), L_GK, A_WS(L_SEQ_NO),
                       'INSERT');

      ELSIF A_WS_MODIFY_FLAG(L_SEQ_NO) = UNAPIGEN.MOD_FLAG_UPDATE THEN

         OPEN L_WSME_CURSOR;
         FETCH L_WSME_CURSOR INTO L_SC, L_PG, L_PGNODE, L_PA, L_PANODE, L_ME, L_MENODE;
            IF L_WSME_CURSOR%NOTFOUND THEN
               UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
               RAISE STPERROR;
               CLOSE L_WSME_CURSOR;
            END IF;
         CLOSE L_WSME_CURSOR;
      
         L_RET_CODE := SPECIALSAVE1SCMEGROUPKEY(L_SC, L_PG, L_PGNODE,
                       L_PA, L_PANODE, L_ME, L_MENODE, L_GK, A_WS(L_SEQ_NO), 'DELETE');

         UPDATE UTWSME 
         SET SC = A_SC(L_SEQ_NO),
             PG = A_PG(L_SEQ_NO),
             PGNODE = A_PGNODE(L_SEQ_NO),
             PA = A_PA(L_SEQ_NO),
             PANODE = A_PANODE(L_SEQ_NO),
             ME = A_ME(L_SEQ_NO),
             MENODE = A_MENODE(L_SEQ_NO),
             REANALYSIS = A_REANALYSIS(L_SEQ_NO)
         WHERE WS = A_WS(L_SEQ_NO)
           AND ROWNR = A_ROWNR(L_SEQ_NO)
           AND ME = A_ME(L_SEQ_NO);
         P_WS_DETAILS_CHG := TRUE;

         IF SQL%ROWCOUNT < 1 THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
            RAISE STPERROR;
         END IF;
         
         L_RET_CODE := SPECIALSAVE1SCMEGROUPKEY(A_SC(L_SEQ_NO), A_PG(L_SEQ_NO), A_PGNODE(L_SEQ_NO),
                      A_PA(L_SEQ_NO), A_PANODE(L_SEQ_NO), A_ME(L_SEQ_NO), A_MENODE(L_SEQ_NO), L_GK, A_WS(L_SEQ_NO), 
                      'INSERT');

      ELSIF A_WS_MODIFY_FLAG(L_SEQ_NO) = UNAPIGEN.MOD_FLAG_DELETE THEN

         DELETE UTWSME 
         WHERE WS = A_WS(L_SEQ_NO)
           AND ROWNR = A_ROWNR(L_SEQ_NO);

         
         
         
         
         
         L_RET_CODE := SPECIALSAVE1SCMEGROUPKEY(A_SC(L_SEQ_NO), A_PG(L_SEQ_NO), A_PGNODE(L_SEQ_NO),
                       A_PA(L_SEQ_NO), A_PANODE(L_SEQ_NO), A_ME(L_SEQ_NO), A_MENODE(L_SEQ_NO), L_GK, A_WS(L_SEQ_NO),
                       'DELETE');

      ELSIF A_WS_MODIFY_FLAG(L_SEQ_NO) = UNAPIGEN.DBERR_SUCCESS THEN
         NULL;         
      ELSE
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INVALWSMODFLAG;    
         RAISE STPERROR;
      END IF;

      A_WS_MODIFY_FLAG(L_SEQ_NO) := UNAPIGEN.DBERR_SUCCESS;
   END LOOP;


   


   IF P_WS_DETAILS_CHG THEN
      UPDATE UTWS
      SET ALLOW_MODIFY = '#'
      WHERE WS = L_WS;

      IF SQL%ROWCOUNT < 1 THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
         RAISE STPERROR;
      END IF;
   END IF;   
   
     
   
   
   L_CALL_SAVESCME := FALSE;
   L_CURRENT_SC := '';
   L_SVME_NR_OF_ROWS := 0;
   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      IF A_MODIFY_FLAG(L_SEQ_NO)<>UNAPIGEN.DBERR_SUCCESS THEN
         L_SVME_NR_OF_ROWS := L_SVME_NR_OF_ROWS + 1; 
         L_SVSC(L_SVME_NR_OF_ROWS) := A_SC(L_SEQ_NO);
         L_SVPG(L_SVME_NR_OF_ROWS) := A_PG(L_SEQ_NO);
         L_SVPGNODE(L_SVME_NR_OF_ROWS) := A_PGNODE(L_SEQ_NO);
         L_SVPA(L_SVME_NR_OF_ROWS) := A_PA(L_SEQ_NO);                
         L_SVPANODE(L_SVME_NR_OF_ROWS) := A_PANODE(L_SEQ_NO);            
         L_SVME(L_SVME_NR_OF_ROWS) := A_ME(L_SEQ_NO);                
         L_SVMENODE(L_SVME_NR_OF_ROWS) := A_MENODE(L_SEQ_NO);  
         L_SVMT_VERSION(L_SVME_NR_OF_ROWS) := A_MT_VERSION(L_SEQ_NO);
         L_SVDESCRIPTION(L_SVME_NR_OF_ROWS) := A_DESCRIPTION(L_SEQ_NO);       
         L_SVVALUE_F(L_SVME_NR_OF_ROWS) := A_VALUE_F(L_SEQ_NO);           
         L_SVVALUE_S(L_SVME_NR_OF_ROWS) := A_VALUE_S(L_SEQ_NO);          
         L_SVUNIT(L_SVME_NR_OF_ROWS) := A_UNIT(L_SEQ_NO);              
         L_SVEXEC_START_DATE(L_SVME_NR_OF_ROWS) := A_EXEC_START_DATE(L_SEQ_NO);   
         L_SVEXEC_END_DATE(L_SVME_NR_OF_ROWS) := A_EXEC_END_DATE(L_SEQ_NO); 
         L_SVEXECUTOR(L_SVME_NR_OF_ROWS) := A_EXECUTOR(L_SEQ_NO);          
         L_SVLAB(L_SVME_NR_OF_ROWS) := A_LAB(L_SEQ_NO); 
         L_SVEQ(L_SVME_NR_OF_ROWS) := A_EQ(L_SVME_NR_OF_ROWS);                
         L_SVEQ_VERSION(L_SVME_NR_OF_ROWS) := A_EQ_VERSION(L_SVME_NR_OF_ROWS);
         L_SVPLANNED_EXECUTOR(L_SVME_NR_OF_ROWS) := A_PLANNED_EXECUTOR(L_SEQ_NO);  
         L_SVPLANNED_EQ(L_SVME_NR_OF_ROWS) := A_PLANNED_EQ(L_SEQ_NO);        
         L_SVPLANNED_EQ_VERSION(L_SVME_NR_OF_ROWS) := A_PLANNED_EQ_VERSION(L_SEQ_NO);
         L_SVMANUALLY_ENTERED(L_SVME_NR_OF_ROWS) := A_MANUALLY_ENTERED(L_SEQ_NO);  
         L_SVALLOW_ADD(L_SVME_NR_OF_ROWS) := A_ALLOW_ADD(L_SEQ_NO);         
         L_SVASSIGN_DATE(L_SVME_NR_OF_ROWS) := A_ASSIGN_DATE(L_SEQ_NO);       
         L_SVASSIGNED_BY(L_SVME_NR_OF_ROWS) := A_ASSIGNED_BY(L_SEQ_NO);       
         L_SVMANUALLY_ADDED(L_SVME_NR_OF_ROWS) := A_MANUALLY_ADDED(L_SEQ_NO);    
         L_SVDELAY(L_SVME_NR_OF_ROWS) := A_DELAY(L_SEQ_NO);             
         L_SVDELAY_UNIT(L_SVME_NR_OF_ROWS) := A_DELAY_UNIT(L_SEQ_NO);        
         L_SVFORMAT(L_SVME_NR_OF_ROWS) := A_FORMAT(L_SEQ_NO);            
         L_SVACCURACY(L_SVME_NR_OF_ROWS) := A_ACCURACY(L_SEQ_NO);          
         L_SVREAL_COST(L_SVME_NR_OF_ROWS) := A_REAL_COST(L_SEQ_NO);         
         L_SVREAL_TIME(L_SVME_NR_OF_ROWS) := A_REAL_TIME(L_SEQ_NO);         
         L_SVCALIBRATION(L_SVME_NR_OF_ROWS) := A_CALIBRATION(L_SEQ_NO);       
         L_SVCONFIRM_COMPLETE(L_SVME_NR_OF_ROWS) := A_CONFIRM_COMPLETE(L_SEQ_NO); 
         L_SVAUTORECALC(L_SVME_NR_OF_ROWS) := A_AUTORECALC(L_SEQ_NO);        
         L_SVME_RESULT_EDITABLE(L_SVME_NR_OF_ROWS) := A_ME_RESULT_EDITABLE(L_SEQ_NO);        
         L_SVNEXT_CELL(L_SVME_NR_OF_ROWS) := A_NEXT_CELL(L_SEQ_NO);         
         L_SVSOP(L_SVME_NR_OF_ROWS) := A_SOP(L_SEQ_NO);   
         L_SVSOP_VERSION(L_SVME_NR_OF_ROWS) := A_SOP_VERSION(L_SEQ_NO);
         L_SVPLAUS_LOW(L_SVME_NR_OF_ROWS) := A_PLAUS_LOW(L_SEQ_NO);         
         L_SVPLAUS_HIGH(L_SVME_NR_OF_ROWS) := A_PLAUS_HIGH(L_SEQ_NO);        
         L_SVWINSIZE_X(L_SVME_NR_OF_ROWS) := A_WINSIZE_X(L_SEQ_NO);         
         L_SVWINSIZE_Y(L_SVME_NR_OF_ROWS) := A_WINSIZE_Y(L_SEQ_NO);        
         L_SVREANALYSIS(L_SVME_NR_OF_ROWS) := A_REANALYSIS(L_SEQ_NO);
         L_SVME_CLASS(L_SVME_NR_OF_ROWS) := A_ME_CLASS(L_SEQ_NO);          
         L_SVLOG_HS(L_SVME_NR_OF_ROWS) := A_LOG_HS(L_SEQ_NO); 
         L_SVLOG_HS_DETAILS(L_SVME_NR_OF_ROWS) := A_LOG_HS_DETAILS(L_SEQ_NO);
         L_SVLC(L_SVME_NR_OF_ROWS) := A_LC(L_SEQ_NO);                
         L_SVLC_VERSION(L_SVME_NR_OF_ROWS) := A_LC_VERSION(L_SEQ_NO);
         L_SVMODIFY_FLAG(L_SVME_NR_OF_ROWS) := A_MODIFY_FLAG(L_SEQ_NO);       
         L_SVME_ORIG_ARRAY_NR(L_SVME_NR_OF_ROWS) := L_SEQ_NO;
      END IF;
         
      L_CALL_SAVESCME := FALSE;

      
      IF L_SEQ_NO = A_NR_OF_ROWS AND
         L_SVME_NR_OF_ROWS>0 THEN
         L_CALL_SAVESCME := TRUE;
      END IF;

      
      IF L_SEQ_NO <> A_NR_OF_ROWS THEN
         IF A_SC(L_SEQ_NO + 1) <> NVL(L_CURRENT_SC,A_SC(1)) THEN
            L_CALL_SAVESCME := TRUE;
         END IF;
      END IF;
            
      IF L_CALL_SAVESCME THEN
         L_RET_CODE := UNAPIME.SAVESCMETHOD(UNAPIGEN.ALARMS_NOT_HANDLED, L_SVSC, L_SVPG, L_SVPGNODE, 
                                            L_SVPA, L_SVPANODE, L_SVME, L_SVMENODE, L_SVREANALYSIS, 
                                            L_SVMT_VERSION, L_SVDESCRIPTION, L_SVVALUE_F, L_SVVALUE_S, 
                                            L_SVUNIT, L_SVEXEC_START_DATE, L_SVEXEC_END_DATE,
                                            L_SVEXECUTOR, L_SVLAB, L_SVEQ, L_SVEQ_VERSION, L_SVPLANNED_EXECUTOR, 
                                            L_SVPLANNED_EQ, L_SVPLANNED_EQ_VERSION, 
                                            L_SVMANUALLY_ENTERED, L_SVALLOW_ADD, L_SVASSIGN_DATE, 
                                            L_SVASSIGNED_BY, L_SVMANUALLY_ADDED, L_SVDELAY,
                                            L_SVDELAY_UNIT, L_SVFORMAT, L_SVACCURACY,
                                            L_SVREAL_COST, L_SVREAL_TIME, L_SVCALIBRATION, 
                                            L_SVCONFIRM_COMPLETE, L_SVAUTORECALC, 
                                            L_SVME_RESULT_EDITABLE, L_SVNEXT_CELL,
                                            L_SVSOP, L_SVSOP_VERSION, L_SVPLAUS_LOW, L_SVPLAUS_HIGH, 
                                            L_SVWINSIZE_X, L_SVWINSIZE_Y, L_SVME_CLASS, L_SVLOG_HS, 
                                            L_SVLOG_HS_DETAILS, L_SVLC, L_SVLC_VERSION, L_SVMODIFY_FLAG,
                                            L_SVME_NR_OF_ROWS, 'Modified in worksheet');
         
         
         
         
         IF L_RET_CODE = UNAPIGEN.DBERR_PARTIALSAVE THEN
            FOR L_SCMEROW IN 1..L_SVME_NR_OF_ROWS LOOP
               A_MODIFY_FLAG(L_SVME_ORIG_ARRAY_NR(L_SCMEROW)) := L_SVMODIFY_FLAG(L_SCMEROW);
            END LOOP;
         ELSIF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN 
            L_SQLERRM := 'SaveScMethod ret_code='||TO_CHAR(L_RET_CODE);
            IF L_RET_CODE = UNAPIGEN.DBERR_NOTAUTHORISED AND 
               UNAPIAUT.P_NOT_AUTHORISED IS NOT NULL THEN
               L_SQLERRM := L_SQLERRM||'('||SUBSTR(UNAPIAUT.P_NOT_AUTHORISED,1,200)||')';
            END IF;
            RAISE STPERROR;
         END IF;   
               
         
         
         FOR L_SCMEROW IN 1..L_SVME_NR_OF_ROWS LOOP
            IF A_REANALYSIS(L_SVME_ORIG_ARRAY_NR(L_SCMEROW)) <> L_SVREANALYSIS(L_SCMEROW) THEN
               UPDATE UTWSME
               SET REANALYSIS = L_SVREANALYSIS(L_SCMEROW)
               WHERE WS = A_WS(L_SEQ_NO)
               AND ROWNR = A_ROWNR(L_SEQ_NO)
               AND ME = A_ME(L_SEQ_NO);                      

               A_REANALYSIS(L_SVME_ORIG_ARRAY_NR(L_SCMEROW)) := L_SVREANALYSIS(L_SCMEROW);                      
            END IF;
         END LOOP;

         
         L_SVME_NR_OF_ROWS := 0;

      END IF;
      L_CURRENT_SC := A_SC(L_SEQ_NO);
   END LOOP;
     

   
   
   
   IF P_WS_DETAILS_CHG THEN 
      IF NVL(A_NEXT_ROWS, 0) = -1 AND P_WSDETAILSUPDATED_EVINSERTED = '0' THEN 
         L_EVENT_TP := 'WsDetailsUpdated';
         L_EV_SEQ_NR := -1;
         L_EV_DETAILS := 'wt_version=' || L_WT_VERSION;
         L_RESULT := UNAPIEV.INSERTEVENT('SaveWsMethod', UNAPIGEN.P_EVMGR_NAME, 'ws', L_WS, L_LC, 
                                         L_LC_VERSION, L_SS, L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);
         IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
            UNAPIGEN.P_TXN_ERROR := L_RESULT;
            RAISE STPERROR;
         END IF;

         IF L_LOG_HS = '1' THEN
            INSERT INTO UTWSHS (WS, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
            VALUES (L_WS, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                    'worksheet "'||L_WS||'" methods are updated.', 
                    CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
         END IF;

         IF L_LOG_HS_DETAILS = '1' THEN
            L_HS_SEQ := L_HS_SEQ + 1;
            INSERT INTO UTWSHSDETAILS (WS, TR_SEQ, EV_SEQ, SEQ, DETAILS)
            VALUES (L_WS, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_SEQ, 
                    'worksheet "'||L_WS||'" methods are updated.');
         END IF;

         P_WSDETAILSUPDATED_EVINSERTED := '1'; 
      ELSE
         
         L_RET_CODE := UNAPIGEN.GETNEXTEVENTSEQNR(L_EV_SEQ_NR);
         IF L_RET_CODE <> 0 THEN
            UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
            RAISE STPERROR;
         END IF;
      END IF;

      
      
         
      
      
      
      IF (L_LOG_HS_DETAILS = '1') THEN
         FOR L_ME_REC IN L_MODIFIEDME_CURSOR LOOP
            IF L_ME_REC.ACTION = 'DELETE' THEN
               L_WHAT_DESCRIPTION := 'Method "'||L_ME_REC.ME||'" is removed from worksheet "'||L_WS||'".';
            ELSE
               L_WHAT_DESCRIPTION := 'Method "'||L_ME_REC.ME||'" is added to worksheet "'||L_WS||'".';
            END IF;
            L_HS_SEQ := L_HS_SEQ + 1;
            INSERT INTO UTWSHSDETAILS(WS, TR_SEQ, EV_SEQ, SEQ, DETAILS)
            VALUES(L_WS, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_SEQ, L_WHAT_DESCRIPTION);
         END LOOP;
      END IF;
   END IF;  

  
   
   
   
   DELETE FROM UTWSME
   WHERE WS = L_WS
   AND ROWNR < 0;
   
   
   IF NVL(A_NEXT_ROWS, 0) = -1 THEN
      
      P_SAVEWSME_CALLS := 0;
   END IF;
   
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   
   
   
   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      IF A_MODIFY_FLAG(L_SEQ_NO) < UNAPIGEN.DBERR_SUCCESS THEN
         A_MODIFY_FLAG(L_SEQ_NO) := UNAPIGEN.DBERR_SUCCESS;
      END IF;
      IF A_WS_MODIFY_FLAG(L_SEQ_NO) < UNAPIGEN.DBERR_SUCCESS THEN
         A_WS_MODIFY_FLAG(L_SEQ_NO) := UNAPIGEN.DBERR_SUCCESS;
      END IF;
   END LOOP;

   RETURN (L_RET_CODE);
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveWsMethod',SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
     UNAPIGEN.LOGERROR('SaveWsMethod',L_SQLERRM); 
   ELSIF L_ERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('SaveWsMethod', L_ERRM);
   END IF;



   
   P_SAVEWSME_CALLS := 0;
   P_CURR_MOD_FLAG := FALSE;
   P_PREV_MOD_FLAG := FALSE;
   P_WSDETAILSUPDATED_EVINSERTED := '0';
   IF L_MODIFIEDME_CURSOR%ISOPEN THEN
      CLOSE L_MODIFIEDME_CURSOR;
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveWsMethod'));
END SAVEWSMETHOD;

FUNCTION GETWSMETHOD
(A_WS                       OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_ROWNR                    OUT     UNAPIGEN.NUM_TABLE_TYPE,    
 A_SC                       OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PG                       OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PGNODE                   OUT     UNAPIGEN.LONG_TABLE_TYPE,   
 A_PA                       OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PANODE                   OUT     UNAPIGEN.LONG_TABLE_TYPE,   
 A_ME                       OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_MENODE                   OUT     UNAPIGEN.LONG_TABLE_TYPE,   
 A_REANALYSIS               OUT     UNAPIGEN.NUM_TABLE_TYPE,    
 A_MT_VERSION               OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_DESCRIPTION              OUT     UNAPIGEN.VC40_TABLE_TYPE,   
 A_VALUE_F                  OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_VALUE_S                  OUT     UNAPIGEN.VC40_TABLE_TYPE,   
 A_UNIT                     OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_EXEC_START_DATE          OUT     UNAPIGEN.DATE_TABLE_TYPE,   
 A_EXEC_END_DATE            OUT     UNAPIGEN.DATE_TABLE_TYPE,   
 A_EXECUTOR                 OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_LAB                      OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_EQ                       OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_EQ_VERSION               OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PLANNED_EXECUTOR         OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PLANNED_EQ               OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PLANNED_EQ_VERSION       OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_MANUALLY_ENTERED         OUT     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_ALLOW_ADD                OUT     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_ASSIGN_DATE              OUT     UNAPIGEN.DATE_TABLE_TYPE,   
 A_ASSIGNED_BY              OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_MANUALLY_ADDED           OUT     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_DELAY                    OUT     UNAPIGEN.NUM_TABLE_TYPE,    
 A_DELAY_UNIT               OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_FORMAT                   OUT     UNAPIGEN.VC40_TABLE_TYPE,   
 A_ACCURACY                 OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_REAL_COST                OUT     UNAPIGEN.VC40_TABLE_TYPE,   
 A_REAL_TIME                OUT     UNAPIGEN.VC40_TABLE_TYPE,   
 A_CALIBRATION              OUT     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_CONFIRM_COMPLETE         OUT     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_AUTORECALC               OUT     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_ME_RESULT_EDITABLE       OUT     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_NEXT_CELL                OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_SOP                      OUT     UNAPIGEN.VC40_TABLE_TYPE,   
 A_SOP_VERSION              OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PLAUS_LOW                OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_PLAUS_HIGH               OUT     UNAPIGEN.FLOAT_TABLE_TYPE,  
 A_WINSIZE_X                OUT     UNAPIGEN.NUM_TABLE_TYPE,    
 A_WINSIZE_Y                OUT     UNAPIGEN.NUM_TABLE_TYPE,    
 A_ME_CLASS                 OUT     UNAPIGEN.VC2_TABLE_TYPE,    
 A_LOG_HS                   OUT     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_LOG_HS_DETAILS           OUT     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_ALLOW_MODIFY             OUT     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_AR                       OUT     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_ACTIVE                   OUT     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_LC                       OUT     UNAPIGEN.VC2_TABLE_TYPE,    
 A_LC_VERSION               OUT     UNAPIGEN.VC20_TABLE_TYPE,   
 A_SS                       OUT     UNAPIGEN.VC2_TABLE_TYPE,    
 A_REANALYSEDRESULT         OUT     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_NR_OF_ROWS               IN OUT  NUMBER,                     
 A_WHERE_CLAUSE             IN      VARCHAR2,                   
 A_NEXT_ROWS                IN      NUMBER)                     
RETURN NUMBER IS

L_LENGTH                         INTEGER;
L_WS                             VARCHAR2(20);
L_ROWNR                          NUMBER(4);
L_SC                             VARCHAR2(20);
L_PG                             VARCHAR2(20);
L_PGNODE                         NUMBER(9);
L_PA                             VARCHAR2(20);
L_PANODE                         NUMBER(9);
L_ME                             VARCHAR2(20);
L_MENODE                         NUMBER(9);
L_MT_VERSION                     VARCHAR2(20);
L_DESCRIPTION                    VARCHAR2(40);
L_VALUE_F                        FLOAT;
L_VALUE_S                        VARCHAR2(40);
L_UNIT                           VARCHAR2(20);
L_EXEC_START_DATE                TIMESTAMP WITH TIME ZONE;
L_EXEC_END_DATE                  TIMESTAMP WITH TIME ZONE;
L_EXECUTOR                       VARCHAR2(20);
L_LAB                            VARCHAR2(20);
L_EQ                             VARCHAR2(20);
L_EQ_VERSION                     VARCHAR2(20);
L_PLANNED_EXECUTOR               VARCHAR2(20);
L_PLANNED_EQ                     VARCHAR2(20);
L_PLANNED_EQ_VERSION             VARCHAR2(20);
L_MANUALLY_ENTERED               CHAR(1);
L_ALLOW_ADD                      CHAR(1);
L_ASSIGN_DATE                    TIMESTAMP WITH TIME ZONE;
L_ASSIGNED_BY                    VARCHAR2(20);
L_MANUALLY_ADDED                 CHAR(1);
L_DELAY                          NUMBER(3);
L_DELAY_UNIT                     VARCHAR2(20);
L_FORMAT                         VARCHAR2(40);
L_ACCURACY                       FLOAT;
L_REAL_COST                      VARCHAR2(40);
L_REAL_TIME                      VARCHAR2(40);
L_CALIBRATION                    CHAR(1);
L_CONFIRM_COMPLETE               CHAR(1);
L_AUTORECALC                     CHAR(1);
L_ME_RESULT_EDITABLE             CHAR(1);
L_NEXT_CELL                      VARCHAR2(20);
L_SOP                            VARCHAR2(40);
L_SOP_VERSION                    VARCHAR2(20);
L_PLAUS_LOW                      FLOAT;
L_PLAUS_HIGH                     FLOAT;
L_WINSIZE_X                      NUMBER;
L_WINSIZE_Y                      NUMBER;
L_REANALYSIS                     NUMBER;
L_ME_CLASS                       VARCHAR2(2);
L_LOG_HS                         CHAR(1);
L_LOG_HS_DETAILS                 CHAR(1);
L_ALLOW_MODIFY                   CHAR(1);
L_AR                             CHAR(1);
L_ACTIVE                         CHAR(1);
L_LC                             VARCHAR2(2);
L_LC_VERSION                     VARCHAR2(20);
L_SS                             VARCHAR2(2);
L_MODIFY_QUERY                   BOOLEAN;

BEGIN

   IF NVL(A_NR_OF_ROWS, 0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_WSME_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_WSME_CURSOR);
         P_WSME_CURSOR := NULL;
         P_WSME_REANALYSIS_FETCHED := FALSE;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;
   
   
   IF A_NEXT_ROWS = 1 THEN
      IF P_WSME_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;
   
   
            
   
   IF NVL(A_NEXT_ROWS, 0) = 0 THEN
      P_WSME_REANALYSIS_FETCHED := FALSE;
   END IF;

   
   IF NVL(A_NEXT_ROWS, 0) = 0 THEN

      
      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
         RETURN(UNAPIGEN.DBERR_WHERECLAUSE);
      ELSIF A_WHERE_CLAUSE = 'SELECTION' THEN
         IF UNAPIWS.P_SELECTION_CLAUSE IS NOT NULL THEN 
            IF INSTR(UPPER(UNAPIWS.P_SELECTION_CLAUSE), 'WHERE') <> 0 THEN       
               L_WHERE_CLAUSE := ','||UNAPIWS.P_SELECTION_CLAUSE|| ' AND a.ws = wsme.ws'; 
               L_ORDER_BY_CLAUSE := ' ORDER BY wsme.ws, wsme.pgnode, wsme.panode, wsme.menode';
            ELSE
               L_WHERE_CLAUSE := ','||UNAPIWS.P_SELECTION_CLAUSE|| ' WHERE a.ws = wsme.ws'; 
               L_ORDER_BY_CLAUSE := ' ORDER BY wsme.ws, wsme.pgnode, wsme.panode, wsme.menode';  
            END IF;
            P_GETWSME_BIND_WS_SELECTION := TRUE;
         ELSE
            L_WHERE_CLAUSE := ' WHERE a.ws = wsme.ws'; 
            L_ORDER_BY_CLAUSE := ' ORDER BY wsme.ws, wsme.pgnode, wsme.panode, wsme.menode';       
         END IF;      
      ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
         P_GETWSME_BIND_FIXED_WS_FLAG := TRUE;
         L_WHERE_CLAUSE := 'WHERE wsme.ws = :ws_val ';   
         L_ORDER_BY_CLAUSE := ' ORDER BY wsme.ws, wsme.pgnode, wsme.panode, wsme.menode'; 
      ELSE
         L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
         L_ORDER_BY_CLAUSE := ' ORDER BY wsme.ws, wsme.pgnode, wsme.panode, wsme.menode'; 
      END IF;

      L_SQL_STRING := 'SELECT b.sc, b.pg, b.pgnode, b.pa, b.panode, b.me, b.menode, b.mt_version, ' ||
                      'b.description, b.value_f, b.value_s, b.unit, b.exec_start_date, ' ||
                      'b.exec_end_date, b.executor, b.lab, b.eq, b.eq_version, b.planned_executor, ' ||
                      'b.planned_eq, b.planned_eq_version, b.manually_entered, b.allow_add, ' ||
                      'b.assign_date, b.assigned_by, b.manually_added, b.delay, b.delay_unit, b.format, ' ||
                      'b.accuracy, b.real_cost, b.real_time, b.calibration, ' ||
                      'b.confirm_complete, b.autorecalc, b.me_result_editable, b.next_cell, b.sop,b.sop_version, b.plaus_low, ' ||
                      'b.plaus_high, b.winsize_x, b.winsize_y, b.reanalysis, b.me_class, b.log_hs, ' ||
                      'b.log_hs_details, b.allow_modify, b.active, b.lc, b.lc_version, b.ss, b.ar, wsme.ws, wsme.rownr '|| 
                      'FROM dd'||UNAPIGEN.P_DD||'.uvscme b, dd' ||UNAPIGEN.P_DD ||'.uvwsme wsme '|| 
                      L_WHERE_CLAUSE || ' AND b.sc = wsme.sc ' ||
                      'AND b.pg = wsme.pg AND b.pgnode = wsme.pgnode AND b.pa = wsme.pa ' || 
                      'AND b.panode = wsme.panode AND b.me = wsme.me AND b.menode = wsme.menode ' ||
                      'AND b.reanalysis = wsme.reanalysis ' || L_ORDER_BY_CLAUSE ;

      IF P_WSME_CURSOR IS NULL THEN
         P_WSME_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;
   END IF;
   
   L_MODIFY_QUERY := FALSE;
   L_FETCHED_ROWS := 0;
   LOOP
      
      
      IF L_MODIFY_QUERY THEN
         L_SQL_STRING := REPLACE(L_SQL_STRING, 'FROM dd'||UNAPIGEN.P_DD||'.uvscme b,', 
                                               'FROM dd'||UNAPIGEN.P_DD||'.uvrscme b,');
         L_SQL_STRING := REPLACE(L_SQL_STRING, ', b.ar,', 
                                               ', b.ar'||UNAPIGEN.P_DD||',');
         P_WSME_REANALYSIS_FETCHED := TRUE;
      END IF;
      
      
      IF NVL(A_NEXT_ROWS, 0) = 0  OR 
         L_MODIFY_QUERY THEN

         DBMS_SQL.PARSE(P_WSME_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         IF P_GETWSME_BIND_WS_SELECTION THEN
            FOR L_X IN 1..UNAPIWS.P_SELECTION_VAL_TAB.COUNT() LOOP
               DBMS_SQL.BIND_VARIABLE(P_WSME_CURSOR, ':col_val'||L_X , UNAPIWS.P_SELECTION_VAL_TAB(L_X)); 
            END LOOP;
         ELSIF P_GETWSME_BIND_FIXED_WS_FLAG THEN
            DBMS_SQL.BIND_VARIABLE(P_WSME_CURSOR, ':ws_val' , A_WHERE_CLAUSE); 
         END IF;
         DBMS_SQL.DEFINE_COLUMN(P_WSME_CURSOR, 1, L_SC, 20);
         DBMS_SQL.DEFINE_COLUMN(P_WSME_CURSOR, 2, L_PG, 20);
         DBMS_SQL.DEFINE_COLUMN(P_WSME_CURSOR, 3, L_PGNODE);
         DBMS_SQL.DEFINE_COLUMN(P_WSME_CURSOR, 4, L_PA, 20);
         DBMS_SQL.DEFINE_COLUMN(P_WSME_CURSOR, 5, L_PANODE);
         DBMS_SQL.DEFINE_COLUMN(P_WSME_CURSOR, 6, L_ME, 20);
         DBMS_SQL.DEFINE_COLUMN(P_WSME_CURSOR, 7, L_MENODE);
         DBMS_SQL.DEFINE_COLUMN(P_WSME_CURSOR, 8, L_MT_VERSION, 20);
         DBMS_SQL.DEFINE_COLUMN(P_WSME_CURSOR, 9, L_DESCRIPTION, 40);
         DBMS_SQL.DEFINE_COLUMN(P_WSME_CURSOR, 10, L_VALUE_F);
         DBMS_SQL.DEFINE_COLUMN(P_WSME_CURSOR, 11, L_VALUE_S, 40);
         DBMS_SQL.DEFINE_COLUMN(P_WSME_CURSOR, 12, L_UNIT, 20);
         DBMS_SQL.DEFINE_COLUMN(P_WSME_CURSOR, 13, L_EXEC_START_DATE);
         DBMS_SQL.DEFINE_COLUMN(P_WSME_CURSOR, 14, L_EXEC_END_DATE);
         DBMS_SQL.DEFINE_COLUMN(P_WSME_CURSOR, 15, L_EXECUTOR, 20);
         DBMS_SQL.DEFINE_COLUMN(P_WSME_CURSOR, 16, L_LAB, 20);
         DBMS_SQL.DEFINE_COLUMN(P_WSME_CURSOR, 17, L_EQ, 20);
         DBMS_SQL.DEFINE_COLUMN(P_WSME_CURSOR, 18, L_EQ_VERSION, 20);
         DBMS_SQL.DEFINE_COLUMN(P_WSME_CURSOR, 19, L_PLANNED_EXECUTOR, 20);
         DBMS_SQL.DEFINE_COLUMN(P_WSME_CURSOR, 20, L_PLANNED_EQ, 20);
         DBMS_SQL.DEFINE_COLUMN(P_WSME_CURSOR, 21, L_PLANNED_EQ_VERSION, 20);
         DBMS_SQL.DEFINE_COLUMN_CHAR(P_WSME_CURSOR, 22, L_MANUALLY_ENTERED, 1);
         DBMS_SQL.DEFINE_COLUMN_CHAR(P_WSME_CURSOR, 23, L_ALLOW_ADD, 1);
         DBMS_SQL.DEFINE_COLUMN(P_WSME_CURSOR, 24, L_ASSIGN_DATE);
         DBMS_SQL.DEFINE_COLUMN(P_WSME_CURSOR, 25, L_ASSIGNED_BY, 20);
         DBMS_SQL.DEFINE_COLUMN_CHAR(P_WSME_CURSOR, 26, L_MANUALLY_ADDED, 1);
         DBMS_SQL.DEFINE_COLUMN(P_WSME_CURSOR, 27, L_DELAY);
         DBMS_SQL.DEFINE_COLUMN(P_WSME_CURSOR, 28, L_DELAY_UNIT, 20);
         DBMS_SQL.DEFINE_COLUMN(P_WSME_CURSOR, 29, L_FORMAT, 40);
         DBMS_SQL.DEFINE_COLUMN(P_WSME_CURSOR, 30, L_ACCURACY);
         DBMS_SQL.DEFINE_COLUMN(P_WSME_CURSOR, 31, L_REAL_COST, 40);
         DBMS_SQL.DEFINE_COLUMN(P_WSME_CURSOR, 32, L_REAL_TIME, 40);
         DBMS_SQL.DEFINE_COLUMN_CHAR(P_WSME_CURSOR, 33, L_CALIBRATION, 1);
         DBMS_SQL.DEFINE_COLUMN_CHAR(P_WSME_CURSOR, 34, L_CONFIRM_COMPLETE, 1);
         DBMS_SQL.DEFINE_COLUMN_CHAR(P_WSME_CURSOR, 35, L_AUTORECALC, 1);
         DBMS_SQL.DEFINE_COLUMN_CHAR(P_WSME_CURSOR, 36, L_ME_RESULT_EDITABLE, 1);
         DBMS_SQL.DEFINE_COLUMN(P_WSME_CURSOR, 37, L_NEXT_CELL, 20);
         DBMS_SQL.DEFINE_COLUMN(P_WSME_CURSOR, 38, L_SOP, 40);
         DBMS_SQL.DEFINE_COLUMN(P_WSME_CURSOR, 39, L_SOP_VERSION, 20);
         DBMS_SQL.DEFINE_COLUMN(P_WSME_CURSOR, 40, L_PLAUS_LOW);
         DBMS_SQL.DEFINE_COLUMN(P_WSME_CURSOR, 41, L_PLAUS_HIGH);
         DBMS_SQL.DEFINE_COLUMN(P_WSME_CURSOR, 42, L_WINSIZE_X);
         DBMS_SQL.DEFINE_COLUMN(P_WSME_CURSOR, 43, L_WINSIZE_Y);
         DBMS_SQL.DEFINE_COLUMN(P_WSME_CURSOR, 44, L_REANALYSIS);
         DBMS_SQL.DEFINE_COLUMN(P_WSME_CURSOR, 45, L_ME_CLASS, 2);
         DBMS_SQL.DEFINE_COLUMN_CHAR(P_WSME_CURSOR, 46, L_LOG_HS, 1);
         DBMS_SQL.DEFINE_COLUMN_CHAR(P_WSME_CURSOR, 47, L_LOG_HS_DETAILS, 1);
         DBMS_SQL.DEFINE_COLUMN_CHAR(P_WSME_CURSOR, 48, L_ALLOW_MODIFY, 1);
         DBMS_SQL.DEFINE_COLUMN_CHAR(P_WSME_CURSOR, 49, L_ACTIVE, 1);
         DBMS_SQL.DEFINE_COLUMN(P_WSME_CURSOR, 50, L_LC, 2);
         DBMS_SQL.DEFINE_COLUMN(P_WSME_CURSOR, 51, L_LC_VERSION, 20);
         DBMS_SQL.DEFINE_COLUMN(P_WSME_CURSOR, 52, L_SS, 2);
         DBMS_SQL.DEFINE_COLUMN_CHAR(P_WSME_CURSOR, 53, L_AR, 1);
         DBMS_SQL.DEFINE_COLUMN(P_WSME_CURSOR, 54, L_WS, 20);
         DBMS_SQL.DEFINE_COLUMN(P_WSME_CURSOR, 55, L_ROWNR);
         L_RESULT := DBMS_SQL.EXECUTE(P_WSME_CURSOR);

      END IF;
      
      L_RESULT := DBMS_SQL.FETCH_ROWS(P_WSME_CURSOR);

      LOOP
         EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

         DBMS_SQL.COLUMN_VALUE(P_WSME_CURSOR, 1, L_SC);
         DBMS_SQL.COLUMN_VALUE(P_WSME_CURSOR, 2, L_PG);
         DBMS_SQL.COLUMN_VALUE(P_WSME_CURSOR, 3, L_PGNODE);
         DBMS_SQL.COLUMN_VALUE(P_WSME_CURSOR, 4, L_PA);
         DBMS_SQL.COLUMN_VALUE(P_WSME_CURSOR, 5, L_PANODE);
         DBMS_SQL.COLUMN_VALUE(P_WSME_CURSOR, 6, L_ME);
         DBMS_SQL.COLUMN_VALUE(P_WSME_CURSOR, 7, L_MENODE);
         DBMS_SQL.COLUMN_VALUE(P_WSME_CURSOR, 8, L_MT_VERSION);
         DBMS_SQL.COLUMN_VALUE(P_WSME_CURSOR, 9, L_DESCRIPTION);
         DBMS_SQL.COLUMN_VALUE(P_WSME_CURSOR, 10, L_VALUE_F);
         DBMS_SQL.COLUMN_VALUE(P_WSME_CURSOR, 11, L_VALUE_S);
         DBMS_SQL.COLUMN_VALUE(P_WSME_CURSOR, 12, L_UNIT);
         DBMS_SQL.COLUMN_VALUE(P_WSME_CURSOR, 13, L_EXEC_START_DATE);
         DBMS_SQL.COLUMN_VALUE(P_WSME_CURSOR, 14, L_EXEC_END_DATE);
         DBMS_SQL.COLUMN_VALUE(P_WSME_CURSOR, 15, L_EXECUTOR);
         DBMS_SQL.COLUMN_VALUE(P_WSME_CURSOR, 16, L_LAB);
         DBMS_SQL.COLUMN_VALUE(P_WSME_CURSOR, 17, L_EQ);
         DBMS_SQL.COLUMN_VALUE(P_WSME_CURSOR, 18, L_EQ_VERSION);
         DBMS_SQL.COLUMN_VALUE(P_WSME_CURSOR, 19, L_PLANNED_EXECUTOR);
         DBMS_SQL.COLUMN_VALUE(P_WSME_CURSOR, 20, L_PLANNED_EQ);
         DBMS_SQL.COLUMN_VALUE(P_WSME_CURSOR, 21, L_PLANNED_EQ_VERSION);
         DBMS_SQL.COLUMN_VALUE_CHAR(P_WSME_CURSOR, 22, L_MANUALLY_ENTERED);
         DBMS_SQL.COLUMN_VALUE_CHAR(P_WSME_CURSOR, 23, L_ALLOW_ADD);
         DBMS_SQL.COLUMN_VALUE(P_WSME_CURSOR, 24, L_ASSIGN_DATE);
         DBMS_SQL.COLUMN_VALUE(P_WSME_CURSOR, 25, L_ASSIGNED_BY);
         DBMS_SQL.COLUMN_VALUE_CHAR(P_WSME_CURSOR, 26, L_MANUALLY_ADDED);
         DBMS_SQL.COLUMN_VALUE(P_WSME_CURSOR, 27, L_DELAY);
         DBMS_SQL.COLUMN_VALUE(P_WSME_CURSOR, 28, L_DELAY_UNIT);
         DBMS_SQL.COLUMN_VALUE(P_WSME_CURSOR, 29, L_FORMAT);
         DBMS_SQL.COLUMN_VALUE(P_WSME_CURSOR, 30, L_ACCURACY);
         DBMS_SQL.COLUMN_VALUE(P_WSME_CURSOR, 31, L_REAL_COST);
         DBMS_SQL.COLUMN_VALUE(P_WSME_CURSOR, 32, L_REAL_TIME);
         DBMS_SQL.COLUMN_VALUE_CHAR(P_WSME_CURSOR, 33, L_CALIBRATION);
         DBMS_SQL.COLUMN_VALUE_CHAR(P_WSME_CURSOR, 34, L_CONFIRM_COMPLETE);
         DBMS_SQL.COLUMN_VALUE_CHAR(P_WSME_CURSOR, 35, L_AUTORECALC);
         DBMS_SQL.COLUMN_VALUE_CHAR(P_WSME_CURSOR, 36, L_ME_RESULT_EDITABLE);
         DBMS_SQL.COLUMN_VALUE(P_WSME_CURSOR, 37, L_NEXT_CELL);
         DBMS_SQL.COLUMN_VALUE(P_WSME_CURSOR, 38, L_SOP);
         DBMS_SQL.COLUMN_VALUE(P_WSME_CURSOR, 39, L_SOP_VERSION);
         DBMS_SQL.COLUMN_VALUE(P_WSME_CURSOR, 40, L_PLAUS_LOW);
         DBMS_SQL.COLUMN_VALUE(P_WSME_CURSOR, 41, L_PLAUS_HIGH);
         DBMS_SQL.COLUMN_VALUE(P_WSME_CURSOR, 42, L_WINSIZE_X);
         DBMS_SQL.COLUMN_VALUE(P_WSME_CURSOR, 43, L_WINSIZE_Y);
         DBMS_SQL.COLUMN_VALUE(P_WSME_CURSOR, 44, L_REANALYSIS);
         DBMS_SQL.COLUMN_VALUE(P_WSME_CURSOR, 45, L_ME_CLASS);
         DBMS_SQL.COLUMN_VALUE_CHAR(P_WSME_CURSOR, 46, L_LOG_HS);
         DBMS_SQL.COLUMN_VALUE_CHAR(P_WSME_CURSOR, 47, L_LOG_HS_DETAILS);
         DBMS_SQL.COLUMN_VALUE_CHAR(P_WSME_CURSOR, 48, L_ALLOW_MODIFY);
         DBMS_SQL.COLUMN_VALUE_CHAR(P_WSME_CURSOR, 49, L_ACTIVE);
         DBMS_SQL.COLUMN_VALUE(P_WSME_CURSOR, 50, L_LC);
         DBMS_SQL.COLUMN_VALUE(P_WSME_CURSOR, 51, L_LC_VERSION);
         DBMS_SQL.COLUMN_VALUE(P_WSME_CURSOR, 52, L_SS);
         DBMS_SQL.COLUMN_VALUE_CHAR(P_WSME_CURSOR, 53, L_AR);
         DBMS_SQL.COLUMN_VALUE(P_WSME_CURSOR, 54, L_WS);
         DBMS_SQL.COLUMN_VALUE(P_WSME_CURSOR, 55, L_ROWNR);

         L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

         A_SC(L_FETCHED_ROWS) := L_SC;
         A_PG(L_FETCHED_ROWS) := L_PG;
         A_PGNODE(L_FETCHED_ROWS) := L_PGNODE;
         A_PA(L_FETCHED_ROWS) := L_PA;
         A_PANODE(L_FETCHED_ROWS) := L_PANODE;
         A_ME(L_FETCHED_ROWS) := L_ME;
         A_MENODE(L_FETCHED_ROWS) := L_MENODE;
         A_MT_VERSION(L_FETCHED_ROWS) := L_MT_VERSION;
         A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;
         A_VALUE_F(L_FETCHED_ROWS) := L_VALUE_F;
         A_VALUE_S(L_FETCHED_ROWS) := L_VALUE_S;
         A_UNIT(L_FETCHED_ROWS) := L_UNIT;
         A_EXEC_START_DATE(L_FETCHED_ROWS) := L_EXEC_START_DATE;
         A_EXEC_END_DATE(L_FETCHED_ROWS) := L_EXEC_END_DATE;
         A_EXECUTOR(L_FETCHED_ROWS) := L_EXECUTOR;
         A_LAB(L_FETCHED_ROWS) := L_LAB;
         A_EQ(L_FETCHED_ROWS) := L_EQ;
         A_EQ_VERSION(L_FETCHED_ROWS) := L_EQ_VERSION;
         A_PLANNED_EXECUTOR(L_FETCHED_ROWS) := L_PLANNED_EXECUTOR;
         A_PLANNED_EQ(L_FETCHED_ROWS) := L_PLANNED_EQ;
         A_PLANNED_EQ_VERSION(L_FETCHED_ROWS) := L_PLANNED_EQ_VERSION;
         A_MANUALLY_ENTERED(L_FETCHED_ROWS) := L_MANUALLY_ENTERED;
         A_ALLOW_ADD(L_FETCHED_ROWS) := L_ALLOW_ADD;
         A_ASSIGN_DATE(L_FETCHED_ROWS) := L_ASSIGN_DATE;
         A_ASSIGNED_BY(L_FETCHED_ROWS) := L_ASSIGNED_BY;
         A_DELAY(L_FETCHED_ROWS) := L_DELAY;
         A_DELAY_UNIT(L_FETCHED_ROWS) := L_DELAY_UNIT;
         A_MANUALLY_ADDED(L_FETCHED_ROWS) := L_MANUALLY_ADDED;
         A_FORMAT(L_FETCHED_ROWS) := L_FORMAT;
         A_ACCURACY(L_FETCHED_ROWS) := L_ACCURACY;
         A_REAL_COST(L_FETCHED_ROWS) := L_REAL_COST;
         A_REAL_TIME(L_FETCHED_ROWS) := L_REAL_TIME;
         A_CALIBRATION(L_FETCHED_ROWS) := L_CALIBRATION;
         A_CONFIRM_COMPLETE(L_FETCHED_ROWS) := L_CONFIRM_COMPLETE;
         A_AUTORECALC(L_FETCHED_ROWS) := L_AUTORECALC;
         A_ME_RESULT_EDITABLE(L_FETCHED_ROWS) := L_ME_RESULT_EDITABLE;
         A_NEXT_CELL(L_FETCHED_ROWS) := L_NEXT_CELL;
         A_SOP(L_FETCHED_ROWS) := L_SOP;
         A_SOP_VERSION(L_FETCHED_ROWS) := L_SOP_VERSION;
         A_PLAUS_LOW(L_FETCHED_ROWS) := L_PLAUS_LOW;
         A_PLAUS_HIGH(L_FETCHED_ROWS) := L_PLAUS_HIGH;
         A_WINSIZE_X(L_FETCHED_ROWS) := L_WINSIZE_X;
         A_WINSIZE_Y(L_FETCHED_ROWS) := L_WINSIZE_Y;
         A_REANALYSIS(L_FETCHED_ROWS) := L_REANALYSIS;
         A_ME_CLASS(L_FETCHED_ROWS) := L_ME_CLASS;
         A_LOG_HS(L_FETCHED_ROWS) := L_LOG_HS;
         A_LOG_HS_DETAILS(L_FETCHED_ROWS) := L_LOG_HS_DETAILS;
         A_ALLOW_MODIFY(L_FETCHED_ROWS) := L_ALLOW_MODIFY;
         A_ACTIVE(L_FETCHED_ROWS) := L_ACTIVE;
         A_LC(L_FETCHED_ROWS) := L_LC;
         A_LC_VERSION(L_FETCHED_ROWS) := L_LC_VERSION;
         A_SS(L_FETCHED_ROWS) := L_SS;
         A_AR(L_FETCHED_ROWS) := L_AR;
         A_WS(L_FETCHED_ROWS) := L_WS;
         A_ROWNR(L_FETCHED_ROWS) := L_ROWNR;
         IF P_WSME_REANALYSIS_FETCHED THEN
            A_REANALYSEDRESULT(L_FETCHED_ROWS) := '1';
         ELSE
            A_REANALYSEDRESULT(L_FETCHED_ROWS) := '0';
         END IF;

         IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
            L_RESULT := DBMS_SQL.FETCH_ROWS(P_WSME_CURSOR);
         END IF;

      END LOOP;

      L_MODIFY_QUERY := FALSE;
      IF P_WSME_REANALYSIS_FETCHED THEN
         IF L_FETCHED_ROWS = 0 THEN
            L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
            DBMS_SQL.CLOSE_CURSOR(P_WSME_CURSOR);
            P_WSME_REANALYSIS_FETCHED := FALSE;
            P_GETWSME_BIND_FIXED_WS_FLAG := FALSE;
         ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
            L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
            A_NR_OF_ROWS := L_FETCHED_ROWS;
            DBMS_SQL.CLOSE_CURSOR(P_WSME_CURSOR);
            P_WSME_REANALYSIS_FETCHED := FALSE;
            P_GETWSME_BIND_FIXED_WS_FLAG := FALSE;
         ELSE   
            L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
            A_NR_OF_ROWS := L_FETCHED_ROWS;
         END IF; 
         
         EXIT;
         
      ELSE
         
         
         IF L_FETCHED_ROWS = 0 THEN
            L_MODIFY_QUERY := TRUE;
         ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
            L_MODIFY_QUERY := TRUE;
         ELSE   
            L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
            A_NR_OF_ROWS := L_FETCHED_ROWS;
            
            
            EXIT;
            
         END IF;       
      END IF;
   END LOOP;

   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   L_SQLERRM := SQLERRM;
   UNAPIGEN.U4ROLLBACK;      
   INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
   VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
           'GetWsMethod', L_SQLERRM);
      L_LENGTH := 200;
      FOR L_X IN 1..10 LOOP
         IF ( LENGTH(L_SQL_STRING) > ((L_LENGTH*(L_X-1))+1) ) THEN
            INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
            VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
                   'GetWsMethod', '(SQL)'||SUBSTR(L_SQL_STRING, (L_LENGTH*(L_X-1))+1, L_LENGTH));             
         ELSE
            EXIT;
         END IF;
      END LOOP;            
   UNAPIGEN.U4COMMIT;
   IF DBMS_SQL.IS_OPEN(P_WSME_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(P_WSME_CURSOR);
   END IF;
   RETURN(UNAPIGEN.DBERR_GENFAIL); 
END GETWSMETHOD;

FUNCTION SELECTWSGKVALUES
(A_COL_ID           IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_TP           IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_VALUE        IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_NR_OF_ROWS   IN      NUMBER,                    
 A_GK               IN      VARCHAR2,                  
 A_VALUE            OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_NR_OF_ROWS       IN OUT  NUMBER,                    
 A_ORDER_BY_CLAUSE  IN      VARCHAR2,                  
 A_NEXT_ROWS        IN      NUMBER)                    
RETURN NUMBER IS
L_COL_OPERATOR           UNAPIGEN.VC20_TABLE_TYPE;
L_COL_ANDOR              UNAPIGEN.VC3_TABLE_TYPE;
BEGIN
FOR L_X IN 1..A_COL_NR_OF_ROWS LOOP
    L_COL_OPERATOR(L_X) := '=';
    L_COL_ANDOR(L_X) := 'AND';
END LOOP;
 RETURN(UNAPIWS.SELECTWSGKVALUES(A_COL_ID,
                                 A_COL_TP,
                                 A_COL_VALUE,
                                 L_COL_OPERATOR,
                                 L_COL_ANDOR,
                                 A_COL_NR_OF_ROWS,
                                 A_GK,
                                 A_VALUE,
                                 A_NR_OF_ROWS,
                                 A_ORDER_BY_CLAUSE,
                                 A_NEXT_ROWS));
END SELECTWSGKVALUES;

FUNCTION SELECTWSGKVALUES
(A_COL_ID           IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_TP           IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_VALUE        IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_OPERATOR     IN      UNAPIGEN.VC20_TABLE_TYPE,  
 A_COL_ANDOR        IN      UNAPIGEN.VC3_TABLE_TYPE,   
 A_COL_NR_OF_ROWS   IN      NUMBER,                    
 A_GK               IN      VARCHAR2,                  
 A_VALUE            OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_NR_OF_ROWS       IN OUT  NUMBER,                    
 A_ORDER_BY_CLAUSE  IN      VARCHAR2,                  
 A_NEXT_ROWS        IN      NUMBER)                    
RETURN NUMBER IS

L_VALUE                          VARCHAR2(40);
L_ORDER_BY_CLAUSE                VARCHAR2(255);
L_FROM_CLAUSE                    VARCHAR2(500);
L_NEXT_WS_JOIN                   VARCHAR2(4);
L_NEXT_WSGK_JOIN                 VARCHAR2(4);
L_COLUMN_HANDLED                 BOOLEAN_TABLE_TYPE;
L_ANYOR_PRESENT                  BOOLEAN;
L_COL_ANDOR                      VARCHAR2(3);
L_PREV_COL_TP                    VARCHAR2(40);
L_PREV_COL_ID                    VARCHAR2(40);
L_PREV_COL_INDEX                 INTEGER;
L_WHERE_CLAUSE4JOIN              VARCHAR2(2000);
L_LENGTH                         INTEGER;
L_ME_SCANNED                     BOOLEAN;
L_SQL_VAL_TAB                    VC40_NESTEDTABLE_TYPE := VC40_NESTEDTABLE_TYPE();

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_SELECTWSGK_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_SELECTWSGK_CURSOR);
         P_SELECTWSGK_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_SELECTWSGK_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;
   
   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN

      
      L_SQL_STRING := 'SELECT DISTINCT b.' || A_GK ||' FROM ';
      L_FROM_CLAUSE := 'dd' || UNAPIGEN.P_DD || '.uvws a, utwsgk' || A_GK || ' b';
   
      
      L_WHERE_CLAUSE4JOIN := 'a.ws = b.ws AND '; 
      L_WHERE_CLAUSE := '';
      L_ANYOR_PRESENT := FALSE;
      FOR I IN 1..A_COL_NR_OF_ROWS LOOP
         L_COLUMN_HANDLED(I) := FALSE;
         IF LTRIM(RTRIM(UPPER(A_COL_ANDOR(I)))) = 'OR' AND
            NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
            L_ANYOR_PRESENT := TRUE;
         END IF;
         
         
         IF I<>1 THEN
            IF NVL(A_COL_TP(I), ' ') = NVL(A_COL_TP(I-1), ' ') AND
               NVL(A_COL_ID(I), ' ') = NVL(A_COL_ID(I-1), ' ') AND
               NVL(A_COL_OPERATOR(I), '=') = '=' AND
               NVL(A_COL_OPERATOR(I-1), '=') = '=' AND
               NVL(A_COL_ANDOR(I-1), 'AND') =  'AND' AND
               (NVL(A_COL_VALUE(I), ' ') <> ' ' OR NVL(A_COL_VALUE(I-1), ' ') <> ' ') THEN
               IF I> 2 AND A_COL_ANDOR(I-2) = 'OR' THEN
                  L_ANYOR_PRESENT := TRUE;
               END IF;
            END IF;
         END IF;         
      END LOOP;
      
      
      

      L_NEXT_WSGK_JOIN := 'a';
      L_NEXT_WS_JOIN := 'a';
          
      FOR I IN REVERSE 1..A_COL_NR_OF_ROWS LOOP
         IF NVL(LTRIM(A_COL_ID(I)), ' ') = ' ' THEN
            RETURN(UNAPIGEN.DBERR_SELCOLSINVALID);
         END IF;

         
         L_COL_ANDOR := 'AND';
         IF I<>1 THEN
            L_COL_ANDOR := A_COL_ANDOR(I-1);
         END IF;
         IF L_COL_ANDOR IS NULL THEN
            
            L_COL_ANDOR := 'AND';
         END IF;
         IF L_COLUMN_HANDLED(I) = FALSE THEN
            IF NVL(A_COL_TP(I), ' ') = 'wsgk' THEN 
               IF NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
                  UNAPIGEN.WHERECLAUSESTRINGBUILDER (A_BASE_TABLE => 'utws', A_INDEX =>I, A_COL_TP => A_COL_TP(I), A_COL_ID => A_COL_ID(I),
                                 A_COL_VALUE => A_COL_VALUE(I), A_COL_OPERATOR => A_COL_OPERATOR(I),
                                 A_COL_ANDOR => L_COL_ANDOR, A_ANYOR_PRESENT => L_ANYOR_PRESENT,
                                 A_JOINTABLE_PREFIX => 'utwsgk', A_JOINCOLUMN1 => 'ws', A_JOINCOLUMN2 => '', 
                                 A_PREV_COL_TP => L_PREV_COL_TP, A_PREV_COL_ID => L_PREV_COL_ID, A_PREV_COL_INDEX => L_PREV_COL_INDEX,
                                 A_NEXTTABLE_TOJOIN => L_NEXT_WSGK_JOIN, A_FROM_CLAUSE => L_FROM_CLAUSE,
                                 A_WHERE_CLAUSE4JOIN => L_WHERE_CLAUSE4JOIN, A_WHERE_CLAUSE => L_WHERE_CLAUSE,
                                 A_SQL_VAL_TAB => L_SQL_VAL_TAB);                 
               END IF;
               L_COLUMN_HANDLED(I) := TRUE; 
            ELSE 
               IF NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
                  UNAPIGEN.WHERECLAUSESTRINGBUILDER (A_BASE_TABLE => 'utws', A_INDEX =>I, A_COL_TP => A_COL_TP(I), A_COL_ID => A_COL_ID(I),
                                 A_COL_VALUE => A_COL_VALUE(I), A_COL_OPERATOR => A_COL_OPERATOR(I),
                                 A_COL_ANDOR => L_COL_ANDOR, A_ANYOR_PRESENT => L_ANYOR_PRESENT,
                                 A_JOINTABLE_PREFIX => '', A_JOINCOLUMN1 => '', A_JOINCOLUMN2 => '', 
                                 A_PREV_COL_TP => L_PREV_COL_TP, A_PREV_COL_ID => L_PREV_COL_ID, A_PREV_COL_INDEX => L_PREV_COL_INDEX,
                                 A_NEXTTABLE_TOJOIN => L_NEXT_WS_JOIN, A_FROM_CLAUSE => L_FROM_CLAUSE,
                                 A_WHERE_CLAUSE4JOIN => L_WHERE_CLAUSE4JOIN, A_WHERE_CLAUSE => L_WHERE_CLAUSE,
                                 A_SQL_VAL_TAB => L_SQL_VAL_TAB);                  
               END IF;
               L_COLUMN_HANDLED(I) := TRUE; 
            END IF;
         END IF;
      END LOOP;      

      
      IF SUBSTR(L_WHERE_CLAUSE4JOIN, -4) = 'AND ' THEN
         L_WHERE_CLAUSE4JOIN := SUBSTR(L_WHERE_CLAUSE4JOIN, 1,
                                  LENGTH(L_WHERE_CLAUSE4JOIN)-4);
      END IF;
      
      
      IF SUBSTR(L_WHERE_CLAUSE, -4) = 'AND ' THEN
         L_WHERE_CLAUSE := SUBSTR(L_WHERE_CLAUSE, 1,
                                  LENGTH(L_WHERE_CLAUSE)-4);
      END IF;
      IF UPPER(SUBSTR(L_WHERE_CLAUSE, -4)) = ' OR ' THEN
         L_WHERE_CLAUSE := SUBSTR(L_WHERE_CLAUSE, 1,
                                  LENGTH(L_WHERE_CLAUSE)-3);
      END IF;
      
      IF L_WHERE_CLAUSE4JOIN IS NOT NULL THEN
         IF L_WHERE_CLAUSE IS NULL THEN
            L_WHERE_CLAUSE := ' WHERE ' || L_WHERE_CLAUSE4JOIN;
         ELSE
            L_WHERE_CLAUSE := ' WHERE (' || L_WHERE_CLAUSE4JOIN || ') AND ('||L_WHERE_CLAUSE||') ';
         END IF;
      ELSE
         IF L_WHERE_CLAUSE IS NOT NULL THEN
            L_WHERE_CLAUSE := ' WHERE '||L_WHERE_CLAUSE;
         ELSE
            L_WHERE_CLAUSE := ' ';
         END IF;
      END IF;

      L_ORDER_BY_CLAUSE := NVL(A_ORDER_BY_CLAUSE, ' ORDER BY 1');

      L_SQL_STRING := L_SQL_STRING || L_FROM_CLAUSE || L_WHERE_CLAUSE || L_ORDER_BY_CLAUSE;

      L_LENGTH := 200;
      FOR L_X IN 1..10 LOOP
         IF ( LENGTH(L_SQL_STRING) > ((L_LENGTH*(L_X-1))+1) ) THEN
            DBMS_OUTPUT.PUT_LINE(SUBSTR(L_SQL_STRING, (L_LENGTH*(L_X-1))+1, L_LENGTH));
         ELSE
            EXIT;
         END IF;
      END LOOP;            

      IF P_SELECTWSGK_CURSOR IS NULL THEN
         P_SELECTWSGK_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;

      UNAPIAUT.ADDORACLECBOHINT (L_SQL_STRING) ;
      DBMS_SQL.PARSE(P_SELECTWSGK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      FOR L_X IN 1..L_SQL_VAL_TAB.COUNT() LOOP
         DBMS_SQL.BIND_VARIABLE(P_SELECTWSGK_CURSOR, ':col_val'||L_X , L_SQL_VAL_TAB(L_X)); 
      END LOOP;   
      DBMS_SQL.DEFINE_COLUMN(P_SELECTWSGK_CURSOR, 1, L_VALUE, 40);

      L_RESULT := DBMS_SQL.EXECUTE(P_SELECTWSGK_CURSOR);

   END IF;
   
   L_RESULT := DBMS_SQL.FETCH_ROWS(P_SELECTWSGK_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_SELECTWSGK_CURSOR, 1, L_VALUE);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_VALUE(L_FETCHED_ROWS) := L_VALUE;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_SELECTWSGK_CURSOR);
      END IF;
   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_SELECTWSGK_CURSOR);
       P_SELECTWSGK_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_SELECTWSGK_CURSOR);
      P_SELECTWSGK_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
              'SelectWsGkValues', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      L_LENGTH := 200;
      FOR L_X IN 1..10 LOOP
         IF ( LENGTH(L_SQL_STRING) > ((L_LENGTH*(L_X-1))+1) ) THEN
            INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
            VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                   'SelectWsGkValues', '(SQL)'||SUBSTR(L_SQL_STRING, (L_LENGTH*(L_X-1))+1, L_LENGTH));             
         ELSE
            EXIT;
         END IF;
      END LOOP;            
      L_LENGTH := 200;
      FOR L_X IN 1..10 LOOP
         IF ( LENGTH(L_SQLERRM) > ((L_LENGTH*(L_X-1))+1) ) THEN
            DBMS_OUTPUT.PUT_LINE(SUBSTR(L_SQLERRM, (L_LENGTH*(L_X-1))+1, L_LENGTH));
         ELSE
            EXIT;
         END IF;
      END LOOP;            
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (P_SELECTWSGK_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (P_SELECTWSGK_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END SELECTWSGKVALUES;

FUNCTION SELECTWSPROPVALUES
(A_COL_ID           IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_TP           IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_VALUE        IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_NR_OF_ROWS   IN      NUMBER,                    
 A_PROP             IN      VARCHAR2,                  
 A_VALUE            OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_NR_OF_ROWS       IN OUT  NUMBER,                    
 A_ORDER_BY_CLAUSE  IN      VARCHAR2,                  
 A_NEXT_ROWS        IN      NUMBER)                    
RETURN NUMBER IS
L_COL_OPERATOR           UNAPIGEN.VC20_TABLE_TYPE;
L_COL_ANDOR              UNAPIGEN.VC3_TABLE_TYPE;
BEGIN
FOR L_X IN 1..A_COL_NR_OF_ROWS LOOP
    L_COL_OPERATOR(L_X) := '=';
    L_COL_ANDOR(L_X) := 'AND';
END LOOP;
 RETURN(UNAPIWS.SELECTWSPROPVALUES(A_COL_ID,
                                 A_COL_TP,
                                 A_COL_VALUE,
                                 L_COL_OPERATOR,
                                 L_COL_ANDOR,
                                 A_COL_NR_OF_ROWS,
                                 A_PROP,
                                 A_VALUE,
                                 A_NR_OF_ROWS,
                                 A_ORDER_BY_CLAUSE,
                                 A_NEXT_ROWS));
END SELECTWSPROPVALUES;

FUNCTION SELECTWSPROPVALUES
(A_COL_ID           IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_TP           IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_VALUE        IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_OPERATOR     IN      UNAPIGEN.VC20_TABLE_TYPE,  
 A_COL_ANDOR        IN      UNAPIGEN.VC3_TABLE_TYPE,   
 A_COL_NR_OF_ROWS   IN      NUMBER,                    
 A_PROP             IN      VARCHAR2,                  
 A_VALUE            OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_NR_OF_ROWS       IN OUT  NUMBER,                    
 A_ORDER_BY_CLAUSE  IN      VARCHAR2,                  
 A_NEXT_ROWS        IN      NUMBER)                    
RETURN NUMBER IS

L_VALUE                          VARCHAR2(40);
L_ORDER_BY_CLAUSE                VARCHAR2(255);
L_FROM_CLAUSE                    VARCHAR2(500);
L_NEXT_WSGK_JOIN                 VARCHAR2(4);
L_NEXT_WS_JOIN                   VARCHAR2(4);
L_COLUMN_HANDLED                 BOOLEAN_TABLE_TYPE;
L_ANYOR_PRESENT                  BOOLEAN;
L_COL_ANDOR                      VARCHAR2(3);
L_PREV_COL_TP                    VARCHAR2(40);
L_PREV_COL_ID                    VARCHAR2(40);
L_PREV_COL_INDEX                 INTEGER;
L_WHERE_CLAUSE4JOIN              VARCHAR2(2000);
L_LENGTH                         INTEGER;
L_SQL_VAL_TAB                    VC40_NESTEDTABLE_TYPE := VC40_NESTEDTABLE_TYPE();

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_SELECTWSPROP_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_SELECTWSPROP_CURSOR);
         P_SELECTWSPROP_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_SELECTWSPROP_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN

      L_SQL_STRING := 'SELECT DISTINCT a.' || A_PROP ||' FROM ';
      L_FROM_CLAUSE := 'dd' || UNAPIGEN.P_DD || '.uvws a';

      
      L_WHERE_CLAUSE4JOIN := '';
      L_WHERE_CLAUSE := '';
      L_ANYOR_PRESENT := FALSE;
      FOR I IN 1..A_COL_NR_OF_ROWS LOOP
         L_COLUMN_HANDLED(I) := FALSE;
         IF LTRIM(RTRIM(UPPER(A_COL_ANDOR(I)))) = 'OR' AND
            NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
            L_ANYOR_PRESENT := TRUE;
         END IF;
         
         
         IF I<>1 THEN
            IF NVL(A_COL_TP(I), ' ') = NVL(A_COL_TP(I-1), ' ') AND
               NVL(A_COL_ID(I), ' ') = NVL(A_COL_ID(I-1), ' ') AND
               NVL(A_COL_OPERATOR(I), '=') = '=' AND
               NVL(A_COL_OPERATOR(I-1), '=') = '=' AND
               NVL(A_COL_ANDOR(I-1), 'AND') =  'AND' AND
               (NVL(A_COL_VALUE(I), ' ') <> ' ' OR NVL(A_COL_VALUE(I-1), ' ') <> ' ') THEN
               IF I> 2 AND A_COL_ANDOR(I-2) = 'OR' THEN
                  L_ANYOR_PRESENT := TRUE;
               END IF;
            END IF;
         END IF;         
      END LOOP;

      L_NEXT_WSGK_JOIN := 'a';      
      L_NEXT_WS_JOIN := 'a';      
            
      FOR I IN REVERSE 1..A_COL_NR_OF_ROWS LOOP
         IF NVL(LTRIM(A_COL_ID(I)), ' ') = ' ' THEN
            RETURN(UNAPIGEN.DBERR_SELCOLSINVALID);
         END IF;

         
         L_COL_ANDOR := 'AND';
         IF I<>1 THEN
            L_COL_ANDOR := A_COL_ANDOR(I-1);
         END IF;
         IF L_COL_ANDOR IS NULL THEN
            
            L_COL_ANDOR := 'AND';
         END IF;
        
         IF L_COLUMN_HANDLED(I) = FALSE THEN
            IF NVL(A_COL_TP(I), ' ') = 'wsgk' THEN 
               IF NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
                  UNAPIGEN.WHERECLAUSESTRINGBUILDER (A_BASE_TABLE => 'utws', A_INDEX =>I, A_COL_TP => A_COL_TP(I), A_COL_ID => A_COL_ID(I),
                                 A_COL_VALUE => A_COL_VALUE(I), A_COL_OPERATOR => A_COL_OPERATOR(I),
                                 A_COL_ANDOR => L_COL_ANDOR, A_ANYOR_PRESENT => L_ANYOR_PRESENT,
                                 A_JOINTABLE_PREFIX => 'utwsgk', A_JOINCOLUMN1 => 'ws', A_JOINCOLUMN2 => '', 
                                 A_PREV_COL_TP => L_PREV_COL_TP, A_PREV_COL_ID => L_PREV_COL_ID, A_PREV_COL_INDEX => L_PREV_COL_INDEX,
                                 A_NEXTTABLE_TOJOIN => L_NEXT_WSGK_JOIN, A_FROM_CLAUSE => L_FROM_CLAUSE,
                                 A_WHERE_CLAUSE4JOIN => L_WHERE_CLAUSE4JOIN, A_WHERE_CLAUSE => L_WHERE_CLAUSE,
                                 A_SQL_VAL_TAB => L_SQL_VAL_TAB);                  
               END IF;
               L_COLUMN_HANDLED(I) := TRUE; 
            ELSE 
               IF NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
                  UNAPIGEN.WHERECLAUSESTRINGBUILDER (A_BASE_TABLE => 'utws', A_INDEX =>I, A_COL_TP => A_COL_TP(I), A_COL_ID => A_COL_ID(I),
                                   A_COL_VALUE => A_COL_VALUE(I), A_COL_OPERATOR => A_COL_OPERATOR(I),
                                   A_COL_ANDOR => L_COL_ANDOR, A_ANYOR_PRESENT => L_ANYOR_PRESENT,
                                   A_JOINTABLE_PREFIX => '', A_JOINCOLUMN1 => '', A_JOINCOLUMN2 => '', 
                                   A_PREV_COL_TP => L_PREV_COL_TP, A_PREV_COL_ID => L_PREV_COL_ID, A_PREV_COL_INDEX => L_PREV_COL_INDEX,
                                   A_NEXTTABLE_TOJOIN => L_NEXT_WS_JOIN, A_FROM_CLAUSE => L_FROM_CLAUSE,
                                   A_WHERE_CLAUSE4JOIN => L_WHERE_CLAUSE4JOIN, A_WHERE_CLAUSE => L_WHERE_CLAUSE,
                                 A_SQL_VAL_TAB => L_SQL_VAL_TAB);                  
               END IF;
               L_COLUMN_HANDLED(I) := TRUE; 
            END IF;
         END IF;
      END LOOP;

      
      IF SUBSTR(L_WHERE_CLAUSE4JOIN, -4) = 'AND ' THEN
         L_WHERE_CLAUSE4JOIN := SUBSTR(L_WHERE_CLAUSE4JOIN, 1,
                                  LENGTH(L_WHERE_CLAUSE4JOIN)-4);
      END IF;
      
      
      IF SUBSTR(L_WHERE_CLAUSE, -4) = 'AND ' THEN
         L_WHERE_CLAUSE := SUBSTR(L_WHERE_CLAUSE, 1,
                                  LENGTH(L_WHERE_CLAUSE)-4);
      END IF;
      IF UPPER(SUBSTR(L_WHERE_CLAUSE, -4)) = ' OR ' THEN
         L_WHERE_CLAUSE := SUBSTR(L_WHERE_CLAUSE, 1,
                                  LENGTH(L_WHERE_CLAUSE)-3);
      END IF;
      
      IF L_WHERE_CLAUSE4JOIN IS NOT NULL THEN
         IF L_WHERE_CLAUSE IS NULL THEN
            L_WHERE_CLAUSE := ' WHERE ' || L_WHERE_CLAUSE4JOIN;
         ELSE
            L_WHERE_CLAUSE := ' WHERE (' || L_WHERE_CLAUSE4JOIN || ') AND ('||L_WHERE_CLAUSE||') ';
         END IF;
      ELSE
         IF L_WHERE_CLAUSE IS NOT NULL THEN
            L_WHERE_CLAUSE := ' WHERE '||L_WHERE_CLAUSE;
         ELSE
            L_WHERE_CLAUSE := ' ';
         END IF;
      END IF;

      L_ORDER_BY_CLAUSE := NVL(A_ORDER_BY_CLAUSE, ' ORDER BY 1');

      L_SQL_STRING := L_SQL_STRING || L_FROM_CLAUSE || L_WHERE_CLAUSE || L_ORDER_BY_CLAUSE;

      L_LENGTH := 200;
      FOR L_X IN 1..10 LOOP
         IF ( LENGTH(L_SQL_STRING) > ((L_LENGTH*(L_X-1))+1) ) THEN
            DBMS_OUTPUT.PUT_LINE(SUBSTR(L_SQL_STRING, (L_LENGTH*(L_X-1))+1, L_LENGTH));
         ELSE
            EXIT;
         END IF;
      END LOOP;            

      IF P_SELECTWSPROP_CURSOR IS NULL THEN
         P_SELECTWSPROP_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;
      
      UNAPIAUT.ADDORACLECBOHINT (L_SQL_STRING) ;
      DBMS_SQL.PARSE(P_SELECTWSPROP_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      FOR L_X IN 1..L_SQL_VAL_TAB.COUNT() LOOP
         DBMS_SQL.BIND_VARIABLE(P_SELECTWSPROP_CURSOR, ':col_val'||L_X , L_SQL_VAL_TAB(L_X)); 
      END LOOP;

      DBMS_SQL.DEFINE_COLUMN(P_SELECTWSPROP_CURSOR, 1, L_VALUE, 40);

      L_RESULT := DBMS_SQL.EXECUTE(P_SELECTWSPROP_CURSOR);
   END IF;
   
   L_RESULT := DBMS_SQL.FETCH_ROWS(P_SELECTWSPROP_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_SELECTWSPROP_CURSOR, 1, L_VALUE);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_VALUE(L_FETCHED_ROWS) := L_VALUE;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_SELECTWSPROP_CURSOR);
      END IF;
   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_SELECTWSPROP_CURSOR);
       P_SELECTWSPROP_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_SELECTWSPROP_CURSOR);
      P_SELECTWSPROP_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;
   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
              'SelectWsPropValues', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      L_LENGTH := 200;
      FOR L_X IN 1..10 LOOP
         IF ( LENGTH(L_SQL_STRING) > ((L_LENGTH*(L_X-1))+1) ) THEN
            INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
            VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                   'SelectRqPropValues', '(SQL)'||SUBSTR(L_SQL_STRING, (L_LENGTH*(L_X-1))+1, L_LENGTH));             
         ELSE
            EXIT;
         END IF;
      END LOOP;            
      L_LENGTH := 200;
      FOR L_X IN 1..10 LOOP
         IF ( LENGTH(L_SQLERRM) > ((L_LENGTH*(L_X-1))+1) ) THEN
            DBMS_OUTPUT.PUT_LINE(SUBSTR(L_SQLERRM, (L_LENGTH*(L_X-1))+1, L_LENGTH));
         ELSE
            EXIT;
         END IF;
      END LOOP;            
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (P_SELECTWSPROP_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (P_SELECTWSPROP_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END SELECTWSPROPVALUES;

FUNCTION DELETEWORKSHEET
(A_WS            IN  VARCHAR2,                         
 A_MODIFY_REASON IN  VARCHAR2)                         
RETURN NUMBER IS

L_ALLOW_MODIFY      CHAR(1);
L_ACTIVE            CHAR(1);
L_LC                CHAR(2);
L_LC_VERSION        VARCHAR2(20);
L_SS                VARCHAR2(2);
L_LOG_HS            CHAR(1);
L_LOG_HS_DETAILS    CHAR(1);
L_OBJECT_ID         VARCHAR2(255);

L_WT_VERSION        VARCHAR2(20);

CURSOR L_WSGK_CURSOR IS
   SELECT DISTINCT GK
   FROM UTWSGK
   WHERE WS = A_WS;

BEGIN
 
   
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_WS, ' ')= ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;
 
   
   L_RET_CODE := UNAPIAUT.GETWSAUTHORISATION(A_WS, L_WT_VERSION, L_LC, L_LC_VERSION, L_SS,
                                             L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS, L_LOG_HS_DETAILS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   
   
   
   
   IF L_WT_VERSION IS NULL THEN
      SELECT WT_VERSION
      INTO L_WT_VERSION
      FROM UTWS
      WHERE WS = A_WS;
   END IF;

   IF L_ACTIVE = '1' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_OPACTIVE;
      RAISE STPERROR;
   END IF;
   
   
   IF UNAPIGEN.ISSYSTEM21CFR11COMPLIANT = UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTALLOWEDIN21CFR11;
      RAISE STPERROR;
   END IF;


   L_WS_CURSOR := DBMS_SQL.OPEN_CURSOR; 
   
   DELETE FROM UTWSII
   WHERE WS = A_WS;

   
 
   DELETE FROM UTWSME
   WHERE WS = A_WS;

   
   DELETE FROM UTWSSC
   WHERE WS = A_WS;

   
   DELETE FROM UTWSAU
   WHERE WS = A_WS;

   DELETE FROM UTWSHS
   WHERE WS = A_WS;

   DELETE FROM UTWSHSDETAILS
   WHERE WS = A_WS;

   FOR L_WSGKDEL IN L_WSGK_CURSOR LOOP
      BEGIN
         L_SQL_STRING := 'DELETE FROM utwsgk' || L_WSGKDEL.GK ||
                         ' WHERE ws = ''' || REPLACE(A_WS, '''', '''''') || ''''; 
         DBMS_SQL.PARSE(L_WS_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         L_RESULT := DBMS_SQL.EXECUTE(L_WS_CURSOR);
      EXCEPTION
      WHEN OTHERS THEN
         IF SQLCODE = -942 THEN
            NULL; 
         ELSE
            RAISE;
         END IF;
      END;
   END LOOP;

   DELETE FROM UTWSGK
   WHERE WS = A_WS;

   DELETE FROM UTEVTIMED
   WHERE (OBJECT_TP='ws' AND OBJECT_ID=A_WS)
      OR INSTR(EV_DETAILS, 'ws='||A_WS) <> 0;

   DELETE FROM UTEVRULESDELAYED
   WHERE (OBJECT_TP='ws' AND OBJECT_ID=A_WS)
      OR INSTR(EV_DETAILS, 'ws='||A_WS) <> 0;

   DELETE FROM UTWS
   WHERE WS = A_WS;

   L_EVENT_TP := 'WorksheetDeleted';
   L_EV_SEQ_NR := -1;
   L_EV_DETAILS := 'wt_version=' || L_WT_VERSION;
   
   L_RESULT := UNAPIEV.INSERTEVENT('DeleteWorksheet', UNAPIGEN.P_EVMGR_NAME, 'ws',
                                   A_WS, L_LC, L_LC_VERSION, L_SS, L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   
   
   
   L_OBJECT_ID := 'ws='|| A_WS;
   FOR L_SEQ_NO IN 1..UNAPIGEN.PA_OBJECT_NR LOOP
      IF SUBSTR(UNAPIGEN.PA_OBJECT_ID(L_SEQ_NO), 1, LENGTH(L_OBJECT_ID)) = L_OBJECT_ID THEN
         UNAPIGEN.PA_OBJECT_ID(L_SEQ_NO) := NULL;
      END IF;
   END LOOP;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('DeleteWorksheet', SQLERRM);
   END IF;
 
  
 
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'DeleteWorksheet'));
END DELETEWORKSHEET;

FUNCTION SAVE1WSSCROW
(A_WS               IN     VARCHAR2,                   
 A_ROWNR            IN OUT NUMBER,                           
 A_WS_MODIFY_FLAG   IN OUT NUMBER,                     
 A_SC               IN     VARCHAR2,                   
 A_MODIFY_REASON    IN     VARCHAR2)                    
RETURN NUMBER IS



L_SS                     VARCHAR2(2);

L_ALLOW_MODIFY           CHAR(1);
L_ACTIVE                 CHAR(1);
L_USERID                 VARCHAR2(40);
L_MAX_ROWNR              NUMBER(4);
L_MAX_NR_OF_ROWS         NUMBER(4);
L_ROW                    NUMBER;
L_WT                     VARCHAR2(20);
L_WT_VERSION             VARCHAR2(20);
L_HS_DETAILS_SEQ_NR      INTEGER;

L_WS                     UNAPIGEN.VC20_TABLE_TYPE;  
L_ROWNR                  UNAPIGEN.NUM_TABLE_TYPE;   
L_SC                     UNAPIGEN.VC20_TABLE_TYPE;  
L_ST                     UNAPIGEN.VC20_TABLE_TYPE;  
L_ST_VERSION             UNAPIGEN.VC20_TABLE_TYPE;
L_WS_MODIFY_FLAG         UNAPIGEN.NUM_TABLE_TYPE;   
L_DESCRIPTION            UNAPIGEN.VC40_TABLE_TYPE;  
L_SHELF_LIFE_VAL         UNAPIGEN.NUM_TABLE_TYPE;   
L_SHELF_LIFE_UNIT        UNAPIGEN.VC20_TABLE_TYPE;  
L_SAMPLING_DATE          UNAPIGEN.DATE_TABLE_TYPE;  
L_CREATION_DATE          UNAPIGEN.DATE_TABLE_TYPE;  
L_CREATED_BY             UNAPIGEN.VC20_TABLE_TYPE;  
L_EXEC_START_DATE        UNAPIGEN.DATE_TABLE_TYPE;  
L_EXEC_END_DATE          UNAPIGEN.DATE_TABLE_TYPE;  
L_PRIORITY               UNAPIGEN.NUM_TABLE_TYPE;   
L_LABEL_FORMAT           UNAPIGEN.VC20_TABLE_TYPE;  
L_DESCR_DOC              UNAPIGEN.VC40_TABLE_TYPE;
L_DESCR_DOC_VERSION      UNAPIGEN.VC20_TABLE_TYPE;
L_RQ                     UNAPIGEN.VC20_TABLE_TYPE;  
L_SD                     UNAPIGEN.VC20_TABLE_TYPE;  
L_DATE1                  UNAPIGEN.DATE_TABLE_TYPE;  
L_DATE2                  UNAPIGEN.DATE_TABLE_TYPE;  
L_DATE3                  UNAPIGEN.DATE_TABLE_TYPE;  
L_DATE4                  UNAPIGEN.DATE_TABLE_TYPE;  
L_DATE5                  UNAPIGEN.DATE_TABLE_TYPE;  
L_ALLOW_ANY_PP           UNAPIGEN.CHAR1_TABLE_TYPE; 
L_SC_CLASS               UNAPIGEN.VC2_TABLE_TYPE;   
L_LOG_HS                 UNAPIGEN.CHAR1_TABLE_TYPE; 
L_LOG_HS_DETAILS         UNAPIGEN.CHAR1_TABLE_TYPE; 
L_LC                     UNAPIGEN.VC2_TABLE_TYPE;   
L_LC_VERSION             UNAPIGEN.VC20_TABLE_TYPE;   
L_MODIFY_FLAG            UNAPIGEN.NUM_TABLE_TYPE;   
L_NR_OF_ROWS             NUMBER;                    
L_NEXT_ROWS              NUMBER;                    
L_MODIFY_REASON          VARCHAR2(255);
L_REF_SC4LY              VARCHAR2(20);











                                       

L_ALARMS_HANDLED         CHAR(1);
L_PG                     UNAPIGEN.VC20_TABLE_TYPE;
L_PGNODE                 UNAPIGEN.LONG_TABLE_TYPE;
L_PA                     UNAPIGEN.VC20_TABLE_TYPE;
L_PANODE                 UNAPIGEN.LONG_TABLE_TYPE;
L_ME                     UNAPIGEN.VC20_TABLE_TYPE;
L_MENODE                 UNAPIGEN.LONG_TABLE_TYPE;
L_MT_VERSION             UNAPIGEN.VC20_TABLE_TYPE;

L_VALUE_F                UNAPIGEN.FLOAT_TABLE_TYPE; 
L_VALUE_S                UNAPIGEN.VC40_TABLE_TYPE;  
L_UNIT                   UNAPIGEN.VC20_TABLE_TYPE;  
L_EXECUTOR               UNAPIGEN.VC20_TABLE_TYPE;  
L_LAB                    UNAPIGEN.VC20_TABLE_TYPE;  
L_EQ                     UNAPIGEN.VC20_TABLE_TYPE;
L_EQ_VERSION             UNAPIGEN.VC20_TABLE_TYPE;
L_PLANNED_EXECUTOR       UNAPIGEN.VC20_TABLE_TYPE;  
L_PLANNED_EQ             UNAPIGEN.VC20_TABLE_TYPE;
L_PLANNED_EQ_VERSION     UNAPIGEN.VC20_TABLE_TYPE;
L_MANUALLY_ENTERED       UNAPIGEN.CHAR1_TABLE_TYPE; 
L_ALLOW_ADD              UNAPIGEN.CHAR1_TABLE_TYPE; 
L_ASSIGN_DATE            UNAPIGEN.DATE_TABLE_TYPE;  
L_ASSIGNED_BY            UNAPIGEN.VC20_TABLE_TYPE;  
L_MANUALLY_ADDED         UNAPIGEN.CHAR1_TABLE_TYPE; 
L_DELAY                  UNAPIGEN.NUM_TABLE_TYPE;   
L_DELAY_UNIT             UNAPIGEN.VC20_TABLE_TYPE;  
L_FORMAT                 UNAPIGEN.VC40_TABLE_TYPE;  
L_ACCURACY               UNAPIGEN.FLOAT_TABLE_TYPE; 
L_REAL_COST              UNAPIGEN.VC40_TABLE_TYPE;  
L_REAL_TIME              UNAPIGEN.VC40_TABLE_TYPE;  
L_CALIBRATION            UNAPIGEN.CHAR1_TABLE_TYPE; 
L_CONFIRM_COMPLETE       UNAPIGEN.CHAR1_TABLE_TYPE; 
L_AUTORECALC             UNAPIGEN.CHAR1_TABLE_TYPE; 
L_ME_RESULT_EDITABLE     UNAPIGEN.CHAR1_TABLE_TYPE; 
L_NEXT_CELL              UNAPIGEN.VC20_TABLE_TYPE;  
L_SOP                    UNAPIGEN.VC40_TABLE_TYPE;
L_SOP_VERSION            UNAPIGEN.VC20_TABLE_TYPE;
L_PLAUS_LOW              UNAPIGEN.FLOAT_TABLE_TYPE; 
L_PLAUS_HIGH             UNAPIGEN.FLOAT_TABLE_TYPE; 
L_WINSIZE_X              UNAPIGEN.NUM_TABLE_TYPE;   
L_WINSIZE_Y              UNAPIGEN.NUM_TABLE_TYPE;   
L_REANALYSIS             UNAPIGEN.NUM_TABLE_TYPE;   
L_ME_CLASS               UNAPIGEN.VC2_TABLE_TYPE;  



L_IC                     UNAPIGEN.VC20_TABLE_TYPE;  
L_ICNODE                 UNAPIGEN.LONG_TABLE_TYPE;  
L_II                     UNAPIGEN.VC20_TABLE_TYPE;  
L_IINODE                 UNAPIGEN.LONG_TABLE_TYPE;  
L_IE_VERSION             UNAPIGEN.VC20_TABLE_TYPE;
L_IIVALUE                UNAPIGEN.VC2000_TABLE_TYPE;
L_POS_X                  UNAPIGEN.NUM_TABLE_TYPE;   
L_POS_Y                  UNAPIGEN.NUM_TABLE_TYPE;   
L_IS_PROTECTED           UNAPIGEN.CHAR1_TABLE_TYPE; 
L_MANDATORY              UNAPIGEN.CHAR1_TABLE_TYPE; 
L_HIDDEN                 UNAPIGEN.CHAR1_TABLE_TYPE; 
L_DSP_TITLE              UNAPIGEN.VC40_TABLE_TYPE;  
L_DSP_LEN                UNAPIGEN.NUM_TABLE_TYPE;   
L_DSP_TP                 UNAPIGEN.CHAR1_TABLE_TYPE; 
L_DSP_ROWS               UNAPIGEN.NUM_TABLE_TYPE;   
L_II_CLASS               UNAPIGEN.VC2_TABLE_TYPE;   

L_SVII                   VARCHAR2(20);

L_WS_LY                  VARCHAR2(20);








CURSOR L_WSMELY_CURSOR IS
   SELECT DISTINCT SUBSTR(COL_ID, INSTR(COL_ID, '@', 1)+1)   
   FROM UTLY
   WHERE LY_TP = 'wsdet'
     AND LY = L_WS_LY
     AND INSTR(COL_ID,'ME_TP@',1 ) <> 0
     AND COL_TP='CALL_VTP@value';
   
CURSOR L_WSIILY_CURSOR IS
   SELECT DISTINCT SUBSTR(COL_ID, INSTR(COL_ID, '@', 1)+1)   
   FROM UTLY
   WHERE LY_TP = 'wsdet'
     AND LY = L_WS_LY
     AND INSTR(COL_ID,'II_TP@',1 ) <> 0;     

CURSOR L_SCME_CURSOR (C_SC VARCHAR2, C_REF_SC4LY VARCHAR2) IS
   
   SELECT PG, PGNODE, PA, PANODE, ME, MENODE, REANALYSIS, MT_VERSION
   FROM UTSCME
   WHERE SC = C_SC
   AND ME IN (SELECT DISTINCT SUBSTR(COL_ID, INSTR(COL_ID, '@', 1)+1)   
              FROM UTLY
              WHERE LY_TP = 'wsdet'
                AND LY = L_WS_LY
                AND INSTR(COL_ID,'ME_TP@',1 ) <> 0
                AND COL_TP='CALL_VTP@value'
                AND NLS_UPPER(COL_ID) <> 'ME_TP@~ANY~'
                AND NLS_UPPER(COL_ID) NOT LIKE 'ME_TP@~PG#%~')
   UNION
   
   
   SELECT PG, PGNODE, PA, PANODE, ME, MENODE, REANALYSIS, MT_VERSION
   FROM UTSCME
   WHERE SC = C_SC
   AND C_REF_SC4LY IS NOT NULL
   AND ME IN (SELECT DISTINCT ME
              FROM UTSCME
              WHERE SC = C_REF_SC4LY
                AND EXISTS (SELECT DISTINCT SUBSTR(COL_ID, INSTR(COL_ID, '@', 1)+1)   
                            FROM UTLY
                            WHERE LY_TP = 'wsdet'
                              AND LY = L_WS_LY
                              AND INSTR(COL_ID,'ME_TP@',1 ) <> 0
                              AND COL_TP='CALL_VTP@value'
                              AND NLS_UPPER(COL_ID) = 'ME_TP@~ANY~'
                            )
             )
   UNION
   
   SELECT PG, PGNODE, PA, PANODE, ME, MENODE, REANALYSIS, MT_VERSION
   FROM UTSCME
   WHERE SC = C_SC
   AND C_REF_SC4LY IS NOT NULL
   AND PG IN 
         (SELECT DISTINCT PG
          FROM UTSCPG
          WHERE SC = C_REF_SC4LY
          AND PG IN
             (SELECT SUBSTR(A.PG_STRING, INSTR(A.PG_STRING, '#')+1, INSTR(A.PG_STRING, '~',1,2)-INSTR(A.PG_STRING, '#')-1)
              FROM (SELECT DISTINCT SUBSTR(COL_ID, INSTR(COL_ID, '@', 1)+1) PG_STRING   
                    FROM UTLY
                    WHERE LY_TP = 'wsdet'
                      AND LY = L_WS_LY
                      AND INSTR(COL_ID,'ME_TP@',1 ) <> 0
                      AND COL_TP='CALL_VTP@value'
                      AND NLS_UPPER(COL_ID) <> 'ME_TP@~ANY~'
                      AND NLS_UPPER(COL_ID) LIKE 'ME_TP@~PG#%~'
                   ) A
              )
         )
   ORDER BY PGNODE, PANODE, MENODE;
L_SCME_REC L_SCME_CURSOR%ROWTYPE;

CURSOR L_SCII_CURSOR (C_SC VARCHAR2, C_II VARCHAR2) IS
   SELECT IC, ICNODE, II, IINODE, IE_VERSION
   FROM UTSCII
   WHERE SC = C_SC
   AND II = C_II
   ORDER BY ICNODE, IINODE;
L_SCII_REC L_SCII_CURSOR%ROWTYPE;
    
BEGIN

   
   L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
         UNAPIGEN.DBERR_SUCCESS THEN
         RAISE STPERROR;
   END IF;

   IF NVL(A_WS, ' ') = ' ' THEN      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_SC, ' ') = ' ' THEN      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   
   IF NVL(A_WS_MODIFY_FLAG, UNAPIGEN.DBERR_SUCCESS) NOT IN (UNAPIGEN.MOD_FLAG_INSERT, 
                                                            UNAPIGEN.MOD_FLAG_UPDATE, 
                                                            UNAPIGEN.MOD_FLAG_DELETE, 
                                                            UNAPIGEN.DBERR_SUCCESS) THEN
      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INVALMODFLAG;
      
      RAISE STPERROR;
   END IF;  

   

   BEGIN
      SELECT MAX(ROWNR) 
      INTO L_MAX_ROWNR 
      FROM UTWSSC
      WHERE WS = A_WS;
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      L_MAX_ROWNR := 0;
   END;
   

   SELECT MAX_ROWS, WT 
   INTO L_MAX_NR_OF_ROWS, L_WT 
   FROM UTWS
   WHERE WS = A_WS;
      
   
   IF NVL(A_ROWNR, -1) = -1  THEN
      IF A_WS_MODIFY_FLAG <> UNAPIGEN.MOD_FLAG_INSERT THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INVALMODFLAG;
         RAISE STPERROR;
      ELSIF  L_MAX_ROWNR = L_MAX_NR_OF_ROWS THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_MAXROWSOVERFLOW;
         RAISE STPERROR;
      ELSE
         A_ROWNR := L_MAX_ROWNR + 1;
      END IF; 
   ELSE
      IF NVL(A_ROWNR, -1) >  L_MAX_NR_OF_ROWS THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_MAXROWSOVERFLOW;
         RAISE STPERROR;
      END IF;   
   END IF;      
 
   
   L_RET_CODE :=  UNAPIAUT.GETWSAUTHORISATION(A_WS, L_WT_VERSION, L_LC(1), L_LC_VERSION(1), L_SS, 
                                              L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS(1), 
                                              L_LOG_HS_DETAILS(1));
   IF L_RET_CODE = UNAPIGEN.DBERR_NOCURRENTLCVERSION THEN
      L_SQLERRM := 'No current life cycle for default worksheet life cycle';
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   ELSIF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   
   
   
   
   IF L_WT_VERSION IS NULL THEN
      SELECT WT_VERSION
      INTO L_WT_VERSION
      FROM UTWS
      WHERE WS = A_WS;
   END IF;

   
   UPDATE UTWS
   SET ALLOW_MODIFY = '#'
   WHERE WS = A_WS;
   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR ;
   END IF;

   
   
   
   
   
   
   
   

   
   
   
   

   L_WS(1) := A_WS;
   L_ROWNR(1) := A_ROWNR;
   L_SC(1) := A_SC;
   L_WS_MODIFY_FLAG(1) :=  A_WS_MODIFY_FLAG;
   L_MODIFY_REASON := A_MODIFY_REASON;
   L_MODIFY_FLAG(1) := UNAPIGEN.DBERR_SUCCESS;

   
   L_RET_CODE := SAVEWSSAMPLE(L_WS, L_ROWNR, L_WS_MODIFY_FLAG, L_SC, L_ST, L_ST_VERSION, L_DESCRIPTION, 
                              L_SHELF_LIFE_VAL, L_SHELF_LIFE_UNIT, L_SAMPLING_DATE, L_CREATION_DATE, 
                              L_CREATED_BY, L_EXEC_START_DATE, L_EXEC_END_DATE, L_PRIORITY, 
                              L_LABEL_FORMAT, L_DESCR_DOC, L_DESCR_DOC_VERSION, L_RQ, L_SD, L_DATE1, 
                              L_DATE2, L_DATE3, L_DATE4, L_DATE5, L_ALLOW_ANY_PP, L_SC_CLASS, 
                              L_LOG_HS, L_LOG_HS_DETAILS, L_LC, L_LC_VERSION, L_MODIFY_FLAG, 
                              1, -1, L_MODIFY_REASON);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
      
      
      L_SQLERRM := 'SaveWsSample ret_code=' || L_RET_CODE || '#nr_of_rows' || L_NR_OF_ROWS || 
                   '#ws(1)=' || L_WS(1) || '#rownr(1)=' || L_ROWNR(1) || '#sc(1)=' || L_SC(1);
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      A_WS_MODIFY_FLAG := L_MODIFY_FLAG(1);                          
      RAISE STPERROR;
   END IF;
   

   
   
   

   
   BEGIN
      SELECT WS_LY 
      INTO L_WS_LY
      FROM UTWT 
      WHERE WT = L_WT
        AND VERSION = L_WT_VERSION;
   EXCEPTION
   WHEN NO_DATA_FOUND THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR;
   END;

   

   L_FETCHED_ROWS := 0;
   
   
   
   
   IF A_ROWNR = 1 THEN
      L_REF_SC4LY := A_SC;
   ELSE
      BEGIN
         L_REF_SC4LY := NULL;
         SELECT SC
         INTO L_REF_SC4LY
         FROM UTWSSC
         WHERE WS =A_WS
         AND ROWNR = 1;
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
         NULL;
      END;
   END IF;
   FOR L_SCME_REC IN L_SCME_CURSOR(A_SC, L_REF_SC4LY) LOOP
      
      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      L_WS(L_FETCHED_ROWS) := A_WS;
      L_SC(L_FETCHED_ROWS) := A_SC;
      L_ROWNR(L_FETCHED_ROWS) := A_ROWNR;
      L_PG(L_FETCHED_ROWS) := L_SCME_REC.PG;
      L_PGNODE(L_FETCHED_ROWS) := L_SCME_REC.PGNODE;
      L_PA(L_FETCHED_ROWS) := L_SCME_REC.PA;
      L_PANODE (L_FETCHED_ROWS) := L_SCME_REC.PANODE;
      L_ME(L_FETCHED_ROWS) := L_SCME_REC.ME;
      L_MENODE(L_FETCHED_ROWS) := L_SCME_REC.MENODE;
      L_REANALYSIS(L_FETCHED_ROWS) := L_SCME_REC.REANALYSIS;
      L_MT_VERSION(L_FETCHED_ROWS) := L_SCME_REC.MT_VERSION;

      L_WS_MODIFY_FLAG(L_FETCHED_ROWS) := A_WS_MODIFY_FLAG;
      L_MODIFY_FLAG(L_FETCHED_ROWS) := UNAPIGEN.DBERR_SUCCESS;      

   END LOOP;




































   
   IF L_FETCHED_ROWS > 0 THEN
      
      L_NR_OF_ROWS := L_FETCHED_ROWS;

      L_RET_CODE := SAVEWSMETHOD(L_WS, L_ROWNR, L_WS_MODIFY_FLAG, UNAPIGEN.ALARMS_NOT_HANDLED, L_SC,
                                 L_PG, L_PGNODE, L_PA, L_PANODE, L_ME, L_MENODE, L_REANALYSIS, 
                                 L_MT_VERSION, L_DESCRIPTION, L_VALUE_F, L_VALUE_S, L_UNIT, 
                                 L_EXEC_START_DATE, L_EXEC_END_DATE, L_EXECUTOR, L_LAB, L_EQ, L_EQ_VERSION, 
                                 L_PLANNED_EXECUTOR, L_PLANNED_EQ, L_PLANNED_EQ_VERSION, 
                                 L_MANUALLY_ENTERED, L_ALLOW_ADD, L_ASSIGN_DATE, L_ASSIGNED_BY,
                                 L_MANUALLY_ADDED, L_DELAY, L_DELAY_UNIT, L_FORMAT, 
                                 L_ACCURACY, L_REAL_COST, L_REAL_TIME, L_CALIBRATION, L_CONFIRM_COMPLETE, 
                                 L_AUTORECALC, L_ME_RESULT_EDITABLE, L_NEXT_CELL, L_SOP, L_SOP_VERSION, L_PLAUS_LOW,
                                 L_PLAUS_HIGH, L_WINSIZE_X,L_WINSIZE_Y, L_ME_CLASS, L_LOG_HS, 
                                 L_LOG_HS_DETAILS, L_LC, L_LC_VERSION, L_MODIFY_FLAG,
                                 L_NR_OF_ROWS, -1, L_MODIFY_REASON);
      
      
      
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
         L_SQLERRM := 'SaveWsMethod ret_code=' || L_RET_CODE || 'nr_of_rows' || L_NR_OF_ROWS || 
                      '#ws(1)=' || L_WS(1) || '#rownr(1)=' || L_ROWNR(1) || 
                      'sc(1)=' || L_SC(1) || 'me(1)=' || L_ME(1);
         UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
         A_WS_MODIFY_FLAG := L_MODIFY_FLAG(1);                          
         RAISE STPERROR;
      END IF;
   END IF;

   
   
   

   

   L_FETCHED_ROWS := 0;
   OPEN L_WSIILY_CURSOR;
   LOOP
      FETCH L_WSIILY_CURSOR 
      INTO L_SVII;
      EXIT WHEN L_WSIILY_CURSOR%NOTFOUND;

      OPEN L_SCII_CURSOR(A_SC, L_SVII);
      FETCH L_SCII_CURSOR
      INTO L_SCII_REC;

      IF L_SCII_CURSOR%FOUND THEN
         

         L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
         L_WS(L_FETCHED_ROWS) := A_WS;
         L_SC(L_FETCHED_ROWS) := A_SC;
         L_ROWNR(L_FETCHED_ROWS) := A_ROWNR;
         L_IC(L_FETCHED_ROWS) := L_SCII_REC.IC;
         L_ICNODE(L_FETCHED_ROWS) := L_SCII_REC.ICNODE;
         L_II(L_FETCHED_ROWS) := L_SCII_REC.II;
         L_IINODE(L_FETCHED_ROWS) := L_SCII_REC.IINODE;
         L_IE_VERSION(L_FETCHED_ROWS) := L_SCII_REC.IE_VERSION;

         L_WS_MODIFY_FLAG(L_FETCHED_ROWS) := A_WS_MODIFY_FLAG;
         L_MODIFY_FLAG(L_FETCHED_ROWS) := UNAPIGEN.DBERR_SUCCESS;      

      END IF;      
      CLOSE L_SCII_CURSOR;
   END LOOP;   
   CLOSE L_WSIILY_CURSOR;

   
   IF L_FETCHED_ROWS > 0 THEN
      
      L_NR_OF_ROWS := L_FETCHED_ROWS;

      L_RET_CODE := SAVEWSINFOFIELD(L_WS, L_ROWNR, L_WS_MODIFY_FLAG, L_SC, L_IC, L_ICNODE, L_II, 
                                    L_IINODE, L_IE_VERSION, L_IIVALUE, L_POS_X, L_POS_Y, 
                                    L_IS_PROTECTED, L_MANDATORY, L_HIDDEN, L_DSP_TITLE, L_DSP_LEN,
                                    L_DSP_TP, L_DSP_ROWS, L_II_CLASS, L_LOG_HS, L_LOG_HS_DETAILS, L_LC, 
                                    L_LC_VERSION, L_MODIFY_FLAG, L_NR_OF_ROWS, -1, L_MODIFY_REASON);
      
      
      
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
         L_SQLERRM := 'SaveWsInfofield ret_code='||L_RET_CODE||'nr_of_rows'||L_NR_OF_ROWS||'#ws(1)='||L_WS(1)||'#rownr(1)='||L_ROWNR(1)||'sc(1)='||L_SC(1)||'me(1)='||L_ME(1);
         UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
         A_WS_MODIFY_FLAG := L_MODIFY_FLAG(1);                          
         RAISE STPERROR;
      END IF;
   END IF;
      
   
   
   
   L_EV_SEQ_NR := -1;
   L_EV_DETAILS := 'rownr=' || TO_CHAR(A_ROWNR) || 
                   '#sc=' || A_SC ||
                   '#wt_version=' || L_WT_VERSION;
   
   IF A_WS_MODIFY_FLAG = UNAPIGEN.MOD_FLAG_INSERT THEN
      L_EVENT_TP := 'WsRowCreated';
   ELSIF A_WS_MODIFY_FLAG = UNAPIGEN.MOD_FLAG_UPDATE THEN
      L_EVENT_TP := 'WsRowUpdated';
   ELSIF A_WS_MODIFY_FLAG = UNAPIGEN.MOD_FLAG_DELETE THEN
      L_EVENT_TP := 'WsRowDeleted';
   END IF;
   L_RESULT := UNAPIEV.INSERTEVENT('Save1WsScRow', UNAPIGEN.P_EVMGR_NAME, 'ws',
                                   A_WS, '', '', '', L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF L_LOG_HS(1) = '1' THEN   
      IF L_EVENT_TP = 'WsRowCreated' THEN
         INSERT INTO UTWSHS(WS, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES(A_WS, NVL(L_USERID, UNAPIGEN.P_USER), UNAPIGEN.SQLUSERDESCRIPTION(NVL(L_USERID, UNAPIGEN.P_USER)), 
                L_EVENT_TP, 'worksheet "'||A_WS||'" row "'||TO_CHAR(A_ROWNR)||'" is created.', 
                CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      ELSIF L_EVENT_TP = 'WsRowUpdated' THEN
         INSERT INTO UTWSHS(WS, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES(A_WS, NVL(L_USERID, UNAPIGEN.P_USER), UNAPIGEN.SQLUSERDESCRIPTION(NVL(L_USERID, UNAPIGEN.P_USER)), 
                L_EVENT_TP, 'worksheet "'||A_WS||'" row "'||TO_CHAR(A_ROWNR)||'" is updated.', 
                CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      ELSE
         INSERT INTO UTWSHS(WS, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES(A_WS, NVL(L_USERID, UNAPIGEN.P_USER), UNAPIGEN.SQLUSERDESCRIPTION(NVL(L_USERID, UNAPIGEN.P_USER)), 
                L_EVENT_TP, 'worksheet "'||A_WS||'" row "'||TO_CHAR(A_ROWNR)||'" is deleted.', 
                CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   END IF;
   
   L_HS_DETAILS_SEQ_NR := 0;
   IF L_LOG_HS_DETAILS(1) = '1' THEN
      IF L_EVENT_TP = 'WsRowCreated' THEN
         L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
         INSERT INTO UTWSHSDETAILS(WS, TR_SEQ, EV_SEQ, SEQ, DETAILS)
         VALUES(A_WS, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR,
                'worksheet "'||A_WS||'" row "'||TO_CHAR(A_ROWNR)||'" is created.');
      ELSIF L_EVENT_TP = 'WsRowUpdated' THEN
         L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
         INSERT INTO UTWSHSDETAILS(WS, TR_SEQ, EV_SEQ, SEQ, DETAILS)
         VALUES(A_WS, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR, 
                'worksheet "'||A_WS||'" row "'||TO_CHAR(A_ROWNR)||'" is updated.');
      ELSE
         L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
         INSERT INTO UTWSHSDETAILS(WS, TR_SEQ, EV_SEQ, SEQ, DETAILS)
         VALUES(A_WS, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR,
                'worksheet "'||A_WS||'" row "'||TO_CHAR(A_ROWNR)||'" is deleted.');
      END IF;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
         RAISE STPERROR;
   END IF;

   
   A_WS_MODIFY_FLAG := UNAPIGEN.DBERR_SUCCESS;

   RETURN(L_RET_CODE);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('Save1WsScRow', SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('Save1WsScRow', L_SQLERRM);   
   END IF;
 
 
 






   IF L_SCII_CURSOR%ISOPEN THEN
         CLOSE L_SCII_CURSOR;
   END IF;
   IF L_WSMELY_CURSOR%ISOPEN THEN
      CLOSE L_WSMELY_CURSOR;
   END IF;
   IF L_WSIILY_CURSOR%ISOPEN THEN
      CLOSE L_WSIILY_CURSOR;
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'Save1WsScRow'));   
END SAVE1WSSCROW;

FUNCTION CREATEWORKSHEET
(A_WT               IN     VARCHAR2,                   
 A_WT_VERSION       IN OUT VARCHAR2,                   
 A_WS               IN OUT VARCHAR2,                   
 A_REF_DATE         IN     DATE,                       
 A_USERID           IN     VARCHAR2,                   
 A_FIELDTYPE_TAB    IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_FIELDNAMES_TAB   IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_FIELDVALUES_TAB  IN     UNAPIGEN.VC40_TABLE_TYPE,   
 A_NR_OF_ROWS       IN     NUMBER,                     
 A_MODIFY_REASON    IN     VARCHAR2)                   
RETURN NUMBER IS

L_CREATION_DATE        TIMESTAMP WITH TIME ZONE;
L_CREATED_BY           VARCHAR2(20);
L_PREF_VALUE           VARCHAR2(40);
L_DATE_CURSOR          INTEGER;
L_WT_REC               UTWT%ROWTYPE;
L_EDIT_ALLOWED         CHAR(1);
L_VALID_CF             VARCHAR2(20);
L_DELAYED_TILL         TIMESTAMP WITH TIME ZONE;
L_TIMED_EVENT_TP       VARCHAR2(255);
L_REF_DATE             TIMESTAMP WITH TIME ZONE;
L_LC                   VARCHAR2(2);
L_LC_VERSION           VARCHAR2(20);
L_SS                   VARCHAR2(2);
L_LOG_HS               CHAR(1);
L_LOG_HS_DETAILS       CHAR(1);
L_ALLOW_MODIFY         CHAR(1);
L_ACTIVE               CHAR(1);
L_SC_CLASS             VARCHAR2(2);

L_WT                   VARCHAR2(20);
L_WT_VERSION           VARCHAR2(20);
L_ROWNR                NUMBER(4);
L_ST                   VARCHAR2(20);
L_ST_VERSION           VARCHAR2(20);
L_SC                   VARCHAR2(20);
L_CREATE_IC            CHAR(1);
L_CREATE_PG            CHAR(1);
L_MODIFY_REASON        VARCHAR2(255);
L_SC_CREATE            CHAR(1);
L_WS_MODIFY_FLAG       NUMBER;
L_VALUE                UNAPIGEN.VC40_TABLE_TYPE;
L_SC_EXISTS            VARCHAR2(20);
L_ERRM                 VARCHAR2(255);
L_GK_VERSION           VARCHAR2(20);
L_HS_DETAILS_SEQ_NR    INTEGER;





   
CURSOR L_WTROWS_CURSOR (A_WT VARCHAR2, A_WT_VERSION VARCHAR2) IS
   SELECT WT, VERSION, ROWNR, ST, ST_VERSION, SC , SC_CREATE
   FROM UTWTROWS
   WHERE WT = A_WT
     AND VERSION = A_WT_VERSION
   ORDER BY ROWNR; 

CURSOR L_SC_CURSOR IS
   SELECT SC 
   FROM UTSC
   WHERE SC = L_SC;
   
BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   
   
   
   
   

   IF NVL(A_WT, ' ') = ' ' THEN      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;
   
   
   
   
   A_WT_VERSION := UNAPIGEN.VALIDATEVERSION('wt', A_WT, A_WT_VERSION);
   
   
   
   
   L_SQLERRM := '';
   IF A_REF_DATE IS NULL THEN
      L_REF_DATE := NULL;
   ELSE    
      L_REF_DATE := A_REF_DATE;
   END IF;
  
   
   
   
   
   IF NVL(A_WS, ' ') = ' ' THEN
      L_RET_CODE := GENERATEWORKSHEETCODE(A_WT, A_WT_VERSION, L_REF_DATE, 
                                          A_FIELDTYPE_TAB, A_FIELDNAMES_TAB, A_FIELDVALUES_TAB, A_NR_OF_ROWS,
                                          A_WS, L_EDIT_ALLOWED, L_VALID_CF);
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
         RAISE STPERROR;
      END IF;
   END IF;

   
   
   
   
   
   
   
   
   L_WT_VERSION := A_WT_VERSION;
   L_RET_CODE := UNAPIAUT.GETWSAUTHORISATION(A_WS, L_WT_VERSION, L_LC, L_LC_VERSION, L_SS,
                                             L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS, L_LOG_HS_DETAILS);
   IF L_RET_CODE = UNAPIGEN.DBERR_NOCURRENTLCVERSION THEN
      L_SQLERRM := 'No current life cycle for default worksheet life cycle';
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   ELSIF L_RET_CODE <> UNAPIGEN.DBERR_NOOBJECT THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_WSALREADYEXIST;
      RAISE STPERROR;
   END IF;

   
   
   
   
   
   
   
   

   IF NVL(A_WT, ' ') <> ' ' THEN
      BEGIN
         SELECT *
         INTO L_WT_REC
         FROM UTWT
         WHERE WT=A_WT
         AND VERSION = A_WT_VERSION;
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
         RAISE STPERROR;
      END;
   END IF;
      
   
   
   
   IF NVL(A_WT, ' ') <> ' ' THEN
      L_LC_VERSION := UNAPIGEN.USEVERSION('lc', L_WT_REC.WS_LC, L_WT_REC.WS_LC_VERSION);
      INSERT INTO UTWS(WS, WT, WT_VERSION, DESCRIPTION, CREATION_DATE, CREATION_DATE_TZ, CREATED_BY, SC_COUNTER,
                       MIN_ROWS, MAX_ROWS, COMPLETE, DESCR_DOC, DESCR_DOC_VERSION, 
                       LOG_HS, LOG_HS_DETAILS, ALLOW_MODIFY, ACTIVE, LC, LC_VERSION)
      VALUES(A_WS, A_WT, L_WT_REC.VERSION, L_WT_REC.DESCRIPTION, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NVL(A_USERID,UNAPIGEN.P_USER), 0,
             L_WT_REC.MIN_ROWS, L_WT_REC.MAX_ROWS, 0, L_WT_REC.DESCR_DOC, L_WT_REC.DESCR_DOC_VERSION, 
             L_LOG_HS, L_LOG_HS_DETAILS, '#', '0', L_WT_REC.WS_LC, 
             L_LC_VERSION);
      UNAPIAUT.UPDATELCINAUTHORISATIONBUFFER('ws', A_WS, '', L_WT_REC.WS_LC, L_LC_VERSION);             
   END IF;

   
   
   
   
   IF NVL(A_WT, ' ') <> ' ' THEN
      IF NVL(L_WT_REC.INHERIT_AU, '0') = '1' THEN
         INSERT INTO UTWSAU
         (WS, AU, AU_VERSION, AUSEQ, VALUE)
         SELECT A_WS, A.AU, '' B_VERSION, A.AUSEQ, A.VALUE
         FROM UTAU B, UTWTAU A 
         WHERE A.WT = A_WT
           AND A.VERSION = A_WT_VERSION
           AND A.AU = B.AU
           AND UNAPIGEN.USEVERSION('au', A.AU, A.AU_VERSION) = B.VERSION;
      ELSE
         INSERT INTO UTWSAU
         (WS, AU, AU_VERSION, AUSEQ, VALUE)
         SELECT A_WS, A.AU, '' B_VERSION, A.AUSEQ, A.VALUE
         FROM UTAU B, UTWTAU A
         WHERE A.WT = A_WT
           AND A.VERSION = A_WT_VERSION
           AND A.AU = B.AU
           AND UNAPIGEN.USEVERSION('au', A.AU, A.AU_VERSION) = B.VERSION
           AND B.INHERIT_AU = '1';                 
      END IF;

      
      
      
      OPEN L_WTROWS_CURSOR(A_WT, A_WT_VERSION);
      LOOP
         FETCH L_WTROWS_CURSOR 
         INTO L_WT, L_WT_VERSION, L_ROWNR, L_ST, L_ST_VERSION, L_SC, L_SC_CREATE;
         EXIT WHEN L_WTROWS_CURSOR%NOTFOUND;

         L_WS_MODIFY_FLAG := UNAPIGEN.MOD_FLAG_INSERT; 

         IF NVL(L_SC, ' ') <> ' ' THEN
            OPEN L_SC_CURSOR;
            FETCH L_SC_CURSOR INTO L_SC_EXISTS;
            IF L_SC_CURSOR%NOTFOUND THEN
               L_SC_EXISTS := '';
            END IF;     
            CLOSE L_SC_CURSOR;
         END IF;     
         IF L_SC_CREATE = '1' THEN
            IF NVL(L_SC, ' ') = ' ' OR NVL(L_SC_EXISTS, ' ') = ' ' THEN        
               L_RET_CODE := CREATEWSSAMPLE(A_WS, L_ROWNR, L_ST, L_ST_VERSION, L_SC, L_CREATE_IC, 
                                            L_CREATE_PG, L_REF_DATE, A_USERID, 
                                            A_FIELDTYPE_TAB, A_FIELDNAMES_TAB, A_FIELDVALUES_TAB, A_NR_OF_ROWS,
                                            L_MODIFY_REASON);
               IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
                  UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
                  L_ERRM  := 'ws=' || A_WS || '#rownr =' || L_ROWNR ||
                             '#st =' || L_ST || '#st_version =' || L_ST_VERSION ||
                             '#sc =' || L_SC ||
                             '#CreateWsSample#ErrorCode=' || TO_CHAR(L_RET_CODE); 
                  RAISE STPERROR;
               END IF;
            ELSE 
               L_RET_CODE := SAVE1WSSCROW(A_WS, L_ROWNR, L_WS_MODIFY_FLAG, L_SC, L_MODIFY_REASON);
               IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
                  UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
                  L_ERRM  := 'ws=' || A_WS || '#rownr=' || L_ROWNR ||
                             '#sc =' || L_SC ||
                             '#Save1WsScRow#ErrorCode=' || TO_CHAR(L_RET_CODE); 
                  RAISE STPERROR;
               END IF;
            END IF;
         ELSIF L_SC_CREATE = '0' AND NVL(L_SC, ' ') <> ' ' THEN
            IF NVL(L_SC_EXISTS, ' ') <> ' ' THEN
               L_RET_CODE := SAVE1WSSCROW(A_WS, L_ROWNR, L_WS_MODIFY_FLAG, L_SC, L_MODIFY_REASON);
               IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
                  UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
                  L_ERRM  := 'ws=' || A_WS || '#rownr=' || L_ROWNR ||
                             '#sc=' || L_SC ||
                             '#Save1WsScRow#ErrorCode=' || TO_CHAR(L_RET_CODE); 
                  RAISE STPERROR;
               END IF;
            ELSIF NVL(L_SC_EXISTS, ' ') = ' ' THEN 
               L_RET_CODE := UNAPIGEN.DBERR_GENFAIL;
               UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
               L_ERRM  := 'ws=' || A_WS || '#rownr =' || L_ROWNR ||
                          '#scnotexists and l_sc_create = '|| L_SC_CREATE||
                          '#sc =' || L_SC ||
                          '#CreateWsSample#ErrorCode=' || TO_CHAR(L_RET_CODE); 
               RAISE STPERROR;
            END IF;
         ELSE
            
            
            
            
            
            
            
            
            
            L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;      
         END IF;    
         IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
            UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
            RAISE STPERROR;
         END IF;
      END LOOP;
      CLOSE L_WTROWS_CURSOR;
      
      
      
      
      
      L_VALUE(1) := A_WS;  
      L_RET_CODE := UNAPIWSP.SAVE1WSGROUPKEY(A_WS, 'opensheets', L_GK_VERSION, L_VALUE, 1, 
                                             A_MODIFY_REASON);
      
       
      IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_SUCCESS;
      END IF;
   END IF;

   
   
   
   L_EVENT_TP := 'WorksheetCreated';
   L_EV_SEQ_NR := -1;
   L_EV_DETAILS := 'wt_version=' || A_WT_VERSION;
   
   L_RESULT := UNAPIEV.INSERTEVENT('CreateWorksheet', UNAPIGEN.P_EVMGR_NAME, 'ws',
                                   A_WS, '', '', '', L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   INSERT INTO UTWSHS(WS, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
   VALUES(A_WS, NVL(A_USERID, UNAPIGEN.P_USER), UNAPIGEN.SQLUSERDESCRIPTION(NVL(A_USERID, UNAPIGEN.P_USER)), 
          L_EVENT_TP, 'worksheet "'||A_WS||'" is created.', 
          CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);

   L_HS_DETAILS_SEQ_NR := 0;
   IF L_LOG_HS_DETAILS = '1' THEN
      L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
      INSERT INTO UTWSHSDETAILS(WS, TR_SEQ, EV_SEQ, SEQ, DETAILS)
      VALUES(A_WS, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR, 
             'worksheet "'||A_WS||'" is created.');
   END IF;
   
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
     UNAPIGEN.LOGERROR('CreateWorksheet', SQLERRM);
     ELSIF L_SQLERRM IS NOT NULL THEN
     UNAPIGEN.LOGERROR('CreateWorksheet', L_SQLERRM);  
   ELSIF L_ERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('CreateWorksheet', L_ERRM);   
   END IF;   



   IF L_WTROWS_CURSOR%ISOPEN THEN
      CLOSE L_WTROWS_CURSOR;
   END IF;
   IF L_SC_CURSOR%ISOPEN THEN
      CLOSE L_SC_CURSOR;
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'CreateWorksheet'));
END CREATEWORKSHEET;

FUNCTION CREATEWSSAMPLE
(A_WS               IN     VARCHAR2,                   
 A_ROWNR            IN OUT NUMBER,                     
 A_ST               IN     VARCHAR2,                   
 A_ST_VERSION       IN OUT VARCHAR2,                   
 A_SC               IN OUT VARCHAR2,                   
 A_CREATE_IC        IN     VARCHAR2,                   
 A_CREATE_PG        IN     VARCHAR2,                   
 A_REF_DATE         IN     DATE,                       
 A_USERID           IN     VARCHAR2,                   
 A_FIELDTYPE_TAB    IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_FIELDNAMES_TAB   IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_FIELDVALUES_TAB  IN     UNAPIGEN.VC40_TABLE_TYPE,   
 A_NR_OF_ROWS       IN     NUMBER,                     
 A_MODIFY_REASON    IN     VARCHAR2)                   
RETURN NUMBER IS

L_LC                    VARCHAR2(2);
L_LC_VERSION            VARCHAR2(20);
L_SS                    VARCHAR2(2);
L_LOG_HS                CHAR(1);
L_LOG_HS_DETAILS        CHAR(1);
L_ALLOW_MODIFY          CHAR(1);
L_ACTIVE                CHAR(1); 
L_WS_MODIFY_FLAG        NUMBER;
L_HS_DETAILS_SEQ_NR     INTEGER;
L_WT                    VARCHAR2(20);
L_WT_VERSION            VARCHAR2(20);
L_FIELDTYPE_TAB         UNAPIGEN.VC20_TABLE_TYPE;
L_FIELDNAMES_TAB        UNAPIGEN.VC20_TABLE_TYPE;
L_FIELDVALUES_TAB       UNAPIGEN.VC40_TABLE_TYPE;
L_FIELDNR_OF_ROWS       NUMBER;
L_WS_IN_FIELDS          BOOLEAN;
L_WT_IN_FIELDS          BOOLEAN;
L_WT_VERSION_IN_FIELDS  BOOLEAN;






BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   
   
   
   
   

   IF NVL(A_WS, ' ') = ' ' THEN      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;
   
   IF NVL(A_ROWNR, -1) = -1 THEN      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INVALIDROWNR;
      RAISE STPERROR;
   END IF;
   
   IF NVL(A_ST, ' ') = ' ' AND NVL(A_SC, ' ') = ' ' THEN      
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;
   
   
   A_ST_VERSION := UNAPIGEN.VALIDATEVERSION('st', A_ST, A_ST_VERSION);

   L_RET_CODE := UNAPIAUT.GETWSAUTHORISATION(A_WS, L_WT_VERSION, L_LC, L_LC_VERSION, L_SS,
                                             L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS, L_LOG_HS_DETAILS);

   IF L_RET_CODE = UNAPIGEN.DBERR_NOCURRENTLCVERSION THEN
      L_SQLERRM := 'No current life cycle for default worksheet life cycle';
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   ELSIF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;
   
   SELECT WT, WT_VERSION
   INTO L_WT, L_WT_VERSION
   FROM UTWS
   WHERE WS = A_WS;

   
   L_WS_IN_FIELDS := FALSE;
   L_WT_IN_FIELDS := FALSE;
   L_WT_VERSION_IN_FIELDS := FALSE;
   L_FIELDNR_OF_ROWS := A_NR_OF_ROWS;
   FOR L_ROW IN 1..A_NR_OF_ROWS LOOP
      L_FIELDTYPE_TAB(L_ROW) := A_FIELDTYPE_TAB(L_ROW);
      L_FIELDNAMES_TAB(L_ROW) := A_FIELDNAMES_TAB(L_ROW);
      L_FIELDVALUES_TAB(L_ROW) := A_FIELDVALUES_TAB(L_ROW);
      IF L_FIELDTYPE_TAB(L_ROW) = 'ws' AND L_FIELDNAMES_TAB(L_ROW)='ws' THEN
         L_WS_IN_FIELDS := TRUE;
      END IF;
      IF L_FIELDTYPE_TAB(L_ROW) = 'wt' AND L_FIELDNAMES_TAB(L_ROW)='wt' THEN
         L_WT_IN_FIELDS := TRUE;
      END IF;
      IF L_FIELDTYPE_TAB(L_ROW) = 'wt' AND L_FIELDNAMES_TAB(L_ROW)='wt_version' THEN
         L_WT_VERSION_IN_FIELDS := TRUE;
      END IF;
   END LOOP;
   IF NOT L_WS_IN_FIELDS THEN
      L_FIELDNR_OF_ROWS := L_FIELDNR_OF_ROWS + 1;
      L_FIELDTYPE_TAB(L_FIELDNR_OF_ROWS) := 'ws';
      L_FIELDNAMES_TAB(L_FIELDNR_OF_ROWS) := 'ws';
      L_FIELDVALUES_TAB(L_FIELDNR_OF_ROWS) := A_WS;
   END IF;
   IF NOT L_WT_IN_FIELDS THEN
      L_FIELDNR_OF_ROWS := L_FIELDNR_OF_ROWS + 1;
      L_FIELDTYPE_TAB(L_FIELDNR_OF_ROWS) := 'wt';
      L_FIELDNAMES_TAB(L_FIELDNR_OF_ROWS) := 'wt';
      L_FIELDVALUES_TAB(L_FIELDNR_OF_ROWS) := L_WT;
   END IF;
   IF NOT L_WT_VERSION_IN_FIELDS THEN
      L_FIELDNR_OF_ROWS := L_FIELDNR_OF_ROWS + 1;
      L_FIELDTYPE_TAB(L_FIELDNR_OF_ROWS) := 'wt';
      L_FIELDNAMES_TAB(L_FIELDNR_OF_ROWS) := 'wt_version';
      L_FIELDVALUES_TAB(L_FIELDNR_OF_ROWS) := L_WT_VERSION;
   END IF;

   
   
   
   
   
   
   
   
   L_RET_CODE := UNAPISC.CREATESAMPLE(A_ST, A_ST_VERSION, A_SC, A_REF_DATE, A_CREATE_IC, A_CREATE_PG, 
                                      A_USERID, 
                                      L_FIELDTYPE_TAB, L_FIELDNAMES_TAB, L_FIELDVALUES_TAB, L_FIELDNR_OF_ROWS,
                                      A_MODIFY_REASON);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;
   
   L_WS_MODIFY_FLAG := UNAPIGEN.MOD_FLAG_INSERT; 
   L_RET_CODE := SAVE1WSSCROW(A_WS, A_ROWNR, L_WS_MODIFY_FLAG, A_SC, A_MODIFY_REASON);
   
   IF L_RET_CODE NOT IN (0, -1, -2, -3, -4)  THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;
  
   
   
   
   L_EVENT_TP := 'WsSampleCreated';
   L_EV_SEQ_NR := -1;
   L_EV_DETAILS := 'rownr=' || A_ROWNR || 
                   '#sc=' || A_SC ||
                   '#wt_version=' ||L_WT_VERSION;
   L_RESULT := UNAPIEV.INSERTEVENT('CreateWsSample', UNAPIGEN.P_EVMGR_NAME, 'ws',
                                   A_WS, '', '', '', L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   INSERT INTO UTWSHS(WS, WHO, WHO_DESCRIPTION, WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
   VALUES(A_WS, NVL(A_USERID, UNAPIGEN.P_USER), UNAPIGEN.SQLUSERDESCRIPTION(NVL(A_USERID, UNAPIGEN.P_USER)), 
          L_EVENT_TP, 'worksheet "'||A_WS||'" sample "'||A_SC||'" is created.', 
          CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);

   L_HS_DETAILS_SEQ_NR := 0;
   IF L_LOG_HS_DETAILS = '1' THEN
      L_HS_DETAILS_SEQ_NR := L_HS_DETAILS_SEQ_NR + 1;
      INSERT INTO UTWSHSDETAILS(WS, TR_SEQ, EV_SEQ, SEQ, DETAILS)
      VALUES(A_WS, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR, L_HS_DETAILS_SEQ_NR, 
             'worksheet "'||A_WS||'" is created.');
   END IF;
   
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
         RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('CreateWsSample', SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('CreateWsSample', L_SQLERRM);   
   END IF;



   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'CreateWsSample'));
END CREATEWSSAMPLE;

FUNCTION GENERATEWORKSHEETCODE
(A_WT               IN     VARCHAR2,                   
 A_WT_VERSION       IN OUT VARCHAR2,                   
 A_REF_DATE         IN     DATE,                       
 A_FIELDTYPE_TAB    IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_FIELDNAMES_TAB   IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_FIELDVALUES_TAB  IN     UNAPIGEN.VC40_TABLE_TYPE,   
 A_NR_OF_ROWS       IN     NUMBER,                     
 A_WS               OUT    VARCHAR2,                   
 A_EDIT_ALLOWED     OUT    CHAR,                       
 A_VALID_CF         OUT    VARCHAR2)                   
RETURN NUMBER IS

L_WS_UC         VARCHAR2(20);
L_NEXT_VAL      VARCHAR2(255);

L_FIELDTYPE_TAB       UNAPIGEN.VC20_TABLE_TYPE;
L_FIELDNAMES_TAB      UNAPIGEN.VC40_TABLE_TYPE;
L_FIELDVALUES_TAB     UNAPIGEN.VC40_TABLE_TYPE;
L_NR_OF_ROWS          NUMBER;
L_I                   NUMBER;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   A_WT_VERSION := UNAPIGEN.USEVERSION('wt', A_WT, A_WT_VERSION);
   
   
   
   IF NVL(A_WT, ' ') <> ' ' THEN
      BEGIN
         SELECT WS_UC
         INTO L_WS_UC
         FROM UTWT
         WHERE WT = A_WT
         AND VERSION = A_WT_VERSION;

      EXCEPTION
      WHEN NO_DATA_FOUND THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
         RAISE STPERROR;
      END;
   END IF;

   
   
   
   
   IF NVL(L_WS_UC, ' ') = ' ' THEN
      BEGIN
         SELECT UC
         INTO L_WS_UC
         FROM UTUC
         WHERE DEF_MASK_FOR = 'ws';

      EXCEPTION
      WHEN NO_DATA_FOUND THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NODFLTMASKFORWS;
         RAISE STPERROR;
      WHEN TOO_MANY_ROWS THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_MULTDEFMASKFORWS;
         RAISE STPERROR;
      END;
   END IF;

   
   
   
      
   IF (A_NR_OF_ROWS > 0) THEN
    FOR L_I IN 1..A_NR_OF_ROWS LOOP
        L_FIELDTYPE_TAB(L_I) :=  A_FIELDTYPE_TAB(L_I);
        L_FIELDNAMES_TAB(L_I) :=  A_FIELDNAMES_TAB(L_I);
        L_FIELDVALUES_TAB(L_I) :=  A_FIELDVALUES_TAB(L_I);
    END LOOP  ;
   END IF ;
   L_FIELDTYPE_TAB (NVL(A_NR_OF_ROWS, 0) +1) :=  'wt';
   L_FIELDNAMES_TAB (NVL(A_NR_OF_ROWS, 0) +1) :=  'wt';
   L_FIELDVALUES_TAB(NVL(A_NR_OF_ROWS, 0) +1) :=  A_WT;
   L_FIELDTYPE_TAB (NVL(A_NR_OF_ROWS, 0) +2) :=  'wt';
   L_FIELDNAMES_TAB (NVL(A_NR_OF_ROWS, 0) +2) :=  'wt_version';
   L_FIELDVALUES_TAB(NVL(A_NR_OF_ROWS, 0) +2) :=  A_WT_VERSION;
   L_NR_OF_ROWS :=   NVL(A_NR_OF_ROWS, 0) +2;
 
 L_RET_CODE := UNAPIUC.CREATENEXTUNIQUECODEVALUE(L_WS_UC, L_FIELDTYPE_TAB, L_FIELDNAMES_TAB, L_FIELDVALUES_TAB, L_NR_OF_ROWS,
                                                   A_REF_DATE, A_WS,
                                                   A_EDIT_ALLOWED, A_VALID_CF);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
     UNAPIGEN.LOGERROR('GenerateWorksheetCode', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'GenerateWorksheetCode'));
END GENERATEWORKSHEETCODE;

FUNCTION SELECTWORKSHEET
(A_COL_ID                   IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_TP                   IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_VALUE                IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_NR_OF_ROWS           IN      NUMBER,                    
 A_WS                       OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_WT                       OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_WT_VERSION               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_DESCRIPTION              OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_CREATION_DATE            OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_CREATED_BY               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_EXEC_START_DATE          OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_EXEC_END_DATE            OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_PRIORITY                 OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_DUE_DATE                 OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_RESPONSIBLE              OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SC_COUNTER               OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_MIN_ROWS                 OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_MAX_ROWS                 OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_COMPLETE                 OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_VALID_CF                 OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_DESCR_DOC                OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_DESCR_DOC_VERSION        OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_DATE1                    OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_DATE2                    OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_DATE3                    OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_DATE4                    OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_DATE5                    OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_WS_CLASS                 OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_LOG_HS                   OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LOG_HS_DETAILS           OUT     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_ALLOW_MODIFY             OUT     UNAPIGEN.CHAR1_TABLE_TYPE,          
 A_AR                       OUT     UNAPIGEN.CHAR1_TABLE_TYPE,          
 A_ACTIVE                   OUT     UNAPIGEN.CHAR1_TABLE_TYPE,          
 A_LC                       OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_LC_VERSION               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SS                       OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_NR_OF_ROWS               IN OUT  NUMBER,
 A_ORDER_BY_CLAUSE          IN      VARCHAR2,
 A_NEXT_ROWS                IN      NUMBER)
RETURN NUMBER IS

L_COL_OPERATOR           UNAPIGEN.VC20_TABLE_TYPE;
L_COL_ANDOR              UNAPIGEN.VC3_TABLE_TYPE;

BEGIN

FOR L_X IN 1..A_COL_NR_OF_ROWS LOOP
    L_COL_OPERATOR(L_X) := '=';
    L_COL_ANDOR(L_X) := 'AND';
END LOOP;

 RETURN(UNAPIWS.SELECTWORKSHEET(  A_COL_ID,
                                  A_COL_TP,
                                  A_COL_VALUE,
                                  L_COL_OPERATOR,
                                  L_COL_ANDOR,
                                  A_COL_NR_OF_ROWS,
                                  A_WS,
                                  A_WT,
                                  A_WT_VERSION,
                                  A_DESCRIPTION,
                                  A_CREATION_DATE,
                                  A_CREATED_BY,
                                  A_EXEC_START_DATE,
                                  A_EXEC_END_DATE,
                                  A_PRIORITY,
                                  A_DUE_DATE,
                                  A_RESPONSIBLE,
                                  A_SC_COUNTER,
                                  A_MIN_ROWS,
                                  A_MAX_ROWS,
                                  A_COMPLETE,
                                  A_VALID_CF,
                                  A_DESCR_DOC,
                                  A_DESCR_DOC_VERSION,
                                  A_DATE1,
                                  A_DATE2,
                                  A_DATE3,
                                  A_DATE4,
                                  A_DATE5,
                                  A_WS_CLASS,
                                  A_LOG_HS,
                                  A_LOG_HS_DETAILS,
                                  A_ALLOW_MODIFY,
                                  A_AR,
                                  A_ACTIVE,
                                  A_LC,
                                  A_LC_VERSION,
                                  A_SS,
                                  A_NR_OF_ROWS,
                                  A_ORDER_BY_CLAUSE,
                                  A_NEXT_ROWS));

END SELECTWORKSHEET;

FUNCTION SELECTWORKSHEET
(A_COL_ID                   IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_TP                   IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_VALUE                IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_OPERATOR             IN      UNAPIGEN.VC20_TABLE_TYPE,  
 A_COL_ANDOR                IN      UNAPIGEN.VC3_TABLE_TYPE,   
 A_COL_NR_OF_ROWS           IN      NUMBER,                    
 A_WS                       OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_WT                       OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_WT_VERSION               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_DESCRIPTION              OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_CREATION_DATE            OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_CREATED_BY               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_EXEC_START_DATE          OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_EXEC_END_DATE            OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_PRIORITY                 OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_DUE_DATE                 OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_RESPONSIBLE              OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SC_COUNTER               OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_MIN_ROWS                 OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_MAX_ROWS                 OUT     UNAPIGEN.NUM_TABLE_TYPE,   
 A_COMPLETE                 OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_VALID_CF                 OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_DESCR_DOC                OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_DESCR_DOC_VERSION        OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_DATE1                    OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_DATE2                    OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_DATE3                    OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_DATE4                    OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_DATE5                    OUT     UNAPIGEN.DATE_TABLE_TYPE,  
 A_WS_CLASS                 OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_LOG_HS                   OUT     UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_LOG_HS_DETAILS           OUT     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_ALLOW_MODIFY             OUT     UNAPIGEN.CHAR1_TABLE_TYPE,          
 A_AR                       OUT     UNAPIGEN.CHAR1_TABLE_TYPE,          
 A_ACTIVE                   OUT     UNAPIGEN.CHAR1_TABLE_TYPE,          
 A_LC                       OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_LC_VERSION               OUT     UNAPIGEN.VC20_TABLE_TYPE,  
 A_SS                       OUT     UNAPIGEN.VC2_TABLE_TYPE,   
 A_NR_OF_ROWS               IN OUT  NUMBER,
 A_ORDER_BY_CLAUSE          IN      VARCHAR2,
 A_NEXT_ROWS                IN      NUMBER)
RETURN NUMBER IS

L_WS                             VARCHAR2(20);
L_WT                             VARCHAR2(20);
L_WT_VERSION                     VARCHAR2(20);
L_DESCRIPTION                    VARCHAR2(40);
L_CREATION_DATE                  TIMESTAMP WITH TIME ZONE;
L_CREATED_BY                     VARCHAR2(20);
L_EXEC_START_DATE                TIMESTAMP WITH TIME ZONE;
L_EXEC_END_DATE                  TIMESTAMP WITH TIME ZONE;
L_PRIORITY                       NUMBER(3);
L_DUE_DATE                       TIMESTAMP WITH TIME ZONE;
L_RESPONSIBLE                    VARCHAR2(20);
L_SC_COUNTER                     NUMBER(4);
L_MIN_ROWS                       NUMBER(4);
L_MAX_ROWS                       NUMBER(4);
L_COMPLETE                       CHAR(1);
L_VALID_CF                       VARCHAR2(20);
L_DESCR_DOC                      VARCHAR2(40);
L_DESCR_DOC_VERSION              VARCHAR2(20);
L_DATE1                          TIMESTAMP WITH TIME ZONE;
L_DATE2                          TIMESTAMP WITH TIME ZONE;
L_DATE3                          TIMESTAMP WITH TIME ZONE;
L_DATE4                          TIMESTAMP WITH TIME ZONE;
L_DATE5                          TIMESTAMP WITH TIME ZONE;

L_WS_CLASS                       VARCHAR2(2);
L_LOG_HS                         CHAR(1);
L_LOG_HS_DETAILS                 CHAR(1);
L_ALLOW_MODIFY                   CHAR(1);
L_AR                             CHAR(1);
L_ACTIVE                         CHAR(1);
L_LC                             VARCHAR2(2);
L_LC_VERSION                     VARCHAR2(20);
L_SS                             VARCHAR2(2);
L_ORDER_BY_CLAUSE                VARCHAR2(255);
L_FROM_CLAUSE                    VARCHAR2(255);
L_NEXT_WSGK_JOIN                 VARCHAR2(4);
L_NEXT_WS_JOIN                   VARCHAR2(4);
L_COLUMN_HANDLED                 BOOLEAN_TABLE_TYPE;
L_ANYOR_PRESENT                  BOOLEAN;
L_COL_ANDOR                      VARCHAR2(3);
L_PREV_COL_TP                    VARCHAR2(40);
L_PREV_COL_ID                    VARCHAR2(40);
L_PREV_COL_INDEX                 INTEGER;
L_WHERE_CLAUSE4JOIN              VARCHAR2(1000);
L_LENGTH                         INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;
   
   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_SELECTWS_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_SELECTWS_CURSOR);
         P_SELECTWS_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;
   
   
   IF A_NEXT_ROWS = 1 THEN
      IF P_SELECTWS_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
   
      P_SELECTION_VAL_TAB.DELETE;
      L_SQL_STRING := 'SELECT a.ws, a.wt, a.wt_version, a.description, a.creation_date, ' ||
                      'a.created_by, a.exec_start_date, a.exec_end_date, a.priority, a.due_date, ' ||
                      'a.responsible, a.sc_counter, a.min_rows, a.max_rows, a.complete, a.valid_cf, ' ||
                      'a.descr_doc, a.descr_doc_version, a.date1, a.date2, a.date3, a.date4, ' ||
                      'a.date5, a.last_comment, a.ws_class, a.log_hs, a.log_hs_details,  ' ||
                      'a.allow_modify, a.active, a.lc, a.lc_version, a.ss, a.ar FROM ';

      L_FROM_CLAUSE := 'dd' || UNAPIGEN.P_DD || '.uvws a';

      
      L_WHERE_CLAUSE4JOIN := '';
      L_WHERE_CLAUSE := '';
      L_ANYOR_PRESENT := FALSE;
      FOR I IN 1..A_COL_NR_OF_ROWS LOOP
         L_COLUMN_HANDLED(I) := FALSE;
         IF LTRIM(RTRIM(UPPER(A_COL_ANDOR(I)))) = 'OR' AND
            NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
            L_ANYOR_PRESENT := TRUE;
         END IF;
         
         
         IF I<>1 THEN
            IF NVL(A_COL_TP(I), ' ') = NVL(A_COL_TP(I-1), ' ') AND
               NVL(A_COL_ID(I), ' ') = NVL(A_COL_ID(I-1), ' ') AND
               NVL(A_COL_OPERATOR(I), '=') = '=' AND
               NVL(A_COL_OPERATOR(I-1), '=') = '=' AND
               NVL(A_COL_ANDOR(I-1), 'AND') =  'AND' AND
               (NVL(A_COL_VALUE(I), ' ') <> ' ' OR NVL(A_COL_VALUE(I-1), ' ') <> ' ') THEN
               IF I> 2 AND A_COL_ANDOR(I-2) = 'OR' THEN
                  L_ANYOR_PRESENT := TRUE;
               END IF;
            END IF;
         END IF;         
      END LOOP;

      
      
      
      
      L_NEXT_WSGK_JOIN := 'a';
      L_NEXT_WS_JOIN := 'a';      
      FOR I IN REVERSE 1..A_COL_NR_OF_ROWS LOOP
         IF NVL(LTRIM(A_COL_ID(I)), ' ') = ' ' THEN
            RETURN(UNAPIGEN.DBERR_SELCOLSINVALID);
         END IF;
   
         
         L_COL_ANDOR := 'AND';
         IF I<>1 THEN
            L_COL_ANDOR := A_COL_ANDOR(I-1);
         END IF;
         IF L_COL_ANDOR IS NULL THEN
            
            L_COL_ANDOR := 'AND';
         END IF;
         IF L_COLUMN_HANDLED(I) = FALSE THEN
            IF NVL(A_COL_TP(I), ' ') = 'wsgk' THEN 
               IF NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
                  UNAPIGEN.WHERECLAUSESTRINGBUILDER (A_BASE_TABLE => 'utws', A_INDEX =>I, A_COL_TP => A_COL_TP(I), A_COL_ID => A_COL_ID(I),
                                   A_COL_VALUE => A_COL_VALUE(I), A_COL_OPERATOR => A_COL_OPERATOR(I),
                                   A_COL_ANDOR => L_COL_ANDOR, A_ANYOR_PRESENT => L_ANYOR_PRESENT,
                                   A_JOINTABLE_PREFIX => 'utwsgk', A_JOINCOLUMN1 => 'ws', A_JOINCOLUMN2 => '', 
                                   A_PREV_COL_TP => L_PREV_COL_TP, A_PREV_COL_ID => L_PREV_COL_ID, A_PREV_COL_INDEX => L_PREV_COL_INDEX,
                                   A_NEXTTABLE_TOJOIN => L_NEXT_WSGK_JOIN, A_FROM_CLAUSE => L_FROM_CLAUSE,
                                   A_WHERE_CLAUSE4JOIN => L_WHERE_CLAUSE4JOIN, A_WHERE_CLAUSE => L_WHERE_CLAUSE,
                                   A_SQL_VAL_TAB => P_SELECTION_VAL_TAB);                  
               ELSIF INSTR(A_ORDER_BY_CLAUSE, 't'|| TO_CHAR(I)) <> 0 THEN
                  L_FROM_CLAUSE := L_FROM_CLAUSE || ', utwsgk' || A_COL_ID(I) || ' t' || I;
                  L_COL_ANDOR := 'AND'; 
                  
                  L_WHERE_CLAUSE4JOIN := L_WHERE_CLAUSE4JOIN ||
                                    't' || I || '.ws(+) = a.ws ' || L_COL_ANDOR || ' ';
               END IF;
               L_COLUMN_HANDLED(I) := TRUE; 
            ELSE
               
               IF NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
                  UNAPIGEN.WHERECLAUSESTRINGBUILDER (A_BASE_TABLE => 'utws', A_INDEX =>I, A_COL_TP => A_COL_TP(I), A_COL_ID => A_COL_ID(I),
                                   A_COL_VALUE => A_COL_VALUE(I), A_COL_OPERATOR => A_COL_OPERATOR(I),
                                   A_COL_ANDOR => L_COL_ANDOR, A_ANYOR_PRESENT => L_ANYOR_PRESENT,
                                   A_JOINTABLE_PREFIX => '', A_JOINCOLUMN1 => '', A_JOINCOLUMN2 => '', 
                                   A_PREV_COL_TP => L_PREV_COL_TP, A_PREV_COL_ID => L_PREV_COL_ID, A_PREV_COL_INDEX => L_PREV_COL_INDEX,
                                   A_NEXTTABLE_TOJOIN => L_NEXT_WS_JOIN, A_FROM_CLAUSE => L_FROM_CLAUSE,
                                   A_WHERE_CLAUSE4JOIN => L_WHERE_CLAUSE4JOIN, A_WHERE_CLAUSE => L_WHERE_CLAUSE,
                                 A_SQL_VAL_TAB => P_SELECTION_VAL_TAB);                  
               END IF;
               L_COLUMN_HANDLED(I) := TRUE; 
            END IF;
         END IF;
      END LOOP;

      
      IF SUBSTR(L_WHERE_CLAUSE4JOIN, -4) = 'AND ' THEN
         L_WHERE_CLAUSE4JOIN := SUBSTR(L_WHERE_CLAUSE4JOIN, 1,
                                  LENGTH(L_WHERE_CLAUSE4JOIN)-4);
      END IF;
      
      
      IF SUBSTR(L_WHERE_CLAUSE, -4) = 'AND ' THEN
         L_WHERE_CLAUSE := SUBSTR(L_WHERE_CLAUSE, 1,
                                  LENGTH(L_WHERE_CLAUSE)-4);
      END IF;
      IF UPPER(SUBSTR(L_WHERE_CLAUSE, -4)) = ' OR ' THEN
         L_WHERE_CLAUSE := SUBSTR(L_WHERE_CLAUSE, 1,
                                  LENGTH(L_WHERE_CLAUSE)-3);
      END IF;
      
      IF L_WHERE_CLAUSE4JOIN IS NOT NULL THEN
         IF L_WHERE_CLAUSE IS NULL THEN
            L_WHERE_CLAUSE := ' WHERE ' || L_WHERE_CLAUSE4JOIN;
         ELSE
            L_WHERE_CLAUSE := ' WHERE (' || L_WHERE_CLAUSE4JOIN || ') AND ('||L_WHERE_CLAUSE||') ';
         END IF;
      ELSE
         IF L_WHERE_CLAUSE IS NOT NULL THEN
            L_WHERE_CLAUSE := ' WHERE '||L_WHERE_CLAUSE;
         ELSE
            L_WHERE_CLAUSE := ' ';
         END IF;
      END IF;

      IF NVL(A_ORDER_BY_CLAUSE, ' ') = ' ' THEN
         L_ORDER_BY_CLAUSE := ' ORDER BY a.ws';
      ELSE
         L_ORDER_BY_CLAUSE := A_ORDER_BY_CLAUSE;
      END IF;

      L_SQL_STRING := L_SQL_STRING || L_FROM_CLAUSE || L_WHERE_CLAUSE || L_ORDER_BY_CLAUSE;
      P_SELECTION_CLAUSE := L_FROM_CLAUSE || L_WHERE_CLAUSE;

      IF P_SELECTWS_CURSOR IS NULL THEN
         P_SELECTWS_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;

      UNAPIAUT.ADDORACLECBOHINT (L_SQL_STRING) ;
      DBMS_SQL.PARSE(P_SELECTWS_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      FOR L_X IN 1..P_SELECTION_VAL_TAB.COUNT() LOOP
         DBMS_SQL.BIND_VARIABLE(P_SELECTWS_CURSOR, ':col_val'||L_X , P_SELECTION_VAL_TAB(L_X)); 
      END LOOP;      
      DBMS_SQL.DEFINE_COLUMN(P_SELECTWS_CURSOR, 1, L_WS, 20);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTWS_CURSOR, 2, L_WT, 20);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTWS_CURSOR, 3, L_WT_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTWS_CURSOR, 4, L_DESCRIPTION, 40);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTWS_CURSOR, 5, L_CREATION_DATE);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTWS_CURSOR, 6, L_CREATED_BY, 20);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTWS_CURSOR, 7, L_EXEC_START_DATE);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTWS_CURSOR, 8, L_EXEC_END_DATE);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTWS_CURSOR, 9, L_PRIORITY);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTWS_CURSOR, 10, L_DUE_DATE);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTWS_CURSOR, 11, L_RESPONSIBLE, 20);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTWS_CURSOR, 12, L_SC_COUNTER);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTWS_CURSOR, 13, L_MIN_ROWS);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTWS_CURSOR, 14, L_MAX_ROWS);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTWS_CURSOR, 15, L_COMPLETE, 1);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTWS_CURSOR, 16, L_VALID_CF, 20);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTWS_CURSOR, 17, L_DESCR_DOC, 40);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTWS_CURSOR, 18, L_DESCR_DOC_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTWS_CURSOR, 19, L_DATE1);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTWS_CURSOR, 20, L_DATE2);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTWS_CURSOR, 21, L_DATE3);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTWS_CURSOR, 22, L_DATE4);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTWS_CURSOR, 23, L_DATE5);
    
      DBMS_SQL.DEFINE_COLUMN(P_SELECTWS_CURSOR, 25, L_WS_CLASS, 2);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTWS_CURSOR, 26, L_LOG_HS, 1);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTWS_CURSOR, 27, L_LOG_HS_DETAILS, 1);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTWS_CURSOR, 28, L_ALLOW_MODIFY, 1);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTWS_CURSOR, 29, L_ACTIVE, 1);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTWS_CURSOR, 30, L_LC, 2);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTWS_CURSOR, 31, L_LC_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTWS_CURSOR, 32, L_SS, 2);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTWS_CURSOR, 33, L_AR, 1);
      L_RESULT := DBMS_SQL.EXECUTE(P_SELECTWS_CURSOR);

   END IF;
   
   L_RESULT := DBMS_SQL.FETCH_ROWS(P_SELECTWS_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_SELECTWS_CURSOR, 1, L_WS);
      DBMS_SQL.COLUMN_VALUE(P_SELECTWS_CURSOR, 2, L_WT);
      DBMS_SQL.COLUMN_VALUE(P_SELECTWS_CURSOR, 3, L_WT_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_SELECTWS_CURSOR, 4, L_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE(P_SELECTWS_CURSOR, 5, L_CREATION_DATE);
      DBMS_SQL.COLUMN_VALUE(P_SELECTWS_CURSOR, 6, L_CREATED_BY);
      DBMS_SQL.COLUMN_VALUE(P_SELECTWS_CURSOR, 7, L_EXEC_START_DATE);
      DBMS_SQL.COLUMN_VALUE(P_SELECTWS_CURSOR, 8, L_EXEC_END_DATE);
      DBMS_SQL.COLUMN_VALUE(P_SELECTWS_CURSOR, 9, L_PRIORITY);
      DBMS_SQL.COLUMN_VALUE(P_SELECTWS_CURSOR, 10, L_DUE_DATE);
      DBMS_SQL.COLUMN_VALUE(P_SELECTWS_CURSOR, 11, L_RESPONSIBLE);
      DBMS_SQL.COLUMN_VALUE(P_SELECTWS_CURSOR, 12, L_SC_COUNTER);
      DBMS_SQL.COLUMN_VALUE(P_SELECTWS_CURSOR, 13, L_MIN_ROWS);
      DBMS_SQL.COLUMN_VALUE(P_SELECTWS_CURSOR, 14, L_MAX_ROWS);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTWS_CURSOR, 15, L_COMPLETE);
      DBMS_SQL.COLUMN_VALUE(P_SELECTWS_CURSOR, 16, L_VALID_CF);
      DBMS_SQL.COLUMN_VALUE(P_SELECTWS_CURSOR, 17, L_DESCR_DOC);
      DBMS_SQL.COLUMN_VALUE(P_SELECTWS_CURSOR, 18, L_DESCR_DOC_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_SELECTWS_CURSOR, 19, L_DATE1);
      DBMS_SQL.COLUMN_VALUE(P_SELECTWS_CURSOR, 20, L_DATE2);
      DBMS_SQL.COLUMN_VALUE(P_SELECTWS_CURSOR, 21, L_DATE3);
      DBMS_SQL.COLUMN_VALUE(P_SELECTWS_CURSOR, 22, L_DATE4);
      DBMS_SQL.COLUMN_VALUE(P_SELECTWS_CURSOR, 23, L_DATE5);
   
      DBMS_SQL.COLUMN_VALUE(P_SELECTWS_CURSOR, 25, L_WS_CLASS);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTWS_CURSOR, 26, L_LOG_HS);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTWS_CURSOR, 27, L_LOG_HS_DETAILS);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTWS_CURSOR, 28, L_ALLOW_MODIFY);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTWS_CURSOR, 29, L_ACTIVE);
      DBMS_SQL.COLUMN_VALUE(P_SELECTWS_CURSOR, 30, L_LC);
      DBMS_SQL.COLUMN_VALUE(P_SELECTWS_CURSOR, 31, L_LC_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_SELECTWS_CURSOR, 32, L_SS);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTWS_CURSOR, 33, L_AR);
      
      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_WS(L_FETCHED_ROWS) := L_WS;
      A_WT(L_FETCHED_ROWS) := L_WT;
      A_WT_VERSION(L_FETCHED_ROWS) := L_WT_VERSION;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;
      A_CREATION_DATE(L_FETCHED_ROWS) := L_CREATION_DATE;
      A_CREATED_BY(L_FETCHED_ROWS) := L_CREATED_BY;
      A_EXEC_START_DATE(L_FETCHED_ROWS) := L_EXEC_START_DATE;
      A_EXEC_END_DATE(L_FETCHED_ROWS) := L_EXEC_END_DATE;
      A_PRIORITY(L_FETCHED_ROWS) := L_PRIORITY;
      A_DUE_DATE(L_FETCHED_ROWS) := L_DUE_DATE;
      A_RESPONSIBLE(L_FETCHED_ROWS) := L_RESPONSIBLE;
      A_SC_COUNTER(L_FETCHED_ROWS) :=  L_SC_COUNTER;
      A_MIN_ROWS(L_FETCHED_ROWS) := L_MIN_ROWS;
      A_MAX_ROWS(L_FETCHED_ROWS) := L_MAX_ROWS;
      A_COMPLETE(L_FETCHED_ROWS) := L_COMPLETE;
      A_VALID_CF(L_FETCHED_ROWS) := L_VALID_CF;
      A_DESCR_DOC(L_FETCHED_ROWS) := L_DESCR_DOC;
      A_DESCR_DOC_VERSION(L_FETCHED_ROWS) := L_DESCR_DOC_VERSION;
      A_DATE1(L_FETCHED_ROWS) := L_DATE1;
      A_DATE2(L_FETCHED_ROWS) := L_DATE2;
      A_DATE3(L_FETCHED_ROWS) := L_DATE3;
      A_DATE4(L_FETCHED_ROWS) := L_DATE4;
      A_DATE5(L_FETCHED_ROWS) := L_DATE5;
     
      A_WS_CLASS(L_FETCHED_ROWS) := L_WS_CLASS;
      A_LOG_HS(L_FETCHED_ROWS) := L_LOG_HS;
      A_LOG_HS_DETAILS(L_FETCHED_ROWS) := L_LOG_HS_DETAILS;
      A_ALLOW_MODIFY(L_FETCHED_ROWS) := L_ALLOW_MODIFY;
      A_ACTIVE(L_FETCHED_ROWS) := L_ACTIVE;
      A_LC(L_FETCHED_ROWS) := L_LC;
      A_LC_VERSION(L_FETCHED_ROWS) := L_LC_VERSION;
      A_SS(L_FETCHED_ROWS) := L_SS;
      A_AR(L_FETCHED_ROWS) := L_AR;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_SELECTWS_CURSOR);
      END IF;

   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_SELECTWS_CURSOR);
       P_SELECTWS_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_SELECTWS_CURSOR);
      P_SELECTWS_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;
   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
             'SelectWorksheet', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      L_LENGTH := 200;
      FOR L_X IN 1..10 LOOP
         IF ( LENGTH(L_SQL_STRING) > ((L_LENGTH*(L_X-1))+1) ) THEN
            INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
            VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                   'SelectWorksheet', '(SQL)'||SUBSTR(L_SQL_STRING, (L_LENGTH*(L_X-1))+1, L_LENGTH));             
         ELSE
            EXIT;
         END IF;
      END LOOP;            
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN(P_SELECTWS_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(P_SELECTWS_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END SELECTWORKSHEET;

BEGIN
  P_PREV_MOD_FLAG := FALSE;
  P_CURR_MOD_FLAG := FALSE;
  P_WS_DETAILS_CHG := FALSE;
  P_WS_DETAILS_CHG_TR_SEQ := -1;      
  P_GETWSME_BIND_WS_SELECTION := FALSE;
  P_GETWSME_BIND_FIXED_WS_FLAG := FALSE;
END UNAPIWS;
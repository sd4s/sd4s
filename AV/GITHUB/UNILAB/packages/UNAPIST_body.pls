PACKAGE BODY unapist AS

L_SQLERRM         VARCHAR2(255);
L_SQL_STRING      VARCHAR2(4000);
L_WHERE_CLAUSE    VARCHAR2(3000);
L_EVENT_TP        UTEV.EV_TP%TYPE;
L_EV_DETAILS      VARCHAR2(255);
L_RET_CODE        NUMBER;
L_RESULT          NUMBER;
L_FETCHED_ROWS    NUMBER;
L_EV_SEQ_NR       NUMBER;
STPERROR          EXCEPTION;


P_ST_CURSOR            INTEGER;
P_STP_CURSOR           INTEGER;
P_STPR_CURSOR          INTEGER;
P_STPP_CURSOR          INTEGER;
P_STIP_CURSOR          INTEGER;
P_SELECTST_CURSOR      INTEGER;
P_SELECTSTGK_CURSOR    INTEGER;
P_SELECTSTPROP_CURSOR  INTEGER;
P_SAVESTPP_CALLS       INTEGER;
P_SAVESTPP_TR_SEQ      INTEGER;
P_SAVESTIP_CALLS       INTEGER;
P_SAVESTIP_TR_SEQ      INTEGER;
P_STGK_CURSOR          INTEGER;
P_GETST_CURSOR         INTEGER;

FUNCTION GETVERSION
   RETURN VARCHAR2
IS
BEGIN
   RETURN('06.07.00.00_21.00');
EXCEPTION
   WHEN OTHERS THEN
      RETURN (NULL);
END GETVERSION;

FUNCTION GETSTCOMMONIPLIST
(A_ST                      IN       UNAPIGEN.VC20_TABLE_TYPE,   
 A_VERSION                 IN       UNAPIGEN.VC20_TABLE_TYPE,   
 A_ST_NR_ROWS              IN       NUMBER,                     
 A_IP                      OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_IP_VERSION              OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_DESCRIPTION             OUT      UNAPIGEN.VC40_TABLE_TYPE,   
 A_IP_CNT                  OUT      UNAPIGEN.NUM_TABLE_TYPE,    
 A_FREQ_TP                 OUT      UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_FREQ_VAL                OUT      UNAPIGEN.NUM_TABLE_TYPE,    
 A_FREQ_UNIT               OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_INVERT_FREQ             OUT      UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_LAST_SCHED              OUT      UNAPIGEN.DATE_TABLE_TYPE,   
 A_LAST_CNT                OUT      UNAPIGEN.NUM_TABLE_TYPE,    
 A_LAST_VAL                OUT      UNAPIGEN.VC40_TABLE_TYPE,   
 A_NR_OF_ROWS              IN OUT   NUMBER,                     
 A_NEXT_ROWS               IN       NUMBER)                     
RETURN NUMBER IS
BEGIN
   RETURN(UNAPIST2.GETSTCOMMONIPLIST
                   (A_ST, A_VERSION, A_ST_NR_ROWS, A_IP, A_IP_VERSION, A_DESCRIPTION, A_IP_CNT,
                   A_FREQ_TP, A_FREQ_VAL, A_FREQ_UNIT, A_INVERT_FREQ, 
                   A_LAST_SCHED, A_LAST_CNT, A_LAST_VAL, A_NR_OF_ROWS, 
                   A_NEXT_ROWS));   
END GETSTCOMMONIPLIST;

FUNCTION GETSTCOMMONPPLIST
(A_ST                      IN     UNAPIGEN.VC20_TABLE_TYPE,     
 A_VERSION                 IN     UNAPIGEN.VC20_TABLE_TYPE,     
 A_ST_NR_ROWS              IN     NUMBER,                       
 A_PP                      OUT    UNAPIGEN.VC20_TABLE_TYPE,     
 A_PP_VERSION              OUT    UNAPIGEN.VC20_TABLE_TYPE,     
 A_PP_KEY1                 OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_PP_KEY2                 OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_PP_KEY3                 OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_PP_KEY4                 OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_PP_KEY5                 OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_DESCRIPTION             OUT    UNAPIGEN.VC40_TABLE_TYPE,     
 A_PP_CNT                  OUT    UNAPIGEN.NUM_TABLE_TYPE,      
 A_FREQ_TP                 OUT    UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_FREQ_VAL                OUT    UNAPIGEN.NUM_TABLE_TYPE,      
 A_FREQ_UNIT               OUT    UNAPIGEN.VC20_TABLE_TYPE,     
 A_INVERT_FREQ             OUT    UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_LAST_SCHED              OUT    UNAPIGEN.DATE_TABLE_TYPE,     
 A_LAST_CNT                OUT    UNAPIGEN.NUM_TABLE_TYPE,      
 A_LAST_VAL                OUT    UNAPIGEN.VC40_TABLE_TYPE,     
 A_INHERIT_AU              OUT    UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_NR_OF_ROWS              IN OUT NUMBER,                       
 A_NEXT_ROWS               IN     NUMBER)                       
RETURN NUMBER IS
BEGIN
   RETURN(UNAPIST2.GETSTCOMMONPPLIST
                   (A_ST, A_VERSION, A_ST_NR_ROWS, A_PP, A_PP_VERSION, 
                    A_PP_KEY1, A_PP_KEY2, A_PP_KEY3, A_PP_KEY4, A_PP_KEY5,
                    A_DESCRIPTION, A_PP_CNT, A_FREQ_TP, A_FREQ_VAL, A_FREQ_UNIT, A_INVERT_FREQ, 
                   A_LAST_SCHED, A_LAST_CNT, A_LAST_VAL, A_INHERIT_AU, 
                   A_NR_OF_ROWS, A_NEXT_ROWS));   
END GETSTCOMMONPPLIST;

FUNCTION GETSTCOMMONGKLIST
(A_ST              IN       UNAPIGEN.VC20_TABLE_TYPE,   
 A_VERSION         IN       UNAPIGEN.VC20_TABLE_TYPE,   
 A_ST_NR_ROWS      IN       NUMBER,                     
 A_GK              OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_GK_VERSION      OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_VALUE           OUT      UNAPIGEN.VC40_TABLE_TYPE,   
 A_DESCRIPTION     OUT      UNAPIGEN.VC40_TABLE_TYPE,   
 A_GK_CNT          OUT      UNAPIGEN.NUM_TABLE_TYPE,    
 A_IS_PROTECTED    OUT      UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_VALUE_UNIQUE    OUT      UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_SINGLE_VALUED   OUT      UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_NEW_VAL_ALLOWED OUT      UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_MANDATORY       OUT      UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_VALUE_LIST_TP   OUT      UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_DSP_ROWS        OUT      UNAPIGEN.NUM_TABLE_TYPE,    
 A_NR_OF_ROWS      IN OUT   NUMBER,                     
 A_NEXT_ROWS       IN       NUMBER)                     
RETURN NUMBER IS
BEGIN
   RETURN(UNAPIST2.GETSTCOMMONGKLIST
                   (A_ST, A_VERSION, A_ST_NR_ROWS, A_GK, A_GK_VERSION, A_VALUE, A_DESCRIPTION, A_GK_CNT,
                   A_IS_PROTECTED, A_VALUE_UNIQUE, A_SINGLE_VALUED, A_NEW_VAL_ALLOWED, 
                   A_MANDATORY, A_VALUE_LIST_TP, A_DSP_ROWS, A_NR_OF_ROWS, A_NEXT_ROWS));   
END GETSTCOMMONGKLIST;

FUNCTION SAVESTCOMMONIPLIST
(A_ST                    IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_VERSION               IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_ST_NR_ROWS            IN     NUMBER,                      
 A_IP                    IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_IP_VERSION            IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_IP_FLAG               IN     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_IS_PROTECTED          IN     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_HIDDEN                IN     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_FREQ_TP               IN     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_FREQ_VAL              IN     UNAPIGEN.NUM_TABLE_TYPE,     
 A_FREQ_UNIT             IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_INVERT_FREQ           IN     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_LAST_SCHED            IN     UNAPIGEN.DATE_TABLE_TYPE,    
 A_LAST_CNT              IN     UNAPIGEN.NUM_TABLE_TYPE,     
 A_LAST_VAL              IN     UNAPIGEN.VC40_TABLE_TYPE,    
 A_INHERIT_AU            IN     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_NR_OF_ROWS            IN     NUMBER,                      
 A_MODIFY_REASON         IN     VARCHAR2)                    
RETURN NUMBER IS
BEGIN
   RETURN(UNAPIST2.SAVESTCOMMONIPLIST
                   (A_ST, A_VERSION, A_ST_NR_ROWS, A_IP, A_IP_VERSION, A_IP_FLAG, A_IS_PROTECTED, A_HIDDEN,
                   A_FREQ_TP, A_FREQ_VAL, A_FREQ_UNIT, A_INVERT_FREQ, A_LAST_SCHED, A_LAST_CNT, A_LAST_VAL, A_INHERIT_AU, A_NR_OF_ROWS, 
                   A_MODIFY_REASON));   
END SAVESTCOMMONIPLIST;

FUNCTION SAVESTCOMMONPPLIST
(A_ST                    IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_VERSION               IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_ST_NR_ROWS            IN     NUMBER,                      
 A_PP                    IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PP_VERSION            IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_PP_KEY1               IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_PP_KEY2               IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_PP_KEY3               IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_PP_KEY4               IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_PP_KEY5               IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_PP_FLAG               IN     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_FREQ_TP               IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_FREQ_VAL              IN     UNAPIGEN.NUM_TABLE_TYPE,    
 A_FREQ_UNIT             IN     UNAPIGEN.VC20_TABLE_TYPE,   
 A_INVERT_FREQ           IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_LAST_SCHED            IN     UNAPIGEN.DATE_TABLE_TYPE,   
 A_LAST_CNT              IN     UNAPIGEN.NUM_TABLE_TYPE,    
 A_LAST_VAL              IN     UNAPIGEN.VC40_TABLE_TYPE,   
 A_INHERIT_AU            IN     UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_NR_OF_ROWS            IN     NUMBER,                      
 A_MODIFY_REASON         IN     VARCHAR2)                    
RETURN NUMBER IS
BEGIN
   RETURN(UNAPIST2.SAVESTCOMMONPPLIST
                   (A_ST, A_VERSION, A_ST_NR_ROWS, A_PP, A_PP_VERSION,
                   A_PP_KEY1, A_PP_KEY2, A_PP_KEY3, A_PP_KEY4, A_PP_KEY5, 
                   A_PP_FLAG, A_FREQ_TP, A_FREQ_VAL, A_FREQ_UNIT, A_INVERT_FREQ, 
                   A_LAST_SCHED, A_LAST_CNT, A_LAST_VAL, A_INHERIT_AU, 
                   A_NR_OF_ROWS, A_MODIFY_REASON));   
END SAVESTCOMMONPPLIST;

FUNCTION SAVESTCOMMONGKLIST
(A_ST              IN  UNAPIGEN.VC20_TABLE_TYPE,     
 A_VERSION         IN  UNAPIGEN.VC20_TABLE_TYPE,     
 A_ST_NR_ROWS      IN  NUMBER,                       
 A_GK              IN  UNAPIGEN.VC20_TABLE_TYPE,     
 A_GK_VERSION      IN  UNAPIGEN.VC20_TABLE_TYPE,     
 A_VALUE           IN  UNAPIGEN.VC40_TABLE_TYPE,     
 A_GK_FLAG         IN  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_NR_OF_ROWS      IN  NUMBER,                       
 A_MODIFY_REASON   IN  VARCHAR2)                     
RETURN NUMBER IS
BEGIN
   RETURN(UNAPIST2.SAVESTCOMMONGKLIST
                   (A_ST, A_VERSION, A_ST_NR_ROWS, A_GK, A_GK_VERSION, A_VALUE, A_GK_FLAG,
                   A_NR_OF_ROWS, A_MODIFY_REASON));   
END SAVESTCOMMONGKLIST;

FUNCTION GETSAMPLETYPELIST
(A_ST                      OUT      UNAPIGEN.VC20_TABLE_TYPE, 
 A_VERSION                 OUT      UNAPIGEN.VC20_TABLE_TYPE,   
 A_VERSION_IS_CURRENT      OUT      UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_EFFECTIVE_FROM          OUT      UNAPIGEN.DATE_TABLE_TYPE,   
 A_EFFECTIVE_TILL          OUT      UNAPIGEN.DATE_TABLE_TYPE,   
 A_DESCRIPTION             OUT      UNAPIGEN.VC40_TABLE_TYPE, 
 A_SS                      OUT      UNAPIGEN.VC2_TABLE_TYPE,  
 A_NR_OF_ROWS              IN OUT   NUMBER,                   
 A_WHERE_CLAUSE            IN       VARCHAR2,                 
 A_NEXT_ROWS               IN       NUMBER)                   
RETURN NUMBER IS

L_ST                   VARCHAR2(20);
L_VERSION              VARCHAR2(20);
L_VERSION_IS_CURRENT   CHAR(1);
L_EFFECTIVE_FROM       TIMESTAMP WITH TIME ZONE;
L_EFFECTIVE_TILL       TIMESTAMP WITH TIME ZONE;
L_DESCRIPTION          VARCHAR2(40);
L_SS                   VARCHAR2(2);

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_ST_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_ST_CURSOR);
         P_ST_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_ST_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      IF P_ST_CURSOR IS NULL THEN
         P_ST_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;

      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
         L_WHERE_CLAUSE := 'WHERE active = ''1'' ORDER BY st, version'; 
      ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
         L_WHERE_CLAUSE := 'WHERE version_is_current = ''1'' '||
                           'AND st = ''' || REPLACE(A_WHERE_CLAUSE, '''', '''''') || 
                           ''' ORDER BY st, version';
      ELSE
         L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
      END IF;

      L_SQL_STRING := 'SELECT st, version, nvl(version_is_current,''0''), effective_from,' ||
                      'effective_till, description, ss FROM dd' ||
                      UNAPIGEN.P_DD || '.uvst ' || L_WHERE_CLAUSE;

      DBMS_SQL.PARSE(P_ST_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

      DBMS_SQL.DEFINE_COLUMN(P_ST_CURSOR, 1, L_ST, 20);
      DBMS_SQL.DEFINE_COLUMN(P_ST_CURSOR, 2, L_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_ST_CURSOR, 3, L_VERSION_IS_CURRENT, 1);
      DBMS_SQL.DEFINE_COLUMN(P_ST_CURSOR, 4, L_EFFECTIVE_FROM);
      DBMS_SQL.DEFINE_COLUMN(P_ST_CURSOR, 5, L_EFFECTIVE_TILL);
      DBMS_SQL.DEFINE_COLUMN(P_ST_CURSOR, 6, L_DESCRIPTION, 40);
      DBMS_SQL.DEFINE_COLUMN(P_ST_CURSOR, 7, L_SS, 2);
      L_RESULT := DBMS_SQL.EXECUTE(P_ST_CURSOR);
   END IF;

   L_RESULT := DBMS_SQL.FETCH_ROWS(P_ST_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_ST_CURSOR, 1, L_ST);
      DBMS_SQL.COLUMN_VALUE(P_ST_CURSOR, 2, L_VERSION);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_ST_CURSOR, 3, L_VERSION_IS_CURRENT);
      DBMS_SQL.COLUMN_VALUE(P_ST_CURSOR, 4, L_EFFECTIVE_FROM);
      DBMS_SQL.COLUMN_VALUE(P_ST_CURSOR, 5, L_EFFECTIVE_TILL);
      DBMS_SQL.COLUMN_VALUE(P_ST_CURSOR, 6, L_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE(P_ST_CURSOR, 7, L_SS);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_ST(L_FETCHED_ROWS) := L_ST;
      A_VERSION(L_FETCHED_ROWS) := L_VERSION;
      A_VERSION_IS_CURRENT(L_FETCHED_ROWS) := L_VERSION_IS_CURRENT;
      A_EFFECTIVE_FROM(L_FETCHED_ROWS) := L_EFFECTIVE_FROM;
      A_EFFECTIVE_TILL(L_FETCHED_ROWS) := L_EFFECTIVE_TILL;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;
      A_SS(L_FETCHED_ROWS) := L_SS;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_ST_CURSOR);
      END IF;
   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_ST_CURSOR);
       P_ST_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_ST_CURSOR);
      P_ST_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME,
                          ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
              'GetSampleTypeList', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (P_ST_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (P_ST_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETSAMPLETYPELIST;

FUNCTION GETSAMPLETYPE
(A_ST                      OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_VERSION                 OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_VERSION_IS_CURRENT      OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_EFFECTIVE_FROM          OUT  UNAPIGEN.DATE_TABLE_TYPE,     
 A_EFFECTIVE_TILL          OUT  UNAPIGEN.DATE_TABLE_TYPE,     
 A_DESCRIPTION             OUT  UNAPIGEN.VC40_TABLE_TYPE,     
 A_DESCRIPTION2            OUT  UNAPIGEN.VC40_TABLE_TYPE,     
 A_IS_TEMPLATE             OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_CONFIRM_USERID          OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_SHELF_LIFE_VAL          OUT  UNAPIGEN.NUM_TABLE_TYPE,      
 A_SHELF_LIFE_UNIT         OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_NR_PLANNED_SC           OUT  UNAPIGEN.NUM_TABLE_TYPE,      
 A_FREQ_TP                 OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_FREQ_VAL                OUT  UNAPIGEN.NUM_TABLE_TYPE,      
 A_FREQ_UNIT               OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_INVERT_FREQ             OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_LAST_SCHED              OUT  UNAPIGEN.DATE_TABLE_TYPE,     
 A_LAST_CNT                OUT  UNAPIGEN.NUM_TABLE_TYPE,      
 A_LAST_VAL                OUT  UNAPIGEN.VC40_TABLE_TYPE,     
 A_PRIORITY                OUT  UNAPIGEN.NUM_TABLE_TYPE,      
 A_LABEL_FORMAT            OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_DESCR_DOC               OUT  UNAPIGEN.VC40_TABLE_TYPE,     
 A_DESCR_DOC_VERSION       OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_ALLOW_ANY_PP            OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_SC_UC                   OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_SC_UC_VERSION           OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_SC_LC                   OUT  UNAPIGEN.VC2_TABLE_TYPE,      
 A_SC_LC_VERSION           OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_INHERIT_AU              OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_INHERIT_GK              OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_ST_CLASS                OUT  UNAPIGEN.VC2_TABLE_TYPE,      
 A_LOG_HS                  OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_ALLOW_MODIFY            OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_ACTIVE                  OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_LC                      OUT  UNAPIGEN.VC2_TABLE_TYPE,      
 A_LC_VERSION              OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_SS                      OUT  UNAPIGEN.VC2_TABLE_TYPE,      
 A_NR_OF_ROWS              IN OUT  NUMBER,                    
 A_WHERE_CLAUSE            IN   VARCHAR2)                     
RETURN NUMBER IS

L_ST                          VARCHAR2(20);
L_VERSION                     VARCHAR2(20);
L_VERSION_IS_CURRENT          CHAR(1);
L_EFFECTIVE_FROM              TIMESTAMP WITH TIME ZONE;
L_EFFECTIVE_TILL              TIMESTAMP WITH TIME ZONE;
L_DESCRIPTION                 VARCHAR2(40);
L_DESCRIPTION2                VARCHAR2(40);
L_IS_TEMPLATE                 CHAR(1);
L_CONFIRM_USERID              CHAR(1);
L_SHELF_LIFE_VAL              NUMBER(3);
L_SHELF_LIFE_UNIT             VARCHAR2(20);
L_NR_PLANNED_SC               NUMBER(3);
L_FREQ_TP                     CHAR(1);
L_FREQ_VAL                    NUMBER;
L_FREQ_UNIT                   VARCHAR2(20);
L_INVERT_FREQ                 CHAR(1);
L_LAST_SCHED                  TIMESTAMP WITH TIME ZONE;
L_LAST_CNT                    NUMBER(5);
L_LAST_VAL                    VARCHAR2(40);
L_PRIORITY                    NUMBER(3);
L_LABEL_FORMAT                VARCHAR2(20);
L_DESCR_DOC                   VARCHAR2(40);
L_DESCR_DOC_VERSION           VARCHAR2(20);
L_ALLOW_ANY_PP                CHAR(1);
L_SC_UC                       VARCHAR2(20);
L_SC_UC_VERSION               VARCHAR2(20);
L_SC_LC                       VARCHAR2(2);
L_SC_LC_VERSION               VARCHAR2(20);
L_INHERIT_GK                  CHAR(1);
L_INHERIT_AU                  CHAR(1);
L_ST_CLASS                    VARCHAR2(2);
L_LOG_HS                      CHAR(1);
L_ALLOW_MODIFY                CHAR(1);
L_ACTIVE                      CHAR(1);
L_LC                          VARCHAR2(2);
L_LC_VERSION                  VARCHAR2(20);
L_SS                          VARCHAR2(2);
L_BIND_RT_SELECTION           BOOLEAN;
L_BIND_FIXED_ST_FLAG          BOOLEAN;

BEGIN

   L_BIND_RT_SELECTION := FALSE;
   L_BIND_FIXED_ST_FLAG := FALSE;
   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'ORDER BY st.st, st.version'; 
   ELSIF A_WHERE_CLAUSE = 'RTSELECTION' THEN
      IF UNAPIRT.P_SELECTION_CLAUSE IS NOT NULL THEN 
         IF INSTR(UPPER(UNAPIRT.P_SELECTION_CLAUSE), 'WHERE') <> 0 THEN       
            L_WHERE_CLAUSE := 'WHERE (st.st, st.version) IN '||
                                 '(SELECT b.st, UNAPIGEN.UseVersion(''st'',b.st,b.st_version)'||
                                 ' FROM dd'||UNAPIGEN.P_DD||'.uvrtst b, '||
                                 UNAPIRT.P_SELECTION_CLAUSE||
                                 ' AND a.rt = b.rt'||
                                 ' AND a.version = b.version) '||
                              'ORDER BY st.st, st.version';  
         ELSE
            L_WHERE_CLAUSE := 'WHERE (st.st, st.version) IN '||
                                 '(SELECT b.st, UNAPIGEN.UseVersion(''st'',b.st,b.st_version)'||
                                 ' FROM dd'||UNAPIGEN.P_DD||'.uvrtst b, '||
                                 UNAPIRT.P_SELECTION_CLAUSE||
                                 ' WHERE a.rt = b.rt'||
                                 ' AND a.version = b.version) '||
                              'ORDER BY st.st, st.version';  
         END IF;
         L_BIND_RT_SELECTION := TRUE;
      ELSE
         L_WHERE_CLAUSE := 'ORDER BY st.st, st.version'; 
      END IF;      
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_BIND_FIXED_ST_FLAG := TRUE;
      L_WHERE_CLAUSE := 'WHERE st.version_is_current = ''1'' '||
                        'AND st.st = :st_val ORDER BY st.st, st.version';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   IF NOT DBMS_SQL.IS_OPEN(P_GETST_CURSOR) THEN
      P_GETST_CURSOR := DBMS_SQL.OPEN_CURSOR;

      L_SQL_STRING := 'SELECT st.st, st.version, nvl(st.version_is_current,''0''), '||
                      'st.effective_from, st.effective_till, st.description, '||
                      'st.description2, st.is_template, st.confirm_userid, st.shelf_life_val, '||
                      'st.shelf_life_unit, st.nr_planned_sc, st.freq_tp, st.freq_val, '||
                      'st.freq_unit, st.invert_freq, st.last_sched, st.last_cnt, st.last_val, '||
                      'st.priority, st.label_format, st.descr_doc, st.descr_doc_version, '||
                      'st.allow_any_pp, st.sc_uc, st.sc_uc_version, st.sc_lc, st.sc_lc_version, '||
                      'st.inherit_au, st.inherit_gk, st.st_class, st.log_hs, st.allow_modify, '||
                      'st.active, st.lc, st.lc_version, st.ss ' ||
                      'FROM dd' || UNAPIGEN.P_DD || '.uvst st ' || L_WHERE_CLAUSE;

      DBMS_SQL.PARSE(P_GETST_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      IF L_BIND_RT_SELECTION THEN
         FOR L_X IN 1..UNAPIRT.P_SELECTION_VAL_TAB.COUNT() LOOP
            DBMS_SQL.BIND_VARIABLE(P_GETST_CURSOR, ':col_val'||L_X , UNAPIRT.P_SELECTION_VAL_TAB(L_X)); 
         END LOOP;
      ELSIF L_BIND_FIXED_ST_FLAG THEN
         DBMS_SQL.BIND_VARIABLE(P_GETST_CURSOR, ':st_val' , A_WHERE_CLAUSE); 
      END IF;
      DBMS_SQL.DEFINE_COLUMN(P_GETST_CURSOR, 1, L_ST, 20);
      DBMS_SQL.DEFINE_COLUMN(P_GETST_CURSOR, 2, L_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_GETST_CURSOR, 3, L_VERSION_IS_CURRENT, 1);
      DBMS_SQL.DEFINE_COLUMN(P_GETST_CURSOR, 4, L_EFFECTIVE_FROM);
      DBMS_SQL.DEFINE_COLUMN(P_GETST_CURSOR, 5, L_EFFECTIVE_TILL);
      DBMS_SQL.DEFINE_COLUMN(P_GETST_CURSOR, 6, L_DESCRIPTION, 40);
      DBMS_SQL.DEFINE_COLUMN(P_GETST_CURSOR, 7, L_DESCRIPTION2, 40);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_GETST_CURSOR, 8, L_IS_TEMPLATE, 1);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_GETST_CURSOR, 9, L_CONFIRM_USERID, 1);
      DBMS_SQL.DEFINE_COLUMN(P_GETST_CURSOR, 10, L_SHELF_LIFE_VAL);
      DBMS_SQL.DEFINE_COLUMN(P_GETST_CURSOR, 11, L_SHELF_LIFE_UNIT, 20);
      DBMS_SQL.DEFINE_COLUMN(P_GETST_CURSOR, 12, L_NR_PLANNED_SC);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_GETST_CURSOR, 13, L_FREQ_TP, 1);
      DBMS_SQL.DEFINE_COLUMN(P_GETST_CURSOR, 14, L_FREQ_VAL);
      DBMS_SQL.DEFINE_COLUMN(P_GETST_CURSOR, 15, L_FREQ_UNIT, 20);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_GETST_CURSOR, 16, L_INVERT_FREQ, 1);
      DBMS_SQL.DEFINE_COLUMN(P_GETST_CURSOR, 17, L_LAST_SCHED);
      DBMS_SQL.DEFINE_COLUMN(P_GETST_CURSOR, 18, L_LAST_CNT);
      DBMS_SQL.DEFINE_COLUMN(P_GETST_CURSOR, 19, L_LAST_VAL, 40);
      DBMS_SQL.DEFINE_COLUMN(P_GETST_CURSOR, 20, L_PRIORITY);
      DBMS_SQL.DEFINE_COLUMN(P_GETST_CURSOR, 21, L_LABEL_FORMAT, 20);
      DBMS_SQL.DEFINE_COLUMN(P_GETST_CURSOR, 22, L_DESCR_DOC, 40);
      DBMS_SQL.DEFINE_COLUMN(P_GETST_CURSOR, 23, L_DESCR_DOC_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_GETST_CURSOR, 24, L_ALLOW_ANY_PP, 1);
      DBMS_SQL.DEFINE_COLUMN(P_GETST_CURSOR, 25, L_SC_UC, 20);
      DBMS_SQL.DEFINE_COLUMN(P_GETST_CURSOR, 26, L_SC_UC_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(P_GETST_CURSOR, 27, L_SC_LC, 2);
      DBMS_SQL.DEFINE_COLUMN(P_GETST_CURSOR, 28, L_SC_LC_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_GETST_CURSOR, 29, L_INHERIT_AU, 1);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_GETST_CURSOR, 30, L_INHERIT_GK, 1);
      DBMS_SQL.DEFINE_COLUMN(P_GETST_CURSOR, 31, L_ST_CLASS, 2);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_GETST_CURSOR, 32, L_LOG_HS, 1);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_GETST_CURSOR, 33, L_ALLOW_MODIFY, 1);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_GETST_CURSOR, 34, L_ACTIVE, 1);
      DBMS_SQL.DEFINE_COLUMN(P_GETST_CURSOR, 35, L_LC, 2);
      DBMS_SQL.DEFINE_COLUMN(P_GETST_CURSOR, 36, L_LC_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(P_GETST_CURSOR, 37, L_SS, 2);
      L_RESULT := DBMS_SQL.EXECUTE(P_GETST_CURSOR);
   END IF;

   L_RESULT := DBMS_SQL.FETCH_ROWS(P_GETST_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_GETST_CURSOR, 1, L_ST);
      DBMS_SQL.COLUMN_VALUE(P_GETST_CURSOR, 2, L_VERSION);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_GETST_CURSOR, 3, L_VERSION_IS_CURRENT);
      DBMS_SQL.COLUMN_VALUE(P_GETST_CURSOR, 4, L_EFFECTIVE_FROM);
      DBMS_SQL.COLUMN_VALUE(P_GETST_CURSOR, 5, L_EFFECTIVE_TILL);
      DBMS_SQL.COLUMN_VALUE(P_GETST_CURSOR, 6, L_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE(P_GETST_CURSOR, 7, L_DESCRIPTION2);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_GETST_CURSOR, 8, L_IS_TEMPLATE);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_GETST_CURSOR, 9, L_CONFIRM_USERID);
      DBMS_SQL.COLUMN_VALUE(P_GETST_CURSOR, 10, L_SHELF_LIFE_VAL);
      DBMS_SQL.COLUMN_VALUE(P_GETST_CURSOR, 11, L_SHELF_LIFE_UNIT);
      DBMS_SQL.COLUMN_VALUE(P_GETST_CURSOR, 12, L_NR_PLANNED_SC);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_GETST_CURSOR, 13, L_FREQ_TP);
      DBMS_SQL.COLUMN_VALUE(P_GETST_CURSOR, 14, L_FREQ_VAL);
      DBMS_SQL.COLUMN_VALUE(P_GETST_CURSOR, 15, L_FREQ_UNIT);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_GETST_CURSOR, 16, L_INVERT_FREQ);
      DBMS_SQL.COLUMN_VALUE(P_GETST_CURSOR, 17, L_LAST_SCHED);
      DBMS_SQL.COLUMN_VALUE(P_GETST_CURSOR, 18, L_LAST_CNT);
      DBMS_SQL.COLUMN_VALUE(P_GETST_CURSOR, 19, L_LAST_VAL);
      DBMS_SQL.COLUMN_VALUE(P_GETST_CURSOR, 20, L_PRIORITY);
      DBMS_SQL.COLUMN_VALUE(P_GETST_CURSOR, 21, L_LABEL_FORMAT);
      DBMS_SQL.COLUMN_VALUE(P_GETST_CURSOR, 22, L_DESCR_DOC);
      DBMS_SQL.COLUMN_VALUE(P_GETST_CURSOR, 23, L_DESCR_DOC_VERSION);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_GETST_CURSOR, 24, L_ALLOW_ANY_PP);
      DBMS_SQL.COLUMN_VALUE(P_GETST_CURSOR, 25, L_SC_UC);
      DBMS_SQL.COLUMN_VALUE(P_GETST_CURSOR, 26, L_SC_UC_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_GETST_CURSOR, 27, L_SC_LC);
      DBMS_SQL.COLUMN_VALUE(P_GETST_CURSOR, 28, L_SC_LC_VERSION);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_GETST_CURSOR, 29, L_INHERIT_AU);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_GETST_CURSOR, 30, L_INHERIT_GK);
      DBMS_SQL.COLUMN_VALUE(P_GETST_CURSOR, 31, L_ST_CLASS);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_GETST_CURSOR, 32, L_LOG_HS);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_GETST_CURSOR, 33, L_ALLOW_MODIFY);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_GETST_CURSOR, 34, L_ACTIVE);
      DBMS_SQL.COLUMN_VALUE(P_GETST_CURSOR, 35, L_LC);
      DBMS_SQL.COLUMN_VALUE(P_GETST_CURSOR, 36, L_LC_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_GETST_CURSOR, 37, L_SS);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_ST (L_FETCHED_ROWS) := L_ST;
      A_VERSION(L_FETCHED_ROWS) := L_VERSION;
      A_VERSION_IS_CURRENT(L_FETCHED_ROWS) := L_VERSION_IS_CURRENT;
      A_EFFECTIVE_FROM(L_FETCHED_ROWS) := L_EFFECTIVE_FROM;
      A_EFFECTIVE_TILL(L_FETCHED_ROWS) := L_EFFECTIVE_TILL;
      A_DESCRIPTION (L_FETCHED_ROWS) := L_DESCRIPTION;
      A_DESCRIPTION2 (L_FETCHED_ROWS) := L_DESCRIPTION2;
      A_IS_TEMPLATE (L_FETCHED_ROWS) := L_IS_TEMPLATE;
      A_CONFIRM_USERID (L_FETCHED_ROWS) := L_CONFIRM_USERID;
      A_SHELF_LIFE_VAL (L_FETCHED_ROWS) := L_SHELF_LIFE_VAL;
      A_SHELF_LIFE_UNIT (L_FETCHED_ROWS) := L_SHELF_LIFE_UNIT;
      A_NR_PLANNED_SC (L_FETCHED_ROWS) := L_NR_PLANNED_SC;
      A_FREQ_TP(L_FETCHED_ROWS) := L_FREQ_TP;
      A_FREQ_VAL(L_FETCHED_ROWS) := L_FREQ_VAL;
      A_FREQ_UNIT(L_FETCHED_ROWS) := L_FREQ_UNIT;
      A_INVERT_FREQ(L_FETCHED_ROWS) := L_INVERT_FREQ;
      A_LAST_SCHED(L_FETCHED_ROWS) := L_LAST_SCHED;
      A_LAST_CNT(L_FETCHED_ROWS) := L_LAST_CNT;
      A_LAST_VAL(L_FETCHED_ROWS) := L_LAST_VAL;
      A_PRIORITY(L_FETCHED_ROWS) := L_PRIORITY;
      A_LABEL_FORMAT(L_FETCHED_ROWS) := L_LABEL_FORMAT;
      A_DESCR_DOC(L_FETCHED_ROWS) := L_DESCR_DOC;
      A_DESCR_DOC_VERSION(L_FETCHED_ROWS) := L_DESCR_DOC_VERSION;
      A_ALLOW_ANY_PP(L_FETCHED_ROWS) := L_ALLOW_ANY_PP;
      A_SC_UC(L_FETCHED_ROWS) := L_SC_UC;
      A_SC_UC_VERSION(L_FETCHED_ROWS) := L_SC_UC_VERSION;
      A_SC_LC(L_FETCHED_ROWS) := L_SC_LC;
      A_SC_LC_VERSION(L_FETCHED_ROWS) := L_SC_LC_VERSION;
      A_INHERIT_AU(L_FETCHED_ROWS) := L_INHERIT_AU;
      A_INHERIT_GK(L_FETCHED_ROWS) := L_INHERIT_GK;
      A_ST_CLASS(L_FETCHED_ROWS) := L_ST_CLASS;
      A_LOG_HS(L_FETCHED_ROWS) := L_LOG_HS;
      A_ALLOW_MODIFY(L_FETCHED_ROWS) := L_ALLOW_MODIFY;
      A_ACTIVE(L_FETCHED_ROWS) := L_ACTIVE;
      A_LC(L_FETCHED_ROWS) := L_LC;
      A_LC_VERSION(L_FETCHED_ROWS) := L_LC_VERSION;
      A_SS(L_FETCHED_ROWS) := L_SS;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_GETST_CURSOR);
      END IF;
   END LOOP;

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
      DBMS_SQL.CLOSE_CURSOR(P_GETST_CURSOR);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      DBMS_SQL.CLOSE_CURSOR(P_GETST_CURSOR);
   ELSIF ((L_FETCHED_ROWS = A_NR_OF_ROWS) AND (A_NR_OF_ROWS = 1)) THEN 
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
      DBMS_SQL.CLOSE_CURSOR(P_GETST_CURSOR);
   ELSE
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
   END IF;

   	
   
   
   

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetSampleType', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (P_GETST_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (P_GETST_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETSAMPLETYPE;

FUNCTION SELECTSAMPLETYPE
(A_COL_ID                  IN   UNAPIGEN.VC40_TABLE_TYPE,     
 A_COL_TP                  IN   UNAPIGEN.VC40_TABLE_TYPE,     
 A_COL_VALUE               IN   UNAPIGEN.VC40_TABLE_TYPE,     
 A_COL_NR_OF_ROWS          IN      NUMBER,                    
 A_ST                      OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_VERSION                 OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_VERSION_IS_CURRENT      OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_EFFECTIVE_FROM          OUT  UNAPIGEN.DATE_TABLE_TYPE,     
 A_EFFECTIVE_TILL          OUT  UNAPIGEN.DATE_TABLE_TYPE,     
 A_DESCRIPTION             OUT  UNAPIGEN.VC40_TABLE_TYPE,     
 A_DESCRIPTION2            OUT  UNAPIGEN.VC40_TABLE_TYPE,     
 A_IS_TEMPLATE             OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_CONFIRM_USERID          OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_SHELF_LIFE_VAL          OUT  UNAPIGEN.NUM_TABLE_TYPE,      
 A_SHELF_LIFE_UNIT         OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_NR_PLANNED_SC           OUT  UNAPIGEN.NUM_TABLE_TYPE,      
 A_FREQ_TP                 OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_FREQ_VAL                OUT  UNAPIGEN.NUM_TABLE_TYPE,      
 A_FREQ_UNIT               OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_INVERT_FREQ             OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_LAST_SCHED              OUT  UNAPIGEN.DATE_TABLE_TYPE,     
 A_LAST_CNT                OUT  UNAPIGEN.NUM_TABLE_TYPE,      
 A_LAST_VAL                OUT  UNAPIGEN.VC40_TABLE_TYPE,     
 A_PRIORITY                OUT  UNAPIGEN.NUM_TABLE_TYPE,      
 A_LABEL_FORMAT            OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_DESCR_DOC               OUT  UNAPIGEN.VC40_TABLE_TYPE,     
 A_DESCR_DOC_VERSION       OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_ALLOW_ANY_PP            OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_SC_UC                   OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_SC_UC_VERSION           OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_SC_LC                   OUT  UNAPIGEN.VC2_TABLE_TYPE,      
 A_SC_LC_VERSION           OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_INHERIT_AU              OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_INHERIT_GK              OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_ST_CLASS                OUT  UNAPIGEN.VC2_TABLE_TYPE,      
 A_LOG_HS                  OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_ALLOW_MODIFY            OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_ACTIVE                  OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_LC                      OUT  UNAPIGEN.VC2_TABLE_TYPE,      
 A_LC_VERSION              OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_SS                      OUT  UNAPIGEN.VC2_TABLE_TYPE,      
 A_NR_OF_ROWS              IN OUT  NUMBER,                    
 A_ORDER_BY_CLAUSE         IN   VARCHAR2,                     
 A_NEXT_ROWS               IN   NUMBER)                       
RETURN NUMBER IS

L_COL_OPERATOR           UNAPIGEN.VC20_TABLE_TYPE;
L_COL_ANDOR              UNAPIGEN.VC3_TABLE_TYPE;

BEGIN

   FOR L_X IN 1..A_COL_NR_OF_ROWS LOOP
       L_COL_OPERATOR(L_X) := '=';
       L_COL_ANDOR(L_X) := 'AND';
   END LOOP;

   RETURN(UNAPIST.SELECTSAMPLETYPE(A_COL_ID,
                                A_COL_TP,
                                A_COL_VALUE,
                                L_COL_OPERATOR,
                                L_COL_ANDOR,
                                A_COL_NR_OF_ROWS,
                                A_ST,
                                A_VERSION,
                                A_VERSION_IS_CURRENT,
                                A_EFFECTIVE_FROM,
                                A_EFFECTIVE_TILL,
                                A_DESCRIPTION,
                                A_DESCRIPTION2,
                                A_IS_TEMPLATE,
                                A_CONFIRM_USERID,
                                A_SHELF_LIFE_VAL,
                                A_SHELF_LIFE_UNIT,
                                A_NR_PLANNED_SC,
                                A_FREQ_TP,
                                A_FREQ_VAL,
                                A_FREQ_UNIT,
                                A_INVERT_FREQ,
                                A_LAST_SCHED,
                                A_LAST_CNT,
                                A_LAST_VAL,
                                A_PRIORITY,
                                A_LABEL_FORMAT,
                                A_DESCR_DOC,
                                A_DESCR_DOC_VERSION,
                                A_ALLOW_ANY_PP,
                                A_SC_UC,
                                A_SC_UC_VERSION,
                                A_SC_LC,
                                A_SC_LC_VERSION,
                                A_INHERIT_AU,
                                A_INHERIT_GK,
                                A_ST_CLASS,
                                A_LOG_HS,
                                A_ALLOW_MODIFY,
                                A_ACTIVE,
                                A_LC,
                                A_LC_VERSION,
                                A_SS,
                                A_NR_OF_ROWS,
                                A_ORDER_BY_CLAUSE,
                                A_NEXT_ROWS));              
END SELECTSAMPLETYPE;

FUNCTION SELECTSAMPLETYPE
(A_COL_ID                  IN   UNAPIGEN.VC40_TABLE_TYPE,     
 A_COL_TP                  IN   UNAPIGEN.VC40_TABLE_TYPE,     
 A_COL_VALUE               IN   UNAPIGEN.VC40_TABLE_TYPE,     
 A_COL_OPERATOR            IN   UNAPIGEN.VC20_TABLE_TYPE,     
 A_COL_ANDOR               IN   UNAPIGEN.VC3_TABLE_TYPE,      
 A_COL_NR_OF_ROWS          IN   NUMBER,                       
 A_ST                      OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_VERSION                 OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_VERSION_IS_CURRENT      OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_EFFECTIVE_FROM          OUT  UNAPIGEN.DATE_TABLE_TYPE,     
 A_EFFECTIVE_TILL          OUT  UNAPIGEN.DATE_TABLE_TYPE,     
 A_DESCRIPTION             OUT  UNAPIGEN.VC40_TABLE_TYPE,     
 A_DESCRIPTION2            OUT  UNAPIGEN.VC40_TABLE_TYPE,     
 A_IS_TEMPLATE             OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_CONFIRM_USERID          OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_SHELF_LIFE_VAL          OUT  UNAPIGEN.NUM_TABLE_TYPE,      
 A_SHELF_LIFE_UNIT         OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_NR_PLANNED_SC           OUT  UNAPIGEN.NUM_TABLE_TYPE,      
 A_FREQ_TP                 OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_FREQ_VAL                OUT  UNAPIGEN.NUM_TABLE_TYPE,      
 A_FREQ_UNIT               OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_INVERT_FREQ             OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_LAST_SCHED              OUT  UNAPIGEN.DATE_TABLE_TYPE,     
 A_LAST_CNT                OUT  UNAPIGEN.NUM_TABLE_TYPE,      
 A_LAST_VAL                OUT  UNAPIGEN.VC40_TABLE_TYPE,     
 A_PRIORITY                OUT  UNAPIGEN.NUM_TABLE_TYPE,      
 A_LABEL_FORMAT            OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_DESCR_DOC               OUT  UNAPIGEN.VC40_TABLE_TYPE,     
 A_DESCR_DOC_VERSION       OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_ALLOW_ANY_PP            OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_SC_UC                   OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_SC_UC_VERSION           OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_SC_LC                   OUT  UNAPIGEN.VC2_TABLE_TYPE,      
 A_SC_LC_VERSION           OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_INHERIT_AU              OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_INHERIT_GK              OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_ST_CLASS                OUT  UNAPIGEN.VC2_TABLE_TYPE,      
 A_LOG_HS                  OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_ALLOW_MODIFY            OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_ACTIVE                  OUT  UNAPIGEN.CHAR1_TABLE_TYPE,    
 A_LC                      OUT  UNAPIGEN.VC2_TABLE_TYPE,      
 A_LC_VERSION              OUT  UNAPIGEN.VC20_TABLE_TYPE,     
 A_SS                      OUT  UNAPIGEN.VC2_TABLE_TYPE,      
 A_NR_OF_ROWS              IN OUT  NUMBER,                    
 A_ORDER_BY_CLAUSE         IN   VARCHAR2,                     
 A_NEXT_ROWS               IN   NUMBER)                       
RETURN NUMBER IS

L_ST                             VARCHAR2(20);
L_VERSION                        VARCHAR2(20);
L_VERSION_IS_CURRENT             CHAR(1);
L_EFFECTIVE_FROM                 TIMESTAMP WITH TIME ZONE;
L_EFFECTIVE_TILL                 TIMESTAMP WITH TIME ZONE;
L_DESCRIPTION                    VARCHAR2(40);
L_DESCRIPTION2                   VARCHAR2(40);
L_IS_TEMPLATE                    CHAR(1);
L_CONFIRM_USERID                 CHAR(1);
L_SHELF_LIFE_VAL                 NUMBER(3);
L_SHELF_LIFE_UNIT                VARCHAR2(20);
L_NR_PLANNED_SC                  NUMBER(3);
L_FREQ_TP                        CHAR(1);
L_FREQ_VAL                       NUMBER;
L_FREQ_UNIT                      VARCHAR2(20);
L_INVERT_FREQ                    CHAR(1);
L_LAST_SCHED                     TIMESTAMP WITH TIME ZONE;
L_LAST_CNT                       NUMBER(5);
L_LAST_VAL                       VARCHAR2(40);
L_PRIORITY                       NUMBER(3);
L_LABEL_FORMAT                   VARCHAR2(20);
L_DESCR_DOC                      VARCHAR2(40);
L_DESCR_DOC_VERSION              VARCHAR2(20);
L_ALLOW_ANY_PP                   CHAR(1);
L_SC_UC                          VARCHAR2(20);
L_SC_UC_VERSION                  VARCHAR2(20);
L_SC_LC                          VARCHAR2(2);
L_SC_LC_VERSION                  VARCHAR2(20);
L_INHERIT_GK                     CHAR(1);
L_INHERIT_AU                     CHAR(1);
L_ST_CLASS                       VARCHAR2(2);
L_LOG_HS                         CHAR(1);
L_ALLOW_MODIFY                   CHAR(1);
L_ACTIVE                         CHAR(1);
L_LC                             VARCHAR2(2);
L_LC_VERSION                     VARCHAR2(20);
L_SS                             VARCHAR2(2);
L_ORDER_BY_CLAUSE                VARCHAR2(255);
L_FROM_CLAUSE                    VARCHAR2(255);
L_NEXT_STGK_JOIN                 VARCHAR2(4);
L_NEXT_ST_JOIN                   VARCHAR2(4);
L_NEXT_S_JOIN                   VARCHAR2(4);
L_COLUMN_HANDLED                 BOOLEAN_TABLE_TYPE;
L_ANYOR_PRESENT                  BOOLEAN;
L_COL_ANDOR                      VARCHAR2(3);
L_PREV_COL_TP                    VARCHAR2(40);
L_PREV_COL_ID                    VARCHAR2(40);
L_PREV_COL_INDEX                 INTEGER;
L_WHERE_CLAUSE4JOIN              VARCHAR2(1000);
L_LENGTH                         INTEGER;

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_SELECTST_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_SELECTST_CURSOR);
         P_SELECTST_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;
   
   
   IF A_NEXT_ROWS = 1 THEN
      IF P_SELECTST_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      P_SELECTION_VAL_TAB.DELETE;
      L_SQL_STRING := 'SELECT a.st, a.version, nvl(a.version_is_current,''0''), a.effective_from, a.effective_till, '||
                      'a.description, a.description2, a.is_template, a.confirm_userid, '||
                      'a.shelf_life_val, a.shelf_life_unit, a.nr_planned_sc, a.freq_tp, '||
                      'a.freq_val, a.freq_unit, a.invert_freq, a.last_sched, a.last_cnt, '||
                      'a.last_val, a.priority, a.label_format, a.descr_doc, a.descr_doc_version, '||
                      'a.sc_uc, a.sc_uc_version, a.sc_lc, a.sc_lc_version, a.inherit_au, '||
                      'a.inherit_gk, a.allow_any_pp, a.st_class, a.log_hs, '||
                      'a.allow_modify, a.active, a.lc, a.lc_version, a.ss FROM ';
                      
      L_FROM_CLAUSE := 'dd' || UNAPIGEN.P_DD || '.uvst a' ;
            
      
      L_WHERE_CLAUSE4JOIN := '';
      L_WHERE_CLAUSE := '';
      L_ANYOR_PRESENT := FALSE;

      FOR I IN 1..A_COL_NR_OF_ROWS LOOP
         L_COLUMN_HANDLED(I) := FALSE;
         IF LTRIM(RTRIM(UPPER(A_COL_ANDOR(I)))) = 'OR' AND
            NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
            L_ANYOR_PRESENT := TRUE;
         END IF;
         
         
         IF I<>1 THEN
            IF NVL(A_COL_TP(I), ' ') = NVL(A_COL_TP(I-1), ' ') AND
               NVL(A_COL_ID(I), ' ') = NVL(A_COL_ID(I-1), ' ') AND
               NVL(A_COL_OPERATOR(I), '=') = '=' AND
               NVL(A_COL_OPERATOR(I-1), '=') = '=' AND
               NVL(A_COL_ANDOR(I-1), 'AND') =  'AND' AND
               (NVL(A_COL_VALUE(I), ' ') <> ' ' OR NVL(A_COL_VALUE(I-1), ' ') <> ' ') THEN
               IF I> 2 AND A_COL_ANDOR(I-2) = 'OR' THEN
                  L_ANYOR_PRESENT := TRUE;
               END IF;
            END IF;
         END IF;         
      END LOOP;

      
      
      
      L_NEXT_STGK_JOIN := 'a';
      L_NEXT_ST_JOIN := 'a';
      
      FOR I IN REVERSE 1..A_COL_NR_OF_ROWS LOOP
         IF NVL(LTRIM(A_COL_ID(I)), ' ') = ' ' THEN
            RETURN(UNAPIGEN.DBERR_SELCOLSINVALID);
         END IF;

         
         L_COL_ANDOR := 'AND';
         IF I<>1 THEN
            L_COL_ANDOR := A_COL_ANDOR(I-1);
         END IF;
         IF L_COL_ANDOR IS NULL THEN
            
            L_COL_ANDOR := 'AND';
         END IF;
         IF L_COLUMN_HANDLED(I) = FALSE THEN
            IF NVL(A_COL_TP(I), ' ') = 'stgk' THEN

               IF NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
                  UNAPIGEN.WHERECLAUSESTRINGBUILDER (A_BASE_TABLE => 'utst', A_INDEX =>I, A_COL_TP => A_COL_TP(I), A_COL_ID => A_COL_ID(I),
                                   A_COL_VALUE => A_COL_VALUE(I), A_COL_OPERATOR => A_COL_OPERATOR(I),
                                   A_COL_ANDOR => L_COL_ANDOR, A_ANYOR_PRESENT => L_ANYOR_PRESENT,
                                   A_JOINTABLE_PREFIX => 'utstgk', A_JOINCOLUMN1 => 'st', A_JOINCOLUMN2 => 'version', 
                                   A_PREV_COL_TP => L_PREV_COL_TP, A_PREV_COL_ID => L_PREV_COL_ID, A_PREV_COL_INDEX => L_PREV_COL_INDEX,
                                   A_NEXTTABLE_TOJOIN => L_NEXT_STGK_JOIN, A_FROM_CLAUSE => L_FROM_CLAUSE,
                                   A_WHERE_CLAUSE4JOIN => L_WHERE_CLAUSE4JOIN, A_WHERE_CLAUSE => L_WHERE_CLAUSE,
                                   A_SQL_VAL_TAB => P_SELECTION_VAL_TAB);                 
               ELSIF INSTR(A_ORDER_BY_CLAUSE, 't'|| TO_CHAR(I)) <> 0 THEN
                  L_FROM_CLAUSE := L_FROM_CLAUSE || ', utstgk' || A_COL_ID(I) || ' t' || I;
                  L_COL_ANDOR := 'AND'; 
                  
                  L_WHERE_CLAUSE4JOIN := L_WHERE_CLAUSE4JOIN ||
                                    't' || I || '.st(+) = a.st AND t' || I || '.version(+) = a.version ' || L_COL_ANDOR || ' ';
               END IF;
               
            ELSE
               
               IF (LOWER(NVL(A_COL_ID(I),' ')) = 'version') AND (NVL(A_COL_VALUE(I),' ') = 'MAX') THEN
                  L_WHERE_CLAUSE := L_WHERE_CLAUSE || '(a.st, a.' || A_COL_ID(I) || ') ' ||
                                    'IN (SELECT st, MAX(' || A_COL_ID(I) || ') '|| 
                                        'FROM dd'|| UNAPIGEN.P_DD ||'.uvst GROUP BY st) '||
                                    L_COL_ANDOR|| ' '; 
               ELSIF NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
                  UNAPIGEN.WHERECLAUSESTRINGBUILDER (A_BASE_TABLE => 'utst', A_INDEX =>I, A_COL_TP => A_COL_TP(I), A_COL_ID => A_COL_ID(I),
                                   A_COL_VALUE => A_COL_VALUE(I), A_COL_OPERATOR => A_COL_OPERATOR(I),
                                   A_COL_ANDOR => L_COL_ANDOR, A_ANYOR_PRESENT => L_ANYOR_PRESENT,
                                   A_JOINTABLE_PREFIX => '', A_JOINCOLUMN1 => '', A_JOINCOLUMN2 => '', 
                                   A_PREV_COL_TP => L_PREV_COL_TP, A_PREV_COL_ID => L_PREV_COL_ID, A_PREV_COL_INDEX => L_PREV_COL_INDEX,
                                   A_NEXTTABLE_TOJOIN => L_NEXT_ST_JOIN, A_FROM_CLAUSE => L_FROM_CLAUSE,
                                   A_WHERE_CLAUSE4JOIN => L_WHERE_CLAUSE4JOIN, A_WHERE_CLAUSE => L_WHERE_CLAUSE,
                                   A_SQL_VAL_TAB => P_SELECTION_VAL_TAB);                  
               END IF;
               L_COLUMN_HANDLED(I) := TRUE; 
            END IF;      
         END IF;
      END LOOP;
      
      
      IF SUBSTR(L_WHERE_CLAUSE4JOIN, -4) = 'AND ' THEN
         L_WHERE_CLAUSE4JOIN := SUBSTR(L_WHERE_CLAUSE4JOIN, 1,
                                  LENGTH(L_WHERE_CLAUSE4JOIN)-4);
      END IF;
      
      
      IF SUBSTR(L_WHERE_CLAUSE, -4) = 'AND ' THEN
         L_WHERE_CLAUSE := SUBSTR(L_WHERE_CLAUSE, 1,
                                  LENGTH(L_WHERE_CLAUSE)-4);
      END IF;
      IF UPPER(SUBSTR(L_WHERE_CLAUSE, -4)) = ' OR ' THEN
         L_WHERE_CLAUSE := SUBSTR(L_WHERE_CLAUSE, 1,
                                  LENGTH(L_WHERE_CLAUSE)-3);
      END IF;
      
      IF L_WHERE_CLAUSE4JOIN IS NOT NULL THEN
         IF L_WHERE_CLAUSE IS NULL THEN
            L_WHERE_CLAUSE := ' WHERE ' || L_WHERE_CLAUSE4JOIN;
         ELSE
            L_WHERE_CLAUSE := ' WHERE (' || L_WHERE_CLAUSE4JOIN || ') AND ('||L_WHERE_CLAUSE||') ';
         END IF;
      ELSE
         IF L_WHERE_CLAUSE IS NOT NULL THEN
            L_WHERE_CLAUSE := ' WHERE '||L_WHERE_CLAUSE;
         ELSE
            L_WHERE_CLAUSE := ' ';
         END IF;
      END IF;
   

      IF NVL(A_ORDER_BY_CLAUSE, ' ') = ' ' THEN
         L_ORDER_BY_CLAUSE := ' ORDER BY a.st, a.version';
      ELSE
         L_ORDER_BY_CLAUSE := A_ORDER_BY_CLAUSE; 
      END IF;

      L_SQL_STRING := L_SQL_STRING || L_FROM_CLAUSE || L_WHERE_CLAUSE || L_ORDER_BY_CLAUSE;
      P_SELECTION_CLAUSE := L_FROM_CLAUSE || L_WHERE_CLAUSE;
      
      IF P_SELECTST_CURSOR IS NULL THEN
         P_SELECTST_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;
      
      UNAPIAUT.ADDORACLECBOHINT (L_SQL_STRING) ;
      DBMS_SQL.PARSE(P_SELECTST_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      FOR L_X IN 1..P_SELECTION_VAL_TAB.COUNT() LOOP
         DBMS_SQL.BIND_VARIABLE(P_SELECTST_CURSOR, ':col_val'||L_X , P_SELECTION_VAL_TAB(L_X)); 
      END LOOP;
      DBMS_SQL.DEFINE_COLUMN(P_SELECTST_CURSOR, 1, L_ST, 20);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTST_CURSOR, 2, L_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTST_CURSOR, 3, L_VERSION_IS_CURRENT, 1);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTST_CURSOR, 4, L_EFFECTIVE_FROM);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTST_CURSOR, 5, L_EFFECTIVE_TILL);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTST_CURSOR, 6, L_DESCRIPTION, 40);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTST_CURSOR, 7, L_DESCRIPTION2, 40);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTST_CURSOR, 8, L_IS_TEMPLATE, 1);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTST_CURSOR, 9, L_CONFIRM_USERID, 1);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTST_CURSOR, 10, L_SHELF_LIFE_VAL);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTST_CURSOR, 11, L_SHELF_LIFE_UNIT, 20);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTST_CURSOR, 12, L_NR_PLANNED_SC);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTST_CURSOR, 13, L_FREQ_TP, 1);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTST_CURSOR, 14, L_FREQ_VAL);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTST_CURSOR, 15, L_FREQ_UNIT, 20);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTST_CURSOR, 16, L_INVERT_FREQ, 1);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTST_CURSOR, 17, L_LAST_SCHED);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTST_CURSOR, 18, L_LAST_CNT);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTST_CURSOR, 19, L_LAST_VAL, 40);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTST_CURSOR, 20, L_PRIORITY);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTST_CURSOR, 21, L_LABEL_FORMAT, 20);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTST_CURSOR, 22, L_DESCR_DOC, 40);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTST_CURSOR, 23, L_DESCR_DOC_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTST_CURSOR, 24, L_SC_UC, 20);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTST_CURSOR, 25, L_SC_UC_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTST_CURSOR, 26, L_SC_LC, 2);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTST_CURSOR, 27, L_SC_LC_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTST_CURSOR, 28, L_INHERIT_AU, 1);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTST_CURSOR, 29, L_INHERIT_GK, 1);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTST_CURSOR, 30, L_ALLOW_ANY_PP, 1);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTST_CURSOR, 31, L_ST_CLASS, 2);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTST_CURSOR, 32, L_LOG_HS, 1);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTST_CURSOR, 33, L_ALLOW_MODIFY, 1);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_SELECTST_CURSOR, 34, L_ACTIVE, 1);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTST_CURSOR, 35, L_LC, 2);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTST_CURSOR, 36, L_LC_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(P_SELECTST_CURSOR, 37, L_SS, 2);

      L_RESULT := DBMS_SQL.EXECUTE(P_SELECTST_CURSOR);
   END IF;
   
   L_RESULT := DBMS_SQL.FETCH_ROWS(P_SELECTST_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_SELECTST_CURSOR, 1, L_ST);
      DBMS_SQL.COLUMN_VALUE(P_SELECTST_CURSOR, 2, L_VERSION);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTST_CURSOR, 3, L_VERSION_IS_CURRENT);
      DBMS_SQL.COLUMN_VALUE(P_SELECTST_CURSOR, 4, L_EFFECTIVE_FROM);
      DBMS_SQL.COLUMN_VALUE(P_SELECTST_CURSOR, 5, L_EFFECTIVE_TILL);
      DBMS_SQL.COLUMN_VALUE(P_SELECTST_CURSOR, 6, L_DESCRIPTION);
      DBMS_SQL.COLUMN_VALUE(P_SELECTST_CURSOR, 7, L_DESCRIPTION2);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTST_CURSOR, 8, L_IS_TEMPLATE);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTST_CURSOR, 9, L_CONFIRM_USERID);
      DBMS_SQL.COLUMN_VALUE(P_SELECTST_CURSOR, 10, L_SHELF_LIFE_VAL);
      DBMS_SQL.COLUMN_VALUE(P_SELECTST_CURSOR, 11, L_SHELF_LIFE_UNIT);
      DBMS_SQL.COLUMN_VALUE(P_SELECTST_CURSOR, 12, L_NR_PLANNED_SC);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTST_CURSOR, 13, L_FREQ_TP);
      DBMS_SQL.COLUMN_VALUE(P_SELECTST_CURSOR, 14, L_FREQ_VAL);
      DBMS_SQL.COLUMN_VALUE(P_SELECTST_CURSOR, 15, L_FREQ_UNIT);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTST_CURSOR, 16, L_INVERT_FREQ);
      DBMS_SQL.COLUMN_VALUE(P_SELECTST_CURSOR, 17, L_LAST_SCHED);
      DBMS_SQL.COLUMN_VALUE(P_SELECTST_CURSOR, 18, L_LAST_CNT);
      DBMS_SQL.COLUMN_VALUE(P_SELECTST_CURSOR, 19, L_LAST_VAL);
      DBMS_SQL.COLUMN_VALUE(P_SELECTST_CURSOR, 20, L_PRIORITY);
      DBMS_SQL.COLUMN_VALUE(P_SELECTST_CURSOR, 21, L_LABEL_FORMAT);
      DBMS_SQL.COLUMN_VALUE(P_SELECTST_CURSOR, 22, L_DESCR_DOC);
      DBMS_SQL.COLUMN_VALUE(P_SELECTST_CURSOR, 23, L_DESCR_DOC_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_SELECTST_CURSOR, 24, L_SC_UC);
      DBMS_SQL.COLUMN_VALUE(P_SELECTST_CURSOR, 25, L_SC_UC_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_SELECTST_CURSOR, 26, L_SC_LC);
      DBMS_SQL.COLUMN_VALUE(P_SELECTST_CURSOR, 27, L_SC_LC_VERSION);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTST_CURSOR, 28, L_INHERIT_AU);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTST_CURSOR, 29, L_INHERIT_GK);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTST_CURSOR, 30, L_ALLOW_ANY_PP);
      DBMS_SQL.COLUMN_VALUE(P_SELECTST_CURSOR, 31, L_ST_CLASS);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTST_CURSOR, 32, L_LOG_HS);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTST_CURSOR, 33, L_ALLOW_MODIFY);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_SELECTST_CURSOR, 34, L_ACTIVE);
      DBMS_SQL.COLUMN_VALUE(P_SELECTST_CURSOR, 35, L_LC);
      DBMS_SQL.COLUMN_VALUE(P_SELECTST_CURSOR, 36, L_LC_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_SELECTST_CURSOR, 37, L_SS);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_ST (L_FETCHED_ROWS) := L_ST;
      A_VERSION (L_FETCHED_ROWS) := L_VERSION;
      A_VERSION_IS_CURRENT (L_FETCHED_ROWS) := L_VERSION_IS_CURRENT;
      A_EFFECTIVE_FROM (L_FETCHED_ROWS) := L_EFFECTIVE_FROM;
      A_EFFECTIVE_TILL (L_FETCHED_ROWS) := L_EFFECTIVE_TILL;
      A_DESCRIPTION (L_FETCHED_ROWS) := L_DESCRIPTION;
      A_DESCRIPTION2 (L_FETCHED_ROWS) := L_DESCRIPTION2;
      A_IS_TEMPLATE (L_FETCHED_ROWS) := L_IS_TEMPLATE;
      A_CONFIRM_USERID (L_FETCHED_ROWS) := L_CONFIRM_USERID;
      A_SHELF_LIFE_VAL (L_FETCHED_ROWS) := L_SHELF_LIFE_VAL;
      A_SHELF_LIFE_UNIT (L_FETCHED_ROWS) := L_SHELF_LIFE_UNIT;
      A_NR_PLANNED_SC (L_FETCHED_ROWS) := L_NR_PLANNED_SC;
      A_FREQ_TP(L_FETCHED_ROWS) := L_FREQ_TP;
      A_FREQ_VAL(L_FETCHED_ROWS) := L_FREQ_VAL;
      A_FREQ_UNIT(L_FETCHED_ROWS) := L_FREQ_UNIT;
      A_INVERT_FREQ(L_FETCHED_ROWS) := L_INVERT_FREQ;
      A_LAST_SCHED(L_FETCHED_ROWS) := L_LAST_SCHED;
      A_LAST_CNT(L_FETCHED_ROWS) := L_LAST_CNT;
      A_LAST_VAL(L_FETCHED_ROWS) := L_LAST_VAL;
      A_PRIORITY (L_FETCHED_ROWS) := L_PRIORITY;
      A_LABEL_FORMAT(L_FETCHED_ROWS) := L_LABEL_FORMAT;
      A_DESCR_DOC (L_FETCHED_ROWS) := L_DESCR_DOC;
      A_DESCR_DOC_VERSION (L_FETCHED_ROWS) := L_DESCR_DOC_VERSION;
      A_SC_UC (L_FETCHED_ROWS) := L_SC_UC;
      A_SC_UC_VERSION (L_FETCHED_ROWS) := L_SC_UC_VERSION;
      A_SC_LC(L_FETCHED_ROWS) := L_SC_LC;
      A_SC_LC_VERSION(L_FETCHED_ROWS) := L_SC_LC_VERSION;
      A_INHERIT_AU(L_FETCHED_ROWS) := L_INHERIT_AU;
      A_INHERIT_GK(L_FETCHED_ROWS) := L_INHERIT_GK;
      A_ALLOW_ANY_PP(L_FETCHED_ROWS) := L_ALLOW_ANY_PP;
      A_ST_CLASS(L_FETCHED_ROWS) := L_ST_CLASS;
      A_LOG_HS(L_FETCHED_ROWS) := L_LOG_HS;
      A_ALLOW_MODIFY(L_FETCHED_ROWS) := L_ALLOW_MODIFY;
      A_ACTIVE(L_FETCHED_ROWS) := L_ACTIVE;
      A_LC(L_FETCHED_ROWS) := L_LC;
      A_LC_VERSION(L_FETCHED_ROWS) := L_LC_VERSION;
      A_SS(L_FETCHED_ROWS) := L_SS;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_SELECTST_CURSOR);
      END IF;
   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_SELECTST_CURSOR);
       P_SELECTST_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_SELECTST_CURSOR);
      P_SELECTST_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
              'SelectSampleType', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      L_LENGTH := 200;
      FOR L_X IN 1..10 LOOP
         IF ( LENGTH(L_SQL_STRING) > ((L_LENGTH*(L_X-1))+1) ) THEN
            INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
            VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                   'SelectSampleType', '(SQL)'||SUBSTR(L_SQL_STRING, (L_LENGTH*(L_X-1))+1, L_LENGTH));             
         ELSE
            EXIT;
         END IF;
      END LOOP;            
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (P_SELECTST_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (P_SELECTST_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END SELECTSAMPLETYPE;

FUNCTION SELECTSTGKVALUES
(A_COL_ID           IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_TP           IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_VALUE        IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_NR_OF_ROWS   IN      NUMBER,                    
 A_GK               IN      VARCHAR2,                  
 A_VALUE            OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_NR_OF_ROWS       IN OUT  NUMBER,                    
 A_ORDER_BY_CLAUSE  IN      VARCHAR2,                  
 A_NEXT_ROWS        IN      NUMBER)                    
RETURN NUMBER IS
L_COL_OPERATOR           UNAPIGEN.VC20_TABLE_TYPE;
L_COL_ANDOR              UNAPIGEN.VC3_TABLE_TYPE;
BEGIN
   FOR L_X IN 1..A_COL_NR_OF_ROWS LOOP
       L_COL_OPERATOR(L_X) := '=';
       L_COL_ANDOR(L_X) := 'AND';
   END LOOP;
   RETURN(UNAPIST.SELECTSTGKVALUES(A_COL_ID,
                                    A_COL_TP,
                                    A_COL_VALUE,
                                    L_COL_OPERATOR,
                                    L_COL_ANDOR,
                                    A_COL_NR_OF_ROWS,
                                    A_GK,
                                    A_VALUE,
                                    A_NR_OF_ROWS,
                                    A_ORDER_BY_CLAUSE,
                                    A_NEXT_ROWS));
END SELECTSTGKVALUES;

FUNCTION SELECTSTGKVALUES
(A_COL_ID           IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_TP           IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_VALUE        IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_OPERATOR     IN      UNAPIGEN.VC20_TABLE_TYPE,  
 A_COL_ANDOR        IN      UNAPIGEN.VC3_TABLE_TYPE,   
 A_COL_NR_OF_ROWS   IN      NUMBER,                    
 A_GK               IN      VARCHAR2,                  
 A_VALUE            OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_NR_OF_ROWS       IN OUT  NUMBER,                    
 A_ORDER_BY_CLAUSE  IN      VARCHAR2,                  
 A_NEXT_ROWS        IN      NUMBER)                    
RETURN NUMBER IS

L_VALUE                          VARCHAR2(40);
L_ORDER_BY_CLAUSE                VARCHAR2(255);
L_FROM_CLAUSE                    VARCHAR2(500);
L_NEXT_SC_JOIN                   VARCHAR2(4);
L_NEXT_ST_JOIN                   VARCHAR2(4);
L_NEXT_STGK_JOIN                 VARCHAR2(4);
L_NEXT_SCGK_JOIN                 VARCHAR2(4);
L_NEXT_RQGK_JOIN                 VARCHAR2(4);
L_NEXT_SDGK_JOIN                 VARCHAR2(4);
L_COLUMN_HANDLED                 BOOLEAN_TABLE_TYPE;
L_ANYOR_PRESENT                  BOOLEAN;
L_COL_ANDOR                      VARCHAR2(3);
L_PREV_COL_TP                    VARCHAR2(40);
L_PREV_COL_ID                    VARCHAR2(40);
L_PREV_COL_INDEX                 INTEGER;
L_WHERE_CLAUSE4JOIN              VARCHAR2(2000);
L_LENGTH                         INTEGER;
L_SQL_VAL_TAB                    VC40_NESTEDTABLE_TYPE := VC40_NESTEDTABLE_TYPE();

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_SELECTSTGK_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_SELECTSTGK_CURSOR);
         P_SELECTSTGK_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_SELECTSTGK_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;
   
   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
   
      
      L_SQL_STRING := 'SELECT DISTINCT b.' || A_GK || ' FROM ';
      L_FROM_CLAUSE := 'dd' || UNAPIGEN.P_DD || '.uvst a,utstgk' || A_GK || ' b';

      
      L_WHERE_CLAUSE4JOIN := 'a.st = b.st AND '|| 
                        'a.version = b.version AND '; 
      L_WHERE_CLAUSE := '';
      L_ANYOR_PRESENT := FALSE;
      FOR I IN 1..A_COL_NR_OF_ROWS LOOP
         L_COLUMN_HANDLED(I) := FALSE;
         IF LTRIM(RTRIM(UPPER(A_COL_ANDOR(I)))) = 'OR' AND
            NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
            L_ANYOR_PRESENT := TRUE;
         END IF;
         
         
         IF I<>1 THEN
            IF NVL(A_COL_TP(I), ' ') = NVL(A_COL_TP(I-1), ' ') AND
               NVL(A_COL_ID(I), ' ') = NVL(A_COL_ID(I-1), ' ') AND
               NVL(A_COL_OPERATOR(I), '=') = '=' AND
               NVL(A_COL_OPERATOR(I-1), '=') = '=' AND
               NVL(A_COL_ANDOR(I-1), 'AND') =  'AND' AND
               (NVL(A_COL_VALUE(I), ' ') <> ' ' OR NVL(A_COL_VALUE(I-1), ' ') <> ' ') THEN
               IF I> 2 AND A_COL_ANDOR(I-2) = 'OR' THEN
                  L_ANYOR_PRESENT := TRUE;
               END IF;
            END IF;
         END IF;         
      END LOOP;
      
      
      
      L_NEXT_ST_JOIN := 'a';
      L_NEXT_SC_JOIN := 'sc';
      L_NEXT_STGK_JOIN := 'b';
      L_NEXT_SCGK_JOIN := 'sc';
      L_NEXT_RQGK_JOIN := 'sc';
      L_NEXT_SDGK_JOIN := 'sc';
      FOR I IN REVERSE 1..A_COL_NR_OF_ROWS LOOP
         IF NVL(LTRIM(A_COL_ID(I)), ' ') = ' ' THEN
            RETURN(UNAPIGEN.DBERR_SELCOLSINVALID);
         END IF;

         
         L_COL_ANDOR := 'AND';
         IF I<>1 THEN
            L_COL_ANDOR := A_COL_ANDOR(I-1);
         END IF;
         IF L_COL_ANDOR IS NULL THEN
            
            L_COL_ANDOR := 'AND';
         END IF;

         IF L_COLUMN_HANDLED(I) = FALSE THEN
            IF NVL(A_COL_TP(I), ' ') = 'stgk' THEN 
               IF NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
                  UNAPIGEN.WHERECLAUSESTRINGBUILDER (A_BASE_TABLE => 'utst', A_INDEX =>I, A_COL_TP => A_COL_TP(I), A_COL_ID => A_COL_ID(I),
                                 A_COL_VALUE => A_COL_VALUE(I), A_COL_OPERATOR => A_COL_OPERATOR(I),
                                 A_COL_ANDOR => L_COL_ANDOR, A_ANYOR_PRESENT => L_ANYOR_PRESENT,
                                 A_JOINTABLE_PREFIX => 'utstgk', A_JOINCOLUMN1 => 'st', A_JOINCOLUMN2 => 'version', 
                                 A_PREV_COL_TP => L_PREV_COL_TP, A_PREV_COL_ID => L_PREV_COL_ID, A_PREV_COL_INDEX => L_PREV_COL_INDEX,
                                 A_NEXTTABLE_TOJOIN => L_NEXT_STGK_JOIN, A_FROM_CLAUSE => L_FROM_CLAUSE,
                                 A_WHERE_CLAUSE4JOIN => L_WHERE_CLAUSE4JOIN, A_WHERE_CLAUSE => L_WHERE_CLAUSE,
                                 A_SQL_VAL_TAB => L_SQL_VAL_TAB);
               END IF;
               L_COLUMN_HANDLED(I) := TRUE; 
            ELSIF NVL(A_COL_TP(I), ' ') = 'scgk' THEN 
               IF INSTR(L_FROM_CLAUSE, '.uvsc sc') = 0 THEN
                  L_FROM_CLAUSE := L_FROM_CLAUSE || ', dd' || UNAPIGEN.P_DD || '.uvsc sc' ;
                  L_WHERE_CLAUSE4JOIN := L_WHERE_CLAUSE4JOIN || 'sc.st = b.st AND '|| 
                                         'sc.st_version = b.version AND '; 
               END IF;

               IF NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
                  UNAPIGEN.WHERECLAUSESTRINGBUILDER (A_BASE_TABLE => 'utsc', A_INDEX =>I, A_COL_TP => A_COL_TP(I), A_COL_ID => A_COL_ID(I),
                                 A_COL_VALUE => A_COL_VALUE(I), A_COL_OPERATOR => A_COL_OPERATOR(I),
                                 A_COL_ANDOR => L_COL_ANDOR, A_ANYOR_PRESENT => L_ANYOR_PRESENT,
                                 A_JOINTABLE_PREFIX => 'utscgk', A_JOINCOLUMN1 => 'sc', A_JOINCOLUMN2 => '', 
                                 A_PREV_COL_TP => L_PREV_COL_TP, A_PREV_COL_ID => L_PREV_COL_ID, A_PREV_COL_INDEX => L_PREV_COL_INDEX,
                                 A_NEXTTABLE_TOJOIN => L_NEXT_SCGK_JOIN, A_FROM_CLAUSE => L_FROM_CLAUSE,
                                 A_WHERE_CLAUSE4JOIN => L_WHERE_CLAUSE4JOIN, A_WHERE_CLAUSE => L_WHERE_CLAUSE,
                                 A_BASETABLE4GK_ALIAS => 'sc',
                                 A_SQL_VAL_TAB => L_SQL_VAL_TAB);                 
               END IF;
               L_COLUMN_HANDLED(I) := TRUE; 
            ELSIF NVL(A_COL_TP(I), ' ') = 'rqgk' THEN 
               IF INSTR(L_FROM_CLAUSE, '.uvsc sc') = 0 THEN
                  L_FROM_CLAUSE := L_FROM_CLAUSE || ', dd' || UNAPIGEN.P_DD || '.uvsc sc' ;
                  L_WHERE_CLAUSE4JOIN := L_WHERE_CLAUSE4JOIN || 'sc.st = b.st AND '|| 
                                    'sc.st_version = b.version AND '; 
               END IF;
               IF NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
                  UNAPIGEN.WHERECLAUSESTRINGBUILDER (A_BASE_TABLE => 'utsc', A_INDEX =>I, A_COL_TP => A_COL_TP(I), A_COL_ID => A_COL_ID(I),
                                 A_COL_VALUE => A_COL_VALUE(I), A_COL_OPERATOR => A_COL_OPERATOR(I),
                                 A_COL_ANDOR => L_COL_ANDOR, A_ANYOR_PRESENT => L_ANYOR_PRESENT,
                                 A_JOINTABLE_PREFIX => 'utrqgk', A_JOINCOLUMN1 => 'rq', A_JOINCOLUMN2 => '', 
                                 A_PREV_COL_TP => L_PREV_COL_TP, A_PREV_COL_ID => L_PREV_COL_ID, A_PREV_COL_INDEX => L_PREV_COL_INDEX,
                                 A_NEXTTABLE_TOJOIN => L_NEXT_RQGK_JOIN, A_FROM_CLAUSE => L_FROM_CLAUSE,
                                 A_WHERE_CLAUSE4JOIN => L_WHERE_CLAUSE4JOIN, A_WHERE_CLAUSE => L_WHERE_CLAUSE,
                                 A_BASETABLE4GK_ALIAS => 'sc',
                                 A_SQL_VAL_TAB => L_SQL_VAL_TAB);                  
               END IF;
               L_COLUMN_HANDLED(I) := TRUE; 
            ELSIF NVL(A_COL_TP(I), ' ') = 'sdgk' THEN 
               IF INSTR(L_FROM_CLAUSE, '.uvsc sc') = 0 THEN
                  L_FROM_CLAUSE := L_FROM_CLAUSE || ', dd' || UNAPIGEN.P_DD || '.uvsc sc' ;
                  L_WHERE_CLAUSE4JOIN := L_WHERE_CLAUSE4JOIN ||            
                                         'sc.st = b.st AND '||             
                                         'sc.st_version = b.version AND '; 
               END IF;
               IF NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
                  UNAPIGEN.WHERECLAUSESTRINGBUILDER (A_BASE_TABLE => 'utsc', A_INDEX =>I, A_COL_TP => A_COL_TP(I), A_COL_ID => A_COL_ID(I),
                                 A_COL_VALUE => A_COL_VALUE(I), A_COL_OPERATOR => A_COL_OPERATOR(I),
                                 A_COL_ANDOR => L_COL_ANDOR, A_ANYOR_PRESENT => L_ANYOR_PRESENT,
                                 A_JOINTABLE_PREFIX => 'utsdgk', A_JOINCOLUMN1 => 'sd', A_JOINCOLUMN2 => '', 
                                 A_PREV_COL_TP => L_PREV_COL_TP, A_PREV_COL_ID => L_PREV_COL_ID, A_PREV_COL_INDEX => L_PREV_COL_INDEX,
                                 A_NEXTTABLE_TOJOIN => L_NEXT_SDGK_JOIN, A_FROM_CLAUSE => L_FROM_CLAUSE,
                                 A_WHERE_CLAUSE4JOIN => L_WHERE_CLAUSE4JOIN, A_WHERE_CLAUSE => L_WHERE_CLAUSE,
                                 A_BASETABLE4GK_ALIAS => 'sc',
                                 A_SQL_VAL_TAB => L_SQL_VAL_TAB);                  
               END IF;
               L_COLUMN_HANDLED(I) := TRUE; 
            ELSIF NVL(A_COL_TP(I), ' ') = 'sc' THEN 
               IF INSTR(L_FROM_CLAUSE, '.uvsc sc') = 0 THEN
                  L_FROM_CLAUSE := 'dd' || UNAPIGEN.P_DD || '.uvsc sc,' || L_FROM_CLAUSE ;
                  L_WHERE_CLAUSE4JOIN := L_WHERE_CLAUSE4JOIN || 'sc.st = b.st AND '|| 
                                    'sc.st_version = b.version AND '; 
               END IF;
                  IF NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
                     UNAPIGEN.WHERECLAUSESTRINGBUILDER (A_BASE_TABLE => 'utsc', A_INDEX =>I, A_COL_TP => A_COL_TP(I), A_COL_ID => A_COL_ID(I),
                                    A_COL_VALUE => A_COL_VALUE(I), A_COL_OPERATOR => A_COL_OPERATOR(I),
                                    A_COL_ANDOR => L_COL_ANDOR, A_ANYOR_PRESENT => L_ANYOR_PRESENT,
                                    A_JOINTABLE_PREFIX => '', A_JOINCOLUMN1 => '', A_JOINCOLUMN2 => '', 
                                    A_PREV_COL_TP => L_PREV_COL_TP, A_PREV_COL_ID => L_PREV_COL_ID, A_PREV_COL_INDEX => L_PREV_COL_INDEX,
                                    A_NEXTTABLE_TOJOIN => L_NEXT_SC_JOIN, A_FROM_CLAUSE => L_FROM_CLAUSE,
                                    A_WHERE_CLAUSE4JOIN => L_WHERE_CLAUSE4JOIN, A_WHERE_CLAUSE => L_WHERE_CLAUSE,
                                    A_BASETABLE4GK_ALIAS => 'sc',
                                 A_SQL_VAL_TAB => L_SQL_VAL_TAB);                  
                  END IF;
                  L_COLUMN_HANDLED(I) := TRUE; 
            ELSE 
               IF (LOWER(NVL(A_COL_ID(I),' ')) = 'version') AND (NVL(A_COL_VALUE(I),' ') = 'MAX') THEN
                  L_WHERE_CLAUSE := L_WHERE_CLAUSE || '(a.st, a.' || A_COL_ID(I) || ') ' ||
                                    'IN (SELECT st, MAX(' || A_COL_ID(I) || ') '|| 
                                        'FROM dd'|| UNAPIGEN.P_DD ||'.uvst GROUP BY st) '||
                                    L_COL_ANDOR|| ' '; 
               ELSIF NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
                  UNAPIGEN.WHERECLAUSESTRINGBUILDER (A_BASE_TABLE => 'utst', A_INDEX =>I, A_COL_TP => A_COL_TP(I), A_COL_ID => A_COL_ID(I),
                                   A_COL_VALUE => A_COL_VALUE(I), A_COL_OPERATOR => A_COL_OPERATOR(I),
                                   A_COL_ANDOR => L_COL_ANDOR, A_ANYOR_PRESENT => L_ANYOR_PRESENT,
                                   A_JOINTABLE_PREFIX => '', A_JOINCOLUMN1 => '', A_JOINCOLUMN2 => '', 
                                   A_PREV_COL_TP => L_PREV_COL_TP, A_PREV_COL_ID => L_PREV_COL_ID, A_PREV_COL_INDEX => L_PREV_COL_INDEX,
                                   A_NEXTTABLE_TOJOIN => L_NEXT_ST_JOIN, A_FROM_CLAUSE => L_FROM_CLAUSE,
                                   A_WHERE_CLAUSE4JOIN => L_WHERE_CLAUSE4JOIN, A_WHERE_CLAUSE => L_WHERE_CLAUSE,
                                   A_SQL_VAL_TAB => L_SQL_VAL_TAB);                  
               END IF;
               L_COLUMN_HANDLED(I) := TRUE; 
            END IF;
         END IF;
      END LOOP;
      
      
      IF SUBSTR(L_WHERE_CLAUSE4JOIN, -4) = 'AND ' THEN
         L_WHERE_CLAUSE4JOIN := SUBSTR(L_WHERE_CLAUSE4JOIN, 1,
                                  LENGTH(L_WHERE_CLAUSE4JOIN)-4);
      END IF;
      
      
      IF SUBSTR(L_WHERE_CLAUSE, -4) = 'AND ' THEN
         L_WHERE_CLAUSE := SUBSTR(L_WHERE_CLAUSE, 1,
                                  LENGTH(L_WHERE_CLAUSE)-4);
      END IF;
      IF UPPER(SUBSTR(L_WHERE_CLAUSE, -4)) = ' OR ' THEN
         L_WHERE_CLAUSE := SUBSTR(L_WHERE_CLAUSE, 1,
                                  LENGTH(L_WHERE_CLAUSE)-3);
      END IF;
      
      IF L_WHERE_CLAUSE4JOIN IS NOT NULL THEN
         IF L_WHERE_CLAUSE IS NULL THEN
            L_WHERE_CLAUSE := ' WHERE ' || L_WHERE_CLAUSE4JOIN;
         ELSE
            L_WHERE_CLAUSE := ' WHERE (' || L_WHERE_CLAUSE4JOIN || ') AND ('||L_WHERE_CLAUSE||') ';
         END IF;
      ELSE
         IF L_WHERE_CLAUSE IS NOT NULL THEN
            L_WHERE_CLAUSE := ' WHERE '||L_WHERE_CLAUSE;
         ELSE
            L_WHERE_CLAUSE := ' ';
         END IF;
      END IF;

      L_ORDER_BY_CLAUSE := NVL(A_ORDER_BY_CLAUSE, ' ORDER BY 1');

      L_SQL_STRING := L_SQL_STRING || L_FROM_CLAUSE || L_WHERE_CLAUSE || L_ORDER_BY_CLAUSE;

      L_LENGTH := 200;
      FOR L_X IN 1..10 LOOP
         IF ( LENGTH(L_SQL_STRING) > ((L_LENGTH*(L_X-1))+1) ) THEN
            DBMS_OUTPUT.PUT_LINE(SUBSTR(L_SQL_STRING, (L_LENGTH*(L_X-1))+1, L_LENGTH));
         ELSE
            EXIT;
         END IF;
      END LOOP;            
                      
      IF P_SELECTSTGK_CURSOR IS NULL THEN 
         P_SELECTSTGK_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;

      UNAPIAUT.ADDORACLECBOHINT (L_SQL_STRING) ;
      DBMS_SQL.PARSE(P_SELECTSTGK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      FOR L_X IN 1..L_SQL_VAL_TAB.COUNT() LOOP
         DBMS_SQL.BIND_VARIABLE(P_SELECTSTGK_CURSOR, ':col_val'||L_X , L_SQL_VAL_TAB(L_X)); 
      END LOOP;   
      DBMS_SQL.DEFINE_COLUMN(P_SELECTSTGK_CURSOR, 1, L_VALUE, 40);


      L_RESULT := DBMS_SQL.EXECUTE(P_SELECTSTGK_CURSOR);

   END IF;
   
   L_RESULT := DBMS_SQL.FETCH_ROWS(P_SELECTSTGK_CURSOR);
   L_FETCHED_ROWS := 0;
   
   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_SELECTSTGK_CURSOR, 1, L_VALUE);
   
      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
   
      A_VALUE(L_FETCHED_ROWS) := L_VALUE;
   
      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_SELECTSTGK_CURSOR);
      END IF;
   END LOOP;
   
   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_SELECTSTGK_CURSOR);
       P_SELECTSTGK_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_SELECTSTGK_CURSOR);
      P_SELECTSTGK_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);
   
EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 
              'SelectStGkValues', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      L_LENGTH := 200;
      FOR L_X IN 1..10 LOOP
         IF ( LENGTH(L_SQL_STRING) > ((L_LENGTH*(L_X-1))+1) ) THEN
            INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
            VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                   'SelectStGkValues', '(SQL)'||SUBSTR(L_SQL_STRING, (L_LENGTH*(L_X-1))+1, L_LENGTH));             
         ELSE
            EXIT;
         END IF;
      END LOOP;            
      L_LENGTH := 200;
      FOR L_X IN 1..10 LOOP
         IF ( LENGTH(L_SQLERRM) > ((L_LENGTH*(L_X-1))+1) ) THEN
            DBMS_OUTPUT.PUT_LINE(SUBSTR(L_SQLERRM, (L_LENGTH*(L_X-1))+1, L_LENGTH));
         ELSE
            EXIT;
         END IF;
      END LOOP;            
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (P_SELECTSTGK_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (P_SELECTSTGK_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END SELECTSTGKVALUES;

FUNCTION SELECTSTPROPVALUES
(A_COL_ID           IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_TP           IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_VALUE        IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_NR_OF_ROWS   IN      NUMBER,                    
 A_PROP             IN      VARCHAR2,                  
 A_VALUE            OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_NR_OF_ROWS       IN OUT  NUMBER,                    
 A_ORDER_BY_CLAUSE  IN      VARCHAR2,                  
 A_NEXT_ROWS        IN      NUMBER)                    
RETURN NUMBER IS
L_COL_OPERATOR           UNAPIGEN.VC20_TABLE_TYPE;
L_COL_ANDOR              UNAPIGEN.VC3_TABLE_TYPE;
BEGIN
FOR L_X IN 1..A_COL_NR_OF_ROWS LOOP
    L_COL_OPERATOR(L_X) := '=';
    L_COL_ANDOR(L_X) := 'AND';
END LOOP;
 RETURN(UNAPIST.SELECTSTPROPVALUES(A_COL_ID,
                                 A_COL_TP,
                                 A_COL_VALUE,
                                 L_COL_OPERATOR,
                                 L_COL_ANDOR,
                                 A_COL_NR_OF_ROWS,
                                 A_PROP,
                                 A_VALUE,
                                 A_NR_OF_ROWS,
                                 A_ORDER_BY_CLAUSE,
                                 A_NEXT_ROWS));
END SELECTSTPROPVALUES;

FUNCTION SELECTSTPROPVALUES
(A_COL_ID           IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_TP           IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_VALUE        IN      UNAPIGEN.VC40_TABLE_TYPE,  
 A_COL_OPERATOR     IN      UNAPIGEN.VC20_TABLE_TYPE,  
 A_COL_ANDOR        IN      UNAPIGEN.VC3_TABLE_TYPE,   
 A_COL_NR_OF_ROWS   IN      NUMBER,                    
 A_PROP             IN      VARCHAR2,                  
 A_VALUE            OUT     UNAPIGEN.VC40_TABLE_TYPE,  
 A_NR_OF_ROWS       IN OUT  NUMBER,                    
 A_ORDER_BY_CLAUSE  IN      VARCHAR2,                  
 A_NEXT_ROWS        IN      NUMBER)                    
RETURN NUMBER IS

L_VALUE                          VARCHAR2(40);
L_ORDER_BY_CLAUSE                VARCHAR2(255);
L_FROM_CLAUSE                    VARCHAR2(500);
L_NEXT_SC_JOIN                   VARCHAR2(4);
L_NEXT_ST_JOIN                   VARCHAR2(4);
L_NEXT_STGK_JOIN                 VARCHAR2(4);
L_NEXT_SCGK_JOIN                 VARCHAR2(4);
L_COLUMN_HANDLED                 BOOLEAN_TABLE_TYPE;
L_ANYOR_PRESENT                  BOOLEAN;
L_COL_ANDOR                      VARCHAR2(3);
L_PREV_COL_TP                    VARCHAR2(40);
L_PREV_COL_ID                    VARCHAR2(40);
L_PREV_COL_INDEX                 INTEGER;
L_WHERE_CLAUSE4JOIN              VARCHAR2(2000);
L_LENGTH                         INTEGER;
L_SQL_VAL_TAB                    VC40_NESTEDTABLE_TYPE := VC40_NESTEDTABLE_TYPE();

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_SELECTSTPROP_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_SELECTSTPROP_CURSOR);
         P_SELECTSTPROP_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_SELECTSTPROP_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      L_SQL_STRING := 'SELECT DISTINCT a.' || A_PROP ||' FROM ';
      L_FROM_CLAUSE := 'dd' || UNAPIGEN.P_DD || '.uvst a';

      
      L_WHERE_CLAUSE4JOIN := '';
      L_WHERE_CLAUSE := '';
      L_ANYOR_PRESENT := FALSE;
      FOR I IN 1..A_COL_NR_OF_ROWS LOOP
         L_COLUMN_HANDLED(I) := FALSE;
         IF LTRIM(RTRIM(UPPER(A_COL_ANDOR(I)))) = 'OR' AND
            NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
            L_ANYOR_PRESENT := TRUE;
         END IF;
         
         
         IF I<>1 THEN
            IF NVL(A_COL_TP(I), ' ') = NVL(A_COL_TP(I-1), ' ') AND
               NVL(A_COL_ID(I), ' ') = NVL(A_COL_ID(I-1), ' ') AND
               NVL(A_COL_OPERATOR(I), '=') = '=' AND
               NVL(A_COL_OPERATOR(I-1), '=') = '=' AND
               NVL(A_COL_ANDOR(I-1), 'AND') =  'AND' AND
               (NVL(A_COL_VALUE(I), ' ') <> ' ' OR NVL(A_COL_VALUE(I-1), ' ') <> ' ') THEN
               IF I> 2 AND A_COL_ANDOR(I-2) = 'OR' THEN
                  L_ANYOR_PRESENT := TRUE;
               END IF;
            END IF;
         END IF;         
      END LOOP;

      
      
      
      L_NEXT_SCGK_JOIN := 'sc';
      L_NEXT_STGK_JOIN := 'a';
      L_NEXT_ST_JOIN := 'a';
      L_NEXT_SC_JOIN := 'sc';
      FOR I IN REVERSE 1..A_COL_NR_OF_ROWS LOOP
         IF NVL(LTRIM(A_COL_ID(I)), ' ') = ' ' THEN
            RETURN(UNAPIGEN.DBERR_SELCOLSINVALID);
         END IF;

         
         L_COL_ANDOR := 'AND';
         IF I<>1 THEN
            L_COL_ANDOR := A_COL_ANDOR(I-1);
         END IF;
         IF L_COL_ANDOR IS NULL THEN
            
            L_COL_ANDOR := 'AND';
         END IF;

         IF L_COLUMN_HANDLED(I) = FALSE THEN
            IF NVL(A_COL_TP(I), ' ') = 'stgk' THEN 
               IF NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
                  UNAPIGEN.WHERECLAUSESTRINGBUILDER (A_BASE_TABLE => 'utst', A_INDEX =>I, A_COL_TP => A_COL_TP(I), A_COL_ID => A_COL_ID(I),
                                 A_COL_VALUE => A_COL_VALUE(I), A_COL_OPERATOR => A_COL_OPERATOR(I),
                                 A_COL_ANDOR => L_COL_ANDOR, A_ANYOR_PRESENT => L_ANYOR_PRESENT,
                                 A_JOINTABLE_PREFIX => 'utstgk', A_JOINCOLUMN1 => 'st', A_JOINCOLUMN2 => 'version', 
                                 A_PREV_COL_TP => L_PREV_COL_TP, A_PREV_COL_ID => L_PREV_COL_ID, A_PREV_COL_INDEX => L_PREV_COL_INDEX,
                                 A_NEXTTABLE_TOJOIN => L_NEXT_STGK_JOIN, A_FROM_CLAUSE => L_FROM_CLAUSE,
                                 A_WHERE_CLAUSE4JOIN => L_WHERE_CLAUSE4JOIN, A_WHERE_CLAUSE => L_WHERE_CLAUSE,
                                 A_SQL_VAL_TAB => L_SQL_VAL_TAB);                  
               END IF;
               L_COLUMN_HANDLED(I) := TRUE; 
            ELSIF NVL(A_COL_TP(I), ' ') = 'scgk' THEN 
               IF INSTR(L_FROM_CLAUSE, '.uvsc sc') = 0 THEN
                 L_FROM_CLAUSE := L_FROM_CLAUSE || ', dd' || UNAPIGEN.P_DD || '.uvsc sc' ;
                 L_WHERE_CLAUSE4JOIN := L_WHERE_CLAUSE4JOIN || 'sc.st = a.st AND ' || 
                                   'sc.st_version = a.version AND '; 
               END IF;
               IF NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
                  UNAPIGEN.WHERECLAUSESTRINGBUILDER (A_BASE_TABLE => 'utsc', A_INDEX =>I, A_COL_TP => A_COL_TP(I), A_COL_ID => A_COL_ID(I),
                                 A_COL_VALUE => A_COL_VALUE(I), A_COL_OPERATOR => A_COL_OPERATOR(I),
                                 A_COL_ANDOR => L_COL_ANDOR, A_ANYOR_PRESENT => L_ANYOR_PRESENT,
                                 A_JOINTABLE_PREFIX => 'utscgk', A_JOINCOLUMN1 => 'sc', A_JOINCOLUMN2 => '', 
                                 A_PREV_COL_TP => L_PREV_COL_TP, A_PREV_COL_ID => L_PREV_COL_ID, A_PREV_COL_INDEX => L_PREV_COL_INDEX,
                                 A_NEXTTABLE_TOJOIN => L_NEXT_SCGK_JOIN, A_FROM_CLAUSE => L_FROM_CLAUSE,
                                 A_WHERE_CLAUSE4JOIN => L_WHERE_CLAUSE4JOIN, A_WHERE_CLAUSE => L_WHERE_CLAUSE,
                                 A_BASETABLE4GK_ALIAS => 'sc', 
                                 A_SQL_VAL_TAB => L_SQL_VAL_TAB);                 
               END IF;
               L_COLUMN_HANDLED(I) := TRUE; 
            ELSIF NVL(A_COL_TP(I), ' ') = 'sc' THEN 
               IF INSTR(L_FROM_CLAUSE, '.uvsc sc') = 0 THEN
                 L_FROM_CLAUSE := L_FROM_CLAUSE || ', dd' || UNAPIGEN.P_DD || '.uvsc sc' ;
                 L_WHERE_CLAUSE4JOIN := L_WHERE_CLAUSE4JOIN || 'sc.st = a.st AND ' || 
                                   'sc.st_version = a.version AND '; 
               END IF;
               IF NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
                  UNAPIGEN.WHERECLAUSESTRINGBUILDER (A_BASE_TABLE => 'utsc', A_INDEX =>I, A_COL_TP => A_COL_TP(I), A_COL_ID => A_COL_ID(I),
                                 A_COL_VALUE => A_COL_VALUE(I), A_COL_OPERATOR => A_COL_OPERATOR(I),
                                 A_COL_ANDOR => L_COL_ANDOR, A_ANYOR_PRESENT => L_ANYOR_PRESENT,
                                 A_JOINTABLE_PREFIX => '', A_JOINCOLUMN1 => '', A_JOINCOLUMN2 => '', 
                                 A_PREV_COL_TP => L_PREV_COL_TP, A_PREV_COL_ID => L_PREV_COL_ID, A_PREV_COL_INDEX => L_PREV_COL_INDEX,
                                 A_NEXTTABLE_TOJOIN => L_NEXT_SC_JOIN, A_FROM_CLAUSE => L_FROM_CLAUSE,
                                 A_WHERE_CLAUSE4JOIN => L_WHERE_CLAUSE4JOIN, A_WHERE_CLAUSE => L_WHERE_CLAUSE,                  
                                 A_BASETABLE4GK_ALIAS => 'sc',
                                 A_SQL_VAL_TAB => L_SQL_VAL_TAB);
               END IF;
               L_COLUMN_HANDLED(I) := TRUE; 
            ELSE 
               IF (LOWER(NVL(A_COL_ID(I),' ')) = 'version') AND (NVL(A_COL_VALUE(I),' ') = 'MAX') THEN
                 L_WHERE_CLAUSE := L_WHERE_CLAUSE || '(a.st, a.' || A_COL_ID(I) || ') ' ||
                                   'IN (SELECT st, MAX(' || A_COL_ID(I) || ') '|| 
                                       'FROM dd'|| UNAPIGEN.P_DD ||'.uvst GROUP BY st) '||
                                       L_COL_ANDOR || ' ' ; 
               ELSIF NVL(A_COL_VALUE(I), ' ') <> ' ' THEN
                  UNAPIGEN.WHERECLAUSESTRINGBUILDER (A_BASE_TABLE => 'utst', A_INDEX =>I, A_COL_TP => A_COL_TP(I), A_COL_ID => A_COL_ID(I),
                                 A_COL_VALUE => A_COL_VALUE(I), A_COL_OPERATOR => A_COL_OPERATOR(I),
                                 A_COL_ANDOR => L_COL_ANDOR, A_ANYOR_PRESENT => L_ANYOR_PRESENT,
                                 A_JOINTABLE_PREFIX => '', A_JOINCOLUMN1 => '', A_JOINCOLUMN2 => '', 
                                 A_PREV_COL_TP => L_PREV_COL_TP, A_PREV_COL_ID => L_PREV_COL_ID, A_PREV_COL_INDEX => L_PREV_COL_INDEX,
                                 A_NEXTTABLE_TOJOIN => L_NEXT_ST_JOIN, A_FROM_CLAUSE => L_FROM_CLAUSE,
                                 A_WHERE_CLAUSE4JOIN => L_WHERE_CLAUSE4JOIN, A_WHERE_CLAUSE => L_WHERE_CLAUSE,
                                 A_SQL_VAL_TAB => L_SQL_VAL_TAB);                  
               END IF;
               L_COLUMN_HANDLED(I) := TRUE; 
            END IF;
         END IF;
      END LOOP;

      
      IF SUBSTR(L_WHERE_CLAUSE4JOIN, -4) = 'AND ' THEN
         L_WHERE_CLAUSE4JOIN := SUBSTR(L_WHERE_CLAUSE4JOIN, 1,
                                  LENGTH(L_WHERE_CLAUSE4JOIN)-4);
      END IF;
      
      
      IF SUBSTR(L_WHERE_CLAUSE, -4) = 'AND ' THEN
         L_WHERE_CLAUSE := SUBSTR(L_WHERE_CLAUSE, 1,
                                  LENGTH(L_WHERE_CLAUSE)-4);
      END IF;
      IF UPPER(SUBSTR(L_WHERE_CLAUSE, -4)) = ' OR ' THEN
         L_WHERE_CLAUSE := SUBSTR(L_WHERE_CLAUSE, 1,
                                  LENGTH(L_WHERE_CLAUSE)-3);
      END IF;
      
      IF L_WHERE_CLAUSE4JOIN IS NOT NULL THEN
         IF L_WHERE_CLAUSE IS NULL THEN
            L_WHERE_CLAUSE := ' WHERE ' || L_WHERE_CLAUSE4JOIN;
         ELSE
            L_WHERE_CLAUSE := ' WHERE (' || L_WHERE_CLAUSE4JOIN || ') AND ('||L_WHERE_CLAUSE||') ';
         END IF;
      ELSE
         IF L_WHERE_CLAUSE IS NOT NULL THEN
            L_WHERE_CLAUSE := ' WHERE '||L_WHERE_CLAUSE;
         ELSE
            L_WHERE_CLAUSE := ' ';
         END IF;
      END IF;

      L_ORDER_BY_CLAUSE := NVL(A_ORDER_BY_CLAUSE, ' ORDER BY 1');

      L_SQL_STRING := L_SQL_STRING || L_FROM_CLAUSE || L_WHERE_CLAUSE || L_ORDER_BY_CLAUSE;

      L_LENGTH := 200;
      FOR L_X IN 1..10 LOOP
         IF ( LENGTH(L_SQL_STRING) > ((L_LENGTH*(L_X-1))+1) ) THEN
            DBMS_OUTPUT.PUT_LINE(SUBSTR(L_SQL_STRING, (L_LENGTH*(L_X-1))+1, L_LENGTH));
         ELSE
            EXIT;
         END IF;
      END LOOP;            

      IF P_SELECTSTPROP_CURSOR IS NULL THEN 
         P_SELECTSTPROP_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;
      
      UNAPIAUT.ADDORACLECBOHINT (L_SQL_STRING) ;
      DBMS_SQL.PARSE(P_SELECTSTPROP_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      FOR L_X IN 1..L_SQL_VAL_TAB.COUNT() LOOP
         DBMS_SQL.BIND_VARIABLE(P_SELECTSTPROP_CURSOR, ':col_val'||L_X , L_SQL_VAL_TAB(L_X)); 
      END LOOP;
      DBMS_SQL.DEFINE_COLUMN(P_SELECTSTPROP_CURSOR, 1, L_VALUE, 40);
      L_RESULT := DBMS_SQL.EXECUTE(P_SELECTSTPROP_CURSOR);

   END IF;

   L_RESULT := DBMS_SQL.FETCH_ROWS(P_SELECTSTPROP_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_SELECTSTPROP_CURSOR, 1, L_VALUE);
      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_VALUE(L_FETCHED_ROWS) := L_VALUE;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_SELECTSTPROP_CURSOR);
      END IF;
   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_SELECTSTPROP_CURSOR);
       P_SELECTSTPROP_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_SELECTSTPROP_CURSOR);
      P_SELECTSTPROP_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;
   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'SelectStPropValues', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      L_LENGTH := 200;
      FOR L_X IN 1..10 LOOP
         IF ( LENGTH(L_SQL_STRING) > ((L_LENGTH*(L_X-1))+1) ) THEN
            INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
            VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
                   'SelectStPropValues', '(SQL)'||SUBSTR(L_SQL_STRING, (L_LENGTH*(L_X-1))+1, L_LENGTH));             
         ELSE
            EXIT;
         END IF;
      END LOOP;            
      L_LENGTH := 200;
      FOR L_X IN 1..10 LOOP
         IF ( LENGTH(L_SQLERRM) > ((L_LENGTH*(L_X-1))+1) ) THEN
            DBMS_OUTPUT.PUT_LINE(SUBSTR(L_SQLERRM, (L_LENGTH*(L_X-1))+1, L_LENGTH));
         ELSE
            EXIT;
         END IF;
      END LOOP;            
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (P_SELECTSTPROP_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (P_SELECTSTPROP_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END SELECTSTPROPVALUES;

FUNCTION GETSTPARAMETERPROFILE
(A_ST                      OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_VERSION                 OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_PP                      OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_PP_VERSION              OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_PP_KEY1                 OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_PP_KEY2                 OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_PP_KEY3                 OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_PP_KEY4                 OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_PP_KEY5                 OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_DESCRIPTION             OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_FREQ_TP                 OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_FREQ_VAL                OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_FREQ_UNIT               OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_INVERT_FREQ             OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_LAST_SCHED              OUT    UNAPIGEN.DATE_TABLE_TYPE,    
 A_LAST_CNT                OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_LAST_VAL                OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_INHERIT_AU              OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_NR_OF_ROWS              IN OUT NUMBER,                      
 A_WHERE_CLAUSE            IN     VARCHAR2,                    
 A_NEXT_ROWS               IN     NUMBER)                      
RETURN NUMBER IS

L_ST                           VARCHAR2(20);
L_VERSION                      VARCHAR2(20);
L_PP                           VARCHAR2(20);
L_PP_VERSION                   VARCHAR2(20);
L_PP_KEY1                      VARCHAR2(20);
L_PP_KEY2                      VARCHAR2(20);
L_PP_KEY3                      VARCHAR2(20);
L_PP_KEY4                      VARCHAR2(20);
L_PP_KEY5                      VARCHAR2(20);
L_DESCRIPTION                  VARCHAR2(40);
L_FREQ_TP                      CHAR(1);
L_FREQ_VAL                     NUMBER;
L_FREQ_UNIT                    VARCHAR2(20);
L_INVERT_FREQ                  CHAR(1);
L_LAST_SCHED                   TIMESTAMP WITH TIME ZONE;
L_LAST_CNT                     NUMBER(5);
L_LAST_VAL                     VARCHAR2(40);
L_INHERIT_AU                   CHAR(1);
L_PP_FOUND                     BOOLEAN;
L_BIND_RT_SELECTION            BOOLEAN;
L_BIND_ST_SELECTION            BOOLEAN;
L_BIND_FIXED_ST_FLAG           BOOLEAN;

BEGIN

   L_BIND_RT_SELECTION := FALSE;
   L_BIND_ST_SELECTION := FALSE;
   L_BIND_FIXED_ST_FLAG := FALSE;
   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;
   
   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;
   
   
   IF A_NEXT_ROWS = -1 THEN
      IF P_STPP_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_STPP_CURSOR);
         P_STPP_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_STPP_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN

      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
         L_WHERE_CLAUSE := 'ORDER BY stpp.st, stpp.version, stpp.seq';
      ELSIF A_WHERE_CLAUSE = 'RTSELECTION' THEN
         IF UNAPIRT.P_SELECTION_CLAUSE IS NOT NULL THEN 
            IF INSTR(UPPER(UNAPIRT.P_SELECTION_CLAUSE), 'WHERE') <> 0 THEN       
               L_WHERE_CLAUSE := 'WHERE (stpp.st, stpp.version) IN '||
                                    '(SELECT b.st, UNAPIGEN.UseVersion(''st'',b.st,b.st_version)'||
                                    ' FROM dd'||UNAPIGEN.P_DD||'.uvrtst b, '||
                                    UNAPIRT.P_SELECTION_CLAUSE||
                                    ' AND a.rt = b.rt'||
                                    ' AND a.version = b.version) '||
                                 'ORDER BY stpp.st, stpp.version, stpp.seq';  
            ELSE
               L_WHERE_CLAUSE := 'WHERE (stpp.st, stpp.version) IN '||
                                    '(SELECT b.st, UNAPIGEN.UseVersion(''st'',b.st,b.st_version)'||
                                    ' FROM dd'||UNAPIGEN.P_DD||'.uvrtst b, '||
                                    UNAPIRT.P_SELECTION_CLAUSE||
                                    ' WHERE a.rt = b.rt'||
                                    ' AND a.version = b.version) '||
                                 'ORDER BY stpp.st, stpp.version, stpp.seq';  
            END IF;
            L_BIND_RT_SELECTION := TRUE;
         ELSE
            L_WHERE_CLAUSE := 'ORDER BY stpp.st, stpp.version, stpp.seq'; 
         END IF;      
      ELSIF A_WHERE_CLAUSE = 'SELECTION' THEN
         IF UNAPIST.P_SELECTION_CLAUSE IS NOT NULL THEN 
            IF INSTR(UPPER(UNAPIST.P_SELECTION_CLAUSE), 'WHERE') <> 0 THEN       
               L_WHERE_CLAUSE := ','||UNAPIST.P_SELECTION_CLAUSE||
                                 ' AND a.version = stpp.version AND a.st = stpp.st ORDER BY stpp.st, stpp.version, stpp.seq'; 
            ELSE
               L_WHERE_CLAUSE := ','||UNAPIST.P_SELECTION_CLAUSE|| 
                                 ' WHERE a.version = stpp.version AND a.st = stpp.st ORDER BY stpp.st, stpp.version, stpp.seq'; 
            END IF;
            L_BIND_ST_SELECTION := TRUE;
         ELSE
            L_WHERE_CLAUSE := 'ORDER BY stpp.st, stpp.version, stpp.seq'; 
         END IF;      
      ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
         L_BIND_FIXED_ST_FLAG := TRUE;
         L_WHERE_CLAUSE := ', dd'||UNAPIGEN.P_DD||'.uvst st WHERE st.version_is_current = ''1'' '||
                           'AND st.version = stpp.version '||
                           'AND st.st = stpp.st '||
                           'AND stpp.st = :st_val ORDER BY stpp.seq';
      ELSE
         L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
      END IF;

      L_SQL_STRING := 'SELECT stpp.st, stpp.version, stpp.pp, stpp.pp_version, '||
                      'stpp.pp_key1, stpp.pp_key2, stpp.pp_key3, stpp.pp_key4, '||
                      'stpp.pp_key5, stpp.freq_tp, stpp.freq_val, '||
                      'stpp.freq_unit, stpp.invert_freq, stpp.last_sched, stpp.last_cnt, '||
                      'stpp.last_val, stpp.inherit_au ' ||
                      'FROM dd'||UNAPIGEN.P_DD||'.uvstpp stpp '||L_WHERE_CLAUSE;

      IF P_STPP_CURSOR IS NULL THEN
         P_STPP_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;
      DBMS_SQL.PARSE(P_STPP_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      IF L_BIND_FIXED_ST_FLAG THEN
         DBMS_SQL.BIND_VARIABLE(P_STPP_CURSOR, ':st_val' , A_WHERE_CLAUSE); 
      ELSIF L_BIND_ST_SELECTION THEN
         FOR L_X IN 1..UNAPIST.P_SELECTION_VAL_TAB.COUNT() LOOP
            DBMS_SQL.BIND_VARIABLE(P_STPP_CURSOR, ':col_val'||L_X , UNAPIST.P_SELECTION_VAL_TAB(L_X)); 
         END LOOP;
      ELSIF L_BIND_RT_SELECTION THEN
         FOR L_X IN 1..UNAPIRT.P_SELECTION_VAL_TAB.COUNT() LOOP
            DBMS_SQL.BIND_VARIABLE(P_STPP_CURSOR, ':col_val'||L_X , UNAPIRT.P_SELECTION_VAL_TAB(L_X)); 
         END LOOP;
      END IF;
      
      DBMS_SQL.DEFINE_COLUMN(P_STPP_CURSOR, 1, L_ST, 20);
      DBMS_SQL.DEFINE_COLUMN(P_STPP_CURSOR, 2, L_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(P_STPP_CURSOR, 3, L_PP, 20);
      DBMS_SQL.DEFINE_COLUMN(P_STPP_CURSOR, 4, L_PP_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(P_STPP_CURSOR, 5, L_PP_KEY1, 20);
      DBMS_SQL.DEFINE_COLUMN(P_STPP_CURSOR, 6, L_PP_KEY2, 20);
      DBMS_SQL.DEFINE_COLUMN(P_STPP_CURSOR, 7, L_PP_KEY3, 20);
      DBMS_SQL.DEFINE_COLUMN(P_STPP_CURSOR, 8, L_PP_KEY4, 20);
      DBMS_SQL.DEFINE_COLUMN(P_STPP_CURSOR, 9, L_PP_KEY5, 20);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_STPP_CURSOR, 10, L_FREQ_TP, 1);
      DBMS_SQL.DEFINE_COLUMN(P_STPP_CURSOR, 11, L_FREQ_VAL);
      DBMS_SQL.DEFINE_COLUMN(P_STPP_CURSOR, 12, L_FREQ_UNIT, 20);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_STPP_CURSOR, 13, L_INVERT_FREQ, 1);
      DBMS_SQL.DEFINE_COLUMN(P_STPP_CURSOR, 14, L_LAST_SCHED);
      DBMS_SQL.DEFINE_COLUMN(P_STPP_CURSOR, 15, L_LAST_CNT);
      DBMS_SQL.DEFINE_COLUMN(P_STPP_CURSOR, 16, L_LAST_VAL, 40);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_STPP_CURSOR, 17, L_INHERIT_AU, 1);
      L_RESULT := DBMS_SQL.EXECUTE(P_STPP_CURSOR);
   END IF;

   L_RESULT := DBMS_SQL.FETCH_ROWS(P_STPP_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_STPP_CURSOR, 1, L_ST);
      DBMS_SQL.COLUMN_VALUE(P_STPP_CURSOR, 2, L_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_STPP_CURSOR, 3, L_PP);
      DBMS_SQL.COLUMN_VALUE(P_STPP_CURSOR, 4, L_PP_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_STPP_CURSOR, 5, L_PP_KEY1);
      DBMS_SQL.COLUMN_VALUE(P_STPP_CURSOR, 6, L_PP_KEY2);
      DBMS_SQL.COLUMN_VALUE(P_STPP_CURSOR, 7, L_PP_KEY3);
      DBMS_SQL.COLUMN_VALUE(P_STPP_CURSOR, 8, L_PP_KEY4);
      DBMS_SQL.COLUMN_VALUE(P_STPP_CURSOR, 9, L_PP_KEY5);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_STPP_CURSOR, 10, L_FREQ_TP);
      DBMS_SQL.COLUMN_VALUE(P_STPP_CURSOR, 11, L_FREQ_VAL);
      DBMS_SQL.COLUMN_VALUE(P_STPP_CURSOR, 12, L_FREQ_UNIT);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_STPP_CURSOR, 13, L_INVERT_FREQ);
      DBMS_SQL.COLUMN_VALUE(P_STPP_CURSOR, 14, L_LAST_SCHED);
      DBMS_SQL.COLUMN_VALUE(P_STPP_CURSOR, 15, L_LAST_CNT);
      DBMS_SQL.COLUMN_VALUE(P_STPP_CURSOR, 16, L_LAST_VAL);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_STPP_CURSOR, 17, L_INHERIT_AU);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_ST (L_FETCHED_ROWS) := L_ST;
      A_VERSION (L_FETCHED_ROWS) := L_VERSION;
      A_PP (L_FETCHED_ROWS) := L_PP;
      A_PP_VERSION (L_FETCHED_ROWS) := L_PP_VERSION;
      A_PP_KEY1 (L_FETCHED_ROWS) := L_PP_KEY1;
      A_PP_KEY2 (L_FETCHED_ROWS) := L_PP_KEY2;
      A_PP_KEY3 (L_FETCHED_ROWS) := L_PP_KEY3;
      A_PP_KEY4 (L_FETCHED_ROWS) := L_PP_KEY4;
      A_PP_KEY5 (L_FETCHED_ROWS) := L_PP_KEY5;
      A_FREQ_TP (L_FETCHED_ROWS) := L_FREQ_TP;
      A_FREQ_VAL (L_FETCHED_ROWS) := L_FREQ_VAL;
      A_FREQ_UNIT (L_FETCHED_ROWS) := L_FREQ_UNIT;
      A_INVERT_FREQ (L_FETCHED_ROWS) := L_INVERT_FREQ;
      A_LAST_SCHED (L_FETCHED_ROWS) := TO_CHAR(L_LAST_SCHED);
      A_LAST_CNT (L_FETCHED_ROWS) := L_LAST_CNT;
      A_LAST_VAL (L_FETCHED_ROWS) := L_LAST_VAL;
      A_INHERIT_AU (L_FETCHED_ROWS) := L_INHERIT_AU;
      
      L_DESCRIPTION := NULL;
      L_SQL_STRING:=   'SELECT description '
                     ||'FROM dd'||UNAPIGEN.P_DD||'.uvpp '
                     ||'WHERE version = NVL(UNAPIGEN.UsePpVersion(:l_pp,:l_pp_version,:l_pp_key1,:l_pp_key2,:l_pp_key3,:l_pp_key4,:l_pp_key5), '
                     ||                    'UNAPIGEN.UsePpVersion(:l_pp,''*'',:l_pp_key1,:l_pp_key2,:l_pp_key3,:l_pp_key4,:l_pp_key5)) '
                     ||'AND pp = :l_pp '
                     ||'AND pp_key1 = :l_pp_key1 '
                     ||'AND pp_key2 = :l_pp_key2 '
                     ||'AND pp_key3 = :l_pp_key3 '
                     ||'AND pp_key4 = :l_pp_key4 '
                     ||'AND pp_key5 = :l_pp_key5';
      BEGIN
         EXECUTE IMMEDIATE L_SQL_STRING 
         INTO L_DESCRIPTION
         USING L_PP, L_PP_VERSION, L_PP_KEY1, L_PP_KEY2, L_PP_KEY3, L_PP_KEY4, L_PP_KEY5,
               L_PP, L_PP_KEY1, L_PP_KEY2, L_PP_KEY3, L_PP_KEY4, L_PP_KEY5,
               L_PP, L_PP_KEY1, L_PP_KEY2, L_PP_KEY3, L_PP_KEY4, L_PP_KEY5;
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            
            NULL;
      END;

      L_PP_FOUND := SQL%FOUND;
      IF NOT L_PP_FOUND THEN
         L_DESCRIPTION := L_PP;
      END IF;

      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_STPP_CURSOR);
      END IF;
   END LOOP;

   
   IF L_FETCHED_ROWS = 0 THEN
       DBMS_SQL.CLOSE_CURSOR(P_STPP_CURSOR);
       P_STPP_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_STPP_CURSOR);
      P_STPP_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetStParameterProfile', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (P_STPP_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (P_STPP_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETSTPARAMETERPROFILE;

FUNCTION GETSTINFOPROFILE
(A_ST                      OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_VERSION                 OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_IP                      OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_IP_VERSION              OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_DESCRIPTION             OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_IS_PROTECTED            OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_HIDDEN                  OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_FREQ_TP                 OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_FREQ_VAL                OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_FREQ_UNIT               OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_INVERT_FREQ             OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_LAST_SCHED              OUT    UNAPIGEN.DATE_TABLE_TYPE,    
 A_LAST_CNT                OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_LAST_VAL                OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_INHERIT_AU              OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_NR_OF_ROWS              IN OUT NUMBER,                      
 A_WHERE_CLAUSE            IN     VARCHAR2,                    
 A_NEXT_ROWS               IN     NUMBER)                      
RETURN NUMBER IS

L_ST                       VARCHAR2(20);
L_VERSION                  VARCHAR2(20); 
L_IP                       VARCHAR2(20);
L_IP_VERSION               VARCHAR2(20);
L_DESCRIPTION              VARCHAR2(40);
L_IS_PROTECTED             CHAR(1);
L_HIDDEN                   CHAR(1);
L_FREQ_TP                  CHAR(1);
L_FREQ_VAL                 NUMBER;
L_FREQ_UNIT                VARCHAR2(20);
L_INVERT_FREQ              CHAR(1);
L_LAST_SCHED               TIMESTAMP WITH TIME ZONE;
L_LAST_CNT                 NUMBER(5);
L_LAST_VAL                 VARCHAR2(40);
L_INHERIT_AU               CHAR(1);
L_IP_FOUND                 BOOLEAN;
L_BIND_RT_SELECTION        BOOLEAN;
L_BIND_ST_SELECTION        BOOLEAN;
L_BIND_FIXED_ST_FLAG       BOOLEAN;

BEGIN

   L_BIND_RT_SELECTION := FALSE;
   L_BIND_ST_SELECTION := FALSE;
   L_BIND_FIXED_ST_FLAG := FALSE;
   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;
   
   
   IF A_NEXT_ROWS = -1 THEN
      IF P_STIP_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_STIP_CURSOR);
         P_STIP_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_STIP_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN

      IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
         L_WHERE_CLAUSE := 'ORDER BY stip.st, stip.version, stip.seq';
      ELSIF A_WHERE_CLAUSE = 'RTSELECTION' THEN
         IF UNAPIRT.P_SELECTION_CLAUSE IS NOT NULL THEN 
            IF INSTR(UPPER(UNAPIRT.P_SELECTION_CLAUSE), 'WHERE') <> 0 THEN       
               L_WHERE_CLAUSE := 'WHERE (stip.st, stip.version) IN '||
                                    '(SELECT b.st, UNAPIGEN.UseVersion(''st'',b.st,b.st_version)'||
                                    ' FROM dd'||UNAPIGEN.P_DD||'.uvrtst b, '||
                                    UNAPIRT.P_SELECTION_CLAUSE||
                                    ' AND a.rt = b.rt'||
                                    ' AND a.version = b.version) '||
                                 'ORDER BY stip.st, stip.version, stip.seq';  
            ELSE
               L_WHERE_CLAUSE := 'WHERE (stip.st, stip.version) IN '||
                                    '(SELECT b.st, UNAPIGEN.UseVersion(''st'',b.st,b.st_version)'||
                                    ' FROM dd'||UNAPIGEN.P_DD||'.uvrtst b, '||
                                    UNAPIRT.P_SELECTION_CLAUSE||
                                    ' WHERE a.rt = b.rt'||
                                    ' AND a.version = b.version) '||
                                 'ORDER BY stip.st, stip.version, stip.seq';  
            END IF;
            L_BIND_RT_SELECTION := TRUE;
         ELSE
            L_WHERE_CLAUSE := 'ORDER BY stip.st, stip.version, stip.seq'; 
         END IF;      
      ELSIF A_WHERE_CLAUSE = 'SELECTION' THEN
         IF UNAPIST.P_SELECTION_CLAUSE IS NOT NULL THEN 
            IF INSTR(UPPER(UNAPIST.P_SELECTION_CLAUSE), 'WHERE') <> 0 THEN       
               L_WHERE_CLAUSE := ','||UNAPIST.P_SELECTION_CLAUSE|| 
                                 ' AND a.version = stip.version AND a.st = stip.st ORDER BY stip.st, stip.version, stip.seq'; 
            ELSE
               L_WHERE_CLAUSE := ','||UNAPIST.P_SELECTION_CLAUSE|| 
                                 ' WHERE a.version = stip.version AND a.st = stip.st ORDER BY stip.st, stip.version, stip.seq'; 
            END IF;
            L_BIND_ST_SELECTION := TRUE;
         ELSE
            L_WHERE_CLAUSE := 'ORDER BY stip.st, stip.version, stip.seq'; 
         END IF;      
      ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
         L_BIND_FIXED_ST_FLAG := TRUE;
         L_WHERE_CLAUSE := ', dd'||UNAPIGEN.P_DD||'.uvst st WHERE st.version_is_current = ''1'' '||
                           'AND st.version = stip.version '||
                           'AND st.st = stip.st '||
                           'AND stip.st = :st_val ORDER BY stip.seq';
      ELSE
         L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
      END IF;

      L_SQL_STRING := 'SELECT stip.st, stip.version, stip.ip, stip.ip_version, stip.is_protected, '||
                      'stip.hidden, stip.freq_tp, stip.freq_val, stip.freq_unit, stip.invert_freq, ' ||
                      'stip.last_sched, stip.last_cnt, stip.last_val, stip.inherit_au ' ||
                      'FROM dd'||UNAPIGEN.P_DD||'.uvstip stip '|| L_WHERE_CLAUSE;

      IF P_STIP_CURSOR IS NULL THEN
         P_STIP_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;
      DBMS_SQL.PARSE(P_STIP_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      IF L_BIND_FIXED_ST_FLAG THEN
         DBMS_SQL.BIND_VARIABLE(P_STIP_CURSOR, ':st_val' , A_WHERE_CLAUSE); 
      ELSIF L_BIND_ST_SELECTION THEN
         FOR L_X IN 1..UNAPIST.P_SELECTION_VAL_TAB.COUNT() LOOP
            DBMS_SQL.BIND_VARIABLE(P_STIP_CURSOR, ':col_val'||L_X , UNAPIST.P_SELECTION_VAL_TAB(L_X)); 
         END LOOP;
      ELSIF L_BIND_RT_SELECTION THEN
         FOR L_X IN 1..UNAPIRT.P_SELECTION_VAL_TAB.COUNT() LOOP
            DBMS_SQL.BIND_VARIABLE(P_STIP_CURSOR, ':col_val'||L_X , UNAPIRT.P_SELECTION_VAL_TAB(L_X)); 
         END LOOP;
      END IF;

      DBMS_SQL.DEFINE_COLUMN(P_STIP_CURSOR, 1, L_ST, 20);
      DBMS_SQL.DEFINE_COLUMN(P_STIP_CURSOR, 2, L_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(P_STIP_CURSOR, 3, L_IP, 20);
      DBMS_SQL.DEFINE_COLUMN(P_STIP_CURSOR, 4, L_IP_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_STIP_CURSOR, 5, L_IS_PROTECTED, 1);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_STIP_CURSOR, 6, L_HIDDEN, 1);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_STIP_CURSOR, 7, L_FREQ_TP, 1);
      DBMS_SQL.DEFINE_COLUMN(P_STIP_CURSOR, 8, L_FREQ_VAL);
      DBMS_SQL.DEFINE_COLUMN(P_STIP_CURSOR, 9, L_FREQ_UNIT, 20);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_STIP_CURSOR, 10, L_INVERT_FREQ, 1);
      DBMS_SQL.DEFINE_COLUMN(P_STIP_CURSOR, 11, L_LAST_SCHED);
      DBMS_SQL.DEFINE_COLUMN(P_STIP_CURSOR, 12, L_LAST_CNT);
      DBMS_SQL.DEFINE_COLUMN(P_STIP_CURSOR, 13, L_LAST_VAL, 40);
      DBMS_SQL.DEFINE_COLUMN_CHAR(P_STIP_CURSOR, 14, L_INHERIT_AU, 1);
      L_RESULT := DBMS_SQL.EXECUTE(P_STIP_CURSOR);
   END IF;
   
   L_RESULT := DBMS_SQL.FETCH_ROWS(P_STIP_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_STIP_CURSOR, 1, L_ST);
      DBMS_SQL.COLUMN_VALUE(P_STIP_CURSOR, 2, L_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_STIP_CURSOR, 3, L_IP);
      DBMS_SQL.COLUMN_VALUE(P_STIP_CURSOR, 4, L_IP_VERSION);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_STIP_CURSOR, 5, L_IS_PROTECTED);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_STIP_CURSOR, 6, L_HIDDEN);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_STIP_CURSOR, 7, L_FREQ_TP);
      DBMS_SQL.COLUMN_VALUE(P_STIP_CURSOR, 8, L_FREQ_VAL);
      DBMS_SQL.COLUMN_VALUE(P_STIP_CURSOR, 9, L_FREQ_UNIT);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_STIP_CURSOR, 10, L_INVERT_FREQ);
      DBMS_SQL.COLUMN_VALUE(P_STIP_CURSOR, 11, L_LAST_SCHED);
      DBMS_SQL.COLUMN_VALUE(P_STIP_CURSOR, 12, L_LAST_CNT);
      DBMS_SQL.COLUMN_VALUE(P_STIP_CURSOR, 13, L_LAST_VAL);
      DBMS_SQL.COLUMN_VALUE_CHAR(P_STIP_CURSOR, 14, L_INHERIT_AU);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;

      A_ST (L_FETCHED_ROWS) := L_ST;
      A_VERSION (L_FETCHED_ROWS) := L_VERSION;
      A_IP (L_FETCHED_ROWS) := L_IP;
      A_IP_VERSION (L_FETCHED_ROWS) := L_IP_VERSION;
      A_IS_PROTECTED(L_FETCHED_ROWS) := L_IS_PROTECTED;
      A_HIDDEN (L_FETCHED_ROWS) := L_HIDDEN;
      A_FREQ_TP (L_FETCHED_ROWS) := L_FREQ_TP;
      A_FREQ_VAL (L_FETCHED_ROWS) := L_FREQ_VAL;
      A_FREQ_UNIT (L_FETCHED_ROWS) := L_FREQ_UNIT;
      A_INVERT_FREQ (L_FETCHED_ROWS) := L_INVERT_FREQ;
      A_LAST_SCHED (L_FETCHED_ROWS) := TO_CHAR(L_LAST_SCHED);
      A_LAST_CNT (L_FETCHED_ROWS) := L_LAST_CNT;
      A_LAST_VAL (L_FETCHED_ROWS) := L_LAST_VAL;
      A_INHERIT_AU (L_FETCHED_ROWS) := L_INHERIT_AU;

      L_DESCRIPTION := NULL;
      L_SQL_STRING:=   'SELECT description '
                     ||'FROM dd'||UNAPIGEN.P_DD||'.uvip '
                     ||'WHERE version = NVL(UNAPIGEN.UseVersion(''ip'',:l_ip,:l_ip_version), '
                     ||                    'UNAPIGEN.UseVersion(''ip'',:l_ip,''*'')) '
                     ||'AND ip = :l_ip';
      BEGIN
         EXECUTE IMMEDIATE L_SQL_STRING 
         INTO L_DESCRIPTION
         USING L_IP, L_IP_VERSION, L_IP, L_IP;
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            
            NULL;
      END;
      
      L_IP_FOUND := SQL%FOUND;
      IF NOT L_IP_FOUND THEN
         L_DESCRIPTION := L_IP;
      END IF;

      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_STIP_CURSOR);
      END IF;
   END LOOP;

   
   IF L_FETCHED_ROWS = 0 THEN
       DBMS_SQL.CLOSE_CURSOR(P_STIP_CURSOR);
       P_STIP_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_STIP_CURSOR);
      P_STIP_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetStInfoProfile', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (P_STIP_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (P_STIP_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETSTINFOPROFILE;

FUNCTION GETSTGROUPKEY
(A_ST                 OUT    UNAPIGEN.VC20_TABLE_TYPE,   
 A_VERSION            OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_GK                 OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_GK_VERSION         OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_VALUE              OUT    UNAPIGEN.VC40_TABLE_TYPE,   
 A_DESCRIPTION        OUT    UNAPIGEN.VC40_TABLE_TYPE,   
 A_IS_PROTECTED       OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_VALUE_UNIQUE       OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_SINGLE_VALUED      OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_NEW_VAL_ALLOWED    OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_MANDATORY          OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_VALUE_LIST_TP      OUT    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_DSP_ROWS           OUT    UNAPIGEN.NUM_TABLE_TYPE,    
 A_NR_OF_ROWS         IN OUT NUMBER,                     
 A_WHERE_CLAUSE       IN     VARCHAR2)                   
RETURN NUMBER IS

L_ST                                   VARCHAR2(20);
L_VERSION                              VARCHAR2(20);
L_GK                                   VARCHAR2(20);
L_GK_VERSION                           VARCHAR2(20);
L_VALUE                                VARCHAR2(40);
L_DESCRIPTION                          VARCHAR2(40);
L_IS_PROTECTED                         CHAR(1);
L_VALUE_UNIQUE                         CHAR(1);
L_SINGLE_VALUED                        CHAR(1);
L_NEW_VAL_ALLOWED                      CHAR(1);
L_MANDATORY                            CHAR(1);
L_VALUE_LIST_TP                        CHAR(1);
L_DSP_ROWS                             NUMBER(3);
L_BIND_ST_SELECTION                    BOOLEAN;
L_BIND_FIXED_ST_FLAG                   BOOLEAN;
L_GKDEF_REC                            UNAPIGK.GKDEFINITIONREC;
L_TEMP_RET_CODE                        INTEGER;

BEGIN
   L_BIND_ST_SELECTION :=FALSE;
   L_BIND_FIXED_ST_FLAG :=FALSE;
   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;
 
   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      L_WHERE_CLAUSE := 'ORDER BY gk.st, gk.version, gk.gkseq';
   ELSIF A_WHERE_CLAUSE = 'SELECTION' THEN
      IF UNAPIST.P_SELECTION_CLAUSE IS NOT NULL THEN 
         IF INSTR(UPPER(UNAPIST.P_SELECTION_CLAUSE), 'WHERE') <> 0 THEN       
            L_WHERE_CLAUSE := ','||UNAPIST.P_SELECTION_CLAUSE|| 
                              ' AND a.version = gk.version AND a.st = gk.st ORDER BY gk.st, gk.version, gk.gkseq'; 
         ELSE
            L_WHERE_CLAUSE := ','||UNAPIST.P_SELECTION_CLAUSE|| 
                              ' WHERE a.version = gk.version AND a.st = gk.st ORDER BY gk.st, gk.version, gk.gkseq'; 
         END IF;
         L_BIND_ST_SELECTION := TRUE;
      ELSE
         L_WHERE_CLAUSE := 'ORDER BY gk.st, gk.version, gk.gkseq'; 
      END IF;      
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
         L_WHERE_CLAUSE := ', dd'||UNAPIGEN.P_DD||'.uvst st WHERE st.version_is_current = ''1'' '||
                           'AND st.version = gk.version '||
                           'AND st.st = gk.st '||
                           'AND gk.st = :st_val ORDER BY gk.gkseq';
         L_BIND_FIXED_ST_FLAG := TRUE;
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;
 
   IF NOT DBMS_SQL.IS_OPEN(P_STGK_CURSOR) THEN
      
      L_TEMP_RET_CODE := UNAPIGK.INITGROUPKEYDEFBUFFER('st');
      IF L_TEMP_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         RAISE_APPLICATION_ERROR(-20000, 'InitGroupKeyDefBuffer failed with ret_code='||L_TEMP_RET_CODE||' for a_gk_tp=st');   
      END IF;

      P_STGK_CURSOR := DBMS_SQL.OPEN_CURSOR;
      L_SQL_STRING := 'SELECT gk.st, gk.version, gk.gk, gk.gk_version, gk.value ' ||
                      'FROM dd'|| UNAPIGEN.P_DD ||'.uvstgk gk '|| L_WHERE_CLAUSE;
 
      DBMS_SQL.PARSE(P_STGK_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
     IF L_BIND_ST_SELECTION THEN
        FOR L_X IN 1..UNAPIST.P_SELECTION_VAL_TAB.COUNT() LOOP
           DBMS_SQL.BIND_VARIABLE(P_STGK_CURSOR, ':col_val'||L_X , UNAPIST.P_SELECTION_VAL_TAB(L_X)); 
        END LOOP;
     ELSIF L_BIND_FIXED_ST_FLAG THEN
        DBMS_SQL.BIND_VARIABLE(P_STGK_CURSOR, ':st_val', A_WHERE_CLAUSE); 
     END IF;
      DBMS_SQL.DEFINE_COLUMN(P_STGK_CURSOR, 1, L_ST, 20);
      DBMS_SQL.DEFINE_COLUMN(P_STGK_CURSOR, 2, L_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(P_STGK_CURSOR, 3, L_GK, 20);
      DBMS_SQL.DEFINE_COLUMN(P_STGK_CURSOR, 4, L_GK_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(P_STGK_CURSOR, 5, L_VALUE, 40);
      L_RESULT := DBMS_SQL.EXECUTE(P_STGK_CURSOR);
   END IF;
   
   L_RESULT := DBMS_SQL.FETCH_ROWS(P_STGK_CURSOR);
   L_FETCHED_ROWS := 0;
 
   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;
 
      DBMS_SQL.COLUMN_VALUE(P_STGK_CURSOR, 1, L_ST);
      DBMS_SQL.COLUMN_VALUE(P_STGK_CURSOR, 2, L_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_STGK_CURSOR, 3, L_GK);
      DBMS_SQL.COLUMN_VALUE(P_STGK_CURSOR, 4, L_GK_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_STGK_CURSOR, 5, L_VALUE);
 
      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
 
      A_ST(L_FETCHED_ROWS) := L_ST;
      A_VERSION(L_FETCHED_ROWS) := L_VERSION;
      A_GK(L_FETCHED_ROWS) := L_GK;
      A_GK_VERSION(L_FETCHED_ROWS) := L_GK_VERSION;
      A_VALUE(L_FETCHED_ROWS) := L_VALUE;
  
      
      BEGIN
         L_GKDEF_REC := UNAPIGK.P_GK_DEF_BUFFER(L_GK);
         A_DESCRIPTION(L_FETCHED_ROWS) := L_GKDEF_REC.DESCRIPTION;
         A_IS_PROTECTED(L_FETCHED_ROWS) := L_GKDEF_REC.IS_PROTECTED;
         A_VALUE_UNIQUE(L_FETCHED_ROWS) := L_GKDEF_REC.VALUE_UNIQUE;
         A_SINGLE_VALUED(L_FETCHED_ROWS) := L_GKDEF_REC.SINGLE_VALUED;
         A_NEW_VAL_ALLOWED(L_FETCHED_ROWS) := L_GKDEF_REC.NEW_VAL_ALLOWED;
         A_MANDATORY(L_FETCHED_ROWS) := L_GKDEF_REC.MANDATORY;
         A_VALUE_LIST_TP(L_FETCHED_ROWS) := L_GKDEF_REC.VALUE_LIST_TP;
         A_DSP_ROWS(L_FETCHED_ROWS) := L_GKDEF_REC.DSP_ROWS;
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
         
         
         
         A_DESCRIPTION(L_FETCHED_ROWS)     := L_GK;
         A_IS_PROTECTED(L_FETCHED_ROWS)    := '1';
         A_VALUE_UNIQUE(L_FETCHED_ROWS)    := '0';
         A_SINGLE_VALUED(L_FETCHED_ROWS)   := '1';
         A_NEW_VAL_ALLOWED(L_FETCHED_ROWS) := '1';
         A_MANDATORY(L_FETCHED_ROWS)       := '0';
         A_VALUE_LIST_TP(L_FETCHED_ROWS)   := 'F';
         A_DSP_ROWS(L_FETCHED_ROWS)        := 10;      
      END;
      
      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_STGK_CURSOR);
      END IF;
   END LOOP;
 
   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
      DBMS_SQL.CLOSE_CURSOR(P_STGK_CURSOR);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      DBMS_SQL.CLOSE_CURSOR(P_STGK_CURSOR);
   ELSE   
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;
 
   IF A_WHERE_CLAUSE <> 'SELECTION' AND
      DBMS_SQL.IS_OPEN(P_STGK_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(P_STGK_CURSOR);
   END IF;
 
   IF NOT DBMS_SQL.IS_OPEN(P_STGK_CURSOR) THEN
      L_TEMP_RET_CODE := UNAPIGK.CLOSEGROUPKEYDEFBUFFER('st');
      IF L_TEMP_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
         RAISE_APPLICATION_ERROR(-20000, 'CloseGroupKeyDefBuffer failed with ret_code='||L_TEMP_RET_CODE||' for a_gk_tp=st');   
      END IF;
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
  WHEN OTHERS THEN
     L_SQLERRM := SQLERRM;
     UNAPIGEN.U4ROLLBACK;
     INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
     VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
             'GetStGroupKey', L_SQLERRM);
     UNAPIGEN.P_TXN_ERROR_TEXT := SUBSTR(L_SQLERRM,1,255); 
     UNAPIGEN.U4COMMIT;
     IF DBMS_SQL.IS_OPEN (P_STGK_CURSOR) THEN
        DBMS_SQL.CLOSE_CURSOR (P_STGK_CURSOR);
     END IF;
      L_RET_CODE := UNAPIGK.CLOSEGROUPKEYDEFBUFFER('st');
      
     RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETSTGROUPKEY;

FUNCTION SAVESAMPLETYPE
(A_ST                 IN  VARCHAR2,                  
 A_VERSION            IN  VARCHAR2,                  
 A_VERSION_IS_CURRENT IN  CHAR,                      
 A_EFFECTIVE_FROM     IN  DATE,                      
 A_EFFECTIVE_TILL     IN  DATE,                      
 A_DESCRIPTION        IN  VARCHAR2,                  
 A_DESCRIPTION2       IN  VARCHAR2,                  
 A_IS_TEMPLATE        IN  CHAR,                      
 A_CONFIRM_USERID     IN  CHAR,                      
 A_SHELF_LIFE_VAL     IN  NUMBER,                    
 A_SHELF_LIFE_UNIT    IN  VARCHAR2,                  
 A_NR_PLANNED_SC      IN  NUMBER,                    
 A_FREQ_TP            IN  CHAR,                      
 A_FREQ_VAL           IN  NUMBER,                    
 A_FREQ_UNIT          IN  VARCHAR2,                  
 A_INVERT_FREQ        IN  CHAR,                      
 A_LAST_SCHED         IN  DATE,                      
 A_LAST_CNT           IN  NUMBER,                    
 A_LAST_VAL           IN  VARCHAR2,                  
 A_PRIORITY           IN  NUMBER,                    
 A_LABEL_FORMAT       IN  VARCHAR2,                  
 A_DESCR_DOC          IN  VARCHAR2,                  
 A_DESCR_DOC_VERSION  IN  VARCHAR2,                  
 A_ALLOW_ANY_PP       IN  CHAR,                      
 A_SC_UC              IN  VARCHAR2,                  
 A_SC_UC_VERSION      IN  VARCHAR2,                  
 A_SC_LC              IN  VARCHAR2,                  
 A_SC_LC_VERSION      IN  VARCHAR2,                  
 A_INHERIT_AU         IN  CHAR,                      
 A_INHERIT_GK         IN  CHAR,                      
 A_ST_CLASS           IN  VARCHAR2,                  
 A_LOG_HS             IN  CHAR,                      
 A_LC                 IN  VARCHAR2,                  
 A_LC_VERSION         IN  VARCHAR2,                  
 A_MODIFY_REASON      IN  VARCHAR2)                  
RETURN NUMBER IS

L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);
L_LOG_HS       CHAR(1);
L_ALLOW_MODIFY CHAR(1);
L_ACTIVE       CHAR(1);
L_INSERT       BOOLEAN;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_ST, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   IF NVL(A_IS_TEMPLATE, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_TEMPLATE;
      RAISE STPERROR;
   END IF;

   IF NVL(A_CONFIRM_USERID, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_CONFIRMUSERID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_FREQ_TP, ' ') NOT IN ('A','S','T','C','N') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_FREQTP;
      RAISE STPERROR;
   END IF;

   IF A_FREQ_TP IN ('C','T','S') THEN
      IF A_FREQ_UNIT IS NULL THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_FREQUNIT;
         RAISE STPERROR;         
      ELSIF A_FREQ_TP = 'T' AND
         A_FREQ_UNIT NOT IN ('MI','HH','DD','WW','MM','YY','MF','YF') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_FREQUNIT;
         RAISE STPERROR;         
      END IF;
   END IF;

   IF NVL(A_INVERT_FREQ, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INVERTFREQ;
      RAISE STPERROR;
   END IF;

   IF NVL(A_ALLOW_ANY_PP, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_ALLOWANYPP;
      RAISE STPERROR;
   END IF;

   IF NVL(A_INHERIT_AU, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INHERITAU;
      RAISE STPERROR;
   END IF;

   IF NVL(A_INHERIT_GK, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INHERITGK;
      RAISE STPERROR;
   END IF;

   IF NVL(A_LOG_HS, ' ') NOT IN ('1','0') THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_LOGHS;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('st', A_ST, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE = UNAPIGEN.DBERR_NOOBJECT THEN
      L_INSERT := TRUE;
   ELSIF L_RET_CODE = UNAPIGEN.DBERR_SUCCESS THEN
      L_INSERT := FALSE;
   ELSE
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   IF L_INSERT THEN                
      IF NVL(A_LC, ' ') <> ' ' THEN
         L_LC := A_LC;
      END IF;
      IF NVL(A_LC_VERSION, ' ') <> ' ' THEN
         L_LC_VERSION := A_LC_VERSION;
      END IF;
      INSERT INTO UTST(ST, VERSION, EFFECTIVE_FROM, EFFECTIVE_FROM_TZ, DESCRIPTION, DESCRIPTION2, IS_TEMPLATE, CONFIRM_USERID,
                       SHELF_LIFE_VAL, SHELF_LIFE_UNIT, NR_PLANNED_SC, FREQ_TP, FREQ_VAL, FREQ_UNIT, 
                       INVERT_FREQ, LAST_SCHED, LAST_SCHED_TZ, LAST_CNT, LAST_VAL, PRIORITY, LABEL_FORMAT, DESCR_DOC, 
                       DESCR_DOC_VERSION, ALLOW_ANY_PP, SC_UC, SC_UC_VERSION, SC_LC, SC_LC_VERSION, 
                       INHERIT_AU, INHERIT_GK, ST_CLASS, LOG_HS, ALLOW_MODIFY, ACTIVE, LC, LC_VERSION)
      VALUES(A_ST, A_VERSION, A_EFFECTIVE_FROM, A_EFFECTIVE_FROM, A_DESCRIPTION, A_DESCRIPTION2, A_IS_TEMPLATE, A_CONFIRM_USERID,
             A_SHELF_LIFE_VAL, A_SHELF_LIFE_UNIT, A_NR_PLANNED_SC, A_FREQ_TP, NVL(A_FREQ_VAL, 0), A_FREQ_UNIT, 
             A_INVERT_FREQ, A_LAST_SCHED, A_LAST_SCHED, NVL(A_LAST_CNT, 0), A_LAST_VAL, A_PRIORITY, A_LABEL_FORMAT,
             A_DESCR_DOC, A_DESCR_DOC_VERSION, A_ALLOW_ANY_PP, A_SC_UC, A_SC_UC_VERSION, A_SC_LC, A_SC_LC_VERSION,  
             A_INHERIT_AU, A_INHERIT_GK, A_ST_CLASS, A_LOG_HS, '#', '0', L_LC, L_LC_VERSION);
      L_EVENT_TP := 'ObjectCreated';
   ELSE                             
      UPDATE UTST
      SET EFFECTIVE_FROM   = DECODE(EFFECTIVE_TILL, NULL, A_EFFECTIVE_FROM, EFFECTIVE_FROM),
          EFFECTIVE_FROM_TZ = DECODE(EFFECTIVE_TILL, NULL,  DECODE(A_EFFECTIVE_FROM, EFFECTIVE_FROM_TZ, EFFECTIVE_FROM_TZ, A_EFFECTIVE_FROM), EFFECTIVE_FROM_TZ),
          DESCRIPTION      = A_DESCRIPTION,
          DESCRIPTION2     = A_DESCRIPTION2,
          IS_TEMPLATE      = A_IS_TEMPLATE,
          CONFIRM_USERID   = A_CONFIRM_USERID,
          SHELF_LIFE_VAL   = A_SHELF_LIFE_VAL,
          SHELF_LIFE_UNIT  = A_SHELF_LIFE_UNIT,
          NR_PLANNED_SC    = A_NR_PLANNED_SC,
          FREQ_TP          = A_FREQ_TP,
          FREQ_VAL         = A_FREQ_VAL,
          FREQ_UNIT        = A_FREQ_UNIT,
          INVERT_FREQ      = A_INVERT_FREQ,
          LAST_SCHED       = A_LAST_SCHED,
          LAST_SCHED_TZ    =  DECODE(A_LAST_SCHED, LAST_SCHED_TZ, LAST_SCHED_TZ, A_LAST_SCHED),
          LAST_CNT         = A_LAST_CNT,
          LAST_VAL         = A_LAST_VAL,
          PRIORITY         = A_PRIORITY,
          LABEL_FORMAT     = A_LABEL_FORMAT,
          DESCR_DOC        = A_DESCR_DOC,
          DESCR_DOC_VERSION= A_DESCR_DOC_VERSION,
          ALLOW_ANY_PP     = A_ALLOW_ANY_PP,
          SC_UC            = A_SC_UC,
          SC_UC_VERSION    = A_SC_UC_VERSION,
          SC_LC            = A_SC_LC,
          SC_LC_VERSION    = A_SC_LC_VERSION,
          INHERIT_AU       = A_INHERIT_AU,
          INHERIT_GK       = A_INHERIT_GK,
          ST_CLASS         = A_ST_CLASS,
          LOG_HS           = A_LOG_HS,
          ALLOW_MODIFY     = '#'
      WHERE ST = A_ST
        AND VERSION = A_VERSION;
      L_EVENT_TP := 'ObjectUpdated';
   END IF;

   L_EV_SEQ_NR := -1;
   L_RESULT :=
         UNAPIEV.INSERTEVENT('SaveSampleType', UNAPIGEN.P_EVMGR_NAME, 'st', A_ST, L_LC, L_LC_VERSION, 
                             L_SS, L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF NVL(L_LOG_HS, ' ') <> A_LOG_HS THEN
      IF A_LOG_HS = '1' THEN
         INSERT INTO UTSTHS (ST, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_ST, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 'History switched ON', 
                 'Audit trail is turned on.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      ELSE
         INSERT INTO UTSTHS (ST, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_ST, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 'History switched OFF', 
                 'Audit trail is turned off.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   END IF;

   IF NVL(L_LOG_HS, ' ') = '1' THEN
      IF L_EVENT_TP = 'ObjectCreated' THEN
         INSERT INTO UTSTHS (ST, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_ST, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'sample type "'||A_ST||'" is created.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                 L_EV_SEQ_NR);
      ELSE
         INSERT INTO UTSTHS (ST, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_ST, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'sample type "'||A_ST||'" is updated.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                 L_EV_SEQ_NR);
      END IF;
   ELSE
      
      
      IF L_EVENT_TP = 'ObjectCreated' THEN
         INSERT INTO UTSTHS (ST, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_ST, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'sample type "'||A_ST||'" is created.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, 
                 L_EV_SEQ_NR);
      END IF;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
        UNAPIGEN.LOGERROR('SaveSampleType', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveSampleType'));
END SAVESAMPLETYPE;

FUNCTION DELETESAMPLETYPE
(A_ST            IN  VARCHAR2,          
 A_VERSION       IN  VARCHAR2,          
 A_MODIFY_REASON IN  VARCHAR2)          
RETURN NUMBER IS

L_ALLOW_MODIFY CHAR(1);
L_ACTIVE       CHAR(1);
L_LC           CHAR(2);
L_LC_VERSION   CHAR(20);
L_SS           VARCHAR2(2);
L_LOG_HS       CHAR(1);
L_ST_CURSOR    INTEGER;

CURSOR L_STD_CURSOR IS
SELECT DISTINCT GK
  FROM UTSTGK
 WHERE ST = A_ST
   AND VERSION = A_VERSION;

CURSOR L_RTST_CURSOR(C_ST VARCHAR2, C_VERSION VARCHAR2) IS
SELECT UTRTST.RT, UTRTST.VERSION, UTRT.LOG_HS, UTRT.LC, UTRT.LC_VERSION, UTRT.SS
FROM   UTRT, UTRTST
WHERE  UTRTST.ST         = C_ST           AND
       UNAPIGEN.USEVERSION('st',UTRTST.ST,UTRTST.ST_VERSION) = C_VERSION          AND
       UTRT.RT           = UTRTST.RT      AND
       UTRT.VERSION      = UTRTST.VERSION;

CURSOR L_WTST_CURSOR(C_ST VARCHAR2, C_VERSION VARCHAR2) IS
SELECT UTWTROWS.WT, UTWTROWS.VERSION, UTWT.LOG_HS, UTWT.LC, UTWT.LC_VERSION, UTWT.SS
FROM   UTWT, UTWTROWS
WHERE  UTWTROWS.ST         = C_ST             AND
       UNAPIGEN.USEVERSION('st',UTWTROWS.ST,UTWTROWS.ST_VERSION) = C_VERSION      AND
       UTWT.WT             = UTWTROWS.WT      AND
       UTWT.VERSION        = UTWTROWS.VERSION;

CURSOR L_PRCYST_CURSOR(C_ST VARCHAR2, C_VERSION VARCHAR2) IS
SELECT UTPRCYST.PR, UTPRCYST.VERSION, UTPR.LOG_HS, UTPR.LC, UTPR.LC_VERSION, UTPR.SS, UTPRCYST.CY
FROM   UTPR, UTPRCYST
WHERE  UTPRCYST.ST       = C_ST             AND
       UNAPIGEN.USEVERSION('st',UTPRCYST.ST,UTPRCYST.ST_VERSION) = C_VERSION      AND
       UTPR.PR           = UTPRCYST.PR      AND
       UTPR.VERSION      = UTPRCYST.VERSION;

CURSOR L_PTCELLST_CURSOR(C_ST VARCHAR2, C_VERSION VARCHAR2) IS
SELECT UTPTCELLST.PT, UTPTCELLST.VERSION, UTPT.LOG_HS, UTPT.LC, UTPT.LC_VERSION, UTPT.SS
FROM   UTPT, UTPTCELLST
WHERE  UTPTCELLST.ST     = C_ST               AND
       UNAPIGEN.USEVERSION('st',UTPTCELLST.ST,UTPTCELLST.ST_VERSION) = C_VERSION  AND
       UTPT.PT           = UTPTCELLST.PT      AND
       UTPT.VERSION      = UTPTCELLST.VERSION;

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_ST, ' ')= ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VERSION, ' ')= ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('st', A_ST, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   
   IF UNAPIGEN.ISSYSTEM21CFR11COMPLIANT = UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOTALLOWEDIN21CFR11;
      RAISE STPERROR;
   END IF;

   L_EVENT_TP := 'UsedObjectDeleted';
   L_EV_SEQ_NR := -1;
   FOR RT_REC IN L_RTST_CURSOR(A_ST, A_VERSION)  LOOP
      DELETE FROM UTRTSTAU
      WHERE ST         = A_ST
        AND UNAPIGEN.USEVERSION('st',ST,ST_VERSION) = A_VERSION
        AND RT         = RT_REC.RT
        AND VERSION    = RT_REC.VERSION;

      DELETE FROM UTRTST
      WHERE ST         = A_ST
        AND UNAPIGEN.USEVERSION('st',ST,ST_VERSION) = A_VERSION
        AND RT         = RT_REC.RT
        AND VERSION    = RT_REC.VERSION;

      L_RESULT := UNAPIEV.INSERTEVENT('DeleteSampleType', UNAPIGEN.P_EVMGR_NAME, 'rt', 
                                      RT_REC.RT, RT_REC.LC, RT_REC.LC_VERSION, RT_REC.SS, 
                                      L_EVENT_TP, 'version='||RT_REC.VERSION, L_EV_SEQ_NR);
      IF L_RESULT <> 0 THEN
         UNAPIGEN.P_TXN_ERROR := L_RESULT;
         RAISE STPERROR;
      END IF;

      IF RT_REC.LOG_HS = '1' THEN
         INSERT INTO UTRTHS(RT, VERSION, WHO, WHO_DESCRIPTION, 
                            WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES  (RT_REC.RT, RT_REC.VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 
                  L_EVENT_TP||' '||A_ST||' '||A_VERSION, 
                  'sample type "'||A_ST||'" is deleted and removed from request type <<'||RT_REC.RT||'>>',
                  CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   END LOOP;
     
   DELETE FROM UTSTAU
   WHERE ST = A_ST
     AND VERSION = A_VERSION;

   DELETE FROM UTSTHS
   WHERE ST = A_ST
     AND VERSION = A_VERSION;

   L_ST_CURSOR := DBMS_SQL.OPEN_CURSOR;
   FOR L_STG IN L_STD_CURSOR LOOP
      BEGIN
         L_SQL_STRING := ' DELETE FROM utstgk' || L_STG.GK ||
                         ' WHERE st = ''' || REPLACE(A_ST, '''', '''''') || '''' || 
                         ' AND version = ''' || REPLACE(A_VERSION, '''', '''''') || ''''; 
         DBMS_SQL.PARSE(L_ST_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         L_RESULT := DBMS_SQL.EXECUTE(L_ST_CURSOR);
      EXCEPTION
      WHEN OTHERS THEN
         IF SQLCODE = -942 THEN
            NULL; 
         ELSE
            RAISE;
         END IF;
      END;
   END LOOP;
   
   DELETE FROM UTSTGK
   WHERE ST = A_ST
     AND VERSION = A_VERSION;

   DELETE FROM UTSTPP
   WHERE ST = A_ST
     AND VERSION = A_VERSION;

   DELETE FROM UTSTPPAU
   WHERE ST = A_ST
     AND VERSION = A_VERSION;

   DELETE FROM UTSTIP
   WHERE ST = A_ST
     AND VERSION = A_VERSION;

   DELETE FROM UTSTIPAU
   WHERE ST = A_ST
     AND VERSION = A_VERSION;

   DELETE FROM UTSTPRFREQ
   WHERE ST = A_ST
     AND VERSION = A_VERSION;

   DELETE FROM UTSTMTFREQ
   WHERE ST = A_ST
     AND VERSION = A_VERSION;

   L_EVENT_TP := 'UsedObjectDeleted';
   L_EV_SEQ_NR := -1;
   FOR WT_REC IN L_WTST_CURSOR(A_ST, A_VERSION) LOOP
      UPDATE UTWTROWS
      SET ST = '',
          ST_VERSION = '',
          SC_CREATE = DECODE(SC, NULL, '0', SC_CREATE)
      WHERE ST = A_ST
        AND UNAPIGEN.USEVERSION('st',ST,ST_VERSION) = A_VERSION
        AND WT = WT_REC.WT
        AND VERSION = WT_REC.VERSION;
        
      DELETE FROM UTWTROWS
      WHERE ST IS NULL
        AND ST_VERSION IS NULL
        AND SC IS NULL
        AND WT = WT_REC.WT
        AND VERSION = WT_REC.VERSION;

      L_RESULT := UNAPIEV.INSERTEVENT('DeleteSampleType', UNAPIGEN.P_EVMGR_NAME, 'wt', 
                                      WT_REC.WT, WT_REC.LC, WT_REC.LC_VERSION, WT_REC.SS, 
                                      L_EVENT_TP, 'version='||WT_REC.VERSION, L_EV_SEQ_NR);
      IF L_RESULT <> 0 THEN
         UNAPIGEN.P_TXN_ERROR := L_RESULT;
         RAISE STPERROR;
      END IF;

      IF WT_REC.LOG_HS = '1' THEN
         INSERT INTO UTWTHS(WT, VERSION, WHO, WHO_DESCRIPTION, 
                            WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES  (WT_REC.WT, WT_REC.VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 
                  L_EVENT_TP||' '||A_ST||' '||A_VERSION,
                  'sample type "'||A_ST||'" is deleted and removed from worksheet type <<'||WT_REC.WT||'>>', 
                  CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   END LOOP;

   L_EVENT_TP := 'UsedObjectDeleted';
   L_EV_SEQ_NR := -1;
   FOR PR_REC IN L_PRCYST_CURSOR(A_ST, A_VERSION) LOOP
      DELETE FROM UTPRCYST
      WHERE ST         = A_ST
        AND UNAPIGEN.USEVERSION('st',ST,ST_VERSION) = A_VERSION
        AND PR         = PR_REC.PR
        AND VERSION    = PR_REC.VERSION;

      L_RESULT := UNAPIEV.INSERTEVENT('DeleteSampleType', UNAPIGEN.P_EVMGR_NAME, 'pr', 
                                      PR_REC.PR, PR_REC.LC, PR_REC.LC_VERSION, PR_REC.SS, 
                                      L_EVENT_TP, 'version='||PR_REC.VERSION, L_EV_SEQ_NR);
      IF L_RESULT <> 0 THEN
         UNAPIGEN.P_TXN_ERROR := L_RESULT;
         RAISE STPERROR;
      END IF;

      IF PR_REC.LOG_HS = '1' THEN
         INSERT INTO UTPRHS(PR, VERSION, WHO, WHO_DESCRIPTION, 
                            WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES  (PR_REC.PR, PR_REC.VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 
                  L_EVENT_TP||' '||A_ST||' '||A_VERSION, 
                  'sample type "'||A_ST||'" is deleted and removed from parameter <<'||PR_REC.PR||'>> - chart type <<'||PR_REC.CY||'>>',
                  CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   END LOOP;
     
   L_EVENT_TP := 'UsedObjectDeleted';
   L_EV_SEQ_NR := -1;
   FOR PT_REC IN L_PTCELLST_CURSOR(A_ST, A_VERSION) LOOP
      DELETE FROM UTPTCELLSTAU
      WHERE ST         = A_ST
        AND UNAPIGEN.USEVERSION('st',ST,ST_VERSION) = A_VERSION
        AND PT         = PT_REC.PT
        AND VERSION    = PT_REC.VERSION;

      DELETE FROM UTPTCELLST
      WHERE ST         = A_ST
        AND UNAPIGEN.USEVERSION('st',ST,ST_VERSION) = A_VERSION
        AND PT         = PT_REC.PT
        AND VERSION    = PT_REC.VERSION;

      L_RESULT := UNAPIEV.INSERTEVENT('DeleteSampleType', UNAPIGEN.P_EVMGR_NAME, 'pt', 
                                      PT_REC.PT, PT_REC.LC, PT_REC.LC_VERSION, PT_REC.SS, 
                                      L_EVENT_TP, 'version='||PT_REC.VERSION, L_EV_SEQ_NR);
      IF L_RESULT <> 0 THEN
         UNAPIGEN.P_TXN_ERROR := L_RESULT;
         RAISE STPERROR;
      END IF;

      IF PT_REC.LOG_HS = '1' THEN
         INSERT INTO UTPTHS(PT, VERSION, WHO, WHO_DESCRIPTION, 
                            WHAT, WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES  (PT_REC.PT, PT_REC.VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 
                  L_EVENT_TP||' '||A_ST||' '||A_VERSION, 
                  'sample type "'||A_ST||'" is deleted and removed from the cells of protocol <<'||PT_REC.PT||'>>',
                  CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   END LOOP;
   
   DELETE FROM UTEVTIMED
   WHERE (OBJECT_TP='st' AND OBJECT_ID=A_ST AND INSTR(EV_DETAILS,'version='||A_VERSION)<>0);

   DELETE FROM UTEVRULESDELAYED
   WHERE (OBJECT_TP='st' AND OBJECT_ID=A_ST AND INSTR(EV_DETAILS,'version='||A_VERSION)<>0);

   
   DELETE FROM UTST
   WHERE ST = A_ST
     AND VERSION = A_VERSION;
   
   L_EVENT_TP := 'ObjectDeleted';
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT('DeleteSampleType',UNAPIGEN.P_EVMGR_NAME, 'st', A_ST, L_LC, 
                                   L_LC_VERSION, L_SS, L_EVENT_TP, 'version='||A_VERSION, L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   DBMS_SQL.CLOSE_CURSOR(L_ST_CURSOR);
   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE <> 1 THEN
        UNAPIGEN.LOGERROR('DeleteSampleType', SQLERRM);
      END IF;
      IF DBMS_SQL.IS_OPEN (L_ST_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (L_ST_CURSOR);
      END IF;
      RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'DeleteSampleType'));
END DELETESAMPLETYPE;

FUNCTION SAVESTPARAMETERPROFILE
(A_ST                    IN    VARCHAR2,                   
 A_VERSION               IN    VARCHAR2,                   
 A_PP                    IN    UNAPIGEN.VC20_TABLE_TYPE,   
 A_PP_VERSION            IN    UNAPIGEN.VC20_TABLE_TYPE,   
 A_PP_KEY1               IN    UNAPIGEN.VC20_TABLE_TYPE,   
 A_PP_KEY2               IN    UNAPIGEN.VC20_TABLE_TYPE,   
 A_PP_KEY3               IN    UNAPIGEN.VC20_TABLE_TYPE,   
 A_PP_KEY4               IN    UNAPIGEN.VC20_TABLE_TYPE,   
 A_PP_KEY5               IN    UNAPIGEN.VC20_TABLE_TYPE,   
 A_FREQ_TP               IN    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_FREQ_VAL              IN    UNAPIGEN.NUM_TABLE_TYPE,    
 A_FREQ_UNIT             IN    UNAPIGEN.VC20_TABLE_TYPE,   
 A_INVERT_FREQ           IN    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_LAST_SCHED            IN    UNAPIGEN.DATE_TABLE_TYPE,   
 A_LAST_CNT              IN    UNAPIGEN.NUM_TABLE_TYPE,    
 A_LAST_VAL              IN    UNAPIGEN.VC40_TABLE_TYPE,   
 A_INHERIT_AU            IN    UNAPIGEN.CHAR1_TABLE_TYPE,  
 A_NR_OF_ROWS            IN    NUMBER,                     
 A_NEXT_ROWS             IN    NUMBER,                     
 A_MODIFY_REASON         IN    VARCHAR2)                   
RETURN NUMBER IS

L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);
L_LOG_HS       CHAR(1);
L_ALLOW_MODIFY CHAR(1);
L_ACTIVE       CHAR(1);
L_SEQ_NO       NUMBER;
L_SEQ          NUMBER(5);

BEGIN

   L_SQLERRM := NULL;
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_ST, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   IF NVL(A_NEXT_ROWS, 0) = 0 THEN
      IF NVL(P_SAVESTPP_CALLS, 0) <> 0 THEN
         L_SQLERRM := 'SaveStParameterProfile termination call never called for previous method sheet ! (a_next_rows=-1) a_next_rows='||
                      TO_CHAR(A_NEXT_ROWS);
         RAISE STPERROR;
      END IF;
      P_SAVESTPP_CALLS := 1;
   ELSIF NVL(A_NEXT_ROWS, 0) = -1 THEN
      P_SAVESTPP_CALLS := NVL(P_SAVESTPP_CALLS, 0) + 1;      
   ELSIF NVL(A_NEXT_ROWS, 0) = 1 THEN
      IF NVL(P_SAVESTPP_CALLS, 0) = 0 THEN   
         L_SQLERRM := 'SaveStParameterProfile startup call never called ! (a_next_rows=0)';
         RAISE STPERROR;   
      END IF;
      IF NVL(UNAPIGEN.P_TXN_LEVEL, 0) <= 1 THEN   
         L_SQLERRM := 'SaveStParameterProfile called with a_next_rows=1 in a non MST transaction !';
         RAISE STPERROR;   
      END IF;
      P_SAVESTPP_CALLS := NVL(P_SAVESTPP_CALLS, 0) + 1;      
   ELSE
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NEXTROWS;
      RAISE STPERROR;
   END IF;         
   IF P_SAVESTPP_CALLS = 1 THEN
      P_SAVESTPP_TR_SEQ := UNAPIGEN.P_TR_SEQ;
   ELSE
      IF UNAPIGEN.P_TR_SEQ <> P_SAVESTPP_TR_SEQ THEN
         L_SQLERRM := 'Successive calls of SaveStParameterProfile not in the same transaction !';
         RAISE STPERROR;   
      END IF;
   END IF;
   
   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('st', A_ST, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTST
   SET ALLOW_MODIFY = '#'
   WHERE ST = A_ST
     AND VERSION = A_VERSION;
     
   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR ;
   END IF;

   
   IF NVL(P_SAVESTPP_CALLS, 0) = 1 THEN
      DELETE UTSTPP
      WHERE ST = A_ST
        AND VERSION = A_VERSION;
   END IF;

   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      IF NVL(A_PP(L_SEQ_NO), ' ') = ' ' THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
      END IF;

      IF A_PP_KEY1(L_SEQ_NO) IS NULL OR
         A_PP_KEY2(L_SEQ_NO) IS NULL OR
         A_PP_KEY3(L_SEQ_NO) IS NULL OR
         A_PP_KEY4(L_SEQ_NO) IS NULL OR
         A_PP_KEY5(L_SEQ_NO) IS NULL THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOPPKEYID;
         RAISE STPERROR;
      END IF;

      IF NVL(A_FREQ_TP(L_SEQ_NO), ' ') NOT IN ('A','S','T','C','N') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_FREQTP;
         RAISE STPERROR;
      END IF;

      IF A_FREQ_TP(L_SEQ_NO) IN ('C','T','S') THEN
         IF A_FREQ_UNIT(L_SEQ_NO) IS NULL THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_FREQUNIT;
            RAISE STPERROR;         
         ELSIF A_FREQ_TP(L_SEQ_NO) = 'T' AND
            A_FREQ_UNIT(L_SEQ_NO) NOT IN ('MI','HH','DD','WW','MM','YY','MF','YF') THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_FREQUNIT;
            RAISE STPERROR;         
         END IF;
      END IF;

      IF NVL(A_INVERT_FREQ(L_SEQ_NO), ' ') NOT IN ('1','0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INVERTFREQ;
         RAISE STPERROR;
      END IF;

      IF NVL(A_INHERIT_AU(L_SEQ_NO), ' ') NOT IN ('2','1','0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INHERITAU;
         RAISE STPERROR;
      END IF;

      SELECT NVL(MAX(SEQ),0)+1
      INTO L_SEQ
      FROM UTSTPP
      WHERE ST = A_ST
      AND VERSION = A_VERSION;

      INSERT INTO UTSTPP (ST, VERSION, PP, PP_VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5,
                          SEQ, FREQ_TP, FREQ_VAL, FREQ_UNIT, INVERT_FREQ,
                          LAST_SCHED, LAST_SCHED_TZ, LAST_CNT, LAST_VAL, INHERIT_AU)
      VALUES (A_ST, A_VERSION, A_PP(L_SEQ_NO), A_PP_VERSION(L_SEQ_NO), 
              A_PP_KEY1(L_SEQ_NO), A_PP_KEY2(L_SEQ_NO), A_PP_KEY3(L_SEQ_NO), A_PP_KEY4(L_SEQ_NO), A_PP_KEY5(L_SEQ_NO), 
              L_SEQ, A_FREQ_TP(L_SEQ_NO), A_FREQ_VAL(L_SEQ_NO), A_FREQ_UNIT(L_SEQ_NO), A_INVERT_FREQ(L_SEQ_NO), 
              TO_TIMESTAMP_TZ(A_LAST_SCHED(L_SEQ_NO)), TO_TIMESTAMP_TZ(A_LAST_SCHED(L_SEQ_NO)), A_LAST_CNT(L_SEQ_NO), A_LAST_VAL(L_SEQ_NO), 
              A_INHERIT_AU(L_SEQ_NO));
   END LOOP;

   
   
   DELETE FROM UTSTPPAU
   WHERE ST = A_ST
     AND VERSION = A_VERSION
     AND (PP, NVL(PP_VERSION, '~Current~'), PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5)
         NOT IN (SELECT PP, NVL(PP_VERSION, '~Current~') , PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5
                 FROM UTSTPP 
                 WHERE ST = A_ST 
                 AND VERSION = A_VERSION);
   
   
   IF NVL(A_NEXT_ROWS, 0) = -1 THEN 
      L_EV_SEQ_NR := -1;
      L_EVENT_TP := 'UsedObjectsUpdated';
      L_RESULT := UNAPIEV.INSERTEVENT('SaveStParameterProfile', UNAPIGEN.P_EVMGR_NAME,
                                      'st', A_ST, L_LC, L_LC_VERSION, L_SS, L_EVENT_TP, 'version='||A_VERSION,
                                      L_EV_SEQ_NR);
      IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS  THEN
         UNAPIGEN.P_TXN_ERROR := L_RESULT;
         RAISE STPERROR;
      END IF;

      IF L_LOG_HS = '1' THEN
         INSERT INTO UTSTHS (ST, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_ST, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'sample type "'||A_ST||'" parameter profiles are updated.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, 
                 UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS, 0) = -1 THEN
      
      P_SAVESTPP_CALLS := 0;
   END IF;
   
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveStParameterProfile', SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('SaveStParameterProfile',L_SQLERRM);   
   END IF;
   
   P_SAVESTPP_CALLS := 0;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveStParameterProfile'));
END SAVESTPARAMETERPROFILE;

FUNCTION SAVESTINFOPROFILE
(A_ST               IN    VARCHAR2,                    
 A_VERSION          IN    VARCHAR2,                    
 A_IP               IN    UNAPIGEN.VC20_TABLE_TYPE,    
 A_IP_VERSION       IN    UNAPIGEN.VC20_TABLE_TYPE,    
 A_IS_PROTECTED     IN    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_HIDDEN           IN    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_FREQ_TP          IN    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_FREQ_VAL         IN    UNAPIGEN.NUM_TABLE_TYPE,     
 A_FREQ_UNIT        IN    UNAPIGEN.VC20_TABLE_TYPE,    
 A_INVERT_FREQ      IN    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_LAST_SCHED       IN    UNAPIGEN.DATE_TABLE_TYPE,    
 A_LAST_CNT         IN    UNAPIGEN.NUM_TABLE_TYPE,     
 A_LAST_VAL         IN    UNAPIGEN.VC40_TABLE_TYPE,    
 A_INHERIT_AU       IN    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_NR_OF_ROWS       IN    NUMBER,                      
 A_NEXT_ROWS        IN    NUMBER,                      
 A_MODIFY_REASON    IN    VARCHAR2)                    
RETURN NUMBER IS

L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);
L_LOG_HS       CHAR(1);
L_ALLOW_MODIFY CHAR(1);
L_ACTIVE       CHAR(1);
L_SEQ_NO       NUMBER;
L_SEQ          NUMBER(5);

BEGIN

   L_SQLERRM := NULL;
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_ST, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   IF NVL(A_NEXT_ROWS, 0) = 0 THEN
      IF NVL(P_SAVESTIP_CALLS, 0) <> 0 THEN
         L_SQLERRM := 'SaveStInfoProfile termination call never called for previous method sheet ! (a_next_rows=-1) a_next_rows='||
                      TO_CHAR(A_NEXT_ROWS);
         RAISE STPERROR;
      END IF;
      P_SAVESTIP_CALLS := 1;
   ELSIF NVL(A_NEXT_ROWS, 0) = -1 THEN
      P_SAVESTIP_CALLS := NVL(P_SAVESTIP_CALLS, 0) + 1;      
   ELSIF NVL(A_NEXT_ROWS, 0) = 1 THEN
      IF NVL(P_SAVESTIP_CALLS, 0) = 0 THEN   
         L_SQLERRM := 'SaveStInfoProfile startup call never called ! (a_next_rows=0)';
         RAISE STPERROR;   
      END IF;
      IF NVL(UNAPIGEN.P_TXN_LEVEL, 0) <= 1 THEN   
         L_SQLERRM := 'SaveStInfoProfile called with a_next_rows=1 in a non MST transaction !';
         RAISE STPERROR;   
      END IF;
      P_SAVESTIP_CALLS := NVL(P_SAVESTIP_CALLS, 0) + 1;      
   ELSE
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NEXTROWS;
      RAISE STPERROR;
   END IF;         
   IF P_SAVESTIP_CALLS = 1 THEN
      P_SAVESTIP_TR_SEQ := UNAPIGEN.P_TR_SEQ;
   ELSE
      IF UNAPIGEN.P_TR_SEQ <> P_SAVESTIP_TR_SEQ THEN
         L_SQLERRM := 'Successive calls of SaveStInfoProfile not in the same transaction !';
         RAISE STPERROR;   
      END IF;
   END IF;
   
   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('st', A_ST, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTST
   SET ALLOW_MODIFY = '#'
   WHERE ST = A_ST
     AND VERSION = A_VERSION;

   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR ;
   END IF;

   
   IF NVL(P_SAVESTIP_CALLS, 0) = 1 THEN
      DELETE UTSTIP
      WHERE ST = A_ST
        AND VERSION = A_VERSION;
   END IF;

   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      IF NVL(A_IP(L_SEQ_NO), ' ') = ' ' THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
      END IF;

      IF NVL(A_FREQ_TP(L_SEQ_NO), ' ') NOT IN ('A','S','T','C','N') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_FREQTP;
         RAISE STPERROR;
      END IF;

      IF A_FREQ_TP(L_SEQ_NO) IN ('C','T','S') THEN
         IF A_FREQ_UNIT(L_SEQ_NO) IS NULL THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_FREQUNIT;
            RAISE STPERROR;         
         ELSIF A_FREQ_TP(L_SEQ_NO) = 'T' AND
            A_FREQ_UNIT(L_SEQ_NO) NOT IN ('MI','HH','DD','WW','MM','YY','MF','YF') THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_FREQUNIT;
            RAISE STPERROR;         
         END IF;
      END IF;

      IF NVL(A_INVERT_FREQ(L_SEQ_NO), ' ') NOT IN ('1','0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INVERTFREQ;
         RAISE STPERROR;
      END IF;

      IF NVL(A_IS_PROTECTED(L_SEQ_NO), '0') NOT IN ('2','1','0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_PROTECTED;
         RAISE STPERROR;
      END IF;

      IF NVL(A_HIDDEN(L_SEQ_NO), '0') NOT IN ('2','1','0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_HIDDEN;
         RAISE STPERROR;
      END IF;

      IF NVL(A_INHERIT_AU(L_SEQ_NO), ' ') NOT IN ('2','1','0') THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_INHERITAU;
         RAISE STPERROR;
      END IF;

      SELECT NVL(MAX(SEQ),0)+1
      INTO L_SEQ
      FROM UTSTIP
      WHERE ST = A_ST
      AND VERSION = A_VERSION;

      INSERT INTO UTSTIP (ST, VERSION, IP, IP_VERSION, SEQ, IS_PROTECTED, HIDDEN, FREQ_TP, FREQ_VAL,
                          FREQ_UNIT, INVERT_FREQ, LAST_SCHED, LAST_SCHED_TZ, LAST_CNT, LAST_VAL, INHERIT_AU)
      VALUES (A_ST, A_VERSION, A_IP(L_SEQ_NO), A_IP_VERSION(L_SEQ_NO), L_SEQ, 
              A_IS_PROTECTED(L_SEQ_NO), A_HIDDEN(L_SEQ_NO),A_FREQ_TP(L_SEQ_NO), 
              A_FREQ_VAL(L_SEQ_NO), A_FREQ_UNIT(L_SEQ_NO), A_INVERT_FREQ(L_SEQ_NO),
              TO_TIMESTAMP_TZ(A_LAST_SCHED(L_SEQ_NO)), TO_TIMESTAMP_TZ(A_LAST_SCHED(L_SEQ_NO)), A_LAST_CNT(L_SEQ_NO),
              A_LAST_VAL(L_SEQ_NO), A_INHERIT_AU(L_SEQ_NO));
   END LOOP;

   
   
   DELETE FROM UTSTIPAU
   WHERE ST = A_ST
     AND VERSION = A_VERSION
     AND (IP, NVL(IP_VERSION, '~Current~')) NOT IN (SELECT IP, NVL(IP_VERSION, '~Current~') 
                                                      FROM UTSTIP 
                                                     WHERE ST = A_ST 
                                                       AND VERSION = A_VERSION);

   
   IF NVL(A_NEXT_ROWS, 0) = -1 THEN 
      L_EV_SEQ_NR := -1;
      L_EVENT_TP := 'UsedObjectsUpdated';
      L_RESULT := UNAPIEV.INSERTEVENT('SaveStInfoProfile', UNAPIGEN.P_EVMGR_NAME,
                                      'st', A_ST, L_LC, L_LC_VERSION, L_SS, L_EVENT_TP, 'version='||A_VERSION,
                                      L_EV_SEQ_NR);
      IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS  THEN
         UNAPIGEN.P_TXN_ERROR := L_RESULT;
         RAISE STPERROR;
      END IF;

      IF L_LOG_HS = '1' THEN
         INSERT INTO UTSTHS (ST, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_ST, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
                 'sample type "'||A_ST||'" info profiles are updated.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, 
                 UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS, 0) = -1 THEN
      
      P_SAVESTIP_CALLS := 0;
   END IF;
   
   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);
EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveStInfoProfile', SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('SaveStInfoProfile',L_SQLERRM);   
   END IF;
   
   P_SAVESTIP_CALLS := 0;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveStInfoProfile'));
END SAVESTINFOPROFILE;

FUNCTION SAVESTGROUPKEY
(A_ST                 IN       VARCHAR2,                   
 A_VERSION            IN       VARCHAR2,                   
 A_GK                 IN       UNAPIGEN.VC20_TABLE_TYPE,   
 A_GK_VERSION         IN OUT   UNAPIGEN.VC20_TABLE_TYPE,   
 A_VALUE              IN       UNAPIGEN.VC40_TABLE_TYPE,   
 A_NR_OF_ROWS         IN       NUMBER,                     
 A_MODIFY_REASON      IN       VARCHAR2)                   
RETURN NUMBER IS

L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);
L_LOG_HS       CHAR(1);
L_ALLOW_MODIFY CHAR(1);
L_ACTIVE       CHAR(1);
L_ST_CURSOR    NUMBER;
L_LAST_SEQ     INTEGER;
L_GK_HANDLE    BOOLEAN_TABLE_TYPE;
L_GK_FOUND     BOOLEAN;
L_SKIP              BOOLEAN;

TABLE_DOES_NOT_EXIST EXCEPTION;
PRAGMA EXCEPTION_INIT (TABLE_DOES_NOT_EXIST, -942);


CURSOR L_GK_CURSOR IS
SELECT GK, GK_VERSION, VALUE, GKSEQ
FROM UTSTGK
WHERE ST = A_ST
  AND VERSION = A_VERSION
ORDER BY GKSEQ;

BEGIN
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_ST, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      IF NVL(A_GK(L_SEQ_NO), ' ') = ' ' THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
      END IF;
      L_GK_HANDLE(L_SEQ_NO) := TRUE;
   END LOOP;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('st', A_ST, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTST
   SET ALLOW_MODIFY = '#'
   WHERE ST = A_ST
     AND VERSION = A_VERSION;

   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR ;
   END IF;

   L_LAST_SEQ := 499;
   L_ST_CURSOR := DBMS_SQL.OPEN_CURSOR;
   FOR L_STGK IN L_GK_CURSOR LOOP
      L_GK_FOUND := FALSE;
      FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
         
         IF L_STGK.GK = A_GK(L_SEQ_NO) AND
            ( (L_STGK.VALUE = A_VALUE(L_SEQ_NO)) OR
              (L_STGK.VALUE IS NULL AND A_VALUE(L_SEQ_NO) IS NULL)) THEN
            L_GK_HANDLE(L_SEQ_NO) := FALSE;
            L_GK_FOUND := TRUE;
            EXIT;
         END IF;
      END LOOP;

      IF NOT L_GK_FOUND THEN
         
         DELETE FROM UTSTGK
         WHERE ST = A_ST
           AND VERSION = A_VERSION
           AND GK = L_STGK.GK
           AND VALUE = L_STGK.VALUE;

         
         IF L_STGK.VALUE IS NULL THEN
            DELETE FROM UTSTGK
            WHERE ST = A_ST
              AND VERSION = A_VERSION
              AND GK = L_STGK.GK
              AND VALUE IS NULL;
         END IF;            

         L_SQL_STRING := 'DELETE FROM utstgk' || L_STGK.GK ||
                         ' WHERE st = :st AND version = :version AND ' || 
                         L_STGK.GK || ' = :value '; 
         BEGIN
            DBMS_SQL.PARSE(L_ST_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
            DBMS_SQL.BIND_VARIABLE(L_ST_CURSOR, ':st' , A_ST); 
            DBMS_SQL.BIND_VARIABLE(L_ST_CURSOR, ':version' , A_VERSION); 
            DBMS_SQL.BIND_VARIABLE(L_ST_CURSOR, ':value' , L_STGK.VALUE); 
            L_RESULT := DBMS_SQL.EXECUTE(L_ST_CURSOR);
         EXCEPTION
         WHEN TABLE_DOES_NOT_EXIST THEN
            
            
            NULL;
         END;
      ELSE
         L_LAST_SEQ := L_STGK.GKSEQ;
      END IF;
   END LOOP;

   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      IF L_GK_HANDLE(L_SEQ_NO) THEN
         L_SKIP := FALSE;
         IF NVL(A_VALUE(L_SEQ_NO), ' ') <> ' ' THEN
            L_SQL_STRING := 'INSERT INTO utstgk' || A_GK(L_SEQ_NO) ||
                            ' ('||A_GK(L_SEQ_NO)||', st, version)'||
                            ' VALUES (:value, :st, :version) ';  
            BEGIN
               DBMS_SQL.PARSE(L_ST_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
               DBMS_SQL.BIND_VARIABLE(L_ST_CURSOR, ':value' , A_VALUE(L_SEQ_NO)); 
               DBMS_SQL.BIND_VARIABLE(L_ST_CURSOR, ':st' , A_ST); 
               DBMS_SQL.BIND_VARIABLE(L_ST_CURSOR, ':version' , A_VERSION); 
               L_RESULT := DBMS_SQL.EXECUTE(L_ST_CURSOR);
            EXCEPTION
            WHEN TABLE_DOES_NOT_EXIST THEN
               
               
               NULL;
            WHEN DUP_VAL_ON_INDEX THEN
               L_SKIP := TRUE;
            END;
         END IF;

         IF NOT L_SKIP THEN         
            L_LAST_SEQ := L_LAST_SEQ + 1;

            
            INSERT INTO UTSTGK (ST, VERSION, GK, GK_VERSION, GKSEQ, VALUE)
            VALUES(A_ST, A_VERSION, A_GK(L_SEQ_NO), NULL, L_LAST_SEQ, A_VALUE(L_SEQ_NO));
         END IF;
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_ST_CURSOR);

   L_EV_SEQ_NR := -1;
   L_EVENT_TP := 'UsedObjectsUpdated';
   L_RESULT := UNAPIEV.INSERTEVENT('SaveStGroupKey', UNAPIGEN.P_EVMGR_NAME,
                                   'st', A_ST, L_LC, L_LC_VERSION, L_SS, L_EVENT_TP, 'version='||A_VERSION,
                                   L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF (L_LOG_HS = '1') AND (UNAPIGEN.P_LOG_GK_HS = '1') THEN
      INSERT INTO UTSTHS (ST, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                          WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES (A_ST, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, L_EVENT_TP, 
              'sample type "'||A_ST||'" group keys are updated.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, 
              UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
   IF DBMS_SQL.IS_OPEN (L_ST_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_ST_CURSOR);
   END IF;
   UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UNIQUEGK;
   
   
   L_RESULT := UNAPIGEN.ENDTXN; 
   RETURN(UNAPIGEN.P_TXN_ERROR);
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveStGroupKey', SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('SaveStGroupKey', L_SQLERRM);
   END IF;
   IF DBMS_SQL.IS_OPEN (L_ST_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_ST_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'SaveStGroupKey'));
END SAVESTGROUPKEY;

FUNCTION SAVE1STGROUPKEY
(A_ST                 IN       VARCHAR2,                   
 A_VERSION            IN       VARCHAR2,                   
 A_GK                 IN       VARCHAR2,                   
 A_GK_VERSION         IN OUT   VARCHAR2,                   
 A_VALUE              IN       UNAPIGEN.VC40_TABLE_TYPE,   
 A_NR_OF_ROWS         IN       NUMBER,                     
 A_MODIFY_REASON      IN       VARCHAR2)                   
RETURN NUMBER IS

L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);
L_LOG_HS       CHAR(1);
L_ALLOW_MODIFY CHAR(1);
L_ACTIVE       CHAR(1);
L_ST_CURSOR    NUMBER;
L_LAST_SEQ     INTEGER;
L_GK_HANDLE    BOOLEAN_TABLE_TYPE;
L_GK_FOUND     BOOLEAN;
L_SKIP         BOOLEAN;

TABLE_DOES_NOT_EXIST EXCEPTION;
PRAGMA EXCEPTION_INIT (TABLE_DOES_NOT_EXIST, -942);


CURSOR L_GK_CURSOR IS
SELECT VALUE, GKSEQ
FROM UTSTGK
WHERE ST = A_ST
  AND VERSION = A_VERSION
  AND GK = A_GK
ORDER BY GKSEQ;

BEGIN
   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_ST, ' ') = ' ' OR
      NVL(A_GK, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      L_GK_HANDLE(L_SEQ_NO) := TRUE;
   END LOOP;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('st', A_ST, A_VERSION, L_LC, L_LC_VERSION, L_SS,
                                           L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTST
   SET ALLOW_MODIFY = '#'
   WHERE ST = A_ST
     AND VERSION = A_VERSION;

   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR ;
   END IF;

   L_LAST_SEQ := 499;
   L_ST_CURSOR := DBMS_SQL.OPEN_CURSOR;
   FOR L_STGK IN L_GK_CURSOR LOOP
      L_GK_FOUND := FALSE;
      FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
         IF L_STGK.VALUE = A_VALUE(L_SEQ_NO) OR
            (L_STGK.VALUE IS NULL AND A_VALUE(L_SEQ_NO) IS NULL) THEN
            L_GK_HANDLE(L_SEQ_NO) := FALSE;
            L_GK_FOUND := TRUE;
            EXIT;
         END IF;
      END LOOP;

      IF NOT L_GK_FOUND THEN
         DELETE FROM UTSTGK
         WHERE ST = A_ST
           AND VERSION = A_VERSION
           AND GK = A_GK
           AND VALUE = L_STGK.VALUE;

         IF L_STGK.VALUE IS NULL THEN
            DELETE FROM UTSTGK
            WHERE ST = A_ST
              AND VERSION = A_VERSION
              AND GK = A_GK
              AND VALUE IS NULL;
         END IF;            

         L_SQL_STRING := 'DELETE FROM utstgk' || A_GK ||
                         ' WHERE st = :st AND version = :version AND ' || 
                         A_GK || '= :value '; 
         BEGIN
            DBMS_SQL.PARSE(L_ST_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
            DBMS_SQL.BIND_VARIABLE(L_ST_CURSOR, ':st' , A_ST); 
            DBMS_SQL.BIND_VARIABLE(L_ST_CURSOR, ':version' , A_VERSION); 
            DBMS_SQL.BIND_VARIABLE(L_ST_CURSOR, ':value' , L_STGK.VALUE); 
            L_RESULT := DBMS_SQL.EXECUTE(L_ST_CURSOR);
         EXCEPTION
         WHEN TABLE_DOES_NOT_EXIST THEN
            
            
            NULL;
         END;
      ELSE      
         L_LAST_SEQ := L_STGK.GKSEQ;
      END IF;
   END LOOP;

   FOR L_SEQ_NO IN 1..A_NR_OF_ROWS LOOP
      IF L_GK_HANDLE(L_SEQ_NO) THEN
         L_SKIP := FALSE; 
         IF NVL(A_VALUE(L_SEQ_NO), ' ') <> ' ' THEN
            L_SQL_STRING := 'INSERT INTO utstgk' || A_GK ||
                            ' ('||A_GK||', st, version)'||
                            ' VALUES (:value, :st, :version) ';  
            BEGIN
               DBMS_SQL.PARSE(L_ST_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
               DBMS_SQL.BIND_VARIABLE(L_ST_CURSOR, ':value' , A_VALUE(L_SEQ_NO)); 
               DBMS_SQL.BIND_VARIABLE(L_ST_CURSOR, ':st' , A_ST); 
               DBMS_SQL.BIND_VARIABLE(L_ST_CURSOR, ':version' , A_VERSION); 
               L_RESULT := DBMS_SQL.EXECUTE(L_ST_CURSOR);
            EXCEPTION
            WHEN TABLE_DOES_NOT_EXIST THEN
               
               
               NULL;
            WHEN DUP_VAL_ON_INDEX THEN
               L_SKIP := TRUE;
            END;
         END IF;

         IF NOT L_SKIP THEN
            L_LAST_SEQ := L_LAST_SEQ+1;

            INSERT INTO UTSTGK (ST, VERSION, GK, GK_VERSION, GKSEQ, VALUE)
            VALUES(A_ST, A_VERSION, A_GK, NULL, L_LAST_SEQ, A_VALUE(L_SEQ_NO));

         END IF;
      END IF;
   END LOOP;

   DBMS_SQL.CLOSE_CURSOR(L_ST_CURSOR);

   L_EV_SEQ_NR := -1;
   L_EVENT_TP := 'StGroupKeyUpdated';
   L_RESULT := UNAPIEV.INSERTEVENT('Save1StGroupKey', UNAPIGEN.P_EVMGR_NAME,
                                   'st', A_ST, L_LC, L_LC_VERSION, L_SS, L_EVENT_TP, 'version='||A_VERSION||'#gk='||A_GK||'#gk_version='||A_GK_VERSION,
                                   L_EV_SEQ_NR);
   IF L_RESULT <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF (L_LOG_HS = '1') AND (UNAPIGEN.P_LOG_GK_HS = '1') THEN
      INSERT INTO UTSTHS (ST, VERSION, WHO, WHO_DESCRIPTION, WHAT, 
                          WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES (A_ST, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 
              L_EVENT_TP, 
              'sample type "'||A_ST||'" group key "'||A_GK||'" is created or updated.', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
   IF DBMS_SQL.IS_OPEN (L_ST_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_ST_CURSOR);
   END IF;
   UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UNIQUEGK;
   
    UPDATE UTST
      SET ALLOW_MODIFY = '1' 
    WHERE ST = A_ST
    AND VERSION = A_VERSION;
   
   
   L_RESULT := UNAPIGEN.ENDTXN; 
   RETURN(UNAPIGEN.P_TXN_ERROR);
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('Save1StGroupKey', SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('Save1StGroupKey', L_SQLERRM);
   END IF;
   IF DBMS_SQL.IS_OPEN (L_ST_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR (L_ST_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'Save1StGroupKey'));
END SAVE1STGROUPKEY;

FUNCTION GETSTPARAMETERPROFILELIST
(A_ST                  IN     VARCHAR2,                   
 A_VERSION             IN     VARCHAR2,                   
 A_PP                  OUT    UNAPIGEN.VC20_TABLE_TYPE,   
 A_PP_VERSION          OUT    UNAPIGEN.VC20_TABLE_TYPE,   
 A_PP_KEY1             OUT    UNAPIGEN.VC20_TABLE_TYPE,   
 A_PP_KEY2             OUT    UNAPIGEN.VC20_TABLE_TYPE,   
 A_PP_KEY3             OUT    UNAPIGEN.VC20_TABLE_TYPE,   
 A_PP_KEY4             OUT    UNAPIGEN.VC20_TABLE_TYPE,   
 A_PP_KEY5             OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_DESCRIPTION         OUT    UNAPIGEN.VC40_TABLE_TYPE,   
 A_NR_OF_ROWS          IN OUT NUMBER,                     
 A_NEXT_ROWS           IN     NUMBER)                     
RETURN NUMBER IS

L_PP                     VARCHAR2(20);
L_PP_VERSION             VARCHAR2(20);
L_PP_KEY1                VARCHAR2(20);
L_PP_KEY2                VARCHAR2(20);
L_PP_KEY3                VARCHAR2(20);
L_PP_KEY4                VARCHAR2(20);
L_PP_KEY5                VARCHAR2(20);
L_DESCRIPTION            VARCHAR2(40);

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_STP_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_STP_CURSOR);
         P_STP_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_STP_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      IF P_STP_CURSOR IS NULL THEN
         P_STP_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;

      L_SQL_STRING:= 'SELECT uvstpp.pp, uvstpp.pp_version, '||
                     'uvstpp.pp_key1, uvstpp.pp_key2, uvstpp.pp_key3, uvstpp.pp_key4,uvstpp.pp_key5, '||
                     'uvpp.description FROM dd' ||
                      UNAPIGEN.P_DD || '.uvstpp, ' || 'dd' || UNAPIGEN.P_DD ||
                     '.uvpp WHERE uvstpp.pp = uvpp.pp '||
                     ' AND uvstpp.st = ''' || REPLACE(A_ST, '''', '''''') || '''' ||         
                     ' AND uvstpp.version = ''' || REPLACE(A_VERSION, '''', '''''') || ''''; 
      DBMS_SQL.PARSE(P_STP_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 

      DBMS_SQL.DEFINE_COLUMN(P_STP_CURSOR, 1, L_PP, 20);
      DBMS_SQL.DEFINE_COLUMN(P_STP_CURSOR, 2, L_PP_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(P_STP_CURSOR, 3, L_PP_KEY1, 20);
      DBMS_SQL.DEFINE_COLUMN(P_STP_CURSOR, 4, L_PP_KEY2, 20);
      DBMS_SQL.DEFINE_COLUMN(P_STP_CURSOR, 5, L_PP_KEY3, 20);
      DBMS_SQL.DEFINE_COLUMN(P_STP_CURSOR, 6, L_PP_KEY4, 20);
      DBMS_SQL.DEFINE_COLUMN(P_STP_CURSOR, 7, L_PP_KEY5, 20);
      DBMS_SQL.DEFINE_COLUMN(P_STP_CURSOR, 8, L_DESCRIPTION, 40);
      L_RESULT := DBMS_SQL.EXECUTE(P_STP_CURSOR);
   END IF;

   L_RESULT := DBMS_SQL.FETCH_ROWS(P_STP_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_STP_CURSOR, 1, L_PP);
      DBMS_SQL.COLUMN_VALUE(P_STP_CURSOR, 2, L_PP_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_STP_CURSOR, 3, L_PP_KEY1);
      DBMS_SQL.COLUMN_VALUE(P_STP_CURSOR, 4, L_PP_KEY2);
      DBMS_SQL.COLUMN_VALUE(P_STP_CURSOR, 5, L_PP_KEY3);
      DBMS_SQL.COLUMN_VALUE(P_STP_CURSOR, 6, L_PP_KEY4);
      DBMS_SQL.COLUMN_VALUE(P_STP_CURSOR, 7, L_PP_KEY5);
      DBMS_SQL.COLUMN_VALUE(P_STP_CURSOR, 8, L_DESCRIPTION);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_PP(L_FETCHED_ROWS) := L_PP;
      A_PP_VERSION(L_FETCHED_ROWS) := L_PP_VERSION;
      A_PP_KEY1(L_FETCHED_ROWS) := L_PP_KEY1;
      A_PP_KEY2(L_FETCHED_ROWS) := L_PP_KEY2;
      A_PP_KEY3(L_FETCHED_ROWS) := L_PP_KEY3;
      A_PP_KEY4(L_FETCHED_ROWS) := L_PP_KEY4;
      A_PP_KEY5(L_FETCHED_ROWS) := L_PP_KEY5;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_STP_CURSOR);
      END IF;
   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_STP_CURSOR);
       P_STP_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   END IF;

   IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_STP_CURSOR);
      P_STP_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetStParameterProfileList', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (P_STP_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (P_STP_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETSTPARAMETERPROFILELIST;

FUNCTION GETSTPARAMETERLIST
(A_ST                  IN     VARCHAR2,                   
 A_VERSION             IN     VARCHAR2,                   
 A_PR                  OUT    UNAPIGEN.VC20_TABLE_TYPE,   
 A_PR_VERSION          OUT    UNAPIGEN.VC20_TABLE_TYPE,   
 A_DESCRIPTION         OUT    UNAPIGEN.VC40_TABLE_TYPE,   
 A_NR_OF_ROWS          IN OUT NUMBER,                     
 A_NEXT_ROWS           IN     NUMBER)                     
RETURN NUMBER IS

L_PR           VARCHAR2(20);
L_PR_VERSION   VARCHAR2(20);
L_DESCRIPTION  VARCHAR2(40);

BEGIN

   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN (UNAPIGEN.DBERR_NROFROWS);
   END IF;

   IF NVL(A_NEXT_ROWS, 0) NOT IN (-1, 0, 1) THEN
      RETURN(UNAPIGEN.DBERR_NEXTROWS);
   END IF;

   
   IF A_NEXT_ROWS = -1 THEN
      IF P_STPR_CURSOR IS NOT NULL THEN
         DBMS_SQL.CLOSE_CURSOR(P_STPR_CURSOR);
         P_STPR_CURSOR := NULL;
      END IF;
      RETURN (UNAPIGEN.DBERR_SUCCESS);
   END IF;

   
   IF A_NEXT_ROWS = 1 THEN
      IF P_STPR_CURSOR IS NULL THEN
         RETURN(UNAPIGEN.DBERR_NOCURSOR);
      END IF;
   END IF;

   
   IF NVL(A_NEXT_ROWS,0) = 0 THEN
      IF P_STPR_CURSOR IS NULL THEN
         P_STPR_CURSOR := DBMS_SQL.OPEN_CURSOR;
      END IF;

      L_SQL_STRING:= ' SELECT DISTINCT uvpppr.pr, uvpppr.pr_version, uvpr.description FROM dd' ||
                      UNAPIGEN.P_DD || '.uvpppr, dd' ||
                      UNAPIGEN.P_DD || '.uvstpp, dd' ||
                      UNAPIGEN.P_DD || '.uvpr ' ||
                     ' WHERE uvpppr.pp = uvstpp.pp '||
                     ' AND uvpppr.version = UNAPIGEN.UsePpVersion(uvstpp.pp, uvstpp.pp_version, uvstpp.pp_key1, uvstpp.pp_key2, uvstpp.pp_key3, uvstpp.pp_key4, uvstpp.pp_key5) '||
                     ' AND uvpppr.pp_key1 = uvstpp.pp_key1 '||
                     ' AND uvpppr.pp_key2 = uvstpp.pp_key2 '||
                     ' AND uvpppr.pp_key3 = uvstpp.pp_key3 '||
                     ' AND uvpppr.pp_key4 = uvstpp.pp_key4 '||
                     ' AND uvpppr.pp_key5 = uvstpp.pp_key5 '||
                     ' AND uvpppr.pr = uvpr.pr ' ||
                     ' AND UNAPIGEN.UseVersion(''pr'', uvpppr.pr, uvpppr.pr_version) = uvpr.version '||
                     ' AND uvstpp.st = :a_st '||          
                     ' AND uvstpp.version = :a_version'; 
      DBMS_SQL.PARSE(P_STPR_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      DBMS_SQL.BIND_VARIABLE(P_STPR_CURSOR, ':a_st', A_ST);
      DBMS_SQL.BIND_VARIABLE(P_STPR_CURSOR, ':a_version', A_VERSION);

      DBMS_SQL.DEFINE_COLUMN(P_STPR_CURSOR, 1, L_PR, 20);
      DBMS_SQL.DEFINE_COLUMN(P_STPR_CURSOR, 2, L_PR_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(P_STPR_CURSOR, 3, L_DESCRIPTION, 40);
      L_RESULT := DBMS_SQL.EXECUTE(P_STPR_CURSOR);
   END IF;

   L_RESULT := DBMS_SQL.FETCH_ROWS(P_STPR_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP
      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;

      DBMS_SQL.COLUMN_VALUE(P_STPR_CURSOR, 1, L_PR);
      DBMS_SQL.COLUMN_VALUE(P_STPR_CURSOR, 2, L_PR_VERSION);
      DBMS_SQL.COLUMN_VALUE(P_STPR_CURSOR, 3, L_DESCRIPTION);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_PR(L_FETCHED_ROWS) := L_PR;
      A_PR_VERSION(L_FETCHED_ROWS) := L_PR_VERSION;
      A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(P_STPR_CURSOR);
      END IF;
   END LOOP;

   
   IF (L_FETCHED_ROWS = 0) THEN
       DBMS_SQL.CLOSE_CURSOR(P_STPR_CURSOR);
       P_STPR_CURSOR := NULL;
       RETURN(UNAPIGEN.DBERR_NORECORDS);
   END IF;

   IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      DBMS_SQL.CLOSE_CURSOR(P_STPR_CURSOR);
      P_STPR_CURSOR := NULL;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES (UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
              'GetStParameterList', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF DBMS_SQL.IS_OPEN (P_STPR_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR (P_STPR_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETSTPARAMETERLIST;

FUNCTION GETSTPRFREQUENCY
(A_ST                IN     VARCHAR2,                    
 A_VERSION           IN     VARCHAR2,                    
 A_PP                IN     VARCHAR2,                    
 A_PP_VERSION        IN     VARCHAR2,                    
 A_PP_KEY1           IN     VARCHAR2,                    
 A_PP_KEY2           IN     VARCHAR2,                    
 A_PP_KEY3           IN     VARCHAR2,                    
 A_PP_KEY4           IN     VARCHAR2,                    
 A_PP_KEY5           IN     VARCHAR2,                    
 A_PR                OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_PR_VERSION        OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_FREQ_TP           OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_FREQ_VAL          OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_FREQ_UNIT         OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_INVERT_FREQ       OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_LAST_SCHED        OUT    UNAPIGEN.DATE_TABLE_TYPE,    
 A_LAST_CNT          OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_LAST_VAL          OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_DEF_FREQ_TP       OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_DEF_FREQ_VAL      OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_DEF_FREQ_UNIT     OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_DEF_INVERT_FREQ   OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_DEF_ST_BASED_FREQ OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_DEF_LAST_SCHED    OUT    UNAPIGEN.DATE_TABLE_TYPE,    
 A_DEF_LAST_CNT      OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_DEF_LAST_VAL      OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_NR_OF_ROWS        IN OUT NUMBER)                      
RETURN NUMBER IS

BEGIN
   RETURN(UNAPIST2.GETSTPRFREQUENCY
             (A_ST, A_VERSION, A_PP, A_PP_VERSION, 
              A_PP_KEY1, A_PP_KEY2, A_PP_KEY3, A_PP_KEY4, A_PP_KEY5, 
              A_PR, A_PR_VERSION, A_FREQ_TP,  A_FREQ_VAL,
              A_FREQ_UNIT, A_INVERT_FREQ, A_LAST_SCHED,
              A_LAST_CNT, A_LAST_VAL, A_DEF_FREQ_TP, A_DEF_FREQ_VAL,
              A_DEF_FREQ_UNIT, A_DEF_INVERT_FREQ, A_DEF_ST_BASED_FREQ,
              A_DEF_LAST_SCHED, A_DEF_LAST_CNT, A_DEF_LAST_VAL ,
              A_NR_OF_ROWS));
END GETSTPRFREQUENCY;

FUNCTION GETSTMTFREQUENCY
(A_ST                IN     VARCHAR2,                    
 A_VERSION           IN     VARCHAR2,                    
 A_PR                IN     VARCHAR2,                    
 A_PR_VERSION        IN     VARCHAR2,                    
 A_MT                OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_MT_VERSION        OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_FREQ_TP           OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_FREQ_VAL          OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_FREQ_UNIT         OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_INVERT_FREQ       OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_LAST_SCHED        OUT    UNAPIGEN.DATE_TABLE_TYPE,    
 A_LAST_CNT          OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_LAST_VAL          OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_DEF_FREQ_TP       OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_DEF_FREQ_VAL      OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_DEF_FREQ_UNIT     OUT    UNAPIGEN.VC20_TABLE_TYPE,    
 A_DEF_INVERT_FREQ   OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_DEF_ST_BASED_FREQ OUT    UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_DEF_LAST_SCHED    OUT    UNAPIGEN.DATE_TABLE_TYPE,    
 A_DEF_LAST_CNT      OUT    UNAPIGEN.NUM_TABLE_TYPE,     
 A_DEF_LAST_VAL      OUT    UNAPIGEN.VC40_TABLE_TYPE,    
 A_NR_OF_ROWS        IN OUT NUMBER)                      
RETURN NUMBER IS

BEGIN
   RETURN(UNAPIST2.GETSTMTFREQUENCY
             (A_ST, A_VERSION, A_PR, A_PR_VERSION, A_MT, A_MT_VERSION, A_FREQ_TP,  A_FREQ_VAL,
              A_FREQ_UNIT, A_INVERT_FREQ, A_LAST_SCHED,
              A_LAST_CNT, A_LAST_VAL, A_DEF_FREQ_TP, A_DEF_FREQ_VAL,
              A_DEF_FREQ_UNIT, A_DEF_INVERT_FREQ, A_DEF_ST_BASED_FREQ,
              A_DEF_LAST_SCHED, A_DEF_LAST_CNT, A_DEF_LAST_VAL,
              A_NR_OF_ROWS));
END GETSTMTFREQUENCY;

FUNCTION SAVESTPRFREQUENCY
(A_ST                IN     VARCHAR2,                    
 A_VERSION           IN     VARCHAR2,                    
 A_PP                IN     VARCHAR2,                    
 A_PP_VERSION        IN     VARCHAR2,                    
 A_PP_KEY1           IN     VARCHAR2,                    
 A_PP_KEY2           IN     VARCHAR2,                    
 A_PP_KEY3           IN     VARCHAR2,                    
 A_PP_KEY4           IN     VARCHAR2,                    
 A_PP_KEY5           IN     VARCHAR2,                    
 A_PR                IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_PR_VERSION        IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_FREQ_TP           IN     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_FREQ_VAL          IN     UNAPIGEN.NUM_TABLE_TYPE,     
 A_FREQ_UNIT         IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_INVERT_FREQ       IN     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_LAST_SCHED        IN     UNAPIGEN.DATE_TABLE_TYPE,    
 A_LAST_CNT          IN     UNAPIGEN.NUM_TABLE_TYPE,     
 A_LAST_VAL          IN     UNAPIGEN.VC40_TABLE_TYPE,    
 A_NR_OF_ROWS        IN     NUMBER,                      
 A_MODIFY_REASON     IN     VARCHAR2)                    
RETURN NUMBER IS

BEGIN
   RETURN(UNAPIST2.SAVESTPRFREQUENCY
             (A_ST, A_VERSION, A_PP, A_PP_VERSION, 
              A_PP_KEY1, A_PP_KEY2, A_PP_KEY3, A_PP_KEY4, A_PP_KEY5, 
              A_PR, A_PR_VERSION, A_FREQ_TP,  A_FREQ_VAL,
              A_FREQ_UNIT, A_INVERT_FREQ, A_LAST_SCHED,
              A_LAST_CNT, A_LAST_VAL, A_NR_OF_ROWS,
              A_MODIFY_REASON));
END SAVESTPRFREQUENCY;

FUNCTION SAVESTMTFREQUENCY
(A_ST                IN     VARCHAR2,                    
 A_VERSION           IN     VARCHAR2,                    
 A_PR                IN     VARCHAR2,                    
 A_PR_VERSION        IN     VARCHAR2,                    
 A_MT                IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_MT_VERSION        IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_FREQ_TP           IN     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_FREQ_VAL          IN     UNAPIGEN.NUM_TABLE_TYPE,     
 A_FREQ_UNIT         IN     UNAPIGEN.VC20_TABLE_TYPE,    
 A_INVERT_FREQ       IN     UNAPIGEN.CHAR1_TABLE_TYPE,   
 A_LAST_SCHED        IN     UNAPIGEN.DATE_TABLE_TYPE,    
 A_LAST_CNT          IN     UNAPIGEN.NUM_TABLE_TYPE,     
 A_LAST_VAL          IN     UNAPIGEN.VC40_TABLE_TYPE,    
 A_NR_OF_ROWS        IN     NUMBER,                      
 A_MODIFY_REASON     IN     VARCHAR2)                    
RETURN NUMBER IS

BEGIN
   RETURN(UNAPIST2.SAVESTMTFREQUENCY
             (A_ST, A_VERSION, A_PR, A_PR_VERSION,  A_MT, A_MT_VERSION, A_FREQ_TP,  A_FREQ_VAL,
              A_FREQ_UNIT, A_INVERT_FREQ, A_LAST_SCHED,
              A_LAST_CNT, A_LAST_VAL, A_NR_OF_ROWS,
              A_MODIFY_REASON));
END SAVESTMTFREQUENCY;

FUNCTION GETSTPPATTRIBUTE
(A_ST               OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_VERSION          OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_PP               OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_PP_VERSION       OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_PP_KEY1          OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_PP_KEY2          OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_PP_KEY3          OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_PP_KEY4          OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_PP_KEY5          OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_AU               OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_AU_VERSION       OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_VALUE            OUT    UNAPIGEN.VC40_TABLE_TYPE,  
 A_DESCRIPTION      OUT    UNAPIGEN.VC40_TABLE_TYPE,  
 A_IS_PROTECTED     OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_SINGLE_VALUED    OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_NEW_VAL_ALLOWED  OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_STORE_DB         OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_VALUE_LIST_TP    OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_RUN_MODE         OUT    UNAPIGEN.CHAR1_TABLE_TYPE, 
 A_SERVICE          OUT    UNAPIGEN.VC255_TABLE_TYPE, 
 A_CF_VALUE         OUT    UNAPIGEN.VC20_TABLE_TYPE,  
 A_NR_OF_ROWS       IN OUT NUMBER,                    
 A_WHERE_CLAUSE     IN     VARCHAR2)                  
RETURN NUMBER IS

L_ST                    VARCHAR2(20);
L_VERSION               VARCHAR2(20);
L_PP                    VARCHAR2(20);
L_PP_VERSION            VARCHAR2(20);
L_PP_KEY1               VARCHAR2(20);
L_PP_KEY2               VARCHAR2(20);
L_PP_KEY3               VARCHAR2(20);
L_PP_KEY4               VARCHAR2(20);
L_PP_KEY5               VARCHAR2(20);
L_AU                    VARCHAR2(20);
L_AU_VERSION            VARCHAR2(20);
L_VALUE                 VARCHAR2(40);
L_DESCRIPTION           VARCHAR2(40);
L_IS_PROTECTED          CHAR(1);
L_SINGLE_VALUED         CHAR(1);
L_NEW_VAL_ALLOWED       CHAR(1);
L_STORE_DB              CHAR(1);
L_VALUE_LIST_TP         CHAR(1);
L_RUN_MODE              CHAR(1);
L_SERVICE               VARCHAR2(255);
L_CF_VALUE              VARCHAR2(20);
L_PSEUDO_NEXT_ROWS      BOOLEAN;
L_AU_CURSOR             INTEGER;
L_BIND_RT_SELECTION     BOOLEAN;
L_BIND_ST_SELECTION     BOOLEAN;
L_BIND_FIXED_ST_FLAG    BOOLEAN;
L_BIND_ST_VALUE         VARCHAR2(20);

BEGIN

   L_BIND_RT_SELECTION := FALSE;
   L_BIND_ST_SELECTION := FALSE;
   L_BIND_FIXED_ST_FLAG := FALSE;
   IF NVL(A_NR_OF_ROWS,0) = 0 THEN
      A_NR_OF_ROWS := UNAPIGEN.P_DEFAULT_CHUNK_SIZE;
   ELSIF A_NR_OF_ROWS < 0 OR A_NR_OF_ROWS > UNAPIGEN.P_MAX_CHUNK_SIZE THEN
      RETURN(UNAPIGEN.DBERR_NROFROWS);
   END IF;

   L_PSEUDO_NEXT_ROWS := FALSE;
   IF NVL(A_WHERE_CLAUSE, ' ') = ' ' THEN
      RETURN(UNAPIGEN.DBERR_WHERECLAUSE);
   ELSIF A_WHERE_CLAUSE = 'SELECTION' THEN
      L_PSEUDO_NEXT_ROWS := TRUE;
      IF UNAPIST.P_SELECTION_CLAUSE IS NOT NULL THEN
         IF INSTR(UPPER(UNAPIST.P_SELECTION_CLAUSE), ' WHERE ') <> 0 THEN       
            L_WHERE_CLAUSE := ','||UNAPIST.P_SELECTION_CLAUSE|| 
                              ' AND a.st = au.st AND a.version = au.version ORDER BY au.st, au.version, au.pp, au.pp_version, au.auseq, au.au'; 
         ELSE
            L_WHERE_CLAUSE := ','||UNAPIST.P_SELECTION_CLAUSE|| 
                              ' WHERE a.st = au.st AND a.version = au.version ORDER BY au.st, au.version, au.pp, au.pp_version, au.auseq, au.au'; 
         END IF;
         L_BIND_ST_SELECTION := TRUE;
      ELSE
         L_WHERE_CLAUSE := 'ORDER BY au.st, au.version, au.pp, au.pp_version, au.auseq, au.au'; 
      END IF;   
   ELSIF A_WHERE_CLAUSE = 'RTSELECTION' THEN
      L_PSEUDO_NEXT_ROWS := TRUE;
      IF UNAPIRT.P_SELECTION_CLAUSE IS NOT NULL THEN 
         IF INSTR(UPPER(UNAPIRT.P_SELECTION_CLAUSE), 'WHERE') <> 0 THEN       
            L_WHERE_CLAUSE := 'WHERE (au.st, au.version) IN '||
                              '(SELECT b.st, UNAPIGEN.UseVersion(''st'',b.st,b.st_version)'||
                              ' FROM dd'||UNAPIGEN.P_DD||'.uvrtst b, '||
                              UNAPIRT.P_SELECTION_CLAUSE||
                              ' AND a.rt = b.rt'||
                              ' AND a.version = b.version) '||
                              'ORDER BY au.st, au.version, au.pp, au.pp_version, au.auseq, au.au';  
         ELSE
            L_WHERE_CLAUSE := 'WHERE (au.st, au.version) IN '||
                              '(SELECT b.st, UNAPIGEN.UseVersion(''st'',b.st,b.st_version)'||
                              ' FROM dd'||UNAPIGEN.P_DD||'.uvrtst b, '||
                              UNAPIRT.P_SELECTION_CLAUSE||
                              ' WHERE a.rt = b.rt'||
                              ' AND a.version = b.version) '||
                              'ORDER BY au.st, au.version, au.pp, au.pp_version, au.auseq, au.au';  
         END IF;
         L_BIND_RT_SELECTION := TRUE;
      ELSE
         L_WHERE_CLAUSE := 'ORDER BY au.st, au.version, au.pp, au.pp_version, au.auseq, au.au'; 
      END IF;      
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,3)) = 'ST=' THEN
      
      
      
      L_BIND_FIXED_ST_FLAG := TRUE;
      L_BIND_ST_VALUE := SUBSTR(A_WHERE_CLAUSE,4);
      L_WHERE_CLAUSE := 'WHERE st=:st_val ';
      L_PSEUDO_NEXT_ROWS := TRUE;
   ELSIF UPPER(SUBSTR(A_WHERE_CLAUSE,1,6)) <> 'WHERE ' THEN
      L_PSEUDO_NEXT_ROWS := TRUE;
      L_BIND_FIXED_ST_FLAG := TRUE;
      L_BIND_ST_VALUE := A_WHERE_CLAUSE;
      L_WHERE_CLAUSE := 'WHERE au.st = :st_val ORDER BY au.st, au.version, au.pp, au.pp_version, au.auseq, au.au';
   ELSE
      L_WHERE_CLAUSE := A_WHERE_CLAUSE; 
   END IF;

   L_SQL_STRING := 'SELECT au.st, au.version, au.pp, au.pp_version, '||
                   'au.pp_key1, au.pp_key2, au.pp_key3, au.pp_key4, au.pp_key5, '||
                   'au.au, au.au_version, au.value '||
                   'FROM dd' || UNAPIGEN.P_DD || '.uvstppau au ' || L_WHERE_CLAUSE;

   IF NOT DBMS_SQL.IS_OPEN(L_AU_CURSOR) THEN
   
      L_AU_CURSOR := DBMS_SQL.OPEN_CURSOR;
      DBMS_SQL.PARSE(L_AU_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      IF L_BIND_FIXED_ST_FLAG THEN
         DBMS_SQL.BIND_VARIABLE(L_AU_CURSOR, ':st_val' , L_BIND_ST_VALUE); 
      ELSIF L_BIND_ST_SELECTION THEN
         FOR L_X IN 1..UNAPIST.P_SELECTION_VAL_TAB.COUNT() LOOP
            DBMS_SQL.BIND_VARIABLE(L_AU_CURSOR, ':col_val'||L_X , UNAPIST.P_SELECTION_VAL_TAB(L_X)); 
         END LOOP;
      ELSIF L_BIND_RT_SELECTION THEN
         FOR L_X IN 1..UNAPIRT.P_SELECTION_VAL_TAB.COUNT() LOOP
            DBMS_SQL.BIND_VARIABLE(L_AU_CURSOR, ':col_val'||L_X , UNAPIRT.P_SELECTION_VAL_TAB(L_X)); 
         END LOOP;
      END IF;
      
      DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 1, L_ST, 20);
      DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 2, L_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 3, L_PP, 20);
      DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 4, L_PP_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 5, L_PP_KEY1, 20);
      DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 6, L_PP_KEY2, 20);
      DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 7, L_PP_KEY3, 20);
      DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 8, L_PP_KEY4, 20);
      DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 9, L_PP_KEY5, 20);
      DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 10, L_AU, 20);
      DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 11, L_AU_VERSION, 20);
      DBMS_SQL.DEFINE_COLUMN(L_AU_CURSOR, 12, L_VALUE, 40);
      L_RESULT := DBMS_SQL.EXECUTE(L_AU_CURSOR);
   END IF;
   
   L_RESULT := DBMS_SQL.FETCH_ROWS(L_AU_CURSOR);
   L_FETCHED_ROWS := 0;

   LOOP

      EXIT WHEN L_RESULT = 0 OR L_FETCHED_ROWS >= A_NR_OF_ROWS;
      
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 1, L_ST);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 2, L_VERSION);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 3, L_PP);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 4, L_PP_VERSION);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 5, L_PP_KEY1);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 6, L_PP_KEY2);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 7, L_PP_KEY3);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 8, L_PP_KEY4);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 9, L_PP_KEY5);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 10, L_AU);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 11, L_AU_VERSION);
      DBMS_SQL.COLUMN_VALUE(L_AU_CURSOR, 12, L_VALUE);

      L_FETCHED_ROWS := L_FETCHED_ROWS + 1;
      A_ST(L_FETCHED_ROWS) := L_ST;
      A_VERSION(L_FETCHED_ROWS) := L_VERSION;
      A_PP(L_FETCHED_ROWS) := L_PP;
      A_PP_VERSION(L_FETCHED_ROWS) := L_PP_VERSION;
      A_PP_KEY1(L_FETCHED_ROWS) := L_PP_KEY1;
      A_PP_KEY2(L_FETCHED_ROWS) := L_PP_KEY2;
      A_PP_KEY3(L_FETCHED_ROWS) := L_PP_KEY3;
      A_PP_KEY4(L_FETCHED_ROWS) := L_PP_KEY4;
      A_PP_KEY5(L_FETCHED_ROWS) := L_PP_KEY5;
      A_AU(L_FETCHED_ROWS) := L_AU;
      A_AU_VERSION(L_FETCHED_ROWS) := L_AU_VERSION;
      A_VALUE(L_FETCHED_ROWS) := L_VALUE;

      OPEN UNAPIGEN.L_AUDET_CURSOR(L_AU, L_AU_VERSION);
      FETCH UNAPIGEN.L_AUDET_CURSOR
      INTO L_DESCRIPTION, L_IS_PROTECTED, L_SINGLE_VALUED,
           L_NEW_VAL_ALLOWED, L_STORE_DB, L_VALUE_LIST_TP, L_RUN_MODE,
           L_SERVICE, L_CF_VALUE;
      IF UNAPIGEN.L_AUDET_CURSOR%NOTFOUND THEN
         
         
         
         A_DESCRIPTION(L_FETCHED_ROWS)     := L_AU;
         A_IS_PROTECTED(L_FETCHED_ROWS)    := '1';
         A_SINGLE_VALUED(L_FETCHED_ROWS)   := '1';
         A_NEW_VAL_ALLOWED(L_FETCHED_ROWS) := '0';
         A_STORE_DB(L_FETCHED_ROWS)        := '0';
         A_VALUE_LIST_TP(L_FETCHED_ROWS)   := 'E';
         A_RUN_MODE(L_FETCHED_ROWS)        := 'H';
         A_SERVICE(L_FETCHED_ROWS)         := NULL;
         A_CF_VALUE(L_FETCHED_ROWS)        := NULL;
      ELSE      
         A_DESCRIPTION(L_FETCHED_ROWS) := L_DESCRIPTION;
         A_IS_PROTECTED(L_FETCHED_ROWS) := L_IS_PROTECTED;
         A_SINGLE_VALUED(L_FETCHED_ROWS) := L_SINGLE_VALUED;
         A_NEW_VAL_ALLOWED(L_FETCHED_ROWS) := L_NEW_VAL_ALLOWED;
         A_STORE_DB(L_FETCHED_ROWS) := L_STORE_DB;
         A_VALUE_LIST_TP(L_FETCHED_ROWS) := L_VALUE_LIST_TP;
         A_RUN_MODE(L_FETCHED_ROWS) := L_RUN_MODE;
         A_SERVICE(L_FETCHED_ROWS) := L_SERVICE;
         A_CF_VALUE(L_FETCHED_ROWS) := L_CF_VALUE;
      END IF;
      CLOSE UNAPIGEN.L_AUDET_CURSOR;

      IF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
         L_RESULT := DBMS_SQL.FETCH_ROWS(L_AU_CURSOR);
      END IF;
   END LOOP;

   IF L_FETCHED_ROWS = 0 THEN
      L_RET_CODE := UNAPIGEN.DBERR_NORECORDS;
      DBMS_SQL.CLOSE_CURSOR(L_AU_CURSOR);
   ELSIF L_FETCHED_ROWS < A_NR_OF_ROWS THEN
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
      DBMS_SQL.CLOSE_CURSOR(L_AU_CURSOR);
   ELSE   
      L_RET_CODE := UNAPIGEN.DBERR_SUCCESS;
      A_NR_OF_ROWS := L_FETCHED_ROWS;
   END IF;

   IF L_PSEUDO_NEXT_ROWS = FALSE AND
      DBMS_SQL.IS_OPEN(L_AU_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_AU_CURSOR);
   END IF;

   RETURN(L_RET_CODE);

EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := SQLERRM;
      UNAPIGEN.U4ROLLBACK;
      INSERT INTO UTERROR(CLIENT_ID, APPLIC, WHO, LOGDATE, LOGDATE_TZ, API_NAME, ERROR_MSG)
      VALUES(UNAPIGEN.P_CLIENT_ID, UNAPIGEN.P_APPLIC_NAME, UNAPIGEN.P_USER, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,
             'GetStPpAttribute', L_SQLERRM);
      UNAPIGEN.U4COMMIT;
      IF UNAPIGEN.L_AUDET_CURSOR%ISOPEN THEN
         CLOSE UNAPIGEN.L_AUDET_CURSOR;
      END IF;
      IF DBMS_SQL.IS_OPEN(L_AU_CURSOR) THEN
         DBMS_SQL.CLOSE_CURSOR(L_AU_CURSOR);
      END IF;
      RETURN(UNAPIGEN.DBERR_GENFAIL);
END GETSTPPATTRIBUTE;

FUNCTION SAVESTPPATTRIBUTE
(A_ST             IN        VARCHAR2,                 
 A_VERSION        IN        VARCHAR2,                 
 A_PP             IN        VARCHAR2,                 
 A_PP_VERSION     IN        VARCHAR2,                 
 A_PP_KEY1        IN        VARCHAR2,                 
 A_PP_KEY2        IN        VARCHAR2,                 
 A_PP_KEY3        IN        VARCHAR2,                 
 A_PP_KEY4        IN        VARCHAR2,                 
 A_PP_KEY5        IN        VARCHAR2,                 
 A_AU             IN        UNAPIGEN.VC20_TABLE_TYPE, 
 A_VALUE          IN        UNAPIGEN.VC40_TABLE_TYPE, 
 A_AU_VERSION     IN OUT    UNAPIGEN.VC20_TABLE_TYPE, 
 A_NR_OF_ROWS     IN        NUMBER,                   
 A_MODIFY_REASON  IN        VARCHAR2)                 
RETURN NUMBER IS

L_AU           VARCHAR2(20);
L_AU_VERSION   VARCHAR2(20);
L_VALUE        VARCHAR2(40);
L_ALLOW_MODIFY CHAR(1);
L_AUSEQ        NUMBER;
L_LOG_HS       CHAR(1);
L_ACTIVE       CHAR(1);
L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);
L_OBJECT_ID    VARCHAR2(20);

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_ST, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;
   
   IF NVL(A_PP, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF A_PP_KEY1 IS NULL OR
      A_PP_KEY2 IS NULL OR
      A_PP_KEY3 IS NULL OR
      A_PP_KEY4 IS NULL OR
      A_PP_KEY5 IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOPPKEYID;
      RAISE STPERROR;
   END IF;


   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('st', A_ST, A_VERSION, L_LC, 
                                           L_LC_VERSION, L_SS, L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTST
   SET ALLOW_MODIFY = '#'
   WHERE VERSION = A_VERSION
     AND ST = A_ST;
   
   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR ;
   END IF;

   
   DELETE FROM UTSTPPAU
   WHERE ST = A_ST
   AND VERSION = A_VERSION
   AND PP = A_PP
   AND PP_KEY1 =A_PP_KEY1
   AND PP_KEY2 =A_PP_KEY2
   AND PP_KEY3 =A_PP_KEY3
   AND PP_KEY4 =A_PP_KEY4
   AND PP_KEY5 =A_PP_KEY5;                         

   FOR I IN 1..A_NR_OF_ROWS LOOP
      
      IF NVL(A_AU(I), ' ') = ' ' THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
         RAISE STPERROR;
      END IF;
      
      INSERT INTO UTSTPPAU
      (ST, VERSION, PP, PP_VERSION, 
       PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, 
       AU, AU_VERSION,  AUSEQ, VALUE)
      VALUES
      (A_ST, A_VERSION, A_PP, A_PP_VERSION,
       A_PP_KEY1, A_PP_KEY2, A_PP_KEY3, A_PP_KEY4, A_PP_KEY5, 
       A_AU(I), A_AU_VERSION(I), I, A_VALUE(I));
   END LOOP;

   L_EVENT_TP := 'AttributesUpdated';
   L_EV_DETAILS := 'version='||A_VERSION||
                   '#pp_key1='||A_PP_KEY1||
                   '#pp_key2='||A_PP_KEY2||
                   '#pp_key3='||A_PP_KEY3||
                   '#pp_key4='||A_PP_KEY4||
                   '#pp_key5='||A_PP_KEY5;
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT ('SaveStPpAttribute',
               UNAPIGEN.P_EVMGR_NAME, 'st', A_ST, L_LC, L_LC_VERSION, L_SS,
               L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF L_LOG_HS = '1' THEN
      INSERT INTO UTSTHS
      (ST, VERSION, WHO, WHO_DESCRIPTION, 
      WHAT, WHAT_DESCRIPTION,
      LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES (A_ST, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 
              L_EVENT_TP, 'attributes for '||UNAPIGEN.GETOBJTPDESCRIPTION('pp')||' "'||A_PP||
                          '" used in object '||UNAPIGEN.GETOBJTPDESCRIPTION('st')||' "'||A_ST||
                          '" are updated',
                          CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR ); 
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('SaveStPpAttribute', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'SaveStPpAttribute'));
END SAVESTPPATTRIBUTE;

FUNCTION SAVE1STPPATTRIBUTE
(A_ST             IN        VARCHAR2,                 
 A_VERSION        IN        VARCHAR2,                 
 A_PP             IN        VARCHAR2,                 
 A_PP_VERSION     IN        VARCHAR2,                 
 A_PP_KEY1        IN        VARCHAR2,                 
 A_PP_KEY2        IN        VARCHAR2,                 
 A_PP_KEY3        IN        VARCHAR2,                 
 A_PP_KEY4        IN        VARCHAR2,                 
 A_PP_KEY5        IN        VARCHAR2,                 
 A_AU             IN        VARCHAR2,                 
 A_VALUE          IN        UNAPIGEN.VC40_TABLE_TYPE, 
 A_AU_VERSION     IN OUT    VARCHAR2,                 
 A_NR_OF_ROWS     IN        NUMBER,                   
 A_MODIFY_REASON  IN        VARCHAR2)                 
RETURN NUMBER IS

L_AU           VARCHAR2(20);
L_AU_VERSION   VARCHAR2(20);
L_VALUE        VARCHAR2(40);
L_ALLOW_MODIFY CHAR(1);
L_AUSEQ        NUMBER;
L_LOG_HS       CHAR(1);
L_ACTIVE       CHAR(1);
L_LC           VARCHAR2(2);
L_LC_VERSION   VARCHAR2(20);
L_SS           VARCHAR2(2);
L_OBJECT_ID    VARCHAR2(20);

BEGIN

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   IF NVL(A_ST, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;
   
   IF NVL(A_PP, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;

   IF A_PP_KEY1 IS NULL OR
      A_PP_KEY2 IS NULL OR
      A_PP_KEY3 IS NULL OR
      A_PP_KEY4 IS NULL OR
      A_PP_KEY5 IS NULL THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOPPKEYID;
      RAISE STPERROR;
   END IF;

   IF NVL(A_AU, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID;
      RAISE STPERROR;
   END IF;
   L_AU_VERSION := NULL;

   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('st', A_ST, A_VERSION, L_LC, 
                                           L_LC_VERSION, L_SS, L_ALLOW_MODIFY, L_ACTIVE, L_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   UPDATE UTST
   SET ALLOW_MODIFY = '#'
   WHERE VERSION = A_VERSION
     AND ST = A_ST;
   
   IF SQL%ROWCOUNT < 1 THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR ;
   END IF;

   
   DELETE FROM UTSTPPAU
   WHERE ST = A_ST
   AND VERSION = A_VERSION
   AND PP = A_PP
   AND PP_KEY1 =A_PP_KEY1
   AND PP_KEY2 =A_PP_KEY2
   AND PP_KEY3 =A_PP_KEY3
   AND PP_KEY4 =A_PP_KEY4
   AND PP_KEY5 =A_PP_KEY5
   AND AU = A_AU;                         

   
   L_AU_VERSION := NULL;

   FOR I IN 1..A_NR_OF_ROWS LOOP
            
      INSERT INTO UTSTPPAU
      (ST, VERSION, PP, PP_VERSION, 
       PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, 
       AU, AU_VERSION,  AUSEQ, VALUE)
      VALUES
      (A_ST, A_VERSION, A_PP, A_PP_VERSION,
       A_PP_KEY1, A_PP_KEY2, A_PP_KEY3, A_PP_KEY4, A_PP_KEY5, 
       A_AU, L_AU_VERSION, I, A_VALUE(I));
   END LOOP;

   L_EVENT_TP := 'AttributesUpdated';
   L_EV_DETAILS := 'version='||A_VERSION||
                   '#pp_key1='||A_PP_KEY1||
                   '#pp_key2='||A_PP_KEY2||
                   '#pp_key3='||A_PP_KEY3||
                   '#pp_key4='||A_PP_KEY4||
                   '#pp_key5='||A_PP_KEY5;
   L_EV_SEQ_NR := -1;
   L_RESULT := UNAPIEV.INSERTEVENT ('SaveStPpAttribute',
               UNAPIGEN.P_EVMGR_NAME, 'st', A_ST, L_LC, L_LC_VERSION, L_SS,
               L_EVENT_TP, L_EV_DETAILS, L_EV_SEQ_NR);
   IF L_RESULT <> 0 THEN
      UNAPIGEN.P_TXN_ERROR := L_RESULT;
      RAISE STPERROR;
   END IF;

   IF L_LOG_HS = '1' THEN
      INSERT INTO UTSTHS
      (ST, VERSION, WHO, WHO_DESCRIPTION, 
      WHAT, WHAT_DESCRIPTION,
      LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
      VALUES (A_ST, A_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION, 
              L_EVENT_TP, 'attributes for '||UNAPIGEN.GETOBJTPDESCRIPTION('pp')||' "'||A_PP||
                          '" used in object '||UNAPIGEN.GETOBJTPDESCRIPTION('st')||' "'||A_ST||
                          '" are updated',
                          CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR ); 
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN(UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('Save1StPpAttribute', SQLERRM);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR, 'Save1StPpAttribute'));
END SAVE1STPPATTRIBUTE;

FUNCTION COPYSAMPLETYPE
(A_ST             IN        VARCHAR2,                 
 A_VERSION        IN        VARCHAR2,                 
 A_CP_ST          IN OUT    VARCHAR2,                 
 A_CP_VERSION     IN OUT    VARCHAR2,                 
 A_MODIFY_REASON  IN        VARCHAR2)                 
RETURN NUMBER IS

CURSOR L_ST_CURSOR(A_ST IN VARCHAR2, A_ST_VERSION IN VARCHAR2) IS
   SELECT LOG_HS
   FROM UTST
   WHERE ST = A_ST
     AND VERSION = A_ST_VERSION;
L_ST_REC          L_ST_CURSOR%ROWTYPE;

L_DYN_CURSOR  INTEGER;
CURSOR L_ALLSTGK_TABLES_CURSOR IS
   SELECT DISTINCT TABLE_NAME,
   LENGTH(TABLE_NAME) TABLE_ORDER2
   FROM USER_TAB_COLUMNS
   WHERE COLUMN_NAME = 'ST'
   AND (TABLE_NAME LIKE 'UTSTGK%')
   AND LENGTH(TABLE_NAME)>6
   ORDER BY 2 ASC, 1 ASC;

L_TEMP_LC                 VARCHAR2(2);
L_TEMP_LC_VERSION         VARCHAR2(20);
L_TEMP_SS                 VARCHAR2(2);
L_TEMP_LOG_HS             CHAR(1);
L_TEMP_ALLOW_MODIFY       CHAR(1);
L_TEMP_ACTIVE             CHAR(1);
L_LOG_HS                  CHAR(1);
L_SQLERRM2                VARCHAR2(255);

BEGIN

   L_SQLERRM := NULL;
   L_SQLERRM2 := NULL;

   IF UNAPIGEN.BEGINTXN(UNAPIGEN.P_SINGLE_API_TXN) <>
      UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   
   IF NVL(A_ST, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJID ;
      RAISE STPERROR ;
   END IF;

   IF NVL(A_VERSION, ' ') = ' ' THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJVERSION;
      RAISE STPERROR;
   END IF;

   IF NVL(A_CP_ST, ' ') = ' ' THEN
      
      A_CP_ST := A_ST;
   END IF;

   
   OPEN L_ST_CURSOR(A_ST, A_VERSION);
   FETCH L_ST_CURSOR
   INTO L_ST_REC;
   IF L_ST_CURSOR%NOTFOUND THEN
      CLOSE L_ST_CURSOR;
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_NOOBJECT;
      RAISE STPERROR;
   END IF;
   CLOSE L_ST_CURSOR;
   
   L_LOG_HS := L_ST_REC.LOG_HS;

   
   IF A_CP_VERSION IS NOT NULL THEN
      OPEN L_ST_CURSOR(A_CP_ST, A_CP_VERSION);
      FETCH L_ST_CURSOR
      INTO L_ST_REC;
      IF L_ST_CURSOR%FOUND THEN
         CLOSE L_ST_CURSOR;
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_ALREADYEXISTS;
         RAISE STPERROR;
      END IF;
      CLOSE L_ST_CURSOR;
   END IF;

   
   
   IF A_CP_VERSION IS NULL THEN
      
      IF A_ST = A_CP_ST THEN
         A_CP_VERSION := A_VERSION;
         L_RET_CODE := UNVERSION.GETHIGHESTMINORVERSION('st', A_CP_ST, A_CP_VERSION);
         IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
            L_SQLERRM := 'UNVERSION.GetHighestMinorVersion#ret_code='||L_RET_CODE||'#st='||A_CP_ST||'version='||A_CP_VERSION;
            RAISE STPERROR;
         END IF;

         L_RET_CODE := UNVERSION.GETNEXTMINORVERSION(A_CP_VERSION);
         IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
            L_SQLERRM := 'UNVERSION.GetNextMinorVersion#ret_code='||L_RET_CODE||'#version='||A_CP_VERSION;
            RAISE STPERROR;
         END IF;
      ELSE
         L_RET_CODE := UNVERSION.GETHIGHESTMAJORVERSION('st', A_CP_ST, A_CP_VERSION);
         IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
            L_SQLERRM := 'UNVERSION.GetHighestMajorVersion#ret_code='||L_RET_CODE||'#st='||A_CP_ST;
            RAISE STPERROR;
         END IF;

         L_RET_CODE := UNVERSION.GETNEXTMAJORVERSION(A_CP_VERSION);
         IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS THEN
            UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
            L_SQLERRM := 'UNVERSION.GetNextMajorVersion#ret_code='||L_RET_CODE||'#version='||A_CP_VERSION;
            RAISE STPERROR;
         END IF;
         
      END IF;
   END IF;

   
   
   
   
   
   
   L_RET_CODE := UNAPIGEN.GETAUTHORISATION('st', A_CP_ST, A_CP_VERSION, L_TEMP_LC,
                                           L_TEMP_LC_VERSION, L_TEMP_SS, L_TEMP_ALLOW_MODIFY,
                                           L_TEMP_ACTIVE, L_TEMP_LOG_HS);

   IF L_RET_CODE <> UNAPIGEN.DBERR_NOOBJECT  THEN
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_ALREADYEXISTS;
      RAISE STPERROR;
   END IF;

   
   

   
   
   L_SQL_STRING := 'INSERT INTO utst(st, version, description, description2, is_template, '||
                   'confirm_userid, shelf_life_val, shelf_life_unit, nr_planned_sc, freq_tp, '||
                   'freq_val, freq_unit, invert_freq, last_sched, last_sched_tz, last_cnt, last_val, priority, '||
                   'label_format, descr_doc, allow_any_pp, sc_uc, sc_lc, sc_lc_version, '||
                   'inherit_au, inherit_gk, last_comment, st_class, log_hs, allow_modify, '||
                   'active, lc, lc_version, ss';
   FOR I IN 1..UNAPIGEN.P_DATADOMAINS LOOP
      L_SQL_STRING := L_SQL_STRING||', ar'||I;
   END LOOP;
   L_SQL_STRING := L_SQL_STRING||') ';
   L_SQL_STRING := L_SQL_STRING||'SELECT :a_cp_st, :a_cp_version, description, '||
                   'description2, is_template, confirm_userid, shelf_life_val, shelf_life_unit, '||
                   'nr_planned_sc, freq_tp, freq_val, freq_unit, invert_freq, last_sched, last_sched_tz, '||
                   'last_cnt, last_val, priority, label_format, descr_doc, allow_any_pp, sc_uc, '||
                   'sc_lc, sc_lc_version, inherit_au, inherit_gk, last_comment, st_class, '||
                   'log_hs, ''#'', ''0'', lc, lc_version, NULL';
   FOR I IN 1..UNAPIGEN.P_DATADOMAINS LOOP
      L_SQL_STRING := L_SQL_STRING||', ar'||I;
   END LOOP;
   L_SQL_STRING := L_SQL_STRING||' FROM utst WHERE st = :a_st'||
                                             ' AND version = :a_version';
   L_DYN_CURSOR := DBMS_SQL.OPEN_CURSOR;
   BEGIN
      DBMS_SQL.PARSE(L_DYN_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
      DBMS_SQL.BIND_VARIABLE(L_DYN_CURSOR, ':a_st', A_ST);
      DBMS_SQL.BIND_VARIABLE(L_DYN_CURSOR, ':a_version', A_VERSION);
      DBMS_SQL.BIND_VARIABLE(L_DYN_CURSOR, ':a_cp_st', A_CP_ST);
      DBMS_SQL.BIND_VARIABLE(L_DYN_CURSOR, ':a_cp_version', A_CP_VERSION);
      L_RET_CODE := DBMS_SQL.EXECUTE(L_DYN_CURSOR);
   EXCEPTION
   WHEN OTHERS THEN
      L_SQLERRM := 'Error while copying data for table utst#sqlcode='||SQLCODE;
      L_SQLERRM2 := 'Used Sql statement: '||SUBSTR(L_SQL_STRING,1,230);
      UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
      RAISE STPERROR;
   END;
   L_SQLERRM2 := NULL;
   
   
   
   INSERT INTO UTSTAU
   (ST, VERSION, AU, AU_VERSION, AUSEQ, VALUE)
   SELECT A_CP_ST, A_CP_VERSION, AU, AU_VERSION, AUSEQ, VALUE
   FROM UTSTAU
   WHERE ST = A_ST
     AND VERSION = A_VERSION;

   

   INSERT INTO UTSTIP
   (ST, VERSION, IP, IP_VERSION, SEQ, IS_PROTECTED, HIDDEN, FREQ_TP, FREQ_VAL, FREQ_UNIT,
    INVERT_FREQ, LAST_SCHED, LAST_SCHED_TZ, LAST_CNT, LAST_VAL, INHERIT_AU)
   SELECT A_CP_ST, A_CP_VERSION, IP, IP_VERSION, SEQ, IS_PROTECTED, HIDDEN, FREQ_TP,
          FREQ_VAL, FREQ_UNIT, INVERT_FREQ, LAST_SCHED, LAST_SCHED_TZ, LAST_CNT, LAST_VAL, INHERIT_AU
   FROM UTSTIP
   WHERE ST = A_ST
     AND VERSION = A_VERSION;

   INSERT INTO UTSTIPAU
   (ST, VERSION, IP, IP_VERSION, AU, AU_VERSION, AUSEQ, VALUE)
   SELECT A_CP_ST, A_CP_VERSION, IP, IP_VERSION, AU, AU_VERSION, AUSEQ, VALUE
   FROM UTSTIPAU
   WHERE ST = A_ST
     AND VERSION = A_VERSION;

   INSERT INTO UTSTGK
   (ST, VERSION, GK, GK_VERSION, GKSEQ, VALUE)
   SELECT A_CP_ST, A_CP_VERSION, GK, GK_VERSION, GKSEQ, VALUE
   FROM UTSTGK
   WHERE ST = A_ST
     AND VERSION = A_VERSION;
   
   INSERT INTO UTSTPP
   (ST, VERSION, PP, PP_VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, 
    SEQ, FREQ_TP, FREQ_VAL, FREQ_UNIT, INVERT_FREQ, LAST_SCHED, LAST_SCHED_TZ,
    LAST_CNT, LAST_VAL, INHERIT_AU)
   SELECT A_CP_ST, A_CP_VERSION, PP, PP_VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, 
          SEQ, FREQ_TP, FREQ_VAL, FREQ_UNIT, INVERT_FREQ, LAST_SCHED, LAST_SCHED_TZ, 
          LAST_CNT, LAST_VAL, INHERIT_AU
   FROM UTSTPP
   WHERE ST = A_ST
     AND VERSION = A_VERSION;

   INSERT INTO UTSTPPAU
   (ST, VERSION, PP, PP_VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5,
    AU, AU_VERSION, AUSEQ, VALUE)
   SELECT A_CP_ST, A_CP_VERSION, PP, PP_VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, 
          AU, AU_VERSION, AUSEQ, VALUE
   FROM UTSTPPAU
   WHERE ST = A_ST
     AND VERSION = A_VERSION;

   INSERT INTO UTSTPRFREQ
   (ST, VERSION, PP, PP_VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, PR, PR_VERSION, 
    FREQ_TP, FREQ_VAL, FREQ_UNIT, INVERT_FREQ,
    LAST_SCHED, LAST_SCHED_TZ, LAST_CNT, LAST_VAL)
   SELECT A_CP_ST, A_CP_VERSION, PP, PP_VERSION, PP_KEY1, PP_KEY2, PP_KEY3, PP_KEY4, PP_KEY5, PR, PR_VERSION,
          FREQ_TP, FREQ_VAL, FREQ_UNIT, INVERT_FREQ, LAST_SCHED, LAST_SCHED_TZ, LAST_CNT, LAST_VAL
   FROM UTSTPRFREQ
   WHERE ST = A_ST
     AND VERSION = A_VERSION;

   INSERT INTO UTSTMTFREQ
   (ST, VERSION, PR, PR_VERSION, MT, MT_VERSION, FREQ_TP, FREQ_VAL, FREQ_UNIT, INVERT_FREQ,
   LAST_SCHED, LAST_SCHED_TZ, LAST_CNT, LAST_VAL)
   SELECT A_CP_ST, A_CP_VERSION, PR, PR_VERSION, MT, MT_VERSION,
          FREQ_TP, FREQ_VAL, FREQ_UNIT, INVERT_FREQ, LAST_SCHED, LAST_SCHED_TZ, LAST_CNT, LAST_VAL
   FROM UTSTMTFREQ
   WHERE ST = A_ST
     AND VERSION = A_VERSION;
   
   
   

   
   FOR L_TABLE_REC IN L_ALLSTGK_TABLES_CURSOR LOOP
      L_SQL_STRING := 'INSERT INTO '||L_TABLE_REC.TABLE_NAME||
                      ' ('||SUBSTR(L_TABLE_REC.TABLE_NAME,7)||', st, version) '||
                      'SELECT '||SUBSTR(L_TABLE_REC.TABLE_NAME,7)||', :a_cp_st, :a_cp_version'||
                      ' FROM '||L_TABLE_REC.TABLE_NAME||
                      ' WHERE st = :a_st'||
                      ' AND version = :a_version';
      BEGIN
         DBMS_SQL.PARSE(L_DYN_CURSOR, L_SQL_STRING, DBMS_SQL.V7); 
         DBMS_SQL.BIND_VARIABLE(L_DYN_CURSOR, ':a_st', A_ST);
         DBMS_SQL.BIND_VARIABLE(L_DYN_CURSOR, ':a_version', A_VERSION);
         DBMS_SQL.BIND_VARIABLE(L_DYN_CURSOR, ':a_cp_st', A_CP_ST);
         DBMS_SQL.BIND_VARIABLE(L_DYN_CURSOR, ':a_cp_version', A_CP_VERSION);
         L_RET_CODE := DBMS_SQL.EXECUTE(L_DYN_CURSOR);
      EXCEPTION
      WHEN DUP_VAL_ON_INDEX THEN
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_UNIQUEGK;
         RAISE STPERROR;
      WHEN OTHERS THEN
         L_SQLERRM := 'Error while copying data for table '||L_TABLE_REC.TABLE_NAME||'#sqlcode='||SQLCODE;
         L_SQLERRM2 := 'Used Sql statement: '||SUBSTR(L_SQL_STRING,1,230);
         UNAPIGEN.P_TXN_ERROR := UNAPIGEN.DBERR_GENFAIL;
         RAISE STPERROR;
      END;
   END LOOP;
   L_SQLERRM2 := NULL;
   DBMS_SQL.CLOSE_CURSOR(L_DYN_CURSOR);

   
   L_EVENT_TP := 'ObjectCreated';
   L_EV_SEQ_NR := -1;
   L_RET_CODE := UNAPIEV.INSERTEVENT('NewStVersion',UNAPIGEN.P_EVMGR_NAME,
                                     'st', A_CP_ST, '', '', '', L_EVENT_TP,
                                     'version='||A_CP_VERSION, L_EV_SEQ_NR);
   IF L_RET_CODE <> UNAPIGEN.DBERR_SUCCESS  THEN
      UNAPIGEN.P_TXN_ERROR := L_RET_CODE;
      RAISE STPERROR;
   END IF;

   IF L_LOG_HS = '1' THEN
      IF A_ST = A_CP_ST THEN
         INSERT INTO UTSTHS (ST, VERSION, WHO, WHO_DESCRIPTION, WHAT,
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_CP_ST, A_CP_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION,
                 L_EVENT_TP,
                 'sample type "'||A_CP_ST||'" version "'||A_CP_VERSION||'" is created based on version "'||A_VERSION||'"',
                 CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      ELSE
         INSERT INTO UTSTHS (ST, VERSION, WHO, WHO_DESCRIPTION, WHAT,
                             WHAT_DESCRIPTION, LOGDATE, LOGDATE_TZ, WHY, TR_SEQ, EV_SEQ)
         VALUES (A_CP_ST, A_CP_VERSION, UNAPIGEN.P_USER, UNAPIGEN.P_USER_DESCRIPTION,
                 L_EVENT_TP,
                 'sample type "'||A_CP_ST||'" version "'||A_CP_VERSION||'" is created based on sample type "'||A_ST||'" version "'||A_VERSION||'"',
                 CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, A_MODIFY_REASON, UNAPIGEN.P_TR_SEQ, L_EV_SEQ_NR);
      END IF;
   END IF;

   IF UNAPIGEN.ENDTXN <> UNAPIGEN.DBERR_SUCCESS THEN
      RAISE STPERROR;
   END IF;

   RETURN (UNAPIGEN.DBERR_SUCCESS);

EXCEPTION
WHEN OTHERS THEN
   IF SQLCODE <> 1 THEN
      UNAPIGEN.LOGERROR('CopySampleType',SQLERRM);
   ELSIF L_SQLERRM IS NOT NULL THEN
      UNAPIGEN.LOGERROR('CopySampleType',L_SQLERRM);
      IF L_SQLERRM2 IS NOT NULL THEN
         UNAPIGEN.LOGERROR('CopySampleType',L_SQLERRM2);
      END IF;
   END IF ;
   IF L_ST_CURSOR%ISOPEN THEN
      CLOSE L_ST_CURSOR;
   END IF;
   IF DBMS_SQL.IS_OPEN(L_DYN_CURSOR) THEN
      DBMS_SQL.CLOSE_CURSOR(L_DYN_CURSOR);
   END IF;
   RETURN(UNAPIGEN.ABORTTXN(UNAPIGEN.P_TXN_ERROR,'CopySampleType'));
END COPYSAMPLETYPE;




BEGIN
   P_ST_CURSOR := NULL;
   P_STP_CURSOR := NULL;
   P_STPR_CURSOR := NULL;
END UNAPIST;
CREATE OR REPLACE PACKAGE BODY iapiSpecification
AS





   
   
   
   







   
   FUNCTION GETPACKAGEVERSION
      RETURN IAPITYPE.STRING_TYPE
   IS

      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'GetPackageVersion';
   BEGIN



       RETURN(    IAPIGENERAL.GETVERSION
              || ' ($Revision: 6.7.0.11 (06.07.00.11-00.00) $)' );

   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   END GETPACKAGEVERSION;









    

    PROCEDURE ENABLESHCACHE
    IS
    BEGIN
        GNSHCACHEENABLED := GNSHCACHEENABLED +1;
    END;
    

    

    PROCEDURE DISABLESHCACHE
    IS
    BEGIN
        GNSHCACHEENABLED := GNSHCACHEENABLED -1;
        IF (GNSHCACHEENABLED <= 0) THEN
            GTSHCACHE.DELETE;
        END IF;
    END;
    

    

    FUNCTION GETSHFROMCACHE(
        ANPARTNO IN VARCHAR2,
        ANREVISION IN NUMBER,
        ARCACHEITEM OUT SHCACHE_REC_TYPE
        )
        RETURN IAPITYPE.ERRORNUM_TYPE
    IS
    BEGIN
        IF (GNSHCACHEENABLED >= 1) THEN
           ARCACHEITEM := GTSHCACHE(ANPARTNO||'#'||ANREVISION);
           RETURN IAPICONSTANTDBERROR.DBERR_SUCCESS;
        ELSE
            RETURN IAPICONSTANTDBERROR.DBERR_GENFAIL;
        END IF;
    EXCEPTION
        WHEN OTHERS
        THEN
            RETURN NULL;
    END;
    

    

    PROCEDURE INSERTTOSHCACHE(
        ANPARTNO IN VARCHAR2,
        ANREVISION IN NUMBER
        )
    IS
      LRCACHEITEM SHCACHE_REC_TYPE;
    BEGIN
        IF (GNSHCACHEENABLED >= 1) THEN
          SELECT
            SH.PART_NO PARTNO,
            SH.REVISION REVISION,
            DECODE(SH.INT_PART_NO, NULL, 0,1 ) ISLOCALIZED,
            SH.INTL ISINTERNATIONAL,
            S.STATUS_TYPE STATUSTYPE,
            DECODE( SH.MULTILANG, 1, 1, 0 ) ISMULTILANGUAGE,
            INT_PART_NO,
            INT_PART_REV,
            OWNER,
            LOCKED
          INTO LRCACHEITEM
          FROM SPECIFICATION_HEADER SH,
                   STATUS S;
          GTSHCACHE(ANPARTNO||'#'||ANREVISION) := LRCACHEITEM;
        END IF;
    EXCEPTION
        WHEN OTHERS
        THEN NULL;
    END;
    


   FUNCTION GETBASECOLUMNS(
      ASALIAS                    IN       IAPITYPE.STRING_TYPE DEFAULT '' )
      RETURN IAPITYPE.BASECOLUMNS_TYPE
   IS










      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'GetBaseColumns';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LCBASECOLUMNS                 IAPITYPE.BASECOLUMNS_TYPE := NULL;
      LSALIAS                       IAPITYPE.STRING_TYPE := NULL;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      IF ( ASALIAS != '' )
      THEN
         NULL;
      ELSE
         LSALIAS :=    ASALIAS
                    || '.';
      END IF;

      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           LSALIAS,
                           IAPICONSTANT.INFOLEVEL_3 );
      LCBASECOLUMNS :=
            LSALIAS
         || 'ped_group_id '
         || IAPICONSTANTCOLUMN.PEDGROUPIDCOL
         || ','
         || LSALIAS
         || 'description '
         || IAPICONSTANTCOLUMN.PEDGROUPCOL
         || ','
         || LSALIAS
         || 'pit '
         || IAPICONSTANTCOLUMN.PHASEINTOLERANCECOL
         || ','
         || LSALIAS
         || 'ped '
         || IAPICONSTANTCOLUMN.PLANNEDEFFECTIVEDATECOL
         || ','
         || LSALIAS
         || 'access_group '
         || IAPICONSTANTCOLUMN.ACCESSGROUPIDCOL
         || ','
         || 'f_ag_descr(pg.access_group) '
         || IAPICONSTANTCOLUMN.ACCESSGROUPCOL;
      RETURN( LCBASECOLUMNS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END GETBASECOLUMNS;


   FUNCTION GETCONFIGURATIONSETTING(
      ASPARAMETER                IN       IAPITYPE.PARAMETER_TYPE,
      ASSECTION                  IN       IAPITYPE.CONFIGURATIONSECTION_TYPE DEFAULT IAPICONSTANT.CFG_SECTION_STANDARD )
      RETURN IAPITYPE.PARAMETERDATA_TYPE
   IS








      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'GetConfigurationSetting';
      LSDATA                        IAPITYPE.PARAMETERDATA_TYPE;
      LNRETURN                      IAPITYPE.ERRORNUM_TYPE;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );
      LNRETURN := IAPIGENERAL.GETCONFIGURATIONSETTING( ASPARAMETER,
                                                       ASSECTION,
                                                       LSDATA );
      RETURN LSDATA;
   END GETCONFIGURATIONSETTING;

   
   
   FUNCTION CHECKPARTCODEPREFIX(
      ASPREFIX                   IN       IAPITYPE.PREFIX_TYPE,
      ASCODE                     IN       IAPITYPE.PARTNO_TYPE)

      RETURN IAPITYPE.BOOLEAN_TYPE
     
   IS
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'CheckPartCodePrefix';
      
      LSSTRING                      IAPITYPE.STRINGVAL_TYPE(20);
      LSFOUND                       IAPITYPE.SINGLEVARCHAR_TYPE;
   BEGIN

      IF (NOT IAPIGENERAL.SESSION.SETTINGS.INTERNATIONAL)
      THEN
         IF ASPREFIX IS NULL
         THEN
             
             LSSTRING := SUBSTR(ASCODE, 1, INSTR( ASCODE, '-') -1);

                 









            
            LSFOUND := F_CHECK_PREFIX(LSSTRING);

            IF (LSFOUND = 'Y')
            THEN
                 
                 IAPIGENERAL.LOGERROR( GSSOURCE,
                                       LSMETHOD,
                                       'In Local mode an international prefix is used for the specification.' );

                RETURN( 0 );
            END IF;

            RETURN( 1 );
        ELSE 
             
             IAPIGENERAL.LOGERROR( GSSOURCE,
                                   LSMETHOD,
                                   'In Local mode prefix is specified for the specification.' );

             RETURN( 0 );
        END IF;

      ELSE 
         RETURN( 1 );
      END IF;

   END CHECKPARTCODEPREFIX;
   


   FUNCTION GETPARTCODE(
      ASPREFIX                   IN       IAPITYPE.PREFIX_TYPE,
      ASCODE                     IN       IAPITYPE.PARTNO_TYPE )
      RETURN IAPITYPE.PARTNO_TYPE
   IS
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'GetPartCode';
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      IF IAPIGENERAL.SESSION.SETTINGS.INTERNATIONAL
      THEN
         IF    ASPREFIX IS NULL
            OR ASCODE IS NULL
         THEN
            RETURN NULL;
         END IF;

         RETURN    ASPREFIX
                || '-'
                || ASCODE;
      ELSE
         RETURN ASCODE;
      END IF;
   END GETPARTCODE;


   FUNCTION VALIDATEPARTNOPED(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ADPED                      IN       IAPITYPE.DATE_TYPE,
      AQERRORS                   IN OUT   IAPITYPE.REF_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'ValidatePartNoPed';
      LNREVISION                    IAPITYPE.REVISION_TYPE DEFAULT 1;

      CURSOR LQGETREVISION(
         ASPARTNO                            IAPITYPE.PARTNO_TYPE )
      IS
         SELECT   MAX( REVISION )
                + 1 REVISION
           FROM SPECIFICATION_HEADER
          WHERE PART_NO = ASPARTNO;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      IF NOT ADPED IS NULL
      THEN
         IF ADPED < SYSDATE
         THEN
            LNRETVAL := IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                            LSMETHOD,
                                                            IAPICONSTANTDBERROR.DBERR_INVALIDPED );
            LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'EffectiveDate',
                                                    IAPIGENERAL.GETLASTERRORTEXT( ),
                                                    GTERRORS );
         END IF;
      END IF;

      FOR LRGETREVISION IN LQGETREVISION( ASPARTNO )
      LOOP
         LNREVISION := LRGETREVISION.REVISION;
      END LOOP;

      LNRETVAL := VALIDATEPED( ASPARTNO,
                               LNREVISION,
                               ADPED,
                               0 );

      IF LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS
      THEN
         LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'EffectiveDate',
                                                 IAPIGENERAL.GETLASTERRORTEXT( ),
                                                 GTERRORS );
      END IF;

      IF ( GTERRORS.COUNT > 0 )
      THEN
         
         LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                                AQERRORS );
         RETURN( IAPICONSTANTDBERROR.DBERR_ERRORLIST );
      END IF;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END VALIDATEPARTNOPED;


   FUNCTION VALIDATEFIELDMANDATORY(
      ASPREFIX                   IN       IAPITYPE.PREFIX_TYPE,
      ASCODE                     IN       IAPITYPE.PARTNO_TYPE,
      ASDESCRIPTION              IN       IAPITYPE.STRINGVAL_TYPE,
      ASPED                      IN       IAPITYPE.DATE_TYPE,
      ANMETRIC                   IN       IAPITYPE.BOOLEAN_TYPE,
      ANMULTILANGUAGE            IN       IAPITYPE.BOOLEAN_TYPE,
      ASFRAMENO                  IN       IAPITYPE.FRAMENO_TYPE,
      ANFRAMEREVISION            IN       IAPITYPE.FRAMEREVISION_TYPE,
      ANFRAMEOWNER               IN       IAPITYPE.OWNER_TYPE,
      ANFRAMEMASK                IN       IAPITYPE.ID_TYPE,
      ANWORKFLOWGROUPID          IN       IAPITYPE.ID_TYPE,
      ANACCESSGROUPID            IN       IAPITYPE.ID_TYPE,
      ANSPECTYPEID               IN       IAPITYPE.ID_TYPE,
      ASUOM                      IN       IAPITYPE.BASEUOM_TYPE,
      ASCONVERSIONFACTOR         IN       IAPITYPE.NUMVAL_TYPE,
      ASCONVERSIONUOM            IN       IAPITYPE.BASETOUNIT_TYPE,
      AQERRORS                   IN OUT   IAPITYPE.REF_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'ValidateFieldMandatory';
      LNAUTONUMBERING               IAPITYPE.NUMVAL_TYPE DEFAULT 1;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      IF IAPIGENERAL.SESSION.SETTINGS.INTERNATIONAL
      THEN
         IF ASPREFIX IS NULL
         THEN
            LNRETVAL := IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                            LSMETHOD,
                                                            IAPICONSTANTDBERROR.DBERR_PREFIXISMANDATORY );
            LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'Prefix',
                                                    IAPIGENERAL.GETLASTERRORTEXT( ),
                                                    GTERRORS );
         END IF;

         IF ASCODE IS NULL
         THEN
            LNRETVAL := IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                            LSMETHOD,
                                                            IAPICONSTANTDBERROR.DBERR_CODEISMANDATORY );
            LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'Code',
                                                    IAPIGENERAL.GETLASTERRORTEXT( ),
                                                    GTERRORS );
         END IF;
      ELSE
         
         
         BEGIN
            LNAUTONUMBERING := GETCONFIGURATIONSETTING( 'AutoNumbering',
                                                        'specx' );
         EXCEPTION
            WHEN OTHERS
            THEN
               NULL;
         END;

         IF     LNAUTONUMBERING = 0
            AND ASCODE IS NULL
         THEN
            LNRETVAL := IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                            LSMETHOD,
                                                            IAPICONSTANTDBERROR.DBERR_CODEISMANDATORY );
            LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'Code',
                                                    IAPIGENERAL.GETLASTERRORTEXT( ),
                                                    GTERRORS );
         END IF;
      END IF;

      IF ASDESCRIPTION IS NULL
      THEN
         LNRETVAL := IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                         LSMETHOD,
                                                         IAPICONSTANTDBERROR.DBERR_DESCREMPTY );
         LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'Description',
                                                 IAPIGENERAL.GETLASTERRORTEXT( ),
                                                 GTERRORS );
      END IF;

      IF ANSPECTYPEID IS NULL
      THEN
         LNRETVAL := IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                         LSMETHOD,
                                                         IAPICONSTANTDBERROR.DBERR_SPECTYPEISMANDATORY );
         LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'SpecificationType',
                                                 IAPIGENERAL.GETLASTERRORTEXT( ),
                                                 GTERRORS );
      END IF;

      IF    ASFRAMENO IS NULL
         OR ANFRAMEREVISION IS NULL
         OR ANFRAMEOWNER IS NULL
      THEN
         LNRETVAL := IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                         LSMETHOD,
                                                         IAPICONSTANTDBERROR.DBERR_FRAMEISMANDATORY );
         LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'Frame',
                                                 IAPIGENERAL.GETLASTERRORTEXT( ),
                                                 GTERRORS );
      END IF;

      IF ANWORKFLOWGROUPID IS NULL
      THEN
         LNRETVAL := IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                         LSMETHOD,
                                                         IAPICONSTANTDBERROR.DBERR_WORKFLOWGROUPISMANDATORY );
         LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'WorkflowGroup',
                                                 IAPIGENERAL.GETLASTERRORTEXT( ),
                                                 GTERRORS );
      END IF;

      IF ASPED IS NULL
      THEN
         LNRETVAL := IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                         LSMETHOD,
                                                         IAPICONSTANTDBERROR.DBERR_INVALIDPLANEFFDATE );
         LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'EffectiveDate',
                                                 IAPIGENERAL.GETLASTERRORTEXT( ),
                                                 GTERRORS );
      END IF;

      IF ANACCESSGROUPID IS NULL
      THEN
         LNRETVAL := IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                         LSMETHOD,
                                                         IAPICONSTANTDBERROR.DBERR_ACCESSGROUPISMANDATORY );
         LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'AccessGroup',
                                                 IAPIGENERAL.GETLASTERRORTEXT( ),
                                                 GTERRORS );
      END IF;

      IF ASUOM IS NULL
      THEN
         LNRETVAL := IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                         LSMETHOD,
                                                         IAPICONSTANTDBERROR.DBERR_UOMISMANDATORY );
         LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'UoM',
                                                 IAPIGENERAL.GETLASTERRORTEXT( ),
                                                 GTERRORS );
      END IF;

      IF     NOT ASCONVERSIONUOM IS NULL
         AND ASCONVERSIONFACTOR IS NULL
      THEN
         LNRETVAL := IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                         LSMETHOD,
                                                         IAPICONSTANTDBERROR.DBERR_CONVFACTORISMANDATORY );
         LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'ConversionUoM',
                                                 IAPIGENERAL.GETLASTERRORTEXT( ),
                                                 GTERRORS );
      END IF;

      IF ( GTERRORS.COUNT > 0 )
      THEN
         
         LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                                AQERRORS );
         RETURN( IAPICONSTANTDBERROR.DBERR_ERRORLIST );
      END IF;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END VALIDATEFIELDMANDATORY;


   FUNCTION VALIDATEFIELDPARTNO(
      ASPREFIX                   IN       IAPITYPE.PREFIX_TYPE,
      ASCODE                     IN       IAPITYPE.PARTNO_TYPE,
      ANALLOWPREXIST             IN       IAPITYPE.BOOLEAN_TYPE,
      ANPARTEXIST                OUT      IAPITYPE.BOOLEAN_TYPE,
      AQERRORS                   IN OUT   IAPITYPE.REF_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'ValidateFieldPartNo';
      LSPARTNO                      IAPITYPE.PARTNO_TYPE;
      LNCOUNT                       IAPITYPE.NUMVAL_TYPE;
      LS3TIERDB                     IAPITYPE.PARAMETERDATA_TYPE;
      LNAUTONUMBERING               IAPITYPE.BOOLEAN_TYPE DEFAULT 0;

      CURSOR LQGETNUMSH(
         ASPARTNO                            IAPITYPE.PARTNO_TYPE )
      IS
         SELECT COUNT( * ) COUNT
           FROM SPECIFICATION_HEADER
          WHERE PART_NO = ASPARTNO;

      CURSOR LQGETPARTINFO(
         ASPARTNO                            IAPITYPE.PARTNO_TYPE )
      IS
         SELECT PART_NO,
                OBSOLETE
           FROM PART
          WHERE PART_NO = ASPARTNO;

      CURSOR LQGETUSACCESS(
         ASUSERID                            APPLICATION_USER.USER_ID%TYPE )
      IS
         SELECT DECODE( NVL( UPPER( OVERRIDE_PART_VAL ),
                             'Y' ),
                        'Y', 1,
                        0 ) CRLOCPART
           FROM APPLICATION_USER
          WHERE USER_ID = ASUSERID;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );
      ANPARTEXIST := 0;
      LSPARTNO := GETPARTCODE( ASPREFIX,
                               ASCODE );

      IF NOT LSPARTNO IS NULL
      THEN
         
         LS3TIERDB := GETCONFIGURATIONSETTING( '3 tier db' );

         IF     ( NOT IAPIGENERAL.SESSION.SETTINGS.INTERNATIONAL )
            AND ( LS3TIERDB = '1' )
         THEN
            IF ( SUBSTR( LSPARTNO,
                         4,
                         1 ) = '-' )
            THEN
               LNRETVAL := IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                               LSMETHOD,
                                                               IAPICONSTANTDBERROR.DBERR_NODASHALLOWED );
               LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'Code',
                                                       IAPIGENERAL.GETLASTERRORTEXT( ),
                                                       GTERRORS );
            END IF;
         END IF;

         IF ( GTERRORS.COUNT > 0 )
         THEN
            
            LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                                   AQERRORS );
            RETURN( IAPICONSTANTDBERROR.DBERR_ERRORLIST );
         END IF;

         
         FOR LRGETNUMSH IN LQGETNUMSH( LSPARTNO )
         LOOP
            LNCOUNT := LRGETNUMSH.COUNT;
         END LOOP;

         IF ANALLOWPREXIST = 0
         THEN
            IF LNCOUNT > 0
            THEN
               LNRETVAL := IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                               LSMETHOD,
                                                               IAPICONSTANTDBERROR.DBERR_PARTALREADYEXIST,
                                                               LSPARTNO );
               LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'Code',
                                                       IAPIGENERAL.GETLASTERRORTEXT( ),
                                                       GTERRORS );
            END IF;
         END IF;

         IF ( GTERRORS.COUNT > 0 )
         THEN
            
            LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                                   AQERRORS );
            RETURN( IAPICONSTANTDBERROR.DBERR_ERRORLIST );
         END IF;

         
         FOR LRGETPARTINFO IN LQGETPARTINFO( LSPARTNO )
         LOOP
            IF LRGETPARTINFO.OBSOLETE = '1'
            THEN
               LNRETVAL := IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                               LSMETHOD,
                                                               IAPICONSTANTDBERROR.DBERR_PARTOBSOLETE,
                                                               LSPARTNO );
               LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'Code',
                                                       IAPIGENERAL.GETLASTERRORTEXT( ),
                                                       GTERRORS );
            END IF;

            ANPARTEXIST := 1;
         END LOOP;
      END IF;

      IF ( GTERRORS.COUNT > 0 )
      THEN
         
         LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                                AQERRORS );
         RETURN( IAPICONSTANTDBERROR.DBERR_ERRORLIST );
      END IF;

      
      IF     ANPARTEXIST = 0
         AND ( NOT IAPIGENERAL.SESSION.SETTINGS.INTERNATIONAL )
      THEN
         
         
         
         BEGIN
            LNAUTONUMBERING := GETCONFIGURATIONSETTING( 'AutoNumbering',
                                                        'specx' );
         EXCEPTION
            WHEN OTHERS
            THEN
               NULL;
         END;

         IF     ( LNAUTONUMBERING = 1 )
            AND ( ASCODE IS NOT NULL )
         THEN
            FOR LRGETUSACCESS IN LQGETUSACCESS( USER )
            LOOP
               IF LRGETUSACCESS.CRLOCPART = 0
               THEN
                  LNRETVAL := IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                                  LSMETHOD,
                                                                  IAPICONSTANTDBERROR.DBERR_NUMNOTALLOWED );
                  LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'Code',
                                                          IAPIGENERAL.GETLASTERRORTEXT( ),
                                                          GTERRORS );
               END IF;
            END LOOP;
         END IF;
      END IF;

      IF ( GTERRORS.COUNT > 0 )
      THEN
         
         LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                                AQERRORS );
         RETURN( IAPICONSTANTDBERROR.DBERR_ERRORLIST );
      END IF;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END VALIDATEFIELDPARTNO;


   FUNCTION VALIDATEFIELDFRAME(
      ASFRAMENO                  IN       IAPITYPE.FRAMENO_TYPE,
      ANFRAMEREVISION            IN       IAPITYPE.FRAMEREVISION_TYPE,
      ANFRAMEOWNER               IN       IAPITYPE.OWNER_TYPE,
      AQERRORS                   IN OUT   IAPITYPE.REF_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS
      CURSOR LQFRM(
         ASFRAMENO                  IN       IAPITYPE.FRAMENO_TYPE,
         ANFRAMEREVISION            IN       IAPITYPE.FRAMEREVISION_TYPE,
         ANFRAMEOWNER               IN       IAPITYPE.OWNER_TYPE )
      IS
         SELECT FRAME_NO,
                REVISION,
                OWNER,
                INTL
           FROM FRAME_HEADER
          WHERE STATUS = 2
            AND FRAME_NO = ASFRAMENO
            AND REVISION = ANFRAMEREVISION
            AND OWNER = ANFRAMEOWNER;

      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'ValidateFieldFrame';
      LNCOUNT                       IAPITYPE.BOOLEAN_TYPE DEFAULT 0;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      FOR LRFRM IN LQFRM( ASFRAMENO,
                          ANFRAMEREVISION,
                          ANFRAMEOWNER )
      LOOP
         LNCOUNT := 1;

         IF IAPIGENERAL.SESSION.SETTINGS.INTERNATIONAL
         THEN
            IF LRFRM.INTL = 0
            THEN
               LNRETVAL :=
                  IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                      LSMETHOD,
                                                      IAPICONSTANTDBERROR.DBERR_FRAMENOTINTERNATIONAL,
                                                      ASFRAMENO,
                                                      ANFRAMEREVISION,
                                                      ANFRAMEOWNER );
               LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'Frame',
                                                       IAPIGENERAL.GETLASTERRORTEXT( ),
                                                       GTERRORS );
            END IF;
         END IF;
      END LOOP;

      IF LNCOUNT = 0
      THEN
         LNRETVAL :=
            IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                LSMETHOD,
                                                IAPICONSTANTDBERROR.DBERR_FRAMENOISNOTCURRENT,
                                                ASFRAMENO,
                                                ANFRAMEREVISION,
                                                ANFRAMEOWNER );
         LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'Frame',
                                                 IAPIGENERAL.GETLASTERRORTEXT( ),
                                                 GTERRORS );
      END IF;

      IF ( GTERRORS.COUNT > 0 )
      THEN
         
         LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                                AQERRORS );
         RETURN( IAPICONSTANTDBERROR.DBERR_ERRORLIST );
      END IF;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END VALIDATEFIELDFRAME;


   FUNCTION VALIDATEFIELDSPECTYPE(
      ANSPECTYPEID               IN       IAPITYPE.ID_TYPE,
      AQERRORS                   IN OUT   IAPITYPE.REF_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS
      CURSOR LQST(
         ANSPECTYPEID                        IAPITYPE.ID_TYPE )
      IS
         SELECT CLASS ST_ID,
                STATUS,
                INTL
           FROM CLASS3
          WHERE CLASS = ANSPECTYPEID
            AND STATUS = 0;

      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'ValidateFieldSpecType';
      LNCOUNT                       IAPITYPE.BOOLEAN_TYPE;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      
      FOR LRST IN LQST( ANSPECTYPEID )
      LOOP
         
         LNCOUNT := 1;

         IF IAPIGENERAL.SESSION.SETTINGS.INTERNATIONAL
         THEN
            IF LRST.INTL = 0
            THEN
               LNRETVAL := IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                               LSMETHOD,
                                                               IAPICONSTANTDBERROR.DBERR_SPECTYPEISNOTINTL );
               LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'SpecificationType',
                                                       IAPIGENERAL.GETLASTERRORTEXT( ),
                                                       GTERRORS );
            END IF;
         END IF;
      END LOOP;

      IF LNCOUNT = 0
      THEN
         LNRETVAL := IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                         LSMETHOD,
                                                         IAPICONSTANTDBERROR.DBERR_SPECTYPEISHISTORIC );
         LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'SpecificationType',
                                                 IAPIGENERAL.GETLASTERRORTEXT( ),
                                                 GTERRORS );
      END IF;

      IF ( GTERRORS.COUNT > 0 )
      THEN
         
         LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                                AQERRORS );
         RETURN( IAPICONSTANTDBERROR.DBERR_ERRORLIST );
      END IF;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END VALIDATEFIELDSPECTYPE;


   FUNCTION CANHAVEMASK(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE )
      RETURN IAPITYPE.LOGICAL_TYPE
   IS
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'CanHaveMask';
      LSPREFIX                      IAPITYPE.PREFIX_TYPE;
      LSPREFIX_TYPE                 IAPITYPE.PREFIXTYPE_TYPE;
      LSCODE                        IAPITYPE.PARTNO_TYPE;
      LNOWNER                       IAPITYPE.OWNER_TYPE;

      CURSOR LQGETPREFIX(
         ASPREFIX                            IAPITYPE.PREFIX_TYPE )
      IS
         SELECT PREFIX_TYPE
           FROM SPEC_PREFIX_DESCR
          WHERE PREFIX = ASPREFIX;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );
      LNRETVAL := GETPREFIXANDCODE( ASPARTNO,
                                    LSPREFIX,
                                    LNOWNER,
                                    LSCODE );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IAPIGENERAL.LOGINFO( GSSOURCE,
                              LSMETHOD,
                              IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN FALSE;
      END IF;

      IF LSPREFIX IS NULL
      THEN
         RETURN TRUE;
      END IF;

      FOR LRGETPREFIX IN LQGETPREFIX( LSPREFIX )
      LOOP
         LSPREFIX_TYPE := LRGETPREFIX.PREFIX_TYPE;
      END LOOP;

      IF LSPREFIX_TYPE = 'G'
      THEN
         RETURN FALSE;
      ELSE
         RETURN TRUE;
      END IF;
   END CANHAVEMASK;


   FUNCTION VALIDATEFIELDMASK(
      ASFRAMENO                  IN       IAPITYPE.FRAMENO_TYPE,
      ANFRAMEREVISION            IN       IAPITYPE.FRAMEREVISION_TYPE,
      ANFRAMEOWNER               IN       IAPITYPE.OWNER_TYPE,
      ANFRAMEMASK                IN       IAPITYPE.ID_TYPE,
      AQERRORS                   IN OUT   IAPITYPE.REF_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'ValidateFieldMask';
      LNCOUNT                       IAPITYPE.NUMVAL_TYPE;

      CURSOR LQFRMMASK(
         ASFRAMENO                           IAPITYPE.FRAMENO_TYPE,
         ANREVISION                          IAPITYPE.FRAMEREVISION_TYPE,
         ANOWNER                             IAPITYPE.OWNER_TYPE )
      IS
         SELECT COUNT( * ) COUNT
           FROM ITFRMV
          WHERE FRAME_NO = ASFRAMENO
            AND REVISION = ANREVISION
            AND OWNER = ANOWNER
            AND STATUS = 0;

      CURSOR LQFRMMASKVALID(
         ASFRAMENO                           IAPITYPE.FRAMENO_TYPE,
         ANREVISION                          IAPITYPE.FRAMEREVISION_TYPE,
         ANOWNER                             IAPITYPE.OWNER_TYPE,
         ANMASK                              IAPITYPE.ID_TYPE )
      IS
         SELECT COUNT( * ) COUNT
           FROM ITFRMV
          WHERE FRAME_NO = ASFRAMENO
            AND REVISION = ANREVISION
            AND OWNER = ANOWNER
            AND VIEW_ID = ANMASK
            AND STATUS = 0;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      FOR LRFRMMASK IN LQFRMMASK( ASFRAMENO,
                                  ANFRAMEREVISION,
                                  ANFRAMEOWNER )
      LOOP
         LNCOUNT := LRFRMMASK.COUNT;
      END LOOP;

      IF LNCOUNT = 0
      THEN
         IF ANFRAMEMASK IS NOT NULL
         THEN
            LNRETVAL :=
               IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                   LSMETHOD,
                                                   IAPICONSTANTDBERROR.DBERR_FRAMEMASKNOTEXIST,
                                                   
                                                   
                                                   F_GET_MASK(ASFRAMENO, ANFRAMEREVISION, ANFRAMEOWNER, ANFRAMEMASK),
                                                   
                                                   ASFRAMENO,
                                                   ANFRAMEREVISION,
                                                   ANFRAMEOWNER );
            LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'FrameMask',
                                                    IAPIGENERAL.GETLASTERRORTEXT( ),
                                                    GTERRORS );
         END IF;
      ELSE
         IF     LNCOUNT > 1
            AND ANFRAMEMASK IS NULL
         THEN
            LNRETVAL := IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                            LSMETHOD,
                                                            IAPICONSTANTDBERROR.DBERR_FRAMEMASKMANDATORY );
            LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'FrameMask',
                                                    IAPIGENERAL.GETLASTERRORTEXT( ),
                                                    GTERRORS );
         END IF;

         IF ( GTERRORS.COUNT > 0 )
         THEN
            
            LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                                   AQERRORS );
            RETURN( IAPICONSTANTDBERROR.DBERR_ERRORLIST );
         END IF;

         
         IF ANFRAMEMASK IS NOT NULL
         THEN
            LNCOUNT := 0;

            FOR LRFRMMASKVALID IN LQFRMMASKVALID( ASFRAMENO,
                                                  ANFRAMEREVISION,
                                                  ANFRAMEOWNER,
                                                  ANFRAMEMASK )
            LOOP
               LNCOUNT := 1;
            END LOOP;

            IF LNCOUNT = 0
            THEN
               LNRETVAL :=
                  IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                      LSMETHOD,
                                                      IAPICONSTANTDBERROR.DBERR_FRAMEMASKNOTEXIST,
                                                      
                                                      
                                                      F_GET_MASK(ASFRAMENO, ANFRAMEREVISION, ANFRAMEOWNER, ANFRAMEMASK),
                                                      
                                                      ASFRAMENO,
                                                      ANFRAMEREVISION,
                                                      ANFRAMEOWNER );
               LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'FrameMask',
                                                       IAPIGENERAL.GETLASTERRORTEXT( ),
                                                       GTERRORS );
            END IF;
         END IF;
      END IF;

      IF ( GTERRORS.COUNT > 0 )
      THEN
         
         LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                                AQERRORS );
         RETURN( IAPICONSTANTDBERROR.DBERR_ERRORLIST );
      END IF;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END VALIDATEFIELDMASK;


   FUNCTION VALIDATEFIELDWORKFLOWGROUP(
      ANWORKFLOWGROUPID          IN       IAPITYPE.ID_TYPE,
      AQERRORS                   IN OUT   IAPITYPE.REF_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'ValidateFieldWorkflowGroup';
      LNCOUNT                       IAPITYPE.NUMVAL_TYPE;

      
      CURSOR LQWFG(
         ANWORKFLOWGROUPID                   IAPITYPE.ID_TYPE )
      IS
         SELECT COUNT( * ) COUNT
           FROM WORKFLOW_GROUP WG
          WHERE WG.WORKFLOW_GROUP_ID IN(
                   SELECT WG.WORKFLOW_GROUP_ID
                     FROM WORK_FLOW_GROUP WGIT,
                          STATUS SS,
                          WORKFLOW_GROUP WG
                    WHERE WGIT.INITIAL_STATUS = SS.STATUS
                      AND SS.STATUS_TYPE = IAPICONSTANT.STATUSTYPE_DEVELOPMENT
                      AND WG.WORK_FLOW_ID = WGIT.WORK_FLOW_ID
                      AND WG.WORKFLOW_GROUP_ID NOT IN( SELECT WORKFLOW_GROUP_ID
                                                        FROM USER_WORKFLOW_GROUP )
                   UNION
                   SELECT USWFG.WORKFLOW_GROUP_ID
                     FROM USER_WORKFLOW_GROUP USWFG,
                          STATUS SS,
                          WORK_FLOW_GROUP WGIT,
                          
                          
                          WORKFLOW_GROUP WG
                          
                    WHERE USER_GROUP_ID IN( SELECT USER_GROUP_ID
                                             FROM USER_GROUP_LIST
                                            WHERE USER_ID = USER )
                      AND WGIT.INITIAL_STATUS = SS.STATUS
                      AND SS.STATUS_TYPE = IAPICONSTANT.STATUSTYPE_DEVELOPMENT
                      
                      
                      AND WG.WORK_FLOW_ID = WGIT.WORK_FLOW_ID )
                      
            AND WG.WORKFLOW_GROUP_ID = ANWORKFLOWGROUPID;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      FOR LRWFG IN LQWFG( ANWORKFLOWGROUPID )
      LOOP
         LNCOUNT := LRWFG.COUNT;
      END LOOP;

      IF LNCOUNT = 0
      THEN
         LNRETVAL := IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                         LSMETHOD,
                                                         IAPICONSTANTDBERROR.DBERR_NOUPDATEWORKFLOWGROUP );
         LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'WorkFlowGroup',
                                                 IAPIGENERAL.GETLASTERRORTEXT( ),
                                                 GTERRORS );
      END IF;

      IF ( GTERRORS.COUNT > 0 )
      THEN
         
         LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                                AQERRORS );
         RETURN( IAPICONSTANTDBERROR.DBERR_ERRORLIST );
      END IF;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END VALIDATEFIELDWORKFLOWGROUP;


   FUNCTION VALIDATEFIELDACCESSGROUP(
      ANACCESSGROUPID            IN       IAPITYPE.ID_TYPE,
      AQERRORS                   IN OUT   IAPITYPE.REF_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'ValidateFieldAccessGroup';
      LNCOUNT                       IAPITYPE.NUMVAL_TYPE;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      
      SELECT COUNT( * )
        INTO LNCOUNT
        FROM USER_ACCESS_GROUP
       WHERE ACCESS_GROUP = ANACCESSGROUPID
         AND UPDATE_ALLOWED = 'Y';

      IF LNCOUNT = 0
      THEN
         LNRETVAL := IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                         LSMETHOD,
                                                         IAPICONSTANTDBERROR.DBERR_NOUPDATEACCESSGROUP );
         LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'AccessGroup',
                                                 IAPIGENERAL.GETLASTERRORTEXT( ),
                                                 GTERRORS );
      END IF;

      IF ( GTERRORS.COUNT > 0 )
      THEN
         
         LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                                AQERRORS );
         RETURN( IAPICONSTANTDBERROR.DBERR_ERRORLIST );
      END IF;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END VALIDATEFIELDACCESSGROUP;


   FUNCTION VALIDATEFIELDUOM(
      ASUOM                      IN       IAPITYPE.DESCRIPTION_TYPE,
      AQERRORS                   IN OUT   IAPITYPE.REF_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'ValidateFieldUom';
      LNRETURN                      IAPITYPE.BOOLEAN_TYPE DEFAULT 1;

      CURSOR LQUOM(
         ASUOM                               IAPITYPE.DESCRIPTION_TYPE )
      IS
         SELECT DESCRIPTION,
                STATUS,
                INTL
           FROM UOM
          WHERE LENGTH( DESCRIPTION ) <= 3
            AND DESCRIPTION = ASUOM;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      FOR LRUOM IN LQUOM( ASUOM )
      LOOP
         
         
         IF LRUOM.STATUS = 1
         THEN
            LNRETVAL := IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                            LSMETHOD,
                                                            IAPICONSTANTDBERROR.DBERR_UOMHISTORIC,
                                                            ASUOM );
            LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'UoM',
                                                    IAPIGENERAL.GETLASTERRORTEXT( ),
                                                    GTERRORS );
         END IF;
      END LOOP;

      IF ( GTERRORS.COUNT > 0 )
      THEN
         
         LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                                AQERRORS );
         RETURN( IAPICONSTANTDBERROR.DBERR_ERRORLIST );
      END IF;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END VALIDATEFIELDUOM;


   FUNCTION VALIDATEFIELD(
      ASPREFIX                   IN       IAPITYPE.STRINGVAL_TYPE,
      ASCODE                     IN       IAPITYPE.STRINGVAL_TYPE,
      ASDESCRIPTION              IN       IAPITYPE.STRINGVAL_TYPE,
      ASPED                      IN       IAPITYPE.DATE_TYPE,
      ANMETRIC                   IN       IAPITYPE.BOOLEAN_TYPE,
      ANMULTILANGUAGE            IN       IAPITYPE.BOOLEAN_TYPE,
      ASFRAMENO                  IN       IAPITYPE.FRAMENO_TYPE,
      ANFRAMEREVISION            IN       IAPITYPE.FRAMEREVISION_TYPE,
      ANFRAMEOWNER               IN       IAPITYPE.OWNER_TYPE,
      ANFRAMEMASK                IN       IAPITYPE.ID_TYPE,
      ANWORKFLOWGROUPID          IN       IAPITYPE.ID_TYPE,
      ANACCESSGROUPID            IN       IAPITYPE.ID_TYPE,
      ANSPECTYPEID               IN       IAPITYPE.ID_TYPE,
      ASUOM                      IN       IAPITYPE.BASEUOM_TYPE,
      ASCONVERSIONFACTOR         IN       IAPITYPE.NUMVAL_TYPE,
      ASCONVERSIONUOM            IN       IAPITYPE.BASETOUNIT_TYPE,
      ASPARTNO                   OUT      IAPITYPE.PARTNO_TYPE,
      AQERRORS                   IN OUT   IAPITYPE.REF_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'ValidateField';
      LSPARTNO                      IAPITYPE.PARTNO_TYPE;
      LNPARTEXIST                   IAPITYPE.BOOLEAN_TYPE DEFAULT 0;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );
      LNRETVAL :=
         VALIDATEFIELDMANDATORY( ASPREFIX,
                                 ASCODE,
                                 ASDESCRIPTION,
                                 ASPED,
                                 ANMETRIC,
                                 ANMULTILANGUAGE,
                                 ASFRAMENO,
                                 ANFRAMEREVISION,
                                 ANFRAMEOWNER,
                                 ANFRAMEMASK,
                                 ANWORKFLOWGROUPID,
                                 ANACCESSGROUPID,
                                 ANSPECTYPEID,
                                 ASUOM,
                                 ASCONVERSIONFACTOR,
                                 ASCONVERSIONUOM,
                                 AQERRORS );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN( LNRETVAL );
      END IF;

      LSPARTNO := GETPARTCODE( ASPREFIX,
                               ASCODE );

      IF ( GTERRORS.COUNT > 0 )
      THEN
         
         LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                                AQERRORS );
         RETURN( IAPICONSTANTDBERROR.DBERR_ERRORLIST );
      END IF;

      
      
      
      LNRETVAL := VALIDATEPARTNOPED( LSPARTNO,
                                     ASPED,
                                     AQERRORS );

      IF LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS
      THEN
         LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'EffectiveDate',
                                                 IAPIGENERAL.GETLASTERRORTEXT( ),
                                                 GTERRORS );
      END IF;

      IF ( GTERRORS.COUNT > 0 )
      THEN
         
         LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                                AQERRORS );
         RETURN( IAPICONSTANTDBERROR.DBERR_ERRORLIST );
      END IF;

      
      
      
      IF LNPARTEXIST = 0
      THEN
         LNRETVAL := VALIDATEFIELDSPECTYPE( ANSPECTYPEID,
                                            AQERRORS );

         IF LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS
         THEN
            LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'SpecificationType',
                                                    IAPIGENERAL.GETLASTERRORTEXT( ),
                                                    GTERRORS );
         END IF;
      END IF;

      IF ( GTERRORS.COUNT > 0 )
      THEN
         
         LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                                AQERRORS );
         RETURN( IAPICONSTANTDBERROR.DBERR_ERRORLIST );
      END IF;

      
      
      
      LNRETVAL := VALIDATEFIELDFRAME( ASFRAMENO,
                                      ANFRAMEREVISION,
                                      ANFRAMEOWNER,
                                      AQERRORS );

      IF LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS
      THEN
         LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'Frame',
                                                 IAPIGENERAL.GETLASTERRORTEXT( ),
                                                 GTERRORS );
      ELSE
         IF CANHAVEMASK( LSPARTNO )
         THEN
            LNRETVAL := VALIDATEFIELDMASK( ASFRAMENO,
                                           ANFRAMEREVISION,
                                           ANFRAMEOWNER,
                                           ANFRAMEMASK,
                                           AQERRORS );

            IF LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS
            THEN
               LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'FrameMask',
                                                       IAPIGENERAL.GETLASTERRORTEXT( ),
                                                       GTERRORS );
            END IF;
         END IF;
      END IF;

      IF ( GTERRORS.COUNT > 0 )
      THEN
         
         LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                                AQERRORS );
         RETURN( IAPICONSTANTDBERROR.DBERR_ERRORLIST );
      END IF;

      
      
      
      LNRETVAL := VALIDATEFIELDWORKFLOWGROUP( ANWORKFLOWGROUPID,
                                              AQERRORS );

      IF LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS
      THEN
         LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'WorkflowGroup',
                                                 IAPIGENERAL.GETLASTERRORTEXT( ),
                                                 GTERRORS );
      END IF;

      IF ( GTERRORS.COUNT > 0 )
      THEN
         
         LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                                AQERRORS );
         RETURN( IAPICONSTANTDBERROR.DBERR_ERRORLIST );
      END IF;

      
      
      
      LNRETVAL := VALIDATEFIELDACCESSGROUP( ANACCESSGROUPID,
                                            AQERRORS );

      IF LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS
      THEN
         LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'AccessGroup',
                                                 IAPIGENERAL.GETLASTERRORTEXT( ),
                                                 GTERRORS );
      END IF;

      IF ( GTERRORS.COUNT > 0 )
      THEN
         
         LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                                AQERRORS );
         RETURN( IAPICONSTANTDBERROR.DBERR_ERRORLIST );
      END IF;

      
       
       
      IF LNPARTEXIST = 0
      THEN
         LNRETVAL := VALIDATEFIELDUOM( ASUOM,
                                       AQERRORS );

         IF LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS
         THEN
            LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'UoM',
                                                    IAPIGENERAL.GETLASTERRORTEXT( ),
                                                    GTERRORS );
         END IF;
      END IF;

      IF ( GTERRORS.COUNT > 0 )
      THEN
         
         LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                                AQERRORS );
         RETURN( IAPICONSTANTDBERROR.DBERR_ERRORLIST );
      END IF;

      
      
      
      IF LNPARTEXIST = 0
      THEN
         LNRETVAL := VALIDATEFIELDUOM( ASCONVERSIONUOM,
                                       AQERRORS );

         IF LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS
         THEN
            LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'ConversionUom',
                                                    IAPIGENERAL.GETLASTERRORTEXT( ),
                                                    GTERRORS );
         END IF;
      END IF;

      IF ( GTERRORS.COUNT > 0 )
      THEN
         
         LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                                AQERRORS );
         RETURN( IAPICONSTANTDBERROR.DBERR_ERRORLIST );
      END IF;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END VALIDATEFIELD;


   FUNCTION GETDEFAULTPED
      RETURN IAPITYPE.DATE_TYPE
   IS
      LNOFFSET                      IAPITYPE.NUMVAL_TYPE DEFAULT 0;
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'GetDefaultPed';
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );
        


      LNOFFSET := GETCONFIGURATIONSETTING( 'def_effdate_offset' );
      RETURN(   SYSDATE
              + LNOFFSET );
   END GETDEFAULTPED;


   FUNCTION VALIDATEFIELDPREFIX(
      ASPREFIX                   IN       IAPITYPE.STRINGVAL_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'ValidateFieldPrefix';
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      IF NOT F_CHECK_PREFIX( ASPREFIX ) = 'Y'
      THEN
         RETURN( IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                     LSMETHOD,
                                                     IAPICONSTANTDBERROR.DBERR_NOTCORRECTACCESSRIGHT ) );
      END IF;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END VALIDATEFIELDPREFIX;


   FUNCTION CHECKMANDATORY(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE,
      ASFRAMENO                  IN       IAPITYPE.FRAMENO_TYPE,
      ANFRAMEREVISION            IN       IAPITYPE.FRAMEREVISION_TYPE,
      ANFRAMEOWNER               IN       IAPITYPE.OWNER_TYPE,
      ANOLDSECTIONID             IN       IAPITYPE.ID_TYPE,
      ANOLDSUBSECTIONID          IN       IAPITYPE.ID_TYPE,
      ANOLDPROPERTYGROUPID       IN       IAPITYPE.ID_TYPE,
      ANOLDPROPERTYID            IN       IAPITYPE.ID_TYPE,
      ANOLDATTRIBUTE             IN       IAPITYPE.ID_TYPE,
      ANNEWSECTIONID             IN       IAPITYPE.ID_TYPE,
      ANNEWSUBSECTIONID          IN       IAPITYPE.ID_TYPE,
      ANNEWPROPERTYGROUPID       IN       IAPITYPE.ID_TYPE,
      ANNEWPROPERTYID            IN       IAPITYPE.ID_TYPE,
      ANNEWATTRIBUTE             IN       IAPITYPE.ID_TYPE,
      ASMANDATORY                OUT      IAPITYPE.MANDATORY_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS




























      LNOLDCOUNTER                  IAPITYPE.NUMVAL_TYPE;
      LNNEWCOUNTER                  IAPITYPE.NUMVAL_TYPE;
      LNTYPE                        IAPITYPE.SPECIFICATIONSECTIONTYPE_TYPE;
      LNREFID                       IAPITYPE.ID_TYPE;
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'CheckMandatory';
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      
      BEGIN
         SELECT COUNT( * )
           INTO LNOLDCOUNTER
           FROM FT_SPEC_PROP
          WHERE PART_NO = ASPARTNO
            AND SECTION_ID = ANOLDSECTIONID
            AND SUB_SECTION_ID = ANOLDSUBSECTIONID
            AND PROPERTY_GROUP = ANOLDPROPERTYGROUPID
            AND PROPERTY = ANOLDPROPERTYID
            AND ATTRIBUTE = ANOLDATTRIBUTE;
      EXCEPTION
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
      END;

      
      IF ANNEWPROPERTYGROUPID > 0
      THEN
         LNTYPE := 1;
         LNREFID := ANNEWPROPERTYGROUPID;
      ELSE
         LNTYPE := 4;
         LNREFID := ANNEWPROPERTYID;
      END IF;

      
      BEGIN
         SELECT COUNT( * )
           INTO LNNEWCOUNTER
           FROM SPECIFICATION_SECTION
          WHERE PART_NO = ASPARTNO
            AND REVISION = ANREVISION
            AND SECTION_ID = ANNEWSECTIONID
            AND SUB_SECTION_ID = ANNEWSUBSECTIONID
            AND TYPE = LNTYPE
            AND REF_ID = LNREFID;
      EXCEPTION
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
      END;

      
      IF     LNNEWCOUNTER = 0
         AND LNOLDCOUNTER > 0
      THEN
         BEGIN
            INSERT INTO SPECIFICATION_SECTION
                        ( PART_NO,
                          REVISION,
                          SECTION_ID,
                          SUB_SECTION_ID,
                          TYPE,
                          REF_ID,
                          REF_VER,
                          REF_INFO,
                          SEQUENCE_NO,
                          HEADER,
                          MANDATORY,
                          SECTION_SEQUENCE_NO,
                          DISPLAY_FORMAT,
                          ASSOCIATION,
                          INTL,
                          SECTION_REV,
                          SUB_SECTION_REV,
                          DISPLAY_FORMAT_REV,
                          REF_OWNER )
               SELECT ASPARTNO,
                      ANREVISION,
                      SECTION_ID,
                      SUB_SECTION_ID,
                      TYPE,
                      REF_ID,
                      REF_VER,
                      REF_INFO,
                      SEQUENCE_NO,
                      HEADER,
                      MANDATORY,
                      SECTION_SEQUENCE_NO,
                      DISPLAY_FORMAT,
                      ASSOCIATION,
                      INTL,
                      SECTION_REV,
                      SUB_SECTION_REV,
                      DISPLAY_FORMAT_REV,
                      REF_OWNER
                 FROM FRAME_SECTION
                WHERE FRAME_NO = ASFRAMENO
                  AND REVISION = ANFRAMEREVISION
                  AND OWNER = ANFRAMEOWNER
                  AND SECTION_ID = ANNEWSECTIONID
                  AND SUB_SECTION_ID = ANNEWSUBSECTIONID
                  AND TYPE = LNTYPE
                  AND REF_ID = LNREFID;
         EXCEPTION
            WHEN OTHERS
            THEN
               IAPIGENERAL.LOGERROR( GSSOURCE,
                                     LSMETHOD,
                                     SQLERRM );
               RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
         END;
      END IF;

      
      BEGIN
         SELECT COUNT( * )
           INTO LNNEWCOUNTER
           FROM SPECIFICATION_PROP
          WHERE PART_NO = ASPARTNO
            AND REVISION = ANREVISION
            AND SECTION_ID = ANNEWSECTIONID
            AND SUB_SECTION_ID = ANNEWSUBSECTIONID
            AND PROPERTY_GROUP = ANNEWPROPERTYGROUPID
            AND PROPERTY = ANNEWPROPERTYID
            AND ATTRIBUTE = ANNEWATTRIBUTE;
      EXCEPTION
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
      END;

      
      IF     LNNEWCOUNTER = 0
         AND LNOLDCOUNTER > 0
      THEN
         BEGIN
            INSERT INTO SPECIFICATION_PROP
                        ( PART_NO,
                          REVISION,
                          SECTION_ID,
                          SUB_SECTION_ID,
                          SECTION_REV,
                          SUB_SECTION_REV,
                          PROPERTY_GROUP,
                          PROPERTY,
                          ATTRIBUTE,
                          UOM_ID,
                          PROPERTY_GROUP_REV,
                          PROPERTY_REV,
                          ATTRIBUTE_REV,
                          UOM_REV,
                          TEST_METHOD,
                          TEST_METHOD_REV,
                          SEQUENCE_NO,
                          CHARACTERISTIC,
                          CHARACTERISTIC_REV,
                          ASSOCIATION,
                          ASSOCIATION_REV,
                          INTL,
                          NUM_1,
                          NUM_2,
                          NUM_3,
                          NUM_4,
                          NUM_5,
                          NUM_6,
                          NUM_7,
                          NUM_8,
                          NUM_9,
                          NUM_10,
                          CHAR_1,
                          CHAR_2,
                          CHAR_3,
                          CHAR_4,
                          CHAR_5,
                          CHAR_6,
                          BOOLEAN_1,
                          BOOLEAN_2,
                          BOOLEAN_3,
                          BOOLEAN_4,
                          DATE_1,
                          DATE_2 )
               SELECT ASPARTNO,
                      ANREVISION,
                      SECTION_ID,
                      SUB_SECTION_ID,
                      NVL( F_GET_SUB_REV( SECTION_ID,
                                          SECTION_REV,
                                          NULL,
                                          NULL,
                                          'SC' ),
                           0 ),
                      NVL( F_GET_SUB_REV( SUB_SECTION_ID,
                                          SUB_SECTION_REV,
                                          NULL,
                                          NULL,
                                          'SB' ),
                           0 ),
                      PROPERTY_GROUP,
                      PROPERTY,
                      ATTRIBUTE,
                      UOM_ID,
                      NVL( F_GET_SUB_REV( PROPERTY_GROUP,
                                          PROPERTY_GROUP_REV,
                                          NULL,
                                          NULL,
                                          'PG' ),
                           0 ),
                      NVL( F_GET_SUB_REV( PROPERTY,
                                          PROPERTY_REV,
                                          NULL,
                                          NULL,
                                          'SP' ),
                           0 ),
                      NVL( F_GET_SUB_REV( ATTRIBUTE,
                                          ATTRIBUTE_REV,
                                          NULL,
                                          NULL,
                                          'AT' ),
                           0 ),
                      NVL( F_GET_SUB_REV( UOM_ID,
                                          UOM_REV,
                                          NULL,
                                          NULL,
                                          'UO' ),
                           0 ),
                      TEST_METHOD,
                      NVL( F_GET_SUB_REV( TEST_METHOD,
                                          TEST_METHOD_REV,
                                          NULL,
                                          NULL,
                                          'TM' ),
                           0 ),
                      SEQUENCE_NO,
                      CHARACTERISTIC,
                      NVL( F_GET_SUB_REV( CHARACTERISTIC,
                                          CHARACTERISTIC_REV,
                                          NULL,
                                          NULL,
                                          'CH' ),
                           0 ),
                      ASSOCIATION,
                      NVL( F_GET_SUB_REV( ASSOCIATION,
                                          ASSOCIATION_REV,
                                          NULL,
                                          NULL,
                                          'AS' ),
                           0 ),
                      INTL,
                      NUM_1,
                      NUM_2,
                      NUM_3,
                      NUM_4,
                      NUM_5,
                      NUM_6,
                      NUM_7,
                      NUM_8,
                      NUM_9,
                      NUM_10,
                      CHAR_1,
                      CHAR_2,
                      CHAR_3,
                      CHAR_4,
                      CHAR_5,
                      CHAR_6,
                      BOOLEAN_1,
                      BOOLEAN_2,
                      BOOLEAN_3,
                      BOOLEAN_4,
                      DATE_1,
                      DATE_2
                 FROM FRAME_PROP
                WHERE FRAME_NO = ASFRAMENO
                  AND REVISION = ANFRAMEREVISION
                  AND OWNER = ANFRAMEOWNER
                  AND SECTION_ID = ANNEWSECTIONID
                  AND SUB_SECTION_ID = ANNEWSUBSECTIONID
                  AND PROPERTY_GROUP = ANNEWPROPERTYGROUPID
                  AND PROPERTY = ANNEWPROPERTYID
                  AND ATTRIBUTE = ANNEWATTRIBUTE;

            ASMANDATORY := 'S';
            RETURN IAPICONSTANTDBERROR.DBERR_SUCCESS;
         EXCEPTION
            WHEN OTHERS
            THEN
               IAPIGENERAL.LOGERROR( GSSOURCE,
                                     LSMETHOD,
                                     SQLERRM );
               RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
         END;
      END IF;

      IF LNOLDCOUNTER > 0
      THEN
         ASMANDATORY := 'S';
      ELSE
         ASMANDATORY := 'F';
      END IF;

      RETURN IAPICONSTANTDBERROR.DBERR_SUCCESS;
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END CHECKMANDATORY;


   FUNCTION MANDATORYATTACHEDSPECS(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE,
      ASFRAMENO                  IN       IAPITYPE.FRAMENO_TYPE,
      ANFRAMEREVISION            IN       IAPITYPE.FRAMEREVISION_TYPE,
      ANFRAMEOWNER               IN       IAPITYPE.OWNER_TYPE,
      ANNEWSECTIONID             IN       IAPITYPE.ID_TYPE,
      ANNEWSUBSECTIONID          IN       IAPITYPE.ID_TYPE,
      ANREFID                    IN       IAPITYPE.ID_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS
 
 



 
 
 

 
 
 
 
 
 
 
 
 
 
      LNCOUNT                       IAPITYPE.NUMVAL_TYPE;
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'MandatoryAttachedSpecs';
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      
      SELECT COUNT( * )
        INTO LNCOUNT
        FROM SPECIFICATION_SECTION
       WHERE PART_NO = ASPARTNO
         AND REVISION = ANREVISION
         AND SECTION_ID = ANNEWSECTIONID
         AND SUB_SECTION_ID = ANNEWSUBSECTIONID
         AND TYPE = 8;

      IF LNCOUNT = 0
      THEN
         
         INSERT INTO SPECIFICATION_SECTION
                     ( PART_NO,
                       REVISION,
                       SECTION_ID,
                       SUB_SECTION_ID,
                       TYPE,
                       REF_ID,
                       REF_VER,
                       REF_INFO,
                       SEQUENCE_NO,
                       HEADER,
                       MANDATORY,
                       SECTION_SEQUENCE_NO,
                       DISPLAY_FORMAT,
                       ASSOCIATION,
                       INTL,
                       SECTION_REV,
                       SUB_SECTION_REV,
                       DISPLAY_FORMAT_REV,
                       REF_OWNER )
            SELECT ASPARTNO,
                   ANREVISION,
                   ANNEWSECTIONID,
                   ANNEWSUBSECTIONID,
                   8,
                   ANREFID,
                   REF_VER,
                   REF_INFO,
                   SEQUENCE_NO,
                   HEADER,
                   MANDATORY,
                   SECTION_SEQUENCE_NO,
                   DISPLAY_FORMAT,
                   ASSOCIATION,
                   INTL,
                   SECTION_REV,
                   SUB_SECTION_REV,
                   DISPLAY_FORMAT_REV,
                   REF_OWNER
              FROM FRAME_SECTION
             WHERE FRAME_NO = ASFRAMENO
               AND REVISION = ANFRAMEREVISION
               AND OWNER = ANFRAMEOWNER
               AND SECTION_ID = ANNEWSECTIONID
               AND SUB_SECTION_ID = ANNEWSUBSECTIONID
               AND TYPE = 8
               AND REF_ID = ANREFID;
      END IF;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END MANDATORYATTACHEDSPECS;



 
   FUNCTION REMOVEOPTIONALATTACHEDSPECS(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE,
      ASFRAMENO                  IN       IAPITYPE.FRAMENO_TYPE,
      ANFRAMEREVISION            IN       IAPITYPE.FRAMEREVISION_TYPE,
      ANFRAMEOWNER               IN       IAPITYPE.OWNER_TYPE,
      ANOLDSECTIONID             IN       IAPITYPE.ID_TYPE,
      ANOLDSUBSECTIONID          IN       IAPITYPE.ID_TYPE,
      ANREFID                    IN       IAPITYPE.ID_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS
 
 



 
 
 

 
 
 
 
 
 
 
 
 
 
      LNCOUNT                       IAPITYPE.NUMVAL_TYPE;
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'RemoveOptionalAttachedSpecs';
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      
      SELECT COUNT( * )
        INTO LNCOUNT
        FROM SPECIFICATION_SECTION
       WHERE PART_NO = ASPARTNO
         AND REVISION = ANREVISION
         AND SECTION_ID = ANOLDSECTIONID
         AND SUB_SECTION_ID = ANOLDSUBSECTIONID
         AND TYPE = 8;

      IF LNCOUNT > 0
      THEN

        SELECT COUNT( * )
        INTO LNCOUNT
        FROM FRAME_SECTION
        WHERE FRAME_NO = ASFRAMENO
            AND REVISION = ANFRAMEREVISION
            AND OWNER = ANFRAMEOWNER
            AND SECTION_ID = ANOLDSECTIONID
            AND SUB_SECTION_ID = ANOLDSUBSECTIONID
            AND TYPE = 8
            
            AND MANDATORY = 'N';

        IF LNCOUNT > 0
        THEN
             
             DELETE FROM SPECIFICATION_SECTION
                 WHERE PART_NO = ASPARTNO
                   AND REVISION = ANREVISION
                   
                   AND SECTION_ID = ANOLDSECTIONID
                   AND SUB_SECTION_ID = ANOLDSUBSECTIONID
                   AND TYPE = 8
                   AND REF_ID = ANREFID;
        END IF;

      END IF;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END REMOVEOPTIONALATTACHEDSPECS;



   FUNCTION TRANSFERATTACHEDSPECS(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE,
      ANRULEID                   IN       IAPITYPE.ID_TYPE,
      ASNEWFRAMENO               IN       IAPITYPE.FRAMENO_TYPE,
      ANNEWFRAMEREVISION         IN       IAPITYPE.FRAMEREVISION_TYPE,
      ANNEWFRAMEOWNER            IN       IAPITYPE.OWNER_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS
 
 

 
 
 

 
 
 
 
 
 
 
 
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'TransferAttachedSpecs';
      LNREFID                       IAPITYPE.ID_TYPE;

      
      CURSOR LQCHANGES
      IS
         SELECT OLD_SECTION,
                OLD_SUB_SECTION,
                NEW_SECTION,
                NEW_SUB_SECTION
           FROM FT_BASE_RULES
          WHERE FT_GROUP_ID = ANRULEID
            AND OBJECT_TYPE = 8;

      CURSOR LQDATAATTACHED(
         ANSECTION                           IAPITYPE.ID_TYPE,
         ANSUBSECTION                        IAPITYPE.ID_TYPE )
      IS
         SELECT A.REF_ID,
                A.ATTACHED_PART_NO,
                A.ATTACHED_REVISION,
                A.INTL
           FROM FT_SPEC_SECTION S,
                FT_ATTACH_SPEC A
          WHERE S.PART_NO = A.PART_NO
            AND S.SECTION_ID = A.SECTION_ID
            AND S.SUB_SECTION_ID = A.SUB_SECTION_ID
            AND S.REF_ID = A.REF_ID
            AND S.PART_NO = ASPARTNO
            AND S.SECTION_ID = ANSECTION
            AND S.SUB_SECTION_ID = ANSUBSECTION
            AND S.TYPE = 8;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      FOR LNCHANGES IN LQCHANGES
      LOOP
         LNRETVAL :=
            MANDATORYATTACHEDSPECS( ASPARTNO,
                                    ANREVISION,
                                    ASNEWFRAMENO,
                                    ANNEWFRAMEREVISION,
                                    ANNEWFRAMEOWNER,
                                    LNCHANGES.NEW_SECTION,
                                    LNCHANGES.NEW_SUB_SECTION,
                                    0 );

         IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN( LNRETVAL );
         END IF;

         FOR LNDATA IN LQDATAATTACHED( LNCHANGES.OLD_SECTION,
                                       LNCHANGES.OLD_SUB_SECTION )
         LOOP
            BEGIN
               
               
               BEGIN
               
                   INSERT INTO ATTACHED_SPECIFICATION
                        VALUES ( ASPARTNO,
                                 ANREVISION,
                                 LNDATA.REF_ID,
                                 LNDATA.ATTACHED_PART_NO,
                                 LNDATA.ATTACHED_REVISION,
                                 LNCHANGES.NEW_SECTION,
                                 LNCHANGES.NEW_SUB_SECTION,
                                 LNDATA.INTL );
               
               EXCEPTION
               WHEN DUP_VAL_ON_INDEX
               THEN
                    NULL;
               END;
               

               LNREFID := LNDATA.REF_ID;

               
               IF (   (LNCHANGES.OLD_SECTION <> LNCHANGES.NEW_SECTION)
                   OR (LNCHANGES.OLD_SUB_SECTION <> LNCHANGES.NEW_SUB_SECTION))
               THEN
               

                   
                   
                   DELETE FROM ATTACHED_SPECIFICATION
                   WHERE PART_NO = ASPARTNO
                        AND REVISION = ANREVISION
                        AND REF_ID = LNDATA.REF_ID
                        AND ATTACHED_PART_NO = LNDATA.ATTACHED_PART_NO
                        AND ATTACHED_REVISION = LNDATA.ATTACHED_REVISION
                        AND SECTION_ID = LNCHANGES.OLD_SECTION
                        AND SUB_SECTION_ID = LNCHANGES.OLD_SUB_SECTION;
                        
                   

               
               END IF;
               

            EXCEPTION
               WHEN OTHERS
               THEN
                  IAPIGENERAL.LOGERROR( GSSOURCE,
                                        LSMETHOD,
                                        SQLERRM );
                  RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
            END;
         END LOOP;

         BEGIN
            
            
            IF (LNREFID IS NOT NULL)
            
            THEN
               UPDATE SPECIFICATION_SECTION
                  SET REF_ID = LNREFID
                WHERE PART_NO = ASPARTNO
                  AND REVISION = ANREVISION
                  AND SECTION_ID = LNCHANGES.NEW_SECTION
                  AND SUB_SECTION_ID = LNCHANGES.NEW_SUB_SECTION
                  AND TYPE = 8;
            END IF;
         EXCEPTION
            WHEN OTHERS
            THEN
               IAPIGENERAL.LOGERROR( GSSOURCE,
                                     LSMETHOD,
                                     SQLERRM );
               RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
         END;

          
           IF (   (LNCHANGES.OLD_SECTION <> LNCHANGES.NEW_SECTION)
               OR (LNCHANGES.OLD_SUB_SECTION <> LNCHANGES.NEW_SUB_SECTION))
           THEN
           

             
             
             LNRETVAL :=
                REMOVEOPTIONALATTACHEDSPECS( ASPARTNO,
                                             ANREVISION,
                                             ASNEWFRAMENO,
                                             ANNEWFRAMEREVISION,
                                             ANNEWFRAMEOWNER,
                                             LNCHANGES.OLD_SECTION,
                                             LNCHANGES.OLD_SUB_SECTION,
                                             
                                             LNREFID );

             IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
             THEN
                IAPIGENERAL.LOGERROR( GSSOURCE,
                                      LSMETHOD,
                                      IAPIGENERAL.GETLASTERRORTEXT( ) );
                RETURN( LNRETVAL );
            END IF;
            

         
         END IF;
         

      END LOOP;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END TRANSFERATTACHEDSPECS;


   FUNCTION GETFIELD(
      ANFIELDID                  IN       IAPITYPE.ID_TYPE )
      RETURN IAPITYPE.STRING_TYPE
   IS







      LSFIELD                       IAPITYPE.STRING_TYPE;
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'GetField';
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      SELECT DECODE( ANFIELDID,
                     1, 'num_1',
                     2, 'num_2',
                     3, 'num_3',
                     4, 'num_4',
                     5, 'num_5',
                     6, 'num_6',
                     7, 'num_7',
                     8, 'num_8',
                     9, 'num_9',
                     10, 'num_10',
                     11, 'char_1',
                     12, 'char_2',
                     13, 'char_3',
                     14, 'char_4',
                     15, 'char_5',
                     16, 'char_6',
                     17, 'boolean_1',
                     18, 'boolean_2',
                     19, 'boolean_3',
                     20, 'boolean_4',
                     21, 'date_1',
                     22, 'date_2',
                     23, 'uom',
                     24, 'attribute',
                     25, 'test_method',
                     26, 'characteristic',
                     27, 'property',
                     30, 'ch_2',
                     31, 'ch_3',
                     32, 'tm_det_1',
                     33, 'tm_det_2',
                     34, 'tm_det_3',
                     35, 'tm_det_4',
                     40, 'info',
                     41, 'tm_set_no' )
        INTO LSFIELD
        FROM DUAL;

      RETURN LSFIELD;
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END GETFIELD;


   FUNCTION EXECUTESQLRULE(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE,
      ANRULEID                   IN       IAPITYPE.NUMVAL_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS












      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'ExecuteSqlRule';

      
      CURSOR LQSQL
      IS
         SELECT SQL_TEXT
           FROM FT_SQL
          WHERE FT_GROUP_ID = ANRULEID;

      LSSQL                         IAPITYPE.BUFFER_TYPE;
      LNSQLNRETURN                  IAPITYPE.NUMVAL_TYPE;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );
      
      LNSQLNRETURN := DBMS_SQL.OPEN_CURSOR;

      FOR LNSQL IN LQSQL
      LOOP
         
         LSSQL := LNSQL.SQL_TEXT;

         SELECT REPLACE( LSSQL,
                         ':part_no',
                            ''''
                         || ASPARTNO
                         || '''' )
           INTO LSSQL
           FROM DUAL;

         SELECT REPLACE( LSSQL,
                         ':part_rev',
                         ANREVISION )
           INTO LSSQL
           FROM DUAL;

         DBMS_SQL.PARSE( LNSQLNRETURN,
                         LSSQL,
                         DBMS_SQL.V7 );
         GIRESULT := DBMS_SQL.EXECUTE( LNSQLNRETURN );
      END LOOP;

      DBMS_SQL.CLOSE_CURSOR( LNSQLNRETURN );
      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );

         IF DBMS_SQL.IS_OPEN( LNSQLNRETURN )
         THEN
            DBMS_SQL.CLOSE_CURSOR( LNSQLNRETURN );
         END IF;

         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END EXECUTESQLRULE;


   FUNCTION EXECUTESQL(
      ASSQLSTATEMENT             IN       IAPITYPE.BUFFER_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS









      LNSQLNRETURN                  IAPITYPE.NUMVAL_TYPE;
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'ExecuteSql';
   BEGIN
      LNSQLNRETURN := DBMS_SQL.OPEN_CURSOR;
      DBMS_SQL.PARSE( LNSQLNRETURN,
                      ASSQLSTATEMENT,
                      DBMS_SQL.V7 );
      GIRESULT := DBMS_SQL.EXECUTE( LNSQLNRETURN );
      DBMS_SQL.CLOSE_CURSOR( LNSQLNRETURN );
      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );

         IF DBMS_SQL.IS_OPEN( LNSQLNRETURN )
         THEN
            DBMS_SQL.CLOSE_CURSOR( LNSQLNRETURN );
         END IF;

         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END;


   FUNCTION GETFIELDDATA(
      ANFIELDID                  IN       IAPITYPE.NUMVAL_TYPE,
      ANNUM1                     IN       IAPITYPE.FLOAT_TYPE,
      ANNUM2                     IN       IAPITYPE.FLOAT_TYPE,
      ANNUM3                     IN       IAPITYPE.FLOAT_TYPE,
      ANNUM4                     IN       IAPITYPE.FLOAT_TYPE,
      ANNUM5                     IN       IAPITYPE.FLOAT_TYPE,
      ANNUM6                     IN       IAPITYPE.FLOAT_TYPE,
      ANNUM7                     IN       IAPITYPE.FLOAT_TYPE,
      ANNUM8                     IN       IAPITYPE.FLOAT_TYPE,
      ANNUM9                     IN       IAPITYPE.FLOAT_TYPE,
      ANNUM10                    IN       IAPITYPE.FLOAT_TYPE,
      ASCHAR1                    IN       IAPITYPE.PROPERTYSHORTSTRING_TYPE,
      ASCHAR2                    IN       IAPITYPE.PROPERTYSHORTSTRING_TYPE,
      ASCHAR3                    IN       IAPITYPE.PROPERTYSHORTSTRING_TYPE,
      ASCHAR4                    IN       IAPITYPE.PROPERTYSHORTSTRING_TYPE,
      ASCHAR5                    IN       IAPITYPE.PROPERTYSHORTSTRING_TYPE,
      ASCHAR6                    IN       IAPITYPE.PROPERTYLONGSTRING_TYPE,
      ASBOOLEAN1                 IN       VARCHAR2,
      ASBOOLEAN2                 IN       VARCHAR2,
      ASBOOLEAN3                 IN       VARCHAR2,
      ASBOOLEAN4                 IN       VARCHAR2,
      ADDATE1                    IN       IAPITYPE.DATE_TYPE,
      ADDATE2                    IN       IAPITYPE.DATE_TYPE,
      ANUOMID                    IN       IAPITYPE.ID_TYPE,
      ANUOMREV                   IN       IAPITYPE.REVISION_TYPE,
      ANATTRIBUTE                IN       IAPITYPE.ID_TYPE,
      ANATTRIBUTEREV             IN       IAPITYPE.REVISION_TYPE,
      ANTESTMETHOD               IN       IAPITYPE.ID_TYPE,
      ANTESTMETHODREV            IN       IAPITYPE.REVISION_TYPE,
      ANASSOCIATION              IN       IAPITYPE.ID_TYPE,
      ANASSOCIATIONREV           IN       IAPITYPE.REVISION_TYPE,
      ANPROPERTY                 IN       IAPITYPE.ID_TYPE,
      ASTESTMETHODDETAIL1        IN       VARCHAR2,
      ASTESTMETHODDETAIL2        IN       VARCHAR2,
      ASTESTMETHODDETAIL3        IN       VARCHAR2,
      ASTESTMETHODDETAIL4        IN       VARCHAR2,
      ASINFO                     IN       IAPITYPE.INFO_TYPE )
      RETURN IAPITYPE.STRING_TYPE
   IS









      LSVALUE                       IAPITYPE.STRING_TYPE;
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'GetFieldData';
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      SELECT DECODE( ANFIELDID,
                     1, TO_CHAR( ANNUM1 ),
                     2, TO_CHAR( ANNUM2 ),
                     3, TO_CHAR( ANNUM3 ),
                     4, TO_CHAR( ANNUM4 ),
                     5, TO_CHAR( ANNUM5 ),
                     6, TO_CHAR( ANNUM6 ),
                     7, TO_CHAR( ANNUM7 ),
                     8, TO_CHAR( ANNUM8 ),
                     9, TO_CHAR( ANNUM9 ),
                     10, TO_CHAR( ANNUM10 ),
                     11, ASCHAR1,
                     12, ASCHAR2,
                     13, ASCHAR3,
                     14, ASCHAR4,
                     15, ASCHAR5,
                     16, ASCHAR6,
                     17, ASBOOLEAN1,
                     18, ASBOOLEAN2,
                     19, ASBOOLEAN3,
                     20, ASBOOLEAN4,
                     21, TO_CHAR( ADDATE1 ),
                     22, TO_CHAR( ADDATE2 ),
                     23, TO_CHAR( ANUOMID ),
                     24, TO_CHAR( ANATTRIBUTE ),
                     25, TO_CHAR( ANTESTMETHOD ),
                     26, TO_CHAR( ANASSOCIATION ),
                     27, TO_CHAR( ANPROPERTY ),
                     32, ASTESTMETHODDETAIL1,
                     33, ASTESTMETHODDETAIL2,
                     34, ASTESTMETHODDETAIL3,
                     35, ASTESTMETHODDETAIL4,
                     40, ASINFO )
        INTO LSVALUE
        FROM DUAL;

      RETURN LSVALUE;
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END GETFIELDDATA;



    FUNCTION GENERATEUPDATESQL(
       ASVALUE                 IN OUT   IAPITYPE.STRING_TYPE,
       ANOLDCOLUMNID           IN       IAPITYPE.ID_TYPE,
       ASNEWCOLUMN             IN       IAPITYPE.STRING_TYPE,
       ASPARTNO                IN       IAPITYPE.PARTNO_TYPE,
       ANREVISION              IN       IAPITYPE.REVISION_TYPE,
       ANSECTIONID             IN       IAPITYPE.ID_TYPE,
       ANSUBSECTIONID          IN       IAPITYPE.ID_TYPE,
       ANPROPERTYGROUPID       IN       IAPITYPE.ID_TYPE,
       ANPROPERTYID            IN       IAPITYPE.ID_TYPE,
       ANATTRIBUTEID           IN       IAPITYPE.ID_TYPE
    ) RETURN IAPITYPE.BUFFER_TYPE
    IS
    
    
    
    
    
    
    
    
          LSMETHOD                      IAPITYPE.METHOD_TYPE := 'GenerateUpdateSql';
          LSSQL                         IAPITYPE.BUFFER_TYPE;
       BEGIN
    
    
    
          IAPIGENERAL.LOGINFO( GSSOURCE,
                               LSMETHOD,
                               'Body of FUNCTION',
                               IAPICONSTANT.INFOLEVEL_3 );

          IF (ANOLDCOLUMNID > 10 AND ANOLDCOLUMNID < 21 ) OR ( ANOLDCOLUMNID > 31 ) THEN
             IF ASNEWCOLUMN = 'info' THEN
                ASVALUE := SUBSTR( ASVALUE, 1, 2000 );
             ELSIF ASNEWCOLUMN = 'char_6' THEN
                ASVALUE := SUBSTR( ASVALUE, 1, 256 );
             ELSE
                ASVALUE := SUBSTR( ASVALUE, 1, 40 );
             END IF;

             ASVALUE := REPLACE( ASVALUE, '''', '''''' );

             LSSQL := 'UPDATE specification_prop SET '
                               || ASNEWCOLUMN
                               || ' = '''
                               || ASVALUE
                               
                               
                               || '''';
                               
          
          ELSIF UPPER(ASNEWCOLUMN) IN ('DATE_1', 'DATE_2')
          THEN
                     LSSQL := 'UPDATE specification_prop SET '
                                       || ASNEWCOLUMN
                                       || ' = '''
                                       || ASVALUE
                                       || '''';
          
          ELSE
             IF ( LOWER(ASNEWCOLUMN) IN ('num_1', 'num_2', 'num_3', 'num_4', 'num_5', 'num_6', 'num_7', 'num_8', 'num_9', 'num_10')) THEN
                ASVALUE := 'TO_NUMBER('''||ASVALUE||''')';
             END IF;

             LSSQL := 'UPDATE specification_prop SET '
                               || ASNEWCOLUMN
                               || ' = '
                               || ASVALUE;
          END IF;

          LSSQL := LSSQL       || ' WHERE part_no = '''
                               || ASPARTNO
                               || ''' AND revision = '
                               || ANREVISION
                               || ' AND section_id = '
                               || ANSECTIONID
                               || ' AND sub_section_id = '
                               || ANSUBSECTIONID
                               || ' AND property_group = '
                               || ANPROPERTYGROUPID
                               || ' AND property = '
                               || ANPROPERTYID
                               || ' AND attribute = '
                               || ANATTRIBUTEID;

          IAPIGENERAL.LOGINFO( GSSOURCE, LSMETHOD, LSSQL );

       RETURN(LSSQL);

       EXCEPTION
          WHEN OTHERS
          THEN
             IAPIGENERAL.LOGERROR( GSSOURCE,
                                   LSMETHOD,
                                   SQLERRM );
             RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );

    END GENERATEUPDATESQL;




   FUNCTION TRANSFERTESTMETHODDATA(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE,
      ANOLDSECTIONID             IN       IAPITYPE.ID_TYPE,
      ANOLDSUBSECTIONID          IN       IAPITYPE.ID_TYPE,
      ANOLDPROPERTYGROUPID       IN       IAPITYPE.ID_TYPE,
      ANOLDPROPERTYID            IN       IAPITYPE.ID_TYPE,
      ANOLDATTRIBUTE             IN       IAPITYPE.ID_TYPE,
      ANNEWSECTIONID             IN       IAPITYPE.ID_TYPE,
      ANNEWSUBSECTIONID          IN       IAPITYPE.ID_TYPE,
      ANNEWPROPERTYGROUPID       IN       IAPITYPE.ID_TYPE,
      ANNEWPROPERTYID            IN       IAPITYPE.ID_TYPE,
      ANNEWATTRIBUTE             IN       IAPITYPE.ID_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS




















      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'TransferTestMethodData';
   BEGIN
      DELETE FROM SPECIFICATION_TM
            WHERE PART_NO = ASPARTNO
              AND REVISION = ANREVISION
              AND SECTION_ID = ANNEWSECTIONID
              AND SUB_SECTION_ID = ANNEWSUBSECTIONID
              AND PROPERTY_GROUP = ANNEWPROPERTYGROUPID
              AND PROPERTY = ANNEWPROPERTYID
              AND ATTRIBUTE = ANNEWATTRIBUTE;

      INSERT INTO SPECIFICATION_TM
                  ( PART_NO,
                    REVISION,
                    SECTION_ID,
                    SUB_SECTION_ID,
                    PROPERTY_GROUP,
                    PROPERTY,
                    ATTRIBUTE,
                    SEQ_NO,
                    TM_TYPE,
                    TM,
                    TM_REV,
                    TM_SET_NO )
         SELECT ASPARTNO,
                ANREVISION,
                ANNEWSECTIONID,
                ANNEWSUBSECTIONID,
                ANNEWPROPERTYGROUPID,
                ANNEWPROPERTYID,
                ANNEWATTRIBUTE,
                SEQ_NO,
                TM_TYPE,
                TM,
                TM_REV,
                TM_SET_NO
           FROM FT_SPEC_TM
          WHERE PART_NO = ASPARTNO
            AND SECTION_ID = ANOLDSECTIONID
            AND SUB_SECTION_ID = ANOLDSUBSECTIONID
            AND PROPERTY_GROUP = ANOLDPROPERTYGROUPID
            AND PROPERTY = ANOLDPROPERTYID
            AND ATTRIBUTE = ANOLDATTRIBUTE;

        
        
        DELETE FROM SPECIFICATION_TM
            WHERE PART_NO = ASPARTNO
              AND REVISION = ANREVISION
              AND SECTION_ID = ANOLDSECTIONID
              AND SUB_SECTION_ID = ANOLDSUBSECTIONID
              AND PROPERTY_GROUP = ANOLDPROPERTYGROUPID
              AND PROPERTY = ANOLDPROPERTYID
              AND ATTRIBUTE = ANOLDATTRIBUTE;
        

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END TRANSFERTESTMETHODDATA;



   PROCEDURE CLEARALLFIELDS(
      ASPARTNO                IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION              IN       IAPITYPE.REVISION_TYPE,
      ANSECTIONID             IN       IAPITYPE.ID_TYPE,
      ANSUBSECTIONID          IN       IAPITYPE.ID_TYPE,
      ANPROPERTYGROUPID       IN       IAPITYPE.ID_TYPE,
      ANPROPERTYID            IN       IAPITYPE.ID_TYPE,
      ANATTRIBUTEID           IN       IAPITYPE.ID_TYPE)
   IS




    BEGIN

      UPDATE SPECIFICATION_PROP
         SET NUM_1 = NULL,
             NUM_2 = NULL,
             NUM_3 = NULL,
             NUM_4 = NULL,
             NUM_5 = NULL,
             NUM_6 = NULL,
             NUM_7 = NULL,
             NUM_8 = NULL,
             NUM_9 = NULL,
             NUM_10 = NULL,
             CHAR_1 = NULL,
             CHAR_2 = NULL,
             CHAR_3 = NULL,
             CHAR_4 = NULL,
             CHAR_5 = NULL,
             CHAR_6 = NULL,
             BOOLEAN_1 = NULL,
             BOOLEAN_2 = NULL,
             BOOLEAN_3 = NULL,
             BOOLEAN_4 = NULL,
             DATE_1 = NULL,
             DATE_2 = NULL,
             TM_SET_NO = NULL,
             TM_DET_1 = NULL,
             TM_DET_2 = NULL,
             TM_DET_3 = NULL,
             TM_DET_4 = NULL,
             INFO = NULL,
             CHARACTERISTIC = NULL,
             CHARACTERISTIC_REV = NULL,
             TEST_METHOD = NULL,
             TEST_METHOD_REV = NULL
       WHERE PART_NO = ASPARTNO
         AND REVISION = ANREVISION
         AND SECTION_ID = ANSECTIONID
         AND SUB_SECTION_ID = ANSUBSECTIONID
         AND PROPERTY_GROUP = ANPROPERTYGROUPID
         AND PROPERTY = ANPROPERTYID
         AND ATTRIBUTE = ANATTRIBUTEID;

    END CLEARALLFIELDS;





























































   FUNCTION TRANSFERPROPERTIES(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE,
      ASFRAMENO                  IN       IAPITYPE.FRAMENO_TYPE,
      ANFRAMEREVISION            IN       IAPITYPE.FRAMEREVISION_TYPE,
      ANFRAMEOWNER               IN       IAPITYPE.OWNER_TYPE,
      ANRULEID                   IN       IAPITYPE.ID_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS















      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'TransferProperties';
      LNNUM1                        IAPITYPE.FLOAT_TYPE;
      LNNUM2                        IAPITYPE.FLOAT_TYPE;
      LNNUM3                        IAPITYPE.FLOAT_TYPE;
      LNNUM4                        IAPITYPE.FLOAT_TYPE;
      LNNUM5                        IAPITYPE.FLOAT_TYPE;
      LNNUM6                        IAPITYPE.FLOAT_TYPE;
      LNNUM7                        IAPITYPE.FLOAT_TYPE;
      LNNUM8                        IAPITYPE.FLOAT_TYPE;
      LNNUM9                        IAPITYPE.FLOAT_TYPE;
      LNNUM10                       IAPITYPE.FLOAT_TYPE;
      LSCHAR1                       IAPITYPE.PROPERTYSHORTSTRING_TYPE;
      LSCHAR2                       IAPITYPE.PROPERTYSHORTSTRING_TYPE;
      LSCHAR3                       IAPITYPE.PROPERTYSHORTSTRING_TYPE;
      LSCHAR4                       IAPITYPE.PROPERTYSHORTSTRING_TYPE;
      LSCHAR5                       IAPITYPE.PROPERTYSHORTSTRING_TYPE;
      LSCHAR6                       IAPITYPE.PROPERTYLONGSTRING_TYPE;
      LBBOOLEAN1                    VARCHAR2( 1 );
      LBBOOLEAN2                    VARCHAR2( 1 );
      LBBOOLEAN3                    VARCHAR2( 1 );
      LBBOOLEAN4                    VARCHAR2( 1 );
      LDDATE1                       IAPITYPE.DATE_TYPE;
      LDDATE2                       IAPITYPE.DATE_TYPE;
      LNUOMID                       IAPITYPE.ID_TYPE;
      LNUOMREV                      IAPITYPE.REVISION_TYPE;
      LNATTRIBUTEREV                IAPITYPE.REVISION_TYPE;
      LNTESTMETHOD                  IAPITYPE.ID_TYPE;
      LNTESTMETHODREV               IAPITYPE.REVISION_TYPE;
      LNCHARACTERISTIC              IAPITYPE.ID_TYPE;
      LNCHARACTERISTICREV           IAPITYPE.REVISION_TYPE;
      LSTESTDETAILS1                VARCHAR2( 1 );
      LSTESTDETAILS2                VARCHAR2( 1 );
      LSTESTDETAILS3                VARCHAR2( 1 );
      LSTESTDETAILS4                VARCHAR2( 1 );
      LSINFO                        IAPITYPE.INFO_TYPE;
      LNSETNO                       IAPITYPE.TESTMETHODSETNO_TYPE;
      LSTYPE                        IAPITYPE.MANDATORY_TYPE;
      LSVALUE                       IAPITYPE.STRING_TYPE;
      LSOLDCOL                      IAPITYPE.STRING_TYPE;
      LSNEWCOL                      IAPITYPE.STRING_TYPE;
      LSSQL                         IAPITYPE.BUFFER_TYPE;
      LBDATAFOUND                   IAPITYPE.LOGICAL_TYPE;
      
      

      
      CURSOR LQCHANGES
      IS
         SELECT OLD_SECTION,
                OLD_SUB_SECTION,
                OLD_PROP_GROUP,
                OLD_PROPERTY,
                OLD_ATTRIBUTE,
                OLD_COLUMN,
                NEW_SECTION,
                NEW_SUB_SECTION,
                NEW_PROP_GROUP,
                NEW_PROPERTY,
                NEW_ATTRIBUTE,
                NEW_COLUMN
           FROM FT_BASE_RULES
          WHERE FT_GROUP_ID = ANRULEID
            AND OBJECT_TYPE IN( 1, 4 );


      CURSOR LQDATASECTION(
         ANSECTION                           IAPITYPE.ID_TYPE )
      IS
         SELECT NUM_1,
                NUM_2,
                NUM_3,
                NUM_4,
                NUM_5,
                NUM_6,
                NUM_7,
                NUM_8,
                NUM_9,
                NUM_10,
                CHAR_1,
                CHAR_2,
                CHAR_3,
                CHAR_4,
                CHAR_5,
                CHAR_6,
                BOOLEAN_1,
                BOOLEAN_2,
                BOOLEAN_3,
                BOOLEAN_4,
                DATE_1,
                DATE_2,
                SUB_SECTION_ID,
                PROPERTY_GROUP,
                PROPERTY,
                ATTRIBUTE,
                UOM_ID,
                UOM_REV,
                ATTRIBUTE_REV,
                TEST_METHOD,
                TEST_METHOD_REV,
                CHARACTERISTIC,
                CHARACTERISTIC_REV,
                AS_2,
                AS_REV_2,
                AS_3,
                AS_REV_3,
                TM_SET_NO,
                TM_DET_1,
                TM_DET_2,
                TM_DET_3,
                TM_DET_4,
                INFO
           FROM FT_SPEC_PROP
          WHERE PART_NO = ASPARTNO
            AND SECTION_ID = ANSECTION;


      CURSOR LQDATASUBSECTION(
         ANSECTION                           IAPITYPE.ID_TYPE,
         ANSUBSECTION                        IAPITYPE.ID_TYPE )
      IS
         SELECT NUM_1,
                NUM_2,
                NUM_3,
                NUM_4,
                NUM_5,
                NUM_6,
                NUM_7,
                NUM_8,
                NUM_9,
                NUM_10,
                CHAR_1,
                CHAR_2,
                CHAR_3,
                CHAR_4,
                CHAR_5,
                CHAR_6,
                BOOLEAN_1,
                BOOLEAN_2,
                BOOLEAN_3,
                BOOLEAN_4,
                DATE_1,
                DATE_2,
                PROPERTY_GROUP,
                PROPERTY,
                ATTRIBUTE,
                UOM_ID,
                UOM_REV,
                ATTRIBUTE_REV,
                TEST_METHOD,
                TEST_METHOD_REV,
                CHARACTERISTIC,
                CHARACTERISTIC_REV,
                AS_2,
                AS_REV_2,
                AS_3,
                AS_REV_3,
                TM_SET_NO,
                TM_DET_1,
                TM_DET_2,
                TM_DET_3,
                TM_DET_4,
                INFO
           FROM FT_SPEC_PROP
          WHERE PART_NO = ASPARTNO
            AND SECTION_ID = ANSECTION
            AND SUB_SECTION_ID = ANSUBSECTION;


      CURSOR LQDATAPROPGROUP(
         ANSECTION                           IAPITYPE.ID_TYPE,
         ANSUBSECTION                        IAPITYPE.ID_TYPE,
         ANPROPERTYGROUP                     IAPITYPE.ID_TYPE )
      IS
         SELECT NUM_1,
                NUM_2,
                NUM_3,
                NUM_4,
                NUM_5,
                NUM_6,
                NUM_7,
                NUM_8,
                NUM_9,
                NUM_10,
                CHAR_1,
                CHAR_2,
                CHAR_3,
                CHAR_4,
                CHAR_5,
                CHAR_6,
                BOOLEAN_1,
                BOOLEAN_2,
                BOOLEAN_3,
                BOOLEAN_4,
                DATE_1,
                DATE_2,
                PROPERTY,
                ATTRIBUTE,
                UOM_ID,
                UOM_REV,
                ATTRIBUTE_REV,
                TEST_METHOD,
                TEST_METHOD_REV,
                CHARACTERISTIC,
                CHARACTERISTIC_REV,
                AS_2,
                AS_REV_2,
                AS_3,
                AS_REV_3,
                TM_SET_NO,
                TM_DET_1,
                TM_DET_2,
                TM_DET_3,
                TM_DET_4,
                INFO
           FROM FT_SPEC_PROP
          WHERE PART_NO = ASPARTNO
            AND SECTION_ID = ANSECTION
            AND SUB_SECTION_ID = ANSUBSECTION
            AND PROPERTY_GROUP = ANPROPERTYGROUP;


      CURSOR LQDATAPROPERTY(
         ANSECTION                           IAPITYPE.ID_TYPE,
         ANSUBSECTION                        IAPITYPE.ID_TYPE,
         ANPROPERTYGROUP                     IAPITYPE.ID_TYPE,
         ANPROPERTY                          IAPITYPE.ID_TYPE )
      IS
         SELECT NUM_1,
                NUM_2,
                NUM_3,
                NUM_4,
                NUM_5,
                NUM_6,
                NUM_7,
                NUM_8,
                NUM_9,
                NUM_10,
                CHAR_1,
                CHAR_2,
                CHAR_3,
                CHAR_4,
                CHAR_5,
                CHAR_6,
                BOOLEAN_1,
                BOOLEAN_2,
                BOOLEAN_3,
                BOOLEAN_4,
                DATE_1,
                DATE_2,
                ATTRIBUTE,
                UOM_ID,
                UOM_REV,
                ATTRIBUTE_REV,
                TEST_METHOD,
                TEST_METHOD_REV,
                CHARACTERISTIC,
                CHARACTERISTIC_REV,
                PROPERTY,
                AS_2,
                AS_REV_2,
                AS_3,
                AS_REV_3,
                TM_SET_NO,
                TM_DET_1,
                TM_DET_2,
                TM_DET_3,
                TM_DET_4,
                INFO
           FROM FT_SPEC_PROP
          WHERE PART_NO = ASPARTNO
            AND SECTION_ID = ANSECTION
            AND SUB_SECTION_ID = ANSUBSECTION
            AND PROPERTY_GROUP = ANPROPERTYGROUP
            AND PROPERTY = ANPROPERTY;


      CURSOR LQEMPTY
      IS
         SELECT DECODE (A.OLD_COLUMN,
               1, 'num_1',
               2, 'num_2',
               3, 'num_3',
               4, 'num_4',
               5, 'num_5',
               6, 'num_6',
               7, 'num_7',
               8, 'num_8',
               9, 'num_9',
               10, 'num_10',
               11, 'char_1',
               12, 'char_2',
               13, 'char_3',
               14, 'char_4',
               15, 'char_5',
               16, 'char_6',
               17, 'boolean_1',
               18, 'boolean_2',
               19, 'boolean_3',
               20, 'boolean_4',
               21, 'date_1',
               22, 'date_2',
               23, 'uom',
               24, 'attribute',
               25, 'test_method',
               26, 'characteristic',
               27, 'property',
               30, 'ch_2',
               31, 'ch_3',
               32, 'tm_det_1',
               33, 'tm_det_2',
               34, 'tm_det_3',
               35, 'tm_det_4',
               40, 'info',
               41, 'tm_set_no') SPECPROPCOL
           FROM FT_BASE_RULES A
          WHERE A.FT_GROUP_ID = ANRULEID
            AND A.OBJECT_TYPE IN( 1, 4 )
            AND A.OLD_COLUMN NOT IN
                (SELECT B.NEW_COLUMN
                   FROM FT_BASE_RULES B
                  WHERE     A.FT_GROUP_ID = B.FT_GROUP_ID
                        AND A.OLD_SECTION = B.OLD_SECTION
                        AND A.OLD_SUB_SECTION = B.OLD_SUB_SECTION
                        AND A.OLD_PROP_GROUP = B.OLD_PROP_GROUP);

   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );
      





     

      
      FOR LNCHANGES IN LQCHANGES
      LOOP
         IF LNCHANGES.OLD_SUB_SECTION IS NULL
         THEN



            FOR LNDATA IN LQDATASECTION( LNCHANGES.OLD_SECTION )
            LOOP
               IF LNCHANGES.OLD_COLUMN = 0
               THEN
                  UPDATE SPECIFICATION_PROP
                     SET NUM_1 = LNDATA.NUM_1,
                         NUM_2 = LNDATA.NUM_2,
                         NUM_3 = LNDATA.NUM_3,
                         NUM_4 = LNDATA.NUM_4,
                         NUM_5 = LNDATA.NUM_5,
                         NUM_6 = LNDATA.NUM_6,
                         NUM_7 = LNDATA.NUM_7,
                         NUM_8 = LNDATA.NUM_8,
                         NUM_9 = LNDATA.NUM_9,
                         NUM_10 = LNDATA.NUM_10,
                         CHAR_1 = LNDATA.CHAR_1,
                         CHAR_2 = LNDATA.CHAR_2,
                         CHAR_3 = LNDATA.CHAR_3,
                         CHAR_4 = LNDATA.CHAR_4,
                         CHAR_5 = LNDATA.CHAR_5,
                         CHAR_6 = LNDATA.CHAR_6,
                         BOOLEAN_1 = LNDATA.BOOLEAN_1,
                         BOOLEAN_2 = LNDATA.BOOLEAN_2,
                         BOOLEAN_3 = LNDATA.BOOLEAN_3,
                         BOOLEAN_4 = LNDATA.BOOLEAN_4,
                         DATE_1 = LNDATA.DATE_1,
                         DATE_2 = LNDATA.DATE_2,
                         TM_SET_NO = LNDATA.TM_SET_NO,
                         TM_DET_1 = LNDATA.TM_DET_1,
                         TM_DET_2 = LNDATA.TM_DET_2,
                         TM_DET_3 = LNDATA.TM_DET_3,
                         TM_DET_4 = LNDATA.TM_DET_4,
                         INFO = LNDATA.INFO,
                         CHARACTERISTIC = LNDATA.CHARACTERISTIC,
                         CHARACTERISTIC_REV = LNDATA.CHARACTERISTIC_REV,
                         TEST_METHOD = LNDATA.TEST_METHOD,
                         TEST_METHOD_REV = LNDATA.TEST_METHOD_REV
                   WHERE PART_NO = ASPARTNO
                     AND REVISION = ANREVISION
                     AND SECTION_ID = LNCHANGES.NEW_SECTION
                     AND SUB_SECTION_ID = LNDATA.SUB_SECTION_ID
                     AND PROPERTY_GROUP = LNDATA.PROPERTY_GROUP
                     AND PROPERTY = LNDATA.PROPERTY
                     AND ATTRIBUTE = LNDATA.ATTRIBUTE;

                  
                  LNRETVAL :=
                     TRANSFERTESTMETHODDATA( ASPARTNO,
                                             ANREVISION,
                                             LNCHANGES.OLD_SECTION,
                                             LNDATA.SUB_SECTION_ID,
                                             LNDATA.PROPERTY_GROUP,
                                             LNDATA.PROPERTY,
                                             LNDATA.ATTRIBUTE,
                                             LNCHANGES.NEW_SECTION,
                                             LNDATA.SUB_SECTION_ID,
                                             LNDATA.PROPERTY_GROUP,
                                             LNDATA.PROPERTY,
                                             LNDATA.ATTRIBUTE );

                  IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
                  THEN
                     IAPIGENERAL.LOGERROR( GSSOURCE,
                                           LSMETHOD,
                                           IAPIGENERAL.GETLASTERRORTEXT( ) );
                     RETURN( LNRETVAL );
                  END IF;

                  
                  IF ( LNCHANGES.OLD_SECTION <> LNCHANGES.NEW_SECTION )
                  THEN
                  
                      
                      
                       CLEARALLFIELDS( ASPARTNO,
                                       ANREVISION,
                                       LNCHANGES.OLD_SECTION,
                                       LNDATA.SUB_SECTION_ID,
                                       LNDATA.PROPERTY_GROUP,
                                       LNDATA.PROPERTY,
                                       LNDATA.ATTRIBUTE );
                       
                  
                  END IF;
                  
               ELSE
                  
                  LSVALUE :=
                     GETFIELDDATA( LNCHANGES.OLD_COLUMN,
                                   LNDATA.NUM_1,
                                   LNDATA.NUM_2,
                                   LNDATA.NUM_3,
                                   LNDATA.NUM_4,
                                   LNDATA.NUM_5,
                                   LNDATA.NUM_6,
                                   LNDATA.NUM_7,
                                   LNDATA.NUM_8,
                                   LNDATA.NUM_9,
                                   LNDATA.NUM_10,
                                   LNDATA.CHAR_1,
                                   LNDATA.CHAR_2,
                                   LNDATA.CHAR_3,
                                   LNDATA.CHAR_4,
                                   LNDATA.CHAR_5,
                                   LNDATA.CHAR_6,
                                   LNDATA.BOOLEAN_1,
                                   LNDATA.BOOLEAN_2,
                                   LNDATA.BOOLEAN_3,
                                   LNDATA.BOOLEAN_4,
                                   LNDATA.DATE_1,
                                   LNDATA.DATE_2,
                                   LNDATA.UOM_ID,
                                   LNDATA.UOM_REV,
                                   LNDATA.ATTRIBUTE,
                                   LNDATA.ATTRIBUTE_REV,
                                   LNDATA.TEST_METHOD,
                                   LNDATA.TEST_METHOD_REV,
                                   LNDATA.CHARACTERISTIC,
                                   LNDATA.CHARACTERISTIC_REV,
                                   LNDATA.PROPERTY,
                                   LNDATA.TM_DET_1,
                                   LNDATA.TM_DET_2,
                                   LNDATA.TM_DET_3,
                                   LNDATA.TM_DET_4,
                                   LNDATA.INFO );
                  LSOLDCOL := GETFIELD( LNCHANGES.OLD_COLUMN );
                  LSNEWCOL := GETFIELD( LNCHANGES.NEW_COLUMN );

                  IF LSVALUE IS NOT NULL
                  THEN
                   
                   
































































                     
                     LSSQL := GENERATEUPDATESQL(LSVALUE, LNCHANGES.OLD_COLUMN, LSNEWCOL,
                                                ASPARTNO, ANREVISION,
                                                LNCHANGES.NEW_SECTION, LNDATA.SUB_SECTION_ID,
                                                LNDATA.PROPERTY_GROUP, LNDATA.PROPERTY, LNDATA.ATTRIBUTE);

                     

                     BEGIN
                        LNRETVAL := EXECUTESQL( LSSQL );

                        IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
                        THEN
                           IAPIGENERAL.LOGERROR( GSSOURCE,
                                                 LSMETHOD,
                                                 IAPIGENERAL.GETLASTERRORTEXT( ) );
                           RETURN( LNRETVAL );
                        END IF;

                       
                       

































                        
                        
                     END;

                     
                     IF LNCHANGES.OLD_COLUMN = 25
                     THEN
                        UPDATE SPECIFICATION_PROP
                           SET TM_SET_NO = LNSETNO,
                               TEST_METHOD = LNTESTMETHOD,
                               TEST_METHOD_REV = LNTESTMETHODREV
                         WHERE PART_NO = ASPARTNO
                           AND REVISION = ANREVISION
                           AND SECTION_ID = LNCHANGES.NEW_SECTION
                           AND SUB_SECTION_ID = LNDATA.SUB_SECTION_ID
                           AND PROPERTY_GROUP = LNDATA.PROPERTY_GROUP
                           AND PROPERTY = LNDATA.PROPERTY
                           AND ATTRIBUTE = LNDATA.ATTRIBUTE;

                        LNRETVAL :=
                           TRANSFERTESTMETHODDATA( ASPARTNO,
                                                   ANREVISION,
                                                   LNCHANGES.OLD_SECTION,
                                                   LNDATA.SUB_SECTION_ID,
                                                   LNDATA.PROPERTY_GROUP,
                                                   LNDATA.PROPERTY,
                                                   LNDATA.ATTRIBUTE,
                                                   LNCHANGES.NEW_SECTION,
                                                   LNDATA.SUB_SECTION_ID,
                                                   LNDATA.PROPERTY_GROUP,
                                                   LNDATA.PROPERTY,
                                                   LNDATA.ATTRIBUTE );

                        IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
                        THEN
                           IAPIGENERAL.LOGERROR( GSSOURCE,
                                                 LSMETHOD,
                                                 IAPIGENERAL.GETLASTERRORTEXT( ) );
                           RETURN( LNRETVAL );
                        END IF;

                        
                        
                        UPDATE SPECIFICATION_PROP
                           SET TM_SET_NO = NULL,
                               TEST_METHOD = NULL,
                               TEST_METHOD_REV = NULL
                         WHERE PART_NO = ASPARTNO
                           AND REVISION = ANREVISION
                           AND SECTION_ID = LNCHANGES.OLD_SECTION
                           AND SUB_SECTION_ID = LNDATA.SUB_SECTION_ID
                           AND PROPERTY_GROUP = LNDATA.PROPERTY_GROUP
                           AND PROPERTY = LNDATA.PROPERTY
                           AND ATTRIBUTE = LNDATA.ATTRIBUTE;
                        

                     END IF;

                     
                     
                     
                     IF (  (LNCHANGES.OLD_COLUMN < 23) OR (LNCHANGES.OLD_COLUMN = 40))
                        AND ( LNCHANGES.OLD_COLUMN > 0)
                        AND ( LNCHANGES.OLD_SECTION <> LNCHANGES.NEW_SECTION )
                    
                     THEN
                        LSSQL :=
                              'UPDATE specification_prop SET '
                           || LSOLDCOL
                           || ' = NULL WHERE part_no = '''
                           || ASPARTNO
                           || ''' AND revision = '
                           || ANREVISION
                           || ' AND section_id = '
                           || LNCHANGES.OLD_SECTION
                           || ' AND sub_section_id = '
                           || LNDATA.SUB_SECTION_ID
                           || ' AND property_group = '
                           || LNDATA.PROPERTY_GROUP
                           || ' AND property = '
                           || LNDATA.PROPERTY
                           || ' AND attribute = '
                           || LNDATA.ATTRIBUTE;
                        LNRETVAL := EXECUTESQL( LSSQL );

                        IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
                        THEN
                           IAPIGENERAL.LOGERROR( GSSOURCE,
                                                 LSMETHOD,
                                                 IAPIGENERAL.GETLASTERRORTEXT( ) );
                           RETURN( LNRETVAL );
                        END IF;
                     END IF;
                  END IF;
               END IF;
            END LOOP;
         ELSIF LNCHANGES.OLD_PROP_GROUP IS NULL
         THEN



            FOR LNDATA IN LQDATASUBSECTION( LNCHANGES.OLD_SECTION,
                                            LNCHANGES.OLD_SUB_SECTION )
            LOOP
               IF LNCHANGES.OLD_COLUMN = 0
               THEN
                  UPDATE SPECIFICATION_PROP
                     SET NUM_1 = LNDATA.NUM_1,
                         NUM_2 = LNDATA.NUM_2,
                         NUM_3 = LNDATA.NUM_3,
                         NUM_4 = LNDATA.NUM_4,
                         NUM_5 = LNDATA.NUM_5,
                         NUM_6 = LNDATA.NUM_6,
                         NUM_7 = LNDATA.NUM_7,
                         NUM_8 = LNDATA.NUM_8,
                         NUM_9 = LNDATA.NUM_9,
                         NUM_10 = LNDATA.NUM_10,
                         CHAR_1 = LNDATA.CHAR_1,
                         CHAR_2 = LNDATA.CHAR_2,
                         CHAR_3 = LNDATA.CHAR_3,
                         CHAR_4 = LNDATA.CHAR_4,
                         CHAR_5 = LNDATA.CHAR_5,
                         CHAR_6 = LNDATA.CHAR_6,
                         BOOLEAN_1 = LNDATA.BOOLEAN_1,
                         BOOLEAN_2 = LNDATA.BOOLEAN_2,
                         BOOLEAN_3 = LNDATA.BOOLEAN_3,
                         BOOLEAN_4 = LNDATA.BOOLEAN_4,
                         DATE_1 = LNDATA.DATE_1,
                         DATE_2 = LNDATA.DATE_2,
                         TM_SET_NO = LNDATA.TM_SET_NO,
                         TM_DET_1 = LNDATA.TM_DET_1,
                         TM_DET_2 = LNDATA.TM_DET_2,
                         TM_DET_3 = LNDATA.TM_DET_3,
                         TM_DET_4 = LNDATA.TM_DET_4,
                         INFO = LNDATA.INFO,
                         CHARACTERISTIC = LNDATA.CHARACTERISTIC,
                         CHARACTERISTIC_REV = LNDATA.CHARACTERISTIC_REV,
                         TEST_METHOD = LNDATA.TEST_METHOD,
                         TEST_METHOD_REV = LNDATA.TEST_METHOD_REV
                   WHERE PART_NO = ASPARTNO
                     AND REVISION = ANREVISION
                     AND SECTION_ID = LNCHANGES.NEW_SECTION
                     AND SUB_SECTION_ID = LNCHANGES.NEW_SUB_SECTION
                     AND PROPERTY_GROUP = LNDATA.PROPERTY_GROUP
                     AND PROPERTY = LNDATA.PROPERTY
                     AND ATTRIBUTE = LNDATA.ATTRIBUTE;

                  
                  LNRETVAL :=
                     TRANSFERTESTMETHODDATA( ASPARTNO,
                                             ANREVISION,
                                             LNCHANGES.OLD_SECTION,
                                             LNCHANGES.OLD_SUB_SECTION,
                                             LNDATA.PROPERTY_GROUP,
                                             LNDATA.PROPERTY,
                                             LNDATA.ATTRIBUTE,
                                             LNCHANGES.NEW_SECTION,
                                             LNCHANGES.NEW_SUB_SECTION,
                                             LNDATA.PROPERTY_GROUP,
                                             LNDATA.PROPERTY,
                                             LNDATA.ATTRIBUTE );

                  IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
                  THEN
                     IAPIGENERAL.LOGERROR( GSSOURCE,
                                           LSMETHOD,
                                           IAPIGENERAL.GETLASTERRORTEXT( ) );
                     RETURN( LNRETVAL );
                  END IF;

                  
                   IF (   (LNCHANGES.OLD_SECTION <> LNCHANGES.NEW_SECTION)
                       OR (LNCHANGES.OLD_SUB_SECTION <> LNCHANGES.NEW_SUB_SECTION))
                   THEN
                  
                     
                      CLEARALLFIELDS( ASPARTNO,
                                       ANREVISION,
                                       LNCHANGES.OLD_SECTION,
                                       LNCHANGES.OLD_SUB_SECTION,
                                       LNDATA.PROPERTY_GROUP,
                                       LNDATA.PROPERTY,
                                       LNDATA.ATTRIBUTE );
                      
                  
                  END IF;
                  
               ELSE
                  
                  LSVALUE :=
                     GETFIELDDATA( LNCHANGES.OLD_COLUMN,
                                   LNDATA.NUM_1,
                                   LNDATA.NUM_2,
                                   LNDATA.NUM_3,
                                   LNDATA.NUM_4,
                                   LNDATA.NUM_5,
                                   LNDATA.NUM_6,
                                   LNDATA.NUM_7,
                                   LNDATA.NUM_8,
                                   LNDATA.NUM_9,
                                   LNDATA.NUM_10,
                                   LNDATA.CHAR_1,
                                   LNDATA.CHAR_2,
                                   LNDATA.CHAR_3,
                                   LNDATA.CHAR_4,
                                   LNDATA.CHAR_5,
                                   LNDATA.CHAR_6,
                                   LNDATA.BOOLEAN_1,
                                   LNDATA.BOOLEAN_2,
                                   LNDATA.BOOLEAN_3,
                                   LNDATA.BOOLEAN_4,
                                   LNDATA.DATE_1,
                                   LNDATA.DATE_2,
                                   LNDATA.UOM_ID,
                                   LNDATA.UOM_REV,
                                   LNDATA.ATTRIBUTE,
                                   LNDATA.ATTRIBUTE_REV,
                                   LNDATA.TEST_METHOD,
                                   LNDATA.TEST_METHOD_REV,
                                   LNDATA.CHARACTERISTIC,
                                   LNDATA.CHARACTERISTIC_REV,
                                   LNDATA.PROPERTY,
                                   LNDATA.TM_DET_1,
                                   LNDATA.TM_DET_2,
                                   LNDATA.TM_DET_3,
                                   LNDATA.TM_DET_4,
                                   LNDATA.INFO );
                  LSOLDCOL := GETFIELD( LNCHANGES.OLD_COLUMN );
                  LSNEWCOL := GETFIELD( LNCHANGES.NEW_COLUMN );

                  IF LSVALUE IS NOT NULL
                  THEN
                     
                     
































































                     

                     LSSQL := GENERATEUPDATESQL(LSVALUE, LNCHANGES.OLD_COLUMN, LSNEWCOL,
                                                ASPARTNO, ANREVISION, LNCHANGES.NEW_SECTION, LNCHANGES.NEW_SUB_SECTION,
                                                LNDATA.PROPERTY_GROUP, LNDATA.PROPERTY, LNDATA.ATTRIBUTE);
                     

                     LNRETVAL := EXECUTESQL( LSSQL );

                     IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
                     THEN
                        IAPIGENERAL.LOGERROR( GSSOURCE,
                                              LSMETHOD,
                                              IAPIGENERAL.GETLASTERRORTEXT( ) );
                        RETURN( LNRETVAL );
                     END IF;

                     
                     
































                     
                     

                     
                     IF LNCHANGES.OLD_COLUMN = 25
                     THEN
                        UPDATE SPECIFICATION_PROP
                           SET TM_SET_NO = LNSETNO,
                               TEST_METHOD = LNTESTMETHOD,
                               TEST_METHOD_REV = LNTESTMETHODREV
                         WHERE PART_NO = ASPARTNO
                           AND REVISION = ANREVISION
                           AND SECTION_ID = LNCHANGES.NEW_SECTION
                           AND SUB_SECTION_ID = LNCHANGES.NEW_SUB_SECTION
                           AND PROPERTY_GROUP = LNDATA.PROPERTY_GROUP
                           AND PROPERTY = LNDATA.PROPERTY
                           AND ATTRIBUTE = LNDATA.ATTRIBUTE;

                        LNRETVAL :=
                           TRANSFERTESTMETHODDATA( ASPARTNO,
                                                   ANREVISION,
                                                   LNCHANGES.OLD_SECTION,
                                                   LNCHANGES.OLD_SUB_SECTION,
                                                   LNDATA.PROPERTY_GROUP,
                                                   LNDATA.PROPERTY,
                                                   LNDATA.ATTRIBUTE,
                                                   LNCHANGES.NEW_SECTION,
                                                   LNCHANGES.NEW_SUB_SECTION,
                                                   LNDATA.PROPERTY_GROUP,
                                                   LNDATA.PROPERTY,
                                                   LNDATA.ATTRIBUTE );

                        IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
                        THEN
                           IAPIGENERAL.LOGERROR( GSSOURCE,
                                                 LSMETHOD,
                                                 IAPIGENERAL.GETLASTERRORTEXT( ) );
                           RETURN( LNRETVAL );
                        END IF;

                         
                         
                         UPDATE SPECIFICATION_PROP
                           SET TM_SET_NO = NULL,
                               TEST_METHOD = NULL,
                               TEST_METHOD_REV = NULL
                         WHERE PART_NO = ASPARTNO
                           AND REVISION = ANREVISION
                           AND SECTION_ID = LNCHANGES.OLD_SECTION
                           AND SUB_SECTION_ID = LNCHANGES.OLD_SUB_SECTION
                           AND PROPERTY_GROUP = LNDATA.PROPERTY_GROUP
                           AND PROPERTY = LNDATA.PROPERTY
                           AND ATTRIBUTE = LNDATA.ATTRIBUTE;
                         

                     END IF;

                     
                     
                     IF (  (LNCHANGES.OLD_COLUMN < 23) OR (LNCHANGES.OLD_COLUMN = 40))
                        AND ( LNCHANGES.OLD_COLUMN > 0)
                        AND (    (LNCHANGES.OLD_SECTION <> LNCHANGES.NEW_SECTION)
                              OR (LNCHANGES.OLD_SUB_SECTION <> LNCHANGES.NEW_SUB_SECTION))
                     
                     THEN
                        
                        LSSQL :=
                              'UPDATE specification_prop SET '
                           || LSOLDCOL
                           || ' = NULL WHERE part_no = '''
                           || ASPARTNO
                           || ''' AND revision = '
                           || ANREVISION
                           || ' AND section_id = '
                           || LNCHANGES.OLD_SECTION
                           || ' AND sub_section_id = '
                           || LNCHANGES.OLD_SUB_SECTION
                           || ' AND property_group = '
                           || LNDATA.PROPERTY_GROUP
                           || ' AND property = '
                           || LNDATA.PROPERTY
                           || ' AND attribute = '
                           || LNDATA.ATTRIBUTE;
                        LNRETVAL := EXECUTESQL( LSSQL );

                        IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
                        THEN
                           IAPIGENERAL.LOGERROR( GSSOURCE,
                                                 LSMETHOD,
                                                 IAPIGENERAL.GETLASTERRORTEXT( ) );
                           RETURN( LNRETVAL );
                        END IF;
                     END IF;
                  END IF;
               END IF;
            END LOOP;
         ELSIF LNCHANGES.OLD_PROPERTY IS NULL
         THEN



            FOR LNDATA IN LQDATAPROPGROUP( LNCHANGES.OLD_SECTION,
                                           LNCHANGES.OLD_SUB_SECTION,
                                           LNCHANGES.OLD_PROP_GROUP )
            LOOP
               LNRETVAL :=
                  CHECKMANDATORY( ASPARTNO,
                                  ANREVISION,
                                  ASFRAMENO,
                                  ANFRAMEREVISION,
                                  ANFRAMEOWNER,
                                  LNCHANGES.OLD_SECTION,
                                  LNCHANGES.OLD_SUB_SECTION,
                                  LNCHANGES.OLD_PROP_GROUP,
                                  LNDATA.PROPERTY,
                                  LNDATA.ATTRIBUTE,
                                  LNCHANGES.NEW_SECTION,
                                  LNCHANGES.NEW_SUB_SECTION,
                                  LNCHANGES.NEW_PROP_GROUP,
                                  LNDATA.PROPERTY,
                                  LNDATA.ATTRIBUTE,
                                  LSTYPE );

               IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
               THEN
                  IAPIGENERAL.LOGERROR( GSSOURCE,
                                        LSMETHOD,
                                        IAPIGENERAL.GETLASTERRORTEXT( ) );
                  RETURN( LNRETVAL );
               END IF;

               IF LNCHANGES.OLD_COLUMN = 0
               THEN
                  UPDATE SPECIFICATION_PROP
                     SET NUM_1 = LNDATA.NUM_1,
                         NUM_2 = LNDATA.NUM_2,
                         NUM_3 = LNDATA.NUM_3,
                         NUM_4 = LNDATA.NUM_4,
                         NUM_5 = LNDATA.NUM_5,
                         NUM_6 = LNDATA.NUM_6,
                         NUM_7 = LNDATA.NUM_7,
                         NUM_8 = LNDATA.NUM_8,
                         NUM_9 = LNDATA.NUM_9,
                         NUM_10 = LNDATA.NUM_10,
                         CHAR_1 = LNDATA.CHAR_1,
                         CHAR_2 = LNDATA.CHAR_2,
                         CHAR_3 = LNDATA.CHAR_3,
                         CHAR_4 = LNDATA.CHAR_4,
                         CHAR_5 = LNDATA.CHAR_5,
                         CHAR_6 = LNDATA.CHAR_6,
                         BOOLEAN_1 = LNDATA.BOOLEAN_1,
                         BOOLEAN_2 = LNDATA.BOOLEAN_2,
                         BOOLEAN_3 = LNDATA.BOOLEAN_3,
                         BOOLEAN_4 = LNDATA.BOOLEAN_4,
                         DATE_1 = LNDATA.DATE_1,
                         DATE_2 = LNDATA.DATE_2,
                         TM_SET_NO = LNDATA.TM_SET_NO,
                         TM_DET_1 = LNDATA.TM_DET_1,
                         TM_DET_2 = LNDATA.TM_DET_2,
                         TM_DET_3 = LNDATA.TM_DET_3,
                         TM_DET_4 = LNDATA.TM_DET_4,
                         INFO = LNDATA.INFO,
                         CHARACTERISTIC = LNDATA.CHARACTERISTIC,
                         CHARACTERISTIC_REV = LNDATA.CHARACTERISTIC_REV,
                         TEST_METHOD = LNDATA.TEST_METHOD,
                         TEST_METHOD_REV = LNDATA.TEST_METHOD_REV
                   WHERE PART_NO = ASPARTNO
                     AND REVISION = ANREVISION
                     AND SECTION_ID = LNCHANGES.NEW_SECTION
                     AND SUB_SECTION_ID = LNCHANGES.NEW_SUB_SECTION
                     AND PROPERTY_GROUP = LNCHANGES.NEW_PROP_GROUP
                     AND PROPERTY = LNDATA.PROPERTY
                     AND ATTRIBUTE = LNDATA.ATTRIBUTE;

                  
                  LNRETVAL :=
                     TRANSFERTESTMETHODDATA( ASPARTNO,
                                             ANREVISION,
                                             LNCHANGES.OLD_SECTION,
                                             LNCHANGES.OLD_SUB_SECTION,
                                             LNCHANGES.OLD_PROP_GROUP,
                                             LNDATA.PROPERTY,
                                             LNDATA.ATTRIBUTE,
                                             LNCHANGES.NEW_SECTION,
                                             LNCHANGES.NEW_SUB_SECTION,
                                             LNCHANGES.NEW_PROP_GROUP,
                                             LNDATA.PROPERTY,
                                             LNDATA.ATTRIBUTE );

                   
                   IF (   (LNCHANGES.OLD_SECTION <> LNCHANGES.NEW_SECTION)
                       OR (LNCHANGES.OLD_SUB_SECTION <> LNCHANGES.NEW_SUB_SECTION)
                       OR (LNCHANGES.OLD_PROP_GROUP <> LNCHANGES.NEW_PROP_GROUP))
                   THEN
                   
                       
                       CLEARALLFIELDS( ASPARTNO,
                                       ANREVISION,
                                       LNCHANGES.OLD_SECTION,
                                       LNCHANGES.OLD_SUB_SECTION,
                                       LNCHANGES.OLD_PROP_GROUP,
                                       LNDATA.PROPERTY,
                                       LNDATA.ATTRIBUTE );
                       
                   
                    END IF;
                   
               ELSE
                  
                  LSVALUE :=
                     GETFIELDDATA( LNCHANGES.OLD_COLUMN,
                                   LNDATA.NUM_1,
                                   LNDATA.NUM_2,
                                   LNDATA.NUM_3,
                                   LNDATA.NUM_4,
                                   LNDATA.NUM_5,
                                   LNDATA.NUM_6,
                                   LNDATA.NUM_7,
                                   LNDATA.NUM_8,
                                   LNDATA.NUM_9,
                                   LNDATA.NUM_10,
                                   LNDATA.CHAR_1,
                                   LNDATA.CHAR_2,
                                   LNDATA.CHAR_3,
                                   LNDATA.CHAR_4,
                                   LNDATA.CHAR_5,
                                   LNDATA.CHAR_6,
                                   LNDATA.BOOLEAN_1,
                                   LNDATA.BOOLEAN_2,
                                   LNDATA.BOOLEAN_3,
                                   LNDATA.BOOLEAN_4,
                                   LNDATA.DATE_1,
                                   LNDATA.DATE_2,
                                   LNDATA.UOM_ID,
                                   LNDATA.UOM_REV,
                                   LNDATA.ATTRIBUTE,
                                   LNDATA.ATTRIBUTE_REV,
                                   LNDATA.TEST_METHOD,
                                   LNDATA.TEST_METHOD_REV,
                                   LNDATA.CHARACTERISTIC,
                                   LNDATA.CHARACTERISTIC_REV,
                                   LNDATA.PROPERTY,
                                   LNDATA.TM_DET_1,
                                   LNDATA.TM_DET_2,
                                   LNDATA.TM_DET_3,
                                   LNDATA.TM_DET_4,
                                   LNDATA.INFO );
                  LSOLDCOL := GETFIELD( LNCHANGES.OLD_COLUMN );
                  LSNEWCOL := GETFIELD( LNCHANGES.NEW_COLUMN );




 
                   FOR LNEMPTY IN LQEMPTY
                   LOOP
                       LSSQL := 'UPDATE specification_prop SET '
                           || LNEMPTY.SPECPROPCOL
                           || ' = NULL WHERE part_no = '''
                           || ASPARTNO
                           || ''' AND revision = '
                           || ANREVISION
                           || ' AND section_id = '
                           || LNCHANGES.OLD_SECTION
                           || ' AND sub_section_id = '
                           || LNCHANGES.OLD_SUB_SECTION
                           || ' AND property_group = '
                           || LNCHANGES.OLD_PROP_GROUP
                           || ' AND property = '
                           || LNDATA.PROPERTY
                           || ' AND attribute = '
                           || LNDATA.ATTRIBUTE;
                        LNRETVAL := EXECUTESQL( LSSQL );
                   END LOOP;

                     
                     
































































                     

                     LSSQL := GENERATEUPDATESQL(LSVALUE, LNCHANGES.OLD_COLUMN, LSNEWCOL,
                                                ASPARTNO, ANREVISION, LNCHANGES.NEW_SECTION, LNCHANGES.NEW_SUB_SECTION,
                                                LNCHANGES.NEW_PROP_GROUP, LNDATA.PROPERTY, LNDATA.ATTRIBUTE);

                     

                     LNRETVAL := EXECUTESQL( LSSQL );

                     IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
                     THEN
                        IAPIGENERAL.LOGERROR( GSSOURCE,
                                              LSMETHOD,
                                              IAPIGENERAL.GETLASTERRORTEXT( ) );
                        RETURN( LNRETVAL );
                     END IF;

                    
                    
































                     
                     

                     
                     IF LNCHANGES.OLD_COLUMN = 25
                     THEN
                        UPDATE SPECIFICATION_PROP
                           SET TM_SET_NO = LNSETNO,
                               TEST_METHOD = LNTESTMETHOD,
                               TEST_METHOD_REV = LNTESTMETHODREV
                         WHERE PART_NO = ASPARTNO
                           AND REVISION = ANREVISION
                           AND SECTION_ID = LNCHANGES.NEW_SECTION
                           AND SUB_SECTION_ID = LNCHANGES.NEW_SUB_SECTION
                           AND PROPERTY_GROUP = LNCHANGES.NEW_PROP_GROUP
                           AND PROPERTY = LNDATA.PROPERTY
                           AND ATTRIBUTE = LNDATA.ATTRIBUTE;

                        LNRETVAL :=
                           TRANSFERTESTMETHODDATA( ASPARTNO,
                                                   ANREVISION,
                                                   LNCHANGES.OLD_SECTION,
                                                   LNCHANGES.OLD_SUB_SECTION,
                                                   LNCHANGES.OLD_PROP_GROUP,
                                                   LNDATA.PROPERTY,
                                                   LNDATA.ATTRIBUTE,
                                                   LNCHANGES.NEW_SECTION,
                                                   LNCHANGES.NEW_SUB_SECTION,
                                                   LNCHANGES.NEW_PROP_GROUP,
                                                   LNDATA.PROPERTY,
                                                   LNDATA.ATTRIBUTE );

                        IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
                        THEN
                           IAPIGENERAL.LOGERROR( GSSOURCE,
                                                 LSMETHOD,
                                                 IAPIGENERAL.GETLASTERRORTEXT( ) );
                           RETURN( LNRETVAL );
                        END IF;

                        
                        
                        UPDATE SPECIFICATION_PROP
                           SET TM_SET_NO = NULL,
                               TEST_METHOD = NULL,
                               TEST_METHOD_REV = NULL
                         WHERE PART_NO = ASPARTNO
                           AND REVISION = ANREVISION
                           AND SECTION_ID = LNCHANGES.OLD_SECTION
                           AND SUB_SECTION_ID = LNCHANGES.OLD_SUB_SECTION
                           AND PROPERTY_GROUP = LNCHANGES.OLD_PROP_GROUP
                           AND PROPERTY = LNDATA.PROPERTY
                           AND ATTRIBUTE = LNDATA.ATTRIBUTE;
                         

                     END IF;

                     
                     
                     IF (  (LNCHANGES.OLD_COLUMN < 23) OR (LNCHANGES.OLD_COLUMN = 40))
                        AND ( LNCHANGES.OLD_COLUMN > 0)
                        AND (    (LNCHANGES.OLD_SECTION <> LNCHANGES.NEW_SECTION)
                              OR (LNCHANGES.OLD_SUB_SECTION <> LNCHANGES.NEW_SUB_SECTION)
                              OR (LNCHANGES.OLD_PROP_GROUP <> LNCHANGES.NEW_PROP_GROUP))
                     
                     THEN
                        
                        LSSQL :=
                              'UPDATE specification_prop SET '
                           || LSOLDCOL
                           || ' = NULL WHERE part_no = '''
                           || ASPARTNO
                           || ''' AND revision = '
                           || ANREVISION
                           || ' AND section_id = '
                           || LNCHANGES.OLD_SECTION
                           || ' AND sub_section_id = '
                           || LNCHANGES.OLD_SUB_SECTION
                           || ' AND property_group = '
                           || LNCHANGES.OLD_PROP_GROUP
                           || ' AND property = '
                           || LNDATA.PROPERTY
                           || ' AND attribute = '
                           || LNDATA.ATTRIBUTE;
                        LNRETVAL := EXECUTESQL( LSSQL );

                        IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
                        THEN
                           IAPIGENERAL.LOGERROR( GSSOURCE,
                                                 LSMETHOD,
                                                 IAPIGENERAL.GETLASTERRORTEXT( ) );
                           RETURN( LNRETVAL );
                        END IF;
                     END IF;

 

               END IF;
            END LOOP;
         ELSIF LNCHANGES.OLD_ATTRIBUTE IS NULL
         THEN



            FOR LNDATA IN LQDATAPROPERTY( LNCHANGES.OLD_SECTION,
                                          LNCHANGES.OLD_SUB_SECTION,
                                          LNCHANGES.OLD_PROP_GROUP,
                                          LNCHANGES.OLD_PROPERTY )
            LOOP
               LNRETVAL :=
                  CHECKMANDATORY( ASPARTNO,
                                  ANREVISION,
                                  ASFRAMENO,
                                  ANFRAMEREVISION,
                                  ANFRAMEOWNER,
                                  LNCHANGES.OLD_SECTION,
                                  LNCHANGES.OLD_SUB_SECTION,
                                  LNCHANGES.OLD_PROP_GROUP,
                                  LNCHANGES.OLD_PROPERTY,
                                  LNDATA.ATTRIBUTE,
                                  LNCHANGES.NEW_SECTION,
                                  LNCHANGES.NEW_SUB_SECTION,
                                  LNCHANGES.NEW_PROP_GROUP,
                                  LNCHANGES.NEW_PROPERTY,
                                  LNDATA.ATTRIBUTE,
                                  LSTYPE );

               IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
               THEN
                  IAPIGENERAL.LOGERROR( GSSOURCE,
                                        LSMETHOD,
                                        IAPIGENERAL.GETLASTERRORTEXT( ) );
                  RETURN( LNRETVAL );
               END IF;

               IF LNCHANGES.OLD_COLUMN = 0
               THEN
                  UPDATE SPECIFICATION_PROP
                     SET NUM_1 = LNDATA.NUM_1,
                         NUM_2 = LNDATA.NUM_2,
                         NUM_3 = LNDATA.NUM_3,
                         NUM_4 = LNDATA.NUM_4,
                         NUM_5 = LNDATA.NUM_5,
                         NUM_6 = LNDATA.NUM_6,
                         NUM_7 = LNDATA.NUM_7,
                         NUM_8 = LNDATA.NUM_8,
                         NUM_9 = LNDATA.NUM_9,
                         NUM_10 = LNDATA.NUM_10,
                         CHAR_1 = LNDATA.CHAR_1,
                         CHAR_2 = LNDATA.CHAR_2,
                         CHAR_3 = LNDATA.CHAR_3,
                         CHAR_4 = LNDATA.CHAR_4,
                         CHAR_5 = LNDATA.CHAR_5,
                         CHAR_6 = LNDATA.CHAR_6,
                         BOOLEAN_1 = LNDATA.BOOLEAN_1,
                         BOOLEAN_2 = LNDATA.BOOLEAN_2,
                         BOOLEAN_3 = LNDATA.BOOLEAN_3,
                         BOOLEAN_4 = LNDATA.BOOLEAN_4,
                         DATE_1 = LNDATA.DATE_1,
                         DATE_2 = LNDATA.DATE_2,
                         TM_SET_NO = LNDATA.TM_SET_NO,
                         TM_DET_1 = LNDATA.TM_DET_1,
                         TM_DET_2 = LNDATA.TM_DET_2,
                         TM_DET_3 = LNDATA.TM_DET_3,
                         TM_DET_4 = LNDATA.TM_DET_4,
                         INFO = LNDATA.INFO,
                         CHARACTERISTIC = LNDATA.CHARACTERISTIC,
                         CHARACTERISTIC_REV = LNDATA.CHARACTERISTIC_REV,
                         TEST_METHOD = LNDATA.TEST_METHOD,
                         TEST_METHOD_REV = LNDATA.TEST_METHOD_REV
                   WHERE PART_NO = ASPARTNO
                     AND REVISION = ANREVISION
                     AND SECTION_ID = LNCHANGES.NEW_SECTION
                     AND SUB_SECTION_ID = LNCHANGES.NEW_SUB_SECTION
                     AND PROPERTY_GROUP = LNCHANGES.NEW_PROP_GROUP
                     AND PROPERTY = LNCHANGES.NEW_PROPERTY
                     AND ATTRIBUTE = LNDATA.ATTRIBUTE;

                  
                  LNRETVAL :=
                     TRANSFERTESTMETHODDATA( ASPARTNO,
                                             ANREVISION,
                                             LNCHANGES.OLD_SECTION,
                                             LNCHANGES.OLD_SUB_SECTION,
                                             LNCHANGES.OLD_PROP_GROUP,
                                             LNCHANGES.OLD_PROPERTY,
                                             LNDATA.ATTRIBUTE,
                                             LNCHANGES.NEW_SECTION,
                                             LNCHANGES.NEW_SUB_SECTION,
                                             LNCHANGES.NEW_PROP_GROUP,
                                             LNCHANGES.NEW_PROPERTY,
                                             LNDATA.ATTRIBUTE );

                  IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
                  THEN
                     IAPIGENERAL.LOGERROR( GSSOURCE,
                                           LSMETHOD,
                                           IAPIGENERAL.GETLASTERRORTEXT( ) );
                     RETURN( LNRETVAL );
                  END IF;

                   
                   IF (   (LNCHANGES.OLD_SECTION <> LNCHANGES.NEW_SECTION)
                       OR (LNCHANGES.OLD_SUB_SECTION <> LNCHANGES.NEW_SUB_SECTION)
                       OR (LNCHANGES.OLD_PROP_GROUP <> LNCHANGES.NEW_PROP_GROUP)
                       OR (LNCHANGES.OLD_PROPERTY <> LNCHANGES.NEW_PROPERTY))
                   THEN
                   
                      
                      CLEARALLFIELDS( ASPARTNO,
                                       ANREVISION,
                                       LNCHANGES.OLD_SECTION,
                                       LNCHANGES.OLD_SUB_SECTION,
                                       LNCHANGES.OLD_PROP_GROUP,
                                       LNCHANGES.OLD_PROPERTY,
                                       LNDATA.ATTRIBUTE );
                      
                   
                   END IF;
                   
               ELSE
                  
                  LSVALUE :=
                     GETFIELDDATA( LNCHANGES.OLD_COLUMN,
                                   LNDATA.NUM_1,
                                   LNDATA.NUM_2,
                                   LNDATA.NUM_3,
                                   LNDATA.NUM_4,
                                   LNDATA.NUM_5,
                                   LNDATA.NUM_6,
                                   LNDATA.NUM_7,
                                   LNDATA.NUM_8,
                                   LNDATA.NUM_9,
                                   LNDATA.NUM_10,
                                   LNDATA.CHAR_1,
                                   LNDATA.CHAR_2,
                                   LNDATA.CHAR_3,
                                   LNDATA.CHAR_4,
                                   LNDATA.CHAR_5,
                                   LNDATA.CHAR_6,
                                   LNDATA.BOOLEAN_1,
                                   LNDATA.BOOLEAN_2,
                                   LNDATA.BOOLEAN_3,
                                   LNDATA.BOOLEAN_4,
                                   LNDATA.DATE_1,
                                   LNDATA.DATE_2,
                                   LNDATA.UOM_ID,
                                   LNDATA.UOM_REV,
                                   LNDATA.ATTRIBUTE,
                                   LNDATA.ATTRIBUTE_REV,
                                   LNDATA.TEST_METHOD,
                                   LNDATA.TEST_METHOD_REV,
                                   LNDATA.CHARACTERISTIC,
                                   LNDATA.CHARACTERISTIC_REV,
                                   LNCHANGES.NEW_PROPERTY,
                                   LNDATA.TM_DET_1,
                                   LNDATA.TM_DET_2,
                                   LNDATA.TM_DET_3,
                                   LNDATA.TM_DET_4,
                                   LNDATA.INFO );
                  LSOLDCOL := GETFIELD( LNCHANGES.OLD_COLUMN );
                  LSNEWCOL := GETFIELD( LNCHANGES.NEW_COLUMN );

                  IF LSVALUE IS NOT NULL
                  THEN
                     
                     
































































                     
                     LSSQL := GENERATEUPDATESQL(LSVALUE, LNCHANGES.OLD_COLUMN, LSNEWCOL,
                                                ASPARTNO, ANREVISION, LNCHANGES.NEW_SECTION, LNCHANGES.NEW_SUB_SECTION,
                                                LNCHANGES.NEW_PROP_GROUP, LNCHANGES.NEW_PROPERTY, LNDATA.ATTRIBUTE);
                     
                     LNRETVAL := EXECUTESQL( LSSQL );

                     IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
                     THEN
                        IAPIGENERAL.LOGERROR( GSSOURCE,
                                              LSMETHOD,
                                              IAPIGENERAL.GETLASTERRORTEXT( ) );
                        RETURN( LNRETVAL );
                     END IF;

                    
                    
































                     
                     

                     IF LNCHANGES.OLD_COLUMN = 25
                     THEN
                        UPDATE SPECIFICATION_PROP
                           SET TM_SET_NO = LNSETNO,
                               TEST_METHOD = LNTESTMETHOD,
                               TEST_METHOD_REV = LNTESTMETHODREV
                         WHERE PART_NO = ASPARTNO
                           AND REVISION = ANREVISION
                           AND SECTION_ID = LNCHANGES.NEW_SECTION
                           AND SUB_SECTION_ID = LNCHANGES.NEW_SUB_SECTION
                           AND PROPERTY_GROUP = LNCHANGES.NEW_PROP_GROUP
                           AND PROPERTY = LNCHANGES.NEW_PROPERTY
                           AND ATTRIBUTE = LNDATA.ATTRIBUTE;

                        LNRETVAL :=
                           TRANSFERTESTMETHODDATA( ASPARTNO,
                                                   ANREVISION,
                                                   LNCHANGES.OLD_SECTION,
                                                   LNCHANGES.OLD_SUB_SECTION,
                                                   LNCHANGES.OLD_PROP_GROUP,
                                                   LNCHANGES.OLD_PROPERTY,
                                                   LNDATA.ATTRIBUTE,
                                                   LNCHANGES.NEW_SECTION,
                                                   LNCHANGES.NEW_SUB_SECTION,
                                                   LNCHANGES.NEW_PROP_GROUP,
                                                   LNCHANGES.NEW_PROPERTY,
                                                   LNDATA.ATTRIBUTE );

                        IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
                        THEN
                           IAPIGENERAL.LOGERROR( GSSOURCE,
                                                 LSMETHOD,
                                                 IAPIGENERAL.GETLASTERRORTEXT( ) );
                           RETURN( LNRETVAL );
                        END IF;

                        
                        
                         UPDATE SPECIFICATION_PROP
                           SET TM_SET_NO = NULL,
                               TEST_METHOD = NULL,
                               TEST_METHOD_REV = NULL
                         WHERE PART_NO = ASPARTNO
                           AND REVISION = ANREVISION
                           AND SECTION_ID = LNCHANGES.OLD_SECTION
                           AND SUB_SECTION_ID = LNCHANGES.OLD_SUB_SECTION
                           AND PROPERTY_GROUP = LNCHANGES.OLD_PROP_GROUP
                           AND PROPERTY = LNCHANGES.OLD_PROPERTY
                           AND ATTRIBUTE = LNDATA.ATTRIBUTE;
                         

                     END IF;

                     
                     
                     IF (    (LNCHANGES.OLD_COLUMN < 23) OR (LNCHANGES.OLD_COLUMN = 40))
                        AND ( LNCHANGES.OLD_COLUMN > 0)
                        AND (    (LNCHANGES.OLD_SECTION <> LNCHANGES.NEW_SECTION)
                              OR (LNCHANGES.OLD_SUB_SECTION <> LNCHANGES.NEW_SUB_SECTION)
                              OR (LNCHANGES.OLD_PROP_GROUP <> LNCHANGES.NEW_PROP_GROUP)
                              OR (LNCHANGES.OLD_PROPERTY <> LNCHANGES.NEW_PROPERTY)
                              OR (LNCHANGES.OLD_COLUMN <> LNCHANGES.NEW_COLUMN))
                     
                     THEN
                        
                        LSSQL :=
                              'UPDATE specification_prop SET '
                           || LSOLDCOL
                           || ' = NULL WHERE part_no = '''
                           || ASPARTNO
                           || ''' AND revision = '
                           || ANREVISION
                           || ' AND section_id = '
                           || LNCHANGES.OLD_SECTION
                           || ' AND sub_section_id = '
                           || LNCHANGES.OLD_SUB_SECTION
                           || ' AND property_group = '
                           || LNCHANGES.OLD_PROP_GROUP
                           || ' AND property = '
                           || LNCHANGES.OLD_PROPERTY
                           || ' AND attribute = '
                           || LNDATA.ATTRIBUTE;
                        LNRETVAL := EXECUTESQL( LSSQL );

                        IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
                        THEN
                           IAPIGENERAL.LOGERROR( GSSOURCE,
                                                 LSMETHOD,
                                                 IAPIGENERAL.GETLASTERRORTEXT( ) );
                           RETURN( LNRETVAL );
                        END IF;
                     END IF;
                  END IF;
               END IF;
            END LOOP;
         ELSE



            LNRETVAL :=
               CHECKMANDATORY( ASPARTNO,
                               ANREVISION,
                               ASFRAMENO,
                               ANFRAMEREVISION,
                               ANFRAMEOWNER,
                               LNCHANGES.OLD_SECTION,
                               LNCHANGES.OLD_SUB_SECTION,
                               LNCHANGES.OLD_PROP_GROUP,
                               LNCHANGES.OLD_PROPERTY,
                               LNCHANGES.OLD_ATTRIBUTE,
                               LNCHANGES.NEW_SECTION,
                               LNCHANGES.NEW_SUB_SECTION,
                               LNCHANGES.NEW_PROP_GROUP,
                               LNCHANGES.NEW_PROPERTY,
                               LNCHANGES.NEW_ATTRIBUTE,
                               LSTYPE );

            IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
            THEN
               IAPIGENERAL.LOGERROR( GSSOURCE,
                                     LSMETHOD,
                                     IAPIGENERAL.GETLASTERRORTEXT( ) );
               RETURN( LNRETVAL );
            END IF;

            LBDATAFOUND := TRUE;

            IF LSTYPE = 'S'
            THEN
               BEGIN
                  SELECT NUM_1,
                         NUM_2,
                         NUM_3,
                         NUM_4,
                         NUM_5,
                         NUM_6,
                         NUM_7,
                         NUM_8,
                         NUM_9,
                         NUM_10,
                         CHAR_1,
                         CHAR_2,
                         CHAR_3,
                         CHAR_4,
                         CHAR_5,
                         CHAR_6,
                         BOOLEAN_1,
                         BOOLEAN_2,
                         BOOLEAN_3,
                         BOOLEAN_4,
                         DATE_1,
                         DATE_2,
                         UOM_ID,
                         UOM_REV,
                         ATTRIBUTE_REV,
                         TEST_METHOD,
                         TEST_METHOD_REV,
                         CHARACTERISTIC,
                         CHARACTERISTIC_REV,
                         TM_DET_1,
                         TM_DET_2,
                         TM_DET_3,
                         TM_DET_4,
                         INFO
                    INTO LNNUM1,
                         LNNUM2,
                         LNNUM3,
                         LNNUM4,
                         LNNUM5,
                         LNNUM6,
                         LNNUM7,
                         LNNUM8,
                         LNNUM9,
                         LNNUM10,
                         LSCHAR1,
                         LSCHAR2,
                         LSCHAR3,
                         LSCHAR4,
                         LSCHAR5,
                         LSCHAR6,
                         LBBOOLEAN1,
                         LBBOOLEAN2,
                         LBBOOLEAN3,
                         LBBOOLEAN4,
                         LDDATE1,
                         LDDATE2,
                         LNUOMID,
                         LNUOMREV,
                         LNATTRIBUTEREV,
                         LNTESTMETHOD,
                         LNTESTMETHODREV,
                         LNCHARACTERISTIC,
                         LNCHARACTERISTICREV,
                         LSTESTDETAILS1,
                         LSTESTDETAILS2,
                         LSTESTDETAILS3,
                         LSTESTDETAILS4,
                         LSINFO
                    FROM FT_SPEC_PROP
                   WHERE PART_NO = ASPARTNO
                     AND SECTION_ID = LNCHANGES.OLD_SECTION
                     AND SUB_SECTION_ID = LNCHANGES.OLD_SUB_SECTION
                     AND PROPERTY_GROUP = LNCHANGES.OLD_PROP_GROUP
                     AND PROPERTY = LNCHANGES.OLD_PROPERTY
                     AND ATTRIBUTE = LNCHANGES.OLD_ATTRIBUTE;
               EXCEPTION
                  WHEN NO_DATA_FOUND
                  THEN
                     LBDATAFOUND := FALSE;
               END;
            ELSIF LSTYPE = 'F'
            THEN
               BEGIN
                  SELECT NUM_1,
                         NUM_2,
                         NUM_3,
                         NUM_4,
                         NUM_5,
                         NUM_6,
                         NUM_7,
                         NUM_8,
                         NUM_9,
                         NUM_10,
                         CHAR_1,
                         CHAR_2,
                         CHAR_3,
                         CHAR_4,
                         CHAR_5,
                         CHAR_6,
                         BOOLEAN_1,
                         BOOLEAN_2,
                         BOOLEAN_3,
                         BOOLEAN_4,
                         DATE_1,
                         DATE_2,
                         UOM_ID,
                         UOM_REV,
                         ATTRIBUTE_REV,
                         TEST_METHOD,
                         TEST_METHOD_REV,
                         CHARACTERISTIC,
                         CHARACTERISTIC_REV
                    INTO LNNUM1,
                         LNNUM2,
                         LNNUM3,
                         LNNUM4,
                         LNNUM5,
                         LNNUM6,
                         LNNUM7,
                         LNNUM8,
                         LNNUM9,
                         LNNUM10,
                         LSCHAR1,
                         LSCHAR2,
                         LSCHAR3,
                         LSCHAR4,
                         LSCHAR5,
                         LSCHAR6,
                         LBBOOLEAN1,
                         LBBOOLEAN2,
                         LBBOOLEAN3,
                         LBBOOLEAN4,
                         LDDATE1,
                         LDDATE2,
                         LNUOMID,
                         LNUOMREV,
                         LNATTRIBUTEREV,
                         LNTESTMETHOD,
                         LNTESTMETHODREV,
                         LNCHARACTERISTIC,
                         LNCHARACTERISTICREV
                    FROM FRAME_PROP
                   WHERE FRAME_NO = ASFRAMENO
                     AND REVISION = ANFRAMEREVISION
                     AND OWNER = ANFRAMEOWNER
                     AND SECTION_ID = LNCHANGES.OLD_SECTION
                     AND SUB_SECTION_ID = LNCHANGES.OLD_SUB_SECTION
                     AND PROPERTY_GROUP = LNCHANGES.OLD_PROP_GROUP
                     AND PROPERTY = LNCHANGES.OLD_PROPERTY
                     AND ATTRIBUTE = LNCHANGES.OLD_ATTRIBUTE;

                  LNSETNO := 0;
               EXCEPTION
                  WHEN NO_DATA_FOUND
                  THEN
                     LBDATAFOUND := FALSE;
               END;
            END IF;

            IF LBDATAFOUND
            THEN
               IF LNCHANGES.OLD_COLUMN = 0
               THEN
                  UPDATE SPECIFICATION_PROP
                     SET NUM_1 = LNNUM1,
                         NUM_2 = LNNUM2,
                         NUM_3 = LNNUM3,
                         NUM_4 = LNNUM4,
                         NUM_5 = LNNUM5,
                         NUM_6 = LNNUM6,
                         NUM_7 = LNNUM7,
                         NUM_8 = LNNUM8,
                         NUM_9 = LNNUM9,
                         NUM_10 = LNNUM10,
                         CHAR_1 = LSCHAR1,
                         CHAR_2 = LSCHAR2,
                         CHAR_3 = LSCHAR3,
                         CHAR_4 = LSCHAR4,
                         CHAR_5 = LSCHAR5,
                         CHAR_6 = LSCHAR6,
                         BOOLEAN_1 = LBBOOLEAN1,
                         BOOLEAN_2 = LBBOOLEAN2,
                         BOOLEAN_3 = LBBOOLEAN3,
                         BOOLEAN_4 = LBBOOLEAN4,
                         DATE_1 = LDDATE1,
                         DATE_2 = LDDATE2,
                         TM_SET_NO = LNSETNO,
                         TM_DET_1 = LSTESTDETAILS1,
                         TM_DET_2 = LSTESTDETAILS2,
                         TM_DET_3 = LSTESTDETAILS3,
                         TM_DET_4 = LSTESTDETAILS4,
                         INFO = LSINFO,
                         CHARACTERISTIC = LNCHARACTERISTIC,
                         CHARACTERISTIC_REV = LNCHARACTERISTICREV,
                         TEST_METHOD = LNTESTMETHOD,
                         TEST_METHOD_REV = LNTESTMETHODREV
                   WHERE PART_NO = ASPARTNO
                     AND REVISION = ANREVISION
                     AND SECTION_ID = LNCHANGES.NEW_SECTION
                     AND SUB_SECTION_ID = LNCHANGES.NEW_SUB_SECTION
                     AND PROPERTY_GROUP = LNCHANGES.NEW_PROP_GROUP
                     AND PROPERTY = LNCHANGES.NEW_PROPERTY
                     AND ATTRIBUTE = LNCHANGES.NEW_ATTRIBUTE;

                  
                  LNRETVAL :=
                     TRANSFERTESTMETHODDATA( ASPARTNO,
                                             ANREVISION,
                                             LNCHANGES.OLD_SECTION,
                                             LNCHANGES.OLD_SUB_SECTION,
                                             LNCHANGES.OLD_PROP_GROUP,
                                             LNCHANGES.OLD_PROPERTY,
                                             LNCHANGES.OLD_ATTRIBUTE,
                                             LNCHANGES.NEW_SECTION,
                                             LNCHANGES.NEW_SUB_SECTION,
                                             LNCHANGES.NEW_PROP_GROUP,
                                             LNCHANGES.NEW_PROPERTY,
                                             LNCHANGES.NEW_ATTRIBUTE );

                  IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
                  THEN
                     IAPIGENERAL.LOGERROR( GSSOURCE,
                                           LSMETHOD,
                                           IAPIGENERAL.GETLASTERRORTEXT( ) );
                     RETURN( LNRETVAL );
                  END IF;

                  
                  IF (   (LNCHANGES.OLD_SECTION <> LNCHANGES.NEW_SECTION)
                       OR (LNCHANGES.OLD_SUB_SECTION <> LNCHANGES.NEW_SUB_SECTION)
                       OR (LNCHANGES.OLD_PROP_GROUP <> LNCHANGES.NEW_PROP_GROUP)
                       OR (LNCHANGES.OLD_PROPERTY <> LNCHANGES.NEW_PROPERTY)
                       OR (LNCHANGES.OLD_ATTRIBUTE <> LNCHANGES.NEW_ATTRIBUTE))
                  THEN
                  
                      
                      
                       CLEARALLFIELDS( ASPARTNO,
                                       ANREVISION,
                                       LNCHANGES.OLD_SECTION,
                                       LNCHANGES.OLD_SUB_SECTION,
                                       LNCHANGES.OLD_PROP_GROUP,
                                       LNCHANGES.OLD_PROPERTY,
                                       LNCHANGES.OLD_ATTRIBUTE);
                       
                  
                  END IF;
                  
               ELSE
                  
                  LSVALUE :=
                     GETFIELDDATA( LNCHANGES.OLD_COLUMN,
                                   LNNUM1,
                                   LNNUM2,
                                   LNNUM3,
                                   LNNUM4,
                                   LNNUM5,
                                   LNNUM6,
                                   LNNUM7,
                                   LNNUM8,
                                   LNNUM9,
                                   LNNUM10,
                                   LSCHAR1,
                                   LSCHAR2,
                                   LSCHAR3,
                                   LSCHAR4,
                                   LSCHAR5,
                                   LSCHAR6,
                                   LBBOOLEAN1,
                                   LBBOOLEAN2,
                                   LBBOOLEAN3,
                                   LBBOOLEAN4,
                                   LDDATE1,
                                   LDDATE2,
                                   LNUOMID,
                                   LNUOMREV,
                                   LNCHANGES.OLD_ATTRIBUTE,
                                   LNATTRIBUTEREV,
                                   LNTESTMETHOD,
                                   LNTESTMETHODREV,
                                   LNCHARACTERISTIC,
                                   LNCHARACTERISTICREV,
                                   LNCHANGES.OLD_PROPERTY,
                                   LSTESTDETAILS1,
                                   LSTESTDETAILS2,
                                   LSTESTDETAILS3,
                                   LSTESTDETAILS4,
                                   LSINFO );
                  LSOLDCOL := GETFIELD( LNCHANGES.OLD_COLUMN );
                  LSNEWCOL := GETFIELD( LNCHANGES.NEW_COLUMN );

                  IF LSVALUE IS NOT NULL
                  THEN
                     
                     































































                     
                     LSSQL := GENERATEUPDATESQL(LSVALUE, LNCHANGES.OLD_COLUMN, LSNEWCOL,
                                                ASPARTNO, ANREVISION, LNCHANGES.NEW_SECTION, LNCHANGES.NEW_SUB_SECTION,
                                                LNCHANGES.NEW_PROP_GROUP, LNCHANGES.NEW_PROPERTY, LNCHANGES.NEW_ATTRIBUTE);
                     

                     LNRETVAL := EXECUTESQL( LSSQL );

                     IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
                     THEN
                        IAPIGENERAL.LOGERROR( GSSOURCE,
                                              LSMETHOD,
                                              IAPIGENERAL.GETLASTERRORTEXT( ) );
                        RETURN( LNRETVAL );
                     END IF;

                    
                    


































                     
                     

                     IF LNCHANGES.OLD_COLUMN = 25
                     THEN
                        UPDATE SPECIFICATION_PROP
                           SET TM_SET_NO = LNSETNO,
                               TEST_METHOD = LNTESTMETHOD,
                               TEST_METHOD_REV = LNTESTMETHODREV
                         WHERE PART_NO = ASPARTNO
                           AND REVISION = ANREVISION
                           AND SECTION_ID = LNCHANGES.NEW_SECTION
                           AND SUB_SECTION_ID = LNCHANGES.NEW_SUB_SECTION
                           AND PROPERTY_GROUP = LNCHANGES.NEW_PROP_GROUP
                           AND PROPERTY = LNCHANGES.NEW_PROPERTY
                           AND ATTRIBUTE = LNCHANGES.NEW_ATTRIBUTE;

                        LNRETVAL :=
                           TRANSFERTESTMETHODDATA( ASPARTNO,
                                                   ANREVISION,
                                                   LNCHANGES.OLD_SECTION,
                                                   LNCHANGES.OLD_SUB_SECTION,
                                                   LNCHANGES.OLD_PROP_GROUP,
                                                   LNCHANGES.OLD_PROPERTY,
                                                   LNCHANGES.OLD_ATTRIBUTE,
                                                   LNCHANGES.NEW_SECTION,
                                                   LNCHANGES.NEW_SUB_SECTION,
                                                   LNCHANGES.NEW_PROP_GROUP,
                                                   LNCHANGES.NEW_PROPERTY,
                                                   LNCHANGES.NEW_ATTRIBUTE );

                        IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
                        THEN
                           IAPIGENERAL.LOGERROR( GSSOURCE,
                                                 LSMETHOD,
                                                 IAPIGENERAL.GETLASTERRORTEXT( ) );
                           RETURN( LNRETVAL );
                        END IF;

                        
                        
                        UPDATE SPECIFICATION_PROP
                           SET TM_SET_NO = NULL,
                               TEST_METHOD = NULL,
                               TEST_METHOD_REV = NULL
                         WHERE PART_NO = ASPARTNO
                           AND REVISION = ANREVISION
                           AND SECTION_ID = LNCHANGES.OLD_SECTION
                           AND SUB_SECTION_ID = LNCHANGES.OLD_SUB_SECTION
                           AND PROPERTY_GROUP = LNCHANGES.OLD_PROP_GROUP
                           AND PROPERTY = LNCHANGES.OLD_PROPERTY
                           AND ATTRIBUTE = LNCHANGES.OLD_ATTRIBUTE;
                        

                     END IF;

                     
                     
                     IF ((    LNCHANGES.OLD_COLUMN < 23) OR (LNCHANGES.OLD_COLUMN = 40)) 
                        AND ( LNCHANGES.OLD_COLUMN > 0)
                        AND (    (LNCHANGES.OLD_SECTION <> LNCHANGES.NEW_SECTION)
                              OR (LNCHANGES.OLD_SUB_SECTION <> LNCHANGES.NEW_SUB_SECTION)
                              OR (LNCHANGES.OLD_PROP_GROUP <> LNCHANGES.NEW_PROP_GROUP)
                              OR (LNCHANGES.OLD_PROPERTY <> LNCHANGES.NEW_PROPERTY)
                              OR (LNCHANGES.OLD_ATTRIBUTE <> LNCHANGES.NEW_ATTRIBUTE)
                              OR (LNCHANGES.OLD_COLUMN <> LNCHANGES.NEW_COLUMN))
                     
                     THEN
                        
                        LSSQL :=
                              'UPDATE specification_prop SET '
                           || LSOLDCOL
                           || ' = NULL WHERE part_no = '''
                           || ASPARTNO
                           || ''' AND revision = '
                           || ANREVISION
                           || ' AND section_id = '
                           || LNCHANGES.OLD_SECTION
                           || ' AND sub_section_id = '
                           || LNCHANGES.OLD_SUB_SECTION
                           || ' AND property_group = '
                           || LNCHANGES.OLD_PROP_GROUP
                           || ' AND property = '
                           || LNCHANGES.OLD_PROPERTY
                           || ' AND attribute = '
                           || LNCHANGES.OLD_ATTRIBUTE;
                        LNRETVAL := EXECUTESQL( LSSQL );

                        IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
                        THEN
                           IAPIGENERAL.LOGERROR( GSSOURCE,
                                                 LSMETHOD,
                                                 IAPIGENERAL.GETLASTERRORTEXT( ) );
                           RETURN( LNRETVAL );
                        END IF;
                     END IF;
                  END IF;
               END IF;
            END IF;
         END IF;
      END LOOP;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END TRANSFERPROPERTIES;




    FUNCTION UPDATEMULTILANGFIELDS(
      ASPARTNO              IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION            IN       IAPITYPE.REVISION_TYPE,
      LNOLDSECTION          IN       IAPITYPE.ID_TYPE,
      LNOLDSUBSECTION       IN       IAPITYPE.ID_TYPE,
      LNOLDPROPGROUP        IN       IAPITYPE.ID_TYPE,
      LNOLDPROPERTY         IN       IAPITYPE.ID_TYPE,
      LNOLDATTRIBUTE        IN       IAPITYPE.ID_TYPE,
      LNNEWSECTION          IN       IAPITYPE.ID_TYPE,
      LNNEWSUBSECTION       IN       IAPITYPE.ID_TYPE,
      LNNEWPROPGROUP        IN       IAPITYPE.ID_TYPE,
      LNNEWPROPERTY         IN       IAPITYPE.ID_TYPE,
      LNNEWATTRIBUTE        IN       IAPITYPE.ID_TYPE,
      LNLANGID              IN       IAPITYPE.LANGUAGEID_TYPE,
      ASSTRING1             IN       IAPITYPE.PROPERTYSHORTSTRING_TYPE,
      ASSTRING2             IN       IAPITYPE.PROPERTYSHORTSTRING_TYPE,
      ASSTRING3             IN       IAPITYPE.PROPERTYSHORTSTRING_TYPE,
      ASSTRING4             IN       IAPITYPE.PROPERTYSHORTSTRING_TYPE,
      ASSTRING5             IN       IAPITYPE.PROPERTYSHORTSTRING_TYPE,
      ASSTRING6             IN       IAPITYPE.PROPERTYLONGSTRING_TYPE,
      ASINFO                IN       IAPITYPE.INFO_TYPE)
      RETURN IAPITYPE.ERRORNUM_TYPE
    IS

      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'UpdateMultilangFields';
      LSSQL                         IAPITYPE.BUFFER_TYPE;
      LNDATACOUNT                   NUMBER(3);
      LNNEWSEQUENCENO               IAPITYPE.SEQUENCE_TYPE;

    BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

     
     

      SELECT COUNT(*)
      INTO LNDATACOUNT
      FROM SPECIFICATION_PROP_LANG
      WHERE PART_NO = ASPARTNO
        AND REVISION = ANREVISION
        AND SECTION_ID = LNNEWSECTION
        AND SUB_SECTION_ID = LNNEWSUBSECTION
        AND PROPERTY_GROUP = LNNEWPROPGROUP
        AND PROPERTY = LNNEWPROPERTY
        AND ATTRIBUTE = LNNEWATTRIBUTE
        AND LANG_ID = LNLANGID;


      IF (LNDATACOUNT = 0)
      THEN
        BEGIN 
         SELECT SP.SEQUENCE_NO 
         INTO LNNEWSEQUENCENO
         FROM SPECIFICATION_PROP SP
         WHERE PART_NO = ASPARTNO
             AND REVISION = ANREVISION
             AND SECTION_ID = LNNEWSECTION
             AND SUB_SECTION_ID = LNNEWSUBSECTION
             AND PROPERTY_GROUP = LNNEWPROPGROUP
             AND PROPERTY = LNNEWPROPERTY
             AND ATTRIBUTE = LNNEWATTRIBUTE;
        EXCEPTION WHEN NO_DATA_FOUND THEN NULL; END; 
IF NVL(LNNEWSEQUENCENO,0) > 0 THEN 
                LSSQL :=
                      'INSERT INTO specification_prop_lang ('
                   || 'part_no, revision, section_id, sub_section_id,'
                   || 'property_group, property, attribute, lang_id, sequence_no) '
           || ' SELECT '''
           || ASPARTNO
           || ''','
           || ANREVISION
           || ','
           || LNNEWSECTION
           || ','
           || LNNEWSUBSECTION
           || ','
           || LNNEWPROPGROUP
           || ','
           || LNNEWPROPERTY
           || ','
           || LNNEWATTRIBUTE
           || ','
           || LNLANGID
           
           ||', '
           
           || LNNEWSEQUENCENO

           || ' FROM DUAL ';


















        LNRETVAL := EXECUTESQL( LSSQL );

        IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
        THEN
           IAPIGENERAL.LOGERROR( GSSOURCE,
                                 LSMETHOD,
                                 IAPIGENERAL.GETLASTERRORTEXT( ) );
           RETURN( LNRETVAL );

        END IF;
END IF; 
      END IF;

     UPDATE SPECIFICATION_PROP_LANG
        SET CHAR_1 = NVL( ASSTRING1,
                          CHAR_1 ),
            CHAR_2 = NVL( ASSTRING2,
                          CHAR_2 ),
            CHAR_3 = NVL( ASSTRING3,
                          CHAR_3 ),
            CHAR_4 = NVL( ASSTRING4,
                          CHAR_4 ),
            CHAR_5 = NVL( ASSTRING5,
                          CHAR_5 ),
            CHAR_6 = NVL( ASSTRING6,
                          CHAR_6 ),
            INFO = NVL( ASINFO,
                        INFO )
      WHERE PART_NO = ASPARTNO
        AND REVISION = ANREVISION
        AND SECTION_ID = LNNEWSECTION
        AND SUB_SECTION_ID = LNNEWSUBSECTION
        AND PROPERTY_GROUP = LNNEWPROPGROUP
        AND PROPERTY = LNNEWPROPERTY
        AND ATTRIBUTE = LNNEWATTRIBUTE
        AND LANG_ID = LNLANGID;

       
       
       
        IF (    (LNOLDSECTION <> LNNEWSECTION)
             OR ( (LNOLDSUBSECTION IS NOT NULL) AND (LNOLDSUBSECTION <> LNNEWSUBSECTION))
             OR ( (LNOLDPROPGROUP IS NOT NULL) AND (LNOLDPROPGROUP <> LNNEWPROPGROUP))
             OR ( (LNOLDPROPERTY IS NOT NULL) AND (LNOLDPROPERTY <> LNNEWPROPERTY))
             OR ( (LNOLDATTRIBUTE IS NOT NULL) AND (LNOLDATTRIBUTE <> LNNEWATTRIBUTE)))
        THEN
        
                UPDATE SPECIFICATION_PROP_LANG
                SET CHAR_1 = NULL,
                    CHAR_2 = NULL,
                    CHAR_3 = NULL,
                    CHAR_4 = NULL,
                    CHAR_5 = NULL,
                    CHAR_6 = NULL,
                    INFO = NULL
              WHERE PART_NO = ASPARTNO
                AND REVISION = ANREVISION
                AND SECTION_ID = LNOLDSECTION
                AND SUB_SECTION_ID = LNOLDSUBSECTION
                AND PROPERTY_GROUP = LNOLDPROPGROUP
                AND PROPERTY = LNOLDPROPERTY
                AND ATTRIBUTE = LNOLDATTRIBUTE
                AND LANG_ID = LNLANGID;
        
        END IF;
        

        RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );

    EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
    END UPDATEMULTILANGFIELDS;




   FUNCTION TRANSFERPROPERTIESMULTILANG(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE,
      ASFRAMENO                  IN       IAPITYPE.FRAMENO_TYPE,
      ANFRAMEREVISION            IN       IAPITYPE.FRAMEREVISION_TYPE,
      ANFRAMEOWNER               IN       IAPITYPE.OWNER_TYPE,
      ANRULEID                   IN       IAPITYPE.ID_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS















      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'TransferPropertiesMultiLang';
      LSCHAR1                       IAPITYPE.PROPERTYSHORTSTRING_TYPE;
      LSCHAR2                       IAPITYPE.PROPERTYSHORTSTRING_TYPE;
      LSCHAR3                       IAPITYPE.PROPERTYSHORTSTRING_TYPE;
      LSCHAR4                       IAPITYPE.PROPERTYSHORTSTRING_TYPE;
      LSCHAR5                       IAPITYPE.PROPERTYSHORTSTRING_TYPE;
      LSCHAR6                       IAPITYPE.PROPERTYLONGSTRING_TYPE;
      LSINFO                        IAPITYPE.INFO_TYPE;
      LSVALUE                       IAPITYPE.STRING_TYPE;
      LSOLDCOL                      IAPITYPE.STRING_TYPE;
      LSNEWCOL                      IAPITYPE.STRING_TYPE;
      LSSQL                         IAPITYPE.BUFFER_TYPE;
      LNLANGID                      IAPITYPE.LANGUAGEID_TYPE;
      LBDATAFOUND                   IAPITYPE.LOGICAL_TYPE;
      LNMAXLANGID                   IAPITYPE.LANGUAGEID_TYPE;
      LSDUMMY                       IAPITYPE.STRINGVAL_TYPE( 1 );
      
      LNNR    NUMBER;

      
      CURSOR LQCHANGES
      IS
         SELECT OLD_SECTION,
                OLD_SUB_SECTION,
                OLD_PROP_GROUP,
                OLD_PROPERTY,
                OLD_ATTRIBUTE,
                OLD_COLUMN,
                NEW_SECTION,
                NEW_SUB_SECTION,
                NEW_PROP_GROUP,
                NEW_PROPERTY,
                NEW_ATTRIBUTE,
                NEW_COLUMN
           FROM FT_BASE_RULES
          WHERE FT_GROUP_ID = ANRULEID
            AND OBJECT_TYPE IN( 1, 4 )
            AND (    NEW_COLUMN = 0
                  OR NEW_COLUMN IN( 11, 12, 13, 14, 15, 16, 40 ) );


      CURSOR LQDATASECTION(
         ANSECTION                           IAPITYPE.ID_TYPE )
      IS
         SELECT CHAR_1,
                CHAR_2,
                CHAR_3,
                CHAR_4,
                CHAR_5,
                CHAR_6,
                SUB_SECTION_ID,
                PROPERTY_GROUP,
                PROPERTY,
                ATTRIBUTE,
                LANG_ID,
                INFO
           FROM FT_SPEC_PROP_LANG
          WHERE PART_NO = ASPARTNO
            AND SECTION_ID = ANSECTION;


      CURSOR LQDATASUBSECTION(
         ANSECTION                           IAPITYPE.ID_TYPE,
         ANSUBSECTION                        IAPITYPE.ID_TYPE )
      IS
         SELECT CHAR_1,
                CHAR_2,
                CHAR_3,
                CHAR_4,
                CHAR_5,
                CHAR_6,
                SUB_SECTION_ID,
                PROPERTY_GROUP,
                PROPERTY,
                ATTRIBUTE,
                LANG_ID,
                INFO
           FROM FT_SPEC_PROP_LANG
          WHERE PART_NO = ASPARTNO
            AND SECTION_ID = ANSECTION
            AND SUB_SECTION_ID = ANSUBSECTION;


      CURSOR LQDATAPROPGROUP(
         ANSECTION                           IAPITYPE.ID_TYPE,
         ANSUBSECTION                        IAPITYPE.ID_TYPE,
         ANPROPERTYGROUP                     IAPITYPE.ID_TYPE )
      IS
         SELECT CHAR_1,
                CHAR_2,
                CHAR_3,
                CHAR_4,
                CHAR_5,
                CHAR_6,
                SUB_SECTION_ID,
                PROPERTY_GROUP,
                PROPERTY,
                ATTRIBUTE,
                LANG_ID,
                INFO
           FROM FT_SPEC_PROP_LANG
          WHERE PART_NO = ASPARTNO
            AND SECTION_ID = ANSECTION
            AND SUB_SECTION_ID = ANSUBSECTION
            AND PROPERTY_GROUP = ANPROPERTYGROUP;


      CURSOR LQDATAPROPERTY(
         ANSECTION                           IAPITYPE.ID_TYPE,
         ANSUBSECTION                        IAPITYPE.ID_TYPE,
         ANPROPERTYGROUP                     IAPITYPE.ID_TYPE,
         ANPROPERTY                          IAPITYPE.ID_TYPE )
      IS
         SELECT CHAR_1,
                CHAR_2,
                CHAR_3,
                CHAR_4,
                CHAR_5,
                CHAR_6,
                SUB_SECTION_ID,
                PROPERTY_GROUP,
                PROPERTY,
                ATTRIBUTE,
                LANG_ID,
                INFO
           FROM FT_SPEC_PROP_LANG
          WHERE PART_NO = ASPARTNO
            AND SECTION_ID = ANSECTION
            AND SUB_SECTION_ID = ANSUBSECTION
            AND PROPERTY_GROUP = ANPROPERTYGROUP
            AND PROPERTY = ANPROPERTY;

      CURSOR LQSPECPROPLANG(
         ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
         ANREVISION                 IN       IAPITYPE.REVISION_TYPE,
         ANSECTIONID                IN       IAPITYPE.ID_TYPE,
         ANSUBSECTIONID             IN       IAPITYPE.ID_TYPE,
         ANPROPERTYGROUPID          IN       IAPITYPE.ID_TYPE,
         ANPROPERTYID               IN       IAPITYPE.ID_TYPE,
         ANATTRIBUTEID              IN       IAPITYPE.ID_TYPE,
         ANLANGID                   IN       IAPITYPE.ID_TYPE )
      IS
         SELECT 'X'
           FROM SPECIFICATION_PROP_LANG
          WHERE PART_NO = ASPARTNO
            AND REVISION = ANREVISION
            AND SECTION_ID = ANSECTIONID
            AND SUB_SECTION_ID = ANSUBSECTIONID
            AND PROPERTY_GROUP = ANPROPERTYGROUPID
            AND PROPERTY = ANPROPERTYID
            AND ATTRIBUTE = ANATTRIBUTEID
            AND LANG_ID = ANLANGID;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      SELECT MAX( LANG_ID )
        INTO LNMAXLANGID
        FROM ITLANG;

      
      FOR LNCHANGES IN LQCHANGES
      LOOP
         IF LNCHANGES.OLD_SUB_SECTION IS NULL
         THEN



            FOR LNDATA IN LQDATASECTION( LNCHANGES.OLD_SECTION )
            LOOP
               IF LNCHANGES.OLD_COLUMN = 0
               THEN
                  BEGIN
                     
                     























                    
                    LNRETVAL :=
                        UPDATEMULTILANGFIELDS( ASPARTNO,
                                               ANREVISION,
                                               
                                               LNCHANGES.OLD_SECTION,
                                               LNDATA.SUB_SECTION_ID,
                                               LNDATA.PROPERTY_GROUP,
                                               LNDATA.PROPERTY,
                                               LNDATA.ATTRIBUTE,
                                               
                                               LNCHANGES.NEW_SECTION,
                                               LNDATA.SUB_SECTION_ID,
                                               LNDATA.PROPERTY_GROUP,
                                               LNDATA.PROPERTY,
                                               LNDATA.ATTRIBUTE,
                                               LNDATA.LANG_ID,
                                               
                                               LNDATA.CHAR_1,
                                               LNDATA.CHAR_2,
                                               LNDATA.CHAR_3,
                                               LNDATA.CHAR_4,
                                               LNDATA.CHAR_5,
                                               LNDATA.CHAR_6,
                                               LNDATA.INFO);

                    IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
                    THEN
                        IAPIGENERAL.LOGERROR( GSSOURCE,
                                             LSMETHOD,
                                             IAPIGENERAL.GETLASTERRORTEXT( ) );
                        RETURN( LNRETVAL );
                    END IF;
                  
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        IAPIGENERAL.LOGERROR( GSSOURCE,
                                              LSMETHOD,
                                              SQLERRM );
                        RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
                  END;
               ELSE
                  
                  SELECT DECODE( LNCHANGES.OLD_COLUMN,
                                 11, LNDATA.CHAR_1,
                                 12, LNDATA.CHAR_2,
                                 13, LNDATA.CHAR_3,
                                 14, LNDATA.CHAR_4,
                                 15, LNDATA.CHAR_5,
                                 16, LNDATA.CHAR_6,
                                 40, LNDATA.INFO )
                    INTO LSVALUE
                    FROM DUAL;

                  LSOLDCOL := GETFIELD( LNCHANGES.OLD_COLUMN );
                  LSNEWCOL := GETFIELD( LNCHANGES.NEW_COLUMN );

                  IF LSVALUE IS NOT NULL
                  THEN
                     
                     IF LSNEWCOL = 'info'
                     THEN
                        LSVALUE := SUBSTR( LSVALUE,
                                           1,
                                           2000 );
                     ELSIF LSNEWCOL = 'char_6'
                     THEN
                        LSVALUE := SUBSTR( LSVALUE,
                                           1,
                                           256 );
                     ELSE
                        LSVALUE := SUBSTR( LSVALUE,
                                           1,
                                           40 );
                     END IF;

                     LSVALUE := REPLACE( LSVALUE,
                                         '''',
                                         '''''' );

                     OPEN LQSPECPROPLANG( ASPARTNO,
                                          ANREVISION,
                                          LNCHANGES.NEW_SECTION,
                                          LNDATA.SUB_SECTION_ID,
                                          LNDATA.PROPERTY_GROUP,
                                          LNDATA.PROPERTY,
                                          LNDATA.ATTRIBUTE,
                                          LNDATA.LANG_ID );

                     FETCH LQSPECPROPLANG
                      INTO LSDUMMY;

                     IF LQSPECPROPLANG%NOTFOUND
                     THEN
                        CLOSE LQSPECPROPLANG;

                        LSSQL :=
                              'INSERT INTO specification_prop_lang ('
                           || 'part_no, revision, section_id, sub_section_id,'
                           || 'property_group, property, attribute, lang_id, sequence_no,'
                           || LSNEWCOL
                           || ') '
                           || ' SELECT '''
                           || ASPARTNO
                           || ''','
                           || ANREVISION
                           || ','
                           || LNCHANGES.NEW_SECTION
                           || ','
                           || LNDATA.SUB_SECTION_ID
                           || ','
                           || LNDATA.PROPERTY_GROUP
                           || ','
                           || LNDATA.PROPERTY
                           || ','
                           || LNDATA.ATTRIBUTE
                           || ','
                           || LNDATA.LANG_ID
                           || ', sp.sequence_no,'''
                           || LSVALUE
                           || ''' FROM specification_prop sp '
                           || 'WHERE part_no = '''
                           || ASPARTNO
                           || ''' AND revision = '
                           || ANREVISION
                           || ' AND section_id = '
                           || LNCHANGES.NEW_SECTION
                           || ' AND sub_section_id = '
                           || LNDATA.SUB_SECTION_ID
                           || ' AND property_group = '
                           || LNDATA.PROPERTY_GROUP
                           || ' AND property = '
                           || LNDATA.PROPERTY
                           || ' AND attribute = '
                           || LNDATA.ATTRIBUTE;
                        LNRETVAL := EXECUTESQL( LSSQL );

                        IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
                        THEN
                           IAPIGENERAL.LOGERROR( GSSOURCE,
                                                 LSMETHOD,
                                                 IAPIGENERAL.GETLASTERRORTEXT( ) );
                           RETURN( LNRETVAL );
                        END IF;
                     ELSIF LQSPECPROPLANG%FOUND
                     THEN
                        CLOSE LQSPECPROPLANG;

                        LSSQL :=
                              'UPDATE specification_prop_lang SET '
                           || LSNEWCOL
                           || ' = nvl('''
                           || LSVALUE
                           || ''', '
                           || LSNEWCOL
                           || ') WHERE part_no = '''
                           || ASPARTNO
                           || ''' AND revision = '
                           || ANREVISION
                           || ' AND section_id = '
                           || LNCHANGES.NEW_SECTION
                           || ' AND sub_section_id = '
                           || LNDATA.SUB_SECTION_ID
                           || ' AND property_group = '
                           || LNDATA.PROPERTY_GROUP
                           || ' AND property = '
                           || LNDATA.PROPERTY
                           || ' AND attribute = '
                           || LNDATA.ATTRIBUTE
                           || ' AND lang_id = '
                           || LNDATA.LANG_ID;
                        LNRETVAL := EXECUTESQL( LSSQL );

                        IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
                        THEN
                           IAPIGENERAL.LOGERROR( GSSOURCE,
                                                 LSMETHOD,
                                                 IAPIGENERAL.GETLASTERRORTEXT( ) );
                           RETURN( LNRETVAL );
                        END IF;
                     END IF;

                     
                     
                     IF ( (UPPER( LSOLDCOL ) IN( 'CHAR_1', 'CHAR_2', 'CHAR_3', 'CHAR_4', 'CHAR_5', 'CHAR_6', 'INFO' ))
                          AND (  (LNCHANGES.OLD_SECTION <> LNCHANGES.NEW_SECTION)
                            OR (LNCHANGES.OLD_COLUMN <> LNCHANGES.NEW_COLUMN)))
                     
                     THEN
                        
                        LSSQL :=
                              'UPDATE specification_prop_lang SET '
                           || LSOLDCOL
                           || ' = NULL WHERE part_no = '''
                           || ASPARTNO
                           || ''' AND revision = '
                           || ANREVISION
                           || ' AND section_id = '
                           || LNCHANGES.OLD_SECTION
                           || ' AND sub_section_id = '
                           || LNDATA.SUB_SECTION_ID
                           || ' AND property_group = '
                           || LNDATA.PROPERTY_GROUP
                           || ' AND property = '
                           || LNDATA.PROPERTY
                           || ' AND attribute = '
                           || LNDATA.ATTRIBUTE
                           || ' AND lang_id = '
                           || LNDATA.LANG_ID;
                        LNRETVAL := EXECUTESQL( LSSQL );

                        IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
                        THEN
                           IAPIGENERAL.LOGERROR( GSSOURCE,
                                                 LSMETHOD,
                                                 IAPIGENERAL.GETLASTERRORTEXT( ) );
                           RETURN( LNRETVAL );
                        END IF;
                     END IF;
                  END IF;
               END IF;
            END LOOP;
         ELSIF LNCHANGES.OLD_PROP_GROUP IS NULL
         THEN



            FOR LNDATA IN LQDATASUBSECTION( LNCHANGES.OLD_SECTION,
                                            LNCHANGES.OLD_SUB_SECTION )
            LOOP
               IF LNCHANGES.OLD_COLUMN = 0
               THEN
                  BEGIN
                     
                     























                     
                     LNRETVAL :=
                        UPDATEMULTILANGFIELDS( ASPARTNO,
                                               ANREVISION,
                                               
                                               LNCHANGES.OLD_SECTION,
                                               LNCHANGES.OLD_SUB_SECTION,
                                               LNDATA.PROPERTY_GROUP,
                                               LNDATA.PROPERTY,
                                               LNDATA.ATTRIBUTE,
                                               
                                               LNCHANGES.NEW_SECTION,
                                               LNCHANGES.NEW_SUB_SECTION,
                                               LNDATA.PROPERTY_GROUP,
                                               LNDATA.PROPERTY,
                                               LNDATA.ATTRIBUTE,
                                               LNDATA.LANG_ID,
                                               
                                               LNDATA.CHAR_1,
                                               LNDATA.CHAR_2,
                                               LNDATA.CHAR_3,
                                               LNDATA.CHAR_4,
                                               LNDATA.CHAR_5,
                                               LNDATA.CHAR_6,
                                               LNDATA.INFO);

                     IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
                     THEN
                           IAPIGENERAL.LOGERROR( GSSOURCE,
                                                 LSMETHOD,
                                                 IAPIGENERAL.GETLASTERRORTEXT( ) );
                           RETURN( LNRETVAL );
                     END IF;
                     
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        IAPIGENERAL.LOGERROR( GSSOURCE,
                                              LSMETHOD,
                                              SQLERRM );
                        RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
                  END;
               ELSE
                  
                  SELECT DECODE( LNCHANGES.OLD_COLUMN,
                                 11, LNDATA.CHAR_1,
                                 12, LNDATA.CHAR_2,
                                 13, LNDATA.CHAR_3,
                                 14, LNDATA.CHAR_4,
                                 15, LNDATA.CHAR_5,
                                 16, LNDATA.CHAR_6,
                                 40, LNDATA.INFO )
                    INTO LSVALUE
                    FROM DUAL;

                  LSOLDCOL := GETFIELD( LNCHANGES.OLD_COLUMN );
                  LSNEWCOL := GETFIELD( LNCHANGES.NEW_COLUMN );

                  IF LSVALUE IS NOT NULL
                  THEN
                     
                     IF LSNEWCOL = 'info'
                     THEN
                        LSVALUE := SUBSTR( LSVALUE,
                                           1,
                                           2000 );
                     ELSIF LSNEWCOL = 'char_6'
                     THEN
                        LSVALUE := SUBSTR( LSVALUE,
                                           1,
                                           256 );
                     ELSE
                        LSVALUE := SUBSTR( LSVALUE,
                                           1,
                                           40 );
                     END IF;

                     LSVALUE := REPLACE( LSVALUE,
                                         '''',
                                         '''''' );

                     OPEN LQSPECPROPLANG( ASPARTNO,
                                          ANREVISION,
                                          LNCHANGES.NEW_SECTION,
                                          LNCHANGES.NEW_SUB_SECTION,
                                          LNDATA.PROPERTY_GROUP,
                                          LNDATA.PROPERTY,
                                          LNDATA.ATTRIBUTE,
                                          LNDATA.LANG_ID );

                     FETCH LQSPECPROPLANG
                      INTO LSDUMMY;

                     IF LQSPECPROPLANG%NOTFOUND
                     THEN
                        CLOSE LQSPECPROPLANG;

                        LSSQL :=
                              'INSERT INTO specification_prop_lang ('
                           || 'part_no, revision, section_id, sub_section_id,'
                           || 'property_group, property, attribute, lang_id, sequence_no,'
                           || LSNEWCOL
                           || ') '
                           || ' SELECT '''
                           || ASPARTNO
                           || ''','
                           || ANREVISION
                           || ','
                           || LNCHANGES.NEW_SECTION
                           || ','
                           || LNCHANGES.NEW_SUB_SECTION
                           || ','
                           || LNDATA.PROPERTY_GROUP
                           || ','
                           || LNDATA.PROPERTY
                           || ','
                           || LNDATA.ATTRIBUTE
                           || ','
                           || LNDATA.LANG_ID
                           || ', sp.sequence_no,'''
                           || LSVALUE
                           || ''' FROM specification_prop sp '
                           || 'WHERE part_no = '''
                           || ASPARTNO
                           || ''' AND revision = '
                           || ANREVISION
                           || ' AND section_id = '
                           || LNCHANGES.NEW_SECTION
                           || ' AND sub_section_id = '
                           || LNCHANGES.NEW_SUB_SECTION
                           || ' AND property_group = '
                           || LNDATA.PROPERTY_GROUP
                           || ' AND property = '
                           || LNDATA.PROPERTY
                           || ' AND attribute = '
                           || LNDATA.ATTRIBUTE;
                        LNRETVAL := EXECUTESQL( LSSQL );

                        IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
                        THEN
                           IAPIGENERAL.LOGERROR( GSSOURCE,
                                                 LSMETHOD,
                                                 IAPIGENERAL.GETLASTERRORTEXT( ) );
                           RETURN( LNRETVAL );
                        END IF;
                     ELSIF LQSPECPROPLANG%FOUND
                     THEN
                        CLOSE LQSPECPROPLANG;

                        LSSQL :=
                              'UPDATE specification_prop_lang SET '
                           || LSNEWCOL
                           || ' = nvl('''
                           || LSVALUE
                           || ''', '
                           || LSNEWCOL
                           || ') WHERE part_no = '''
                           
                           || ASPARTNO 
                           
                           || ''' AND revision = '
                           || ANREVISION
                           || ' AND section_id = '
                           || LNCHANGES.NEW_SECTION
                           || ' AND sub_section_id = '
                           || LNCHANGES.NEW_SUB_SECTION
                           || ' AND property_group = '
                           || LNDATA.PROPERTY_GROUP
                           || ' AND property = '
                           || LNDATA.PROPERTY
                           || ' AND attribute = '
                           || LNDATA.ATTRIBUTE
                           || ' AND lang_id = '
                           || LNDATA.LANG_ID;
                        LNRETVAL := EXECUTESQL( LSSQL );

                        IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
                        THEN
                           IAPIGENERAL.LOGERROR( GSSOURCE,
                                                 LSMETHOD,
                                                 IAPIGENERAL.GETLASTERRORTEXT( ) );
                           RETURN( LNRETVAL );
                        END IF;
                     END IF;

                     
                     
                     IF ( (UPPER( LSOLDCOL ) IN( 'CHAR_1', 'CHAR_2', 'CHAR_3', 'CHAR_4', 'CHAR_5', 'CHAR_6', 'INFO' ))
                          AND (  (LNCHANGES.OLD_SECTION <> LNCHANGES.NEW_SECTION)
                            OR (LNCHANGES.OLD_SUB_SECTION <> LNCHANGES.NEW_SUB_SECTION)
                            OR (LNCHANGES.OLD_COLUMN <> LNCHANGES.NEW_COLUMN)))
                     
                     THEN
                        
                        LSSQL :=
                              'UPDATE specification_prop_lang SET '
                           || LSOLDCOL
                           || ' = NULL WHERE part_no = '''
                           || ASPARTNO
                           || ''' AND revision = '
                           || ANREVISION
                           || ' AND section_id = '
                           || LNCHANGES.OLD_SECTION
                           || ' AND sub_section_id = '
                           || LNCHANGES.OLD_SUB_SECTION
                           || ' AND property_group = '
                           || LNDATA.PROPERTY_GROUP
                           || ' AND property = '
                           || LNDATA.PROPERTY
                           || ' AND attribute = '
                           || LNDATA.ATTRIBUTE
                           || ' AND lang_id = '
                           || LNDATA.LANG_ID;
                        LNRETVAL := EXECUTESQL( LSSQL );

                        IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
                        THEN
                           IAPIGENERAL.LOGERROR( GSSOURCE,
                                                 LSMETHOD,
                                                 IAPIGENERAL.GETLASTERRORTEXT( ) );
                           RETURN( LNRETVAL );
                        END IF;
                     END IF;
                  END IF;
               END IF;
            END LOOP;
         ELSIF LNCHANGES.OLD_PROPERTY IS NULL
         THEN



            FOR LNDATA IN LQDATAPROPGROUP( LNCHANGES.OLD_SECTION,
                                           LNCHANGES.OLD_SUB_SECTION,
                                           LNCHANGES.OLD_PROP_GROUP )
            LOOP
               IF LNCHANGES.OLD_COLUMN = 0
               THEN
                  BEGIN
                     
                     























                    
                     LNRETVAL :=
                        UPDATEMULTILANGFIELDS( ASPARTNO,
                                               ANREVISION,
                                               
                                               LNCHANGES.OLD_SECTION,
                                               LNCHANGES.OLD_SUB_SECTION,
                                               LNCHANGES.OLD_PROP_GROUP,
                                               LNDATA.PROPERTY,
                                               LNDATA.ATTRIBUTE,
                                               
                                               LNCHANGES.NEW_SECTION,
                                               LNCHANGES.NEW_SUB_SECTION,
                                               LNCHANGES.NEW_PROP_GROUP,
                                               LNDATA.PROPERTY,
                                               LNDATA.ATTRIBUTE,
                                               LNDATA.LANG_ID,
                                               
                                               LNDATA.CHAR_1,
                                               LNDATA.CHAR_2,
                                               LNDATA.CHAR_3,
                                               LNDATA.CHAR_4,
                                               LNDATA.CHAR_5,
                                               LNDATA.CHAR_6,
                                               LNDATA.INFO);

                        IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
                        THEN
                           IAPIGENERAL.LOGERROR( GSSOURCE,
                                                 LSMETHOD,
                                                 IAPIGENERAL.GETLASTERRORTEXT( ) );
                           RETURN( LNRETVAL );
                       END IF;
                       
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        IAPIGENERAL.LOGERROR( GSSOURCE,
                                              LSMETHOD,
                                              SQLERRM );
                        RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
                  END;
               ELSE
                  
                  SELECT DECODE( LNCHANGES.OLD_COLUMN,
                                 11, LNDATA.CHAR_1,
                                 12, LNDATA.CHAR_2,
                                 13, LNDATA.CHAR_3,
                                 14, LNDATA.CHAR_4,
                                 15, LNDATA.CHAR_5,
                                 16, LNDATA.CHAR_6,
                                 40, LNDATA.INFO )
                    INTO LSVALUE
                    FROM DUAL;

                  LSOLDCOL := GETFIELD( LNCHANGES.OLD_COLUMN );
                  LSNEWCOL := GETFIELD( LNCHANGES.NEW_COLUMN );

                  IF LSVALUE IS NOT NULL
                  THEN
                     
                     IF LSNEWCOL = 'info'
                     THEN
                        LSVALUE := SUBSTR( LSVALUE,
                                           1,
                                           2000 );
                     ELSIF LSNEWCOL = 'char_6'
                     THEN
                        LSVALUE := SUBSTR( LSVALUE,
                                           1,
                                           256 );
                     ELSE
                        LSVALUE := SUBSTR( LSVALUE,
                                           1,
                                           40 );
                     END IF;

                     LSVALUE := REPLACE( LSVALUE,
                                         '''',
                                         '''''' );

                     OPEN LQSPECPROPLANG( ASPARTNO,
                                          ANREVISION,
                                          LNCHANGES.NEW_SECTION,
                                          LNCHANGES.NEW_SUB_SECTION,
                                          LNCHANGES.NEW_PROP_GROUP,
                                          LNDATA.PROPERTY,
                                          LNDATA.ATTRIBUTE,
                                          LNDATA.LANG_ID );

                     FETCH LQSPECPROPLANG
                      INTO LSDUMMY;

                     IF LQSPECPROPLANG%NOTFOUND
                     THEN
                        CLOSE LQSPECPROPLANG;

                        LSSQL :=
                              'INSERT INTO specification_prop_lang ('
                           || 'part_no, revision, section_id, sub_section_id,'
                           || 'property_group, property, attribute, lang_id, sequence_no,'
                           || LSNEWCOL
                           || ') '
                           || ' SELECT '''
                           || ASPARTNO
                           || ''','
                           || ANREVISION
                           || ','
                           || LNCHANGES.NEW_SECTION
                           || ','
                           || LNCHANGES.NEW_SUB_SECTION
                           || ','
                           || LNCHANGES.NEW_PROP_GROUP
                           || ','
                           || LNDATA.PROPERTY
                           || ','
                           || LNDATA.ATTRIBUTE
                           || ','
                           || LNDATA.LANG_ID
                           || ', sp.sequence_no,'''
                           || LSVALUE
                           || ''' FROM specification_prop sp '
                           || 'WHERE part_no = '''
                           || ASPARTNO
                           || ''' AND revision = '
                           || ANREVISION
                           || ' AND section_id = '
                           || LNCHANGES.NEW_SECTION
                           || ' AND sub_section_id = '
                           || LNCHANGES.NEW_SUB_SECTION
                           || ' AND property_group = '
                           || LNCHANGES.NEW_PROP_GROUP
                           || ' AND property = '
                           || LNDATA.PROPERTY
                           || ' AND attribute = '
                           || LNDATA.ATTRIBUTE;
                        LNRETVAL := EXECUTESQL( LSSQL );

                        IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
                        THEN
                           IAPIGENERAL.LOGERROR( GSSOURCE,
                                                 LSMETHOD,
                                                 IAPIGENERAL.GETLASTERRORTEXT( ) );
                           RETURN( LNRETVAL );
                        END IF;
                     ELSIF LQSPECPROPLANG%FOUND
                     THEN
                        CLOSE LQSPECPROPLANG;

                        LSSQL :=
                              'UPDATE specification_prop_lang SET '
                           || LSNEWCOL
                           || ' = nvl('''
                           || LSVALUE
                           || ''', '
                           || LSNEWCOL
                           || ') WHERE part_no = '''
                           || ASPARTNO
                           || ''' AND revision = '
                           || ANREVISION
                           || ' AND section_id = '
                           || LNCHANGES.NEW_SECTION
                           || ' AND sub_section_id = '
                           || LNCHANGES.NEW_SUB_SECTION
                           || ' AND property_group = '
                           || LNCHANGES.NEW_PROP_GROUP
                           || ' AND property = '
                           || LNDATA.PROPERTY
                           || ' AND attribute = '
                           || LNDATA.ATTRIBUTE
                           || ' AND lang_id = '
                           || LNDATA.LANG_ID;
                        LNRETVAL := EXECUTESQL( LSSQL );

                        IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
                        THEN
                           IAPIGENERAL.LOGERROR( GSSOURCE,
                                                 LSMETHOD,
                                                 IAPIGENERAL.GETLASTERRORTEXT( ) );
                           RETURN( LNRETVAL );
                        END IF;
                     END IF;

                     
                     
                     IF ( (UPPER( LSOLDCOL ) IN( 'CHAR_1', 'CHAR_2', 'CHAR_3', 'CHAR_4', 'CHAR_5', 'CHAR_6', 'INFO' ))
                          AND (  (LNCHANGES.OLD_SECTION <> LNCHANGES.NEW_SECTION)
                            OR (LNCHANGES.OLD_SUB_SECTION <> LNCHANGES.NEW_SUB_SECTION)
                            OR (LNCHANGES.OLD_PROP_GROUP <> LNCHANGES.NEW_PROP_GROUP)
                            OR (LNCHANGES.OLD_COLUMN <> LNCHANGES.NEW_COLUMN)))
                     
                     THEN
                        
                        LSSQL :=
                              'UPDATE specification_prop_lang SET '
                           || LSOLDCOL
                           || ' = NULL WHERE part_no = '''
                           || ASPARTNO
                           || ''' AND revision = '
                           || ANREVISION
                           || ' AND section_id = '
                           || LNCHANGES.OLD_SECTION
                           || ' AND sub_section_id = '
                           || LNCHANGES.OLD_SUB_SECTION
                           || ' AND property_group = '
                           || LNCHANGES.OLD_PROP_GROUP
                           || ' AND property = '
                           || LNDATA.PROPERTY
                           || ' AND attribute = '
                           || LNDATA.ATTRIBUTE
                           || ' AND lang_id = '
                           || LNDATA.LANG_ID;
                        LNRETVAL := EXECUTESQL( LSSQL );

                        IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
                        THEN
                           IAPIGENERAL.LOGERROR( GSSOURCE,
                                                 LSMETHOD,
                                                 IAPIGENERAL.GETLASTERRORTEXT( ) );
                           RETURN( LNRETVAL );
                        END IF;
                     END IF;
                  END IF;
               END IF;
            END LOOP;
         ELSIF LNCHANGES.OLD_ATTRIBUTE IS NULL
         THEN



            FOR LNDATA IN LQDATAPROPERTY( LNCHANGES.OLD_SECTION,
                                          LNCHANGES.OLD_SUB_SECTION,
                                          LNCHANGES.OLD_PROP_GROUP,
                                          LNCHANGES.OLD_PROPERTY )
            LOOP
               IF LNCHANGES.OLD_COLUMN = 0
               THEN
                  BEGIN
                     
                     























                      
                      LNRETVAL :=
                        UPDATEMULTILANGFIELDS( ASPARTNO,
                                               ANREVISION,
                                               
                                               LNCHANGES.OLD_SECTION,
                                               LNCHANGES.OLD_SUB_SECTION,
                                               LNCHANGES.OLD_PROP_GROUP,
                                               LNCHANGES.OLD_PROPERTY,
                                               LNDATA.ATTRIBUTE,
                                               
                                               LNCHANGES.NEW_SECTION,
                                               LNCHANGES.NEW_SUB_SECTION,
                                               LNCHANGES.NEW_PROP_GROUP,
                                               LNCHANGES.NEW_PROPERTY,
                                               LNDATA.ATTRIBUTE,
                                               LNDATA.LANG_ID,
                                               
                                               LNDATA.CHAR_1,
                                               LNDATA.CHAR_2,
                                               LNDATA.CHAR_3,
                                               LNDATA.CHAR_4,
                                               LNDATA.CHAR_5,
                                               LNDATA.CHAR_6,
                                               LNDATA.INFO);

                       IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
                       THEN
                           IAPIGENERAL.LOGERROR( GSSOURCE,
                                                 LSMETHOD,
                                                 IAPIGENERAL.GETLASTERRORTEXT( ) );
                           RETURN( LNRETVAL );
                       END IF;
                       
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        IAPIGENERAL.LOGERROR( GSSOURCE,
                                              LSMETHOD,
                                              SQLERRM );
                        RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
                  END;
               ELSE
                  
                  SELECT DECODE( LNCHANGES.OLD_COLUMN,
                                 11, LNDATA.CHAR_1,
                                 12, LNDATA.CHAR_2,
                                 13, LNDATA.CHAR_3,
                                 14, LNDATA.CHAR_4,
                                 15, LNDATA.CHAR_5,
                                 16, LNDATA.CHAR_6,
                                 40, LNDATA.INFO )
                    INTO LSVALUE
                    FROM DUAL;

                  LSOLDCOL := GETFIELD( LNCHANGES.OLD_COLUMN );
                  LSNEWCOL := GETFIELD( LNCHANGES.NEW_COLUMN );

                  IF LSVALUE IS NOT NULL
                  THEN
                     
                     IF LSNEWCOL = 'info'
                     THEN
                        LSVALUE := SUBSTR( LSVALUE,
                                           1,
                                           2000 );
                     ELSIF LSNEWCOL = 'char_6'
                     THEN
                        LSVALUE := SUBSTR( LSVALUE,
                                           1,
                                           256 );
                     ELSE
                        LSVALUE := SUBSTR( LSVALUE,
                                           1,
                                           40 );
                     END IF;

                     LSVALUE := REPLACE( LSVALUE,
                                         '''',
                                         '''''' );

                     OPEN LQSPECPROPLANG( ASPARTNO,
                                          ANREVISION,
                                          LNCHANGES.NEW_SECTION,
                                          LNCHANGES.NEW_SUB_SECTION,
                                          LNCHANGES.NEW_PROP_GROUP,
                                          LNCHANGES.NEW_PROPERTY,
                                          LNDATA.ATTRIBUTE,
                                          LNDATA.LANG_ID );

                     FETCH LQSPECPROPLANG
                      INTO LSDUMMY;

                     IF LQSPECPROPLANG%NOTFOUND
                     THEN
                        CLOSE LQSPECPROPLANG;

                        LSSQL :=
                              'INSERT INTO specification_prop_lang ('
                           || 'part_no, revision, section_id, sub_section_id,'
                           || 'property_group, property, attribute, lang_id, sequence_no,'
                           || LSNEWCOL
                           || ') '
                           || ' SELECT '''
                           || ASPARTNO
                           || ''','
                           || ANREVISION
                           || ','
                           || LNCHANGES.NEW_SECTION
                           || ','
                           || LNCHANGES.NEW_SUB_SECTION
                           || ','
                           || LNCHANGES.NEW_PROP_GROUP
                           || ','
                           || LNCHANGES.NEW_PROPERTY
                           || ','
                           || LNDATA.ATTRIBUTE
                           || ','
                           || LNDATA.LANG_ID
                           || ', sp.sequence_no,'''
                           || LSVALUE
                           || ''' FROM specification_prop sp '
                           || 'WHERE part_no = '''
                           || ASPARTNO
                           || ''' AND revision = '
                           || ANREVISION
                           || ' AND section_id = '
                           || LNCHANGES.NEW_SECTION
                           || ' AND sub_section_id = '
                           || LNCHANGES.NEW_SUB_SECTION
                           || ' AND property_group = '
                           || LNCHANGES.NEW_PROP_GROUP
                           || ' AND property = '
                           || LNCHANGES.NEW_PROPERTY
                           || ' AND attribute = '
                           || LNDATA.ATTRIBUTE;
                        LNRETVAL := EXECUTESQL( LSSQL );

                        IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
                        THEN
                           IAPIGENERAL.LOGERROR( GSSOURCE,
                                                 LSMETHOD,
                                                 IAPIGENERAL.GETLASTERRORTEXT( ) );
                           RETURN( LNRETVAL );
                        END IF;
                     ELSIF LQSPECPROPLANG%FOUND
                     THEN
                        CLOSE LQSPECPROPLANG;

                        LSSQL :=
                              'UPDATE specification_prop_lang SET '
                           || LSNEWCOL
                           || ' = nvl('''
                           || LSVALUE
                           || ''', '
                           || LSNEWCOL
                           || ') WHERE part_no = '''
                           || ASPARTNO
                           || ''' AND revision = '
                           || ANREVISION
                           || ' AND section_id = '
                           || LNCHANGES.NEW_SECTION
                           || ' AND sub_section_id = '
                           || LNCHANGES.NEW_SUB_SECTION
                           || ' AND property_group = '
                           || LNCHANGES.NEW_PROP_GROUP
                           || ' AND property = '
                           || LNCHANGES.NEW_PROPERTY
                           || ' AND attribute = '
                           || LNDATA.ATTRIBUTE
                           || ' AND lang_id = '
                           || LNDATA.LANG_ID;
                        LNRETVAL := EXECUTESQL( LSSQL );

                        IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
                        THEN
                           IAPIGENERAL.LOGERROR( GSSOURCE,
                                                 LSMETHOD,
                                                 IAPIGENERAL.GETLASTERRORTEXT( ) );
                           RETURN( LNRETVAL );
                        END IF;
                     END IF;

                     
                     
                     IF ( (UPPER( LSOLDCOL ) IN( 'CHAR_1', 'CHAR_2', 'CHAR_3', 'CHAR_4', 'CHAR_5', 'CHAR_6', 'INFO' ))
                          AND (  (LNCHANGES.OLD_SECTION <> LNCHANGES.NEW_SECTION)
                            OR (LNCHANGES.OLD_SUB_SECTION <> LNCHANGES.NEW_SUB_SECTION)
                            OR (LNCHANGES.OLD_PROP_GROUP <> LNCHANGES.NEW_PROP_GROUP)
                            OR (LNCHANGES.OLD_PROPERTY <> LNCHANGES.NEW_PROPERTY)
                            OR (LNCHANGES.OLD_COLUMN <> LNCHANGES.NEW_COLUMN)))
                     
                     THEN
                        
                        LSSQL :=
                              'UPDATE specification_prop_lang SET '
                           || LSOLDCOL
                           || ' = NULL WHERE part_no = '''
                           || ASPARTNO
                           || ''' AND revision = '
                           || ANREVISION
                           || ' AND section_id = '
                           || LNCHANGES.OLD_SECTION
                           || ' AND sub_section_id = '
                           || LNCHANGES.OLD_SUB_SECTION
                           || ' AND property_group = '
                           || LNCHANGES.OLD_PROP_GROUP
                           || ' AND property = '
                           || LNCHANGES.OLD_PROPERTY
                           || ' AND attribute = '
                           || LNDATA.ATTRIBUTE
                           || ' AND lang_id = '
                           || LNDATA.LANG_ID;
                        LNRETVAL := EXECUTESQL( LSSQL );

                        IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
                        THEN
                           IAPIGENERAL.LOGERROR( GSSOURCE,
                                                 LSMETHOD,
                                                 IAPIGENERAL.GETLASTERRORTEXT( ) );
                           RETURN( LNRETVAL );
                        END IF;
                     END IF;
                  END IF;
               END IF;
            END LOOP;
         ELSE



            FOR LNLANGID IN 1 .. LNMAXLANGID
            LOOP
               LBDATAFOUND := TRUE;

               BEGIN
                  SELECT CHAR_1,
                         CHAR_2,
                         CHAR_3,
                         CHAR_4,
                         CHAR_5,
                         CHAR_6,
                         INFO
                    INTO LSCHAR1,
                         LSCHAR2,
                         LSCHAR3,
                         LSCHAR4,
                         LSCHAR5,
                         LSCHAR6,
                         LSINFO
                    FROM FT_SPEC_PROP_LANG
                   WHERE PART_NO = ASPARTNO
                     AND SECTION_ID = LNCHANGES.OLD_SECTION
                     AND SUB_SECTION_ID = LNCHANGES.OLD_SUB_SECTION
                     AND PROPERTY_GROUP = LNCHANGES.OLD_PROP_GROUP
                     AND PROPERTY = LNCHANGES.OLD_PROPERTY
                     AND ATTRIBUTE = LNCHANGES.OLD_ATTRIBUTE
                     AND LANG_ID = LNLANGID;
               EXCEPTION
                  WHEN NO_DATA_FOUND
                  THEN
                     LBDATAFOUND := FALSE;
               END;

               IF LBDATAFOUND
               THEN
                  IF LNCHANGES.OLD_COLUMN = 0
                  THEN
                     
                     
































                     
                     BEGIN
                         OPEN LQSPECPROPLANG( ASPARTNO,
                                              ANREVISION,
                                              LNCHANGES.NEW_SECTION,
                                              LNCHANGES.NEW_SUB_SECTION,
                                              LNCHANGES.NEW_PROP_GROUP,
                                              LNCHANGES.NEW_PROPERTY,
                                              LNCHANGES.NEW_ATTRIBUTE,
                                              LNLANGID );

                         FETCH LQSPECPROPLANG
                          INTO LSDUMMY;

                         IF LQSPECPROPLANG%NOTFOUND
                         THEN
                            CLOSE LQSPECPROPLANG;

                            LSSQL :=
                                  'INSERT INTO specification_prop_lang ('
                               || 'part_no, revision, section_id, sub_section_id,'
                               || 'property_group, property, attribute, lang_id, sequence_no,'
                               
                               
                               || ' char_1, char_2, char_3, char_4, char_5, char_6, info'
                               
                               || ') '
                               || ' SELECT '''
                               || ASPARTNO
                               || ''','
                               || ANREVISION
                               || ','
                               || LNCHANGES.NEW_SECTION
                               || ','
                               || LNCHANGES.NEW_SUB_SECTION
                               || ','
                               || LNCHANGES.NEW_PROP_GROUP
                               || ','
                               || LNCHANGES.NEW_PROPERTY
                               || ','
                               || LNCHANGES.NEW_ATTRIBUTE
                               || ','
                               || LNLANGID
                               || ', sp.sequence_no,'
                               || '''' || LSCHAR1 || ''', '
                               || '''' || LSCHAR2 || ''', '
                               || '''' || LSCHAR3 || ''', '
                               || '''' || LSCHAR4 || ''', '
                               || '''' || LSCHAR5 || ''', '
                               
                               
                               || '''' || LSCHAR6 || ''', '
                               || '''' || LSINFO || ''''
                               
                               || ' FROM specification_prop sp '
                               || 'WHERE part_no = '''
                               || ASPARTNO
                               || ''' AND revision = '
                               || ANREVISION
                               || ' AND section_id = '
                               || LNCHANGES.NEW_SECTION
                               || ' AND sub_section_id = '
                               || LNCHANGES.NEW_SUB_SECTION
                               || ' AND property_group = '
                               || LNCHANGES.NEW_PROP_GROUP
                               || ' AND property = '
                               || LNCHANGES.NEW_PROPERTY
                               || ' AND attribute = '
                               || LNCHANGES.NEW_ATTRIBUTE;

                            LNRETVAL := EXECUTESQL( LSSQL );

                            IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
                            THEN
                               IAPIGENERAL.LOGERROR( GSSOURCE,
                                                     LSMETHOD,
                                                     IAPIGENERAL.GETLASTERRORTEXT( ) );
                               RETURN( LNRETVAL );
                            END IF;

                         ELSIF LQSPECPROPLANG%FOUND
                         THEN
                            CLOSE LQSPECPROPLANG;

                            LSSQL :=
                                  'UPDATE specification_prop_lang SET '
                                 
                                 







                                 
                               || ' char_1' || ' = nvl(''' || LSCHAR1 || ''', ' || ' char_1),'
                               || ' char_2' || ' = nvl(''' || LSCHAR2 || ''', ' || ' char_2),'
                               || ' char_3' || ' = nvl(''' || LSCHAR3 || ''', ' || ' char_3),'
                               || ' char_4' || ' = nvl(''' || LSCHAR4 || ''', ' || ' char_4),'
                               || ' char_5' || ' = nvl(''' || LSCHAR5 || ''', ' || ' char_5),'
                               || ' char_6' || ' = nvl(''' || LSCHAR6 || ''', ' || ' char_6),'
                               || ' info' || ' = nvl(''' || LSINFO || ''', ' || ' info)'
                               || ' WHERE part_no = '''
                               
                               || ASPARTNO
                               || ''' AND revision = '
                               || ANREVISION
                               || ' AND section_id = '
                               || LNCHANGES.NEW_SECTION
                               || ' AND sub_section_id = '
                               || LNCHANGES.NEW_SUB_SECTION
                               || ' AND property_group = '
                               || LNCHANGES.NEW_PROP_GROUP
                               || ' AND property = '
                               || LNCHANGES.NEW_PROPERTY
                               || ' AND attribute = '
                               || LNCHANGES.NEW_ATTRIBUTE
                               || ' AND lang_id = '
                               || LNLANGID;

                            LNRETVAL := EXECUTESQL( LSSQL );

                            IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
                            THEN
                               IAPIGENERAL.LOGERROR( GSSOURCE,
                                                     LSMETHOD,
                                                     IAPIGENERAL.GETLASTERRORTEXT( ) );
                               RETURN( LNRETVAL );
                            END IF;

                        END IF;

                        
                        IF (   (LNCHANGES.OLD_SECTION <> LNCHANGES.NEW_SECTION)
                            OR (LNCHANGES.OLD_SUB_SECTION <> LNCHANGES.NEW_SUB_SECTION)
                            OR (LNCHANGES.OLD_PROP_GROUP <> LNCHANGES.NEW_PROP_GROUP)
                            OR (LNCHANGES.OLD_PROPERTY <> LNCHANGES.NEW_PROPERTY)
                            OR (LNCHANGES.OLD_ATTRIBUTE <> LNCHANGES.NEW_ATTRIBUTE))
                       THEN
                       
                            LSSQL :=
                                  'UPDATE specification_prop_lang SET '
                               || 'char_1 = NULL, '
                               || 'char_2 = NULL, '
                               || 'char_3 = NULL, '
                               || 'char_4 = NULL, '
                               || 'char_5 = NULL, '
                               
                               
                               || 'char_6 = NULL, '
                               || 'info = NULL '
                               
                               || ' WHERE part_no = '''
                               || ASPARTNO
                               || ''' AND revision = '
                               || ANREVISION
                               || ' AND section_id = '
                               || LNCHANGES.OLD_SECTION
                               || ' AND sub_section_id = '
                               || LNCHANGES.OLD_SUB_SECTION
                               || ' AND property_group = '
                               || LNCHANGES.OLD_PROP_GROUP
                               || ' AND property = '
                               || LNCHANGES.OLD_PROPERTY
                               || ' AND attribute = '
                               || LNCHANGES.OLD_ATTRIBUTE
                               || ' AND lang_id = '
                               || LNLANGID;

                            LNRETVAL := EXECUTESQL( LSSQL );

                            IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
                            THEN
                               IAPIGENERAL.LOGERROR( GSSOURCE,
                                                     LSMETHOD,
                                                     IAPIGENERAL.GETLASTERRORTEXT( ) );
                               RETURN( LNRETVAL );
                            END IF;
                        
                        END IF;
                        
                     EXCEPTION
                        WHEN OTHERS
                        THEN
                           IAPIGENERAL.LOGERROR( GSSOURCE,
                                                 LSMETHOD,
                                                 SQLERRM );
                           RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
                     END;
                     

                  ELSE
                     
                     SELECT DECODE( LNCHANGES.OLD_COLUMN,
                                    11, LSCHAR1,
                                    12, LSCHAR2,
                                    13, LSCHAR3,
                                    14, LSCHAR4,
                                    15, LSCHAR5,
                                    
                                    
                                    16, LSCHAR6,
                                    40, LSINFO )
                                    
                       INTO LSVALUE
                       FROM DUAL;

                     LSOLDCOL := GETFIELD( LNCHANGES.OLD_COLUMN );
                     LSNEWCOL := GETFIELD( LNCHANGES.NEW_COLUMN );

                     IF LSNEWCOL = 'info'
                     THEN
                        LSVALUE := SUBSTR( LSVALUE,
                                           1,
                                           2000 );
                     ELSIF LSNEWCOL = 'char_6'
                     THEN
                        LSVALUE := SUBSTR( LSVALUE,
                                           1,
                                           256 );
                     ELSE
                        LSVALUE := SUBSTR( LSVALUE,
                                           1,
                                           40 );
                     END IF;

                     LSVALUE := REPLACE( LSVALUE,
                                         '''',
                                         '''''' );

                     OPEN LQSPECPROPLANG( ASPARTNO,
                                          ANREVISION,
                                          LNCHANGES.NEW_SECTION,
                                          LNCHANGES.NEW_SUB_SECTION,
                                          LNCHANGES.NEW_PROP_GROUP,
                                          LNCHANGES.NEW_PROPERTY,
                                          LNCHANGES.NEW_ATTRIBUTE,
                                          LNLANGID );

                     FETCH LQSPECPROPLANG
                      INTO LSDUMMY;

                     IF LQSPECPROPLANG%NOTFOUND
                     THEN
                        CLOSE LQSPECPROPLANG;

                        LSSQL :=
                              'INSERT INTO specification_prop_lang ('
                           || 'part_no, revision, section_id, sub_section_id,'
                           || 'property_group, property, attribute, lang_id, sequence_no,'
                           || LSNEWCOL
                           || ') '
                           || ' SELECT '''
                           || ASPARTNO
                           || ''','
                           || ANREVISION
                           || ','
                           || LNCHANGES.NEW_SECTION
                           || ','
                           || LNCHANGES.NEW_SUB_SECTION
                           || ','
                           || LNCHANGES.NEW_PROP_GROUP
                           || ','
                           || LNCHANGES.NEW_PROPERTY
                           || ','
                           || LNCHANGES.NEW_ATTRIBUTE
                           || ','
                           || LNLANGID
                           || ', sp.sequence_no,'''
                           || LSVALUE
                           || ''' FROM specification_prop sp '
                           || 'WHERE part_no = '''
                           || ASPARTNO
                           || ''' AND revision = '
                           || ANREVISION
                           || ' AND section_id = '
                           || LNCHANGES.NEW_SECTION
                           || ' AND sub_section_id = '
                           || LNCHANGES.NEW_SUB_SECTION
                           || ' AND property_group = '
                           || LNCHANGES.NEW_PROP_GROUP
                           || ' AND property = '
                           || LNCHANGES.NEW_PROPERTY
                           || ' AND attribute = '
                           || LNCHANGES.NEW_ATTRIBUTE;
                        LNRETVAL := EXECUTESQL( LSSQL );

                        IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
                        THEN
                           IAPIGENERAL.LOGERROR( GSSOURCE,
                                                 LSMETHOD,
                                                 IAPIGENERAL.GETLASTERRORTEXT( ) );
                           RETURN( LNRETVAL );
                        END IF;
                     ELSIF LQSPECPROPLANG%FOUND
                     THEN
                        CLOSE LQSPECPROPLANG;

                        LSSQL :=
                              'UPDATE specification_prop_lang SET '
                           || LSNEWCOL
                           || ' = nvl('''
                           || LSVALUE
                           || ''', '
                           || LSNEWCOL
                           || ') WHERE part_no = '''
                           || ASPARTNO
                           || ''' AND revision = '
                           || ANREVISION
                           || ' AND section_id = '
                           || LNCHANGES.NEW_SECTION
                           || ' AND sub_section_id = '
                           || LNCHANGES.NEW_SUB_SECTION
                           || ' AND property_group = '
                           || LNCHANGES.NEW_PROP_GROUP
                           || ' AND property = '
                           || LNCHANGES.NEW_PROPERTY
                           || ' AND attribute = '
                           || LNCHANGES.NEW_ATTRIBUTE
                           || ' AND lang_id = '
                           || LNLANGID;
                        LNRETVAL := EXECUTESQL( LSSQL );

                        IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
                        THEN
                           IAPIGENERAL.LOGERROR( GSSOURCE,
                                                 LSMETHOD,
                                                 IAPIGENERAL.GETLASTERRORTEXT( ) );
                           RETURN( LNRETVAL );
                        END IF;
                     END IF;

                     
                     
                     IF ( (UPPER( LSOLDCOL ) IN( 'CHAR_1', 'CHAR_2', 'CHAR_3', 'CHAR_4', 'CHAR_5', 'CHAR_6', 'INFO' ))
                          AND (  (LNCHANGES.OLD_SECTION <> LNCHANGES.NEW_SECTION)
                            OR (LNCHANGES.OLD_SUB_SECTION <> LNCHANGES.NEW_SUB_SECTION)
                            OR (LNCHANGES.OLD_PROP_GROUP <> LNCHANGES.NEW_PROP_GROUP)
                            OR (LNCHANGES.OLD_PROPERTY <> LNCHANGES.NEW_PROPERTY)
                            OR (LNCHANGES.OLD_ATTRIBUTE <> LNCHANGES.NEW_ATTRIBUTE)
                            OR (LNCHANGES.OLD_COLUMN <> LNCHANGES.NEW_COLUMN)))
                     
                     THEN
                        LSSQL :=
                              'UPDATE specification_prop_lang SET '
                           || LSOLDCOL
                           || ' = NULL WHERE part_no = '''
                           || ASPARTNO
                           || ''' AND revision = '
                           || ANREVISION
                           || ' AND section_id = '
                           || LNCHANGES.OLD_SECTION
                           || ' AND sub_section_id = '
                           || LNCHANGES.OLD_SUB_SECTION
                           || ' AND property_group = '
                           || LNCHANGES.OLD_PROP_GROUP
                           || ' AND property = '
                           || LNCHANGES.OLD_PROPERTY
                           || ' AND attribute = '
                           || LNCHANGES.OLD_ATTRIBUTE
                           || ' AND lang_id = '
                           || LNLANGID;
                        LNRETVAL := EXECUTESQL( LSSQL );

                        IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
                        THEN
                           IAPIGENERAL.LOGERROR( GSSOURCE,
                                                 LSMETHOD,
                                                 IAPIGENERAL.GETLASTERRORTEXT( ) );
                           RETURN( LNRETVAL );
                        END IF;
                     END IF;
                  END IF;
               END IF;
            END LOOP;
         END IF;
      END LOOP;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END TRANSFERPROPERTIESMULTILANG;


   FUNCTION TRANSFEROBJECTSREFTEXTS(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE,
      ANRULEID                   IN       IAPITYPE.ID_TYPE,
      ASNEWFRAMENO               IN       IAPITYPE.FRAMENO_TYPE,
      ANNEWFRAMEREVISION         IN       IAPITYPE.FRAMEREVISION_TYPE,
      ANNEWFRAMEOWNER            IN       IAPITYPE.OWNER_TYPE,
      ANOBJECTTYPE               IN       IAPITYPE.OBJECT_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS
















      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'TransferObjectsRefTexts';
      LNCOUNT                       IAPITYPE.NUMVAL_TYPE;
      LNSECTION_REV                 IAPITYPE.REVISION_TYPE;
      LNSUBSECTIONREV               IAPITYPE.REVISION_TYPE;
      LNEXIST                       IAPITYPE.NUMVAL_TYPE;
      LNSEQUENCENO                  IAPITYPE.SEQUENCE_TYPE;

      
      CURSOR LQCHANGES
      IS
         SELECT OLD_SECTION,
                OLD_SUB_SECTION,
                NEW_SECTION,
                NEW_SUB_SECTION
           FROM FT_BASE_RULES
          WHERE FT_GROUP_ID = ANRULEID
            AND OBJECT_TYPE = ANOBJECTTYPE;


      CURSOR LQDATAREFTEXT(
         ANSECTION                           IAPITYPE.ID_TYPE,
         ANSUBSECTION                        IAPITYPE.ID_TYPE )
      IS
         SELECT   REF_ID,
                  REF_VER,
                  REF_INFO,
                  
                  
                  REF_OWNER,
                  MANDATORY
                  
             FROM FT_SPEC_SECTION
            WHERE PART_NO = ASPARTNO
              AND SECTION_ID = ANSECTION
              AND SUB_SECTION_ID = ANSUBSECTION
              AND TYPE = ANOBJECTTYPE
              AND REF_ID > 0
         ORDER BY SECTION_SEQUENCE_NO ASC;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      FOR LNCHANGES IN LQCHANGES
      LOOP
         
         SELECT COUNT( * )
           INTO LNEXIST
           FROM FRAME_SECTION
          WHERE SECTION_ID = LNCHANGES.NEW_SECTION
            AND SUB_SECTION_ID = LNCHANGES.NEW_SUB_SECTION
            AND FRAME_NO = ASNEWFRAMENO
            AND REVISION = ANNEWFRAMEREVISION;

         IF LNEXIST > 0
         THEN
            FOR LNDATA IN LQDATAREFTEXT( LNCHANGES.OLD_SECTION,
                                         LNCHANGES.OLD_SUB_SECTION )
            LOOP
               
               SELECT MAX( SECTION_SEQUENCE_NO )
                 INTO LNSEQUENCENO
                 FROM SPECIFICATION_SECTION
                WHERE PART_NO = ASPARTNO
                  AND REVISION = ANREVISION
                  AND SECTION_ID = LNCHANGES.NEW_SECTION
                  AND SUB_SECTION_ID = LNCHANGES.NEW_SUB_SECTION
                  AND TYPE = ANOBJECTTYPE
                  AND REF_ID = LNDATA.REF_ID
                  AND REF_OWNER = LNDATA.REF_OWNER;

               IF LNSEQUENCENO IS NULL
               THEN
                  SELECT MAX( SECTION_SEQUENCE_NO )
                    INTO LNSEQUENCENO
                    FROM SPECIFICATION_SECTION
                   WHERE PART_NO = ASPARTNO
                     AND REVISION = ANREVISION
                     AND SECTION_ID = LNCHANGES.NEW_SECTION
                     AND SUB_SECTION_ID = LNCHANGES.NEW_SUB_SECTION
                     AND TYPE = ANOBJECTTYPE;

                  SELECT COUNT( * )
                    INTO LNCOUNT
                    FROM FRAME_SECTION
                   WHERE FRAME_NO = ASNEWFRAMENO
                     AND REVISION = ANNEWFRAMEREVISION
                     AND OWNER = ANNEWFRAMEOWNER
                     AND SECTION_ID = LNCHANGES.NEW_SECTION
                     AND SUB_SECTION_ID = LNCHANGES.NEW_SUB_SECTION
                     AND TYPE = ANOBJECTTYPE
                     AND REF_ID = LNDATA.REF_ID
                     AND REF_OWNER = LNDATA.REF_OWNER;

                  IF LNCOUNT > 0
                  THEN
                     
                     INSERT INTO SPECIFICATION_SECTION
                                 ( PART_NO,
                                   REVISION,
                                   SECTION_ID,
                                   SUB_SECTION_ID,
                                   TYPE,
                                   REF_ID,
                                   REF_VER,
                                   REF_INFO,
                                   SEQUENCE_NO,
                                   HEADER,
                                   MANDATORY,
                                   SECTION_SEQUENCE_NO,
                                   DISPLAY_FORMAT,
                                   ASSOCIATION,
                                   INTL,
                                   SECTION_REV,
                                   SUB_SECTION_REV,
                                   DISPLAY_FORMAT_REV,
                                   REF_OWNER )
                        SELECT ASPARTNO,
                               ANREVISION,
                               SECTION_ID,
                               SUB_SECTION_ID,
                               ANOBJECTTYPE,
                               REF_ID,
                               REF_VER,
                               REF_INFO,
                               SEQUENCE_NO,
                               HEADER,
                               MANDATORY,
                               SECTION_SEQUENCE_NO,
                               DISPLAY_FORMAT,
                               ASSOCIATION,
                               INTL,
                               SECTION_REV,
                               SUB_SECTION_REV,
                               DISPLAY_FORMAT_REV,
                               REF_OWNER
                          FROM FRAME_SECTION
                         WHERE FRAME_NO = ASNEWFRAMENO
                           AND REVISION = ANNEWFRAMEREVISION
                           AND OWNER = ANNEWFRAMEOWNER
                           AND SECTION_ID = LNCHANGES.NEW_SECTION
                           AND SUB_SECTION_ID = LNCHANGES.NEW_SUB_SECTION
                           AND TYPE = ANOBJECTTYPE
                           AND REF_ID = LNDATA.REF_ID
                           AND REF_OWNER = LNDATA.REF_OWNER;
                  ELSE
                     SELECT COUNT( * )
                       INTO LNCOUNT
                       FROM FRAME_SECTION
                      WHERE FRAME_NO = ASNEWFRAMENO
                        AND REVISION = ANNEWFRAMEREVISION
                        AND OWNER = ANNEWFRAMEOWNER
                        AND SECTION_ID = LNCHANGES.NEW_SECTION
                        AND SUB_SECTION_ID = LNCHANGES.NEW_SUB_SECTION
                        AND TYPE = ANOBJECTTYPE
                        AND REF_ID = 0;

                     IF LNCOUNT > 0
                     THEN
                        
                        
                        IF LNSEQUENCENO IS NULL
                        THEN
                           SELECT MAX( SECTION_SEQUENCE_NO )
                             INTO LNSEQUENCENO
                             FROM FRAME_SECTION
                            WHERE FRAME_NO = ASNEWFRAMENO
                              AND REVISION = ANNEWFRAMEREVISION
                              AND OWNER = ANNEWFRAMEOWNER
                              AND SECTION_ID = LNCHANGES.NEW_SECTION
                              AND SUB_SECTION_ID = LNCHANGES.NEW_SUB_SECTION
                              AND TYPE = ANOBJECTTYPE
                              AND REF_ID = 0;
                        END IF;

                        LNSEQUENCENO :=   LNSEQUENCENO
                                        + 1;

                      
                      
                      SELECT COUNT(*)
                         INTO LNCOUNT
                         FROM SPECIFICATION_SECTION
                        WHERE PART_NO = ASPARTNO
                          AND REVISION = ANREVISION
                          AND SECTION_ID = LNCHANGES.NEW_SECTION
                          AND SUB_SECTION_ID = LNCHANGES.NEW_SUB_SECTION
                          AND TYPE = ANOBJECTTYPE
                          AND REF_ID = 0;

                      IF (LNCOUNT = 0)
                      THEN
                        INSERT INTO SPECIFICATION_SECTION
                                    ( PART_NO,
                                      REVISION,
                                      SECTION_ID,
                                      SUB_SECTION_ID,
                                      TYPE,
                                      REF_ID,
                                      REF_VER,
                                      REF_INFO,
                                      SEQUENCE_NO,
                                      HEADER,
                                      MANDATORY,
                                      SECTION_SEQUENCE_NO,
                                      DISPLAY_FORMAT,
                                      ASSOCIATION,
                                      INTL,
                                      SECTION_REV,
                                      SUB_SECTION_REV,
                                      DISPLAY_FORMAT_REV,
                                      REF_OWNER )
                           SELECT ASPARTNO,
                                  ANREVISION,
                                  SECTION_ID,
                                  SUB_SECTION_ID,
                                  ANOBJECTTYPE,
                                  REF_ID,
                                  REF_VER,
                                  REF_INFO,
                                  SEQUENCE_NO,
                                  HEADER,
                                  MANDATORY,
                                  (LNSEQUENCENO - MOD(LNSEQUENCENO, 100)),
                                  DISPLAY_FORMAT,
                                  ASSOCIATION,
                                  INTL,
                                  SECTION_REV,
                                  SUB_SECTION_REV,
                                  DISPLAY_FORMAT_REV,
                                  REF_OWNER
                             FROM FRAME_SECTION
                            WHERE FRAME_NO = ASNEWFRAMENO
                              AND REVISION = ANNEWFRAMEREVISION
                              AND OWNER = ANNEWFRAMEOWNER
                              AND SECTION_ID = LNCHANGES.NEW_SECTION
                              AND SUB_SECTION_ID = LNCHANGES.NEW_SUB_SECTION
                              AND TYPE = ANOBJECTTYPE
                              AND REF_ID = 0;
                      END IF;
                      

                        
                           
                        INSERT INTO SPECIFICATION_SECTION
                                    ( PART_NO,
                                      REVISION,
                                      SECTION_ID,
                                      SUB_SECTION_ID,
                                      TYPE,
                                      REF_ID,
                                      REF_VER,
                                      REF_INFO,
                                      SEQUENCE_NO,
                                      HEADER,
                                      MANDATORY,
                                      SECTION_SEQUENCE_NO,
                                      DISPLAY_FORMAT,
                                      ASSOCIATION,
                                      INTL,
                                      SECTION_REV,
                                      SUB_SECTION_REV,
                                      DISPLAY_FORMAT_REV,
                                      REF_OWNER )
                           SELECT ASPARTNO,
                                  ANREVISION,
                                  SECTION_ID,
                                  SUB_SECTION_ID,
                                  ANOBJECTTYPE,
                                  LNDATA.REF_ID,
                                  LNDATA.REF_VER,
                                  LNDATA.REF_INFO,
                                  SEQUENCE_NO,
                                  HEADER,
                                  
                                  
                                  LNDATA.MANDATORY,
                                  
                                  LNSEQUENCENO,
                                  DISPLAY_FORMAT,
                                  ASSOCIATION,
                                  INTL,
                                  SECTION_REV,
                                  SUB_SECTION_REV,
                                  DISPLAY_FORMAT_REV,
                                  LNDATA.REF_OWNER
                             FROM FRAME_SECTION
                            WHERE FRAME_NO = ASNEWFRAMENO
                              AND REVISION = ANNEWFRAMEREVISION
                              AND OWNER = ANNEWFRAMEOWNER
                              AND SECTION_ID = LNCHANGES.NEW_SECTION
                              AND SUB_SECTION_ID = LNCHANGES.NEW_SUB_SECTION
                              AND TYPE = ANOBJECTTYPE
                              AND REF_ID = 0;
                     
                        
                     END IF;
                  END IF;
               END IF;
            END LOOP;


           
           IF (   (LNCHANGES.OLD_SECTION <> LNCHANGES.NEW_SECTION)
               OR (LNCHANGES.OLD_SUB_SECTION <> LNCHANGES.NEW_SUB_SECTION))
           THEN
          

                
                
                
                DELETE FROM SPECIFICATION_SECTION
                WHERE PART_NO = ASPARTNO
                    AND REVISION = ANREVISION
                    AND SECTION_ID = LNCHANGES.OLD_SECTION
                    AND SUB_SECTION_ID = LNCHANGES.OLD_SUB_SECTION
                    AND TYPE = ANOBJECTTYPE
                    AND REF_ID = 0
                    AND MANDATORY = 'N';

                
                DELETE FROM SPECIFICATION_SECTION SS
                WHERE SS.PART_NO = ASPARTNO
                    AND SS.REVISION = ANREVISION
                    AND SS.SECTION_ID = LNCHANGES.OLD_SECTION
                    AND SS.SUB_SECTION_ID = LNCHANGES.OLD_SUB_SECTION
                    AND SS.TYPE = ANOBJECTTYPE
                    AND SS.REF_ID <> 0
                    AND SS.MANDATORY = 'N'
                    AND NOT EXISTS (
                        SELECT * FROM FRAME_SECTION FS
                        WHERE FS.FRAME_NO = ASNEWFRAMENO
                            AND FS.REVISION = ANNEWFRAMEREVISION
                            AND FS.OWNER = ANNEWFRAMEOWNER
                            AND FS.SECTION_ID = SS.SECTION_ID
                            AND FS.SUB_SECTION_ID = SS.SUB_SECTION_ID
                            AND FS.TYPE = SS.TYPE
                            AND FS.REF_ID = SS.REF_ID
                            AND FS.REF_VER = SS.REF_VER
                            AND FS.REF_INFO = SS.REF_INFO
                            AND FS.REF_OWNER = SS.REF_OWNER);
                

         
         END IF;
         

         END IF;
      END LOOP;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END TRANSFEROBJECTSREFTEXTS;


   FUNCTION MANDATORYFREETEXT(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE,
      ASFRAMENO                  IN       IAPITYPE.FRAMENO_TYPE,
      ANFRAMEREVISION            IN       IAPITYPE.FRAMEREVISION_TYPE,
      ANFRAMEOWNER               IN       IAPITYPE.OWNER_TYPE,
      ANNEWSECTIONID             IN       IAPITYPE.ID_TYPE,
      ANNEWSUBSECTIONID          IN       IAPITYPE.ID_TYPE,
      ANREFID                    IN       IAPITYPE.ID_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS




















      LNCOUNT                       IAPITYPE.NUMVAL_TYPE;
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'MandatoryFreeText';
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      
      SELECT COUNT( * )
        INTO LNCOUNT
        FROM SPECIFICATION_SECTION
       WHERE PART_NO = ASPARTNO
         AND REVISION = ANREVISION
         AND SECTION_ID = ANNEWSECTIONID
         AND SUB_SECTION_ID = ANNEWSUBSECTIONID
         AND TYPE = 5
         AND REF_ID = ANREFID;

      IF LNCOUNT = 0
      THEN
         
         INSERT INTO SPECIFICATION_SECTION
                     ( PART_NO,
                       REVISION,
                       SECTION_ID,
                       SUB_SECTION_ID,
                       TYPE,
                       REF_ID,
                       REF_VER,
                       REF_INFO,
                       SEQUENCE_NO,
                       HEADER,
                       MANDATORY,
                       SECTION_SEQUENCE_NO,
                       DISPLAY_FORMAT,
                       ASSOCIATION,
                       INTL,
                       SECTION_REV,
                       SUB_SECTION_REV,
                       DISPLAY_FORMAT_REV,
                       REF_OWNER )
            SELECT ASPARTNO,
                   ANREVISION,
                   ANNEWSECTIONID,
                   ANNEWSUBSECTIONID,
                   5,
                   ANREFID,
                   REF_VER,
                   REF_INFO,
                   SEQUENCE_NO,
                   HEADER,
                   MANDATORY,
                   SECTION_SEQUENCE_NO,
                   DISPLAY_FORMAT,
                   ASSOCIATION,
                   INTL,
                   SECTION_REV,
                   SUB_SECTION_REV,
                   DISPLAY_FORMAT_REV,
                   REF_OWNER
              FROM FRAME_SECTION
             WHERE FRAME_NO = ASFRAMENO
               AND REVISION = ANFRAMEREVISION
               AND OWNER = ANFRAMEOWNER
               AND SECTION_ID = ANNEWSECTIONID
               AND SUB_SECTION_ID = ANNEWSUBSECTIONID
               AND TYPE = 5
               AND REF_ID = ANREFID;
      END IF;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END MANDATORYFREETEXT;


   FUNCTION TRANSFERFREETEXT(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE,
      ANRULEID                   IN       IAPITYPE.ID_TYPE,
      ASNEWFRAMENO               IN       IAPITYPE.FRAMENO_TYPE,
      ANNEWFRAMEREVISION         IN       IAPITYPE.FRAMEREVISION_TYPE,
      ANNEWFRAMEOWNER            IN       IAPITYPE.OWNER_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS















      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'TransferFreeText';
      LNSECTION_REV                 IAPITYPE.REVISION_TYPE;
      LNSUBSECTIONREV               IAPITYPE.REVISION_TYPE;
      LN_FT_REV                     IAPITYPE.REVISION_TYPE;
      LNCOUNT                       IAPITYPE.NUMVAL_TYPE;
      LNEXIST                       IAPITYPE.NUMVAL_TYPE;
      
      LSTEXT                        IAPITYPE.CLOB_TYPE;

      
      CURSOR LQCHANGES
      IS
         SELECT OLD_SECTION,
                OLD_SUB_SECTION,
                OLD_PROP_GROUP,
                NEW_SECTION,
                NEW_SUB_SECTION,
                NEW_PROP_GROUP
           FROM FT_BASE_RULES
          WHERE FT_GROUP_ID = ANRULEID
            AND OBJECT_TYPE = 5;


      CURSOR LQDATAFREETEXTALL(
         ANSECTION                           IAPITYPE.ID_TYPE,
         ANSUBSECTION                        IAPITYPE.ID_TYPE )
      IS
         SELECT TEXT_TYPE,
                TEXT,
                LANG_ID
           FROM FT_SPEC_TEXT
          WHERE PART_NO = ASPARTNO
            AND SECTION_ID = ANSECTION
            AND SUB_SECTION_ID = ANSUBSECTION;


      CURSOR LQDATAFREETEXT(
         ANSECTION                           IAPITYPE.ID_TYPE,
         ANSUBSECTION                        IAPITYPE.ID_TYPE,
         ANTEXTTYPE                          IAPITYPE.ID_TYPE )
      IS
         SELECT TEXT,
                LANG_ID
           FROM FT_SPEC_TEXT
          WHERE PART_NO = ASPARTNO
            AND SECTION_ID = ANSECTION
            AND SUB_SECTION_ID = ANSUBSECTION
            AND TEXT_TYPE = ANTEXTTYPE;
   BEGIN
      FOR LNCHANGES IN LQCHANGES
      LOOP
         
         SELECT COUNT( * )
           INTO LNEXIST
           FROM FRAME_TEXT
          WHERE SECTION_ID = LNCHANGES.NEW_SECTION
            AND SUB_SECTION_ID = LNCHANGES.NEW_SUB_SECTION
            AND FRAME_NO = ASNEWFRAMENO
            AND REVISION = ANNEWFRAMEREVISION;

         IF LNEXIST > 0
         THEN
            
            SELECT DISTINCT SECTION_REV,
                            SUB_SECTION_REV
                       INTO LNSECTION_REV,
                            LNSUBSECTIONREV
                       FROM FRAME_TEXT
                      WHERE SECTION_ID = LNCHANGES.NEW_SECTION
                        AND SUB_SECTION_ID = LNCHANGES.NEW_SUB_SECTION
                        AND FRAME_NO = ASNEWFRAMENO
                        AND REVISION = ANNEWFRAMEREVISION;

            IF LNCHANGES.OLD_PROP_GROUP IS NULL
            THEN
               
               FOR LNDATA IN LQDATAFREETEXTALL( LNCHANGES.OLD_SECTION,
                                                LNCHANGES.OLD_SUB_SECTION )
               LOOP
                  
                  LNRETVAL :=
                     MANDATORYFREETEXT( ASPARTNO,
                                        ANREVISION,
                                        ASNEWFRAMENO,
                                        ANNEWFRAMEREVISION,
                                        ANNEWFRAMEOWNER,
                                        LNCHANGES.NEW_SECTION,
                                        LNCHANGES.NEW_SUB_SECTION,
                                        LNDATA.TEXT_TYPE );

                  IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
                  THEN
                     IAPIGENERAL.LOGERROR( GSSOURCE,
                                           LSMETHOD,
                                           IAPIGENERAL.GETLASTERRORTEXT( ) );
                     RETURN( LNRETVAL );
                  END IF;

                  BEGIN
                     
                     SELECT COUNT( * )
                       INTO LNCOUNT
                       FROM SPECIFICATION_TEXT
                      WHERE PART_NO = ASPARTNO
                        AND REVISION = ANREVISION
                        AND TEXT_TYPE = LNDATA.TEXT_TYPE
                        AND LANG_ID = LNDATA.LANG_ID
                        AND SECTION_ID = LNCHANGES.NEW_SECTION
                        AND SUB_SECTION_ID = LNCHANGES.NEW_SUB_SECTION;

                     IF LNCOUNT > 0
                     THEN
                        UPDATE SPECIFICATION_TEXT
                           SET TEXT = LNDATA.TEXT
                         WHERE PART_NO = ASPARTNO
                           AND REVISION = ANREVISION
                           AND SECTION_ID = LNCHANGES.NEW_SECTION
                           AND SUB_SECTION_ID = LNCHANGES.NEW_SUB_SECTION
                           AND TEXT_TYPE = LNDATA.TEXT_TYPE
                           AND LANG_ID = LNDATA.LANG_ID;
                     ELSE
                        
                        SELECT MAX( REVISION )
                          INTO LN_FT_REV
                          FROM TEXT_TYPE_H
                         WHERE TEXT_TYPE = LNDATA.TEXT_TYPE;

                        INSERT INTO SPECIFICATION_TEXT
                                    ( PART_NO,
                                      REVISION,
                                      TEXT_TYPE,
                                      TEXT,
                                      SECTION_ID,
                                      SECTION_REV,
                                      SUB_SECTION_ID,
                                      SUB_SECTION_REV,
                                      TEXT_TYPE_REV,
                                      LANG_ID )
                             VALUES ( ASPARTNO,
                                      ANREVISION,
                                      LNDATA.TEXT_TYPE,
                                      LNDATA.TEXT,
                                      LNCHANGES.NEW_SECTION,
                                      LNSECTION_REV,
                                      LNCHANGES.NEW_SUB_SECTION,
                                      LNSUBSECTIONREV,
                                      LN_FT_REV,
                                      LNDATA.LANG_ID );
                     END IF;

                   
                   
                   IF (   (LNCHANGES.OLD_SECTION <> LNCHANGES.NEW_SECTION)
                       OR (LNCHANGES.OLD_SUB_SECTION <> LNCHANGES.NEW_SUB_SECTION))
                   THEN
                  

                        
                        
                        DELETE FROM SPECIFICATION_TEXT
                        WHERE PART_NO = ASPARTNO
                        AND REVISION = ANREVISION
                        AND SECTION_ID = LNCHANGES.OLD_SECTION
                        AND SUB_SECTION_ID = LNCHANGES.OLD_SUB_SECTION
                        AND TEXT_TYPE = LNDATA.TEXT_TYPE
                        AND LANG_ID = LNDATA.LANG_ID
                            AND (SECTION_ID, SUB_SECTION_REV, TEXT_TYPE) NOT IN
                                (SELECT SECTION_ID, SUB_SECTION_REV, TEXT_TYPE
                                FROM FRAME_TEXT FT
                                WHERE FRAME_NO = ASNEWFRAMENO
                                AND REVISION = ANNEWFRAMEREVISION
                                AND OWNER = ANNEWFRAMEOWNER
                                AND TEXT IS NOT NULL);

                    
                    END IF;
                    

                    
                    BEGIN
                        SELECT TEXT
                        INTO LSTEXT
                        FROM FRAME_TEXT
                        WHERE FRAME_NO = ASNEWFRAMENO
                        AND REVISION = ANNEWFRAMEREVISION
                        AND OWNER = ANNEWFRAMEOWNER
                        AND SECTION_ID = LNCHANGES.OLD_SECTION
                        AND SUB_SECTION_ID = LNCHANGES.OLD_SUB_SECTION
                        AND TEXT_TYPE = LNDATA.TEXT_TYPE
                        AND TEXT IS NOT NULL;

                        UPDATE SPECIFICATION_TEXT
                           SET TEXT = LSTEXT,
                               LANG_ID = LNDATA.LANG_ID
                         WHERE PART_NO = ASPARTNO
                           AND REVISION = ANREVISION
                           AND SECTION_ID = LNCHANGES.OLD_SECTION
                           AND SUB_SECTION_ID = LNCHANGES.OLD_SUB_SECTION
                           AND TEXT_TYPE = LNDATA.TEXT_TYPE
                           AND LANG_ID = LNDATA.LANG_ID;
                    EXCEPTION
                    WHEN NO_DATA_FOUND
                        THEN
                            NULL;










                    END;


                   
                   IF (   (LNCHANGES.OLD_SECTION <> LNCHANGES.NEW_SECTION)
                       OR (LNCHANGES.OLD_SUB_SECTION <> LNCHANGES.NEW_SUB_SECTION))
                   THEN
                  
                        
                        DELETE FROM SPECIFICATION_SECTION
                        WHERE PART_NO = ASPARTNO
                        AND REVISION = ANREVISION
                        AND SECTION_ID = LNCHANGES.OLD_SECTION
                        AND SUB_SECTION_ID = LNCHANGES.OLD_SUB_SECTION
                        AND TYPE = IAPICONSTANT.SECTIONTYPE_FREETEXT
                        AND REF_ID = LNDATA.TEXT_TYPE
                        AND MANDATORY = 'N';

                    
                    END IF;
                    

                   
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        IAPIGENERAL.LOGERROR( GSSOURCE,
                                              LSMETHOD,
                                              SQLERRM );
                        RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
                  END;
               END LOOP;
            ELSE
               
               FOR LNDATA IN LQDATAFREETEXT( LNCHANGES.OLD_SECTION,
                                             LNCHANGES.OLD_SUB_SECTION,
                                             LNCHANGES.OLD_PROP_GROUP )
               LOOP
                  
                  LNRETVAL :=
                     MANDATORYFREETEXT( ASPARTNO,
                                        ANREVISION,
                                        ASNEWFRAMENO,
                                        ANNEWFRAMEREVISION,
                                        ANNEWFRAMEOWNER,
                                        LNCHANGES.NEW_SECTION,
                                        LNCHANGES.NEW_SUB_SECTION,
                                        LNCHANGES.NEW_PROP_GROUP );

                  IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
                  THEN
                     IAPIGENERAL.LOGERROR( GSSOURCE,
                                           LSMETHOD,
                                           IAPIGENERAL.GETLASTERRORTEXT( ) );
                     RETURN( LNRETVAL );
                  END IF;

                  BEGIN
                     
                     SELECT COUNT( * )
                       INTO LNCOUNT
                       FROM SPECIFICATION_TEXT
                      WHERE PART_NO = ASPARTNO
                        AND REVISION = ANREVISION
                        AND TEXT_TYPE = LNCHANGES.NEW_PROP_GROUP
                        AND LANG_ID = LNDATA.LANG_ID
                        AND SECTION_ID = LNCHANGES.NEW_SECTION
                        AND SUB_SECTION_ID = LNCHANGES.NEW_SUB_SECTION;

                     IF LNCOUNT > 0
                     THEN
                        UPDATE SPECIFICATION_TEXT
                           SET TEXT = LNDATA.TEXT,
                               LANG_ID = LNDATA.LANG_ID
                         WHERE PART_NO = ASPARTNO
                           AND REVISION = ANREVISION
                           AND SECTION_ID = LNCHANGES.NEW_SECTION
                           AND SUB_SECTION_ID = LNCHANGES.NEW_SUB_SECTION
                           AND TEXT_TYPE = LNCHANGES.NEW_PROP_GROUP
                           AND LANG_ID = LNDATA.LANG_ID;
                     ELSE
                        
                        SELECT MAX( REVISION )
                          INTO LN_FT_REV
                          FROM TEXT_TYPE_H
                         WHERE TEXT_TYPE = LNCHANGES.NEW_PROP_GROUP;

                        INSERT INTO SPECIFICATION_TEXT
                                    ( PART_NO,
                                      REVISION,
                                      TEXT_TYPE,
                                      TEXT,
                                      SECTION_ID,
                                      SECTION_REV,
                                      SUB_SECTION_ID,
                                      SUB_SECTION_REV,
                                      TEXT_TYPE_REV,
                                      LANG_ID )
                             VALUES ( ASPARTNO,
                                      ANREVISION,
                                      LNCHANGES.NEW_PROP_GROUP,
                                      LNDATA.TEXT,
                                      LNCHANGES.NEW_SECTION,
                                      LNSECTION_REV,
                                      LNCHANGES.NEW_SUB_SECTION,
                                      LNSUBSECTIONREV,
                                      LN_FT_REV,
                                      LNDATA.LANG_ID );
                     END IF;

                   
                   
                   IF (   (LNCHANGES.OLD_SECTION <> LNCHANGES.NEW_SECTION)
                       OR (LNCHANGES.OLD_SUB_SECTION <> LNCHANGES.NEW_SUB_SECTION))
                   THEN
                  

                    
                    
                    DELETE FROM SPECIFICATION_TEXT
                    WHERE PART_NO = ASPARTNO
                    AND REVISION = ANREVISION
                    AND SECTION_ID = LNCHANGES.OLD_SECTION
                    AND SUB_SECTION_ID = LNCHANGES.OLD_SUB_SECTION
                    AND TEXT_TYPE = LNCHANGES.OLD_PROP_GROUP
                    AND LANG_ID = LNDATA.LANG_ID
                        AND (SECTION_ID, SUB_SECTION_REV, TEXT_TYPE) NOT IN
                            (SELECT SECTION_ID, SUB_SECTION_REV, TEXT_TYPE
                            FROM FRAME_TEXT FT
                            WHERE FRAME_NO = ASNEWFRAMENO
                            AND REVISION = ANNEWFRAMEREVISION
                            AND OWNER = ANNEWFRAMEOWNER
                            AND TEXT IS NOT NULL);
                  
                  END IF;
                  

                    
                    BEGIN
                        SELECT TEXT
                        INTO LSTEXT
                        FROM FRAME_TEXT
                        WHERE FRAME_NO = ASNEWFRAMENO
                        AND REVISION = ANNEWFRAMEREVISION
                        AND OWNER = ANNEWFRAMEOWNER
                        AND SECTION_ID = LNCHANGES.OLD_SECTION
                        AND SUB_SECTION_ID = LNCHANGES.OLD_SUB_SECTION
                        AND TEXT_TYPE = LNCHANGES.OLD_PROP_GROUP
                        AND TEXT IS NOT NULL;

                        UPDATE SPECIFICATION_TEXT
                           SET TEXT = LSTEXT,
                               LANG_ID = LNDATA.LANG_ID
                         WHERE PART_NO = ASPARTNO
                           AND REVISION = ANREVISION
                           AND SECTION_ID = LNCHANGES.OLD_SECTION
                           AND SUB_SECTION_ID = LNCHANGES.OLD_SUB_SECTION
                           AND TEXT_TYPE = LNCHANGES.OLD_PROP_GROUP
                           AND LANG_ID = LNDATA.LANG_ID;
                    EXCEPTION
                    WHEN NO_DATA_FOUND
                        THEN
                            NULL;










                    END;

                   
                   IF (   (LNCHANGES.OLD_SECTION <> LNCHANGES.NEW_SECTION)
                       OR (LNCHANGES.OLD_SUB_SECTION <> LNCHANGES.NEW_SUB_SECTION))
                   THEN
                  

                        
                        DELETE FROM SPECIFICATION_SECTION
                        WHERE PART_NO = ASPARTNO
                        AND REVISION = ANREVISION
                        AND SECTION_ID = LNCHANGES.OLD_SECTION
                        AND SUB_SECTION_ID = LNCHANGES.OLD_SUB_SECTION
                        AND TYPE = IAPICONSTANT.SECTIONTYPE_FREETEXT
                        AND REF_ID = LNCHANGES.OLD_PROP_GROUP
                        AND MANDATORY = 'N';

                    
                    END IF;

                    
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        IAPIGENERAL.LOGERROR( GSSOURCE,
                                              LSMETHOD,
                                              SQLERRM );
                        RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
                  END;
               END LOOP;
            END IF;
         END IF;   
      END LOOP;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END TRANSFERFREETEXT;


   FUNCTION SYNCHRONISEONE(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ASINTERNATIONALPARTNO      IN       IAPITYPE.PARTNO_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS












      LNLOCREVISION                 IAPITYPE.REVISION_TYPE;
      LSINTERNATIONALPARTNO         IAPITYPE.PARTNO_TYPE;
      LBCONTINUE                    IAPITYPE.LOGICAL_TYPE;
      LNINTERNATIONALCOUNT          IAPITYPE.NUMVAL_TYPE;
      LSERROR                       IAPITYPE.STRING_TYPE;
      LDSYSDATE                     IAPITYPE.DATE_TYPE;
      LNCOUNT                       IAPITYPE.NUMVAL_TYPE;
      LNCOUNTDEL1                   IAPITYPE.NUMVAL_TYPE;
      LNCOUNTDEL2                   IAPITYPE.NUMVAL_TYPE;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'SynchroniseOne';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      
      
      SELECT MAX( REVISION )
        INTO LNLOCREVISION
        FROM SPECIFICATION_HEADER
       WHERE PART_NO = ASPARTNO;

      IF    LNLOCREVISION = 0
         OR LNLOCREVISION IS NULL
      THEN
         LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_LOCALPARTNOTEXIST,
                                               ASPARTNO );
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
      ELSE
         
         SELECT INT_PART_NO
           INTO LSINTERNATIONALPARTNO
           FROM SPECIFICATION_HEADER
          WHERE PART_NO = ASPARTNO
            AND REVISION = LNLOCREVISION;

         IF LSINTERNATIONALPARTNO IS NULL
         THEN
            LBCONTINUE := FALSE;
         ELSE
            IF ASINTERNATIONALPARTNO IS NOT NULL
            THEN
               
               IF ASINTERNATIONALPARTNO = LSINTERNATIONALPARTNO
               THEN
                  LBCONTINUE := TRUE;
               ELSE
                  LBCONTINUE := FALSE;
               END IF;
            ELSE
               LBCONTINUE := TRUE;
            END IF;
         END IF;

         IF LBCONTINUE
         THEN
            
            SELECT COUNT( * )
              INTO LNINTERNATIONALCOUNT
              FROM SPECIFICATION_HEADER SH,
                   STATUS S
             WHERE SH.STATUS = S.STATUS
               AND S.STATUS_TYPE = 'CURRENT'
               AND SH.PART_NO = LSINTERNATIONALPARTNO;

            IF LNINTERNATIONALCOUNT = 0
            THEN
               LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_INTLPARTNOTCURRENT,
                                                     LSINTERNATIONALPARTNO );
               IAPIGENERAL.LOGERROR( GSSOURCE,
                                     LSMETHOD,
                                     IAPIGENERAL.GETLASTERRORTEXT( ) );
            ELSE
               BEGIN
                  

                  
                  SELECT COUNT( * )
                    INTO LNCOUNT
                    FROM ( SELECT HIER_LEVEL,
                                  MATL_CLASS_ID,
                                  CODE,
                                  TYPE
                            FROM ITPRCL
                           WHERE PART_NO = LSINTERNATIONALPARTNO
                          MINUS
                          SELECT HIER_LEVEL,
                                 MATL_CLASS_ID,
                                 CODE,
                                 TYPE
                            FROM ITPRCL
                           WHERE PART_NO = ASPARTNO );

                  
                  SELECT COUNT( * )
                    INTO LNCOUNTDEL1
                    FROM ITPRCL
                   WHERE PART_NO = ASPARTNO;

                  SELECT COUNT( * )
                    INTO LNCOUNTDEL2
                    FROM ITPRCL
                   WHERE PART_NO = LSINTERNATIONALPARTNO;

                  IF    LNCOUNT > 0
                     OR LNCOUNTDEL1 <> LNCOUNTDEL2
                  THEN
                     DELETE FROM ITPRCL
                           WHERE PART_NO = ASPARTNO;

                     INSERT INTO ITPRCL
                                 ( PART_NO,
                                   HIER_LEVEL,
                                   MATL_CLASS_ID,
                                   CODE,
                                   TYPE )
                        SELECT ASPARTNO,
                               HIER_LEVEL,
                               MATL_CLASS_ID,
                               CODE,
                               TYPE
                          FROM ITPRCL
                         WHERE PART_NO = LSINTERNATIONALPARTNO;

                     LDSYSDATE := SYSDATE;

                     INSERT INTO ITPRCL_H
                                 ( PART_NO,
                                   HIER_LEVEL,
                                   MATL_CLASS_ID,
                                   CODE,
                                   TYPE,
                                   LAST_MODIFIED_ON,
                                   LAST_MODIFIED_BY )
                        SELECT ASPARTNO,
                               HIER_LEVEL,
                               MATL_CLASS_ID,
                               CODE,
                               TYPE,
                               LDSYSDATE,
                               USER
                          FROM ITPRCL
                         WHERE PART_NO = LSINTERNATIONALPARTNO;
                  END IF;

                  

                  
                  SELECT COUNT( * )
                    INTO LNCOUNT
                    FROM ( SELECT KW_ID,
                                  KW_VALUE
                            FROM SPECIFICATION_KW
                           WHERE PART_NO = LSINTERNATIONALPARTNO
                          MINUS
                          SELECT KW_ID,
                                 KW_VALUE
                            FROM SPECIFICATION_KW
                           WHERE PART_NO = ASPARTNO );

                  
                  SELECT COUNT( * )
                    INTO LNCOUNTDEL1
                    FROM SPECIFICATION_KW
                   WHERE PART_NO = ASPARTNO;

                  SELECT COUNT( * )
                    INTO LNCOUNTDEL2
                    FROM SPECIFICATION_KW
                   WHERE PART_NO = LSINTERNATIONALPARTNO;

                  IF    LNCOUNT > 0
                     OR LNCOUNTDEL1 <> LNCOUNTDEL2
                  THEN
                     DELETE FROM SPECIFICATION_KW
                           WHERE PART_NO = ASPARTNO
                             AND KW_ID NOT IN( SELECT KW_ID
                                                FROM ITKW
                                               WHERE KW_TYPE = 2 )
                             AND INTL = 1;

                     INSERT INTO SPECIFICATION_KW
                                 ( PART_NO,
                                   KW_ID,
                                   KW_VALUE,
                                   INTL )
                        SELECT ASPARTNO,
                               KW_ID,
                               KW_VALUE,
                               INTL
                          FROM SPECIFICATION_KW
                         WHERE PART_NO = LSINTERNATIONALPARTNO
                           AND KW_ID NOT IN( SELECT KW_ID
                                              FROM ITKW
                                             WHERE KW_TYPE = 2 );
                  END IF;

                  

                  
                  SELECT COUNT( * )
                    INTO LNCOUNT
                    FROM ( SELECT MFC_ID,
                                  MPL_ID,
                                  CLEARANCE_NO,
                                  TRADE_NAME,
                                  AUDIT_DATE,
                                  AUDIT_FREQ,
                                  PRODUCT_CODE,
                                  APPROVAL_DATE,
                                  REVISION,
                                  OBJECT_ID,
                                  OBJECT_REVISION,
                                  OBJECT_OWNER
                            FROM ITPRMFC
                           WHERE PART_NO = LSINTERNATIONALPARTNO
                          MINUS
                          SELECT MFC_ID,
                                 MPL_ID,
                                 CLEARANCE_NO,
                                 TRADE_NAME,
                                 AUDIT_DATE,
                                 AUDIT_FREQ,
                                 PRODUCT_CODE,
                                 APPROVAL_DATE,
                                 REVISION,
                                 OBJECT_ID,
                                 OBJECT_REVISION,
                                 OBJECT_OWNER
                            FROM ITPRMFC
                           WHERE PART_NO = ASPARTNO );

                  
                  SELECT COUNT( * )
                    INTO LNCOUNTDEL1
                    FROM ITPRMFC
                   WHERE PART_NO = ASPARTNO;

                  SELECT COUNT( * )
                    INTO LNCOUNTDEL2
                    FROM ITPRMFC
                   WHERE PART_NO = LSINTERNATIONALPARTNO;

                  IF    LNCOUNT > 0
                     OR LNCOUNTDEL1 <> LNCOUNTDEL2
                  THEN
                     DELETE FROM ITPRMFC
                           WHERE PART_NO = ASPARTNO
                             AND INTL = 1;

                     INSERT INTO ITPRMFC
                                 ( PART_NO,
                                   MFC_ID,
                                   MPL_ID,
                                   CLEARANCE_NO,
                                   TRADE_NAME,
                                   AUDIT_DATE,
                                   AUDIT_FREQ,
                                   INTL,
                                   PRODUCT_CODE,
                                   APPROVAL_DATE,
                                   REVISION,
                                   OBJECT_ID,
                                   OBJECT_REVISION,
                                   OBJECT_OWNER )
                        SELECT ASPARTNO,
                               MFC_ID,
                               MPL_ID,
                               CLEARANCE_NO,
                               TRADE_NAME,
                               AUDIT_DATE,
                               AUDIT_FREQ,
                               INTL,
                               PRODUCT_CODE,
                               APPROVAL_DATE,
                               REVISION,
                               OBJECT_ID,
                               OBJECT_REVISION,
                               OBJECT_OWNER
                          FROM ITPRMFC
                         WHERE PART_NO = LSINTERNATIONALPARTNO
                           AND INTL = 1;
                  END IF;

                  COMMIT;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     IAPIGENERAL.LOGERROR( GSSOURCE,
                                           LSMETHOD,
                                           SQLERRM );
                     RETURN IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                                LSMETHOD,
                                                                IAPICONSTANTDBERROR.DBERR_ERRSYNCPART,
                                                                LSINTERNATIONALPARTNO );
               END;
            END IF;
         END IF;
      END IF;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END SYNCHRONISEONE;


   FUNCTION SYNCHRONISEONEINTERNATIONAL(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS








      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'SynchroniseOneInternational';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;

      CURSOR LQPARTS
      IS
         SELECT DISTINCT PART_NO
                    FROM SPECIFICATION_HEADER
                   WHERE INT_PART_NO = ASPARTNO;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      
      FOR LNPART IN LQPARTS
      LOOP
         LNRETVAL := SYNCHRONISEONE( LNPART.PART_NO,
                                     ASPARTNO );

         IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN( LNRETVAL );
         END IF;
      END LOOP;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END SYNCHRONISEONEINTERNATIONAL;


   FUNCTION CLEARFRAMETRANSFERTABLES(
      ASPARTNO                            IAPITYPE.PARTNO_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS










      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'ClearFrameTransferTable';
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      DELETE FROM FT_SPEC_PROP
            WHERE PART_NO = ASPARTNO;

      DELETE FROM FT_SPEC_PROP_LANG
            WHERE PART_NO = ASPARTNO;

      DELETE FROM FT_SPEC_SECTION
            WHERE PART_NO = ASPARTNO;

      DELETE FROM FT_SPEC_TEXT
            WHERE PART_NO = ASPARTNO;

      DELETE FROM FT_ATTACH_SPEC
            WHERE PART_NO = ASPARTNO;

      DELETE FROM FT_SPEC_TM
            WHERE PART_NO = ASPARTNO;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END CLEARFRAMETRANSFERTABLES;


   FUNCTION INSERTSTATUSHISTORY(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE,
      ANSTATUS                   IN       IAPITYPE.STATUSID_TYPE,
      ADSTATUSDATETIME           IN       IAPITYPE.DATE_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS











      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'InsertStatusHistory';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      INSERT INTO STATUS_HISTORY
                  ( PART_NO,
                    REVISION,
                    STATUS,
                    STATUS_DATE_TIME,
                    USER_ID,
                    SORT_SEQ,
                    FORENAME,
                    LAST_NAME )
           VALUES ( ASPARTNO,
                    ANREVISION,
                    ANSTATUS,
                    ADSTATUSDATETIME,
                    IAPIGENERAL.SESSION.APPLICATIONUSER.USERID,
                    STATUS_HISTORY_SEQ.NEXTVAL,
                    IAPIGENERAL.SESSION.APPLICATIONUSER.FORENAME,
                    IAPIGENERAL.SESSION.APPLICATIONUSER.LASTNAME );

      RETURN IAPICONSTANTDBERROR.DBERR_SUCCESS;
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL );
   END INSERTSTATUSHISTORY;


   FUNCTION CHECKREGIONALGLOBAL(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE,
      ANMASKID                   IN OUT   IAPITYPE.ID_TYPE,
      ANALLOWVAL                 IN OUT   IAPITYPE.BOOLEAN_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS


















      LNOWNER                       IAPITYPE.OWNER_TYPE;
      LSPREFIXTYPE                  IAPITYPE.PREFIXTYPE_TYPE;
      LSINTPARTNO                   IAPITYPE.PARTNO_TYPE;
      LSINTL                        IAPITYPE.INTL_TYPE;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'CheckRegionalGlobal';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      SELECT OWNER,
             INT_PART_NO,
             INTL
        INTO LNOWNER,
             LSINTPARTNO,
             LSINTL
        FROM SPECIFICATION_HEADER
       WHERE PART_NO = ASPARTNO
         AND REVISION = ANREVISION;

      IF LSINTPARTNO IS NOT NULL
      THEN
         BEGIN
            SELECT PREFIX_TYPE
              INTO LSPREFIXTYPE
              FROM SPEC_PREFIX_DESCR
             WHERE PREFIX = SUBSTR( LSINTPARTNO,
                                    1,
                                    3 );
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               LSPREFIXTYPE := 'L';
         END;
      ELSIF LSINTL = '1'
      THEN
         BEGIN
            SELECT PREFIX_TYPE
              INTO LSPREFIXTYPE
              FROM SPEC_PREFIX_DESCR
             WHERE PREFIX = SUBSTR( ASPARTNO,
                                    1,
                                    3 );
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               LSPREFIXTYPE := 'L';
         END;
      END IF;

      IF LSPREFIXTYPE = 'G'
      THEN
         ANMASKID := NULL;
         ANALLOWVAL := 0;
         RETURN IAPICONSTANTDBERROR.DBERR_SUCCESS;
      END IF;

      ANALLOWVAL := 1;
      RETURN IAPICONSTANTDBERROR.DBERR_SUCCESS;
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL );
   END CHECKREGIONALGLOBAL;


   FUNCTION INSERTRULES(
      ASPARTNO                            IAPITYPE.PARTNO_TYPE,
      ANREVISION                          IAPITYPE.REVISION_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS










      CURSOR CUR_VALIDATIONS
      IS
         SELECT SECTION_ID,
                SUB_SECTION_ID,
                TYPE,
                REF_ID,
                REF_OWNER
           FROM ITSHVALD
          WHERE PART_NO = ASPARTNO
            AND REVISION = ANREVISION
            AND TYPE IN( 2, 6 );

      LNCOUNT                       NUMBER;
      LNREFVER                      IAPITYPE.REVISION_TYPE;
      LNREFINFO                     IAPITYPE.ID_TYPE;
      LNSECTIONSEQUENCENO           IAPITYPE.SEQUENCE_TYPE;
      LNSECTIONREV                  IAPITYPE.REVISION_TYPE;
      LNSUBSECTIONREV               IAPITYPE.REVISION_TYPE;
      LSFRAMENO                     IAPITYPE.FRAMENO_TYPE;


      LNFRAMEREVISION               IAPITYPE.FRAMEREVISION_TYPE;

      LNFRAMEOWNER                  IAPITYPE.OWNER_TYPE;
      LSOLE                         IAPITYPE.STRING_TYPE;
      LSINTERNATIONAL               IAPITYPE.INTL_TYPE;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'InsertRules';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      FOR REC_VAL IN CUR_VALIDATIONS
      LOOP
         
         SELECT COUNT( * )
           INTO LNCOUNT
           FROM SPECIFICATION_SECTION
          WHERE PART_NO = ASPARTNO
            AND REVISION = ANREVISION
            AND SECTION_ID = REC_VAL.SECTION_ID
            AND SUB_SECTION_ID = REC_VAL.SUB_SECTION_ID
            AND TYPE = REC_VAL.TYPE
            AND REF_ID = REC_VAL.REF_ID
            AND REF_OWNER = REC_VAL.REF_OWNER;

         IF LNCOUNT = 0
         THEN
            
            IF REC_VAL.TYPE = 6
            THEN
               SELECT MAX( REVISION )
                 INTO LNREFVER
                 FROM ITOID
                WHERE OBJECT_ID = REC_VAL.REF_ID
                  AND OWNER = REC_VAL.REF_OWNER
                  AND STATUS IN( 2, 5 );
            ELSE
               SELECT MAX( TEXT_REVISION )
                 INTO LNREFVER
                 FROM REFERENCE_TEXT
                WHERE REF_TEXT_TYPE = REC_VAL.REF_ID
                  AND OWNER = REC_VAL.REF_OWNER
                  AND STATUS IN( 2, 5 )
                  AND LANG_ID = 1;
            END IF;

            
            IF LNREFVER IS NULL
            THEN
               LNREFVER := 0;
            END IF;

            
            IF REC_VAL.TYPE = 2
            THEN
               LNREFINFO := 5;
            ELSE
               
               
               
               BEGIN
                  SELECT OLE_OBJECT
                    INTO LSOLE
                    FROM ITOID
                   WHERE OBJECT_ID = REC_VAL.REF_ID
                     AND REVISION = LNREFVER
                     AND OWNER = REC_VAL.REF_OWNER;

                  IF LSOLE = 'Y'
                  THEN
                     LNREFINFO := 0;
                  ELSIF LSOLE = 'N'
                  THEN
                     LNREFINFO := 1;
                  ELSE
                     LNREFINFO := 2;
                  END IF;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     LSOLE := '?';
                     LNREFINFO := -1;
               END;
            END IF;

            IF LNREFINFO >= 0
            THEN
               
               SELECT   NVL( MAX( SECTION_SEQUENCE_NO ),
                             0 )
                      + 1
                 INTO LNSECTIONSEQUENCENO
                 FROM SPECIFICATION_SECTION
                WHERE PART_NO = ASPARTNO
                  AND REVISION = ANREVISION
                  AND SECTION_ID = REC_VAL.SECTION_ID
                  AND SUB_SECTION_ID = REC_VAL.SUB_SECTION_ID
                  AND TYPE = REC_VAL.TYPE;

               IF LNSECTIONSEQUENCENO = 1
               THEN
                  SELECT FRAME_ID,
                         FRAME_REV,
                         FRAME_OWNER
                    INTO LSFRAMENO,
                         LNFRAMEREVISION,
                         LNFRAMEOWNER
                    FROM SPECIFICATION_HEADER
                   WHERE PART_NO = ASPARTNO
                     AND REVISION = ANREVISION;

                  
                  SELECT   NVL( MAX( SECTION_SEQUENCE_NO ),
                                0 )
                         + 1
                    INTO LNSECTIONSEQUENCENO
                    FROM FRAME_SECTION
                   WHERE FRAME_NO = LSFRAMENO
                     AND REVISION = LNFRAMEREVISION
                     AND OWNER = LNFRAMEOWNER
                     AND SECTION_ID = REC_VAL.SECTION_ID
                     AND SUB_SECTION_ID = REC_VAL.SUB_SECTION_ID
                     AND TYPE = REC_VAL.TYPE;

                  IF LNSECTIONSEQUENCENO = 1
                  THEN
                     
                     LNSECTIONSEQUENCENO := -1;
                  







                  END IF;

                  
                  SELECT MAX( SECTION_REV ),
                         MAX( SUB_SECTION_REV )
                    INTO LNSECTIONREV,
                         LNSUBSECTIONREV
                    FROM FRAME_SECTION
                   WHERE FRAME_NO = LSFRAMENO
                     AND REVISION = LNFRAMEREVISION
                     AND OWNER = LNFRAMEOWNER
                     AND SECTION_ID = REC_VAL.SECTION_ID
                     AND SUB_SECTION_ID = REC_VAL.SUB_SECTION_ID;
               ELSE
                  
                  SELECT MAX( SECTION_REV ),
                         MAX( SUB_SECTION_REV )
                    INTO LNSECTIONREV,
                         LNSUBSECTIONREV
                    FROM SPECIFICATION_SECTION
                   WHERE PART_NO = ASPARTNO
                     AND REVISION = ANREVISION
                     AND SECTION_ID = REC_VAL.SECTION_ID
                     AND SUB_SECTION_ID = REC_VAL.SUB_SECTION_ID;
               END IF;

               IF LNSECTIONSEQUENCENO > 0
               THEN
                  SELECT INTL
                    INTO LSINTERNATIONAL
                    FROM SPECIFICATION_HEADER
                   WHERE PART_NO = ASPARTNO
                     AND REVISION = ANREVISION;

                  
                  INSERT INTO SPECIFICATION_SECTION
                              ( PART_NO,
                                REVISION,
                                SECTION_ID,
                                SUB_SECTION_ID,
                                TYPE,
                                REF_ID,
                                REF_VER,
                                REF_INFO,
                                SEQUENCE_NO,
                                HEADER,
                                MANDATORY,
                                SECTION_SEQUENCE_NO,
                                DISPLAY_FORMAT,
                                ASSOCIATION,
                                INTL,
                                SECTION_REV,
                                SUB_SECTION_REV,
                                DISPLAY_FORMAT_REV,
                                REF_OWNER )
                       VALUES ( ASPARTNO,
                                ANREVISION,
                                REC_VAL.SECTION_ID,
                                REC_VAL.SUB_SECTION_ID,
                                REC_VAL.TYPE,
                                REC_VAL.REF_ID,
                                LNREFVER,
                                LNREFINFO,
                                NULL,
                                1,
                                'Y',
                                LNSECTIONSEQUENCENO,
                                NULL,
                                NULL,
                                LSINTERNATIONAL,
                                LNSECTIONREV,
                                LNSUBSECTIONREV,
                                0,
                                REC_VAL.REF_OWNER );
               END IF;
            END IF;
         END IF;
      END LOOP;

      RETURN IAPICONSTANTDBERROR.DBERR_SUCCESS;
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL );
   END INSERTRULES;


   FUNCTION CREATESPEC(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ASPARTNOFROM               IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE,
      ASDESCRIPTION              IN       IAPITYPE.DESCRIPTION_TYPE,
      ASCREATEDBY                IN       IAPITYPE.USERID_TYPE,
      ADPLANNEDEFFECTIVEDATE     IN       IAPITYPE.DATE_TYPE,
      ASFRAMEID                  IN       IAPITYPE.FRAMENO_TYPE,
      ANFRAMEREVISION            IN       IAPITYPE.FRAMEREVISION_TYPE,
      ANFRAMEOWNER               IN       IAPITYPE.OWNER_TYPE,
      ANSPECTYPEID               IN       IAPITYPE.ID_TYPE,
      ANWORKFLOWGROUPID          IN       IAPITYPE.ID_TYPE,
      ANACCESSGROUPID            IN       IAPITYPE.ID_TYPE,
      ASINTERNATIONAL            IN       IAPITYPE.INTL_TYPE,
      ANMULTILANGUAGE            IN       IAPITYPE.BOOLEAN_TYPE,
      ANUOMTYPE                  IN       IAPITYPE.BOOLEAN_TYPE,
      ANMASKID                   IN       IAPITYPE.ID_TYPE,
      AQERRORS                   IN OUT   IAPITYPE.REF_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS
























      LNINITIALSTATUS               IAPITYPE.STATUSID_TYPE;
      LNWORKFLOWID                  IAPITYPE.WORKFLOWID_TYPE;
      LNFRAMEREVISION               IAPITYPE.FRAMEREVISION_TYPE;
      LSFRAMENO                     IAPITYPE.FRAMENO_TYPE;
      LNPARTTYPE                    IAPITYPE.PARTTYPE_TYPE;
      LNREASONID                    IAPITYPE.NUMVAL_TYPE;
      LNVALID                       IAPITYPE.ID_TYPE;
      LNATTACHEDSPEC                NUMBER;
      DATE_OUT_OF_RANGE             EXCEPTION;
      PART_IS_NULL                  EXCEPTION;
      FRAME_IS_NULL                 EXCEPTION;
      WORKFLOW_IS_NULL              EXCEPTION;
      ACCESS_IS_NULL                EXCEPTION;
      DATE_IS_NULL                  EXCEPTION;
      REVISION_IS_NULL              EXCEPTION;
      INTEGRITY_VIOLATION           EXCEPTION;
      
      PED_INVALIDDATE_ERROR         EXCEPTION;
      PRAGMA EXCEPTION_INIT( INTEGRITY_VIOLATION, -2291 );
      INVALID_MONTH                 EXCEPTION;
      PRAGMA EXCEPTION_INIT( INVALID_MONTH, -01843 );
      INVALID_DAY                   EXCEPTION;
      PRAGMA EXCEPTION_INIT( INVALID_DAY, -1847 );
      MANDATORY_FIELD               EXCEPTION;
      PRAGMA EXCEPTION_INIT( MANDATORY_FIELD, -1400 );
      LNVIEW                        NUMBER;
      LNALLOWVAL                    NUMBER;
      LSSPECTYPE                    IAPITYPE.CLASS3PARTTYPE_TYPE;
      LSFRAMETYPE                   IAPITYPE.CLASS3PARTTYPE_TYPE;
      LSDESCRIPTION                 IAPITYPE.DESCRIPTION_TYPE;
      LQERRORS                      IAPITYPE.REF_TYPE;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'CreateSpec';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;

      
      CURSOR C_INS_FT
      IS
         SELECT A.SECTION_ID,
                A.SUB_SECTION_ID,
                A.SECTION_REV,
                A.SUB_SECTION_REV,
                TEXT_TYPE,
                TEXT_TYPE_REV,
                TEXT
           FROM FRAME_TEXT A,
                FRAME_SECTION B
          WHERE A.FRAME_NO = ASFRAMEID
            AND A.OWNER = ANFRAMEOWNER
            AND A.REVISION = ANFRAMEREVISION
            AND A.FRAME_NO = B.FRAME_NO
            AND A.REVISION = B.REVISION
            AND A.OWNER = B.OWNER
            AND A.SECTION_ID = B.SECTION_ID
            AND A.SUB_SECTION_ID = B.SUB_SECTION_ID
            AND B.REF_ID = A.TEXT_TYPE
            AND B.MANDATORY = 'Y'
            AND B.TYPE = IAPICONSTANT.SECTIONTYPE_FREETEXT;

      CURSOR C_INS_FT_MASK(
         ANVIEWID                   IN       IAPITYPE.ID_TYPE )
      IS
         SELECT A.SECTION_ID,
                A.SUB_SECTION_ID,
                A.SECTION_REV,
                A.SUB_SECTION_REV,
                TEXT_TYPE,
                TEXT_TYPE_REV,
                TEXT
           FROM FRAME_TEXT A,
                ITFRMVSC B
          WHERE A.FRAME_NO = ASFRAMEID
            AND A.OWNER = ANFRAMEOWNER
            AND A.REVISION = ANFRAMEREVISION
            AND B.VIEW_ID = ANVIEWID
            AND A.FRAME_NO = B.FRAME_NO
            AND A.REVISION = B.REVISION
            AND A.OWNER = B.OWNER
            AND A.SECTION_ID = B.SECTION_ID
            AND A.SUB_SECTION_ID = B.SUB_SECTION_ID
            AND B.REF_ID = A.TEXT_TYPE
            AND B.MANDATORY = 'Y'
            AND B.TYPE = IAPICONSTANT.SECTIONTYPE_FREETEXT;

      
      CURSOR L_SPEC_SECTION_CURSOR
      IS
         SELECT PART_NO,
                REVISION,
                SECTION_ID,
                SUB_SECTION_ID
           FROM SPECIFICATION_SECTION
          WHERE SPECIFICATION_SECTION.PART_NO = ASPARTNO
            AND SPECIFICATION_SECTION.REVISION = 1
            AND SPECIFICATION_SECTION.TYPE = IAPICONSTANT.SECTIONTYPE_ATTACHEDSPEC;
   BEGIN
      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );
      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                              'asPartNo: '
                           || ASPARTNO,
                           IAPICONSTANT.INFOLEVEL_3 );
      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                              'asPartNoFrom: '
                           || ASPARTNOFROM,
                           IAPICONSTANT.INFOLEVEL_3 );
      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                              'anRevision: '
                           || ANREVISION,
                           IAPICONSTANT.INFOLEVEL_3 );
      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                              'asDescription: '
                           || ASDESCRIPTION,
                           IAPICONSTANT.INFOLEVEL_3 );
      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                              'asCreatedBy: '
                           || ASCREATEDBY,
                           IAPICONSTANT.INFOLEVEL_3 );
      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                              'adPlannedEffectiveDate : '
                           || ADPLANNEDEFFECTIVEDATE,
                           IAPICONSTANT.INFOLEVEL_3 );
      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                              ' asFrameId  : '
                           || ASFRAMEID,
                           IAPICONSTANT.INFOLEVEL_3 );
      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                              ' anFrameRevision: '
                           || ANFRAMEREVISION,
                           IAPICONSTANT.INFOLEVEL_3 );
      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                              'anFrameOwner : '
                           || ANFRAMEOWNER,
                           IAPICONSTANT.INFOLEVEL_3 );
      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                              'anSpecTypeId  : '
                           || ANSPECTYPEID,
                           IAPICONSTANT.INFOLEVEL_3 );
      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                              'anWorkFlowGroupId: '
                           || ANWORKFLOWGROUPID,
                           IAPICONSTANT.INFOLEVEL_3 );
      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                              'anAccessGroupId: '
                           || ANACCESSGROUPID,
                           IAPICONSTANT.INFOLEVEL_3 );
      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                              'asInternational: '
                           || ASINTERNATIONAL,
                           IAPICONSTANT.INFOLEVEL_3 );
      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                              'anMultiLanguage: '
                           || ANMULTILANGUAGE,
                           IAPICONSTANT.INFOLEVEL_3 );
      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                              'anUomType: '
                           || ANUOMTYPE,
                           IAPICONSTANT.INFOLEVEL_3 );
      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                              'anMaskId: '
                           || ANMASKID,
                           IAPICONSTANT.INFOLEVEL_3 );

      IF IAPIGENERAL.SESSION.APPLICATIONUSER.USERID IS NULL
      THEN
         RETURN IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                    LSMETHOD,
                                                    IAPICONSTANTDBERROR.DBERR_NOINITSESSION );
      END IF;

      
      IF ASPARTNO IS NULL
      THEN
         RAISE PART_IS_NULL;
      ELSIF ASFRAMEID IS NULL
      THEN
         RAISE FRAME_IS_NULL;
      ELSIF ANWORKFLOWGROUPID IS NULL
      THEN
         RAISE WORKFLOW_IS_NULL;
      ELSIF ANACCESSGROUPID IS NULL
      THEN
         RAISE ACCESS_IS_NULL;
      ELSIF ADPLANNEDEFFECTIVEDATE IS NULL
      THEN
         RAISE DATE_IS_NULL;
      END IF;

      IF ANFRAMEREVISION IS NULL
      THEN
         LNFRAMEREVISION := 1;
      ELSE
         LNFRAMEREVISION := ANFRAMEREVISION;
      END IF;

      BEGIN
         SELECT DISTINCT FRAME_NO
                    INTO LSFRAMENO
                    FROM FRAME_HEADER
                   WHERE FRAME_NO = ASFRAMEID
                     AND OWNER = ANFRAMEOWNER;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_FRAMENOTFOUND,
                                                  ASFRAMEID,
                                                  ' ',
                                                  ANFRAMEOWNER );
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN LNRETVAL;
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
      END;

      
      IF ADPLANNEDEFFECTIVEDATE <= SYSDATE
      THEN
         RAISE DATE_OUT_OF_RANGE;
      END IF;

      
      LNRETVAL := IAPISPECIFICATION.VALIDATEPED( ASPARTNO,
                                                 ANREVISION,
                                                 ADPLANNEDEFFECTIVEDATE,
                                                 0 );
      IF LNRETVAL = IAPICONSTANTDBERROR.DBERR_INVALIDPEDDATE
      THEN
         RAISE PED_INVALIDDATE_ERROR;
      END IF;
      

      BEGIN
         
         SELECT WORK_FLOW_ID
           INTO LNWORKFLOWID
           FROM WORKFLOW_GROUP
          WHERE WORKFLOW_GROUP_ID = ANWORKFLOWGROUPID;

         SELECT INITIAL_STATUS
           INTO LNINITIALSTATUS
           FROM WORK_FLOW_GROUP
          WHERE WORK_FLOW_ID = LNWORKFLOWID;

         INSERT INTO STATUS_HISTORY
                     ( PART_NO,
                       REVISION,
                       STATUS,
                       STATUS_DATE_TIME,
                       USER_ID,
                       SORT_SEQ,
                       FORENAME,
                       LAST_NAME )
              VALUES ( ASPARTNO,
                       ANREVISION,
                       LNINITIALSTATUS,
                       SYSDATE,
                       IAPIGENERAL.SESSION.APPLICATIONUSER.USERID,
                       STATUS_HISTORY_SEQ.NEXTVAL,
                       IAPIGENERAL.SESSION.APPLICATIONUSER.FORENAME,
                       IAPIGENERAL.SESSION.APPLICATIONUSER.LASTNAME );

         
         
         
         SELECT REASON_SEQ.NEXTVAL
           INTO LNREASONID
           FROM DUAL;

         INSERT INTO REASON
                     ( ID,
                       PART_NO,
                       REVISION,
                       STATUS_TYPE,
                       TEXT )
              VALUES ( LNREASONID,
                       ASPARTNO,
                       ANREVISION,
                       IAPICONSTANT.STATUSTYPE_REASONFORSTATUSCHNG,
                       '' );
         
         

         
         SELECT REASON_SEQ.NEXTVAL
           INTO LNREASONID
           FROM DUAL;

         INSERT INTO REASON
                     ( ID,
                       PART_NO,
                       REVISION,
                       STATUS_TYPE,
                       TEXT )
              VALUES ( LNREASONID,
                       ASPARTNO,
                       ANREVISION,
                       IAPICONSTANT.STATUSTYPE_REASONFORISSUE,
                       '' );

         LNRETVAL := IAPIEMAIL.REGISTEREMAIL( ASPARTNO,
                                              ANREVISION,
                                              LNINITIALSTATUS,
                                              SYSDATE,
                                              'S',
                                              NULL,
                                              NULL,
                                              LNREASONID,
                                              NULL,
                                              LQERRORS );
      EXCEPTION
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
      END;

      
      LNPARTTYPE := NULL;

      BEGIN
         SELECT PART_TYPE
           INTO LNPARTTYPE
           FROM PART
          WHERE PART_NO = ASPARTNO;
      EXCEPTION
         WHEN OTHERS
         THEN
            LNPARTTYPE := NULL;
      END;

      IF LNPARTTYPE IS NULL
      THEN
         UPDATE PART
            SET PART_TYPE = ANSPECTYPEID
          WHERE PART_NO = ASPARTNO;
      END IF;

      



      BEGIN
         IF ASINTERNATIONAL = '1'
         THEN
            INSERT INTO PART_PLANT
                        ( PART_NO,
                          PLANT,
                          COMPONENT_SCRAP,
                          LEAD_TIME_OFFSET,
                          RELEVENCY_TO_COSTING,
                          BULK_MATERIAL,
                          ITEM_CATEGORY,
                          PLANT_ACCESS )
                 VALUES ( ASPARTNO,
                          'INTL',
                          0,
                          0,
                          'Y',
                          'N',
                          'L',
                          'Y' );
         END IF;
      EXCEPTION
         WHEN OTHERS
         THEN
            
            NULL;
      END;

      
      BEGIN
         INSERT INTO SPECIFICATION_HEADER
                     ( PART_NO,
                       REVISION,
                       STATUS,
                       DESCRIPTION,
                       CREATED_BY,
                       CREATED_ON,
                       LAST_MODIFIED_BY,
                       LAST_MODIFIED_ON,
                       PLANNED_EFFECTIVE_DATE,
                       STATUS_CHANGE_DATE,
                       FRAME_ID,
                       FRAME_REV,
                       FRAME_OWNER,
                       WORKFLOW_GROUP_ID,
                       ACCESS_GROUP,
                       CLASS3_ID,
                       OWNER,
                       INTL,
                       MULTILANG,
                       UOM_TYPE,
                       MASK_ID,
                       PED_IN_SYNC )
              VALUES ( ASPARTNO,
                       ANREVISION,
                       LNINITIALSTATUS,
                       ASDESCRIPTION,
                       UPPER( ASCREATEDBY ),
                       SYSDATE,
                       UPPER( ASCREATEDBY ),
                       SYSDATE,
                       ADPLANNEDEFFECTIVEDATE,
                       SYSDATE,
                       LSFRAMENO,
                       LNFRAMEREVISION,
                       ANFRAMEOWNER,
                       ANWORKFLOWGROUPID,
                       ANACCESSGROUPID,
                       ANSPECTYPEID,
                       IAPIGENERAL.SESSION.DATABASE.OWNER,
                       ASINTERNATIONAL,
                       NVL( ANMULTILANGUAGE,
                            0 ),
                       ANUOMTYPE,
                       ANMASKID,
                       'Y' );

         INSERT INTO ITSHDESCR_L
                     ( PART_NO,
                       REVISION,
                       LANG_ID,
                       DESCRIPTION )
            ( SELECT PART_NO,
                     ANREVISION,
                     LANG_ID,
                     DESCRIPTION
               FROM PART_L
              WHERE PART_NO = ASPARTNO );

         
         
         SELECT DESCRIPTION
           INTO LSDESCRIPTION
           FROM PART
          WHERE PART_NO = ASPARTNO;

         IF LSDESCRIPTION <> ASDESCRIPTION
         THEN
            UPDATE PART
               SET DESCRIPTION = ASDESCRIPTION
             WHERE PART_NO = ASPARTNO;
         END IF;
      EXCEPTION
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL );
      END;

        

      LNVIEW := ANMASKID;
      LNRETVAL := CHECKREGIONALGLOBAL( ASPARTNO,
                                       ANREVISION,
                                       LNVIEW,
                                       LNALLOWVAL );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN LNRETVAL;
      END IF;

      UPDATE SPECIFICATION_HEADER
         SET MASK_ID = LNVIEW
       WHERE PART_NO = ASPARTNO
         AND REVISION = ANREVISION;

      
      BEGIN
         INSERT INTO SPECIFICATION_SECTION
                     ( PART_NO,
                       REVISION,
                       SECTION_ID,
                       SECTION_REV,
                       SUB_SECTION_ID,
                       SUB_SECTION_REV,
                       TYPE,
                       REF_ID,
                       REF_VER,
                       REF_INFO,
                       REF_OWNER,
                       SEQUENCE_NO,
                       HEADER,
                       MANDATORY,
                       SECTION_SEQUENCE_NO,
                       DISPLAY_FORMAT,
                       DISPLAY_FORMAT_REV,
                       ASSOCIATION,
                       INTL )
            SELECT ASPARTNO,
                   ANREVISION,
                   SECTION_ID,
                   NVL( F_GET_SUB_REV( SECTION_ID,
                                       SECTION_REV,
                                       NULL,
                                       NULL,
                                       'SC' ),
                        0 ),
                   SUB_SECTION_ID,
                   NVL( F_GET_SUB_REV( SUB_SECTION_ID,
                                       SUB_SECTION_REV,
                                       NULL,
                                       NULL,
                                       'SB' ),
                        0 ),
                   TYPE,
                   REF_ID,
                   DECODE( TYPE,
                           1, NVL( F_GET_SUB_REV( REF_ID,
                                                  REF_VER,
                                                  NULL,
                                                  NULL,
                                                  'PG' ),
                                   0 ),
                           4, NVL( F_GET_SUB_REV( REF_ID,
                                                  REF_VER,
                                                  NULL,
                                                  NULL,
                                                  'SP' ),
                                   0 ),
                           5, NVL( F_GET_SUB_REV( REF_ID,
                                                  REF_VER,
                                                  NULL,
                                                  NULL,
                                                  'FT' ),
                                   0 ),

                           












                            6, NVL( REF_VER, 0 ),
                            
                            












                                2, NVL( REF_VER, 0 ),
                            

                           REF_VER ),
                   REF_INFO,
                   REF_OWNER,
                   SEQUENCE_NO,
                   HEADER,
                   MANDATORY,
                   SECTION_SEQUENCE_NO,
                   DISPLAY_FORMAT,
                   DISPLAY_FORMAT_REV,
                   ASSOCIATION,
                   INTL
              FROM FRAME_SECTION
             WHERE FRAME_NO = LSFRAMENO
               AND REVISION = LNFRAMEREVISION
               AND OWNER = ANFRAMEOWNER
               AND MANDATORY = 'Y';

         INSERT INTO SPECIFICATION_SECTION
                     ( PART_NO,
                       REVISION,
                       SECTION_ID,
                       SECTION_REV,
                       SUB_SECTION_ID,
                       SUB_SECTION_REV,
                       TYPE,
                       REF_ID,
                       REF_VER,
                       REF_INFO,
                       REF_OWNER,
                       SEQUENCE_NO,
                       HEADER,
                       MANDATORY,
                       SECTION_SEQUENCE_NO,
                       DISPLAY_FORMAT,
                       DISPLAY_FORMAT_REV,
                       ASSOCIATION,
                       INTL )
            SELECT ASPARTNO,
                   ANREVISION,
                   SC.SECTION_ID,
                   NVL( F_GET_SUB_REV( SC.SECTION_ID,
                                       SC.SECTION_REV,
                                       NULL,
                                       NULL,
                                       'SC' ),
                        0 ),
                   SC.SUB_SECTION_ID,
                   NVL( F_GET_SUB_REV( SC.SUB_SECTION_ID,
                                       SC.SUB_SECTION_REV,
                                       NULL,
                                       NULL,
                                       'SB' ),
                        0 ),
                   SC.TYPE,
                   SC.REF_ID,
                   NVL( DECODE( SC.TYPE,
                                1, F_GET_SUB_REV( SC.REF_ID,
                                                  SC.REF_VER,
                                                  NULL,
                                                  NULL,
                                                  'PG' ),
                                4, F_GET_SUB_REV( SC.REF_ID,
                                                  SC.REF_VER,
                                                  NULL,
                                                  NULL,
                                                  'SP' ),
                                5, F_GET_SUB_REV( SC.REF_ID,
                                                  SC.REF_VER,
                                                  NULL,
                                                  NULL,
                                                  'FT' ),

                                











                                6, SC.REF_VER,
                                
                                











                                    2, SC.REF_VER,
                                

                                SC.REF_VER ),
                        0 ),
                   SC.REF_INFO,
                   SC.REF_OWNER,
                   SC.SEQUENCE_NO,
                   SC.HEADER,
                   V.MANDATORY,
                   SC.SECTION_SEQUENCE_NO,
                   SC.DISPLAY_FORMAT,
                   SC.DISPLAY_FORMAT_REV,
                   SC.ASSOCIATION,
                   SC.INTL
              FROM FRAME_SECTION SC,
                   ITFRMVSC V
             WHERE V.VIEW_ID = LNVIEW
               AND V.FRAME_NO = LSFRAMENO
               AND V.REVISION = ANFRAMEREVISION
               AND V.OWNER = ANFRAMEOWNER
               AND SC.FRAME_NO = V.FRAME_NO
               AND SC.REVISION = V.REVISION
               AND SC.OWNER = V.OWNER
               AND SC.SECTION_ID = V.SECTION_ID
               AND SC.SUB_SECTION_ID = V.SUB_SECTION_ID
               AND SC.TYPE = V.TYPE
               AND SC.REF_ID = V.REF_ID
               AND SC.SECTION_SEQUENCE_NO = V.SECTION_SEQUENCE_NO
               AND V.MANDATORY = 'Y';
      EXCEPTION
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL );
      END;

      
      LNRETVAL := UPDATELAYOUT( ASPARTNO,
                                ANREVISION,
                                1 );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN LNRETVAL;
      END IF;

      
      FOR L_ROW IN L_SPEC_SECTION_CURSOR
      LOOP
         BEGIN
            SELECT ATTACHED_SPEC_SEQ.NEXTVAL
              INTO LNATTACHEDSPEC
              FROM DUAL;

            UPDATE SPECIFICATION_SECTION
               SET REF_ID = LNATTACHEDSPEC
             WHERE PART_NO = L_ROW.PART_NO
               AND REVISION = L_ROW.REVISION
               AND SECTION_ID = L_ROW.SECTION_ID
               AND SUB_SECTION_ID = L_ROW.SUB_SECTION_ID
               AND REF_ID = 0
               AND SPECIFICATION_SECTION.TYPE = IAPICONSTANT.SECTIONTYPE_ATTACHEDSPEC;

            UPDATE ATTACHED_SPECIFICATION
               SET REF_ID = LNATTACHEDSPEC
             WHERE PART_NO = L_ROW.PART_NO
               AND REVISION = L_ROW.REVISION
               AND SECTION_ID = L_ROW.SECTION_ID
               AND SUB_SECTION_ID = L_ROW.SUB_SECTION_ID
               AND REF_ID = 0;

            
            








            






              

         EXCEPTION
            WHEN OTHERS
            THEN
               IAPIGENERAL.LOGERROR( GSSOURCE,
                                     LSMETHOD,
                                     SQLERRM );
               RETURN IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL );
         END;
      END LOOP;

      
      BEGIN
         




         INSERT INTO SPECIFICATION_PROP
                     ( PART_NO,
                       REVISION,
                       SECTION_ID,
                       SUB_SECTION_ID,
                       SECTION_REV,
                       SUB_SECTION_REV,
                       PROPERTY_GROUP,
                       PROPERTY,
                       ATTRIBUTE,
                       UOM_ID,
                       PROPERTY_GROUP_REV,
                       PROPERTY_REV,
                       ATTRIBUTE_REV,
                       UOM_REV,
                       TEST_METHOD,
                       TEST_METHOD_REV,
                       SEQUENCE_NO,
                       CHARACTERISTIC,
                       CHARACTERISTIC_REV,
                       ASSOCIATION,
                       ASSOCIATION_REV,
                       INTL,
                       NUM_1,
                       NUM_2,
                       NUM_3,
                       NUM_4,
                       NUM_5,
                       NUM_6,
                       NUM_7,
                       NUM_8,
                       NUM_9,
                       NUM_10,
                       CHAR_1,
                       CHAR_2,
                       CHAR_3,
                       CHAR_4,
                       CHAR_5,
                       CHAR_6,
                       BOOLEAN_1,
                       BOOLEAN_2,
                       BOOLEAN_3,
                       BOOLEAN_4,
                       DATE_1,
                       DATE_2,
                       CH_2,
                       CH_REV_2,
                       CH_3,
                       CH_REV_3,
                       AS_2,
                       AS_REV_2,
                       AS_3,
                       AS_REV_3,
                       UOM_ALT_ID,
                       UOM_ALT_REV )
            SELECT ASPARTNO,
                   ANREVISION,
                   A.SECTION_ID,
                   A.SUB_SECTION_ID,
                   NVL( F_GET_SUB_REV( A.SECTION_ID,
                                       A.SECTION_REV,
                                       NULL,
                                       NULL,
                                       'SC' ),
                        0 ),
                   NVL( F_GET_SUB_REV( A.SUB_SECTION_ID,
                                       A.SUB_SECTION_REV,
                                       NULL,
                                       NULL,
                                       'SB' ),
                        0 ),
                   A.PROPERTY_GROUP,
                   A.PROPERTY,
                   A.ATTRIBUTE,
                   A.UOM_ID,
                   NVL( F_GET_SUB_REV( A.PROPERTY_GROUP,
                                       A.PROPERTY_GROUP_REV,
                                       NULL,
                                       NULL,
                                       'PG' ),
                        0 ),
                   NVL( F_GET_SUB_REV( A.PROPERTY,
                                       A.PROPERTY_REV,
                                       NULL,
                                       NULL,
                                       'SP' ),
                        0 ),
                   NVL( F_GET_SUB_REV( A.ATTRIBUTE,
                                       A.ATTRIBUTE_REV,
                                       NULL,
                                       NULL,
                                       'AT' ),
                        0 ),
                   NVL( F_GET_SUB_REV( A.UOM_ID,
                                       A.UOM_REV,
                                       NULL,
                                       NULL,
                                       'UO' ),
                        0 ),
                   A.TEST_METHOD,
                   NVL( F_GET_SUB_REV( A.TEST_METHOD,
                                       A.TEST_METHOD_REV,
                                       NULL,
                                       NULL,
                                       'TM' ),
                        0 ),
                   A.SEQUENCE_NO,
                   A.CHARACTERISTIC,
                   NVL( F_GET_SUB_REV( A.CHARACTERISTIC,
                                       A.CHARACTERISTIC_REV,
                                       NULL,
                                       NULL,
                                       'CH' ),
                        0 ),
                   A.ASSOCIATION,
                   NVL( F_GET_SUB_REV( A.ASSOCIATION,
                                       A.ASSOCIATION_REV,
                                       NULL,
                                       NULL,
                                       'CH' ),
                        0 ),
                   A.INTL,
                   NUM_1,
                   NUM_2,
                   NUM_3,
                   NUM_4,
                   NUM_5,
                   NUM_6,
                   NUM_7,
                   NUM_8,
                   NUM_9,
                   NUM_10,
                   CHAR_1,
                   CHAR_2,
                   CHAR_3,
                   CHAR_4,
                   CHAR_5,
                   CHAR_6,
                   BOOLEAN_1,
                   BOOLEAN_2,
                   BOOLEAN_3,
                   BOOLEAN_4,
                   DATE_1,
                   DATE_2,
                   CH_2,
                   NVL( F_GET_SUB_REV( A.CH_2,
                                       A.CH_REV_2,
                                       NULL,
                                       NULL,
                                       'CH' ),
                        0 ),
                   CH_3,
                   NVL( F_GET_SUB_REV( A.CH_3,
                                       A.CH_REV_3,
                                       NULL,
                                       NULL,
                                       'CH' ),
                        0 ),
                   AS_2,
                   NVL( F_GET_SUB_REV( A.AS_2,
                                       A.AS_REV_2,
                                       NULL,
                                       NULL,
                                       'AS' ),
                        0 ),
                   AS_3,
                   NVL( F_GET_SUB_REV( A.AS_3,
                                       A.AS_REV_3,
                                       NULL,
                                       NULL,
                                       'AS' ),
                        0 ),
                   UOM_ALT_ID,
                   NVL( F_GET_SUB_REV( A.UOM_ALT_ID,
                                       A.UOM_ALT_REV,
                                       NULL,
                                       NULL,
                                       'UO' ),
                        0 )
              FROM FRAME_PROP A,
                   SPECIFICATION_SECTION B
             WHERE A.FRAME_NO = LSFRAMENO
               AND A.REVISION = LNFRAMEREVISION
               AND A.OWNER = ANFRAMEOWNER
               AND B.PART_NO = ASPARTNO
               AND B.REVISION = ANREVISION
               AND A.MANDATORY = 'Y'
               AND A.SECTION_ID = B.SECTION_ID
               AND A.SUB_SECTION_ID = B.SUB_SECTION_ID
               AND B.TYPE = IAPICONSTANT.SECTIONTYPE_PROPERTYGROUP
               AND A.PROPERTY_GROUP = B.REF_ID
               AND B.MANDATORY = 'Y';

         INSERT INTO SPECIFICATION_PROP
                     ( PART_NO,
                       REVISION,
                       SECTION_ID,
                       SUB_SECTION_ID,
                       SECTION_REV,
                       SUB_SECTION_REV,
                       PROPERTY_GROUP,
                       PROPERTY,
                       ATTRIBUTE,
                       UOM_ID,
                       PROPERTY_GROUP_REV,
                       PROPERTY_REV,
                       ATTRIBUTE_REV,
                       UOM_REV,
                       TEST_METHOD,
                       TEST_METHOD_REV,
                       SEQUENCE_NO,
                       CHARACTERISTIC,
                       CHARACTERISTIC_REV,
                       ASSOCIATION,
                       ASSOCIATION_REV,
                       INTL,
                       NUM_1,
                       NUM_2,
                       NUM_3,
                       NUM_4,
                       NUM_5,
                       NUM_6,
                       NUM_7,
                       NUM_8,
                       NUM_9,
                       NUM_10,
                       CHAR_1,
                       CHAR_2,
                       CHAR_3,
                       CHAR_4,
                       CHAR_5,
                       CHAR_6,
                       BOOLEAN_1,
                       BOOLEAN_2,
                       BOOLEAN_3,
                       BOOLEAN_4,
                       DATE_1,
                       DATE_2,
                       CH_2,
                       CH_REV_2,
                       CH_3,
                       CH_REV_3,
                       AS_2,
                       AS_REV_2,
                       AS_3,
                       AS_REV_3,
                       UOM_ALT_ID,
                       UOM_ALT_REV )
            SELECT ASPARTNO,
                   ANREVISION,
                   A.SECTION_ID,
                   A.SUB_SECTION_ID,
                   NVL( F_GET_SUB_REV( A.SECTION_ID,
                                       A.SECTION_REV,
                                       NULL,
                                       NULL,
                                       'SC' ),
                        0 ),
                   NVL( F_GET_SUB_REV( A.SUB_SECTION_ID,
                                       A.SUB_SECTION_REV,
                                       NULL,
                                       NULL,
                                       'SB' ),
                        0 ),
                   A.PROPERTY_GROUP,
                   A.PROPERTY,
                   A.ATTRIBUTE,
                   A.UOM_ID,
                   NVL( F_GET_SUB_REV( A.PROPERTY_GROUP,
                                       A.PROPERTY_GROUP_REV,
                                       NULL,
                                       NULL,
                                       'PG' ),
                        0 ),
                   NVL( F_GET_SUB_REV( A.PROPERTY,
                                       A.PROPERTY_REV,
                                       NULL,
                                       NULL,
                                       'SP' ),
                        0 ),
                   NVL( F_GET_SUB_REV( A.ATTRIBUTE,
                                       A.ATTRIBUTE_REV,
                                       NULL,
                                       NULL,
                                       'AT' ),
                        0 ),
                   NVL( F_GET_SUB_REV( A.UOM_ID,
                                       A.UOM_REV,
                                       NULL,
                                       NULL,
                                       'UO' ),
                        0 ),
                   A.TEST_METHOD,
                   NVL( F_GET_SUB_REV( A.TEST_METHOD,
                                       A.TEST_METHOD_REV,
                                       NULL,
                                       NULL,
                                       'TM' ),
                        0 ),
                   A.SEQUENCE_NO,
                   A.CHARACTERISTIC,
                   NVL( F_GET_SUB_REV( A.CHARACTERISTIC,
                                       A.CHARACTERISTIC_REV,
                                       NULL,
                                       NULL,
                                       'CH' ),
                        0 ),
                   A.ASSOCIATION,
                   NVL( F_GET_SUB_REV( A.ASSOCIATION,
                                       A.ASSOCIATION_REV,
                                       NULL,
                                       NULL,
                                       'AS' ),
                        0 ),
                   A.INTL,
                   NUM_1,
                   NUM_2,
                   NUM_3,
                   NUM_4,
                   NUM_5,
                   NUM_6,
                   NUM_7,
                   NUM_8,
                   NUM_9,
                   NUM_10,
                   CHAR_1,
                   CHAR_2,
                   CHAR_3,
                   CHAR_4,
                   CHAR_5,
                   CHAR_6,
                   BOOLEAN_1,
                   BOOLEAN_2,
                   BOOLEAN_3,
                   BOOLEAN_4,
                   DATE_1,
                   DATE_2,
                   CH_2,
                   NVL( F_GET_SUB_REV( A.CH_2,
                                       A.CH_REV_2,
                                       NULL,
                                       NULL,
                                       'CH' ),
                        0 ),
                   CH_3,
                   NVL( F_GET_SUB_REV( A.CH_3,
                                       A.CH_REV_3,
                                       NULL,
                                       NULL,
                                       'CH' ),
                        0 ),
                   AS_2,
                   NVL( F_GET_SUB_REV( A.AS_2,
                                       A.AS_REV_2,
                                       NULL,
                                       NULL,
                                       'AS' ),
                        0 ),
                   AS_3,
                   NVL( F_GET_SUB_REV( A.AS_3,
                                       A.AS_REV_3,
                                       NULL,
                                       NULL,
                                       'AS' ),
                        0 ),
                   UOM_ALT_ID,
                   NVL( F_GET_SUB_REV( A.UOM_ALT_ID,
                                       A.UOM_ALT_REV,
                                       NULL,
                                       NULL,
                                       'UO' ),
                        0 )
              FROM FRAME_PROP A,
                   SPECIFICATION_SECTION B
             WHERE A.FRAME_NO = LSFRAMENO
               AND A.REVISION = LNFRAMEREVISION
               AND A.OWNER = ANFRAMEOWNER
               AND B.PART_NO = ASPARTNO
               AND B.REVISION = ANREVISION
               AND A.MANDATORY = 'Y'
               AND A.SECTION_ID = B.SECTION_ID
               AND A.SUB_SECTION_ID = B.SUB_SECTION_ID
               AND B.TYPE = IAPICONSTANT.SECTIONTYPE_SINGLEPROPERTY
               AND A.PROPERTY_GROUP = 0
               AND A.PROPERTY = B.REF_ID
               AND B.MANDATORY = 'Y';

         
         INSERT INTO SPECIFICATION_PROP
                     ( PART_NO,
                       REVISION,
                       SECTION_ID,
                       SUB_SECTION_ID,
                       SECTION_REV,
                       SUB_SECTION_REV,
                       PROPERTY_GROUP,
                       PROPERTY,
                       ATTRIBUTE,
                       UOM_ID,
                       PROPERTY_GROUP_REV,
                       PROPERTY_REV,
                       ATTRIBUTE_REV,
                       UOM_REV,
                       TEST_METHOD,
                       TEST_METHOD_REV,
                       SEQUENCE_NO,
                       CHARACTERISTIC,
                       CHARACTERISTIC_REV,
                       ASSOCIATION,
                       ASSOCIATION_REV,
                       INTL,
                       NUM_1,
                       NUM_2,
                       NUM_3,
                       NUM_4,
                       NUM_5,
                       NUM_6,
                       NUM_7,
                       NUM_8,
                       NUM_9,
                       NUM_10,
                       CHAR_1,
                       CHAR_2,
                       CHAR_3,
                       CHAR_4,
                       CHAR_5,
                       CHAR_6,
                       BOOLEAN_1,
                       BOOLEAN_2,
                       BOOLEAN_3,
                       BOOLEAN_4,
                       DATE_1,
                       DATE_2,
                       CH_2,
                       CH_REV_2,
                       CH_3,
                       CH_REV_3,
                       AS_2,
                       AS_REV_2,
                       AS_3,
                       AS_REV_3,
                       UOM_ALT_ID,
                       UOM_ALT_REV )
            SELECT ASPARTNO,
                   ANREVISION,
                   A.SECTION_ID,
                   A.SUB_SECTION_ID,
                   NVL( F_GET_SUB_REV( A.SECTION_ID,
                                       SP.SECTION_REV,
                                       NULL,
                                       NULL,
                                       'SC' ),
                        0 ),
                   NVL( F_GET_SUB_REV( A.SUB_SECTION_ID,
                                       SP.SUB_SECTION_REV,
                                       NULL,
                                       NULL,
                                       'SB' ),
                        0 ),
                   A.PROPERTY_GROUP,
                   A.PROPERTY,
                   A.ATTRIBUTE,
                   SP.UOM_ID,
                   NVL( F_GET_SUB_REV( A.PROPERTY_GROUP,
                                       SP.PROPERTY_GROUP_REV,
                                       NULL,
                                       NULL,
                                       'PG' ),
                        0 ),
                   NVL( F_GET_SUB_REV( A.PROPERTY,
                                       SP.PROPERTY_REV,
                                       NULL,
                                       NULL,
                                       'SP' ),
                        0 ),
                   NVL( F_GET_SUB_REV( A.ATTRIBUTE,
                                       SP.ATTRIBUTE_REV,
                                       NULL,
                                       NULL,
                                       'AT' ),
                        0 ),
                   NVL( F_GET_SUB_REV( UOM_ID,
                                       UOM_REV,
                                       NULL,
                                       NULL,
                                       'UO' ),
                        0 ),
                   TEST_METHOD,
                   NVL( F_GET_SUB_REV( TEST_METHOD,
                                       TEST_METHOD_REV,
                                       NULL,
                                       NULL,
                                       'TM' ),
                        0 ),
                   SEQUENCE_NO,
                   CHARACTERISTIC,
                   NVL( F_GET_SUB_REV( CHARACTERISTIC,
                                       CHARACTERISTIC_REV,
                                       NULL,
                                       NULL,
                                       'CH' ),
                        0 ),
                   ASSOCIATION,
                   NVL( F_GET_SUB_REV( ASSOCIATION,
                                       ASSOCIATION_REV,
                                       NULL,
                                       NULL,
                                       'AS' ),
                        0 ),
                   SP.INTL,
                   NUM_1,
                   NUM_2,
                   NUM_3,
                   NUM_4,
                   NUM_5,
                   NUM_6,
                   NUM_7,
                   NUM_8,
                   NUM_9,
                   NUM_10,
                   CHAR_1,
                   CHAR_2,
                   CHAR_3,
                   CHAR_4,
                   CHAR_5,
                   CHAR_6,
                   BOOLEAN_1,
                   BOOLEAN_2,
                   BOOLEAN_3,
                   BOOLEAN_4,
                   DATE_1,
                   DATE_2,
                   CH_2,
                   NVL( F_GET_SUB_REV( CH_2,
                                       CH_REV_2,
                                       NULL,
                                       NULL,
                                       'CH' ),
                        0 ),
                   CH_3,
                   NVL( F_GET_SUB_REV( CH_3,
                                       CH_REV_3,
                                       NULL,
                                       NULL,
                                       'CH' ),
                        0 ),
                   AS_2,
                   NVL( F_GET_SUB_REV( AS_2,
                                       AS_REV_2,
                                       NULL,
                                       NULL,
                                       'AS' ),
                        0 ),
                   AS_3,
                   NVL( F_GET_SUB_REV( AS_3,
                                       AS_REV_3,
                                       NULL,
                                       NULL,
                                       'AS' ),
                        0 ),
                   UOM_ALT_ID,
                   NVL( F_GET_SUB_REV( UOM_ALT_ID,
                                       UOM_ALT_REV,
                                       NULL,
                                       NULL,
                                       'UO' ),
                        0 )
              FROM ITFRMVPG A,
                   ITFRMVSC B,
                   FRAME_PROP SP
             WHERE A.VIEW_ID = LNVIEW
               AND A.VIEW_ID = B.VIEW_ID
               AND A.FRAME_NO = LSFRAMENO
               AND A.REVISION = LNFRAMEREVISION
               AND A.OWNER = ANFRAMEOWNER
               AND A.FRAME_NO = B.FRAME_NO
               AND A.REVISION = B.REVISION
               AND A.OWNER = B.OWNER
               AND A.MANDATORY = 'Y'
               AND A.SECTION_ID = B.SECTION_ID
               AND A.SUB_SECTION_ID = B.SUB_SECTION_ID
               AND B.TYPE = IAPICONSTANT.SECTIONTYPE_PROPERTYGROUP
               AND A.PROPERTY_GROUP = B.REF_ID
               AND B.MANDATORY = 'Y'
               AND SP.FRAME_NO = A.FRAME_NO
               AND SP.REVISION = A.REVISION
               AND SP.OWNER = A.OWNER
               AND SP.SECTION_ID = A.SECTION_ID
               AND SP.SUB_SECTION_ID = A.SUB_SECTION_ID
               AND SP.PROPERTY_GROUP = A.PROPERTY_GROUP
               AND SP.PROPERTY = A.PROPERTY
               AND SP.ATTRIBUTE = A.ATTRIBUTE;

              
              
              DELETE FROM SPECIFICATION_PROP
              WHERE PART_NO = ASPARTNO
              AND REVISION = ANREVISION
              AND (SECTION_ID, SUB_SECTION_ID, PROPERTY_GROUP, PROPERTY, ATTRIBUTE) IN
              ( SELECT A.SECTION_ID, A.SUB_SECTION_ID, A.PROPERTY_GROUP, A.PROPERTY, A.ATTRIBUTE
                  FROM ITFRMVPG A,
                       ITFRMVSC B,
                       FRAME_PROP SP
                 WHERE A.VIEW_ID = LNVIEW
                   AND A.VIEW_ID = B.VIEW_ID
                   AND A.FRAME_NO = LSFRAMENO
                   AND A.REVISION = LNFRAMEREVISION
                   AND A.OWNER = ANFRAMEOWNER
                   AND A.FRAME_NO = B.FRAME_NO
                   AND A.REVISION = B.REVISION
                   AND A.OWNER = B.OWNER
                   AND A.MANDATORY = 'H'
                   AND A.SECTION_ID = B.SECTION_ID
                   AND A.SUB_SECTION_ID = B.SUB_SECTION_ID
                   AND B.TYPE = IAPICONSTANT.SECTIONTYPE_PROPERTYGROUP
                   AND A.PROPERTY_GROUP = B.REF_ID
                   
                   AND SP.FRAME_NO = A.FRAME_NO
                   AND SP.REVISION = A.REVISION
                   AND SP.OWNER = A.OWNER
                   AND SP.SECTION_ID = A.SECTION_ID
                   AND SP.SUB_SECTION_ID = A.SUB_SECTION_ID
                   AND SP.PROPERTY_GROUP = A.PROPERTY_GROUP
                   AND SP.PROPERTY = A.PROPERTY
                   AND SP.ATTRIBUTE = A.ATTRIBUTE);
               

         INSERT INTO SPECIFICATION_PROP
                     ( PART_NO,
                       REVISION,
                       SECTION_ID,
                       SUB_SECTION_ID,
                       SECTION_REV,
                       SUB_SECTION_REV,
                       PROPERTY_GROUP,
                       PROPERTY,
                       ATTRIBUTE,
                       UOM_ID,
                       PROPERTY_GROUP_REV,
                       PROPERTY_REV,
                       ATTRIBUTE_REV,
                       UOM_REV,
                       TEST_METHOD,
                       TEST_METHOD_REV,
                       SEQUENCE_NO,
                       CHARACTERISTIC,
                       CHARACTERISTIC_REV,
                       ASSOCIATION,
                       ASSOCIATION_REV,
                       INTL,
                       NUM_1,
                       NUM_2,
                       NUM_3,
                       NUM_4,
                       NUM_5,
                       NUM_6,
                       NUM_7,
                       NUM_8,
                       NUM_9,
                       NUM_10,
                       CHAR_1,
                       CHAR_2,
                       CHAR_3,
                       CHAR_4,
                       CHAR_5,
                       CHAR_6,
                       BOOLEAN_1,
                       BOOLEAN_2,
                       BOOLEAN_3,
                       BOOLEAN_4,
                       DATE_1,
                       DATE_2,
                       CH_2,
                       CH_REV_2,
                       CH_3,
                       CH_REV_3,
                       AS_2,
                       AS_REV_2,
                       AS_3,
                       AS_REV_3,
                       UOM_ALT_ID,
                       UOM_ALT_REV )
            SELECT ASPARTNO,
                   ANREVISION,
                   A.SECTION_ID,
                   A.SUB_SECTION_ID,
                   NVL( F_GET_SUB_REV( A.SECTION_ID,
                                       SP.SECTION_REV,
                                       NULL,
                                       NULL,
                                       'SC' ),
                        0 ),
                   NVL( F_GET_SUB_REV( A.SUB_SECTION_ID,
                                       SP.SUB_SECTION_REV,
                                       NULL,
                                       NULL,
                                       'SB' ),
                        0 ),
                   A.PROPERTY_GROUP,
                   A.PROPERTY,
                   A.ATTRIBUTE,
                   SP.UOM_ID,
                   NVL( F_GET_SUB_REV( A.PROPERTY_GROUP,
                                       SP.PROPERTY_GROUP_REV,
                                       NULL,
                                       NULL,
                                       'PG' ),
                        0 ),
                   NVL( F_GET_SUB_REV( A.PROPERTY,
                                       SP.PROPERTY_REV,
                                       NULL,
                                       NULL,
                                       'SP' ),
                        0 ),
                   NVL( F_GET_SUB_REV( A.ATTRIBUTE,
                                       SP.ATTRIBUTE_REV,
                                       NULL,
                                       NULL,
                                       'AT' ),
                        0 ),
                   NVL( F_GET_SUB_REV( UOM_ID,
                                       UOM_REV,
                                       NULL,
                                       NULL,
                                       'UO' ),
                        0 ),
                   TEST_METHOD,
                   NVL( F_GET_SUB_REV( TEST_METHOD,
                                       TEST_METHOD_REV,
                                       NULL,
                                       NULL,
                                       'TM' ),
                        0 ),
                   SP.SEQUENCE_NO,
                   SP.CHARACTERISTIC,
                   NVL( F_GET_SUB_REV( SP.CHARACTERISTIC,
                                       SP.CHARACTERISTIC_REV,
                                       NULL,
                                       NULL,
                                       'CH' ),
                        0 ),
                   SP.ASSOCIATION,
                   NVL( F_GET_SUB_REV( SP.ASSOCIATION,
                                       SP.ASSOCIATION_REV,
                                       NULL,
                                       NULL,
                                       'AS' ),
                        0 ),
                   SP.INTL,
                   NUM_1,
                   NUM_2,
                   NUM_3,
                   NUM_4,
                   NUM_5,
                   NUM_6,
                   NUM_7,
                   NUM_8,
                   NUM_9,
                   NUM_10,
                   CHAR_1,
                   CHAR_2,
                   CHAR_3,
                   CHAR_4,
                   CHAR_5,
                   CHAR_6,
                   BOOLEAN_1,
                   BOOLEAN_2,
                   BOOLEAN_3,
                   BOOLEAN_4,
                   DATE_1,
                   DATE_2,
                   CH_2,
                   NVL( F_GET_SUB_REV( CH_2,
                                       CH_REV_2,
                                       NULL,
                                       NULL,
                                       'CH' ),
                        0 ),
                   CH_3,
                   NVL( F_GET_SUB_REV( CH_3,
                                       CH_REV_3,
                                       NULL,
                                       NULL,
                                       'CH' ),
                        0 ),
                   AS_2,
                   NVL( F_GET_SUB_REV( AS_2,
                                       AS_REV_2,
                                       NULL,
                                       NULL,
                                       'AS' ),
                        0 ),
                   AS_3,
                   NVL( F_GET_SUB_REV( AS_3,
                                       AS_REV_3,
                                       NULL,
                                       NULL,
                                       'AS' ),
                        0 ),
                   UOM_ALT_ID,
                   NVL( F_GET_SUB_REV( UOM_ALT_ID,
                                       UOM_ALT_REV,
                                       NULL,
                                       NULL,
                                       'UO' ),
                        0 )
              FROM ITFRMVPG A,
                   FRAME_SECTION B,
                   FRAME_PROP SP
             WHERE A.VIEW_ID = LNVIEW
               AND A.FRAME_NO = LSFRAMENO
               AND A.REVISION = LNFRAMEREVISION
               AND A.OWNER = ANFRAMEOWNER
               AND A.FRAME_NO = B.FRAME_NO
               AND A.REVISION = B.REVISION
               AND A.OWNER = B.OWNER
               AND A.MANDATORY = 'Y'
               AND A.SECTION_ID = B.SECTION_ID
               AND A.SUB_SECTION_ID = B.SUB_SECTION_ID
               AND B.TYPE = IAPICONSTANT.SECTIONTYPE_PROPERTYGROUP
               AND A.PROPERTY_GROUP = B.REF_ID
               AND B.MANDATORY = 'Y'
               AND SP.FRAME_NO = A.FRAME_NO
               AND SP.REVISION = A.REVISION
               AND SP.OWNER = A.OWNER
               AND SP.SECTION_ID = A.SECTION_ID
               AND SP.SUB_SECTION_ID = A.SUB_SECTION_ID
               AND SP.PROPERTY_GROUP = A.PROPERTY_GROUP
               AND SP.PROPERTY = A.PROPERTY
               AND SP.ATTRIBUTE = A.ATTRIBUTE;

              
              
              DELETE FROM SPECIFICATION_PROP
              WHERE PART_NO = ASPARTNO
              AND REVISION = ANREVISION
              AND (SECTION_ID, SUB_SECTION_ID, PROPERTY_GROUP, PROPERTY, ATTRIBUTE) IN
              ( SELECT A.SECTION_ID, A.SUB_SECTION_ID, A.PROPERTY_GROUP, A.PROPERTY, A.ATTRIBUTE
                  FROM ITFRMVPG A,
                       FRAME_SECTION B,
                       FRAME_PROP SP
                 WHERE A.VIEW_ID = LNVIEW
                   AND A.FRAME_NO = LSFRAMENO
                   AND A.REVISION = LNFRAMEREVISION
                   AND A.OWNER = ANFRAMEOWNER
                   AND A.FRAME_NO = B.FRAME_NO
                   AND A.REVISION = B.REVISION
                   AND A.OWNER = B.OWNER
                   AND A.MANDATORY = 'H'
                   AND A.SECTION_ID = B.SECTION_ID
                   AND A.SUB_SECTION_ID = B.SUB_SECTION_ID
                   AND B.TYPE = IAPICONSTANT.SECTIONTYPE_PROPERTYGROUP
                   AND A.PROPERTY_GROUP = B.REF_ID
                   
                   AND SP.FRAME_NO = A.FRAME_NO
                   AND SP.REVISION = A.REVISION
                   AND SP.OWNER = A.OWNER
                   AND SP.SECTION_ID = A.SECTION_ID
                   AND SP.SUB_SECTION_ID = A.SUB_SECTION_ID
                   AND SP.PROPERTY_GROUP = A.PROPERTY_GROUP
                   AND SP.PROPERTY = A.PROPERTY
                   AND SP.ATTRIBUTE = A.ATTRIBUTE);
            

         INSERT INTO SPECIFICATION_PROP
                     ( PART_NO,
                       REVISION,
                       SECTION_ID,
                       SUB_SECTION_ID,
                       SECTION_REV,
                       SUB_SECTION_REV,
                       PROPERTY_GROUP,
                       PROPERTY,
                       ATTRIBUTE,
                       UOM_ID,
                       PROPERTY_GROUP_REV,
                       PROPERTY_REV,
                       ATTRIBUTE_REV,
                       UOM_REV,
                       TEST_METHOD,
                       TEST_METHOD_REV,
                       SEQUENCE_NO,
                       CHARACTERISTIC,
                       CHARACTERISTIC_REV,
                       ASSOCIATION,
                       ASSOCIATION_REV,
                       INTL,
                       NUM_1,
                       NUM_2,
                       NUM_3,
                       NUM_4,
                       NUM_5,
                       NUM_6,
                       NUM_7,
                       NUM_8,
                       NUM_9,
                       NUM_10,
                       CHAR_1,
                       CHAR_2,
                       CHAR_3,
                       CHAR_4,
                       CHAR_5,
                       CHAR_6,
                       BOOLEAN_1,
                       BOOLEAN_2,
                       BOOLEAN_3,
                       BOOLEAN_4,
                       DATE_1,
                       DATE_2,
                       CH_2,
                       CH_REV_2,
                       CH_3,
                       CH_REV_3,
                       AS_2,
                       AS_REV_2,
                       AS_3,
                       AS_REV_3,
                       UOM_ALT_ID,
                       UOM_ALT_REV )
            SELECT ASPARTNO,
                   ANREVISION,
                   A.SECTION_ID,
                   A.SUB_SECTION_ID,
                   NVL( F_GET_SUB_REV( A.SECTION_ID,
                                       SP.SECTION_REV,
                                       NULL,
                                       NULL,
                                       'SC' ),
                        0 ),
                   NVL( F_GET_SUB_REV( A.SUB_SECTION_ID,
                                       SP.SUB_SECTION_REV,
                                       NULL,
                                       NULL,
                                       'SB' ),
                        0 ),
                   A.PROPERTY_GROUP,
                   A.PROPERTY,
                   A.ATTRIBUTE,
                   SP.UOM_ID,
                   NVL( F_GET_SUB_REV( A.PROPERTY_GROUP,
                                       SP.PROPERTY_GROUP_REV,
                                       NULL,
                                       NULL,
                                       'PG' ),
                        0 ),
                   NVL( F_GET_SUB_REV( A.PROPERTY,
                                       SP.PROPERTY_REV,
                                       NULL,
                                       NULL,
                                       'SP' ),
                        0 ),
                   NVL( F_GET_SUB_REV( A.ATTRIBUTE,
                                       SP.ATTRIBUTE_REV,
                                       NULL,
                                       NULL,
                                       'AT' ),
                        0 ),
                   NVL( F_GET_SUB_REV( UOM_ID,
                                       UOM_REV,
                                       NULL,
                                       NULL,
                                       'UO' ),
                        0 ),
                   TEST_METHOD,
                   NVL( F_GET_SUB_REV( TEST_METHOD,
                                       TEST_METHOD_REV,
                                       NULL,
                                       NULL,
                                       'TM' ),
                        0 ),
                   SEQUENCE_NO,
                   CHARACTERISTIC,
                   NVL( F_GET_SUB_REV( CHARACTERISTIC,
                                       CHARACTERISTIC_REV,
                                       NULL,
                                       NULL,
                                       'CH' ),
                        0 ),
                   ASSOCIATION,
                   NVL( F_GET_SUB_REV( ASSOCIATION,
                                       ASSOCIATION_REV,
                                       NULL,
                                       NULL,
                                       'AS' ),
                        0 ),
                   SP.INTL,
                   NUM_1,
                   NUM_2,
                   NUM_3,
                   NUM_4,
                   NUM_5,
                   NUM_6,
                   NUM_7,
                   NUM_8,
                   NUM_9,
                   NUM_10,
                   CHAR_1,
                   CHAR_2,
                   CHAR_3,
                   CHAR_4,
                   CHAR_5,
                   CHAR_6,
                   BOOLEAN_1,
                   BOOLEAN_2,
                   BOOLEAN_3,
                   BOOLEAN_4,
                   DATE_1,
                   DATE_2,
                   CH_2,
                   NVL( F_GET_SUB_REV( CH_2,
                                       CH_REV_2,
                                       NULL,
                                       NULL,
                                       'CH' ),
                        0 ),
                   CH_3,
                   NVL( F_GET_SUB_REV( CH_3,
                                       CH_REV_3,
                                       NULL,
                                       NULL,
                                       'CH' ),
                        0 ),
                   AS_2,
                   NVL( F_GET_SUB_REV( AS_2,
                                       AS_REV_2,
                                       NULL,
                                       NULL,
                                       'AS' ),
                        0 ),
                   AS_3,
                   NVL( F_GET_SUB_REV( AS_3,
                                       AS_REV_3,
                                       NULL,
                                       NULL,
                                       'AS' ),
                        0 ),
                   UOM_ALT_ID,
                   NVL( F_GET_SUB_REV( UOM_ALT_ID,
                                       UOM_ALT_REV,
                                       NULL,
                                       NULL,
                                       'UO' ),
                        0 )
              FROM ITFRMVPG A,
                   ITFRMVSC B,
                   FRAME_PROP SP
             WHERE A.VIEW_ID = LNVIEW
               AND A.VIEW_ID = B.VIEW_ID
               AND A.FRAME_NO = LSFRAMENO
               AND A.REVISION = LNFRAMEREVISION
               AND A.OWNER = ANFRAMEOWNER
               AND A.FRAME_NO = B.FRAME_NO
               AND A.REVISION = B.REVISION
               AND A.OWNER = B.OWNER
               AND A.MANDATORY = 'Y'
               AND A.SECTION_ID = B.SECTION_ID
               AND A.SUB_SECTION_ID = B.SUB_SECTION_ID
               AND B.TYPE = IAPICONSTANT.SECTIONTYPE_SINGLEPROPERTY
               AND A.PROPERTY_GROUP = 0
               AND A.PROPERTY = B.REF_ID
               AND B.MANDATORY = 'Y'
               AND SP.FRAME_NO = A.FRAME_NO
               AND SP.REVISION = A.REVISION
               AND SP.OWNER = A.OWNER
               AND SP.SECTION_ID = A.SECTION_ID
               AND SP.SUB_SECTION_ID = A.SUB_SECTION_ID
               AND SP.PROPERTY_GROUP = A.PROPERTY_GROUP
               AND SP.PROPERTY = A.PROPERTY
               AND SP.ATTRIBUTE = A.ATTRIBUTE;

              
              
              DELETE FROM SPECIFICATION_PROP
              WHERE PART_NO = ASPARTNO
              AND REVISION = ANREVISION
              AND (SECTION_ID, SUB_SECTION_ID, PROPERTY_GROUP, PROPERTY, ATTRIBUTE) IN
              ( SELECT A.SECTION_ID, A.SUB_SECTION_ID, A.PROPERTY_GROUP, A.PROPERTY, A.ATTRIBUTE
                  FROM ITFRMVPG A,
                       ITFRMVSC B,
                       FRAME_PROP SP
                 WHERE A.VIEW_ID = LNVIEW
                   AND A.VIEW_ID = B.VIEW_ID
                   AND A.FRAME_NO = LSFRAMENO
                   AND A.REVISION = LNFRAMEREVISION
                   AND A.OWNER = ANFRAMEOWNER
                   AND A.FRAME_NO = B.FRAME_NO
                   AND A.REVISION = B.REVISION
                   AND A.OWNER = B.OWNER
                   AND A.MANDATORY = 'H'
                   AND A.SECTION_ID = B.SECTION_ID
                   AND A.SUB_SECTION_ID = B.SUB_SECTION_ID
                   AND B.TYPE = IAPICONSTANT.SECTIONTYPE_SINGLEPROPERTY
                   AND A.PROPERTY_GROUP = 0
                   AND A.PROPERTY = B.REF_ID
                   
                   AND SP.FRAME_NO = A.FRAME_NO
                   AND SP.REVISION = A.REVISION
                   AND SP.OWNER = A.OWNER
                   AND SP.SECTION_ID = A.SECTION_ID
                   AND SP.SUB_SECTION_ID = A.SUB_SECTION_ID
                   AND SP.PROPERTY_GROUP = A.PROPERTY_GROUP
                   AND SP.PROPERTY = A.PROPERTY
                   AND SP.ATTRIBUTE = A.ATTRIBUTE);
              

         INSERT INTO SPECIFICATION_PROP
                     ( PART_NO,
                       REVISION,
                       SECTION_ID,
                       SUB_SECTION_ID,
                       SECTION_REV,
                       SUB_SECTION_REV,
                       PROPERTY_GROUP,
                       PROPERTY,
                       ATTRIBUTE,
                       UOM_ID,
                       PROPERTY_GROUP_REV,
                       PROPERTY_REV,
                       ATTRIBUTE_REV,
                       UOM_REV,
                       TEST_METHOD,
                       TEST_METHOD_REV,
                       SEQUENCE_NO,
                       CHARACTERISTIC,
                       CHARACTERISTIC_REV,
                       ASSOCIATION,
                       ASSOCIATION_REV,
                       INTL,
                       NUM_1,
                       NUM_2,
                       NUM_3,
                       NUM_4,
                       NUM_5,
                       NUM_6,
                       NUM_7,
                       NUM_8,
                       NUM_9,
                       NUM_10,
                       CHAR_1,
                       CHAR_2,
                       CHAR_3,
                       CHAR_4,
                       CHAR_5,
                       CHAR_6,
                       BOOLEAN_1,
                       BOOLEAN_2,
                       BOOLEAN_3,
                       BOOLEAN_4,
                       DATE_1,
                       DATE_2,
                       CH_2,
                       CH_REV_2,
                       CH_3,
                       CH_REV_3,
                       AS_2,
                       AS_REV_2,
                       AS_3,
                       AS_REV_3,
                       UOM_ALT_ID,
                       UOM_ALT_REV )
            SELECT ASPARTNO,
                   ANREVISION,
                   A.SECTION_ID,
                   A.SUB_SECTION_ID,
                   NVL( F_GET_SUB_REV( A.SECTION_ID,
                                       SP.SECTION_REV,
                                       NULL,
                                       NULL,
                                       'SC' ),
                        0 ),
                   NVL( F_GET_SUB_REV( A.SUB_SECTION_ID,
                                       SP.SUB_SECTION_REV,
                                       NULL,
                                       NULL,
                                       'SB' ),
                        0 ),
                   A.PROPERTY_GROUP,
                   A.PROPERTY,
                   A.ATTRIBUTE,
                   SP.UOM_ID,
                   NVL( F_GET_SUB_REV( A.PROPERTY_GROUP,
                                       SP.PROPERTY_GROUP_REV,
                                       NULL,
                                       NULL,
                                       'PG' ),
                        0 ),
                   NVL( F_GET_SUB_REV( A.PROPERTY,
                                       SP.PROPERTY_REV,
                                       NULL,
                                       NULL,
                                       'SP' ),
                        0 ),
                   NVL( F_GET_SUB_REV( A.ATTRIBUTE,
                                       SP.ATTRIBUTE_REV,
                                       NULL,
                                       NULL,
                                       'AT' ),
                        0 ),
                   NVL( F_GET_SUB_REV( UOM_ID,
                                       UOM_REV,
                                       NULL,
                                       NULL,
                                       'UO' ),
                        0 ),
                   TEST_METHOD,
                   NVL( F_GET_SUB_REV( TEST_METHOD,
                                       TEST_METHOD_REV,
                                       NULL,
                                       NULL,
                                       'TM' ),
                        0 ),
                   SP.SEQUENCE_NO,
                   SP.CHARACTERISTIC,
                   NVL( F_GET_SUB_REV( SP.CHARACTERISTIC,
                                       SP.CHARACTERISTIC_REV,
                                       NULL,
                                       NULL,
                                       'CH' ),
                        0 ),
                   SP.ASSOCIATION,
                   NVL( F_GET_SUB_REV( SP.ASSOCIATION,
                                       SP.ASSOCIATION_REV,
                                       NULL,
                                       NULL,
                                       'AS' ),
                        0 ),
                   SP.INTL,
                   NUM_1,
                   NUM_2,
                   NUM_3,
                   NUM_4,
                   NUM_5,
                   NUM_6,
                   NUM_7,
                   NUM_8,
                   NUM_9,
                   NUM_10,
                   CHAR_1,
                   CHAR_2,
                   CHAR_3,
                   CHAR_4,
                   CHAR_5,
                   CHAR_6,
                   BOOLEAN_1,
                   BOOLEAN_2,
                   BOOLEAN_3,
                   BOOLEAN_4,
                   DATE_1,
                   DATE_2,
                   CH_2,
                   NVL( F_GET_SUB_REV( CH_2,
                                       CH_REV_2,
                                       NULL,
                                       NULL,
                                       'CH' ),
                        0 ),
                   CH_3,
                   NVL( F_GET_SUB_REV( CH_3,
                                       CH_REV_3,
                                       NULL,
                                       NULL,
                                       'CH' ),
                        0 ),
                   AS_2,
                   NVL( F_GET_SUB_REV( AS_2,
                                       AS_REV_2,
                                       NULL,
                                       NULL,
                                       'AS' ),
                        0 ),
                   AS_3,
                   NVL( F_GET_SUB_REV( AS_3,
                                       AS_REV_3,
                                       NULL,
                                       NULL,
                                       'AS' ),
                        0 ),
                   UOM_ALT_ID,
                   NVL( F_GET_SUB_REV( UOM_ALT_ID,
                                       UOM_ALT_REV,
                                       NULL,
                                       NULL,
                                       'UO' ),
                        0 )
              FROM ITFRMVPG A,
                   FRAME_SECTION B,
                   FRAME_PROP SP
             WHERE A.VIEW_ID = LNVIEW
               AND A.FRAME_NO = LSFRAMENO
               AND A.REVISION = LNFRAMEREVISION
               AND A.OWNER = ANFRAMEOWNER
               AND A.FRAME_NO = B.FRAME_NO
               AND A.REVISION = B.REVISION
               AND A.OWNER = B.OWNER
               AND A.MANDATORY = 'Y'
               AND A.SECTION_ID = B.SECTION_ID
               AND A.SUB_SECTION_ID = B.SUB_SECTION_ID
               AND B.TYPE = IAPICONSTANT.SECTIONTYPE_SINGLEPROPERTY
               AND A.PROPERTY_GROUP = 0
               AND A.PROPERTY = B.REF_ID
               AND B.MANDATORY = 'Y'
               AND SP.FRAME_NO = A.FRAME_NO
               AND SP.REVISION = A.REVISION
               AND SP.OWNER = A.OWNER
               AND SP.SECTION_ID = A.SECTION_ID
               AND SP.SUB_SECTION_ID = A.SUB_SECTION_ID
               AND SP.PROPERTY_GROUP = A.PROPERTY_GROUP
               AND SP.PROPERTY = A.PROPERTY
               AND SP.ATTRIBUTE = A.ATTRIBUTE;

              
              
              DELETE FROM SPECIFICATION_PROP
              WHERE PART_NO = ASPARTNO
              AND REVISION = ANREVISION
              AND (SECTION_ID, SUB_SECTION_ID, PROPERTY_GROUP, PROPERTY, ATTRIBUTE) IN
              ( SELECT A.SECTION_ID, A.SUB_SECTION_ID, A.PROPERTY_GROUP, A.PROPERTY, A.ATTRIBUTE
                 FROM ITFRMVPG A,
                      FRAME_SECTION B,
                      FRAME_PROP SP
                 WHERE A.VIEW_ID = LNVIEW
                   AND A.FRAME_NO = LSFRAMENO
                   AND A.REVISION = LNFRAMEREVISION
                   AND A.OWNER = ANFRAMEOWNER
                   AND A.FRAME_NO = B.FRAME_NO
                   AND A.REVISION = B.REVISION
                   AND A.OWNER = B.OWNER
                   AND A.MANDATORY = 'H'
                   AND A.SECTION_ID = B.SECTION_ID
                   AND A.SUB_SECTION_ID = B.SUB_SECTION_ID
                   AND B.TYPE = IAPICONSTANT.SECTIONTYPE_SINGLEPROPERTY
                   AND A.PROPERTY_GROUP = 0
                   AND A.PROPERTY = B.REF_ID
                   
                   AND SP.FRAME_NO = A.FRAME_NO
                   AND SP.REVISION = A.REVISION
                   AND SP.OWNER = A.OWNER
                   AND SP.SECTION_ID = A.SECTION_ID
                   AND SP.SUB_SECTION_ID = A.SUB_SECTION_ID
                   AND SP.PROPERTY_GROUP = A.PROPERTY_GROUP
                   AND SP.PROPERTY = A.PROPERTY
                   AND SP.ATTRIBUTE = A.ATTRIBUTE);
              

      EXCEPTION
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL );
      END;

      
      BEGIN
         INSERT INTO SPECIFICATION_KW
                     ( PART_NO,
                       KW_ID,
                       KW_VALUE,
                       INTL )
            SELECT ASPARTNO,
                   KW_ID,
                   KW_VALUE,
                   INTL
              FROM FRAME_KW
             WHERE FRAME_NO = LSFRAMENO
               AND OWNER = ANFRAMEOWNER
               AND ( ASPARTNO, KW_ID ) IN( SELECT ASPARTNO,
                                                  KW_ID
                                            FROM FRAME_KW
                                           WHERE FRAME_NO = LSFRAMENO
                                             AND OWNER = ANFRAMEOWNER
                                          MINUS
                                          SELECT ASPARTNO,
                                                 KW_ID
                                            FROM SPECIFICATION_KW
                                           WHERE PART_NO = ASPARTNO );
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            NULL;
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL );
      END;

      
      BEGIN
         SELECT C3.TYPE
           INTO LSFRAMETYPE
           FROM CLASS3 C3,
                FRAME_HEADER FH
          WHERE FH.CLASS3_ID = C3.CLASS
            AND FH.FRAME_NO = LSFRAMENO
            AND FH.REVISION = LNFRAMEREVISION
            AND FH.OWNER = ANFRAMEOWNER;

         SELECT C3.TYPE
           INTO LSSPECTYPE
           FROM CLASS3 C3,
                PART PRT
          WHERE PRT.PART_TYPE = C3.CLASS
            AND PRT.PART_NO = ASPARTNO;

         IF LSFRAMETYPE = LSSPECTYPE
         THEN
            


            









            NULL;
         END IF;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            NULL;
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL );
      END;

      
      BEGIN
         FOR R_INS_FT IN C_INS_FT
         LOOP
            INSERT INTO SPECIFICATION_TEXT
                        ( PART_NO,
                          REVISION,
                          SECTION_ID,
                          SECTION_REV,
                          SUB_SECTION_ID,
                          SUB_SECTION_REV,
                          TEXT_TYPE,
                          TEXT_TYPE_REV,
                          TEXT )
                 VALUES ( ASPARTNO,
                          ANREVISION,
                          R_INS_FT.SECTION_ID,
                          NVL( F_GET_SUB_REV( R_INS_FT.SECTION_ID,
                                              R_INS_FT.SECTION_REV,
                                              NULL,
                                              NULL,
                                              'SC' ),
                               0 ),
                          R_INS_FT.SUB_SECTION_ID,
                          NVL( F_GET_SUB_REV( R_INS_FT.SUB_SECTION_ID,
                                              R_INS_FT.SUB_SECTION_REV,
                                              NULL,
                                              NULL,
                                              'SB' ),
                               0 ),
                          R_INS_FT.TEXT_TYPE,
                          NVL( F_GET_SUB_REV( R_INS_FT.TEXT_TYPE,
                                              R_INS_FT.TEXT_TYPE_REV,
                                              NULL,
                                              NULL,
                                              'FT' ),
                               0 ),
                          R_INS_FT.TEXT );
         END LOOP;

         FOR R_INS_FT IN C_INS_FT_MASK( LNVIEW )
         LOOP
            INSERT INTO SPECIFICATION_TEXT
                        ( PART_NO,
                          REVISION,
                          SECTION_ID,
                          SECTION_REV,
                          SUB_SECTION_ID,
                          SUB_SECTION_REV,
                          TEXT_TYPE,
                          TEXT_TYPE_REV,
                          TEXT )
                 VALUES ( ASPARTNO,
                          ANREVISION,
                          R_INS_FT.SECTION_ID,
                          NVL( F_GET_SUB_REV( R_INS_FT.SECTION_ID,
                                              R_INS_FT.SECTION_REV,
                                              NULL,
                                              NULL,
                                              'SC' ),
                               0 ),
                          R_INS_FT.SUB_SECTION_ID,
                          NVL( F_GET_SUB_REV( R_INS_FT.SUB_SECTION_ID,
                                              R_INS_FT.SUB_SECTION_REV,
                                              NULL,
                                              NULL,
                                              'SB' ),
                               0 ),
                          R_INS_FT.TEXT_TYPE,
                          NVL( F_GET_SUB_REV( R_INS_FT.TEXT_TYPE,
                                              R_INS_FT.TEXT_TYPE_REV,
                                              NULL,
                                              NULL,
                                              'FT' ),
                               0 ),
                          R_INS_FT.TEXT );
         END LOOP;
      EXCEPTION
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL );
      END;

      

      LNVIEW := ANMASKID;
      LNRETVAL := CHECKREGIONALGLOBAL( ASPARTNO,
                                       ANREVISION,
                                       LNVIEW,
                                       LNALLOWVAL );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN LNRETVAL;
      END IF;

      UPDATE SPECIFICATION_HEADER
         SET MASK_ID = LNVIEW
       WHERE PART_NO = ASPARTNO
         AND REVISION = ANREVISION;

      IF LNALLOWVAL <> 0
      THEN
         BEGIN
            IF LNVIEW IS NULL
            THEN
               SELECT VAL_ID
                 INTO LNVALID
                 FROM ITFRMVAL
                WHERE FRAME_NO = LSFRAMENO
                  AND REVISION = LNFRAMEREVISION
                  AND OWNER = ANFRAMEOWNER
                  AND MASK_ID = -1;
            ELSE
               SELECT VAL_ID
                 INTO LNVALID
                 FROM ITFRMVAL
                WHERE FRAME_NO = LSFRAMENO
                  AND REVISION = LNFRAMEREVISION
                  AND OWNER = ANFRAMEOWNER
                  AND MASK_ID = LNVIEW;
            END IF;

            INSERT INTO ITSHVALD
                        ( PART_NO,
                          REVISION,
                          VAL_SEQ,
                          TYPE,
                          SECTION_ID,
                          SUB_SECTION_ID,
                          PROPERTY_GROUP,
                          PROPERTY,
                          ATTRIBUTE,
                          HEADER_ID,
                          REF_ID,
                          REF_OWNER )
               SELECT ASPARTNO,
                      ANREVISION,
                      VAL_SEQ,
                      TYPE,
                      SECTION_ID,
                      SUB_SECTION_ID,
                      PROPERTY_GROUP,
                      PROPERTY,
                      ATTRIBUTE,
                      HEADER_ID,
                      REF_ID,
                      REF_OWNER
                 FROM ITFRMVALD
                WHERE VAL_ID = LNVALID;














 

         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               
               NULL;
         END;
      END IF;

      
      LNRETVAL := IAPIPLANTPART.SETPLANTACCESS( ASPARTNO );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN LNRETVAL;
      END IF;

      
      DELETE      ITSCHS
            WHERE PART_NO = ASPARTNO
              AND REVISION = ANREVISION;

      
      BEGIN
         INSERT INTO SPECDATA_SERVER
                     ( PART_NO,
                       REVISION )
              VALUES ( ASPARTNO,
                       ANREVISION );
      EXCEPTION
         WHEN OTHERS
         THEN
            NULL;
      END;

      RETURN IAPICONSTANTDBERROR.DBERR_SUCCESS;
   EXCEPTION
     
      WHEN PED_INVALIDDATE_ERROR
      THEN
        LNRETVAL := IAPIGENERAL.SETERRORTEXT(IAPICONSTANTDBERROR.DBERR_INVALIDPEDDATE);
        IAPIGENERAL.LOGERROR( GSSOURCE,
                      LSMETHOD,
                      IAPIGENERAL.GETLASTERRORTEXT( ) );
        RETURN LNRETVAL;
     

      WHEN DATE_OUT_OF_RANGE
      THEN
         LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_DATEMUSTBEGTTODAY );
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN LNRETVAL;
      WHEN PART_IS_NULL
      THEN
         LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_ISMANDATORY,
                                               'PartNo' );
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN LNRETVAL;
      WHEN FRAME_IS_NULL
      THEN
         LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_INVALIDFRAME );
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN LNRETVAL;
      WHEN WORKFLOW_IS_NULL
      THEN
         LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_INVALIDWORKFLOW );
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN LNRETVAL;
      WHEN ACCESS_IS_NULL
      THEN
         LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_INVALIDACCESS );
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN LNRETVAL;
      WHEN DATE_IS_NULL
      THEN
         LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_INVALIDPLANEFFDATE );
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN LNRETVAL;
      WHEN REVISION_IS_NULL
      THEN
         LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_INVALIDNEWREVISION );
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN LNRETVAL;
      WHEN INVALID_MONTH
      THEN
         LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_INVALIDMONTH );
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN LNRETVAL;
      WHEN INVALID_DAY
      THEN
         LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_INVALIDDAY );
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN LNRETVAL;
      WHEN MANDATORY_FIELD
      THEN
         LNRETVAL :=
            IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_MANDATORYFIELDCREATESPEC,
                                      ASPARTNO,
                                      ANREVISION,
                                      LNINITIALSTATUS,
                                      ASFRAMEID,
                                      ANWORKFLOWGROUPID,
                                      ANACCESSGROUPID,
                                      ADPLANNEDEFFECTIVEDATE );
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN LNRETVAL;
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL );
   END CREATESPEC;


   FUNCTION CHECKPROPERTYVALIDATION(
      ANLAYOUT                            IAPITYPE.ID_TYPE,
      ANLAYOUTREVISION                    IAPITYPE.REVISION_TYPE,
      ANLOWERLIMIT                        IAPITYPE.NUMVAL_TYPE,
      ANUPPERLIMIT                        IAPITYPE.NUMVAL_TYPE,
      ANNUM1                              IAPITYPE.NUMVAL_TYPE,
      ANNUM2                              IAPITYPE.NUMVAL_TYPE DEFAULT NULL,
      ANNUM3                              IAPITYPE.NUMVAL_TYPE DEFAULT NULL,
      ANNUM4                              IAPITYPE.NUMVAL_TYPE DEFAULT NULL,
      ANNUM5                              IAPITYPE.NUMVAL_TYPE DEFAULT NULL,
      ANNUM6                              IAPITYPE.NUMVAL_TYPE DEFAULT NULL,
      ANNUM7                              IAPITYPE.NUMVAL_TYPE DEFAULT NULL,
      ANNUM8                              IAPITYPE.NUMVAL_TYPE DEFAULT NULL,
      ANNUM9                              IAPITYPE.NUMVAL_TYPE DEFAULT NULL,
      ANNUM10                             IAPITYPE.NUMVAL_TYPE DEFAULT NULL )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS





















      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'CheckPropertyValidation';

      CURSOR C_FUNCTIONS(
         ANLAYOUTID                          IAPITYPE.ID_TYPE,
         ANLAYOUTREVISION                    IAPITYPE.REVISION_TYPE )
      IS
         SELECT B.FUNCTION_ID ID,
                B.DESCRIPTION DESCRIPTION,
                DECODE( ARG1,
                        1, ANNUM1,
                        2, ANNUM2,
                        3, ANNUM3,
                        4, ANNUM4,
                        5, ANNUM5,
                        6, ANNUM6,
                        7, ANNUM7,
                        8, ANNUM8,
                        9, ANNUM9,
                        10, ANNUM10 ) ARG1,
                DECODE( ARG2,
                        1, ANNUM1,
                        2, ANNUM2,
                        3, ANNUM3,
                        4, ANNUM4,
                        5, ANNUM5,
                        6, ANNUM6,
                        7, ANNUM7,
                        8, ANNUM8,
                        9, ANNUM9,
                        10, ANNUM10 ) ARG2,
                DECODE( ARG3,
                        1, ANNUM1,
                        2, ANNUM2,
                        3, ANNUM3,
                        4, ANNUM4,
                        5, ANNUM5,
                        6, ANNUM6,
                        7, ANNUM7,
                        8, ANNUM8,
                        9, ANNUM9,
                        10, ANNUM10 ) ARG3,
                DECODE( ARG4,
                        1, ANNUM1,
                        2, ANNUM2,
                        3, ANNUM3,
                        4, ANNUM4,
                        5, ANNUM5,
                        6, ANNUM6,
                        7, ANNUM7,
                        8, ANNUM8,
                        9, ANNUM9,
                        10, ANNUM10 ) ARG4,
                DECODE( ARG5,
                        1, ANNUM1,
                        2, ANNUM2,
                        3, ANNUM3,
                        4, ANNUM4,
                        5, ANNUM5,
                        6, ANNUM6,
                        7, ANNUM7,
                        8, ANNUM8,
                        9, ANNUM9,
                        10, ANNUM10 ) ARG5,
                DECODE( ARG6,
                        1, ANNUM1,
                        2, ANNUM2,
                        3, ANNUM3,
                        4, ANNUM4,
                        5, ANNUM5,
                        6, ANNUM6,
                        7, ANNUM7,
                        8, ANNUM8,
                        9, ANNUM9,
                        10, ANNUM10 ) ARG6,
                DECODE( ARG7,
                        1, ANNUM1,
                        2, ANNUM2,
                        3, ANNUM3,
                        4, ANNUM4,
                        5, ANNUM5,
                        6, ANNUM6,
                        7, ANNUM7,
                        8, ANNUM8,
                        9, ANNUM9,
                        10, ANNUM10 ) ARG7,
                DECODE( ARG8,
                        1, ANNUM1,
                        2, ANNUM2,
                        3, ANNUM3,
                        4, ANNUM4,
                        5, ANNUM5,
                        6, ANNUM6,
                        7, ANNUM7,
                        8, ANNUM8,
                        9, ANNUM9,
                        10, ANNUM10 ) ARG8,
                DECODE( ARG9,
                        1, ANNUM1,
                        2, ANNUM2,
                        3, ANNUM3,
                        4, ANNUM4,
                        5, ANNUM5,
                        6, ANNUM6,
                        7, ANNUM7,
                        8, ANNUM8,
                        9, ANNUM9,
                        10, ANNUM10 ) ARG9,
                DECODE( ARG10,
                        1, ANNUM1,
                        2, ANNUM2,
                        3, ANNUM3,
                        4, ANNUM4,
                        5, ANNUM5,
                        6, ANNUM6,
                        7, ANNUM7,
                        8, ANNUM8,
                        9, ANNUM9,
                        10, ANNUM10 ) ARG10
           FROM LAYOUT_VALIDATION A,
                FUNCTIONS B
          WHERE A.FUNCTION_ID = B.FUNCTION_ID
            AND A.LAYOUT_ID = ANLAYOUTID
            AND A.REVISION = ANLAYOUTREVISION;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      FOR R_FUNCTIONS IN C_FUNCTIONS( ANLAYOUT,
                                      ANLAYOUTREVISION )
      LOOP
         IAPIGENERAL.LOGINFO( GSSOURCE,
                              LSMETHOD,
                                 'Layout Id:'
                              || ANLAYOUT
                              || ' ['
                              || ANLAYOUTREVISION
                              || '] Validation Function: <'
                              || R_FUNCTIONS.DESCRIPTION
                              || '>' );

         CASE R_FUNCTIONS.DESCRIPTION
            WHEN 'lower_upper'
            THEN
               IF     ( R_FUNCTIONS.ARG1 < ANLOWERLIMIT )
                  AND ( R_FUNCTIONS.ARG1 > ANUPPERLIMIT )
               THEN

                  RETURN( IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                              LSMETHOD,
                                                              IAPICONSTANTDBERROR.DBERR_INVALIDVALIDATION,
                                                              R_FUNCTIONS.DESCRIPTION ) );
               END IF;
            WHEN 'min_max'
            THEN
               IF ( R_FUNCTIONS.ARG1 > R_FUNCTIONS.ARG2 )
               THEN

                  RETURN( IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                              LSMETHOD,
                                                              IAPICONSTANTDBERROR.DBERR_INVALIDVALIDATION,
                                                              R_FUNCTIONS.DESCRIPTION ) );
               END IF;

               IF    (     ANLOWERLIMIT <> NULL
                       AND R_FUNCTIONS.ARG1 < ANLOWERLIMIT )
                  OR (     ANUPPERLIMIT <> NULL
                       AND R_FUNCTIONS.ARG2 > ANUPPERLIMIT )
               THEN

                  RETURN( IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                              LSMETHOD,
                                                              IAPICONSTANTDBERROR.DBERR_INVALIDLIMIT ) );
               END IF;
            WHEN 'min_max_target'
            THEN
               IF    ( R_FUNCTIONS.ARG1 > R_FUNCTIONS.ARG3 )
                  OR ( R_FUNCTIONS.ARG3 > R_FUNCTIONS.ARG2 )
               THEN

                  RETURN( IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                              LSMETHOD,
                                                              IAPICONSTANTDBERROR.DBERR_INVALIDVALIDATION,
                                                              R_FUNCTIONS.DESCRIPTION ) );
               END IF;

               IF    (     NOT ANLOWERLIMIT IS NULL
                       AND R_FUNCTIONS.ARG1 < ANLOWERLIMIT )
                  OR (     NOT ANUPPERLIMIT IS NULL
                       AND R_FUNCTIONS.ARG2 > ANUPPERLIMIT )
               THEN

                  RETURN( IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                              LSMETHOD,
                                                              IAPICONSTANTDBERROR.DBERR_INVALIDLIMIT ) );
               END IF;
            WHEN 'ls_min_max_target_hs'
            THEN
               IF    ( R_FUNCTIONS.ARG1 > R_FUNCTIONS.ARG2 )
                  OR ( R_FUNCTIONS.ARG2 > R_FUNCTIONS.ARG4 )
                  OR ( R_FUNCTIONS.ARG4 > R_FUNCTIONS.ARG3 )
                  OR ( R_FUNCTIONS.ARG3 > R_FUNCTIONS.ARG5 )
               THEN

                  RETURN( IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                              LSMETHOD,
                                                              IAPICONSTANTDBERROR.DBERR_INVALIDVALIDATION,
                                                              R_FUNCTIONS.DESCRIPTION ) );
               END IF;

               IF    (     NOT ANLOWERLIMIT IS NULL
                       AND R_FUNCTIONS.ARG1 < ANLOWERLIMIT )
                  OR (     NOT ANUPPERLIMIT IS NULL
                       AND R_FUNCTIONS.ARG5 > ANUPPERLIMIT )
               THEN

                  RETURN( IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                              LSMETHOD,
                                                              IAPICONSTANTDBERROR.DBERR_INVALIDLIMIT ) );
               END IF;
            WHEN '>=0'
            THEN
               IF NOT( R_FUNCTIONS.ARG1 >= 0 )
               THEN

                  RETURN( IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                              LSMETHOD,
                                                              IAPICONSTANTDBERROR.DBERR_INVALIDVALIDATION,
                                                              R_FUNCTIONS.DESCRIPTION ) );
               END IF;

               IF    (     NOT ANLOWERLIMIT IS NULL
                       AND R_FUNCTIONS.ARG1 < ANLOWERLIMIT )
                  OR (     NOT ANUPPERLIMIT IS NULL
                       AND R_FUNCTIONS.ARG1 > ANUPPERLIMIT )
               THEN

                  RETURN( IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                              LSMETHOD,
                                                              IAPICONSTANTDBERROR.DBERR_INVALIDLIMIT ) );
               END IF;
            WHEN '>0'
            THEN
               IF ( R_FUNCTIONS.ARG1 < 0 )
               THEN

                  RETURN( IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                              LSMETHOD,
                                                              IAPICONSTANTDBERROR.DBERR_INVALIDVALIDATION,
                                                              R_FUNCTIONS.DESCRIPTION ) );
               END IF;

               IF    (     NOT ANLOWERLIMIT IS NULL
                       AND R_FUNCTIONS.ARG1 < ANLOWERLIMIT )
                  OR (     NOT ANUPPERLIMIT IS NULL
                       AND R_FUNCTIONS.ARG1 > ANUPPERLIMIT )
               THEN

                  RETURN( IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                              LSMETHOD,
                                                              IAPICONSTANTDBERROR.DBERR_INVALIDLIMIT ) );
               END IF;
            WHEN '<0'
            THEN
               IF ( R_FUNCTIONS.ARG1 > 0 )
               THEN

                  RETURN( IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                              LSMETHOD,
                                                              IAPICONSTANTDBERROR.DBERR_INVALIDVALIDATION,
                                                              R_FUNCTIONS.DESCRIPTION ) );
               END IF;

               IF    (     NOT ANLOWERLIMIT IS NULL
                       AND R_FUNCTIONS.ARG1 < ANLOWERLIMIT )
                  OR (     NOT ANUPPERLIMIT IS NULL
                       AND R_FUNCTIONS.ARG1 > ANUPPERLIMIT )
               THEN

                  RETURN( IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                              LSMETHOD,
                                                              IAPICONSTANTDBERROR.DBERR_INVALIDLIMIT ) );
               END IF;
            WHEN '<=0'
            THEN
               IF ( R_FUNCTIONS.ARG1 > 0 )
               THEN

                  RETURN( IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                              LSMETHOD,
                                                              IAPICONSTANTDBERROR.DBERR_INVALIDVALIDATION,
                                                              R_FUNCTIONS.DESCRIPTION ) );
               END IF;

               IF    (     NOT ANLOWERLIMIT IS NULL
                       AND R_FUNCTIONS.ARG1 < ANLOWERLIMIT )
                  OR (     NOT ANUPPERLIMIT IS NULL
                       AND R_FUNCTIONS.ARG1 > ANUPPERLIMIT )
               THEN

                  RETURN( IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                              LSMETHOD,
                                                              IAPICONSTANTDBERROR.DBERR_INVALIDLIMIT ) );
               END IF;
         END CASE;
      END LOOP;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL );
   END CHECKPROPERTYVALIDATION;


   FUNCTION CURRENTPHASEINTOCURRENT(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANSTATUSTYPE               IN       IAPITYPE.STATUSTYPE_TYPE,
      ANPHASEINSTATUS            IN       IAPITYPE.PHASEINSTATUS_TYPE,
      ANNEXTSTATUS               IN       IAPITYPE.STATUSID_TYPE,
      ANELECSIGNSEQ              IN       IAPITYPE.SEQUENCE_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS












      LNAPPROVEDCOUNT               PLS_INTEGER := 0;
      LNREASONID                    IAPITYPE.ID_TYPE;
      LNWORKFLOWID                  IAPITYPE.ID_TYPE;
      LNWORKFLOWGROUPID             IAPITYPE.ID_TYPE;
      LNNEWSTATUS                   IAPITYPE.STATUSID_TYPE;
      LNSTATUS                      IAPITYPE.STATUSID_TYPE;
      LQERRORS                      IAPITYPE.REF_TYPE;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'CurrentPhaseInToCurrent';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;

      
      CURSOR C10
      IS
         SELECT PART_NO,
                REVISION,
                STATUS,
                WORKFLOW_GROUP_ID
           FROM SPECIFICATION_HEADER
          WHERE STATUS IN( SELECT STATUS
                            FROM STATUS
                           WHERE STATUS_TYPE = IAPICONSTANT.STATUSTYPE_CURRENT
                             AND PHASE_IN_STATUS = 'N' )
            AND PART_NO = ASPARTNO;

      

      CURSOR C21
      IS
         SELECT A.STATUS,
                A.STATUS_TYPE
           FROM STATUS A,
                WORK_FLOW B
          WHERE A.STATUS = B.NEXT_STATUS
            AND B.STATUS = LNSTATUS
            AND B.WORK_FLOW_ID = LNWORKFLOWID;

      
      CURSOR C22
      IS
         SELECT WORK_FLOW_ID
           FROM WORKFLOW_GROUP
          WHERE WORKFLOW_GROUP_ID = LNWORKFLOWGROUPID;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      

      IF     ANSTATUSTYPE = IAPICONSTANT.STATUSTYPE_CURRENT
         AND ANPHASEINSTATUS != 'Y'
      THEN
         FOR C10REC IN C10
         LOOP
            LNWORKFLOWGROUPID := C10REC.WORKFLOW_GROUP_ID;
            LNSTATUS := C10REC.STATUS;

            FOR C22REC IN C22
            LOOP
               LNWORKFLOWID := C22REC.WORK_FLOW_ID;

               FOR C21REC IN C21
               LOOP
                  IF C21REC.STATUS_TYPE = IAPICONSTANT.STATUSTYPE_HISTORIC
                  THEN
                     LNAPPROVEDCOUNT :=   LNAPPROVEDCOUNT
                                        + 1;
                     LNNEWSTATUS := C21REC.STATUS;
                  END IF;
               END LOOP;

               IF LNAPPROVEDCOUNT = 0
               THEN
                  LNRETVAL :=
                          IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_PARTSTATUSTNOTFOUND,
                                                    ASPARTNO,
                                                    NULL,
                                                    IAPICONSTANT.STATUSTYPE_HISTORIC );
                  IAPIGENERAL.LOGERROR( GSSOURCE,
                                        LSMETHOD,
                                        IAPIGENERAL.GETLASTERRORTEXT( ) );
                  RETURN( LNRETVAL );
               ELSIF LNAPPROVEDCOUNT > 1
               THEN
                  LNRETVAL :=
                            IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_PARTSTATUSTOOMANY,
                                                      ASPARTNO,
                                                      NULL,
                                                      IAPICONSTANT.STATUSTYPE_HISTORIC );
                  IAPIGENERAL.LOGERROR( GSSOURCE,
                                        LSMETHOD,
                                        IAPIGENERAL.GETLASTERRORTEXT( ) );
                  RETURN( LNRETVAL );
               END IF;
            END LOOP;

            IF LNAPPROVEDCOUNT = 0
            THEN
               LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_WORKFLOWGROUPNOTFOUND,
                                                     LNWORKFLOWGROUPID );
               IAPIGENERAL.LOGERROR( GSSOURCE,
                                     LSMETHOD,
                                     IAPIGENERAL.GETLASTERRORTEXT( ) );
               RETURN( LNRETVAL );
            END IF;

            
            
            
            UPDATE SPECIFICATION_HEADER
               SET STATUS = LNNEWSTATUS,
                   
                   
                   OBSOLESCENCE_DATE = DECODE(OBSOLESCENCE_DATE, NULL, SYSDATE, OBSOLESCENCE_DATE),
                   
                   STATUS_CHANGE_DATE = SYSDATE
             WHERE PART_NO = ASPARTNO
               AND REVISION = C10REC.REVISION;

            UPDATE PART
               SET CHANGED_DATE = SYSDATE
             WHERE PART_NO = ASPARTNO;

            
            INSERT INTO STATUS_HISTORY
                        ( PART_NO,
                          REVISION,
                          STATUS,
                          STATUS_DATE_TIME,
                          USER_ID,
                          SORT_SEQ,
                          REASON_ID,
                          FORENAME,
                          LAST_NAME,
                          ES_SEQ_NO )
                 VALUES ( ASPARTNO,
                          C10REC.REVISION,
                          LNNEWSTATUS,
                          SYSDATE,
                          IAPIGENERAL.SESSION.APPLICATIONUSER.USERID,
                          STATUS_HISTORY_SEQ.NEXTVAL,
                          NULL,
                          IAPIGENERAL.SESSION.APPLICATIONUSER.FORENAME,
                          IAPIGENERAL.SESSION.APPLICATIONUSER.LASTNAME,
                          ANELECSIGNSEQ );

            BEGIN
               SELECT MAX( ID )
                 INTO LNREASONID
                 FROM REASON
                WHERE PART_NO = ASPARTNO
                  AND REVISION = C10REC.REVISION
                  AND STATUS_TYPE = IAPICONSTANT.STATUSTYPE_REASONFORISSUE;
            EXCEPTION
               WHEN NO_DATA_FOUND
               THEN
                  LNREASONID := NULL;
            END;

            LNRETVAL := IAPIEMAIL.REGISTEREMAIL( ASPARTNO,
                                                 C10REC.REVISION,
                                                 LNNEWSTATUS,
                                                 SYSDATE,
                                                 'S',
                                                 NULL,
                                                 NULL,
                                                 LNREASONID,
                                                 NULL,
                                                 LQERRORS );
         END LOOP;
      END IF;   

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END CURRENTPHASEINTOCURRENT;


   FUNCTION UPDATESPECIFICATIONHEADER(
      ANNEXTSTATUS               IN       IAPITYPE.STATUSID_TYPE,
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE,
      ANSTATUSTYPENOW            IN       IAPITYPE.STATUSTYPE_TYPE,
      ANELECSIGNSEQ              IN       IAPITYPE.SEQUENCE_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS














      LNAPPROVEDCOUNT               PLS_INTEGER := 0;
      LNWORKFLOWID                  IAPITYPE.ID_TYPE;
      LNWORKFLOWGROUPID             IAPITYPE.ID_TYPE;
      LNNEWSTATUS                   IAPITYPE.STATUSID_TYPE;
      LNSTATUS                      IAPITYPE.STATUSID_TYPE;
      LNPEG                         NUMBER;
      LNCOUNT                       PLS_INTEGER;
      LQERRORS                      IAPITYPE.REF_TYPE;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'UpdateSpecificationHeader';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;

      CURSOR C1
      IS
         SELECT *
           FROM STATUS
          WHERE STATUS = ANNEXTSTATUS;

      LNREASONID                    IAPITYPE.ID_TYPE;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      
      
      UPDATE SPECIFICATION_HEADER
         SET STATUS = ANNEXTSTATUS,
             STATUS_CHANGE_DATE = SYSDATE
       WHERE PART_NO = ASPARTNO
         AND REVISION = ANREVISION;

      UPDATE PART
         SET CHANGED_DATE = SYSDATE
       WHERE PART_NO = ASPARTNO;

      
      
      
      FOR C1REC IN C1
      LOOP
         IF     C1REC.STATUS_TYPE = IAPICONSTANT.STATUSTYPE_CURRENT
            AND C1REC.PHASE_IN_STATUS = 'N'
         THEN
            
            
            UPDATE BOM_HEADER
               SET PLANT_EFFECTIVE_DATE = TRUNC( SYSDATE )
             WHERE PART_NO = ASPARTNO
               AND REVISION = ANREVISION
               AND PLANT_EFFECTIVE_DATE < TRUNC( SYSDATE );

            UPDATE SPECIFICATION_HEADER
               SET ISSUED_DATE = SYSDATE,
                   PLANNED_EFFECTIVE_DATE = TRUNC( SYSDATE ),
                   STATUS_CHANGE_DATE = SYSDATE
             WHERE PART_NO = ASPARTNO
               AND REVISION = ANREVISION;

            UPDATE PART
               SET CHANGED_DATE = SYSDATE
             WHERE PART_NO = ASPARTNO;

            
            
            
            BEGIN
               SELECT PED_GROUP_ID
                 INTO LNPEG
                 FROM SPEC_PED_GROUP
                WHERE PART_NO = ASPARTNO
                  AND REVISION = ANREVISION;

               DELETE      SPEC_PED_GROUP
                     WHERE PART_NO = ASPARTNO
                       AND REVISION = ANREVISION;

               SELECT COUNT( * )
                 INTO LNCOUNT
                 FROM SPEC_PED_GROUP
                WHERE PED_GROUP_ID = LNPEG;

               IF LNCOUNT = 0   
               THEN
                  DELETE      PED_GROUP
                        WHERE PED_GROUP_ID = LNPEG;
               END IF;
            EXCEPTION
               WHEN NO_DATA_FOUND
               THEN
                  NULL;
            END;
         ELSIF     C1REC.STATUS_TYPE = IAPICONSTANT.STATUSTYPE_OBSOLETE
               AND ANSTATUSTYPENOW = IAPICONSTANT.STATUSTYPE_CURRENT
         THEN
            UPDATE SPECIFICATION_HEADER
               
               
               SET OBSOLESCENCE_DATE = DECODE(OBSOLESCENCE_DATE, NULL, SYSDATE, OBSOLESCENCE_DATE),
               
                   STATUS_CHANGE_DATE = SYSDATE
             WHERE PART_NO = ASPARTNO
               AND REVISION = ANREVISION;

            UPDATE PART
               SET CHANGED_DATE = SYSDATE
             WHERE PART_NO = ASPARTNO;
         END IF;
      END LOOP;

      
      INSERT INTO STATUS_HISTORY
                  ( PART_NO,
                    REVISION,
                    STATUS,
                    STATUS_DATE_TIME,
                    USER_ID,
                    SORT_SEQ,
                    REASON_ID,
                    FORENAME,
                    LAST_NAME,
                    ES_SEQ_NO )
           VALUES ( ASPARTNO,
                    ANREVISION,
                    ANNEXTSTATUS,
                    SYSDATE,
                    IAPIGENERAL.SESSION.APPLICATIONUSER.USERID,
                    STATUS_HISTORY_SEQ.NEXTVAL,

                    NULL,
                    IAPIGENERAL.SESSION.APPLICATIONUSER.FORENAME,
                    IAPIGENERAL.SESSION.APPLICATIONUSER.LASTNAME,
                    ANELECSIGNSEQ );

      BEGIN
         SELECT MAX( ID )
           INTO LNREASONID
           FROM REASON
          WHERE PART_NO = ASPARTNO
            AND REVISION = ANREVISION
            AND STATUS_TYPE = IAPICONSTANT.STATUSTYPE_REASONFORISSUE;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            LNREASONID := NULL;
      END;

      LNRETVAL := IAPIEMAIL.REGISTEREMAIL( ASPARTNO,
                                           ANREVISION,
                                           ANNEXTSTATUS,
                                           SYSDATE,
                                           'S',
                                           NULL,
                                           NULL,
                                           LNREASONID,
                                           NULL,
                                           LQERRORS );
      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END UPDATESPECIFICATIONHEADER;

   

   
   FUNCTION CHECHERRORLISTCONTENT(
      ASFRAMENO                  IN       IAPITYPE.FRAMENO_TYPE,
      ANFRAMEREVISION            IN       IAPITYPE.FRAMEREVISION_TYPE,
      ANOWNER                    IN       IAPITYPE.OWNER_TYPE)
   RETURN IAPITYPE.ERRORNUM_TYPE
   IS
      LSMETHOD                      IAPITYPE.SOURCE_TYPE := 'ChechErrorListContent';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LSERRORTEXT                   IAPITYPE.ERRORTEXT_TYPE;
      LNERRORCOUNT   IAPITYPE.NUMVAL_TYPE := 0;
      LNERRORCOUNTFRAMENOTCURRENT   IAPITYPE.NUMVAL_TYPE := 0;

   BEGIN
        
        LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_FRAMENOISNOTCURRENT,
                                              ASFRAMENO,
                                              ANFRAMEREVISION,
                                              ANOWNER );

        LSERRORTEXT := IAPIGENERAL.GETLASTERRORTEXT( );

        
        SELECT COUNT( MESSAGETYPE )
        INTO LNERRORCOUNT
        FROM TABLE( CAST( GTERRORS AS ERRORDATATABLE_TYPE ) )
        WHERE MESSAGETYPE = IAPICONSTANT.ERRORMESSAGE_ERROR;

        
        SELECT COUNT( MESSAGETYPE )
        INTO LNERRORCOUNTFRAMENOTCURRENT
        FROM TABLE( CAST( GTERRORS AS ERRORDATATABLE_TYPE ) )
        WHERE MESSAGETYPE = IAPICONSTANT.ERRORMESSAGE_ERROR
        AND UPPER(ERRORTEXT) = UPPER(LSERRORTEXT);

        IF ( LNERRORCOUNT = LNERRORCOUNTFRAMENOTCURRENT )
        THEN
             RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS);
        ELSE
             RETURN( IAPICONSTANTDBERROR.DBERR_ERRORLIST );
        END IF;

        RETURN IAPICONSTANTDBERROR.DBERR_GENFAIL;
   EXCEPTION
   WHEN OTHERS
   THEN
        IAPIGENERAL.LOGERROR( GSSOURCE,
                           LSMETHOD,
                           SQLERRM );
        RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );

   END CHECHERRORLISTCONTENT;
  





   FUNCTION VALIDATEFORCOPY2(
      
      ASPREFIX                   IN       IAPITYPE.PREFIX_TYPE,
      ASCODE                     IN       IAPITYPE.PARTNO_TYPE,
      ASDESCRIPTION              IN       IAPITYPE.DESCRIPTION_TYPE,
      ADPLANNEDEFFECTIVEDATE     IN       IAPITYPE.DATE_TYPE,
      ANMETRIC                   IN       IAPITYPE.BOOLEAN_TYPE,
      ANMULTILANGUAGE            IN       IAPITYPE.BOOLEAN_TYPE,
      ASFRAMENO                  IN       IAPITYPE.FRAMENO_TYPE,
      ANFRAMEREVISION            IN       IAPITYPE.FRAMEREVISION_TYPE,
      ANOWNER                    IN       IAPITYPE.OWNER_TYPE,
      ANFRAMEMASK                IN       IAPITYPE.ID_TYPE,
      ANWORKFLOWGROUPID          IN       IAPITYPE.WORKFLOWGROUPID_TYPE,
      ANACCESSGROUPID            IN       IAPITYPE.ID_TYPE,
      ANSPECTYPEID               IN       IAPITYPE.ID_TYPE,
      ASUOM                      IN       IAPITYPE.BASEUOM_TYPE,
      ASCONVERSIONFACTOR         IN       IAPITYPE.NUMVAL_TYPE,
      ASCONVERSIONUOM            IN       IAPITYPE.BASETOUNIT_TYPE,
      ASPARTNO                   OUT      IAPITYPE.PARTNO_TYPE,
      AQERRORS                   OUT      IAPITYPE.REF_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS
      LSMETHOD                      IAPITYPE.SOURCE_TYPE := 'ValidateForCopy2';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LSPARTNO                      IAPITYPE.PARTNO_TYPE;
      LNPARTEXIST                   IAPITYPE.BOOLEAN_TYPE DEFAULT 0;
      LNERRORCOUNT                  IAPITYPE.NUMVAL_TYPE := 0;

   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );






      IF ( AQERRORS%ISOPEN )
      THEN
         CLOSE AQERRORS;
      END IF;

      GTERRORS.DELETE;
      LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                             AQERRORS );

      
      LNRETVAL :=
        VALIDATEFIELD( ASPREFIX,
                       ASCODE,
                       ASDESCRIPTION,
                       ADPLANNEDEFFECTIVEDATE,
                       ANMETRIC,
                       ANMULTILANGUAGE,
                       ASFRAMENO,
                       ANFRAMEREVISION,
                       ANOWNER,
                       ANFRAMEMASK,
                       ANWORKFLOWGROUPID,
                       ANACCESSGROUPID,
                       ANSPECTYPEID,
                       ASUOM,
                       ASCONVERSIONFACTOR,
                       ASCONVERSIONUOM,
                       ASPARTNO,
                       AQERRORS );

      IF ( GTERRORS.COUNT > 0 )
      THEN
        
        LNRETVAL := CHECHERRORLISTCONTENT( ASFRAMENO,
                                           ANFRAMEREVISION,
                                           ANOWNER);

        IF ( LNRETVAL = IAPICONSTANTDBERROR.DBERR_SUCCESS )
        THEN
             
             NULL;
        ELSE
            
            LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                                   AQERRORS );
            RETURN( IAPICONSTANTDBERROR.DBERR_ERRORLIST );
        END IF;

      END IF;

      
      
      
      
      IF ASPREFIX IS NOT NULL
      THEN
        LNRETVAL := VALIDATEFIELDPREFIX( ASPREFIX );

        IF LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS
        THEN
           LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'Prefix',
                                                   IAPIGENERAL.GETLASTERRORTEXT( ),
                                                   GTERRORS );
        END IF;

        LNRETVAL := VALIDATEFIELDPARTNO( ASPREFIX,
                                         ASCODE,
                                         1,
                                         LNPARTEXIST,
                                         AQERRORS );

        IF LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS
        THEN
           LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'Code',
                                                   IAPIGENERAL.GETLASTERRORTEXT( ),
                                                   GTERRORS );
        END IF;
      END IF;

      IF ( GTERRORS.COUNT = 0 )
      THEN
            ASPARTNO := GETPARTCODE( ASPREFIX,
                                     ASCODE );
      ELSE
            
            LNRETVAL := CHECHERRORLISTCONTENT(  ASFRAMENO,
                                                ANFRAMEREVISION,
                                                ANOWNER);

            IF ( LNRETVAL = IAPICONSTANTDBERROR.DBERR_SUCCESS )
            THEN
                ASPARTNO := GETPARTCODE( ASPREFIX,
                                         ASCODE );

                
                LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                                       AQERRORS );
            ELSE
                
                LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                                       AQERRORS );
                RETURN( IAPICONSTANTDBERROR.DBERR_ERRORLIST );
            END IF;
      END IF;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END VALIDATEFORCOPY2;




 FUNCTION ADDPROPSTOOPTPROPGROUPS(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE,
      ASFRAMENO                  IN       IAPITYPE.FRAMENO_TYPE,
      ANFRAMEREVISION            IN       IAPITYPE.FRAMEREVISION_TYPE,
      ANFRAMEOWNER               IN       IAPITYPE.OWNER_TYPE)
      RETURN IAPITYPE.ERRORNUM_TYPE
    IS














      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'AddPropsToOptPropGroups';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;

   BEGIN

          BEGIN
            INSERT INTO SPECIFICATION_PROP
                        ( PART_NO,
                          REVISION,
                          SECTION_ID,
                          SUB_SECTION_ID,
                          SECTION_REV,
                          SUB_SECTION_REV,
                          PROPERTY_GROUP,
                          PROPERTY,
                          ATTRIBUTE,
                          UOM_ID,
                          PROPERTY_GROUP_REV,
                          PROPERTY_REV,
                          ATTRIBUTE_REV,
                          UOM_REV,
                          TEST_METHOD,
                          TEST_METHOD_REV,
                          SEQUENCE_NO,
                          CHARACTERISTIC,
                          CHARACTERISTIC_REV,
                          ASSOCIATION,
                          ASSOCIATION_REV,
                          INTL,
                          NUM_1,
                          NUM_2,
                          NUM_3,
                          NUM_4,
                          NUM_5,
                          NUM_6,
                          NUM_7,
                          NUM_8,
                          NUM_9,
                          NUM_10,
                          CHAR_1,
                          CHAR_2,
                          CHAR_3,
                          CHAR_4,
                          CHAR_5,
                          CHAR_6,
                          BOOLEAN_1,
                          BOOLEAN_2,
                          BOOLEAN_3,
                          BOOLEAN_4,
                          DATE_1,
                          DATE_2 )

               SELECT ASPARTNO,
                      ANREVISION,
                      SECTION_ID,
                      SUB_SECTION_ID,
                      NVL( F_GET_SUB_REV( SECTION_ID,
                                          SECTION_REV,
                                          NULL,
                                          NULL,
                                          'SC' ),
                           0 ),
                      NVL( F_GET_SUB_REV( SUB_SECTION_ID,
                                          SUB_SECTION_REV,
                                          NULL,
                                          NULL,
                                          'SB' ),
                           0 ),
                      PROPERTY_GROUP,
                      PROPERTY,
                      ATTRIBUTE,
                      UOM_ID,
                      NVL( F_GET_SUB_REV( PROPERTY_GROUP,
                                          PROPERTY_GROUP_REV,
                                          NULL,
                                          NULL,
                                          'PG' ),
                           0 ),
                      NVL( F_GET_SUB_REV( PROPERTY,
                                          PROPERTY_REV,
                                          NULL,
                                          NULL,
                                          'SP' ),
                           0 ),
                      NVL( F_GET_SUB_REV( ATTRIBUTE,
                                          ATTRIBUTE_REV,
                                          NULL,
                                          NULL,
                                          'AT' ),
                           0 ),
                      NVL( F_GET_SUB_REV( UOM_ID,
                                          UOM_REV,
                                          NULL,
                                          NULL,
                                          'UO' ),
                           0 ),
                      TEST_METHOD,
                      NVL( F_GET_SUB_REV( TEST_METHOD,
                                          TEST_METHOD_REV,
                                          NULL,
                                          NULL,
                                          'TM' ),
                           0 ),
                      SEQUENCE_NO,
                      CHARACTERISTIC,
                      NVL( F_GET_SUB_REV( CHARACTERISTIC,
                                          CHARACTERISTIC_REV,
                                          NULL,
                                          NULL,
                                          'CH' ),
                           0 ),
                      ASSOCIATION,
                      NVL( F_GET_SUB_REV( ASSOCIATION,
                                          ASSOCIATION_REV,
                                          NULL,
                                          NULL,
                                          'AS' ),
                           0 ),
                      INTL,
                      NUM_1,
                      NUM_2,
                      NUM_3,
                      NUM_4,
                      NUM_5,
                      NUM_6,
                      NUM_7,
                      NUM_8,
                      NUM_9,
                      NUM_10,
                      CHAR_1,
                      CHAR_2,
                      CHAR_3,
                      CHAR_4,
                      CHAR_5,
                      CHAR_6,
                      BOOLEAN_1,
                      BOOLEAN_2,
                      BOOLEAN_3,
                      BOOLEAN_4,
                      DATE_1,
                      DATE_2
                 FROM FRAME_PROP
                 WHERE FRAME_NO = ASFRAMENO
                  AND REVISION = ANFRAMEREVISION
                  AND OWNER = ANFRAMEOWNER
                  AND MANDATORY = 'Y'
                  AND (SECTION_ID, SUB_SECTION_ID, PROPERTY_GROUP, PROPERTY, ATTRIBUTE) NOT IN
                        (SELECT SECTION_ID, SUB_SECTION_ID, PROPERTY_GROUP, PROPERTY, ATTRIBUTE
                         FROM SPECIFICATION_PROP
                         WHERE PART_NO = ASPARTNO
                            AND REVISION = ANREVISION)
                  AND (SECTION_ID, SUB_SECTION_ID, PROPERTY_GROUP) IN
                        (SELECT SECTION_ID, SUB_SECTION_ID, REF_ID
                         FROM FRAME_SECTION
                         WHERE FRAME_NO = ASFRAMENO
                            AND REVISION = ANFRAMEREVISION
                            AND OWNER = ANFRAMEOWNER
                            AND TYPE = IAPICONSTANT.SECTIONTYPE_PROPERTYGROUP
                            
                            
                            
                            
                            AND MANDATORY = 'N')
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  AND (SECTION_ID, SUB_SECTION_ID, PROPERTY_GROUP) IN
                            (SELECT SECTION_ID, SUB_SECTION_ID, REF_ID
                              FROM SPECIFICATION_SECTION SS
                              WHERE SS.PART_NO = ASPARTNO
                              AND SS.REVISION = ANREVISION
                              AND SS.TYPE = IAPICONSTANT.SECTIONTYPE_PROPERTYGROUP);
                  
                  

            RETURN IAPICONSTANTDBERROR.DBERR_SUCCESS;
         EXCEPTION
            WHEN OTHERS
            THEN
               IAPIGENERAL.LOGERROR( GSSOURCE,
                                     LSMETHOD,
                                     SQLERRM );
               RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
         END;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END ADDPROPSTOOPTPROPGROUPS;







   FUNCTION GETFRAME(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE,
      ARFRAME                    OUT      IAPITYPE.FRAMEREC_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS











      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'GetFrame';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'PreConditions',
                           IAPICONSTANT.INFOLEVEL_3 );
      
      
      LNRETVAL := EXISTID( ASPARTNO,
                           ANREVISION );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN( LNRETVAL );
      END IF;




      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      
      SELECT FRAME_ID,
             FRAME_REV,
             FRAME_OWNER,
             DECODE( MASK_ID,
                     -1, NULL,
                     MASK_ID )
        INTO ARFRAME
        FROM SPECIFICATION_HEADER
       WHERE PART_NO = ASPARTNO
         AND REVISION = ANREVISION;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END GETFRAME;





   FUNCTION GETFRAME2(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE,
      ASFRAMENO                  OUT      IAPITYPE.FRAMENO_TYPE,


      ANFRAMEREV                 OUT      IAPITYPE.FRAMEREVISION_TYPE )

      RETURN IAPITYPE.ERRORNUM_TYPE
   IS











      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'GetFrame2';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'PreConditions',
                           IAPICONSTANT.INFOLEVEL_3 );
      
      
      LNRETVAL := EXISTID( ASPARTNO,
                           ANREVISION );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN( LNRETVAL );
      END IF;




      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      
      SELECT FRAME_ID,
             FRAME_REV
             
             
             
             
             
        
        INTO ASFRAMENO, ANFRAMEREV
        FROM SPECIFICATION_HEADER
       WHERE PART_NO = ASPARTNO
         AND REVISION = ANREVISION;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END GETFRAME2;
   


   FUNCTION EXISTID(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS










      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'ExistId';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LSPARTNO                      IAPITYPE.PARTNO_TYPE;
      
      LRCACHE                       SHCACHE_REC_TYPE;
   BEGIN

    
      LRCACHE := NULL;
      LNRETVAL := GETSHFROMCACHE(ASPARTNO, ANREVISION, LRCACHE);

      IF (LNRETVAL = IAPICONSTANTDBERROR.DBERR_SUCCESS)
      THEN
          IF (LRCACHE.PARTNO IS NULL)
          THEN
            INSERTTOSHCACHE(ASPARTNO, ANREVISION);
             LNRETVAL := GETSHFROMCACHE(ASPARTNO, ANREVISION, LRCACHE);
          END IF;

          IF (LNRETVAL = IAPICONSTANTDBERROR.DBERR_SUCCESS
            AND LRCACHE.PARTNO IS NOT NULL)
          THEN
            RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
          ELSE
             RETURN( IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                         LSMETHOD,
                                                         IAPICONSTANTDBERROR.DBERR_SPECIFICATIONNOTFOUND,
                                                         ASPARTNO,
                                                         ANREVISION ) );
          END IF;
      END IF;
    




      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      SELECT PART_NO
        INTO LSPARTNO
        FROM SPECIFICATION_HEADER
       WHERE PART_NO = ASPARTNO
         AND REVISION = ANREVISION;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         RETURN( IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                     LSMETHOD,
                                                     IAPICONSTANTDBERROR.DBERR_SPECIFICATIONNOTFOUND,
                                                     ASPARTNO,
                                                     ANREVISION ) );
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END EXISTID;


   FUNCTION ISLOCALIZED(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE,
      ANLOCALIZED                OUT      IAPITYPE.BOOLEAN_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS












      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'IsLocalized';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      
      LRCACHE                       SHCACHE_REC_TYPE;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'PreConditions',
                           IAPICONSTANT.INFOLEVEL_3 );
      
      
      LNRETVAL := EXISTID( ASPARTNO,
                           ANREVISION );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN( LNRETVAL );
      END IF;


   
      LRCACHE := NULL;
      LNRETVAL := GETSHFROMCACHE(ASPARTNO, ANREVISION, LRCACHE);
      IF (LNRETVAL = IAPICONSTANTDBERROR.DBERR_SUCCESS)
      THEN
          IF (LRCACHE.PARTNO IS NULL)
          THEN
            INSERTTOSHCACHE(ASPARTNO, ANREVISION);
             LNRETVAL := GETSHFROMCACHE(ASPARTNO, ANREVISION, LRCACHE);
          END IF;

          IF (LNRETVAL = IAPICONSTANTDBERROR.DBERR_SUCCESS AND LRCACHE.PARTNO IS NOT NULL)
          THEN
            ANLOCALIZED := LRCACHE.ISLOCALIZED;
            RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
          ELSE
             RETURN( IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                         LSMETHOD,
                                                         IAPICONSTANTDBERROR.DBERR_SPECIFICATIONNOTFOUND,
                                                         ASPARTNO,
                                                         ANREVISION ) );
          END IF;
     END IF;
   




      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      SELECT DECODE( INT_PART_NO,
                     NULL, 0,
                     1 )
        INTO ANLOCALIZED
        FROM SPECIFICATION_HEADER
       WHERE PART_NO = ASPARTNO
         AND REVISION = ANREVISION;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END ISLOCALIZED;


   FUNCTION ISINTERNATIONAL(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE,
      ANINTERNATIONAL            OUT      IAPITYPE.BOOLEAN_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS












      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'IsInternational';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LNCOUNT                       IAPITYPE.NUMVAL_TYPE;
      
      LRCACHE                       SHCACHE_REC_TYPE;

   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'PreConditions',
                           IAPICONSTANT.INFOLEVEL_3 );
      
      
      LNRETVAL := EXISTID( ASPARTNO,
                           ANREVISION );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN( LNRETVAL );
      END IF;


    
      LRCACHE := NULL;
      LNRETVAL := GETSHFROMCACHE(ASPARTNO, ANREVISION, LRCACHE);
      IF (LNRETVAL = IAPICONSTANTDBERROR.DBERR_SUCCESS)
      THEN
          IF (LRCACHE.PARTNO IS NULL)
          THEN
            INSERTTOSHCACHE(ASPARTNO, ANREVISION);
             LNRETVAL := GETSHFROMCACHE(ASPARTNO, ANREVISION, LRCACHE);
          END IF;

          IF (LNRETVAL = IAPICONSTANTDBERROR.DBERR_SUCCESS AND LRCACHE.PARTNO IS NOT NULL)
          THEN
            ANINTERNATIONAL := LRCACHE.ISINTERNATIONAL;
            RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
          ELSE
             RETURN( IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                         LSMETHOD,
                                                         IAPICONSTANTDBERROR.DBERR_SPECIFICATIONNOTFOUND,
                                                         ASPARTNO,
                                                         ANREVISION ) );
          END IF;
      END IF;
    




      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      SELECT COUNT( * )
        INTO LNCOUNT
        FROM SPECIFICATION_HEADER
       WHERE PART_NO = ASPARTNO
         AND REVISION = ANREVISION
         AND INTL = 1;

      IF LNCOUNT > 0
      THEN
         ANINTERNATIONAL := 1;
      ELSE
         ANINTERNATIONAL := 0;
      END IF;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END ISINTERNATIONAL;


   FUNCTION LOGCHANGES(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS











      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'LogChanges';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'PreConditions',
                           IAPICONSTANT.INFOLEVEL_3 );
      
      
      LNRETVAL := EXISTID( ASPARTNO,
                           ANREVISION );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN( LNRETVAL );
      END IF;




      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      UPDATE SPECIFICATION_HEADER
         SET LAST_MODIFIED_BY = IAPIGENERAL.SESSION.APPLICATIONUSER.USERID,
             LAST_MODIFIED_ON = SYSDATE
       WHERE PART_NO = ASPARTNO
         AND REVISION = ANREVISION;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END LOGCHANGES;


   FUNCTION GETSTATUSTYPE(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE,
      ASSTATUSTYPE               OUT      IAPITYPE.STATUSTYPE_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS











      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'GetStatusType';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      
      LRCACHE                      SHCACHE_REC_TYPE;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'PreConditions',
                           IAPICONSTANT.INFOLEVEL_3 );
      
      
      LNRETVAL := EXISTID( ASPARTNO,
                           ANREVISION );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN( LNRETVAL );
      END IF;


    
      LRCACHE := NULL;
      LNRETVAL := GETSHFROMCACHE(ASPARTNO, ANREVISION, LRCACHE);
      IF (LNRETVAL = IAPICONSTANTDBERROR.DBERR_SUCCESS)
      THEN
          IF (LRCACHE.PARTNO IS NULL)
          THEN
            INSERTTOSHCACHE(ASPARTNO, ANREVISION);
             LNRETVAL := GETSHFROMCACHE(ASPARTNO, ANREVISION, LRCACHE);
          END IF;

          IF (LNRETVAL = IAPICONSTANTDBERROR.DBERR_SUCCESS AND LRCACHE.PARTNO IS NOT NULL)
          THEN
            ASSTATUSTYPE := LRCACHE.STATUSTYPE;
            RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
          ELSE
             RETURN( IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                         LSMETHOD,
                                                         IAPICONSTANTDBERROR.DBERR_SPECIFICATIONNOTFOUND,
                                                         ASPARTNO,
                                                         ANREVISION ) );
          END IF;
      END IF;
    




      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      SELECT S.STATUS_TYPE
        INTO ASSTATUSTYPE
        FROM SPECIFICATION_HEADER SH,
             STATUS S
       WHERE SH.PART_NO = ASPARTNO
         AND SH.REVISION = ANREVISION
         AND S.STATUS = SH.STATUS;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END GETSTATUSTYPE;


   FUNCTION GETNEXTSTATUSTYPE(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE,
      ANWORKFLOWGROUP            IN       IAPITYPE.ID_TYPE,
      ANSTATUSTYPE               IN       IAPITYPE.STATUSTYPE_TYPE,
      ANSTATUS                   IN       IAPITYPE.STATUSID_TYPE,
      ANPHASEINSTATUS            IN       IAPITYPE.PHASEINSTATUS_TYPE,
      ANNEXTSTATUS               OUT      IAPITYPE.STATUSID_TYPE,
      ANNEXTSTATUSTYPE           OUT      IAPITYPE.STATUSTYPE_TYPE,
      ANNEXTPHASEINSTATUS        OUT      IAPITYPE.PHASEINSTATUS_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS

















      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'GetNextStatusType';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;

      CURSOR LQWORKFLOWGROUP
      IS
         SELECT SORT_DESC,
                WORK_FLOW_ID
           FROM WORKFLOW_GROUP
          WHERE WORKFLOW_GROUP_ID = ANWORKFLOWGROUP;

      CURSOR LQWORKFLOWTYPE(
         ANWORKFLOWID               IN       IAPITYPE.ID_TYPE )
      IS
         SELECT DESCRIPTION
           FROM WORK_FLOW_GROUP
          WHERE WORK_FLOW_ID = ANWORKFLOWID;

      LSWORKFLOWGROUP               IAPITYPE.SHORTDESCRIPTION_TYPE;
      LNWORKFLOWID                  IAPITYPE.ID_TYPE;
      LSWORKFLOWTYPE                IAPITYPE.DESCRIPTION_TYPE;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      OPEN LQWORKFLOWGROUP;

      FETCH LQWORKFLOWGROUP
       INTO LSWORKFLOWGROUP,
            LNWORKFLOWID;

      IF LQWORKFLOWGROUP%NOTFOUND
      THEN
         CLOSE LQWORKFLOWGROUP;

         LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_WORKFLOWGROUPNOTEXIST,
                                               ANWORKFLOWGROUP );
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN( LNRETVAL );
      ELSE
         CLOSE LQWORKFLOWGROUP;
      END IF;

      OPEN LQWORKFLOWTYPE( LNWORKFLOWID );

      FETCH LQWORKFLOWTYPE
       INTO LSWORKFLOWTYPE;

      IF LQWORKFLOWTYPE%NOTFOUND
      THEN
         CLOSE LQWORKFLOWTYPE;

         LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_WORKFLOWTYPENOTEXIST,
                                               LNWORKFLOWID );
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN( LNRETVAL );
      ELSE
         CLOSE LQWORKFLOWTYPE;
      END IF;

      SELECT A.NEXT_STATUS,
             B.STATUS_TYPE,
             B.PHASE_IN_STATUS
        INTO ANNEXTSTATUS,
             ANNEXTSTATUSTYPE,
             ANNEXTPHASEINSTATUS
        FROM WORK_FLOW A,
             STATUS B
       WHERE A.NEXT_STATUS = B.STATUS
         AND A.STATUS = ANSTATUS
         AND A.WORK_FLOW_ID = ( SELECT WORK_FLOW_ID
                                 FROM WORKFLOW_GROUP
                                WHERE WORKFLOW_GROUP_ID = ANWORKFLOWGROUP )
         AND B.STATUS_TYPE = ANSTATUSTYPE
         AND B.PHASE_IN_STATUS = ANPHASEINSTATUS;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         LNRETVAL :=
            IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_PARTWFNONEXTSTATUS,
                                      ASPARTNO,
                                      ANREVISION,
                                      LSWORKFLOWGROUP,
                                      LSWORKFLOWTYPE,
                                      ANSTATUSTYPE );
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN( LNRETVAL );
      WHEN TOO_MANY_ROWS
      THEN
         LNRETVAL :=
            IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_PARTWFTOOMANUSTATUS,
                                      ASPARTNO,
                                      ANREVISION,
                                      LSWORKFLOWGROUP,
                                      LSWORKFLOWTYPE,
                                      ANSTATUSTYPE );
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN( LNRETVAL );
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END GETNEXTSTATUSTYPE;


   FUNCTION ISMULTILANGUAGE(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE,
      ANMULTILANGUAGE            OUT      IAPITYPE.BOOLEAN_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS











      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'IsMultiLanguage';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      
      LRCACHE                      SHCACHE_REC_TYPE;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'PreConditions',
                           IAPICONSTANT.INFOLEVEL_3 );
      
      
      LNRETVAL := EXISTID( ASPARTNO,
                           ANREVISION );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN( LNRETVAL );
      END IF;


      
      LRCACHE := NULL;
      LNRETVAL := GETSHFROMCACHE(ASPARTNO, ANREVISION, LRCACHE);
      IF (LNRETVAL = IAPICONSTANTDBERROR.DBERR_SUCCESS)
      THEN
          IF (LRCACHE.PARTNO IS NULL)
          THEN
            INSERTTOSHCACHE(ASPARTNO, ANREVISION);
             LNRETVAL := GETSHFROMCACHE(ASPARTNO, ANREVISION, LRCACHE);
          END IF;

          IF (LNRETVAL = IAPICONSTANTDBERROR.DBERR_SUCCESS AND LRCACHE.PARTNO IS NOT NULL)
          THEN
            ANMULTILANGUAGE := LRCACHE.ISMULTILANGUAGE;
            RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
          ELSE
             RETURN( IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                         LSMETHOD,
                                                         IAPICONSTANTDBERROR.DBERR_SPECIFICATIONNOTFOUND,
                                                         ASPARTNO,
                                                         ANREVISION ) );
          END IF;
     END IF;
      




      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      SELECT DECODE( MULTILANG,
                     1, 1,
                     0 )
        INTO ANMULTILANGUAGE
        FROM SPECIFICATION_HEADER
       WHERE PART_NO = ASPARTNO
         AND REVISION = ANREVISION;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END ISMULTILANGUAGE;


   FUNCTION GETMODE(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE,
      ANMODE                     OUT      IAPITYPE.BOOLEAN_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS














      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'GetMode';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      
      LRCACHE                      SHCACHE_REC_TYPE;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'PreConditions',
                           IAPICONSTANT.INFOLEVEL_3 );
      
      
      LNRETVAL := EXISTID( ASPARTNO,
                           ANREVISION );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN( LNRETVAL );
      END IF;

    
    
      LRCACHE := NULL;
      LNRETVAL := GETSHFROMCACHE(ASPARTNO, ANREVISION, LRCACHE);
      IF (LNRETVAL = IAPICONSTANTDBERROR.DBERR_SUCCESS)
      THEN
          IF (LRCACHE.PARTNO IS NULL)
          THEN
            INSERTTOSHCACHE(ASPARTNO, ANREVISION);
             LNRETVAL := GETSHFROMCACHE(ASPARTNO, ANREVISION, LRCACHE);
          END IF;

          IF (LNRETVAL = IAPICONSTANTDBERROR.DBERR_SUCCESS AND LRCACHE.PARTNO IS NOT NULL)
          THEN
            ANMODE := LRCACHE.ISINTERNATIONAL;
            RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
          ELSE
             RETURN( IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                         LSMETHOD,
                                                         IAPICONSTANTDBERROR.DBERR_SPECIFICATIONNOTFOUND,
                                                         ASPARTNO,
                                                         ANREVISION ) );
          END IF;
      END IF;
    




      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      SELECT INTL
        INTO ANMODE
        FROM SPECIFICATION_HEADER
       WHERE PART_NO = ASPARTNO
         AND REVISION = ANREVISION;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END GETMODE;


   FUNCTION GETINTLSPECIFICATION(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE,
      ASINTLPARTNO               OUT      IAPITYPE.PARTNO_TYPE,
      ANINTLREVISION             OUT      IAPITYPE.REVISION_TYPE,
      ANMAXINTLREVISION          OUT      IAPITYPE.REVISION_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS

















      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'GetIntlSpecification';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      
      LRCACHE                      SHCACHE_REC_TYPE;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'PreConditions',
                           IAPICONSTANT.INFOLEVEL_3 );
      
      LNRETVAL := EXISTID( ASPARTNO,
                           ANREVISION );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN( LNRETVAL );
      END IF;


     
      LRCACHE := NULL;
      LNRETVAL := GETSHFROMCACHE(ASPARTNO, ANREVISION, LRCACHE);
      IF (LNRETVAL = IAPICONSTANTDBERROR.DBERR_SUCCESS) THEN
          IF (LRCACHE.PARTNO IS NULL) THEN
            INSERTTOSHCACHE(ASPARTNO, ANREVISION);
             LNRETVAL := GETSHFROMCACHE(ASPARTNO, ANREVISION, LRCACHE);
          END IF;

          IF (LNRETVAL = IAPICONSTANTDBERROR.DBERR_SUCCESS AND LRCACHE.PARTNO IS NOT NULL) THEN
              ASINTLPARTNO := LRCACHE.INT_PART_NO;
              ANINTLREVISION := LRCACHE.INT_PART_REV;

              SELECT MAX( SH.REVISION )
                INTO ANMAXINTLREVISION
                FROM SPECIFICATION_HEADER SH,
                     STATUS SS
               WHERE SH.PART_NO = ASINTLPARTNO
                 AND SH.STATUS = SS.STATUS
                 AND SS.STATUS_TYPE = IAPICONSTANT.STATUSTYPE_CURRENT;
             RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
          ELSE
             RETURN( IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                         LSMETHOD,
                                                         IAPICONSTANTDBERROR.DBERR_SPECIFICATIONNOTFOUND,
                                                         ASPARTNO,
                                                         ANREVISION ) );
          END IF;
      END IF;
      




      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      SELECT INT_PART_NO,
             INT_PART_REV
        INTO ASINTLPARTNO,
             ANINTLREVISION
        FROM SPECIFICATION_HEADER
       WHERE PART_NO = ASPARTNO
         AND REVISION = ANREVISION;

      IF    ASINTLPARTNO IS NULL
         OR ASINTLPARTNO = ''
      THEN
         RETURN IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                    LSMETHOD,
                                                    IAPICONSTANTDBERROR.DBERR_NOTLOCALISED,
                                                    ASPARTNO,
                                                    ANREVISION );
      END IF;

      SELECT MAX( SH.REVISION )
        INTO ANMAXINTLREVISION
        FROM SPECIFICATION_HEADER SH,
             STATUS SS
       WHERE SH.PART_NO = ASINTLPARTNO
         AND SH.STATUS = SS.STATUS
         AND SS.STATUS_TYPE = IAPICONSTANT.STATUSTYPE_CURRENT;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );

   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END GETINTLSPECIFICATION;


   FUNCTION GETPLANNEDEFFECTIVEGROUPS(
      ATDEFAULTFILTER            IN       IAPITYPE.FILTERTAB_TYPE,
      AQPLANNEDEFFECTIVEGROUPS   OUT      IAPITYPE.REF_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS











      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'GetPlannedEffectiveGroups';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LRFILTER                      IAPITYPE.FILTERREC_TYPE;
      LSFILTER                      IAPITYPE.CLOB_TYPE := NULL;
      LSFILTERTOADD                 IAPITYPE.STRING_TYPE := NULL;
      LSSQL                         IAPITYPE.SQLSTRING_TYPE := NULL;
      LSSQLNULL                     IAPITYPE.SQLSTRING_TYPE := NULL;
      LSSELECT                      IAPITYPE.BASECOLUMNS_TYPE := GETBASECOLUMNS( 'pg' );
      LSFROM                        IAPITYPE.STRING_TYPE := 'ped_group pg, spec_ped_group spg';
   BEGIN





      IF ( AQPLANNEDEFFECTIVEGROUPS%ISOPEN )
      THEN
         CLOSE AQPLANNEDEFFECTIVEGROUPS;
      END IF;

      LSSQLNULL :=    'SELECT '
                   || LSSELECT
                   || ' FROM '
                   || LSFROM
                   || ' WHERE pg.ped_group_id = NULL AND pg.ped_group_id = spg.ped_group_id';
      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           LSSQLNULL,
                           IAPICONSTANT.INFOLEVEL_3 );

      OPEN AQPLANNEDEFFECTIVEGROUPS FOR LSSQLNULL;




      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );
      
      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                              'Number of items in DefaultFilter <'
                           || ATDEFAULTFILTER.COUNT
                           || '>',
                           IAPICONSTANT.INFOLEVEL_3 );

      FOR I IN 0 ..   ATDEFAULTFILTER.COUNT
                    - 1
      LOOP
         LRFILTER := ATDEFAULTFILTER( I );
         IAPIGENERAL.LOGINFO( GSSOURCE,
                              LSMETHOD,
                                 'DefaultFilter ('
                              || I
                              || ') <'
                              || LRFILTER.LEFTOPERAND
                              || '> <'
                              || LRFILTER.OPERATOR
                              || '> <'
                              || LRFILTER.RIGHTOPERAND
                              || '>',
                              IAPICONSTANT.INFOLEVEL_3 );

         
         CASE LRFILTER.LEFTOPERAND
            WHEN IAPICONSTANTCOLUMN.PARTNOCOL
            THEN
               LRFILTER.LEFTOPERAND := 'spg.part_no';
            WHEN IAPICONSTANTCOLUMN.REVISIONCOL
            THEN
               LRFILTER.LEFTOPERAND := 'spg.revision';
            ELSE
               LNRETVAL := IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                               LSMETHOD,
                                                               IAPICONSTANTDBERROR.DBERR_INVALIDFILTER,
                                                               LRFILTER.LEFTOPERAND );
               RETURN( LNRETVAL );
         END CASE;

         IF ( I > 0 )
         THEN
            LSFILTER :=    LSFILTER
                        || ' AND ';
         END IF;

         LRFILTER.RIGHTOPERAND := IAPIGENERAL.ESCQUOTE( LRFILTER.RIGHTOPERAND );
         LNRETVAL := IAPIGENERAL.TRANSFORMFILTERRECORD( LRFILTER,
                                                        LSFILTERTOADD );

         IF ( LNRETVAL = IAPICONSTANTDBERROR.DBERR_SUCCESS )
         THEN
            LSFILTER :=    LSFILTER
                        || LSFILTERTOADD;
         ELSE
            RETURN( LNRETVAL );
         END IF;
      END LOOP;

      
      LSSQL :=    'SELECT '
               || LSSELECT
               || ' FROM '
               || LSFROM
               || ' WHERE pg.ped_group_id = spg.ped_group_id';

      IF ( LSFILTER IS NOT NULL )
      THEN
         LSSQL :=    LSSQL
                  || ' AND '
                  || LSFILTER;
      END IF;

      LSSQL :=    LSSQL
               || ' ORDER BY 1';
      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           LSSQL,
                           IAPICONSTANT.INFOLEVEL_3 );

      
      IF ( AQPLANNEDEFFECTIVEGROUPS%ISOPEN )
      THEN
         CLOSE AQPLANNEDEFFECTIVEGROUPS;
      END IF;

      
      OPEN AQPLANNEDEFFECTIVEGROUPS FOR LSSQL;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END GETPLANNEDEFFECTIVEGROUPS;


   FUNCTION GETPLANNEDEFFECTIVEGROUPS(
      AXDEFAULTFILTER            IN       IAPITYPE.XMLTYPE_TYPE,
      AQPLANNEDEFFECTIVEGROUPS   OUT      IAPITYPE.REF_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS











      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'GetPlannedEffectiveGroups';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LTDEFAULTFILTER               IAPITYPE.FILTERTAB_TYPE;
      LSSQLNULL                     IAPITYPE.SQLSTRING_TYPE := NULL;
      LSSELECT                      IAPITYPE.BASECOLUMNS_TYPE := GETBASECOLUMNS( 'pg' );
      LSFROM                        IAPITYPE.STRING_TYPE := 'ped_group pg, spec_ped_group spg';
   BEGIN





      IF ( AQPLANNEDEFFECTIVEGROUPS%ISOPEN )
      THEN
         CLOSE AQPLANNEDEFFECTIVEGROUPS;
      END IF;

      LSSQLNULL :=    'SELECT '
                   || LSSELECT
                   || ' FROM '
                   || LSFROM
                   || ' WHERE pg.ped_group_id = NULL AND pg.ped_group_id = spg.ped_group_id';
      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           LSSQLNULL,
                           IAPICONSTANT.INFOLEVEL_3 );

      OPEN AQPLANNEDEFFECTIVEGROUPS FOR LSSQLNULL;




      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );
      LNRETVAL := IAPIGENERAL.APPENDXMLFILTER( AXDEFAULTFILTER,
                                               LTDEFAULTFILTER );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN( LNRETVAL );
      END IF;

      LNRETVAL := GETPLANNEDEFFECTIVEGROUPS( LTDEFAULTFILTER,
                                             AQPLANNEDEFFECTIVEGROUPS );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN( LNRETVAL );
      END IF;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END GETPLANNEDEFFECTIVEGROUPS;


   FUNCTION COPYSPECIFICATIONPB(
      ASFROMPARTNO               IN       IAPITYPE.PARTNO_TYPE,
      ANFROMREVISION             IN       IAPITYPE.REVISION_TYPE,
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ASFRAMEID                  IN       IAPITYPE.FRAMENO_TYPE,
      ANFRAMEREVISION            IN       IAPITYPE.FRAMEREVISION_TYPE,
      ANFRAMEOWNER               IN       IAPITYPE.OWNER_TYPE,
      ANWORKFLOWGROUPID          IN       IAPITYPE.ID_TYPE,
      ANACCESSGROUPID            IN       IAPITYPE.ID_TYPE,
      ANSPECTYPEID               IN       IAPITYPE.ID_TYPE,
      ADPLANNEDEFFECTIVEDATE     IN       IAPITYPE.DATE_TYPE,
      ANNEWREVISION              IN       IAPITYPE.REVISION_TYPE,
      ANMULTILANGUAGE            IN       IAPITYPE.BOOLEAN_TYPE,
      ANUOMTYPE                  IN       IAPITYPE.BOOLEAN_TYPE,
      ANMASKID                   IN       IAPITYPE.ID_TYPE,
      ASDESCRIPTION              IN       IAPITYPE.DESCRIPTION_TYPE,
      ANINTERNATIONALLINKED      IN       IAPITYPE.BOOLEAN_TYPE DEFAULT 0,
      AQPARTNO                   OUT      IAPITYPE.REF_TYPE,
      AQERRORS                   IN OUT   IAPITYPE.REF_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS













      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'CopySpecificationPb';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LSSQL                         VARCHAR2( 8192 ) := NULL;
      LSSQLNULL                     VARCHAR2( 8192 ) := NULL;
      LSSELECT                      VARCHAR2( 4096 ) :=    ':PartNo '
                                                        || IAPICONSTANTCOLUMN.PARTNOCOL;
      LSPARTNO                      IAPITYPE.PARTNO_TYPE;
   BEGIN





      IF ( AQPARTNO%ISOPEN )
      THEN
         CLOSE AQPARTNO;
      END IF;

      LSSQLNULL :=    'SELECT '
                   || LSSELECT
                   || ' FROM dual';

      OPEN AQPARTNO FOR LSSQLNULL USING LSPARTNO;

      GTERRORS.DELETE;
      LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                             AQERRORS );



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );
      LSPARTNO := ASPARTNO;

      
      GBLOGINTOITSCHS := FALSE;

      LNRETVAL :=
         IAPISPECIFICATION.COPYSPECIFICATION( ASFROMPARTNO,
                                              ANFROMREVISION,
                                              LSPARTNO,
                                              ASFRAMEID,
                                              ANFRAMEREVISION,
                                              ANFRAMEOWNER,
                                              ANWORKFLOWGROUPID,
                                              ANACCESSGROUPID,
                                              ANSPECTYPEID,
                                              ADPLANNEDEFFECTIVEDATE,
                                              ANNEWREVISION,
                                              ANMULTILANGUAGE,
                                              ANUOMTYPE,
                                              ANMASKID,
                                              ASDESCRIPTION,
                                              ANINTERNATIONALLINKED,
                                              AQERRORS );

      
      GBLOGINTOITSCHS := TRUE;

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN( LNRETVAL );
      END IF;

      IF ( AQPARTNO%ISOPEN )
      THEN
         CLOSE AQPARTNO;
      END IF;

      LSSQLNULL :=    'SELECT '
                   || LSSELECT
                   || ' FROM dual ';

      OPEN AQPARTNO FOR LSSQLNULL USING LSPARTNO;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END COPYSPECIFICATIONPB;


   FUNCTION COPYSPECIFICATION(
      ASFROMPARTNO               IN       IAPITYPE.PARTNO_TYPE,
      ANFROMREVISION             IN       IAPITYPE.REVISION_TYPE,
      ASPARTNO                   IN OUT   IAPITYPE.PARTNO_TYPE,
      ASFRAMEID                  IN       IAPITYPE.FRAMENO_TYPE,
      ANFRAMEREVISION            IN       IAPITYPE.FRAMEREVISION_TYPE,
      ANFRAMEOWNER               IN       IAPITYPE.OWNER_TYPE,
      ANWORKFLOWGROUPID          IN       IAPITYPE.ID_TYPE,
      ANACCESSGROUPID            IN       IAPITYPE.ID_TYPE,
      ANSPECTYPEID               IN       IAPITYPE.ID_TYPE,
      ADPLANNEDEFFECTIVEDATE     IN       IAPITYPE.DATE_TYPE,
      ANNEWREVISION              IN       IAPITYPE.REVISION_TYPE,
      ANMULTILANGUAGE            IN       IAPITYPE.BOOLEAN_TYPE,
      ANUOMTYPE                  IN       IAPITYPE.BOOLEAN_TYPE,
      ANMASKID                   IN       IAPITYPE.ID_TYPE,
      ASDESCRIPTION              IN       IAPITYPE.DESCRIPTION_TYPE,
      ANINTERNATIONALLINKED      IN       IAPITYPE.BOOLEAN_TYPE DEFAULT 0,
      
      
      AQERRORS                   IN OUT   IAPITYPE.REF_TYPE,
      ABCLEANERRORS              IN       IAPITYPE.BOOLEAN_TYPE DEFAULT 0)
      
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS































      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'CopySpecification';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LRCOPYSPEC                    IAPITYPE.SPCOPYSPECREC_TYPE;
      LSINTERNATIONALPARTNO         IAPITYPE.PARTNO_TYPE;
      LNINTERNATIONALREVISION       IAPITYPE.REVISION_TYPE;
      LSINTERNATIONAL               IAPITYPE.INTL_TYPE;

      LNEXIST                       IAPITYPE.NUMVAL_TYPE;
      
      LNERROR                       IAPITYPE.ERRORNUM_TYPE;

BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Initialize parameters',
                           IAPICONSTANT.INFOLEVEL_3 );
      GTERRORS.DELETE;
      LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                             AQERRORS );
      GTCOPYSPEC.DELETE;
      LRCOPYSPEC.FROMPARTNO := ASFROMPARTNO;
      LRCOPYSPEC.FROMREVISION := ANFROMREVISION;
      LRCOPYSPEC.PARTNO := ASPARTNO;
      LRCOPYSPEC.FRAMEID := ASFRAMEID;
      LRCOPYSPEC.FRAMEREVISION := ANFRAMEREVISION;
      LRCOPYSPEC.FRAMEOWNER := ANFRAMEOWNER;
      LRCOPYSPEC.WORKFLOWGROUPID := ANWORKFLOWGROUPID;
      LRCOPYSPEC.ACCESSGROUPID := ANACCESSGROUPID;
      LRCOPYSPEC.SPECTYPEID := ANSPECTYPEID;
      LRCOPYSPEC.PED := ADPLANNEDEFFECTIVEDATE;
      LRCOPYSPEC.NEWREVISION := NULL;
      
      LRCOPYSPEC.MULTILANGUAGE := ANMULTILANGUAGE;
      LRCOPYSPEC.UOMTYPE := ANUOMTYPE;
      LRCOPYSPEC.MASKID := ANMASKID;
      LRCOPYSPEC.DESCRIPTION := ASDESCRIPTION;
      LRCOPYSPEC.INTERNATIONALLINKED := ANINTERNATIONALLINKED;
      GTCOPYSPEC( 0 ) := LRCOPYSPEC;



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Call CUSTOM Pre-Action',
                           IAPICONSTANT.INFOLEVEL_3 );
      LNRETVAL := IAPIGENERAL.EXECUTECUSTOMFUNCTION( GSSOURCE,
                                                     LSMETHOD,
                                                     'PRE',
                                                     GTERRORS );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IF ( LNRETVAL = IAPICONSTANTDBERROR.DBERR_ERRORLIST )
         THEN
            
            LNRETVAL := IAPIGENERAL.ERRORLISTCONTAINSERRORS( GTERRORS );

            IF ( LNRETVAL = IAPICONSTANTDBERROR.DBERR_SUCCESS )
            THEN
               
               LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                                      AQERRORS );
               RETURN( IAPICONSTANTDBERROR.DBERR_ERRORLIST );
            END IF;
         ELSE
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN( LNRETVAL );
         END IF;

      END IF;

      
      IF (ABCLEANERRORS = 1)
      THEN
      
        
        IAPIGENERAL.CLOSEERRORCURSOR(LNRETVAL, AQERRORS);
      
      END IF;
      

      LRCOPYSPEC := GTCOPYSPEC( 0 );



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'PreConditions',
                           IAPICONSTANT.INFOLEVEL_3 );



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      BEGIN
         SELECT INT_PART_NO,
                INT_PART_REV
           INTO LSINTERNATIONALPARTNO,
                LNINTERNATIONALREVISION
           FROM SPECIFICATION_HEADER
          WHERE PART_NO = LRCOPYSPEC.FROMPARTNO
            AND REVISION = LRCOPYSPEC.FROMREVISION;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_PARTREVNOTFOUND,
                                                  LRCOPYSPEC.FROMPARTNO,
                                                  LRCOPYSPEC.FROMREVISION );
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN LNRETVAL;
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL );
      END;

      IF IAPIGENERAL.SESSION.SETTINGS.INTERNATIONAL
      THEN
         LSINTERNATIONAL := '1';
      ELSE
         LSINTERNATIONAL := '0';
      END IF;

      
      

      LNRETVAL :=
         COPYSPEC( LRCOPYSPEC.FROMPARTNO,
                   LRCOPYSPEC.FROMREVISION,
                   LRCOPYSPEC.PARTNO,
                   LRCOPYSPEC.FRAMEID,
                   LRCOPYSPEC.FRAMEREVISION,
                   LRCOPYSPEC.FRAMEOWNER,
                   LRCOPYSPEC.WORKFLOWGROUPID,
                   LRCOPYSPEC.ACCESSGROUPID,
                   LRCOPYSPEC.SPECTYPEID,
                   LRCOPYSPEC.PED,
                   LRCOPYSPEC.NEWREVISION,
                   LSINTERNATIONAL,
                   LSINTERNATIONALPARTNO,
                   LNINTERNATIONALREVISION,
                   LRCOPYSPEC.INTERNATIONALLINKED,
                   LRCOPYSPEC.MULTILANGUAGE,
                   LRCOPYSPEC.UOMTYPE,
                   LRCOPYSPEC.MASKID,
                   LRCOPYSPEC.DESCRIPTION,
                   AQERRORS );

   BEGIN
       SELECT COUNT(1) INTO LNEXIST FROM SYS.USER_TABLES  WHERE TABLE_NAME = 'RNDTBOMHEADER';
       IF LNEXIST > 0 THEN
         IAPIGENERAL.LOGINFO( GSSOURCE,
                              LSMETHOD,
                                 'Execute <'
                              || 'f_save_rndtbomheader'
                              || '>',
                              IAPICONSTANT.INFOLEVEL_3 );


          LNERROR := F_SAVE_RNDTBOMHEADER( LRCOPYSPEC.FROMPARTNO, LRCOPYSPEC.FROMREVISION, LRCOPYSPEC.PARTNO, LRCOPYSPEC.NEWREVISION );
    END IF;
    IF ( LNERROR <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
    THEN
       IF ( LNERROR = IAPICONSTANTDBERROR.DBERR_ERRORLIST )
       THEN
          RETURN( IAPICONSTANTDBERROR.DBERR_ERRORLIST );
       ELSE
          IAPIGENERAL.LOGERROR( GSSOURCE,
                                LSMETHOD,
                                IAPIGENERAL.GETLASTERRORTEXT( ) );
          RETURN( LNERROR );
       END IF;

    END IF;

   END;


      
      

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IF ( LNRETVAL = IAPICONSTANTDBERROR.DBERR_ERRORLIST )
         THEN
            RETURN( IAPICONSTANTDBERROR.DBERR_ERRORLIST );
         ELSE
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN( LNRETVAL );
         END IF;

      END IF;

      GTCOPYSPEC( 0 ) := LRCOPYSPEC;





      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Call CUSTOM Post-Action',
                           IAPICONSTANT.INFOLEVEL_3 );
      LNRETVAL := IAPIGENERAL.EXECUTECUSTOMFUNCTION( GSSOURCE,
                                                     LSMETHOD,
                                                     'POST',
                                                     GTERRORS );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IF ( LNRETVAL = IAPICONSTANTDBERROR.DBERR_ERRORLIST )
         THEN
            
            
            LNRETVAL := IAPIGENERAL.ERRORLISTCONTAINSERRORS( GTERRORS );

            IF ( LNRETVAL = IAPICONSTANTDBERROR.DBERR_SUCCESS )
            THEN
            
                
                
                
                
                LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                                       AQERRORS );
                RETURN( IAPICONSTANTDBERROR.DBERR_ERRORLIST );
            
            ELSE
               
               LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                                      AQERRORS );
            END IF;
            
         ELSE
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN( LNRETVAL );
         END IF;
      END IF;

      
      
      
      




      ASPARTNO := GTCOPYSPEC( 0 ).PARTNO;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );

   EXCEPTION
      WHEN OTHERS
      THEN
         
         

         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END COPYSPECIFICATION;


   FUNCTION LOCALIZESPECIFICATIONPB(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ASFRAMEID                  IN       IAPITYPE.FRAMENO_TYPE,
      ANFRAMEREVISION            IN       IAPITYPE.FRAMEREVISION_TYPE,
      ANFRAMEOWNER               IN       IAPITYPE.OWNER_TYPE,
      ANWORKFLOWGROUPID          IN       IAPITYPE.ID_TYPE,
      ANACCESSGROUPID            IN       IAPITYPE.ID_TYPE,
      ANSPECTYPEID               IN       IAPITYPE.ID_TYPE,
      ADPLANNEDEFFECTIVEDATE     IN       IAPITYPE.DATE_TYPE,
      ANNEWREVISION              IN       IAPITYPE.REVISION_TYPE,
      ANMULTILANGUAGE            IN       IAPITYPE.BOOLEAN_TYPE,
      ANUOMTYPE                  IN       IAPITYPE.BOOLEAN_TYPE,
      ANMASKID                   IN       IAPITYPE.ID_TYPE,
      ASDESCRIPTION              IN       IAPITYPE.DESCRIPTION_TYPE,
      ASINTLPARTNO               IN       IAPITYPE.PARTNO_TYPE,
      ANINTLREVISION             IN       IAPITYPE.ID_TYPE,
      AQPARTNO                   OUT      IAPITYPE.REF_TYPE,
      AQERRORS                   IN OUT   IAPITYPE.REF_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS































      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'LocalizeSpecificationPb';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LSSQL                         VARCHAR2( 8192 ) := NULL;
      LSSQLNULL                     VARCHAR2( 8192 ) := NULL;
      LSSELECT                      VARCHAR2( 4096 ) :=    ':PartNo '
                                                        || IAPICONSTANTCOLUMN.PARTNOCOL;
      LSPARTNO                      IAPITYPE.PARTNO_TYPE;
   BEGIN





      IF ( AQPARTNO%ISOPEN )
      THEN
         CLOSE AQPARTNO;
      END IF;

      LSSQLNULL :=    'SELECT '
                   || LSSELECT
                   || ' FROM dual';

      OPEN AQPARTNO FOR LSSQLNULL USING LSPARTNO;

      GTERRORS.DELETE;
      LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                             AQERRORS );



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );
      LSPARTNO := ASPARTNO;
      LNRETVAL :=
         IAPISPECIFICATION.LOCALIZESPECIFICATION( LSPARTNO,
                                                  ASFRAMEID,
                                                  ANFRAMEREVISION,
                                                  ANFRAMEOWNER,
                                                  ANWORKFLOWGROUPID,
                                                  ANACCESSGROUPID,
                                                  ANSPECTYPEID,
                                                  ADPLANNEDEFFECTIVEDATE,
                                                  ANNEWREVISION,
                                                  ANMULTILANGUAGE,
                                                  ANUOMTYPE,
                                                  ANMASKID,
                                                  ASDESCRIPTION,
                                                  ASINTLPARTNO,
                                                  ANINTLREVISION,
                                                  AQERRORS );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN( LNRETVAL );
      END IF;

      IF ( AQPARTNO%ISOPEN )
      THEN
         CLOSE AQPARTNO;
      END IF;

      LSSQLNULL :=    'SELECT '
                   || LSSELECT
                   || ' FROM dual ';

      OPEN AQPARTNO FOR LSSQLNULL USING LSPARTNO;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END LOCALIZESPECIFICATIONPB;


   FUNCTION LOCALIZESPECIFICATION(
      ASPARTNO                   IN OUT   IAPITYPE.PARTNO_TYPE,
      ASFRAMEID                  IN       IAPITYPE.FRAMENO_TYPE,
      ANFRAMEREVISION            IN       IAPITYPE.FRAMEREVISION_TYPE,
      ANFRAMEOWNER               IN       IAPITYPE.OWNER_TYPE,
      ANWORKFLOWGROUPID          IN       IAPITYPE.ID_TYPE,
      ANACCESSGROUPID            IN       IAPITYPE.ID_TYPE,
      ANSPECTYPEID               IN       IAPITYPE.ID_TYPE,
      ADPLANNEDEFFECTIVEDATE     IN       IAPITYPE.DATE_TYPE,
      ANNEWREVISION              IN       IAPITYPE.REVISION_TYPE,
      ANMULTILANGUAGE            IN       IAPITYPE.BOOLEAN_TYPE,
      ANUOMTYPE                  IN       IAPITYPE.BOOLEAN_TYPE,
      ANMASKID                   IN       IAPITYPE.ID_TYPE,
      ASDESCRIPTION              IN       IAPITYPE.DESCRIPTION_TYPE,
      ASINTLPARTNO               IN       IAPITYPE.PARTNO_TYPE,
      ANINTLREVISION             IN       IAPITYPE.REVISION_TYPE,
      AQERRORS                   IN OUT   IAPITYPE.REF_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS































      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'LocalizeSpecification';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LRCOPYSPEC                    IAPITYPE.SPCOPYSPECREC_TYPE;
      LSINTERNATIONALPARTNO         IAPITYPE.PARTNO_TYPE;
      LNINTERNATIONALREVISION       IAPITYPE.REVISION_TYPE;
      LSINTERNATIONAL               IAPITYPE.INTL_TYPE;
      LNINTERNATIONAL               IAPITYPE.BOOLEAN_TYPE;
   BEGIN
   


      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Initialize parameters',
                           IAPICONSTANT.INFOLEVEL_3 );
      GTERRORS.DELETE;
      LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                             AQERRORS );
      GTCOPYSPEC.DELETE;
      LRCOPYSPEC.FROMPARTNO := ASINTLPARTNO;
      LRCOPYSPEC.FROMREVISION := ANINTLREVISION;
      LRCOPYSPEC.PARTNO := ASPARTNO;
      LRCOPYSPEC.FRAMEID := ASFRAMEID;
      LRCOPYSPEC.FRAMEREVISION := ANFRAMEREVISION;
      LRCOPYSPEC.FRAMEOWNER := ANFRAMEOWNER;
      LRCOPYSPEC.WORKFLOWGROUPID := ANWORKFLOWGROUPID;
      LRCOPYSPEC.ACCESSGROUPID := ANACCESSGROUPID;
      LRCOPYSPEC.SPECTYPEID := ANSPECTYPEID;
      LRCOPYSPEC.PED := ADPLANNEDEFFECTIVEDATE;
      
      
      
      
      
      
      SELECT NVL(   MAX( REVISION )
                  + 1,
                  1 )
        INTO LRCOPYSPEC.NEWREVISION
        FROM SPECIFICATION_HEADER
       WHERE PART_NO = ASPARTNO;
      
      LRCOPYSPEC.MULTILANGUAGE := ANMULTILANGUAGE;
      LRCOPYSPEC.UOMTYPE := ANUOMTYPE;
      LRCOPYSPEC.MASKID := ANMASKID;
      LRCOPYSPEC.DESCRIPTION := ASDESCRIPTION;
      GTCOPYSPEC( 0 ) := LRCOPYSPEC;



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Call CUSTOM Pre-Action',
                           IAPICONSTANT.INFOLEVEL_3 );
      LNRETVAL := IAPIGENERAL.EXECUTECUSTOMFUNCTION( GSSOURCE,
                                                     LSMETHOD,
                                                     'PRE',
                                                     GTERRORS );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IF ( LNRETVAL = IAPICONSTANTDBERROR.DBERR_ERRORLIST )
         THEN
            
            
            LNRETVAL := IAPIGENERAL.ERRORLISTCONTAINSERRORS( GTERRORS );

            IF ( LNRETVAL = IAPICONSTANTDBERROR.DBERR_SUCCESS )
            THEN
            
                
                LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                                       AQERRORS );
                RETURN( IAPICONSTANTDBERROR.DBERR_ERRORLIST );
            
            ELSE
               
               LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                                      AQERRORS );
            END IF;
            
         ELSE
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN( LNRETVAL );
         END IF;
      END IF;

      LRCOPYSPEC := GTCOPYSPEC( 0 );



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'PreConditions',
                           IAPICONSTANT.INFOLEVEL_3 );
      
      
      LNRETVAL := ISINTERNATIONAL( ASINTLPARTNO,
                                   ANINTLREVISION,
                                   LNINTERNATIONAL );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN( LNRETVAL );
      END IF;

      IF ( LNINTERNATIONAL = 0 )
      THEN
         LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_SPECMUSTBEINTL,
                                               ASINTLPARTNO,
                                               ANINTLREVISION );
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN( IAPICONSTANTDBERROR.DBERR_SPECMUSTBEINTL );
      END IF;




      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      BEGIN
         SELECT INT_PART_NO,
                INT_PART_REV
           INTO LSINTERNATIONALPARTNO,
                LNINTERNATIONALREVISION
           FROM SPECIFICATION_HEADER
          WHERE PART_NO = LRCOPYSPEC.FROMPARTNO
            AND REVISION = LRCOPYSPEC.FROMREVISION;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_PARTREVNOTFOUND,
                                                  ASINTLPARTNO,
                                                  ANINTLREVISION );
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN LNRETVAL;
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL );
      END;

      IF IAPIGENERAL.SESSION.SETTINGS.INTERNATIONAL
      THEN
         LSINTERNATIONAL := '1';
      ELSE
         LSINTERNATIONAL := '0';
      END IF;

      
      

      LNRETVAL :=
         COPYSPEC( LRCOPYSPEC.FROMPARTNO,
                   LRCOPYSPEC.FROMREVISION,
                   LRCOPYSPEC.PARTNO,
                   LRCOPYSPEC.FRAMEID,
                   LRCOPYSPEC.FRAMEREVISION,
                   LRCOPYSPEC.FRAMEOWNER,
                   LRCOPYSPEC.WORKFLOWGROUPID,
                   LRCOPYSPEC.ACCESSGROUPID,
                   LRCOPYSPEC.SPECTYPEID,
                   LRCOPYSPEC.PED,
                   LRCOPYSPEC.NEWREVISION,
                   LSINTERNATIONAL,
                   LSINTERNATIONALPARTNO,   
                   LNINTERNATIONALREVISION,   
                   1,   
                   LRCOPYSPEC.MULTILANGUAGE,
                   LRCOPYSPEC.UOMTYPE,
                   LRCOPYSPEC.MASKID,
                   LRCOPYSPEC.DESCRIPTION,
                   AQERRORS );

      
      

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IF ( LNRETVAL = IAPICONSTANTDBERROR.DBERR_ERRORLIST )
         THEN
            
            
            LNRETVAL := IAPIGENERAL.ERRORLISTCONTAINSERRORS( GTERRORS );

            IF ( LNRETVAL = IAPICONSTANTDBERROR.DBERR_SUCCESS )
            THEN
            
               
               LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                                       AQERRORS );

                RETURN( IAPICONSTANTDBERROR.DBERR_ERRORLIST );
            
            ELSE
               
               LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                                      AQERRORS );
            END IF;
            
         ELSE
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN( LNRETVAL );
         END IF;
      END IF;




      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Call CUSTOM Post-Action',
                           IAPICONSTANT.INFOLEVEL_3 );
      LNRETVAL := IAPIGENERAL.EXECUTECUSTOMFUNCTION( GSSOURCE,
                                                     LSMETHOD,
                                                     'POST',
                                                     GTERRORS );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IF ( LNRETVAL = IAPICONSTANTDBERROR.DBERR_ERRORLIST )
         THEN
            
            
            LNRETVAL := IAPIGENERAL.ERRORLISTCONTAINSERRORS( GTERRORS );

            IF ( LNRETVAL = IAPICONSTANTDBERROR.DBERR_SUCCESS )
            THEN
            
               
                LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                                       AQERRORS );
                RETURN( IAPICONSTANTDBERROR.DBERR_ERRORLIST );
            
            ELSE
               
               LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                                      AQERRORS );
            END IF;
            
         ELSE
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN( LNRETVAL );
         END IF;
      END IF;




      ASPARTNO := GTCOPYSPEC( 0 ).PARTNO;
      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         
         

         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END LOCALIZESPECIFICATION;



   FUNCTION CREATESPECIFICATIONPB(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE,
      ASDESCRIPTION              IN       IAPITYPE.DESCRIPTION_TYPE,
      ASCREATEDBY                IN       IAPITYPE.USERID_TYPE,
      ADPLANNEDEFFECTIVEDATE     IN       IAPITYPE.DATE_TYPE,
      ASFRAMEID                  IN       IAPITYPE.FRAMENO_TYPE,
      ANFRAMEREVISION            IN       IAPITYPE.FRAMEREVISION_TYPE,
      ANFRAMEOWNER               IN       IAPITYPE.OWNER_TYPE,
      ANSPECTYPEID               IN       IAPITYPE.ID_TYPE,
      ANWORKFLOWGROUPID          IN       IAPITYPE.ID_TYPE,
      ANACCESSGROUPID            IN       IAPITYPE.ID_TYPE,
      ANMULTILANGUAGE            IN       IAPITYPE.BOOLEAN_TYPE,
      ANUOMTYPE                  IN       IAPITYPE.BOOLEAN_TYPE,
      ANMASKID                   IN       IAPITYPE.ID_TYPE,
      AQPARTNO                   OUT      IAPITYPE.REF_TYPE,
      AQERRORS                   IN OUT   IAPITYPE.REF_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS



























      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'CreateSpecificationPb';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LSSQL                         VARCHAR2( 8192 ) := NULL;
      LSSQLNULL                     VARCHAR2( 8192 ) := NULL;
      LSSELECT                      VARCHAR2( 4096 ) :=    ':PartNo '
                                                        || IAPICONSTANTCOLUMN.PARTNOCOL;
      LSPARTNO                      IAPITYPE.PARTNO_TYPE;
   BEGIN





      IF ( AQPARTNO%ISOPEN )
      THEN
         CLOSE AQPARTNO;
      END IF;

      LSSQLNULL :=    'SELECT '
                   || LSSELECT
                   || ' FROM dual';

      OPEN AQPARTNO FOR LSSQLNULL USING LSPARTNO;

      GTERRORS.DELETE;
      LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                             AQERRORS );



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );
      LSPARTNO := ASPARTNO;

      
      GBLOGINTOITSCHS := FALSE;

      LNRETVAL :=
         IAPISPECIFICATION.CREATESPECIFICATION( LSPARTNO,
                                                ANREVISION,
                                                ASDESCRIPTION,
                                                ASCREATEDBY,
                                                ADPLANNEDEFFECTIVEDATE,
                                                ASFRAMEID,
                                                ANFRAMEREVISION,
                                                ANFRAMEOWNER,
                                                ANSPECTYPEID,
                                                ANWORKFLOWGROUPID,
                                                ANACCESSGROUPID,
                                                ANMULTILANGUAGE,
                                                ANUOMTYPE,
                                                ANMASKID,
                                                AQERRORS );

      
      GBLOGINTOITSCHS := TRUE;

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN( LNRETVAL );
      END IF;

      IF ( AQPARTNO%ISOPEN )
      THEN
         CLOSE AQPARTNO;
      END IF;

      LSSQLNULL :=    'SELECT '
                   || LSSELECT
                   || ' FROM dual ';

      OPEN AQPARTNO FOR LSSQLNULL USING LSPARTNO;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END CREATESPECIFICATIONPB;


   FUNCTION CREATESPECIFICATION(
      ASPARTNO                   IN OUT   IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE,
      ASDESCRIPTION              IN       IAPITYPE.DESCRIPTION_TYPE,
      ASCREATEDBY                IN       IAPITYPE.USERID_TYPE,
      ADPLANNEDEFFECTIVEDATE     IN       IAPITYPE.DATE_TYPE,
      ASFRAMEID                  IN       IAPITYPE.FRAMENO_TYPE,
      ANFRAMEREVISION            IN       IAPITYPE.FRAMEREVISION_TYPE,
      ANFRAMEOWNER               IN       IAPITYPE.OWNER_TYPE,
      ANSPECTYPEID               IN       IAPITYPE.ID_TYPE,
      ANWORKFLOWGROUPID          IN       IAPITYPE.ID_TYPE,
      ANACCESSGROUPID            IN       IAPITYPE.ID_TYPE,
      ANMULTILANGUAGE            IN       IAPITYPE.BOOLEAN_TYPE,
      ANUOMTYPE                  IN       IAPITYPE.BOOLEAN_TYPE,
      ANMASKID                   IN       IAPITYPE.ID_TYPE,
      AQERRORS                   IN OUT   IAPITYPE.REF_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS



























      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'CreateSpecification';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LRCREATESPEC                  IAPITYPE.SPCREATESPECREC_TYPE;
      LSINTERNATIONAL               IAPITYPE.INTL_TYPE;
      LQERRORS                      IAPITYPE.REF_TYPE;
   BEGIN





   


      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Initialize parameters',
                           IAPICONSTANT.INFOLEVEL_3 );
      GTERRORS.DELETE;
      LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                             AQERRORS );
      GTCREATESPEC.DELETE;
      LRCREATESPEC.PARTNO := ASPARTNO;
      LRCREATESPEC.PARTNOFROM := NULL;
      LRCREATESPEC.REVISION := ANREVISION;
      LRCREATESPEC.DESCRIPTION := ASDESCRIPTION;
      LRCREATESPEC.CREATEDBY := ASCREATEDBY;
      LRCREATESPEC.PLANNEDEFFECTIVE := ADPLANNEDEFFECTIVEDATE;
      LRCREATESPEC.FRAMEID := ASFRAMEID;
      LRCREATESPEC.FRAMEREV := ANFRAMEREVISION;
      LRCREATESPEC.FRAMEOWNER := ANFRAMEOWNER;
      LRCREATESPEC.CLASS3ID := ANSPECTYPEID;
      LRCREATESPEC.WORKFLOWGROUPID := ANWORKFLOWGROUPID;
      LRCREATESPEC.ACCESSGROUP := ANACCESSGROUPID;
      LRCREATESPEC.MULTILANG := ANMULTILANGUAGE;
      LRCREATESPEC.UOMTYPE := ANUOMTYPE;
      LRCREATESPEC.MASKID := ANMASKID;
      GTCREATESPEC( 0 ) := LRCREATESPEC;



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Call CUSTOM Pre-Action',
                           IAPICONSTANT.INFOLEVEL_3 );
      LNRETVAL := IAPIGENERAL.EXECUTECUSTOMFUNCTION( GSSOURCE,
                                                     LSMETHOD,
                                                     'PRE',
                                                     GTERRORS );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IF ( LNRETVAL = IAPICONSTANTDBERROR.DBERR_ERRORLIST )
         THEN
            LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                                   AQERRORS );
            RETURN( IAPICONSTANTDBERROR.DBERR_ERRORLIST );
         ELSE
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN( LNRETVAL );
         END IF;
      END IF;

      LRCREATESPEC := GTCREATESPEC( 0 );



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'PreConditions',
                           IAPICONSTANT.INFOLEVEL_3 );



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      IF IAPIGENERAL.SESSION.SETTINGS.INTERNATIONAL
      THEN
         LSINTERNATIONAL := '1';
      ELSE
         LSINTERNATIONAL := '0';
      END IF;

      
      

      LNRETVAL :=
         CREATESPEC( LRCREATESPEC.PARTNO,
                     NULL,
                     LRCREATESPEC.REVISION,
                     LRCREATESPEC.DESCRIPTION,
                     LRCREATESPEC.CREATEDBY,
                     LRCREATESPEC.PLANNEDEFFECTIVE,
                     LRCREATESPEC.FRAMEID,
                     LRCREATESPEC.FRAMEREV,
                     LRCREATESPEC.FRAMEOWNER,
                     LRCREATESPEC.CLASS3ID,
                     LRCREATESPEC.WORKFLOWGROUPID,
                     LRCREATESPEC.ACCESSGROUP,
                     LSINTERNATIONAL,
                     LRCREATESPEC.MULTILANG,
                     LRCREATESPEC.UOMTYPE,
                     LRCREATESPEC.MASKID,
                     LQERRORS );

      
      

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN LNRETVAL;
      END IF;




      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Call CUSTOM Post-Action',
                           IAPICONSTANT.INFOLEVEL_3 );
      LNRETVAL := IAPIGENERAL.EXECUTECUSTOMFUNCTION( GSSOURCE,
                                                     LSMETHOD,
                                                     'POST',
                                                     GTERRORS );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IF ( LNRETVAL = IAPICONSTANTDBERROR.DBERR_ERRORLIST )
         THEN
            LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                                   AQERRORS );
            RETURN( IAPICONSTANTDBERROR.DBERR_ERRORLIST );
         ELSE
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN( LNRETVAL );
         END IF;
      END IF;




      ASPARTNO := GTCREATESPEC( 0 ).PARTNO;
      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         
         

         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END CREATESPECIFICATION;


   FUNCTION CONVERTTOMULTILANGUAGE(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE,
      ANLANGUAGEID               IN       IAPITYPE.LANGUAGEID_TYPE,
      AQERRORS                   OUT      IAPITYPE.REF_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS















      LNACCESS                      IAPITYPE.BOOLEAN_TYPE;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'ConvertToMultiLanguage';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LNRETVAL1                     IAPITYPE.ERRORNUM_TYPE;

      CURSOR LQSPECIFICATIONTEXT
      IS
         SELECT *
           FROM SPECIFICATION_TEXT
          WHERE PART_NO = ASPARTNO
            AND REVISION = ANREVISION
            AND LANG_ID <> ANLANGUAGEID;
   BEGIN





      IF ( AQERRORS%ISOPEN )
      THEN
         CLOSE AQERRORS;
      END IF;




      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Initialize parameters',
                           IAPICONSTANT.INFOLEVEL_3 );
      GTERRORS.DELETE;
      LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                             AQERRORS );



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'PreConditions',
                           IAPICONSTANT.INFOLEVEL_3 );

      
      
      IF ( ASPARTNO IS NULL )
      THEN
         LNRETVAL := IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                         LSMETHOD,
                                                         IAPICONSTANTDBERROR.DBERR_ISMANDATORY,
                                                         'PartNo' );
         LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'asPartNo',
                                                 IAPIGENERAL.GETLASTERRORTEXT( ),
                                                 GTERRORS );
      END IF;

      
      IF ( ANREVISION IS NULL )
      THEN
         LNRETVAL := IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                         LSMETHOD,
                                                         IAPICONSTANTDBERROR.DBERR_ISMANDATORY,
                                                         'Revision' );
         LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'anRevision',
                                                 IAPIGENERAL.GETLASTERRORTEXT( ),
                                                 GTERRORS );
      END IF;

      
      LNRETVAL1 := EXISTID( ASPARTNO,
                            ANREVISION );

      IF ( LNRETVAL1 <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         LNRETVAL := IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                         LSMETHOD,
                                                         LNRETVAL1,
                                                         ASPARTNO,
                                                         ANREVISION );
         LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'asPartNo',
                                                 IAPIGENERAL.GETLASTERRORTEXT( ),
                                                 GTERRORS );
      END IF;

      
      IF ( ANLANGUAGEID IS NULL )
      THEN
         LNRETVAL := IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                         LSMETHOD,
                                                         IAPICONSTANTDBERROR.DBERR_ISMANDATORY,
                                                         'Language' );
         LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'anLanguageId',
                                                 IAPIGENERAL.GETLASTERRORTEXT( ),
                                                 GTERRORS );
      END IF;

      
      LNRETVAL := IAPISPECIFICATIONACCESS.GETMODIFIABLEACCESS( ASPARTNO,
                                                               ANREVISION,
                                                               LNACCESS );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'GetModifiableAccess',
                                                 IAPIGENERAL.GETLASTERRORTEXT( ),
                                                 GTERRORS );
      END IF;

      IF ( LNACCESS = 0 )
      THEN
         LNRETVAL := IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                         LSMETHOD,
                                                         IAPICONSTANTDBERROR.DBERR_NOUPDATEACCESS,
                                                         ASPARTNO,
                                                         ANREVISION );
         LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'Access',
                                                 IAPIGENERAL.GETLASTERRORTEXT( ),
                                                 GTERRORS );
      END IF;

      
      IF ( GTERRORS.COUNT > 0 )
      THEN
         
         LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                                AQERRORS );
         RETURN( IAPICONSTANTDBERROR.DBERR_ERRORLIST );
      END IF;

      

      


      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      INSERT INTO SPECIFICATION_PROP_LANG
                  ( PART_NO,
                    REVISION,
                    SECTION_ID,
                    SUB_SECTION_ID,
                    PROPERTY_GROUP,
                    PROPERTY,
                    ATTRIBUTE,
                    LANG_ID,
                    SEQUENCE_NO,
                    CHAR_1,
                    CHAR_2,
                    CHAR_3,
                    CHAR_4,
                    CHAR_5,
                    CHAR_6,
                    INFO,
                    INTL )
         SELECT PART_NO,
                REVISION,
                SECTION_ID,
                SUB_SECTION_ID,
                PROPERTY_GROUP,
                PROPERTY,
                ATTRIBUTE,
                ANLANGUAGEID,
                SEQUENCE_NO,
                CHAR_1,
                CHAR_2,
                CHAR_3,
                CHAR_4,
                CHAR_5,
                CHAR_6,
                INFO,
                INTL
           FROM SPECIFICATION_PROP
          WHERE PART_NO = ASPARTNO
            AND REVISION = ANREVISION
            AND (    CHAR_1 IS NOT NULL
                  OR CHAR_2 IS NOT NULL
                  OR CHAR_3 IS NOT NULL
                  OR CHAR_4 IS NOT NULL
                  OR CHAR_5 IS NOT NULL
                  OR CHAR_6 IS NOT NULL
                  OR INFO IS NOT NULL );

      FOR LNRT IN LQSPECIFICATIONTEXT
      LOOP
         INSERT INTO SPECIFICATION_TEXT
                     ( PART_NO,
                       REVISION,
                       SECTION_ID,
                       SECTION_REV,
                       SUB_SECTION_ID,
                       SUB_SECTION_REV,
                       TEXT,
                       TEXT_TYPE,
                       TEXT_TYPE_REV,
                       LANG_ID )
              VALUES ( LNRT.PART_NO,
                       LNRT.REVISION,
                       LNRT.SECTION_ID,
                       LNRT.SECTION_REV,
                       LNRT.SUB_SECTION_ID,
                       LNRT.SUB_SECTION_REV,
                       LNRT.TEXT,
                       LNRT.TEXT_TYPE,
                       LNRT.TEXT_TYPE_REV,
                       ANLANGUAGEID );
      END LOOP;

      UPDATE SPECIFICATION_HEADER
         SET MULTILANG = 1
       WHERE PART_NO = ASPARTNO
         AND REVISION = ANREVISION;

      
      LNRETVAL := LOGCHANGES( ASPARTNO,
                              ANREVISION );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN( LNRETVAL );
      END IF;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END CONVERTTOMULTILANGUAGE;


   FUNCTION CONVERTTOSINGLELANGUAGE(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE,
      AQERRORS                   OUT      IAPITYPE.REF_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS
















      LNACCESS                      IAPITYPE.BOOLEAN_TYPE;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'ConvertToSingleLanguage';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LNRETVAL1                     IAPITYPE.ERRORNUM_TYPE;
   BEGIN





      IF ( AQERRORS%ISOPEN )
      THEN
         CLOSE AQERRORS;
      END IF;




      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Initialize parameters',
                           IAPICONSTANT.INFOLEVEL_3 );
      GTERRORS.DELETE;
      LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                             AQERRORS );



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'PreConditions',
                           IAPICONSTANT.INFOLEVEL_3 );

      
      
      IF ( ASPARTNO IS NULL )
      THEN
         LNRETVAL := IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                         LSMETHOD,
                                                         IAPICONSTANTDBERROR.DBERR_ISMANDATORY,
                                                         'PartNo' );
         LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'asPartNo',
                                                 IAPIGENERAL.GETLASTERRORTEXT( ),
                                                 GTERRORS );
      END IF;

      
      IF ( ANREVISION IS NULL )
      THEN
         LNRETVAL := IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                         LSMETHOD,
                                                         IAPICONSTANTDBERROR.DBERR_ISMANDATORY,
                                                         'Revision' );
         LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'anRevision',
                                                 IAPIGENERAL.GETLASTERRORTEXT( ),
                                                 GTERRORS );
      END IF;

      
      LNRETVAL1 := EXISTID( ASPARTNO,
                            ANREVISION );

      IF ( LNRETVAL1 <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         LNRETVAL := IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                         LSMETHOD,
                                                         LNRETVAL1,
                                                         ASPARTNO,
                                                         ANREVISION );
         LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'asPartNo',
                                                 IAPIGENERAL.GETLASTERRORTEXT( ),
                                                 GTERRORS );
      END IF;

      
      LNRETVAL := IAPISPECIFICATIONACCESS.GETMODIFIABLEACCESS( ASPARTNO,
                                                               ANREVISION,
                                                               LNACCESS );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'GetModifiableAccess',
                                                 IAPIGENERAL.GETLASTERRORTEXT( ),
                                                 GTERRORS );
      END IF;

      IF ( LNACCESS = 0 )
      THEN
         LNRETVAL := IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                         LSMETHOD,
                                                         IAPICONSTANTDBERROR.DBERR_NOUPDATEACCESS,
                                                         ASPARTNO,
                                                         ANREVISION );
         LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'Access',
                                                 IAPIGENERAL.GETLASTERRORTEXT( ),
                                                 GTERRORS );
      END IF;

      
      IF ( GTERRORS.COUNT > 0 )
      THEN
         
         LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                                AQERRORS );
         RETURN( IAPICONSTANTDBERROR.DBERR_ERRORLIST );
      END IF;




      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      DELETE FROM SPECIFICATION_PROP_LANG
            WHERE PART_NO = ASPARTNO
              AND REVISION = ANREVISION;

      DELETE FROM SPECIFICATION_TEXT
            WHERE PART_NO = ASPARTNO
              AND REVISION = ANREVISION
              AND LANG_ID > 1;

      UPDATE SPECIFICATION_HEADER
         SET MULTILANG = 0
       WHERE PART_NO = ASPARTNO
         AND REVISION = ANREVISION;

      
      LNRETVAL := LOGCHANGES( ASPARTNO,
                              ANREVISION );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN( LNRETVAL );
      END IF;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END CONVERTTOSINGLELANGUAGE;


   FUNCTION SYNCHRONISEALLINTERNATIONAL
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS








      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'SynchroniseAllInternational';
      LNJOBID                       IAPITYPE.JOBID_TYPE;
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;

      CURSOR LQPARTS
      IS
         SELECT DISTINCT SH.PART_NO
                    FROM SPECIFICATION_HEADER SH
                   WHERE SH.INTL = '1';
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );
      LNRETVAL := IAPIJOBLOGGING.STARTJOB( LSMETHOD,
                                           LNJOBID );
      COMMIT;

      
      FOR LNPART IN LQPARTS
      LOOP
         LNRETVAL := SYNCHRONISEONEINTERNATIONAL( LNPART.PART_NO );

         IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN( LNRETVAL );
         END IF;
      END LOOP;

      LNRETVAL := IAPIJOBLOGGING.ENDJOB( LNJOBID );
      COMMIT;
      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END SYNCHRONISEALLINTERNATIONAL;


   FUNCTION SYNCHRONISEALLLOCAL
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS








      LNJOBID                       IAPITYPE.JOBID_TYPE;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'SynchroniseAllLocal';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;

      CURSOR LQPARTS
      IS
         SELECT DISTINCT PART_NO
                    FROM SPECIFICATION_HEADER
                   WHERE INT_PART_NO IS NOT NULL;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );
      LNRETVAL := IAPIJOBLOGGING.STARTJOB( LSMETHOD,
                                           LNJOBID );

      
      FOR LNPART IN LQPARTS
      LOOP
         LNRETVAL := SYNCHRONISEONE( LNPART.PART_NO,
                                     NULL );

         IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN( LNRETVAL );
         END IF;
      END LOOP;

      LNRETVAL := IAPIJOBLOGGING.ENDJOB( LNJOBID );
      COMMIT;
      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END SYNCHRONISEALLLOCAL;


   FUNCTION TRANSFERFRAME(
      ASPARTNO                            IAPITYPE.PARTNO_TYPE,
      ANREVISION                          IAPITYPE.REVISION_TYPE,
      ASOLDFRAMENO                        IAPITYPE.FRAMENO_TYPE,
      ANOLDFRAMEREVISION                  IAPITYPE.FRAMEREVISION_TYPE,
      ANOLDFRAMEOWNER                     IAPITYPE.OWNER_TYPE,
      ASNEWFRAMENO                        IAPITYPE.FRAMENO_TYPE,
      ANNEWFRAMEREVISION                  IAPITYPE.FRAMEREVISION_TYPE,
      ANNEWFRAMEOWNER                     IAPITYPE.OWNER_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS
















      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'TransferFrame';
      
      LNMULTILANGUAGE               IAPITYPE.BOOLEAN_TYPE;

      CURSOR LQRULE
      IS
         SELECT FT_GROUP_ID
           FROM FT_FRAMES
          WHERE OLD_FRAME_NO = ASOLDFRAMENO
            AND (     ( ANOLDFRAMEREVISION BETWEEN OLD_FRAME_REV_FROM AND OLD_FRAME_REV_TO )
                  OR (     OLD_FRAME_REV_FROM = 0
                       AND OLD_FRAME_REV_TO = 0 )
                  OR (     OLD_FRAME_REV_FROM <= ANOLDFRAMEREVISION
                       AND OLD_FRAME_REV_TO = 0 )
                  OR (     OLD_FRAME_REV_FROM = 0
                       AND OLD_FRAME_REV_TO >= ANOLDFRAMEREVISION ) )
            AND OLD_FRAME_OWNER = ANOLDFRAMEOWNER
            AND NEW_FRAME_NO = ASNEWFRAMENO
            AND (     ( ANNEWFRAMEREVISION BETWEEN NEW_FRAME_REV_FROM AND NEW_FRAME_REV_TO )
                  OR (     NEW_FRAME_REV_FROM = 0
                       AND NEW_FRAME_REV_TO = 0 )
                  OR (     NEW_FRAME_REV_FROM <= ANNEWFRAMEREVISION
                       AND NEW_FRAME_REV_TO = 0 )
                  OR (     NEW_FRAME_REV_FROM = 0
                       AND NEW_FRAME_REV_TO >= ANNEWFRAMEREVISION ) )
            AND NEW_FRAME_OWNER = ANNEWFRAMEOWNER;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

        
        SELECT MULTILANG
        INTO LNMULTILANGUAGE
        FROM SPECIFICATION_HEADER
        WHERE PART_NO = ASPARTNO
            AND REVISION = ANREVISION;
       

      
      FOR LNRULE IN LQRULE
      LOOP
         LNRETVAL := TRANSFERPROPERTIES( ASPARTNO,
                                         ANREVISION,
                                         ASNEWFRAMENO,
                                         ANNEWFRAMEREVISION,
                                         ANNEWFRAMEOWNER,
                                         LNRULE.FT_GROUP_ID );

         IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN( LNRETVAL );
         END IF;

         
         
         
         
         LNRETVAL := ADDPROPSTOOPTPROPGROUPS( ASPARTNO,
                                              ANREVISION,
                                              ASNEWFRAMENO,
                                              ANNEWFRAMEREVISION,
                                              ANNEWFRAMEOWNER );

         IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN( LNRETVAL );
         END IF;
         

         
         IF (LNMULTILANGUAGE = 1)
         THEN
         
             LNRETVAL := TRANSFERPROPERTIESMULTILANG( ASPARTNO,
                                                      ANREVISION,
                                                      ASNEWFRAMENO,
                                                      ANNEWFRAMEREVISION,
                                                      ANNEWFRAMEOWNER,
                                                      LNRULE.FT_GROUP_ID );

             IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
             THEN
                IAPIGENERAL.LOGERROR( GSSOURCE,
                                      LSMETHOD,
                                      IAPIGENERAL.GETLASTERRORTEXT( ) );
                RETURN( LNRETVAL );
             END IF;
         
         END IF;
         

         LNRETVAL := TRANSFEROBJECTSREFTEXTS( ASPARTNO,
                                              ANREVISION,
                                              LNRULE.FT_GROUP_ID,
                                              ASNEWFRAMENO,
                                              ANNEWFRAMEREVISION,
                                              ANNEWFRAMEOWNER,
                                              2 );

         IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN( LNRETVAL );
         END IF;

         LNRETVAL := TRANSFERFREETEXT( ASPARTNO,
                                       ANREVISION,
                                       LNRULE.FT_GROUP_ID,
                                       ASNEWFRAMENO,
                                       ANNEWFRAMEREVISION,
                                       ANNEWFRAMEOWNER );

         IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN( LNRETVAL );
         END IF;

         LNRETVAL := TRANSFEROBJECTSREFTEXTS( ASPARTNO,
                                              ANREVISION,
                                              LNRULE.FT_GROUP_ID,
                                              ASNEWFRAMENO,
                                              ANNEWFRAMEREVISION,
                                              ANNEWFRAMEOWNER,
                                              6 );

         IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN( LNRETVAL );
         END IF;

         LNRETVAL := TRANSFERATTACHEDSPECS( ASPARTNO,
                                            ANREVISION,
                                            LNRULE.FT_GROUP_ID,
                                            ASNEWFRAMENO,
                                            ANNEWFRAMEREVISION,
                                            ANNEWFRAMEOWNER );

         IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN( LNRETVAL );
         END IF;

         LNRETVAL := EXECUTESQLRULE( ASPARTNO,
                                     ANREVISION,
                                     LNRULE.FT_GROUP_ID );

         IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN( LNRETVAL );
         END IF;
      END LOOP;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END TRANSFERFRAME;


   FUNCTION FILLFRAMETRANSFERTABLES(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS









      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'FillFrameTransferTable';

      CURSOR LQTEXT(
         ASPARTNO                            IAPITYPE.PARTNO_TYPE,
         ANREVISION                          IAPITYPE.REVISION_TYPE )
      IS
         SELECT PART_NO,
                TEXT_TYPE,
                TEXT,
                SECTION_ID,
                SECTION_REV,
                SUB_SECTION_ID,
                SUB_SECTION_REV,
                TEXT_TYPE_REV,
                LANG_ID
           FROM SPECIFICATION_TEXT
          WHERE PART_NO = ASPARTNO
            AND REVISION = ANREVISION;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      
      BEGIN
         INSERT INTO FT_SPEC_PROP
                     ( PART_NO,
                       SECTION_ID,
                       SECTION_REV,
                       SUB_SECTION_ID,
                       SUB_SECTION_REV,
                       PROPERTY_GROUP,
                       PROPERTY_GROUP_REV,
                       PROPERTY,
                       PROPERTY_REV,
                       ATTRIBUTE,
                       ATTRIBUTE_REV,
                       UOM_ID,
                       UOM_REV,
                       TEST_METHOD,
                       TEST_METHOD_REV,
                       SEQUENCE_NO,
                       NUM_1,
                       NUM_2,
                       NUM_3,
                       NUM_4,
                       NUM_5,
                       NUM_6,
                       NUM_7,
                       NUM_8,
                       NUM_9,
                       NUM_10,
                       CHAR_1,
                       CHAR_2,
                       CHAR_3,
                       CHAR_4,
                       CHAR_5,
                       CHAR_6,
                       BOOLEAN_1,
                       BOOLEAN_2,
                       BOOLEAN_3,
                       BOOLEAN_4,
                       DATE_1,
                       DATE_2,
                       CHARACTERISTIC,
                       CHARACTERISTIC_REV,
                       ASSOCIATION,
                       ASSOCIATION_REV,
                       INTL,
                       AS_2,
                       AS_REV_2,
                       AS_3,
                       AS_REV_3,
                       TM_SET_NO,
                       TM_DET_1,
                       TM_DET_2,
                       TM_DET_3,
                       TM_DET_4,
                       INFO )
            SELECT ASPARTNO,
                   SECTION_ID,
                   SECTION_REV,
                   SUB_SECTION_ID,
                   SUB_SECTION_REV,
                   PROPERTY_GROUP,
                   PROPERTY_GROUP_REV,
                   PROPERTY,
                   PROPERTY_REV,
                   ATTRIBUTE,
                   ATTRIBUTE_REV,
                   UOM_ID,
                   UOM_REV,
                   TEST_METHOD,
                   TEST_METHOD_REV,
                   SEQUENCE_NO,
                   NUM_1,
                   NUM_2,
                   NUM_3,
                   NUM_4,
                   NUM_5,
                   NUM_6,
                   NUM_7,
                   NUM_8,
                   NUM_9,
                   NUM_10,
                   CHAR_1,
                   CHAR_2,
                   CHAR_3,
                   CHAR_4,
                   CHAR_5,
                   CHAR_6,
                   BOOLEAN_1,
                   BOOLEAN_2,
                   BOOLEAN_3,
                   BOOLEAN_4,
                   DATE_1,
                   DATE_2,
                   CHARACTERISTIC,
                   CHARACTERISTIC_REV,
                   ASSOCIATION,
                   ASSOCIATION_REV,
                   INTL,
                   AS_2,
                   AS_REV_2,
                   AS_3,
                   AS_REV_3,
                   TM_SET_NO,
                   TM_DET_1,
                   TM_DET_2,
                   TM_DET_3,
                   TM_DET_4,
                   INFO
              FROM SPECIFICATION_PROP
             WHERE PART_NO = ASPARTNO
               AND REVISION = ANREVISION;
      EXCEPTION
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
      END;

      
      BEGIN
         INSERT INTO FT_SPEC_PROP_LANG
                     ( PART_NO,
                       SECTION_ID,
                       SUB_SECTION_ID,
                       PROPERTY_GROUP,
                       PROPERTY,
                       ATTRIBUTE,
                       LANG_ID,
                       SEQUENCE_NO,
                       CHAR_1,
                       CHAR_2,
                       CHAR_3,
                       CHAR_4,
                       CHAR_5,
                       CHAR_6,
                       INTL,
                       INFO )
            SELECT ASPARTNO,
                   SECTION_ID,
                   SUB_SECTION_ID,
                   PROPERTY_GROUP,
                   PROPERTY,
                   ATTRIBUTE,
                   LANG_ID,
                   SEQUENCE_NO,
                   CHAR_1,
                   CHAR_2,
                   CHAR_3,
                   CHAR_4,
                   CHAR_5,
                   CHAR_6,
                   INTL,
                   INFO
              FROM SPECIFICATION_PROP_LANG
             WHERE PART_NO = ASPARTNO
               AND REVISION = ANREVISION;
      EXCEPTION
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
      END;

      
      BEGIN
         INSERT INTO FT_SPEC_SECTION
                     ( PART_NO,
                       SECTION_ID,
                       SUB_SECTION_ID,
                       TYPE,
                       REF_ID,
                       REF_VER,
                       REF_INFO,
                       SEQUENCE_NO,
                       HEADER,
                       MANDATORY,
                       SECTION_SEQUENCE_NO,
                       DISPLAY_FORMAT,
                       ASSOCIATION,
                       INTL,
                       SECTION_REV,
                       SUB_SECTION_REV,
                       DISPLAY_FORMAT_REV,
                       REF_OWNER )
            SELECT ASPARTNO,
                   SECTION_ID,
                   SUB_SECTION_ID,
                   TYPE,
                   REF_ID,
                   REF_VER,
                   REF_INFO,
                   SEQUENCE_NO,
                   HEADER,
                   MANDATORY,
                   SECTION_SEQUENCE_NO,
                   DISPLAY_FORMAT,
                   ASSOCIATION,
                   INTL,
                   SECTION_REV,
                   SUB_SECTION_REV,
                   DISPLAY_FORMAT_REV,
                   REF_OWNER
              FROM SPECIFICATION_SECTION
             WHERE PART_NO = ASPARTNO
               AND REVISION = ANREVISION;
      EXCEPTION
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
      END;

      
      BEGIN
         FOR LNROW IN LQTEXT( ASPARTNO,
                              ANREVISION )
         LOOP
            INSERT INTO FT_SPEC_TEXT
                        ( PART_NO,
                          TEXT_TYPE,
                          TEXT,
                          SECTION_ID,
                          SECTION_REV,
                          SUB_SECTION_ID,
                          SUB_SECTION_REV,
                          TEXT_TYPE_REV,
                          LANG_ID )
                 VALUES ( LNROW.PART_NO,
                          LNROW.TEXT_TYPE,
                          LNROW.TEXT,
                          LNROW.SECTION_ID,
                          LNROW.SECTION_REV,
                          LNROW.SUB_SECTION_ID,
                          LNROW.SUB_SECTION_REV,
                          LNROW.TEXT_TYPE_REV,
                          LNROW.LANG_ID );
         END LOOP;
      EXCEPTION
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
      END;

      
      BEGIN
         INSERT INTO FT_ATTACH_SPEC
                     ( PART_NO,
                       REF_ID,
                       ATTACHED_PART_NO,
                       ATTACHED_REVISION,
                       SECTION_ID,
                       SUB_SECTION_ID,
                       INTL )
            SELECT ASPARTNO,
                   REF_ID,
                   ATTACHED_PART_NO,
                   ATTACHED_REVISION,
                   SECTION_ID,
                   SUB_SECTION_ID,
                   INTL
              FROM ATTACHED_SPECIFICATION
             WHERE PART_NO = ASPARTNO
               AND REVISION = ANREVISION;
      EXCEPTION
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
      END;

      
      BEGIN
         INSERT INTO FT_SPEC_TM
                     ( PART_NO,
                       SECTION_ID,
                       SUB_SECTION_ID,
                       PROPERTY_GROUP,
                       PROPERTY,
                       ATTRIBUTE,
                       SEQ_NO,
                       TM_TYPE,
                       TM,
                       TM_REV,
                       TM_SET_NO )
            SELECT ASPARTNO,
                   SECTION_ID,
                   SUB_SECTION_ID,
                   PROPERTY_GROUP,
                   PROPERTY,
                   ATTRIBUTE,
                   SEQ_NO,
                   TM_TYPE,
                   TM,
                   TM_REV,
                   TM_SET_NO
              FROM SPECIFICATION_TM
             WHERE PART_NO = ASPARTNO
               AND REVISION = ANREVISION;
      EXCEPTION
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
      END;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END FILLFRAMETRANSFERTABLES;


   FUNCTION CHANGEBOMPED(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE,
      ADPLANNEDEFFECTIVEDATE     IN       IAPITYPE.DATE_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS










      CURSOR CUR_BOMS
      IS
         SELECT DISTINCT PLANT,
                         PLANT_EFFECTIVE_DATE
                    FROM BOM_HEADER
                   WHERE PART_NO = ASPARTNO
                     AND REVISION = ANREVISION;

      LNCOUNT                       PLS_INTEGER;
      LDOLDPED                      IAPITYPE.DATE_TYPE;
      LDPED                         IAPITYPE.DATE_TYPE;
      LSINSYNC                      IAPITYPE.STRING_TYPE;
      LSOUTOFSYNC                   IAPITYPE.STRINGVAL_TYPE( 2000 );
      LBCONTINUE                    BOOLEAN;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'ChangeBomPed';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );
      LSOUTOFSYNC := NULL;

      
      SELECT PLANNED_EFFECTIVE_DATE
        INTO LDOLDPED
        FROM SPECIFICATION_HEADER
       WHERE PART_NO = ASPARTNO
         AND REVISION = ANREVISION;

      FOR REC_BOM IN CUR_BOMS
      LOOP
         LBCONTINUE := FALSE;

         IF REC_BOM.PLANT_EFFECTIVE_DATE < ADPLANNEDEFFECTIVEDATE
         THEN
            LBCONTINUE := TRUE;
         ELSE
            
            IF REC_BOM.PLANT_EFFECTIVE_DATE = LDOLDPED
            THEN
               LBCONTINUE := TRUE;
            ELSE
               LBCONTINUE := FALSE;
            END IF;
         END IF;

         IF LBCONTINUE
         THEN
            LNRETVAL := VALIDATEPLANTPED( ASPARTNO,
                                          ANREVISION,
                                          REC_BOM.PLANT,
                                          ADPLANNEDEFFECTIVEDATE,
                                          0 );

            IF    LNRETVAL = IAPICONSTANTDBERROR.DBERR_SUCCESS
               OR LNRETVAL = IAPICONSTANTDBERROR.DBERR_SPECINPEDGROUP
            THEN   
               
               UPDATE BOM_HEADER
                  SET PLANT_EFFECTIVE_DATE = ADPLANNEDEFFECTIVEDATE
                WHERE PART_NO = ASPARTNO
                  AND REVISION = ANREVISION
                  AND PLANT = REC_BOM.PLANT;
            ELSE
               IF LNRETVAL = IAPICONSTANTDBERROR.DBERR_NEWPLANTPEDLTPREVPED
               THEN
                  SELECT MAX( PLANT_EFFECTIVE_DATE )
                    INTO LDPED
                    FROM BOM_HEADER
                   WHERE PART_NO = ASPARTNO
                     AND REVISION < ANREVISION
                     AND PLANT = REC_BOM.PLANT;

                  UPDATE BOM_HEADER
                     SET PLANT_EFFECTIVE_DATE =   LDPED
                                                + 1
                   WHERE PART_NO = ASPARTNO
                     AND REVISION = ANREVISION
                     AND PLANT = REC_BOM.PLANT;
               END IF;

               
               IF LDOLDPED > ADPLANNEDEFFECTIVEDATE
               THEN
                  IF LSOUTOFSYNC = ' '
                  THEN
                     LSOUTOFSYNC :=    ASPARTNO
                                    || ' ('
                                    || ANREVISION
                                    || ') - '
                                    || REC_BOM.PLANT;
                  ELSE
                     LSOUTOFSYNC :=    LSOUTOFSYNC
                                    || ', '
                                    || ASPARTNO
                                    || ' ('
                                    || ANREVISION
                                    || ') - '
                                    || REC_BOM.PLANT;
                  END IF;
               END IF;
            END IF;
         END IF;
      END LOOP;

      
      SELECT COUNT( * )
        INTO LNCOUNT
        FROM BOM_HEADER
       WHERE PART_NO = ASPARTNO
         AND REVISION = ANREVISION
         AND PLANT_EFFECTIVE_DATE <> ADPLANNEDEFFECTIVEDATE;

      IF LNCOUNT > 0
      THEN
         LSINSYNC := 'N';
      ELSE
         LSINSYNC := 'Y';
      END IF;

      UPDATE SPECIFICATION_HEADER
         SET PED_IN_SYNC = LSINSYNC
       WHERE PART_NO = ASPARTNO
         AND REVISION = ANREVISION;

      IF LSOUTOFSYNC IS NULL
      THEN
         RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
      ELSE
         LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_BOMSNOTINSYNC,
                                               LSOUTOFSYNC );
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN LNRETVAL;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END CHANGEBOMPED;


   FUNCTION CHANGEPED(
      ANPEDGROUPID               IN       IAPITYPE.ID_TYPE,
      ADPLANNEDEFFECTIVEDATE     IN       IAPITYPE.DATE_TYPE,
      ANPHASEINTOLERANCE         IN       IAPITYPE.PHASEINTOLERANCE_TYPE,
      ASOUTOFSYNC                OUT      IAPITYPE.STRINGVAL_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS











      CURSOR C_PED_GROUP
      IS
         SELECT *
           FROM SPEC_PED_GROUP
          WHERE PED_GROUP_ID = ANPEDGROUPID;

      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'ChangePed';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      FOR L_ROW IN C_PED_GROUP
      LOOP
         
         LNRETVAL := CHANGEBOMPED( L_ROW.PART_NO,
                                   L_ROW.REVISION,
                                   ADPLANNEDEFFECTIVEDATE );

         




         
         UPDATE SPECIFICATION_HEADER
            SET PLANNED_EFFECTIVE_DATE = ADPLANNEDEFFECTIVEDATE
          WHERE PART_NO = L_ROW.PART_NO
            AND REVISION = L_ROW.REVISION;

         
         UPDATE SPECIFICATION_HEADER
            SET PHASE_IN_TOLERANCE = ANPHASEINTOLERANCE
          WHERE PART_NO = L_ROW.PART_NO
            AND REVISION = L_ROW.REVISION;
      END LOOP;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END CHANGEPED;


   FUNCTION CHANGESPECPED(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE,
      ADPLANNEDEFFECTIVEDATE     IN       IAPITYPE.DATE_TYPE,
      ANPHASEINTOLERANCE         IN       IAPITYPE.PHASEINTOLERANCE_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS











      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'ChangeSpecPed';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      UPDATE SPECIFICATION_HEADER
         SET PLANNED_EFFECTIVE_DATE = ADPLANNEDEFFECTIVEDATE,
             PHASE_IN_TOLERANCE = ANPHASEINTOLERANCE
       WHERE PART_NO = ASPARTNO
         AND REVISION = ANREVISION;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END CHANGESPECPED;


   FUNCTION SETPEDINSYNC(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS









      LDPED                         IAPITYPE.DATE_TYPE;
      LSINSYNC                      IAPITYPE.STRINGVAL_TYPE( 1 );
      LNCOUNT                       PLS_INTEGER;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'SetPedInSync';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      
      SELECT PLANNED_EFFECTIVE_DATE
        INTO LDPED
        FROM SPECIFICATION_HEADER
       WHERE PART_NO = ASPARTNO
         AND REVISION = ANREVISION;

      SELECT COUNT( * )
        INTO LNCOUNT
        FROM BOM_HEADER
       WHERE PART_NO = ASPARTNO
         AND REVISION = ANREVISION
         AND PLANT_EFFECTIVE_DATE <> LDPED;

      IF LNCOUNT = 0
      THEN
         LSINSYNC := 'Y';
      ELSE
         LSINSYNC := 'N';
      END IF;

      UPDATE SPECIFICATION_HEADER
         SET PED_IN_SYNC = LSINSYNC
       WHERE PART_NO = ASPARTNO
         AND REVISION = ANREVISION;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END SETPEDINSYNC;


   FUNCTION RECLASSSPECTYPE(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANSPECTYPE                 IN       IAPITYPE.ID_TYPE,
      ANTYPE                     OUT      IAPITYPE.NUMVAL_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS
 
 
 
 
 
 

 
 

 
 
 
 
      LSSPECTYPE                    IAPITYPE.CLASS3PARTTYPE_TYPE;
      LNCOUNT                       PLS_INTEGER;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'ReclassSpecType';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      

      
      SELECT TYPE
        INTO LSSPECTYPE
        FROM CLASS3
       WHERE CLASS = ANSPECTYPE;

      
      SELECT INSTR( NVL( PARAMETER_DATA,
                         '@' ),
                    LSSPECTYPE )
        INTO LNCOUNT
        FROM INTERSPC_CFG
       WHERE PARAMETER = 'mand_classif_type';

      IF LNCOUNT = 0
      THEN
         ANTYPE := 1;
      ELSE
         
         SELECT COUNT( * )
           INTO LNCOUNT
           FROM SPECIFICATION_HEADER
          WHERE PART_NO = ASPARTNO;

         IF LNCOUNT > 0
         THEN
            ANTYPE := 2;
         ELSE
            ANTYPE := 3;
         END IF;
      END IF;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END RECLASSSPECTYPE;


   FUNCTION VALIDATESPECPED(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE,
      ADPLANNEDEFFECTIVEDATE     IN       IAPITYPE.DATE_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS















      CURSOR CUR_LOW
      IS
         SELECT BOM_HEADER.REVISION,
                PLANT_EFFECTIVE_DATE,
                STATUS.STATUS_TYPE
           FROM BOM_HEADER,
                SPECIFICATION_HEADER,
                STATUS
          WHERE BOM_HEADER.PART_NO = SPECIFICATION_HEADER.PART_NO
            AND BOM_HEADER.REVISION = SPECIFICATION_HEADER.REVISION
            AND SPECIFICATION_HEADER.STATUS = STATUS.STATUS
            AND BOM_HEADER.PART_NO = ASPARTNO
            AND BOM_HEADER.REVISION < ANREVISION
            AND BOM_HEADER.PLANT_EFFECTIVE_DATE >= ADPLANNEDEFFECTIVEDATE
            AND STATUS.STATUS_TYPE <> IAPICONSTANT.STATUSTYPE_OBSOLETE;

      CURSOR CUR_HIGH
      IS
         SELECT BOM_HEADER.REVISION,
                PLANT_EFFECTIVE_DATE,
                STATUS.STATUS_TYPE
           FROM BOM_HEADER,
                SPECIFICATION_HEADER,
                STATUS
          WHERE BOM_HEADER.PART_NO = SPECIFICATION_HEADER.PART_NO
            AND BOM_HEADER.REVISION = SPECIFICATION_HEADER.REVISION
            AND SPECIFICATION_HEADER.STATUS = STATUS.STATUS
            AND BOM_HEADER.PART_NO = ASPARTNO
            AND BOM_HEADER.REVISION > ANREVISION
            AND BOM_HEADER.PLANT_EFFECTIVE_DATE <= ADPLANNEDEFFECTIVEDATE
            AND STATUS.STATUS_TYPE <> IAPICONSTANT.STATUSTYPE_OBSOLETE;

      LNCOUNT                       NUMBER;
      LDPED                         IAPITYPE.DATE_TYPE;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'ValidateSpecPed';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      FOR REC_LOW IN CUR_LOW
      LOOP
         IF REC_LOW.STATUS_TYPE = IAPICONSTANT.STATUSTYPE_HISTORIC
         THEN
            
            SELECT COUNT( * )
              INTO LNCOUNT
              FROM STATUS_HISTORY
             WHERE PART_NO = ASPARTNO
               AND REVISION = REC_LOW.REVISION
               AND STATUS IN( SELECT STATUS
                               FROM STATUS
                              WHERE STATUS_TYPE = IAPICONSTANT.STATUSTYPE_CURRENT );

            IF LNCOUNT > 0
            THEN
               LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_NEWPLANTPEDLTPREVPED );
               IAPIGENERAL.LOGERROR( GSSOURCE,
                                     LSMETHOD,
                                     IAPIGENERAL.GETLASTERRORTEXT( ) );
               RETURN LNRETVAL;
            END IF;
         ELSE
            LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_NEWPLANTPEDLTPREVPED );
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN LNRETVAL;
         END IF;
      END LOOP;

      FOR REC_HIGH IN CUR_HIGH
      LOOP
         IF REC_HIGH.STATUS_TYPE = IAPICONSTANT.STATUSTYPE_HISTORIC
         THEN
            
            SELECT COUNT( * )
              INTO LNCOUNT
              FROM STATUS_HISTORY
             WHERE PART_NO = ASPARTNO
               AND REVISION = REC_HIGH.REVISION
               AND STATUS IN( SELECT STATUS
                               FROM STATUS
                              WHERE STATUS_TYPE = IAPICONSTANT.STATUSTYPE_CURRENT );

            IF LNCOUNT > 0
            THEN
               LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_NEWPLANTPEDGTCURRPED );
               IAPIGENERAL.LOGERROR( GSSOURCE,
                                     LSMETHOD,
                                     IAPIGENERAL.GETLASTERRORTEXT( ) );
               RETURN LNRETVAL;
            END IF;
         ELSE
            LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_NEWPLANTPEDGTCURRPED );
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN LNRETVAL;
         END IF;
      END LOOP;

      
      SELECT PLANNED_EFFECTIVE_DATE
        INTO LDPED
        FROM SPECIFICATION_HEADER
       WHERE PART_NO = ASPARTNO
         AND REVISION = ANREVISION;

      SELECT COUNT( * )
        INTO LNCOUNT
        FROM BOM_HEADER
       WHERE PART_NO = ASPARTNO
         AND REVISION = ANREVISION
         AND PLANT_EFFECTIVE_DATE < ADPLANNEDEFFECTIVEDATE
         AND PLANT_EFFECTIVE_DATE <> LDPED;

      IF LNCOUNT > 0
      THEN
         LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_PEDLOWERTHANPEDLOWERREV );
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN LNRETVAL;
      END IF;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END VALIDATESPECPED;


   FUNCTION CHECKSPECBOMPED(
      ANPEDGROUPID               IN       IAPITYPE.ID_TYPE,
      ADPLANNEDEFFECTIVEDATE     IN       IAPITYPE.DATE_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS














      CURSOR LQPED_GROUP
      IS
         SELECT *
           FROM SPEC_PED_GROUP
          WHERE PED_GROUP_ID = ANPEDGROUPID;

      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'CheckSpecBomPed';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      FOR REC_PED_GROUP IN LQPED_GROUP
      LOOP
         LNRETVAL := VALIDATESPECPED( REC_PED_GROUP.PART_NO,
                                      REC_PED_GROUP.REVISION,
                                      ADPLANNEDEFFECTIVEDATE );

         IF LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS
         THEN
            RETURN LNRETVAL;
         END IF;
      END LOOP;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END CHECKSPECBOMPED;


   FUNCTION VALIDATEGROUP(
      ANPEDGROUPID               IN       IAPITYPE.ID_TYPE,
      ADPLANNEDEFFECTIVEDATE     IN       IAPITYPE.DATE_TYPE,
      ANPHASEINTOLERANCE         IN       IAPITYPE.PHASEINTOLERANCE_TYPE,
      ASPARTNO                   IN OUT   IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN OUT   IAPITYPE.REVISION_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS















      CURSOR C_GROUP
      IS
         SELECT PART_NO,
                REVISION
           FROM SPEC_PED_GROUP
          WHERE PED_GROUP_ID = ANPEDGROUPID;

      LNCOUNTER                     NUMBER := 0;
      LSPARTNO                      IAPITYPE.PARTNO_TYPE := NULL;
      LNREVISION                    IAPITYPE.REVISION_TYPE := NULL;
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'ValidateGroup';
   BEGIN
      FOR L_ROW IN C_GROUP
      LOOP
         LNCOUNTER :=   LNCOUNTER
                      + 1;
         LNRETVAL := VALIDATEPEDGROUP( L_ROW.PART_NO,
                                       L_ROW.REVISION,
                                       ADPLANNEDEFFECTIVEDATE,
                                       ANPHASEINTOLERANCE );

         
         IF LNRETVAL = IAPICONSTANTDBERROR.DBERR_CANNOTCHANGEPEDDATE
         THEN
            LNRETVAL := IAPICONSTANTDBERROR.DBERR_SUCCESS;
         END IF;

         IF LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS
         THEN
            ASPARTNO := L_ROW.PART_NO;
            ANREVISION := L_ROW.REVISION;
            EXIT;
         END IF;
      END LOOP;

      IF LNCOUNTER > 0
      THEN
         IF LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN( LNRETVAL );
         ELSE
            RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
         END IF;
      ELSE
         RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END VALIDATEGROUP;


   FUNCTION VALIDATEPLANTPED(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE,
      ASPLANT                    IN       IAPITYPE.PLANT_TYPE,
      ADPLANNEDEFFECTIVEDATE     IN       IAPITYPE.DATE_TYPE,
      ANCHECKSPECPED             IN       IAPITYPE.NUMVAL_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS




















      CURSOR LQPED_HIGH
      IS
         SELECT BOM_HEADER.REVISION,
                PLANT_EFFECTIVE_DATE,
                STATUS.STATUS_TYPE
           FROM BOM_HEADER,
                SPECIFICATION_HEADER,
                STATUS
          WHERE BOM_HEADER.PART_NO = SPECIFICATION_HEADER.PART_NO
            AND BOM_HEADER.REVISION = SPECIFICATION_HEADER.REVISION
            AND SPECIFICATION_HEADER.STATUS = STATUS.STATUS
            AND BOM_HEADER.PART_NO = ASPARTNO
            AND BOM_HEADER.REVISION > ANREVISION
            AND BOM_HEADER.PLANT = ASPLANT
            
            
            AND BOM_HEADER.PLANT_EFFECTIVE_DATE <= ADPLANNEDEFFECTIVEDATE
            
            AND STATUS.STATUS_TYPE <> IAPICONSTANT.STATUSTYPE_OBSOLETE;

      CURSOR LQPED_LOW
      IS
         SELECT BOM_HEADER.REVISION,
                PLANT_EFFECTIVE_DATE,
                STATUS.STATUS_TYPE
           FROM BOM_HEADER,
                SPECIFICATION_HEADER,
                STATUS
          WHERE BOM_HEADER.PART_NO = SPECIFICATION_HEADER.PART_NO
            AND BOM_HEADER.REVISION = SPECIFICATION_HEADER.REVISION
            AND SPECIFICATION_HEADER.STATUS = STATUS.STATUS
            AND BOM_HEADER.PART_NO = ASPARTNO
            AND BOM_HEADER.REVISION < ANREVISION
            AND BOM_HEADER.PLANT = ASPLANT
            AND BOM_HEADER.PLANT_EFFECTIVE_DATE >= ADPLANNEDEFFECTIVEDATE
            AND STATUS.STATUS_TYPE <> IAPICONSTANT.STATUSTYPE_OBSOLETE;

      LDPED                         IAPITYPE.DATE_TYPE;
      LNCOUNT                       IAPITYPE.NUMVAL_TYPE;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'ValidatePlantPed';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      
      SELECT COUNT( * )
        INTO LNCOUNT
        FROM SPEC_PED_GROUP
       WHERE PART_NO = ASPARTNO
         AND REVISION = ANREVISION;

      IF LNCOUNT > 0
      THEN
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_SPECINPEDGROUP,
                                           ASPARTNO,
                                           ANREVISION ) );
      END IF;

      
      IF ADPLANNEDEFFECTIVEDATE <= TRUNC( SYSDATE )
      THEN
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_INVALIDPED ) );
      END IF;

      IF ANCHECKSPECPED = 1
      THEN
         
         SELECT PLANNED_EFFECTIVE_DATE
           INTO LDPED
           FROM SPECIFICATION_HEADER
          WHERE PART_NO = ASPARTNO
            AND REVISION = ANREVISION;

         IF ADPLANNEDEFFECTIVEDATE < LDPED
         THEN
            RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_EFFDATELOWERTHANSPECPED ) );
         END IF;
      END IF;

      
      FOR REC_PED_HIGH IN LQPED_HIGH
      LOOP
         
         IF REC_PED_HIGH.STATUS_TYPE = IAPICONSTANT.STATUSTYPE_HISTORIC
         THEN
            
            SELECT COUNT( * )
              INTO LNCOUNT
              FROM STATUS_HISTORY
             WHERE PART_NO = ASPARTNO
               AND REVISION = REC_PED_HIGH.REVISION
               AND STATUS IN( SELECT STATUS
                               FROM STATUS
                              WHERE STATUS_TYPE = IAPICONSTANT.STATUSTYPE_CURRENT );

            IF LNCOUNT > 0
            THEN
               RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_NEWPLANTPEDGTCURRPED ) );
            END IF;
         ELSE
            RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_NEWPLANTPEDGTCURRPED ) );
         END IF;
      END LOOP;

      
      FOR REC_PED_LOW IN LQPED_LOW
      LOOP
         
         IF REC_PED_LOW.STATUS_TYPE = IAPICONSTANT.STATUSTYPE_HISTORIC
         THEN
            
            SELECT COUNT( * )
              INTO LNCOUNT
              FROM STATUS_HISTORY
             WHERE PART_NO = ASPARTNO
               AND REVISION = REC_PED_LOW.REVISION
               AND STATUS IN( SELECT STATUS
                               FROM STATUS
                              WHERE STATUS_TYPE = IAPICONSTANT.STATUSTYPE_CURRENT );

            IF LNCOUNT > 0
            THEN
               RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_NEWPLANTPEDLTPREVPED ) );
            END IF;
         ELSE
            RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_NEWPLANTPEDLTPREVPED ) );
         END IF;
      END LOOP;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END VALIDATEPLANTPED;


   FUNCTION VALIDATEPED(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE,
      ADPLANNEDEFFECTIVEDATE     IN       IAPITYPE.DATE_TYPE,
      ANPHASEINTOLERANCE         IN       IAPITYPE.PHASEINTOLERANCE_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS





















      LDLASTPED                     IAPITYPE.DATE_TYPE;
      LNLASTPIT                     IAPITYPE.PHASEINTOLERANCE_TYPE;
      LNLASTREV                     IAPITYPE.REVISION_TYPE;
      LNLOOPCOUNT                   PLS_INTEGER := 0;
      LDMINPED                      IAPITYPE.DATE_TYPE;
      LDMAXPED                      IAPITYPE.DATE_TYPE;
      LNRETURN                      NUMBER := 0;
      LBPREVIOUSREV                 BOOLEAN := FALSE;
      LBSYSDATE                     BOOLEAN := FALSE;
      LSSTATUSTYPE                  IAPITYPE.STATUSTYPE_TYPE;
      LSPHASEINSTATUS               IAPITYPE.PHASEINSTATUS_TYPE;
      LDISSUEDATE                   IAPITYPE.DATE_TYPE;
      LNCOUNT                       PLS_INTEGER;
      LDPED                         IAPITYPE.DATE_TYPE;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'ValidatePed';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;

      CURSOR C_REV_AND_PED(
         ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
         ANREVISION                 IN       IAPITYPE.REVISION_TYPE )
      IS
         SELECT   REVISION,
                  PLANNED_EFFECTIVE_DATE,
                  NVL( PHASE_IN_TOLERANCE,
                       0 ) PHASE_IN_TOLERANCE,
                  ISSUED_DATE,
                  STATUS_TYPE,
                  PHASE_IN_STATUS
             FROM SPECIFICATION_HEADER SH,
                  STATUS S
            WHERE SH.REVISION < ANREVISION
              AND SH.STATUS = S.STATUS
              AND (    S.STATUS_TYPE IN
                          ( IAPICONSTANT.STATUSTYPE_APPROVED,
                            IAPICONSTANT.STATUSTYPE_SUBMIT,
                            IAPICONSTANT.STATUSTYPE_REJECT,
                            IAPICONSTANT.STATUSTYPE_DEVELOPMENT )
                    OR (     S.STATUS_TYPE = IAPICONSTANT.STATUSTYPE_CURRENT
                         AND S.PHASE_IN_STATUS = 'Y' ) )
              AND SH.PART_NO = ASPARTNO
         ORDER BY REVISION,
                  PLANNED_EFFECTIVE_DATE;

      CURSOR C_FOLLOWING_PEDS_PITS(
         ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
         ANREVISION                 IN       IAPITYPE.REVISION_TYPE )
      IS
         SELECT   SH.PLANNED_EFFECTIVE_DATE,
                  SH.PHASE_IN_TOLERANCE
             FROM SPECIFICATION_HEADER SH,
                  STATUS S
            WHERE SH.REVISION > ANREVISION
              AND SH.PART_NO = ASPARTNO
              AND SH.STATUS = S.STATUS
              AND (    S.STATUS_TYPE IN
                          ( IAPICONSTANT.STATUSTYPE_APPROVED,
                            IAPICONSTANT.STATUSTYPE_SUBMIT,
                            IAPICONSTANT.STATUSTYPE_REJECT,
                            IAPICONSTANT.STATUSTYPE_DEVELOPMENT )
                    OR (     S.STATUS_TYPE = IAPICONSTANT.STATUSTYPE_CURRENT
                         AND S.PHASE_IN_STATUS = 'Y' ) )
         ORDER BY PLANNED_EFFECTIVE_DATE ASC;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      
      FOR RANDP IN C_REV_AND_PED( ASPARTNO,
                                  ANREVISION )
      LOOP
         BEGIN
            LNLOOPCOUNT :=   LNLOOPCOUNT
                           + 1;

            IF LNLOOPCOUNT > 1
            THEN
               IF   RANDP.PLANNED_EFFECTIVE_DATE
                  - RANDP.PHASE_IN_TOLERANCE <=   LDLASTPED
                                                + LNLASTPIT
               THEN
                  LNRETURN := -3;
               END IF;
            END IF;

            LNLASTREV := RANDP.REVISION;
            LDLASTPED := RANDP.PLANNED_EFFECTIVE_DATE;
            LNLASTPIT := RANDP.PHASE_IN_TOLERANCE;
            LSSTATUSTYPE := RANDP.STATUS_TYPE;
            LSPHASEINSTATUS := RANDP.PHASE_IN_STATUS;
            LDISSUEDATE := RANDP.ISSUED_DATE;
         END;
      END LOOP;

      IF LNRETURN != -3
      THEN   
         
         IF LNLOOPCOUNT > 0
         THEN
            IF    (     LSSTATUSTYPE = IAPICONSTANT.STATUSTYPE_CURRENT
                    AND LSPHASEINSTATUS = 'N' )
               OR LSSTATUSTYPE = IAPICONSTANT.STATUSTYPE_HISTORIC
               OR LSSTATUSTYPE = IAPICONSTANT.STATUSTYPE_OBSOLETE
            THEN
               
               LDMINPED := TRUNC(   LDISSUEDATE
                                  + 1 );
            ELSIF   LDLASTPED
                  + LNLASTPIT > TRUNC(   SYSDATE
                                       + 1 )
            THEN
               LDMINPED :=   LDLASTPED
                           + LNLASTPIT
                           + 1;
               LBSYSDATE := FALSE;
            ELSE
               LDMINPED := TRUNC(   SYSDATE
                                  + 1 );
               






               LBSYSDATE := TRUE;
            END IF;

            LBPREVIOUSREV := TRUE;
         ELSE
            LDMINPED := TRUNC(   SYSDATE
                               + 1 );
            LBPREVIOUSREV := FALSE;
            LBSYSDATE := TRUE;
         END IF;

         
         
         
         LNLOOPCOUNT := 0;

         FOR FPP IN C_FOLLOWING_PEDS_PITS( ASPARTNO,
                                           ANREVISION )
         LOOP
            LNLOOPCOUNT :=   LNLOOPCOUNT
                           + 1;

            IF LNLOOPCOUNT = 1
            THEN
               LDMAXPED :=   FPP.PLANNED_EFFECTIVE_DATE
                           - NVL( FPP.PHASE_IN_TOLERANCE,
                                  0 );
            END IF;
         END LOOP;

         IF LNLOOPCOUNT = 0
         THEN   
            LDMAXPED :=   SYSDATE
                        + 36500;
         END IF;

         
         IF       ADPLANNEDEFFECTIVEDATE
                - ANPHASEINTOLERANCE >= LDMINPED
            AND   ADPLANNEDEFFECTIVEDATE
                + ANPHASEINTOLERANCE < LDMAXPED
         THEN
            LNRETURN := 1;   
         ELSIF ADPLANNEDEFFECTIVEDATE >= LDMAXPED
         THEN
            LNRETURN := -2;   
         ELSIF ADPLANNEDEFFECTIVEDATE < LDMINPED
         THEN
            LNRETURN := -1;   
         ELSIF     ADPLANNEDEFFECTIVEDATE = LDMINPED
               AND LBPREVIOUSREV = FALSE
         THEN
            LNRETURN := 1;   
         ELSIF    (   ADPLANNEDEFFECTIVEDATE
                    - ANPHASEINTOLERANCE < LDMINPED )
               OR (   ADPLANNEDEFFECTIVEDATE
                    + ANPHASEINTOLERANCE >= LDMAXPED )
         THEN
            LNRETURN := -4;   
         ELSE
            LNRETURN := 1;
         END IF;
      END IF;

      IF LNRETURN = 1
      THEN
         
         SELECT COUNT( * )
           INTO LNCOUNT
           FROM SPEC_PED_GROUP
          WHERE PART_NO = ASPARTNO
            AND REVISION = ANREVISION;

         IF LNCOUNT > 0
         THEN
            LNRETURN := -5;
         END IF;
      END IF;

      IF LNRETURN = -1
      THEN
         LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_DATEMUSTBEGTTHANPREVREV );
      ELSIF LNRETURN = -2
      THEN
      
      
      LNRETVAL := IAPIGENERAL.SETERRORTEXT(IAPICONSTANTDBERROR.DBERR_INVALIDPEDDATE);
      ELSIF LNRETURN = -3
      THEN
         LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_INVALIDPRESPECSEQUENCE );
      ELSIF LNRETURN = -4
      THEN
         LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_PEDDATEOUTOFRANGE );
      ELSIF LNRETURN = -5
      THEN
         LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_CANNOTCHANGEPEDDATE );
      END IF;

      IF LNRETURN < 0
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN LNRETVAL;
      ELSE
         RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END VALIDATEPED;


   FUNCTION VALIDATEPEDGROUP(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE,
      ADPLANNEDEFFECTIVEDATE     IN       IAPITYPE.DATE_TYPE,
      ANPHASEINTOLERANCE         IN       IAPITYPE.PHASEINTOLERANCE_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS





















      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'ValidatePedGroup';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );
      LNRETVAL := VALIDATEPED( ASPARTNO,
                               ANREVISION,
                               ADPLANNEDEFFECTIVEDATE,
                               ANPHASEINTOLERANCE );

      
      IF LNRETVAL = IAPICONSTANTDBERROR.DBERR_CANNOTCHANGEPEDDATE
      THEN
         RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
      ELSE
         RETURN( LNRETVAL );
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END VALIDATEPEDGROUP;


   FUNCTION REMOVESPECIFICATION(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS











      LNSPECCOUNT                   INTEGER;
      LNSTATUS                      IAPITYPE.STATUSID_TYPE;
      LSUSERID                      IAPITYPE.USERID_TYPE;
      LSFORENAME                    IAPITYPE.FORENAME_TYPE;
      LSLASTNAME                    IAPITYPE.LASTNAME_TYPE;
      LSNAME                        IAPITYPE.STRINGVAL_TYPE( 52 );
      LNPOSITION                    NUMBER;
      LNPOSITION2                   NUMBER;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'RemoveSpecification';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LQERRORS                      IAPITYPE.REF_TYPE;

      LNEXIST                       IAPITYPE.NUMVAL_TYPE;

   BEGIN
      IF IAPIGENERAL.SESSION.APPLICATIONUSER.USERID IS NULL
      THEN
         LNRETVAL := IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                         LSMETHOD,
                                                         IAPICONSTANTDBERROR.DBERR_NOINITSESSION );
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN LNRETVAL;
      END IF;

      SELECT COUNT( * )
        INTO LNSPECCOUNT
        FROM SPECIFICATION_HEADER H,
             STATUS S,
             SPEC_ACCESS A
       WHERE H.STATUS = S.STATUS
         AND H.ACCESS_GROUP = A.ACCESS_GROUP
         AND S.STATUS_TYPE = IAPICONSTANT.STATUSTYPE_DEVELOPMENT
         AND A.USER_ID = IAPIGENERAL.SESSION.APPLICATIONUSER.USERID
         AND H.PART_NO = ASPARTNO
         AND H.REVISION = ANREVISION;

      IF LNSPECCOUNT = 0
      THEN
         NULL;
      END IF;

      
      LNRETVAL := IAPISPECIFICATIONACCESS.CROSSGETLOCK( ASPARTNO,
                                                        ANREVISION,
                                                        LSUSERID );

      IF LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT );
         RETURN LNRETVAL;
      END IF;

      IF (    LSUSERID IS NULL
           OR LSUSERID = '' )
      THEN
         NULL;
      ELSE
         LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_SPECALREADYLOCKED,
                                               ASPARTNO,
                                               ANREVISION,
                                               LSUSERID );
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN LNRETVAL;
      END IF;

      
      SELECT COUNT( * )
        INTO LNSPECCOUNT
        FROM BOM_ITEM
       WHERE COMPONENT_PART = ASPARTNO
         AND COMPONENT_REVISION = ANREVISION
         AND ( PART_NO, REVISION ) NOT IN( SELECT PART_NO,
                                                  REVISION
                                            FROM BOM_ITEM
                                           WHERE COMPONENT_PART = ASPARTNO
                                             AND PART_NO = ASPARTNO
                                             AND REVISION = ANREVISION );

      IF LNSPECCOUNT > 0
      THEN
         LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_DELUSEINBOM,
                                               ASPARTNO,
                                               ANREVISION );
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN LNRETVAL;
      END IF;

      
      SELECT COUNT( * )
        INTO LNSPECCOUNT
        FROM BOM_ITEM
       WHERE COMPONENT_PART = ASPARTNO
         AND ( PART_NO, REVISION ) NOT IN( SELECT PART_NO,
                                                  REVISION
                                            FROM BOM_ITEM
                                           WHERE COMPONENT_PART = ASPARTNO
                                             AND PART_NO = ASPARTNO
                                             AND REVISION = ANREVISION );

      
      IF LNSPECCOUNT > 0
      THEN
         SELECT COUNT( * )
           INTO LNSPECCOUNT
           FROM SPECIFICATION_HEADER
          WHERE PART_NO = ASPARTNO;

         IF LNSPECCOUNT < 2
         THEN
            LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_DELSPECINBOM,
                                                  ASPARTNO,
                                                  ANREVISION );
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN LNRETVAL;
         END IF;
      END IF;

      
      SELECT COUNT( * )
        INTO LNSPECCOUNT
        FROM ATTACHED_SPECIFICATION
       WHERE ATTACHED_PART_NO = ASPARTNO
         AND ATTACHED_REVISION = ANREVISION;

      IF LNSPECCOUNT > 0
      THEN
         LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_DELSPECINATTSPEC,
                                               ASPARTNO,
                                               ANREVISION );
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN LNRETVAL;
      END IF;

      
      SELECT COUNT( * )
        INTO LNSPECCOUNT
        FROM ATTACHED_SPECIFICATION
       WHERE ATTACHED_PART_NO = ASPARTNO;

      IF LNSPECCOUNT > 0
      THEN
         
         SELECT COUNT( * )
           INTO LNSPECCOUNT
           FROM SPECIFICATION_HEADER
          WHERE PART_NO = ASPARTNO;

         IF LNSPECCOUNT < 2
         THEN
            LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_DELSPECINATTSPEC,
                                                  ASPARTNO,
                                                  ANREVISION );
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN LNRETVAL;
         END IF;
      END IF;

      
      
      SELECT COUNT(*)
        INTO LNSPECCOUNT
      FROM SPECIFICATION_LINE_PROP
      WHERE COMPONENT_PART = ASPARTNO;

      IF LNSPECCOUNT > 0
      THEN
         
         
         SELECT COUNT( * )
           INTO LNSPECCOUNT
         FROM SPECIFICATION_HEADER
         WHERE PART_NO = ASPARTNO;

         IF LNSPECCOUNT < 2
         THEN
        
             LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_DELSPECINPROCLINESTAGE,
                                                   ASPARTNO );
             IAPIGENERAL.LOGERROR( GSSOURCE,
                                   LSMETHOD,
                                   IAPIGENERAL.GETLASTERRORTEXT( ) );
             RETURN LNRETVAL;
        
        END IF;
        

      END IF;
      

      BEGIN
         
         SELECT STATUS
           INTO LNSTATUS
           FROM SPECIFICATION_HEADER
          WHERE PART_NO = ASPARTNO
            AND REVISION = ANREVISION;

         LSNAME := F_GET_SH_DEL_USER( ASPARTNO,
                                      ANREVISION,
                                      SYSDATE );
         LNPOSITION := INSTR( LSNAME,
                              '//' );
         LSUSERID := SUBSTR( LSNAME,
                             1,
                               LNPOSITION
                             - 1 );
         LNPOSITION2 := INSTR( LSNAME,
                               '//',
                                 LNPOSITION
                               + 1 );
         LSFORENAME := SUBSTR( LSNAME,
                                 LNPOSITION
                               + 2,
                                 LNPOSITION2
                               - LNPOSITION
                               - 2 );
         LSLASTNAME := SUBSTR( LSNAME,
                                 LNPOSITION2
                               + 2 );

         DELETE FROM SPECIFICATION_SECTION
               WHERE PART_NO = ASPARTNO
                 AND REVISION = ANREVISION;

         DELETE FROM SPECIFICATION_PROP
               WHERE PART_NO = ASPARTNO
                 AND REVISION = ANREVISION;

         DELETE FROM SPECIFICATION_PROP_LANG
               WHERE PART_NO = ASPARTNO
                 AND REVISION = ANREVISION;

         DELETE FROM SPECIFICATION_TEXT
               WHERE PART_NO = ASPARTNO
                 AND REVISION = ANREVISION;

         DELETE FROM ITSHLNPROPLANG
               WHERE PART_NO = ASPARTNO
                 AND REVISION = ANREVISION;

         DELETE FROM SPECIFICATION_LINE_PROP
               WHERE PART_NO = ASPARTNO
                 AND REVISION = ANREVISION;

         DELETE FROM SPECIFICATION_LINE_TEXT
               WHERE PART_NO = ASPARTNO
                 AND REVISION = ANREVISION;

         DELETE FROM SPECIFICATION_STAGE
               WHERE PART_NO = ASPARTNO
                 AND REVISION = ANREVISION;

         DELETE FROM SPECIFICATION_LINE
               WHERE PART_NO = ASPARTNO
                 AND REVISION = ANREVISION;

         DELETE FROM REASON
               WHERE PART_NO = ASPARTNO
                 AND REVISION = ANREVISION;

         DELETE FROM APPROVAL_HISTORY
               WHERE PART_NO = ASPARTNO
                 AND REVISION = ANREVISION;

         DELETE FROM USERS_APPROVED
               WHERE PART_NO = ASPARTNO
                 AND REVISION = ANREVISION;

         DELETE FROM STATUS_HISTORY
               WHERE PART_NO = ASPARTNO
                 AND REVISION = ANREVISION;

         DELETE FROM BOM_ITEM
               WHERE PART_NO = ASPARTNO
                 AND REVISION = ANREVISION;

         DELETE FROM BOM_HEADER
               WHERE PART_NO = ASPARTNO
                 AND REVISION = ANREVISION;

         DELETE FROM ATTACHED_SPECIFICATION
               WHERE PART_NO = ASPARTNO
                 AND REVISION = ANREVISION;

         DELETE FROM SPECDATA
               WHERE PART_NO = ASPARTNO
                 AND REVISION = ANREVISION;

         DELETE FROM SPECIFICATION_ING
               WHERE PART_NO = ASPARTNO
                 AND REVISION = ANREVISION;

         DELETE FROM SPECIFICATION_ING_LANG
               WHERE PART_NO = ASPARTNO
                 AND REVISION = ANREVISION;

         
         DELETE FROM ITSPECINGALLERGEN
              WHERE PART_NO = ASPARTNO
                AND REVISION = ANREVISION;
         

         
         DELETE FROM ITSPECINGDETAIL
              WHERE PART_NO = ASPARTNO
                AND REVISION = ANREVISION;
         

         DELETE FROM ITSHBN
               WHERE PART_NO = ASPARTNO
                 AND REVISION = ANREVISION;

         DELETE FROM SPECIFICATION_TM
               WHERE PART_NO = ASPARTNO
                 AND REVISION = ANREVISION;

         DELETE FROM SPECIFICATION_CD
               WHERE PART_NO = ASPARTNO
                 AND REVISION = ANREVISION;

         DELETE FROM SPEC_PED_GROUP
               WHERE PART_NO = ASPARTNO
                 AND REVISION = ANREVISION;

         DELETE FROM ITSHVALD
               WHERE PART_NO = ASPARTNO
                 AND REVISION = ANREVISION;

         DELETE FROM ITLABELLOG
               WHERE PART_NO = ASPARTNO
                 AND REVISION = ANREVISION;

         DELETE FROM ITBOMJRNL
               WHERE PART_NO = ASPARTNO
                 AND REVISION = ANREVISION;

         DELETE FROM JRNL_SPECIFICATION_HEADER
               WHERE PART_NO = ASPARTNO
                 AND REVISION = ANREVISION;

         DELETE FROM ITSCHS
               WHERE PART_NO = ASPARTNO
                 AND REVISION = ANREVISION;

         DELETE FROM ITSHEXT
               WHERE PART_NO = ASPARTNO
                 AND REVISION = ANREVISION;

         DELETE FROM ITCMPPARTS
               WHERE PART_NO = ASPARTNO
                 AND REVISION = ANREVISION;

         DELETE FROM ITSHQ
               WHERE PART_NO = ASPARTNO
                 AND REVISION = ANREVISION;

         DELETE FROM ITSPPHS
               WHERE PART_NO = ASPARTNO
                 AND REVISION = ANREVISION;

         DELETE FROM SPECDATA_CHECK
               WHERE PART_NO = ASPARTNO
                 AND REVISION = ANREVISION;

         DELETE FROM SPECDATA_PROCESS
               WHERE PART_NO = ASPARTNO
                 AND REVISION = ANREVISION;

         
         IF IAPIDELETION.ISLASTONE( ASPARTNO ) = 1
         THEN
            DELETE FROM SPECIFICATION_KW
                  WHERE PART_NO = ASPARTNO;

            DELETE FROM ITPROBJ
                  WHERE PART_NO = ASPARTNO;

            DELETE FROM ITPRCL
                  WHERE PART_NO = ASPARTNO;

            DELETE FROM ITPRMFC
                  WHERE PART_NO = ASPARTNO;

            DELETE FROM ITPRNOTE
                  WHERE PART_NO = ASPARTNO;

            
            
            
            
            

            
            DELETE FROM SPECIFICATION_KW_H
                  WHERE PART_NO = ASPARTNO;

            DELETE FROM ITPROBJ_H
                  WHERE PART_NO = ASPARTNO;

            DELETE FROM ITPRCL_H
                  WHERE PART_NO = ASPARTNO;

            DELETE FROM ITPRMFC_H
                  WHERE PART_NO = ASPARTNO;

            DELETE FROM ITPRNOTE_H
                  WHERE PART_NO = ASPARTNO;

            DELETE FROM ITSH_H
                  WHERE PART_NO = ASPARTNO;
         END IF;

         DELETE FROM ITSHDESCR_L
               WHERE PART_NO = ASPARTNO
                 AND REVISION = ANREVISION;

         
         DELETE FROM ITCLAIMLOG
               WHERE PART_NO = ASPARTNO
                 AND REVISION = ANREVISION;

         
         DELETE FROM ITNUTLOG
               WHERE PART_NO = ASPARTNO
                 AND REVISION = ANREVISION;

         
         DELETE FROM SPECIFICATION_HEADER
               WHERE PART_NO = ASPARTNO
                 AND REVISION = ANREVISION;


      BEGIN
       SELECT COUNT(1) INTO LNEXIST FROM SYS.USER_TABLES  WHERE TABLE_NAME = 'RNDTBOMHEADER';
       IF LNEXIST > 0 THEN
         IAPIGENERAL.LOGINFO( GSSOURCE,
                              LSMETHOD,
                                 'Execute <'
                              || 'f_delete_rndtbomheader'
                              || '>',
                              IAPICONSTANT.INFOLEVEL_3 );
        LNRETVAL := F_DELETE_RNDTBOMHEADER( ASPARTNO, ANREVISION );
    END IF;
   END;


         
         DELETE FROM ITNUTLOGRESULTDETAILS
               WHERE LOG_ID IN( SELECT LOG_ID
                                 FROM ITNUTLOG
                                WHERE PART_NO = ASPARTNO
                                  AND REVISION = ANREVISION );

         DELETE FROM ITNUTLOGRESULT
               WHERE LOG_ID IN( SELECT LOG_ID
                                 FROM ITNUTLOG
                                WHERE PART_NO = ASPARTNO
                                  AND REVISION = ANREVISION );

         DELETE FROM ITLABELLOGRESULTDETAILS
               WHERE LOG_ID IN( SELECT LOG_ID
                                 FROM ITLABELLOG
                                WHERE PART_NO = ASPARTNO
                                  AND REVISION = ANREVISION );

         DELETE FROM ITLABELLOG
               WHERE PART_NO = ASPARTNO
                 AND REVISION = ANREVISION;

         DELETE FROM ITCLAIMLOG
               WHERE PART_NO = ASPARTNO
                 AND REVISION = ANREVISION;

         DELETE FROM ITCLAIMLOGRESULT
               WHERE LOG_ID IN( SELECT LOG_ID
                                 FROM ITCLAIMLOG
                                WHERE PART_NO = ASPARTNO
                                  AND REVISION = ANREVISION );

         
         IF SUBSTR( ASPARTNO,
                    1,
                    8 ) <> 'TMP_NUT_'
         THEN
            


            SELECT FORENAME,
                   LAST_NAME
              INTO LSFORENAME,
                   LSLASTNAME
              FROM ITUS
             WHERE USER_ID = IAPIGENERAL.SESSION.APPLICATIONUSER.USERID;

            INSERT INTO ITSHDEL
                 VALUES ( ASPARTNO,
                          ANREVISION,
                          SYSDATE,
                          LNSTATUS,
                          IAPIGENERAL.SESSION.APPLICATIONUSER.USERID,
                          LSFORENAME,
                          LSLASTNAME );
         END IF;

         
         LNRETVAL := IAPIPLANTPART.SETPLANTACCESS( ASPARTNO );

         IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN LNRETVAL;
         END IF;

         LNRETVAL := IAPIPART.PARTUSEDINSPECIFICATION( ASPARTNO );

         IF LNRETVAL = IAPICONSTANTDBERROR.DBERR_PARTUSEDINSPEC
         THEN
            NULL;
         ELSIF LNRETVAL = IAPICONSTANTDBERROR.DBERR_SUCCESS
         THEN
            LNRETVAL := IAPIPART.REMOVEPART( ASPARTNO,
                                             LQERRORS );

            IF LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS
            THEN
               IAPIGENERAL.LOGERROR( GSSOURCE,
                                     LSMETHOD,
                                     IAPIGENERAL.GETLASTERRORTEXT( ) );
               RETURN( LNRETVAL );
            END IF;
         ELSE
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN( LNRETVAL );
         END IF;

         RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
      EXCEPTION
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
      END;
   END REMOVESPECIFICATION;


   FUNCTION CLEANLAYOUT(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE,
      ANLAYOUTID                 IN       IAPITYPE.ID_TYPE,
      ANLAYOUTREV                IN       IAPITYPE.REVISION_TYPE,
      ANSECTIONID                IN       IAPITYPE.ID_TYPE,
      ANSUBSECTIONID             IN       IAPITYPE.ID_TYPE,
      ANREFID                    IN       IAPITYPE.ID_TYPE,
      ANTYPE                     IN       IAPITYPE.SPECIFICATIONSECTIONTYPE_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS

















      CURSOR CUR_DISPL(
         ANLAYOUTID                 IN       IAPITYPE.ID_TYPE,
         ANREVISION                 IN       IAPITYPE.REVISION_TYPE )
      IS
         SELECT *
           FROM PROPERTY_LAYOUT
          WHERE LAYOUT_ID = ANLAYOUTID
            AND REVISION = ANREVISION;

      CURSOR CUR_LANG_PG
      IS
         SELECT PART_NO,
                REVISION,
                SECTION_ID,
                SUB_SECTION_ID,
                PROPERTY_GROUP,
                PROPERTY,
                   NVL( CHAR_1,
                        '@' )
                || NVL( CHAR_2,
                        '@' )
                || NVL( CHAR_3,
                        '@' )
                || NVL( CHAR_4,
                        '@' )
                || NVL( CHAR_5,
                        '@' )
                || NVL( CHAR_6,
                        '@' ) LANG_DATA
           FROM SPECIFICATION_PROP_LANG
          WHERE PART_NO = ASPARTNO
            AND REVISION = ANREVISION
            AND SECTION_ID = ANSECTIONID
            AND SUB_SECTION_ID = ANSUBSECTIONID
            AND PROPERTY_GROUP = ANREFID;

      CURSOR CUR_LANG_SP
      IS
         SELECT PART_NO,
                REVISION,
                SECTION_ID,
                SUB_SECTION_ID,
                PROPERTY_GROUP,
                PROPERTY,
                   NVL( CHAR_1,
                        '@' )
                || NVL( CHAR_2,
                        '@' )
                || NVL( CHAR_3,
                        '@' )
                || NVL( CHAR_4,
                        '@' )
                || NVL( CHAR_5,
                        '@' )
                || NVL( CHAR_6,
                        '@' ) LANG_DATA
           FROM SPECIFICATION_PROP_LANG
          WHERE PART_NO = ASPARTNO
            AND REVISION = ANREVISION
            AND SECTION_ID = ANSECTIONID
            AND SUB_SECTION_ID = ANSUBSECTIONID
            AND PROPERTY_GROUP = 0
            AND PROPERTY = ANREFID;

      TYPE DISPL_TABLE IS TABLE OF NUMBER
         INDEX BY BINARY_INTEGER;

      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'CleanLayout';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LNDISPLAYFORMATREV            IAPITYPE.REVISION_TYPE;
      LIDISPLCOUNTER                INTEGER := 0;
      LIDISPLPOINTER                INTEGER := 0;
      LISTACKPOINTER                INTEGER := 22;
      LNCURSOR                      IAPITYPE.NUMVAL_TYPE;
      LSSQLSTRING                   IAPITYPE.STRINGVAL_TYPE( 2000 );
      LSSQLSTRING2                  IAPITYPE.STRINGVAL_TYPE( 2000 );
      LSSQLSTRING3                  IAPITYPE.STRINGVAL_TYPE( 2000 );
      LSTEST                        IAPITYPE.STRING_TYPE;
      LNRESULT                      IAPITYPE.NUMVAL_TYPE;
      LTPROPDISPL                   DISPL_TABLE;
      LBUPDATE                      BOOLEAN;
      LIINSPROP                     INTEGER;
      LSNULLCHK                     IAPITYPE.STRINGVAL_TYPE( 500 );
      LSFIELD                       IAPITYPE.STRING_TYPE;
   BEGIN

      IF ANLAYOUTREV = 0
      THEN
         BEGIN
            SELECT MAX( REVISION )
              INTO LNDISPLAYFORMATREV
              FROM LAYOUT
             WHERE LAYOUT_ID = ANLAYOUTID
               AND STATUS = 2;
         EXCEPTION
            WHEN OTHERS
            THEN
               IAPIGENERAL.LOGERROR( GSSOURCE,
                                     LSMETHOD,
                                     SQLERRM );
               RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
         END;
      ELSE
         LNDISPLAYFORMATREV := ANLAYOUTREV;
      END IF;

      LIDISPLCOUNTER := 0;

      FOR REC_DISPL IN CUR_DISPL( ANLAYOUTID,
                                  LNDISPLAYFORMATREV )
      LOOP
         LIDISPLCOUNTER :=   LIDISPLCOUNTER
                           + 1;
         LTPROPDISPL( LIDISPLCOUNTER ) := REC_DISPL.FIELD_ID;
      END LOOP;

      LIDISPLPOINTER := LIDISPLCOUNTER;
      LSSQLSTRING2 := ' ';

      FOR LISTACKCOUNTER IN 1 .. LISTACKPOINTER
      LOOP
         LBUPDATE := TRUE;

         FOR LIDISPLCOUNTER IN 1 .. LIDISPLPOINTER
         LOOP
            IF LISTACKCOUNTER = LTPROPDISPL( LIDISPLCOUNTER )
            THEN
               LBUPDATE := FALSE;
            END IF;
         END LOOP;

         IF LBUPDATE
         THEN
            BEGIN
               SELECT DECODE( LISTACKCOUNTER,
                              1, IAPICONSTANT.COLUMN_NUM_1,
                              2, IAPICONSTANT.COLUMN_NUM_2,
                              3, IAPICONSTANT.COLUMN_NUM_3,
                              4, IAPICONSTANT.COLUMN_NUM_4,
                              5, IAPICONSTANT.COLUMN_NUM_5,
                              6, IAPICONSTANT.COLUMN_NUM_6,
                              7, IAPICONSTANT.COLUMN_NUM_7,
                              8, IAPICONSTANT.COLUMN_NUM_8,
                              9, IAPICONSTANT.COLUMN_NUM_9,
                              10, IAPICONSTANT.COLUMN_NUM_10,
                              11, IAPICONSTANT.COLUMN_CHAR_1,
                              12, IAPICONSTANT.COLUMN_CHAR_2,
                              13, IAPICONSTANT.COLUMN_CHAR_3,
                              14, IAPICONSTANT.COLUMN_CHAR_4,
                              15, IAPICONSTANT.COLUMN_CHAR_5,
                              16, IAPICONSTANT.COLUMN_CHAR_6,
                              17, IAPICONSTANT.COLUMN_BOOLEAN_1,
                              18, IAPICONSTANT.COLUMN_BOOLEAN_2,
                              19, IAPICONSTANT.COLUMN_BOOLEAN_3,
                              20, IAPICONSTANT.COLUMN_BOOLEAN_4,
                              21, IAPICONSTANT.COLUMN_DATE_1,
                              22, IAPICONSTANT.COLUMN_DATE_2,
                              23, IAPICONSTANT.COLUMN_UOM_ID,
                              24, IAPICONSTANT.COLUMN_ATTRIBUTE,
                              25, IAPICONSTANT.COLUMN_TEST_METHOD,
                              26, IAPICONSTANT.COLUMN_CHARACTERISTIC,
                              27, IAPICONSTANT.COLUMN_PROPERTY,
                              30, IAPICONSTANT.COLUMN_CH_2,
                              31, IAPICONSTANT.COLUMN_CH_3,
                              32, IAPICONSTANT.COLUMN_TM_DET_1,
                              33, IAPICONSTANT.COLUMN_TM_DET_2,
                              34, IAPICONSTANT.COLUMN_TM_DET_3,
                              35, IAPICONSTANT.COLUMN_TM_DET_4,
                              40, IAPICONSTANT.COLUMN_INFO )
                 INTO LSFIELD
                 FROM DUAL;

               IF LSSQLSTRING2 = ' '
               THEN
                  LSSQLSTRING2 :=    LSFIELD
                                  || '=NULL';
               ELSE
                  LSSQLSTRING2 :=    LSSQLSTRING2
                                  || ','
                                  || LSFIELD
                                  || '=NULL';
               END IF;

               NULL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  IAPIGENERAL.LOGERROR( GSSOURCE,
                                        LSMETHOD,
                                        SQLERRM );
                  RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
            END;
         END IF;
      END LOOP;

        
        
         LBUPDATE := TRUE;

         FOR LIDISPLCOUNTER IN 1 .. LIDISPLPOINTER
         LOOP
            IF 25 = LTPROPDISPL( LIDISPLCOUNTER )
            THEN
               LBUPDATE := FALSE;
            END IF;
         END LOOP;

         IF LBUPDATE
         THEN
            BEGIN
               IF LSSQLSTRING2 = ' '
               THEN
                  LSSQLSTRING2 :=    LSFIELD
                                  || '=NULL';
               ELSE
                  LSSQLSTRING2 :=    LSSQLSTRING2
                                  || ','
                                  || IAPICONSTANT.COLUMN_TEST_METHOD
                                  || '=0';
               END IF;

               LSSQLSTRING2 :=    LSSQLSTRING2
                              || ','
                              || IAPICONSTANT.COLUMN_TEST_METHOD_REV
                              || '=0'
                              || ','
                              || IAPICONSTANT.COLUMN_TM_DET_1
                              || '=''N'''
                              || ','
                              || IAPICONSTANT.COLUMN_TM_DET_2
                              || '=''N'''
                              || ','
                              || IAPICONSTANT.COLUMN_TM_DET_3
                              || '=''N'''
                              || ','
                              || IAPICONSTANT.COLUMN_TM_DET_4
                              || '=''N''';
            EXCEPTION
               WHEN OTHERS
               THEN
                  IAPIGENERAL.LOGERROR( GSSOURCE,
                                        LSMETHOD,
                                        SQLERRM );
                  RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
            END;
         END IF;
        

      IF     LSSQLSTRING2 IS NOT NULL
         
         
         AND LENGTH(TRIM(LSSQLSTRING2)) > 0
         
      THEN
         BEGIN
            LSSQLSTRING := 'UPDATE specification_prop set ';

            IF ANTYPE = 1
            THEN
               LSSQLSTRING3 :=
                     ' WHERE part_no = '
                  || ''''
                  || ASPARTNO
                  || ''''
                  || ' AND revision = '
                  || ANREVISION
                  || ' AND section_id = '
                  || ANSECTIONID
                  || ' AND sub_section_id = '
                  || ANSUBSECTIONID
                  || ' AND property_group = '
                  || ANREFID;
            ELSIF ANTYPE = 4
            THEN
               LSSQLSTRING3 :=
                     ' WHERE part_no = '
                  || ''''
                  || ASPARTNO
                  || ''''
                  || ' AND revision = '
                  || ANREVISION
                  || ' AND section_id = '
                  || ANSECTIONID
                  || ' AND sub_section_id = '
                  || ANSUBSECTIONID
                  || ' AND property_group = 0 '
                  || ' AND property = '
                  || ANREFID;
            ELSE
               LSSQLSTRING3 := ' WHERE 0 = 1 ';
            END IF;

            LSSQLSTRING :=    LSSQLSTRING
                           || LSSQLSTRING2
                           || LSSQLSTRING3;

            LIINSPROP := DBMS_SQL.OPEN_CURSOR;
            DBMS_SQL.PARSE( LIINSPROP,
                            LSSQLSTRING,
                            DBMS_SQL.V7 );
            LNRESULT := DBMS_SQL.EXECUTE( LIINSPROP );
            DBMS_SQL.CLOSE_CURSOR( LIINSPROP );
         EXCEPTION
            WHEN OTHERS
            THEN
               
               DBMS_SQL.CLOSE_CURSOR( LIINSPROP );
               IAPIGENERAL.LOGERROR( GSSOURCE,
                                     LSMETHOD,
                                     SQLERRM );
               RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
         END;
      END IF;

      LIDISPLCOUNTER := 0;


   

      FOR REC_DISPL IN CUR_DISPL( ANLAYOUTID,
                                  LNDISPLAYFORMATREV )
      LOOP
         LIDISPLCOUNTER :=   LIDISPLCOUNTER
                           + 1;
         LTPROPDISPL( LIDISPLCOUNTER ) := REC_DISPL.FIELD_ID;
      END LOOP;

      LIDISPLPOINTER := LIDISPLCOUNTER;
      LSSQLSTRING2 := ' ';

      FOR LISTACKCOUNTER IN 1 .. LISTACKPOINTER
      LOOP
         IF    LISTACKCOUNTER < 11
            OR LISTACKCOUNTER > 16
         THEN
            LBUPDATE := FALSE;
         ELSE
            LBUPDATE := TRUE;
         END IF;

         FOR LIDISPLCOUNTER IN 1 .. LIDISPLPOINTER
         LOOP
            IF    LISTACKCOUNTER = LTPROPDISPL( LIDISPLCOUNTER )
               OR LISTACKCOUNTER < 11
               OR LISTACKCOUNTER > 16
            THEN
               LBUPDATE := FALSE;
            END IF;
         END LOOP;

         IF LBUPDATE
         THEN
            BEGIN
               SELECT DECODE( LISTACKCOUNTER,
                              1, IAPICONSTANT.COLUMN_NUM_1,
                              2, IAPICONSTANT.COLUMN_NUM_2,
                              3, IAPICONSTANT.COLUMN_NUM_3,
                              4, IAPICONSTANT.COLUMN_NUM_4,
                              5, IAPICONSTANT.COLUMN_NUM_5,
                              6, IAPICONSTANT.COLUMN_NUM_6,
                              7, IAPICONSTANT.COLUMN_NUM_7,
                              8, IAPICONSTANT.COLUMN_NUM_8,
                              9, IAPICONSTANT.COLUMN_NUM_9,
                              10, IAPICONSTANT.COLUMN_NUM_10,
                              11, IAPICONSTANT.COLUMN_CHAR_1,
                              12, IAPICONSTANT.COLUMN_CHAR_2,
                              13, IAPICONSTANT.COLUMN_CHAR_3,
                              14, IAPICONSTANT.COLUMN_CHAR_4,
                              15, IAPICONSTANT.COLUMN_CHAR_5,
                              16, IAPICONSTANT.COLUMN_CHAR_6,
                              17, IAPICONSTANT.COLUMN_BOOLEAN_1,
                              18, IAPICONSTANT.COLUMN_BOOLEAN_2,
                              19, IAPICONSTANT.COLUMN_BOOLEAN_3,
                              20, IAPICONSTANT.COLUMN_BOOLEAN_4,
                              21, IAPICONSTANT.COLUMN_DATE_1,
                              22, IAPICONSTANT.COLUMN_DATE_2,
                              23, IAPICONSTANT.COLUMN_UOM_ID,
                              24, IAPICONSTANT.COLUMN_ATTRIBUTE,
                              25, IAPICONSTANT.COLUMN_TEST_METHOD,
                              26, IAPICONSTANT.COLUMN_CHARACTERISTIC,
                              27, IAPICONSTANT.COLUMN_PROPERTY,
                              30, IAPICONSTANT.COLUMN_CH_2,
                              31, IAPICONSTANT.COLUMN_CH_3,
                              32, IAPICONSTANT.COLUMN_TM_DET_1,
                              33, IAPICONSTANT.COLUMN_TM_DET_2,
                              34, IAPICONSTANT.COLUMN_TM_DET_3,
                              35, IAPICONSTANT.COLUMN_TM_DET_4,
                              40, IAPICONSTANT.COLUMN_INFO )
                 INTO LSFIELD
                 FROM DUAL;

               IF LSSQLSTRING2 = ' '
               THEN
                  LSSQLSTRING2 :=    LSFIELD
                                  || '=NULL';
               ELSE
                  LSSQLSTRING2 :=    LSSQLSTRING2
                                  || ','
                                  || LSFIELD
                                  || '=NULL';
               END IF;

               NULL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  IAPIGENERAL.LOGERROR( GSSOURCE,
                                        LSMETHOD,
                                        SQLERRM );
                  RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
            END;
         END IF;
      END LOOP;


      IF     LSSQLSTRING2 IS NOT NULL
         
         
         AND LENGTH(TRIM(LSSQLSTRING2)) > 0
         
      THEN
         BEGIN
            LSSQLSTRING := 'UPDATE specification_prop_lang set ';
            LSSQLSTRING :=    LSSQLSTRING
                           || LSSQLSTRING2
                           || LSSQLSTRING3;
            LIINSPROP := DBMS_SQL.OPEN_CURSOR;
            DBMS_SQL.PARSE( LIINSPROP,
                            LSSQLSTRING,
                            DBMS_SQL.V7 );
            LNRESULT := DBMS_SQL.EXECUTE( LIINSPROP );
            DBMS_SQL.CLOSE_CURSOR( LIINSPROP );

            
            IF ANTYPE = 1
            THEN
               FOR REC_LANG IN CUR_LANG_SP
               LOOP
                  LSNULLCHK := REC_LANG.LANG_DATA;

                  IF LSNULLCHK = '@@@@@@'
                  THEN
                     DELETE FROM SPECIFICATION_PROP_LANG
                           WHERE PART_NO = REC_LANG.PART_NO
                             AND REVISION = REC_LANG.REVISION
                             AND SECTION_ID = REC_LANG.SECTION_ID
                             AND SUB_SECTION_ID = REC_LANG.SUB_SECTION_ID
                             AND PROPERTY_GROUP = REC_LANG.PROPERTY_GROUP
                             AND PROPERTY = REC_LANG.PROPERTY;
                  END IF;
               END LOOP;
            END IF;

            IF ANTYPE = 4
            THEN
               FOR REC_LANG IN CUR_LANG_PG
               LOOP
                  LSNULLCHK := REC_LANG.LANG_DATA;

                  IF LSNULLCHK = '@@@@@@'
                  THEN
                     DELETE FROM SPECIFICATION_PROP_LANG
                           WHERE PART_NO = REC_LANG.PART_NO
                             AND REVISION = REC_LANG.REVISION
                             AND SECTION_ID = REC_LANG.SECTION_ID
                             AND SUB_SECTION_ID = REC_LANG.SUB_SECTION_ID
                             AND PROPERTY_GROUP = REC_LANG.PROPERTY_GROUP
                             AND PROPERTY = REC_LANG.PROPERTY;
                  END IF;
               END LOOP;
            END IF;
         EXCEPTION
            WHEN OTHERS
            THEN




               DBMS_SQL.CLOSE_CURSOR( LIINSPROP );
               IAPIGENERAL.LOGERROR( GSSOURCE,
                                     LSMETHOD,
                                     SQLERRM );
               RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
         END;
      END IF;

      RETURN IAPICONSTANTDBERROR.DBERR_SUCCESS;
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL );
   END CLEANLAYOUT;




   FUNCTION CLEANLAYOUT_TESTMETHOD(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE,
      ANLAYOUTID                 IN       IAPITYPE.ID_TYPE,
      ANLAYOUTREV                IN       IAPITYPE.REVISION_TYPE,
      ANSECTIONID                IN       IAPITYPE.ID_TYPE,
      ANSUBSECTIONID             IN       IAPITYPE.ID_TYPE,
      ANREFID                    IN       IAPITYPE.ID_TYPE,
      ANTYPE                     IN       IAPITYPE.SPECIFICATIONSECTIONTYPE_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS

















      CURSOR CUR_DISPL(
         ANLAYOUTID                 IN       IAPITYPE.ID_TYPE,
         ANREVISION                 IN       IAPITYPE.REVISION_TYPE )
      IS
         SELECT *
           FROM PROPERTY_LAYOUT
          WHERE LAYOUT_ID = ANLAYOUTID
            AND REVISION = ANREVISION;

      TYPE DISPL_TABLE IS TABLE OF NUMBER
         INDEX BY BINARY_INTEGER;

      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'CleanLayout_TM';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LNDISPLAYFORMATREV            IAPITYPE.REVISION_TYPE;
      LIDISPLCOUNTER                INTEGER := 0;
      LIDISPLPOINTER                INTEGER := 0;
      LISTACKPOINTER                INTEGER := 22;
      LNCURSOR                      IAPITYPE.NUMVAL_TYPE;
      LSSQLSTRING                   IAPITYPE.STRINGVAL_TYPE( 2000 );
      LSSQLSTRING2                  IAPITYPE.STRINGVAL_TYPE( 2000 );
      LSSQLSTRING3                  IAPITYPE.STRINGVAL_TYPE( 2000 );
      LSTEST                        IAPITYPE.STRING_TYPE;
      LNRESULT                      IAPITYPE.NUMVAL_TYPE;
      LTPROPDISPL                   DISPL_TABLE;
      LBUPDATE                      BOOLEAN;
      LIINSPROP                     INTEGER;
      LSNULLCHK                     IAPITYPE.STRINGVAL_TYPE( 500 );
      LSFIELD                       IAPITYPE.STRING_TYPE;
   BEGIN

      IF ANLAYOUTREV = 0
      THEN
         BEGIN
            SELECT MAX( REVISION )
              INTO LNDISPLAYFORMATREV
              FROM LAYOUT
             WHERE LAYOUT_ID = ANLAYOUTID
               AND STATUS = 2;
         EXCEPTION
            WHEN OTHERS
            THEN
               IAPIGENERAL.LOGERROR( GSSOURCE,
                                     LSMETHOD,
                                     SQLERRM );
               RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
         END;
      ELSE
         LNDISPLAYFORMATREV := ANLAYOUTREV;
      END IF;

      LIDISPLCOUNTER := 0;

      FOR REC_DISPL IN CUR_DISPL( ANLAYOUTID,
                                  LNDISPLAYFORMATREV )
      LOOP
         LIDISPLCOUNTER :=   LIDISPLCOUNTER
                           + 1;
         LTPROPDISPL( LIDISPLCOUNTER ) := REC_DISPL.FIELD_ID;
      END LOOP;

      LIDISPLPOINTER := LIDISPLCOUNTER;
      LSSQLSTRING2 := ' ';


        LSFIELD := IAPICONSTANT.COLUMN_TEST_METHOD;

        
        
         LBUPDATE := TRUE;

         FOR LIDISPLCOUNTER IN 1 .. LIDISPLPOINTER
         LOOP
            IF 25 = LTPROPDISPL( LIDISPLCOUNTER )
            THEN
               LBUPDATE := FALSE;
            END IF;
         END LOOP;

         IF LBUPDATE
         THEN
            BEGIN
               IF LSSQLSTRING2 = ' '
               THEN
                  LSSQLSTRING2 :=    LSFIELD
                                  || '=NULL';
               ELSE
                  LSSQLSTRING2 :=    LSSQLSTRING2
                                  || ','
                                  || IAPICONSTANT.COLUMN_TEST_METHOD
                                  || '=0';
               END IF;

               LSSQLSTRING2 :=    LSSQLSTRING2
                              || ','
                              || IAPICONSTANT.COLUMN_TEST_METHOD_REV
                              || '=0'
                              || ','
                              || IAPICONSTANT.COLUMN_TM_DET_1
                              || '=''N'''
                              || ','
                              || IAPICONSTANT.COLUMN_TM_DET_2
                              || '=''N'''
                              || ','
                              || IAPICONSTANT.COLUMN_TM_DET_3
                              || '=''N'''
                              || ','
                              || IAPICONSTANT.COLUMN_TM_DET_4
                              || '=''N''';
            EXCEPTION
               WHEN OTHERS
               THEN
                  IAPIGENERAL.LOGERROR( GSSOURCE,
                                        LSMETHOD,
                                        SQLERRM );
                  RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
            END;
         END IF;
        

      IF     LSSQLSTRING2 IS NOT NULL
         
         
         AND LENGTH(TRIM(LSSQLSTRING2)) > 0
         
      THEN
         BEGIN
            LSSQLSTRING := 'UPDATE specification_prop set ';

            IF ANTYPE = 1
            THEN
               LSSQLSTRING3 :=
                     ' WHERE part_no = '
                  || ''''
                  || ASPARTNO
                  || ''''
                  || ' AND revision = '
                  || ANREVISION
                  || ' AND section_id = '
                  || ANSECTIONID
                  || ' AND sub_section_id = '
                  || ANSUBSECTIONID
                  || ' AND property_group = '
                  || ANREFID;
            ELSIF ANTYPE = 4
            THEN
               LSSQLSTRING3 :=
                     ' WHERE part_no = '
                  || ''''
                  || ASPARTNO
                  || ''''
                  || ' AND revision = '
                  || ANREVISION
                  || ' AND section_id = '
                  || ANSECTIONID
                  || ' AND sub_section_id = '
                  || ANSUBSECTIONID
                  || ' AND property_group = 0 '
                  || ' AND property = '
                  || ANREFID;
            ELSE
               LSSQLSTRING3 := ' WHERE 0 = 1 ';
            END IF;

            LSSQLSTRING :=    LSSQLSTRING
                           || LSSQLSTRING2
                           || LSSQLSTRING3;

            LIINSPROP := DBMS_SQL.OPEN_CURSOR;
            DBMS_SQL.PARSE( LIINSPROP,
                            LSSQLSTRING,
                            DBMS_SQL.V7 );
            LNRESULT := DBMS_SQL.EXECUTE( LIINSPROP );
            DBMS_SQL.CLOSE_CURSOR( LIINSPROP );
         EXCEPTION
            WHEN OTHERS
            THEN
               
               DBMS_SQL.CLOSE_CURSOR( LIINSPROP );
               IAPIGENERAL.LOGERROR( GSSOURCE,
                                     LSMETHOD,
                                     SQLERRM );
               RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
         END;
      END IF;

      RETURN IAPICONSTANTDBERROR.DBERR_SUCCESS;
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL );
   END CLEANLAYOUT_TESTMETHOD;



   FUNCTION UPDATELAYOUT(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE,
      ANTYPE                     IN       IAPITYPE.NUMVAL_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS











      CURSOR CUR_ITSHLY_PGSP
      IS
         SELECT DISTINCT REF_ID,
                         TYPE,
                         DISPLAY_FORMAT
                    FROM SPECIFICATION_SECTION
                   WHERE PART_NO = ASPARTNO
                     AND REVISION = ANREVISION
                     AND TYPE IN( 1, 4 );

      CURSOR CUR_ITSHLY_STAGE
      IS
         SELECT DISTINCT STAGE,
                         DISPLAY_FORMAT
                    FROM SPECIFICATION_STAGE
                   WHERE PART_NO = ASPARTNO
                     AND REVISION = ANREVISION;

      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'UpdateLayout';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      IF ANTYPE = 1
      THEN
         FOR REC_ITSHLY IN CUR_ITSHLY_PGSP
         LOOP
            BEGIN
               INSERT INTO ITSHLY
                           ( LY_ID,
                             LY_TYPE,
                             DISPLAY_FORMAT )
                    VALUES ( REC_ITSHLY.REF_ID,
                             REC_ITSHLY.TYPE,
                             REC_ITSHLY.DISPLAY_FORMAT );
            EXCEPTION
               WHEN OTHERS
               THEN
                  NULL;
            END;
         END LOOP;
      END IF;

      IF ANTYPE = 2
      THEN
         FOR REC_ITSHLY IN CUR_ITSHLY_STAGE
         LOOP
            BEGIN
               INSERT INTO ITSHLY
                           ( LY_ID,
                             LY_TYPE,
                             DISPLAY_FORMAT )
                    VALUES ( REC_ITSHLY.STAGE,
                             ANTYPE,
                             REC_ITSHLY.DISPLAY_FORMAT );
            EXCEPTION
               WHEN OTHERS
               THEN
                  NULL;
            END;
         END LOOP;
      END IF;

      RETURN IAPICONSTANTDBERROR.DBERR_SUCCESS;
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL );
   END UPDATELAYOUT;


   FUNCTION VALIDATIONFRAME(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE,
      ASOLDFRAMENO               IN       IAPITYPE.FRAMENO_TYPE,
      ANOLDFRAMEREVISION         IN       IAPITYPE.FRAMEREVISION_TYPE,
      ANOLDFRAMEOWNER            IN       IAPITYPE.OWNER_TYPE,
      ASFRAMENO                  IN       IAPITYPE.FRAMENO_TYPE,
      ANFRAMEREVISION            IN       IAPITYPE.FRAMEREVISION_TYPE,
      ANFRAMEOWNER               IN       IAPITYPE.OWNER_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS
















      CURSOR L_INS_SECTIONS_CURSOR
      IS
         SELECT *
           FROM FRAME_SECTION
          WHERE ( SECTION_ID, SUB_SECTION_ID, TYPE, REF_ID ) IN(
                   SELECT SECTION_ID,
                          SUB_SECTION_ID,
                          TYPE,
                          REF_ID
                     FROM FRAME_SECTION
                    WHERE FRAME_NO = ASFRAMENO
                      AND REVISION = ANFRAMEREVISION
                      AND OWNER = ANFRAMEOWNER
                      AND MANDATORY = 'Y'
                      AND TYPE <> IAPICONSTANT.SECTIONTYPE_ATTACHEDSPEC
                   MINUS
                   SELECT SECTION_ID,
                          SUB_SECTION_ID,
                          TYPE,
                          REF_ID
                     FROM SPECIFICATION_SECTION
                    WHERE PART_NO = ASPARTNO
                      AND REVISION = ANREVISION
                      AND TYPE <> IAPICONSTANT.SECTIONTYPE_ATTACHEDSPEC )
            AND FRAME_NO = ASFRAMENO
            AND REVISION = ANFRAMEREVISION
            AND OWNER = ANFRAMEOWNER;

      
      CURSOR L_INS_SC_MASK_CURSOR(
         ANVIEW                     IN       IAPITYPE.ID_TYPE )
      IS
         SELECT SC.FRAME_NO,
                SC.REVISION,
                SC.OWNER,
                SC.SECTION_ID,
                SC.SECTION_REV,
                SC.SUB_SECTION_ID,
                SC.SUB_SECTION_REV,
                SC.TYPE,
                SC.REF_ID,
                SC.SEQUENCE_NO,
                SC.HEADER,
                SC.MANDATORY,
                SC.SECTION_SEQUENCE_NO,
                SC.REF_VER,
                SC.REF_INFO,
                SC.DISPLAY_FORMAT,
                SC.DISPLAY_FORMAT_REV,
                SC.ASSOCIATION,
                SC.INTL,
                SC.REF_OWNER
           FROM FRAME_SECTION SC,
                ITFRMVSC V
          WHERE ( SC.SECTION_ID, SC.SUB_SECTION_ID, SC.TYPE, SC.REF_ID ) IN(
                   SELECT SECTION_ID,
                          SUB_SECTION_ID,
                          TYPE,
                          
                          
                          
                          DECODE(TYPE, IAPICONSTANT.SECTIONTYPE_ATTACHEDSPEC, 0, REF_ID) REF_ID
                          
                          
                      FROM ITFRMVSC
                    WHERE FRAME_NO = ASFRAMENO
                      AND REVISION = ANFRAMEREVISION
                      AND OWNER = ANFRAMEOWNER
                      AND MANDATORY = 'Y'



                   MINUS
                   SELECT SECTION_ID,
                          SUB_SECTION_ID,
                          TYPE,
                          
                          
                          
                          DECODE(TYPE, IAPICONSTANT.SECTIONTYPE_ATTACHEDSPEC, 0, REF_ID) REF_ID
                          
                          
                     FROM SPECIFICATION_SECTION
                    WHERE PART_NO = ASPARTNO
                      AND REVISION = ANREVISION



                )
            AND V.VIEW_ID = ANVIEW
            AND V.FRAME_NO = ASFRAMENO
            AND V.REVISION = ANFRAMEREVISION
            AND V.OWNER = ANFRAMEOWNER
            AND SC.FRAME_NO = V.FRAME_NO
            AND SC.REVISION = V.REVISION
            AND SC.OWNER = V.OWNER
            AND SC.SECTION_ID = V.SECTION_ID
            AND SC.SUB_SECTION_ID = V.SUB_SECTION_ID
            AND SC.TYPE = V.TYPE
            AND SC.REF_ID = V.REF_ID
            AND SC.SECTION_SEQUENCE_NO = V.SECTION_SEQUENCE_NO
            AND V.MANDATORY = 'Y';

      
      
      
      
      CURSOR L_DEL_SC_MASK_CURSOR(
         ANVIEW                     IN       IAPITYPE.ID_TYPE )
      IS
         SELECT SC.FRAME_NO,
                SC.REVISION,
                SC.OWNER,
                SC.SECTION_ID,
                SC.SECTION_REV,
                SC.SUB_SECTION_ID,
                SC.SUB_SECTION_REV,
                SC.TYPE,
                SC.REF_ID,
                SC.SEQUENCE_NO,
                SC.HEADER,
                SC.MANDATORY,
                SC.SECTION_SEQUENCE_NO,
                SC.REF_VER,
                SC.REF_INFO,
                SC.DISPLAY_FORMAT,
                SC.DISPLAY_FORMAT_REV,
                SC.ASSOCIATION,
                SC.INTL,
                SC.REF_OWNER
           FROM FRAME_SECTION SC,
                ITFRMVSC V
          WHERE ( SC.SECTION_ID, SC.SUB_SECTION_ID, SC.TYPE, SC.REF_ID ) IN(
                   SELECT SECTION_ID,
                          SUB_SECTION_ID,
                          TYPE,
                          
                          
                          
                          DECODE(TYPE, IAPICONSTANT.SECTIONTYPE_ATTACHEDSPEC, 0, REF_ID) REF_ID
                          
                          
                      FROM ITFRMVSC
                    WHERE FRAME_NO = ASFRAMENO
                      AND REVISION = ANFRAMEREVISION
                      AND OWNER = ANFRAMEOWNER



                   MINUS
                   SELECT SECTION_ID,
                          SUB_SECTION_ID,
                          TYPE,
                          
                          
                          
                          DECODE(TYPE, IAPICONSTANT.SECTIONTYPE_ATTACHEDSPEC, 0, REF_ID) REF_ID
                          
                          
                     FROM SPECIFICATION_SECTION
                    WHERE PART_NO = ASPARTNO
                      AND REVISION = ANREVISION
                      AND MANDATORY = 'H'



                )
            AND V.VIEW_ID = ANVIEW
            AND V.FRAME_NO = ASFRAMENO
            AND V.REVISION = ANFRAMEREVISION
            AND V.OWNER = ANFRAMEOWNER
            AND SC.FRAME_NO = V.FRAME_NO
            AND SC.REVISION = V.REVISION
            AND SC.OWNER = V.OWNER
            AND SC.SECTION_ID = V.SECTION_ID
            AND SC.SUB_SECTION_ID = V.SUB_SECTION_ID
            AND SC.TYPE = V.TYPE
            AND SC.REF_ID = V.REF_ID
            AND SC.SECTION_SEQUENCE_NO = V.SECTION_SEQUENCE_NO
            
            
            AND V.MANDATORY = 'H'
            AND NOT EXISTS
                ( SELECT *
                  FROM SPECIFICATION_PROP SP
                   WHERE SP.PART_NO = ASPARTNO
                     AND SP.REVISION = ANREVISION
                     AND SP.SECTION_ID = SC.SECTION_ID
                     AND SP.SUB_SECTION_ID = SC.SUB_SECTION_ID
                     AND (    NUM_1 IS NOT NULL
                             OR NUM_2 IS NOT NULL
                             OR NUM_3 IS NOT NULL
                             OR NUM_4 IS NOT NULL
                             OR NUM_5 IS NOT NULL
                             OR NUM_6 IS NOT NULL
                             OR NUM_7 IS NOT NULL
                             OR NUM_8 IS NOT NULL
                             OR NUM_9 IS NOT NULL
                             OR NUM_10 IS NOT NULL
                             OR CHAR_1 IS NOT NULL
                             OR CHAR_2 IS NOT NULL
                             OR CHAR_3 IS NOT NULL
                             OR CHAR_4 IS NOT NULL
                             OR CHAR_5 IS NOT NULL
                             OR CHAR_6 IS NOT NULL
                             OR BOOLEAN_1 IS NOT NULL
                             OR BOOLEAN_2 IS NOT NULL
                             OR BOOLEAN_3 IS NOT NULL
                             OR BOOLEAN_4 IS NOT NULL
                             OR DATE_1 IS NOT NULL
                             OR DATE_2 IS NOT NULL
                             OR TM_SET_NO IS NOT NULL
                             
                             
                             
                             
                             OR INFO IS NOT NULL
                             OR CHARACTERISTIC IS NOT NULL
                             
                             OR TEST_METHOD IS NOT NULL
                             
                             )
                 );
                

      

      
      CURSOR L_INS_AS_CURSOR
      IS
         SELECT *
           FROM FRAME_SECTION
          WHERE ( SECTION_ID, SUB_SECTION_ID, TYPE ) IN(
                   SELECT SECTION_ID,
                          SUB_SECTION_ID,
                          TYPE
                     FROM FRAME_SECTION
                    WHERE FRAME_NO = ASFRAMENO
                      AND REVISION = ANFRAMEREVISION
                      AND OWNER = ANFRAMEOWNER
                      AND MANDATORY = 'Y'
                      AND TYPE = IAPICONSTANT.SECTIONTYPE_ATTACHEDSPEC
                   MINUS
                   SELECT SECTION_ID,
                          SUB_SECTION_ID,
                          TYPE
                     FROM SPECIFICATION_SECTION
                    WHERE PART_NO = ASPARTNO
                      AND REVISION = ANREVISION
                      AND TYPE = IAPICONSTANT.SECTIONTYPE_ATTACHEDSPEC )
            AND FRAME_NO = ASFRAMENO
            AND REVISION = ANFRAMEREVISION
            AND OWNER = ANFRAMEOWNER;

      
      CURSOR L_UPD_SECTIONS_CURSOR
      IS
         SELECT *
           FROM FRAME_SECTION
          WHERE FRAME_NO = ASFRAMENO
            AND REVISION = ANFRAMEREVISION
            AND OWNER = ANFRAMEOWNER;

      CURSOR L_UPD_SC_MASK_CURSOR(
         ANVIEW                     IN       IAPITYPE.ID_TYPE )
      IS
         SELECT *
           FROM ITFRMVSC
          WHERE FRAME_NO = ASFRAMENO
            AND REVISION = ANFRAMEREVISION
            AND OWNER = ANFRAMEOWNER
            AND VIEW_ID = ANVIEW
            AND MANDATORY = 'Y';

      
      CURSOR L_UPD_DISPL_CURSOR
      IS
         SELECT SECTION_ID,
                SUB_SECTION_ID,
                REF_ID,
                TYPE,
                DISPLAY_FORMAT,
                DISPLAY_FORMAT_REV
           FROM FRAME_SECTION
          WHERE FRAME_NO = ASFRAMENO
            AND REVISION = ANFRAMEREVISION
            AND OWNER = ANFRAMEOWNER
            AND TYPE IN( 1, 4 )
         MINUS
         SELECT SECTION_ID,
                SUB_SECTION_ID,
                REF_ID,
                TYPE,
                DISPLAY_FORMAT,
                DISPLAY_FORMAT_REV
           FROM SPECIFICATION_SECTION
          WHERE PART_NO = ASPARTNO
            AND REVISION = ANREVISION
            AND TYPE IN( 1, 4 );

      
      CURSOR L_DEL_SECTIONS_CURSOR
      IS
         SELECT SECTION_ID,
                SUB_SECTION_ID,
                TYPE,
                REF_ID
           FROM SPECIFICATION_SECTION
          WHERE PART_NO = ASPARTNO
            AND REVISION = ANREVISION
            AND TYPE <> IAPICONSTANT.SECTIONTYPE_ATTACHEDSPEC
            AND NOT(      ( TYPE IN( 2, 6 ) )
                     AND (     ( REF_ID = 0 )
                           OR ( MOD( SECTION_SEQUENCE_NO,
                                     100 ) > 0 ) ) )
         MINUS
         SELECT SECTION_ID,
                SUB_SECTION_ID,
                TYPE,
                REF_ID
           FROM FRAME_SECTION
          WHERE FRAME_NO = ASFRAMENO
            AND REVISION = ANFRAMEREVISION
            AND OWNER = ANFRAMEOWNER
            AND TYPE <> IAPICONSTANT.SECTIONTYPE_ATTACHEDSPEC;

      
      CURSOR L_DEL_AS_CURSOR
      IS
         SELECT SECTION_ID,
                SUB_SECTION_ID,
                TYPE
           FROM SPECIFICATION_SECTION
          WHERE PART_NO = ASPARTNO
            AND REVISION = ANREVISION
            AND TYPE = IAPICONSTANT.SECTIONTYPE_ATTACHEDSPEC
         MINUS
         SELECT SECTION_ID,
                SUB_SECTION_ID,
                TYPE
           FROM FRAME_SECTION
          WHERE FRAME_NO = ASFRAMENO
            AND REVISION = ANFRAMEREVISION
            AND OWNER = ANFRAMEOWNER
            AND TYPE = IAPICONSTANT.SECTIONTYPE_ATTACHEDSPEC;

      
      
      CURSOR L_UPD_SECTIONS2_CURSOR
      IS
        SELECT SECTION_ID,
               SUB_SECTION_ID,
               TYPE,
               REF_ID,
               SECTION_SEQUENCE_NO
        FROM SPECIFICATION_SECTION
        WHERE PART_NO = ASPARTNO
            AND REVISION = ANREVISION
            AND TYPE IN (2, 6)
            AND REF_ID <> 0;
      

      LNCHECK                       NUMBER;
      LNCOUNT                       NUMBER;
      LNSEQUENCE                    IAPITYPE.SEQUENCE_TYPE;
      LSFRAMETYPE                   IAPITYPE.CLASS3PARTTYPE_TYPE;
      LSSPECTYPE                    IAPITYPE.CLASS3PARTTYPE_TYPE;
      LNVALID                       IAPITYPE.ID_TYPE;
      LNVIEW                        IAPITYPE.ID_TYPE;
      LNMASKSTATUS                  NUMBER;
      LSINTPARTNO                   IAPITYPE.PARTNO_TYPE;
      LNALLOW                       NUMBER;
      LNCOUNTER                     NUMBER;
      LSSCEXT                       IAPITYPE.STRING_TYPE;
      LBDELETE                      BOOLEAN := FALSE;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'ValidationFrame';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LNSECTIONID                   IAPITYPE.ID_TYPE;
      LNSUBSECTIONID                IAPITYPE.ID_TYPE;
      
      LNNEWPARENTSEQNO              IAPITYPE.SEQUENCE_TYPE;

   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      IF IAPIGENERAL.SESSION.APPLICATIONUSER.USERID IS NULL
      THEN
         IAPIGENERAL.SESSION.APPLICATIONUSER.USERID := USER;
      END IF;

      
      
      BEGIN
         SELECT COUNT( * )
           INTO LNCOUNT
           FROM FT_FRAMES
          WHERE OLD_FRAME_NO = ASOLDFRAMENO
            AND (     ( ANOLDFRAMEREVISION BETWEEN OLD_FRAME_REV_FROM AND OLD_FRAME_REV_TO )
                  OR (     OLD_FRAME_REV_FROM = 0
                       AND OLD_FRAME_REV_TO = 0 )
                  OR (     OLD_FRAME_REV_FROM <= ANOLDFRAMEREVISION
                       AND OLD_FRAME_REV_TO = 0 )
                  OR (     OLD_FRAME_REV_FROM = 0
                       AND OLD_FRAME_REV_TO >= ANOLDFRAMEREVISION ) )
            AND OLD_FRAME_OWNER = ANOLDFRAMEOWNER
            AND NEW_FRAME_NO = ASFRAMENO
            AND (     ( ANFRAMEREVISION BETWEEN NEW_FRAME_REV_FROM AND NEW_FRAME_REV_TO )
                  OR (     NEW_FRAME_REV_FROM = 0
                       AND NEW_FRAME_REV_TO = 0 )
                  OR (     NEW_FRAME_REV_FROM <= ANFRAMEREVISION
                       AND NEW_FRAME_REV_TO = 0 )
                  OR (     NEW_FRAME_REV_FROM = 0
                       AND NEW_FRAME_REV_TO >= ANFRAMEREVISION ) )
            AND NEW_FRAME_OWNER = ANFRAMEOWNER;

         IF LNCOUNT > 0
         THEN
            LNRETVAL := FILLFRAMETRANSFERTABLES( ASPARTNO,
                                                 ANREVISION );

            IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
            THEN
               IAPIGENERAL.LOGERROR( GSSOURCE,
                                     LSMETHOD,
                                     IAPIGENERAL.GETLASTERRORTEXT( ) );
               RETURN LNRETVAL;
            END IF;
         END IF;
      END;

      




      



      BEGIN
         FOR REC_INSERT IN L_INS_SECTIONS_CURSOR
         LOOP
            INSERT INTO SPECIFICATION_SECTION
                        ( PART_NO,
                          REVISION,
                          SECTION_ID,
                          SECTION_REV,
                          SUB_SECTION_ID,
                          SUB_SECTION_REV,
                          TYPE,
                          REF_ID,
                          REF_VER,
                          REF_INFO,
                          REF_OWNER,
                          SEQUENCE_NO,
                          HEADER,
                          SECTION_SEQUENCE_NO,
                          DISPLAY_FORMAT,
                          DISPLAY_FORMAT_REV,
                          INTL,
                          MANDATORY )
                 VALUES ( ASPARTNO,
                          ANREVISION,
                          REC_INSERT.SECTION_ID,
                          NVL( F_GET_SUB_REV( REC_INSERT.SECTION_ID,
                                              REC_INSERT.SECTION_REV,
                                              NULL,
                                              NULL,
                                              'SC' ),
                               0 ),
                          REC_INSERT.SUB_SECTION_ID,
                          NVL( F_GET_SUB_REV( REC_INSERT.SUB_SECTION_ID,
                                              REC_INSERT.SUB_SECTION_REV,
                                              NULL,
                                              NULL,
                                              'SB' ),
                               0 ),
                          REC_INSERT.TYPE,
                          REC_INSERT.REF_ID,
                          NVL( DECODE( REC_INSERT.TYPE,
                                       1, F_GET_SUB_REV( REC_INSERT.REF_ID,
                                                         REC_INSERT.REF_VER,
                                                         NULL,
                                                         NULL,
                                                         'PG' ),
                                       4, F_GET_SUB_REV( REC_INSERT.REF_ID,
                                                         REC_INSERT.REF_VER,
                                                         NULL,
                                                         NULL,
                                                         'SP' ),
                                       5, F_GET_SUB_REV( REC_INSERT.REF_ID,
                                                         REC_INSERT.REF_VER,
                                                         NULL,
                                                         NULL,
                                                         'FT' ),
                                       REC_INSERT.REF_VER ),
                               0 ),
                          REC_INSERT.REF_INFO,
                          REC_INSERT.REF_OWNER,
                          REC_INSERT.SEQUENCE_NO,
                          REC_INSERT.HEADER,
                          REC_INSERT.SECTION_SEQUENCE_NO,
                          REC_INSERT.DISPLAY_FORMAT,
                          REC_INSERT.DISPLAY_FORMAT_REV,
                          REC_INSERT.INTL,
                          REC_INSERT.MANDATORY );

            IAPIGENERAL.LOGINFO( GSSOURCE,
                                 LSMETHOD,
                                    'INSERTED : '
                                 || REC_INSERT.REF_ID
                                 || '/'
                                 || REC_INSERT.REF_VER );
         END LOOP;

         


         BEGIN
            
            
            SELECT MASK_ID
              INTO LNVIEW
              FROM SPECIFICATION_HEADER
             WHERE PART_NO = ASPARTNO
               AND REVISION = ANREVISION;

            
            LNRETVAL := CHECKREGIONALGLOBAL( ASPARTNO,
                                             ANREVISION,
                                             LNVIEW,
                                             LNALLOW );

            IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
            THEN
               IAPIGENERAL.LOGERROR( GSSOURCE,
                                     LSMETHOD,
                                     IAPIGENERAL.GETLASTERRORTEXT( ) );
               RETURN LNRETVAL;
            END IF;

            IF     LNVIEW > 0
               AND LNVIEW IS NOT NULL
            THEN
               


               
               BEGIN
                  SELECT STATUS
                    INTO LNMASKSTATUS
                    FROM ITFRMV
                   WHERE FRAME_NO = ASFRAMENO
                     AND REVISION = ANFRAMEREVISION
                     AND OWNER = ANFRAMEOWNER
                     AND VIEW_ID = LNVIEW;

                  IF LNMASKSTATUS = 1
                  THEN
                     
                     BEGIN
                        UPDATE SPECIFICATION_HEADER
                           SET MASK_ID = -1
                         WHERE PART_NO = ASPARTNO
                           AND REVISION = ANREVISION;

                        LNVIEW := -1;
                     END;
                  END IF;
               EXCEPTION
                  WHEN NO_DATA_FOUND
                  THEN
                     NULL;
               END;
            ELSE
               

               


               BEGIN
                  SELECT MAX( VIEW_ID )
                    INTO LNVIEW
                    FROM ITFRMV
                   WHERE FRAME_NO = ASFRAMENO
                     AND REVISION = ANFRAMEREVISION
                     AND OWNER = ANFRAMEOWNER
                     AND STATUS = 0;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     LNVIEW := -1;
               END;

               
               LNRETVAL := CHECKREGIONALGLOBAL( ASPARTNO,
                                                ANREVISION,
                                                LNVIEW,
                                                LNALLOW );

               IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
               THEN
                  IAPIGENERAL.LOGERROR( GSSOURCE,
                                        LSMETHOD,
                                        IAPIGENERAL.GETLASTERRORTEXT( ) );
                  RETURN LNRETVAL;
               END IF;

               IF     LNVIEW > 0
                  AND LNVIEW IS NOT NULL
               THEN
                  UPDATE SPECIFICATION_HEADER
                     SET MASK_ID = LNVIEW
                   WHERE PART_NO = ASPARTNO
                     AND REVISION = ANREVISION;
               END IF;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               IAPIGENERAL.LOGERROR( GSSOURCE,
                                     LSMETHOD,
                                     SQLERRM );
               RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
         END;

         


         IF LNVIEW > 0
         THEN
            
            FOR REC_INSERT IN L_INS_SC_MASK_CURSOR( LNVIEW )
            LOOP
               INSERT INTO SPECIFICATION_SECTION
                           ( PART_NO,
                             REVISION,
                             SECTION_ID,
                             SECTION_REV,
                             SUB_SECTION_ID,
                             SUB_SECTION_REV,
                             TYPE,
                             REF_ID,
                             REF_VER,
                             REF_INFO,
                             REF_OWNER,
                             SEQUENCE_NO,
                             HEADER,
                             SECTION_SEQUENCE_NO,
                             DISPLAY_FORMAT,
                             DISPLAY_FORMAT_REV,
                             INTL,
                             MANDATORY )
                    VALUES ( ASPARTNO,
                             ANREVISION,
                             REC_INSERT.SECTION_ID,
                             NVL( F_GET_SUB_REV( REC_INSERT.SECTION_ID,
                                                 REC_INSERT.SECTION_REV,
                                                 NULL,
                                                 NULL,
                                                 'SC' ),
                                  0 ),
                             REC_INSERT.SUB_SECTION_ID,
                             NVL( F_GET_SUB_REV( REC_INSERT.SUB_SECTION_ID,
                                                 REC_INSERT.SUB_SECTION_REV,
                                                 NULL,
                                                 NULL,
                                                 'SB' ),
                                  0 ),
                             REC_INSERT.TYPE,
                             REC_INSERT.REF_ID,
                             NVL( DECODE( REC_INSERT.TYPE,
                                          1, F_GET_SUB_REV( REC_INSERT.REF_ID,
                                                            REC_INSERT.REF_VER,
                                                            NULL,
                                                            NULL,
                                                            'PG' ),
                                          4, F_GET_SUB_REV( REC_INSERT.REF_ID,
                                                            REC_INSERT.REF_VER,
                                                            NULL,
                                                            NULL,
                                                            'SP' ),
                                          5, F_GET_SUB_REV( REC_INSERT.REF_ID,
                                                            REC_INSERT.REF_VER,
                                                            NULL,
                                                            NULL,
                                                            'FT' ),
                                          REC_INSERT.REF_VER ),
                                  0 ),
                             REC_INSERT.REF_INFO,
                             REC_INSERT.REF_OWNER,
                             REC_INSERT.SEQUENCE_NO,
                             REC_INSERT.HEADER,
                             REC_INSERT.SECTION_SEQUENCE_NO,
                             REC_INSERT.DISPLAY_FORMAT,
                             REC_INSERT.DISPLAY_FORMAT_REV,
                             REC_INSERT.INTL,
                             'Y' );

               IAPIGENERAL.LOGINFO( GSSOURCE,
                                    LSMETHOD,
                                       'INSERTED(mask) : '
                                    || REC_INSERT.REF_ID
                                    || '/'
                                    || REC_INSERT.REF_VER );
            END LOOP;
         END IF;

         
         


         IF LNVIEW > 0
         THEN
            
            FOR REC_DEL IN L_DEL_SC_MASK_CURSOR( LNVIEW )
            LOOP
               DELETE FROM SPECIFICATION_SECTION
                 WHERE PART_NO = ASPARTNO
                 AND REVISION = ANREVISION
                 AND SECTION_ID = REC_DEL.SECTION_ID
                 AND SUB_SECTION_ID = REC_DEL.SUB_SECTION_ID
                 AND TYPE =  REC_DEL.TYPE
                 AND REF_ID = REC_DEL.REF_ID
                 AND SECTION_SEQUENCE_NO = REC_DEL.SECTION_SEQUENCE_NO;

               IAPIGENERAL.LOGINFO( GSSOURCE,
                                    LSMETHOD,
                                       'DELTED(mask) : '
                                    || REC_DEL.REF_ID
                                    || '/'
                                    || REC_DEL.REF_VER );
            END LOOP;
         END IF;
         

         


         FOR REC_INSERT IN L_INS_AS_CURSOR
         LOOP
            INSERT INTO SPECIFICATION_SECTION
                        ( PART_NO,
                          REVISION,
                          SECTION_ID,
                          SECTION_REV,
                          SUB_SECTION_ID,
                          SUB_SECTION_REV,
                          TYPE,
                          REF_ID,
                          REF_VER,
                          REF_INFO,
                          REF_OWNER,
                          SEQUENCE_NO,
                          HEADER,
                          SECTION_SEQUENCE_NO,
                          DISPLAY_FORMAT,
                          DISPLAY_FORMAT_REV,
                          INTL,
                          MANDATORY )
                 VALUES ( ASPARTNO,
                          ANREVISION,
                          REC_INSERT.SECTION_ID,
                          NVL( F_GET_SUB_REV( REC_INSERT.SECTION_ID,
                                              REC_INSERT.SECTION_REV,
                                              NULL,
                                              NULL,
                                              'SC' ),
                               0 ),
                          REC_INSERT.SUB_SECTION_ID,
                          NVL( F_GET_SUB_REV( REC_INSERT.SUB_SECTION_ID,
                                              REC_INSERT.SUB_SECTION_REV,
                                              NULL,
                                              NULL,
                                              'SB' ),
                               0 ),
                          REC_INSERT.TYPE,
                          REC_INSERT.REF_ID,
                          NVL( DECODE( REC_INSERT.TYPE,
                                       1, F_GET_SUB_REV( REC_INSERT.REF_ID,
                                                         REC_INSERT.REF_VER,
                                                         NULL,
                                                         NULL,
                                                         'PG' ),
                                       4, F_GET_SUB_REV( REC_INSERT.REF_ID,
                                                         REC_INSERT.REF_VER,
                                                         NULL,
                                                         NULL,
                                                         'SP' ),
                                       5, F_GET_SUB_REV( REC_INSERT.REF_ID,
                                                         REC_INSERT.REF_VER,
                                                         NULL,
                                                         NULL,
                                                         'FT' ),
                                       REC_INSERT.REF_VER ),
                               0 ),
                          REC_INSERT.REF_INFO,
                          REC_INSERT.REF_OWNER,
                          REC_INSERT.SEQUENCE_NO,
                          REC_INSERT.HEADER,
                          REC_INSERT.SECTION_SEQUENCE_NO,
                          REC_INSERT.DISPLAY_FORMAT,
                          REC_INSERT.DISPLAY_FORMAT_REV,
                          REC_INSERT.INTL,
                          REC_INSERT.MANDATORY );

            IAPIGENERAL.LOGINFO( GSSOURCE,
                                 LSMETHOD,
                                    'INSERTED(as) : '
                                 || REC_INSERT.REF_ID
                                 || '/'
                                 || REC_INSERT.REF_VER );
         END LOOP;
      EXCEPTION
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
      END;

      



      


      BEGIN
         FOR REC_DELETE IN L_DEL_SECTIONS_CURSOR
         LOOP
            LBDELETE := FALSE;

            
            
            
                           



            SELECT COUNT( 1 )
              INTO LNCOUNTER
              FROM ITSHEXT SE
             WHERE SE.REF_ID = REC_DELETE.REF_ID
               AND SE.TYPE = REC_DELETE.TYPE
               AND SE.SUB_SECTION_ID = REC_DELETE.SUB_SECTION_ID
               AND SE.SECTION_ID = REC_DELETE.SECTION_ID
               AND SE.REVISION = ANREVISION
               AND SE.PART_NO = ASPARTNO;

            IF ( LNCOUNTER > 0 )
            THEN
               IAPIGENERAL.LOGINFO( 'ValSpec',
                                    'frame',
                                    'Specification item added via extendable frame' );

               



               SELECT NVL( MAX( SC_EXT ),
                           'N' )
                 INTO LSSCEXT
                 FROM FRAME_SECTION
                WHERE FRAME_NO = ASFRAMENO
                  AND REVISION = ANFRAMEREVISION
                  AND OWNER = ANFRAMEOWNER
                  AND SECTION_ID = REC_DELETE.SECTION_ID
                  AND SUB_SECTION_ID = REC_DELETE.SUB_SECTION_ID;

               IF LSSCEXT <> 'Y'
               THEN
                  IAPIGENERAL.LOGINFO( 'ValSpec',
                                       'frame',
                                       'Section NOT extendable in the frame ==> delete' );
                  LBDELETE := TRUE;
               END IF;
            ELSE
               IAPIGENERAL.LOGINFO( 'ValSpec',
                                    'frame',
                                    'Specification item NOT added via extendable frame ==> delete' );
               LBDELETE := TRUE;
            END IF;

            
            IF ( LBDELETE = TRUE )
            THEN
               
               IAPIGENERAL.LOGINFO( 'ValSpec',
                                    'frame',
                                       'Delete from specification_section/itshext '
                                    || REC_DELETE.SECTION_ID
                                    || '   '
                                    || REC_DELETE.SUB_SECTION_ID
                                    || '   '
                                    || REC_DELETE.REF_ID
                                    || '   '
                                    || REC_DELETE.TYPE );

               DELETE FROM SPECIFICATION_SECTION
                     WHERE PART_NO = ASPARTNO
                       AND REVISION = ANREVISION
                       AND SECTION_ID = REC_DELETE.SECTION_ID
                       AND SUB_SECTION_ID = REC_DELETE.SUB_SECTION_ID
                       AND TYPE = REC_DELETE.TYPE
                       AND REF_ID = REC_DELETE.REF_ID;

               IAPIGENERAL.LOGINFO( 'ValSpec',
                                    'frame',
                                       'Delete from specification_section '
                                    || SQL%ROWCOUNT
                                    || 'row(s) deleted' );

               
               DELETE FROM ITSHEXT
                     WHERE PART_NO = ASPARTNO
                       AND REVISION = ANREVISION
                       AND SECTION_ID = REC_DELETE.SECTION_ID
                       AND SUB_SECTION_ID = REC_DELETE.SUB_SECTION_ID
                       AND TYPE = REC_DELETE.TYPE
                       AND REF_ID = REC_DELETE.REF_ID;

               IAPIGENERAL.LOGINFO( 'ValSpec',
                                    'frame',
                                       'Delete from itshext '
                                    || SQL%ROWCOUNT
                                    || 'row(s) deleted' );
            END IF;
         END LOOP;

         
         FOR REC_DELETE IN L_DEL_AS_CURSOR
         LOOP
            
            SELECT NVL( MAX( SC_EXT ),
                        'N' )
              INTO LSSCEXT
              FROM FRAME_SECTION
             WHERE FRAME_NO = ASFRAMENO
               AND REVISION = ANFRAMEREVISION
               AND OWNER = ANFRAMEOWNER
               AND SECTION_ID = REC_DELETE.SECTION_ID
               AND SUB_SECTION_ID = REC_DELETE.SUB_SECTION_ID;

            
            SELECT COUNT( 1 )
              INTO LNCOUNTER
              FROM ITSHEXT SE
             WHERE SE.TYPE = REC_DELETE.TYPE
               AND SE.SUB_SECTION_ID = REC_DELETE.SUB_SECTION_ID
               AND SE.SECTION_ID = REC_DELETE.SECTION_ID
               AND SE.REVISION = ANREVISION
               AND SE.PART_NO = ASPARTNO;

            IF    LNCOUNTER = 0
               OR LSSCEXT <> 'Y'
            THEN
               DELETE FROM SPECIFICATION_SECTION
                     WHERE PART_NO = ASPARTNO
                       AND REVISION = ANREVISION
                       AND SECTION_ID = REC_DELETE.SECTION_ID
                       AND SUB_SECTION_ID = REC_DELETE.SUB_SECTION_ID
                       AND TYPE = REC_DELETE.TYPE
                       AND MOD( SECTION_SEQUENCE_NO,
                                '100' ) = 0;

               
               DELETE FROM ITSHEXT
                     WHERE PART_NO = ASPARTNO
                       AND REVISION = ANREVISION
                       AND SECTION_ID = REC_DELETE.SECTION_ID
                       AND SUB_SECTION_ID = REC_DELETE.SUB_SECTION_ID
                       AND TYPE = REC_DELETE.TYPE;
            END IF;
         END LOOP;

      EXCEPTION
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
      END;

      

      SELECT COUNT( 'Y' )
        INTO LNCOUNT
        FROM SPECIFICATION_ING
       WHERE PART_NO = ASPARTNO
         AND REVISION = ANREVISION;

      IF LNCOUNT > 0
      THEN
         

         SELECT COUNT( 'Y' )
           INTO LNCOUNT
           FROM SPECIFICATION_SECTION
          WHERE PART_NO = ASPARTNO
            AND REVISION = ANREVISION
            AND TYPE = 9;

         IF LNCOUNT = 0
         THEN
            INSERT INTO SPECIFICATION_SECTION
                        ( PART_NO,
                          REVISION,
                          SECTION_ID,
                          SECTION_REV,
                          SUB_SECTION_ID,
                          SUB_SECTION_REV,
                          TYPE,
                          REF_ID,
                          REF_VER,
                          REF_INFO,
                          REF_OWNER,
                          SEQUENCE_NO,
                          HEADER,
                          SECTION_SEQUENCE_NO,
                          DISPLAY_FORMAT,
                          DISPLAY_FORMAT_REV,
                          INTL,
                          MANDATORY )
               SELECT ASPARTNO,
                      ANREVISION,
                      SECTION_ID,
                      NVL( F_GET_SUB_REV( SECTION_ID,
                                          SECTION_REV,
                                          NULL,
                                          NULL,
                                          'SC' ),
                           0 ),
                      SUB_SECTION_ID,
                      NVL( F_GET_SUB_REV( SUB_SECTION_ID,
                                          SUB_SECTION_REV,
                                          NULL,
                                          NULL,
                                          'SB' ),
                           0 ),
                      TYPE,
                      REF_ID,
                      0,
                      REF_INFO,
                      REF_OWNER,
                      SEQUENCE_NO,
                      HEADER,
                      SECTION_SEQUENCE_NO,
                      DISPLAY_FORMAT,
                      DISPLAY_FORMAT_REV,
                      INTL,
                      MANDATORY
                 FROM FRAME_SECTION
                WHERE FRAME_NO = ASFRAMENO
                  AND REVISION = ANFRAMEREVISION
                  AND TYPE = 9;
         END IF;
      END IF;

      
      SELECT COUNT( 'Y' )
        INTO LNCOUNT
        FROM ITSHBN
       WHERE PART_NO = ASPARTNO
         AND REVISION = ANREVISION;

      IF LNCOUNT > 0
      THEN
         

         BEGIN
            SELECT SECTION_ID,
                   SUB_SECTION_ID
              INTO LNSECTIONID,
                   LNSUBSECTIONID
              FROM SPECIFICATION_SECTION
             WHERE PART_NO = ASPARTNO
               AND REVISION = ANREVISION
               AND TYPE = 10;

            UPDATE ITSHBN
               SET SECTION_ID = LNSECTIONID,
                   SUB_SECTION_ID = LNSUBSECTIONID
             WHERE PART_NO = ASPARTNO
               AND REVISION = ANREVISION;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               INSERT INTO SPECIFICATION_SECTION
                           ( PART_NO,
                             REVISION,
                             SECTION_ID,
                             SECTION_REV,
                             SUB_SECTION_ID,
                             SUB_SECTION_REV,
                             TYPE,
                             REF_ID,
                             REF_VER,
                             REF_INFO,
                             REF_OWNER,
                             SEQUENCE_NO,
                             HEADER,
                             SECTION_SEQUENCE_NO,
                             DISPLAY_FORMAT,
                             DISPLAY_FORMAT_REV,
                             INTL,
                             MANDATORY )
                  SELECT ASPARTNO,
                         ANREVISION,
                         SECTION_ID,
                         NVL( F_GET_SUB_REV( SECTION_ID,
                                             SECTION_REV,
                                             NULL,
                                             NULL,
                                             'SC' ),
                              0 ),
                         SUB_SECTION_ID,
                         NVL( F_GET_SUB_REV( SUB_SECTION_ID,
                                             SUB_SECTION_REV,
                                             NULL,
                                             NULL,
                                             'SB' ),
                              0 ),
                         TYPE,
                         REF_ID,
                         0,
                         REF_INFO,
                         REF_OWNER,
                         SEQUENCE_NO,
                         HEADER,
                         SECTION_SEQUENCE_NO,
                         DISPLAY_FORMAT,
                         DISPLAY_FORMAT_REV,
                         INTL,
                         MANDATORY
                    FROM FRAME_SECTION
                   WHERE FRAME_NO = ASFRAMENO
                     AND REVISION = ANFRAMEREVISION
                     AND TYPE = 10;
         END;
      END IF;

      
      SELECT COUNT( 'Y' )
        INTO LNCOUNT
        FROM BOM_HEADER
       WHERE PART_NO = ASPARTNO
         AND REVISION = ANREVISION;

      IF LNCOUNT > 0
      THEN
         SELECT COUNT( 'Y' )
           INTO LNCOUNT
           FROM SPECIFICATION_SECTION
          WHERE PART_NO = ASPARTNO
            AND REVISION = ANREVISION
            AND TYPE = 3;

         IF LNCOUNT = 0
         THEN
            INSERT INTO SPECIFICATION_SECTION
                        ( PART_NO,
                          REVISION,
                          SECTION_ID,
                          SECTION_REV,
                          SUB_SECTION_ID,
                          SUB_SECTION_REV,
                          TYPE,
                          REF_ID,
                          REF_VER,
                          REF_INFO,
                          REF_OWNER,
                          SEQUENCE_NO,
                          HEADER,
                          SECTION_SEQUENCE_NO,
                          DISPLAY_FORMAT,
                          DISPLAY_FORMAT_REV,
                          INTL,
                          MANDATORY )
               SELECT ASPARTNO,
                      ANREVISION,
                      SECTION_ID,
                      NVL( F_GET_SUB_REV( SECTION_ID,
                                          SECTION_REV,
                                          NULL,
                                          NULL,
                                          'SC' ),
                           0 ),
                      SUB_SECTION_ID,
                      NVL( F_GET_SUB_REV( SUB_SECTION_ID,
                                          SUB_SECTION_REV,
                                          NULL,
                                          NULL,
                                          'SB' ),
                           0 ),
                      TYPE,
                      REF_ID,
                      0,
                      REF_INFO,
                      REF_OWNER,
                      SEQUENCE_NO,
                      HEADER,
                      SECTION_SEQUENCE_NO,
                      DISPLAY_FORMAT,
                      DISPLAY_FORMAT_REV,
                      INTL,
                      MANDATORY
                 FROM FRAME_SECTION
                WHERE FRAME_NO = ASFRAMENO
                  AND REVISION = ANFRAMEREVISION
                  AND TYPE = 3;
         END IF;
      END IF;

      
      BEGIN
         FOR REC_UPD IN L_UPD_DISPL_CURSOR
         LOOP
            LNRETVAL :=
               CLEANLAYOUT( ASPARTNO,
                            ANREVISION,
                            REC_UPD.DISPLAY_FORMAT,
                            REC_UPD.DISPLAY_FORMAT_REV,
                            REC_UPD.SECTION_ID,
                            REC_UPD.SUB_SECTION_ID,
                            REC_UPD.REF_ID,
                            REC_UPD.TYPE );

            IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
            THEN
               IAPIGENERAL.LOGERROR( GSSOURCE,
                                     LSMETHOD,
                                     IAPIGENERAL.GETLASTERRORTEXT( ) );
               RETURN LNRETVAL;
            END IF;
         END LOOP;
      EXCEPTION
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
      END;

      
      BEGIN
         FOR REC_UPD IN L_UPD_SECTIONS_CURSOR
         LOOP
            UPDATE SPECIFICATION_SECTION
               SET SECTION_SEQUENCE_NO = REC_UPD.SECTION_SEQUENCE_NO,
                   SECTION_REV = REC_UPD.SECTION_REV,
                   SUB_SECTION_REV = REC_UPD.SUB_SECTION_REV,
                   REF_VER = REC_UPD.REF_VER,
                   REF_INFO = REC_UPD.REF_INFO,
                   REF_OWNER = REC_UPD.REF_OWNER,
                   HEADER = REC_UPD.HEADER,
                   DISPLAY_FORMAT =
                      DECODE( TYPE,
                              3, DECODE( DISPLAY_FORMAT,
                                         NULL, REC_UPD.DISPLAY_FORMAT,
                                         DISPLAY_FORMAT ),
                              DECODE( TYPE,
                                      9, DECODE( DISPLAY_FORMAT,
                                                 NULL, REC_UPD.DISPLAY_FORMAT,
                                                 DISPLAY_FORMAT ),
                                      10, DECODE( DISPLAY_FORMAT,
                                                  NULL, REC_UPD.DISPLAY_FORMAT,
                                                  DISPLAY_FORMAT ),
                                      REC_UPD.DISPLAY_FORMAT ) ),
                   DISPLAY_FORMAT_REV =
                      DECODE( TYPE,
                              3, DECODE( DISPLAY_FORMAT_REV,
                                         NULL, REC_UPD.DISPLAY_FORMAT_REV,
                                         DISPLAY_FORMAT_REV ),
                              DECODE( TYPE,
                                      9, DECODE( DISPLAY_FORMAT_REV,
                                                 NULL, REC_UPD.DISPLAY_FORMAT_REV,
                                                 DISPLAY_FORMAT_REV ),
                                      10, DECODE( DISPLAY_FORMAT,
                                                  NULL, REC_UPD.DISPLAY_FORMAT,
                                                  DISPLAY_FORMAT ),
                                      REC_UPD.DISPLAY_FORMAT_REV ) ),
                   INTL = REC_UPD.INTL,
                   MANDATORY = REC_UPD.MANDATORY
             WHERE PART_NO = ASPARTNO
               AND REVISION = ANREVISION
               AND SECTION_ID = REC_UPD.SECTION_ID
               AND SUB_SECTION_ID = REC_UPD.SUB_SECTION_ID
               AND TYPE = REC_UPD.TYPE
               AND DECODE( TYPE,
                           9, 0,
                           10, 0,
                           DECODE( TYPE,
                                   8, 0,
                                   REF_ID ) ) = REC_UPD.REF_ID;
         END LOOP;

        
        
         FOR REC_UPD2 IN L_UPD_SECTIONS2_CURSOR
         LOOP
            BEGIN
                
                
                LNNEWPARENTSEQNO := 0;
                
                SELECT SECTION_SEQUENCE_NO
                INTO LNNEWPARENTSEQNO
                FROM FRAME_SECTION
                WHERE FRAME_NO = ASFRAMENO
                    AND REVISION = ANFRAMEREVISION
                    AND OWNER = ANFRAMEOWNER
                    AND SECTION_ID = REC_UPD2.SECTION_ID
                    AND SUB_SECTION_ID = REC_UPD2.SUB_SECTION_ID
                    AND TYPE = REC_UPD2.TYPE
                    AND REF_ID = 0;

            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    
                    
                    LNNEWPARENTSEQNO := 0;
                    
                WHEN OTHERS
                THEN
                    IAPIGENERAL.LOGERROR( GSSOURCE,
                                          LSMETHOD,
                                          SQLERRM );
                    RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
            END;

            
            
            IF (LNNEWPARENTSEQNO > 0)
            
            THEN
                UPDATE SPECIFICATION_SECTION
                SET SECTION_SEQUENCE_NO =  LNNEWPARENTSEQNO +  MOD(SECTION_SEQUENCE_NO, 100)
                WHERE PART_NO = ASPARTNO
                    AND REVISION = ANREVISION
                    AND SECTION_ID = REC_UPD2.SECTION_ID
                    AND SUB_SECTION_ID = REC_UPD2.SUB_SECTION_ID
                    AND TYPE = REC_UPD2.TYPE
                    AND REF_ID = REC_UPD2.REF_ID
                    AND SECTION_SEQUENCE_NO = REC_UPD2.SECTION_SEQUENCE_NO;
            END IF;

         END LOOP;
         

      EXCEPTION
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
      END;

      
      IF     LNVIEW > 0
         AND LNVIEW IS NOT NULL
      THEN
         BEGIN
            FOR REC_UPD IN L_UPD_SC_MASK_CURSOR( LNVIEW )
            LOOP
               UPDATE SPECIFICATION_SECTION
                  SET MANDATORY = REC_UPD.MANDATORY
                WHERE PART_NO = ASPARTNO
                  AND REVISION = ANREVISION
                  AND SECTION_ID = REC_UPD.SECTION_ID
                  AND SUB_SECTION_ID = REC_UPD.SUB_SECTION_ID
                  AND TYPE = REC_UPD.TYPE
                  AND SECTION_SEQUENCE_NO = REC_UPD.SECTION_SEQUENCE_NO
                  AND DECODE( TYPE,
                              9, 0,
                              10, 0,
                              DECODE( TYPE,
                                      8, 0,
                                      REF_ID ) ) = REC_UPD.REF_ID;
            END LOOP;
         EXCEPTION
            WHEN OTHERS
            THEN
               IAPIGENERAL.LOGERROR( GSSOURCE,
                                     LSMETHOD,
                                     SQLERRM );
               RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
         END;
      END IF;

      
      


      BEGIN
         SELECT INT_PART_NO
           INTO LSINTPARTNO
           FROM SPECIFICATION_HEADER
          WHERE PART_NO = ASPARTNO
            AND REVISION = ANREVISION;

         IF LSINTPARTNO IS NULL
         THEN
            UPDATE SPECIFICATION_SECTION
               SET SECTION_REV = NVL( F_GET_SUB_REV( SECTION_ID,
                                                     SECTION_REV,
                                                     NULL,
                                                     NULL,
                                                     'SC' ),
                                      0 ),
                   SUB_SECTION_REV = NVL( F_GET_SUB_REV( SUB_SECTION_ID,
                                                         SUB_SECTION_REV,
                                                         NULL,
                                                         NULL,
                                                         'SB' ),
                                          0 ),
                   REF_VER =
                      DECODE( TYPE,
                              1, NVL( F_GET_SUB_REV( REF_ID,
                                                     REF_VER,
                                                     NULL,
                                                     NULL,
                                                     'PG' ),
                                      0 ),
                              4, NVL( F_GET_SUB_REV( REF_ID,
                                                     REF_VER,
                                                     NULL,
                                                     NULL,
                                                     'SP' ),
                                      0 ),
                              5, NVL( F_GET_SUB_REV( REF_ID,
                                                     REF_VER,
                                                     NULL,
                                                     NULL,
                                                     'FT' ),
                                      0 ),

                              












                                6, NVL( REF_VER, 0 ),
                                
                                












                                   2, NVL( REF_VER, 0 ),
                                


                             REF_VER )
             WHERE PART_NO = ASPARTNO
             
             
             
               
               AND REVISION = ANREVISION
               AND ((TYPE <> 6)
                     OR
                     (TYPE = 6
                      AND REF_ID <> 0
                      AND REF_VER <> 0)
                    );
             
             

            UPDATE SPECIFICATION_SECTION SS
               SET SS.REF_INFO = ( SELECT DECODE( OLE_OBJECT,
                                                  'N', 1,
                                                  DECODE( OLE_OBJECT,
                                                          'P', 2,
                                                          0 ) )
                                    FROM ITOID DS
                                   WHERE DS.OBJECT_ID = SS.REF_ID
                                     AND DS.REVISION = SS.REF_VER
                                     AND DS.OWNER = SS.REF_OWNER )
             WHERE PART_NO = ASPARTNO
               AND REVISION = ANREVISION
               AND REF_ID <> 0
               
               
               
               
               AND TYPE = 6
               AND REF_VER <> 0;
               
               
         END IF;

         
         BEGIN
            UPDATE ITPROBJ
               SET REVISION =

                      












                       NVL(REVISION, 0)
                      


             WHERE PART_NO = ASPARTNO;
         EXCEPTION
            WHEN DUP_VAL_ON_INDEX
            THEN
               
               NULL;
         END;
      EXCEPTION
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
      END;

      
      BEGIN
         INSERT INTO SPECIFICATION_KW
                     ( PART_NO,
                       KW_ID,
                       KW_VALUE,
                       INTL )
            SELECT ASPARTNO,
                   KW_ID,
                   KW_VALUE,
                   INTL
              FROM FRAME_KW
             WHERE FRAME_NO = ASFRAMENO
               AND OWNER = ANFRAMEOWNER
               AND ( ASPARTNO, KW_ID ) IN( SELECT ASPARTNO,
                                                  KW_ID
                                            FROM FRAME_KW
                                           WHERE FRAME_NO = ASFRAMENO
                                             AND OWNER = ANFRAMEOWNER
                                          MINUS
                                          SELECT ASPARTNO,
                                                 KW_ID
                                            FROM SPECIFICATION_KW
                                           WHERE PART_NO = ASPARTNO );
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            NULL;
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
      END;

      


      BEGIN
         SELECT COUNT( * )
           INTO LNCHECK
           FROM ITPRCL
          WHERE PART_NO = ASPARTNO;

         IF LNCHECK = 0
         THEN
            SELECT C3.TYPE
              INTO LSFRAMETYPE
              FROM CLASS3 C3,
                   FRAME_HEADER FH
             WHERE FH.CLASS3_ID = C3.CLASS
               AND FH.FRAME_NO = ASFRAMENO
               AND FH.REVISION = ANFRAMEREVISION
               AND FH.OWNER = ANFRAMEOWNER;

            SELECT C3.TYPE
              INTO LSSPECTYPE
              FROM CLASS3 C3,
                   PART PRT
             WHERE PRT.PART_TYPE = C3.CLASS
               AND PART_NO = ASPARTNO;

            IF LSFRAMETYPE = LSSPECTYPE
            THEN
               


               




               NULL;
            END IF;
         END IF;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            NULL;
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
      END;

      
      DELETE FROM ITSHVALD
            WHERE PART_NO = ASPARTNO
              AND REVISION = ANREVISION;

      BEGIN
         
         IF LNALLOW = 1
         THEN
            IF LNVIEW IS NULL
            THEN
               SELECT VAL_ID
                 INTO LNVALID
                 FROM ITFRMVAL
                WHERE FRAME_NO = ASFRAMENO
                  AND REVISION = ANFRAMEREVISION
                  AND OWNER = ANFRAMEOWNER
                  AND MASK_ID = -1;
            ELSE
               SELECT VAL_ID
                 INTO LNVALID
                 FROM ITFRMVAL
                WHERE FRAME_NO = ASFRAMENO
                  AND REVISION = ANFRAMEREVISION
                  AND OWNER = ANFRAMEOWNER
                  AND MASK_ID = LNVIEW;
            END IF;

            INSERT INTO ITSHVALD
                        ( PART_NO,
                          REVISION,
                          VAL_SEQ,
                          TYPE,
                          SECTION_ID,
                          SUB_SECTION_ID,
                          PROPERTY_GROUP,
                          PROPERTY,
                          ATTRIBUTE,
                          HEADER_ID,
                          REF_ID,
                          REF_OWNER )
               SELECT ASPARTNO,
                      ANREVISION,
                      VAL_SEQ,
                      TYPE,
                      SECTION_ID,
                      SUB_SECTION_ID,
                      PROPERTY_GROUP,
                      PROPERTY,
                      ATTRIBUTE,
                      HEADER_ID,
                      REF_ID,
                      REF_OWNER
                 FROM ITFRMVALD
                WHERE VAL_ID = LNVALID;

            
            LNRETVAL := INSERTRULES( ASPARTNO,
                                     ANREVISION );

            IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
            THEN
               IAPIGENERAL.LOGERROR( GSSOURCE,
                                     LSMETHOD,
                                     IAPIGENERAL.GETLASTERRORTEXT( ) );
               RETURN LNRETVAL;
            END IF;
         END IF;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            
            NULL;
      END;

      
      LNRETVAL := UPDATELAYOUT( ASPARTNO,
                                ANREVISION,
                                1 );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN LNRETVAL;
      END IF;

      RETURN IAPICONSTANTDBERROR.DBERR_SUCCESS;
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END VALIDATIONFRAME;


   FUNCTION UPDATEFROMFRAME(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE,
      ASOLDFRAMENO               IN       IAPITYPE.FRAMENO_TYPE,
      ANOLDFRAMEREVISION         IN       IAPITYPE.FRAMEREVISION_TYPE,
      ANOLDFRAMEOWNER            IN       IAPITYPE.OWNER_TYPE,
      ASFRAMENO                  IN       IAPITYPE.FRAMENO_TYPE,
      ANFRAMEREVISION            IN       IAPITYPE.FRAMEREVISION_TYPE,
      ANFRAMEOWNER               IN       IAPITYPE.OWNER_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS


















      
      CURSOR C_INS_PG
      IS
         SELECT A.SECTION_ID,
                A.SUB_SECTION_ID,
                A.PROPERTY_GROUP,
                A.PROPERTY,
                A.ATTRIBUTE
           FROM FRAME_PROP A,
                SPECIFICATION_SECTION B
          WHERE A.FRAME_NO = ASFRAMENO
            AND A.REVISION = ANFRAMEREVISION
            AND A.OWNER = ANFRAMEOWNER
            AND B.PART_NO = ASPARTNO
            AND B.REVISION = ANREVISION
            AND A.MANDATORY = 'Y'
            AND A.SECTION_ID = B.SECTION_ID
            AND A.SUB_SECTION_ID = B.SUB_SECTION_ID
            AND B.TYPE = IAPICONSTANT.SECTIONTYPE_PROPERTYGROUP
            AND A.PROPERTY_GROUP = B.REF_ID
         MINUS
         SELECT SECTION_ID,
                SUB_SECTION_ID,
                PROPERTY_GROUP,
                PROPERTY,
                ATTRIBUTE
           FROM SPECIFICATION_PROP
          WHERE PART_NO = ASPARTNO
            AND REVISION = ANREVISION;

      CURSOR C_INS_PG_MASK(
         ANVIEW                     IN       IAPITYPE.ID_TYPE )
      IS
         SELECT A.SECTION_ID,
                A.SUB_SECTION_ID,
                A.PROPERTY_GROUP,
                A.PROPERTY,
                A.ATTRIBUTE
           FROM ITFRMVPG A,
                SPECIFICATION_SECTION B
          WHERE A.VIEW_ID = ANVIEW
            AND A.FRAME_NO = ASFRAMENO
            AND A.REVISION = ANFRAMEREVISION
            AND A.OWNER = ANFRAMEOWNER
            AND B.PART_NO = ASPARTNO
            AND B.REVISION = ANREVISION
            AND A.MANDATORY = 'Y'
            AND A.SECTION_ID = B.SECTION_ID
            AND A.SUB_SECTION_ID = B.SUB_SECTION_ID
            AND A.PROPERTY_GROUP = B.REF_ID
            AND B.TYPE = IAPICONSTANT.SECTIONTYPE_PROPERTYGROUP
         MINUS
         SELECT SECTION_ID,
                SUB_SECTION_ID,
                PROPERTY_GROUP,
                PROPERTY,
                ATTRIBUTE
           FROM SPECIFICATION_PROP
          WHERE PART_NO = ASPARTNO
            AND REVISION = ANREVISION;

      
      CURSOR C_DEL_PG_MASK(
         ANVIEW                     IN       IAPITYPE.ID_TYPE )
      IS
         SELECT A.SECTION_ID,
                A.SUB_SECTION_ID,
                A.PROPERTY_GROUP,
                A.PROPERTY,
                A.ATTRIBUTE
           FROM ITFRMVPG A,
                SPECIFICATION_SECTION B
          WHERE A.VIEW_ID = ANVIEW
            AND A.FRAME_NO = ASFRAMENO
            AND A.REVISION = ANFRAMEREVISION
            AND A.OWNER = ANFRAMEOWNER
            AND B.PART_NO = ASPARTNO
            AND B.REVISION = ANREVISION
            AND A.MANDATORY = 'H'
            AND A.SECTION_ID = B.SECTION_ID
            AND A.SUB_SECTION_ID = B.SUB_SECTION_ID
            AND A.PROPERTY_GROUP = B.REF_ID
            AND B.TYPE = IAPICONSTANT.SECTIONTYPE_PROPERTYGROUP;
      

      
      CURSOR C_INS_SP
      IS
         SELECT A.SECTION_ID,
                A.SUB_SECTION_ID,
                A.PROPERTY_GROUP,
                A.PROPERTY,
                A.ATTRIBUTE
           FROM FRAME_PROP A,
                SPECIFICATION_SECTION B
          WHERE A.FRAME_NO = ASFRAMENO
            AND A.REVISION = ANFRAMEREVISION
            AND A.OWNER = ANFRAMEOWNER
            AND B.PART_NO = ASPARTNO
            AND B.REVISION = ANREVISION
            AND A.MANDATORY = 'Y'
            AND A.SECTION_ID = B.SECTION_ID
            AND A.SUB_SECTION_ID = B.SUB_SECTION_ID
            AND B.TYPE = IAPICONSTANT.SECTIONTYPE_SINGLEPROPERTY
            AND A.PROPERTY_GROUP = 0
            AND A.PROPERTY = B.REF_ID
         MINUS
         SELECT SECTION_ID,
                SUB_SECTION_ID,
                PROPERTY_GROUP,
                PROPERTY,
                ATTRIBUTE
           FROM SPECIFICATION_PROP
          WHERE PART_NO = ASPARTNO
            AND REVISION = ANREVISION;

      
      CURSOR C_INS_SP_MASK(
         ANVIEW                     IN       IAPITYPE.ID_TYPE )
      IS
         SELECT A.SECTION_ID,
                A.SUB_SECTION_ID,
                A.PROPERTY_GROUP,
                A.PROPERTY,
                A.ATTRIBUTE
           FROM ITFRMVPG A,
                SPECIFICATION_SECTION B
          WHERE A.VIEW_ID = ANVIEW
            AND A.FRAME_NO = ASFRAMENO
            AND A.REVISION = ANFRAMEREVISION
            AND A.OWNER = ANFRAMEOWNER
            AND B.PART_NO = ASPARTNO
            AND B.REVISION = ANREVISION
            AND A.MANDATORY = 'Y'
            AND A.SECTION_ID = B.SECTION_ID
            AND A.SUB_SECTION_ID = B.SUB_SECTION_ID
            AND A.PROPERTY_GROUP = 0
            AND A.PROPERTY = B.REF_ID
            AND B.TYPE = IAPICONSTANT.SECTIONTYPE_SINGLEPROPERTY
         MINUS
         SELECT SECTION_ID,
                SUB_SECTION_ID,
                PROPERTY_GROUP,
                PROPERTY,
                ATTRIBUTE
           FROM SPECIFICATION_PROP
          WHERE PART_NO = ASPARTNO
            AND REVISION = ANREVISION;

      
      
      CURSOR C_DEL_SP_MASK(
         ANVIEW                     IN       IAPITYPE.ID_TYPE )
      IS
         SELECT A.SECTION_ID,
                A.SUB_SECTION_ID,
                A.PROPERTY_GROUP,
                A.PROPERTY,
                A.ATTRIBUTE
           FROM ITFRMVPG A,
                SPECIFICATION_SECTION B
          WHERE A.VIEW_ID = ANVIEW
            AND A.FRAME_NO = ASFRAMENO
            AND A.REVISION = ANFRAMEREVISION
            AND A.OWNER = ANFRAMEOWNER
            AND B.PART_NO = ASPARTNO
            AND B.REVISION = ANREVISION
            AND A.MANDATORY = 'H'
            AND A.SECTION_ID = B.SECTION_ID
            AND A.SUB_SECTION_ID = B.SUB_SECTION_ID
            AND A.PROPERTY_GROUP = 0
            AND A.PROPERTY = B.REF_ID
            AND B.TYPE = IAPICONSTANT.SECTIONTYPE_SINGLEPROPERTY;
      

      
      CURSOR LS_DEL_PROP_CURSOR
      IS
         SELECT SP.SECTION_ID,
                SP.SUB_SECTION_ID,
                SP.PROPERTY_GROUP,
                SP.PROPERTY,
                SP.ATTRIBUTE
           FROM SPECIFICATION_PROP SP
          WHERE SP.REVISION = ANREVISION
            AND SP.PART_NO = ASPARTNO
         MINUS
         SELECT FP.SECTION_ID,
                FP.SUB_SECTION_ID,
                FP.PROPERTY_GROUP,
                FP.PROPERTY,
                FP.ATTRIBUTE
           FROM FRAME_PROP FP
          WHERE FP.OWNER = ANFRAMEOWNER
            AND FP.REVISION = ANFRAMEREVISION
            AND FP.FRAME_NO = ASFRAMENO;

      
      CURSOR L_UPD_PROP_CURSOR
      IS
         SELECT SECTION_ID,
                SECTION_REV,
                SUB_SECTION_ID,
                SUB_SECTION_REV,
                PROPERTY_GROUP,
                PROPERTY_GROUP_REV,
                PROPERTY,
                PROPERTY_REV,
                ATTRIBUTE,
                ATTRIBUTE_REV,
                TEST_METHOD,
                TEST_METHOD_REV,
                UOM_ID,
                UOM_REV,
                UOM_ALT_ID,
                UOM_ALT_REV,
                SEQUENCE_NO,
                CHARACTERISTIC,
                CHARACTERISTIC_REV,
                ASSOCIATION,
                ASSOCIATION_REV,
                CH_2,
                CH_REV_2,
                AS_2,
                AS_REV_2,
                CH_3,
                CH_REV_3,
                AS_3,
                AS_REV_3,
                NUM_1,
                NUM_2,
                NUM_3,
                NUM_4,
                NUM_5,
                NUM_6,
                NUM_7,
                NUM_8,
                NUM_9,
                NUM_10,
                CHAR_1,
                CHAR_2,
                CHAR_3,
                CHAR_4,
                CHAR_5,
                CHAR_6,
                BOOLEAN_1,
                BOOLEAN_2,
                BOOLEAN_3,
                BOOLEAN_4,
                DATE_1,
                DATE_2,
                INTL
           FROM FRAME_PROP
          WHERE FRAME_NO = ASFRAMENO
            AND REVISION = ANFRAMEREVISION
            AND OWNER = ANFRAMEOWNER;

      
      
      CURSOR L_UPD_PROP_LANG_CURSOR
      IS
         SELECT SECTION_ID,
                SUB_SECTION_ID,
                PROPERTY_GROUP,
                PROPERTY,
                ATTRIBUTE,
                SEQUENCE_NO,
                CHAR_1,
                CHAR_2,
                CHAR_3,
                CHAR_4,
                CHAR_5,
                CHAR_6,
                INTL
                
           FROM FRAME_PROP
          WHERE FRAME_NO = ASFRAMENO
            AND REVISION = ANFRAMEREVISION
            AND OWNER = ANFRAMEOWNER;
      

      
      CURSOR L_SPEC_SECTION_CURSOR
      IS
         SELECT S.PART_NO,
                S.REVISION,
                S.SECTION_ID,
                S.SUB_SECTION_ID
           FROM SPECIFICATION_SECTION S
          WHERE S.PART_NO = ASPARTNO
            AND S.REVISION = ANREVISION
            AND S.TYPE = IAPICONSTANT.SECTIONTYPE_ATTACHEDSPEC;

      
      CURSOR L_SEQUENCE_CURSOR
      IS
         SELECT SECTION_ID,
                SUB_SECTION_ID,
                TYPE,
                REF_ID,
                REF_VER,
                REF_OWNER,
                SECTION_SEQUENCE_NO
           FROM FRAME_SECTION
          WHERE FRAME_NO = ASFRAMENO
            AND REVISION = ANFRAMEREVISION
            AND OWNER = ANFRAMEOWNER
            AND MOD( SECTION_SEQUENCE_NO,
                     '100' ) = 0;

      
      CURSOR LQEXTENDEDSECTIONS
      IS
         SELECT DISTINCT SE.SECTION_ID,
                         SE.SUB_SECTION_ID,
                         SE.TYPE,
                         SE.REF_ID,
                         SE.REF_VER,
                         SE.REF_OWNER,
                         SS.SECTION_SEQUENCE_NO
                    FROM SPECIFICATION_SECTION SS,
                         ITSHEXT SE
                   WHERE SS.REF_ID = SE.REF_ID
                     AND SS.TYPE = SE.TYPE
                     AND SS.SUB_SECTION_ID = SE.SUB_SECTION_ID
                     AND SS.SECTION_ID = SE.SECTION_ID
                     AND SS.REVISION = SE.REVISION
                     AND SS.PART_NO = SE.PART_NO
                     
                     AND SE.REVISION = ANREVISION
                     AND SE.PART_NO = ASPARTNO
                ORDER BY SE.SECTION_ID,
                         SE.SUB_SECTION_ID,
                         SS.SECTION_SEQUENCE_NO;

      
      CURSOR L_ANYHOOK_CURSOR(
         AOTYPE                     IN       IAPITYPE.SPECIFICATIONSECTIONTYPE_TYPE )
      IS
         SELECT   SECTION_ID,
                  SUB_SECTION_ID,
                  TYPE,
                  REF_ID,
                  REF_VER,
                  REF_OWNER,
                  SECTION_SEQUENCE_NO,
                  MOD( SECTION_SEQUENCE_NO,
                       '100' ) MOD_SEQUENCE
             FROM SPECIFICATION_SECTION
            WHERE PART_NO = ASPARTNO
              AND REVISION = ANREVISION
              AND TYPE = AOTYPE
              AND REF_ID = 0
         ORDER BY SECTION_ID,
                  SUB_SECTION_ID,
                  TYPE,
                  SECTION_SEQUENCE_NO;

      
      CURSOR L_ANYHOOKOBJECTS_CURSOR(
         AOTYPE                              SPECIFICATION_SECTION.TYPE%TYPE,
         ANANYHOOKSEQ                        SPECIFICATION_SECTION.SECTION_SEQUENCE_NO%TYPE,
         ANSECTIONID                         SPECIFICATION_SECTION.SECTION_ID%TYPE,
         ANSUBSECTIONID                      SPECIFICATION_SECTION.SUB_SECTION_ID%TYPE )
      IS
         SELECT   SECTION_ID,
                  SUB_SECTION_ID,
                  TYPE,
                  REF_ID,
                  REF_OWNER,
                  SECTION_SEQUENCE_NO,
                  MOD( SECTION_SEQUENCE_NO,
                       '100' ) MOD_SEQUENCE
             FROM SPECIFICATION_SECTION
            WHERE PART_NO = ASPARTNO
              AND REVISION = ANREVISION
              AND SECTION_ID = ANSECTIONID
              AND SUB_SECTION_ID = ANSUBSECTIONID
              AND TYPE = AOTYPE
              AND REF_ID <> 0
              AND   SECTION_SEQUENCE_NO
                  - MOD( SECTION_SEQUENCE_NO,
                         100 ) = ANANYHOOKSEQ
         MINUS
         SELECT   SECTION_ID,
                  SUB_SECTION_ID,
                  TYPE,
                  REF_ID,
                  REF_OWNER,
                  SECTION_SEQUENCE_NO,
                  MOD( SECTION_SEQUENCE_NO,
                       '100' ) MOD_SEQUENCE
             FROM FRAME_SECTION
            WHERE FRAME_NO = ASFRAMENO
              AND REVISION = ANFRAMEREVISION
              AND OWNER = ANFRAMEOWNER
              AND SECTION_ID = ANSECTIONID
              AND SUB_SECTION_ID = ANSUBSECTIONID
              AND TYPE = AOTYPE
              AND REF_ID <> 0
         ORDER BY 1,
                  2,
                  3,
                  7;

      CURSOR L_ALLSECTION_CURSOR(
         AOTYPE                     IN       IAPITYPE.SPECIFICATIONSECTIONTYPE_TYPE )
      IS
         SELECT   SECTION_ID,
                  SUB_SECTION_ID,
                  TYPE,
                  REF_ID,
                  REF_VER,
                  REF_OWNER,
                  SECTION_SEQUENCE_NO,
                  MOD( SECTION_SEQUENCE_NO,
                       '100' ) MOD_SEQUENCE
             FROM SPECIFICATION_SECTION
            WHERE PART_NO = ASPARTNO
              AND REVISION = ANREVISION
              AND TYPE = AOTYPE
         ORDER BY SECTION_ID,
                  SUB_SECTION_ID,
                  TYPE,
                  SECTION_SEQUENCE_NO;

      
      CURSOR LS_DEL_PROCESS_DATA
      IS
         SELECT *
           FROM SPECIFICATION_LINE
          WHERE PART_NO = ASPARTNO
            AND REVISION = ANREVISION;

      
      CURSOR LS_REV_FREE_TEXT
      IS
         SELECT SECTION_ID,
                SUB_SECTION_ID,
                SECTION_REV,
                SUB_SECTION_REV,
                TEXT_TYPE,
                TEXT_TYPE_REV
           FROM FRAME_TEXT
          WHERE FRAME_NO = ASFRAMENO
            AND REVISION = ANFRAMEREVISION
            AND OWNER = ANFRAMEOWNER;

      
      CURSOR LS_UPD_FREE_TEXT
      IS
         SELECT SECTION_ID,
                SUB_SECTION_ID,
                TEXT_TYPE,
                TEXT,
                TEXT_TYPE_REV
           FROM FRAME_TEXT
          WHERE FRAME_NO = ASFRAMENO
            AND REVISION = ANFRAMEREVISION
            AND OWNER = ANFRAMEOWNER
            AND ( SECTION_ID, SUB_SECTION_ID, TEXT_TYPE ) IN( SELECT SECTION_ID,
                                                                     SUB_SECTION_ID,
                                                                     TEXT_TYPE
                                                               FROM SPECIFICATION_TEXT
                                                              WHERE PART_NO = ASPARTNO
                                                                AND REVISION = ANREVISION
                                                                AND TEXT IS NULL );

      
      CURSOR LQOBSPROPERTIESEXT
      IS
         SELECT SE.SECTION_ID,
                SE.SUB_SECTION_ID,
                SE.TYPE,
                SE.REF_ID,
                SE.PROPERTY_GROUP,
                SE.PROPERTY,
                SE.ATTRIBUTE
           FROM ITSHEXT SE,
                FRAME_PROP FP
          WHERE FP.ATTRIBUTE = SE.ATTRIBUTE
            AND FP.PROPERTY = SE.PROPERTY
            AND FP.PROPERTY_GROUP = SE.PROPERTY_GROUP
            AND FP.SUB_SECTION_ID = SE.SUB_SECTION_ID
            AND FP.SECTION_ID = SE.SECTION_ID
            AND FP.FRAME_NO = ASFRAMENO
            AND FP.REVISION = ANFRAMEREVISION
            AND FP.OWNER = ANFRAMEOWNER
            
            AND SE.PART_NO = ASPARTNO
            AND SE.REVISION = ANREVISION;

      
      CURSOR LQOBSSECTIONEXT
      IS
         SELECT SE.SECTION_ID,
                SE.SUB_SECTION_ID,
                SE.TYPE,
                SE.REF_ID,
                SE.PROPERTY_GROUP,
                SE.PROPERTY,
                SE.ATTRIBUTE
           FROM ITSHEXT SE,
                FRAME_SECTION FS
          WHERE FS.REF_ID = SE.REF_ID
            AND FS.TYPE = SE.TYPE
            AND FS.SUB_SECTION_ID = SE.SUB_SECTION_ID
            AND FS.SECTION_ID = SE.SECTION_ID
            AND FS.FRAME_NO = ASFRAMENO
            AND FS.REVISION = ANFRAMEREVISION
            AND FS.OWNER = ANFRAMEOWNER
            
            AND SE.PART_NO = ASPARTNO
            AND SE.REVISION = ANREVISION;

      
      CURSOR CUR_OBJ_RT_SEQ(
         ASPARTNO                            IAPITYPE.PARTNO_TYPE,
         ANREVISION                          IAPITYPE.REVISION_TYPE,
         ANSECTIONID                         IAPITYPE.ID_TYPE,
         ANSUBSECTIONID                      IAPITYPE.ID_TYPE,
         ANTYPE                              IAPITYPE.SPECIFICATIONSECTIONTYPE_TYPE )
      IS
         SELECT   REF_ID,
                  REF_VER,
                  REF_OWNER
             FROM SPECIFICATION_SECTION
            WHERE PART_NO = ASPARTNO
              AND REVISION = ANREVISION
              AND SECTION_ID = ANSECTIONID
              AND SUB_SECTION_ID = ANSUBSECTIONID
              AND TYPE = ANTYPE
              AND REF_ID <> 0
         ORDER BY SECTION_SEQUENCE_NO;

      
      CURSOR CUROLDINGREDIENTSECTIONS
      IS
        SELECT DISTINCT SECTION_ID, SUB_SECTION_ID
        FROM FRAME_SECTION
        WHERE FRAME_NO = ASOLDFRAMENO
            AND REVISION = ANOLDFRAMEREVISION
            AND OWNER = ANOLDFRAMEOWNER
            AND (SECTION_ID, SUB_SECTION_ID) NOT IN
            (
                SELECT SECTION_ID, SUB_SECTION_ID
                FROM FRAME_SECTION
                WHERE FRAME_NO = ASFRAMENO
                    AND REVISION = ANFRAMEREVISION
                    AND OWNER = ANFRAMEOWNER
            );
       

      
      
      CURSOR L_UPD_DISPL_CURSOR
      IS
         SELECT SECTION_ID,
                SUB_SECTION_ID,
                REF_ID,
                TYPE,
                DISPLAY_FORMAT,
                DISPLAY_FORMAT_REV
           FROM SPECIFICATION_SECTION
          WHERE PART_NO = ASPARTNO
            AND REVISION = ANREVISION
            AND TYPE IN( 1, 4 );
      

      LNCOUNT                       NUMBER;
      LNATTACHEDSPEC                NUMBER;
      LNNEWSEQUENCE                 IAPITYPE.SEQUENCE_TYPE;
      LNMODSEQUENCE                 NUMBER;
      LNCHECKPROCESS                NUMBER := 0;
      LNCHECKBOM                    NUMBER := 0;
      LNCHECKING                    NUMBER := 0;
      LBPGCHANGED                   BOOLEAN := FALSE;
      LNVIEW                        IAPITYPE.ID_TYPE;
      LSINTPARTNO                   IAPITYPE.PARTNO_TYPE;
      LSPREFIXTYPE                  IAPITYPE.PREFIX_TYPE;
      LNALLOWVAL                    NUMBER := 0;
      LNCOUNTER                     NUMBER;
      LNSECTIONSEQUENCENO           IAPITYPE.SEQUENCE_TYPE;
      LSSCEXT                       IAPITYPE.STRING_TYPE;
      LNSECTIONIDPREV               IAPITYPE.ID_TYPE;
      LNSUBSECTIONIDPREV            IAPITYPE.ID_TYPE;
      LNTYPEPREV                    IAPITYPE.SPECIFICATIONSECTIONTYPE_TYPE;
      LNVALID                       IAPITYPE.ID_TYPE;
      LBDELETE                      BOOLEAN := FALSE;
      LBDELETEANYHOOK               BOOLEAN := FALSE;
      LBDELETEANYHOOKOBJECT         BOOLEAN := FALSE;
      LNFIXED                       NUMBER := 0;
      LSMANDATORY                   IAPITYPE.STRING_TYPE;
      LNTYPE                        IAPITYPE.NUMVAL_TYPE;
      I                             NUMBER := 0;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'UpdateFromFrame';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LNAS_1                        FRAME_PROP.ASSOCIATION%TYPE;
      LNAS_2                        FRAME_PROP.AS_2%TYPE;
      LNAS_3                        FRAME_PROP.AS_3%TYPE;
      LNCH_1                        FRAME_PROP.CHARACTERISTIC%TYPE;
      LNCH_2                        FRAME_PROP.CH_2%TYPE;
      LNCH_3                        FRAME_PROP.CH_3%TYPE;
      


      

      LNSECTIONID                   IAPITYPE.ID_TYPE;
      LNSECTIONREVISIONID           IAPITYPE.REVISION_TYPE;
      LNSUBSECTIONID                IAPITYPE.ID_TYPE;
      LNSUBSECTIONREVISIONID        IAPITYPE.REVISION_TYPE;
      LNCHECKING1                    NUMBER := 0;

   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      

      BEGIN
         


         IAPIGENERAL.LOGINFO( GSSOURCE,
                              LSMETHOD,
                              'Insert all the newly added properties from the frame (taking the mask into account)' );

         

         FOR REC_PROP IN C_INS_PG
         LOOP
            LBPGCHANGED := TRUE;

            INSERT INTO SPECIFICATION_PROP
                        ( PART_NO,
                          REVISION,
                          SECTION_ID,
                          SUB_SECTION_ID,
                          SECTION_REV,
                          SUB_SECTION_REV,
                          PROPERTY_GROUP,
                          PROPERTY,
                          ATTRIBUTE,
                          UOM_ID,
                          UOM_REV,
                          UOM_ALT_ID,
                          UOM_ALT_REV,
                          PROPERTY_GROUP_REV,
                          PROPERTY_REV,
                          ATTRIBUTE_REV,
                          TEST_METHOD,
                          TEST_METHOD_REV,
                          SEQUENCE_NO,
                          CHARACTERISTIC,
                          CHARACTERISTIC_REV,
                          ASSOCIATION,
                          ASSOCIATION_REV,
                          CH_2,
                          CH_REV_2,
                          AS_2,
                          AS_REV_2,
                          CH_3,
                          CH_REV_3,
                          AS_3,
                          AS_REV_3,
                          INTL,
                          NUM_1,
                          NUM_2,
                          NUM_3,
                          NUM_4,
                          NUM_5,
                          NUM_6,
                          NUM_7,
                          NUM_8,
                          NUM_9,
                          NUM_10,
                          CHAR_1,
                          CHAR_2,
                          CHAR_3,
                          CHAR_4,
                          CHAR_5,
                          CHAR_6,
                          BOOLEAN_1,
                          BOOLEAN_2,
                          BOOLEAN_3,
                          BOOLEAN_4,
                          DATE_1,
                          DATE_2 )
               SELECT ASPARTNO,
                      ANREVISION,
                      SECTION_ID,
                      SUB_SECTION_ID,
                      NVL( F_GET_SUB_REV( SECTION_ID,
                                          SECTION_REV,
                                          NULL,
                                          NULL,
                                          'SC' ),
                           0 ),
                      NVL( F_GET_SUB_REV( SUB_SECTION_ID,
                                          SUB_SECTION_REV,
                                          NULL,
                                          NULL,
                                          'SB' ),
                           0 ),
                      PROPERTY_GROUP,
                      PROPERTY,
                      ATTRIBUTE,
                      UOM_ID,
                      NVL( F_GET_SUB_REV( UOM_ID,
                                          UOM_REV,
                                          NULL,
                                          NULL,
                                          'UO' ),
                           0 ),
                      UOM_ALT_ID,
                      NVL( F_GET_SUB_REV( UOM_ALT_ID,
                                          UOM_ALT_REV,
                                          NULL,
                                          NULL,
                                          'UO' ),
                           0 ),
                      NVL( F_GET_SUB_REV( PROPERTY_GROUP,
                                          PROPERTY_GROUP_REV,
                                          NULL,
                                          NULL,
                                          'PG' ),
                           0 ),
                      NVL( F_GET_SUB_REV( PROPERTY,
                                          PROPERTY_REV,
                                          NULL,
                                          NULL,
                                          'SP' ),
                           0 ),
                      NVL( F_GET_SUB_REV( ATTRIBUTE,
                                          ATTRIBUTE_REV,
                                          NULL,
                                          NULL,
                                          'AT' ),
                           0 ),
                      TEST_METHOD,
                      NVL( F_GET_SUB_REV( TEST_METHOD,
                                          TEST_METHOD_REV,
                                          NULL,
                                          NULL,
                                          'TM' ),
                           0 ),
                      SEQUENCE_NO,
                      CHARACTERISTIC,
                      NVL( F_GET_SUB_REV( CHARACTERISTIC,
                                          CHARACTERISTIC_REV,
                                          NULL,
                                          NULL,
                                          'CH' ),
                           0 ),
                      ASSOCIATION,
                      NVL( F_GET_SUB_REV( ASSOCIATION,
                                          ASSOCIATION_REV,
                                          NULL,
                                          NULL,
                                          'AS' ),
                           0 ),
                      CH_2,
                      NVL( F_GET_SUB_REV( CH_2,
                                          CH_REV_2,
                                          NULL,
                                          NULL,
                                          'CH' ),
                           0 ),
                      AS_2,
                      NVL( F_GET_SUB_REV( AS_2,
                                          AS_REV_2,
                                          NULL,
                                          NULL,
                                          'AS' ),
                           0 ),
                      CH_3,
                      NVL( F_GET_SUB_REV( CH_3,
                                          CH_REV_3,
                                          NULL,
                                          NULL,
                                          'CH' ),
                           0 ),
                      AS_3,
                      NVL( F_GET_SUB_REV( AS_3,
                                          AS_REV_3,
                                          NULL,
                                          NULL,
                                          'AS' ),
                           0 ),
                      INTL,
                      NUM_1,
                      NUM_2,
                      NUM_3,
                      NUM_4,
                      NUM_5,
                      NUM_6,
                      NUM_7,
                      NUM_8,
                      NUM_9,
                      NUM_10,
                      CHAR_1,
                      CHAR_2,
                      CHAR_3,
                      CHAR_4,
                      CHAR_5,
                      CHAR_6,
                      BOOLEAN_1,
                      BOOLEAN_2,
                      BOOLEAN_3,
                      BOOLEAN_4,
                      DATE_1,
                      DATE_2
                 FROM FRAME_PROP
                WHERE FRAME_NO = ASFRAMENO
                  AND REVISION = ANFRAMEREVISION
                  AND OWNER = ANFRAMEOWNER
                  AND SECTION_ID = REC_PROP.SECTION_ID
                  AND SUB_SECTION_ID = REC_PROP.SUB_SECTION_ID
                  AND PROPERTY_GROUP = REC_PROP.PROPERTY_GROUP
                  AND PROPERTY = REC_PROP.PROPERTY
                  AND ATTRIBUTE = REC_PROP.ATTRIBUTE;
         END LOOP;

         SELECT MASK_ID
           INTO LNVIEW
           FROM SPECIFICATION_HEADER
          WHERE PART_NO = ASPARTNO
            AND REVISION = ANREVISION;

         



         LNRETVAL := CHECKREGIONALGLOBAL( ASPARTNO,
                                          ANREVISION,
                                          LNVIEW,
                                          LNALLOWVAL );

         IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN( LNRETVAL );
         END IF;

         IF     LNVIEW > 0
            AND LNVIEW IS NOT NULL
         THEN
            FOR REC_PROP IN C_INS_PG_MASK( LNVIEW )
            LOOP
               LBPGCHANGED := TRUE;

               INSERT INTO SPECIFICATION_PROP
                           ( PART_NO,
                             REVISION,
                             SECTION_ID,
                             SUB_SECTION_ID,
                             SECTION_REV,
                             SUB_SECTION_REV,
                             PROPERTY_GROUP,
                             PROPERTY,
                             ATTRIBUTE,
                             UOM_ID,
                             UOM_REV,
                             UOM_ALT_ID,
                             UOM_ALT_REV,
                             PROPERTY_GROUP_REV,
                             PROPERTY_REV,
                             ATTRIBUTE_REV,
                             TEST_METHOD,
                             TEST_METHOD_REV,
                             SEQUENCE_NO,
                             CHARACTERISTIC,
                             CHARACTERISTIC_REV,
                             ASSOCIATION,
                             ASSOCIATION_REV,
                             CH_2,
                             CH_REV_2,
                             AS_2,
                             AS_REV_2,
                             CH_3,
                             CH_REV_3,
                             AS_3,
                             AS_REV_3,
                             INTL,
                             NUM_1,
                             NUM_2,
                             NUM_3,
                             NUM_4,
                             NUM_5,
                             NUM_6,
                             NUM_7,
                             NUM_8,
                             NUM_9,
                             NUM_10,
                             CHAR_1,
                             CHAR_2,
                             CHAR_3,
                             CHAR_4,
                             CHAR_5,
                             CHAR_6,
                             BOOLEAN_1,
                             BOOLEAN_2,
                             BOOLEAN_3,
                             BOOLEAN_4,
                             DATE_1,
                             DATE_2 )
                  SELECT ASPARTNO,
                         ANREVISION,
                         SECTION_ID,
                         SUB_SECTION_ID,
                         NVL( F_GET_SUB_REV( SECTION_ID,
                                             SECTION_REV,
                                             NULL,
                                             NULL,
                                             'SC' ),
                              0 ),
                         NVL( F_GET_SUB_REV( SUB_SECTION_ID,
                                             SUB_SECTION_REV,
                                             NULL,
                                             NULL,
                                             'SB' ),
                              0 ),
                         PROPERTY_GROUP,
                         PROPERTY,
                         ATTRIBUTE,
                         UOM_ID,
                         NVL( F_GET_SUB_REV( UOM_ID,
                                             UOM_REV,
                                             NULL,
                                             NULL,
                                             'UO' ),
                              0 ),
                         UOM_ALT_ID,
                         NVL( F_GET_SUB_REV( UOM_ALT_ID,
                                             UOM_ALT_REV,
                                             NULL,
                                             NULL,
                                             'UO' ),
                              0 ),
                         NVL( F_GET_SUB_REV( PROPERTY_GROUP,
                                             PROPERTY_GROUP_REV,
                                             NULL,
                                             NULL,
                                             'PG' ),
                              0 ),
                         NVL( F_GET_SUB_REV( PROPERTY,
                                             PROPERTY_REV,
                                             NULL,
                                             NULL,
                                             'SP' ),
                              0 ),
                         NVL( F_GET_SUB_REV( ATTRIBUTE,
                                             ATTRIBUTE_REV,
                                             NULL,
                                             NULL,
                                             'AT' ),
                              0 ),
                         TEST_METHOD,
                         NVL( F_GET_SUB_REV( TEST_METHOD,
                                             TEST_METHOD_REV,
                                             NULL,
                                             NULL,
                                             'TM' ),
                              0 ),
                         SEQUENCE_NO,
                         CHARACTERISTIC,
                         NVL( F_GET_SUB_REV( CHARACTERISTIC,
                                             CHARACTERISTIC_REV,
                                             NULL,
                                             NULL,
                                             'CH' ),
                              0 ),
                         ASSOCIATION,
                         NVL( F_GET_SUB_REV( ASSOCIATION,
                                             ASSOCIATION_REV,
                                             NULL,
                                             NULL,
                                             'AS' ),
                              0 ),
                         CH_2,
                         NVL( F_GET_SUB_REV( CH_2,
                                             CH_REV_2,
                                             NULL,
                                             NULL,
                                             'CH' ),
                              0 ),
                         AS_2,
                         NVL( F_GET_SUB_REV( AS_2,
                                             AS_REV_2,
                                             NULL,
                                             NULL,
                                             'AS' ),
                              0 ),
                         CH_3,
                         NVL( F_GET_SUB_REV( CH_3,
                                             CH_REV_3,
                                             NULL,
                                             NULL,
                                             'CH' ),
                              0 ),
                         AS_3,
                         NVL( F_GET_SUB_REV( AS_3,
                                             AS_REV_3,
                                             NULL,
                                             NULL,
                                             'AS' ),
                              0 ),
                         INTL,
                         NUM_1,
                         NUM_2,
                         NUM_3,
                         NUM_4,
                         NUM_5,
                         NUM_6,
                         NUM_7,
                         NUM_8,
                         NUM_9,
                         NUM_10,
                         CHAR_1,
                         CHAR_2,
                         CHAR_3,
                         CHAR_4,
                         CHAR_5,
                         CHAR_6,
                         BOOLEAN_1,
                         BOOLEAN_2,
                         BOOLEAN_3,
                         BOOLEAN_4,
                         DATE_1,
                         DATE_2
                    FROM FRAME_PROP
                   WHERE FRAME_NO = ASFRAMENO
                     AND REVISION = ANFRAMEREVISION
                     AND OWNER = ANFRAMEOWNER
                     AND SECTION_ID = REC_PROP.SECTION_ID
                     AND SUB_SECTION_ID = REC_PROP.SUB_SECTION_ID
                     AND PROPERTY_GROUP = REC_PROP.PROPERTY_GROUP
                     AND PROPERTY = REC_PROP.PROPERTY
                     AND ATTRIBUTE = REC_PROP.ATTRIBUTE;
            END LOOP;

            
            
            
            FOR REC_PROP2 IN C_DEL_PG_MASK( LNVIEW )
            LOOP
               LBPGCHANGED := TRUE;

               DELETE FROM SPECIFICATION_PROP
                   WHERE PART_NO = ASPARTNO
                     AND REVISION = ANREVISION
                     AND SECTION_ID = REC_PROP2.SECTION_ID
                     AND SUB_SECTION_ID = REC_PROP2.SUB_SECTION_ID
                     AND PROPERTY_GROUP = REC_PROP2.PROPERTY_GROUP
                     AND PROPERTY = REC_PROP2.PROPERTY
                             
                             
                             AND ATTRIBUTE = REC_PROP2.ATTRIBUTE
                             AND NUM_1 IS NULL
                             AND NUM_2 IS NULL
                             AND NUM_3 IS NULL
                             AND NUM_4 IS NULL
                             AND NUM_5 IS NULL
                             AND NUM_6 IS NULL
                             AND NUM_7 IS NULL
                             AND NUM_8 IS NULL
                             AND NUM_9 IS NULL
                             AND NUM_10 IS NULL
                             AND CHAR_1 IS NULL
                             AND CHAR_2 IS NULL
                             AND CHAR_3 IS NULL
                             AND CHAR_4 IS NULL
                             AND CHAR_5 IS NULL
                             AND CHAR_6 IS NULL
                             AND BOOLEAN_1 IS NULL
                             AND BOOLEAN_2 IS NULL
                             AND BOOLEAN_3 IS NULL
                             AND BOOLEAN_4 IS NULL
                             AND DATE_1 IS NULL
                             AND DATE_2 IS NULL
                             AND TM_SET_NO IS NULL
                             
                             
                             
                             
                             AND INFO IS NULL
                             AND CHARACTERISTIC IS NULL
                             
                             AND TEST_METHOD IS NULL
                             
                             ;
                             
            END LOOP;
            

         END IF;

         

         FOR REC_PROP IN C_INS_SP
         LOOP
            LBPGCHANGED := TRUE;

            INSERT INTO SPECIFICATION_PROP
                        ( PART_NO,
                          REVISION,
                          SECTION_ID,
                          SUB_SECTION_ID,
                          SECTION_REV,
                          SUB_SECTION_REV,
                          PROPERTY_GROUP,
                          PROPERTY,
                          ATTRIBUTE,
                          UOM_ID,
                          UOM_REV,
                          UOM_ALT_ID,
                          UOM_ALT_REV,
                          PROPERTY_GROUP_REV,
                          PROPERTY_REV,
                          ATTRIBUTE_REV,
                          TEST_METHOD,
                          TEST_METHOD_REV,
                          SEQUENCE_NO,
                          CHARACTERISTIC,
                          CHARACTERISTIC_REV,
                          ASSOCIATION,
                          ASSOCIATION_REV,
                          CH_2,
                          CH_REV_2,
                          AS_2,
                          AS_REV_2,
                          CH_3,
                          CH_REV_3,
                          AS_3,
                          AS_REV_3,
                          INTL,
                          NUM_1,
                          NUM_2,
                          NUM_3,
                          NUM_4,
                          NUM_5,
                          NUM_6,
                          NUM_7,
                          NUM_8,
                          NUM_9,
                          NUM_10,
                          CHAR_1,
                          CHAR_2,
                          CHAR_3,
                          CHAR_4,
                          CHAR_5,
                          CHAR_6,
                          BOOLEAN_1,
                          BOOLEAN_2,
                          BOOLEAN_3,
                          BOOLEAN_4,
                          DATE_1,
                          DATE_2 )
               SELECT ASPARTNO,
                      ANREVISION,
                      SECTION_ID,
                      SUB_SECTION_ID,
                      NVL( F_GET_SUB_REV( SECTION_ID,
                                          SECTION_REV,
                                          NULL,
                                          NULL,
                                          'SC' ),
                           0 ),
                      NVL( F_GET_SUB_REV( SUB_SECTION_ID,
                                          SUB_SECTION_REV,
                                          NULL,
                                          NULL,
                                          'SB' ),
                           0 ),
                      PROPERTY_GROUP,
                      PROPERTY,
                      ATTRIBUTE,
                      UOM_ID,
                      NVL( F_GET_SUB_REV( UOM_ID,
                                          UOM_REV,
                                          NULL,
                                          NULL,
                                          'UO' ),
                           0 ),
                      UOM_ALT_ID,
                      NVL( F_GET_SUB_REV( UOM_ALT_ID,
                                          UOM_ALT_REV,
                                          NULL,
                                          NULL,
                                          'UO' ),
                           0 ),
                      NVL( F_GET_SUB_REV( PROPERTY_GROUP,
                                          PROPERTY_GROUP_REV,
                                          NULL,
                                          NULL,
                                          'PG' ),
                           0 ),
                      NVL( F_GET_SUB_REV( PROPERTY,
                                          PROPERTY_REV,
                                          NULL,
                                          NULL,
                                          'SP' ),
                           0 ),
                      NVL( F_GET_SUB_REV( ATTRIBUTE,
                                          ATTRIBUTE_REV,
                                          NULL,
                                          NULL,
                                          'AT' ),
                           0 ),
                      TEST_METHOD,
                      NVL( F_GET_SUB_REV( TEST_METHOD,
                                          TEST_METHOD_REV,
                                          NULL,
                                          NULL,
                                          'TM' ),
                           0 ),
                      SEQUENCE_NO,
                      CHARACTERISTIC,
                      NVL( F_GET_SUB_REV( CHARACTERISTIC,
                                          CHARACTERISTIC_REV,
                                          NULL,
                                          NULL,
                                          'CH' ),
                           0 ),
                      ASSOCIATION,
                      NVL( F_GET_SUB_REV( ASSOCIATION,
                                          ASSOCIATION_REV,
                                          NULL,
                                          NULL,
                                          'AS' ),
                           0 ),
                      CH_2,
                      NVL( F_GET_SUB_REV( CH_2,
                                          CH_REV_2,
                                          NULL,
                                          NULL,
                                          'CH' ),
                           0 ),
                      AS_2,
                      NVL( F_GET_SUB_REV( AS_2,
                                          AS_REV_2,
                                          NULL,
                                          NULL,
                                          'AS' ),
                           0 ),
                      CH_3,
                      NVL( F_GET_SUB_REV( CH_3,
                                          CH_REV_3,
                                          NULL,
                                          NULL,
                                          'CH' ),
                           0 ),
                      AS_3,
                      NVL( F_GET_SUB_REV( AS_3,
                                          AS_REV_3,
                                          NULL,
                                          NULL,
                                          'AS' ),
                           0 ),
                      INTL,
                      NUM_1,
                      NUM_2,
                      NUM_3,
                      NUM_4,
                      NUM_5,
                      NUM_6,
                      NUM_7,
                      NUM_8,
                      NUM_9,
                      NUM_10,
                      CHAR_1,
                      CHAR_2,
                      CHAR_3,
                      CHAR_4,
                      CHAR_5,
                      CHAR_6,
                      BOOLEAN_1,
                      BOOLEAN_2,
                      BOOLEAN_3,
                      BOOLEAN_4,
                      DATE_1,
                      DATE_2
                 FROM FRAME_PROP
                WHERE FRAME_NO = ASFRAMENO
                  AND REVISION = ANFRAMEREVISION
                  AND OWNER = ANFRAMEOWNER
                  AND SECTION_ID = REC_PROP.SECTION_ID
                  AND SUB_SECTION_ID = REC_PROP.SUB_SECTION_ID
                  AND PROPERTY_GROUP = REC_PROP.PROPERTY_GROUP
                  AND PROPERTY = REC_PROP.PROPERTY
                  AND ATTRIBUTE = REC_PROP.ATTRIBUTE;
         END LOOP;

         IF     LNVIEW > 0
            AND LNVIEW IS NOT NULL
         THEN
            FOR REC_PROP IN C_INS_SP_MASK( LNVIEW )
            LOOP
               LBPGCHANGED := TRUE;

               INSERT INTO SPECIFICATION_PROP
                           ( PART_NO,
                             REVISION,
                             SECTION_ID,
                             SUB_SECTION_ID,
                             SECTION_REV,
                             SUB_SECTION_REV,
                             PROPERTY_GROUP,
                             PROPERTY,
                             ATTRIBUTE,
                             UOM_ID,
                             UOM_REV,
                             UOM_ALT_ID,
                             UOM_ALT_REV,
                             PROPERTY_GROUP_REV,
                             PROPERTY_REV,
                             ATTRIBUTE_REV,
                             TEST_METHOD,
                             TEST_METHOD_REV,
                             SEQUENCE_NO,
                             CHARACTERISTIC,
                             CHARACTERISTIC_REV,
                             ASSOCIATION,
                             ASSOCIATION_REV,
                             CH_2,
                             CH_REV_2,
                             AS_2,
                             AS_REV_2,
                             CH_3,
                             CH_REV_3,
                             AS_3,
                             AS_REV_3,
                             INTL,
                             NUM_1,
                             NUM_2,
                             NUM_3,
                             NUM_4,
                             NUM_5,
                             NUM_6,
                             NUM_7,
                             NUM_8,
                             NUM_9,
                             NUM_10,
                             CHAR_1,
                             CHAR_2,
                             CHAR_3,
                             CHAR_4,
                             CHAR_5,
                             CHAR_6,
                             BOOLEAN_1,
                             BOOLEAN_2,
                             BOOLEAN_3,
                             BOOLEAN_4,
                             DATE_1,
                             DATE_2 )
                  SELECT ASPARTNO,
                         ANREVISION,
                         SECTION_ID,
                         SUB_SECTION_ID,
                         NVL( F_GET_SUB_REV( SECTION_ID,
                                             SECTION_REV,
                                             NULL,
                                             NULL,
                                             'SC' ),
                              0 ),
                         NVL( F_GET_SUB_REV( SUB_SECTION_ID,
                                             SUB_SECTION_REV,
                                             NULL,
                                             NULL,
                                             'SB' ),
                              0 ),
                         PROPERTY_GROUP,
                         PROPERTY,
                         ATTRIBUTE,
                         UOM_ID,
                         NVL( F_GET_SUB_REV( UOM_ID,
                                             UOM_REV,
                                             NULL,
                                             NULL,
                                             'UO' ),
                              0 ),
                         UOM_ALT_ID,
                         NVL( F_GET_SUB_REV( UOM_ALT_ID,
                                             UOM_ALT_REV,
                                             NULL,
                                             NULL,
                                             'UO' ),
                              0 ),
                         NVL( F_GET_SUB_REV( PROPERTY_GROUP,
                                             PROPERTY_GROUP_REV,
                                             NULL,
                                             NULL,
                                             'PG' ),
                              0 ),
                         NVL( F_GET_SUB_REV( PROPERTY,
                                             PROPERTY_REV,
                                             NULL,
                                             NULL,
                                             'SP' ),
                              0 ),
                         NVL( F_GET_SUB_REV( ATTRIBUTE,
                                             ATTRIBUTE_REV,
                                             NULL,
                                             NULL,
                                             'AT' ),
                              0 ),
                         TEST_METHOD,
                         NVL( F_GET_SUB_REV( TEST_METHOD,
                                             TEST_METHOD_REV,
                                             NULL,
                                             NULL,
                                             'TM' ),
                              0 ),
                         SEQUENCE_NO,
                         CHARACTERISTIC,
                         NVL( F_GET_SUB_REV( CHARACTERISTIC,
                                             CHARACTERISTIC_REV,
                                             NULL,
                                             NULL,
                                             'CH' ),
                              0 ),
                         ASSOCIATION,
                         NVL( F_GET_SUB_REV( ASSOCIATION,
                                             ASSOCIATION_REV,
                                             NULL,
                                             NULL,
                                             'AS' ),
                              0 ),
                         CH_2,
                         NVL( F_GET_SUB_REV( CH_2,
                                             CH_REV_2,
                                             NULL,
                                             NULL,
                                             'CH' ),
                              0 ),
                         AS_2,
                         NVL( F_GET_SUB_REV( AS_2,
                                             AS_REV_2,
                                             NULL,
                                             NULL,
                                             'AS' ),
                              0 ),
                         CH_3,
                         NVL( F_GET_SUB_REV( CH_3,
                                             CH_REV_3,
                                             NULL,
                                             NULL,
                                             'CH' ),
                              0 ),
                         AS_3,
                         NVL( F_GET_SUB_REV( AS_3,
                                             AS_REV_3,
                                             NULL,
                                             NULL,
                                             'AS' ),
                              0 ),
                         INTL,
                         NUM_1,
                         NUM_2,
                         NUM_3,
                         NUM_4,
                         NUM_5,
                         NUM_6,
                         NUM_7,
                         NUM_8,
                         NUM_9,
                         NUM_10,
                         CHAR_1,
                         CHAR_2,
                         CHAR_3,
                         CHAR_4,
                         CHAR_5,
                         CHAR_6,
                         BOOLEAN_1,
                         BOOLEAN_2,
                         BOOLEAN_3,
                         BOOLEAN_4,
                         DATE_1,
                         DATE_2
                    FROM FRAME_PROP
                   WHERE FRAME_NO = ASFRAMENO
                     AND REVISION = ANFRAMEREVISION
                     AND OWNER = ANFRAMEOWNER
                     AND SECTION_ID = REC_PROP.SECTION_ID
                     AND SUB_SECTION_ID = REC_PROP.SUB_SECTION_ID
                     AND PROPERTY_GROUP = REC_PROP.PROPERTY_GROUP
                     AND PROPERTY = REC_PROP.PROPERTY
                     AND ATTRIBUTE = REC_PROP.ATTRIBUTE;
            END LOOP;

            
            FOR REC_PROP2 IN C_DEL_SP_MASK( LNVIEW )
            LOOP
               LBPGCHANGED := TRUE;

               DELETE FROM SPECIFICATION_PROP
                   WHERE PART_NO = ASPARTNO
                     AND REVISION = ANREVISION
                     AND SECTION_ID = REC_PROP2.SECTION_ID
                     AND SUB_SECTION_ID = REC_PROP2.SUB_SECTION_ID
                     AND PROPERTY_GROUP = REC_PROP2.PROPERTY_GROUP
                     AND PROPERTY = REC_PROP2.PROPERTY
                     AND ATTRIBUTE = REC_PROP2.ATTRIBUTE;
            END LOOP;
            

         END IF;

      EXCEPTION
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
      END;




      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'PROPERTY GROUP' );

      



      
      BEGIN
         



         FOR REC_PROP IN LS_DEL_PROP_CURSOR
         LOOP
            IAPIGENERAL.LOGINFO( GSSOURCE,
                                 LSMETHOD,
                                    'PROPERTY GROUP: "'
                                 || REC_PROP.PROPERTY_GROUP
                                 || '" PROPERTY: '
                                 || REC_PROP.PROPERTY );

            



            SELECT COUNT( 1 )
              INTO LNCOUNTER
              FROM ITSHEXT SE
             WHERE (     (     SE.REF_ID = REC_PROP.PROPERTY_GROUP
                           AND SE.TYPE = IAPICONSTANT.SECTIONTYPE_PROPERTYGROUP )
                     OR (     SE.PROPERTY = REC_PROP.PROPERTY
                          AND SE.REF_ID = IAPICONSTANT.SECTIONTYPE_SINGLEPROPERTY ) )
               AND SE.SUB_SECTION_ID = REC_PROP.SUB_SECTION_ID
               AND SE.SECTION_ID = REC_PROP.SECTION_ID
               AND SE.REVISION = ANREVISION
               AND SE.PART_NO = ASPARTNO;

            IF ( LNCOUNTER > 0 )
            THEN
               IAPIGENERAL.LOGINFO( GSSOURCE,
                                    LSMETHOD,
                                       'PROPERTY GROUP: "'
                                    || REC_PROP.PROPERTY_GROUP
                                    || '" PROPERTY: '
                                    || REC_PROP.PROPERTY
                                    || ' - PG/PR EXT' );
               LBDELETE := FALSE;
            ELSE
               



               SELECT COUNT( 1 )
                 INTO LNCOUNTER
                 FROM ITSHEXT SE
                WHERE (     (     SE.PROPERTY_GROUP = REC_PROP.PROPERTY_GROUP
                              AND SE.TYPE = IAPICONSTANT.SECTIONTYPE_PROPERTYGROUP )
                        OR (     SE.PROPERTY = REC_PROP.PROPERTY
                             AND SE.TYPE = IAPICONSTANT.SECTIONTYPE_SINGLEPROPERTY ) )
                  AND SE.SUB_SECTION_ID = REC_PROP.SUB_SECTION_ID
                  AND SE.SECTION_ID = REC_PROP.SECTION_ID
                  AND SE.REVISION = ANREVISION
                  AND SE.PART_NO = ASPARTNO;

               IF ( LNCOUNTER > 0 )
               THEN
                  IAPIGENERAL.LOGINFO( GSSOURCE,
                                       LSMETHOD,
                                          'PROPERTY GROUP: "'
                                       || REC_PROP.PROPERTY_GROUP
                                       || '" PROPERTY: '
                                       || REC_PROP.PROPERTY
                                       || ' - EXT FRAME' );

                  



                  SELECT NVL( MAX( REF_EXT ),
                              'N' )
                    INTO LSSCEXT
                    FROM FRAME_SECTION
                   WHERE FRAME_NO = ASFRAMENO
                     AND REVISION = ANFRAMEREVISION
                     AND OWNER = ANFRAMEOWNER
                     AND SECTION_ID = REC_PROP.SECTION_ID
                     AND SUB_SECTION_ID = REC_PROP.SUB_SECTION_ID;

                  IF ( LSSCEXT <> 'Y' )
                  THEN
                     IAPIGENERAL.LOGINFO( GSSOURCE,
                                          LSMETHOD,
                                             'PROPERTY GROUP: "'
                                          || REC_PROP.PROPERTY_GROUP
                                          || '" PROPERTY: '
                                          || REC_PROP.PROPERTY
                                          || ' - NOT EXT' );
                     LBDELETE := TRUE;
                  ELSE
                     IAPIGENERAL.LOGINFO( GSSOURCE,
                                          LSMETHOD,
                                             'PROPERTY GROUP: "'
                                          || REC_PROP.PROPERTY_GROUP
                                          || '" PROPERTY: '
                                          || REC_PROP.PROPERTY
                                          || ' - EXT' );
                     LBDELETE := FALSE;
                  END IF;
               ELSE
                  IAPIGENERAL.LOGINFO( GSSOURCE,
                                       LSMETHOD,
                                          'PROPERTY GROUP: "'
                                       || REC_PROP.PROPERTY_GROUP
                                       || '" PROPERTY: '
                                       || REC_PROP.PROPERTY
                                       || ' - NO EXT FRAME' );
                  LBDELETE := TRUE;
               END IF;
            END IF;

            IF ( LBDELETE = TRUE )
            THEN
               LBPGCHANGED := TRUE;

               
               DELETE FROM SPECIFICATION_PROP
                     WHERE PART_NO = ASPARTNO
                       AND REVISION = ANREVISION
                       AND SECTION_ID = REC_PROP.SECTION_ID
                       AND SUB_SECTION_ID = REC_PROP.SUB_SECTION_ID
                       AND PROPERTY_GROUP = REC_PROP.PROPERTY_GROUP
                       AND PROPERTY = REC_PROP.PROPERTY
                       AND ATTRIBUTE = REC_PROP.ATTRIBUTE;

               
               
               DELETE FROM ITSHEXT
                     WHERE PART_NO = ASPARTNO
                       AND REVISION = ANREVISION
                       AND SECTION_ID = REC_PROP.SECTION_ID
                       AND SUB_SECTION_ID = REC_PROP.SUB_SECTION_ID
                       AND TYPE = IAPICONSTANT.SECTIONTYPE_SINGLEPROPERTY
                       AND PROPERTY_GROUP = REC_PROP.PROPERTY_GROUP;
            END IF;
         END LOOP;
      EXCEPTION
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
      END;

      
      BEGIN
         FOR REC_UPD IN L_UPD_PROP_CURSOR
         LOOP
            LBPGCHANGED := TRUE;




            SELECT COUNT( * )
              INTO I
              FROM SPECIFICATION_PROP
             WHERE PART_NO = ASPARTNO
               AND REVISION = ANREVISION
               AND SECTION_ID = REC_UPD.SECTION_ID
               AND SUB_SECTION_ID = REC_UPD.SUB_SECTION_ID
               AND PROPERTY_GROUP = REC_UPD.PROPERTY_GROUP
               AND PROPERTY = REC_UPD.PROPERTY
               AND ATTRIBUTE = REC_UPD.ATTRIBUTE;

            IF I = 1
            THEN
               SELECT ASSOCIATION,
                      AS_2,
                      AS_3,
                      CHARACTERISTIC,
                      CH_2,
                      CH_3
                 INTO LNAS_1,
                      LNAS_2,
                      LNAS_3,
                      LNCH_1,
                      LNCH_2,
                      LNCH_3
                 FROM SPECIFICATION_PROP
                WHERE PART_NO = ASPARTNO
                  AND REVISION = ANREVISION
                  AND SECTION_ID = REC_UPD.SECTION_ID
                  AND SUB_SECTION_ID = REC_UPD.SUB_SECTION_ID
                  AND PROPERTY_GROUP = REC_UPD.PROPERTY_GROUP
                  AND PROPERTY = REC_UPD.PROPERTY
                  AND ATTRIBUTE = REC_UPD.ATTRIBUTE;

               
               IF REC_UPD.ASSOCIATION IS NOT NULL
               THEN
                  
                  IF LNCH_1 IS NOT NULL
                  THEN
                     
                     IF REC_UPD.ASSOCIATION != LNAS_1
                     THEN
                        SELECT COUNT( * )
                          INTO I
                          FROM CHARACTERISTIC_ASSOCIATION
                         WHERE ASSOCIATION = REC_UPD.ASSOCIATION
                           AND CHARACTERISTIC = LNCH_1;

                        
                        IF I = 0
                        THEN
                           LNCH_1 := REC_UPD.CHARACTERISTIC;
                        ELSE
                           NULL;   
                        END IF;
                     ELSE
                        NULL;   
                     END IF;
                  ELSE
                     LNCH_1 := REC_UPD.CHARACTERISTIC;
                  END IF;
               ELSE
                  LNCH_1 := NULL;
               END IF;

               
               IF REC_UPD.AS_2 IS NOT NULL
               THEN
                  
                  IF LNCH_2 IS NOT NULL
                  THEN
                     
                     IF REC_UPD.AS_2 != LNAS_2
                     THEN
                        SELECT COUNT( * )
                          INTO I
                          FROM CHARACTERISTIC_ASSOCIATION
                         WHERE ASSOCIATION = REC_UPD.AS_2
                           AND CHARACTERISTIC = LNCH_2;

                        
                        IF I = 0
                        THEN
                           LNCH_2 := REC_UPD.CH_2;
                        ELSE
                           NULL;   
                        END IF;
                     ELSE
                        NULL;   
                     END IF;
                  ELSE
                     LNCH_2 := REC_UPD.CH_2;
                  END IF;
               ELSE
                  LNCH_2 := NULL;
               END IF;

               
               IF REC_UPD.AS_3 IS NOT NULL
               THEN
                  
                  IF LNCH_3 IS NOT NULL
                  THEN
                     
                     IF REC_UPD.AS_3 != LNAS_3
                     THEN
                        SELECT COUNT( * )
                          INTO I
                          FROM CHARACTERISTIC_ASSOCIATION
                         WHERE ASSOCIATION = REC_UPD.AS_3
                           AND CHARACTERISTIC = LNCH_3;

                        
                        IF I = 0
                        THEN
                           LNCH_3 := REC_UPD.CH_3;
                        ELSE
                           NULL;   
                        END IF;
                     ELSE
                        NULL;   
                     END IF;
                  ELSE
                     LNCH_3 := REC_UPD.CH_3;
                  END IF;
               ELSE
                  LNCH_3 := NULL;
               END IF;




               UPDATE SPECIFICATION_PROP
                  SET SECTION_REV = NVL( F_GET_SUB_REV( REC_UPD.SECTION_ID,
                                                        REC_UPD.SECTION_REV,
                                                        NULL,
                                                        NULL,
                                                        'SC' ),
                                         0 ),
                      SUB_SECTION_REV = NVL( F_GET_SUB_REV( REC_UPD.SUB_SECTION_ID,
                                                            REC_UPD.SUB_SECTION_REV,
                                                            NULL,
                                                            NULL,
                                                            'SB' ),
                                             0 ),
                      PROPERTY_GROUP_REV = NVL( F_GET_SUB_REV( REC_UPD.PROPERTY_GROUP,
                                                               REC_UPD.PROPERTY_GROUP_REV,
                                                               NULL,
                                                               NULL,
                                                               'PG' ),
                                                0 ),
                      PROPERTY_REV = NVL( F_GET_SUB_REV( REC_UPD.PROPERTY,
                                                         REC_UPD.PROPERTY_REV,
                                                         NULL,
                                                         NULL,
                                                         'SP' ),
                                          0 ),
                      ATTRIBUTE_REV = NVL( F_GET_SUB_REV( ATTRIBUTE,
                                                          ATTRIBUTE_REV,
                                                          NULL,
                                                          NULL,
                                                          'AT' ),
                                           0 ),
                      TEST_METHOD = NVL( DECODE( TEST_METHOD,
                                                 NULL, REC_UPD.TEST_METHOD,
                                                 
                                                 
                                                 
                                                 
                                                 0, REC_UPD.TEST_METHOD,
                                                 
                                                 TEST_METHOD ),
                                         0 ),
                      TEST_METHOD_REV =
                         NVL( DECODE( TEST_METHOD,
                                      NULL, F_GET_SUB_REV( REC_UPD.TEST_METHOD,
                                                           REC_UPD.TEST_METHOD_REV,
                                                           NULL,
                                                           NULL,
                                                           'TM' ),
                                      TEST_METHOD_REV ),
                              0 ),
                      UOM_ID = REC_UPD.UOM_ID,
                      UOM_REV = NVL( F_GET_SUB_REV( REC_UPD.UOM_ID,
                                                    REC_UPD.UOM_REV,
                                                    NULL,
                                                    NULL,
                                                    'UO' ),
                                     0 ),
                      UOM_ALT_ID = REC_UPD.UOM_ALT_ID,
                      UOM_ALT_REV = NVL( F_GET_SUB_REV( REC_UPD.UOM_ALT_ID,
                                                        REC_UPD.UOM_ALT_REV,
                                                        NULL,
                                                        NULL,
                                                        'UO' ),
                                         0 ),
                      SEQUENCE_NO = REC_UPD.SEQUENCE_NO,
                      INTL = REC_UPD.INTL,
                      NUM_1 = DECODE( NUM_1,
                                      NULL, REC_UPD.NUM_1,
                                      NUM_1 ),
                      NUM_2 = DECODE( NUM_2,
                                      NULL, REC_UPD.NUM_2,
                                      NUM_2 ),
                      NUM_3 = DECODE( NUM_3,
                                      NULL, REC_UPD.NUM_3,
                                      NUM_3 ),
                      NUM_4 = DECODE( NUM_4,
                                      NULL, REC_UPD.NUM_4,
                                      NUM_4 ),
                      NUM_5 = DECODE( NUM_5,
                                      NULL, REC_UPD.NUM_5,
                                      NUM_5 ),
                      NUM_6 = DECODE( NUM_6,
                                      NULL, REC_UPD.NUM_6,
                                      NUM_6 ),
                      NUM_7 = DECODE( NUM_7,
                                      NULL, REC_UPD.NUM_7,
                                      NUM_7 ),
                      NUM_8 = DECODE( NUM_8,
                                      NULL, REC_UPD.NUM_8,
                                      NUM_8 ),
                      NUM_9 = DECODE( NUM_9,
                                      NULL, REC_UPD.NUM_9,
                                      NUM_9 ),
                      NUM_10 = DECODE( NUM_10,
                                       NULL, REC_UPD.NUM_10,
                                       NUM_10 ),
                      CHAR_1 = DECODE( CHAR_1,
                                       NULL, REC_UPD.CHAR_1,
                                       CHAR_1 ),
                      CHAR_2 = DECODE( CHAR_2,
                                       NULL, REC_UPD.CHAR_2,
                                       CHAR_2 ),
                      CHAR_3 = DECODE( CHAR_3,
                                       NULL, REC_UPD.CHAR_3,
                                       CHAR_3 ),
                      CHAR_4 = DECODE( CHAR_4,
                                       NULL, REC_UPD.CHAR_4,
                                       CHAR_4 ),
                      CHAR_5 = DECODE( CHAR_5,
                                       NULL, REC_UPD.CHAR_5,
                                       CHAR_5 ),
                      CHAR_6 = DECODE( CHAR_6,
                                       NULL, REC_UPD.CHAR_6,
                                       CHAR_6 ),
                      BOOLEAN_1 = DECODE( BOOLEAN_1,
                                          NULL, REC_UPD.BOOLEAN_1,
                                          BOOLEAN_1 ),
                      BOOLEAN_2 = DECODE( BOOLEAN_2,
                                          NULL, REC_UPD.BOOLEAN_2,
                                          BOOLEAN_2 ),
                      BOOLEAN_3 = DECODE( BOOLEAN_3,
                                          NULL, REC_UPD.BOOLEAN_3,
                                          BOOLEAN_3 ),
                      BOOLEAN_4 = DECODE( BOOLEAN_4,
                                          NULL, REC_UPD.BOOLEAN_4,
                                          BOOLEAN_4 ),
                      DATE_1 = DECODE( DATE_1,
                                       NULL, REC_UPD.DATE_1,
                                       DATE_1 ),
                      DATE_2 = DECODE( DATE_2,
                                       NULL, REC_UPD.DATE_2,
                                       DATE_2 ),



                      CHARACTERISTIC = LNCH_1,
                      CHARACTERISTIC_REV = 0,
                      CH_2 = LNCH_2,
                      CH_REV_2 = 0,
                      CH_3 = LNCH_3,
                      CH_REV_3 = 0,
                      ASSOCIATION = REC_UPD.ASSOCIATION,
                      ASSOCIATION_REV = REC_UPD.ASSOCIATION_REV,
                      AS_2 = REC_UPD.AS_2,
                      AS_REV_2 = REC_UPD.AS_REV_2,
                      AS_3 = REC_UPD.AS_3,
                      AS_REV_3 = REC_UPD.AS_REV_3



               WHERE  PART_NO = ASPARTNO
                  AND REVISION = ANREVISION
                  AND SECTION_ID = REC_UPD.SECTION_ID
                  AND SUB_SECTION_ID = REC_UPD.SUB_SECTION_ID
                  AND PROPERTY_GROUP = REC_UPD.PROPERTY_GROUP
                  AND PROPERTY = REC_UPD.PROPERTY
                  AND ATTRIBUTE = REC_UPD.ATTRIBUTE;



                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                

            END IF;



         END LOOP;


      
      
      BEGIN
         FOR REC_UPD_LANG IN L_UPD_PROP_LANG_CURSOR
         LOOP
            LBPGCHANGED := TRUE;

            SELECT COUNT( * )
              INTO I
              FROM SPECIFICATION_PROP
             WHERE PART_NO = ASPARTNO
               AND REVISION = ANREVISION
               AND SECTION_ID = REC_UPD_LANG.SECTION_ID
               AND SUB_SECTION_ID = REC_UPD_LANG.SUB_SECTION_ID
               AND PROPERTY_GROUP = REC_UPD_LANG.PROPERTY_GROUP
               AND PROPERTY = REC_UPD_LANG.PROPERTY
               AND ATTRIBUTE = REC_UPD_LANG.ATTRIBUTE;

            IF I = 1
            THEN
               UPDATE SPECIFICATION_PROP_LANG
                  SET
                      SEQUENCE_NO = REC_UPD_LANG.SEQUENCE_NO,
                      INTL = REC_UPD_LANG.INTL,
                      CHAR_1 = DECODE( CHAR_1,
                                       NULL, REC_UPD_LANG.CHAR_1,
                                       CHAR_1 ),
                      CHAR_2 = DECODE( CHAR_2,
                                       NULL, REC_UPD_LANG.CHAR_2,
                                       CHAR_2 ),
                      CHAR_3 = DECODE( CHAR_3,
                                       NULL, REC_UPD_LANG.CHAR_3,
                                       CHAR_3 ),
                      CHAR_4 = DECODE( CHAR_4,
                                       NULL, REC_UPD_LANG.CHAR_4,
                                       CHAR_4 ),
                      CHAR_5 = DECODE( CHAR_5,
                                       NULL, REC_UPD_LANG.CHAR_5,
                                       CHAR_5 ),
                      CHAR_6 = DECODE( CHAR_6,
                                       NULL, REC_UPD_LANG.CHAR_6,
                                       CHAR_6 )
               WHERE  PART_NO = ASPARTNO
                  AND REVISION = ANREVISION
                  AND SECTION_ID = REC_UPD_LANG.SECTION_ID
                  AND SUB_SECTION_ID = REC_UPD_LANG.SUB_SECTION_ID
                  AND PROPERTY_GROUP = REC_UPD_LANG.PROPERTY_GROUP
                  AND PROPERTY = REC_UPD_LANG.PROPERTY
                  AND ATTRIBUTE = REC_UPD_LANG.ATTRIBUTE;
            END IF;

         END LOOP;
      EXCEPTION
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
      END;
     
         
          
          
          BEGIN
             FOR REC_UPD IN L_UPD_DISPL_CURSOR
             LOOP
                LNRETVAL :=
                   CLEANLAYOUT_TESTMETHOD( ASPARTNO,
                                ANREVISION,
                                REC_UPD.DISPLAY_FORMAT,
                                REC_UPD.DISPLAY_FORMAT_REV,
                                REC_UPD.SECTION_ID,
                                REC_UPD.SUB_SECTION_ID,
                                REC_UPD.REF_ID,
                                REC_UPD.TYPE );

                IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
                THEN
                   IAPIGENERAL.LOGERROR( GSSOURCE,
                                         LSMETHOD,
                                         IAPIGENERAL.GETLASTERRORTEXT( ) );
                   RETURN LNRETVAL;
                END IF;
             END LOOP;
          EXCEPTION
             WHEN OTHERS
             THEN
                IAPIGENERAL.LOGERROR( GSSOURCE,
                                      LSMETHOD,
                                      SQLERRM );
                RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
          END;
          

      EXCEPTION
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
      END;




      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'BOM' );

      BEGIN
         SELECT COUNT( * )
           INTO LNCHECKBOM
           FROM FRAME_SECTION
          WHERE FRAME_NO = ASFRAMENO
            AND REVISION = ANFRAMEREVISION
            AND OWNER = ANFRAMEOWNER
            AND TYPE = IAPICONSTANT.SECTIONTYPE_BOM;

         IF LNCHECKBOM = 0
         THEN
            DELETE FROM BOM_ITEM
                  WHERE PART_NO = ASPARTNO
                    AND REVISION = ANREVISION;

            DELETE FROM BOM_HEADER
                  WHERE PART_NO = ASPARTNO
                    AND REVISION = ANREVISION;

            
            LNRETVAL := IAPIPLANTPART.SETPLANTACCESS( ASPARTNO );

            IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
            THEN
               IAPIGENERAL.LOGERROR( GSSOURCE,
                                     LSMETHOD,
                                     IAPIGENERAL.GETLASTERRORTEXT( ) );
               RETURN LNRETVAL;
            END IF;
         END IF;
      EXCEPTION
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
      END;




      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'INGREDIENT ENTRIES' );

      BEGIN
         SELECT COUNT( * )
           INTO LNCHECKING
           FROM FRAME_SECTION
          WHERE FRAME_NO = ASFRAMENO
            AND REVISION = ANFRAMEREVISION
            AND OWNER = ANFRAMEOWNER
            AND TYPE = IAPICONSTANT.SECTIONTYPE_INGREDIENTLIST;

         IF LNCHECKING = 0
         THEN
            DELETE FROM SPECIFICATION_ING
                  WHERE PART_NO = ASPARTNO
                    AND REVISION = ANREVISION;

            DELETE FROM SPECIFICATION_ING_LANG
                  WHERE PART_NO = ASPARTNO
                    AND REVISION = ANREVISION;

            
            DELETE FROM ITSPECINGALLERGEN
                  WHERE PART_NO = ASPARTNO
                    AND REVISION = ANREVISION;
            

            
            DELETE FROM ITSPECINGDETAIL
                  WHERE PART_NO = ASPARTNO
                    AND REVISION = ANREVISION;
            

         
         
         
         
         
         
         
         ELSE
            OPEN CUROLDINGREDIENTSECTIONS;

           LOOP
              FETCH CUROLDINGREDIENTSECTIONS
               INTO LNSECTIONID, LNSUBSECTIONID;

              EXIT WHEN CUROLDINGREDIENTSECTIONS%NOTFOUND;

              DELETE FROM SPECIFICATION_ING
              WHERE PART_NO = ASPARTNO
                  AND REVISION = ANREVISION
                  AND SECTION_ID = LNSECTIONID
                  AND SUB_SECTION_ID = LNSUBSECTIONID;

              DELETE FROM SPECIFICATION_ING_LANG
              WHERE PART_NO = ASPARTNO
                  AND REVISION = ANREVISION
                  AND SECTION_ID = LNSECTIONID
                  AND SUB_SECTION_ID = LNSUBSECTIONID;

              
              DELETE FROM ITSPECINGALLERGEN
              WHERE PART_NO = ASPARTNO
                  AND REVISION = ANREVISION
                  AND SECTION_ID = LNSECTIONID
                  AND SUB_SECTION_ID = LNSUBSECTIONID;
              

              
              DELETE FROM ITSPECINGDETAIL
              WHERE PART_NO = ASPARTNO
                  AND REVISION = ANREVISION
                  AND SECTION_ID = LNSECTIONID
                  AND SUB_SECTION_ID = LNSUBSECTIONID;
              

           END LOOP;

           CLOSE CUROLDINGREDIENTSECTIONS;
         

         END IF;
      EXCEPTION
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
      END;




      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'BASENAME ENTRIES' );
      BEGIN
         SELECT COUNT( * )
           INTO LNCHECKING
           FROM FRAME_SECTION
          WHERE FRAME_NO = ASFRAMENO
            AND REVISION = ANFRAMEREVISION
            AND OWNER = ANFRAMEOWNER
            AND TYPE = IAPICONSTANT.SECTIONTYPE_BASENAME;

       IF LNCHECKING <> 0
         THEN





         SELECT COUNT(*)
           INTO LNCHECKING1
           FROM ITSHBN
          WHERE PART_NO = ASPARTNO
            AND REVISION = ANREVISION;

         IF LNCHECKING1 <> 0
           THEN
             SELECT SECTION_ID,
                    NVL( F_GET_SUB_REV( SECTION_ID,
                                        SECTION_REV,
                                        NULL,
                                        NULL,
                                        'SC' ),
                         0 ),
                    SUB_SECTION_ID,
                    NVL( F_GET_SUB_REV( SUB_SECTION_ID,
                                        SUB_SECTION_REV,
                                        NULL,
                                        NULL,
                                       'SB' ),
                         0 )
               INTO LNSECTIONID,
                    LNSECTIONREVISIONID,
                    LNSUBSECTIONID,
                    LNSUBSECTIONREVISIONID
               FROM FRAME_SECTION
              WHERE FRAME_NO = ASFRAMENO
                AND REVISION = ANFRAMEREVISION
                AND TYPE = IAPICONSTANT.SECTIONTYPE_BASENAME;

             UPDATE ITSHBN
                SET SECTION_ID = LNSECTIONID,
                    SECTION_REV = LNSECTIONREVISIONID,
                    SUB_SECTION_ID = LNSUBSECTIONID,
                    SUB_SECTION_REV = LNSUBSECTIONREVISIONID
                   WHERE PART_NO = ASPARTNO
                     AND REVISION = ANREVISION;
        END IF;
       ELSE

          DELETE FROM ITSHBN
                  WHERE PART_NO = ASPARTNO
                    AND REVISION = ANREVISION;
      END IF;



      EXCEPTION
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
      END;




      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'PROCESS (stage and line)' );

      BEGIN
         SELECT COUNT( * )
           INTO LNCHECKPROCESS
           FROM FRAME_SECTION
          WHERE FRAME_NO = ASFRAMENO
            AND REVISION = ANFRAMEREVISION
            AND OWNER = ANFRAMEOWNER
            AND TYPE = IAPICONSTANT.SECTIONTYPE_PROCESSDATA;

         IF LNCHECKPROCESS = 0
         THEN
            LBPGCHANGED := TRUE;

            DELETE FROM SPECIFICATION_LINE
                  WHERE PART_NO = ASPARTNO
                    AND REVISION = ANREVISION;

            DELETE FROM SPECIFICATION_STAGE
                  WHERE PART_NO = ASPARTNO
                    AND REVISION = ANREVISION;

            DELETE FROM ITSHLNPROPLANG
                  WHERE PART_NO = ASPARTNO
                    AND REVISION = ANREVISION;

            DELETE FROM SPECIFICATION_LINE_PROP
                  WHERE PART_NO = ASPARTNO
                    AND REVISION = ANREVISION;

            DELETE FROM SPECIFICATION_LINE_TEXT
                  WHERE PART_NO = ASPARTNO
                    AND REVISION = ANREVISION;
         END IF;
      EXCEPTION
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
      END;




      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'FREE TEXT' );

      BEGIN
         DELETE FROM SPECIFICATION_TEXT
               WHERE PART_NO = ASPARTNO
                 AND REVISION = ANREVISION
                 AND ( SECTION_ID, SUB_SECTION_ID, TEXT_TYPE ) NOT IN(
                                              SELECT SS.SECTION_ID,
                                                     SS.SUB_SECTION_ID,
                                                     SS.REF_ID
                                                FROM SPECIFICATION_SECTION SS
                                               WHERE SS.PART_NO = ASPARTNO
                                                 AND SS.REVISION = ANREVISION
                                                 AND SS.TYPE = IAPICONSTANT.SECTIONTYPE_FREETEXT );
      EXCEPTION
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
      END;




      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'ATTACHED SPECIFICATION' );

      BEGIN
         DELETE FROM ATTACHED_SPECIFICATION
               WHERE PART_NO = ASPARTNO
                 AND REVISION = ANREVISION
                 AND ( REF_ID, SECTION_ID, SUB_SECTION_ID ) NOT IN(
                                                   SELECT REF_ID,
                                                          SECTION_ID,
                                                          SUB_SECTION_ID
                                                     FROM SPECIFICATION_SECTION
                                                    WHERE PART_NO = ASPARTNO
                                                      AND REVISION = ANREVISION
                                                      AND TYPE = IAPICONSTANT.SECTIONTYPE_ATTACHEDSPEC );
      EXCEPTION
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
      END;




      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'FREE TEXT' );

      BEGIN
         INSERT INTO SPECIFICATION_TEXT
                     ( PART_NO,
                       REVISION,
                       SECTION_ID,
                       SUB_SECTION_ID,
                       SECTION_REV,
                       SUB_SECTION_REV,
                       TEXT_TYPE,
                       TEXT_TYPE_REV )
            SELECT PART_NO,
                   REVISION,
                   SECTION_ID,
                   SUB_SECTION_ID,
                   SECTION_REV,
                   SUB_SECTION_REV,
                   REF_ID,
                   REF_VER
              FROM SPECIFICATION_SECTION
             WHERE PART_NO = ASPARTNO
               AND REVISION = ANREVISION
               AND TYPE = IAPICONSTANT.SECTIONTYPE_FREETEXT
               AND ( SECTION_ID, SUB_SECTION_ID, REF_ID ) NOT IN( SELECT SECTION_ID,
                                                                         SUB_SECTION_ID,
                                                                         TEXT_TYPE
                                                                   FROM SPECIFICATION_TEXT B
                                                                  WHERE B.PART_NO = ASPARTNO
                                                                    AND B.REVISION = ANREVISION );
      EXCEPTION
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
      END;

      
      
      BEGIN
         
         FOR REC_TEXT IN LS_REV_FREE_TEXT
         LOOP
            UPDATE SPECIFICATION_TEXT
               SET SECTION_REV = NVL( F_GET_SUB_REV( SECTION_ID,
                                                     REC_TEXT.SECTION_REV,
                                                     NULL,
                                                     NULL,
                                                     'SC' ),
                                      0 ),
                   SUB_SECTION_REV = NVL( F_GET_SUB_REV( SUB_SECTION_ID,
                                                         REC_TEXT.SUB_SECTION_REV,
                                                         NULL,
                                                         NULL,
                                                         'SB' ),
                                          0 ),
                   TEXT_TYPE_REV = NVL( F_GET_SUB_REV( TEXT_TYPE,
                                                       REC_TEXT.TEXT_TYPE_REV,
                                                       NULL,
                                                       NULL,
                                                       'FT' ),
                                        0 )
             WHERE PART_NO = ASPARTNO
               AND REVISION = ANREVISION
               AND SECTION_ID = REC_TEXT.SECTION_ID
               AND SUB_SECTION_ID = REC_TEXT.SUB_SECTION_ID
               AND TEXT_TYPE = REC_TEXT.TEXT_TYPE;
         END LOOP;

         
         FOR REC_TEXT IN LS_UPD_FREE_TEXT
         LOOP
            UPDATE SPECIFICATION_TEXT
               SET TEXT = REC_TEXT.TEXT
             WHERE PART_NO = ASPARTNO
               AND REVISION = ANREVISION
               AND SECTION_ID = REC_TEXT.SECTION_ID
               AND SUB_SECTION_ID = REC_TEXT.SUB_SECTION_ID
               AND TEXT_TYPE = REC_TEXT.TEXT_TYPE;
         END LOOP;
      EXCEPTION
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
      END;

      
      
      DELETE FROM SPECIFICATION_SECTION SS
            WHERE SS.PART_NO = ASPARTNO
              AND SS.REVISION = ANREVISION
              AND SS.TYPE IN( IAPICONSTANT.SECTIONTYPE_OBJECT, IAPICONSTANT.SECTIONTYPE_REFERENCETEXT )
              AND ( SS.SECTION_ID, SS.SUB_SECTION_ID ) NOT IN(
                     SELECT SECTION_ID,
                            SUB_SECTION_ID
                       FROM FRAME_SECTION
                      WHERE FRAME_NO = ASFRAMENO
                        AND REVISION = ANFRAMEREVISION
                        AND OWNER = ANFRAMEOWNER
                        AND FRAME_SECTION.TYPE IN( IAPICONSTANT.SECTIONTYPE_OBJECT, IAPICONSTANT.SECTIONTYPE_REFERENCETEXT ) );

      

      
      
        DELETE
        FROM SPECIFICATION_SECTION SS
        WHERE SS.PART_NO = ASPARTNO
            AND SS.REVISION = ANREVISION
            AND SS.TYPE IN( IAPICONSTANT.SECTIONTYPE_OBJECT, IAPICONSTANT.SECTIONTYPE_REFERENCETEXT )
            AND REF_ID > 0
            AND NVL(SEQUENCE_NO, -1) <> 0
            AND ( SS.SECTION_ID, SS.SUB_SECTION_ID, TYPE, REF_ID) NOT IN(
                SELECT SECTION_ID, SUB_SECTION_ID, TYPE, REF_ID
                FROM FRAME_SECTION
                WHERE FRAME_NO = ASFRAMENO
                    AND REVISION = ANFRAMEREVISION
                    AND OWNER = ANFRAMEOWNER
                    AND FRAME_SECTION.TYPE IN( IAPICONSTANT.SECTIONTYPE_OBJECT, IAPICONSTANT.SECTIONTYPE_REFERENCETEXT )
                    AND REF_ID > 0);
      
      




      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'REFERENCED SPECIFICATION' );

      FOR L_ROW IN L_SPEC_SECTION_CURSOR
      LOOP
         BEGIN
            SELECT ATTACHED_SPEC_SEQ.NEXTVAL
              INTO LNATTACHEDSPEC
              FROM DUAL;
         EXCEPTION
            WHEN OTHERS
            THEN
               IAPIGENERAL.LOGERROR( GSSOURCE,
                                     LSMETHOD,
                                     SQLERRM );
               RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
         END;

         BEGIN
            UPDATE SPECIFICATION_SECTION
               SET REF_ID = LNATTACHEDSPEC
             WHERE PART_NO = L_ROW.PART_NO
               AND REVISION = L_ROW.REVISION
               AND SECTION_ID = L_ROW.SECTION_ID
               AND SUB_SECTION_ID = L_ROW.SUB_SECTION_ID
               AND REF_ID = 0
               AND SPECIFICATION_SECTION.TYPE = IAPICONSTANT.SECTIONTYPE_ATTACHEDSPEC;

            UPDATE ATTACHED_SPECIFICATION
               SET REF_ID = LNATTACHEDSPEC
             WHERE PART_NO = L_ROW.PART_NO
               AND REVISION = L_ROW.REVISION
               AND SECTION_ID = L_ROW.SECTION_ID
               AND SUB_SECTION_ID = L_ROW.SUB_SECTION_ID
               AND REF_ID = 0;

            
            UPDATE FT_SPEC_SECTION
               SET REF_ID = LNATTACHEDSPEC
             WHERE PART_NO = L_ROW.PART_NO
               AND SECTION_ID = L_ROW.SECTION_ID
               AND SUB_SECTION_ID = L_ROW.SUB_SECTION_ID
               AND REF_ID = 0
               AND TYPE = IAPICONSTANT.SECTIONTYPE_ATTACHEDSPEC;

            UPDATE FT_ATTACH_SPEC
               SET REF_ID = LNATTACHEDSPEC
             WHERE PART_NO = L_ROW.PART_NO
               AND SECTION_ID = L_ROW.SECTION_ID
               AND SUB_SECTION_ID = L_ROW.SUB_SECTION_ID
               AND REF_ID = 0;
            

         EXCEPTION
            WHEN OTHERS
            THEN
               IAPIGENERAL.LOGERROR( GSSOURCE,
                                     LSMETHOD,
                                     SQLERRM );
               RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
         END;
      END LOOP;





      

      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'RESEQUENCE' );

      FOR REC_SEQUENCE IN L_SEQUENCE_CURSOR
      LOOP
         BEGIN
            IF REC_SEQUENCE.REF_OWNER IS NULL
            THEN
               UPDATE SPECIFICATION_SECTION
                  SET SECTION_SEQUENCE_NO = REC_SEQUENCE.SECTION_SEQUENCE_NO
                WHERE PART_NO = ASPARTNO
                  AND REVISION = ANREVISION
                  AND SECTION_ID = REC_SEQUENCE.SECTION_ID
                  AND SUB_SECTION_ID = REC_SEQUENCE.SUB_SECTION_ID
                  AND TYPE = REC_SEQUENCE.TYPE
                  AND REF_ID = REC_SEQUENCE.REF_ID
                  AND REF_VER = REC_SEQUENCE.REF_VER
                  AND REF_OWNER IS NULL;
            ELSE
               UPDATE SPECIFICATION_SECTION
                  SET SECTION_SEQUENCE_NO = REC_SEQUENCE.SECTION_SEQUENCE_NO
                WHERE PART_NO = ASPARTNO
                  AND REVISION = ANREVISION
                  AND SECTION_ID = REC_SEQUENCE.SECTION_ID
                  AND SUB_SECTION_ID = REC_SEQUENCE.SUB_SECTION_ID
                  AND TYPE = REC_SEQUENCE.TYPE
                  AND REF_ID = REC_SEQUENCE.REF_ID
                  AND REF_VER = REC_SEQUENCE.REF_VER
                  AND REF_OWNER = REC_SEQUENCE.REF_OWNER;
            END IF;
         EXCEPTION
            WHEN OTHERS
            THEN
               IAPIGENERAL.LOGERROR( GSSOURCE,
                                     LSMETHOD,
                                     SQLERRM );
               RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
         END;
      END LOOP;

      


      FOR LREXTENDEDSECTIONS IN LQEXTENDEDSECTIONS
      LOOP
         BEGIN
            
            


            IF    LNSECTIONIDPREV IS NULL
               OR LNSECTIONIDPREV <> LREXTENDEDSECTIONS.SECTION_ID
               OR LNSUBSECTIONIDPREV IS NULL
               OR LNSUBSECTIONIDPREV <> LREXTENDEDSECTIONS.SUB_SECTION_ID
            THEN
               SELECT NVL( MAX( SECTION_SEQUENCE_NO ),
                           0 )
                 INTO LNSECTIONSEQUENCENO
                 FROM SPECIFICATION_SECTION
                WHERE PART_NO = ASPARTNO
                  AND REVISION = ANREVISION
                  AND SECTION_ID = LREXTENDEDSECTIONS.SECTION_ID
                  AND SUB_SECTION_ID = LREXTENDEDSECTIONS.SUB_SECTION_ID
                  AND MOD( SECTION_SEQUENCE_NO,
                           '100' ) = 0;
            END IF;

            LNSECTIONIDPREV := LREXTENDEDSECTIONS.SECTION_ID;
            LNSUBSECTIONIDPREV := LREXTENDEDSECTIONS.SUB_SECTION_ID;
            LNSECTIONSEQUENCENO :=   LNSECTIONSEQUENCENO
                                   + 10;

            
            IF LREXTENDEDSECTIONS.REF_OWNER IS NULL
            THEN
               UPDATE SPECIFICATION_SECTION
                  SET SECTION_SEQUENCE_NO = LNSECTIONSEQUENCENO
                WHERE PART_NO = ASPARTNO
                  AND REVISION = ANREVISION
                  AND SECTION_ID = LREXTENDEDSECTIONS.SECTION_ID
                  AND SUB_SECTION_ID = LREXTENDEDSECTIONS.SUB_SECTION_ID
                  AND TYPE = LREXTENDEDSECTIONS.TYPE
                  AND REF_ID = LREXTENDEDSECTIONS.REF_ID
                  AND REF_VER = LREXTENDEDSECTIONS.REF_VER
                  AND REF_OWNER IS NULL;
            ELSE
               UPDATE SPECIFICATION_SECTION
                  SET SECTION_SEQUENCE_NO = LNSECTIONSEQUENCENO
                WHERE PART_NO = ASPARTNO
                  AND REVISION = ANREVISION
                  AND SECTION_ID = LREXTENDEDSECTIONS.SECTION_ID
                  AND SUB_SECTION_ID = LREXTENDEDSECTIONS.SUB_SECTION_ID
                  AND TYPE = LREXTENDEDSECTIONS.TYPE
                  AND REF_ID = LREXTENDEDSECTIONS.REF_ID
                  AND REF_VER = LREXTENDEDSECTIONS.REF_VER
                  AND REF_OWNER = LREXTENDEDSECTIONS.REF_OWNER;
            END IF;
         EXCEPTION
            WHEN OTHERS
            THEN
               IAPIGENERAL.LOGERROR( GSSOURCE,
                                     LSMETHOD,
                                     SQLERRM );
               RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
         END;
      END LOOP;

      
      
      
      LNTYPE := IAPICONSTANT.SECTIONTYPE_REFERENCETEXT;

      WHILE NOT( LNTYPE IS NULL )
      LOOP
         IAPIGENERAL.LOGINFO( GSSOURCE,
                              LSMETHOD,
                                 LNTYPE
                              || ' 0. RESEQUENCE for type '
                              || LNTYPE );
         
         
         
         LNSECTIONIDPREV := NULL;
         LNSUBSECTIONIDPREV := NULL;
         LNTYPEPREV := NULL;
         I := 0;

         FOR MYREC IN L_ALLSECTION_CURSOR( LNTYPE )
         LOOP
            I :=   I
                 + 1;
            IAPIGENERAL.LOGINFO( GSSOURCE,
                                 LSMETHOD,
                                    LNTYPE
                                 || ' 0.'
                                 || I
                                 || '==> '
                                 || MYREC.SECTION_ID
                                 || '/'
                                 || MYREC.SUB_SECTION_ID
                                 || '/'
                                 || MYREC.TYPE
                                 || '/'
                                 || MYREC.REF_ID
                                 || '/'
                                 || MYREC.REF_VER
                                 || '/'
                                 || MYREC.REF_OWNER
                                 || '/'
                                 || MYREC.SECTION_SEQUENCE_NO );
         END LOOP;

         FOR REC_REF_TEXTOROBJ IN L_ANYHOOK_CURSOR( LNTYPE )
         LOOP
            IAPIGENERAL.LOGINFO( GSSOURCE,
                                 LSMETHOD,
                                    LNTYPE
                                 || ' 0.> '
                                 || REC_REF_TEXTOROBJ.SECTION_ID
                                 || '/'
                                 || REC_REF_TEXTOROBJ.SUB_SECTION_ID
                                 || '/'
                                 || REC_REF_TEXTOROBJ.TYPE
                                 || '/'
                                 || REC_REF_TEXTOROBJ.REF_ID
                                 || '/'
                                 || REC_REF_TEXTOROBJ.REF_VER
                                 || '/'
                                 || REC_REF_TEXTOROBJ.REF_OWNER
                                 || '/'
                                 || REC_REF_TEXTOROBJ.SECTION_SEQUENCE_NO );

            IF    LNSECTIONIDPREV IS NULL
               OR LNSECTIONIDPREV <> REC_REF_TEXTOROBJ.SECTION_ID
               OR LNSUBSECTIONIDPREV IS NULL
               OR LNSUBSECTIONIDPREV <> REC_REF_TEXTOROBJ.SUB_SECTION_ID
               OR LNTYPEPREV IS NULL
               OR LNTYPEPREV <> REC_REF_TEXTOROBJ.TYPE
            THEN
               LBDELETEANYHOOK := FALSE;

               


               SELECT MAX( SECTION_SEQUENCE_NO )
                 INTO LNNEWSEQUENCE
                 FROM FRAME_SECTION
                WHERE FRAME_NO = ASFRAMENO
                  AND REVISION = ANFRAMEREVISION
                  AND OWNER = ANFRAMEOWNER
                  AND SECTION_ID = REC_REF_TEXTOROBJ.SECTION_ID
                  AND SUB_SECTION_ID = REC_REF_TEXTOROBJ.SUB_SECTION_ID
                  AND TYPE = REC_REF_TEXTOROBJ.TYPE
                  AND REF_ID = 0
                  AND NOT EXISTS(
                         SELECT *
                           FROM ITFRMVSC
                          WHERE VIEW_ID = LNVIEW
                            AND FRAME_NO = ASFRAMENO
                            AND REVISION = ANFRAMEREVISION
                            AND OWNER = ANFRAMEOWNER
                            AND SECTION_ID = REC_REF_TEXTOROBJ.SECTION_ID
                            AND SUB_SECTION_ID = REC_REF_TEXTOROBJ.SUB_SECTION_ID
                            AND TYPE = REC_REF_TEXTOROBJ.TYPE
                            AND REF_ID = 0
                            AND MANDATORY = 'H' );

               IF LNNEWSEQUENCE IS NULL
               THEN
                  IAPIGENERAL.LOGINFO( GSSOURCE,
                                       LSMETHOD,
                                          LNTYPE
                                       || ' 1.ANY-hook not avail in frame' );

                  


                  SELECT COUNT( * )
                    INTO LNNEWSEQUENCE
                    FROM ITSHEXT
                   WHERE PART_NO = ASPARTNO
                     AND REVISION = ANREVISION
                     AND SECTION_ID = REC_REF_TEXTOROBJ.SECTION_ID
                     AND SUB_SECTION_ID = REC_REF_TEXTOROBJ.SUB_SECTION_ID
                     AND TYPE = REC_REF_TEXTOROBJ.TYPE
                     AND REF_ID = 0;

                  IF LNNEWSEQUENCE = 0
                  THEN
                     IAPIGENERAL.LOGINFO( GSSOURCE,
                                          LSMETHOD,
                                             LNTYPE
                                          || ' 2.No ANY-hook added via extendable frame' );
                     LBDELETEANYHOOK := TRUE;

        
                    
                    

                    SELECT COUNT (*)
                      INTO LNCHECKING
                    FROM SPECIFICATION_SECTION
                    WHERE PART_NO = ASPARTNO
                      AND REVISION = ANREVISION
                      AND SECTION_ID = REC_REF_TEXTOROBJ.SECTION_ID
                      AND SUB_SECTION_ID = REC_REF_TEXTOROBJ.SUB_SECTION_ID
                      AND TYPE = REC_REF_TEXTOROBJ.TYPE
                      AND REF_ID <> 0
                      AND MOD( SECTION_SEQUENCE_NO,'100' ) <> 0
                      AND EXISTS
                            (SELECT *
                            FROM FRAME_SECTION
                            WHERE FRAME_NO = ASFRAMENO
                              AND REVISION = ANFRAMEREVISION
                              AND OWNER = ANFRAMEOWNER
                              AND SECTION_ID = REC_REF_TEXTOROBJ.SECTION_ID
                              AND SUB_SECTION_ID = REC_REF_TEXTOROBJ.SUB_SECTION_ID
                              AND TYPE = REC_REF_TEXTOROBJ.TYPE
                              AND REF_ID = 0);

                    IF (LNCHECKING > 0)
                    THEN
                        
                        
                         IAPIGENERAL.LOGINFO( GSSOURCE,
                                              LSMETHOD,
                                                 LNTYPE
                                              || ' 2b.There is data added to this item, so the item is not allowed to be deleted, neither its data!' );

                        LBDELETEANYHOOK := FALSE;
                    END IF;
      

                  ELSE
                     



                     SELECT NVL( MAX( SC_EXT ),
                                 'N' )
                       INTO LSSCEXT
                       FROM FRAME_SECTION
                      WHERE FRAME_NO = ASFRAMENO
                        AND REVISION = ANFRAMEREVISION
                        AND OWNER = ANFRAMEOWNER
                        AND SECTION_ID = REC_REF_TEXTOROBJ.SECTION_ID
                        AND SUB_SECTION_ID = REC_REF_TEXTOROBJ.SUB_SECTION_ID;

                     IF LSSCEXT <> 'Y'
                     THEN
                        IAPIGENERAL.LOGINFO( GSSOURCE,
                                             LSMETHOD,
                                                LNTYPE
                                             || ' 3.Section not extendable' );
                        LBDELETEANYHOOK := TRUE;
                     END IF;
                  END IF;

                  IF ( LBDELETEANYHOOK = TRUE )
                  THEN
                     


                     DELETE FROM SPECIFICATION_SECTION
                           WHERE PART_NO = ASPARTNO
                             AND REVISION = ANREVISION
                             AND SECTION_ID = REC_REF_TEXTOROBJ.SECTION_ID
                             AND SUB_SECTION_ID = REC_REF_TEXTOROBJ.SUB_SECTION_ID
                             AND TYPE = REC_REF_TEXTOROBJ.TYPE
                             AND REF_ID = 0;

                     IAPIGENERAL.LOGINFO( GSSOURCE,
                                          LSMETHOD,
                                             LNTYPE
                                          || ' 4.ANY-hook deleted' );
                     
                     IAPIGENERAL.LOGINFO( GSSOURCE,
                                          LSMETHOD,
                                             LNTYPE
                                          || ' 5.Get objects for ANY-hook '
                                          || REC_REF_TEXTOROBJ.SECTION_SEQUENCE_NO );
                     I := 0;

                     FOR REC_ANYHOOK_OBJECT IN L_ANYHOOKOBJECTS_CURSOR( LNTYPE,
                                                                        REC_REF_TEXTOROBJ.SECTION_SEQUENCE_NO,
                                                                        REC_REF_TEXTOROBJ.SECTION_ID,
                                                                        REC_REF_TEXTOROBJ.SUB_SECTION_ID )
                     LOOP
                        I :=   I
                             + 1;
                        IAPIGENERAL.LOGINFO( GSSOURCE,
                                             LSMETHOD,
                                                LNTYPE
                                             || ' 5.'
                                             || I
                                             || '==> '
                                             || REC_ANYHOOK_OBJECT.SECTION_ID
                                             || '/'
                                             || REC_ANYHOOK_OBJECT.SUB_SECTION_ID
                                             || '/'
                                             || REC_ANYHOOK_OBJECT.TYPE
                                             || '/'
                                             || REC_ANYHOOK_OBJECT.REF_ID
                                             || '/'
                                             || 'NA'
                                             || '/'
                                             || REC_ANYHOOK_OBJECT.REF_OWNER
                                             || '/'
                                             || REC_ANYHOOK_OBJECT.SECTION_SEQUENCE_NO );

                        


                        SELECT COUNT( 1 )
                          INTO LNFIXED
                          FROM SPECIFICATION_SECTION
                         WHERE PART_NO = ASPARTNO
                           AND REVISION = ANREVISION
                           AND SECTION_ID = REC_ANYHOOK_OBJECT.SECTION_ID
                           AND SUB_SECTION_ID = REC_ANYHOOK_OBJECT.SUB_SECTION_ID
                           AND TYPE = REC_ANYHOOK_OBJECT.TYPE
                           AND REF_ID = REC_ANYHOOK_OBJECT.REF_ID;

                        LBDELETEANYHOOKOBJECT := TRUE;

                        IF ( LNFIXED > 0 )
                        THEN
                           IAPIGENERAL.LOGINFO( GSSOURCE,
                                                LSMETHOD,
                                                   LNTYPE
                                                || ' 6.Item available as fixed object in the specification' );
                        ELSE
                           


                           SELECT MANDATORY
                             INTO LSMANDATORY
                             FROM FRAME_SECTION
                            WHERE FRAME_NO = ASFRAMENO
                              AND REVISION = ANFRAMEREVISION
                              AND OWNER = ANFRAMEOWNER
                              AND SECTION_ID = REC_ANYHOOK_OBJECT.SECTION_ID
                              AND SUB_SECTION_ID = REC_ANYHOOK_OBJECT.SUB_SECTION_ID
                              AND TYPE = REC_ANYHOOK_OBJECT.TYPE
                              AND REF_ID = REC_ANYHOOK_OBJECT.REF_ID
                              AND SECTION_SEQUENCE_NO = REC_ANYHOOK_OBJECT.SECTION_SEQUENCE_NO
                              AND MANDATORY = 'N'
                              AND NOT EXISTS(
                                     SELECT *
                                       FROM ITFRMVSC
                                      WHERE VIEW_ID = LNVIEW
                                        AND FRAME_NO = ASFRAMENO
                                        AND REVISION = ANFRAMEREVISION
                                        AND OWNER = ANFRAMEOWNER
                                        AND SECTION_ID = REC_ANYHOOK_OBJECT.SECTION_ID
                                        AND SUB_SECTION_ID = REC_ANYHOOK_OBJECT.SUB_SECTION_ID
                                        AND TYPE = REC_ANYHOOK_OBJECT.TYPE
                                        AND REF_ID = REC_ANYHOOK_OBJECT.REF_ID
                                        AND MANDATORY = 'H' );

                           IF ( LSMANDATORY = 'N' )
                           THEN
                              IAPIGENERAL.LOGINFO( GSSOURCE,
                                                   LSMETHOD,
                                                      LNTYPE
                                                   || ' 7.Item available as optional item in frame' );

                              


                              INSERT INTO SPECIFICATION_SECTION
                                          ( PART_NO,
                                            REVISION,
                                            SECTION_ID,
                                            SECTION_REV,
                                            SUB_SECTION_ID,
                                            SUB_SECTION_REV,
                                            TYPE,
                                            REF_ID,
                                            REF_VER,
                                            REF_INFO,
                                            REF_OWNER,
                                            SEQUENCE_NO,
                                            HEADER,
                                            MANDATORY,
                                            SECTION_SEQUENCE_NO,
                                            DISPLAY_FORMAT,
                                            DISPLAY_FORMAT_REV,
                                            ASSOCIATION,
                                            INTL )
                                 SELECT ASPARTNO,
                                        ANREVISION,
                                        SECTION_ID,
                                        NVL( F_GET_SUB_REV( SECTION_ID,
                                                            SECTION_REV,
                                                            NULL,
                                                            NULL,
                                                            'SC' ),
                                             0 ),
                                        SUB_SECTION_ID,
                                        NVL( F_GET_SUB_REV( SUB_SECTION_ID,
                                                            SUB_SECTION_REV,
                                                            NULL,
                                                            NULL,
                                                            'SB' ),
                                             0 ),
                                        TYPE,
                                        REF_ID,

                                        












                                           NVL( REF_VER, 0 ),
                                        


                                        REF_INFO,
                                        REF_OWNER,
                                        SEQUENCE_NO,
                                        HEADER,
                                        MANDATORY,
                                        SECTION_SEQUENCE_NO,
                                        DISPLAY_FORMAT,
                                        DISPLAY_FORMAT_REV,
                                        ASSOCIATION,
                                        INTL
                                   FROM FRAME_SECTION
                                  WHERE FRAME_NO = ASFRAMENO
                                    AND REVISION = ANFRAMEREVISION
                                    AND OWNER = ANFRAMEOWNER
                                    AND SECTION_ID = REC_ANYHOOK_OBJECT.SECTION_ID
                                    AND SUB_SECTION_ID = REC_ANYHOOK_OBJECT.SUB_SECTION_ID
                                    AND TYPE = REC_ANYHOOK_OBJECT.TYPE
                                    AND REF_ID = REC_ANYHOOK_OBJECT.REF_ID
                                    AND SECTION_SEQUENCE_NO = REC_ANYHOOK_OBJECT.SECTION_SEQUENCE_NO;
                           ELSE
                              LBDELETEANYHOOKOBJECT := FALSE;
                           
                           END IF;
                        END IF;

                        IF ( LBDELETEANYHOOKOBJECT = TRUE )
                        THEN
                           


                           DELETE FROM SPECIFICATION_SECTION
                                 WHERE PART_NO = ASPARTNO
                                   AND REVISION = ANREVISION
                                   AND SECTION_ID = REC_ANYHOOK_OBJECT.SECTION_ID
                                   AND SUB_SECTION_ID = REC_ANYHOOK_OBJECT.SUB_SECTION_ID
                                   AND TYPE = REC_ANYHOOK_OBJECT.TYPE
                                   AND REF_ID = REC_ANYHOOK_OBJECT.REF_ID
                                   
                                   AND REF_OWNER = REC_ANYHOOK_OBJECT.REF_OWNER;

                           IAPIGENERAL.LOGINFO( GSSOURCE,
                                                LSMETHOD,
                                                   LNTYPE
                                                || ' 8.Text/Object deleted' );
                        ELSE
                           IAPIGENERAL.LOGINFO( GSSOURCE,
                                                LSMETHOD,
                                                   LNTYPE
                                                || ' 8.Text/Object NOT deleted' );
                        END IF;
                     END LOOP;
                  END IF;
               ELSE
























                  NULL;
              END IF;
            END IF;

            LNSECTIONIDPREV := REC_REF_TEXTOROBJ.SECTION_ID;
            LNSUBSECTIONIDPREV := REC_REF_TEXTOROBJ.SUB_SECTION_ID;
            LNTYPEPREV := REC_REF_TEXTOROBJ.TYPE;
         END LOOP;

         IAPIGENERAL.LOGINFO( GSSOURCE,
                              LSMETHOD,
                                 LNTYPE
                              || ' Switch type' );

         IF ( LNTYPE = IAPICONSTANT.SECTIONTYPE_OBJECT )
         THEN
            LNTYPE := NULL;
         ELSE
            LNTYPE := IAPICONSTANT.SECTIONTYPE_OBJECT;
         END IF;
      END LOOP;

      
      FOR LRDEL IN LQOBSPROPERTIESEXT
      LOOP
         DELETE FROM ITSHEXT
               WHERE PART_NO = ASPARTNO
                 AND REVISION = ANREVISION
                 AND SECTION_ID = LRDEL.SECTION_ID
                 AND SUB_SECTION_ID = LRDEL.SUB_SECTION_ID
                 AND TYPE = LRDEL.TYPE
                 AND REF_ID = LRDEL.REF_ID
                 AND PROPERTY_GROUP = LRDEL.PROPERTY_GROUP
                 AND PROPERTY = LRDEL.PROPERTY
                 AND ATTRIBUTE = LRDEL.ATTRIBUTE;
      END LOOP;

      FOR LRDEL IN LQOBSSECTIONEXT
      LOOP
         DELETE FROM ITSHEXT
               WHERE PART_NO = ASPARTNO
                 AND REVISION = ANREVISION
                 AND SECTION_ID = LRDEL.SECTION_ID
                 AND SUB_SECTION_ID = LRDEL.SUB_SECTION_ID
                 AND TYPE = LRDEL.TYPE
                 AND REF_ID = LRDEL.REF_ID
                 AND PROPERTY_GROUP = LRDEL.PROPERTY_GROUP
                 AND PROPERTY = LRDEL.PROPERTY
                 AND ATTRIBUTE = LRDEL.ATTRIBUTE;
      END LOOP;

      
      BEGIN
         IF LBPGCHANGED
         THEN
            INSERT INTO SPECDATA_SERVER
                        ( PART_NO,
                          REVISION )
                 VALUES ( ASPARTNO,
                          ANREVISION );
         END IF;
      EXCEPTION
         WHEN OTHERS
         THEN
            NULL;
      END;

      
      
      BEGIN
         SELECT COUNT( * )
           INTO LNCOUNT
           FROM FT_FRAMES
          WHERE OLD_FRAME_NO = ASOLDFRAMENO
            AND (     ( ANOLDFRAMEREVISION BETWEEN OLD_FRAME_REV_FROM AND OLD_FRAME_REV_TO )
                  OR (     OLD_FRAME_REV_FROM = 0
                       AND OLD_FRAME_REV_TO = 0 )
                  OR (     OLD_FRAME_REV_FROM <= ANOLDFRAMEREVISION
                       AND OLD_FRAME_REV_TO = 0 )
                  OR (     OLD_FRAME_REV_FROM = 0
                       AND OLD_FRAME_REV_TO >= ANOLDFRAMEREVISION ) )
            AND OLD_FRAME_OWNER = ANOLDFRAMEOWNER
            AND NEW_FRAME_NO = ASFRAMENO
            AND (     ( ANFRAMEREVISION BETWEEN NEW_FRAME_REV_FROM AND NEW_FRAME_REV_TO )
                  OR (     NEW_FRAME_REV_FROM = 0
                       AND NEW_FRAME_REV_TO = 0 )
                  OR (     NEW_FRAME_REV_FROM <= ANFRAMEREVISION
                       AND NEW_FRAME_REV_TO = 0 )
                  OR (     NEW_FRAME_REV_FROM = 0
                       AND NEW_FRAME_REV_TO >= ANFRAMEREVISION ) )
            AND NEW_FRAME_OWNER = ANFRAMEOWNER;

         IF LNCOUNT > 0
         THEN
            LNRETVAL :=
                   TRANSFERFRAME( ASPARTNO,
                                  ANREVISION,
                                  ASOLDFRAMENO,
                                  ANOLDFRAMEREVISION,
                                  ANOLDFRAMEOWNER,
                                  ASFRAMENO,
                                  ANFRAMEREVISION,
                                  ANFRAMEOWNER );

            IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
            THEN
               IAPIGENERAL.LOGERROR( GSSOURCE,
                                     LSMETHOD,
                                     IAPIGENERAL.GETLASTERRORTEXT( ) );
               RETURN( LNRETVAL );
            END IF;

            LNRETVAL := CLEARFRAMETRANSFERTABLES( ASPARTNO );

            IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
            THEN
               IAPIGENERAL.LOGERROR( GSSOURCE,
                                     LSMETHOD,
                                     IAPIGENERAL.GETLASTERRORTEXT( ) );
               RETURN( LNRETVAL );
            END IF;
         END IF;
      EXCEPTION
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
      END;

      SELECT MASK_ID
        INTO LNVIEW
        FROM SPECIFICATION_HEADER
       WHERE PART_NO = ASPARTNO
         AND REVISION = ANREVISION;

      LNRETVAL := CHECKREGIONALGLOBAL( ASPARTNO,
                                       ANREVISION,
                                       LNVIEW,
                                       LNALLOWVAL );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN( LNRETVAL );
      END IF;

      IF LNALLOWVAL <> 0
      THEN
         BEGIN
            SELECT VAL_ID
              INTO LNVALID
              FROM ITFRMVAL
             WHERE FRAME_NO = ASFRAMENO
               AND REVISION = ANFRAMEREVISION
               AND OWNER = ANFRAMEOWNER
               AND MASK_ID = LNVIEW;

            DELETE FROM ITSHVALD
                  WHERE PART_NO = ASPARTNO
                    AND REVISION = ANREVISION;

            INSERT INTO ITSHVALD
                        ( PART_NO,
                          REVISION,
                          VAL_SEQ,
                          TYPE,
                          SECTION_ID,
                          SUB_SECTION_ID,
                          PROPERTY_GROUP,
                          PROPERTY,
                          ATTRIBUTE,
                          HEADER_ID,
                          REF_ID,
                          REF_OWNER )
               SELECT ASPARTNO,
                      ANREVISION,
                      VAL_SEQ,
                      TYPE,
                      SECTION_ID,
                      SUB_SECTION_ID,
                      PROPERTY_GROUP,
                      PROPERTY,
                      ATTRIBUTE,
                      HEADER_ID,
                      REF_ID,
                      REF_OWNER
                 FROM ITFRMVALD
                WHERE VAL_ID = LNVALID;

            
            LNRETVAL := INSERTRULES( ASPARTNO,
                                     ANREVISION );

            IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
            THEN
               IAPIGENERAL.LOGERROR( GSSOURCE,
                                     LSMETHOD,
                                     IAPIGENERAL.GETLASTERRORTEXT( ) );
               RETURN LNRETVAL;
            END IF;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               
               NULL;
         END;
      END IF;

      RETURN IAPICONSTANTDBERROR.DBERR_SUCCESS;
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL );
   END UPDATEFROMFRAME;


   FUNCTION SAVEFRAME(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE,
      ASFRAMEID                  IN       IAPITYPE.FRAMENO_TYPE,
      ANFRAMEREVISION            IN       IAPITYPE.FRAMEREVISION_TYPE,
      ANFRAMEOWNER               IN       IAPITYPE.OWNER_TYPE,
      ANMASKID                   IN       IAPITYPE.ID_TYPE DEFAULT NULL,
      ANUPDATEMASKID             IN       IAPITYPE.BOOLEAN_TYPE DEFAULT 0 )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS






































      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'SaveFrame';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LNACCESS                      IAPITYPE.BOOLEAN_TYPE;
      LROLDFRAME                    IAPITYPE.FRAMEREC_TYPE;
   BEGIN

 
 
      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'PreConditions',
                           IAPICONSTANT.INFOLEVEL_3 );
      
      
      
      LNRETVAL := IAPISPECIFICATIONACCESS.GETMODIFIABLEACCESS( ASPARTNO,
                                                               ANREVISION,
                                                               LNACCESS );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN( LNRETVAL );
      END IF;

      IF ( LNACCESS = 0 )
      THEN
         RETURN( IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                     LSMETHOD,
                                                     IAPICONSTANTDBERROR.DBERR_NOUPDATEACCESS,
                                                     ASPARTNO,
                                                     ANREVISION ) );
      END IF;

      
      LNRETVAL := IAPIFRAME.EXISTID( ASFRAMEID,
                                     ANFRAMEREVISION,
                                     ANFRAMEOWNER );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN( LNRETVAL );
      END IF;

      
      IF     ANMASKID > 0
         AND ANMASKID IS NOT NULL
      THEN
         LNRETVAL := IAPIFRAME.EXISTMASKID( ASFRAMEID,
                                            ANFRAMEREVISION,
                                            ANMASKID,
                                            ANFRAMEOWNER );

         IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN( LNRETVAL );
         END IF;
      END IF;




      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );
      
      LNRETVAL := GETFRAME( ASPARTNO,
                            ANREVISION,
                            LROLDFRAME );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN( LNRETVAL );
      END IF;

      
      
      

      
      
      
      
      



























       
       
       

      
      UPDATE SPECIFICATION_HEADER
         SET FRAME_ID = ASFRAMEID,
             FRAME_REV = ANFRAMEREVISION,
             FRAME_OWNER = ANFRAMEOWNER,
             MASK_ID = DECODE( ANUPDATEMASKID,
                               0, MASK_ID,
                               ANMASKID )
       WHERE PART_NO = ASPARTNO
         AND REVISION = ANREVISION;

      
      LNRETVAL :=
          VALIDATIONFRAME( ASPARTNO,
                           ANREVISION,
                           LROLDFRAME.FRAMENO,
                           LROLDFRAME.REVISION,
                           LROLDFRAME.OWNER,
                           ASFRAMEID,
                           ANFRAMEREVISION,
                           ANFRAMEOWNER );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN( LNRETVAL );
      END IF;

      LNRETVAL :=
          UPDATEFROMFRAME( ASPARTNO,
                           ANREVISION,
                           LROLDFRAME.FRAMENO,
                           LROLDFRAME.REVISION,
                           LROLDFRAME.OWNER,
                           ASFRAMEID,
                           ANFRAMEREVISION,
                           ANFRAMEOWNER );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN( LNRETVAL );
      END IF;

      
        LNRETVAL := UPDATE_DISPLAY_FORMAT_STAGE(ASPARTNO,ANREVISION);

        IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
        THEN
           IAPIGENERAL.LOGERROR( GSSOURCE,
                                 LSMETHOD,
                                 IAPIGENERAL.GETLASTERRORTEXT( ) );
           RETURN( LNRETVAL );
        END IF;
      

      
      LNRETVAL := LOGCHANGES( ASPARTNO,
                              ANREVISION );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN( LNRETVAL );
      END IF;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END SAVEFRAME;


   FUNCTION CHANGEMETRIC(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE,
      ASINTLPART                 IN       IAPITYPE.PARTNO_TYPE,
      ASINTL                     IN       IAPITYPE.INTL_TYPE,
      ASUSERINTL                 IN       IAPITYPE.INTL_TYPE,
      ANCOLACCESS                IN       IAPITYPE.NUMVAL_TYPE,
      ANUOMTYPE                  IN       IAPITYPE.NUMVAL_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS
















      CURSOR CUR_PG
      IS
         SELECT *
           FROM SPECIFICATION_PROP
          WHERE PART_NO = ASPARTNO
            AND REVISION = ANREVISION;

      LNUOMTYPE                     IAPITYPE.NUMVAL_TYPE;
      LBOLDMETRIC                   BOOLEAN;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'ChangeMetric';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      SELECT UOM_TYPE
        INTO LNUOMTYPE
        FROM SPECIFICATION_HEADER
       WHERE PART_NO = ASPARTNO
         AND REVISION = ANREVISION;

      
      
      
      
      
      

      FOR REC_PG IN CUR_PG
      LOOP
         IF REC_PG.UOM_ALT_ID IS NOT NULL
         THEN
            UPDATE SPECIFICATION_PROP
               SET NUM_1 =
                      F_METRIC( REC_PG.NUM_1,
                                REC_PG.UOM_ID,
                                REC_PG.UOM_ALT_ID,
                                ASPARTNO,
                                ANREVISION,
                                1,
                                ASINTLPART,
                                REC_PG.INTL,
                                ASINTL,
                                ASUSERINTL,
                                
                                
                                ANUOMTYPE,     
                                LNUOMTYPE ),   
                                
                   NUM_2 =
                      F_METRIC( REC_PG.NUM_2,
                                REC_PG.UOM_ID,
                                REC_PG.UOM_ALT_ID,
                                ASPARTNO,
                                ANREVISION,
                                1,
                                ASINTLPART,
                                REC_PG.INTL,
                                ASINTL,
                                ASUSERINTL,
                                
                                
                                ANUOMTYPE,     
                                LNUOMTYPE ),   
                                
                   NUM_3 =
                      F_METRIC( REC_PG.NUM_3,
                                REC_PG.UOM_ID,
                                REC_PG.UOM_ALT_ID,
                                ASPARTNO,
                                ANREVISION,
                                1,
                                ASINTLPART,
                                REC_PG.INTL,
                                ASINTL,
                                ASUSERINTL,
                                
                                
                                ANUOMTYPE,     
                                LNUOMTYPE ),   
                                
                   NUM_4 =
                      F_METRIC( REC_PG.NUM_4,
                                REC_PG.UOM_ID,
                                REC_PG.UOM_ALT_ID,
                                ASPARTNO,
                                ANREVISION,
                                1,
                                ASINTLPART,
                                REC_PG.INTL,
                                ASINTL,
                                ASUSERINTL,
                                
                                
                                ANUOMTYPE,     
                                LNUOMTYPE ),   
                                
                   NUM_5 =
                      F_METRIC( REC_PG.NUM_5,
                                REC_PG.UOM_ID,
                                REC_PG.UOM_ALT_ID,
                                ASPARTNO,
                                ANREVISION,
                                1,
                                ASINTLPART,
                                REC_PG.INTL,
                                ASINTL,
                                ASUSERINTL,
                                
                                
                                ANUOMTYPE,     
                                LNUOMTYPE ),   
                                
                   NUM_6 =
                      F_METRIC( REC_PG.NUM_6,
                                REC_PG.UOM_ID,
                                REC_PG.UOM_ALT_ID,
                                ASPARTNO,
                                ANREVISION,
                                1,
                                ASINTLPART,
                                REC_PG.INTL,
                                ASINTL,
                                ASUSERINTL,
                                
                                
                                ANUOMTYPE,     
                                LNUOMTYPE ),   
                                
                   NUM_7 =
                      F_METRIC( REC_PG.NUM_7,
                                REC_PG.UOM_ID,
                                REC_PG.UOM_ALT_ID,
                                ASPARTNO,
                                ANREVISION,
                                1,
                                ASINTLPART,
                                REC_PG.INTL,
                                ASINTL,
                                ASUSERINTL,
                                
                                
                                ANUOMTYPE,     
                                LNUOMTYPE ),   
                                
                   NUM_8 =
                      F_METRIC( REC_PG.NUM_8,
                                REC_PG.UOM_ID,
                                REC_PG.UOM_ALT_ID,
                                ASPARTNO,
                                ANREVISION,
                                1,
                                ASINTLPART,
                                REC_PG.INTL,
                                ASINTL,
                                ASUSERINTL,
                                
                                
                                ANUOMTYPE,     
                                LNUOMTYPE ),   
                                
                   NUM_9 =
                      F_METRIC( REC_PG.NUM_9,
                                REC_PG.UOM_ID,
                                REC_PG.UOM_ALT_ID,
                                ASPARTNO,
                                ANREVISION,
                                1,
                                ASINTLPART,
                                REC_PG.INTL,
                                ASINTL,
                                ASUSERINTL,
                                
                                
                                ANUOMTYPE,     
                                LNUOMTYPE ),   
                                
                   NUM_10 =
                      F_METRIC( REC_PG.NUM_10,
                                REC_PG.UOM_ID,
                                REC_PG.UOM_ALT_ID,
                                ASPARTNO,
                                ANREVISION,
                                1,
                                ASINTLPART,
                                REC_PG.INTL,
                                ASINTL,
                                ASUSERINTL,
                                
                                
                                ANUOMTYPE,     
                                LNUOMTYPE )   
                                
             WHERE PART_NO = ASPARTNO
               AND REVISION = ANREVISION
               AND SECTION_ID = REC_PG.SECTION_ID
               AND SUB_SECTION_ID = REC_PG.SUB_SECTION_ID
               AND PROPERTY_GROUP = REC_PG.PROPERTY_GROUP
               AND PROPERTY = REC_PG.PROPERTY
               AND ATTRIBUTE = REC_PG.ATTRIBUTE;
         END IF;
      END LOOP;

      
      
      
      

      UPDATE SPECIFICATION_HEADER
         SET UOM_TYPE = ANUOMTYPE
       WHERE PART_NO = ASPARTNO
         AND REVISION = ANREVISION;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END CHANGEMETRIC;


   FUNCTION CHANGEVALUE(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE,
      ASTYPE                     IN       IAPITYPE.STRINGVAL_TYPE,
      ANSECTIONID                IN       IAPITYPE.ID_TYPE,
      ANSUBSECTIONID             IN       IAPITYPE.ID_TYPE,
      ANPROPERTYGROUPID          IN       IAPITYPE.ID_TYPE,
      ANPROPERTYID               IN       IAPITYPE.ID_TYPE,
      ANATTRIBUTEID              IN       IAPITYPE.ID_TYPE,
      ANHEADERID                 IN       IAPITYPE.ID_TYPE,
      ASPLANT                    IN       IAPITYPE.PLANT_TYPE,
      ASLINE                     IN       IAPITYPE.LINE_TYPE,
      ANCONFIGURATION            IN       IAPITYPE.CONFIGURATION_TYPE,
      ANSTAGE                    IN       IAPITYPE.STAGEID_TYPE,
      ASNEWVALUECHAR             IN       IAPITYPE.STRINGVAL_TYPE,
      AFNEWVALUENUM              IN       IAPITYPE.FLOAT_TYPE,
      ADNEWVALUEDATE             IN       IAPITYPE.DATE_TYPE )
      RETURN IAPITYPE.NUMVAL_TYPE
   IS




















      LNSQLRET                      NUMBER;
      LSFIELD                       IAPITYPE.STRINGVAL_TYPE( 20 );
      LSSQL                         IAPITYPE.STRINGVAL_TYPE( 2000 );
      LNTYPE                        IAPITYPE.SPECIFICATIONSECTIONTYPE_TYPE;
      LNREFID                       IAPITYPE.ID_TYPE;
      LNDISPLAYFORMATID             IAPITYPE.ID_TYPE;
      LNDISPLAYFORMATREV            IAPITYPE.REVISION_TYPE;
      LNFIELDID                     IAPITYPE.ID_TYPE;
      LNVALUENUMREV                 IAPITYPE.REVISION_TYPE;
      LSFIELDREV                    IAPITYPE.STRINGVAL_TYPE( 255 );
      LNNUM1                        NUMBER;
      LNNUM2                        NUMBER;
      LNNUM3                        NUMBER;
      LNNUM4                        NUMBER;
      LNNUM5                        NUMBER;
      LNNUM6                        NUMBER;
      LNNUM7                        NUMBER;
      LNNUM8                        NUMBER;
      LNNUM9                        NUMBER;
      LNNUM10                       NUMBER;
      LNLOWERLIMIT                  NUMBER;
      LNUPPERLIMIT                  NUMBER;
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'ChangeValue';
      LSNEWVALUECHAR                IAPITYPE.STRINGVAL_TYPE( 255 );
      
      LNCOUNT                       NUMBER;
      LQERRORS                      IAPITYPE.REF_TYPE;
      LQINFO                        IAPITYPE.REF_TYPE;

      LNEDITALLOWED                 NUMBER;

   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );
      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                              'type <'
                           || ASTYPE
                           || '>, new value <'
                           || ASNEWVALUECHAR
                           || AFNEWVALUENUM
                           || ADNEWVALUEDATE
                           || '>' );

      IF ASTYPE = 'S'
      THEN
         


        
        
        IF (ANPROPERTYGROUPID > 0 )
        THEN
             SELECT COUNT(*)
             INTO LNCOUNT
             FROM SPECIFICATION_PROP
             WHERE PART_NO = ASPARTNO
               AND REVISION = ANREVISION
               AND SECTION_ID = ANSECTIONID
               AND SUB_SECTION_ID = ANSUBSECTIONID
               AND PROPERTY_GROUP = ANPROPERTYGROUPID;

                IF (LNCOUNT = 0)
                THEN
                        LNRETVAL :=  IAPISPECIFICATIONPROPERTYGROUP.ADDPROPERTYGROUP( ASPARTNO,
                                                                                                           ANREVISION,
                                                                                                           ANSECTIONID,
                                                                                                           ANSUBSECTIONID,
                                                                                                           ANPROPERTYGROUPID,
                                                                                                           0,
                                                                                                           NULL,
                                                                                                           AQINFO => LQINFO,
                                                                                                           AQERRORS => LQERRORS);
                        IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
                        THEN
                           IF ( LNRETVAL = IAPICONSTANTDBERROR.DBERR_ERRORLIST )
                           THEN
                              
                              LNRETVAL := IAPIGENERAL.ERRORLISTCONTAINSERRORS( GTERRORS );

                              IF ( LNRETVAL = IAPICONSTANTDBERROR.DBERR_SUCCESS )
                              THEN
                                 RETURN( IAPICONSTANTDBERROR.DBERR_ERRORLIST );
                              END IF;
                           ELSE
                              IAPIGENERAL.LOGERROR( GSSOURCE,
                                                    LSMETHOD,
                                                    IAPIGENERAL.GETLASTERRORTEXT( ) );
                              RETURN( LNRETVAL );
                           END IF;
                        END IF;

                END IF;

             SELECT COUNT(*)
             INTO LNCOUNT
             FROM SPECIFICATION_PROP
             WHERE PART_NO = ASPARTNO
               AND REVISION = ANREVISION
               AND SECTION_ID = ANSECTIONID
               AND SUB_SECTION_ID = ANSUBSECTIONID
               AND PROPERTY_GROUP = ANPROPERTYGROUPID
               AND PROPERTY = ANPROPERTYID
               AND ATTRIBUTE = ANATTRIBUTEID;



        IF (LNCOUNT = 0)
        THEN
                LNRETVAL :=  IAPISPECIFICATIONPROPERTYGROUP.ADDPROPERTY( ASPARTNO,
                                                                                                   ANREVISION,
                                                                                                   ANSECTIONID,
                                                                                                   ANSUBSECTIONID,
                                                                                                   ANPROPERTYGROUPID,
                                                                                                   ANPROPERTYID,
                                                                                                   ANATTRIBUTEID,
                                                                                                   NULL,
                                                                                                   AQINFO => LQINFO,
                                                                                                   AQERRORS => LQERRORS);


                    IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
                    THEN
                       IF ( LNRETVAL = IAPICONSTANTDBERROR.DBERR_ERRORLIST )
                       THEN
                          
                          LNRETVAL := IAPIGENERAL.ERRORLISTCONTAINSERRORS( GTERRORS );

                          IF ( LNRETVAL = IAPICONSTANTDBERROR.DBERR_SUCCESS )
                          THEN
                             RETURN( IAPICONSTANTDBERROR.DBERR_ERRORLIST );
                          END IF;
                       ELSE
                          IAPIGENERAL.LOGERROR( GSSOURCE,
                                                LSMETHOD,
                                                IAPIGENERAL.GETLASTERRORTEXT( ) );
                          RETURN( LNRETVAL );
                       END IF;
                    END IF;

            END IF;

    ELSE
    

        
        
         SELECT COUNT(*)
         INTO LNCOUNT
         FROM SPECIFICATION_PROP
         WHERE PART_NO = ASPARTNO
           AND REVISION = ANREVISION
           AND SECTION_ID = ANSECTIONID
           AND SUB_SECTION_ID = ANSUBSECTIONID
           AND PROPERTY_GROUP = ANPROPERTYGROUPID
           AND PROPERTY = ANPROPERTYID
           AND ATTRIBUTE = ANATTRIBUTEID;

        IF (LNCOUNT = 0)
        THEN
                
                
                
                
                
                
                
                
                
                
                
                
                

               LNRETVAL :=  IAPISPECIFICATIONPROPERTYGROUP.ADDPROPERTYGROUP( ASPARTNO,
                                                                                                          ANREVISION,
                                                                                                          ANSECTIONID,
                                                                                                          ANSUBSECTIONID,
                                                                                                          ANPROPERTYID,
                                                                                                          1,
                                                                                                          NULL,
                                                                                                          AQINFO => LQINFO,
                                                                                                          AQERRORS => LQERRORS);
                



                IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
                THEN
                   IF ( LNRETVAL = IAPICONSTANTDBERROR.DBERR_ERRORLIST )
                   THEN
                      
                      LNRETVAL := IAPIGENERAL.ERRORLISTCONTAINSERRORS( GTERRORS );

                      IF ( LNRETVAL = IAPICONSTANTDBERROR.DBERR_SUCCESS )
                      THEN
                         RETURN( IAPICONSTANTDBERROR.DBERR_ERRORLIST );
                      END IF;
                   ELSE
                      IAPIGENERAL.LOGERROR( GSSOURCE,
                                            LSMETHOD,
                                            IAPIGENERAL.GETLASTERRORTEXT( ) );
                      RETURN( LNRETVAL );
                   END IF;
                END IF;

        END IF;
        

        
        END IF;


         
         BEGIN
            IAPIGENERAL.LOGINFO( GSSOURCE,
                                 LSMETHOD,
                                    'type <'
                                 || ASTYPE
                                 || '>, Does the property exist',
                                 IAPICONSTANT.INFOLEVEL_3 );

            SELECT NUM_1,
                   NUM_2,
                   NUM_3,
                   NUM_4,
                   NUM_5,
                   NUM_6,
                   NUM_7,
                   NUM_8,
                   NUM_9,
                   NUM_10,
                   F_FIND_PART_PG_LIMIT( "SPECIFICATION_PROP"."PART_NO",
                                         "SPECIFICATION_PROP"."REVISION",
                                         "SPECIFICATION_PROP"."SECTION_ID",
                                         "SPECIFICATION_PROP"."SUB_SECTION_ID",
                                         "SPECIFICATION_PROP"."PROPERTY_GROUP",
                                         "SPECIFICATION_PROP"."PROPERTY",
                                         "SPECIFICATION_PROP"."UOM_ID",
                                         "SPECIFICATION_PROP"."ASSOCIATION",
                                         1 ) F_PROP_LOWER_LIMITS,
                   F_FIND_PART_PG_LIMIT( "SPECIFICATION_PROP"."PART_NO",
                                         "SPECIFICATION_PROP"."REVISION",
                                         "SPECIFICATION_PROP"."SECTION_ID",
                                         "SPECIFICATION_PROP"."SUB_SECTION_ID",
                                         "SPECIFICATION_PROP"."PROPERTY_GROUP",
                                         "SPECIFICATION_PROP"."PROPERTY",
                                         "SPECIFICATION_PROP"."UOM_ID",
                                         "SPECIFICATION_PROP"."ASSOCIATION",
                                         2 ) F_PROP_UPPER_LIMITS
              INTO LNNUM1,
                   LNNUM2,
                   LNNUM3,
                   LNNUM4,
                   LNNUM5,
                   LNNUM6,
                   LNNUM7,
                   LNNUM8,
                   LNNUM9,
                   LNNUM10,
                   LNLOWERLIMIT,
                   LNUPPERLIMIT
              FROM SPECIFICATION_PROP
             WHERE PART_NO = ASPARTNO
               AND REVISION = ANREVISION
               AND SECTION_ID = ANSECTIONID
               AND SUB_SECTION_ID = ANSUBSECTIONID
               AND PROPERTY_GROUP = ANPROPERTYGROUPID
               AND PROPERTY = ANPROPERTYID
               AND ATTRIBUTE = ANATTRIBUTEID;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN

               LNRETVAL :=
                  IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_SPPROPERTYNOTFOUND,
                                            ASPARTNO,
                                            ANREVISION,
                                            
                                            
                                            
                                            
                                            
                                            
                                            
                                            
                                            F_SCH_DESCR(IAPIGENERAL.SESSION.SETTINGS.LANGUAGEID, ANSECTIONID, 0),
                                            F_SBH_DESCR(IAPIGENERAL.SESSION.SETTINGS.LANGUAGEID, ANSUBSECTIONID, 0),
                                            F_PGH_DESCR(IAPIGENERAL.SESSION.SETTINGS.LANGUAGEID, ANPROPERTYGROUPID, 0),
                                            F_SPH_DESCR(IAPIGENERAL.SESSION.SETTINGS.LANGUAGEID, ANPROPERTYID, 0),
                                            F_ATH_DESCR(IAPIGENERAL.SESSION.SETTINGS.LANGUAGEID, ANATTRIBUTEID, 0));
                                            
               IAPIGENERAL.LOGERROR( GSSOURCE,
                                     LSMETHOD,
                                     IAPIGENERAL.GETLASTERRORTEXT( ) );
               RETURN LNRETVAL;
         END;

         IAPIGENERAL.LOGINFO( GSSOURCE,
                              LSMETHOD,
                                 'type <'
                              || ASTYPE
                              || '>, Check for normal or single property',
                              IAPICONSTANT.INFOLEVEL_3 );

         IF ANPROPERTYGROUPID = 0
         THEN
            LNTYPE := IAPICONSTANT.SECTIONTYPE_SINGLEPROPERTY;
            LNREFID := ANPROPERTYID;
         ELSE
            LNTYPE := IAPICONSTANT.SECTIONTYPE_PROPERTYGROUP;
            LNREFID := ANPROPERTYGROUPID;
         END IF;

         IAPIGENERAL.LOGINFO( GSSOURCE,
                              LSMETHOD,
                                 'type <'
                              || ASTYPE
                              || '>, Load the display format',
                              IAPICONSTANT.INFOLEVEL_3 );

         












 

         BEGIN
            SELECT SS.DISPLAY_FORMAT,
                   SS.DISPLAY_FORMAT_REV,
                   PL.EDIT_ALLOWED
              INTO LNDISPLAYFORMATID,
                   LNDISPLAYFORMATREV,
                   LNEDITALLOWED
              FROM  SPECIFICATION_SECTION SS, PROPERTY_LAYOUT PL,SPECIFICATION_PROP SP
             WHERE SS.PART_NO = ASPARTNO
               AND SS.REVISION = ANREVISION
               AND SP.PART_NO = ASPARTNO
               AND SP.REVISION = ANREVISION
               AND SS.SECTION_ID = ANSECTIONID
               AND SS.SUB_SECTION_ID = ANSUBSECTIONID
               AND SP.SECTION_ID = ANSECTIONID
               AND SP.SUB_SECTION_ID = ANSUBSECTIONID
               AND SP.PROPERTY = ANPROPERTYID
               AND SP.ATTRIBUTE = ANATTRIBUTEID
               AND PL.HEADER_ID = ANHEADERID
               AND TYPE = LNTYPE
               AND SS.REF_ID = LNREFID
               AND SS.DISPLAY_FORMAT = PL.LAYOUT_ID
               AND SS.DISPLAY_FORMAT_REV = PL.REVISION;



         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN

               LNRETVAL :=
                  IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_NODISPLAYFRMTFOUND,
                                            ASPARTNO,
                                            ANREVISION,
                                            
                                            
                                            
                                            
                                            
                                            
                                            
                                            F_SCH_DESCR(IAPIGENERAL.SESSION.SETTINGS.LANGUAGEID, ANSECTIONID, 0),
                                            F_SBH_DESCR(IAPIGENERAL.SESSION.SETTINGS.LANGUAGEID, ANSUBSECTIONID, 0),
                                            F_PGH_DESCR(IAPIGENERAL.SESSION.SETTINGS.LANGUAGEID, ANPROPERTYGROUPID, 0),
                                            F_SPH_DESCR(IAPIGENERAL.SESSION.SETTINGS.LANGUAGEID, ANPROPERTYID, 0),
                                            F_ATH_DESCR(IAPIGENERAL.SESSION.SETTINGS.LANGUAGEID, ANATTRIBUTEID, 0));
                                            
               IAPIGENERAL.LOGERROR( GSSOURCE,
                                     LSMETHOD,
                                     IAPIGENERAL.GETLASTERRORTEXT( ) );
               RETURN LNRETVAL;
         END;


        IF LNEDITALLOWED <> 1
        THEN
           LNRETVAL := IAPIGENERAL.SETERRORTEXT(IAPICONSTANTDBERROR.DBERR_NOTEDITALLOWED,
                                                ASPARTNO,
                                                ANREVISION);
           RETURN LNRETVAL;
        END IF;


         IAPIGENERAL.LOGINFO( GSSOURCE,
                              LSMETHOD,
                                 'type <'
                              || ASTYPE
                              || '>, Get the field ID',
                              IAPICONSTANT.INFOLEVEL_3 );

         
         BEGIN
            SELECT FIELD_ID
              INTO LNFIELDID
              FROM PROPERTY_LAYOUT
             WHERE LAYOUT_ID = LNDISPLAYFORMATID
               AND REVISION = LNDISPLAYFORMATREV
               AND HEADER_ID = ANHEADERID;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN

               LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_PROPERTYDFNOTFOUND,
                                                     LNDISPLAYFORMATID,
                                                     LNDISPLAYFORMATREV );
               IAPIGENERAL.LOGERROR( GSSOURCE,
                                     LSMETHOD,
                                     IAPIGENERAL.GETLASTERRORTEXT( ) );
               RETURN LNRETVAL;
         END;

         IAPIGENERAL.LOGINFO( GSSOURCE,
                              LSMETHOD,
                                 'type <'
                              || ASTYPE
                              || '>, Get the field to be updated (char_1, num_1, boolean_2, ...) for ID <'
                              || LNFIELDID
                              || '>',
                              IAPICONSTANT.INFOLEVEL_3 );
         
         LSFIELD := GETFIELD( LNFIELDID );
         LNSQLRET := DBMS_SQL.OPEN_CURSOR;

         IF LNFIELDID < 11
         THEN
            IF ( AFNEWVALUENUM IS NULL )
            THEN

               IAPIGENERAL.LOGINFO( GSSOURCE,
                                    LSMETHOD,
                                    'Numeric value not specified, nothing to do',
                                    IAPICONSTANT.INFOLEVEL_3 );
               LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_NOTHINGTOPERFORM );
               IAPIGENERAL.LOGERROR( GSSOURCE,
                                     LSMETHOD,
                                     IAPIGENERAL.GETLASTERRORTEXT( ) );
               RETURN LNRETVAL;
            END IF;

            CASE LNFIELDID
               WHEN 1
               THEN
                  LNNUM1 := AFNEWVALUENUM;
               WHEN 2
               THEN
                  LNNUM2 := AFNEWVALUENUM;
               WHEN 3
               THEN
                  LNNUM3 := AFNEWVALUENUM;
               WHEN 4
               THEN
                  LNNUM4 := AFNEWVALUENUM;
               WHEN 5
               THEN
                  LNNUM5 := AFNEWVALUENUM;
               WHEN 6
               THEN
                  LNNUM6 := AFNEWVALUENUM;
               WHEN 7
               THEN
                  LNNUM7 := AFNEWVALUENUM;
               WHEN 8
               THEN
                  LNNUM8 := AFNEWVALUENUM;
               WHEN 9
               THEN
                  LNNUM9 := AFNEWVALUENUM;
               WHEN 10
               THEN
                  LNNUM10 := AFNEWVALUENUM;
            END CASE;

            IAPIGENERAL.LOGINFO( GSSOURCE,
                                 LSMETHOD,
                                    'CheckPropertyValidation Lower limit:'
                                 || LNLOWERLIMIT
                                 || ' , Upper limit:'
                                 || LNUPPERLIMIT,
                                 IAPICONSTANT.INFOLEVEL_3 );
            LNRETVAL :=
               CHECKPROPERTYVALIDATION( LNDISPLAYFORMATID,
                                        LNDISPLAYFORMATREV,
                                        LNLOWERLIMIT,
                                        LNUPPERLIMIT,
                                        LNNUM1,
                                        LNNUM2,
                                        LNNUM3,
                                        LNNUM4,
                                        LNNUM5,
                                        LNNUM6,
                                        LNNUM7,
                                        LNNUM8,
                                        LNNUM9,
                                        LNNUM10 );

            IF LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS
            THEN
               IAPIGENERAL.LOGINFO( GSSOURCE,
                                    LSMETHOD,
                                       'CheckPropertyValidation failed with return <'
                                    || LNRETVAL
                                    || '> for layout '
                                    || LNDISPLAYFORMATID );
               IAPIGENERAL.LOGERROR( GSSOURCE,
                                     LSMETHOD,
                                     IAPIGENERAL.GETLASTERRORTEXT( ) );
               RETURN LNRETVAL;
            END IF;

            LSSQL :=
                  'UPDATE specification_prop SET '
               || LSFIELD
               || ' = '
               || AFNEWVALUENUM
               || ' WHERE part_no = '''
               || ASPARTNO
               || ''' AND revision = '
               || ANREVISION
               || ' AND section_id = '
               || ANSECTIONID
               || ' AND sub_section_id = '
               || ANSUBSECTIONID
               || ' AND property_group = '
               || ANPROPERTYGROUPID
               || ' AND property = '
               || ANPROPERTYID
               || ' AND attribute = '
               || ANATTRIBUTEID;
         ELSIF LNFIELDID > 20
         THEN
            
            IF    LNFIELDID = 25
               OR LNFIELDID = 26
               OR LNFIELDID = 30
               OR LNFIELDID = 31
            THEN
               IF LNFIELDID = 25
               THEN
                  SELECT MAX( REVISION )
                    INTO LNVALUENUMREV
                    FROM TEST_METHOD_H
                   WHERE TEST_METHOD = AFNEWVALUENUM
                     AND MAX_REV = 1;

                  IF ( LNVALUENUMREV IS NULL )
                  THEN
                     LNRETVAL := IAPIGENERAL.SETERRORTEXT( GSSOURCE,
                                                           LSMETHOD,
                                                           IAPICONSTANTDBERROR.DBERR_TESTMETHODNOTFOUND,
                                                           AFNEWVALUENUM );
                     IAPIGENERAL.LOGERROR( GSSOURCE,
                                           LSMETHOD,
                                           IAPIGENERAL.GETLASTERRORTEXT( ) );
                     RETURN( LNRETVAL );
                  END IF;

                  LSFIELDREV := 'test_method_rev';
               ELSIF    LNFIELDID = 26
                     OR LNFIELDID = 30
                     OR LNFIELDID = 31
               THEN
                  IF AFNEWVALUENUM IS NOT NULL
                  THEN
                     SELECT MAX( REVISION )
                       INTO LNVALUENUMREV
                       FROM CHARACTERISTIC_H
                      WHERE CHARACTERISTIC_ID = AFNEWVALUENUM
                        AND MAX_REV = 1;

                     IF ( LNVALUENUMREV IS NULL )
                     THEN
                        LNRETVAL := IAPIGENERAL.SETERRORTEXT( GSSOURCE,
                                                              LSMETHOD,
                                                              IAPICONSTANTDBERROR.DBERR_CHARACTERISTICNOTFOUND,
                                                              AFNEWVALUENUM );
                        IAPIGENERAL.LOGERROR( GSSOURCE,
                                              LSMETHOD,
                                              IAPIGENERAL.GETLASTERRORTEXT( ) );
                        RETURN( LNRETVAL );   
                     END IF;
                  ELSE
                     LNVALUENUMREV := 0;
                  END IF;

                  IF LNFIELDID = 26
                  THEN
                     LSFIELDREV := 'characteristic_rev';
                  ELSIF LNFIELDID = 30
                  THEN
                     LSFIELDREV := 'ch_rev_2';
                  ELSIF LNFIELDID = 31
                  THEN
                     LSFIELDREV := 'ch_rev_3';
                  END IF;
               END IF;

               IF AFNEWVALUENUM IS NOT NULL
               THEN
                  LSSQL :=    'UPDATE specification_prop SET '
                           || LSFIELD
                           || ' = '
                           || AFNEWVALUENUM;
               ELSE
                  LSSQL :=    'UPDATE specification_prop SET '
                           || LSFIELD
                           || ' = NULL';
               END IF;

               LSSQL :=
                     LSSQL
                  || ', '
                  || LSFIELDREV
                  || ' = '
                  || LNVALUENUMREV
                  || ' WHERE part_no = '''
                  || ASPARTNO
                  || ''' AND revision = '
                  || ANREVISION
                  || ' AND section_id = '
                  || ANSECTIONID
                  || ' AND sub_section_id = '
                  || ANSUBSECTIONID
                  || ' AND property_group = '
                  || ANPROPERTYGROUPID
                  || ' AND property = '
                  || ANPROPERTYID
                  || ' AND attribute = '
                  || ANATTRIBUTEID;
            ELSE
               
               LSSQL :=
                     'UPDATE specification_prop SET '
                  || LSFIELD
                  || ' = to_date('''
                  || TO_CHAR( ADNEWVALUEDATE,
                              'dd/mm/yyyy hh24:mi:ss' )
                  || ''', ''dd/mm/yyyy hh24:mi:ss'')'
                  || ' WHERE part_no = '''
                  || ASPARTNO
                  || ''' AND revision = '
                  || ANREVISION
                  || ' AND section_id = '
                  || ANSECTIONID
                  || ' AND sub_section_id = '
                  || ANSUBSECTIONID
                  || ' AND property_group = '
                  || ANPROPERTYGROUPID
                  || ' AND property = '
                  || ANPROPERTYID
                  || ' AND attribute = '
                  || ANATTRIBUTEID;
            END IF;
         ELSE
            LSNEWVALUECHAR := IAPIGENERAL.ESCQUOTE( ASNEWVALUECHAR );
            LSSQL :=
                  'UPDATE specification_prop SET '
               || LSFIELD
               || ' = '''
               || LSNEWVALUECHAR
               || ''' WHERE part_no = '''
               || ASPARTNO
               || ''' AND revision = '
               || ANREVISION
               || ' AND section_id = '
               || ANSECTIONID
               || ' AND sub_section_id = '
               || ANSUBSECTIONID
               || ' AND property_group = '
               || ANPROPERTYGROUPID
               || ' AND property = '
               || ANPROPERTYID
               || ' AND attribute = '
               || ANATTRIBUTEID;
         END IF;

         IAPIGENERAL.LOGINFOINCHUNKS( GSSOURCE,
                                      LSMETHOD,
                                      LSSQL,
                                      IAPICONSTANT.INFOLEVEL_3 );
         DBMS_SQL.PARSE( LNSQLRET,
                         LSSQL,
                         DBMS_SQL.V7 );
         LNRETVAL := DBMS_SQL.EXECUTE( LNSQLRET );

         IF LNRETVAL < 0
         THEN
            DBMS_SQL.CLOSE_CURSOR( LNSQLRET );

            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
         END IF;

         DBMS_SQL.CLOSE_CURSOR( LNSQLRET );

         INSERT INTO SPECDATA_SERVER
                     ( PART_NO,
                       REVISION,
                       SECTION_ID,
                       SUB_SECTION_ID )
              VALUES ( ASPARTNO,
                       ANREVISION,
                       ANSECTIONID,
                       ANSUBSECTIONID );

         
         LNRETVAL := IAPISPECIFICATION.LOGCHANGES( ASPARTNO,
                                                   ANREVISION );

         IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN( LNRETVAL );
         END IF;

         RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
      ELSE

         BEGIN
            SELECT NUM_1,
                   NUM_2,
                   NUM_3,
                   NUM_4,
                   NUM_5,
                   NUM_6,
                   NUM_7,
                   NUM_8,
                   NUM_9,
                   NUM_10,
                   F_FIND_PART_PG_LIMIT( "SPECIFICATION_LINE_PROP"."PART_NO",
                                         "SPECIFICATION_LINE_PROP"."REVISION",
                                         "SPECIFICATION_LINE_PROP"."SECTION_ID",
                                         "SPECIFICATION_LINE_PROP"."SUB_SECTION_ID",
                                         "SPECIFICATION_LINE_PROP"."STAGE",
                                         "SPECIFICATION_LINE_PROP"."PROPERTY",
                                         "SPECIFICATION_LINE_PROP"."UOM_ID",
                                         "SPECIFICATION_LINE_PROP"."ASSOCIATION",
                                         1 ) F_PROP_LOWER_LIMITS,
                   F_FIND_PART_PG_LIMIT( "SPECIFICATION_LINE_PROP"."PART_NO",
                                         "SPECIFICATION_LINE_PROP"."REVISION",
                                         "SPECIFICATION_LINE_PROP"."SECTION_ID",
                                         "SPECIFICATION_LINE_PROP"."SUB_SECTION_ID",
                                         "SPECIFICATION_LINE_PROP"."STAGE",
                                         "SPECIFICATION_LINE_PROP"."PROPERTY",
                                         "SPECIFICATION_LINE_PROP"."UOM_ID",
                                         "SPECIFICATION_LINE_PROP"."ASSOCIATION",
                                         2 ) F_PROP_UPPER_LIMITS
              INTO LNNUM1,
                   LNNUM2,
                   LNNUM3,
                   LNNUM4,
                   LNNUM5,
                   LNNUM6,
                   LNNUM7,
                   LNNUM8,
                   LNNUM9,
                   LNNUM10,
                   LNLOWERLIMIT,
                   LNUPPERLIMIT
              FROM SPECIFICATION_LINE_PROP
             WHERE PART_NO = ASPARTNO
               AND REVISION = ANREVISION
               AND PLANT = ASPLANT
               AND LINE = ASLINE
               AND CONFIGURATION = ANCONFIGURATION
               AND STAGE = ANSTAGE
               AND PROPERTY = ANPROPERTYID
               AND ATTRIBUTE = ANATTRIBUTEID;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN

               LNRETVAL :=
                  IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_SPPROPERTYNOTFOUND,
                                            ASPARTNO,
                                            ANREVISION,
                                            
                                            
                                            
                                            
                                            
                                            
                                            
                                            
                                            F_SCH_DESCR(IAPIGENERAL.SESSION.SETTINGS.LANGUAGEID, ANSECTIONID, 0),
                                            F_SBH_DESCR(IAPIGENERAL.SESSION.SETTINGS.LANGUAGEID, ANSUBSECTIONID, 0),
                                            F_PGH_DESCR(IAPIGENERAL.SESSION.SETTINGS.LANGUAGEID, ANPROPERTYGROUPID, 0),
                                            F_SPH_DESCR(IAPIGENERAL.SESSION.SETTINGS.LANGUAGEID, ANPROPERTYID, 0),
                                            F_ATH_DESCR(IAPIGENERAL.SESSION.SETTINGS.LANGUAGEID, ANATTRIBUTEID, 0));
                                            
               IAPIGENERAL.LOGERROR( GSSOURCE,
                                     LSMETHOD,
                                     IAPIGENERAL.GETLASTERRORTEXT( ) );
               RETURN LNRETVAL;
         END;

         














         BEGIN
            SELECT DISPLAY_FORMAT,
                   LAYOUT.REVISION,
                   EDIT_ALLOWED
              INTO LNDISPLAYFORMATID,
                   LNDISPLAYFORMATREV,
                   LNEDITALLOWED
              FROM PROCESS_LINE_STAGE,
                   LAYOUT,
                   PROPERTY_LAYOUT,
                   SPECDATA_PROCESS
             WHERE PROCESS_LINE_STAGE.PLANT = ASPLANT
               AND PROCESS_LINE_STAGE.LINE = ASLINE
               AND PROCESS_LINE_STAGE.CONFIGURATION = ANCONFIGURATION
               AND PROCESS_LINE_STAGE.STAGE = ANSTAGE
               AND PROCESS_LINE_STAGE.DISPLAY_FORMAT = LAYOUT.LAYOUT_ID
               AND LAYOUT.STATUS = 2
               AND SPECDATA_PROCESS.PART_NO = ASPARTNO
               AND SPECDATA_PROCESS.REVISION = ANREVISION
               AND SPECDATA_PROCESS.PLANT = ASPLANT
               AND SPECDATA_PROCESS.LINE = ASLINE
               AND SPECDATA_PROCESS.CONFIGURATION = ANCONFIGURATION
               AND SPECDATA_PROCESS.STAGE = ANSTAGE
               AND SPECDATA_PROCESS.PROPERTY = ANPROPERTYID
               AND SPECDATA_PROCESS.ATTRIBUTE = ANATTRIBUTEID
               AND SPECDATA_PROCESS.HEADER_ID = ANHEADERID
               AND PROPERTY_LAYOUT.HEADER_ID = ANHEADERID
               AND PROPERTY_LAYOUT.LAYOUT_ID = PROCESS_LINE_STAGE.DISPLAY_FORMAT
               AND PROPERTY_LAYOUT.REVISION = LAYOUT.REVISION;

         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN

               LNRETVAL :=
                  IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_NODISPLAYFRMTFOUND,
                                            ASPARTNO,
                                            ANREVISION,
                                            
                                            
                                            
                                            
                                            
                                            
                                            
                                            F_SCH_DESCR(IAPIGENERAL.SESSION.SETTINGS.LANGUAGEID, ANSECTIONID, 0),
                                            F_SBH_DESCR(IAPIGENERAL.SESSION.SETTINGS.LANGUAGEID, ANSUBSECTIONID, 0),
                                            F_PGH_DESCR(IAPIGENERAL.SESSION.SETTINGS.LANGUAGEID, ANPROPERTYGROUPID, 0),
                                            F_SPH_DESCR(IAPIGENERAL.SESSION.SETTINGS.LANGUAGEID, ANPROPERTYID, 0),
                                            F_ATH_DESCR(IAPIGENERAL.SESSION.SETTINGS.LANGUAGEID, ANATTRIBUTEID, 0));
                                            
               IAPIGENERAL.LOGERROR( GSSOURCE,
                                     LSMETHOD,
                                     IAPIGENERAL.GETLASTERRORTEXT( ) );
               RETURN LNRETVAL;
         END;


        IF LNEDITALLOWED <> 1
        THEN
           LNRETVAL := IAPIGENERAL.SETERRORTEXT(IAPICONSTANTDBERROR.DBERR_NOTEDITALLOWED,
                                                ASPARTNO,
                                                ANREVISION);
           RETURN LNRETVAL;
        END IF;


         
         BEGIN
            SELECT FIELD_ID
              INTO LNFIELDID
              FROM PROPERTY_LAYOUT
             WHERE LAYOUT_ID = LNDISPLAYFORMATID
               AND REVISION = LNDISPLAYFORMATREV
               AND HEADER_ID = ANHEADERID;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN

               LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_PROPERTYDFNOTFOUND,
                                                     LNDISPLAYFORMATID,
                                                     LNDISPLAYFORMATREV );
               IAPIGENERAL.LOGERROR( GSSOURCE,
                                     LSMETHOD,
                                     IAPIGENERAL.GETLASTERRORTEXT( ) );
               RETURN LNRETVAL;
         END;

         
         LSFIELD := GETFIELD( LNFIELDID );
         LNSQLRET := DBMS_SQL.OPEN_CURSOR;

         IF LNFIELDID < 11
         THEN
            CASE LNFIELDID
               WHEN 1
               THEN
                  LNNUM1 := AFNEWVALUENUM;
               WHEN 2
               THEN
                  LNNUM2 := AFNEWVALUENUM;
               WHEN 3
               THEN
                  LNNUM3 := AFNEWVALUENUM;
               WHEN 4
               THEN
                  LNNUM4 := AFNEWVALUENUM;
               WHEN 5
               THEN
                  LNNUM5 := AFNEWVALUENUM;
               WHEN 6
               THEN
                  LNNUM6 := AFNEWVALUENUM;
               WHEN 7
               THEN
                  LNNUM7 := AFNEWVALUENUM;
               WHEN 8
               THEN
                  LNNUM8 := AFNEWVALUENUM;
               WHEN 9
               THEN
                  LNNUM9 := AFNEWVALUENUM;
               WHEN 10
               THEN
                  LNNUM10 := AFNEWVALUENUM;
            END CASE;

            IAPIGENERAL.LOGINFO( GSSOURCE,
                                 LSMETHOD,
                                    'CheckPropertyValidation Process Data. Lower limit:'
                                 || LNLOWERLIMIT
                                 || ' , Upper limit:'
                                 || LNUPPERLIMIT );
            LNRETVAL :=
               CHECKPROPERTYVALIDATION( LNDISPLAYFORMATID,
                                        LNDISPLAYFORMATREV,
                                        LNLOWERLIMIT,
                                        LNUPPERLIMIT,
                                        LNNUM1,
                                        LNNUM2,
                                        LNNUM3,
                                        LNNUM4,
                                        LNNUM5,
                                        LNNUM6,
                                        LNNUM7,
                                        LNNUM8,
                                        LNNUM9,
                                        LNNUM10 );

            IF LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS
            THEN
               IAPIGENERAL.LOGINFO( GSSOURCE,
                                    LSMETHOD,
                                       'CheckPropertyValidation failed with return <'
                                    || LNRETVAL
                                    || '> for layout '
                                    || LNDISPLAYFORMATID );
               IAPIGENERAL.LOGERROR( GSSOURCE,
                                     LSMETHOD,
                                     IAPIGENERAL.GETLASTERRORTEXT( ) );
               RETURN LNRETVAL;
            END IF;

            LSSQL :=
                  'UPDATE specification_line_prop SET '
               || LSFIELD
               || ' = '
               || AFNEWVALUENUM
               || ' WHERE part_no = '''
               || ASPARTNO
               || ''' AND revision = '
               || ANREVISION
               || ' AND plant = '''
               || ASPLANT
               || ''' AND line = '''
               || ASLINE
               || ''' AND configuration = '
               || ANCONFIGURATION
               || ' AND stage = '
               || ANSTAGE
               || ' AND property = '
               || ANPROPERTYID
               || ' AND attribute = '
               || ANATTRIBUTEID;
         ELSIF LNFIELDID > 20
         THEN
            
            IF    LNFIELDID = 25
               OR LNFIELDID = 26
            THEN
               LSSQL :=
                     'UPDATE specification_line_prop SET '
                  || LSFIELD
                  || ' = '
                  || AFNEWVALUENUM
                  || ' WHERE part_no = '''
                  || ASPARTNO
                  || ''' AND revision = '
                  || ANREVISION
                  || ' AND plant = '''
                  || ASPLANT
                  || ''' AND line = '''
                  || ASLINE
                  || ''' AND configuration = '
                  || ANCONFIGURATION
                  || ' AND stage = '
                  || ANSTAGE
                  || ' AND property = '
                  || ANPROPERTYID
                  || ' AND attribute = '
                  || ANATTRIBUTEID;
            ELSE
               
               LSSQL :=
                     'UPDATE specification_line_prop SET '
                  || LSFIELD
                  || ' = TO_DATE('''
                  || ADNEWVALUEDATE
                  || ''') '
                  || ' WHERE part_no = '''
                  || ASPARTNO
                  || ''' AND revision = '
                  || ANREVISION
                  || ' AND plant = '''
                  || ASPLANT
                  || ''' AND line = '''
                  || ASLINE
                  || ''' AND configuration = '
                  || ANCONFIGURATION
                  || ' AND stage = '
                  || ANSTAGE
                  || ' AND property = '
                  || ANPROPERTYID
                  || ' AND attribute = '
                  || ANATTRIBUTEID;
            END IF;
         ELSE
            LSSQL :=
                  'UPDATE specification_line_prop SET '
               || LSFIELD
               || ' = '''
               || ASNEWVALUECHAR
               || ''' WHERE part_no = '''
               || ASPARTNO
               || ''' AND revision = '
               || ANREVISION
               || ' AND plant = '''
               || ASPLANT
               || ''' AND line = '''
               || ASLINE
               || ''' AND configuration = '
               || ANCONFIGURATION
               || ' AND stage = '
               || ANSTAGE
               || ' AND property = '
               || ANPROPERTYID
               || ' AND attribute = '
               || ANATTRIBUTEID;
         END IF;

         DBMS_SQL.PARSE( LNSQLRET,
                         LSSQL,
                         DBMS_SQL.V7 );
         LNRETVAL := DBMS_SQL.EXECUTE( LNSQLRET );

         IF LNRETVAL < 0
         THEN
            DBMS_SQL.CLOSE_CURSOR( LNSQLRET );

            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
         END IF;

         DBMS_SQL.CLOSE_CURSOR( LNSQLRET );

         INSERT INTO SPECDATA_SERVER
                     ( PART_NO,
                       REVISION )
              VALUES ( ASPARTNO,
                       ANREVISION );

         
         LNRETVAL := IAPISPECIFICATION.LOGCHANGES( ASPARTNO,
                                                   ANREVISION );

         IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN( LNRETVAL );
         END IF;

         RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END CHANGEVALUE;


   FUNCTION PHASEINMANUAL(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE,
      ANWORKFLOWGROUP            IN       IAPITYPE.ID_TYPE,
      ANSTATUS                   IN       IAPITYPE.STATUSTYPE_TYPE,
      ANELECSIGNSEQ              IN       IAPITYPE.SEQUENCE_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS














      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'PhaseInManual';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LNNEXTSTATUS                  IAPITYPE.STATUSID_TYPE;
      LNNEXTSTATUS_TYPE             IAPITYPE.STATUSTYPE_TYPE;
      LSPHASEINSTATUS               IAPITYPE.PHASEINSTATUS_TYPE;
      LNCHECKSTATUS                 PLS_INTEGER;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      
      SELECT COUNT( * )
        INTO LNCHECKSTATUS
        FROM STATUS A,
             SPECIFICATION_HEADER B
       WHERE A.STATUS = B.STATUS
         AND B.PART_NO = ASPARTNO
         AND B.REVISION = ANREVISION
         AND A.STATUS_TYPE = IAPICONSTANT.STATUSTYPE_CURRENT
         AND A.PHASE_IN_STATUS = 'Y';

      
      IF LNCHECKSTATUS <> 1
      THEN
         RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
      END IF;

      
      LNRETVAL :=
         IAPISPECIFICATION.GETNEXTSTATUSTYPE( ASPARTNO,
                                              ANREVISION,
                                              ANWORKFLOWGROUP,
                                              IAPICONSTANT.STATUSTYPE_CURRENT,
                                              ANSTATUS,
                                              'N',
                                              LNNEXTSTATUS,
                                              LNNEXTSTATUS_TYPE,
                                              LSPHASEINSTATUS );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN( LNRETVAL );
      END IF;

      LNRETVAL := IAPISPECIFICATION.CURRENTPHASEINTOCURRENT( ASPARTNO,
                                                             LNNEXTSTATUS_TYPE,
                                                             LSPHASEINSTATUS,
                                                             LNNEXTSTATUS,
                                                             ANELECSIGNSEQ );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN( LNRETVAL );
      END IF;

      LNRETVAL := IAPISPECIFICATION.UPDATESPECIFICATIONHEADER( LNNEXTSTATUS,
                                                               ASPARTNO,
                                                               ANREVISION,
                                                               IAPICONSTANT.STATUSTYPE_CURRENT,
                                                               ANELECSIGNSEQ );
      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN( LNRETVAL );
      END IF;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END PHASEINMANUAL;


   FUNCTION COPYBASENAME(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE,
      ASFROMPARTNO               IN       IAPITYPE.PARTNO_TYPE,
      ANFROMREVISION             IN       IAPITYPE.REVISION_TYPE,
      ASFRAMEID                  IN       IAPITYPE.FRAMENO_TYPE,
      ANFRAMEREVISION            IN       IAPITYPE.FRAMEREVISION_TYPE,
      ANFRAMEOWNER               IN       IAPITYPE.OWNER_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS






      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'CopyBaseName';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LNCOUNT                       IAPITYPE.NUMVAL_TYPE;
      LNSECTIONID                   IAPITYPE.ID_TYPE;
      LNSECTIONREVISIONID           IAPITYPE.REVISION_TYPE;
      LNSUBSECTIONID                IAPITYPE.ID_TYPE;
      LNSUBSECTIONREVISIONID        IAPITYPE.REVISION_TYPE;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      
      SELECT COUNT( * )
        INTO LNCOUNT
        FROM FRAME_SECTION
       WHERE FRAME_NO = ASFRAMEID
         AND REVISION = ANFRAMEREVISION
         AND OWNER = ANFRAMEOWNER
         AND TYPE = IAPICONSTANT.SECTIONTYPE_BASENAME;

      IF LNCOUNT > 0
      THEN
         SELECT SECTION_ID,
                NVL( F_GET_SUB_REV( SECTION_ID,
                                    SECTION_REV,
                                    NULL,
                                    NULL,
                                    'SC' ),
                     0 ),
                SUB_SECTION_ID,
                NVL( F_GET_SUB_REV( SUB_SECTION_ID,
                                    SUB_SECTION_REV,
                                    NULL,
                                    NULL,
                                    'SB' ),
                     0 )
           INTO LNSECTIONID,
                LNSECTIONREVISIONID,
                LNSUBSECTIONID,
                LNSUBSECTIONREVISIONID
           FROM FRAME_SECTION
          WHERE FRAME_NO = ASFRAMEID
            AND REVISION = ANFRAMEREVISION
            AND TYPE = IAPICONSTANT.SECTIONTYPE_BASENAME;

         INSERT INTO ITSHBN
                     ( PART_NO,
                       REVISION,
                       SECTION_ID,
                       SECTION_REV,
                       SUB_SECTION_ID,
                       SUB_SECTION_REV,
                       BASE_NAME_ID,
                       BASE_NAME_REV )
            SELECT ASPARTNO,
                   ANREVISION,
                   LNSECTIONID,
                   LNSECTIONREVISIONID,
                   LNSUBSECTIONID,
                   LNSUBSECTIONREVISIONID,
                   BASE_NAME_ID,
                   BASE_NAME_REV
              FROM ITSHBN
             WHERE PART_NO = ASFROMPARTNO
               AND REVISION = ANFROMREVISION;
      END IF;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END COPYBASENAME;


   FUNCTION COPYSPEC(
      ASFROMPARTNO               IN       IAPITYPE.PARTNO_TYPE,
      ANFROMREVISION             IN       IAPITYPE.REVISION_TYPE,
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ASFRAMEID                  IN       IAPITYPE.FRAMENO_TYPE,
      ANFRAMEREVISION            IN       IAPITYPE.FRAMEREVISION_TYPE,
      ANFRAMEOWNER               IN       IAPITYPE.OWNER_TYPE,
      ANWORKFLOWGROUPID          IN       IAPITYPE.ID_TYPE,
      ANACCESSGROUPID            IN       IAPITYPE.ID_TYPE,
      ANSPECTYPEID               IN       IAPITYPE.ID_TYPE,
      ADPLANNEDEFFECTIVEDATE     IN       IAPITYPE.DATE_TYPE,
      ANNEWREVISION              OUT      IAPITYPE.REVISION_TYPE,
      ASINTERNATIONAL            IN       IAPITYPE.INTL_TYPE,
      ASINTERNATIONALPARTNO      IN       IAPITYPE.PARTNO_TYPE,
      ANINTERNATIONALREVISION    IN       IAPITYPE.REVISION_TYPE,
      ANINTERNATIONALLINKED      IN       IAPITYPE.BOOLEAN_TYPE,
      ANMULTILANGUAGE            IN       IAPITYPE.BOOLEAN_TYPE,
      ANUOMTYPE                  IN       IAPITYPE.BOOLEAN_TYPE,
      ANMASKID                   IN       IAPITYPE.ID_TYPE,
      ASDESCRIPTION              IN       IAPITYPE.DESCRIPTION_TYPE,
      AQERRORS                   IN OUT   IAPITYPE.REF_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS

























      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'CopySpec';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LQERRORS                      IAPITYPE.REF_TYPE;
      LNCHECK                       NUMBER := 0;
      LNRETURN                      NUMBER := 0;
      LNREASONID                    IAPITYPE.NUMVAL_TYPE := NULL;
      LNINSERTIND                   NUMBER := 0;
      LNSQLERROR                    NUMBER := 0;
      LSBOTHNULL                    CHAR := 'N';
      LDTODAY                       IAPITYPE.DATE_TYPE := SYSDATE;
      LNINITIALSTATUS               IAPITYPE.STATUSID_TYPE;
      LSPARTNO                      IAPITYPE.PARTNO_TYPE;
      LSPARTNO2                     IAPITYPE.PARTNO_TYPE;
      LNWORKFLOWID                  IAPITYPE.WORKFLOWID_TYPE;
      LNREVISION                    IAPITYPE.REVISION_TYPE;
      LSFRAMENO                     IAPITYPE.FRAMENO_TYPE;
      LNCLASS3                      IAPITYPE.ID_TYPE;
      LDPLANNEDEFFECTIVEDATE        IAPITYPE.DATE_TYPE;
      LSSTATUSTYPE                  IAPITYPE.STATUSTYPE_TYPE;
      LDSTATUSDATETIME              IAPITYPE.DATE_TYPE := SYSDATE;
      LSFROMINTL                    IAPITYPE.INTL_TYPE;
      LSPARTSOURCE                  IAPITYPE.PARTSOURCE_TYPE;
      LNMULTILANG                   PLS_INTEGER;
      LNCOUNTER                     PLS_INTEGER := 0;
      LSPREVTYPE                    IAPITYPE.CLASS3PARTTYPE_TYPE;
      LNNEXTTYPE                    IAPITYPE.CLASS3PARTTYPE_TYPE;
      LNINGREV                      NUMBER;
      LNPARTTYPE                    IAPITYPE.PARTTYPE_TYPE;
      LNLASTREVISION                IAPITYPE.REVISION_TYPE;
      LSFROMSOURCE                  IAPITYPE.PARTSOURCE_TYPE;
      LNOLDACCESSGROUP              IAPITYPE.ID_TYPE;
      LDOLDPED                      IAPITYPE.DATE_TYPE;
      LNVALID                       IAPITYPE.ID_TYPE;
      LSOLDFRAMENO                  IAPITYPE.FRAMENO_TYPE;



      LNOLDFRAMEREV                 IAPITYPE.FRAMEREVISION_TYPE;
      LNOLDFRAMEOWNER               IAPITYPE.OWNER_TYPE;
      LNOLDUOMTYPE                  IAPITYPE.NUMVAL_TYPE;
      LSALLOWSTAGE                  IAPITYPE.PARAMETERDATA_TYPE;
      LNCHECKACCESS                 NUMBER;
      LSMULTIINDEV                  IAPITYPE.PARAMETERDATA_TYPE;
      LSITEMPART                    IAPITYPE.PARTNO_TYPE;
      LNITEMREV                     IAPITYPE.REVISION_TYPE;
      LNCONVFCT                     NUMBER;
      LNCOUNT                       PLS_INTEGER;
      LFCONVFACTOR                  FLOAT := 1;
      LNLOCALISED                   PLS_INTEGER := 0;
      LSPREFIX                      IAPITYPE.PREFIXTYPE_TYPE;
      LNGLOBALOWNER                 IAPITYPE.OWNER_TYPE;
      LSPREFIXTYPE                  IAPITYPE.PREFIXTYPE_TYPE;
      LNALLOWVAL                    PLS_INTEGER := 0;
      LNVIEW                        PLS_INTEGER := 0;
      LSDESCRIPTION                 IAPITYPE.DESCRIPTION_TYPE;
      LSFORMULATEDITEMREVUID        IAPITYPE.TCUID_TYPE;
      LSFORMULATEDITEMID            IAPITYPE.TCUID_TYPE DEFAULT NULL;
      LSFORMULATEDITEMREV           IAPITYPE.TCUID_TYPE DEFAULT NULL;
      INT_PART_NOT_CURRENT          EXCEPTION;
      DATE_OUT_OF_RANGE             EXCEPTION;
      PART_IS_NULL                  EXCEPTION;
      FRAME_IS_NULL                 EXCEPTION;
      WORKFLOW_IS_NULL              EXCEPTION;
      ACCESS_IS_NULL                EXCEPTION;
      DATE_IS_NULL                  EXCEPTION;
      REVISION_IS_NULL              EXCEPTION;
      NOT_DEVELOPMENT               EXCEPTION;
      NOT_REJECT                    EXCEPTION;
      NOT_SUBMIT                    EXCEPTION;
      INTEGRITY_VIOLATION           EXCEPTION;
      DATE_TOO_EARLY                EXCEPTION;
      DATE_TOO_LATE                 EXCEPTION;
      SPECS_NOT_ORDERED             EXCEPTION;
      PIT_CAUSED_ERROR              EXCEPTION;
      PED_VALIDATE_ERROR            EXCEPTION;
      CLASSIFY_ERROR                EXCEPTION;
      NO_EDIT_ACCESS                EXCEPTION;
      
      PED_INVALIDDATE_ERROR         EXCEPTION;
      LBTEMPMETRIC                  BOOLEAN;
      LSALLOWDESCRCHANGE            IAPITYPE.PARAMETERDATA_TYPE;
      PRAGMA EXCEPTION_INIT( INTEGRITY_VIOLATION, -2291 );
      INVALID_MONTH                 EXCEPTION;
      PRAGMA EXCEPTION_INIT( INVALID_MONTH, -01843 );
      INVALID_DAY                   EXCEPTION;
      PRAGMA EXCEPTION_INIT( INVALID_DAY, -1847 );
      MANDATORY_FIELD               EXCEPTION;
      PRAGMA EXCEPTION_INIT( MANDATORY_FIELD, -1400 );

      CURSOR C1
      IS
         SELECT A.STATUS_TYPE
           FROM STATUS A,
                SPECIFICATION_HEADER B
          WHERE A.STATUS = B.STATUS
            AND B.PART_NO = ASPARTNO;

      
      
      
      CURSOR C_CHECK_DEV
      IS
         SELECT WF.NEXT_STATUS,
                A.STATUS_TYPE,
                WF.EXPORT_ERP
           FROM STATUS A,
                SPECIFICATION_HEADER SH,
                WORK_FLOW WF,
                WORKFLOW_GROUP WFG
          WHERE A.STATUS = SH.STATUS
            AND SH.PART_NO = ASPARTNO
            AND SH.WORKFLOW_GROUP_ID = WFG.WORKFLOW_GROUP_ID
            AND WFG.WORK_FLOW_ID = WF.WORK_FLOW_ID
            AND WF.STATUS = SH.STATUS;

      CURSOR CUR_TEXT_ML
      IS
         SELECT *
           FROM SPECIFICATION_TEXT A
          WHERE PART_NO = ASFROMPARTNO
            AND REVISION = ANFROMREVISION;

      CURSOR CUR_TEXT_SL
      IS
         SELECT *
           FROM SPECIFICATION_TEXT A
          WHERE PART_NO = ASFROMPARTNO
            AND REVISION = ANFROMREVISION
            AND LANG_ID = 1;

      CURSOR C5
      IS
         SELECT *
           FROM SPECIFICATION_LINE_TEXT A
          WHERE PART_NO = ASFROMPARTNO
            AND REVISION = ANFROMREVISION;

      CURSOR CUR_NOTE
      IS
         SELECT TEXT
           FROM ITPRNOTE A
          WHERE PART_NO = ASFROMPARTNO;

      CURSOR IS_PLANT
      IS
         SELECT ASPARTNO,
                PLANT.PLANT
           FROM PART_PLANT,
                PLANT
          WHERE PART_NO = ASFROMPARTNO
            AND PART_PLANT.PLANT = PLANT.PLANT
            AND PLANT.PLANT_SOURCE = 'I-S'
         MINUS
         SELECT ASPARTNO,
                PLANT.PLANT
           FROM PART_PLANT,
                PLANT
          WHERE PART_NO = ASPARTNO
            AND PART_PLANT.PLANT = PLANT.PLANT
            AND PLANT.PLANT_SOURCE = 'I-S';

      CURSOR CUR_PLANT
      IS
         SELECT ASPARTNO,
                PLANT
           FROM PART_PLANT
          WHERE PART_NO = ASFROMPARTNO
         MINUS
         SELECT ASPARTNO,
                PLANT
           FROM PART_PLANT
          WHERE PART_NO = ASPARTNO;

      
      
      
      
      
      
      
      
      
      
      
      CURSOR CUR_ING
      IS
         SELECT ASPARTNO,
                LNREVISION,
                SECTION_ID,
                SUB_SECTION_ID,
                INGREDIENT,
                INGREDIENT_REV,
                QUANTITY,
                ING_LEVEL,
                ING_COMMENT,
                INTL,
                SEQ_NO,
                ACTIV_IND,
                PID,
                HIER_LEVEL,
                RECFAC,
                ING_SYNONYM,
                ING_SYNONYM_REV,
                INGDECLARE
           FROM SPECIFICATION_ING
          WHERE PART_NO = ASFROMPARTNO
            AND REVISION = ANFROMREVISION
         
            AND (SECTION_ID, SUB_SECTION_ID) IN
              (SELECT SECTION_ID, SUB_SECTION_ID
                FROM SPECIFICATION_SECTION
                WHERE PART_NO = ASPARTNO
                AND REVISION = LNREVISION);
        


      CURSOR CUR_ING_LANG
      IS
         SELECT ASPARTNO,
                LNREVISION,
                SECTION_ID,
                SUB_SECTION_ID,
                LANG_ID,
                PID,
                HIER_LEVEL,
                INGREDIENT,
                ING_LEVEL,
                ING_COMMENT,
                SEQ_NO
           FROM SPECIFICATION_ING_LANG
          WHERE PART_NO = ASFROMPARTNO
            AND REVISION = ANFROMREVISION
         
            AND (SECTION_ID, SUB_SECTION_ID) IN
              (SELECT SECTION_ID, SUB_SECTION_ID
                FROM SPECIFICATION_SECTION
                WHERE PART_NO = ASPARTNO
                AND REVISION = LNREVISION);
        

      
      CURSOR CUR_ING_ALLRG
      IS
         SELECT ASPARTNO,
                LNREVISION,
                SECTION_ID,
                SUB_SECTION_ID,
                INGREDIENT,
                ALLERGEN
         FROM ITSPECINGALLERGEN
         WHERE PART_NO = ASFROMPARTNO
            AND REVISION = ANFROMREVISION
            AND (SECTION_ID, SUB_SECTION_ID) IN
              (SELECT SECTION_ID, SUB_SECTION_ID
                FROM SPECIFICATION_SECTION
                WHERE PART_NO = ASPARTNO
                  AND REVISION = LNREVISION);
      

      
      CURSOR CUR_ING_DETAIL
      IS
         SELECT ASPARTNO,
                LNREVISION,
                SECTION_ID,
                SUB_SECTION_ID,
                INGREDIENT,
                INGREDIENT_SEQ_NO,
                INGDETAIL_CHARACTERISTIC,
                INGDETAIL_TYPE,
                MANDATORY 
         FROM ITSPECINGDETAIL
         WHERE PART_NO = ASFROMPARTNO
            AND REVISION = ANFROMREVISION
            AND (SECTION_ID, SUB_SECTION_ID) IN
              (SELECT SECTION_ID, SUB_SECTION_ID
                FROM SPECIFICATION_SECTION
                WHERE PART_NO = ASPARTNO
                  AND REVISION = LNREVISION);
      
      CURSOR CUR_PG(
         ANREVISION                 IN       IAPITYPE.REVISION_TYPE )
      IS
         SELECT *
           FROM SPECIFICATION_PROP
          WHERE PART_NO = ASPARTNO
            AND REVISION = ANREVISION;

      CURSOR CUR_SPEC_LINE
      IS
         SELECT PLANT,
                LINE,
                CONFIGURATION,
                PROCESS_LINE_REV,
                ITEM_PART_NO,
                ITEM_REVISION,
                SEQUENCE
           FROM SPECIFICATION_LINE A
          WHERE PART_NO = ASFROMPARTNO
            AND REVISION = ANFROMREVISION;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      IF IAPIGENERAL.SESSION.APPLICATIONUSER.USERID IS NULL
      THEN
         LNRETVAL := IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                         LSMETHOD,
                                                         IAPICONSTANTDBERROR.DBERR_NOINITSESSION );
         RETURN IAPICONSTANTDBERROR.DBERR_NOINITSESSION;
      END IF;

      LNVIEW := ANMASKID;

      






      IF ANINTERNATIONALLINKED = 1
      THEN
         IF ASINTERNATIONALPARTNO IS NOT NULL
         THEN
            SELECT COUNT( * )
              INTO LNCHECK
              FROM SPECIFICATION_HEADER H,
                   STATUS S
             WHERE H.PART_NO = ASINTERNATIONALPARTNO
               AND H.STATUS = S.STATUS
               AND S.STATUS_TYPE = IAPICONSTANT.STATUSTYPE_CURRENT;

            IF LNCHECK = 0
            THEN
               RAISE INT_PART_NOT_CURRENT;
            END IF;
         END IF;
      END IF;

      IF ASPARTNO IS NULL
      THEN
         RAISE PART_IS_NULL;
      ELSIF ASFRAMEID IS NULL
      THEN
         RAISE FRAME_IS_NULL;
      ELSIF ANWORKFLOWGROUPID IS NULL
      THEN
         RAISE WORKFLOW_IS_NULL;
      ELSIF ANACCESSGROUPID IS NULL
      THEN
         RAISE ACCESS_IS_NULL;
      ELSIF ADPLANNEDEFFECTIVEDATE IS NULL
      THEN
         RAISE DATE_IS_NULL;
      END IF;

      
      LNRETVAL := IAPIPART.EXISTID( ASPARTNO );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN LNRETVAL;
      END IF;

      
      LNRETVAL := IAPIFRAME.EXISTID( ASFRAMEID,
                                     ANFRAMEREVISION,
                                     ANFRAMEOWNER );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN LNRETVAL;
      END IF;

      IF ADPLANNEDEFFECTIVEDATE <= LDTODAY
      THEN
         RAISE DATE_OUT_OF_RANGE;
      END IF;

      


      
      LSMULTIINDEV := GETCONFIGURATIONSETTING( 'multi_in_dev' );

      FOR L_CHECK IN C_CHECK_DEV
      LOOP
         IF LSMULTIINDEV = 0
         THEN
            IF L_CHECK.STATUS_TYPE = IAPICONSTANT.STATUSTYPE_DEVELOPMENT
            THEN
               RAISE NOT_DEVELOPMENT;
            ELSIF L_CHECK.STATUS_TYPE = IAPICONSTANT.STATUSTYPE_REJECT
            THEN
               RAISE NOT_REJECT;
            ELSIF L_CHECK.STATUS_TYPE = IAPICONSTANT.STATUSTYPE_SUBMIT
            THEN
               RAISE NOT_SUBMIT;
            END IF;
         ELSE
            
            IF     L_CHECK.STATUS_TYPE = IAPICONSTANT.STATUSTYPE_DEVELOPMENT
               AND L_CHECK.EXPORT_ERP = '0'
            THEN
               
               RAISE NOT_DEVELOPMENT;
            ELSIF     L_CHECK.STATUS_TYPE = IAPICONSTANT.STATUSTYPE_REJECT
                  AND L_CHECK.EXPORT_ERP = '0'
            THEN
               RAISE NOT_REJECT;
            ELSIF     L_CHECK.STATUS_TYPE = IAPICONSTANT.STATUSTYPE_SUBMIT
                  AND L_CHECK.EXPORT_ERP = '0'
            THEN
               RAISE NOT_SUBMIT;
            END IF;
         END IF;
      END LOOP;

      



      IF    (     ASFROMPARTNO IS NOT NULL
              AND ANFROMREVISION IS NULL )
         OR (     ASFROMPARTNO IS NULL
              AND ANFROMREVISION IS NOT NULL )
      THEN
         LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_INVALIDPARTREVCOMP,
                                               ASFROMPARTNO,
                                               ANFROMREVISION );
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN IAPICONSTANTDBERROR.DBERR_INVALIDPARTREVCOMP;
      ELSIF     ASFROMPARTNO IS NULL
            AND ANFROMREVISION IS NULL
      THEN
         LSBOTHNULL := 'Y';
      END IF;

      IF LSBOTHNULL = 'N'
      THEN
         
         LNRETVAL := EXISTID( ASFROMPARTNO,
                              ANFROMREVISION );

         IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN LNRETVAL;
         END IF;
      END IF;

      



      BEGIN
         SELECT DISTINCT PART_NO
                    INTO LSPARTNO2
                    FROM SPECIFICATION_HEADER
                   WHERE PART_NO = ASPARTNO;

         SELECT   MAX( NVL( REVISION,
                            0 ) )
                + 1
           INTO LNREVISION
           FROM SPECIFICATION_HEADER
          WHERE PART_NO = ASPARTNO;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            LNREVISION := 1;
      END;

      


      IF     LSBOTHNULL = 'Y'
         AND LNREVISION IS NULL
      THEN
         LNREVISION := 1;
      END IF;

      
      ANNEWREVISION := LNREVISION;
      




      LNRETURN := IAPISPECIFICATION.VALIDATEPED( ASPARTNO,
                                                 LNREVISION,
                                                 ADPLANNEDEFFECTIVEDATE,
                                                 0 );

      IF LNRETURN = IAPICONSTANTDBERROR.DBERR_DATEMUSTBEGTTHANPREVREV
      THEN
         RAISE DATE_TOO_EARLY;
      ELSIF LNRETURN = IAPICONSTANTDBERROR.DBERR_DATEMUSTBELTTHANNEXTREV
      THEN
         RAISE DATE_TOO_LATE;
      ELSIF LNRETURN = IAPICONSTANTDBERROR.DBERR_INVALIDPRESPECSEQUENCE
      THEN
         RAISE SPECS_NOT_ORDERED;
      ELSIF LNRETURN = IAPICONSTANTDBERROR.DBERR_PEDDATEOUTOFRANGE
      THEN
         RAISE PIT_CAUSED_ERROR;
      ELSIF LNRETURN = IAPICONSTANTDBERROR.DBERR_CANNOTCHANGEPEDDATE
      THEN
         RAISE PED_VALIDATE_ERROR;
      
      ELSIF LNRETURN = IAPICONSTANTDBERROR.DBERR_INVALIDPEDDATE
      THEN
         RAISE PED_INVALIDDATE_ERROR;
      
      END IF;

      IF ANMULTILANGUAGE IS NULL
      THEN
         LNMULTILANG := 0;
      ELSE
         LNMULTILANG := ANMULTILANGUAGE;
      END IF;

      


      BEGIN
         SELECT INITIAL_STATUS
           INTO LNINITIALSTATUS
           FROM WORK_FLOW_GROUP W,
                WORKFLOW_GROUP G
          WHERE G.WORKFLOW_GROUP_ID = ANWORKFLOWGROUPID
            AND W.WORK_FLOW_ID = G.WORK_FLOW_ID;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL );
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN LNRETVAL;
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
      END;

      




      IF ASFROMPARTNO = ASPARTNO
      THEN
         SELECT ACCESS_GROUP
           INTO LNOLDACCESSGROUP
           FROM SPECIFICATION_HEADER
          WHERE PART_NO = ASFROMPARTNO
            AND REVISION = ANFROMREVISION;

         
         SELECT COUNT( * )
           INTO LNCHECKACCESS
           FROM USER_ACCESS_GROUP
          WHERE ACCESS_GROUP = LNOLDACCESSGROUP
            AND USER_GROUP_ID IN( SELECT USER_GROUP_ID
                                   FROM USER_GROUP_LIST
                                  WHERE USER_ID = IAPIGENERAL.SESSION.APPLICATIONUSER.USERID )
            AND UPDATE_ALLOWED = 'Y';

         
         IF LNCHECKACCESS = 0
         THEN
            RAISE NO_EDIT_ACCESS;
         END IF;
      ELSE
         
         BEGIN
            SELECT ACCESS_GROUP
              INTO LNOLDACCESSGROUP
              FROM SPECIFICATION_HEADER
             WHERE PART_NO = ASPARTNO
               AND REVISION =   LNREVISION
                              - 1;

            SELECT COUNT( * )
              INTO LNCHECKACCESS
              FROM USER_ACCESS_GROUP
             WHERE ACCESS_GROUP = LNOLDACCESSGROUP
               AND USER_GROUP_ID IN( SELECT USER_GROUP_ID
                                      FROM USER_GROUP_LIST
                                     WHERE USER_ID = IAPIGENERAL.SESSION.APPLICATIONUSER.USERID )
               AND UPDATE_ALLOWED = 'Y';
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               
               LNCHECKACCESS := 1;
         END;

         IF LNCHECKACCESS = 0
         THEN
            RAISE NO_EDIT_ACCESS;
         END IF;
      END IF;

      



      IF LSBOTHNULL = 'Y'
      THEN
         






         
         

         LNRETVAL :=
            CREATESPEC( ASPARTNO,
                        ASPARTNO,
                        LNREVISION,
                        ASDESCRIPTION,
                        IAPIGENERAL.SESSION.APPLICATIONUSER.USERID,
                        ADPLANNEDEFFECTIVEDATE,
                        ASFRAMEID,
                        ANFRAMEREVISION,
                        ANFRAMEOWNER,
                        ANSPECTYPEID,
                        ANWORKFLOWGROUPID,
                        ANACCESSGROUPID,
                        ASINTERNATIONAL,
                        LNMULTILANG,
                        ANUOMTYPE,
                        LNVIEW,
                        LQERRORS );

         
         


         IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN LNRETVAL;
         END IF;
      ELSE
         LNINSERTIND := 1;

         



         SELECT INTL
           INTO LSFROMINTL
           FROM SPECIFICATION_HEADER
          WHERE PART_NO = ASFROMPARTNO
            AND REVISION = ANFROMREVISION;

         
         LNPARTTYPE := NULL;

         BEGIN
            SELECT PART_TYPE
              INTO LNPARTTYPE
              FROM PART
             WHERE PART_NO = ASPARTNO;
         EXCEPTION
            WHEN OTHERS
            THEN
               LNPARTTYPE := NULL;
         END;

         IF LNPARTTYPE IS NULL
         THEN
            UPDATE PART
               SET PART_TYPE = ANSPECTYPEID
             WHERE PART_NO = ASPARTNO;
         END IF;

         
         
         LSPARTSOURCE := F_PART_SOURCE( ASPARTNO );

         IF ASDESCRIPTION IS NULL
         THEN
            LSDESCRIPTION := F_PART_DESCR( 0,
                                           ASPARTNO );
         ELSE
            LSDESCRIPTION := ASDESCRIPTION;
            LSALLOWDESCRCHANGE := GETCONFIGURATIONSETTING( 'allow_descr_change' );

            IF    LSPARTSOURCE = IAPICONSTANT.PARTSOURCE_INTERNAL
               OR (     LSPARTSOURCE <> IAPICONSTANT.PARTSOURCE_INTERNAL
                    AND LSALLOWDESCRCHANGE = '1' )
            THEN
               UPDATE PART
                  SET DESCRIPTION = ASDESCRIPTION
                WHERE PART_NO = ASPARTNO;
            END IF;
         END IF;

         INSERT INTO SPECIFICATION_HEADER
                     ( PART_NO,
                       REVISION,
                       STATUS,
                       DESCRIPTION,
                       FRAME_ID,
                       FRAME_REV,
                       FRAME_OWNER,
                       WORKFLOW_GROUP_ID,
                       ACCESS_GROUP,
                       CLASS3_ID,
                       PLANNED_EFFECTIVE_DATE,
                       STATUS_CHANGE_DATE,
                       LAST_MODIFIED_BY,
                       LAST_MODIFIED_ON,
                       CREATED_BY,
                       CREATED_ON,
                       OWNER,
                       INTL,
                       INT_PART_NO,
                       INT_PART_REV,
                       MULTILANG,
                       UOM_TYPE,
                       MASK_ID )
              VALUES ( ASPARTNO,
                       LNREVISION,
                       LNINITIALSTATUS,
                       LSDESCRIPTION,
                       ASFRAMEID,
                       ANFRAMEREVISION,
                       ANFRAMEOWNER,
                       ANWORKFLOWGROUPID,
                       ANACCESSGROUPID,
                       ANSPECTYPEID,
                       ADPLANNEDEFFECTIVEDATE,
                       SYSDATE,
                       IAPIGENERAL.SESSION.APPLICATIONUSER.USERID,
                       SYSDATE,
                       IAPIGENERAL.SESSION.APPLICATIONUSER.USERID,
                       SYSDATE,
                       IAPIGENERAL.SESSION.DATABASE.OWNER,
                       ASINTERNATIONAL,
                       DECODE( ANINTERNATIONALLINKED,
                               1, DECODE( LSFROMINTL,
                                          '1', ASFROMPARTNO,
                                          ASINTERNATIONALPARTNO ),
                               NULL ),
                       DECODE( ANINTERNATIONALLINKED,
                               1, DECODE( LSFROMINTL,
                                          '1', ANFROMREVISION,
                                          ANINTERNATIONALREVISION ),
                               NULL ),
                       LNMULTILANG,
                       ANUOMTYPE,
                       LNVIEW );

         INSERT INTO ITSHDESCR_L
                     ( PART_NO,
                       REVISION,
                       LANG_ID,
                       DESCRIPTION )
            ( SELECT PART_NO,
                     LNREVISION,
                     LANG_ID,
                     DESCRIPTION
               FROM PART_L
              WHERE PART_NO = ASPARTNO );

         



         LNRETVAL := CHECKREGIONALGLOBAL( ASPARTNO,
                                          LNREVISION,
                                          LNVIEW,
                                          LNALLOWVAL );

         IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN LNRETVAL;
         END IF;

         IF LNVIEW IS NULL
         THEN
            UPDATE SPECIFICATION_HEADER
               SET MASK_ID = LNVIEW
             WHERE PART_NO = ASPARTNO
               AND REVISION = LNREVISION;
         END IF;

         LNINSERTIND := 2;

         



         INSERT INTO ITSHEXT
                     ( PART_NO,
                       REVISION,
                       SECTION_ID,
                       SUB_SECTION_ID,
                       TYPE,
                       REF_ID,
                       REF_VER,
                       REF_OWNER,
                       PROPERTY_GROUP,
                       PROPERTY,
                       ATTRIBUTE )
            SELECT ASPARTNO,
                   LNREVISION,
                   SECTION_ID,
                   SUB_SECTION_ID,
                   TYPE,
                   REF_ID,
                   REF_VER,
                   REF_OWNER,
                   PROPERTY_GROUP,
                   PROPERTY,
                   ATTRIBUTE
              FROM ITSHEXT
             WHERE PART_NO = ASFROMPARTNO
               AND REVISION = ANFROMREVISION;

         



          
          
          
          
          
          
          
          
          
          
          
          
         INSERT INTO SPECIFICATION_SECTION
                     ( PART_NO,
                       REVISION,
                       SECTION_ID,
                       SECTION_REV,
                       SUB_SECTION_ID,
                       SUB_SECTION_REV,
                       TYPE,
                       REF_ID,
                       REF_VER,
                       REF_INFO,
                       REF_OWNER,
                       SEQUENCE_NO,
                       HEADER,
                       MANDATORY,
                       SECTION_SEQUENCE_NO,
                       DISPLAY_FORMAT,
                       DISPLAY_FORMAT_REV,
                       INTL )
            SELECT ASPARTNO,
                   LNREVISION,
                   SECTION_ID,

                   
                   F_GET_REV('sc', SECTION_ID, 0),

                   SUB_SECTION_ID,

                   
                   F_GET_REV('sb', SUB_SECTION_ID, 0),

                   TYPE,
                   REF_ID,

                   
									 F_GET_REF_REVISION(TYPE,REF_ID,REF_OWNER,NULL),

                   REF_INFO,
                   REF_OWNER,
                   SEQUENCE_NO,
                   HEADER,
                   MANDATORY,
                   SECTION_SEQUENCE_NO,
                   DECODE( TYPE,
                           IAPICONSTANT.SECTIONTYPE_BOM, NULL,
                           DISPLAY_FORMAT ),
                   DECODE( TYPE,
                           IAPICONSTANT.SECTIONTYPE_BOM, 0,
                           DISPLAY_FORMAT_REV ),
                   INTL
              FROM SPECIFICATION_SECTION
             WHERE PART_NO = ASFROMPARTNO
               AND REVISION = ANFROMREVISION

             ;





























         
         LNRETVAL := UPDATELAYOUT( ASPARTNO,
                                   LNREVISION,
                                   1 );

         IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN LNRETVAL;
         END IF;

         LNINSERTIND := 4;

         



         INSERT INTO SPECIFICATION_PROP
                     ( PART_NO,
                       REVISION,
                       SECTION_ID,
                       SECTION_REV,
                       SUB_SECTION_ID,
                       SUB_SECTION_REV,
                       PROPERTY_GROUP,
                       PROPERTY_GROUP_REV,
                       PROPERTY,
                       PROPERTY_REV,
                       ATTRIBUTE,
                       ATTRIBUTE_REV,
                       UOM_ID,
                       UOM_REV,
                       TEST_METHOD,
                       TEST_METHOD_REV,
                       SEQUENCE_NO,
                       ASSOCIATION,
                       ASSOCIATION_REV,
                       INTL,
                       NUM_1,
                       NUM_2,
                       NUM_3,
                       NUM_4,
                       NUM_5,
                       NUM_6,
                       NUM_7,
                       NUM_8,
                       NUM_9,
                       NUM_10,
                       CHAR_1,
                       CHAR_2,
                       CHAR_3,
                       CHAR_4,
                       CHAR_5,
                       CHAR_6,
                       BOOLEAN_1,
                       BOOLEAN_2,
                       BOOLEAN_3,
                       BOOLEAN_4,
                       DATE_1,
                       DATE_2,
                       CHARACTERISTIC,
                       CHARACTERISTIC_REV,
                       INFO,
                       UOM_ALT_ID,
                       UOM_ALT_REV,
                       TM_DET_1,
                       TM_DET_2,
                       TM_DET_3,
                       TM_DET_4,
                       TM_SET_NO,
                       CH_2,
                       CH_REV_2,
                       CH_3,
                       CH_REV_3,
                       AS_2,
                       AS_REV_2,
                       AS_3,
                       AS_REV_3 )
            SELECT ASPARTNO,
                   LNREVISION,
                   SECTION_ID,
                   SECTION_REV,
                   SUB_SECTION_ID,
                   SUB_SECTION_REV,
                   PROPERTY_GROUP,
                   PROPERTY_GROUP_REV,
                   PROPERTY,
                   PROPERTY_REV,
                   ATTRIBUTE,
                   
                   
                   F_GET_REV ('at',
                                      ATTRIBUTE,
                                     0),
                   
                   UOM_ID,
                   UOM_REV,
                   TEST_METHOD,
                   
                   
                   0,
                   
                   SEQUENCE_NO,
                   ASSOCIATION,
                   ASSOCIATION_REV,
                   INTL,
                   NUM_1,
                   NUM_2,
                   NUM_3,
                   NUM_4,
                   NUM_5,
                   NUM_6,
                   NUM_7,
                   NUM_8,
                   NUM_9,
                   NUM_10,
                   CHAR_1,
                   CHAR_2,
                   CHAR_3,
                   CHAR_4,
                   CHAR_5,
                   CHAR_6,
                   BOOLEAN_1,
                   BOOLEAN_2,
                   BOOLEAN_3,
                   BOOLEAN_4,
                   DATE_1,
                   DATE_2,
                   CHARACTERISTIC,
                   CHARACTERISTIC_REV,
                   INFO,
                   UOM_ALT_ID,
                   UOM_ALT_REV,
                   TM_DET_1,
                   TM_DET_2,
                   TM_DET_3,
                   TM_DET_4,
                   TM_SET_NO,
                   CH_2,
                   CH_REV_2,
                   CH_3,
                   CH_REV_3,
                   AS_2,
                   AS_REV_2,
                   AS_3,
                   AS_REV_3
              FROM SPECIFICATION_PROP A
             WHERE A.PART_NO = ASFROMPARTNO
               AND A.REVISION = ANFROMREVISION;

         INSERT INTO SPECIFICATION_TM
                     ( PART_NO,
                       REVISION,
                       SECTION_ID,
                       SUB_SECTION_ID,
                       PROPERTY_GROUP,
                       PROPERTY,
                       ATTRIBUTE,
                       SEQ_NO,
                       TM_TYPE,
                       TM,
                       TM_REV,
                       TM_SET_NO )
            SELECT ASPARTNO,
                   LNREVISION,
                   SECTION_ID,
                   SUB_SECTION_ID,
                   PROPERTY_GROUP,
                   PROPERTY,
                   ATTRIBUTE,
                   SEQ_NO,
                   TM_TYPE,
                   TM,
                   TM_REV,
                   TM_SET_NO
              FROM SPECIFICATION_TM A
             WHERE PART_NO = ASFROMPARTNO
               AND REVISION = ANFROMREVISION;

         IF LNMULTILANG = 1
         THEN
            



            INSERT INTO SPECIFICATION_PROP_LANG
                        ( PART_NO,
                          REVISION,
                          SECTION_ID,
                          SUB_SECTION_ID,
                          PROPERTY_GROUP,
                          PROPERTY,
                          ATTRIBUTE,
                          SEQUENCE_NO,
                          LANG_ID,
                          INTL,
                          CHAR_1,
                          CHAR_2,
                          CHAR_3,
                          CHAR_4,
                          CHAR_5,
                          CHAR_6,
                          INFO )
               SELECT ASPARTNO,
                      LNREVISION,
                      SECTION_ID,
                      SUB_SECTION_ID,
                      PROPERTY_GROUP,
                      PROPERTY,
                      ATTRIBUTE,
                      SEQUENCE_NO,
                      LANG_ID,
                      INTL,
                      CHAR_1,
                      CHAR_2,
                      CHAR_3,
                      CHAR_4,
                      CHAR_5,
                      CHAR_6,
                      INFO
                 FROM SPECIFICATION_PROP_LANG A
                WHERE PART_NO = ASFROMPARTNO
                  AND REVISION = ANFROMREVISION;
         END IF;

         LNINSERTIND := 5;

         



         IF LNMULTILANG = 1
         THEN
            FOR C4REC IN CUR_TEXT_ML
            LOOP
               INSERT INTO SPECIFICATION_TEXT
                           ( PART_NO,
                             REVISION,
                             SECTION_ID,
                             SECTION_REV,
                             SUB_SECTION_ID,
                             SUB_SECTION_REV,
                             TEXT_TYPE,
                             TEXT,
                             TEXT_TYPE_REV,
                             LANG_ID )
                    VALUES ( ASPARTNO,
                             LNREVISION,
                             C4REC.SECTION_ID,
                             C4REC.SECTION_REV,
                             C4REC.SUB_SECTION_ID,
                             C4REC.SUB_SECTION_REV,
                             C4REC.TEXT_TYPE,
                             C4REC.TEXT,
                             C4REC.TEXT_TYPE_REV,
                             C4REC.LANG_ID );
            END LOOP;
         ELSE
            FOR C4REC IN CUR_TEXT_SL
            LOOP
               INSERT INTO SPECIFICATION_TEXT
                           ( PART_NO,
                             REVISION,
                             SECTION_ID,
                             SECTION_REV,
                             SUB_SECTION_ID,
                             SUB_SECTION_REV,
                             TEXT_TYPE,
                             TEXT,
                             TEXT_TYPE_REV )
                    VALUES ( ASPARTNO,
                             LNREVISION,
                             C4REC.SECTION_ID,
                             C4REC.SECTION_REV,
                             C4REC.SUB_SECTION_ID,
                             C4REC.SUB_SECTION_REV,
                             C4REC.TEXT_TYPE,
                             C4REC.TEXT,
                             C4REC.TEXT_TYPE_REV );
            END LOOP;
         END IF;

         LNINSERTIND := 71;

         



         FOR REC_SPEC_LINE IN CUR_SPEC_LINE
         LOOP
            IF REC_SPEC_LINE.ITEM_PART_NO IS NULL
            THEN
               LSITEMPART := NULL;
               LNITEMREV := NULL;
            ELSIF REC_SPEC_LINE.ITEM_PART_NO = ASFROMPARTNO
            THEN
               LSITEMPART := ASPARTNO;
               LNITEMREV := LNREVISION;
            ELSE
               LSITEMPART := REC_SPEC_LINE.ITEM_PART_NO;
               LNITEMREV := REC_SPEC_LINE.ITEM_REVISION;
            END IF;

            INSERT INTO SPECIFICATION_LINE
                        ( PART_NO,
                          REVISION,
                          PLANT,
                          LINE,
                          CONFIGURATION,
                          PROCESS_LINE_REV,
                          ITEM_PART_NO,
                          ITEM_REVISION,
                          SEQUENCE )
                 VALUES ( ASPARTNO,
                          LNREVISION,
                          REC_SPEC_LINE.PLANT,
                          REC_SPEC_LINE.LINE,
                          REC_SPEC_LINE.CONFIGURATION,
                          REC_SPEC_LINE.PROCESS_LINE_REV,
                          LSITEMPART,
                          LNITEMREV,
                          REC_SPEC_LINE.SEQUENCE );
         END LOOP;

         LNINSERTIND := 8;

         



         INSERT INTO SPECIFICATION_STAGE
                     ( PART_NO,
                       REVISION,
                       PLANT,
                       LINE,
                       CONFIGURATION,
                       PROCESS_LINE_REV,
                       STAGE,
                       SEQUENCE_NO,
                       RECIRCULATE_TO,
                       TEXT_TYPE,
                       DISPLAY_FORMAT,
                       DISPLAY_FORMAT_REV )
            SELECT   ASPARTNO,
                     LNREVISION,
                     PLANT,
                     LINE,
                     CONFIGURATION,
                     PROCESS_LINE_REV,
                     STAGE,
                     SEQUENCE_NO,
                     RECIRCULATE_TO,
                     TEXT_TYPE,
                     DISPLAY_FORMAT,
                     MAX( B.REVISION )
                FROM SPECIFICATION_STAGE A,
                     LAYOUT B
               WHERE A.PART_NO = ASFROMPARTNO
                 AND A.REVISION = ANFROMREVISION
                 AND A.DISPLAY_FORMAT = B.LAYOUT_ID
                 AND B.STATUS = 2
            GROUP BY PLANT,
                     LINE,
                     CONFIGURATION,
                     PROCESS_LINE_REV,
                     STAGE,
                     SEQUENCE_NO,
                     RECIRCULATE_TO,
                     TEXT_TYPE,
                     DISPLAY_FORMAT;

         
         LNRETVAL := UPDATELAYOUT( ASPARTNO,
                                   LNREVISION,
                                   2 );

         IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN LNRETVAL;
         END IF;

         LNINSERTIND := 81;

         



         INSERT INTO SPECIFICATION_LINE_PROP
                     ( PART_NO,
                       REVISION,
                       SECTION_ID,
                       SECTION_REV,
                       SUB_SECTION_ID,
                       SUB_SECTION_REV,
                       PLANT,
                       LINE,
                       LINE_REV,
                       CONFIGURATION,
                       PROCESS_LINE_REV,
                       STAGE,
                       STAGE_REV,
                       PROPERTY,
                       PROPERTY_REV,
                       ATTRIBUTE,
                       ATTRIBUTE_REV,
                       UOM_ID,
                       UOM_REV,
                       TEST_METHOD,
                       TEST_METHOD_REV,
                       SEQUENCE_NO,
                       ASSOCIATION,
                       ASSOCIATION_REV,
                       INTL,
                       NUM_1,
                       NUM_2,
                       NUM_3,
                       NUM_4,
                       NUM_5,
                       NUM_6,
                       NUM_7,
                       NUM_8,
                       NUM_9,
                       NUM_10,
                       CHAR_1,
                       CHAR_2,
                       CHAR_3,
                       CHAR_4,
                       CHAR_5,
                       CHAR_6,
                       BOOLEAN_1,
                       BOOLEAN_2,
                       BOOLEAN_3,
                       BOOLEAN_4,
                       DATE_1,
                       DATE_2,
                       TEXT,
                       VALUE_TYPE,
                       CHARACTERISTIC,
                       CHARACTERISTIC_REV,
                       COMPONENT_PART,
                       QUANTITY,
                       UOM,
                       ALTERNATIVE,
                       BOM_USAGE )
            SELECT ASPARTNO,
                   LNREVISION,
                   SECTION_ID,
                   SECTION_REV,
                   SUB_SECTION_ID,
                   SUB_SECTION_REV,
                   PLANT,
                   LINE,
                   LINE_REV,
                   CONFIGURATION,
                   PROCESS_LINE_REV,
                   STAGE,
                   STAGE_REV,
                   PROPERTY,
                   PROPERTY_REV,
                   ATTRIBUTE,
                   ATTRIBUTE_REV,
                   UOM_ID,
                   UOM_REV,
                   TEST_METHOD,
                   TEST_METHOD_REV,
                   SEQUENCE_NO,
                   ASSOCIATION,
                   ASSOCIATION_REV,
                   INTL,
                   NUM_1,
                   NUM_2,
                   NUM_3,
                   NUM_4,
                   NUM_5,
                   NUM_6,
                   NUM_7,
                   NUM_8,
                   NUM_9,
                   NUM_10,
                   CHAR_1,
                   CHAR_2,
                   CHAR_3,
                   CHAR_4,
                   CHAR_5,
                   CHAR_6,
                   BOOLEAN_1,
                   BOOLEAN_2,
                   BOOLEAN_3,
                   BOOLEAN_4,
                   DATE_1,
                   DATE_2,
                   TEXT,
                   VALUE_TYPE,
                   CHARACTERISTIC,
                   CHARACTERISTIC_REV,
                   COMPONENT_PART,
                   QUANTITY,
                   UOM,
                   ALTERNATIVE,
                   BOM_USAGE
              FROM SPECIFICATION_LINE_PROP
             WHERE PART_NO = ASFROMPARTNO
               AND REVISION = ANFROMREVISION;

         INSERT INTO ITSHLNPROPLANG
                     ( PART_NO,
                       REVISION,
                       PLANT,
                       LINE,
                       CONFIGURATION,
                       STAGE,
                       PROPERTY,
                       ATTRIBUTE,
                       SEQUENCE_NO,
                       CHAR_1,
                       CHAR_2,
                       CHAR_3,
                       CHAR_4,
                       CHAR_5,
                       CHAR_6,
                       TEXT,
                       LANG_ID )
            SELECT ASPARTNO,
                   LNREVISION,
                   PLANT,
                   LINE,
                   CONFIGURATION,
                   STAGE,
                   PROPERTY,
                   ATTRIBUTE,
                   SEQUENCE_NO,
                   CHAR_1,
                   CHAR_2,
                   CHAR_3,
                   CHAR_4,
                   CHAR_5,
                   CHAR_6,
                   TEXT,
                   LANG_ID
              FROM ITSHLNPROPLANG
             WHERE PART_NO = ASFROMPARTNO
               AND REVISION = ANFROMREVISION;

         LNINSERTIND := 82;

         



         FOR C5REC IN C5
         LOOP
            INSERT INTO SPECIFICATION_LINE_TEXT
                        ( PART_NO,
                          REVISION,
                          PLANT,
                          LINE,
                          CONFIGURATION,
                          STAGE,
                          TEXT_TYPE,
                          TEXT,
                          LANG_ID )
                 VALUES ( ASPARTNO,
                          LNREVISION,
                          C5REC.PLANT,
                          C5REC.LINE,
                          C5REC.CONFIGURATION,
                          C5REC.STAGE,
                          C5REC.TEXT_TYPE,
                          C5REC.TEXT,
                          C5REC.LANG_ID );
         END LOOP;

         LNINSERTIND := 81;

         



         INSERT INTO ATTACHED_SPECIFICATION
                     ( PART_NO,
                       REVISION,
                       SECTION_ID,
                       SUB_SECTION_ID,
                       REF_ID,
                       ATTACHED_PART_NO,
                       ATTACHED_REVISION,
                       INTL )
            SELECT ASPARTNO,
                   LNREVISION,
                   SECTION_ID,
                   SUB_SECTION_ID,
                   REF_ID,
                   ATTACHED_PART_NO,
                   ATTACHED_REVISION,
                   INTL
              FROM ATTACHED_SPECIFICATION
             WHERE PART_NO = ASFROMPARTNO
               AND REVISION = ANFROMREVISION;

         



         FOR REC_ING IN CUR_ING
         LOOP
            




            
            LNINGREV := 0;

            INSERT INTO SPECIFICATION_ING
                        ( PART_NO,
                          REVISION,
                          SECTION_ID,
                          SUB_SECTION_ID,
                          INGREDIENT,
                          INGREDIENT_REV,
                          QUANTITY,
                          ING_LEVEL,
                          ING_COMMENT,
                          INTL,
                          SEQ_NO,
                          ACTIV_IND,
                          PID,
                          HIER_LEVEL,
                          RECFAC,
                          ING_SYNONYM,
                          ING_SYNONYM_REV,
                          INGDECLARE )
                 VALUES ( ASPARTNO,
                          LNREVISION,
                          REC_ING.SECTION_ID,
                          REC_ING.SUB_SECTION_ID,
                          REC_ING.INGREDIENT,
                          LNINGREV,
                          REC_ING.QUANTITY,
                          REC_ING.ING_LEVEL,
                          REC_ING.ING_COMMENT,
                          REC_ING.INTL,
                          REC_ING.SEQ_NO,
                          REC_ING.ACTIV_IND,
                          REC_ING.PID,
                          REC_ING.HIER_LEVEL,
                          REC_ING.RECFAC,
                          REC_ING.ING_SYNONYM,
                          
                          
                          0,
                          
                          REC_ING.INGDECLARE );
         END LOOP;

         FOR REC_ING IN CUR_ING_LANG
         LOOP
            INSERT INTO SPECIFICATION_ING_LANG
                        ( PART_NO,
                          REVISION,
                          SECTION_ID,
                          SUB_SECTION_ID,
                          LANG_ID,
                          PID,
                          HIER_LEVEL,
                          INGREDIENT,
                          ING_LEVEL,
                          ING_COMMENT,
                          SEQ_NO )
                 VALUES ( ASPARTNO,
                          LNREVISION,
                          REC_ING.SECTION_ID,
                          REC_ING.SUB_SECTION_ID,
                          REC_ING.LANG_ID,
                          REC_ING.PID,
                          REC_ING.HIER_LEVEL,
                          REC_ING.INGREDIENT,
                          REC_ING.ING_LEVEL,
                          REC_ING.ING_COMMENT,
                          REC_ING.SEQ_NO );
         END LOOP;
         
         FOR REC_ING_ALLRG IN CUR_ING_ALLRG
         LOOP
            INSERT INTO ITSPECINGALLERGEN
                        ( PART_NO,
                          REVISION,
                          SECTION_ID,
                          SUB_SECTION_ID,
                          INGREDIENT,
                          ALLERGEN )
                 VALUES ( ASPARTNO,
                          LNREVISION,
                          REC_ING_ALLRG.SECTION_ID,
                          REC_ING_ALLRG.SUB_SECTION_ID,
                          REC_ING_ALLRG.INGREDIENT,
                          REC_ING_ALLRG.ALLERGEN);
         END LOOP;
         

         
         FOR REC_ING_DETAIL IN CUR_ING_DETAIL
         LOOP
            INSERT INTO ITSPECINGDETAIL
                        ( PART_NO,
                          REVISION,
                          SECTION_ID,
                          SUB_SECTION_ID,
                          INGREDIENT,
                          INGREDIENT_SEQ_NO,
                          INGDETAIL_CHARACTERISTIC,
                          INGDETAIL_TYPE,
                          MANDATORY) 
                 VALUES ( ASPARTNO,
                          LNREVISION,
                          REC_ING_DETAIL.SECTION_ID,
                          REC_ING_DETAIL.SUB_SECTION_ID,
                          REC_ING_DETAIL.INGREDIENT,
                          REC_ING_DETAIL.INGREDIENT_SEQ_NO,
                          REC_ING_DETAIL.INGDETAIL_CHARACTERISTIC,
                          REC_ING_DETAIL.INGDETAIL_TYPE,
                          REC_ING_DETAIL.MANDATORY  
                          );
         END LOOP;
         

         DELETE ITSPECINGDETAIL
          WHERE PART_NO = ASPARTNO
            AND REVISION = LNREVISION
            AND MANDATORY = 'Y';

          DELETE ITSPECINGDETAIL
           WHERE (PART_NO,
                  REVISION,
                  INGREDIENT,
                  INGDETAIL_TYPE,
                  INGDETAIL_CHARACTERISTIC) IN
                       (SELECT A.PART_NO,
                               A.REVISION,
                               A.INGREDIENT,
                               A.INGDETAIL_TYPE,
                               A.INGDETAIL_CHARACTERISTIC
                          FROM ITSPECINGDETAIL A, ITINGDETAILCONFIG_CHARASSOC B
                         WHERE     A.PART_NO = ASPARTNO
                               AND A.REVISION = LNREVISION
                               AND A.INGREDIENT = B.INGREDIENT
                               AND A.INGDETAIL_TYPE = B.INGDETAIL_TYPE
                               AND A.INGDETAIL_CHARACTERISTIC =
                                     B.INGDETAIL_CHARACTERISTIC
);



         





         LNRETVAL := COPYBASENAME( ASPARTNO,
                                   LNREVISION,
                                   ASFROMPARTNO,
                                   ANFROMREVISION,
                                   ASFRAMEID,
                                   ANFRAMEREVISION,
                                   ANFRAMEOWNER );

         IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
         THEN
            RETURN LNRETVAL;
         END IF;























         



         IF ASPARTNO <> ASFROMPARTNO
         THEN
            INSERT INTO SPECIFICATION_KW
                        ( PART_NO,
                          KW_ID,
                          KW_VALUE,
                          INTL )
               SELECT ASPARTNO,
                      KW_ID,
                      KW_VALUE,
                      INTL
                 FROM SPECIFICATION_KW S
                WHERE S.PART_NO = ASFROMPARTNO
                  AND ( S.KW_ID, S.KW_VALUE ) NOT IN( SELECT T.KW_ID,
                                                             T.KW_VALUE
                                                       FROM SPECIFICATION_KW T
                                                      WHERE T.PART_NO = ASPARTNO )
                  AND S.KW_ID NOT IN( SELECT KW_ID
                                       FROM ITKW
                                      WHERE KW_TYPE = 2 );

            
            DELETE FROM SPECIFICATION_KW_H
                  WHERE PART_NO = ASPARTNO;
         END IF;

         



         IF ASPARTNO <> ASFROMPARTNO
         THEN
            INSERT INTO ITPROBJ
                        ( PART_NO,
                          OBJECT_ID,
                          REVISION,
                          OWNER,
                          INTL )
               SELECT ASPARTNO,
                      OBJECT_ID,
											
                      
											F_GET_REF_REVISION(6,OBJECT_ID,OWNER,NULL), 
											
                      OWNER,
                      DECODE( ASINTERNATIONAL,
                              '1', INTL,
                              '0' )
                 FROM ITPROBJ S
                WHERE S.PART_NO = ASFROMPARTNO
                  AND ( S.OBJECT_ID, S.REVISION, S.OWNER ) NOT IN( SELECT T.OBJECT_ID,
                                                                          T.REVISION,
                                                                          T.OWNER
                                                                    FROM ITPROBJ T
                                                                   WHERE T.PART_NO = ASPARTNO );

            
            DELETE FROM ITPROBJ_H
                  WHERE PART_NO = ASPARTNO;
         END IF;

         



         IF ASPARTNO <> ASFROMPARTNO
         THEN
            DELETE FROM ITPRNOTE
                  WHERE PART_NO = ASPARTNO;

            FOR REC_NOTE IN CUR_NOTE
            LOOP
               INSERT INTO ITPRNOTE
                           ( PART_NO,
                             TEXT )
                    VALUES ( ASPARTNO,
                             REC_NOTE.TEXT );
            END LOOP;

            
            DELETE FROM ITPRNOTE_H
                  WHERE PART_NO = ASPARTNO;
         END IF;

         


         BEGIN
            SELECT C.TYPE
              INTO LSPREVTYPE
              FROM PART A,
                   CLASS3 C
             WHERE PART_NO = ASFROMPARTNO
               AND A.PART_TYPE = C.CLASS;
         EXCEPTION
            WHEN OTHERS
            THEN
               LSPREVTYPE := '';
         END;

         BEGIN
            SELECT C.TYPE
              INTO LNNEXTTYPE
              FROM PART A,
                   CLASS3 C
             WHERE PART_NO = ASPARTNO
               AND A.PART_TYPE = C.CLASS;
         EXCEPTION
            WHEN OTHERS
            THEN
               LNNEXTTYPE := '';
         END;

         IF LNNEXTTYPE <> LSPREVTYPE
         THEN
            BEGIN
               DELETE      ITPRCL
                     WHERE PART_NO = ASPARTNO;
            EXCEPTION
               WHEN OTHERS
               THEN
                  RAISE CLASSIFY_ERROR;
            END;
         ELSE
            BEGIN
               IF ASPARTNO <> ASFROMPARTNO
               THEN
                  DELETE      ITPRCL
                        WHERE PART_NO = ASPARTNO;

                  INSERT INTO ITPRCL
                              ( PART_NO,
                                HIER_LEVEL,
                                MATL_CLASS_ID,
                                CODE,
                                TYPE )
                     SELECT ASPARTNO,
                            HIER_LEVEL,
                            MATL_CLASS_ID,
                            CODE,
                            TYPE
                       FROM ITPRCL
                      WHERE PART_NO = ASFROMPARTNO;

                  INSERT INTO ITPRCL_H
                              ( PART_NO,
                                HIER_LEVEL,
                                MATL_CLASS_ID,
                                CODE,
                                TYPE,
                                LAST_MODIFIED_ON,
                                LAST_MODIFIED_BY,
                                FORENAME,
                                LAST_NAME )
                     SELECT ASPARTNO,
                            HIER_LEVEL,
                            MATL_CLASS_ID,
                            CODE,
                            TYPE,
                            SYSDATE,
                            IAPIGENERAL.SESSION.APPLICATIONUSER.USERID,
                            IAPIGENERAL.SESSION.APPLICATIONUSER.FORENAME,
                            IAPIGENERAL.SESSION.APPLICATIONUSER.LASTNAME
                       FROM ITPRCL_H
                      WHERE PART_NO = ASFROMPARTNO
                        AND LAST_MODIFIED_ON IN( SELECT MAX( LAST_MODIFIED_ON )
                                                  FROM ITPRCL_H
                                                 WHERE PART_NO = ASFROMPARTNO );
               END IF;
            EXCEPTION
               WHEN OTHERS
               THEN
                  IAPIGENERAL.LOGERROR( GSSOURCE,
                                        LSMETHOD,
                                        SQLERRM );
                  RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
            
            END;
         END IF;

         



         LNINSERTIND := 15;
         
         LSPARTSOURCE := F_PART_SOURCE( ASPARTNO );

         IF ASPARTNO <> ASFROMPARTNO
         THEN
            
            
            IF LSPARTSOURCE = 'I-S'
            THEN
               FOR REC_PLANT IN CUR_PLANT
               LOOP
                  INSERT INTO PART_PLANT
                              ( PART_NO,
                                PLANT,
                                COMPONENT_SCRAP,
                                LEAD_TIME_OFFSET,
                                RELEVENCY_TO_COSTING,
                                BULK_MATERIAL,
                                ITEM_CATEGORY )
                       VALUES ( REC_PLANT.ASPARTNO,
                                REC_PLANT.PLANT,
                                0,
                                0,
                                'Y',
                                'N',
                                'L' );
               END LOOP;
            ELSE
               FOR REC_PLANT IN IS_PLANT
               LOOP
                  INSERT INTO PART_PLANT
                              ( PART_NO,
                                PLANT,
                                COMPONENT_SCRAP,
                                LEAD_TIME_OFFSET,
                                RELEVENCY_TO_COSTING,
                                BULK_MATERIAL,
                                ITEM_CATEGORY )
                       VALUES ( REC_PLANT.ASPARTNO,
                                REC_PLANT.PLANT,
                                0,
                                0,
                                'Y',
                                'N',
                                'L' );
               END LOOP;
            END IF;
         END IF;

         



         
         
         
         LSFROMSOURCE := F_PART_SOURCE( ASFROMPARTNO );
         

         
         BEGIN
            SELECT PLANNED_EFFECTIVE_DATE
              INTO LDOLDPED
              FROM SPECIFICATION_HEADER
             WHERE PART_NO = ASFROMPARTNO
               AND REVISION = ANFROMREVISION;
         EXCEPTION
            WHEN OTHERS
            THEN
               LDOLDPED := LDPLANNEDEFFECTIVEDATE;
         END;

         IF     LSFROMSOURCE = IAPICONSTANT.PARTSOURCE_INTERNAL
            AND LSPARTSOURCE = 'MFG'
         THEN
            
            IF LNREVISION = 1
            THEN
               
               INSERT INTO BOM_HEADER
                  SELECT ASPARTNO,
                         LNREVISION,
                         PLANT,
                         ALTERNATIVE,
                         BASE_QUANTITY,
                         DESCRIPTION,
                         YIELD,
                         CONV_FACTOR,
                         TO_UNIT,
                         CALC_FLAG,
                         'FQ',
                         BOM_USAGE,
                         MIN_QTY,
                         MAX_QTY,
                         F_SET_PED( PLANT_EFFECTIVE_DATE,
                                    LDOLDPED,
                                    ADPLANNEDEFFECTIVEDATE,
                                    ASFROMPARTNO,
                                    ASPARTNO ),
                         PREFERRED
                    FROM BOM_HEADER A
                   WHERE PART_NO = ASFROMPARTNO
                     AND REVISION = ANFROMREVISION
                     AND EXISTS( SELECT PART_NO,
                                        PLANT
                                  FROM PART_PLANT
                                 WHERE PART_NO = ASPARTNO
                                   AND PLANT = A.PLANT );

               



               INSERT INTO BOM_ITEM
                           ( PART_NO,
                             REVISION,
                             PLANT,
                             ALTERNATIVE,
                             ITEM_NUMBER,
                             COMPONENT_PART,
                             COMPONENT_REVISION,
                             COMPONENT_PLANT,
                             QUANTITY,
                             UOM,
                             CONV_FACTOR,
                             TO_UNIT,
                             YIELD,
                             ASSEMBLY_SCRAP,
                             COMPONENT_SCRAP,
                             LEAD_TIME_OFFSET,
                             RELEVENCY_TO_COSTING,
                             BULK_MATERIAL,
                             ITEM_CATEGORY,
                             ISSUE_LOCATION,
                             CALC_FLAG,
                             BOM_ITEM_TYPE,
                             OPERATIONAL_STEP,
                             BOM_USAGE,
                             MIN_QTY,
                             MAX_QTY,
                             FIXED_QTY,
                             CHAR_1,
                             CHAR_2,
                             CODE,
                             ALT_GROUP,
                             ALT_PRIORITY,
                             NUM_1,
                             NUM_2,
                             NUM_3,
                             NUM_4,
                             NUM_5,
                             CHAR_3,
                             CHAR_4,
                             CHAR_5,
                             BOOLEAN_1,
                             BOOLEAN_2,
                             BOOLEAN_3,
                             BOOLEAN_4,
                             DATE_1,
                             DATE_2,
                             CH_1,
                             CH_REV_1,
                             CH_2,
                             CH_REV_2,
                             CH_3,
                             CH_REV_3,
                             MAKE_UP,
                             INTL_EQUIVALENT )
                  SELECT ASPARTNO,
                         LNREVISION,
                         PLANT,
                         ALTERNATIVE,
                         ITEM_NUMBER,
                         COMPONENT_PART,
                         COMPONENT_REVISION,
                         COMPONENT_PLANT,
                         QUANTITY,
                         UOM,
                         CONV_FACTOR,
                         TO_UNIT,
                         YIELD,
                         ASSEMBLY_SCRAP,
                         COMPONENT_SCRAP,
                         LEAD_TIME_OFFSET,
                         RELEVENCY_TO_COSTING,
                         BULK_MATERIAL,
                         ITEM_CATEGORY,
                         ISSUE_LOCATION,
                         CALC_FLAG,
                         BOM_ITEM_TYPE,
                         OPERATIONAL_STEP,
                         BOM_USAGE,
                         MIN_QTY,
                         MAX_QTY,
                         FIXED_QTY,
                         CHAR_1,
                         CHAR_2,
                         CODE,
                         ALT_GROUP,
                         ALT_PRIORITY,
                         NUM_1,
                         NUM_2,
                         NUM_3,
                         NUM_4,
                         NUM_5,
                         CHAR_3,
                         CHAR_4,
                         CHAR_5,
                         BOOLEAN_1,
                         BOOLEAN_2,
                         BOOLEAN_3,
                         BOOLEAN_4,
                         DATE_1,
                         DATE_2,
                         CH_1,
                         0,
                         CH_2,
                         0,
                         CH_3,
                         0,
                         MAKE_UP,
                         DECODE( ANINTERNATIONALLINKED,
                                 1, INTL_EQUIVALENT,
                                 DECODE( ASINTERNATIONAL,
                                         '1', INTL_EQUIVALENT,
                                         NULL ) )
                    FROM BOM_ITEM A
                   WHERE PART_NO = ASFROMPARTNO
                     AND REVISION = ANFROMREVISION
                     AND EXISTS( SELECT PART_NO,
                                        PLANT
                                  FROM PART_PLANT
                                 WHERE PART_NO = ASPARTNO
                                   AND PLANT = A.PLANT );
            ELSE
               
               SELECT MAX( REVISION )
                 INTO LNLASTREVISION
                 FROM SPECIFICATION_HEADER
                WHERE PART_NO = ASPARTNO
                  AND REVISION < LNREVISION;

               
               INSERT INTO BOM_HEADER
                  SELECT ASPARTNO,
                         LNREVISION,
                         PLANT,
                         ALTERNATIVE,
                         BASE_QUANTITY,
                         DESCRIPTION,
                         YIELD,
                         CONV_FACTOR,
                         TO_UNIT,
                         CALC_FLAG,
                         'FQ',
                         BOM_USAGE,
                         MIN_QTY,
                         MAX_QTY,
                         F_SET_PED( PLANT_EFFECTIVE_DATE,
                                    LDOLDPED,
                                    ADPLANNEDEFFECTIVEDATE,
                                    ASPARTNO,
                                    ASPARTNO ),
                         PREFERRED
                    FROM BOM_HEADER A
                   WHERE PART_NO = ASPARTNO
                     AND REVISION = LNLASTREVISION
                     AND PLANT <> IAPICONSTANT.PLANT_INTERNATIONAL;

               
               INSERT INTO BOM_HEADER
                  SELECT ASPARTNO,
                         LNREVISION,
                         PLANT,
                         ALTERNATIVE,
                         BASE_QUANTITY,
                         DESCRIPTION,
                         YIELD,
                         CONV_FACTOR,
                         TO_UNIT,
                         CALC_FLAG,
                         'FQ',
                         BOM_USAGE,
                         MIN_QTY,
                         MAX_QTY,
                         F_SET_PED( PLANT_EFFECTIVE_DATE,
                                    LDOLDPED,
                                    ADPLANNEDEFFECTIVEDATE,
                                    ASPARTNO,
                                    ASPARTNO ),
                         PREFERRED
                    FROM BOM_HEADER A
                   WHERE PART_NO = ASFROMPARTNO
                     AND REVISION = ANFROMREVISION
                     AND PLANT = IAPICONSTANT.PLANT_INTERNATIONAL;

               



               INSERT INTO BOM_ITEM
                           ( PART_NO,
                             REVISION,
                             PLANT,
                             ALTERNATIVE,
                             ITEM_NUMBER,
                             COMPONENT_PART,
                             COMPONENT_REVISION,
                             COMPONENT_PLANT,
                             QUANTITY,
                             UOM,
                             CONV_FACTOR,
                             TO_UNIT,
                             YIELD,
                             ASSEMBLY_SCRAP,
                             COMPONENT_SCRAP,
                             LEAD_TIME_OFFSET,
                             RELEVENCY_TO_COSTING,
                             BULK_MATERIAL,
                             ITEM_CATEGORY,
                             ISSUE_LOCATION,
                             CALC_FLAG,
                             BOM_ITEM_TYPE,
                             OPERATIONAL_STEP,
                             BOM_USAGE,
                             MIN_QTY,
                             MAX_QTY,
                             FIXED_QTY,
                             CHAR_1,
                             CHAR_2,
                             CODE,
                             ALT_GROUP,
                             ALT_PRIORITY,
                             NUM_1,
                             NUM_2,
                             NUM_3,
                             NUM_4,
                             NUM_5,
                             CHAR_3,
                             CHAR_4,
                             CHAR_5,
                             BOOLEAN_1,
                             BOOLEAN_2,
                             BOOLEAN_3,
                             BOOLEAN_4,
                             DATE_1,
                             DATE_2,
                             CH_1,
                             CH_REV_1,
                             CH_2,
                             CH_REV_2,
                             CH_3,
                             CH_REV_3,
                             MAKE_UP,
                             INTL_EQUIVALENT )
                  SELECT ASPARTNO,
                         LNREVISION,
                         PLANT,
                         ALTERNATIVE,
                         ITEM_NUMBER,
                         COMPONENT_PART,
                         COMPONENT_REVISION,
                         COMPONENT_PLANT,
                         QUANTITY,
                         UOM,
                         CONV_FACTOR,
                         TO_UNIT,
                         YIELD,
                         ASSEMBLY_SCRAP,
                         COMPONENT_SCRAP,
                         LEAD_TIME_OFFSET,
                         RELEVENCY_TO_COSTING,
                         BULK_MATERIAL,
                         ITEM_CATEGORY,
                         ISSUE_LOCATION,
                         CALC_FLAG,
                         BOM_ITEM_TYPE,
                         OPERATIONAL_STEP,
                         BOM_USAGE,
                         MIN_QTY,
                         MAX_QTY,
                         FIXED_QTY,
                         CHAR_1,
                         CHAR_2,
                         CODE,
                         ALT_GROUP,
                         ALT_PRIORITY,
                         NUM_1,
                         NUM_2,
                         NUM_3,
                         NUM_4,
                         NUM_5,
                         CHAR_3,
                         CHAR_4,
                         CHAR_5,
                         BOOLEAN_1,
                         BOOLEAN_2,
                         BOOLEAN_3,
                         BOOLEAN_4,
                         DATE_1,
                         DATE_2,
                         CH_1,
                         0,
                         CH_2,
                         0,
                         CH_3,
                         0,
                         MAKE_UP,
                         DECODE( ANINTERNATIONALLINKED,
                                 1, INTL_EQUIVALENT,
                                 DECODE( ASINTERNATIONAL,
                                         '1', INTL_EQUIVALENT,
                                         NULL ) )
                    FROM BOM_ITEM A
                   WHERE PART_NO = ASPARTNO
                     AND REVISION = LNLASTREVISION
                     AND PLANT <> IAPICONSTANT.PLANT_INTERNATIONAL;

               
               INSERT INTO BOM_ITEM
                           ( PART_NO,
                             REVISION,
                             PLANT,
                             ALTERNATIVE,
                             ITEM_NUMBER,
                             COMPONENT_PART,
                             COMPONENT_REVISION,
                             COMPONENT_PLANT,
                             QUANTITY,
                             UOM,
                             CONV_FACTOR,
                             TO_UNIT,
                             YIELD,
                             ASSEMBLY_SCRAP,
                             COMPONENT_SCRAP,
                             LEAD_TIME_OFFSET,
                             RELEVENCY_TO_COSTING,
                             BULK_MATERIAL,
                             ITEM_CATEGORY,
                             ISSUE_LOCATION,
                             CALC_FLAG,
                             BOM_ITEM_TYPE,
                             OPERATIONAL_STEP,
                             BOM_USAGE,
                             MIN_QTY,
                             MAX_QTY,
                             FIXED_QTY,
                             CHAR_1,
                             CHAR_2,
                             CODE,
                             ALT_GROUP,
                             ALT_PRIORITY,
                             NUM_1,
                             NUM_2,
                             NUM_3,
                             NUM_4,
                             NUM_5,
                             CHAR_3,
                             CHAR_4,
                             CHAR_5,
                             BOOLEAN_1,
                             BOOLEAN_2,
                             BOOLEAN_3,
                             BOOLEAN_4,
                             DATE_1,
                             DATE_2,
                             CH_1,
                             CH_REV_1,
                             CH_2,
                             CH_REV_2,
                             CH_3,
                             CH_REV_3,
                             MAKE_UP,
                             INTL_EQUIVALENT )
                  SELECT ASPARTNO,
                         LNREVISION,
                         PLANT,
                         ALTERNATIVE,
                         ITEM_NUMBER,
                         COMPONENT_PART,
                         COMPONENT_REVISION,
                         COMPONENT_PLANT,
                         QUANTITY,
                         UOM,
                         CONV_FACTOR,
                         TO_UNIT,
                         YIELD,
                         ASSEMBLY_SCRAP,
                         COMPONENT_SCRAP,
                         LEAD_TIME_OFFSET,
                         RELEVENCY_TO_COSTING,
                         BULK_MATERIAL,
                         ITEM_CATEGORY,
                         ISSUE_LOCATION,
                         CALC_FLAG,
                         BOM_ITEM_TYPE,
                         OPERATIONAL_STEP,
                         BOM_USAGE,
                         MIN_QTY,
                         MAX_QTY,
                         FIXED_QTY,
                         CHAR_1,
                         CHAR_2,
                         CODE,
                         ALT_GROUP,
                         ALT_PRIORITY,
                         NUM_1,
                         NUM_2,
                         NUM_3,
                         NUM_4,
                         NUM_5,
                         CHAR_3,
                         CHAR_4,
                         CHAR_5,
                         BOOLEAN_1,
                         BOOLEAN_2,
                         BOOLEAN_3,
                         BOOLEAN_4,
                         DATE_1,
                         DATE_2,
                         CH_1,
                         0,
                         CH_2,
                         0,
                         CH_3,
                         0,
                         MAKE_UP,
                         DECODE( ANINTERNATIONALLINKED,
                                 1, INTL_EQUIVALENT,
                                 DECODE( ASINTERNATIONAL,
                                         '1', INTL_EQUIVALENT,
                                         NULL ) )
                    FROM BOM_ITEM A
                   WHERE PART_NO = ASFROMPARTNO
                     AND REVISION = ANFROMREVISION
                     AND PLANT = IAPICONSTANT.PLANT_INTERNATIONAL;
            END IF;
         ELSE
            INSERT INTO BOM_HEADER
               SELECT ASPARTNO,
                      LNREVISION,
                      PLANT,
                      ALTERNATIVE,
                      BASE_QUANTITY,
                      DESCRIPTION,
                      YIELD,
                      CONV_FACTOR,
                      TO_UNIT,
                      CALC_FLAG,
                      BOM_TYPE,
                      BOM_USAGE,
                      MIN_QTY,
                      MAX_QTY,
                      F_SET_PED( PLANT_EFFECTIVE_DATE,
                                 LDOLDPED,
                                 ADPLANNEDEFFECTIVEDATE,
                                 ASFROMPARTNO,
                                 ASPARTNO ),
                      PREFERRED
                 FROM BOM_HEADER A
                WHERE PART_NO = ASFROMPARTNO
                  AND REVISION = ANFROMREVISION
                  AND EXISTS( SELECT PART_NO,
                                     PLANT
                               FROM PART_PLANT
                              WHERE PART_NO = ASPARTNO
                                AND PLANT = A.PLANT );

            INSERT INTO BOM_ITEM
                        ( PART_NO,
                          REVISION,
                          PLANT,
                          ALTERNATIVE,
                          ITEM_NUMBER,
                          COMPONENT_PART,
                          COMPONENT_REVISION,
                          COMPONENT_PLANT,
                          QUANTITY,
                          UOM,
                          CONV_FACTOR,
                          TO_UNIT,
                          YIELD,
                          ASSEMBLY_SCRAP,
                          COMPONENT_SCRAP,
                          LEAD_TIME_OFFSET,
                          RELEVENCY_TO_COSTING,
                          BULK_MATERIAL,
                          ITEM_CATEGORY,
                          ISSUE_LOCATION,
                          CALC_FLAG,
                          BOM_ITEM_TYPE,
                          OPERATIONAL_STEP,
                          BOM_USAGE,
                          MIN_QTY,
                          MAX_QTY,
                          FIXED_QTY,
                          CHAR_1,
                          CHAR_2,
                          CODE,
                          ALT_GROUP,
                          ALT_PRIORITY,
                          NUM_1,
                          NUM_2,
                          NUM_3,
                          NUM_4,
                          NUM_5,
                          CHAR_3,
                          CHAR_4,
                          CHAR_5,
                          BOOLEAN_1,
                          BOOLEAN_2,
                          BOOLEAN_3,
                          BOOLEAN_4,
                          DATE_1,
                          DATE_2,
                          CH_1,
                          CH_REV_1,
                          CH_2,
                          CH_REV_2,
                          CH_3,
                          CH_REV_3,
                          MAKE_UP,
                          INTL_EQUIVALENT )
               SELECT ASPARTNO,
                      LNREVISION,
                      PLANT,
                      ALTERNATIVE,
                      ITEM_NUMBER,
                      COMPONENT_PART,
                      COMPONENT_REVISION,
                      COMPONENT_PLANT,
                      QUANTITY,
                      UOM,
                      CONV_FACTOR,
                      TO_UNIT,
                      YIELD,
                      ASSEMBLY_SCRAP,
                      COMPONENT_SCRAP,
                      LEAD_TIME_OFFSET,
                      RELEVENCY_TO_COSTING,
                      BULK_MATERIAL,
                      ITEM_CATEGORY,
                      ISSUE_LOCATION,
                      CALC_FLAG,
                      BOM_ITEM_TYPE,
                      OPERATIONAL_STEP,
                      BOM_USAGE,
                      MIN_QTY,
                      MAX_QTY,
                      FIXED_QTY,
                      CHAR_1,
                      CHAR_2,
                      CODE,
                      ALT_GROUP,
                      ALT_PRIORITY,
                      NUM_1,
                      NUM_2,
                      NUM_3,
                      NUM_4,
                      NUM_5,
                      CHAR_3,
                      CHAR_4,
                      CHAR_5,
                      BOOLEAN_1,
                      BOOLEAN_2,
                      BOOLEAN_3,
                      BOOLEAN_4,
                      DATE_1,
                      DATE_2,
                      CH_1,
                      0,
                      CH_2,
                      0,
                      CH_3,
                      0,
                      MAKE_UP,
                      DECODE( ANINTERNATIONALLINKED,
                              1, INTL_EQUIVALENT,
                              DECODE( ASINTERNATIONAL,
                                      '1', INTL_EQUIVALENT,
                                      NULL ) )
                 FROM BOM_ITEM A
                WHERE PART_NO = ASFROMPARTNO
                  AND REVISION = ANFROMREVISION
                  AND EXISTS( SELECT PART_NO,
                                     PLANT
                               FROM PART_PLANT
                              WHERE PART_NO = ASPARTNO
                                AND PLANT = A.PLANT );
         END IF;

         
         SELECT COUNT( * )
           INTO LNCOUNT
           FROM BOM_HEADER
          WHERE PART_NO = ASPARTNO
            AND REVISION = LNREVISION
            AND PLANT_EFFECTIVE_DATE <> ADPLANNEDEFFECTIVEDATE;

         IF LNCOUNT <> 0
         THEN
            UPDATE SPECIFICATION_HEADER
               SET PED_IN_SYNC = 'N'
             WHERE PART_NO = ASPARTNO
               AND REVISION = LNREVISION;
         ELSE
            UPDATE SPECIFICATION_HEADER
               SET PED_IN_SYNC = 'Y'
             WHERE PART_NO = ASPARTNO
               AND REVISION = LNREVISION;
         END IF;

         
         BEGIN
            INSERT INTO ITPRMFC
                        ( PART_NO,
                          MFC_ID,
                          MPL_ID,
                          CLEARANCE_NO,
                          TRADE_NAME,
                          AUDIT_DATE,
                          AUDIT_FREQ,
                          INTL,
                          PRODUCT_CODE,
                          APPROVAL_DATE,
                          REVISION,
                          OBJECT_ID,
                          OBJECT_REVISION,
                          OBJECT_OWNER )
               SELECT ASPARTNO,
                      MFC_ID,
                      MPL_ID,
                      CLEARANCE_NO,
                      TRADE_NAME,
                      AUDIT_DATE,
                      AUDIT_FREQ,
                      INTL,
                      PRODUCT_CODE,
                      APPROVAL_DATE,
                      REVISION,
                      OBJECT_ID,
                      OBJECT_REVISION,
                      OBJECT_OWNER
                 FROM ITPRMFC
                WHERE PART_NO = ASFROMPARTNO;

            IF ASPARTNO <> ASFROMPARTNO
            THEN
               
               DELETE FROM ITPRMFC_H
                     WHERE PART_NO = ASPARTNO;
            END IF;
         EXCEPTION
            WHEN DUP_VAL_ON_INDEX
            THEN
               NULL;
         END;

         LNINSERTIND := 11;

         
         
         SELECT REASON_SEQ.NEXTVAL
           INTO LNREASONID
           FROM DUAL;

         INSERT INTO REASON
                     ( ID,
                       PART_NO,
                       REVISION,
                       STATUS_TYPE,
                       TEXT )
              VALUES ( LNREASONID,
                       ASPARTNO,
                       LNREVISION,
                       IAPICONSTANT.STATUSTYPE_REASONFORSTATUSCHNG,
                       '' );
         
         

         SELECT REASON_SEQ.NEXTVAL
           INTO LNREASONID
           FROM DUAL;

         INSERT INTO REASON
                     ( ID,
                       PART_NO,
                       REVISION,
                       STATUS_TYPE,
                       TEXT )
              VALUES ( LNREASONID,
                       ASPARTNO,
                       LNREVISION,
                       IAPICONSTANT.STATUSTYPE_REASONFORISSUE,
                       '' );
      END IF;   

      LNINSERTIND := 12;
      



      LNRETVAL := INSERTSTATUSHISTORY( ASPARTNO,
                                       LNREVISION,
                                       LNINITIALSTATUS,
                                       LDSTATUSDATETIME );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN LNRETVAL;
      END IF;

      LNINSERTIND := 13;
      LNRETVAL := IAPIEMAIL.REGISTEREMAIL( ASPARTNO,
                                           LNREVISION,
                                           LNINITIALSTATUS,
                                           LDSTATUSDATETIME,
                                           'S',
                                           NULL,
                                           NULL,
                                           LNREASONID,
                                           NULL,
                                           AQERRORS );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IF ( LNRETVAL = IAPICONSTANTDBERROR.DBERR_ERRORLIST )
         THEN
            RETURN( IAPICONSTANTDBERROR.DBERR_ERRORLIST );
         ELSE
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN( LNRETVAL );
         END IF;
      END IF;



      
      SELECT FRAME_ID,
             FRAME_REV,
             FRAME_OWNER,
             UOM_TYPE
        INTO LSOLDFRAMENO,
             LNOLDFRAMEREV,
             LNOLDFRAMEOWNER,
             LNOLDUOMTYPE
        FROM SPECIFICATION_HEADER
       WHERE PART_NO = ASFROMPARTNO
         AND REVISION = ANFROMREVISION;

      LNLOCALISED := 0;

      IF ANINTERNATIONALLINKED = 1
      THEN
         IF ASINTERNATIONALPARTNO IS NOT NULL
         THEN
            LNRETVAL := UPDATEINTERNATIONALPART( ASPARTNO,
                                                 LNREVISION,
                                                 '1',
                                                 ASINTERNATIONALPARTNO,
                                                 ANINTERNATIONALREVISION,
                                                 1 );

            IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
            THEN
               IAPIGENERAL.LOGERROR( GSSOURCE,
                                     LSMETHOD,
                                     IAPIGENERAL.GETLASTERRORTEXT( ) );
               RETURN LNRETVAL;
            END IF;

            LNLOCALISED := 1;
         ELSE
            
            NULL;
         END IF;
      END IF;

      IF LNLOCALISED = 0
      THEN
         LNRETVAL := VALIDATIONFRAME( ASPARTNO,
                                      LNREVISION,
                                      LSOLDFRAMENO,
                                      LNOLDFRAMEREV,
                                      LNOLDFRAMEOWNER,
                                      ASFRAMEID,
                                      ANFRAMEREVISION,
                                      ANFRAMEOWNER );

         IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN LNRETVAL;
         END IF;

         LNRETVAL := UPDATEFROMFRAME( ASPARTNO,
                                      LNREVISION,
                                      LSOLDFRAMENO,
                                      LNOLDFRAMEREV,
                                      LNOLDFRAMEOWNER,
                                      ASFRAMEID,
                                      ANFRAMEREVISION,
                                      ANFRAMEOWNER );

         IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN LNRETVAL;
         END IF;

         IF ASINTERNATIONAL = '1'
         THEN
            BEGIN
               



               



               





               


















               NULL;
            EXCEPTION
               WHEN OTHERS
               THEN
                  IAPIGENERAL.LOGERROR( GSSOURCE,
                                        LSMETHOD,
                                        SQLERRM );
                  RETURN IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL );
            END;
         END IF;
      END IF;

    
    IF LNLOCALISED = 0
    THEN
    
      IF ANUOMTYPE <> LNOLDUOMTYPE
      THEN
         
         
         
         
         
         
         
         
         

         FOR REC_PG IN CUR_PG( LNREVISION )
         LOOP
            IF REC_PG.UOM_ALT_ID IS NOT NULL
            THEN
               UPDATE SPECIFICATION_PROP
                  SET NUM_1 =
                         F_METRIC( REC_PG.NUM_1,
                                   REC_PG.UOM_ID,
                                   REC_PG.UOM_ALT_ID,
                                   ASPARTNO,
                                   LNREVISION,
                                   1,
                                   NULL,
                                   REC_PG.INTL,
                                   '0',
                                   '0',
                                   
                                   

                                   ANUOMTYPE,
                                   LNOLDUOMTYPE ),
                                   
                                   
                      NUM_2 =
                         F_METRIC( REC_PG.NUM_2,
                                   REC_PG.UOM_ID,
                                   REC_PG.UOM_ALT_ID,
                                   ASPARTNO,
                                   LNREVISION,
                                   1,
                                   NULL,
                                   REC_PG.INTL,
                                   '0',
                                   '0',
                                   
                                   

                                   ANUOMTYPE,
                                   LNOLDUOMTYPE ),
                                   
                                   
                      NUM_3 =
                         F_METRIC( REC_PG.NUM_3,
                                   REC_PG.UOM_ID,
                                   REC_PG.UOM_ALT_ID,
                                   ASPARTNO,
                                   LNREVISION,
                                   1,
                                   NULL,
                                   REC_PG.INTL,
                                   '0',
                                   '0',
                                   
                                   

                                   ANUOMTYPE,
                                   LNOLDUOMTYPE ),
                                   
                                   
                      NUM_4 =
                         F_METRIC( REC_PG.NUM_4,
                                   REC_PG.UOM_ID,
                                   REC_PG.UOM_ALT_ID,
                                   ASPARTNO,
                                   LNREVISION,
                                   1,
                                   NULL,
                                   REC_PG.INTL,
                                   '0',
                                   '0',
                                   
                                   

                                   ANUOMTYPE,
                                   LNOLDUOMTYPE ),
                                   
                                   
                      NUM_5 =
                         F_METRIC( REC_PG.NUM_5,
                                   REC_PG.UOM_ID,
                                   REC_PG.UOM_ALT_ID,
                                   ASPARTNO,
                                   LNREVISION,
                                   1,
                                   NULL,
                                   REC_PG.INTL,
                                   '0',
                                   '0',
                                   
                                   

                                   ANUOMTYPE,
                                   LNOLDUOMTYPE ),
                                   
                                   
                      NUM_6 =
                         F_METRIC( REC_PG.NUM_6,
                                   REC_PG.UOM_ID,
                                   REC_PG.UOM_ALT_ID,
                                   ASPARTNO,
                                   LNREVISION,
                                   1,
                                   NULL,
                                   REC_PG.INTL,
                                   '0',
                                   '0',
                                   
                                   

                                   ANUOMTYPE,
                                   LNOLDUOMTYPE ),
                                   
                                   
                      NUM_7 =
                         F_METRIC( REC_PG.NUM_7,
                                   REC_PG.UOM_ID,
                                   REC_PG.UOM_ALT_ID,
                                   ASPARTNO,
                                   LNREVISION,
                                   1,
                                   NULL,
                                   REC_PG.INTL,
                                   '0',
                                   '0',
                                   
                                   

                                   ANUOMTYPE,
                                   LNOLDUOMTYPE ),
                                   
                                   
                      NUM_8 =
                         F_METRIC( REC_PG.NUM_8,
                                   REC_PG.UOM_ID,
                                   REC_PG.UOM_ALT_ID,
                                   ASPARTNO,
                                   LNREVISION,
                                   1,
                                   NULL,
                                   REC_PG.INTL,
                                   '0',
                                   '0',
                                   
                                   

                                   ANUOMTYPE,
                                   LNOLDUOMTYPE ),
                                   
                                   
                      NUM_9 =
                         F_METRIC( REC_PG.NUM_9,
                                   REC_PG.UOM_ID,
                                   REC_PG.UOM_ALT_ID,
                                   ASPARTNO,
                                   LNREVISION,
                                   1,
                                   NULL,
                                   REC_PG.INTL,
                                   '0',
                                   '0',
                                   
                                   

                                   ANUOMTYPE,
                                   LNOLDUOMTYPE ),
                                   
                                   
                      NUM_10 =
                         F_METRIC( REC_PG.NUM_10,
                                   REC_PG.UOM_ID,
                                   REC_PG.UOM_ALT_ID,
                                   ASPARTNO,
                                   LNREVISION,
                                   1,
                                   NULL,
                                   REC_PG.INTL,
                                   '0',
                                   '0',
                                   
                                   

                                   ANUOMTYPE,
                                   LNOLDUOMTYPE )
                                   
                                   
                WHERE PART_NO = ASPARTNO
                  AND REVISION = LNREVISION
                  AND SECTION_ID = REC_PG.SECTION_ID
                  AND SUB_SECTION_ID = REC_PG.SUB_SECTION_ID
                  AND PROPERTY_GROUP = REC_PG.PROPERTY_GROUP
                  AND PROPERTY = REC_PG.PROPERTY
                  AND ATTRIBUTE = REC_PG.ATTRIBUTE;
            END IF;
         END LOOP;

         
         
         
         
         
      END IF;
    
    END IF;
    

      
      BEGIN
         LSALLOWSTAGE := GETCONFIGURATIONSETTING( 'process_allow_stages' );
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            LSALLOWSTAGE := 0;
      END;

      IF LSALLOWSTAGE = 0
      THEN
         BEGIN
            LNRETVAL := IAPISPECIFICATIONPROCESSDATA.SYNCHRONISEDATA( ASPARTNO,
                                                                      LNREVISION );

            IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
            THEN
               IAPIGENERAL.LOGERROR( GSSOURCE,
                                     LSMETHOD,
                                     IAPIGENERAL.GETLASTERRORTEXT( ) );
               RETURN LNRETVAL;
            END IF;
         EXCEPTION
            WHEN OTHERS
            THEN
               IAPIGENERAL.LOGERROR( GSSOURCE,
                                     LSMETHOD,
                                     SQLERRM );
               RETURN IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL );
         END;
      END IF;

      
      DELETE      ITSCHS
            WHERE PART_NO = ASPARTNO
              AND REVISION = LNREVISION;

      
      LNRETVAL := IAPIPLANTPART.SETPLANTACCESS( ASPARTNO );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN LNRETVAL;
      END IF;

      


      BEGIN
         
         SELECT COUNT( * )
           INTO LNCOUNTER
           FROM SPECDATA_SERVER
          WHERE PART_NO = ASPARTNO
            AND REVISION = LNREVISION
            AND SECTION_ID IS NULL
            AND DATE_PROCESSED IS NULL;

         IF LNCOUNTER = 0
         THEN
            INSERT INTO SPECDATA_SERVER
                        ( PART_NO,
                          REVISION )
                 VALUES ( ASPARTNO,
                          LNREVISION );
         END IF;
      EXCEPTION
         WHEN OTHERS
         THEN
            NULL;
      END;

      



















































      RETURN IAPICONSTANTDBERROR.DBERR_SUCCESS;
   EXCEPTION
     
      WHEN PED_INVALIDDATE_ERROR
      THEN
        LNRETVAL := IAPIGENERAL.SETERRORTEXT(IAPICONSTANTDBERROR.DBERR_INVALIDPEDDATE);
        IAPIGENERAL.LOGERROR( GSSOURCE,
                      LSMETHOD,
                      IAPIGENERAL.GETLASTERRORTEXT( ) );
        RETURN LNRETVAL;
     

      WHEN INTEGRITY_VIOLATION
      THEN
         
         

         IF LNINSERTIND = 1
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL );
         ELSIF LNINSERTIND = 2
         THEN
            LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_INTEGRITYVIOLATION,
                                                  'Specification Text' );
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN LNRETVAL;
         ELSIF LNINSERTIND = 3
         THEN
            LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_INTEGRITYVIOLATION,
                                                  'Specification Property Group List' );
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN LNRETVAL;
         ELSIF LNINSERTIND = 4
         THEN
            LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_INTEGRITYVIOLATION,
                                                  'Specification Property' );
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN LNRETVAL;
         ELSIF LNINSERTIND = 5
         THEN
            LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_INTEGRITYVIOLATION,
                                                  'Specification XREF' );
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN LNRETVAL;
         ELSIF LNINSERTIND = 6
         THEN
            LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_INTEGRITYVIOLATION,
                                                  'Specification Clearance No' );
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN LNRETVAL;
         ELSIF LNINSERTIND = 7
         THEN
            LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_INTEGRITYVIOLATION,
                                                  'Specification Image' );
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN LNRETVAL;
         ELSIF LNINSERTIND = 8
         THEN
            LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_INTEGRITYVIOLATION,
                                                  'Specification Line' );
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN LNRETVAL;
         ELSIF LNINSERTIND = 9
         THEN
            LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_INTEGRITYVIOLATION,
                                                  'Specification Line Property' );
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN LNRETVAL;
         ELSIF LNINSERTIND = 10
         THEN
            LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_INTEGRITYVIOLATION,
                                                  'Bom Header' );
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN LNRETVAL;
         ELSIF LNINSERTIND = 11
         THEN
            LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_INTEGRITYVIOLATION,
                                                  'Bom Header Item' );
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN LNRETVAL;
         ELSIF LNINSERTIND = 12
         THEN
            LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_INTEGRITYVIOLATION,
                                                  'Status History' );
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN LNRETVAL;
         ELSIF LNINSERTIND = 13
         THEN
            LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_INTEGRITYVIOLATION,
                                                  'Email Message' );
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN LNRETVAL;
         ELSIF LNINSERTIND = 14
         THEN
            LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_INTEGRITYVIOLATION,
                                                  'Specification Ingridient' );
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN LNRETVAL;
         END IF;
      WHEN DATE_OUT_OF_RANGE
      THEN
         
         

         LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_DATEMUSTBEGTTODAY );
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN LNRETVAL;
      WHEN INT_PART_NOT_CURRENT
      THEN
         
         

         LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_INVALIDINTLPARTSTATUS );
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN LNRETVAL;
      WHEN DATE_TOO_EARLY
      THEN
         
         

         LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_DATEMUSTBEGTTHANPREVREV );
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN LNRETVAL;
      WHEN DATE_TOO_LATE
      THEN
         
         

         LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_DATEMUSTBELTTHANNEXTREV );
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN LNRETVAL;
      WHEN PIT_CAUSED_ERROR
      THEN
         
         

         LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_PEDDATEOUTOFRANGE );
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN LNRETVAL;
      WHEN PED_VALIDATE_ERROR
      THEN
         
         

         LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_CANNOTCHANGEPEDDATE );
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN LNRETVAL;
      WHEN SPECS_NOT_ORDERED
      THEN
         
         

         LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_INVALIDPRESPECSEQUENCE );
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN LNRETVAL;
      WHEN PART_IS_NULL
      THEN
         
         

         LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_INVALIDPARTNO );
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN LNRETVAL;
      WHEN FRAME_IS_NULL
      THEN
         
         

         LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_INVALIDFRAME );
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN LNRETVAL;
      WHEN WORKFLOW_IS_NULL
      THEN
         
         

         LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_INVALIDWORKFLOW );
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN LNRETVAL;
      WHEN ACCESS_IS_NULL
      THEN
         
         

         LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_INVALIDACCESS );
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN LNRETVAL;
      WHEN DATE_IS_NULL
      THEN
         
         

         LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_INVALIDPLANEFFDATE );
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN LNRETVAL;
      WHEN REVISION_IS_NULL
      THEN
         
         

         LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_INVALIDNEWREVISION );
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN LNRETVAL;
      WHEN NOT_DEVELOPMENT
      THEN
         
        

         LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_INVALIDSPECSTATUS );
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN LNRETVAL;
      WHEN NOT_REJECT
      THEN
         
         

         LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_INVALIDSPECSTATUS2 );
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN LNRETVAL;
      WHEN NOT_SUBMIT
      THEN
         
         

         LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_INVALIDSPECSTATUS3 );
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN LNRETVAL;
      WHEN INVALID_MONTH
      THEN
         
         

         LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_INVALIDMONTH );
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN LNRETVAL;
      WHEN INVALID_DAY
      THEN
         
         

         LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_INVALIDDAY );
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN LNRETVAL;
      WHEN MANDATORY_FIELD
      THEN
         
         


         LNRETVAL :=
            IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_ALLMANDATORYFIELDREQ,
                                      ASPARTNO,
                                      LNREVISION,
                                      LNINITIALSTATUS,
                                      ASFRAMEID,
                                      ANWORKFLOWGROUPID,
                                      ANACCESSGROUPID,
                                      ADPLANNEDEFFECTIVEDATE,
                                      ASFROMPARTNO,
                                      ANFROMREVISION );
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN LNRETVAL;
      WHEN CLASSIFY_ERROR
      THEN
         
         

         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL );
      WHEN NO_EDIT_ACCESS
      THEN
         
         

         LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_INVALIDACCESSPRIVS );
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN LNRETVAL;
      WHEN OTHERS
      THEN
         
         

         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL );
   END COPYSPEC;


   FUNCTION UPDATEINTERNATIONALPART(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE,
      ASINTERNATIONAL            IN       IAPITYPE.INTL_TYPE,
      ASINTERNATIONALPARTNO      IN       IAPITYPE.PARTNO_TYPE,
      ANINTERNATIONALREVISION    IN       IAPITYPE.REVISION_TYPE,
      ANINTERNATIONALLINKED      IN       IAPITYPE.NUMVAL_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS













      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'UpdateInternationalPart';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LNREVISION                    IAPITYPE.REVISION_TYPE;


      LNFRAMEREV                    IAPITYPE.FRAMEREVISION_TYPE;

      LSFRAMENO                     IAPITYPE.FRAMENO_TYPE;
      LNFRAMEOWNER                  IAPITYPE.OWNER_TYPE;


      LNOLDFRAMEREV                 IAPITYPE.FRAMEREVISION_TYPE;

      LSOLDFRAMENO                  IAPITYPE.FRAMENO_TYPE;
      LNOLDFRAMEOWNER               IAPITYPE.OWNER_TYPE;
      LNPLANNEDEFFECTIVEDATE        IAPITYPE.DATE_TYPE;
      LNCOUNT                       NUMBER;
      LLNEWTEXT                     IAPITYPE.CLOB_TYPE;
      
      LNUOMTYPEOLD                  IAPITYPE.NUMVAL_TYPE;
      LNUOMTYPENEW                  IAPITYPE.NUMVAL_TYPE;

      CURSOR CUR_PROP
      IS
         SELECT *
           FROM SPECIFICATION_PROP
          WHERE PART_NO = ASINTERNATIONALPARTNO
            AND REVISION = LNREVISION;

      CURSOR CUR_LINE_PROP
      IS
         SELECT *
           FROM SPECIFICATION_LINE_PROP
          WHERE PART_NO = ASINTERNATIONALPARTNO
            AND REVISION = LNREVISION;

      CURSOR CUR_LINE_PROP_LANG
      IS
         SELECT *
           FROM ITSHLNPROPLANG
          WHERE PART_NO = ASINTERNATIONALPARTNO
            AND REVISION = LNREVISION;

      CURSOR CUR_FT
      IS
         SELECT A.PART_NO,
                A.REVISION,
                A.TEXT_TYPE,
                A.TEXT,
                A.SECTION_ID,
                A.SECTION_REV,
                A.SUB_SECTION_ID,
                A.SUB_SECTION_REV,
                A.TEXT_TYPE_REV,
                A.LANG_ID
           FROM SPECIFICATION_TEXT A,
                SPECIFICATION_SECTION B
          WHERE A.PART_NO = ASINTERNATIONALPARTNO
            AND A.REVISION = LNREVISION
            AND B.PART_NO = A.PART_NO
            AND B.REVISION = A.REVISION
            AND B.SECTION_ID = A.SECTION_ID
            AND B.SUB_SECTION_ID = A.SUB_SECTION_ID
            AND B.TYPE = IAPICONSTANT.SECTIONTYPE_FREETEXT
            AND B.REF_ID = A.TEXT_TYPE
            AND B.INTL = '1';

      CURSOR CUR_FLT
      IS
         SELECT *
           FROM SPECIFICATION_LINE_TEXT A
          WHERE PART_NO = ASINTERNATIONALPARTNO
            AND REVISION = LNREVISION;

      CURSOR CUR_FT_CHANGED
      IS
         SELECT A.PART_NO,
                A.REVISION,
                A.TEXT_TYPE,
                A.TEXT,
                A.SECTION_ID,
                A.SECTION_REV,
                A.SUB_SECTION_ID,
                A.SUB_SECTION_REV,
                A.TEXT_TYPE_REV,
                A.LANG_ID
           FROM SPECIFICATION_TEXT A,
                SPECIFICATION_SECTION B
          WHERE A.PART_NO = ASINTERNATIONALPARTNO
            AND A.REVISION = LNREVISION
            AND B.PART_NO = A.PART_NO
            AND B.REVISION = A.REVISION
            AND B.SECTION_ID = A.SECTION_ID
            AND B.SUB_SECTION_ID = A.SUB_SECTION_ID
            AND B.TYPE = IAPICONSTANT.SECTIONTYPE_FREETEXT
            AND B.REF_ID = A.TEXT_TYPE
            AND A.LANG_ID = 1
            AND B.INTL = '1';

      CURSOR CUR_LOC_INT_ING
      IS
         
         SELECT SECTION_ID,
                SUB_SECTION_ID,
                INGREDIENT
           FROM SPECIFICATION_ING
          WHERE PART_NO = ASPARTNO
            AND REVISION = ANREVISION
         INTERSECT
         SELECT SECTION_ID,
                SUB_SECTION_ID,
                INGREDIENT
           FROM SPECIFICATION_ING
          WHERE PART_NO = ASINTERNATIONALPARTNO
            AND REVISION = LNREVISION;

      CURSOR CUR_ITPROBJ
      IS
         SELECT OBJECT_ID,
                REVISION,
                OWNER
           FROM ITPROBJ
          WHERE PART_NO = ASINTERNATIONALPARTNO;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      
      SELECT FRAME_ID,
             FRAME_REV,
             FRAME_OWNER
        INTO LSOLDFRAMENO,
             LNOLDFRAMEREV,
             LNOLDFRAMEOWNER
        FROM SPECIFICATION_HEADER
       WHERE PART_NO = ASPARTNO
         AND REVISION = ANREVISION;

      BEGIN
         SELECT MAX( REVISION )
           INTO LNREVISION
           FROM SPECIFICATION_HEADER H,
                STATUS S
          WHERE H.PART_NO = ASINTERNATIONALPARTNO
            AND H.STATUS = S.STATUS
            AND S.STATUS_TYPE = IAPICONSTANT.STATUSTYPE_CURRENT;
      EXCEPTION
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL );
      END;

      IF LNREVISION IS NULL
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN IAPIGENERAL.SETERRORTEXT( -20702 );
      END IF;

      BEGIN
         BEGIN
            SELECT FRAME_ID,
                   FRAME_REV,
                   FRAME_OWNER
              INTO LSFRAMENO,
                   LNFRAMEREV,
                   LNFRAMEOWNER
              FROM SPECIFICATION_HEADER
             WHERE PART_NO = ASINTERNATIONALPARTNO
               AND REVISION = LNREVISION;
         EXCEPTION
            WHEN OTHERS
            THEN
               IAPIGENERAL.LOGERROR( GSSOURCE,
                                     LSMETHOD,
                                     SQLERRM );
               RETURN IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL );
         END;

         UPDATE SPECIFICATION_HEADER
            SET INT_PART_REV = LNREVISION,
                FRAME_REV = LNFRAMEREV,
                LAST_MODIFIED_BY = IAPIGENERAL.SESSION.APPLICATIONUSER.USERID,
                LAST_MODIFIED_ON = SYSDATE
          WHERE PART_NO = ASPARTNO
            AND REVISION = ANREVISION;

         BEGIN
            
            
            
            
            SELECT MAX( A.REVISION )
              INTO LNFRAMEREV
              FROM FRAME_HEADER A,
                   SPECIFICATION_HEADER B
             WHERE FRAME_NO = LSFRAMENO
               AND A.OWNER = LNFRAMEOWNER
               AND A.OWNER = B.FRAME_OWNER
               AND A.FRAME_NO = B.FRAME_ID
               AND A.REVISION BETWEEN TRUNC( B.FRAME_REV ) AND(   TRUNC( B.FRAME_REV )
                                                                + 0.99 )
               AND B.PART_NO = ASINTERNATIONALPARTNO
               AND B.REVISION = LNREVISION
               AND A.STATUS IN( 2, 7 );

            IF LNFRAMEREV IS NULL
            THEN
               SELECT MAX( A.REVISION )
                 INTO LNFRAMEREV
                 FROM FRAME_HEADER A,
                      SPECIFICATION_HEADER B
                WHERE FRAME_NO = LSFRAMENO
                  AND A.OWNER = LNFRAMEOWNER
                  AND A.OWNER = B.FRAME_OWNER
                  AND A.FRAME_NO = B.FRAME_ID
                  AND A.REVISION BETWEEN TRUNC( B.FRAME_REV ) AND(   TRUNC( B.FRAME_REV )
                                                                   + 0.99 )
                  AND B.PART_NO = ASINTERNATIONALPARTNO
                  AND B.REVISION = LNREVISION
                  AND A.STATUS <> 1;

               IF LNFRAMEREV IS NULL
               THEN
                  IAPIGENERAL.LOGERROR( GSSOURCE,
                                        LSMETHOD,
                                        SQLERRM );
                  RETURN IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL );
               END IF;
            END IF;
         EXCEPTION
            WHEN OTHERS
            THEN
               IAPIGENERAL.LOGERROR( GSSOURCE,
                                     LSMETHOD,
                                     SQLERRM );
               RETURN IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL );
         END;

         UPDATE SPECIFICATION_HEADER
            SET FRAME_REV = LNFRAMEREV,
                FRAME_ID = LSFRAMENO,
                FRAME_OWNER = LNFRAMEOWNER
          WHERE PART_NO = ASPARTNO
            AND REVISION = ANREVISION;
      EXCEPTION
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL );
      END;

      
      LNRETVAL := VALIDATIONFRAME( ASPARTNO,
                                   ANREVISION,
                                   LSOLDFRAMENO,
                                   LNOLDFRAMEREV,
                                   LNOLDFRAMEOWNER,
                                   LSFRAMENO,
                                   LNFRAMEREV,
                                   LNFRAMEOWNER );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN LNRETVAL;
      END IF;

      LNRETVAL := UPDATEFROMFRAME( ASPARTNO,
                                   ANREVISION,
                                   LSOLDFRAMENO,
                                   LNOLDFRAMEREV,
                                   LNOLDFRAMEOWNER,
                                   LSFRAMENO,
                                   LNFRAMEREV,
                                   LNFRAMEOWNER );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN LNRETVAL;
      END IF;

      
      LNRETVAL := VALIDATEINTERNATIONALSPEC( ASPARTNO,
                                             ANREVISION,
                                             ASINTERNATIONALPARTNO,
                                             LNREVISION );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN LNRETVAL;
      END IF;

      
      BEGIN
         




          
          SELECT UOM_TYPE
            INTO LNUOMTYPEOLD
          FROM SPECIFICATION_HEADER
          WHERE PART_NO = ASINTERNATIONALPARTNO
            AND REVISION = LNREVISION;

          SELECT UOM_TYPE
            INTO LNUOMTYPENEW
          FROM SPECIFICATION_HEADER
          WHERE PART_NO = ASPARTNO
            AND REVISION = ANREVISION;
          

         FOR REC_PROP IN CUR_PROP
         LOOP
            UPDATE SPECIFICATION_PROP
               SET UOM_ID = REC_PROP.UOM_ID,
                   UOM_REV = REC_PROP.UOM_REV,
                   TEST_METHOD = REC_PROP.TEST_METHOD,
                   TM_DET_1 = REC_PROP.TM_DET_1,
                   TM_DET_2 = REC_PROP.TM_DET_2,
                   TM_DET_3 = REC_PROP.TM_DET_3,
                   TM_DET_4 = REC_PROP.TM_DET_4,
                   TEST_METHOD_REV = REC_PROP.TEST_METHOD_REV,
                   ASSOCIATION = REC_PROP.ASSOCIATION,
                   ASSOCIATION_REV = REC_PROP.ASSOCIATION_REV,
                   INTL = REC_PROP.INTL,
                   
                   INFO = REC_PROP.INFO,
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   NUM_1 = F_METRIC( REC_PROP.NUM_1,
                                REC_PROP.UOM_ID,
                                REC_PROP.UOM_ALT_ID,
                                ASPARTNO,
                                ANREVISION,
                                1,
                                ASINTERNATIONALPARTNO,
                                REC_PROP.INTL,
                                ASINTERNATIONAL, 
                                ASINTERNATIONAL, 
                                LNUOMTYPENEW,
                                LNUOMTYPEOLD ),
                   NUM_2 = F_METRIC( REC_PROP.NUM_2,
                                REC_PROP.UOM_ID,
                                REC_PROP.UOM_ALT_ID,
                                ASPARTNO,
                                ANREVISION,
                                1,
                                ASINTERNATIONALPARTNO,
                                REC_PROP.INTL,
                                ASINTERNATIONAL, 
                                ASINTERNATIONAL, 
                                LNUOMTYPENEW,
                                LNUOMTYPEOLD ),
                   NUM_3 = F_METRIC( REC_PROP.NUM_3,
                                REC_PROP.UOM_ID,
                                REC_PROP.UOM_ALT_ID,
                                ASPARTNO,
                                ANREVISION,
                                1,
                                ASINTERNATIONALPARTNO,
                                REC_PROP.INTL,
                                ASINTERNATIONAL, 
                                ASINTERNATIONAL, 
                                LNUOMTYPENEW,
                                LNUOMTYPEOLD ),
                   NUM_4 = F_METRIC( REC_PROP.NUM_4,
                                REC_PROP.UOM_ID,
                                REC_PROP.UOM_ALT_ID,
                                ASPARTNO,
                                ANREVISION,
                                1,
                                ASINTERNATIONALPARTNO,
                                REC_PROP.INTL,
                                ASINTERNATIONAL, 
                                ASINTERNATIONAL, 
                                LNUOMTYPENEW,
                                LNUOMTYPEOLD ),
                   NUM_5 = F_METRIC( REC_PROP.NUM_5,
                                REC_PROP.UOM_ID,
                                REC_PROP.UOM_ALT_ID,
                                ASPARTNO,
                                ANREVISION,
                                1,
                                ASINTERNATIONALPARTNO,
                                REC_PROP.INTL,
                                ASINTERNATIONAL, 
                                ASINTERNATIONAL, 
                                LNUOMTYPENEW,
                                LNUOMTYPEOLD ),
                   NUM_6 = F_METRIC( REC_PROP.NUM_6,
                                REC_PROP.UOM_ID,
                                REC_PROP.UOM_ALT_ID,
                                ASPARTNO,
                                ANREVISION,
                                1,
                                ASINTERNATIONALPARTNO,
                                REC_PROP.INTL,
                                ASINTERNATIONAL, 
                                ASINTERNATIONAL, 
                                LNUOMTYPENEW,
                                LNUOMTYPEOLD ),
                   NUM_7 = F_METRIC( REC_PROP.NUM_7,
                                REC_PROP.UOM_ID,
                                REC_PROP.UOM_ALT_ID,
                                ASPARTNO,
                                ANREVISION,
                                1,
                                ASINTERNATIONALPARTNO,
                                REC_PROP.INTL,
                                ASINTERNATIONAL, 
                                ASINTERNATIONAL, 
                                LNUOMTYPENEW,
                                LNUOMTYPEOLD ),
                   NUM_8 = F_METRIC( REC_PROP.NUM_8,
                                REC_PROP.UOM_ID,
                                REC_PROP.UOM_ALT_ID,
                                ASPARTNO,
                                ANREVISION,
                                1,
                                ASINTERNATIONALPARTNO,
                                REC_PROP.INTL,
                                ASINTERNATIONAL, 
                                ASINTERNATIONAL, 
                                LNUOMTYPENEW,
                                LNUOMTYPEOLD ),
                   NUM_9 = F_METRIC( REC_PROP.NUM_9,
                                REC_PROP.UOM_ID,
                                REC_PROP.UOM_ALT_ID,
                                ASPARTNO,
                                ANREVISION,
                                1,
                                ASINTERNATIONALPARTNO,
                                REC_PROP.INTL,
                                ASINTERNATIONAL, 
                                ASINTERNATIONAL, 
                                LNUOMTYPENEW,
                                LNUOMTYPEOLD ),
                   NUM_10 = F_METRIC( REC_PROP.NUM_10,
                                REC_PROP.UOM_ID,
                                REC_PROP.UOM_ALT_ID,
                                ASPARTNO,
                                ANREVISION,
                                1,
                                ASINTERNATIONALPARTNO,
                                REC_PROP.INTL,
                                ASINTERNATIONAL, 
                                ASINTERNATIONAL, 
                                LNUOMTYPENEW,
                                LNUOMTYPEOLD ),
                   
                   CHAR_1 = REC_PROP.CHAR_1,
                   CHAR_2 = REC_PROP.CHAR_2,
                   CHAR_3 = REC_PROP.CHAR_3,
                   CHAR_4 = REC_PROP.CHAR_4,
                   CHAR_5 = REC_PROP.CHAR_5,
                   CHAR_6 = REC_PROP.CHAR_6,
                   BOOLEAN_1 = REC_PROP.BOOLEAN_1,
                   BOOLEAN_2 = REC_PROP.BOOLEAN_2,
                   BOOLEAN_3 = REC_PROP.BOOLEAN_3,
                   BOOLEAN_4 = REC_PROP.BOOLEAN_4,
                   DATE_1 = REC_PROP.DATE_1,
                   DATE_2 = REC_PROP.DATE_2,
                   CHARACTERISTIC = REC_PROP.CHARACTERISTIC,
                   CHARACTERISTIC_REV = REC_PROP.CHARACTERISTIC_REV,
                   CH_2 = REC_PROP.CH_2,
                   CH_REV_2 = REC_PROP.CH_REV_2,
                   CH_3 = REC_PROP.CH_3,
                   CH_REV_3 = REC_PROP.CH_REV_3,
                   AS_2 = REC_PROP.AS_2,
                   AS_REV_2 = REC_PROP.AS_REV_2,
                   AS_3 = REC_PROP.AS_3,
                   AS_REV_3 = REC_PROP.AS_REV_3
             WHERE PART_NO = ASPARTNO
               AND REVISION = ANREVISION
               AND SECTION_ID = REC_PROP.SECTION_ID
               AND SUB_SECTION_ID = REC_PROP.SUB_SECTION_ID
               AND PROPERTY_GROUP = REC_PROP.PROPERTY_GROUP
               AND PROPERTY = REC_PROP.PROPERTY
               AND ATTRIBUTE = REC_PROP.ATTRIBUTE
               AND INTL = '1';
         END LOOP;

         


         FOR REC_PROP IN CUR_LINE_PROP
         LOOP
            UPDATE SPECIFICATION_LINE_PROP
               SET UOM_ID = REC_PROP.UOM_ID,
                   UOM_REV = REC_PROP.UOM_REV,
                   TEST_METHOD = REC_PROP.TEST_METHOD,
                   TEST_METHOD_REV = REC_PROP.TEST_METHOD_REV,
                   ASSOCIATION = REC_PROP.ASSOCIATION,
                   ASSOCIATION_REV = REC_PROP.ASSOCIATION_REV,
                   INTL = REC_PROP.INTL,
                   NUM_1 = REC_PROP.NUM_1,
                   NUM_2 = REC_PROP.NUM_2,
                   NUM_3 = REC_PROP.NUM_3,
                   NUM_4 = REC_PROP.NUM_4,
                   NUM_5 = REC_PROP.NUM_5,
                   NUM_6 = REC_PROP.NUM_6,
                   NUM_7 = REC_PROP.NUM_7,
                   NUM_8 = REC_PROP.NUM_8,
                   NUM_9 = REC_PROP.NUM_9,
                   NUM_10 = REC_PROP.NUM_10,
                   CHAR_1 = REC_PROP.CHAR_1,
                   CHAR_2 = REC_PROP.CHAR_2,
                   CHAR_3 = REC_PROP.CHAR_3,
                   CHAR_4 = REC_PROP.CHAR_4,
                   CHAR_5 = REC_PROP.CHAR_5,
                   CHAR_6 = REC_PROP.CHAR_6,
                   BOOLEAN_1 = REC_PROP.BOOLEAN_1,
                   BOOLEAN_2 = REC_PROP.BOOLEAN_2,
                   BOOLEAN_3 = REC_PROP.BOOLEAN_3,
                   BOOLEAN_4 = REC_PROP.BOOLEAN_4,
                   DATE_1 = REC_PROP.DATE_1,
                   DATE_2 = REC_PROP.DATE_2,
                   CHARACTERISTIC = REC_PROP.CHARACTERISTIC,
                   CHARACTERISTIC_REV = REC_PROP.CHARACTERISTIC_REV,
                   TEXT = REC_PROP.TEXT,
                   VALUE_TYPE = REC_PROP.VALUE_TYPE,
                   COMPONENT_PART = REC_PROP.COMPONENT_PART,
                   QUANTITY = REC_PROP.QUANTITY,
                   ALTERNATIVE = REC_PROP.ALTERNATIVE,
                   BOM_USAGE = REC_PROP.BOM_USAGE
             WHERE PART_NO = ASPARTNO
               AND REVISION = ANREVISION
               AND SECTION_ID = REC_PROP.SECTION_ID
               AND SUB_SECTION_ID = REC_PROP.SUB_SECTION_ID
               AND PLANT = REC_PROP.PLANT
               AND LINE = REC_PROP.LINE
               AND CONFIGURATION = REC_PROP.CONFIGURATION
               AND PROCESS_LINE_REV = REC_PROP.PROCESS_LINE_REV
               AND STAGE = REC_PROP.STAGE
               AND PROPERTY = REC_PROP.PROPERTY
               AND ATTRIBUTE = REC_PROP.ATTRIBUTE;
         END LOOP;

         


         FOR REC_PROP_LANG IN CUR_LINE_PROP_LANG
         LOOP
            UPDATE ITSHLNPROPLANG
               SET CHAR_1 = REC_PROP_LANG.CHAR_1,
                   CHAR_2 = REC_PROP_LANG.CHAR_2,
                   CHAR_3 = REC_PROP_LANG.CHAR_3,
                   CHAR_4 = REC_PROP_LANG.CHAR_4,
                   CHAR_5 = REC_PROP_LANG.CHAR_5,
                   CHAR_6 = REC_PROP_LANG.CHAR_6,
                   TEXT = REC_PROP_LANG.TEXT
             WHERE PART_NO = ASPARTNO
               AND REVISION = ANREVISION
               AND PLANT = REC_PROP_LANG.PLANT
               AND LINE = REC_PROP_LANG.LINE
               AND CONFIGURATION = REC_PROP_LANG.CONFIGURATION
               AND STAGE = REC_PROP_LANG.STAGE
               AND PROPERTY = REC_PROP_LANG.PROPERTY
               AND ATTRIBUTE = REC_PROP_LANG.ATTRIBUTE
               AND SEQUENCE_NO = REC_PROP_LANG.SEQUENCE_NO;
         END LOOP;

         


         FOR REC_FT_C IN CUR_FT_CHANGED
         LOOP
            SELECT TEXT
              INTO LLNEWTEXT
              FROM SPECIFICATION_TEXT
             WHERE PART_NO = ASPARTNO
               AND REVISION = ANREVISION
               AND SECTION_ID = REC_FT_C.SECTION_ID
               AND SUB_SECTION_ID = REC_FT_C.SUB_SECTION_ID
               AND TEXT_TYPE = REC_FT_C.TEXT_TYPE
               AND LANG_ID = REC_FT_C.LANG_ID;

            
            IF ( LSOLDFRAMENO <> REC_FT_C.TEXT )
            THEN
               DELETE      SPECIFICATION_TEXT
                     WHERE PART_NO = ASPARTNO
                       AND REVISION = ANREVISION
                       AND SECTION_ID = REC_FT_C.SECTION_ID
                       AND SUB_SECTION_ID = REC_FT_C.SUB_SECTION_ID
                       AND TEXT_TYPE = REC_FT_C.TEXT_TYPE
                       AND LANG_ID <> REC_FT_C.LANG_ID;
            END IF;
         END LOOP;

         



         FOR REC_FT IN CUR_FT
         LOOP
            UPDATE SPECIFICATION_TEXT
               SET TEXT = REC_FT.TEXT
             WHERE PART_NO = ASPARTNO
               AND REVISION = ANREVISION
               AND SECTION_ID = REC_FT.SECTION_ID
               AND SUB_SECTION_ID = REC_FT.SUB_SECTION_ID
               AND TEXT_TYPE = REC_FT.TEXT_TYPE
               AND LANG_ID = REC_FT.LANG_ID;
         END LOOP;

         


         FOR REC_FLT IN CUR_FLT
         LOOP
            UPDATE SPECIFICATION_LINE_TEXT
               SET TEXT = REC_FLT.TEXT
             WHERE PART_NO = ASPARTNO
               AND REVISION = ANREVISION
               AND PLANT = REC_FLT.PLANT
               AND LINE = REC_FLT.LINE
               AND CONFIGURATION = REC_FLT.CONFIGURATION
               AND STAGE = REC_FLT.STAGE
               AND TEXT_TYPE = REC_FLT.TEXT_TYPE
               AND LANG_ID = REC_FLT.LANG_ID;
         END LOOP;

         



         INSERT INTO ATTACHED_SPECIFICATION
                     ( PART_NO,
                       REVISION,
                       SECTION_ID,
                       SUB_SECTION_ID,
                       REF_ID,
                       ATTACHED_PART_NO,
                       ATTACHED_REVISION,
                       INTL )
            SELECT ASPARTNO,
                   ANREVISION,
                   SECTION_ID,
                   SUB_SECTION_ID,
                   REF_ID,
                   ATTACHED_PART_NO,
                   ATTACHED_REVISION,
                   INTL
              FROM ATTACHED_SPECIFICATION
             WHERE PART_NO = ASINTERNATIONALPARTNO
               AND REVISION = LNREVISION
               AND ( SECTION_ID, SUB_SECTION_ID, REF_ID, ATTACHED_PART_NO, ATTACHED_REVISION ) NOT IN(
                                                                        SELECT SECTION_ID,
                                                                               SUB_SECTION_ID,
                                                                               REF_ID,
                                                                               ATTACHED_PART_NO,
                                                                               ATTACHED_REVISION
                                                                          FROM ATTACHED_SPECIFICATION
                                                                         WHERE PART_NO = ASPARTNO
                                                                           AND REVISION = ANREVISION );

         







         BEGIN
            DELETE      SPECIFICATION_ING
                  WHERE PART_NO = ASPARTNO
                    AND REVISION = ANREVISION
                    AND INTL = 1;

            FOR REC_ING IN CUR_LOC_INT_ING
            LOOP
               DELETE      SPECIFICATION_ING
                     WHERE PART_NO = ASPARTNO
                       AND REVISION = ANREVISION
                       AND SECTION_ID = REC_ING.SECTION_ID
                       AND SUB_SECTION_ID = REC_ING.SUB_SECTION_ID
                       AND INGREDIENT = REC_ING.INGREDIENT;
            END LOOP;

            INSERT INTO SPECIFICATION_ING
                        ( PART_NO,
                          REVISION,
                          SECTION_ID,
                          SUB_SECTION_ID,
                          INGREDIENT,
                          INGREDIENT_REV,
                          QUANTITY,
                          INTL,
                          SEQ_NO,
                          ACTIV_IND,
                          PID,
                          HIER_LEVEL,
                          RECFAC,
                          ING_SYNONYM,
                          ING_SYNONYM_REV,
                          INGDECLARE,
                          ING_LEVEL,
                          ING_COMMENT )
               SELECT ASPARTNO,
                      ANREVISION,
                      SECTION_ID,
                      SUB_SECTION_ID,
                      INGREDIENT,
                      0,   
                      QUANTITY,
                      INTL,
                      SEQ_NO,
                      ACTIV_IND,
                      PID,
                      HIER_LEVEL,
                      RECFAC,
                      ING_SYNONYM,
                      
                      
                      0,
                      
                      INGDECLARE,
                      ING_LEVEL,
                      ING_COMMENT
                 FROM SPECIFICATION_ING
                WHERE PART_NO = ASINTERNATIONALPARTNO
                  AND REVISION = LNREVISION;
         EXCEPTION
            WHEN OTHERS
            THEN
               IAPIGENERAL.LOGERROR( GSSOURCE,
                                     LSMETHOD,
                                     SQLERRM );
               RETURN IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL );
         END;

         



         INSERT INTO SPECIFICATION_KW
                     ( PART_NO,
                       KW_ID,
                       KW_VALUE,
                       INTL )
            SELECT ASPARTNO,
                   KW_ID,
                   KW_VALUE,
                   INTL
              FROM SPECIFICATION_KW
             WHERE PART_NO = ASINTERNATIONALPARTNO
               AND KW_ID NOT IN( SELECT KW_ID
                                  FROM SPECIFICATION_KW
                                 WHERE PART_NO = ASPARTNO );

         



         INSERT INTO ITPROBJ
                     ( PART_NO,
                       OBJECT_ID,
                       REVISION,
                       OWNER,
                       INTL )
            SELECT ASPARTNO,
                   OBJECT_ID,
                   REVISION,
                   OWNER,
                   INTL
              FROM ITPROBJ
             WHERE PART_NO = ASINTERNATIONALPARTNO
               AND ( OBJECT_ID, OWNER ) NOT IN( SELECT OBJECT_ID,
                                                       OWNER
                                                 FROM ITPROBJ
                                                WHERE PART_NO = ASPARTNO );

         
         FOR REC_OBJ IN CUR_ITPROBJ
         LOOP
            BEGIN
               UPDATE ITPROBJ
                  SET REVISION = REC_OBJ.REVISION
                WHERE PART_NO = ASPARTNO
                  AND OBJECT_ID = REC_OBJ.OBJECT_ID
                  AND OWNER = REC_OBJ.OWNER;
            EXCEPTION
               WHEN DUP_VAL_ON_INDEX
               THEN
                  
                  NULL;
            END;
         END LOOP;

         



         DELETE      ITPRCL
               WHERE PART_NO = ASPARTNO;

         INSERT INTO ITPRCL
            ( SELECT ASPARTNO,
                     HIER_LEVEL,
                     MATL_CLASS_ID,
                     CODE,
                     TYPE
               FROM ITPRCL
              WHERE PART_NO = ASINTERNATIONALPARTNO );

         
         DELETE FROM BOM_ITEM
               WHERE PART_NO = ASPARTNO
                 AND REVISION = ANREVISION
                 AND PLANT = IAPICONSTANT.PLANT_INTERNATIONAL;

         DELETE FROM BOM_HEADER
               WHERE PART_NO = ASPARTNO
                 AND REVISION = ANREVISION
                 AND PLANT = IAPICONSTANT.PLANT_INTERNATIONAL;

         
         SELECT PLANNED_EFFECTIVE_DATE
           INTO LNPLANNEDEFFECTIVEDATE
           FROM SPECIFICATION_HEADER
          WHERE PART_NO = ASPARTNO
            AND REVISION = ANREVISION;

         
         SELECT COUNT( * )
           INTO LNCOUNT
           FROM PART_PLANT
          WHERE PART_NO = ASPARTNO
            AND PLANT = IAPICONSTANT.PLANT_INTERNATIONAL;

         IF LNCOUNT > 0
         THEN
            BEGIN
               INSERT INTO PART_PLANT
                           ( PART_NO,
                             PLANT,
                             COMPONENT_SCRAP,
                             LEAD_TIME_OFFSET,
                             RELEVENCY_TO_COSTING,
                             BULK_MATERIAL,
                             ITEM_CATEGORY,
                             OBSOLETE )
                    VALUES ( ASPARTNO,
                             IAPICONSTANT.PLANT_INTERNATIONAL,
                             0,
                             0,
                             'Y',
                             'N',
                             'L',
                             0 );
            EXCEPTION
               WHEN OTHERS
               THEN
                  NULL;
            END;
         END IF;

         INSERT INTO BOM_HEADER
                     ( PART_NO,
                       REVISION,
                       PLANT,
                       ALTERNATIVE,
                       BASE_QUANTITY,
                       DESCRIPTION,
                       YIELD,
                       CONV_FACTOR,
                       TO_UNIT,
                       CALC_FLAG,
                       BOM_TYPE,
                       BOM_USAGE,
                       MIN_QTY,
                       MAX_QTY,
                       PLANT_EFFECTIVE_DATE,
                       PREFERRED )
            SELECT ASPARTNO,
                   ANREVISION,
                   PLANT,
                   ALTERNATIVE,
                   BASE_QUANTITY,
                   DESCRIPTION,
                   YIELD,
                   CONV_FACTOR,
                   TO_UNIT,
                   CALC_FLAG,
                   BOM_TYPE,
                   BOM_USAGE,
                   MIN_QTY,
                   MAX_QTY,
                   F_SET_PED( PLANT_EFFECTIVE_DATE,
                              PLANT_EFFECTIVE_DATE,
                              LNPLANNEDEFFECTIVEDATE,
                              ASINTERNATIONALPARTNO,
                              ASPARTNO ),
                   PREFERRED
              FROM BOM_HEADER
             WHERE PART_NO = ASINTERNATIONALPARTNO
               AND REVISION = LNREVISION
               AND PLANT = IAPICONSTANT.PLANT_INTERNATIONAL;

         INSERT INTO BOM_ITEM
                     ( PART_NO,
                       REVISION,
                       PLANT,
                       ALTERNATIVE,
                       ITEM_NUMBER,
                       COMPONENT_PART,
                       COMPONENT_REVISION,
                       COMPONENT_PLANT,
                       QUANTITY,
                       UOM,
                       CONV_FACTOR,
                       TO_UNIT,
                       YIELD,
                       ASSEMBLY_SCRAP,
                       COMPONENT_SCRAP,
                       LEAD_TIME_OFFSET,
                       RELEVENCY_TO_COSTING,
                       BULK_MATERIAL,
                       ITEM_CATEGORY,
                       ISSUE_LOCATION,
                       CALC_FLAG,
                       BOM_ITEM_TYPE,
                       OPERATIONAL_STEP,
                       BOM_USAGE,
                       MIN_QTY,
                       MAX_QTY,
                       FIXED_QTY,
                       CHAR_1,
                       CHAR_2,
                       CODE,
                       ALT_GROUP,
                       ALT_PRIORITY,
                       NUM_1,
                       NUM_2,
                       NUM_3,
                       NUM_4,
                       NUM_5,
                       CHAR_3,
                       CHAR_4,
                       CHAR_5,
                       BOOLEAN_1,
                       BOOLEAN_2,
                       BOOLEAN_3,
                       BOOLEAN_4,
                       DATE_1,
                       DATE_2,
                       CH_1,
                       CH_REV_1,
                       CH_2,
                       CH_REV_2,
                       CH_3,
                       CH_REV_3,
                       MAKE_UP,
                       INTL_EQUIVALENT )
            SELECT ASPARTNO,
                   ANREVISION,
                   PLANT,
                   ALTERNATIVE,
                   ITEM_NUMBER,
                   COMPONENT_PART,
                   COMPONENT_REVISION,
                   COMPONENT_PLANT,
                   QUANTITY,
                   UOM,
                   CONV_FACTOR,
                   TO_UNIT,
                   YIELD,
                   ASSEMBLY_SCRAP,
                   COMPONENT_SCRAP,
                   LEAD_TIME_OFFSET,
                   RELEVENCY_TO_COSTING,
                   BULK_MATERIAL,
                   ITEM_CATEGORY,
                   ISSUE_LOCATION,
                   CALC_FLAG,
                   BOM_ITEM_TYPE,
                   OPERATIONAL_STEP,
                   BOM_USAGE,
                   MIN_QTY,
                   MAX_QTY,
                   FIXED_QTY,
                   CHAR_1,
                   CHAR_2,
                   CODE,
                   ALT_GROUP,
                   ALT_PRIORITY,
                   NUM_1,
                   NUM_2,
                   NUM_3,
                   NUM_4,
                   NUM_5,
                   CHAR_3,
                   CHAR_4,
                   CHAR_5,
                   BOOLEAN_1,
                   BOOLEAN_2,
                   BOOLEAN_3,
                   BOOLEAN_4,
                   DATE_1,
                   DATE_2,
                   CH_1,
                   0,
                   CH_2,
                   0,
                   CH_3,
                   0,
                   MAKE_UP,
                   DECODE( ANINTERNATIONALLINKED,
                           1, INTL_EQUIVALENT,
                           DECODE( ASINTERNATIONAL,
                                   '1', INTL_EQUIVALENT,
                                   NULL ) )
              FROM BOM_ITEM
             WHERE PART_NO = ASINTERNATIONALPARTNO
               AND REVISION = LNREVISION
               AND PLANT = IAPICONSTANT.PLANT_INTERNATIONAL;

         
         SELECT COUNT( * )
           INTO LNCOUNT
           FROM BOM_HEADER
          WHERE PART_NO = ASPARTNO
            AND REVISION = ANREVISION
            AND PLANT_EFFECTIVE_DATE <> LNPLANNEDEFFECTIVEDATE;

         IF LNCOUNT <> 0
         THEN
            UPDATE SPECIFICATION_HEADER
               SET PED_IN_SYNC = 'N'
             WHERE PART_NO = ASPARTNO
               AND REVISION = ANREVISION;
         ELSE
            UPDATE SPECIFICATION_HEADER
               SET PED_IN_SYNC = 'Y'
             WHERE PART_NO = ASPARTNO
               AND REVISION = ANREVISION;
         END IF;

         RETURN IAPICONSTANTDBERROR.DBERR_SUCCESS;
      EXCEPTION
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL );
      END;
   END UPDATEINTERNATIONALPART;


   FUNCTION VALIDATEINTERNATIONALSPEC(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE,
      ASINTLPARTNO               IN       IAPITYPE.PARTNO_TYPE,
      ANINTLPARTREV              IN       IAPITYPE.REVISION_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS













      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'ValidateInternationalSpec';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LNATTACHEDSPEC                IAPITYPE.ID_TYPE;

      
      
      CURSOR L_INS_SECTIONS_CURSOR
      IS
         SELECT *
           FROM SPECIFICATION_SECTION
          WHERE ( SECTION_ID, SUB_SECTION_ID, TYPE, REF_ID ) IN(
                   SELECT SECTION_ID,
                          SUB_SECTION_ID,
                          TYPE,
                          REF_ID
                     FROM SPECIFICATION_SECTION
                    WHERE PART_NO = ASINTLPARTNO
                      AND REVISION = ANINTLPARTREV
                      AND TYPE <> IAPICONSTANT.SECTIONTYPE_ATTACHEDSPEC
                   MINUS
                   SELECT SECTION_ID,
                          SUB_SECTION_ID,
                          TYPE,
                          REF_ID
                     FROM SPECIFICATION_SECTION
                    WHERE PART_NO = ASPARTNO
                      AND REVISION = ANREVISION
                      AND TYPE <> IAPICONSTANT.SECTIONTYPE_ATTACHEDSPEC )
            AND PART_NO = ASINTLPARTNO
            AND REVISION = ANINTLPARTREV;

      
      CURSOR L_INS_AS_CURSOR
      IS
         SELECT *
           FROM SPECIFICATION_SECTION
          WHERE ( SECTION_ID, SUB_SECTION_ID, TYPE ) IN(
                   SELECT SECTION_ID,
                          SUB_SECTION_ID,
                          TYPE
                     FROM SPECIFICATION_SECTION
                    WHERE PART_NO = ASINTLPARTNO
                      AND REVISION = ANINTLPARTREV
                      AND TYPE = IAPICONSTANT.SECTIONTYPE_ATTACHEDSPEC
                   MINUS
                   SELECT SECTION_ID,
                          SUB_SECTION_ID,
                          TYPE
                     FROM SPECIFICATION_SECTION
                    WHERE PART_NO = ASPARTNO
                      AND REVISION = ANREVISION
                      AND TYPE = IAPICONSTANT.SECTIONTYPE_ATTACHEDSPEC )
            AND PART_NO = ASINTLPARTNO
            AND REVISION = ANINTLPARTREV;

      
      CURSOR L_UPD_SECTIONS_CURSOR
      IS
         SELECT *
           FROM SPECIFICATION_SECTION
          WHERE PART_NO = ASINTLPARTNO
            AND REVISION = ANINTLPARTREV;

      
      CURSOR L_UPD_DISPL_CURSOR
      IS
         SELECT SECTION_ID,
                SUB_SECTION_ID,
                REF_ID,
                TYPE,
                DISPLAY_FORMAT,
                DISPLAY_FORMAT_REV
           FROM SPECIFICATION_SECTION
          WHERE PART_NO = ASINTLPARTNO
            AND REVISION = ANINTLPARTREV
         MINUS
         SELECT SECTION_ID,
                SUB_SECTION_ID,
                REF_ID,
                TYPE,
                DISPLAY_FORMAT,
                DISPLAY_FORMAT_REV
           FROM SPECIFICATION_SECTION
          WHERE PART_NO = ASPARTNO
            AND REVISION = ANREVISION;

      
      CURSOR L_DEL_SECTIONS_CURSOR
      IS
         SELECT SECTION_ID,
                SUB_SECTION_ID,
                TYPE,
                REF_ID
           FROM SPECIFICATION_SECTION
          WHERE PART_NO = ASPARTNO
            AND REVISION = ANREVISION
            AND TYPE <> IAPICONSTANT.SECTIONTYPE_ATTACHEDSPEC
            AND INTL IN( 1 )
         MINUS
         SELECT SECTION_ID,
                SUB_SECTION_ID,
                TYPE,
                REF_ID
           FROM SPECIFICATION_SECTION
          WHERE PART_NO = ASINTLPARTNO
            AND REVISION = ANINTLPARTREV
            AND TYPE <> IAPICONSTANT.SECTIONTYPE_ATTACHEDSPEC;

        
      CURSOR L_DEL_OBJ_CURSOR
      IS
         SELECT SECTION_ID,
                SUB_SECTION_ID,
                TYPE,
                REF_ID
           FROM SPECIFICATION_SECTION
          WHERE PART_NO = ASPARTNO
            AND REVISION = ANREVISION
            AND TYPE = IAPICONSTANT.SECTIONTYPE_OBJECT
            AND INTL = 1
         MINUS
         SELECT SECTION_ID,
                SUB_SECTION_ID,
                TYPE,
                REF_ID
           FROM SPECIFICATION_SECTION
          WHERE PART_NO = ASINTLPARTNO
            AND REVISION = ANINTLPARTREV
            AND TYPE = IAPICONSTANT.SECTIONTYPE_OBJECT;

      
      CURSOR L_DEL_AS_CURSOR
      IS
         SELECT SECTION_ID,
                SUB_SECTION_ID,
                TYPE
           FROM SPECIFICATION_SECTION
          WHERE PART_NO = ASPARTNO
            AND REVISION = ANREVISION
            AND TYPE = IAPICONSTANT.SECTIONTYPE_ATTACHEDSPEC
            AND INTL = 1
         MINUS
         SELECT SECTION_ID,
                SUB_SECTION_ID,
                TYPE
           FROM SPECIFICATION_SECTION
          WHERE PART_NO = ASINTLPARTNO
            AND REVISION = ANINTLPARTREV
            AND TYPE = IAPICONSTANT.SECTIONTYPE_ATTACHEDSPEC;

      

      
      CURSOR L_INS_PG_CURSOR
      IS
         SELECT A.SECTION_ID,
                A.SUB_SECTION_ID,
                A.PROPERTY_GROUP,
                A.PROPERTY,
                A.ATTRIBUTE
           FROM SPECIFICATION_PROP A,
                SPECIFICATION_SECTION B
          WHERE A.PART_NO = ASINTLPARTNO
            AND A.REVISION = ANINTLPARTREV
            AND A.PART_NO = B.PART_NO
            AND A.REVISION = B.REVISION
            AND A.SECTION_ID = B.SECTION_ID
            AND A.SUB_SECTION_ID = B.SUB_SECTION_ID
            AND A.PROPERTY_GROUP = B.REF_ID
            AND B.TYPE = IAPICONSTANT.SECTIONTYPE_PROPERTYGROUP
         MINUS
         SELECT SECTION_ID,
                SUB_SECTION_ID,
                PROPERTY_GROUP,
                PROPERTY,
                ATTRIBUTE
           FROM SPECIFICATION_PROP
          WHERE PART_NO = ASPARTNO
            AND REVISION = ANREVISION;

      
      CURSOR L_INS_SP_CURSOR
      IS
         SELECT A.SECTION_ID,
                A.SUB_SECTION_ID,
                A.PROPERTY_GROUP,
                A.PROPERTY,
                A.ATTRIBUTE
           FROM SPECIFICATION_PROP A,
                SPECIFICATION_SECTION B
          WHERE A.PART_NO = ASINTLPARTNO
            AND A.REVISION = ANINTLPARTREV
            AND A.PART_NO = B.PART_NO
            AND A.REVISION = B.REVISION
            AND A.SECTION_ID = B.SECTION_ID
            AND A.SUB_SECTION_ID = B.SUB_SECTION_ID
            AND A.PROPERTY_GROUP = 0
            AND A.PROPERTY = B.REF_ID
            AND B.TYPE = IAPICONSTANT.SECTIONTYPE_SINGLEPROPERTY
         MINUS
         SELECT SECTION_ID,
                SUB_SECTION_ID,
                PROPERTY_GROUP,
                PROPERTY,
                ATTRIBUTE
           FROM SPECIFICATION_PROP
          WHERE PART_NO = ASPARTNO
            AND REVISION = ANREVISION;

      
      CURSOR LS_DEL_PROP_CURSOR
      IS
         SELECT SECTION_ID,
                SUB_SECTION_ID,
                PROPERTY_GROUP,
                PROPERTY,
                ATTRIBUTE
           FROM SPECIFICATION_PROP
          WHERE PART_NO = ASPARTNO
            AND REVISION = ANREVISION
            AND INTL IN( 1 )
         MINUS
         SELECT SECTION_ID,
                SUB_SECTION_ID,
                PROPERTY_GROUP,
                PROPERTY,
                ATTRIBUTE
           FROM SPECIFICATION_PROP
          WHERE PART_NO = ASINTLPARTNO
            AND REVISION = ANINTLPARTREV;

      
      CURSOR L_UPD_PROP_CURSOR
      IS
         SELECT SECTION_ID,
                SECTION_REV,
                SUB_SECTION_ID,
                SUB_SECTION_REV,
                PROPERTY_GROUP,
                PROPERTY_GROUP_REV,
                PROPERTY,
                PROPERTY_REV,
                ATTRIBUTE,
                ATTRIBUTE_REV,
                TEST_METHOD,
                TEST_METHOD_REV,
                UOM_ID,
                UOM_REV,
                SEQUENCE_NO,
                NUM_1,
                NUM_2,
                NUM_3,
                NUM_4,
                NUM_5,
                NUM_6,
                NUM_7,
                NUM_8,
                NUM_9,
                NUM_10,
                CHAR_1,
                CHAR_2,
                CHAR_3,
                CHAR_4,
                CHAR_5,
                CHAR_6,
                BOOLEAN_1,
                BOOLEAN_2,
                BOOLEAN_3,
                BOOLEAN_4,
                DATE_1,
                DATE_2,
                INTL,
                CHARACTERISTIC,
                CHARACTERISTIC_REV,
                CH_2,
                CH_REV_2,
                CH_3,
                CH_REV_3,
                ASSOCIATION,
                ASSOCIATION_REV,
                AS_2,
                AS_REV_2,
                AS_3,
                AS_REV_3
           FROM SPECIFICATION_PROP
          WHERE PART_NO = ASINTLPARTNO
            AND REVISION = ANINTLPARTREV;

      
      CURSOR L_SPEC_SECTION_CURSOR
      IS
         SELECT S.PART_NO,
                S.REVISION,
                S.SECTION_ID,
                S.SUB_SECTION_ID
           FROM SPECIFICATION_SECTION S
          WHERE S.PART_NO = ASPARTNO
            AND S.REVISION = ANREVISION
            AND S.REF_ID = 0
            AND S.TYPE = IAPICONSTANT.SECTIONTYPE_ATTACHEDSPEC;

      
      CURSOR L_SEQUENCE_CURSOR
      IS
         SELECT SECTION_ID,
                SUB_SECTION_ID,
                TYPE,
                REF_ID,
                REF_VER,
                REF_OWNER,
                SECTION_SEQUENCE_NO
           FROM SPECIFICATION_SECTION
          WHERE PART_NO = ASINTLPARTNO
            AND REVISION = ANINTLPARTREV
            AND MOD( SECTION_SEQUENCE_NO,
                     '100' ) = 0;

      
      CURSOR L_REF_TEXT_CURSOR
      IS
         SELECT SECTION_ID,
                SUB_SECTION_ID,
                TYPE,
                REF_ID,
                REF_VER,
                REF_OWNER,
                SECTION_SEQUENCE_NO,
                MOD( SECTION_SEQUENCE_NO,
                     '100' ) MOD_SEQUENCE
           FROM SPECIFICATION_SECTION
          WHERE PART_NO = ASPARTNO
            AND REVISION = ANREVISION
            AND TYPE = IAPICONSTANT.SECTIONTYPE_REFERENCETEXT
            AND MOD( SECTION_SEQUENCE_NO,
                     '100' ) > 0;

      
      CURSOR L_REF_OBJ_CURSOR
      IS
         SELECT SECTION_ID,
                SUB_SECTION_ID,
                TYPE,
                REF_ID,
                REF_VER,
                REF_OWNER,
                SECTION_SEQUENCE_NO,
                MOD( SECTION_SEQUENCE_NO,
                     '100' ) MOD_SEQUENCE
           FROM SPECIFICATION_SECTION
          WHERE PART_NO = ASPARTNO
            AND REVISION = ANREVISION
            AND TYPE = IAPICONSTANT.SECTIONTYPE_OBJECT
            AND MOD( SECTION_SEQUENCE_NO,
                     '100' ) > 0;

      
      CURSOR LS_DEL_PROCESS_DATA
      IS
         SELECT *
           FROM SPECIFICATION_LINE
          WHERE PART_NO = ASPARTNO
            AND REVISION = ANREVISION;

      
      CURSOR LS_UPD_FREE_TEXT
      IS
         SELECT SECTION_ID,
                SUB_SECTION_ID,
                TEXT_TYPE,
                TEXT,
                LANG_ID
           FROM SPECIFICATION_TEXT
          WHERE PART_NO = ASINTLPARTNO
            AND REVISION = ANINTLPARTREV
            AND ( SECTION_ID, SUB_SECTION_ID, TEXT_TYPE ) IN( SELECT SECTION_ID,
                                                                     SUB_SECTION_ID,
                                                                     TEXT_TYPE
                                                               FROM SPECIFICATION_TEXT
                                                              WHERE PART_NO = ASPARTNO
                                                                AND REVISION = ANREVISION
                                                                AND TEXT IS NULL );

      LNNEWSEQUENCE                 IAPITYPE.ID_TYPE;
      LNMODSEQUENCE                 IAPITYPE.ID_TYPE;
      LNCHECKPROCESS                NUMBER := 0;
      LNCHECKBOM                    NUMBER := 0;
      I                             NUMBER := 0;
      LNAS_1                        FRAME_PROP.ASSOCIATION%TYPE;
      LNAS_2                        FRAME_PROP.AS_2%TYPE;
      LNAS_3                        FRAME_PROP.AS_3%TYPE;
      LNCH_1                        FRAME_PROP.CHARACTERISTIC%TYPE;
      LNCH_2                        FRAME_PROP.CH_2%TYPE;
      LNCH_3                        FRAME_PROP.CH_3%TYPE;
   
    
   BEGIN
   


      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      
      BEGIN
         FOR REC_INSERT IN L_INS_SECTIONS_CURSOR
         LOOP
            INSERT INTO SPECIFICATION_SECTION
                        ( PART_NO,
                          REVISION,
                          SECTION_ID,
                          SECTION_REV,
                          SUB_SECTION_ID,
                          SUB_SECTION_REV,
                          TYPE,
                          REF_ID,
                          REF_VER,
                          REF_INFO,
                          REF_OWNER,
                          SEQUENCE_NO,
                          HEADER,
                          SECTION_SEQUENCE_NO,
                          DISPLAY_FORMAT,
                          DISPLAY_FORMAT_REV,
                          INTL,
                          MANDATORY )
                 VALUES ( ASPARTNO,
                          ANREVISION,
                          REC_INSERT.SECTION_ID,
                          F_GET_SUB_REV( REC_INSERT.SECTION_ID,
                                         REC_INSERT.SECTION_REV,
                                         NULL,
                                         NULL,
                                         'SC' ),
                          REC_INSERT.SUB_SECTION_ID,
                          F_GET_SUB_REV( REC_INSERT.SUB_SECTION_ID,
                                         REC_INSERT.SUB_SECTION_REV,
                                         NULL,
                                         NULL,
                                         'SB' ),
                          REC_INSERT.TYPE,
                          REC_INSERT.REF_ID,
                          DECODE( REC_INSERT.TYPE,
                                  IAPICONSTANT.SECTIONTYPE_PROPERTYGROUP, F_GET_SUB_REV( REC_INSERT.REF_ID,
                                                                                         REC_INSERT.REF_VER,
                                                                                         NULL,
                                                                                         NULL,
                                                                                         'PG' ),
                                  IAPICONSTANT.SECTIONTYPE_SINGLEPROPERTY, F_GET_SUB_REV( REC_INSERT.REF_ID,
                                                                                          REC_INSERT.REF_VER,
                                                                                          NULL,
                                                                                          NULL,
                                                                                          'SP' ),
                                  IAPICONSTANT.SECTIONTYPE_FREETEXT, F_GET_SUB_REV( REC_INSERT.REF_ID,
                                                                                    REC_INSERT.REF_VER,
                                                                                    NULL,
                                                                                    NULL,
                                                                                    'FT' ),
                                  REC_INSERT.REF_VER ),
                          REC_INSERT.REF_INFO,
                          REC_INSERT.REF_OWNER,
                          REC_INSERT.SEQUENCE_NO,
                          REC_INSERT.HEADER,
                          REC_INSERT.SECTION_SEQUENCE_NO,
                          REC_INSERT.DISPLAY_FORMAT,
                          REC_INSERT.DISPLAY_FORMAT_REV,
                          REC_INSERT.INTL,
                          REC_INSERT.MANDATORY );
         END LOOP;

         FOR REC_INSERT IN L_INS_AS_CURSOR
         LOOP
            INSERT INTO SPECIFICATION_SECTION
                        ( PART_NO,
                          REVISION,
                          SECTION_ID,
                          SECTION_REV,
                          SUB_SECTION_ID,
                          SUB_SECTION_REV,
                          TYPE,
                          REF_ID,
                          REF_VER,
                          REF_INFO,
                          REF_OWNER,
                          SEQUENCE_NO,
                          HEADER,
                          SECTION_SEQUENCE_NO,
                          DISPLAY_FORMAT,
                          DISPLAY_FORMAT_REV,
                          INTL,
                          MANDATORY )
                 VALUES ( ASPARTNO,
                          ANREVISION,
                          REC_INSERT.SECTION_ID,
                          F_GET_SUB_REV( REC_INSERT.SECTION_ID,
                                         REC_INSERT.SECTION_REV,
                                         NULL,
                                         NULL,
                                         'SC' ),
                          REC_INSERT.SUB_SECTION_ID,
                          F_GET_SUB_REV( REC_INSERT.SUB_SECTION_ID,
                                         REC_INSERT.SUB_SECTION_REV,
                                         NULL,
                                         NULL,
                                         'SB' ),
                          REC_INSERT.TYPE,
                          REC_INSERT.REF_ID,
                          DECODE( REC_INSERT.TYPE,
                                  IAPICONSTANT.SECTIONTYPE_PROPERTYGROUP, F_GET_SUB_REV( REC_INSERT.REF_ID,
                                                                                         REC_INSERT.REF_VER,
                                                                                         NULL,
                                                                                         NULL,
                                                                                         'PG' ),
                                  IAPICONSTANT.SECTIONTYPE_SINGLEPROPERTY, F_GET_SUB_REV( REC_INSERT.REF_ID,
                                                                                          REC_INSERT.REF_VER,
                                                                                          NULL,
                                                                                          NULL,
                                                                                          'SP' ),
                                  IAPICONSTANT.SECTIONTYPE_FREETEXT, F_GET_SUB_REV( REC_INSERT.REF_ID,
                                                                                    REC_INSERT.REF_VER,
                                                                                    NULL,
                                                                                    NULL,
                                                                                    'FT' ),
                                  REC_INSERT.REF_VER ),
                          REC_INSERT.REF_INFO,
                          REC_INSERT.REF_OWNER,
                          REC_INSERT.SEQUENCE_NO,
                          REC_INSERT.HEADER,
                          REC_INSERT.SECTION_SEQUENCE_NO,
                          REC_INSERT.DISPLAY_FORMAT,
                          REC_INSERT.DISPLAY_FORMAT_REV,
                          REC_INSERT.INTL,
                          REC_INSERT.MANDATORY );
         END LOOP;
      EXCEPTION
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL );
      END;

      
      BEGIN
         FOR REC_DELETE IN L_DEL_SECTIONS_CURSOR
         LOOP
            DBMS_OUTPUT.PUT_LINE(    'DELETE : '
                                  || REC_DELETE.SECTION_ID
                                  || '   '
                                  || REC_DELETE.REF_ID
                                  || '   '
                                  || REC_DELETE.TYPE );

            DELETE FROM SPECIFICATION_SECTION
                  WHERE PART_NO = ASPARTNO
                    AND REVISION = ANREVISION
                    AND SECTION_ID = REC_DELETE.SECTION_ID
                    AND SUB_SECTION_ID = REC_DELETE.SUB_SECTION_ID
                    AND TYPE = REC_DELETE.TYPE
                    AND REF_ID = REC_DELETE.REF_ID
                    AND MOD( SECTION_SEQUENCE_NO,
                             '100' ) = 0;
         END LOOP;

         FOR REC_DELETE IN L_DEL_OBJ_CURSOR
         LOOP
            DELETE FROM SPECIFICATION_SECTION
                  WHERE PART_NO = ASPARTNO
                    AND REVISION = ANREVISION
                    AND SECTION_ID = REC_DELETE.SECTION_ID
                    AND SUB_SECTION_ID = REC_DELETE.SUB_SECTION_ID
                    AND TYPE = REC_DELETE.TYPE
                    AND REF_ID = REC_DELETE.REF_ID;
         END LOOP;

         FOR REC_DELETE IN L_DEL_AS_CURSOR
         LOOP
            DELETE FROM SPECIFICATION_SECTION
                  WHERE PART_NO = ASPARTNO
                    AND REVISION = ANREVISION
                    AND SECTION_ID = REC_DELETE.SECTION_ID
                    AND SUB_SECTION_ID = REC_DELETE.SUB_SECTION_ID
                    AND TYPE = REC_DELETE.TYPE
                    AND MOD( SECTION_SEQUENCE_NO,
                             '100' ) = 0;
         END LOOP;
      EXCEPTION
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL );
      END;

      
      BEGIN
         FOR REC_UPD IN L_UPD_SECTIONS_CURSOR
         LOOP
            UPDATE SPECIFICATION_SECTION
               SET SECTION_SEQUENCE_NO = REC_UPD.SECTION_SEQUENCE_NO,
                   SECTION_REV = REC_UPD.SECTION_REV,
                   SUB_SECTION_REV = REC_UPD.SUB_SECTION_REV,
                   REF_VER = REC_UPD.REF_VER,
                   REF_INFO = REC_UPD.REF_INFO,
                   REF_OWNER = REC_UPD.REF_OWNER,
                   HEADER = REC_UPD.HEADER,
                   DISPLAY_FORMAT = REC_UPD.DISPLAY_FORMAT,
                   DISPLAY_FORMAT_REV = REC_UPD.DISPLAY_FORMAT_REV,
                   INTL = REC_UPD.INTL,
                   MANDATORY = REC_UPD.MANDATORY
             WHERE PART_NO = ASPARTNO
               AND REVISION = ANREVISION
               AND SECTION_ID = REC_UPD.SECTION_ID
               AND SUB_SECTION_ID = REC_UPD.SUB_SECTION_ID
               AND TYPE = REC_UPD.TYPE
               AND DECODE( TYPE,
                           IAPICONSTANT.SECTIONTYPE_INGREDIENTLIST, 0,
                           DECODE( TYPE,
                                   IAPICONSTANT.SECTIONTYPE_ATTACHEDSPEC, 0,
                                   REF_ID ) ) = REC_UPD.REF_ID;
         END LOOP;
      EXCEPTION
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL );
      END;

      
      BEGIN
         UPDATE SPECIFICATION_SECTION
            SET SECTION_REV = F_GET_SUB_REV( SECTION_ID,
                                             SECTION_REV,
                                             NULL,
                                             NULL,
                                             'SC' ),
                SUB_SECTION_REV = F_GET_SUB_REV( SUB_SECTION_ID,
                                                 SUB_SECTION_REV,
                                                 NULL,
                                                 NULL,
                                                 'SB' ),
                REF_VER =
                   DECODE( TYPE,
                           IAPICONSTANT.SECTIONTYPE_PROPERTYGROUP, F_GET_SUB_REV( REF_ID,
                                                                                  REF_VER,
                                                                                  NULL,
                                                                                  NULL,
                                                                                  'PG' ),
                           IAPICONSTANT.SECTIONTYPE_SINGLEPROPERTY, F_GET_SUB_REV( REF_ID,
                                                                                   REF_VER,
                                                                                   NULL,
                                                                                   NULL,
                                                                                   'SP' ),
                           IAPICONSTANT.SECTIONTYPE_FREETEXT, F_GET_SUB_REV( REF_ID,
                                                                             REF_VER,
                                                                             NULL,
                                                                             NULL,
                                                                             'FT' ),
                           REF_VER )
          WHERE PART_NO = ASPARTNO
            AND REVISION = ANREVISION;
      EXCEPTION
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL );
      END;

      
      LNRETVAL := UPDATELAYOUT( ASPARTNO,
                                ANREVISION,
                                1 );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN LNRETVAL;
      END IF;

      

      BEGIN
         FOR REC_PROP IN L_INS_PG_CURSOR
         LOOP
            INSERT INTO SPECIFICATION_PROP
                        ( PART_NO,
                          REVISION,
                          SECTION_ID,
                          SUB_SECTION_ID,
                          SECTION_REV,
                          SUB_SECTION_REV,
                          PROPERTY_GROUP,
                          PROPERTY,
                          ATTRIBUTE,
                          UOM_ID,
                          PROPERTY_GROUP_REV,
                          PROPERTY_REV,
                          ATTRIBUTE_REV,
                          UOM_REV,
                          TEST_METHOD,
                          TEST_METHOD_REV,
                          SEQUENCE_NO,
                          CHARACTERISTIC,
                          CHARACTERISTIC_REV,
                          ASSOCIATION,
                          ASSOCIATION_REV,
                          INTL,
                          NUM_1,
                          NUM_2,
                          NUM_3,
                          NUM_4,
                          NUM_5,
                          NUM_6,
                          NUM_7,
                          NUM_8,
                          NUM_9,
                          NUM_10,
                          CHAR_1,
                          CHAR_2,
                          CHAR_3,
                          CHAR_4,
                          CHAR_5,
                          CHAR_6,
                          BOOLEAN_1,
                          BOOLEAN_2,
                          BOOLEAN_3,
                          BOOLEAN_4,
                          DATE_1,
                          DATE_2,
                          CH_2,
                          CH_REV_2,
                          CH_3,
                          CH_REV_3,
                          AS_2,
                          AS_REV_2,
                          AS_3,
                          AS_REV_3 )
               SELECT ASPARTNO,
                      ANREVISION,
                      SECTION_ID,
                      SUB_SECTION_ID,
                      SECTION_REV,
                      SUB_SECTION_REV,
                      PROPERTY_GROUP,
                      PROPERTY,
                      ATTRIBUTE,
                      UOM_ID,
                      PROPERTY_GROUP_REV,
                      PROPERTY_REV,
                      ATTRIBUTE_REV,
                      UOM_REV,
                      TEST_METHOD,
                      TEST_METHOD_REV,
                      SEQUENCE_NO,
                      CHARACTERISTIC,
                      CHARACTERISTIC_REV,
                      ASSOCIATION,
                      ASSOCIATION_REV,
                      INTL,
                      NUM_1,
                      NUM_2,
                      NUM_3,
                      NUM_4,
                      NUM_5,
                      NUM_6,
                      NUM_7,
                      NUM_8,
                      NUM_9,
                      NUM_10,
                      CHAR_1,
                      CHAR_2,
                      CHAR_3,
                      CHAR_4,
                      CHAR_5,
                      CHAR_6,
                      BOOLEAN_1,
                      BOOLEAN_2,
                      BOOLEAN_3,
                      BOOLEAN_4,
                      DATE_1,
                      DATE_2,
                      CH_2,
                      CH_REV_2,
                      CH_3,
                      CH_REV_3,
                      AS_2,
                      AS_REV_2,
                      AS_3,
                      AS_REV_3
                 FROM SPECIFICATION_PROP
                WHERE PART_NO = ASINTLPARTNO
                  AND REVISION = ANINTLPARTREV
                  AND SECTION_ID = REC_PROP.SECTION_ID
                  AND SUB_SECTION_ID = REC_PROP.SUB_SECTION_ID
                  AND PROPERTY_GROUP = REC_PROP.PROPERTY_GROUP
                  AND PROPERTY = REC_PROP.PROPERTY
                  AND ATTRIBUTE = REC_PROP.ATTRIBUTE;
         END LOOP;

         

         FOR REC_PROP IN L_INS_SP_CURSOR
         LOOP
            INSERT INTO SPECIFICATION_PROP
                        ( PART_NO,
                          REVISION,
                          SECTION_ID,
                          SUB_SECTION_ID,
                          SECTION_REV,
                          SUB_SECTION_REV,
                          PROPERTY_GROUP,
                          PROPERTY,
                          ATTRIBUTE,
                          UOM_ID,
                          PROPERTY_GROUP_REV,
                          PROPERTY_REV,
                          ATTRIBUTE_REV,
                          UOM_REV,
                          TEST_METHOD,
                          TEST_METHOD_REV,
                          SEQUENCE_NO,
                          CHARACTERISTIC,
                          CHARACTERISTIC_REV,
                          ASSOCIATION,
                          ASSOCIATION_REV,
                          INTL,
                          NUM_1,
                          NUM_2,
                          NUM_3,
                          NUM_4,
                          NUM_5,
                          NUM_6,
                          NUM_7,
                          NUM_8,
                          NUM_9,
                          NUM_10,
                          CHAR_1,
                          CHAR_2,
                          CHAR_3,
                          CHAR_4,
                          CHAR_5,
                          CHAR_6,
                          BOOLEAN_1,
                          BOOLEAN_2,
                          BOOLEAN_3,
                          BOOLEAN_4,
                          DATE_1,
                          DATE_2,
                          CH_2,
                          CH_REV_2,
                          CH_3,
                          CH_REV_3,
                          AS_2,
                          AS_REV_2,
                          AS_3,
                          AS_REV_3 )
               SELECT ASPARTNO,
                      ANREVISION,
                      SECTION_ID,
                      SUB_SECTION_ID,
                      SECTION_REV,
                      SUB_SECTION_REV,
                      PROPERTY_GROUP,
                      PROPERTY,
                      ATTRIBUTE,
                      UOM_ID,
                      PROPERTY_GROUP_REV,
                      PROPERTY_REV,
                      ATTRIBUTE_REV,
                      UOM_REV,
                      TEST_METHOD,
                      TEST_METHOD_REV,
                      SEQUENCE_NO,
                      CHARACTERISTIC,
                      CHARACTERISTIC_REV,
                      ASSOCIATION,
                      ASSOCIATION_REV,
                      INTL,
                      NUM_1,
                      NUM_2,
                      NUM_3,
                      NUM_4,
                      NUM_5,
                      NUM_6,
                      NUM_7,
                      NUM_8,
                      NUM_9,
                      NUM_10,
                      CHAR_1,
                      CHAR_2,
                      CHAR_3,
                      CHAR_4,
                      CHAR_5,
                      CHAR_6,
                      BOOLEAN_1,
                      BOOLEAN_2,
                      BOOLEAN_3,
                      BOOLEAN_4,
                      DATE_1,
                      DATE_2,
                      CH_2,
                      CH_REV_2,
                      CH_3,
                      CH_REV_3,
                      AS_2,
                      AS_REV_2,
                      AS_3,
                      AS_REV_3
                 FROM SPECIFICATION_PROP
                WHERE PART_NO = ASINTLPARTNO
                  AND REVISION = ANINTLPARTREV
                  AND SECTION_ID = REC_PROP.SECTION_ID
                  AND SUB_SECTION_ID = REC_PROP.SUB_SECTION_ID
                  AND PROPERTY_GROUP = REC_PROP.PROPERTY_GROUP
                  AND PROPERTY = REC_PROP.PROPERTY
                  AND ATTRIBUTE = REC_PROP.ATTRIBUTE;
         END LOOP;
      EXCEPTION
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL );
      END;

      
      BEGIN
         FOR REC_PROP IN LS_DEL_PROP_CURSOR
         LOOP
            DELETE FROM SPECIFICATION_PROP
                  WHERE PART_NO = ASPARTNO
                    AND REVISION = ANREVISION
                    AND SECTION_ID = REC_PROP.SECTION_ID
                    AND SUB_SECTION_ID = REC_PROP.SUB_SECTION_ID
                    AND PROPERTY_GROUP = REC_PROP.PROPERTY_GROUP
                    AND PROPERTY = REC_PROP.PROPERTY
                    AND ATTRIBUTE = REC_PROP.ATTRIBUTE;
         END LOOP;
      EXCEPTION
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL );
      END;

      
      BEGIN
         FOR REC_UPD IN L_UPD_PROP_CURSOR
         LOOP



            SELECT COUNT( * )
              INTO I
              FROM SPECIFICATION_PROP
             WHERE PART_NO = ASPARTNO
               AND REVISION = ANREVISION
               AND SECTION_ID = REC_UPD.SECTION_ID
               AND SUB_SECTION_ID = REC_UPD.SUB_SECTION_ID
               AND PROPERTY_GROUP = REC_UPD.PROPERTY_GROUP
               AND PROPERTY = REC_UPD.PROPERTY
               AND ATTRIBUTE = REC_UPD.ATTRIBUTE;

            IF I = 1
            THEN
               SELECT ASSOCIATION,
                      AS_2,
                      AS_3,
                      CHARACTERISTIC,
                      CH_2,
                      CH_3
                 INTO LNAS_1,
                      LNAS_2,
                      LNAS_3,
                      LNCH_1,
                      LNCH_2,
                      LNCH_3
                 FROM SPECIFICATION_PROP
                WHERE PART_NO = ASPARTNO
                  AND REVISION = ANREVISION
                  AND SECTION_ID = REC_UPD.SECTION_ID
                  AND SUB_SECTION_ID = REC_UPD.SUB_SECTION_ID
                  AND PROPERTY_GROUP = REC_UPD.PROPERTY_GROUP
                  AND PROPERTY = REC_UPD.PROPERTY
                  AND ATTRIBUTE = REC_UPD.ATTRIBUTE;

               
               IF REC_UPD.ASSOCIATION IS NOT NULL
               THEN
                  
                  IF LNCH_1 IS NOT NULL
                  THEN
                     
                     IF REC_UPD.ASSOCIATION != LNAS_1
                     THEN
                        SELECT COUNT( * )
                          INTO I
                          FROM CHARACTERISTIC_ASSOCIATION
                         WHERE ASSOCIATION = REC_UPD.ASSOCIATION
                           AND CHARACTERISTIC = LNCH_1;

                        
                        IF I = 0
                        THEN
                           LNCH_1 := REC_UPD.CHARACTERISTIC;
                        ELSE
                           NULL;   
                        END IF;
                     ELSE
                        NULL;   
                     END IF;
                  ELSE
                     LNCH_1 := REC_UPD.CHARACTERISTIC;
                  END IF;
               ELSE
                  LNCH_1 := NULL;
               END IF;

               
               IF REC_UPD.AS_2 IS NOT NULL
               THEN
                  
                  IF LNCH_2 IS NOT NULL
                  THEN
                     
                     IF REC_UPD.AS_2 != LNAS_2
                     THEN
                        SELECT COUNT( * )
                          INTO I
                          FROM CHARACTERISTIC_ASSOCIATION
                         WHERE ASSOCIATION = REC_UPD.AS_2
                           AND CHARACTERISTIC = LNCH_2;

                        
                        IF I = 0
                        THEN
                           LNCH_2 := REC_UPD.CH_2;
                        ELSE
                           NULL;   
                        END IF;
                     ELSE
                        NULL;   
                     END IF;
                  ELSE
                     LNCH_2 := REC_UPD.CH_2;
                  END IF;
               ELSE
                  LNCH_2 := NULL;
               END IF;

               
               IF REC_UPD.AS_3 IS NOT NULL
               THEN
                  
                  IF LNCH_3 IS NOT NULL
                  THEN
                     
                     IF REC_UPD.AS_3 != LNAS_3
                     THEN
                        SELECT COUNT( * )
                          INTO I
                          FROM CHARACTERISTIC_ASSOCIATION
                         WHERE ASSOCIATION = REC_UPD.AS_3
                           AND CHARACTERISTIC = LNCH_3;

                        
                        IF I = 0
                        THEN
                           LNCH_3 := REC_UPD.CH_3;
                        ELSE
                           NULL;   
                        END IF;
                     ELSE
                        NULL;   
                     END IF;
                  ELSE
                     LNCH_3 := REC_UPD.CH_3;
                  END IF;
               ELSE
                  LNCH_3 := NULL;
               END IF;




               UPDATE SPECIFICATION_PROP
                  SET NUM_1 = DECODE( NUM_1,
                                      NULL, REC_UPD.NUM_1,
                                      NUM_1 ),
                      NUM_2 = DECODE( NUM_2,
                                      NULL, REC_UPD.NUM_2,
                                      NUM_2 ),
                      NUM_3 = DECODE( NUM_3,
                                      NULL, REC_UPD.NUM_3,
                                      NUM_3 ),
                      NUM_4 = DECODE( NUM_4,
                                      NULL, REC_UPD.NUM_4,
                                      NUM_4 ),
                      NUM_5 = DECODE( NUM_5,
                                      NULL, REC_UPD.NUM_5,
                                      NUM_5 ),
                      NUM_6 = DECODE( NUM_6,
                                      NULL, REC_UPD.NUM_6,
                                      NUM_6 ),
                      NUM_7 = DECODE( NUM_7,
                                      NULL, REC_UPD.NUM_7,
                                      NUM_7 ),
                      NUM_8 = DECODE( NUM_8,
                                      NULL, REC_UPD.NUM_8,
                                      NUM_8 ),
                      NUM_9 = DECODE( NUM_9,
                                      NULL, REC_UPD.NUM_9,
                                      NUM_9 ),
                      NUM_10 = DECODE( NUM_10,
                                       NULL, REC_UPD.NUM_10,
                                       NUM_10 ),
                      CHAR_1 = DECODE( CHAR_1,
                                       NULL, REC_UPD.CHAR_1,
                                       CHAR_1 ),
                      CHAR_2 = DECODE( CHAR_2,
                                       NULL, REC_UPD.CHAR_2,
                                       CHAR_2 ),
                      CHAR_3 = DECODE( CHAR_3,
                                       NULL, REC_UPD.CHAR_3,
                                       CHAR_3 ),
                      CHAR_4 = DECODE( CHAR_4,
                                       NULL, REC_UPD.CHAR_4,
                                       CHAR_4 ),
                      CHAR_5 = DECODE( CHAR_5,
                                       NULL, REC_UPD.CHAR_5,
                                       CHAR_5 ),
                      CHAR_6 = DECODE( CHAR_6,
                                       NULL, REC_UPD.CHAR_6,
                                       CHAR_6 ),
                      BOOLEAN_1 = DECODE( BOOLEAN_1,
                                          NULL, REC_UPD.BOOLEAN_1,
                                          BOOLEAN_1 ),
                      BOOLEAN_2 = DECODE( BOOLEAN_2,
                                          NULL, REC_UPD.BOOLEAN_2,
                                          BOOLEAN_2 ),
                      BOOLEAN_3 = DECODE( BOOLEAN_3,
                                          NULL, REC_UPD.BOOLEAN_3,
                                          BOOLEAN_3 ),
                      BOOLEAN_4 = DECODE( BOOLEAN_4,
                                          NULL, REC_UPD.BOOLEAN_4,
                                          BOOLEAN_4 ),
                      DATE_1 = DECODE( DATE_1,
                                       NULL, REC_UPD.DATE_1,
                                       DATE_1 ),
                      DATE_2 = DECODE( DATE_2,
                                       NULL, REC_UPD.DATE_2,
                                       DATE_2 ),



                      CHARACTERISTIC = LNCH_1,
                      CHARACTERISTIC_REV = 0,
                      CH_2 = LNCH_2,
                      CH_REV_2 = 0,
                      CH_3 = LNCH_3,
                      CH_REV_3 = 0,
                      ASSOCIATION = REC_UPD.ASSOCIATION,
                      ASSOCIATION_REV = REC_UPD.ASSOCIATION_REV,
                      AS_2 = REC_UPD.AS_2,
                      AS_REV_2 = REC_UPD.AS_REV_2,
                      AS_3 = REC_UPD.AS_3,
                      AS_REV_3 = REC_UPD.AS_REV_3



               WHERE  PART_NO = ASPARTNO
                  AND REVISION = ANREVISION
                  AND SECTION_ID = REC_UPD.SECTION_ID
                  AND SUB_SECTION_ID = REC_UPD.SUB_SECTION_ID
                  AND PROPERTY_GROUP = REC_UPD.PROPERTY_GROUP
                  AND PROPERTY = REC_UPD.PROPERTY
                  AND ATTRIBUTE = REC_UPD.ATTRIBUTE;



            END IF;



         END LOOP;
      EXCEPTION
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL );
      END;

      
      BEGIN
         SELECT COUNT( * )
           INTO LNCHECKBOM
           FROM SPECIFICATION_SECTION
          WHERE PART_NO = ASINTLPARTNO
            AND REVISION = ANINTLPARTREV
            AND TYPE = IAPICONSTANT.SECTIONTYPE_BOM;

         IF LNCHECKBOM = 0
         THEN
            DELETE FROM BOM_ITEM
                  WHERE PART_NO = ASPARTNO
                    AND REVISION = ANREVISION;

            DELETE FROM BOM_HEADER
                  WHERE PART_NO = ASPARTNO
                    AND REVISION = ANREVISION;

            
            LNRETVAL := IAPIPLANTPART.SETPLANTACCESS( ASPARTNO );

            IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
            THEN
               IAPIGENERAL.LOGERROR( GSSOURCE,
                                     LSMETHOD,
                                     IAPIGENERAL.GETLASTERRORTEXT( ) );
               RETURN LNRETVAL;
            END IF;
         END IF;
      EXCEPTION
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL );
      END;

      
      BEGIN
           
           
         
           
           
         SELECT COUNT( * )
           INTO LNCHECKPROCESS
           FROM FRAME_SECTION
          WHERE ( FRAME_NO, REVISION ) = ( SELECT FRAME_ID,
                                                  FRAME_REV
                                            FROM SPECIFICATION_HEADER SH
                                           WHERE SH.PART_NO = ASINTLPARTNO
                                             AND SH.REVISION = ANINTLPARTREV )
            AND TYPE = IAPICONSTANT.SECTIONTYPE_PROCESSDATA;

         IF LNCHECKPROCESS = 0
         THEN
            DELETE FROM SPECIFICATION_LINE
                  WHERE PART_NO = ASPARTNO
                    AND REVISION = ANREVISION;

            DELETE FROM SPECIFICATION_STAGE
                  WHERE PART_NO = ASPARTNO
                    AND REVISION = ANREVISION;

            DELETE FROM SPECIFICATION_LINE_PROP
                  WHERE PART_NO = ASPARTNO
                    AND REVISION = ANREVISION;

            DELETE FROM ITSHLNPROPLANG
                  WHERE PART_NO = ASPARTNO
                    AND REVISION = ANREVISION;

            DELETE FROM SPECIFICATION_LINE_TEXT
                  WHERE PART_NO = ASPARTNO
                    AND REVISION = ANREVISION;
         END IF;
      EXCEPTION
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL );
      END;

      
      BEGIN
         DELETE FROM SPECIFICATION_TEXT
               WHERE PART_NO = ASPARTNO
                 AND REVISION = ANREVISION
                 AND ( SECTION_ID, SUB_SECTION_ID, TEXT_TYPE ) NOT IN(
                                                       SELECT SECTION_ID,
                                                              SUB_SECTION_ID,
                                                              REF_ID
                                                         FROM SPECIFICATION_SECTION
                                                        WHERE PART_NO = ASPARTNO
                                                          AND REVISION = ANREVISION
                                                          AND TYPE = IAPICONSTANT.SECTIONTYPE_FREETEXT );
      EXCEPTION
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL );
      END;

      
      BEGIN
         DELETE FROM ATTACHED_SPECIFICATION
               WHERE PART_NO = ASPARTNO
                 AND REVISION = ANREVISION
                 AND ( REF_ID ) NOT IN( SELECT REF_ID
                                         FROM SPECIFICATION_SECTION
                                        WHERE PART_NO = ASPARTNO
                                          AND REVISION = ANREVISION
                                          AND TYPE = IAPICONSTANT.SECTIONTYPE_ATTACHEDSPEC );
      EXCEPTION
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL );
      END;

      
      BEGIN
         INSERT INTO SPECIFICATION_TEXT
                     ( PART_NO,
                       REVISION,
                       SECTION_ID,
                       SUB_SECTION_ID,
                       SECTION_REV,
                       SUB_SECTION_REV,
                       TEXT_TYPE,
                       TEXT_TYPE_REV )
            SELECT PART_NO,
                   REVISION,
                   SECTION_ID,
                   SUB_SECTION_ID,
                   SECTION_REV,
                   SUB_SECTION_REV,
                   REF_ID,
                   REF_VER
              FROM SPECIFICATION_SECTION
             WHERE PART_NO = ASPARTNO
               AND REVISION = ANREVISION
               AND TYPE = IAPICONSTANT.SECTIONTYPE_FREETEXT
               AND ( SECTION_ID, SUB_SECTION_ID, REF_ID ) NOT IN( SELECT SECTION_ID,
                                                                         SUB_SECTION_ID,
                                                                         TEXT_TYPE
                                                                   FROM SPECIFICATION_TEXT B
                                                                  WHERE B.PART_NO = ASPARTNO
                                                                    AND B.REVISION = ANREVISION );
      EXCEPTION
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL );
      END;

      
      BEGIN
         FOR REC_TEXT IN LS_UPD_FREE_TEXT
         LOOP
            UPDATE SPECIFICATION_TEXT
               SET TEXT = REC_TEXT.TEXT
             WHERE PART_NO = ASPARTNO
               AND REVISION = ANREVISION
               AND SECTION_ID = REC_TEXT.SECTION_ID
               AND SUB_SECTION_ID = REC_TEXT.SUB_SECTION_ID
               AND TEXT_TYPE = REC_TEXT.TEXT_TYPE
               AND LANG_ID = REC_TEXT.LANG_ID;
         END LOOP;
      EXCEPTION
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL );
      END;

      

      FOR L_ROW IN L_SPEC_SECTION_CURSOR
      LOOP
         BEGIN
            SELECT ATTACHED_SPEC_SEQ.NEXTVAL
              INTO LNATTACHEDSPEC
              FROM DUAL;

            UPDATE SPECIFICATION_SECTION
               
               
               SET REF_ID = LNATTACHEDSPEC
               
             WHERE PART_NO = L_ROW.PART_NO
               AND REVISION = L_ROW.REVISION
               AND SECTION_ID = L_ROW.SECTION_ID
               AND SUB_SECTION_ID = L_ROW.SUB_SECTION_ID
               AND REF_ID = 0
               AND SPECIFICATION_SECTION.TYPE = IAPICONSTANT.SECTIONTYPE_ATTACHEDSPEC;

            UPDATE ATTACHED_SPECIFICATION
               SET REF_ID = LNATTACHEDSPEC
             WHERE PART_NO = L_ROW.PART_NO
               AND REVISION = L_ROW.REVISION
               AND SECTION_ID = L_ROW.SECTION_ID
               AND SUB_SECTION_ID = L_ROW.SUB_SECTION_ID
               AND REF_ID = 0;

              
              









               







              

         EXCEPTION
            WHEN OTHERS
            THEN
               IAPIGENERAL.LOGERROR( GSSOURCE,
                                     LSMETHOD,
                                     SQLERRM );
               RETURN IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL );
         END;
      END LOOP;

      
      
      BEGIN
         FOR REC_REF_TEXT IN L_REF_TEXT_CURSOR
         LOOP
            BEGIN
               SELECT SECTION_SEQUENCE_NO
                 INTO LNNEWSEQUENCE
                 FROM SPECIFICATION_SECTION
                WHERE PART_NO = ASINTLPARTNO
                  AND REVISION = ANINTLPARTREV
                  AND SECTION_ID = REC_REF_TEXT.SECTION_ID
                  AND SUB_SECTION_ID = REC_REF_TEXT.SUB_SECTION_ID
                  AND TYPE = REC_REF_TEXT.TYPE
                  AND REF_ID = 0
                  AND MOD( SECTION_SEQUENCE_NO,
                           '100' ) = 0;
            EXCEPTION
               WHEN NO_DATA_FOUND
               THEN
                  LNNEWSEQUENCE := -1;
            END;

            IF LNNEWSEQUENCE = 1
            THEN
               BEGIN
                  DELETE FROM SPECIFICATION_SECTION
                        WHERE PART_NO = ASPARTNO
                          AND REVISION = ANREVISION
                          AND SECTION_ID = REC_REF_TEXT.SECTION_ID
                          AND SUB_SECTION_ID = REC_REF_TEXT.SUB_SECTION_ID
                          AND TYPE = REC_REF_TEXT.TYPE
                          AND REF_ID = REC_REF_TEXT.REF_ID
                          AND REF_VER = REC_REF_TEXT.REF_VER
                          AND REF_OWNER = REC_REF_TEXT.REF_OWNER;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     IAPIGENERAL.LOGERROR( GSSOURCE,
                                           LSMETHOD,
                                           SQLERRM );
                     RETURN IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL );
               END;
            ELSE
               LNNEWSEQUENCE :=   LNNEWSEQUENCE
                                + REC_REF_TEXT.MOD_SEQUENCE;

               UPDATE SPECIFICATION_SECTION
                  SET SECTION_SEQUENCE_NO = LNNEWSEQUENCE
                WHERE PART_NO = ASPARTNO
                  AND REVISION = ANREVISION
                  AND SECTION_ID = REC_REF_TEXT.SECTION_ID
                  AND SUB_SECTION_ID = REC_REF_TEXT.SUB_SECTION_ID
                  AND TYPE = REC_REF_TEXT.TYPE
                  AND REF_ID = REC_REF_TEXT.REF_ID
                  AND REF_VER = REC_REF_TEXT.REF_VER
                  AND REF_OWNER = REC_REF_TEXT.REF_OWNER
                  AND SECTION_SEQUENCE_NO = REC_REF_TEXT.SECTION_SEQUENCE_NO;
            END IF;
         END LOOP;
      END;

      
      
      BEGIN
         FOR REC_REF_OBJ IN L_REF_OBJ_CURSOR
         LOOP
            BEGIN
               SELECT SECTION_SEQUENCE_NO
                 INTO LNNEWSEQUENCE
                 FROM SPECIFICATION_SECTION
                WHERE PART_NO = ASINTLPARTNO
                  AND REVISION = ANINTLPARTREV
                  AND SECTION_ID = REC_REF_OBJ.SECTION_ID
                  AND SUB_SECTION_ID = REC_REF_OBJ.SUB_SECTION_ID
                  AND TYPE = REC_REF_OBJ.TYPE
                  AND REF_ID = 0
                  AND MOD( SECTION_SEQUENCE_NO,
                           '100' ) = 0;

               DBMS_OUTPUT.PUT_LINE(    REC_REF_OBJ.SECTION_ID
                                     || '   lnNewSequence  '
                                     || LNNEWSEQUENCE );
            EXCEPTION
               WHEN NO_DATA_FOUND
               THEN
                  LNNEWSEQUENCE := -1;
            END;

            IF LNNEWSEQUENCE = 1
            THEN
               BEGIN
                  DELETE FROM SPECIFICATION_SECTION
                        WHERE PART_NO = ASPARTNO
                          AND REVISION = ANREVISION
                          AND SECTION_ID = REC_REF_OBJ.SECTION_ID
                          AND SUB_SECTION_ID = REC_REF_OBJ.SUB_SECTION_ID
                          AND TYPE = REC_REF_OBJ.TYPE
                          AND REF_ID = REC_REF_OBJ.REF_ID
                          AND REF_VER = REC_REF_OBJ.REF_VER
                          AND REF_OWNER = REC_REF_OBJ.REF_OWNER;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     IAPIGENERAL.LOGERROR( GSSOURCE,
                                           LSMETHOD,
                                           SQLERRM );
                     RETURN IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL );
               END;
            ELSE
               LNNEWSEQUENCE :=   LNNEWSEQUENCE
                                + REC_REF_OBJ.MOD_SEQUENCE;

               UPDATE SPECIFICATION_SECTION
                  SET SECTION_SEQUENCE_NO = LNNEWSEQUENCE
                WHERE PART_NO = ASPARTNO
                  AND REVISION = ANREVISION
                  AND SECTION_ID = REC_REF_OBJ.SECTION_ID
                  AND SUB_SECTION_ID = REC_REF_OBJ.SUB_SECTION_ID
                  AND TYPE = REC_REF_OBJ.TYPE
                  AND REF_ID = REC_REF_OBJ.REF_ID
                  AND REF_VER = REC_REF_OBJ.REF_VER
                  AND REF_OWNER = REC_REF_OBJ.REF_OWNER
                  AND SECTION_SEQUENCE_NO = REC_REF_OBJ.SECTION_SEQUENCE_NO;
            END IF;
         END LOOP;
      END;

      FOR REC_SEQUENCE IN L_SEQUENCE_CURSOR
      LOOP
         BEGIN
            IF REC_SEQUENCE.REF_OWNER IS NULL
            THEN
               UPDATE SPECIFICATION_SECTION
                  SET SECTION_SEQUENCE_NO = REC_SEQUENCE.SECTION_SEQUENCE_NO
                WHERE PART_NO = ASPARTNO
                  AND REVISION = ANREVISION
                  AND SECTION_ID = REC_SEQUENCE.SECTION_ID
                  AND SUB_SECTION_ID = REC_SEQUENCE.SUB_SECTION_ID
                  AND TYPE = REC_SEQUENCE.TYPE
                  AND REF_ID = REC_SEQUENCE.REF_ID
                  AND REF_VER = REC_SEQUENCE.REF_VER
                  AND REF_OWNER IS NULL;
            ELSE
               UPDATE SPECIFICATION_SECTION
                  SET SECTION_SEQUENCE_NO = REC_SEQUENCE.SECTION_SEQUENCE_NO
                WHERE PART_NO = ASPARTNO
                  AND REVISION = ANREVISION
                  AND SECTION_ID = REC_SEQUENCE.SECTION_ID
                  AND SUB_SECTION_ID = REC_SEQUENCE.SUB_SECTION_ID
                  AND TYPE = REC_SEQUENCE.TYPE
                  AND REF_ID = REC_SEQUENCE.REF_ID
                  AND REF_VER = REC_SEQUENCE.REF_VER
                  AND REF_OWNER = REC_SEQUENCE.REF_OWNER;
            END IF;
         EXCEPTION
            WHEN OTHERS
            THEN
               IAPIGENERAL.LOGERROR( GSSOURCE,
                                     LSMETHOD,
                                     SQLERRM );
               RETURN IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL );
         END;
      END LOOP;

      
      BEGIN
         INSERT INTO SPECDATA_SERVER
                     ( PART_NO,
                       REVISION )
              VALUES ( ASPARTNO,
                       ANREVISION );
      EXCEPTION
         WHEN OTHERS
         THEN
            NULL;
      END;

      RETURN IAPICONSTANTDBERROR.DBERR_SUCCESS;
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL );
   END VALIDATEINTERNATIONALSPEC;


   FUNCTION INITIALISEFORCREATE(
      ASPREFIX                   OUT      IAPITYPE.PREFIX_TYPE,
      ASCODE                     OUT      IAPITYPE.PARTNO_TYPE,
      ASDESCRIPTION              OUT      IAPITYPE.DESCRIPTION_TYPE,
      ADPLANNEDEFFECTIVEDATE     OUT      IAPITYPE.DATE_TYPE,
      ANMETRIC                   OUT      IAPITYPE.BOOLEAN_TYPE,
      ANMULTILANGUAGE            OUT      IAPITYPE.BOOLEAN_TYPE,
      ASFRAMENO                  OUT      IAPITYPE.FRAMENO_TYPE,
      ANFRAMEREVISION            OUT      IAPITYPE.FRAMEREVISION_TYPE,
      ANOWNER                    OUT      IAPITYPE.OWNER_TYPE,
      ANFRAMEMASK                OUT      IAPITYPE.ID_TYPE,
      ANWORKFLOWGROUPID          OUT      IAPITYPE.WORKFLOWGROUPID_TYPE,
      ANACCESSGROUPID            OUT      IAPITYPE.ID_TYPE,
      ANSPECTYPEID               OUT      IAPITYPE.ID_TYPE,
      ASUOM                      OUT      IAPITYPE.BASEUOM_TYPE,
      ASCONVERSIONFACTOR         OUT      IAPITYPE.NUMVAL_TYPE,
      ASCONVERSIONUOM            OUT      IAPITYPE.BASETOUNIT_TYPE,
      AQERRORS                   OUT      IAPITYPE.REF_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'InitialiseForCreate';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );






      IF ( AQERRORS%ISOPEN )
      THEN
         CLOSE AQERRORS;
      END IF;

      GTERRORS.DELETE;
      LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                             AQERRORS );
      


      
      LNRETVAL := IAPIUSERPREFERENCES.GETUSERPREFERENCE( 'Create/Copy',
                                                         'CreateSpecificationsInMetric',
                                                         ANMETRIC );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IAPIGENERAL.LOGINFO( GSSOURCE,
                              LSMETHOD,
                              IAPIGENERAL.GETLASTERRORTEXT( ) );
         LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( LSMETHOD,
                                                 IAPIGENERAL.GETLASTERRORTEXT( ),
                                                 GTERRORS );
      END IF;

      IF ( GTERRORS.COUNT > 0 )
      THEN
         
         LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                                AQERRORS );
         RETURN( IAPICONSTANTDBERROR.DBERR_ERRORLIST );
      END IF;

       


      ADPLANNEDEFFECTIVEDATE := GETDEFAULTPED( );
      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END INITIALISEFORCREATE;


   FUNCTION INITIALISEFORCOPY(
      ASFROMPARTNO               IN       IAPITYPE.PARTNO_TYPE,
      ANFROMREVISION             IN       IAPITYPE.REVISION_TYPE,
      ANCREATENEWREVISION        IN       IAPITYPE.REVISION_TYPE,
      ASPREFIX                   OUT      IAPITYPE.PREFIX_TYPE,
      ASCODE                     OUT      IAPITYPE.PARTNO_TYPE,
      ASDESCRIPTION              OUT      IAPITYPE.DESCRIPTION_TYPE,
      ADPLANNEDEFFECTIVEDATE     OUT      IAPITYPE.DATE_TYPE,
      ANMETRIC                   OUT      IAPITYPE.BOOLEAN_TYPE,
      ANMULTILANGUAGE            OUT      IAPITYPE.BOOLEAN_TYPE,
      ASFRAMENO                  OUT      IAPITYPE.FRAMENO_TYPE,
      ANFRAMEREVISION            OUT      IAPITYPE.FRAMEREVISION_TYPE,
      ANOWNER                    OUT      IAPITYPE.OWNER_TYPE,
      ANFRAMEMASK                OUT      IAPITYPE.ID_TYPE,
      ANWORKFLOWGROUPID          OUT      IAPITYPE.WORKFLOWGROUPID_TYPE,
      ANACCESSGROUPID            OUT      IAPITYPE.ID_TYPE,
      ANSPECTYPEID               OUT      IAPITYPE.ID_TYPE,
      ASUOM                      OUT      IAPITYPE.BASEUOM_TYPE,
      ASCONVERSIONFACTOR         OUT      IAPITYPE.NUMVAL_TYPE,
      ASCONVERSIONUOM            OUT      IAPITYPE.BASETOUNIT_TYPE,
      AQERRORS                   OUT      IAPITYPE.REF_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS
      
      CURSOR LSSH(
         ASPARTNO                            IAPITYPE.PARTNO_TYPE,
         ANREVISION                 IN       IAPITYPE.REVISION_TYPE )
      IS
         
         
         SELECT F_FIND_PART_DESCR(PART_NO) DESCRIPTION,
         
                UOM_TYPE,
                MULTILANG,
                CLASS3_ID ST_ID,
                FRAME_ID,
                FRAME_OWNER,
                MASK_ID,
                ACCESS_GROUP AG_ID,
                WORKFLOW_GROUP_ID WFG_ID,
                INTL
           FROM SPECIFICATION_HEADER
          WHERE PART_NO = ASPARTNO
            AND REVISION = ANREVISION;

      
      CURSOR LQPA(
         ASPARTNO                            IAPITYPE.PARTNO_TYPE )
      IS
         SELECT BASE_TO_UNIT CONVERSION_UOM,
                BASE_CONV_FACTOR CONVERSION_FACTOR,
                BASE_UOM UOM
           FROM PART
          WHERE PART_NO = ASPARTNO;

      
      CURSOR LQFRM(
         ASFRAMENO                           IAPITYPE.FRAMENO_TYPE,
         ANFRAMEOWNER                        IAPITYPE.OWNER_TYPE )
      IS
         SELECT FRAME_NO,
                REVISION,
                OWNER
           FROM FRAME_HEADER
          WHERE STATUS = 2
            AND FRAME_NO = ASFRAMENO
            AND OWNER = ANFRAMEOWNER;

      
      CURSOR LQFRMMASK(
         ASFRAMENO                           IAPITYPE.FRAMENO_TYPE,
         ANREVISION                          IAPITYPE.FRAMEREVISION_TYPE,
         ANOWNER                             IAPITYPE.OWNER_TYPE,
         ANMASKID                            IAPITYPE.ID_TYPE )
      IS
         SELECT COUNT( * ) COUNT
           FROM ITFRMV
          WHERE FRAME_NO = ASFRAMENO
            AND REVISION = ANREVISION
            AND OWNER = ANOWNER
            AND VIEW_ID = ANMASKID
            AND STATUS = 0;

      
      CURSOR LQPED(
         ASPARTNO                            IAPITYPE.PARTNO_TYPE,
         ADDEFAULTDATE                       IAPITYPE.DATE_TYPE )
      IS
         SELECT MAX( PED ) PED
           FROM ( SELECT   TRUNC( PLANNED_EFFECTIVE_DATE )
                         + 1 PED
                   FROM SPECIFICATION_HEADER
                  WHERE PART_NO = ASPARTNO
                 UNION
                 SELECT   TRUNC( PLANT_EFFECTIVE_DATE )
                        + 1 PED
                   FROM BOM_HEADER
                  WHERE PART_NO = ASPARTNO );

      LSMETHOD                      IAPITYPE.SOURCE_TYPE := 'InitialiseForCopy';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LNCOUNT                       IAPITYPE.NUMVAL_TYPE;
      LNHASCURRENTFRAME             IAPITYPE.NUMVAL_TYPE DEFAULT 0;
      LNPOSITION                    IAPITYPE.NUMVAL_TYPE;
      LSPREFIX                      IAPITYPE.PREFIX_TYPE;
   BEGIN





      IF ( AQERRORS%ISOPEN )
      THEN
         CLOSE AQERRORS;
      END IF;




      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );
      GTERRORS.DELETE;
      LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                             AQERRORS );
      
      LNRETVAL := IAPISPECIFICATION.EXISTID( ASFROMPARTNO,
                                             ANFROMREVISION );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN( LNRETVAL );
      END IF;

      
      
      
      ADPLANNEDEFFECTIVEDATE := GETDEFAULTPED( );

      IF ANCREATENEWREVISION = 1
      THEN
         FOR LRPED IN LQPED( ASFROMPARTNO,
                             ADPLANNEDEFFECTIVEDATE )
         LOOP
            IF LRPED.PED > ADPLANNEDEFFECTIVEDATE
            THEN
               ADPLANNEDEFFECTIVEDATE := LRPED.PED;
            END IF;
         END LOOP;
      END IF;

      FOR LRSH IN LSSH( ASFROMPARTNO,
                        ANFROMREVISION )
      LOOP
         
         
         
         IF ANCREATENEWREVISION = 1
         THEN
            IF LRSH.INTL = 1
            THEN
               LNPOSITION := INSTR( ASFROMPARTNO,
                                    '-' );

               IF LNPOSITION > 0
               THEN
                  


                  LSPREFIX := SUBSTR( ASFROMPARTNO,
                                      1,
                                        LNPOSITION
                                      - 1 );
                  LNRETVAL := VALIDATEFIELDPREFIX( LSPREFIX );

                  IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
                  THEN
                     IAPIGENERAL.LOGERROR( GSSOURCE,
                                           LSMETHOD,
                                           IAPIGENERAL.GETLASTERRORTEXT( ) );
                     RETURN( LNRETVAL );
                  ELSE
                     ASPREFIX := LSPREFIX;
                     ASCODE := SUBSTR( ASFROMPARTNO,
                                         LNPOSITION
                                       + 1 );
                  END IF;
               ELSE
                  RETURN( IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                              LSMETHOD,
                                                              IAPICONSTANTDBERROR.DBERR_PREFIXDOESNOTEXIST ) );
               END IF;
            ELSE
               ASCODE := ASFROMPARTNO;
            END IF;
         END IF;

         
         
         
         ASDESCRIPTION := LRSH.DESCRIPTION;
         
         
         
         ANSPECTYPEID := LRSH.ST_ID;

         IF ANCREATENEWREVISION = 0
         THEN
            LNRETVAL := VALIDATEFIELDSPECTYPE( ANSPECTYPEID,
                                               AQERRORS );

            IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
            THEN
               ANSPECTYPEID := NULL;
            END IF;
         END IF;

          
          
          
         
         IF LRSH.UOM_TYPE = 0
         THEN
            ANMETRIC := 1;
         ELSE
            ANMETRIC := 0;
         END IF;

         
         
         
         ANMULTILANGUAGE := LRSH.MULTILANG;

         
         
         
         FOR LRFRM IN LQFRM( LRSH.FRAME_ID,
                             LRSH.FRAME_OWNER )
         LOOP
            IF LNHASCURRENTFRAME = 1
            THEN
               RETURN IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                          LSMETHOD,
                                                          IAPICONSTANTDBERROR.DBERR_MORETHANONECURRENTFRAME,
                                                          ASFRAMENO );
            END IF;

            LNHASCURRENTFRAME := 1;
            ASFRAMENO := LRFRM.FRAME_NO;
            ANFRAMEREVISION := LRFRM.REVISION;
            ANOWNER := LRFRM.OWNER;
         END LOOP;

         IF LNHASCURRENTFRAME = 0
         THEN
            
            






            
            NULL;
            
         ELSE
               
               
            
            IF     NOT LRSH.MASK_ID IS NULL
               AND LRSH.MASK_ID <> -1
               AND LRSH.MASK_ID <> 0
            THEN
               
               
               
               FOR LRFRMMASK IN LQFRMMASK( ASFRAMENO,
                                           ANFRAMEREVISION,
                                           ANOWNER,
                                           LRSH.MASK_ID )
               LOOP
                  LNCOUNT := LRFRMMASK.COUNT;
               END LOOP;

               IF LNCOUNT = 0
               THEN
                  RETURN( IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                              LSMETHOD,
                                                              IAPICONSTANTDBERROR.DBERR_FRAMEMASKNOTEXIST,
                                                              
                                                              
                                                              F_GET_MASK(ASFRAMENO, ANFRAMEREVISION, ANOWNER, LRSH.MASK_ID),
                                                              
                                                              ASFRAMENO,
                                                              ANFRAMEREVISION,
                                                              ANOWNER ) );
               ELSE
                  ANFRAMEMASK := LRSH.MASK_ID;
               END IF;
            END IF;
         END IF;

         
         
         
         LNRETVAL := VALIDATEFIELDWORKFLOWGROUP( LRSH.WFG_ID,
                                                 AQERRORS );

         IF ( LNRETVAL = IAPICONSTANTDBERROR.DBERR_SUCCESS )
         THEN
            ANWORKFLOWGROUPID := LRSH.WFG_ID;
         END IF;

         
         
         
          
         LNRETVAL := VALIDATEFIELDACCESSGROUP( LRSH.AG_ID,
                                               AQERRORS );

         IF ( LNRETVAL = IAPICONSTANTDBERROR.DBERR_SUCCESS )
         THEN
            ANACCESSGROUPID := LRSH.AG_ID;
         END IF;
      END LOOP;

      FOR LRPA IN LQPA( ASFROMPARTNO )
      LOOP
         
         
         
         ASUOM := LRPA.UOM;

         
         
         IF ANCREATENEWREVISION = 0
         THEN
            LNRETVAL := VALIDATEFIELDUOM( ASUOM,
                                          AQERRORS );
         END IF;

         
         
         
         ASCONVERSIONFACTOR := LRPA.CONVERSION_FACTOR;
         
         
         
         ASCONVERSIONUOM := LRPA.CONVERSION_UOM;

          
         
         IF ANCREATENEWREVISION = 0
         THEN
            LNRETVAL := VALIDATEFIELDUOM( ASCONVERSIONUOM,
                                          AQERRORS );
         END IF;
      END LOOP;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END INITIALISEFORCOPY;


   FUNCTION INITIALISEFORLOCALISE(
      ASFROMPARTNO               IN       IAPITYPE.PARTNO_TYPE,
      ANFROMREVISION             IN       IAPITYPE.REVISION_TYPE,
      ASPREFIX                   OUT      IAPITYPE.PREFIX_TYPE,
      ASCODE                     OUT      IAPITYPE.PARTNO_TYPE,
      ASDESCRIPTION              OUT      IAPITYPE.DESCRIPTION_TYPE,
      ADPLANNEDEFFECTIVEDATE     OUT      IAPITYPE.DATE_TYPE,
      ANMETRIC                   OUT      IAPITYPE.BOOLEAN_TYPE,
      ANMULTILANGUAGE            OUT      IAPITYPE.BOOLEAN_TYPE,
      ASFRAMENO                  OUT      IAPITYPE.FRAMENO_TYPE,
      ANFRAMEREVISION            OUT      IAPITYPE.FRAMEREVISION_TYPE,
      ANOWNER                    OUT      IAPITYPE.OWNER_TYPE,
      ANFRAMEMASK                OUT      IAPITYPE.ID_TYPE,
      ANWORKFLOWGROUPID          OUT      IAPITYPE.WORKFLOWGROUPID_TYPE,
      ANACCESSGROUPID            OUT      IAPITYPE.ID_TYPE,
      ANSPECTYPEID               OUT      IAPITYPE.ID_TYPE,
      ASUOM                      OUT      IAPITYPE.BASEUOM_TYPE,
      ASCONVERSIONFACTOR         OUT      IAPITYPE.NUMVAL_TYPE,
      ASCONVERSIONUOM            OUT      IAPITYPE.BASETOUNIT_TYPE,
      AQERRORS                   OUT      IAPITYPE.REF_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS
      
      CURSOR LSSH(
         ASPARTNO                            IAPITYPE.PARTNO_TYPE,
         ANREVISION                 IN       IAPITYPE.REVISION_TYPE )
      IS
         SELECT DESCRIPTION,
                UOM_TYPE,
                MULTILANG,
                CLASS3_ID ST_ID,
                FRAME_ID,
                FRAME_OWNER,
                MASK_ID,
                ACCESS_GROUP AG_ID,
                FRAME_REV,
                WORKFLOW_GROUP_ID WFG_ID,
                INTL
           FROM SPECIFICATION_HEADER
          WHERE PART_NO = ASPARTNO
            AND REVISION = ANREVISION;

      
      CURSOR LQPA(
         ASPARTNO                            IAPITYPE.PARTNO_TYPE )
      IS
         SELECT BASE_TO_UNIT CONVERSION_UOM,
                BASE_CONV_FACTOR CONVERSION_FACTOR,
                BASE_UOM UOM
           FROM PART
          WHERE PART_NO = ASPARTNO;

      LSMETHOD                      IAPITYPE.SOURCE_TYPE := 'InitialiseForLocalise';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );






      IF ( AQERRORS%ISOPEN )
      THEN
         CLOSE AQERRORS;
      END IF;

      GTERRORS.DELETE;
      LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                             AQERRORS );
      
      
      
      ADPLANNEDEFFECTIVEDATE := GETDEFAULTPED( );

      FOR LRSH IN LSSH( ASFROMPARTNO,
                        ANFROMREVISION )
      LOOP
         
          
          
         ANSPECTYPEID := LRSH.ST_ID;
         LNRETVAL := VALIDATEFIELDSPECTYPE( ANSPECTYPEID,
                                            AQERRORS );

         IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
         THEN
            ANSPECTYPEID := NULL;
         END IF;

           
         
         
         ASDESCRIPTION := LRSH.DESCRIPTION;

               
          
          
         
         IF LRSH.UOM_TYPE = 0
         THEN
            ANMETRIC := 1;
         ELSE
            ANMETRIC := 0;
         END IF;

         
         
         
         ANMULTILANGUAGE := LRSH.MULTILANG;
          
         
           
         ASFRAMENO := LRSH.FRAME_ID;
         ANFRAMEREVISION := LRSH.FRAME_REV;
         ANOWNER := LRSH.FRAME_OWNER;

         IF     NOT LRSH.MASK_ID IS NULL
            AND LRSH.MASK_ID <> -1
            AND LRSH.MASK_ID <> 0
         THEN
            ANFRAMEMASK := LRSH.MASK_ID;
         END IF;

         
           
           
         LNRETVAL := VALIDATEFIELDWORKFLOWGROUP( LRSH.WFG_ID,
                                                 AQERRORS );

         IF ( LNRETVAL = IAPICONSTANTDBERROR.DBERR_SUCCESS )
         THEN
            ANWORKFLOWGROUPID := LRSH.WFG_ID;
         END IF;

         
         
         
          
         LNRETVAL := VALIDATEFIELDACCESSGROUP( LRSH.AG_ID,
                                               AQERRORS );

         IF ( LNRETVAL = IAPICONSTANTDBERROR.DBERR_SUCCESS )
         THEN
            ANACCESSGROUPID := LRSH.AG_ID;
         END IF;
      END LOOP;

      FOR LRPA IN LQPA( ASFROMPARTNO )
      LOOP
         
         
         
         ASUOM := LRPA.UOM;
         
         
         LNRETVAL := VALIDATEFIELDUOM( ASUOM,
                                       AQERRORS );
         
         
         
         ASCONVERSIONFACTOR := LRPA.CONVERSION_FACTOR;
         
         
         
         ASCONVERSIONUOM := LRPA.CONVERSION_UOM;
         LNRETVAL := VALIDATEFIELDUOM( ASCONVERSIONUOM,
                                       AQERRORS );
      END LOOP;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END INITIALISEFORLOCALISE;


   FUNCTION VALIDATEFORCREATE(
      ASPREFIX                   IN       IAPITYPE.PREFIX_TYPE,
      ASCODE                     IN       IAPITYPE.PARTNO_TYPE,
      ASDESCRIPTION              IN       IAPITYPE.DESCRIPTION_TYPE,
      ADPLANNEDEFFECTIVEDATE     IN       IAPITYPE.DATE_TYPE,
      ANMETRIC                   IN       IAPITYPE.BOOLEAN_TYPE,
      ANMULTILANGUAGE            IN       IAPITYPE.BOOLEAN_TYPE,
      ASFRAMENO                  IN       IAPITYPE.FRAMENO_TYPE,
      ANFRAMEREVISION            IN       IAPITYPE.FRAMEREVISION_TYPE,
      ANOWNER                    IN       IAPITYPE.OWNER_TYPE,
      ANFRAMEMASK                IN       IAPITYPE.ID_TYPE,
      ANWORKFLOWGROUPID          IN       IAPITYPE.WORKFLOWGROUPID_TYPE,
      ANACCESSGROUPID            IN       IAPITYPE.ID_TYPE,
      ANSPECTYPEID               IN       IAPITYPE.ID_TYPE,
      ASUOM                      IN       IAPITYPE.BASEUOM_TYPE,
      ASCONVERSIONFACTOR         IN       IAPITYPE.NUMVAL_TYPE,
      ASCONVERSIONUOM            IN       IAPITYPE.BASETOUNIT_TYPE,
      ASPARTNO                   OUT      IAPITYPE.PARTNO_TYPE,
      AQERRORS                   OUT      IAPITYPE.REF_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS
      LSMETHOD                      IAPITYPE.SOURCE_TYPE := 'ValidateForCreate';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LNCOUNT                       IAPITYPE.NUMVAL_TYPE;
      LSPARTNO                      IAPITYPE.PARTNO_TYPE;
      LNPARTEXIST                   IAPITYPE.NUMVAL_TYPE DEFAULT 0;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );






      IF ( AQERRORS%ISOPEN )
      THEN
         CLOSE AQERRORS;
      END IF;

      GTERRORS.DELETE;
      LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                             AQERRORS );
      LNRETVAL :=
         VALIDATEFIELD( ASPREFIX,
                        ASCODE,
                        ASDESCRIPTION,
                        ADPLANNEDEFFECTIVEDATE,
                        ANMETRIC,
                        ANMULTILANGUAGE,
                        ASFRAMENO,
                        ANFRAMEREVISION,
                        ANOWNER,
                        ANFRAMEMASK,
                        ANWORKFLOWGROUPID,
                        ANACCESSGROUPID,
                        ANSPECTYPEID,
                        ASUOM,
                        ASCONVERSIONFACTOR,
                        ASCONVERSIONUOM,
                        ASPARTNO,
                        AQERRORS );

      IF ( GTERRORS.COUNT > 0 )
      THEN
         
         LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                                AQERRORS );
         RETURN( IAPICONSTANTDBERROR.DBERR_ERRORLIST );
      END IF;

      
      
      
      
      IF ASPREFIX IS NOT NULL
      THEN
         LNRETVAL := VALIDATEFIELDPREFIX( ASPREFIX );

         IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
         THEN
            LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'Prefix',
                                                    IAPIGENERAL.GETLASTERRORTEXT( ),
                                                    GTERRORS );
         ELSE
            LNRETVAL := VALIDATEFIELDPARTNO( ASPREFIX,
                                             ASCODE,
                                             0,
                                             LNPARTEXIST,
                                             AQERRORS );

            IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
            THEN
               LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'Code',
                                                       IAPIGENERAL.GETLASTERRORTEXT( ),
                                                       GTERRORS );
            END IF;
         END IF;
      END IF;

      IF ( GTERRORS.COUNT > 0 )
      THEN
         
         LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                                AQERRORS );
         RETURN( IAPICONSTANTDBERROR.DBERR_ERRORLIST );
      END IF;

      ASPARTNO := GETPARTCODE( ASPREFIX,
                               ASCODE );
      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END VALIDATEFORCREATE;


   FUNCTION VALIDATEFORCOPY(
      ANCREATENEWREVISION        IN       IAPITYPE.BOOLEAN_TYPE,
      ASPREFIX                   IN       IAPITYPE.PREFIX_TYPE,
      ASCODE                     IN       IAPITYPE.PARTNO_TYPE,
      ASDESCRIPTION              IN       IAPITYPE.DESCRIPTION_TYPE,
      ADPLANNEDEFFECTIVEDATE     IN       IAPITYPE.DATE_TYPE,
      ANMETRIC                   IN       IAPITYPE.BOOLEAN_TYPE,
      ANMULTILANGUAGE            IN       IAPITYPE.BOOLEAN_TYPE,
      ASFRAMENO                  IN       IAPITYPE.FRAMENO_TYPE,
      ANFRAMEREVISION            IN       IAPITYPE.FRAMEREVISION_TYPE,
      ANOWNER                    IN       IAPITYPE.OWNER_TYPE,
      ANFRAMEMASK                IN       IAPITYPE.ID_TYPE,
      ANWORKFLOWGROUPID          IN       IAPITYPE.WORKFLOWGROUPID_TYPE,
      ANACCESSGROUPID            IN       IAPITYPE.ID_TYPE,
      ANSPECTYPEID               IN       IAPITYPE.ID_TYPE,
      ASUOM                      IN       IAPITYPE.BASEUOM_TYPE,
      ASCONVERSIONFACTOR         IN       IAPITYPE.NUMVAL_TYPE,
      ASCONVERSIONUOM            IN       IAPITYPE.BASETOUNIT_TYPE,
      ASPARTNO                   OUT      IAPITYPE.PARTNO_TYPE,
      AQERRORS                   OUT      IAPITYPE.REF_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS
      LSMETHOD                      IAPITYPE.SOURCE_TYPE := 'ValidateForCopy';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LSPARTNO                      IAPITYPE.PARTNO_TYPE;
      LNPARTEXIST                   IAPITYPE.BOOLEAN_TYPE DEFAULT 0;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );






      IF ( AQERRORS%ISOPEN )
      THEN
         CLOSE AQERRORS;
      END IF;

      GTERRORS.DELETE;
      LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                             AQERRORS );

      IF ANCREATENEWREVISION = 1
      THEN
         LNRETVAL :=
            VALIDATEFIELDMANDATORY( ASPREFIX,
                                    ASCODE,
                                    ASDESCRIPTION,
                                    ADPLANNEDEFFECTIVEDATE,
                                    ANMETRIC,
                                    ANMULTILANGUAGE,
                                    ASFRAMENO,
                                    ANFRAMEREVISION,
                                    ANOWNER,
                                    ANFRAMEMASK,
                                    ANWORKFLOWGROUPID,
                                    ANACCESSGROUPID,
                                    ANSPECTYPEID,
                                    ASUOM,
                                    ASCONVERSIONFACTOR,
                                    ASCONVERSIONUOM,
                                    AQERRORS );

         IF ( GTERRORS.COUNT > 0 )
         THEN
            
            LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                                   AQERRORS );
            RETURN( IAPICONSTANTDBERROR.DBERR_ERRORLIST );
         END IF;

         LSPARTNO := GETPARTCODE( ASPREFIX,
                                  ASCODE );
         
         
         
         LNRETVAL := VALIDATEPARTNOPED( LSPARTNO,
                                        ADPLANNEDEFFECTIVEDATE,
                                        AQERRORS );

         IF LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS
         THEN
            LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'EffectiveDate',
                                                    IAPIGENERAL.GETLASTERRORTEXT( ),
                                                    GTERRORS );
         END IF;

         
         
         
         LNRETVAL := VALIDATEFIELDFRAME( ASFRAMENO,
                                         ANFRAMEREVISION,
                                         ANOWNER,
                                         AQERRORS );

         IF LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS
         THEN
            LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'Frame',
                                                    IAPIGENERAL.GETLASTERRORTEXT( ),
                                                    GTERRORS );
         ELSE
            IF CANHAVEMASK( LSPARTNO )
            THEN
               LNRETVAL := VALIDATEFIELDMASK( ASFRAMENO,
                                              ANFRAMEREVISION,
                                              ANOWNER,
                                              ANFRAMEMASK,
                                              AQERRORS );

               IF LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS
               THEN
                  LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'FrameMask',
                                                          IAPIGENERAL.GETLASTERRORTEXT( ),
                                                          GTERRORS );
               END IF;
            END IF;
         END IF;

         
         
         
         LNRETVAL := VALIDATEFIELDWORKFLOWGROUP( ANWORKFLOWGROUPID,
                                                 AQERRORS );

         IF LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS
         THEN
            LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'WorkflowGroup',
                                                    IAPIGENERAL.GETLASTERRORTEXT( ),
                                                    GTERRORS );
         END IF;

         
         
         
         LNRETVAL := VALIDATEFIELDACCESSGROUP( ANACCESSGROUPID,
                                               AQERRORS );

         IF LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS
         THEN
            LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'AccessGroup',
                                                    IAPIGENERAL.GETLASTERRORTEXT( ),
                                                    GTERRORS );
         END IF;

         IF ( GTERRORS.COUNT = 0 )
         THEN
            ASPARTNO := LSPARTNO;
         END IF;
      ELSE
         
         LNRETVAL :=
            VALIDATEFIELD( ASPREFIX,
                           ASCODE,
                           ASDESCRIPTION,
                           ADPLANNEDEFFECTIVEDATE,
                           ANMETRIC,
                           ANMULTILANGUAGE,
                           ASFRAMENO,
                           ANFRAMEREVISION,
                           ANOWNER,
                           ANFRAMEMASK,
                           ANWORKFLOWGROUPID,
                           ANACCESSGROUPID,
                           ANSPECTYPEID,
                           ASUOM,
                           ASCONVERSIONFACTOR,
                           ASCONVERSIONUOM,
                           ASPARTNO,
                           AQERRORS );

         IF ( GTERRORS.COUNT > 0 )
         THEN
            
            LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                                   AQERRORS );
            RETURN( IAPICONSTANTDBERROR.DBERR_ERRORLIST );
         END IF;

         
          
          
          
         IF ASPREFIX IS NOT NULL
         THEN
            LNRETVAL := VALIDATEFIELDPREFIX( ASPREFIX );

            IF LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS
            THEN
               LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'Prefix',
                                                       IAPIGENERAL.GETLASTERRORTEXT( ),
                                                       GTERRORS );
            END IF;

            LNRETVAL := VALIDATEFIELDPARTNO( ASPREFIX,
                                             ASCODE,
                                             1,
                                             LNPARTEXIST,
                                             AQERRORS );

            IF LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS
            THEN
               LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'Code',
                                                       IAPIGENERAL.GETLASTERRORTEXT( ),
                                                       GTERRORS );
            END IF;
         END IF;

         IF ( GTERRORS.COUNT = 0 )
         THEN
            ASPARTNO := GETPARTCODE( ASPREFIX,
                                     ASCODE );
         END IF;
      END IF;

      IF ( GTERRORS.COUNT > 0 )
      THEN
         
         LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                                AQERRORS );
         RETURN( IAPICONSTANTDBERROR.DBERR_ERRORLIST );
      END IF;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END VALIDATEFORCOPY;






   FUNCTION VALIDATEFORLOCALISE(
      ASINTERNATIONALPARTNO      IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE,
      ASPREFIX                   IN       IAPITYPE.PREFIX_TYPE,
      ASCODE                     IN       IAPITYPE.PARTNO_TYPE,
      ASDESCRIPTION              IN       IAPITYPE.DESCRIPTION_TYPE,
      ADPLANNEDEFFECTIVEDATE     IN       IAPITYPE.DATE_TYPE,
      ANMETRIC                   IN       IAPITYPE.BOOLEAN_TYPE,
      ANMULTILANGUAGE            IN       IAPITYPE.BOOLEAN_TYPE,
      ASFRAMENO                  IN       IAPITYPE.FRAMENO_TYPE,
      ANFRAMEREVISION            IN       IAPITYPE.FRAMEREVISION_TYPE,
      ANOWNER                    IN       IAPITYPE.OWNER_TYPE,
      ANFRAMEMASK                IN       IAPITYPE.ID_TYPE,
      ANWORKFLOWGROUPID          IN       IAPITYPE.WORKFLOWGROUPID_TYPE,
      ANACCESSGROUPID            IN       IAPITYPE.ID_TYPE,
      ANSPECTYPEID               IN       IAPITYPE.ID_TYPE,
      ASUOM                      IN       IAPITYPE.BASEUOM_TYPE,
      ASCONVERSIONFACTOR         IN       IAPITYPE.NUMVAL_TYPE,
      ASCONVERSIONUOM            IN       IAPITYPE.BASETOUNIT_TYPE,
      ASPARTNO                   OUT      IAPITYPE.PARTNO_TYPE,
      AQERRORS                   OUT      IAPITYPE.REF_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS
      LSMETHOD                      IAPITYPE.SOURCE_TYPE := 'ValidateForLocalise';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );






      IF ( AQERRORS%ISOPEN )
      THEN
         CLOSE AQERRORS;
      END IF;

      GTERRORS.DELETE;
      LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                             AQERRORS );
      LNRETVAL :=
         
         
         VALIDATEFORCOPY2(
         
                          ASPREFIX,
                          ASCODE,
                          ASDESCRIPTION,
                          ADPLANNEDEFFECTIVEDATE,
                          ANMETRIC,
                          ANMULTILANGUAGE,
                          ASFRAMENO,
                          ANFRAMEREVISION,
                          ANOWNER,
                          ANFRAMEMASK,
                          ANWORKFLOWGROUPID,
                          ANACCESSGROUPID,
                          ANSPECTYPEID,
                          ASUOM,
                          ASCONVERSIONFACTOR,
                          ASCONVERSIONUOM,
                          ASPARTNO,
                          AQERRORS );

      IF ( GTERRORS.COUNT > 0 )
      THEN
         
         LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                                AQERRORS );
         RETURN( IAPICONSTANTDBERROR.DBERR_ERRORLIST );
      END IF;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END VALIDATEFORLOCALISE;


   FUNCTION GETPREFIXANDCODE(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ASPREFIX                   IN OUT   IAPITYPE.PREFIX_TYPE,
      ANOWNERID                  IN OUT   IAPITYPE.OWNER_TYPE,
      ASCODE                     IN OUT   IAPITYPE.PARTNO_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS
      LNPOSITION                    IAPITYPE.NUMVAL_TYPE;
      LSPREFIX                      IAPITYPE.PREFIX_TYPE;

      CURSOR LQGETPREFIX(
         ASPREFIX                            IAPITYPE.PREFIX_TYPE )
      IS
         SELECT OWNER,
                PREFIX
           FROM SPEC_PREFIX_DESCR
          WHERE PREFIX = ASPREFIX;

      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'GetPrefixAndCode';
   BEGIN
      LNPOSITION := INSTR( ASPARTNO,
                           '-' );

      IF LNPOSITION = 4
      THEN
         


         LSPREFIX := SUBSTR( ASPARTNO,
                             1,
                             3 );

         FOR LRGETPREFIX IN LQGETPREFIX( LSPREFIX )
         LOOP
            ASPREFIX := LRGETPREFIX.PREFIX;
            ANOWNERID := LRGETPREFIX.OWNER;
            ASCODE := SUBSTR( ASPARTNO,
                                LNPOSITION
                              + 1 );
         END LOOP;

         
         IF ASPREFIX IS NULL
         THEN
            ASCODE := ASPARTNO;
         END IF;
      ELSE
         ASCODE := ASPARTNO;
      END IF;

      RETURN IAPICONSTANTDBERROR.DBERR_SUCCESS;
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL );
   END GETPREFIXANDCODE;


   FUNCTION SAVEHEADER(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE,
      ANWORKFLOWGROUPID          IN       IAPITYPE.WORKFLOWGROUPID_TYPE DEFAULT NULL,
      ANACCESSGROUPID            IN       IAPITYPE.ID_TYPE DEFAULT NULL,
      ANMULTILANGUAGE            IN       IAPITYPE.BOOLEAN_TYPE DEFAULT NULL,
      ANSPECTYPEID               IN       IAPITYPE.ID_TYPE DEFAULT NULL,
      ANLANGUAGEID               IN       IAPITYPE.LANGUAGEID_TYPE DEFAULT NULL,
      AQERRORS                   OUT      IAPITYPE.REF_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS











      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'SaveHeader';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LNCOUNT                       IAPITYPE.NUMVAL_TYPE;
      LNWORKFLOWGROUPID             IAPITYPE.WORKFLOWGROUPID_TYPE;
      LNACCESSGROUPID               IAPITYPE.ID_TYPE;
      LNMULTILANGUAGE               IAPITYPE.BOOLEAN_TYPE;
      LNSPECTYPEID                  IAPITYPE.ID_TYPE;
      LNOLDMULTILANGUAGE            IAPITYPE.BOOLEAN_TYPE;
      LNOLDSPECTYPEID               IAPITYPE.ID_TYPE;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'PreConditions',
                           IAPICONSTANT.INFOLEVEL_3 );

      IF ( AQERRORS%ISOPEN )
      THEN
         CLOSE AQERRORS;
      END IF;

      GTERRORS.DELETE;
      LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                             AQERRORS );
      
      
      LNRETVAL := EXISTID( ASPARTNO,
                           ANREVISION );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IAPIGENERAL.LOGINFO( GSSOURCE,
                              LSMETHOD,
                              IAPIGENERAL.GETLASTERRORTEXT( ) );
         LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'Specification',
                                                 IAPIGENERAL.GETLASTERRORTEXT( ),
                                                 GTERRORS );
      END IF;

      IF ANACCESSGROUPID IS NOT NULL
      THEN
         
         SELECT COUNT( * )
           INTO LNCOUNT
           FROM ACCESS_GROUP
          WHERE ACCESS_GROUP = ANACCESSGROUPID;

         IF LNCOUNT = 0
         THEN
            LNRETVAL := IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                            LSMETHOD,
                                                            IAPICONSTANTDBERROR.DBERR_ACCESSGROUPNOTEXIST,
                                                            ANACCESSGROUPID );
            LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'Access Group',
                                                    IAPIGENERAL.GETLASTERRORTEXT( ),
                                                    GTERRORS );
         END IF;
      END IF;

      IF ANWORKFLOWGROUPID IS NOT NULL
      THEN
         
         SELECT COUNT( * )
           INTO LNCOUNT
           FROM WORKFLOW_GROUP
          WHERE WORKFLOW_GROUP_ID = ANWORKFLOWGROUPID;

         IF LNCOUNT = 0
         THEN
            LNRETVAL := IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                            LSMETHOD,
                                                            IAPICONSTANTDBERROR.DBERR_WORKFLOWGROUPNOTEXIST,
                                                            ANWORKFLOWGROUPID );
            LNRETVAL := IAPIGENERAL.ADDERRORTOLIST( 'WorkFlow Group',
                                                    IAPIGENERAL.GETLASTERRORTEXT( ),
                                                    GTERRORS );
         END IF;
      END IF;

      IF ( GTERRORS.COUNT > 0 )
      THEN
         
         LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                                AQERRORS );
         RETURN( IAPICONSTANTDBERROR.DBERR_ERRORLIST );
      END IF;




      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      SELECT WORKFLOW_GROUP_ID,
             ACCESS_GROUP,
             MULTILANG,
             CLASS3_ID
        INTO LNWORKFLOWGROUPID,
             LNACCESSGROUPID,
             LNMULTILANGUAGE,
             LNSPECTYPEID
        FROM SPECIFICATION_HEADER
       WHERE PART_NO = ASPARTNO
         AND REVISION = ANREVISION;

      LNOLDSPECTYPEID := LNSPECTYPEID;
      LNOLDMULTILANGUAGE := LNMULTILANGUAGE;

      IF ANWORKFLOWGROUPID IS NOT NULL
      THEN
         LNWORKFLOWGROUPID := ANWORKFLOWGROUPID;
      END IF;

      IF ANACCESSGROUPID IS NOT NULL
      THEN
         LNACCESSGROUPID := ANACCESSGROUPID;
      END IF;

      IF ANMULTILANGUAGE IS NOT NULL
      THEN
         LNMULTILANGUAGE := ANMULTILANGUAGE;
      END IF;

      IF ANSPECTYPEID IS NOT NULL
      THEN
         LNSPECTYPEID := ANSPECTYPEID;
      END IF;

      UPDATE SPECIFICATION_HEADER
         SET WORKFLOW_GROUP_ID = LNWORKFLOWGROUPID,
             ACCESS_GROUP = LNACCESSGROUPID,
             MULTILANG = LNMULTILANGUAGE,
             CLASS3_ID = LNSPECTYPEID
       WHERE PART_NO = ASPARTNO
         AND REVISION = ANREVISION;


      IF ANSPECTYPEID IS NOT NULL
      THEN
         UPDATE PART
            SET PART_TYPE = ANSPECTYPEID
          WHERE PART_NO = ASPARTNO;
      END IF;


      IF LNOLDSPECTYPEID <> LNSPECTYPEID
      THEN
         DELETE      ITPRCL
               WHERE PART_NO = ASPARTNO;
      END IF;


      IF LNOLDMULTILANGUAGE <> LNMULTILANGUAGE
      THEN
         IF LNMULTILANGUAGE = 1
         THEN
            
            
            
            
            
            IF (ANLANGUAGEID <> 1)
            THEN
            
            LNRETVAL := CONVERTTOMULTILANGUAGE( ASPARTNO,
                                                ANREVISION,
                                                ANLANGUAGEID,
                                                AQERRORS );
           
           END IF;
           
         ELSIF LNMULTILANGUAGE = 0
         THEN
            LNRETVAL := CONVERTTOSINGLELANGUAGE( ASPARTNO,
                                                 ANREVISION,
                                                 AQERRORS );
         END IF;

         IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN( LNRETVAL );
         END IF;
      END IF;


      LNRETVAL := LOGCHANGES( ASPARTNO,
                              ANREVISION );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN( LNRETVAL );
      END IF;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END SAVEHEADER;


   FUNCTION GETLOCKED(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE,
      ASUSERID                   OUT      IAPITYPE.USERID_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS













      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'GetLocked';
      
      LRCACHE                        SHCACHE_REC_TYPE;
      LNRETVAL                       IAPITYPE.ERRORNUM_TYPE;
   BEGIN






      
      LRCACHE := NULL;
      LNRETVAL := GETSHFROMCACHE(ASPARTNO, ANREVISION, LRCACHE);
      IF (LNRETVAL = IAPICONSTANTDBERROR.DBERR_SUCCESS) THEN
          IF (LRCACHE.PARTNO IS NULL) THEN
            INSERTTOSHCACHE(ASPARTNO, ANREVISION);
             LNRETVAL := GETSHFROMCACHE(ASPARTNO, ANREVISION, LRCACHE);
          END IF;

          IF (LNRETVAL = IAPICONSTANTDBERROR.DBERR_SUCCESS AND LRCACHE.PARTNO IS NOT NULL) THEN
            ASUSERID := LRCACHE.LOCKED;
            RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
          ELSE
             RETURN( IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                         LSMETHOD,
                                                         IAPICONSTANTDBERROR.DBERR_SPECIFICATIONNOTFOUND,
                                                         ASPARTNO,
                                                         ANREVISION ) );
          END IF;
      END IF;
      




      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      SELECT LOCKED
        INTO ASUSERID
        FROM SPECIFICATION_HEADER
       WHERE PART_NO = ASPARTNO
         AND REVISION = ANREVISION;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPICONSTANTDBERROR.DBERR_GENFAIL );
   END GETLOCKED;




   FUNCTION CHECKLOCK(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE,
      ABISSET                    OUT      IAPITYPE.BOOLEAN_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS
 
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'CheckLock';
      LSUSERID                      IAPITYPE.USERID_TYPE;
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
   BEGIN





      


      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );
      LNRETVAL := GETLOCKED( ASPARTNO,
                             ANREVISION,
                             LSUSERID );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         RETURN( LNRETVAL );
      END IF;

      IF (    LSUSERID IS NULL
           OR LSUSERID = '' )
      THEN
         ABISSET := NULL;
      ELSIF( LSUSERID = IAPIGENERAL.SESSION.APPLICATIONUSER.USERID )
      THEN
         ABISSET := 1;
      ELSE
         ABISSET := 0;
      END IF;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPICONSTANTDBERROR.DBERR_GENFAIL );
   END CHECKLOCK;




   FUNCTION SETLOCK(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS









      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'SetLock';
   BEGIN





      


      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      UPDATE SPECIFICATION_HEADER
         SET LOCKED = IAPIGENERAL.SESSION.APPLICATIONUSER.USERID
       WHERE PART_NO = ASPARTNO
         AND REVISION = ANREVISION;

      
      
      
      
     INSERTTOSHCACHE(ASPARTNO, ANREVISION);
     

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPICONSTANTDBERROR.DBERR_GENFAIL );
   END SETLOCK;


   
   FUNCTION ISLOCKINGSPECALLOWED
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS











      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'IsLockingSpecAllowed';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LSPARAMETERDATA               IAPITYPE.PARAMETERDATA_TYPE;
   BEGIN
      
      LNRETVAL := IAPIGENERAL.GETCONFIGURATIONSETTING( 'locking_enabled',
                                                       'interspec',
                                                       LSPARAMETERDATA );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         RETURN( LNRETVAL );
      END IF;

      IF ( LSPARAMETERDATA = 0 )

      THEN
         RETURN( IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                     LSMETHOD,
                                                     IAPICONSTANTDBERROR.DBERR_SPECIFICATIONUNLOCKABLE ) );
      END IF;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END ISLOCKINGSPECALLOWED;


   FUNCTION LOCKSPEC(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS












      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'LockSpec';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LNACCESS                      IAPITYPE.BOOLEAN_TYPE;
      LBLOCKED                      IAPITYPE.BOOLEAN_TYPE;
      LSUSERID                      IAPITYPE.USERID_TYPE;
      LSPARAMETERDATA               IAPITYPE.PARAMETERDATA_TYPE;
   BEGIN




      
      
      LNRETVAL := IAPISPECIFICATIONACCESS.GETMODIFIABLEACCESS( ASPARTNO,
                                                               ANREVISION,
                                                               LNACCESS );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         RETURN( LNRETVAL );
      END IF;

      
      LNRETVAL := IAPIGENERAL.GETCONFIGURATIONSETTING( 'locking_enabled',
                                                       'interspec',
                                                       LSPARAMETERDATA );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         RETURN( LNRETVAL );
      END IF;

      
      IF NOT( LSPARAMETERDATA <> 0 )
      THEN
         RETURN( IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                     LSMETHOD,
                                                     IAPICONSTANTDBERROR.DBERR_SPECIFICATIONUNLOCKABLE ) );
      END IF;




      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      IF ( LNACCESS = 0 )
      THEN
         RETURN( IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                     LSMETHOD,
                                                     IAPICONSTANTDBERROR.DBERR_NOUPDATEACCESS,
                                                     ASPARTNO,
                                                     ANREVISION ) );
      END IF;

      

      
      LNRETVAL := CHECKLOCK( ASPARTNO,
                             ANREVISION,
                             LBLOCKED );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         RETURN( LNRETVAL );
      END IF;

      
      IF ( LBLOCKED IS NOT NULL )
      THEN
         
         LNRETVAL := GETLOCKED( ASPARTNO,
                                ANREVISION,
                                LSUSERID );

         IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
         THEN
            RETURN( LNRETVAL );
         END IF;

         RETURN( IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                     LSMETHOD,
                                                     IAPICONSTANTDBERROR.DBERR_SPECALREADYLOCKED,
                                                     ASPARTNO,
                                                     ANREVISION,
                                                     LSUSERID ) );
      ELSE
         
         LNRETVAL := IAPISPECIFICATIONSECTION.GETLOCKED( ASPARTNO,
                                                         ANREVISION,
                                                         LSUSERID );

         IF ( LSUSERID IS NOT NULL )
         THEN
            
            RETURN( IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                        LSMETHOD,
                                                        IAPICONSTANTDBERROR.DBERR_SECTIONALREADYLOCKED,
                                                        ASPARTNO,
                                                        ANREVISION,
                                                        '(not determined)',
                                                        LSUSERID ) );
         END IF;
      END IF;

      
      LNRETVAL := IAPISPECIFICATION.SETLOCK( ASPARTNO,
                                             ANREVISION );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         RETURN( LNRETVAL );
      END IF;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END LOCKSPEC;




   FUNCTION RESETLOCK(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS









      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'ResetLock';
   BEGIN





      


      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      UPDATE SPECIFICATION_HEADER
         SET LOCKED = NULL
       WHERE PART_NO = ASPARTNO
         AND REVISION = ANREVISION;

      
      
      
      
     INSERTTOSHCACHE(ASPARTNO, ANREVISION);
     

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPICONSTANTDBERROR.DBERR_GENFAIL );
   END RESETLOCK;

   FUNCTION UNLOCKSPEC(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS





      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'UnlockSpec';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LBLOCKED                      IAPITYPE.BOOLEAN_TYPE;
      LSUSERID                      IAPITYPE.USERID_TYPE;
   BEGIN




      LNRETVAL := EXISTID( ASPARTNO,
                           ANREVISION );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         RETURN( LNRETVAL );
      END IF;

      
      LNRETVAL := CHECKLOCK( ASPARTNO,
                             ANREVISION,
                             LBLOCKED );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         RETURN( LNRETVAL );
      END IF;

      
      IF ( LBLOCKED = 0 )
      THEN
         
         LNRETVAL := GETLOCKED( ASPARTNO,
                                ANREVISION,
                                LSUSERID );

         IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
         THEN
            RETURN( LNRETVAL );
         END IF;

         RETURN( IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                     LSMETHOD,
                                                     IAPICONSTANTDBERROR.DBERR_SPECALREADYLOCKED,
                                                     ASPARTNO,
                                                     ANREVISION,
                                                     LSUSERID ) );
      END IF;

      
      IF ( LBLOCKED IS NULL )
      THEN
         RETURN( IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                     LSMETHOD,
                                                     IAPICONSTANTDBERROR.DBERR_SPECNOTLOCKED,
                                                     ASPARTNO,
                                                     ANREVISION ) );
      END IF;




      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );
      
       
      LNRETVAL := IAPISPECIFICATION.RESETLOCK( ASPARTNO,
                                               ANREVISION );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         RETURN( LNRETVAL );
      END IF;

      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END UNLOCKSPEC;
   
   
   
   
   
   FUNCTION CREATESPECIFICATIONDM(
      ASPARTNO                   IN OUT   IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN       IAPITYPE.REVISION_TYPE,
      ASDESCRIPTION              IN       IAPITYPE.DESCRIPTION_TYPE,
      ASCREATEDBY                IN       IAPITYPE.USERID_TYPE,
      ADPLANNEDEFFECTIVEDATE     IN       IAPITYPE.DATE_TYPE,
      ASFRAMEID                  IN       IAPITYPE.FRAMENO_TYPE,
      ANFRAMEREVISION            IN       IAPITYPE.FRAMEREVISION_TYPE,
      ANFRAMEOWNER               IN       IAPITYPE.OWNER_TYPE,
      ANSPECTYPEID               IN       IAPITYPE.ID_TYPE,
      ANWORKFLOWGROUPID          IN       IAPITYPE.ID_TYPE,
      ANACCESSGROUPID            IN       IAPITYPE.ID_TYPE,
      ANMULTILANGUAGE            IN       IAPITYPE.BOOLEAN_TYPE,
      ANUOMTYPE                  IN       IAPITYPE.BOOLEAN_TYPE,
      ANMASKID                   IN       IAPITYPE.ID_TYPE,
      ASINTERNATIONAL            IN       IAPITYPE.INTL_TYPE,
      AQERRORS                   IN OUT   IAPITYPE.REF_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'CreateSpecificationDM';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LRCREATESPEC                  IAPITYPE.SPCREATESPECREC_TYPE;
      LSINTERNATIONAL               IAPITYPE.INTL_TYPE;
      LQERRORS                      IAPITYPE.REF_TYPE;
   BEGIN
      
      
      
      
      
         
      
      
      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Initialize parameters',
                           IAPICONSTANT.INFOLEVEL_3 );
      GTERRORS.DELETE;
      LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                             AQERRORS );
      GTCREATESPEC.DELETE;
      LRCREATESPEC.PARTNO := ASPARTNO;
      LRCREATESPEC.PARTNOFROM := NULL;
      LRCREATESPEC.REVISION := ANREVISION;
      LRCREATESPEC.DESCRIPTION := ASDESCRIPTION;
      LRCREATESPEC.CREATEDBY := ASCREATEDBY;
      LRCREATESPEC.PLANNEDEFFECTIVE := ADPLANNEDEFFECTIVEDATE;
      LRCREATESPEC.FRAMEID := ASFRAMEID;
      LRCREATESPEC.FRAMEREV := ANFRAMEREVISION;
      LRCREATESPEC.FRAMEOWNER := ANFRAMEOWNER;
      LRCREATESPEC.CLASS3ID := ANSPECTYPEID;
      LRCREATESPEC.WORKFLOWGROUPID := ANWORKFLOWGROUPID;
      LRCREATESPEC.ACCESSGROUP := ANACCESSGROUPID;
      LRCREATESPEC.MULTILANG := ANMULTILANGUAGE;
      LRCREATESPEC.UOMTYPE := ANUOMTYPE;
      LRCREATESPEC.MASKID := ANMASKID;
      GTCREATESPEC( 0 ) := LRCREATESPEC;
      
      
      
      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Call CUSTOM Pre-Action',
                           IAPICONSTANT.INFOLEVEL_3 );
      LNRETVAL := IAPIGENERAL.EXECUTECUSTOMFUNCTION( GSSOURCE,
                                                     LSMETHOD,
                                                     'PRE',
                                                     GTERRORS );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IF ( LNRETVAL = IAPICONSTANTDBERROR.DBERR_ERRORLIST )
         THEN
            LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                                   AQERRORS );
            RETURN( IAPICONSTANTDBERROR.DBERR_ERRORLIST );
         ELSE
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN( LNRETVAL );
         END IF;
      END IF;

      LRCREATESPEC := GTCREATESPEC( 0 );
      
      
      
      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'PreConditions',
                           IAPICONSTANT.INFOLEVEL_3 );
      
      
      
      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      
      






      
      LSINTERNATIONAL := ASINTERNATIONAL;
      


      LNRETVAL :=
         CREATESPEC( LRCREATESPEC.PARTNO,
                     NULL,
                     LRCREATESPEC.REVISION,
                     LRCREATESPEC.DESCRIPTION,
                     LRCREATESPEC.CREATEDBY,
                     LRCREATESPEC.PLANNEDEFFECTIVE,
                     LRCREATESPEC.FRAMEID,
                     LRCREATESPEC.FRAMEREV,
                     LRCREATESPEC.FRAMEOWNER,
                     LRCREATESPEC.CLASS3ID,
                     LRCREATESPEC.WORKFLOWGROUPID,
                     LRCREATESPEC.ACCESSGROUP,
                     LSINTERNATIONAL,
                     LRCREATESPEC.MULTILANG,
                     LRCREATESPEC.UOMTYPE,
                     LRCREATESPEC.MASKID,
                     LQERRORS );


      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN LNRETVAL;
      END IF;

      
      
      
      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Call CUSTOM Post-Action',
                           IAPICONSTANT.INFOLEVEL_3 );
      LNRETVAL := IAPIGENERAL.EXECUTECUSTOMFUNCTION( GSSOURCE,
                                                     LSMETHOD,
                                                     'POST',
                                                     GTERRORS );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IF ( LNRETVAL = IAPICONSTANTDBERROR.DBERR_ERRORLIST )
         THEN
            LNRETVAL := IAPIGENERAL.TRANSFORMERRORLISTTOREFCURSOR( GTERRORS,
                                                                   AQERRORS );
            RETURN( IAPICONSTANTDBERROR.DBERR_ERRORLIST );
         ELSE
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN( LNRETVAL );
         END IF;
      END IF;

      
      
      
      ASPARTNO := GTCREATESPEC( 0 ).PARTNO;
      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );
   EXCEPTION
      WHEN OTHERS
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               SQLERRM );
         RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
   END CREATESPECIFICATIONDM;


  FUNCTION COPYCONTENT(
      ASFROMPARTNO               IN       IAPITYPE.PARTNO_TYPE,
      ANFROMREVISION             IN       IAPITYPE.REVISION_TYPE,
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN      IAPITYPE.REVISION_TYPE,
      AQERRORS                   IN OUT   IAPITYPE.REF_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS













    ARFROMFRAME                         IAPITYPE.FRAMEREC_TYPE;
    ARFRAME                             IAPITYPE.FRAMEREC_TYPE;
    
    
    ASSTATUSTYPE                        IAPITYPE.STATUSTYPE_TYPE;
    ASINTERNATIONAL                     IAPITYPE.INTL_TYPE;
    ASINTERNATIONALPARTNO               IAPITYPE.PARTNO_TYPE;
    ANINTERNATIONALREVISION             IAPITYPE.REVISION_TYPE;
    ADPLANNEDEFFECTIVEDATE              IAPITYPE.DATE_TYPE;
    ANINTERNATIONALLINKED               IAPITYPE.BOOLEAN_TYPE;
    ANUOMTYPE                           IAPITYPE.BOOLEAN_TYPE;
    ANMULTILANGUAGE                     IAPITYPE.BOOLEAN_TYPE;
    ANWORKFLOWGROUPID                   IAPITYPE.ID_TYPE;
    ANACCESSGROUPID                    IAPITYPE.ID_TYPE;
    ASDESCRIPTION                       IAPITYPE.DESCRIPTION_TYPE;
    ANSPECTYPEID                        IAPITYPE.ID_TYPE;
      LSMETHOD                      IAPITYPE.METHOD_TYPE := 'CopyContent';
      LNRETVAL                      IAPITYPE.ERRORNUM_TYPE;
      LQERRORS                      IAPITYPE.REF_TYPE;
      LNCHECK                       NUMBER := 0;
      LNRETURN                      NUMBER := 0;
      LNREASONID                    IAPITYPE.NUMVAL_TYPE := NULL;
      LNINSERTIND                   NUMBER := 0;
      LNSQLERROR                    NUMBER := 0;
      LSBOTHNULL                    CHAR := 'N';

      LNINITIALSTATUS               IAPITYPE.STATUSID_TYPE;






      LDPLANNEDEFFECTIVEDATE        IAPITYPE.DATE_TYPE;

      LDSTATUSDATETIME              IAPITYPE.DATE_TYPE := SYSDATE;
      LSFROMINTL                    IAPITYPE.INTL_TYPE;
      LSPARTSOURCE                  IAPITYPE.PARTSOURCE_TYPE;
      LNMULTILANG                   PLS_INTEGER;
      LNCOUNTER                     PLS_INTEGER := 0;
      LSPREVTYPE                    IAPITYPE.CLASS3PARTTYPE_TYPE;
      LNNEXTTYPE                    IAPITYPE.CLASS3PARTTYPE_TYPE;
      LNINGREV                      NUMBER;
      LNPARTTYPE                    IAPITYPE.PARTTYPE_TYPE;
      LNLASTREVISION                IAPITYPE.REVISION_TYPE;
      LSFROMSOURCE                  IAPITYPE.PARTSOURCE_TYPE;
      LNACCESSGROUP              IAPITYPE.ID_TYPE;
      LDOLDPED                      IAPITYPE.DATE_TYPE;

      LSOLDFRAMENO                  IAPITYPE.FRAMENO_TYPE;


      LNOLDFRAMEREV                 IAPITYPE.FRAMEREVISION_TYPE;

      LNOLDFRAMEOWNER               IAPITYPE.OWNER_TYPE;
      LNOLDUOMTYPE                  IAPITYPE.NUMVAL_TYPE;
      LSALLOWSTAGE                  IAPITYPE.PARAMETERDATA_TYPE;
      LNCHECKACCESS                 NUMBER;

      LSITEMPART                    IAPITYPE.PARTNO_TYPE;
      LNITEMREV                     IAPITYPE.REVISION_TYPE;

      LNCOUNT                       PLS_INTEGER;

      LNLOCALISED                   PLS_INTEGER := 0;



      LNALLOWVAL                    PLS_INTEGER := 0;
      LNVIEW                        PLS_INTEGER := 0;
      LSDESCRIPTION                 IAPITYPE.DESCRIPTION_TYPE;
      LSFORMULATEDITEMREVUID        IAPITYPE.TCUID_TYPE;
      LSFORMULATEDITEMID            IAPITYPE.TCUID_TYPE DEFAULT NULL;
      LSFORMULATEDITEMREV           IAPITYPE.TCUID_TYPE DEFAULT NULL;



















      LBTEMPMETRIC                  BOOLEAN;
      LSALLOWDESCRCHANGE            IAPITYPE.PARAMETERDATA_TYPE;








      CURSOR CUR_TEXT_ML
      IS
         SELECT *
           FROM SPECIFICATION_TEXT A
          WHERE PART_NO = ASFROMPARTNO
            AND REVISION = ANFROMREVISION;

      CURSOR CUR_TEXT_SL
      IS
         SELECT *
           FROM SPECIFICATION_TEXT A
          WHERE PART_NO = ASFROMPARTNO
            AND REVISION = ANFROMREVISION
            AND LANG_ID = 1;

      CURSOR C5
      IS
         SELECT *
           FROM SPECIFICATION_LINE_TEXT A
          WHERE PART_NO = ASFROMPARTNO
            AND REVISION = ANFROMREVISION;

      CURSOR CUR_NOTE
      IS
         SELECT TEXT
           FROM ITPRNOTE A
          WHERE PART_NO = ASFROMPARTNO;

      CURSOR IS_PLANT
      IS
         SELECT ASPARTNO,
                PLANT.PLANT
           FROM PART_PLANT,
                PLANT
          WHERE PART_NO = ASFROMPARTNO
            AND PART_PLANT.PLANT = PLANT.PLANT
            AND PLANT.PLANT_SOURCE = 'I-S'
         MINUS
         SELECT ASPARTNO,
                PLANT.PLANT
           FROM PART_PLANT,
                PLANT
          WHERE PART_NO = ASPARTNO
            AND PART_PLANT.PLANT = PLANT.PLANT
            AND PLANT.PLANT_SOURCE = 'I-S';

      CURSOR CUR_PLANT
      IS
         SELECT ASPARTNO,
                PLANT
           FROM PART_PLANT
          WHERE PART_NO = ASFROMPARTNO
         MINUS
         SELECT ASPARTNO,
                PLANT
           FROM PART_PLANT
          WHERE PART_NO = ASPARTNO;












      CURSOR CUR_ING
      IS
         SELECT ASPARTNO,
                ANREVISION,
                SECTION_ID,
                SUB_SECTION_ID,
                INGREDIENT,
                INGREDIENT_REV,
                QUANTITY,
                ING_LEVEL,
                ING_COMMENT,
                INTL,
                SEQ_NO,
                ACTIV_IND,
                PID,
                HIER_LEVEL,
                RECFAC,
                ING_SYNONYM,
                ING_SYNONYM_REV,
                INGDECLARE
           FROM SPECIFICATION_ING
          WHERE PART_NO = ASFROMPARTNO
            AND REVISION = ANFROMREVISION
         
            AND (SECTION_ID, SUB_SECTION_ID) IN
              (SELECT SECTION_ID, SUB_SECTION_ID
                FROM SPECIFICATION_SECTION
                WHERE PART_NO = ASPARTNO
                AND REVISION = ANREVISION);
        


      CURSOR CUR_ING_LANG
      IS
         SELECT ASPARTNO,
                ANREVISION,
                SECTION_ID,
                SUB_SECTION_ID,
                LANG_ID,
                PID,
                HIER_LEVEL,
                INGREDIENT,
                ING_LEVEL,
                ING_COMMENT,
                SEQ_NO
           FROM SPECIFICATION_ING_LANG
          WHERE PART_NO = ASFROMPARTNO
            AND REVISION = ANFROMREVISION
         
            AND (SECTION_ID, SUB_SECTION_ID) IN
              (SELECT SECTION_ID, SUB_SECTION_ID
                FROM SPECIFICATION_SECTION
                WHERE PART_NO = ASPARTNO
                AND REVISION = ANREVISION);
        


      
      CURSOR CUR_ING_ALLRG
      IS
         SELECT ASPARTNO,
                ANREVISION,
                SECTION_ID,
                SUB_SECTION_ID,
                INGREDIENT,
                ALLERGEN
         FROM ITSPECINGALLERGEN
         WHERE PART_NO = ASFROMPARTNO
            AND REVISION = ANFROMREVISION
            AND (SECTION_ID, SUB_SECTION_ID) IN
              (SELECT SECTION_ID, SUB_SECTION_ID
                FROM SPECIFICATION_SECTION
                WHERE PART_NO = ASPARTNO
                  AND REVISION = ANREVISION);
      



     
      CURSOR CUR_ING_DETAIL
      IS
         SELECT ASPARTNO,
                ANREVISION,
                SECTION_ID,
                SUB_SECTION_ID,
                INGREDIENT,
                INGREDIENT_SEQ_NO,
                INGDETAIL_CHARACTERISTIC,
                INGDETAIL_TYPE,
                MANDATORY 
         FROM ITSPECINGDETAIL
         WHERE PART_NO = ASFROMPARTNO
            AND REVISION = ANFROMREVISION
            AND (SECTION_ID, SUB_SECTION_ID) IN
              (SELECT SECTION_ID, SUB_SECTION_ID
                FROM SPECIFICATION_SECTION
                WHERE PART_NO = ASPARTNO
                  AND REVISION = ANREVISION);
      
      CURSOR CUR_PG(
         ANREVISION                 IN       IAPITYPE.REVISION_TYPE )
      IS
         SELECT *
           FROM SPECIFICATION_PROP
          WHERE PART_NO = ASPARTNO
            AND REVISION = ANREVISION;

      CURSOR CUR_SPEC_LINE
      IS
         SELECT PLANT,
                LINE,
                CONFIGURATION,
                PROCESS_LINE_REV,
                ITEM_PART_NO,
                ITEM_REVISION,
                SEQUENCE
           FROM SPECIFICATION_LINE A
          WHERE PART_NO = ASFROMPARTNO
            AND REVISION = ANFROMREVISION;
   BEGIN



      IAPIGENERAL.LOGINFO( GSSOURCE,
                           LSMETHOD,
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      IF IAPIGENERAL.SESSION.APPLICATIONUSER.USERID IS NULL
      THEN
         LNRETVAL := IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                         LSMETHOD,
                                                         IAPICONSTANTDBERROR.DBERR_NOINITSESSION );
         RETURN IAPICONSTANTDBERROR.DBERR_NOINITSESSION;
      END IF;


      IF    (ASFROMPARTNO IS NULL)
         OR (ASPARTNO IS NULL)
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               'From/To PartNo cannot be NULL.' );
         RETURN IAPICONSTANTDBERROR.DBERR_GENFAIL;
      END IF;

      IF    (ANFROMREVISION IS NULL)
         OR (ANREVISION IS NULL)
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               'From/To Revision cannot be NULL.');

         RETURN IAPICONSTANTDBERROR.DBERR_GENFAIL;
      END IF;


      
      LNRETVAL := EXISTID( ASFROMPARTNO,
                           ANFROMREVISION );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
        IAPIGENERAL.LOGERROR( GSSOURCE,
                              LSMETHOD,
                              IAPIGENERAL.GETLASTERRORTEXT( ) );
        RETURN LNRETVAL;
      END IF;


      LNRETVAL := EXISTID( ASPARTNO,
                           ANREVISION );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
        IAPIGENERAL.LOGERROR( GSSOURCE,
                              LSMETHOD,
                              IAPIGENERAL.GETLASTERRORTEXT( ) );
        RETURN LNRETVAL;
      END IF;


      LNRETVAL := IAPISPECIFICATION.GETFRAME(ASFROMPARTNO,
                                             ANFROMREVISION,
                                             ARFROMFRAME);

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
        IAPIGENERAL.LOGERROR( GSSOURCE,
                              LSMETHOD,
                              IAPIGENERAL.GETLASTERRORTEXT( ) );
        RETURN LNRETVAL;
      END IF;

      LNRETVAL := IAPISPECIFICATION.GETFRAME(ASPARTNO,
                                             ANREVISION,
                                             ARFRAME);

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
        IAPIGENERAL.LOGERROR( GSSOURCE,
                              LSMETHOD,
                              IAPIGENERAL.GETLASTERRORTEXT( ) );
        RETURN LNRETVAL;
      END IF;

      
      
      IF    (ARFROMFRAME.FRAMENO <> ARFRAME.FRAMENO)
         OR (ARFROMFRAME.REVISION <> ARFRAME.REVISION)
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               'From/To Frame Id and revision have to be identical.');

         RETURN IAPICONSTANTDBERROR.DBERR_GENFAIL;
      END IF;


      
      
      
      

      LNRETVAL := IAPISPECIFICATION.GETSTATUSTYPE(ASPARTNO,
                                                  ANREVISION,
                                                  ASSTATUSTYPE);

      
      
      
      
      
      IF (ASSTATUSTYPE <> 'DEVELOPMENT')
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               
                               'Target specification status type has to be DEVELOPMENT.' );

         RETURN IAPICONSTANTDBERROR.DBERR_GENFAIL;
      END IF;



      
      


         
         BEGIN
            SELECT ACCESS_GROUP
              INTO LNACCESSGROUP
              FROM SPECIFICATION_HEADER
             WHERE PART_NO = ASPARTNO
               AND REVISION = ANREVISION;

            SELECT COUNT( * )
              INTO LNCHECKACCESS
              FROM USER_ACCESS_GROUP
             WHERE ACCESS_GROUP = LNACCESSGROUP
               AND USER_GROUP_ID IN( SELECT USER_GROUP_ID
                                      FROM USER_GROUP_LIST
                                     WHERE USER_ID = IAPIGENERAL.SESSION.APPLICATIONUSER.USERID )
               AND UPDATE_ALLOWED = 'Y';
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               LNCHECKACCESS := 0;
         END;

         IF LNCHECKACCESS = 0
         THEN
             IAPIGENERAL.LOGERROR( GSSOURCE,
                                   LSMETHOD,
                                   'You must have edit access to the Target specification.' );
             RETURN IAPICONSTANTDBERROR.DBERR_GENFAIL;
         END IF;

      BEGIN
         SELECT UOM_TYPE,
                MULTILANG,
                INTL,
                PLANNED_EFFECTIVE_DATE,
                INT_PART_NO,
                INT_PART_REV,
                WORKFLOW_GROUP_ID,
                ACCESS_GROUP,
                DESCRIPTION,
                CLASS3_ID
         INTO ANUOMTYPE,
              ANMULTILANGUAGE,
              ASINTERNATIONAL,
              ADPLANNEDEFFECTIVEDATE,
              ASINTERNATIONALPARTNO,
              ANINTERNATIONALREVISION,
              ANWORKFLOWGROUPID,
              ANACCESSGROUPID,
              ASDESCRIPTION,
              ANSPECTYPEID
         FROM SPECIFICATION_HEADER
         WHERE PART_NO = ASFROMPARTNO
           AND REVISION = ANFROMREVISION;

      EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                   LSMETHOD,
                                   SQLERRM );

            RETURN IAPICONSTANTDBERROR.DBERR_GENFAIL;
      END;

      
      ANINTERNATIONALLINKED := 0;

      IF ANMULTILANGUAGE IS NULL
      THEN
         LNMULTILANG := 0;
      ELSE
         LNMULTILANG := ANMULTILANGUAGE;
      END IF;

      


      BEGIN
         SELECT INITIAL_STATUS
           INTO LNINITIALSTATUS
           FROM WORK_FLOW_GROUP W,
                WORKFLOW_GROUP G
          WHERE G.WORKFLOW_GROUP_ID = ANWORKFLOWGROUPID
            AND W.WORK_FLOW_ID = G.WORK_FLOW_ID;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL );
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN LNRETVAL;
         WHEN OTHERS
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
      END;

        



      IF LSBOTHNULL = 'Y'
      THEN
         NULL;
      ELSE
         LNINSERTIND := 1;

         



         SELECT INTL
           INTO LSFROMINTL
           FROM SPECIFICATION_HEADER
          WHERE PART_NO = ASFROMPARTNO
            AND REVISION = ANFROMREVISION;

         
         LNPARTTYPE := NULL;

         BEGIN
            SELECT PART_TYPE
              INTO LNPARTTYPE
              FROM PART
             WHERE PART_NO = ASPARTNO;
         EXCEPTION
            WHEN OTHERS
            THEN
               LNPARTTYPE := NULL;
         END;

         
         
         IF LNPARTTYPE IS NULL
         THEN
            UPDATE PART
               SET PART_TYPE = ANSPECTYPEID
             WHERE PART_NO = ASPARTNO;
         END IF;

         
         
         LSPARTSOURCE := F_PART_SOURCE( ASPARTNO );

         IF ASDESCRIPTION IS NULL
         THEN
            LSDESCRIPTION := F_PART_DESCR( 0,
                                           ASPARTNO );
         ELSE
            LSDESCRIPTION := ASDESCRIPTION;
            LSALLOWDESCRCHANGE := GETCONFIGURATIONSETTING( 'allow_descr_change' );

            IF    LSPARTSOURCE = IAPICONSTANT.PARTSOURCE_INTERNAL
               OR (     LSPARTSOURCE <> IAPICONSTANT.PARTSOURCE_INTERNAL
                    AND LSALLOWDESCRCHANGE = '1' )
            THEN
               UPDATE PART
                  SET DESCRIPTION = ASDESCRIPTION
                WHERE PART_NO = ASPARTNO;
            END IF;
         END IF;

         




          UPDATE SPECIFICATION_HEADER
               SET STATUS = LNINITIALSTATUS,
                   DESCRIPTION = LSDESCRIPTION,
                   FRAME_ID = ARFROMFRAME.FRAMENO,
                   FRAME_REV = ARFROMFRAME.REVISION,
                   FRAME_OWNER = ARFROMFRAME.OWNER,
                   WORKFLOW_GROUP_ID = ANWORKFLOWGROUPID,
                   ACCESS_GROUP = ANACCESSGROUPID,
                   CLASS3_ID = ANSPECTYPEID,
                   PLANNED_EFFECTIVE_DATE = ADPLANNEDEFFECTIVEDATE,
                   
                   
                   
                   
                   
                   
                   INTL = ASINTERNATIONAL,
                   INT_PART_NO = DECODE( ANINTERNATIONALLINKED,
                                         1, DECODE( LSFROMINTL,
                                         '1', ASFROMPARTNO,
                                          ASINTERNATIONALPARTNO ),
                                          NULL ),
                   INT_PART_REV = DECODE( ANINTERNATIONALLINKED,
                                          1, DECODE( LSFROMINTL,
                                          '1', ANFROMREVISION,
                                          ANINTERNATIONALREVISION ),
                                          NULL ),
                   MULTILANG = LNMULTILANG,
                   UOM_TYPE = ANUOMTYPE,
                   MASK_ID = LNVIEW
          WHERE PART_NO = ASPARTNO
           AND REVISION = ANREVISION;

























































         DELETE FROM ITSHDESCR_L
         WHERE PART_NO = ASPARTNO
           AND REVISION = ANREVISION;

         INSERT INTO ITSHDESCR_L
                     ( PART_NO,
                       REVISION,
                       LANG_ID,
                       DESCRIPTION )
            ( SELECT PART_NO,
                     ANREVISION,
                     LANG_ID,
                     DESCRIPTION
               FROM PART_L
              WHERE PART_NO = ASPARTNO );

         



         LNRETVAL := CHECKREGIONALGLOBAL( ASPARTNO,
                                          ANREVISION,
                                          LNVIEW,
                                          LNALLOWVAL );

         IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN LNRETVAL;
         END IF;

         IF LNVIEW IS NULL
         THEN
            UPDATE SPECIFICATION_HEADER
               SET MASK_ID = LNVIEW
             WHERE PART_NO = ASPARTNO
               AND REVISION = ANREVISION;
         END IF;

         LNINSERTIND := 2;
         



         DELETE FROM ITSHEXT
         WHERE PART_NO = ASPARTNO
           AND REVISION = ANREVISION;

         INSERT INTO ITSHEXT
                     ( PART_NO,
                       REVISION,
                       SECTION_ID,
                       SUB_SECTION_ID,
                       TYPE,
                       REF_ID,
                       REF_VER,
                       REF_OWNER,
                       PROPERTY_GROUP,
                       PROPERTY,
                       ATTRIBUTE )
            SELECT ASPARTNO,
                   ANREVISION,
                   SECTION_ID,
                   SUB_SECTION_ID,
                   TYPE,
                   REF_ID,
                   REF_VER,
                   REF_OWNER,
                   PROPERTY_GROUP,
                   PROPERTY,
                   ATTRIBUTE
              FROM ITSHEXT
             WHERE PART_NO = ASFROMPARTNO
               AND REVISION = ANFROMREVISION;

         



          
          
          
          
          
          
          
          
          
          
          
          
         DELETE FROM SPECIFICATION_SECTION
         WHERE PART_NO = ASPARTNO
          AND REVISION = ANREVISION;

         INSERT INTO SPECIFICATION_SECTION
                     ( PART_NO,
                       REVISION,
                       SECTION_ID,
                       SECTION_REV,
                       SUB_SECTION_ID,
                       SUB_SECTION_REV,
                       TYPE,
                       REF_ID,
                       REF_VER,
                       REF_INFO,
                       REF_OWNER,
                       SEQUENCE_NO,
                       HEADER,
                       MANDATORY,
                       SECTION_SEQUENCE_NO,
                       DISPLAY_FORMAT,
                       DISPLAY_FORMAT_REV,
                       INTL )
            SELECT ASPARTNO,
                   ANREVISION,
                   SECTION_ID,

                   
                   F_GET_REV('sc', SECTION_ID, 0),

                   SUB_SECTION_ID,

                   
                   F_GET_REV('sb', SUB_SECTION_ID, 0),

                   TYPE,
                   REF_ID,
                   REF_VER,
                   REF_INFO,
                   REF_OWNER,
                   SEQUENCE_NO,
                   HEADER,
                   MANDATORY,
                   SECTION_SEQUENCE_NO,
                   DECODE( TYPE,
                           IAPICONSTANT.SECTIONTYPE_BOM, NULL,
                           DISPLAY_FORMAT ),
                   DECODE( TYPE,
                           IAPICONSTANT.SECTIONTYPE_BOM, 0,
                           DISPLAY_FORMAT_REV ),
                   INTL
              FROM SPECIFICATION_SECTION
             WHERE PART_NO = ASFROMPARTNO
               AND REVISION = ANFROMREVISION

             


                AND (SECTION_ID,






                   SUB_SECTION_ID

                   )
                       IN (SELECT SECTION_ID,






                       SUB_SECTION_ID

                       FROM FRAME_SECTION
                           WHERE FRAME_NO = ARFRAME.FRAMENO
                           AND REVISION = ARFRAME.REVISION
                           AND OWNER = ARFRAME.OWNER);




         
         LNRETVAL := UPDATELAYOUT( ASPARTNO,
                                   ANREVISION,
                                   1 );

         IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN LNRETVAL;
         END IF;

         LNINSERTIND := 4;

         



         DELETE FROM SPECIFICATION_PROP
         WHERE PART_NO = ASPARTNO
          AND REVISION = ANREVISION;

         INSERT INTO SPECIFICATION_PROP
                     ( PART_NO,
                       REVISION,
                       SECTION_ID,
                       SECTION_REV,
                       SUB_SECTION_ID,
                       SUB_SECTION_REV,
                       PROPERTY_GROUP,
                       PROPERTY_GROUP_REV,
                       PROPERTY,
                       PROPERTY_REV,
                       ATTRIBUTE,
                       ATTRIBUTE_REV,
                       UOM_ID,
                       UOM_REV,
                       TEST_METHOD,
                       TEST_METHOD_REV,
                       SEQUENCE_NO,
                       ASSOCIATION,
                       ASSOCIATION_REV,
                       INTL,
                       NUM_1,
                       NUM_2,
                       NUM_3,
                       NUM_4,
                       NUM_5,
                       NUM_6,
                       NUM_7,
                       NUM_8,
                       NUM_9,
                       NUM_10,
                       CHAR_1,
                       CHAR_2,
                       CHAR_3,
                       CHAR_4,
                       CHAR_5,
                       CHAR_6,
                       BOOLEAN_1,
                       BOOLEAN_2,
                       BOOLEAN_3,
                       BOOLEAN_4,
                       DATE_1,
                       DATE_2,
                       CHARACTERISTIC,
                       CHARACTERISTIC_REV,
                       INFO,
                       UOM_ALT_ID,
                       UOM_ALT_REV,
                       TM_DET_1,
                       TM_DET_2,
                       TM_DET_3,
                       TM_DET_4,
                       TM_SET_NO,
                       CH_2,
                       CH_REV_2,
                       CH_3,
                       CH_REV_3,
                       AS_2,
                       AS_REV_2,
                       AS_3,
                       AS_REV_3 )
            SELECT ASPARTNO,
                   ANREVISION,
                   SECTION_ID,
                   SECTION_REV,
                   SUB_SECTION_ID,
                   SUB_SECTION_REV,
                   PROPERTY_GROUP,
                   PROPERTY_GROUP_REV,
                   PROPERTY,
                   PROPERTY_REV,
                   ATTRIBUTE,
                   ATTRIBUTE_REV,
                   UOM_ID,
                   UOM_REV,
                   TEST_METHOD,
                   
                   
                   0,
                   
                   SEQUENCE_NO,
                   ASSOCIATION,
                   ASSOCIATION_REV,
                   INTL,
                   NUM_1,
                   NUM_2,
                   NUM_3,
                   NUM_4,
                   NUM_5,
                   NUM_6,
                   NUM_7,
                   NUM_8,
                   NUM_9,
                   NUM_10,
                   CHAR_1,
                   CHAR_2,
                   CHAR_3,
                   CHAR_4,
                   CHAR_5,
                   CHAR_6,
                   BOOLEAN_1,
                   BOOLEAN_2,
                   BOOLEAN_3,
                   BOOLEAN_4,
                   DATE_1,
                   DATE_2,
                   CHARACTERISTIC,
                   CHARACTERISTIC_REV,
                   INFO,
                   UOM_ALT_ID,
                   UOM_ALT_REV,
                   TM_DET_1,
                   TM_DET_2,
                   TM_DET_3,
                   TM_DET_4,
                   TM_SET_NO,
                   CH_2,
                   CH_REV_2,
                   CH_3,
                   CH_REV_3,
                   AS_2,
                   AS_REV_2,
                   AS_3,
                   AS_REV_3
              FROM SPECIFICATION_PROP A
             WHERE PART_NO = ASFROMPARTNO
               AND REVISION = ANFROMREVISION;

         DELETE FROM SPECIFICATION_TM
         WHERE PART_NO = ASPARTNO
          AND REVISION = ANREVISION;

         INSERT INTO SPECIFICATION_TM
                     ( PART_NO,
                       REVISION,
                       SECTION_ID,
                       SUB_SECTION_ID,
                       PROPERTY_GROUP,
                       PROPERTY,
                       ATTRIBUTE,
                       SEQ_NO,
                       TM_TYPE,
                       TM,
                       TM_REV,
                       TM_SET_NO )
            SELECT ASPARTNO,
                   ANREVISION,
                   SECTION_ID,
                   SUB_SECTION_ID,
                   PROPERTY_GROUP,
                   PROPERTY,
                   ATTRIBUTE,
                   SEQ_NO,
                   TM_TYPE,
                   TM,
                   TM_REV,
                   TM_SET_NO
              FROM SPECIFICATION_TM A
             WHERE PART_NO = ASFROMPARTNO
               AND REVISION = ANFROMREVISION;

         IF LNMULTILANG = 1
         THEN
            



            DELETE FROM SPECIFICATION_PROP_LANG
            WHERE PART_NO = ASPARTNO
             AND REVISION = ANREVISION;

            INSERT INTO SPECIFICATION_PROP_LANG
                        ( PART_NO,
                          REVISION,
                          SECTION_ID,
                          SUB_SECTION_ID,
                          PROPERTY_GROUP,
                          PROPERTY,
                          ATTRIBUTE,
                          SEQUENCE_NO,
                          LANG_ID,
                          INTL,
                          CHAR_1,
                          CHAR_2,
                          CHAR_3,
                          CHAR_4,
                          CHAR_5,
                          CHAR_6,
                          INFO )
               SELECT ASPARTNO,
                      ANREVISION,
                      SECTION_ID,
                      SUB_SECTION_ID,
                      PROPERTY_GROUP,
                      PROPERTY,
                      ATTRIBUTE,
                      SEQUENCE_NO,
                      LANG_ID,
                      INTL,
                      CHAR_1,
                      CHAR_2,
                      CHAR_3,
                      CHAR_4,
                      CHAR_5,
                      CHAR_6,
                      INFO
                 FROM SPECIFICATION_PROP_LANG A
                WHERE PART_NO = ASFROMPARTNO
                  AND REVISION = ANFROMREVISION;
         END IF;

         LNINSERTIND := 5;

         



         DELETE FROM SPECIFICATION_TEXT
         WHERE PART_NO = ASPARTNO
          AND REVISION = ANREVISION;

         IF LNMULTILANG = 1
         THEN
            FOR C4REC IN CUR_TEXT_ML
            LOOP
               INSERT INTO SPECIFICATION_TEXT
                           ( PART_NO,
                             REVISION,
                             SECTION_ID,
                             SECTION_REV,
                             SUB_SECTION_ID,
                             SUB_SECTION_REV,
                             TEXT_TYPE,
                             TEXT,
                             TEXT_TYPE_REV,
                             LANG_ID )
                    VALUES ( ASPARTNO,
                             ANREVISION,
                             C4REC.SECTION_ID,
                             C4REC.SECTION_REV,
                             C4REC.SUB_SECTION_ID,
                             C4REC.SUB_SECTION_REV,
                             C4REC.TEXT_TYPE,
                             C4REC.TEXT,
                             C4REC.TEXT_TYPE_REV,
                             C4REC.LANG_ID );
            END LOOP;
         ELSE
            FOR C4REC IN CUR_TEXT_SL
            LOOP
               INSERT INTO SPECIFICATION_TEXT
                           ( PART_NO,
                             REVISION,
                             SECTION_ID,
                             SECTION_REV,
                             SUB_SECTION_ID,
                             SUB_SECTION_REV,
                             TEXT_TYPE,
                             TEXT,
                             TEXT_TYPE_REV )
                    VALUES ( ASPARTNO,
                             ANREVISION,
                             C4REC.SECTION_ID,
                             C4REC.SECTION_REV,
                             C4REC.SUB_SECTION_ID,
                             C4REC.SUB_SECTION_REV,
                             C4REC.TEXT_TYPE,
                             C4REC.TEXT,
                             C4REC.TEXT_TYPE_REV );
            END LOOP;
         END IF;

         LNINSERTIND := 71;
         



         DELETE FROM SPECIFICATION_LINE
         WHERE PART_NO = ASPARTNO
          AND REVISION = ANREVISION;

         FOR REC_SPEC_LINE IN CUR_SPEC_LINE
         LOOP
            IF REC_SPEC_LINE.ITEM_PART_NO IS NULL
            THEN
               LSITEMPART := NULL;
               LNITEMREV := NULL;
            ELSIF REC_SPEC_LINE.ITEM_PART_NO = ASFROMPARTNO
            THEN
               LSITEMPART := ASPARTNO;
               LNITEMREV := ANREVISION;
            ELSE
               LSITEMPART := REC_SPEC_LINE.ITEM_PART_NO;
               LNITEMREV := REC_SPEC_LINE.ITEM_REVISION;
            END IF;

            INSERT INTO SPECIFICATION_LINE
                        ( PART_NO,
                          REVISION,
                          PLANT,
                          LINE,
                          CONFIGURATION,
                          PROCESS_LINE_REV,
                          ITEM_PART_NO,
                          ITEM_REVISION,
                          SEQUENCE )
                 VALUES ( ASPARTNO,
                          ANREVISION,
                          REC_SPEC_LINE.PLANT,
                          REC_SPEC_LINE.LINE,
                          REC_SPEC_LINE.CONFIGURATION,
                          REC_SPEC_LINE.PROCESS_LINE_REV,
                          LSITEMPART,
                          LNITEMREV,
                          REC_SPEC_LINE.SEQUENCE );
         END LOOP;

         LNINSERTIND := 8;

         



         DELETE FROM SPECIFICATION_STAGE
         WHERE PART_NO = ASPARTNO
          AND REVISION = ANREVISION;

         INSERT INTO SPECIFICATION_STAGE
                     ( PART_NO,
                       REVISION,
                       PLANT,
                       LINE,
                       CONFIGURATION,
                       PROCESS_LINE_REV,
                       STAGE,
                       SEQUENCE_NO,
                       RECIRCULATE_TO,
                       TEXT_TYPE,
                       DISPLAY_FORMAT,
                       DISPLAY_FORMAT_REV )
            SELECT   ASPARTNO,
                     ANREVISION,
                     PLANT,
                     LINE,
                     CONFIGURATION,
                     PROCESS_LINE_REV,
                     STAGE,
                     SEQUENCE_NO,
                     RECIRCULATE_TO,
                     TEXT_TYPE,
                     DISPLAY_FORMAT,
                     MAX( B.REVISION )
                FROM SPECIFICATION_STAGE A,
                     LAYOUT B
               WHERE A.PART_NO = ASFROMPARTNO
                 AND A.REVISION = ANFROMREVISION
                 AND A.DISPLAY_FORMAT = B.LAYOUT_ID
                 AND B.STATUS = 2
            GROUP BY PLANT,
                     LINE,
                     CONFIGURATION,
                     PROCESS_LINE_REV,
                     STAGE,
                     SEQUENCE_NO,
                     RECIRCULATE_TO,
                     TEXT_TYPE,
                     DISPLAY_FORMAT;

         
         LNRETVAL := IAPISPECIFICATION.UPDATELAYOUT( ASPARTNO,
                                   ANREVISION,
                                   2 );

         IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN LNRETVAL;
         END IF;

         LNINSERTIND := 81;
         



         DELETE FROM SPECIFICATION_LINE_PROP
         WHERE PART_NO = ASPARTNO
          AND REVISION = ANREVISION;

         INSERT INTO SPECIFICATION_LINE_PROP
                     ( PART_NO,
                       REVISION,
                       SECTION_ID,
                       SECTION_REV,
                       SUB_SECTION_ID,
                       SUB_SECTION_REV,
                       PLANT,
                       LINE,
                       LINE_REV,
                       CONFIGURATION,
                       PROCESS_LINE_REV,
                       STAGE,
                       STAGE_REV,
                       PROPERTY,
                       PROPERTY_REV,
                       ATTRIBUTE,
                       ATTRIBUTE_REV,
                       UOM_ID,
                       UOM_REV,
                       TEST_METHOD,
                       TEST_METHOD_REV,
                       SEQUENCE_NO,
                       ASSOCIATION,
                       ASSOCIATION_REV,
                       INTL,
                       NUM_1,
                       NUM_2,
                       NUM_3,
                       NUM_4,
                       NUM_5,
                       NUM_6,
                       NUM_7,
                       NUM_8,
                       NUM_9,
                       NUM_10,
                       CHAR_1,
                       CHAR_2,
                       CHAR_3,
                       CHAR_4,
                       CHAR_5,
                       CHAR_6,
                       BOOLEAN_1,
                       BOOLEAN_2,
                       BOOLEAN_3,
                       BOOLEAN_4,
                       DATE_1,
                       DATE_2,
                       TEXT,
                       VALUE_TYPE,
                       CHARACTERISTIC,
                       CHARACTERISTIC_REV,
                       COMPONENT_PART,
                       QUANTITY,
                       UOM,
                       ALTERNATIVE,
                       BOM_USAGE )
            SELECT ASPARTNO,
                   ANREVISION,
                   SECTION_ID,
                   SECTION_REV,
                   SUB_SECTION_ID,
                   SUB_SECTION_REV,
                   PLANT,
                   LINE,
                   LINE_REV,
                   CONFIGURATION,
                   PROCESS_LINE_REV,
                   STAGE,
                   STAGE_REV,
                   PROPERTY,
                   PROPERTY_REV,
                   ATTRIBUTE,
                   ATTRIBUTE_REV,
                   UOM_ID,
                   UOM_REV,
                   TEST_METHOD,
                   TEST_METHOD_REV,
                   SEQUENCE_NO,
                   ASSOCIATION,
                   ASSOCIATION_REV,
                   INTL,
                   NUM_1,
                   NUM_2,
                   NUM_3,
                   NUM_4,
                   NUM_5,
                   NUM_6,
                   NUM_7,
                   NUM_8,
                   NUM_9,
                   NUM_10,
                   CHAR_1,
                   CHAR_2,
                   CHAR_3,
                   CHAR_4,
                   CHAR_5,
                   CHAR_6,
                   BOOLEAN_1,
                   BOOLEAN_2,
                   BOOLEAN_3,
                   BOOLEAN_4,
                   DATE_1,
                   DATE_2,
                   TEXT,
                   VALUE_TYPE,
                   CHARACTERISTIC,
                   CHARACTERISTIC_REV,
                   COMPONENT_PART,
                   QUANTITY,
                   UOM,
                   ALTERNATIVE,
                   BOM_USAGE
              FROM SPECIFICATION_LINE_PROP
             WHERE PART_NO = ASFROMPARTNO
               AND REVISION = ANFROMREVISION;

         DELETE FROM ITSHLNPROPLANG
         WHERE PART_NO = ASPARTNO
          AND REVISION = ANREVISION;

         INSERT INTO ITSHLNPROPLANG
                     ( PART_NO,
                       REVISION,
                       PLANT,
                       LINE,
                       CONFIGURATION,
                       STAGE,
                       PROPERTY,
                       ATTRIBUTE,
                       SEQUENCE_NO,
                       CHAR_1,
                       CHAR_2,
                       CHAR_3,
                       CHAR_4,
                       CHAR_5,
                       CHAR_6,
                       TEXT,
                       LANG_ID )
            SELECT ASPARTNO,
                   ANREVISION,
                   PLANT,
                   LINE,
                   CONFIGURATION,
                   STAGE,
                   PROPERTY,
                   ATTRIBUTE,
                   SEQUENCE_NO,
                   CHAR_1,
                   CHAR_2,
                   CHAR_3,
                   CHAR_4,
                   CHAR_5,
                   CHAR_6,
                   TEXT,
                   LANG_ID
              FROM ITSHLNPROPLANG
             WHERE PART_NO = ASFROMPARTNO
               AND REVISION = ANFROMREVISION;

         LNINSERTIND := 82;

         



         DELETE FROM SPECIFICATION_LINE_TEXT
         WHERE PART_NO = ASPARTNO
          AND REVISION = ANREVISION;

         FOR C5REC IN C5
         LOOP
            INSERT INTO SPECIFICATION_LINE_TEXT
                        ( PART_NO,
                          REVISION,
                          PLANT,
                          LINE,
                          CONFIGURATION,
                          STAGE,
                          TEXT_TYPE,
                          TEXT,
                          LANG_ID )
                 VALUES ( ASPARTNO,
                          ANREVISION,
                          C5REC.PLANT,
                          C5REC.LINE,
                          C5REC.CONFIGURATION,
                          C5REC.STAGE,
                          C5REC.TEXT_TYPE,
                          C5REC.TEXT,
                          C5REC.LANG_ID );
         END LOOP;

         LNINSERTIND := 81;

         



         DELETE FROM ATTACHED_SPECIFICATION
         WHERE PART_NO = ASPARTNO
          AND REVISION = ANREVISION;

         INSERT INTO ATTACHED_SPECIFICATION
                     ( PART_NO,
                       REVISION,
                       SECTION_ID,
                       SUB_SECTION_ID,
                       REF_ID,
                       ATTACHED_PART_NO,
                       ATTACHED_REVISION,
                       INTL )
            SELECT ASPARTNO,
                   ANREVISION,
                   SECTION_ID,
                   SUB_SECTION_ID,
                   REF_ID,
                   ATTACHED_PART_NO,
                   ATTACHED_REVISION,
                   INTL
              FROM ATTACHED_SPECIFICATION
             WHERE PART_NO = ASFROMPARTNO
               AND REVISION = ANFROMREVISION;

         



         DELETE FROM SPECIFICATION_ING
         WHERE PART_NO = ASPARTNO
          AND REVISION = ANREVISION;

         FOR REC_ING IN CUR_ING
         LOOP
            




            
            LNINGREV := 0;

            INSERT INTO SPECIFICATION_ING
                        ( PART_NO,
                          REVISION,
                          SECTION_ID,
                          SUB_SECTION_ID,
                          INGREDIENT,
                          INGREDIENT_REV,
                          QUANTITY,
                          ING_LEVEL,
                          ING_COMMENT,
                          INTL,
                          SEQ_NO,
                          ACTIV_IND,
                          PID,
                          HIER_LEVEL,
                          RECFAC,
                          ING_SYNONYM,
                          ING_SYNONYM_REV,
                          INGDECLARE )
                 VALUES ( ASPARTNO,
                          ANREVISION,
                          REC_ING.SECTION_ID,
                          REC_ING.SUB_SECTION_ID,
                          REC_ING.INGREDIENT,
                          LNINGREV,
                          REC_ING.QUANTITY,
                          REC_ING.ING_LEVEL,
                          REC_ING.ING_COMMENT,
                          REC_ING.INTL,
                          REC_ING.SEQ_NO,
                          REC_ING.ACTIV_IND,
                          REC_ING.PID,
                          REC_ING.HIER_LEVEL,
                          REC_ING.RECFAC,
                          REC_ING.ING_SYNONYM,
                          
                          
                          0,
                          
                          REC_ING.INGDECLARE );
         END LOOP;

         DELETE FROM SPECIFICATION_ING_LANG
         WHERE PART_NO = ASPARTNO
          AND REVISION = ANREVISION;

         FOR REC_ING IN CUR_ING_LANG
         LOOP
            INSERT INTO SPECIFICATION_ING_LANG
                        ( PART_NO,
                          REVISION,
                          SECTION_ID,
                          SUB_SECTION_ID,
                          LANG_ID,
                          PID,
                          HIER_LEVEL,
                          INGREDIENT,
                          ING_LEVEL,
                          ING_COMMENT,
                          SEQ_NO )
                 VALUES ( ASPARTNO,
                          ANREVISION,
                          REC_ING.SECTION_ID,
                          REC_ING.SUB_SECTION_ID,
                          REC_ING.LANG_ID,
                          REC_ING.PID,
                          REC_ING.HIER_LEVEL,
                          REC_ING.INGREDIENT,
                          REC_ING.ING_LEVEL,
                          REC_ING.ING_COMMENT,
                          REC_ING.SEQ_NO );
         END LOOP;

        
         FOR REC_ING_ALLRG IN CUR_ING_ALLRG
         LOOP
            INSERT INTO ITSPECINGALLERGEN
                        ( PART_NO,
                          REVISION,
                          SECTION_ID,
                          SUB_SECTION_ID,
                          INGREDIENT,
                          ALLERGEN )
                 VALUES ( ASPARTNO,
                          ANREVISION,
                          REC_ING_ALLRG.SECTION_ID,
                          REC_ING_ALLRG.SUB_SECTION_ID,
                          REC_ING_ALLRG.INGREDIENT,
                          REC_ING_ALLRG.ALLERGEN);
         END LOOP;
         

        
         FOR REC_ING_DETAIL IN CUR_ING_DETAIL
         LOOP
            INSERT INTO ITSPECINGDETAIL
                        ( PART_NO,
                          REVISION,
                          SECTION_ID,
                          SUB_SECTION_ID,
                          INGREDIENT,
                          INGREDIENT_SEQ_NO,
                          INGDETAIL_CHARACTERISTIC,
                          INGDETAIL_TYPE,
                          MANDATORY ) 
                 VALUES ( ASPARTNO,
                          ANREVISION,
                          REC_ING_DETAIL.SECTION_ID,
                          REC_ING_DETAIL.SUB_SECTION_ID,
                          REC_ING_DETAIL.INGREDIENT,
                          REC_ING_DETAIL.INGREDIENT_SEQ_NO,
                          REC_ING_DETAIL.INGDETAIL_CHARACTERISTIC,
                          REC_ING_DETAIL.INGDETAIL_TYPE,
                          REC_ING_DETAIL.MANDATORY); 
         END LOOP;
         

         DELETE ITSPECINGDETAIL
          WHERE PART_NO = ASPARTNO
            AND REVISION = ANREVISION
            AND MANDATORY = 'Y';

          DELETE ITSPECINGDETAIL
           WHERE (PART_NO,
                  REVISION,
                  INGREDIENT,
                  INGDETAIL_TYPE,
                  INGDETAIL_CHARACTERISTIC) IN
                       (SELECT A.PART_NO,
                               A.REVISION,
                               A.INGREDIENT,
                               A.INGDETAIL_TYPE,
                               A.INGDETAIL_CHARACTERISTIC
                          FROM ITSPECINGDETAIL A, ITINGDETAILCONFIG_CHARASSOC B
                         WHERE     A.PART_NO = ASPARTNO
                               AND A.REVISION = ANREVISION
                               AND A.INGREDIENT = B.INGREDIENT
                               AND A.INGDETAIL_TYPE = B.INGDETAIL_TYPE
                               AND A.INGDETAIL_CHARACTERISTIC =
                                     B.INGDETAIL_CHARACTERISTIC
                               );

         




         DELETE FROM ITSHBN
         WHERE PART_NO = ASPARTNO
          AND REVISION = ANREVISION;


         LNRETVAL := COPYBASENAME( ASPARTNO,
                                   ANREVISION,
                                   ASFROMPARTNO,
                                   ANFROMREVISION,
                                   ARFRAME.FRAMENO,
                                   ARFRAME.REVISION,
                                   ARFRAME.OWNER );

         IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
         THEN
                 IAPIGENERAL.LOGERROR( GSSOURCE,
                                       LSMETHOD,
                                       IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN LNRETVAL;
         END IF;























         



         IF ASPARTNO <> ASFROMPARTNO
         THEN
            DELETE FROM SPECIFICATION_KW
            WHERE PART_NO = ASPARTNO;

            INSERT INTO SPECIFICATION_KW
                        ( PART_NO,
                          KW_ID,
                          KW_VALUE,
                          INTL )
               SELECT ASPARTNO,
                      KW_ID,
                      KW_VALUE,
                      INTL
                 FROM SPECIFICATION_KW S
                WHERE S.PART_NO = ASFROMPARTNO
                  AND ( S.KW_ID, S.KW_VALUE ) NOT IN( SELECT T.KW_ID,
                                                             T.KW_VALUE
                                                       FROM SPECIFICATION_KW T
                                                      WHERE T.PART_NO = ASPARTNO )
                  AND S.KW_ID NOT IN( SELECT KW_ID
                                       FROM ITKW
                                      WHERE KW_TYPE = 2 );

            
            DELETE FROM SPECIFICATION_KW_H
                  WHERE PART_NO = ASPARTNO;
         END IF;

         



         IF ASPARTNO <> ASFROMPARTNO
         THEN
            DELETE FROM ITPROBJ
            WHERE PART_NO = ASPARTNO
             AND REVISION = ANREVISION;

            INSERT INTO ITPROBJ
                        ( PART_NO,
                          OBJECT_ID,
                          REVISION,
                          OWNER,
                          INTL )
               SELECT ASPARTNO,
                      OBJECT_ID,
                      REVISION,
                      OWNER,
                      DECODE( ASINTERNATIONAL,
                              '1', INTL,
                              '0' )
                 FROM ITPROBJ S
                WHERE S.PART_NO = ASFROMPARTNO
                  AND ( S.OBJECT_ID, S.REVISION, S.OWNER ) NOT IN( SELECT T.OBJECT_ID,
                                                                          T.REVISION,
                                                                          T.OWNER
                                                                    FROM ITPROBJ T
                                                                   WHERE T.PART_NO = ASPARTNO );

            
            DELETE FROM ITPROBJ_H
                  WHERE PART_NO = ASPARTNO;
         END IF;

         



         IF ASPARTNO <> ASFROMPARTNO
         THEN
            DELETE FROM ITPRNOTE
                  WHERE PART_NO = ASPARTNO;

            FOR REC_NOTE IN CUR_NOTE
            LOOP
               INSERT INTO ITPRNOTE
                           ( PART_NO,
                             TEXT )
                    VALUES ( ASPARTNO,
                             REC_NOTE.TEXT );
            END LOOP;

            
            DELETE FROM ITPRNOTE_H
                  WHERE PART_NO = ASPARTNO;
         END IF;

         


         BEGIN
            SELECT C.TYPE
              INTO LSPREVTYPE
              FROM PART A,
                   CLASS3 C
             WHERE PART_NO = ASFROMPARTNO
               AND A.PART_TYPE = C.CLASS;
         EXCEPTION
            WHEN OTHERS
            THEN
               LSPREVTYPE := '';
         END;

         BEGIN
            SELECT C.TYPE
              INTO LNNEXTTYPE
              FROM PART A,
                   CLASS3 C
             WHERE PART_NO = ASPARTNO
               AND A.PART_TYPE = C.CLASS;
         EXCEPTION
            WHEN OTHERS
            THEN
               LNNEXTTYPE := '';
         END;

         IF LNNEXTTYPE <> LSPREVTYPE
         THEN
            BEGIN
               DELETE      ITPRCL
                     WHERE PART_NO = ASPARTNO;
            EXCEPTION
               WHEN OTHERS
               THEN
                  
                 IAPIGENERAL.LOGERROR( GSSOURCE,
                                       LSMETHOD,
                                       SQLERRM );
                 RETURN IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL );

            END;
         ELSE
            BEGIN
               IF ASPARTNO <> ASFROMPARTNO
               THEN
                  DELETE      ITPRCL
                        WHERE PART_NO = ASPARTNO;

                  INSERT INTO ITPRCL
                              ( PART_NO,
                                HIER_LEVEL,
                                MATL_CLASS_ID,
                                CODE,
                                TYPE )
                     SELECT ASPARTNO,
                            HIER_LEVEL,
                            MATL_CLASS_ID,
                            CODE,
                            TYPE
                       FROM ITPRCL
                      WHERE PART_NO = ASFROMPARTNO;

                  DELETE FROM ITPRCL_H
                  WHERE PART_NO = ASPARTNO;

                  INSERT INTO ITPRCL_H
                              ( PART_NO,
                                HIER_LEVEL,
                                MATL_CLASS_ID,
                                CODE,
                                TYPE,
                                LAST_MODIFIED_ON,
                                LAST_MODIFIED_BY,
                                FORENAME,
                                LAST_NAME )
                     SELECT ASPARTNO,
                            HIER_LEVEL,
                            MATL_CLASS_ID,
                            CODE,
                            TYPE,
                            SYSDATE,
                            IAPIGENERAL.SESSION.APPLICATIONUSER.USERID,
                            IAPIGENERAL.SESSION.APPLICATIONUSER.FORENAME,
                            IAPIGENERAL.SESSION.APPLICATIONUSER.LASTNAME
                       FROM ITPRCL_H
                      WHERE PART_NO = ASFROMPARTNO
                        AND LAST_MODIFIED_ON IN( SELECT MAX( LAST_MODIFIED_ON )
                                                  FROM ITPRCL_H
                                                 WHERE PART_NO = ASFROMPARTNO );
               END IF;
            EXCEPTION
               WHEN OTHERS
               THEN
                  IAPIGENERAL.LOGERROR( GSSOURCE,
                                        LSMETHOD,
                                        SQLERRM );
                  RETURN( IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL ) );
            
            END;
         END IF;

         



         LNINSERTIND := 15;
         
         LSPARTSOURCE := F_PART_SOURCE( ASPARTNO );

         IF ASPARTNO <> ASFROMPARTNO
         THEN
            
            
            IF LSPARTSOURCE = 'I-S'
            THEN
               FOR REC_PLANT IN CUR_PLANT
               LOOP
                  BEGIN
                      INSERT INTO PART_PLANT
                                  ( PART_NO,
                                    PLANT,
                                    COMPONENT_SCRAP,
                                    LEAD_TIME_OFFSET,
                                    RELEVENCY_TO_COSTING,
                                    BULK_MATERIAL,
                                    ITEM_CATEGORY )
                           VALUES ( REC_PLANT.ASPARTNO,
                                    REC_PLANT.PLANT,
                                    0,
                                    0,
                                    'Y',
                                    'N',
                                    'L' );
                  EXCEPTION
                    WHEN DUP_VAL_ON_INDEX
                    THEN
                         
                         NULL;
                  END;
               END LOOP;
            ELSE
               FOR REC_PLANT IN IS_PLANT
               LOOP
                  BEGIN
                      INSERT INTO PART_PLANT
                                  ( PART_NO,
                                    PLANT,
                                    COMPONENT_SCRAP,
                                    LEAD_TIME_OFFSET,
                                    RELEVENCY_TO_COSTING,
                                    BULK_MATERIAL,
                                    ITEM_CATEGORY )
                           VALUES ( REC_PLANT.ASPARTNO,
                                    REC_PLANT.PLANT,
                                    0,
                                    0,
                                    'Y',
                                    'N',
                                    'L' );
                  EXCEPTION
                  WHEN DUP_VAL_ON_INDEX
                  THEN
                     
                     NULL;
                  END;
               END LOOP;
            END IF;
         END IF;

         



         
         
         
         LSFROMSOURCE := F_PART_SOURCE( ASFROMPARTNO );
         

         
         
         BEGIN
            SELECT PLANNED_EFFECTIVE_DATE
              INTO LDOLDPED
              FROM SPECIFICATION_HEADER
             WHERE PART_NO = ASFROMPARTNO
               AND REVISION = ANFROMREVISION;
         EXCEPTION
            WHEN OTHERS
            THEN
               LDOLDPED := LDPLANNEDEFFECTIVEDATE;
         END;

         DELETE FROM BOM_ITEM
         WHERE PART_NO = ASPARTNO
          AND REVISION = ANREVISION;

         DELETE FROM BOM_HEADER
         WHERE PART_NO = ASPARTNO
          AND REVISION = ANREVISION;

         IF     LSFROMSOURCE = IAPICONSTANT.PARTSOURCE_INTERNAL
            AND LSPARTSOURCE = 'MFG'
         THEN
            
            IF ANREVISION = 1
            THEN

               
               INSERT INTO BOM_HEADER
                  SELECT ASPARTNO,
                         ANREVISION,
                         PLANT,
                         ALTERNATIVE,
                         BASE_QUANTITY,
                         DESCRIPTION,
                         YIELD,
                         CONV_FACTOR,
                         TO_UNIT,
                         CALC_FLAG,
                         'FQ',
                         BOM_USAGE,
                         MIN_QTY,
                         MAX_QTY,
                         F_SET_PED( PLANT_EFFECTIVE_DATE,
                                    LDOLDPED,
                                    ADPLANNEDEFFECTIVEDATE,
                                    ASFROMPARTNO,
                                    ASPARTNO ),
                         PREFERRED
                    FROM BOM_HEADER A
                   WHERE PART_NO = ASFROMPARTNO
                     AND REVISION = ANFROMREVISION
                     AND EXISTS( SELECT PART_NO,
                                        PLANT
                                  FROM PART_PLANT
                                 WHERE PART_NO = ASPARTNO
                                   AND PLANT = A.PLANT );

               




               INSERT INTO BOM_ITEM
                           ( PART_NO,
                             REVISION,
                             PLANT,
                             ALTERNATIVE,
                             ITEM_NUMBER,
                             COMPONENT_PART,
                             COMPONENT_REVISION,
                             COMPONENT_PLANT,
                             QUANTITY,
                             UOM,
                             CONV_FACTOR,
                             TO_UNIT,
                             YIELD,
                             ASSEMBLY_SCRAP,
                             COMPONENT_SCRAP,
                             LEAD_TIME_OFFSET,
                             RELEVENCY_TO_COSTING,
                             BULK_MATERIAL,
                             ITEM_CATEGORY,
                             ISSUE_LOCATION,
                             CALC_FLAG,
                             BOM_ITEM_TYPE,
                             OPERATIONAL_STEP,
                             BOM_USAGE,
                             MIN_QTY,
                             MAX_QTY,
                             FIXED_QTY,
                             CHAR_1,
                             CHAR_2,
                             CODE,
                             ALT_GROUP,
                             ALT_PRIORITY,
                             NUM_1,
                             NUM_2,
                             NUM_3,
                             NUM_4,
                             NUM_5,
                             CHAR_3,
                             CHAR_4,
                             CHAR_5,
                             BOOLEAN_1,
                             BOOLEAN_2,
                             BOOLEAN_3,
                             BOOLEAN_4,
                             DATE_1,
                             DATE_2,
                             CH_1,
                             CH_REV_1,
                             CH_2,
                             CH_REV_2,
                             CH_3,
                             CH_REV_3,
                             MAKE_UP,
                             INTL_EQUIVALENT )
                  SELECT ASPARTNO,
                         ANREVISION,
                         PLANT,
                         ALTERNATIVE,
                         ITEM_NUMBER,
                         COMPONENT_PART,
                         COMPONENT_REVISION,
                         COMPONENT_PLANT,
                         QUANTITY,
                         UOM,
                         CONV_FACTOR,
                         TO_UNIT,
                         YIELD,
                         ASSEMBLY_SCRAP,
                         COMPONENT_SCRAP,
                         LEAD_TIME_OFFSET,
                         RELEVENCY_TO_COSTING,
                         BULK_MATERIAL,
                         ITEM_CATEGORY,
                         ISSUE_LOCATION,
                         CALC_FLAG,
                         BOM_ITEM_TYPE,
                         OPERATIONAL_STEP,
                         BOM_USAGE,
                         MIN_QTY,
                         MAX_QTY,
                         FIXED_QTY,
                         CHAR_1,
                         CHAR_2,
                         CODE,
                         ALT_GROUP,
                         ALT_PRIORITY,
                         NUM_1,
                         NUM_2,
                         NUM_3,
                         NUM_4,
                         NUM_5,
                         CHAR_3,
                         CHAR_4,
                         CHAR_5,
                         BOOLEAN_1,
                         BOOLEAN_2,
                         BOOLEAN_3,
                         BOOLEAN_4,
                         DATE_1,
                         DATE_2,
                         CH_1,
                         0,
                         CH_2,
                         0,
                         CH_3,
                         0,
                         MAKE_UP,
                         DECODE( ANINTERNATIONALLINKED,
                                 1, INTL_EQUIVALENT,
                                 DECODE( ASINTERNATIONAL,
                                         '1', INTL_EQUIVALENT,
                                         NULL ) )
                    FROM BOM_ITEM A
                   WHERE PART_NO = ASFROMPARTNO
                     AND REVISION = ANFROMREVISION
                     AND EXISTS( SELECT PART_NO,
                                        PLANT
                                  FROM PART_PLANT
                                 WHERE PART_NO = ASPARTNO
                                   AND PLANT = A.PLANT );
            ELSE
               
               SELECT MAX( REVISION )
                 INTO LNLASTREVISION
                 FROM SPECIFICATION_HEADER
                WHERE PART_NO = ASPARTNO
                  AND REVISION < ANREVISION;

               
               INSERT INTO BOM_HEADER
                  SELECT ASPARTNO,
                         ANREVISION,
                         PLANT,
                         ALTERNATIVE,
                         BASE_QUANTITY,
                         DESCRIPTION,
                         YIELD,
                         CONV_FACTOR,
                         TO_UNIT,
                         CALC_FLAG,
                         'FQ',
                         BOM_USAGE,
                         MIN_QTY,
                         MAX_QTY,
                         F_SET_PED( PLANT_EFFECTIVE_DATE,
                                    LDOLDPED,
                                    ADPLANNEDEFFECTIVEDATE,
                                    ASPARTNO,
                                    ASPARTNO ),
                         PREFERRED
                    FROM BOM_HEADER A
                   WHERE PART_NO = ASPARTNO
                     AND REVISION = LNLASTREVISION
                     AND PLANT <> IAPICONSTANT.PLANT_INTERNATIONAL;

               
               INSERT INTO BOM_HEADER
                  SELECT ASPARTNO,
                         ANREVISION,
                         PLANT,
                         ALTERNATIVE,
                         BASE_QUANTITY,
                         DESCRIPTION,
                         YIELD,
                         CONV_FACTOR,
                         TO_UNIT,
                         CALC_FLAG,
                         'FQ',
                         BOM_USAGE,
                         MIN_QTY,
                         MAX_QTY,
                         F_SET_PED( PLANT_EFFECTIVE_DATE,
                                    LDOLDPED,
                                    ADPLANNEDEFFECTIVEDATE,
                                    ASPARTNO,
                                    ASPARTNO ),
                         PREFERRED
                    FROM BOM_HEADER A
                   WHERE PART_NO = ASFROMPARTNO
                     AND REVISION = ANFROMREVISION
                     AND PLANT = IAPICONSTANT.PLANT_INTERNATIONAL;

               



               INSERT INTO BOM_ITEM
                           ( PART_NO,
                             REVISION,
                             PLANT,
                             ALTERNATIVE,
                             ITEM_NUMBER,
                             COMPONENT_PART,
                             COMPONENT_REVISION,
                             COMPONENT_PLANT,
                             QUANTITY,
                             UOM,
                             CONV_FACTOR,
                             TO_UNIT,
                             YIELD,
                             ASSEMBLY_SCRAP,
                             COMPONENT_SCRAP,
                             LEAD_TIME_OFFSET,
                             RELEVENCY_TO_COSTING,
                             BULK_MATERIAL,
                             ITEM_CATEGORY,
                             ISSUE_LOCATION,
                             CALC_FLAG,
                             BOM_ITEM_TYPE,
                             OPERATIONAL_STEP,
                             BOM_USAGE,
                             MIN_QTY,
                             MAX_QTY,
                             FIXED_QTY,
                             CHAR_1,
                             CHAR_2,
                             CODE,
                             ALT_GROUP,
                             ALT_PRIORITY,
                             NUM_1,
                             NUM_2,
                             NUM_3,
                             NUM_4,
                             NUM_5,
                             CHAR_3,
                             CHAR_4,
                             CHAR_5,
                             BOOLEAN_1,
                             BOOLEAN_2,
                             BOOLEAN_3,
                             BOOLEAN_4,
                             DATE_1,
                             DATE_2,
                             CH_1,
                             CH_REV_1,
                             CH_2,
                             CH_REV_2,
                             CH_3,
                             CH_REV_3,
                             MAKE_UP,
                             INTL_EQUIVALENT )
                  SELECT ASPARTNO,
                         ANREVISION,
                         PLANT,
                         ALTERNATIVE,
                         ITEM_NUMBER,
                         COMPONENT_PART,
                         COMPONENT_REVISION,
                         COMPONENT_PLANT,
                         QUANTITY,
                         UOM,
                         CONV_FACTOR,
                         TO_UNIT,
                         YIELD,
                         ASSEMBLY_SCRAP,
                         COMPONENT_SCRAP,
                         LEAD_TIME_OFFSET,
                         RELEVENCY_TO_COSTING,
                         BULK_MATERIAL,
                         ITEM_CATEGORY,
                         ISSUE_LOCATION,
                         CALC_FLAG,
                         BOM_ITEM_TYPE,
                         OPERATIONAL_STEP,
                         BOM_USAGE,
                         MIN_QTY,
                         MAX_QTY,
                         FIXED_QTY,
                         CHAR_1,
                         CHAR_2,
                         CODE,
                         ALT_GROUP,
                         ALT_PRIORITY,
                         NUM_1,
                         NUM_2,
                         NUM_3,
                         NUM_4,
                         NUM_5,
                         CHAR_3,
                         CHAR_4,
                         CHAR_5,
                         BOOLEAN_1,
                         BOOLEAN_2,
                         BOOLEAN_3,
                         BOOLEAN_4,
                         DATE_1,
                         DATE_2,
                         CH_1,
                         0,
                         CH_2,
                         0,
                         CH_3,
                         0,
                         MAKE_UP,
                         DECODE( ANINTERNATIONALLINKED,
                                 1, INTL_EQUIVALENT,
                                 DECODE( ASINTERNATIONAL,
                                         '1', INTL_EQUIVALENT,
                                         NULL ) )
                    FROM BOM_ITEM A
                   WHERE PART_NO = ASPARTNO
                     AND REVISION = LNLASTREVISION
                     AND PLANT <> IAPICONSTANT.PLANT_INTERNATIONAL;

               
               INSERT INTO BOM_ITEM
                           ( PART_NO,
                             REVISION,
                             PLANT,
                             ALTERNATIVE,
                             ITEM_NUMBER,
                             COMPONENT_PART,
                             COMPONENT_REVISION,
                             COMPONENT_PLANT,
                             QUANTITY,
                             UOM,
                             CONV_FACTOR,
                             TO_UNIT,
                             YIELD,
                             ASSEMBLY_SCRAP,
                             COMPONENT_SCRAP,
                             LEAD_TIME_OFFSET,
                             RELEVENCY_TO_COSTING,
                             BULK_MATERIAL,
                             ITEM_CATEGORY,
                             ISSUE_LOCATION,
                             CALC_FLAG,
                             BOM_ITEM_TYPE,
                             OPERATIONAL_STEP,
                             BOM_USAGE,
                             MIN_QTY,
                             MAX_QTY,
                             FIXED_QTY,
                             CHAR_1,
                             CHAR_2,
                             CODE,
                             ALT_GROUP,
                             ALT_PRIORITY,
                             NUM_1,
                             NUM_2,
                             NUM_3,
                             NUM_4,
                             NUM_5,
                             CHAR_3,
                             CHAR_4,
                             CHAR_5,
                             BOOLEAN_1,
                             BOOLEAN_2,
                             BOOLEAN_3,
                             BOOLEAN_4,
                             DATE_1,
                             DATE_2,
                             CH_1,
                             CH_REV_1,
                             CH_2,
                             CH_REV_2,
                             CH_3,
                             CH_REV_3,
                             MAKE_UP,
                             INTL_EQUIVALENT )
                  SELECT ASPARTNO,
                         ANREVISION,
                         PLANT,
                         ALTERNATIVE,
                         ITEM_NUMBER,
                         COMPONENT_PART,
                         COMPONENT_REVISION,
                         COMPONENT_PLANT,
                         QUANTITY,
                         UOM,
                         CONV_FACTOR,
                         TO_UNIT,
                         YIELD,
                         ASSEMBLY_SCRAP,
                         COMPONENT_SCRAP,
                         LEAD_TIME_OFFSET,
                         RELEVENCY_TO_COSTING,
                         BULK_MATERIAL,
                         ITEM_CATEGORY,
                         ISSUE_LOCATION,
                         CALC_FLAG,
                         BOM_ITEM_TYPE,
                         OPERATIONAL_STEP,
                         BOM_USAGE,
                         MIN_QTY,
                         MAX_QTY,
                         FIXED_QTY,
                         CHAR_1,
                         CHAR_2,
                         CODE,
                         ALT_GROUP,
                         ALT_PRIORITY,
                         NUM_1,
                         NUM_2,
                         NUM_3,
                         NUM_4,
                         NUM_5,
                         CHAR_3,
                         CHAR_4,
                         CHAR_5,
                         BOOLEAN_1,
                         BOOLEAN_2,
                         BOOLEAN_3,
                         BOOLEAN_4,
                         DATE_1,
                         DATE_2,
                         CH_1,
                         0,
                         CH_2,
                         0,
                         CH_3,
                         0,
                         MAKE_UP,
                         DECODE( ANINTERNATIONALLINKED,
                                 1, INTL_EQUIVALENT,
                                 DECODE( ASINTERNATIONAL,
                                         '1', INTL_EQUIVALENT,
                                         NULL ) )
                    FROM BOM_ITEM A
                   WHERE PART_NO = ASFROMPARTNO
                     AND REVISION = ANFROMREVISION
                     AND PLANT = IAPICONSTANT.PLANT_INTERNATIONAL;
            END IF;
         ELSE
            INSERT INTO BOM_HEADER
               SELECT ASPARTNO,
                      ANREVISION,
                      PLANT,
                      ALTERNATIVE,
                      BASE_QUANTITY,
                      DESCRIPTION,
                      YIELD,
                      CONV_FACTOR,
                      TO_UNIT,
                      CALC_FLAG,
                      BOM_TYPE,
                      BOM_USAGE,
                      MIN_QTY,
                      MAX_QTY,
                      F_SET_PED( PLANT_EFFECTIVE_DATE,
                                 LDOLDPED,
                                 ADPLANNEDEFFECTIVEDATE,
                                 ASFROMPARTNO,
                                 ASPARTNO ),
                      PREFERRED
                 FROM BOM_HEADER A
                WHERE PART_NO = ASFROMPARTNO
                  AND REVISION = ANFROMREVISION
                  AND EXISTS( SELECT PART_NO,
                                     PLANT
                               FROM PART_PLANT
                              WHERE PART_NO = ASPARTNO
                                AND PLANT = A.PLANT );

            INSERT INTO BOM_ITEM
                        ( PART_NO,
                          REVISION,
                          PLANT,
                          ALTERNATIVE,
                          ITEM_NUMBER,
                          COMPONENT_PART,
                          COMPONENT_REVISION,
                          COMPONENT_PLANT,
                          QUANTITY,
                          UOM,
                          CONV_FACTOR,
                          TO_UNIT,
                          YIELD,
                          ASSEMBLY_SCRAP,
                          COMPONENT_SCRAP,
                          LEAD_TIME_OFFSET,
                          RELEVENCY_TO_COSTING,
                          BULK_MATERIAL,
                          ITEM_CATEGORY,
                          ISSUE_LOCATION,
                          CALC_FLAG,
                          BOM_ITEM_TYPE,
                          OPERATIONAL_STEP,
                          BOM_USAGE,
                          MIN_QTY,
                          MAX_QTY,
                          FIXED_QTY,
                          CHAR_1,
                          CHAR_2,
                          CODE,
                          ALT_GROUP,
                          ALT_PRIORITY,
                          NUM_1,
                          NUM_2,
                          NUM_3,
                          NUM_4,
                          NUM_5,
                          CHAR_3,
                          CHAR_4,
                          CHAR_5,
                          BOOLEAN_1,
                          BOOLEAN_2,
                          BOOLEAN_3,
                          BOOLEAN_4,
                          DATE_1,
                          DATE_2,
                          CH_1,
                          CH_REV_1,
                          CH_2,
                          CH_REV_2,
                          CH_3,
                          CH_REV_3,
                          MAKE_UP,
                          INTL_EQUIVALENT )
               SELECT ASPARTNO,
                      ANREVISION,
                      PLANT,
                      ALTERNATIVE,
                      ITEM_NUMBER,
                      COMPONENT_PART,
                      COMPONENT_REVISION,
                      COMPONENT_PLANT,
                      QUANTITY,
                      UOM,
                      CONV_FACTOR,
                      TO_UNIT,
                      YIELD,
                      ASSEMBLY_SCRAP,
                      COMPONENT_SCRAP,
                      LEAD_TIME_OFFSET,
                      RELEVENCY_TO_COSTING,
                      BULK_MATERIAL,
                      ITEM_CATEGORY,
                      ISSUE_LOCATION,
                      CALC_FLAG,
                      BOM_ITEM_TYPE,
                      OPERATIONAL_STEP,
                      BOM_USAGE,
                      MIN_QTY,
                      MAX_QTY,
                      FIXED_QTY,
                      CHAR_1,
                      CHAR_2,
                      CODE,
                      ALT_GROUP,
                      ALT_PRIORITY,
                      NUM_1,
                      NUM_2,
                      NUM_3,
                      NUM_4,
                      NUM_5,
                      CHAR_3,
                      CHAR_4,
                      CHAR_5,
                      BOOLEAN_1,
                      BOOLEAN_2,
                      BOOLEAN_3,
                      BOOLEAN_4,
                      DATE_1,
                      DATE_2,
                      CH_1,
                      0,
                      CH_2,
                      0,
                      CH_3,
                      0,
                      MAKE_UP,
                      DECODE( ANINTERNATIONALLINKED,
                              1, INTL_EQUIVALENT,
                              DECODE( ASINTERNATIONAL,
                                      '1', INTL_EQUIVALENT,
                                      NULL ) )
                 FROM BOM_ITEM A
                WHERE PART_NO = ASFROMPARTNO
                  AND REVISION = ANFROMREVISION
                  AND EXISTS( SELECT PART_NO,
                                     PLANT
                               FROM PART_PLANT
                              WHERE PART_NO = ASPARTNO
                                AND PLANT = A.PLANT );
         END IF;

         
         SELECT COUNT( * )
           INTO LNCOUNT
           FROM BOM_HEADER
          WHERE PART_NO = ASPARTNO
            AND REVISION = ANREVISION
            AND PLANT_EFFECTIVE_DATE <> ADPLANNEDEFFECTIVEDATE;

         IF LNCOUNT <> 0
         THEN
            UPDATE SPECIFICATION_HEADER
               SET PED_IN_SYNC = 'N'
             WHERE PART_NO = ASPARTNO
               AND REVISION = ANREVISION;
         ELSE
            UPDATE SPECIFICATION_HEADER
               SET PED_IN_SYNC = 'Y'
             WHERE PART_NO = ASPARTNO
               AND REVISION = ANREVISION;
         END IF;

         
         DELETE FROM ITPRMFC
         WHERE PART_NO = ASPARTNO
          AND REVISION = ANREVISION;

         BEGIN
            INSERT INTO ITPRMFC
                        ( PART_NO,
                          MFC_ID,
                          MPL_ID,
                          CLEARANCE_NO,
                          TRADE_NAME,
                          AUDIT_DATE,
                          AUDIT_FREQ,
                          INTL,
                          PRODUCT_CODE,
                          APPROVAL_DATE,
                          REVISION,
                          OBJECT_ID,
                          OBJECT_REVISION,
                          OBJECT_OWNER )
               SELECT ASPARTNO,
                      MFC_ID,
                      MPL_ID,
                      CLEARANCE_NO,
                      TRADE_NAME,
                      AUDIT_DATE,
                      AUDIT_FREQ,
                      INTL,
                      PRODUCT_CODE,
                      APPROVAL_DATE,
                      REVISION,
                      OBJECT_ID,
                      OBJECT_REVISION,
                      OBJECT_OWNER
                 FROM ITPRMFC
                WHERE PART_NO = ASFROMPARTNO;

            IF ASPARTNO <> ASFROMPARTNO
            THEN
               
               DELETE FROM ITPRMFC_H
                     WHERE PART_NO = ASPARTNO;
            END IF;
         EXCEPTION
            WHEN DUP_VAL_ON_INDEX
            THEN
               NULL;
         END;

         LNINSERTIND := 11;

         DELETE FROM REASON
         WHERE PART_NO = ASPARTNO
          AND REVISION = ANREVISION;

         
         
         SELECT REASON_SEQ.NEXTVAL
           INTO LNREASONID
           FROM DUAL;

         INSERT INTO REASON
                     ( ID,
                       PART_NO,
                       REVISION,
                       STATUS_TYPE,
                       TEXT )
              VALUES ( LNREASONID,
                       ASPARTNO,
                       ANREVISION,
                       IAPICONSTANT.STATUSTYPE_REASONFORSTATUSCHNG,
                       '' );
         
         

         SELECT REASON_SEQ.NEXTVAL
           INTO LNREASONID
           FROM DUAL;

         INSERT INTO REASON
                     ( ID,
                       PART_NO,
                       REVISION,
                       STATUS_TYPE,
                       TEXT )
              VALUES ( LNREASONID,
                       ASPARTNO,
                       ANREVISION,
                       IAPICONSTANT.STATUSTYPE_REASONFORISSUE,
                       '' );
      END IF;   

      LNINSERTIND := 12;
      



      DELETE FROM STATUS_HISTORY
      WHERE PART_NO = ASPARTNO
       AND REVISION = ANREVISION;

      LNRETVAL := INSERTSTATUSHISTORY( ASPARTNO,
                                       ANREVISION,
                                       LNINITIALSTATUS,
                                       LDSTATUSDATETIME );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN LNRETVAL;
      END IF;

      LNINSERTIND := 13;
      LNRETVAL := IAPIEMAIL.REGISTEREMAIL( ASPARTNO,
                                           ANREVISION,
                                           LNINITIALSTATUS,
                                           LDSTATUSDATETIME,
                                           'S',
                                           NULL,
                                           NULL,
                                           LNREASONID,
                                           NULL,
                                           AQERRORS );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IF ( LNRETVAL = IAPICONSTANTDBERROR.DBERR_ERRORLIST )
         THEN
            RETURN( IAPICONSTANTDBERROR.DBERR_ERRORLIST );
         ELSE
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN( LNRETVAL );
         END IF;
      END IF;

      
      SELECT FRAME_ID,
             FRAME_REV,
             FRAME_OWNER,
             UOM_TYPE
        INTO LSOLDFRAMENO,
             LNOLDFRAMEREV,
             LNOLDFRAMEOWNER,
             LNOLDUOMTYPE
        FROM SPECIFICATION_HEADER
       WHERE PART_NO = ASFROMPARTNO
         AND REVISION = ANFROMREVISION;




















































































































    
    
    
    
      IF ANUOMTYPE <> LNOLDUOMTYPE
      THEN
         
         
         
         LBTEMPMETRIC := IAPIGENERAL.SESSION.SETTINGS.METRIC;
         
         IAPIGENERAL.SESSION.SETTINGS.METRIC :=( ANUOMTYPE = 0 );
         
         
         

         FOR REC_PG IN CUR_PG( ANREVISION )
         LOOP
            IF REC_PG.UOM_ALT_ID IS NOT NULL
            THEN
               UPDATE SPECIFICATION_PROP
                  SET NUM_1 =
                         F_METRIC( REC_PG.NUM_1,
                                   REC_PG.UOM_ID,
                                   REC_PG.UOM_ALT_ID,
                                   ASPARTNO,
                                   ANREVISION,
                                   1,
                                   NULL,
                                   REC_PG.INTL,
                                   '0',
                                   '0',
                                   
                                   

                                   ANUOMTYPE,
                                   LNOLDUOMTYPE ),
                                   
                                   
                      NUM_2 =
                         F_METRIC( REC_PG.NUM_2,
                                   REC_PG.UOM_ID,
                                   REC_PG.UOM_ALT_ID,
                                   ASPARTNO,
                                   ANREVISION,
                                   1,
                                   NULL,
                                   REC_PG.INTL,
                                   '0',
                                   '0',
                                   
                                   

                                   ANUOMTYPE,
                                   LNOLDUOMTYPE ),
                                   
                                   
                      NUM_3 =
                         F_METRIC( REC_PG.NUM_3,
                                   REC_PG.UOM_ID,
                                   REC_PG.UOM_ALT_ID,
                                   ASPARTNO,
                                   ANREVISION,
                                   1,
                                   NULL,
                                   REC_PG.INTL,
                                   '0',
                                   '0',
                                   
                                   

                                   ANUOMTYPE,
                                   LNOLDUOMTYPE ),
                                   
                                   
                      NUM_4 =
                         F_METRIC( REC_PG.NUM_4,
                                   REC_PG.UOM_ID,
                                   REC_PG.UOM_ALT_ID,
                                   ASPARTNO,
                                   ANREVISION,
                                   1,
                                   NULL,
                                   REC_PG.INTL,
                                   '0',
                                   '0',
                                   
                                   

                                   ANUOMTYPE,
                                   LNOLDUOMTYPE ),
                                   
                                   
                      NUM_5 =
                         F_METRIC( REC_PG.NUM_5,
                                   REC_PG.UOM_ID,
                                   REC_PG.UOM_ALT_ID,
                                   ASPARTNO,
                                   ANREVISION,
                                   1,
                                   NULL,
                                   REC_PG.INTL,
                                   '0',
                                   '0',
                                   
                                   

                                   ANUOMTYPE,
                                   LNOLDUOMTYPE ),
                                   
                                   
                      NUM_6 =
                         F_METRIC( REC_PG.NUM_6,
                                   REC_PG.UOM_ID,
                                   REC_PG.UOM_ALT_ID,
                                   ASPARTNO,
                                   ANREVISION,
                                   1,
                                   NULL,
                                   REC_PG.INTL,
                                   '0',
                                   '0',
                                   
                                   

                                   ANUOMTYPE,
                                   LNOLDUOMTYPE ),
                                   
                                   
                      NUM_7 =
                         F_METRIC( REC_PG.NUM_7,
                                   REC_PG.UOM_ID,
                                   REC_PG.UOM_ALT_ID,
                                   ASPARTNO,
                                   ANREVISION,
                                   1,
                                   NULL,
                                   REC_PG.INTL,
                                   '0',
                                   '0',
                                   
                                   

                                   ANUOMTYPE,
                                   LNOLDUOMTYPE ),
                                   
                                   
                      NUM_8 =
                         F_METRIC( REC_PG.NUM_8,
                                   REC_PG.UOM_ID,
                                   REC_PG.UOM_ALT_ID,
                                   ASPARTNO,
                                   ANREVISION,
                                   1,
                                   NULL,
                                   REC_PG.INTL,
                                   '0',
                                   '0',
                                   
                                   

                                   ANUOMTYPE,
                                   LNOLDUOMTYPE ),
                                   
                                   
                      NUM_9 =
                         F_METRIC( REC_PG.NUM_9,
                                   REC_PG.UOM_ID,
                                   REC_PG.UOM_ALT_ID,
                                   ASPARTNO,
                                   ANREVISION,
                                   1,
                                   NULL,
                                   REC_PG.INTL,
                                   '0',
                                   '0',
                                   
                                   

                                   ANUOMTYPE,
                                   LNOLDUOMTYPE ),
                                   
                                   
                      NUM_10 =
                         F_METRIC( REC_PG.NUM_10,
                                   REC_PG.UOM_ID,
                                   REC_PG.UOM_ALT_ID,
                                   ASPARTNO,
                                   ANREVISION,
                                   1,
                                   NULL,
                                   REC_PG.INTL,
                                   '0',
                                   '0',
                                   
                                   

                                   ANUOMTYPE,
                                   LNOLDUOMTYPE )
                                   
                                   
                WHERE PART_NO = ASPARTNO
                  AND REVISION = ANREVISION
                  AND SECTION_ID = REC_PG.SECTION_ID
                  AND SUB_SECTION_ID = REC_PG.SUB_SECTION_ID
                  AND PROPERTY_GROUP = REC_PG.PROPERTY_GROUP
                  AND PROPERTY = REC_PG.PROPERTY
                  AND ATTRIBUTE = REC_PG.ATTRIBUTE;
            END IF;
         END LOOP;

         
         
         IAPIGENERAL.SESSION.SETTINGS.METRIC := LBTEMPMETRIC; 
         
         
      END IF;
    
    
    

      
      BEGIN
         LSALLOWSTAGE := GETCONFIGURATIONSETTING( 'process_allow_stages' );
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            LSALLOWSTAGE := 0;
      END;

      IF LSALLOWSTAGE = 0
      THEN
         BEGIN
            LNRETVAL := IAPISPECIFICATIONPROCESSDATA.SYNCHRONISEDATA( ASPARTNO,
                                                                      ANREVISION );

            IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
            THEN
               IAPIGENERAL.LOGERROR( GSSOURCE,
                                     LSMETHOD,
                                     IAPIGENERAL.GETLASTERRORTEXT( ) );
               RETURN LNRETVAL;
            END IF;
         EXCEPTION
            WHEN OTHERS
            THEN
               IAPIGENERAL.LOGERROR( GSSOURCE,
                                     LSMETHOD,
                                     SQLERRM );
               RETURN IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL );
         END;
      END IF;

      
      DELETE      ITSCHS
            WHERE PART_NO = ASPARTNO
              AND REVISION = ANREVISION;

      
      LNRETVAL := IAPIPLANTPART.SETPLANTACCESS( ASPARTNO );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
         IAPIGENERAL.LOGERROR( GSSOURCE,
                               LSMETHOD,
                               IAPIGENERAL.GETLASTERRORTEXT( ) );
         RETURN LNRETVAL;
      END IF;

      


      BEGIN
         
         SELECT COUNT( * )
           INTO LNCOUNTER
           FROM SPECDATA_SERVER
          WHERE PART_NO = ASPARTNO
            AND REVISION = ANREVISION
            AND SECTION_ID IS NULL
            AND DATE_PROCESSED IS NULL;

         IF LNCOUNTER = 0
         THEN
            INSERT INTO SPECDATA_SERVER
                        ( PART_NO,
                          REVISION )
                 VALUES ( ASPARTNO,
                          ANREVISION );
         END IF;
      EXCEPTION
         WHEN OTHERS
         THEN
            NULL;
      END;

      























































      RETURN IAPICONSTANTDBERROR.DBERR_SUCCESS;
   EXCEPTION
      
      WHEN OTHERS
      THEN
         
         

        IAPIGENERAL.LOGERROR( GSSOURCE,
                              LSMETHOD,
                              SQLERRM );

         IF LNINSERTIND = 1
         THEN
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  SQLERRM );
            RETURN IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL );
         ELSIF LNINSERTIND = 2
         THEN
            LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_INTEGRITYVIOLATION,
                                                  'Specification Text' );
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN LNRETVAL;
         ELSIF LNINSERTIND = 3
         THEN
            LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_INTEGRITYVIOLATION,
                                                  'Specification Property Group List' );
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN LNRETVAL;
         ELSIF LNINSERTIND = 4
         THEN
            LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_INTEGRITYVIOLATION,
                                                  'Specification Property' );
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN LNRETVAL;
         ELSIF LNINSERTIND = 5
         THEN
            LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_INTEGRITYVIOLATION,
                                                  'Specification XREF' );
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN LNRETVAL;
         ELSIF LNINSERTIND = 6
         THEN
            LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_INTEGRITYVIOLATION,
                                                  'Specification Clearance No' );
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN LNRETVAL;
         ELSIF LNINSERTIND = 7
         THEN
            LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_INTEGRITYVIOLATION,
                                                  'Specification Image' );
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN LNRETVAL;
         ELSIF LNINSERTIND = 8
         THEN
            LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_INTEGRITYVIOLATION,
                                                  'Specification Line' );
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN LNRETVAL;
         ELSIF LNINSERTIND = 9
         THEN
            LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_INTEGRITYVIOLATION,
                                                  'Specification Line Property' );
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN LNRETVAL;
         ELSIF LNINSERTIND = 10
         THEN
            LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_INTEGRITYVIOLATION,
                                                  'Bom Header' );
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN LNRETVAL;
         ELSIF LNINSERTIND = 11
         THEN
            LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_INTEGRITYVIOLATION,
                                                  'Bom Header Item' );
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN LNRETVAL;
         ELSIF LNINSERTIND = 12
         THEN
            LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_INTEGRITYVIOLATION,
                                                  'Status History' );
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN LNRETVAL;
         ELSIF LNINSERTIND = 13
         THEN
            LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_INTEGRITYVIOLATION,
                                                  'Email Message' );
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN LNRETVAL;
         ELSIF LNINSERTIND = 14
         THEN
            LNRETVAL := IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_INTEGRITYVIOLATION,
                                                  'Specification Ingridient' );
            IAPIGENERAL.LOGERROR( GSSOURCE,
                                  LSMETHOD,
                                  IAPIGENERAL.GETLASTERRORTEXT( ) );
            RETURN LNRETVAL;
         END IF;




































































































































































































































         RETURN IAPIGENERAL.SETERRORTEXT( IAPICONSTANTDBERROR.DBERR_GENFAIL );
   END COPYCONTENT;


  FUNCTION UPDATE_DISPLAY_FORMAT_STAGE(
      ASPARTNO                   IN       IAPITYPE.PARTNO_TYPE,
      ANREVISION                 IN      IAPITYPE.REVISION_TYPE )
      RETURN IAPITYPE.ERRORNUM_TYPE
   IS









      CURSOR CUR_PROPLST
      IS
         SELECT *
         FROM SPECIFICATION_STAGE
         WHERE PART_NO = ASPARTNO
         AND REVISION = ANREVISION;

     L_CURSORDF                                      IAPITYPE.REF_TYPE;
     L_PLANT                                         SPECIFICATION_STAGE.PLANT%TYPE;
     L_LINE                                          SPECIFICATION_STAGE.LINE%TYPE;
     L_STAGE                                         SPECIFICATION_STAGE.STAGE%TYPE;
     L_DISPLAY_FORMAT                                SPECIFICATION_STAGE.DISPLAY_FORMAT%TYPE;
     L_DISPLAY_FORMAT_REV                            IAPITYPE.REVISION_TYPE;
     LNRETVAL                                        IAPITYPE.ERRORNUM_TYPE;



   BEGIN
     IAPIGENERAL.LOGINFO( GSSOURCE,
                           'Update_display_format_stage',
                           'Body of FUNCTION',
                           IAPICONSTANT.INFOLEVEL_3 );

      IF IAPIGENERAL.SESSION.APPLICATIONUSER.USERID IS NULL
      THEN
         LNRETVAL := IAPIGENERAL.SETERRORTEXTANDLOGINFO( GSSOURCE,
                                                         'Update_display_format_stage',
                                                         IAPICONSTANTDBERROR.DBERR_NOINITSESSION );
         RETURN IAPICONSTANTDBERROR.DBERR_NOINITSESSION;
      END IF;


      LNRETVAL := EXISTID( ASPARTNO,
                           ANREVISION );

      IF ( LNRETVAL <> IAPICONSTANTDBERROR.DBERR_SUCCESS )
      THEN
        IAPIGENERAL.LOGERROR( GSSOURCE,
                              'Update_display_format_stage',
                              IAPIGENERAL.GETLASTERRORTEXT( ) );
        RETURN LNRETVAL;
      END IF;


      FOR L_CURSORDF IN CUR_PROPLST
      LOOP
             SELECT DISTINCT PLS.PLANT,
                             PLS.LINE,
                             PLS.STAGE,
                             PLS.DISPLAY_FORMAT,
                             PL.REVISION
               INTO L_PLANT,
                    L_LINE,
                    L_STAGE,
                    L_DISPLAY_FORMAT,
                    L_DISPLAY_FORMAT_REV
               FROM PROCESS_LINE_STAGE PLS, PROPERTY_LAYOUT PL
              WHERE PLS.PLANT = L_CURSORDF.PLANT
                     AND PLS.LINE = L_CURSORDF.LINE
                     AND PLS.STAGE = L_CURSORDF.STAGE
                     AND PL.LAYOUT_ID = PLS.DISPLAY_FORMAT
                     AND PL.REVISION = (SELECT MAX(L.REVISION)
                                        FROM PROCESS_LINE_STAGE PLS, PROPERTY_LAYOUT PL, LAYOUT L
                                         WHERE PLANT = L_CURSORDF.PLANT
                                           AND LINE = L_CURSORDF.LINE
                                           AND STAGE = L_CURSORDF.STAGE
                                           AND PL.LAYOUT_ID = PLS.DISPLAY_FORMAT
                                           AND PL.LAYOUT_ID = L.LAYOUT_ID
                                           AND L.STATUS = '2');

             UPDATE SPECIFICATION_STAGE
             SET
                 DISPLAY_FORMAT = L_DISPLAY_FORMAT,
                 DISPLAY_FORMAT_REV = L_DISPLAY_FORMAT_REV
             WHERE PART_NO = ASPARTNO
                   AND REVISION = ANREVISION
                   AND PLANT = L_PLANT
                   AND LINE = L_LINE
                   AND STAGE= L_STAGE;
      END LOOP;
      COMMIT;
      RETURN( IAPICONSTANTDBERROR.DBERR_SUCCESS );

      EXCEPTION WHEN OTHERS THEN
      BEGIN
          ROLLBACK;
          IAPIGENERAL.LOGERROR( GSSOURCE,
                          'Update_display_format_stage',
                          IAPIGENERAL.LASTERRORTEXT);
          LNRETVAL := IAPICONSTANTDBERROR.DBERR_GENFAIL;
      END;
   END UPDATE_DISPLAY_FORMAT_STAGE;

END IAPISPECIFICATION;